
LoRa-E5_weather_and_pollution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020e38  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000edc  08020f70  08020f70  00030f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  08021e4c  08021e4c  00031e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08021f0c  08021f0c  000405a4  2**0
                  CONTENTS
  5 .ARM          00000008  08021f0c  08021f0c  00031f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08021f14  08021f14  000405a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  08021f14  08021f14  00031f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08021f1c  08021f1c  00031f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000005a4  20000000  08021f20  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000025ec  200005a4  080224c4  000405a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002b90  080224c4  00042b90  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000405a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00051725  00000000  00000000  000405ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b8eb  00000000  00000000  00091cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003f18  00000000  00000000  0009d5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003a80  00000000  00000000  000a14f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b132  00000000  00000000  000a4f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004ac34  00000000  00000000  000d00aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9575  00000000  00000000  0011acde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001f4253  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00010988  00000000  00000000  001f42a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	200005a4 	.word	0x200005a4
 8000154:	00000000 	.word	0x00000000
 8000158:	08020f58 	.word	0x08020f58

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	200005a8 	.word	0x200005a8
 8000174:	08020f58 	.word	0x08020f58

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_fmul>:
 8000d40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d48:	bf1e      	ittt	ne
 8000d4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4e:	ea92 0f0c 	teqne	r2, ip
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d06f      	beq.n	8000e38 <__aeabi_fmul+0xf8>
 8000d58:	441a      	add	r2, r3
 8000d5a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5e:	0240      	lsls	r0, r0, #9
 8000d60:	bf18      	it	ne
 8000d62:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d66:	d01e      	beq.n	8000da6 <__aeabi_fmul+0x66>
 8000d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d6c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d70:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d74:	fba0 3101 	umull	r3, r1, r0, r1
 8000d78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d7c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d80:	bf3e      	ittt	cc
 8000d82:	0049      	lslcc	r1, r1, #1
 8000d84:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d88:	005b      	lslcc	r3, r3, #1
 8000d8a:	ea40 0001 	orr.w	r0, r0, r1
 8000d8e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d92:	2afd      	cmp	r2, #253	; 0xfd
 8000d94:	d81d      	bhi.n	8000dd2 <__aeabi_fmul+0x92>
 8000d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9e:	bf08      	it	eq
 8000da0:	f020 0001 	biceq.w	r0, r0, #1
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dae:	bf08      	it	eq
 8000db0:	0249      	lsleq	r1, r1, #9
 8000db2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dba:	3a7f      	subs	r2, #127	; 0x7f
 8000dbc:	bfc2      	ittt	gt
 8000dbe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc6:	4770      	bxgt	lr
 8000dc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	dc5d      	bgt.n	8000e90 <__aeabi_fmul+0x150>
 8000dd4:	f112 0f19 	cmn.w	r2, #25
 8000dd8:	bfdc      	itt	le
 8000dda:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dde:	4770      	bxle	lr
 8000de0:	f1c2 0200 	rsb	r2, r2, #0
 8000de4:	0041      	lsls	r1, r0, #1
 8000de6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dea:	f1c2 0220 	rsb	r2, r2, #32
 8000dee:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df6:	f140 0000 	adc.w	r0, r0, #0
 8000dfa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfe:	bf08      	it	eq
 8000e00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e04:	4770      	bx	lr
 8000e06:	f092 0f00 	teq	r2, #0
 8000e0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0e:	bf02      	ittt	eq
 8000e10:	0040      	lsleq	r0, r0, #1
 8000e12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e16:	3a01      	subeq	r2, #1
 8000e18:	d0f9      	beq.n	8000e0e <__aeabi_fmul+0xce>
 8000e1a:	ea40 000c 	orr.w	r0, r0, ip
 8000e1e:	f093 0f00 	teq	r3, #0
 8000e22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0049      	lsleq	r1, r1, #1
 8000e2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2e:	3b01      	subeq	r3, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xe6>
 8000e32:	ea41 010c 	orr.w	r1, r1, ip
 8000e36:	e78f      	b.n	8000d58 <__aeabi_fmul+0x18>
 8000e38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	bf18      	it	ne
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d00a      	beq.n	8000e5e <__aeabi_fmul+0x11e>
 8000e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e4c:	bf18      	it	ne
 8000e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	d1d8      	bne.n	8000e06 <__aeabi_fmul+0xc6>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	4770      	bx	lr
 8000e5e:	f090 0f00 	teq	r0, #0
 8000e62:	bf17      	itett	ne
 8000e64:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e68:	4608      	moveq	r0, r1
 8000e6a:	f091 0f00 	teqne	r1, #0
 8000e6e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e72:	d014      	beq.n	8000e9e <__aeabi_fmul+0x15e>
 8000e74:	ea92 0f0c 	teq	r2, ip
 8000e78:	d101      	bne.n	8000e7e <__aeabi_fmul+0x13e>
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	d10f      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e7e:	ea93 0f0c 	teq	r3, ip
 8000e82:	d103      	bne.n	8000e8c <__aeabi_fmul+0x14c>
 8000e84:	024b      	lsls	r3, r1, #9
 8000e86:	bf18      	it	ne
 8000e88:	4608      	movne	r0, r1
 8000e8a:	d108      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e8c:	ea80 0001 	eor.w	r0, r0, r1
 8000e90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9c:	4770      	bx	lr
 8000e9e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_fdiv>:
 8000ea8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb0:	bf1e      	ittt	ne
 8000eb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb6:	ea92 0f0c 	teqne	r2, ip
 8000eba:	ea93 0f0c 	teqne	r3, ip
 8000ebe:	d069      	beq.n	8000f94 <__aeabi_fdiv+0xec>
 8000ec0:	eba2 0203 	sub.w	r2, r2, r3
 8000ec4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec8:	0249      	lsls	r1, r1, #9
 8000eca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ece:	d037      	beq.n	8000f40 <__aeabi_fdiv+0x98>
 8000ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000edc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	bf38      	it	cc
 8000ee4:	005b      	lslcc	r3, r3, #1
 8000ee6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	bf24      	itt	cs
 8000ef2:	1a5b      	subcs	r3, r3, r1
 8000ef4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0a:	bf24      	itt	cs
 8000f0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f18:	bf24      	itt	cs
 8000f1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	bf18      	it	ne
 8000f26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2a:	d1e0      	bne.n	8000eee <__aeabi_fdiv+0x46>
 8000f2c:	2afd      	cmp	r2, #253	; 0xfd
 8000f2e:	f63f af50 	bhi.w	8000dd2 <__aeabi_fmul+0x92>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f38:	bf08      	it	eq
 8000f3a:	f020 0001 	biceq.w	r0, r0, #1
 8000f3e:	4770      	bx	lr
 8000f40:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f48:	327f      	adds	r2, #127	; 0x7f
 8000f4a:	bfc2      	ittt	gt
 8000f4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f54:	4770      	bxgt	lr
 8000f56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	3a01      	subs	r2, #1
 8000f60:	e737      	b.n	8000dd2 <__aeabi_fmul+0x92>
 8000f62:	f092 0f00 	teq	r2, #0
 8000f66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6a:	bf02      	ittt	eq
 8000f6c:	0040      	lsleq	r0, r0, #1
 8000f6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f72:	3a01      	subeq	r2, #1
 8000f74:	d0f9      	beq.n	8000f6a <__aeabi_fdiv+0xc2>
 8000f76:	ea40 000c 	orr.w	r0, r0, ip
 8000f7a:	f093 0f00 	teq	r3, #0
 8000f7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0049      	lsleq	r1, r1, #1
 8000f86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8a:	3b01      	subeq	r3, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xda>
 8000f8e:	ea41 010c 	orr.w	r1, r1, ip
 8000f92:	e795      	b.n	8000ec0 <__aeabi_fdiv+0x18>
 8000f94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d108      	bne.n	8000fb0 <__aeabi_fdiv+0x108>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	f47f af7d 	bne.w	8000e9e <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	f47f af70 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e776      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	d104      	bne.n	8000fc0 <__aeabi_fdiv+0x118>
 8000fb6:	024b      	lsls	r3, r1, #9
 8000fb8:	f43f af4c 	beq.w	8000e54 <__aeabi_fmul+0x114>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e76e      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc4:	bf18      	it	ne
 8000fc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fca:	d1ca      	bne.n	8000f62 <__aeabi_fdiv+0xba>
 8000fcc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd0:	f47f af5c 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fd4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd8:	f47f af3c 	bne.w	8000e54 <__aeabi_fmul+0x114>
 8000fdc:	e75f      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fde:	bf00      	nop

08000fe0 <__gesf2>:
 8000fe0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe4:	e006      	b.n	8000ff4 <__cmpsf2+0x4>
 8000fe6:	bf00      	nop

08000fe8 <__lesf2>:
 8000fe8:	f04f 0c01 	mov.w	ip, #1
 8000fec:	e002      	b.n	8000ff4 <__cmpsf2+0x4>
 8000fee:	bf00      	nop

08000ff0 <__cmpsf2>:
 8000ff0:	f04f 0c01 	mov.w	ip, #1
 8000ff4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ffc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001000:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001004:	bf18      	it	ne
 8001006:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100a:	d011      	beq.n	8001030 <__cmpsf2+0x40>
 800100c:	b001      	add	sp, #4
 800100e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001012:	bf18      	it	ne
 8001014:	ea90 0f01 	teqne	r0, r1
 8001018:	bf58      	it	pl
 800101a:	ebb2 0003 	subspl.w	r0, r2, r3
 800101e:	bf88      	it	hi
 8001020:	17c8      	asrhi	r0, r1, #31
 8001022:	bf38      	it	cc
 8001024:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001028:	bf18      	it	ne
 800102a:	f040 0001 	orrne.w	r0, r0, #1
 800102e:	4770      	bx	lr
 8001030:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001034:	d102      	bne.n	800103c <__cmpsf2+0x4c>
 8001036:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103a:	d105      	bne.n	8001048 <__cmpsf2+0x58>
 800103c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001040:	d1e4      	bne.n	800100c <__cmpsf2+0x1c>
 8001042:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001046:	d0e1      	beq.n	800100c <__cmpsf2+0x1c>
 8001048:	f85d 0b04 	ldr.w	r0, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <__aeabi_cfrcmple>:
 8001050:	4684      	mov	ip, r0
 8001052:	4608      	mov	r0, r1
 8001054:	4661      	mov	r1, ip
 8001056:	e7ff      	b.n	8001058 <__aeabi_cfcmpeq>

08001058 <__aeabi_cfcmpeq>:
 8001058:	b50f      	push	{r0, r1, r2, r3, lr}
 800105a:	f7ff ffc9 	bl	8000ff0 <__cmpsf2>
 800105e:	2800      	cmp	r0, #0
 8001060:	bf48      	it	mi
 8001062:	f110 0f00 	cmnmi.w	r0, #0
 8001066:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001068 <__aeabi_fcmpeq>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff fff4 	bl	8001058 <__aeabi_cfcmpeq>
 8001070:	bf0c      	ite	eq
 8001072:	2001      	moveq	r0, #1
 8001074:	2000      	movne	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmplt>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffea 	bl	8001058 <__aeabi_cfcmpeq>
 8001084:	bf34      	ite	cc
 8001086:	2001      	movcc	r0, #1
 8001088:	2000      	movcs	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmple>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffe0 	bl	8001058 <__aeabi_cfcmpeq>
 8001098:	bf94      	ite	ls
 800109a:	2001      	movls	r0, #1
 800109c:	2000      	movhi	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmpge>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffd2 	bl	8001050 <__aeabi_cfrcmple>
 80010ac:	bf94      	ite	ls
 80010ae:	2001      	movls	r0, #1
 80010b0:	2000      	movhi	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmpgt>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffc8 	bl	8001050 <__aeabi_cfrcmple>
 80010c0:	bf34      	ite	cc
 80010c2:	2001      	movcc	r0, #1
 80010c4:	2000      	movcs	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_f2iz>:
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d4:	d30f      	bcc.n	80010f6 <__aeabi_f2iz+0x2a>
 80010d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010de:	d90d      	bls.n	80010fc <__aeabi_f2iz+0x30>
 80010e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	bf18      	it	ne
 80010f2:	4240      	negne	r0, r0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0000 	mov.w	r0, #0
 80010fa:	4770      	bx	lr
 80010fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001100:	d101      	bne.n	8001106 <__aeabi_f2iz+0x3a>
 8001102:	0242      	lsls	r2, r0, #9
 8001104:	d105      	bne.n	8001112 <__aeabi_f2iz+0x46>
 8001106:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110a:	bf08      	it	eq
 800110c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001110:	4770      	bx	lr
 8001112:	f04f 0000 	mov.w	r0, #0
 8001116:	4770      	bx	lr

08001118 <__aeabi_f2uiz>:
 8001118:	0042      	lsls	r2, r0, #1
 800111a:	d20e      	bcs.n	800113a <__aeabi_f2uiz+0x22>
 800111c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001120:	d30b      	bcc.n	800113a <__aeabi_f2uiz+0x22>
 8001122:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001126:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112a:	d409      	bmi.n	8001140 <__aeabi_f2uiz+0x28>
 800112c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001130:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001134:	fa23 f002 	lsr.w	r0, r3, r2
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2uiz+0x32>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d102      	bne.n	8001150 <__aeabi_f2uiz+0x38>
 800114a:	f04f 30ff 	mov.w	r0, #4294967295
 800114e:	4770      	bx	lr
 8001150:	f04f 0000 	mov.w	r0, #0
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop

08001158 <__aeabi_uldivmod>:
 8001158:	b953      	cbnz	r3, 8001170 <__aeabi_uldivmod+0x18>
 800115a:	b94a      	cbnz	r2, 8001170 <__aeabi_uldivmod+0x18>
 800115c:	2900      	cmp	r1, #0
 800115e:	bf08      	it	eq
 8001160:	2800      	cmpeq	r0, #0
 8001162:	bf1c      	itt	ne
 8001164:	f04f 31ff 	movne.w	r1, #4294967295
 8001168:	f04f 30ff 	movne.w	r0, #4294967295
 800116c:	f000 b974 	b.w	8001458 <__aeabi_idiv0>
 8001170:	f1ad 0c08 	sub.w	ip, sp, #8
 8001174:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001178:	f000 f806 	bl	8001188 <__udivmoddi4>
 800117c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001184:	b004      	add	sp, #16
 8001186:	4770      	bx	lr

08001188 <__udivmoddi4>:
 8001188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800118c:	9e08      	ldr	r6, [sp, #32]
 800118e:	460d      	mov	r5, r1
 8001190:	4604      	mov	r4, r0
 8001192:	4688      	mov	r8, r1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d14d      	bne.n	8001234 <__udivmoddi4+0xac>
 8001198:	428a      	cmp	r2, r1
 800119a:	4694      	mov	ip, r2
 800119c:	d968      	bls.n	8001270 <__udivmoddi4+0xe8>
 800119e:	fab2 f282 	clz	r2, r2
 80011a2:	b152      	cbz	r2, 80011ba <__udivmoddi4+0x32>
 80011a4:	fa01 f302 	lsl.w	r3, r1, r2
 80011a8:	f1c2 0120 	rsb	r1, r2, #32
 80011ac:	fa20 f101 	lsr.w	r1, r0, r1
 80011b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011b4:	ea41 0803 	orr.w	r8, r1, r3
 80011b8:	4094      	lsls	r4, r2
 80011ba:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80011be:	0c21      	lsrs	r1, r4, #16
 80011c0:	fbb8 fef5 	udiv	lr, r8, r5
 80011c4:	fa1f f78c 	uxth.w	r7, ip
 80011c8:	fb05 831e 	mls	r3, r5, lr, r8
 80011cc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80011d0:	fb0e f107 	mul.w	r1, lr, r7
 80011d4:	4299      	cmp	r1, r3
 80011d6:	d90b      	bls.n	80011f0 <__udivmoddi4+0x68>
 80011d8:	eb1c 0303 	adds.w	r3, ip, r3
 80011dc:	f10e 30ff 	add.w	r0, lr, #4294967295
 80011e0:	f080 811e 	bcs.w	8001420 <__udivmoddi4+0x298>
 80011e4:	4299      	cmp	r1, r3
 80011e6:	f240 811b 	bls.w	8001420 <__udivmoddi4+0x298>
 80011ea:	f1ae 0e02 	sub.w	lr, lr, #2
 80011ee:	4463      	add	r3, ip
 80011f0:	1a5b      	subs	r3, r3, r1
 80011f2:	b2a4      	uxth	r4, r4
 80011f4:	fbb3 f0f5 	udiv	r0, r3, r5
 80011f8:	fb05 3310 	mls	r3, r5, r0, r3
 80011fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001200:	fb00 f707 	mul.w	r7, r0, r7
 8001204:	42a7      	cmp	r7, r4
 8001206:	d90a      	bls.n	800121e <__udivmoddi4+0x96>
 8001208:	eb1c 0404 	adds.w	r4, ip, r4
 800120c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001210:	f080 8108 	bcs.w	8001424 <__udivmoddi4+0x29c>
 8001214:	42a7      	cmp	r7, r4
 8001216:	f240 8105 	bls.w	8001424 <__udivmoddi4+0x29c>
 800121a:	4464      	add	r4, ip
 800121c:	3802      	subs	r0, #2
 800121e:	1be4      	subs	r4, r4, r7
 8001220:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001224:	2100      	movs	r1, #0
 8001226:	b11e      	cbz	r6, 8001230 <__udivmoddi4+0xa8>
 8001228:	40d4      	lsrs	r4, r2
 800122a:	2300      	movs	r3, #0
 800122c:	e9c6 4300 	strd	r4, r3, [r6]
 8001230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001234:	428b      	cmp	r3, r1
 8001236:	d908      	bls.n	800124a <__udivmoddi4+0xc2>
 8001238:	2e00      	cmp	r6, #0
 800123a:	f000 80ee 	beq.w	800141a <__udivmoddi4+0x292>
 800123e:	2100      	movs	r1, #0
 8001240:	e9c6 0500 	strd	r0, r5, [r6]
 8001244:	4608      	mov	r0, r1
 8001246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800124a:	fab3 f183 	clz	r1, r3
 800124e:	2900      	cmp	r1, #0
 8001250:	d14a      	bne.n	80012e8 <__udivmoddi4+0x160>
 8001252:	42ab      	cmp	r3, r5
 8001254:	d302      	bcc.n	800125c <__udivmoddi4+0xd4>
 8001256:	4282      	cmp	r2, r0
 8001258:	f200 80f9 	bhi.w	800144e <__udivmoddi4+0x2c6>
 800125c:	1a84      	subs	r4, r0, r2
 800125e:	eb65 0303 	sbc.w	r3, r5, r3
 8001262:	2001      	movs	r0, #1
 8001264:	4698      	mov	r8, r3
 8001266:	2e00      	cmp	r6, #0
 8001268:	d0e2      	beq.n	8001230 <__udivmoddi4+0xa8>
 800126a:	e9c6 4800 	strd	r4, r8, [r6]
 800126e:	e7df      	b.n	8001230 <__udivmoddi4+0xa8>
 8001270:	b902      	cbnz	r2, 8001274 <__udivmoddi4+0xec>
 8001272:	deff      	udf	#255	; 0xff
 8001274:	fab2 f282 	clz	r2, r2
 8001278:	2a00      	cmp	r2, #0
 800127a:	f040 8091 	bne.w	80013a0 <__udivmoddi4+0x218>
 800127e:	eba1 050c 	sub.w	r5, r1, ip
 8001282:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001286:	fa1f fe8c 	uxth.w	lr, ip
 800128a:	2101      	movs	r1, #1
 800128c:	fbb5 f3f7 	udiv	r3, r5, r7
 8001290:	fb07 5013 	mls	r0, r7, r3, r5
 8001294:	0c25      	lsrs	r5, r4, #16
 8001296:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800129a:	fb0e f003 	mul.w	r0, lr, r3
 800129e:	42a8      	cmp	r0, r5
 80012a0:	d908      	bls.n	80012b4 <__udivmoddi4+0x12c>
 80012a2:	eb1c 0505 	adds.w	r5, ip, r5
 80012a6:	f103 38ff 	add.w	r8, r3, #4294967295
 80012aa:	d202      	bcs.n	80012b2 <__udivmoddi4+0x12a>
 80012ac:	42a8      	cmp	r0, r5
 80012ae:	f200 80cb 	bhi.w	8001448 <__udivmoddi4+0x2c0>
 80012b2:	4643      	mov	r3, r8
 80012b4:	1a2d      	subs	r5, r5, r0
 80012b6:	b2a4      	uxth	r4, r4
 80012b8:	fbb5 f0f7 	udiv	r0, r5, r7
 80012bc:	fb07 5510 	mls	r5, r7, r0, r5
 80012c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012c4:	fb0e fe00 	mul.w	lr, lr, r0
 80012c8:	45a6      	cmp	lr, r4
 80012ca:	d908      	bls.n	80012de <__udivmoddi4+0x156>
 80012cc:	eb1c 0404 	adds.w	r4, ip, r4
 80012d0:	f100 35ff 	add.w	r5, r0, #4294967295
 80012d4:	d202      	bcs.n	80012dc <__udivmoddi4+0x154>
 80012d6:	45a6      	cmp	lr, r4
 80012d8:	f200 80bb 	bhi.w	8001452 <__udivmoddi4+0x2ca>
 80012dc:	4628      	mov	r0, r5
 80012de:	eba4 040e 	sub.w	r4, r4, lr
 80012e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012e6:	e79e      	b.n	8001226 <__udivmoddi4+0x9e>
 80012e8:	f1c1 0720 	rsb	r7, r1, #32
 80012ec:	408b      	lsls	r3, r1
 80012ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80012f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80012f6:	fa20 f407 	lsr.w	r4, r0, r7
 80012fa:	fa05 f301 	lsl.w	r3, r5, r1
 80012fe:	431c      	orrs	r4, r3
 8001300:	40fd      	lsrs	r5, r7
 8001302:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001306:	fa00 f301 	lsl.w	r3, r0, r1
 800130a:	fbb5 f8f9 	udiv	r8, r5, r9
 800130e:	0c20      	lsrs	r0, r4, #16
 8001310:	fa1f fe8c 	uxth.w	lr, ip
 8001314:	fb09 5518 	mls	r5, r9, r8, r5
 8001318:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800131c:	fb08 f00e 	mul.w	r0, r8, lr
 8001320:	42a8      	cmp	r0, r5
 8001322:	fa02 f201 	lsl.w	r2, r2, r1
 8001326:	d90b      	bls.n	8001340 <__udivmoddi4+0x1b8>
 8001328:	eb1c 0505 	adds.w	r5, ip, r5
 800132c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001330:	f080 8088 	bcs.w	8001444 <__udivmoddi4+0x2bc>
 8001334:	42a8      	cmp	r0, r5
 8001336:	f240 8085 	bls.w	8001444 <__udivmoddi4+0x2bc>
 800133a:	f1a8 0802 	sub.w	r8, r8, #2
 800133e:	4465      	add	r5, ip
 8001340:	1a2d      	subs	r5, r5, r0
 8001342:	b2a4      	uxth	r4, r4
 8001344:	fbb5 f0f9 	udiv	r0, r5, r9
 8001348:	fb09 5510 	mls	r5, r9, r0, r5
 800134c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8001350:	fb00 fe0e 	mul.w	lr, r0, lr
 8001354:	45ae      	cmp	lr, r5
 8001356:	d908      	bls.n	800136a <__udivmoddi4+0x1e2>
 8001358:	eb1c 0505 	adds.w	r5, ip, r5
 800135c:	f100 34ff 	add.w	r4, r0, #4294967295
 8001360:	d26c      	bcs.n	800143c <__udivmoddi4+0x2b4>
 8001362:	45ae      	cmp	lr, r5
 8001364:	d96a      	bls.n	800143c <__udivmoddi4+0x2b4>
 8001366:	3802      	subs	r0, #2
 8001368:	4465      	add	r5, ip
 800136a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800136e:	fba0 9402 	umull	r9, r4, r0, r2
 8001372:	eba5 050e 	sub.w	r5, r5, lr
 8001376:	42a5      	cmp	r5, r4
 8001378:	46c8      	mov	r8, r9
 800137a:	46a6      	mov	lr, r4
 800137c:	d356      	bcc.n	800142c <__udivmoddi4+0x2a4>
 800137e:	d053      	beq.n	8001428 <__udivmoddi4+0x2a0>
 8001380:	b15e      	cbz	r6, 800139a <__udivmoddi4+0x212>
 8001382:	ebb3 0208 	subs.w	r2, r3, r8
 8001386:	eb65 050e 	sbc.w	r5, r5, lr
 800138a:	fa05 f707 	lsl.w	r7, r5, r7
 800138e:	fa22 f301 	lsr.w	r3, r2, r1
 8001392:	40cd      	lsrs	r5, r1
 8001394:	431f      	orrs	r7, r3
 8001396:	e9c6 7500 	strd	r7, r5, [r6]
 800139a:	2100      	movs	r1, #0
 800139c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013a0:	f1c2 0320 	rsb	r3, r2, #32
 80013a4:	fa20 f103 	lsr.w	r1, r0, r3
 80013a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80013ac:	fa25 f303 	lsr.w	r3, r5, r3
 80013b0:	4095      	lsls	r5, r2
 80013b2:	430d      	orrs	r5, r1
 80013b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013b8:	fa1f fe8c 	uxth.w	lr, ip
 80013bc:	fbb3 f1f7 	udiv	r1, r3, r7
 80013c0:	fb07 3011 	mls	r0, r7, r1, r3
 80013c4:	0c2b      	lsrs	r3, r5, #16
 80013c6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80013ca:	fb01 f00e 	mul.w	r0, r1, lr
 80013ce:	4298      	cmp	r0, r3
 80013d0:	fa04 f402 	lsl.w	r4, r4, r2
 80013d4:	d908      	bls.n	80013e8 <__udivmoddi4+0x260>
 80013d6:	eb1c 0303 	adds.w	r3, ip, r3
 80013da:	f101 38ff 	add.w	r8, r1, #4294967295
 80013de:	d22f      	bcs.n	8001440 <__udivmoddi4+0x2b8>
 80013e0:	4298      	cmp	r0, r3
 80013e2:	d92d      	bls.n	8001440 <__udivmoddi4+0x2b8>
 80013e4:	3902      	subs	r1, #2
 80013e6:	4463      	add	r3, ip
 80013e8:	1a1b      	subs	r3, r3, r0
 80013ea:	b2ad      	uxth	r5, r5
 80013ec:	fbb3 f0f7 	udiv	r0, r3, r7
 80013f0:	fb07 3310 	mls	r3, r7, r0, r3
 80013f4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80013f8:	fb00 f30e 	mul.w	r3, r0, lr
 80013fc:	42ab      	cmp	r3, r5
 80013fe:	d908      	bls.n	8001412 <__udivmoddi4+0x28a>
 8001400:	eb1c 0505 	adds.w	r5, ip, r5
 8001404:	f100 38ff 	add.w	r8, r0, #4294967295
 8001408:	d216      	bcs.n	8001438 <__udivmoddi4+0x2b0>
 800140a:	42ab      	cmp	r3, r5
 800140c:	d914      	bls.n	8001438 <__udivmoddi4+0x2b0>
 800140e:	3802      	subs	r0, #2
 8001410:	4465      	add	r5, ip
 8001412:	1aed      	subs	r5, r5, r3
 8001414:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001418:	e738      	b.n	800128c <__udivmoddi4+0x104>
 800141a:	4631      	mov	r1, r6
 800141c:	4630      	mov	r0, r6
 800141e:	e707      	b.n	8001230 <__udivmoddi4+0xa8>
 8001420:	4686      	mov	lr, r0
 8001422:	e6e5      	b.n	80011f0 <__udivmoddi4+0x68>
 8001424:	4618      	mov	r0, r3
 8001426:	e6fa      	b.n	800121e <__udivmoddi4+0x96>
 8001428:	454b      	cmp	r3, r9
 800142a:	d2a9      	bcs.n	8001380 <__udivmoddi4+0x1f8>
 800142c:	ebb9 0802 	subs.w	r8, r9, r2
 8001430:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001434:	3801      	subs	r0, #1
 8001436:	e7a3      	b.n	8001380 <__udivmoddi4+0x1f8>
 8001438:	4640      	mov	r0, r8
 800143a:	e7ea      	b.n	8001412 <__udivmoddi4+0x28a>
 800143c:	4620      	mov	r0, r4
 800143e:	e794      	b.n	800136a <__udivmoddi4+0x1e2>
 8001440:	4641      	mov	r1, r8
 8001442:	e7d1      	b.n	80013e8 <__udivmoddi4+0x260>
 8001444:	46d0      	mov	r8, sl
 8001446:	e77b      	b.n	8001340 <__udivmoddi4+0x1b8>
 8001448:	3b02      	subs	r3, #2
 800144a:	4465      	add	r5, ip
 800144c:	e732      	b.n	80012b4 <__udivmoddi4+0x12c>
 800144e:	4608      	mov	r0, r1
 8001450:	e709      	b.n	8001266 <__udivmoddi4+0xde>
 8001452:	4464      	add	r4, ip
 8001454:	3802      	subs	r0, #2
 8001456:	e742      	b.n	80012de <__udivmoddi4+0x156>

08001458 <__aeabi_idiv0>:
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop

0800145c <CS_Select>:
#define NRF24_CSN_PORT  GPIOB
#define NRF24_CSN_PIN   GPIO_PIN_9


void CS_Select (void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001466:	4802      	ldr	r0, [pc, #8]	; (8001470 <CS_Select+0x14>)
 8001468:	f005 f8e6 	bl	8006638 <HAL_GPIO_WritePin>
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	48000400 	.word	0x48000400

08001474 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147e:	4802      	ldr	r0, [pc, #8]	; (8001488 <CS_UnSelect+0x14>)
 8001480:	f005 f8da 	bl	8006638 <HAL_GPIO_WritePin>
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	48000400 	.word	0x48000400

0800148c <CE_Enable>:


void CE_Enable (void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001496:	4802      	ldr	r0, [pc, #8]	; (80014a0 <CE_Enable+0x14>)
 8001498:	f005 f8ce 	bl	8006638 <HAL_GPIO_WritePin>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	48000400 	.word	0x48000400

080014a4 <CE_Disable>:

void CE_Disable (void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ae:	4802      	ldr	r0, [pc, #8]	; (80014b8 <CE_Disable+0x14>)
 80014b0:	f005 f8c2 	bl	8006638 <HAL_GPIO_WritePin>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	48000400 	.word	0x48000400

080014bc <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	460a      	mov	r2, r1
 80014c6:	71fb      	strb	r3, [r7, #7]
 80014c8:	4613      	mov	r3, r2
 80014ca:	71bb      	strb	r3, [r7, #6]
	//HAL_StatusTypeDef checkOK;
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f043 0320 	orr.w	r3, r3, #32
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80014d6:	79bb      	ldrb	r3, [r7, #6]
 80014d8:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80014da:	f7ff ffbf 	bl	800145c <CS_Select>

//	checkOK = HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80014de:	f7ff ffc9 	bl	8001474 <CS_UnSelect>
}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	f043 0320 	orr.w	r3, r3, #32
 8001500:	b2db      	uxtb	r3, r3
 8001502:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001504:	f7ff ffaa 	bl	800145c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8001508:	f107 0114 	add.w	r1, r7, #20
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	2201      	movs	r2, #1
 8001510:	4808      	ldr	r0, [pc, #32]	; (8001534 <nrf24_WriteRegMulti+0x48>)
 8001512:	f007 fe43 	bl	800919c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	b29a      	uxth	r2, r3
 800151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151e:	68b9      	ldr	r1, [r7, #8]
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <nrf24_WriteRegMulti+0x48>)
 8001522:	f007 fe3b 	bl	800919c <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001526:	f7ff ffa5 	bl	8001474 <CS_UnSelect>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000780 	.word	0x20000780

08001538 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001546:	f7ff ff89 	bl	800145c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800154a:	1df9      	adds	r1, r7, #7
 800154c:	2364      	movs	r3, #100	; 0x64
 800154e:	2201      	movs	r2, #1
 8001550:	4808      	ldr	r0, [pc, #32]	; (8001574 <nrf24_ReadReg+0x3c>)
 8001552:	f007 fe23 	bl	800919c <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8001556:	f107 010f 	add.w	r1, r7, #15
 800155a:	2364      	movs	r3, #100	; 0x64
 800155c:	2201      	movs	r2, #1
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <nrf24_ReadReg+0x3c>)
 8001560:	f007 ffac 	bl	80094bc <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001564:	f7ff ff86 	bl	8001474 <CS_UnSelect>

	return data;
 8001568:	7bfb      	ldrb	r3, [r7, #15]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000780 	.word	0x20000780

08001578 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001586:	f7ff ff69 	bl	800145c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800158a:	f107 010f 	add.w	r1, r7, #15
 800158e:	2364      	movs	r3, #100	; 0x64
 8001590:	2201      	movs	r2, #1
 8001592:	4808      	ldr	r0, [pc, #32]	; (80015b4 <nrf24_ReadReg_Multi+0x3c>)
 8001594:	f007 fe02 	bl	800919c <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	b29a      	uxth	r2, r3
 800159c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	4804      	ldr	r0, [pc, #16]	; (80015b4 <nrf24_ReadReg_Multi+0x3c>)
 80015a4:	f007 ff8a 	bl	80094bc <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80015a8:	f7ff ff64 	bl	8001474 <CS_UnSelect>
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000780 	.word	0x20000780

080015b8 <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80015c2:	f7ff ff4b 	bl	800145c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80015c6:	1df9      	adds	r1, r7, #7
 80015c8:	2364      	movs	r3, #100	; 0x64
 80015ca:	2201      	movs	r2, #1
 80015cc:	4804      	ldr	r0, [pc, #16]	; (80015e0 <nrfsendCmd+0x28>)
 80015ce:	f007 fde5 	bl	800919c <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80015d2:	f7ff ff4f 	bl	8001474 <CS_UnSelect>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000780 	.word	0x20000780

080015e4 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b07      	cmp	r3, #7
 80015f2:	d104      	bne.n	80015fe <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80015f4:	2100      	movs	r1, #0
 80015f6:	2007      	movs	r0, #7
 80015f8:	f7ff ff60 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80015fc:	e090      	b.n	8001720 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	2b17      	cmp	r3, #23
 8001602:	d104      	bne.n	800160e <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001604:	2111      	movs	r1, #17
 8001606:	2017      	movs	r0, #23
 8001608:	f7ff ff58 	bl	80014bc <nrf24_WriteReg>
}
 800160c:	e088      	b.n	8001720 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800160e:	2108      	movs	r1, #8
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff ff53 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8001616:	213f      	movs	r1, #63	; 0x3f
 8001618:	2001      	movs	r0, #1
 800161a:	f7ff ff4f 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800161e:	2103      	movs	r1, #3
 8001620:	2002      	movs	r0, #2
 8001622:	f7ff ff4b 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8001626:	2103      	movs	r1, #3
 8001628:	2003      	movs	r0, #3
 800162a:	f7ff ff47 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 800162e:	2103      	movs	r1, #3
 8001630:	2004      	movs	r0, #4
 8001632:	f7ff ff43 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8001636:	2102      	movs	r1, #2
 8001638:	2005      	movs	r0, #5
 800163a:	f7ff ff3f 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800163e:	210e      	movs	r1, #14
 8001640:	2006      	movs	r0, #6
 8001642:	f7ff ff3b 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8001646:	2100      	movs	r1, #0
 8001648:	2007      	movs	r0, #7
 800164a:	f7ff ff37 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800164e:	2100      	movs	r1, #0
 8001650:	2008      	movs	r0, #8
 8001652:	f7ff ff33 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8001656:	2100      	movs	r1, #0
 8001658:	2009      	movs	r0, #9
 800165a:	f7ff ff2f 	bl	80014bc <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800165e:	4a32      	ldr	r2, [pc, #200]	; (8001728 <nrf24_reset+0x144>)
 8001660:	f107 0318 	add.w	r3, r7, #24
 8001664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001668:	6018      	str	r0, [r3, #0]
 800166a:	3304      	adds	r3, #4
 800166c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800166e:	f107 0318 	add.w	r3, r7, #24
 8001672:	2205      	movs	r2, #5
 8001674:	4619      	mov	r1, r3
 8001676:	200a      	movs	r0, #10
 8001678:	f7ff ff38 	bl	80014ec <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800167c:	4a2b      	ldr	r2, [pc, #172]	; (800172c <nrf24_reset+0x148>)
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001686:	6018      	str	r0, [r3, #0]
 8001688:	3304      	adds	r3, #4
 800168a:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	2205      	movs	r2, #5
 8001692:	4619      	mov	r1, r3
 8001694:	200b      	movs	r0, #11
 8001696:	f7ff ff29 	bl	80014ec <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800169a:	21c3      	movs	r1, #195	; 0xc3
 800169c:	200c      	movs	r0, #12
 800169e:	f7ff ff0d 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80016a2:	21c4      	movs	r1, #196	; 0xc4
 80016a4:	200d      	movs	r0, #13
 80016a6:	f7ff ff09 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80016aa:	21c5      	movs	r1, #197	; 0xc5
 80016ac:	200e      	movs	r0, #14
 80016ae:	f7ff ff05 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80016b2:	21c6      	movs	r1, #198	; 0xc6
 80016b4:	200f      	movs	r0, #15
 80016b6:	f7ff ff01 	bl	80014bc <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80016ba:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <nrf24_reset+0x144>)
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016c4:	6018      	str	r0, [r3, #0]
 80016c6:	3304      	adds	r3, #4
 80016c8:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	2205      	movs	r2, #5
 80016d0:	4619      	mov	r1, r3
 80016d2:	2010      	movs	r0, #16
 80016d4:	f7ff ff0a 	bl	80014ec <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80016d8:	2100      	movs	r1, #0
 80016da:	2011      	movs	r0, #17
 80016dc:	f7ff feee 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80016e0:	2100      	movs	r1, #0
 80016e2:	2012      	movs	r0, #18
 80016e4:	f7ff feea 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80016e8:	2100      	movs	r1, #0
 80016ea:	2013      	movs	r0, #19
 80016ec:	f7ff fee6 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80016f0:	2100      	movs	r1, #0
 80016f2:	2014      	movs	r0, #20
 80016f4:	f7ff fee2 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80016f8:	2100      	movs	r1, #0
 80016fa:	2015      	movs	r0, #21
 80016fc:	f7ff fede 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8001700:	2100      	movs	r1, #0
 8001702:	2016      	movs	r0, #22
 8001704:	f7ff feda 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001708:	2111      	movs	r1, #17
 800170a:	2017      	movs	r0, #23
 800170c:	f7ff fed6 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8001710:	2100      	movs	r1, #0
 8001712:	201c      	movs	r0, #28
 8001714:	f7ff fed2 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8001718:	2100      	movs	r1, #0
 800171a:	201d      	movs	r0, #29
 800171c:	f7ff fece 	bl	80014bc <nrf24_WriteReg>
}
 8001720:	bf00      	nop
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	08020f70 	.word	0x08020f70
 800172c:	08020f78 	.word	0x08020f78

08001730 <NRF24_Init>:




void NRF24_Init (void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8001734:	f7ff feb6 	bl	80014a4 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8001738:	2000      	movs	r0, #0
 800173a:	f7ff ff53 	bl	80015e4 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 800173e:	2100      	movs	r1, #0
 8001740:	2000      	movs	r0, #0
 8001742:	f7ff febb 	bl	80014bc <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8001746:	2100      	movs	r1, #0
 8001748:	2001      	movs	r0, #1
 800174a:	f7ff feb7 	bl	80014bc <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800174e:	2100      	movs	r1, #0
 8001750:	2002      	movs	r0, #2
 8001752:	f7ff feb3 	bl	80014bc <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8001756:	2103      	movs	r1, #3
 8001758:	2003      	movs	r0, #3
 800175a:	f7ff feaf 	bl	80014bc <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800175e:	2100      	movs	r1, #0
 8001760:	2004      	movs	r0, #4
 8001762:	f7ff feab 	bl	80014bc <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8001766:	2100      	movs	r1, #0
 8001768:	2005      	movs	r0, #5
 800176a:	f7ff fea7 	bl	80014bc <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800176e:	210e      	movs	r1, #14
 8001770:	2006      	movs	r0, #6
 8001772:	f7ff fea3 	bl	80014bc <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001776:	f7ff fe89 	bl	800148c <CE_Enable>

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}

0800177e <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800178a:	f7ff fe8b 	bl	80014a4 <CE_Disable>

	nrf24_reset (STATUS);
 800178e:	2007      	movs	r0, #7
 8001790:	f7ff ff28 	bl	80015e4 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	4619      	mov	r1, r3
 8001798:	2005      	movs	r0, #5
 800179a:	f7ff fe8f 	bl	80014bc <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800179e:	2002      	movs	r0, #2
 80017a0:	f7ff feca 	bl	8001538 <nrf24_ReadReg>
 80017a4:	4603      	mov	r3, r0
 80017a6:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	f043 0304 	orr.w	r3, r3, #4
 80017ae:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	4619      	mov	r1, r3
 80017b4:	2002      	movs	r0, #2
 80017b6:	f7ff fe81 	bl	80014bc <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80017ba:	2205      	movs	r2, #5
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	200b      	movs	r0, #11
 80017c0:	f7ff fe94 	bl	80014ec <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 80017c4:	21ee      	movs	r1, #238	; 0xee
 80017c6:	200c      	movs	r0, #12
 80017c8:	f7ff fe78 	bl	80014bc <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 80017cc:	2120      	movs	r1, #32
 80017ce:	2013      	movs	r0, #19
 80017d0:	f7ff fe74 	bl	80014bc <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 80017d4:	2000      	movs	r0, #0
 80017d6:	f7ff feaf 	bl	8001538 <nrf24_ReadReg>
 80017da:	4603      	mov	r3, r0
 80017dc:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 80017de:	7bbb      	ldrb	r3, [r7, #14]
 80017e0:	f043 0303 	orr.w	r3, r3, #3
 80017e4:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 80017e6:	7bbb      	ldrb	r3, [r7, #14]
 80017e8:	4619      	mov	r1, r3
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7ff fe66 	bl	80014bc <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80017f0:	f7ff fe4c 	bl	800148c <CE_Enable>
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8001804:	2007      	movs	r0, #7
 8001806:	f7ff fe97 	bl	8001538 <nrf24_ReadReg>
 800180a:	4603      	mov	r3, r0
 800180c:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00b      	beq.n	8001830 <isDataAvailable+0x34>
 8001818:	7bfa      	ldrb	r2, [r7, #15]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8001824:	2140      	movs	r1, #64	; 0x40
 8001826:	2007      	movs	r0, #7
 8001828:	f7ff fe48 	bl	80014bc <nrf24_WriteReg>

		return 1;
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <isDataAvailable+0x36>
	}

	return 0;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8001848:	f7ff fe08 	bl	800145c <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 800184c:	2361      	movs	r3, #97	; 0x61
 800184e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8001850:	f107 010f 	add.w	r1, r7, #15
 8001854:	2364      	movs	r3, #100	; 0x64
 8001856:	2201      	movs	r2, #1
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <NRF24_Receive+0x50>)
 800185a:	f007 fc9f 	bl	800919c <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 800185e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001862:	2220      	movs	r2, #32
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4809      	ldr	r0, [pc, #36]	; (800188c <NRF24_Receive+0x50>)
 8001868:	f007 fe28 	bl	80094bc <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 800186c:	f7ff fe02 	bl	8001474 <CS_UnSelect>

	HAL_Delay(1);
 8001870:	2001      	movs	r0, #1
 8001872:	f001 fbd7 	bl	8003024 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8001876:	23e2      	movs	r3, #226	; 0xe2
 8001878:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fe9b 	bl	80015b8 <nrfsendCmd>
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000780 	.word	0x20000780

08001890 <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	e00c      	b.n	80018b8 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	b2d9      	uxtb	r1, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	18d4      	adds	r4, r2, r3
 80018a8:	4608      	mov	r0, r1
 80018aa:	f7ff fe45 	bl	8001538 <nrf24_ReadReg>
 80018ae:	4603      	mov	r3, r0
 80018b0:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3301      	adds	r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b09      	cmp	r3, #9
 80018bc:	ddef      	ble.n	800189e <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	330a      	adds	r3, #10
 80018c2:	2205      	movs	r2, #5
 80018c4:	4619      	mov	r1, r3
 80018c6:	200a      	movs	r0, #10
 80018c8:	f7ff fe56 	bl	8001578 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	330f      	adds	r3, #15
 80018d0:	2205      	movs	r2, #5
 80018d2:	4619      	mov	r1, r3
 80018d4:	200b      	movs	r0, #11
 80018d6:	f7ff fe4f 	bl	8001578 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f103 0414 	add.w	r4, r3, #20
 80018e0:	200c      	movs	r0, #12
 80018e2:	f7ff fe29 	bl	8001538 <nrf24_ReadReg>
 80018e6:	4603      	mov	r3, r0
 80018e8:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f103 0415 	add.w	r4, r3, #21
 80018f0:	200d      	movs	r0, #13
 80018f2:	f7ff fe21 	bl	8001538 <nrf24_ReadReg>
 80018f6:	4603      	mov	r3, r0
 80018f8:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f103 0416 	add.w	r4, r3, #22
 8001900:	200e      	movs	r0, #14
 8001902:	f7ff fe19 	bl	8001538 <nrf24_ReadReg>
 8001906:	4603      	mov	r3, r0
 8001908:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f103 0417 	add.w	r4, r3, #23
 8001910:	200f      	movs	r0, #15
 8001912:	f7ff fe11 	bl	8001538 <nrf24_ReadReg>
 8001916:	4603      	mov	r3, r0
 8001918:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3318      	adds	r3, #24
 800191e:	2205      	movs	r2, #5
 8001920:	4619      	mov	r1, r3
 8001922:	200a      	movs	r0, #10
 8001924:	f7ff fe28 	bl	8001578 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 8001928:	231d      	movs	r3, #29
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	e00e      	b.n	800194c <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	3b0c      	subs	r3, #12
 8001934:	b2d9      	uxtb	r1, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	18d4      	adds	r4, r2, r3
 800193c:	4608      	mov	r0, r1
 800193e:	f7ff fdfb 	bl	8001538 <nrf24_ReadReg>
 8001942:	4603      	mov	r3, r0
 8001944:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	3301      	adds	r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b25      	cmp	r3, #37	; 0x25
 8001950:	dded      	ble.n	800192e <NRF24_ReadAll+0x9e>
	}

}
 8001952:	bf00      	nop
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bd90      	pop	{r4, r7, pc}

0800195c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001968:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800196a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4313      	orrs	r3, r2
 8001972:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001978:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001980:	68fb      	ldr	r3, [r7, #12]
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001998:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	43db      	mvns	r3, r3
 800199e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019a2:	4013      	ands	r3, r2
 80019a4:	660b      	str	r3, [r1, #96]	; 0x60
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80019b4:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <MX_ADC_Init+0x94>)
 80019b6:	4a24      	ldr	r2, [pc, #144]	; (8001a48 <MX_ADC_Init+0x98>)
 80019b8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <MX_ADC_Init+0x94>)
 80019bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019c0:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <MX_ADC_Init+0x94>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <MX_ADC_Init+0x94>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <MX_ADC_Init+0x94>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <MX_ADC_Init+0x94>)
 80019d6:	2204      	movs	r2, #4
 80019d8:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <MX_ADC_Init+0x94>)
 80019dc:	2200      	movs	r2, #0
 80019de:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <MX_ADC_Init+0x94>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <MX_ADC_Init+0x94>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <MX_ADC_Init+0x94>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <MX_ADC_Init+0x94>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <MX_ADC_Init+0x94>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a00:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <MX_ADC_Init+0x94>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <MX_ADC_Init+0x94>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <MX_ADC_Init+0x94>)
 8001a10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a14:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MX_ADC_Init+0x94>)
 8001a18:	2207      	movs	r2, #7
 8001a1a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_ADC_Init+0x94>)
 8001a1e:	2207      	movs	r2, #7
 8001a20:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <MX_ADC_Init+0x94>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <MX_ADC_Init+0x94>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <MX_ADC_Init+0x94>)
 8001a32:	f002 fce9 	bl	8004408 <HAL_ADC_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001a3c:	f000 fe2c 	bl	8002698 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200005c0 	.word	0x200005c0
 8001a48:	40012400 	.word	0x40012400

08001a4c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <HAL_ADC_MspInit+0x24>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d103      	bne.n	8001a66 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a62:	f7ff ff7b 	bl	800195c <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40012400 	.word	0x40012400

08001a74 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <HAL_ADC_MspDeInit+0x24>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d103      	bne.n	8001a8e <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001a86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a8a:	f7ff ff7f 	bl	800198c <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40012400 	.word	0x40012400

08001a9c <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <SYS_InitMeasurement+0x14>)
 8001aa2:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <SYS_InitMeasurement+0x18>)
 8001aa4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	200005c0 	.word	0x200005c0
 8001ab4:	40012400 	.word	0x40012400

08001ab8 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001ac6:	4813      	ldr	r0, [pc, #76]	; (8001b14 <SYS_GetBatteryLevel+0x5c>)
 8001ac8:	f000 f82a 	bl	8001b20 <ADC_ReadChannels>
 8001acc:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	80fb      	strh	r3, [r7, #6]
 8001ad8:	e016      	b.n	8001b08 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001ada:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <SYS_GetBatteryLevel+0x60>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00b      	beq.n	8001afe <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <SYS_GetBatteryLevel+0x60>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001af0:	fb03 f202 	mul.w	r2, r3, r2
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afa:	80fb      	strh	r3, [r7, #6]
 8001afc:	e004      	b.n	8001b08 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001afe:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <SYS_GetBatteryLevel+0x64>)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001b08:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	b4002000 	.word	0xb4002000
 8001b18:	1fff75aa 	.word	0x1fff75aa
 8001b1c:	004c08d8 	.word	0x004c08d8

08001b20 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001b38:	f7ff ff3a 	bl	80019b0 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001b3c:	481a      	ldr	r0, [pc, #104]	; (8001ba8 <ADC_ReadChannels+0x88>)
 8001b3e:	f003 fa92 	bl	8005066 <HAL_ADCEx_Calibration_Start>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001b48:	f000 fda6 	bl	8002698 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b58:	f107 0308 	add.w	r3, r7, #8
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4812      	ldr	r0, [pc, #72]	; (8001ba8 <ADC_ReadChannels+0x88>)
 8001b60:	f002 ff9e 	bl	8004aa0 <HAL_ADC_ConfigChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001b6a:	f000 fd95 	bl	8002698 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001b6e:	480e      	ldr	r0, [pc, #56]	; (8001ba8 <ADC_ReadChannels+0x88>)
 8001b70:	f002 fe7a 	bl	8004868 <HAL_ADC_Start>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001b7a:	f000 fd8d 	bl	8002698 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001b7e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b82:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <ADC_ReadChannels+0x88>)
 8001b84:	f002 fee8 	bl	8004958 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <ADC_ReadChannels+0x88>)
 8001b8a:	f002 feb3 	bl	80048f4 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <ADC_ReadChannels+0x88>)
 8001b90:	f002 ff79 	bl	8004a86 <HAL_ADC_GetValue>
 8001b94:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001b96:	4804      	ldr	r0, [pc, #16]	; (8001ba8 <ADC_ReadChannels+0x88>)
 8001b98:	f002 fdea 	bl	8004770 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001b9c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200005c0 	.word	0x200005c0

08001bac <LL_AHB1_GRP1_EnableClock>:
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001bba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001be0:	2004      	movs	r0, #4
 8001be2:	f7ff ffe3 	bl	8001bac <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001be6:	2001      	movs	r0, #1
 8001be8:	f7ff ffe0 	bl	8001bac <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2102      	movs	r1, #2
 8001bf0:	200b      	movs	r0, #11
 8001bf2:	f003 fbde 	bl	80053b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bf6:	200b      	movs	r0, #11
 8001bf8:	f003 fbf5 	bl	80053e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	200c      	movs	r0, #12
 8001c02:	f003 fbd6 	bl	80053b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c06:	200c      	movs	r0, #12
 8001c08:	f003 fbed 	bl	80053e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2100      	movs	r1, #0
 8001c10:	200d      	movs	r0, #13
 8001c12:	f003 fbce 	bl	80053b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c16:	200d      	movs	r0, #13
 8001c18:	f003 fbe5 	bl	80053e6 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	203d      	movs	r0, #61	; 0x3d
 8001c22:	f003 fbc6 	bl	80053b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8001c26:	203d      	movs	r0, #61	; 0x3d
 8001c28:	f003 fbdd 	bl	80053e6 <HAL_NVIC_EnableIRQ>

}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c40:	d101      	bne.n	8001c46 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 8001c46:	2300      	movs	r3, #0
#endif
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	58004000 	.word	0x58004000

08001c54 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08c      	sub	sp, #48	; 0x30
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
 8001c60:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001c6c:	4b56      	ldr	r3, [pc, #344]	; (8001dc8 <FLASH_IF_Write+0x174>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	0299      	lsls	r1, r3, #10
 8001c72:	4b56      	ldr	r3, [pc, #344]	; (8001dcc <FLASH_IF_Write+0x178>)
 8001c74:	400b      	ands	r3, r1
 8001c76:	fbb2 f1f3 	udiv	r1, r2, r3
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	0adb      	lsrs	r3, r3, #11
 8001c82:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	4a4d      	ldr	r2, [pc, #308]	; (8001dc8 <FLASH_IF_Write+0x174>)
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	0291      	lsls	r1, r2, #10
 8001c96:	4a4d      	ldr	r2, [pc, #308]	; (8001dcc <FLASH_IF_Write+0x178>)
 8001c98:	400a      	ands	r2, r1
 8001c9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c9e:	fb01 f202 	mul.w	r2, r1, r2
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	0adb      	lsrs	r3, r3, #11
 8001ca6:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d009      	beq.n	8001cce <FLASH_IF_Write+0x7a>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d104      	bne.n	8001cce <FLASH_IF_Write+0x7a>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 8001cce:	f06f 0304 	mvn.w	r3, #4
 8001cd2:	e074      	b.n	8001dbe <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001cd4:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <FLASH_IF_Write+0x17c>)
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	da02      	bge.n	8001ce2 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 8001cdc:	f06f 0303 	mvn.w	r3, #3
 8001ce0:	e06d      	b.n	8001dbe <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d005      	beq.n	8001cf6 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cf0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	e05b      	b.n	8001db4 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 f8f8 	bl	8001ef6 <FLASH_IF_IsEmpty>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d037      	beq.n	8001d7c <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001d12:	f06f 0304 	mvn.w	r3, #4
 8001d16:	e052      	b.n	8001dbe <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001d1e:	02db      	lsls	r3, r3, #11
 8001d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d24:	4619      	mov	r1, r3
 8001d26:	6838      	ldr	r0, [r7, #0]
 8001d28:	f01d fd38 	bl	801f79c <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	6a39      	ldr	r1, [r7, #32]
 8001d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d3a:	b292      	uxth	r2, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f01d fd2d 	bl	801f79c <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8001d42:	2200      	movs	r2, #0
 8001d44:	2101      	movs	r1, #1
 8001d46:	69f8      	ldr	r0, [r7, #28]
 8001d48:	f000 f865 	bl	8001e16 <FLASH_IF_EraseByPages>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 8001d52:	f06f 0301 	mvn.w	r3, #1
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001d58:	e030      	b.n	8001dbc <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001d60:	02db      	lsls	r3, r3, #11
 8001d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d66:	6839      	ldr	r1, [r7, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 f88a 	bl	8001e82 <FLASH_IF_Write_Buffer>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d010      	beq.n	8001d96 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 8001d74:	f06f 0302 	mvn.w	r3, #2
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 8001d7a:	e01f      	b.n	8001dbc <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d80:	4619      	mov	r1, r3
 8001d82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d84:	f000 f87d 	bl	8001e82 <FLASH_IF_Write_Buffer>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 8001d8e:	f06f 0302 	mvn.w	r3, #2
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001d94:	e012      	b.n	8001dbc <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 8001d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9a:	4413      	add	r3, r2
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 8001d9e:	6a3a      	ldr	r2, [r7, #32]
 8001da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da2:	4413      	add	r3, r2
 8001da4:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3301      	adds	r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d99f      	bls.n	8001cfc <FLASH_IF_Write+0xa8>
  }

  return status;
 8001dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3730      	adds	r7, #48	; 0x30
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	1fff75e0 	.word	0x1fff75e0
 8001dcc:	03fffc00 	.word	0x03fffc00
 8001dd0:	58004000 	.word	0x58004000

08001dd4 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8001de0:	e00b      	b.n	8001dfa <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 8001de2:	bf00      	nop
 8001de4:	f7ff ff24 	bl	8001c30 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1fa      	bne.n	8001de4 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8001dee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001df2:	68f9      	ldr	r1, [r7, #12]
 8001df4:	2001      	movs	r0, #1
 8001df6:	f003 ff8f 	bl	8005d18 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e04:	4299      	cmp	r1, r3
 8001e06:	bf08      	it	eq
 8001e08:	4290      	cmpeq	r0, r2
 8001e0a:	d1ea      	bne.n	8001de2 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 8001e0c:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b08a      	sub	sp, #40	; 0x28
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001e24:	2302      	movs	r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 8001e2c:	897b      	ldrh	r3, [r7, #10]
 8001e2e:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d008      	beq.n	8001e48 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001e36:	f107 0318 	add.w	r3, r7, #24
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f004 f90a 	bl	8006054 <HAL_FLASHEx_Erase_IT>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e46:	e00a      	b.n	8001e5e <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001e48:	f107 0214 	add.w	r2, r7, #20
 8001e4c:	f107 0318 	add.w	r3, r7, #24
 8001e50:	4611      	mov	r1, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f004 f8a6 	bl	8005fa4 <HAL_FLASHEx_Erase>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <FLASH_IF_EraseByPages+0x62>
 8001e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d101      	bne.n	8001e72 <FLASH_IF_EraseByPages+0x5c>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e003      	b.n	8001e7a <FLASH_IF_EraseByPages+0x64>
 8001e72:	f06f 0301 	mvn.w	r3, #1
 8001e76:	e000      	b.n	8001e7a <FLASH_IF_EraseByPages+0x64>
 8001e78:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3728      	adds	r7, #40	; 0x28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b08a      	sub	sp, #40	; 0x28
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	e020      	b.n	8001ede <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f01d fc79 	bl	801f79c <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 8001eaa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb2:	bf08      	it	eq
 8001eb4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001eb8:	d005      	beq.n	8001ec6 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 8001eba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f7ff ff88 	bl	8001dd4 <FLASH_IF_Write64>
 8001ec4:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3308      	adds	r3, #8
 8001eca:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	3308      	adds	r3, #8
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d108      	bne.n	8001eea <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	3301      	adds	r3, #1
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	08db      	lsrs	r3, r3, #3
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d3d9      	bcc.n	8001e9c <FLASH_IF_Write_Buffer+0x1a>
 8001ee8:	e000      	b.n	8001eec <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 8001eea:	bf00      	nop
    }
  }

  return status;
 8001eec:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3728      	adds	r7, #40	; 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b085      	sub	sp, #20
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001f00:	e00a      	b.n	8001f18 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2bff      	cmp	r3, #255	; 0xff
 8001f0c:	d001      	beq.n	8001f12 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e039      	b.n	8001f86 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	3b01      	subs	r3, #1
 8001f16:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1ef      	bne.n	8001f02 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	e010      	b.n	8001f4e <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f103 0208 	add.w	r2, r3, #8
 8001f32:	60fa      	str	r2, [r7, #12]
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3c:	bf08      	it	eq
 8001f3e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001f42:	d001      	beq.n	8001f48 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e01e      	b.n	8001f86 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	08db      	lsrs	r3, r3, #3
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d3e9      	bcc.n	8001f2c <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	607b      	str	r3, [r7, #4]
  while (size != 0)
 8001f66:	e00a      	b.n	8001f7e <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2bff      	cmp	r3, #255	; 0xff
 8001f72:	d001      	beq.n	8001f78 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e006      	b.n	8001f86 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	603b      	str	r3, [r7, #0]
  while (size != 0)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f1      	bne.n	8001f68 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 8001f84:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <LL_AHB2_GRP1_EnableClock>:
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f7ff ffdb 	bl	8001f90 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	2002      	movs	r0, #2
 8001fdc:	f7ff ffd8 	bl	8001f90 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe0:	2004      	movs	r0, #4
 8001fe2:	f7ff ffd5 	bl	8001f90 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|SPI_CSN_Pin|SPI_CEN_Pin, GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8001fec:	4825      	ldr	r0, [pc, #148]	; (8002084 <MX_GPIO_Init+0xc4>)
 8001fee:	f004 fb23 	bl	8006638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	2120      	movs	r1, #32
 8001ff6:	4823      	ldr	r0, [pc, #140]	; (8002084 <MX_GPIO_Init+0xc4>)
 8001ff8:	f004 fb1e 	bl	8006638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f240 2131 	movw	r1, #561	; 0x231
 8002002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002006:	f004 fb17 	bl	8006638 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin;
 800200a:	2338      	movs	r3, #56	; 0x38
 800200c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200e:	2301      	movs	r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	4619      	mov	r1, r3
 800201e:	4819      	ldr	r0, [pc, #100]	; (8002084 <MX_GPIO_Init+0xc4>)
 8002020:	f004 f8dc 	bl	80061dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CEN_Pin;
 8002024:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002028:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202a:	2301      	movs	r3, #1
 800202c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	4619      	mov	r1, r3
 800203a:	4812      	ldr	r0, [pc, #72]	; (8002084 <MX_GPIO_Init+0xc4>)
 800203c:	f004 f8ce 	bl	80061dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8002040:	2331      	movs	r3, #49	; 0x31
 8002042:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002044:	2301      	movs	r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	4619      	mov	r1, r3
 8002054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002058:	f004 f8c0 	bl	80061dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 800205c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002060:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002062:	2311      	movs	r3, #17
 8002064:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	4619      	mov	r1, r3
 8002072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002076:	f004 f8b1 	bl	80061dc <HAL_GPIO_Init>

}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	48000400 	.word	0x48000400

08002088 <LL_AHB2_GRP1_EnableClock>:
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002094:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002096:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4313      	orrs	r3, r2
 800209e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4013      	ands	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020ac:	68fb      	ldr	r3, [r7, #12]
}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <LL_APB1_GRP1_EnableClock>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80020c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80020d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4013      	ands	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020dc:	68fb      	ldr	r3, [r7, #12]
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80020ec:	4b1b      	ldr	r3, [pc, #108]	; (800215c <MX_I2C2_Init+0x74>)
 80020ee:	4a1c      	ldr	r2, [pc, #112]	; (8002160 <MX_I2C2_Init+0x78>)
 80020f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	; (800215c <MX_I2C2_Init+0x74>)
 80020f4:	4a1b      	ldr	r2, [pc, #108]	; (8002164 <MX_I2C2_Init+0x7c>)
 80020f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80020f8:	4b18      	ldr	r3, [pc, #96]	; (800215c <MX_I2C2_Init+0x74>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020fe:	4b17      	ldr	r3, [pc, #92]	; (800215c <MX_I2C2_Init+0x74>)
 8002100:	2201      	movs	r2, #1
 8002102:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002104:	4b15      	ldr	r3, [pc, #84]	; (800215c <MX_I2C2_Init+0x74>)
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800210a:	4b14      	ldr	r3, [pc, #80]	; (800215c <MX_I2C2_Init+0x74>)
 800210c:	2200      	movs	r2, #0
 800210e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <MX_I2C2_Init+0x74>)
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <MX_I2C2_Init+0x74>)
 8002118:	2200      	movs	r2, #0
 800211a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <MX_I2C2_Init+0x74>)
 800211e:	2200      	movs	r2, #0
 8002120:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002122:	480e      	ldr	r0, [pc, #56]	; (800215c <MX_I2C2_Init+0x74>)
 8002124:	f004 fab8 	bl	8006698 <HAL_I2C_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800212e:	f000 fab3 	bl	8002698 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002132:	2100      	movs	r1, #0
 8002134:	4809      	ldr	r0, [pc, #36]	; (800215c <MX_I2C2_Init+0x74>)
 8002136:	f004 ff9f 	bl	8007078 <HAL_I2CEx_ConfigAnalogFilter>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002140:	f000 faaa 	bl	8002698 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002144:	2100      	movs	r1, #0
 8002146:	4805      	ldr	r0, [pc, #20]	; (800215c <MX_I2C2_Init+0x74>)
 8002148:	f004 ffe0 	bl	800710c <HAL_I2CEx_ConfigDigitalFilter>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002152:	f000 faa1 	bl	8002698 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000624 	.word	0x20000624
 8002160:	40005800 	.word	0x40005800
 8002164:	00707cbb 	.word	0x00707cbb

08002168 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b096      	sub	sp, #88	; 0x58
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	2238      	movs	r2, #56	; 0x38
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f01e fdf3 	bl	8020d74 <memset>
  if(i2cHandle->Instance==I2C2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a21      	ldr	r2, [pc, #132]	; (8002218 <HAL_I2C_MspInit+0xb0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d13b      	bne.n	8002210 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800219c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021a2:	f107 030c 	add.w	r3, r7, #12
 80021a6:	4618      	mov	r0, r3
 80021a8:	f006 fa86 	bl	80086b8 <HAL_RCCEx_PeriphCLKConfig>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80021b2:	f000 fa71 	bl	8002698 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b6:	2001      	movs	r0, #1
 80021b8:	f7ff ff66 	bl	8002088 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021bc:	2002      	movs	r0, #2
 80021be:	f7ff ff63 	bl	8002088 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021c6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021c8:	2312      	movs	r3, #18
 80021ca:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021cc:	2301      	movs	r3, #1
 80021ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80021d0:	2301      	movs	r3, #1
 80021d2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021d4:	2304      	movs	r3, #4
 80021d6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021dc:	4619      	mov	r1, r3
 80021de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e2:	f003 fffb 	bl	80061dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ea:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ec:	2312      	movs	r3, #18
 80021ee:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021f0:	2301      	movs	r3, #1
 80021f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80021f4:	2301      	movs	r3, #1
 80021f6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021f8:	2304      	movs	r3, #4
 80021fa:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002200:	4619      	mov	r1, r3
 8002202:	4806      	ldr	r0, [pc, #24]	; (800221c <HAL_I2C_MspInit+0xb4>)
 8002204:	f003 ffea 	bl	80061dc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002208:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800220c:	f7ff ff54 	bl	80020b8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002210:	bf00      	nop
 8002212:	3758      	adds	r7, #88	; 0x58
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40005800 	.word	0x40005800
 800221c:	48000400 	.word	0x48000400

08002220 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002230:	f023 0218 	bic.w	r2, r3, #24
 8002234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	0000      	movs	r0, r0
 800224c:	0000      	movs	r0, r0
	...

08002250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002256:	f001 fee9 	bl	800402c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800225a:	f000 f8ff 	bl	800245c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800225e:	f7ff feaf 	bl	8001fc0 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8002262:	f00b fad7 	bl	800d814 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8002266:	f001 fb05 	bl	8003874 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800226a:	f7ff ff3d 	bl	80020e8 <MX_I2C2_Init>
  MX_TIM16_Init();
 800226e:	f000 ff5b 	bl	8003128 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002272:	f000 ff8d 	bl	8003190 <MX_TIM17_Init>
  MX_SPI2_Init();
 8002276:	f000 fb73 	bl	8002960 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  UART2_SET =0;
 800227a:	4b65      	ldr	r3, [pc, #404]	; (8002410 <main+0x1c0>)
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]

  NRF24_Init();
 8002280:	f7ff fa56 	bl	8001730 <NRF24_Init>

  NRF24_RxMode(RxAddress, 10);
 8002284:	210a      	movs	r1, #10
 8002286:	4863      	ldr	r0, [pc, #396]	; (8002414 <main+0x1c4>)
 8002288:	f7ff fa79 	bl	800177e <NRF24_RxMode>

 //  NRF24_TxMode(TxAddress, 10);

   NRF24_ReadAll(data);
 800228c:	4862      	ldr	r0, [pc, #392]	; (8002418 <main+0x1c8>)
 800228e:	f7ff faff 	bl	8001890 <NRF24_ReadAll>

  F1_QueueIni(); // init Function queue
 8002292:	f000 fa0d 	bl	80026b0 <F1_QueueIni>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 8002296:	2220      	movs	r2, #32
 8002298:	4960      	ldr	r1, [pc, #384]	; (800241c <main+0x1cc>)
 800229a:	4861      	ldr	r0, [pc, #388]	; (8002420 <main+0x1d0>)
 800229c:	f00b f9ef 	bl	800d67e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80022a0:	4b60      	ldr	r3, [pc, #384]	; (8002424 <main+0x1d4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4b5f      	ldr	r3, [pc, #380]	; (8002424 <main+0x1d4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0204 	bic.w	r2, r2, #4
 80022ae:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80022b0:	2200      	movs	r2, #0
 80022b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ba:	f004 f9bd 	bl	8006638 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim16);
 80022be:	485a      	ldr	r0, [pc, #360]	; (8002428 <main+0x1d8>)
 80022c0:	f008 fc92 	bl	800abe8 <HAL_TIM_Base_Start_IT>


  while (1)
  {
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 80022c4:	2364      	movs	r3, #100	; 0x64
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	2301      	movs	r3, #1
 80022ca:	4a58      	ldr	r2, [pc, #352]	; (800242c <main+0x1dc>)
 80022cc:	2188      	movs	r1, #136	; 0x88
 80022ce:	4858      	ldr	r0, [pc, #352]	; (8002430 <main+0x1e0>)
 80022d0:	f004 fa72 	bl	80067b8 <HAL_I2C_Master_Transmit>
	MeasurePM_sens();
 80022d4:	f000 f96e 	bl	80025b4 <MeasurePM_sens>

    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80022d8:	f00b faa4 	bl	800d824 <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */


    F1_pull()();
 80022dc:	f000 fa2c 	bl	8002738 <F1_pull>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4798      	blx	r3




    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(0x44 << 1),SHT40_dataRX, 6, 100);
 80022e4:	2364      	movs	r3, #100	; 0x64
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2306      	movs	r3, #6
 80022ea:	4a52      	ldr	r2, [pc, #328]	; (8002434 <main+0x1e4>)
 80022ec:	2188      	movs	r1, #136	; 0x88
 80022ee:	4850      	ldr	r0, [pc, #320]	; (8002430 <main+0x1e0>)
 80022f0:	f004 fb56 	bl	80069a0 <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 80022f4:	4b4f      	ldr	r3, [pc, #316]	; (8002434 <main+0x1e4>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	4b4d      	ldr	r3, [pc, #308]	; (8002434 <main+0x1e4>)
 8002300:	785b      	ldrb	r3, [r3, #1]
 8002302:	b29b      	uxth	r3, r3
 8002304:	4413      	add	r3, r2
 8002306:	b29a      	uxth	r2, r3
 8002308:	4b4b      	ldr	r3, [pc, #300]	; (8002438 <main+0x1e8>)
 800230a:	801a      	strh	r2, [r3, #0]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 800230c:	4b49      	ldr	r3, [pc, #292]	; (8002434 <main+0x1e4>)
 800230e:	78db      	ldrb	r3, [r3, #3]
 8002310:	b29b      	uxth	r3, r3
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	b29a      	uxth	r2, r3
 8002316:	4b47      	ldr	r3, [pc, #284]	; (8002434 <main+0x1e4>)
 8002318:	791b      	ldrb	r3, [r3, #4]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4413      	add	r3, r2
 800231e:	b29a      	uxth	r2, r3
 8002320:	4b46      	ldr	r3, [pc, #280]	; (800243c <main+0x1ec>)
 8002322:	801a      	strh	r2, [r3, #0]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 8002324:	4b44      	ldr	r3, [pc, #272]	; (8002438 <main+0x1e8>)
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe fcb1 	bl	8000c90 <__aeabi_ui2f>
 800232e:	4603      	mov	r3, r0
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe f88d 	bl	8000450 <__aeabi_f2d>
 8002336:	a332      	add	r3, pc, #200	; (adr r3, 8002400 <main+0x1b0>)
 8002338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233c:	f7fe f8e0 	bl	8000500 <__aeabi_dmul>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	a32f      	add	r3, pc, #188	; (adr r3, 8002408 <main+0x1b8>)
 800234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234e:	f7fe fa01 	bl	8000754 <__aeabi_ddiv>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	4b38      	ldr	r3, [pc, #224]	; (8002440 <main+0x1f0>)
 8002360:	f7fd ff16 	bl	8000190 <__aeabi_dsub>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	f7fe fb8a 	bl	8000a84 <__aeabi_d2f>
 8002370:	4603      	mov	r3, r0
 8002372:	4a34      	ldr	r2, [pc, #208]	; (8002444 <main+0x1f4>)
 8002374:	6013      	str	r3, [r2, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 8002376:	4b31      	ldr	r3, [pc, #196]	; (800243c <main+0x1ec>)
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fc88 	bl	8000c90 <__aeabi_ui2f>
 8002380:	4603      	mov	r3, r0
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe f864 	bl	8000450 <__aeabi_f2d>
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	4b2e      	ldr	r3, [pc, #184]	; (8002448 <main+0x1f8>)
 800238e:	f7fe f8b7 	bl	8000500 <__aeabi_dmul>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	a31b      	add	r3, pc, #108	; (adr r3, 8002408 <main+0x1b8>)
 800239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a0:	f7fe f9d8 	bl	8000754 <__aeabi_ddiv>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	4b26      	ldr	r3, [pc, #152]	; (800244c <main+0x1fc>)
 80023b2:	f7fd feed 	bl	8000190 <__aeabi_dsub>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4610      	mov	r0, r2
 80023bc:	4619      	mov	r1, r3
 80023be:	f7fe fb61 	bl	8000a84 <__aeabi_d2f>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a22      	ldr	r2, [pc, #136]	; (8002450 <main+0x200>)
 80023c6:	6013      	str	r3, [r2, #0]


    if (isDataAvailable(2) == 1)
 80023c8:	2002      	movs	r0, #2
 80023ca:	f7ff fa17 	bl	80017fc <isDataAvailable>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d10d      	bne.n	80023f0 <main+0x1a0>
   	  {
   		  NRF24_Receive(RxData);
 80023d4:	481f      	ldr	r0, [pc, #124]	; (8002454 <main+0x204>)
 80023d6:	f7ff fa31 	bl	800183c <NRF24_Receive>
   		  HAL_UART_Transmit(&huart2, RxData, strlen((char *)RxData), 1000);
 80023da:	481e      	ldr	r0, [pc, #120]	; (8002454 <main+0x204>)
 80023dc:	f7fd fecc 	bl	8000178 <strlen>
 80023e0:	4603      	mov	r3, r0
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e8:	491a      	ldr	r1, [pc, #104]	; (8002454 <main+0x204>)
 80023ea:	480d      	ldr	r0, [pc, #52]	; (8002420 <main+0x1d0>)
 80023ec:	f008 fe7a 	bl	800b0e4 <HAL_UART_Transmit>
   	  }

    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);///DBG
 80023f0:	2120      	movs	r1, #32
 80023f2:	4819      	ldr	r0, [pc, #100]	; (8002458 <main+0x208>)
 80023f4:	f004 f937 	bl	8006666 <HAL_GPIO_TogglePin>
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 80023f8:	e764      	b.n	80022c4 <main+0x74>
 80023fa:	bf00      	nop
 80023fc:	f3af 8000 	nop.w
 8002400:	00000000 	.word	0x00000000
 8002404:	4065e000 	.word	0x4065e000
 8002408:	00000000 	.word	0x00000000
 800240c:	40efffe0 	.word	0x40efffe0
 8002410:	20000010 	.word	0x20000010
 8002414:	20000004 	.word	0x20000004
 8002418:	200006c0 	.word	0x200006c0
 800241c:	20000670 	.word	0x20000670
 8002420:	2000092c 	.word	0x2000092c
 8002424:	20000a7c 	.word	0x20000a7c
 8002428:	200007fc 	.word	0x200007fc
 800242c:	20000009 	.word	0x20000009
 8002430:	20000624 	.word	0x20000624
 8002434:	200006f4 	.word	0x200006f4
 8002438:	200006fa 	.word	0x200006fa
 800243c:	200006fc 	.word	0x200006fc
 8002440:	40468000 	.word	0x40468000
 8002444:	20000694 	.word	0x20000694
 8002448:	405f4000 	.word	0x405f4000
 800244c:	40180000 	.word	0x40180000
 8002450:	20000698 	.word	0x20000698
 8002454:	200006a0 	.word	0x200006a0
 8002458:	48000400 	.word	0x48000400

0800245c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b09a      	sub	sp, #104	; 0x68
 8002460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002462:	f107 0320 	add.w	r3, r7, #32
 8002466:	2248      	movs	r2, #72	; 0x48
 8002468:	2100      	movs	r1, #0
 800246a:	4618      	mov	r0, r3
 800246c:	f01e fc82 	bl	8020d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002470:	f107 0308 	add.w	r3, r7, #8
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
 8002480:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002482:	f004 fe8f 	bl	80071a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002486:	2000      	movs	r0, #0
 8002488:	f7ff feca 	bl	8002220 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <SystemClock_Config+0xb8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002494:	4a1f      	ldr	r2, [pc, #124]	; (8002514 <SystemClock_Config+0xb8>)
 8002496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <SystemClock_Config+0xb8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80024a8:	2307      	movs	r3, #7
 80024aa:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 80024ac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80024b2:	2381      	movs	r3, #129	; 0x81
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024bc:	2340      	movs	r3, #64	; 0x40
 80024be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 80024c0:	2300      	movs	r3, #0
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024c8:	f107 0320 	add.w	r3, r7, #32
 80024cc:	4618      	mov	r0, r3
 80024ce:	f005 f9b5 	bl	800783c <HAL_RCC_OscConfig>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80024d8:	f000 f8de 	bl	8002698 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80024dc:	234f      	movs	r3, #79	; 0x4f
 80024de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80024e0:	2302      	movs	r3, #2
 80024e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024f4:	f107 0308 	add.w	r3, r7, #8
 80024f8:	2101      	movs	r1, #1
 80024fa:	4618      	mov	r0, r3
 80024fc:	f005 fd3a 	bl	8007f74 <HAL_RCC_ClockConfig>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002506:	f000 f8c7 	bl	8002698 <Error_Handler>
  }
}
 800250a:	bf00      	nop
 800250c:	3768      	adds	r7, #104	; 0x68
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	58000400 	.word	0x58000400

08002518 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a13      	ldr	r2, [pc, #76]	; (8002578 <HAL_UARTEx_RxEventCallback+0x60>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d11e      	bne.n	800256c <HAL_UARTEx_RxEventCallback+0x54>
	{
		if(aRXBufferUser[0]=='B'&& aRXBufferUser[1]=='M'){
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_UARTEx_RxEventCallback+0x64>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b42      	cmp	r3, #66	; 0x42
 8002534:	d117      	bne.n	8002566 <HAL_UARTEx_RxEventCallback+0x4e>
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_UARTEx_RxEventCallback+0x64>)
 8002538:	785b      	ldrb	r3, [r3, #1]
 800253a:	2b4d      	cmp	r3, #77	; 0x4d
 800253c:	d113      	bne.n	8002566 <HAL_UARTEx_RxEventCallback+0x4e>
		//memcpy(mainBuffer,aRXBufferUser,Size);
		if((aRXBufferUser[30]<<8) + aRXBufferUser[31])
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_UARTEx_RxEventCallback+0x64>)
 8002540:	7f9b      	ldrb	r3, [r3, #30]
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	4a0d      	ldr	r2, [pc, #52]	; (800257c <HAL_UARTEx_RxEventCallback+0x64>)
 8002546:	7fd2      	ldrb	r2, [r2, #31]
 8002548:	4413      	add	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00b      	beq.n	8002566 <HAL_UARTEx_RxEventCallback+0x4e>
			PM2_5 = aRXBufferUser[6]*256+aRXBufferUser[7];
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_UARTEx_RxEventCallback+0x64>)
 8002550:	799b      	ldrb	r3, [r3, #6]
 8002552:	b29b      	uxth	r3, r3
 8002554:	021b      	lsls	r3, r3, #8
 8002556:	b29a      	uxth	r2, r3
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_UARTEx_RxEventCallback+0x64>)
 800255a:	79db      	ldrb	r3, [r3, #7]
 800255c:	b29b      	uxth	r3, r3
 800255e:	4413      	add	r3, r2
 8002560:	b29a      	uxth	r2, r3
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <HAL_UARTEx_RxEventCallback+0x68>)
 8002564:	801a      	strh	r2, [r3, #0]


		}
		UART2_SET =1;
 8002566:	4b07      	ldr	r3, [pc, #28]	; (8002584 <HAL_UARTEx_RxEventCallback+0x6c>)
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]

	}
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40004400 	.word	0x40004400
 800257c:	20000670 	.word	0x20000670
 8002580:	20000690 	.word	0x20000690
 8002584:	20000010 	.word	0x20000010

08002588 <EnablePM_sens>:

void EnablePM_sens(void){
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800258c:	2200      	movs	r2, #0
 800258e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002596:	f004 f84f 	bl	8006638 <HAL_GPIO_WritePin>

}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}

0800259e <DisablePM_sens>:

void DisablePM_sens(void){
 800259e:	b580      	push	{r7, lr}
 80025a0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80025a2:	2201      	movs	r2, #1
 80025a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ac:	f004 f844 	bl	8006638 <HAL_GPIO_WritePin>


}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <MeasurePM_sens>:

void MeasurePM_sens(void){
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0

	if(PM_measure_flag){
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <MeasurePM_sens+0x30>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00f      	beq.n	80025e0 <MeasurePM_sens+0x2c>
	       UART2_SET = 0;
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <MeasurePM_sens+0x34>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
	       HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 80025c6:	2220      	movs	r2, #32
 80025c8:	4908      	ldr	r1, [pc, #32]	; (80025ec <MeasurePM_sens+0x38>)
 80025ca:	4809      	ldr	r0, [pc, #36]	; (80025f0 <MeasurePM_sens+0x3c>)
 80025cc:	f00b f857 	bl	800d67e <HAL_UARTEx_ReceiveToIdle_DMA>
		   __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <MeasurePM_sens+0x40>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <MeasurePM_sens+0x40>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0204 	bic.w	r2, r2, #4
 80025de:	601a      	str	r2, [r3, #0]


	     }
}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000000 	.word	0x20000000
 80025e8:	20000010 	.word	0x20000010
 80025ec:	20000670 	.word	0x20000670
 80025f0:	2000092c 	.word	0x2000092c
 80025f4:	20000a7c 	.word	0x20000a7c

080025f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
   if (htim == &htim16)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a1e      	ldr	r2, [pc, #120]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d134      	bne.n	8002672 <HAL_TIM_PeriodElapsedCallback+0x7a>
   {
	  counter++;
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3301      	adds	r3, #1
 800260e:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002610:	6013      	str	r3, [r2, #0]
      switch(counter){
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 800261a:	d014      	beq.n	8002646 <HAL_TIM_PeriodElapsedCallback+0x4e>
 800261c:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 8002620:	dc17      	bgt.n	8002652 <HAL_TIM_PeriodElapsedCallback+0x5a>
 8002622:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8002626:	d003      	beq.n	8002630 <HAL_TIM_PeriodElapsedCallback+0x38>
 8002628:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 800262c:	d004      	beq.n	8002638 <HAL_TIM_PeriodElapsedCallback+0x40>
 800262e:	e010      	b.n	8002652 <HAL_TIM_PeriodElapsedCallback+0x5a>
      case 820:
    	  F1_push(EnablePM_sens);
 8002630:	4814      	ldr	r0, [pc, #80]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002632:	f000 f84d 	bl	80026d0 <F1_push>

    	  break;
 8002636:	e00c      	b.n	8002652 <HAL_TIM_PeriodElapsedCallback+0x5a>
      case 840:
     	  PM_measure_flag = 1;
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
    	  F1_push(MeasurePM_sens);
 800263e:	4813      	ldr	r0, [pc, #76]	; (800268c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002640:	f000 f846 	bl	80026d0 <F1_push>
    	  break;
 8002644:	e005      	b.n	8002652 <HAL_TIM_PeriodElapsedCallback+0x5a>
      case 860:
    	  F1_push(DisablePM_sens);
 8002646:	4812      	ldr	r0, [pc, #72]	; (8002690 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002648:	f000 f842 	bl	80026d0 <F1_push>
    	  PM_measure_flag = 0;
 800264c:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
      }

      counter %= 900;
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a0f      	ldr	r2, [pc, #60]	; (8002694 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002658:	fb82 1203 	smull	r1, r2, r2, r3
 800265c:	441a      	add	r2, r3
 800265e:	1251      	asrs	r1, r2, #9
 8002660:	17da      	asrs	r2, r3, #31
 8002662:	1a8a      	subs	r2, r1, r2
 8002664:	f44f 7161 	mov.w	r1, #900	; 0x384
 8002668:	fb01 f202 	mul.w	r2, r1, r2
 800266c:	1a9a      	subs	r2, r3, r2
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002670:	601a      	str	r2, [r3, #0]
   }
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200007fc 	.word	0x200007fc
 8002680:	2000069c 	.word	0x2000069c
 8002684:	08002589 	.word	0x08002589
 8002688:	20000000 	.word	0x20000000
 800268c:	080025b5 	.word	0x080025b5
 8002690:	0800259f 	.word	0x0800259f
 8002694:	91a2b3c5 	.word	0x91a2b3c5

08002698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800269c:	b672      	cpsid	i
}
 800269e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026a0:	e7fe      	b.n	80026a0 <Error_Handler+0x8>

080026a2 <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	bf00      	nop
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
	...

080026b0 <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  F1_last = 0;
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <F1_QueueIni+0x18>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 80026ba:	4b04      	ldr	r3, [pc, #16]	; (80026cc <F1_QueueIni+0x1c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	20000700 	.word	0x20000700
 80026cc:	20000704 	.word	0x20000704

080026d0 <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 80026d8:	4b14      	ldr	r3, [pc, #80]	; (800272c <F1_push+0x5c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	3301      	adds	r3, #1
 80026de:	425a      	negs	r2, r3
 80026e0:	f003 030f 	and.w	r3, r3, #15
 80026e4:	f002 020f 	and.w	r2, r2, #15
 80026e8:	bf58      	it	pl
 80026ea:	4253      	negpl	r3, r2
 80026ec:	4a10      	ldr	r2, [pc, #64]	; (8002730 <F1_push+0x60>)
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d101      	bne.n	80026f8 <F1_push+0x28>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e014      	b.n	8002722 <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <F1_push+0x5c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	490b      	ldr	r1, [pc, #44]	; (800272c <F1_push+0x5c>)
 8002700:	600a      	str	r2, [r1, #0]
 8002702:	490c      	ldr	r1, [pc, #48]	; (8002734 <F1_push+0x64>)
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <F1_push+0x5c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	425a      	negs	r2, r3
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	f002 020f 	and.w	r2, r2, #15
 8002718:	bf58      	it	pl
 800271a:	4253      	negpl	r3, r2
 800271c:	4a03      	ldr	r2, [pc, #12]	; (800272c <F1_push+0x5c>)
 800271e:	6013      	str	r3, [r2, #0]
  return 0;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	20000700 	.word	0x20000700
 8002730:	20000704 	.word	0x20000704
 8002734:	20000708 	.word	0x20000708

08002738 <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <F1_pull+0x4c>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <F1_pull+0x50>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d101      	bne.n	800274e <F1_pull+0x16>
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <F1_pull+0x54>)
 800274c:	e014      	b.n	8002778 <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <F1_pull+0x50>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	490c      	ldr	r1, [pc, #48]	; (8002788 <F1_pull+0x50>)
 8002756:	600a      	str	r2, [r1, #0]
 8002758:	4a0d      	ldr	r2, [pc, #52]	; (8002790 <F1_pull+0x58>)
 800275a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275e:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <F1_pull+0x50>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	425a      	negs	r2, r3
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	f002 020f 	and.w	r2, r2, #15
 800276e:	bf58      	it	pl
 8002770:	4253      	negpl	r3, r2
 8002772:	4a05      	ldr	r2, [pc, #20]	; (8002788 <F1_pull+0x50>)
 8002774:	6013      	str	r3, [r2, #0]
  return pullVar;
 8002776:	687b      	ldr	r3, [r7, #4]
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000700 	.word	0x20000700
 8002788:	20000704 	.word	0x20000704
 800278c:	080026a3 	.word	0x080026a3
 8002790:	20000708 	.word	0x20000708

08002794 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <LL_APB1_GRP1_EnableClock>:
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80027bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80027cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4013      	ands	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027d8:	68fb      	ldr	r3, [r7, #12]
}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08c      	sub	sp, #48	; 0x30
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80027ea:	1d3b      	adds	r3, r7, #4
 80027ec:	222c      	movs	r2, #44	; 0x2c
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f01e fabf 	bl	8020d74 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80027f6:	4b22      	ldr	r3, [pc, #136]	; (8002880 <MX_RTC_Init+0x9c>)
 80027f8:	4a22      	ldr	r2, [pc, #136]	; (8002884 <MX_RTC_Init+0xa0>)
 80027fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80027fc:	4b20      	ldr	r3, [pc, #128]	; (8002880 <MX_RTC_Init+0x9c>)
 80027fe:	221f      	movs	r2, #31
 8002800:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002802:	4b1f      	ldr	r3, [pc, #124]	; (8002880 <MX_RTC_Init+0x9c>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <MX_RTC_Init+0x9c>)
 800280a:	2200      	movs	r2, #0
 800280c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800280e:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <MX_RTC_Init+0x9c>)
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002814:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <MX_RTC_Init+0x9c>)
 8002816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800281a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800281c:	4b18      	ldr	r3, [pc, #96]	; (8002880 <MX_RTC_Init+0x9c>)
 800281e:	2200      	movs	r2, #0
 8002820:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002822:	4b17      	ldr	r3, [pc, #92]	; (8002880 <MX_RTC_Init+0x9c>)
 8002824:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002828:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800282a:	4815      	ldr	r0, [pc, #84]	; (8002880 <MX_RTC_Init+0x9c>)
 800282c:	f006 f85e 	bl	80088ec <HAL_RTC_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002836:	f7ff ff2f 	bl	8002698 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800283a:	4811      	ldr	r0, [pc, #68]	; (8002880 <MX_RTC_Init+0x9c>)
 800283c:	f006 fb4c 	bl	8008ed8 <HAL_RTCEx_SetSSRU_IT>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002846:	f7ff ff27 	bl	8002698 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800284a:	2300      	movs	r3, #0
 800284c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002856:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800285a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800285c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8002862:	1d3b      	adds	r3, r7, #4
 8002864:	2200      	movs	r2, #0
 8002866:	4619      	mov	r1, r3
 8002868:	4805      	ldr	r0, [pc, #20]	; (8002880 <MX_RTC_Init+0x9c>)
 800286a:	f006 f8b9 	bl	80089e0 <HAL_RTC_SetAlarm_IT>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002874:	f7ff ff10 	bl	8002698 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002878:	bf00      	nop
 800287a:	3730      	adds	r7, #48	; 0x30
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20000748 	.word	0x20000748
 8002884:	40002800 	.word	0x40002800

08002888 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b090      	sub	sp, #64	; 0x40
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002890:	f107 0308 	add.w	r3, r7, #8
 8002894:	2238      	movs	r2, #56	; 0x38
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f01e fa6b 	bl	8020d74 <memset>
  if(rtcHandle->Instance==RTC)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a16      	ldr	r2, [pc, #88]	; (80028fc <HAL_RTC_MspInit+0x74>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d125      	bne.n	80028f4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80028a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028ac:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80028ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028b2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028b4:	f107 0308 	add.w	r3, r7, #8
 80028b8:	4618      	mov	r0, r3
 80028ba:	f005 fefd 	bl	80086b8 <HAL_RCCEx_PeriphCLKConfig>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80028c4:	f7ff fee8 	bl	8002698 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80028c8:	f7ff ff64 	bl	8002794 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80028cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80028d0:	f7ff ff70 	bl	80027b4 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80028d4:	2200      	movs	r2, #0
 80028d6:	2100      	movs	r1, #0
 80028d8:	2002      	movs	r0, #2
 80028da:	f002 fd6a 	bl	80053b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80028de:	2002      	movs	r0, #2
 80028e0:	f002 fd81 	bl	80053e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80028e4:	2200      	movs	r2, #0
 80028e6:	2100      	movs	r1, #0
 80028e8:	202a      	movs	r0, #42	; 0x2a
 80028ea:	f002 fd62 	bl	80053b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80028ee:	202a      	movs	r0, #42	; 0x2a
 80028f0:	f002 fd79 	bl	80053e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80028f4:	bf00      	nop
 80028f6:	3740      	adds	r7, #64	; 0x40
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40002800 	.word	0x40002800

08002900 <LL_AHB2_GRP1_EnableClock>:
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800290e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4313      	orrs	r3, r2
 8002916:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4013      	ands	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002924:	68fb      	ldr	r3, [r7, #12]
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <LL_APB1_GRP1_EnableClock>:
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800293e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4313      	orrs	r3, r2
 8002946:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800294c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4013      	ands	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002954:	68fb      	ldr	r3, [r7, #12]
}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002964:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <MX_SPI2_Init+0x74>)
 8002966:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <MX_SPI2_Init+0x78>)
 8002968:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800296a:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <MX_SPI2_Init+0x74>)
 800296c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002970:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002972:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <MX_SPI2_Init+0x74>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002978:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <MX_SPI2_Init+0x74>)
 800297a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800297e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <MX_SPI2_Init+0x74>)
 8002982:	2200      	movs	r2, #0
 8002984:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <MX_SPI2_Init+0x74>)
 8002988:	2200      	movs	r2, #0
 800298a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <MX_SPI2_Init+0x74>)
 800298e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002992:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <MX_SPI2_Init+0x74>)
 8002996:	2218      	movs	r2, #24
 8002998:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800299a:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <MX_SPI2_Init+0x74>)
 800299c:	2200      	movs	r2, #0
 800299e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <MX_SPI2_Init+0x74>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <MX_SPI2_Init+0x74>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80029ac:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <MX_SPI2_Init+0x74>)
 80029ae:	2207      	movs	r2, #7
 80029b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <MX_SPI2_Init+0x74>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <MX_SPI2_Init+0x74>)
 80029ba:	2208      	movs	r2, #8
 80029bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80029be:	4805      	ldr	r0, [pc, #20]	; (80029d4 <MX_SPI2_Init+0x74>)
 80029c0:	f006 fb18 	bl	8008ff4 <HAL_SPI_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80029ca:	f7ff fe65 	bl	8002698 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000780 	.word	0x20000780
 80029d8:	40003800 	.word	0x40003800

080029dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b096      	sub	sp, #88	; 0x58
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029f4:	f107 030c 	add.w	r3, r7, #12
 80029f8:	2238      	movs	r2, #56	; 0x38
 80029fa:	2100      	movs	r1, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f01e f9b9 	bl	8020d74 <memset>
  if(spiHandle->Instance==SPI2)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a21      	ldr	r2, [pc, #132]	; (8002a8c <HAL_SPI_MspInit+0xb0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d13b      	bne.n	8002a84 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8002a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a14:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a16:	f107 030c 	add.w	r3, r7, #12
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f005 fe4c 	bl	80086b8 <HAL_RCCEx_PeriphCLKConfig>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002a26:	f7ff fe37 	bl	8002698 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a2a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a2e:	f7ff ff7f 	bl	8002930 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a32:	2002      	movs	r0, #2
 8002a34:	f7ff ff64 	bl	8002900 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a38:	2001      	movs	r0, #1
 8002a3a:	f7ff ff61 	bl	8002900 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8002a3e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002a42:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a50:	2305      	movs	r3, #5
 8002a52:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a58:	4619      	mov	r1, r3
 8002a5a:	480d      	ldr	r0, [pc, #52]	; (8002a90 <HAL_SPI_MspInit+0xb4>)
 8002a5c:	f003 fbbe 	bl	80061dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a64:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a72:	2305      	movs	r3, #5
 8002a74:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a80:	f003 fbac 	bl	80061dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002a84:	bf00      	nop
 8002a86:	3758      	adds	r7, #88	; 0x58
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40003800 	.word	0x40003800
 8002a90:	48000400 	.word	0x48000400

08002a94 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	58000400 	.word	0x58000400

08002aac <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002ac8:	f001 fad0 	bl	800406c <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8002acc:	f7ff ffe2 	bl	8002a94 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	f004 fbf9 	bl	80072c8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8002ade:	f001 fad3 	bl	8004088 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8002ae2:	f001 f941 	bl	8003d68 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8002aee:	f001 fabd 	bl	800406c <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002af2:	2101      	movs	r1, #1
 8002af4:	2000      	movs	r0, #0
 8002af6:	f004 fb63 	bl	80071c0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}

08002afe <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8002b02:	f001 fac1 	bl	8004088 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b1a:	e7fe      	b.n	8002b1a <NMI_Handler+0x4>

08002b1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b20:	e7fe      	b.n	8002b20 <HardFault_Handler+0x4>

08002b22 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b26:	e7fe      	b.n	8002b26 <MemManage_Handler+0x4>

08002b28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b2c:	e7fe      	b.n	8002b2c <BusFault_Handler+0x4>

08002b2e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b32:	e7fe      	b.n	8002b32 <UsageFault_Handler+0x4>

08002b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002b68:	4802      	ldr	r0, [pc, #8]	; (8002b74 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8002b6a:	f006 f9f1 	bl	8008f50 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000748 	.word	0x20000748

08002b78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <DMA1_Channel1_IRQHandler+0x10>)
 8002b7e:	f002 fec9 	bl	8005914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	200009bc 	.word	0x200009bc

08002b8c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b90:	4802      	ldr	r0, [pc, #8]	; (8002b9c <DMA1_Channel2_IRQHandler+0x10>)
 8002b92:	f002 febf 	bl	8005914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000a1c 	.word	0x20000a1c

08002ba0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ba4:	4802      	ldr	r0, [pc, #8]	; (8002bb0 <DMA1_Channel3_IRQHandler+0x10>)
 8002ba6:	f002 feb5 	bl	8005914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000a7c 	.word	0x20000a7c

08002bb4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	static int counter = 0;
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002bb8:	4804      	ldr	r0, [pc, #16]	; (8002bcc <TIM16_IRQHandler+0x18>)
 8002bba:	f008 f861 	bl	800ac80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  counter++;
 8002bbe:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <TIM16_IRQHandler+0x1c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	4a02      	ldr	r2, [pc, #8]	; (8002bd0 <TIM16_IRQHandler+0x1c>)
 8002bc6:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM16_IRQn 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200007fc 	.word	0x200007fc
 8002bd0:	200007e4 	.word	0x200007e4

08002bd4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
static int counter = 0;
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002bd8:	4804      	ldr	r0, [pc, #16]	; (8002bec <TIM17_IRQHandler+0x18>)
 8002bda:	f008 f851 	bl	800ac80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  counter++;
 8002bde:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <TIM17_IRQHandler+0x1c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3301      	adds	r3, #1
 8002be4:	4a02      	ldr	r2, [pc, #8]	; (8002bf0 <TIM17_IRQHandler+0x1c>)
 8002be6:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM17_IRQn 1 */
}
 8002be8:	bf00      	nop
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000848 	.word	0x20000848
 8002bf0:	200007e8 	.word	0x200007e8

08002bf4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bf8:	4802      	ldr	r0, [pc, #8]	; (8002c04 <USART1_IRQHandler+0x10>)
 8002bfa:	f008 fbf1 	bl	800b3e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	2000089c 	.word	0x2000089c

08002c08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c0c:	4802      	ldr	r0, [pc, #8]	; (8002c18 <USART2_IRQHandler+0x10>)
 8002c0e:	f008 fbe7 	bl	800b3e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	2000092c 	.word	0x2000092c

08002c1c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002c20:	4802      	ldr	r0, [pc, #8]	; (8002c2c <RTC_Alarm_IRQHandler+0x10>)
 8002c22:	f006 f845 	bl	8008cb0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000748 	.word	0x20000748

08002c30 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002c34:	4802      	ldr	r0, [pc, #8]	; (8002c40 <SUBGHZ_Radio_IRQHandler+0x10>)
 8002c36:	f007 fde1 	bl	800a7fc <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200007ec 	.word	0x200007ec

08002c44 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8002c48:	4802      	ldr	r0, [pc, #8]	; (8002c54 <DMAMUX1_OVR_IRQHandler+0x10>)
 8002c4a:	f003 f813 	bl	8005c74 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000a1c 	.word	0x20000a1c

08002c58 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c64:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
}
 8002c7e:	bf00      	nop
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <MX_SUBGHZ_Init+0x20>)
 8002c8e:	2208      	movs	r2, #8
 8002c90:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002c92:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <MX_SUBGHZ_Init+0x20>)
 8002c94:	f007 fb36 	bl	800a304 <HAL_SUBGHZ_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002c9e:	f7ff fcfb 	bl	8002698 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200007ec 	.word	0x200007ec

08002cac <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	f7ff ffcf 	bl	8002c58 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	2032      	movs	r0, #50	; 0x32
 8002cc0:	f002 fb77 	bl	80053b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002cc4:	2032      	movs	r0, #50	; 0x32
 8002cc6:	f002 fb8e 	bl	80053e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002ce4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	608b      	str	r3, [r1, #8]
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002cfc:	4b02      	ldr	r3, [pc, #8]	; (8002d08 <LL_FLASH_GetUDN+0x10>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr
 8002d08:	1fff7580 	.word	0x1fff7580

08002d0c <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <LL_FLASH_GetDeviceID+0x14>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	b2db      	uxtb	r3, r3
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	1fff7584 	.word	0x1fff7584

08002d24 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <LL_FLASH_GetSTCompanyID+0x14>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	0a1b      	lsrs	r3, r3, #8
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	1fff7584 	.word	0x1fff7584

08002d3c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002d40:	2000      	movs	r0, #0
 8002d42:	f7ff ffc6 	bl	8002cd2 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002d46:	f01d fabb 	bl	80202c0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <SystemApp_Init+0x50>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002d50:	f000 f988 	bl	8003064 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002d54:	f01d fd44 	bl	80207e0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002d58:	480d      	ldr	r0, [pc, #52]	; (8002d90 <SystemApp_Init+0x54>)
 8002d5a:	f01d fdef 	bl	802093c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <SystemApp_Init+0x58>)
 8002d60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d64:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002d66:	2002      	movs	r0, #2
 8002d68:	f01d fdf6 	bl	8020958 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002d6c:	f7fe fe96 	bl	8001a9c <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002d70:	f000 f9b0 	bl	80030d4 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002d74:	f01c fc6c 	bl	801f650 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002d78:	2101      	movs	r1, #1
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f01c fca8 	bl	801f6d0 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002d80:	2101      	movs	r1, #1
 8002d82:	2001      	movs	r0, #1
 8002d84:	f01c fc74 	bl	801f670 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002d88:	bf00      	nop
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	200007f8 	.word	0x200007f8
 8002d90:	08002f5d 	.word	0x08002f5d
 8002d94:	58004000 	.word	0x58004000

08002d98 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002d9c:	f01c fcc8 	bl	801f730 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002dae:	f7fe fe83 	bl	8001ab8 <SYS_GetBatteryLevel>
 8002db2:	4603      	mov	r3, r0
 8002db4:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8002db6:	88bb      	ldrh	r3, [r7, #4]
 8002db8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d902      	bls.n	8002dc6 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002dc0:	23fe      	movs	r3, #254	; 0xfe
 8002dc2:	71fb      	strb	r3, [r7, #7]
 8002dc4:	e014      	b.n	8002df0 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8002dc6:	88bb      	ldrh	r3, [r7, #4]
 8002dc8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002dcc:	d202      	bcs.n	8002dd4 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	71fb      	strb	r3, [r7, #7]
 8002dd2:	e00d      	b.n	8002df0 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002dd4:	88bb      	ldrh	r3, [r7, #4]
 8002dd6:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4613      	mov	r3, r2
 8002dde:	01db      	lsls	r3, r3, #7
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <GetBatteryLevel+0x58>)
 8002de8:	fba3 2302 	umull	r2, r3, r3, r2
 8002dec:	09db      	lsrs	r3, r3, #7
 8002dee:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002df0:	79fb      	ldrb	r3, [r7, #7]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	1b4e81b5 	.word	0x1b4e81b5

08002e00 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8002e0a:	1d3b      	adds	r3, r7, #4
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 f937 	bl	8003080 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe f959 	bl	80010cc <__aeabi_f2iz>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002e1e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3720      	adds	r7, #32
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002e2a:	b590      	push	{r4, r7, lr}
 8002e2c:	b087      	sub	sp, #28
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002e36:	f7ff ff5f 	bl	8002cf8 <LL_FLASH_GetUDN>
 8002e3a:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	d138      	bne.n	8002eb6 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002e44:	f001 f92e 	bl	80040a4 <HAL_GetUIDw0>
 8002e48:	4604      	mov	r4, r0
 8002e4a:	f001 f93f 	bl	80040cc <HAL_GetUIDw2>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4423      	add	r3, r4
 8002e52:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002e54:	f001 f930 	bl	80040b8 <HAL_GetUIDw1>
 8002e58:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	0e1a      	lsrs	r2, r3, #24
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3307      	adds	r3, #7
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	0c1a      	lsrs	r2, r3, #16
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3306      	adds	r3, #6
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	0a1a      	lsrs	r2, r3, #8
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3305      	adds	r3, #5
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3304      	adds	r3, #4
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	0e1a      	lsrs	r2, r3, #24
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3303      	adds	r3, #3
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	0c1a      	lsrs	r2, r3, #16
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	0a1a      	lsrs	r2, r3, #8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002eb4:	e031      	b.n	8002f1a <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3307      	adds	r3, #7
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	0a1a      	lsrs	r2, r3, #8
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3306      	adds	r3, #6
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	0c1a      	lsrs	r2, r3, #16
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3305      	adds	r3, #5
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	0e1a      	lsrs	r2, r3, #24
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002ee4:	f7ff ff12 	bl	8002d0c <LL_FLASH_GetDeviceID>
 8002ee8:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3303      	adds	r3, #3
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002ef4:	f7ff ff16 	bl	8002d24 <LL_FLASH_GetSTCompanyID>
 8002ef8:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3302      	adds	r3, #2
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	0a1a      	lsrs	r2, r3, #8
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	0c1b      	lsrs	r3, r3, #16
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	701a      	strb	r2, [r3, #0]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd90      	pop	{r4, r7, pc}

08002f22 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8002f22:	b590      	push	{r4, r7, lr}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8002f2c:	f7ff fee4 	bl	8002cf8 <LL_FLASH_GetUDN>
 8002f30:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d10b      	bne.n	8002f52 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002f3a:	f001 f8b3 	bl	80040a4 <HAL_GetUIDw0>
 8002f3e:	4604      	mov	r4, r0
 8002f40:	f001 f8ba 	bl	80040b8 <HAL_GetUIDw1>
 8002f44:	4603      	mov	r3, r0
 8002f46:	405c      	eors	r4, r3
 8002f48:	f001 f8c0 	bl	80040cc <HAL_GetUIDw2>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4063      	eors	r3, r4
 8002f50:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8002f52:	687b      	ldr	r3, [r7, #4]

}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd90      	pop	{r4, r7, pc}

08002f5c <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002f66:	f107 0308 	add.w	r3, r7, #8
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f01c fcf0 	bl	801f950 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002f76:	9200      	str	r2, [sp, #0]
 8002f78:	4a07      	ldr	r2, [pc, #28]	; (8002f98 <TimestampNow+0x3c>)
 8002f7a:	2110      	movs	r1, #16
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f81d 	bl	8002fbc <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fd f8f8 	bl	8000178 <strlen>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002f90:	bf00      	nop
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	08020f80 	.word	0x08020f80

08002f9c <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	2002      	movs	r0, #2
 8002fa4:	f01c fb64 	bl	801f670 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002fa8:	bf00      	nop
 8002faa:	bd80      	pop	{r7, pc}

08002fac <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	2002      	movs	r0, #2
 8002fb4:	f01c fb5c 	bl	801f670 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002fb8:	bf00      	nop
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002fbc:	b40c      	push	{r2, r3}
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002fc8:	f107 031c 	add.w	r3, r7, #28
 8002fcc:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002fce:	6839      	ldr	r1, [r7, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f01c fe8d 	bl	801fcf4 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fe4:	b002      	add	sp, #8
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_GetTick+0x24>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800300e:	f000 f9dd 	bl	80033cc <TIMER_IF_GetTimerValue>
 8003012:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8003014:	687b      	ldr	r3, [r7, #4]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	200007f8 	.word	0x200007f8

08003024 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fa53 	bl	80034da <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <LL_EXTI_EnableIT_32_63+0x24>)
 8003046:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800304a:	4905      	ldr	r1, [pc, #20]	; (8003060 <LL_EXTI_EnableIT_32_63+0x24>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	58000800 	.word	0x58000800

08003064 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8003068:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800306c:	f7ff ffe6 	bl	800303c <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8003070:	f001 f836 	bl	80040e0 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8003074:	f001 f83a 	bl	80040ec <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8003078:	f001 f83e 	bl	80040f8 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 800307c:	bf00      	nop
 800307e:	bd80      	pop	{r7, pc}

08003080 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8003088:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <EnvSensors_Read+0x40>)
 800308a:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 800308c:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <EnvSensors_Read+0x44>)
 800308e:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8003090:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <EnvSensors_Read+0x48>)
 8003092:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a08      	ldr	r2, [pc, #32]	; (80030cc <EnvSensors_Read+0x4c>)
 80030aa:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <EnvSensors_Read+0x50>)
 80030b0:	611a      	str	r2, [r3, #16]

  return 0;
 80030b2:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	371c      	adds	r7, #28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	42480000 	.word	0x42480000
 80030c4:	41900000 	.word	0x41900000
 80030c8:	447a0000 	.word	0x447a0000
 80030cc:	003e090d 	.word	0x003e090d
 80030d0:	000503ab 	.word	0x000503ab

080030d4 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 80030de:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr

080030ea <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr

080030f6 <LL_APB2_GRP1_EnableClock>:
{
 80030f6:	b480      	push	{r7}
 80030f8:	b085      	sub	sp, #20
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80030fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003102:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003104:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4313      	orrs	r3, r2
 800310c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800310e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003112:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4013      	ands	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800311a:	68fb      	ldr	r3, [r7, #12]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr
	...

08003128 <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800312c:	4b16      	ldr	r3, [pc, #88]	; (8003188 <MX_TIM16_Init+0x60>)
 800312e:	4a17      	ldr	r2, [pc, #92]	; (800318c <MX_TIM16_Init+0x64>)
 8003130:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 8003132:	4b15      	ldr	r3, [pc, #84]	; (8003188 <MX_TIM16_Init+0x60>)
 8003134:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003138:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800313a:	4b13      	ldr	r3, [pc, #76]	; (8003188 <MX_TIM16_Init+0x60>)
 800313c:	2200      	movs	r2, #0
 800313e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32000;
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <MX_TIM16_Init+0x60>)
 8003142:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8003146:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003148:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <MX_TIM16_Init+0x60>)
 800314a:	2200      	movs	r2, #0
 800314c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800314e:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <MX_TIM16_Init+0x60>)
 8003150:	2200      	movs	r2, #0
 8003152:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <MX_TIM16_Init+0x60>)
 8003156:	2280      	movs	r2, #128	; 0x80
 8003158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800315a:	480b      	ldr	r0, [pc, #44]	; (8003188 <MX_TIM16_Init+0x60>)
 800315c:	f007 fcec 	bl	800ab38 <HAL_TIM_Base_Init>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8003166:	f7ff fa97 	bl	8002698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800316a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800316e:	f7ff ffc2 	bl	80030f6 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003172:	2200      	movs	r2, #0
 8003174:	2100      	movs	r1, #0
 8003176:	201c      	movs	r0, #28
 8003178:	f002 f91b 	bl	80053b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800317c:	201c      	movs	r0, #28
 800317e:	f002 f932 	bl	80053e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM16_Init 2 */

}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	200007fc 	.word	0x200007fc
 800318c:	40014400 	.word	0x40014400

08003190 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003194:	4b15      	ldr	r3, [pc, #84]	; (80031ec <MX_TIM17_Init+0x5c>)
 8003196:	4a16      	ldr	r2, [pc, #88]	; (80031f0 <MX_TIM17_Init+0x60>)
 8003198:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800319a:	4b14      	ldr	r3, [pc, #80]	; (80031ec <MX_TIM17_Init+0x5c>)
 800319c:	2200      	movs	r2, #0
 800319e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031a0:	4b12      	ldr	r3, [pc, #72]	; (80031ec <MX_TIM17_Init+0x5c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80031a6:	4b11      	ldr	r3, [pc, #68]	; (80031ec <MX_TIM17_Init+0x5c>)
 80031a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031ac:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031ae:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <MX_TIM17_Init+0x5c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80031b4:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <MX_TIM17_Init+0x5c>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <MX_TIM17_Init+0x5c>)
 80031bc:	2200      	movs	r2, #0
 80031be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80031c0:	480a      	ldr	r0, [pc, #40]	; (80031ec <MX_TIM17_Init+0x5c>)
 80031c2:	f007 fcb9 	bl	800ab38 <HAL_TIM_Base_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80031cc:	f7ff fa64 	bl	8002698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80031d0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80031d4:	f7ff ff8f 	bl	80030f6 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80031d8:	2200      	movs	r2, #0
 80031da:	2100      	movs	r1, #0
 80031dc:	201d      	movs	r0, #29
 80031de:	f002 f8e8 	bl	80053b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80031e2:	201d      	movs	r0, #29
 80031e4:	f002 f8ff 	bl	80053e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM17_Init 2 */

}
 80031e8:	bf00      	nop
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20000848 	.word	0x20000848
 80031f0:	40014800 	.word	0x40014800

080031f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a12      	ldr	r2, [pc, #72]	; (800324c <HAL_TIM_Base_MspInit+0x58>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d10c      	bne.n	8003220 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003206:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800320a:	f7ff ff74 	bl	80030f6 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800320e:	2200      	movs	r2, #0
 8003210:	2100      	movs	r1, #0
 8003212:	201c      	movs	r0, #28
 8003214:	f002 f8cd 	bl	80053b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003218:	201c      	movs	r0, #28
 800321a:	f002 f8e4 	bl	80053e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800321e:	e010      	b.n	8003242 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <HAL_TIM_Base_MspInit+0x5c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d10b      	bne.n	8003242 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800322a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800322e:	f7ff ff62 	bl	80030f6 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003232:	2200      	movs	r2, #0
 8003234:	2100      	movs	r1, #0
 8003236:	201d      	movs	r0, #29
 8003238:	f002 f8bb 	bl	80053b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800323c:	201d      	movs	r0, #29
 800323e:	f002 f8d2 	bl	80053e6 <HAL_NVIC_EnableIRQ>
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40014400 	.word	0x40014400
 8003250:	40014800 	.word	0x40014800

08003254 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr
	...

0800326c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8003276:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <TIMER_IF_Init+0x5c>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	f083 0301 	eor.w	r3, r3, #1
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01b      	beq.n	80032bc <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <TIMER_IF_Init+0x60>)
 8003286:	f04f 32ff 	mov.w	r2, #4294967295
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 800328c:	f7ff faaa 	bl	80027e4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8003290:	f000 f856 	bl	8003340 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003298:	480c      	ldr	r0, [pc, #48]	; (80032cc <TIMER_IF_Init+0x60>)
 800329a:	f005 fcad 	bl	8008bf8 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <TIMER_IF_Init+0x60>)
 80032a0:	f04f 32ff 	mov.w	r2, #4294967295
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80032a6:	4809      	ldr	r0, [pc, #36]	; (80032cc <TIMER_IF_Init+0x60>)
 80032a8:	f005 fde4 	bl	8008e74 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80032ac:	2000      	movs	r0, #0
 80032ae:	f000 f9d3 	bl	8003658 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80032b2:	f000 f85f 	bl	8003374 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80032b6:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <TIMER_IF_Init+0x5c>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80032bc:	79fb      	ldrb	r3, [r7, #7]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000894 	.word	0x20000894
 80032cc:	20000748 	.word	0x20000748

080032d0 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08e      	sub	sp, #56	; 0x38
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80032de:	f107 0308 	add.w	r3, r7, #8
 80032e2:	222c      	movs	r2, #44	; 0x2c
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f01d fd44 	bl	8020d74 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80032ec:	f000 f828 	bl	8003340 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80032f0:	4b11      	ldr	r3, [pc, #68]	; (8003338 <TIMER_IF_StartTimer+0x68>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	43db      	mvns	r3, r3
 8003302:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003304:	2300      	movs	r3, #0
 8003306:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8003308:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800330c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800330e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003312:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003314:	f107 0308 	add.w	r3, r7, #8
 8003318:	2201      	movs	r2, #1
 800331a:	4619      	mov	r1, r3
 800331c:	4807      	ldr	r0, [pc, #28]	; (800333c <TIMER_IF_StartTimer+0x6c>)
 800331e:	f005 fb5f 	bl	80089e0 <HAL_RTC_SetAlarm_IT>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8003328:	f7ff f9b6 	bl	8002698 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 800332c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8003330:	4618      	mov	r0, r3
 8003332:	3738      	adds	r7, #56	; 0x38
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20000898 	.word	0x20000898
 800333c:	20000748 	.word	0x20000748

08003340 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800334a:	4b08      	ldr	r3, [pc, #32]	; (800336c <TIMER_IF_StopTimer+0x2c>)
 800334c:	2201      	movs	r2, #1
 800334e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003354:	4806      	ldr	r0, [pc, #24]	; (8003370 <TIMER_IF_StopTimer+0x30>)
 8003356:	f005 fc4f 	bl	8008bf8 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <TIMER_IF_StopTimer+0x30>)
 800335c:	f04f 32ff 	mov.w	r2, #4294967295
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8003362:	79fb      	ldrb	r3, [r7, #7]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40002800 	.word	0x40002800
 8003370:	20000748 	.word	0x20000748

08003374 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8003378:	f000 f98e 	bl	8003698 <GetTimerTicks>
 800337c:	4603      	mov	r3, r0
 800337e:	4a03      	ldr	r2, [pc, #12]	; (800338c <TIMER_IF_SetTimerContext+0x18>)
 8003380:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8003382:	4b02      	ldr	r3, [pc, #8]	; (800338c <TIMER_IF_SetTimerContext+0x18>)
 8003384:	681b      	ldr	r3, [r3, #0]
}
 8003386:	4618      	mov	r0, r3
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000898 	.word	0x20000898

08003390 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8003394:	4b02      	ldr	r3, [pc, #8]	; (80033a0 <TIMER_IF_GetTimerContext+0x10>)
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	20000898 	.word	0x20000898

080033a4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80033ae:	f000 f973 	bl	8003698 <GetTimerTicks>
 80033b2:	4602      	mov	r2, r0
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80033bc:	687b      	ldr	r3, [r7, #4]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000898 	.word	0x20000898

080033cc <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80033d6:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <TIMER_IF_GetTimerValue+0x24>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80033de:	f000 f95b 	bl	8003698 <GetTimerTicks>
 80033e2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80033e4:	687b      	ldr	r3, [r7, #4]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000894 	.word	0x20000894

080033f4 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80033fe:	2303      	movs	r3, #3
 8003400:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8003402:	687b      	ldr	r3, [r7, #4]
}
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr

0800340e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800340e:	b5b0      	push	{r4, r5, r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8003416:	2100      	movs	r1, #0
 8003418:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	2000      	movs	r0, #0
 800341e:	460a      	mov	r2, r1
 8003420:	4603      	mov	r3, r0
 8003422:	0d95      	lsrs	r5, r2, #22
 8003424:	0294      	lsls	r4, r2, #10
 8003426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	4620      	mov	r0, r4
 8003430:	4629      	mov	r1, r5
 8003432:	f7fd fe91 	bl	8001158 <__aeabi_uldivmod>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4613      	mov	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 800343e:	68fb      	ldr	r3, [r7, #12]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bdb0      	pop	{r4, r5, r7, pc}

08003448 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8003448:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800344c:	b085      	sub	sp, #20
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8003452:	2100      	movs	r1, #0
 8003454:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	2000      	movs	r0, #0
 800345a:	460c      	mov	r4, r1
 800345c:	4605      	mov	r5, r0
 800345e:	4620      	mov	r0, r4
 8003460:	4629      	mov	r1, r5
 8003462:	f04f 0a00 	mov.w	sl, #0
 8003466:	f04f 0b00 	mov.w	fp, #0
 800346a:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800346e:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8003472:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8003476:	4650      	mov	r0, sl
 8003478:	4659      	mov	r1, fp
 800347a:	1b02      	subs	r2, r0, r4
 800347c:	eb61 0305 	sbc.w	r3, r1, r5
 8003480:	f04f 0000 	mov.w	r0, #0
 8003484:	f04f 0100 	mov.w	r1, #0
 8003488:	0099      	lsls	r1, r3, #2
 800348a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800348e:	0090      	lsls	r0, r2, #2
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	eb12 0804 	adds.w	r8, r2, r4
 8003498:	eb43 0905 	adc.w	r9, r3, r5
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034b0:	4690      	mov	r8, r2
 80034b2:	4699      	mov	r9, r3
 80034b4:	4640      	mov	r0, r8
 80034b6:	4649      	mov	r1, r9
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	0a82      	lsrs	r2, r0, #10
 80034c2:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80034c6:	0a8b      	lsrs	r3, r1, #10
 80034c8:	4613      	mov	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80034cc:	68fb      	ldr	r3, [r7, #12]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80034d8:	4770      	bx	lr

080034da <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff ff93 	bl	800340e <TIMER_IF_Convert_ms2Tick>
 80034e8:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80034ea:	f000 f8d5 	bl	8003698 <GetTimerTicks>
 80034ee:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80034f0:	e000      	b.n	80034f4 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80034f2:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80034f4:	f000 f8d0 	bl	8003698 <GetTimerTicks>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	429a      	cmp	r2, r3
 8003502:	d8f6      	bhi.n	80034f2 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8003516:	f01d f821 	bl	802055c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800352a:	f000 f8a5 	bl	8003678 <TIMER_IF_BkUp_Read_MSBticks>
 800352e:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3301      	adds	r3, #1
 8003534:	4618      	mov	r0, r3
 8003536:	f000 f88f 	bl	8003658 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8003542:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003546:	b08c      	sub	sp, #48	; 0x30
 8003548:	af00      	add	r7, sp, #0
 800354a:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8003550:	f000 f8a2 	bl	8003698 <GetTimerTicks>
 8003554:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8003556:	f000 f88f 	bl	8003678 <TIMER_IF_BkUp_Read_MSBticks>
 800355a:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	2200      	movs	r2, #0
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	60fa      	str	r2, [r7, #12]
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	000b      	movs	r3, r1
 8003570:	2200      	movs	r2, #0
 8003572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003574:	2000      	movs	r0, #0
 8003576:	460c      	mov	r4, r1
 8003578:	4605      	mov	r5, r0
 800357a:	eb12 0804 	adds.w	r8, r2, r4
 800357e:	eb43 0905 	adc.w	r9, r3, r5
 8003582:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8003586:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	0a82      	lsrs	r2, r0, #10
 8003594:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8003598:	0a8b      	lsrs	r3, r1, #10
 800359a:	4613      	mov	r3, r2
 800359c:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2200      	movs	r2, #0
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80035ac:	f04f 0b00 	mov.w	fp, #0
 80035b0:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ff46 	bl	8003448 <TIMER_IF_Convert_Tick2ms>
 80035bc:	4603      	mov	r3, r0
 80035be:	b29a      	uxth	r2, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3730      	adds	r7, #48	; 0x30
 80035ca:	46bd      	mov	sp, r7
 80035cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080035d0 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	2100      	movs	r1, #0
 80035dc:	4803      	ldr	r0, [pc, #12]	; (80035ec <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80035de:	f005 fcdb 	bl	8008f98 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000748 	.word	0x20000748

080035f0 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	2101      	movs	r1, #1
 80035fc:	4803      	ldr	r0, [pc, #12]	; (800360c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80035fe:	f005 fccb 	bl	8008f98 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20000748 	.word	0x20000748

08003610 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800361a:	2100      	movs	r1, #0
 800361c:	4804      	ldr	r0, [pc, #16]	; (8003630 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800361e:	f005 fcd3 	bl	8008fc8 <HAL_RTCEx_BKUPRead>
 8003622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8003624:	687b      	ldr	r3, [r7, #4]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000748 	.word	0x20000748

08003634 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800363a:	2300      	movs	r3, #0
 800363c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800363e:	2101      	movs	r1, #1
 8003640:	4804      	ldr	r0, [pc, #16]	; (8003654 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8003642:	f005 fcc1 	bl	8008fc8 <HAL_RTCEx_BKUPRead>
 8003646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8003648:	687b      	ldr	r3, [r7, #4]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20000748 	.word	0x20000748

08003658 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	2102      	movs	r1, #2
 8003664:	4803      	ldr	r0, [pc, #12]	; (8003674 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8003666:	f005 fc97 	bl	8008f98 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20000748 	.word	0x20000748

08003678 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800367e:	2102      	movs	r1, #2
 8003680:	4804      	ldr	r0, [pc, #16]	; (8003694 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8003682:	f005 fca1 	bl	8008fc8 <HAL_RTCEx_BKUPRead>
 8003686:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8003688:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000748 	.word	0x20000748

08003698 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800369e:	480b      	ldr	r0, [pc, #44]	; (80036cc <GetTimerTicks+0x34>)
 80036a0:	f7ff fdd8 	bl	8003254 <LL_RTC_TIME_GetSubSecond>
 80036a4:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80036a6:	e003      	b.n	80036b0 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80036a8:	4808      	ldr	r0, [pc, #32]	; (80036cc <GetTimerTicks+0x34>)
 80036aa:	f7ff fdd3 	bl	8003254 <LL_RTC_TIME_GetSubSecond>
 80036ae:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80036b0:	4806      	ldr	r0, [pc, #24]	; (80036cc <GetTimerTicks+0x34>)
 80036b2:	f7ff fdcf 	bl	8003254 <LL_RTC_TIME_GetSubSecond>
 80036b6:	4602      	mov	r2, r0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d1f4      	bne.n	80036a8 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40002800 	.word	0x40002800

080036d0 <LL_AHB2_GRP1_EnableClock>:
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80036d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80036e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4013      	ands	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80036f4:	68fb      	ldr	r3, [r7, #12]
}
 80036f6:	bf00      	nop
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <LL_APB1_GRP1_EnableClock>:
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800370e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4313      	orrs	r3, r2
 8003716:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800371c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4013      	ands	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003724:	68fb      	ldr	r3, [r7, #12]
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <LL_APB1_GRP1_DisableClock>:
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800373c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	43db      	mvns	r3, r3
 8003742:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003746:	4013      	ands	r3, r2
 8003748:	658b      	str	r3, [r1, #88]	; 0x58
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <LL_APB2_GRP1_EnableClock>:
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800375c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003760:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003762:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4313      	orrs	r3, r2
 800376a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800376c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003770:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4013      	ands	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003778:	68fb      	ldr	r3, [r7, #12]
}
 800377a:	bf00      	nop
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <LL_APB2_GRP1_DisableClock>:
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800378c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003790:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	43db      	mvns	r3, r3
 8003796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800379a:	4013      	ands	r3, r2
 800379c:	660b      	str	r3, [r1, #96]	; 0x60
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr

080037a8 <LL_SYSCFG_EnableFastModePlus>:
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <LL_SYSCFG_EnableFastModePlus+0x20>)
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	4904      	ldr	r1, [pc, #16]	; (80037c8 <LL_SYSCFG_EnableFastModePlus+0x20>)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40010000 	.word	0x40010000

080037cc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037d0:	4b26      	ldr	r3, [pc, #152]	; (800386c <MX_USART1_UART_Init+0xa0>)
 80037d2:	4a27      	ldr	r2, [pc, #156]	; (8003870 <MX_USART1_UART_Init+0xa4>)
 80037d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80037d6:	4b25      	ldr	r3, [pc, #148]	; (800386c <MX_USART1_UART_Init+0xa0>)
 80037d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037de:	4b23      	ldr	r3, [pc, #140]	; (800386c <MX_USART1_UART_Init+0xa0>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037e4:	4b21      	ldr	r3, [pc, #132]	; (800386c <MX_USART1_UART_Init+0xa0>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <MX_USART1_UART_Init+0xa0>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037f0:	4b1e      	ldr	r3, [pc, #120]	; (800386c <MX_USART1_UART_Init+0xa0>)
 80037f2:	220c      	movs	r2, #12
 80037f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037f6:	4b1d      	ldr	r3, [pc, #116]	; (800386c <MX_USART1_UART_Init+0xa0>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037fc:	4b1b      	ldr	r3, [pc, #108]	; (800386c <MX_USART1_UART_Init+0xa0>)
 80037fe:	2200      	movs	r2, #0
 8003800:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003802:	4b1a      	ldr	r3, [pc, #104]	; (800386c <MX_USART1_UART_Init+0xa0>)
 8003804:	2200      	movs	r2, #0
 8003806:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003808:	4b18      	ldr	r3, [pc, #96]	; (800386c <MX_USART1_UART_Init+0xa0>)
 800380a:	2200      	movs	r2, #0
 800380c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 800380e:	4b17      	ldr	r3, [pc, #92]	; (800386c <MX_USART1_UART_Init+0xa0>)
 8003810:	2240      	movs	r2, #64	; 0x40
 8003812:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8003814:	4b15      	ldr	r3, [pc, #84]	; (800386c <MX_USART1_UART_Init+0xa0>)
 8003816:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800381a:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 800381c:	4b13      	ldr	r3, [pc, #76]	; (800386c <MX_USART1_UART_Init+0xa0>)
 800381e:	2200      	movs	r2, #0
 8003820:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003822:	4812      	ldr	r0, [pc, #72]	; (800386c <MX_USART1_UART_Init+0xa0>)
 8003824:	f007 fc0e 	bl	800b044 <HAL_UART_Init>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 800382e:	f7fe ff33 	bl	8002698 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003832:	2100      	movs	r1, #0
 8003834:	480d      	ldr	r0, [pc, #52]	; (800386c <MX_USART1_UART_Init+0xa0>)
 8003836:	f009 fea6 	bl	800d586 <HAL_UARTEx_SetTxFifoThreshold>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8003840:	f7fe ff2a 	bl	8002698 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003844:	2100      	movs	r1, #0
 8003846:	4809      	ldr	r0, [pc, #36]	; (800386c <MX_USART1_UART_Init+0xa0>)
 8003848:	f009 fedb 	bl	800d602 <HAL_UARTEx_SetRxFifoThreshold>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8003852:	f7fe ff21 	bl	8002698 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8003856:	4805      	ldr	r0, [pc, #20]	; (800386c <MX_USART1_UART_Init+0xa0>)
 8003858:	f009 fe22 	bl	800d4a0 <HAL_UARTEx_EnableFifoMode>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8003862:	f7fe ff19 	bl	8002698 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	2000089c 	.word	0x2000089c
 8003870:	40013800 	.word	0x40013800

08003874 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003878:	4b23      	ldr	r3, [pc, #140]	; (8003908 <MX_USART2_UART_Init+0x94>)
 800387a:	4a24      	ldr	r2, [pc, #144]	; (800390c <MX_USART2_UART_Init+0x98>)
 800387c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800387e:	4b22      	ldr	r3, [pc, #136]	; (8003908 <MX_USART2_UART_Init+0x94>)
 8003880:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003886:	4b20      	ldr	r3, [pc, #128]	; (8003908 <MX_USART2_UART_Init+0x94>)
 8003888:	2200      	movs	r2, #0
 800388a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800388c:	4b1e      	ldr	r3, [pc, #120]	; (8003908 <MX_USART2_UART_Init+0x94>)
 800388e:	2200      	movs	r2, #0
 8003890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003892:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <MX_USART2_UART_Init+0x94>)
 8003894:	2200      	movs	r2, #0
 8003896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003898:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <MX_USART2_UART_Init+0x94>)
 800389a:	220c      	movs	r2, #12
 800389c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800389e:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <MX_USART2_UART_Init+0x94>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80038a4:	4b18      	ldr	r3, [pc, #96]	; (8003908 <MX_USART2_UART_Init+0x94>)
 80038a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80038aa:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038ac:	4b16      	ldr	r3, [pc, #88]	; (8003908 <MX_USART2_UART_Init+0x94>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80038b2:	4b15      	ldr	r3, [pc, #84]	; (8003908 <MX_USART2_UART_Init+0x94>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038b8:	4b13      	ldr	r3, [pc, #76]	; (8003908 <MX_USART2_UART_Init+0x94>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038be:	4812      	ldr	r0, [pc, #72]	; (8003908 <MX_USART2_UART_Init+0x94>)
 80038c0:	f007 fbc0 	bl	800b044 <HAL_UART_Init>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80038ca:	f7fe fee5 	bl	8002698 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038ce:	2100      	movs	r1, #0
 80038d0:	480d      	ldr	r0, [pc, #52]	; (8003908 <MX_USART2_UART_Init+0x94>)
 80038d2:	f009 fe58 	bl	800d586 <HAL_UARTEx_SetTxFifoThreshold>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80038dc:	f7fe fedc 	bl	8002698 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038e0:	2100      	movs	r1, #0
 80038e2:	4809      	ldr	r0, [pc, #36]	; (8003908 <MX_USART2_UART_Init+0x94>)
 80038e4:	f009 fe8d 	bl	800d602 <HAL_UARTEx_SetRxFifoThreshold>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80038ee:	f7fe fed3 	bl	8002698 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80038f2:	4805      	ldr	r0, [pc, #20]	; (8003908 <MX_USART2_UART_Init+0x94>)
 80038f4:	f009 fe0f 	bl	800d516 <HAL_UARTEx_DisableFifoMode>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80038fe:	f7fe fecb 	bl	8002698 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	2000092c 	.word	0x2000092c
 800390c:	40004400 	.word	0x40004400

08003910 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b09a      	sub	sp, #104	; 0x68
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003918:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	60da      	str	r2, [r3, #12]
 8003926:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8003928:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003936:	f107 030c 	add.w	r3, r7, #12
 800393a:	2238      	movs	r2, #56	; 0x38
 800393c:	2100      	movs	r1, #0
 800393e:	4618      	mov	r0, r3
 8003940:	f01d fa18 	bl	8020d74 <memset>
  if(uartHandle->Instance==USART1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a83      	ldr	r2, [pc, #524]	; (8003b58 <HAL_UART_MspInit+0x248>)
 800394a:	4293      	cmp	r3, r2
 800394c:	f040 80a3 	bne.w	8003a96 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003950:	2301      	movs	r3, #1
 8003952:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003954:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003958:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800395a:	f107 030c 	add.w	r3, r7, #12
 800395e:	4618      	mov	r0, r3
 8003960:	f004 feaa 	bl	80086b8 <HAL_RCCEx_PeriphCLKConfig>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 800396a:	f7fe fe95 	bl	8002698 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800396e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003972:	f7ff feef 	bl	8003754 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003976:	2002      	movs	r0, #2
 8003978:	f7ff feaa 	bl	80036d0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 800397c:	23c0      	movs	r3, #192	; 0xc0
 800397e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003980:	2302      	movs	r3, #2
 8003982:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003984:	2301      	movs	r3, #1
 8003986:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003988:	2301      	movs	r3, #1
 800398a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800398c:	2307      	movs	r3, #7
 800398e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003990:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003994:	4619      	mov	r1, r3
 8003996:	4871      	ldr	r0, [pc, #452]	; (8003b5c <HAL_UART_MspInit+0x24c>)
 8003998:	f002 fc20 	bl	80061dc <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 800399c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80039a0:	f7ff ff02 	bl	80037a8 <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 80039a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80039a8:	f7ff fefe 	bl	80037a8 <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80039ac:	4b6c      	ldr	r3, [pc, #432]	; (8003b60 <HAL_UART_MspInit+0x250>)
 80039ae:	4a6d      	ldr	r2, [pc, #436]	; (8003b64 <HAL_UART_MspInit+0x254>)
 80039b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80039b2:	4b6b      	ldr	r3, [pc, #428]	; (8003b60 <HAL_UART_MspInit+0x250>)
 80039b4:	2212      	movs	r2, #18
 80039b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039b8:	4b69      	ldr	r3, [pc, #420]	; (8003b60 <HAL_UART_MspInit+0x250>)
 80039ba:	2210      	movs	r2, #16
 80039bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039be:	4b68      	ldr	r3, [pc, #416]	; (8003b60 <HAL_UART_MspInit+0x250>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039c4:	4b66      	ldr	r3, [pc, #408]	; (8003b60 <HAL_UART_MspInit+0x250>)
 80039c6:	2280      	movs	r2, #128	; 0x80
 80039c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039ca:	4b65      	ldr	r3, [pc, #404]	; (8003b60 <HAL_UART_MspInit+0x250>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039d0:	4b63      	ldr	r3, [pc, #396]	; (8003b60 <HAL_UART_MspInit+0x250>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80039d6:	4b62      	ldr	r3, [pc, #392]	; (8003b60 <HAL_UART_MspInit+0x250>)
 80039d8:	2200      	movs	r2, #0
 80039da:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039dc:	4b60      	ldr	r3, [pc, #384]	; (8003b60 <HAL_UART_MspInit+0x250>)
 80039de:	2200      	movs	r2, #0
 80039e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80039e2:	485f      	ldr	r0, [pc, #380]	; (8003b60 <HAL_UART_MspInit+0x250>)
 80039e4:	f001 fd1c 	bl	8005420 <HAL_DMA_Init>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80039ee:	f7fe fe53 	bl	8002698 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a5a      	ldr	r2, [pc, #360]	; (8003b60 <HAL_UART_MspInit+0x250>)
 80039f6:	679a      	str	r2, [r3, #120]	; 0x78
 80039f8:	4a59      	ldr	r2, [pc, #356]	; (8003b60 <HAL_UART_MspInit+0x250>)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80039fe:	4b5a      	ldr	r3, [pc, #360]	; (8003b68 <HAL_UART_MspInit+0x258>)
 8003a00:	4a5a      	ldr	r2, [pc, #360]	; (8003b6c <HAL_UART_MspInit+0x25c>)
 8003a02:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003a04:	4b58      	ldr	r3, [pc, #352]	; (8003b68 <HAL_UART_MspInit+0x258>)
 8003a06:	2211      	movs	r2, #17
 8003a08:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a0a:	4b57      	ldr	r3, [pc, #348]	; (8003b68 <HAL_UART_MspInit+0x258>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a10:	4b55      	ldr	r3, [pc, #340]	; (8003b68 <HAL_UART_MspInit+0x258>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a16:	4b54      	ldr	r3, [pc, #336]	; (8003b68 <HAL_UART_MspInit+0x258>)
 8003a18:	2280      	movs	r2, #128	; 0x80
 8003a1a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a1c:	4b52      	ldr	r3, [pc, #328]	; (8003b68 <HAL_UART_MspInit+0x258>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a22:	4b51      	ldr	r3, [pc, #324]	; (8003b68 <HAL_UART_MspInit+0x258>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003a28:	4b4f      	ldr	r3, [pc, #316]	; (8003b68 <HAL_UART_MspInit+0x258>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a2e:	4b4e      	ldr	r3, [pc, #312]	; (8003b68 <HAL_UART_MspInit+0x258>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003a34:	484c      	ldr	r0, [pc, #304]	; (8003b68 <HAL_UART_MspInit+0x258>)
 8003a36:	f001 fcf3 	bl	8005420 <HAL_DMA_Init>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8003a40:	f7fe fe2a 	bl	8002698 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 8003a5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a60:	4619      	mov	r1, r3
 8003a62:	4841      	ldr	r0, [pc, #260]	; (8003b68 <HAL_UART_MspInit+0x258>)
 8003a64:	f002 f8c6 	bl	8005bf4 <HAL_DMAEx_ConfigMuxSync>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8003a6e:	f7fe fe13 	bl	8002698 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a3c      	ldr	r2, [pc, #240]	; (8003b68 <HAL_UART_MspInit+0x258>)
 8003a76:	67da      	str	r2, [r3, #124]	; 0x7c
 8003a78:	4a3b      	ldr	r2, [pc, #236]	; (8003b68 <HAL_UART_MspInit+0x258>)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2102      	movs	r1, #2
 8003a82:	2024      	movs	r0, #36	; 0x24
 8003a84:	f001 fc95 	bl	80053b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a88:	2024      	movs	r0, #36	; 0x24
 8003a8a:	f001 fcac 	bl	80053e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003a8e:	200c      	movs	r0, #12
 8003a90:	f001 fca9 	bl	80053e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003a94:	e05c      	b.n	8003b50 <HAL_UART_MspInit+0x240>
  else if(uartHandle->Instance==USART2)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a35      	ldr	r2, [pc, #212]	; (8003b70 <HAL_UART_MspInit+0x260>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d157      	bne.n	8003b50 <HAL_UART_MspInit+0x240>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003aa4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8003aa8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003aaa:	f107 030c 	add.w	r3, r7, #12
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f004 fe02 	bl	80086b8 <HAL_RCCEx_PeriphCLKConfig>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 8003aba:	f7fe fded 	bl	8002698 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003abe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003ac2:	f7ff fe1d 	bl	8003700 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	f7ff fe02 	bl	80036d0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8003acc:	230c      	movs	r3, #12
 8003ace:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003adc:	2307      	movs	r3, #7
 8003ade:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aea:	f002 fb77 	bl	80061dc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8003aee:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <HAL_UART_MspInit+0x264>)
 8003af0:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <HAL_UART_MspInit+0x268>)
 8003af2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003af4:	4b1f      	ldr	r3, [pc, #124]	; (8003b74 <HAL_UART_MspInit+0x264>)
 8003af6:	2213      	movs	r2, #19
 8003af8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003afa:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <HAL_UART_MspInit+0x264>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b00:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <HAL_UART_MspInit+0x264>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b06:	4b1b      	ldr	r3, [pc, #108]	; (8003b74 <HAL_UART_MspInit+0x264>)
 8003b08:	2280      	movs	r2, #128	; 0x80
 8003b0a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b0c:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <HAL_UART_MspInit+0x264>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b12:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <HAL_UART_MspInit+0x264>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003b18:	4b16      	ldr	r3, [pc, #88]	; (8003b74 <HAL_UART_MspInit+0x264>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b1e:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <HAL_UART_MspInit+0x264>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003b24:	4813      	ldr	r0, [pc, #76]	; (8003b74 <HAL_UART_MspInit+0x264>)
 8003b26:	f001 fc7b 	bl	8005420 <HAL_DMA_Init>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_UART_MspInit+0x224>
      Error_Handler();
 8003b30:	f7fe fdb2 	bl	8002698 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a0f      	ldr	r2, [pc, #60]	; (8003b74 <HAL_UART_MspInit+0x264>)
 8003b38:	67da      	str	r2, [r3, #124]	; 0x7c
 8003b3a:	4a0e      	ldr	r2, [pc, #56]	; (8003b74 <HAL_UART_MspInit+0x264>)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b40:	2200      	movs	r2, #0
 8003b42:	2100      	movs	r1, #0
 8003b44:	2025      	movs	r0, #37	; 0x25
 8003b46:	f001 fc34 	bl	80053b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b4a:	2025      	movs	r0, #37	; 0x25
 8003b4c:	f001 fc4b 	bl	80053e6 <HAL_NVIC_EnableIRQ>
}
 8003b50:	bf00      	nop
 8003b52:	3768      	adds	r7, #104	; 0x68
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40013800 	.word	0x40013800
 8003b5c:	48000400 	.word	0x48000400
 8003b60:	200009bc 	.word	0x200009bc
 8003b64:	40020008 	.word	0x40020008
 8003b68:	20000a1c 	.word	0x20000a1c
 8003b6c:	4002001c 	.word	0x4002001c
 8003b70:	40004400 	.word	0x40004400
 8003b74:	20000a7c 	.word	0x20000a7c
 8003b78:	40020030 	.word	0x40020030

08003b7c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a19      	ldr	r2, [pc, #100]	; (8003bf0 <HAL_UART_MspDeInit+0x74>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d115      	bne.n	8003bba <HAL_UART_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003b8e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b92:	f7ff fdf7 	bl	8003784 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8003b96:	21c0      	movs	r1, #192	; 0xc0
 8003b98:	4816      	ldr	r0, [pc, #88]	; (8003bf4 <HAL_UART_MspDeInit+0x78>)
 8003b9a:	f002 fc7f 	bl	800649c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f001 fce4 	bl	8005570 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 fcdf 	bl	8005570 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003bb2:	2024      	movs	r0, #36	; 0x24
 8003bb4:	f001 fc25 	bl	8005402 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8003bb8:	e015      	b.n	8003be6 <HAL_UART_MspDeInit+0x6a>
  else if(uartHandle->Instance==USART2)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a0e      	ldr	r2, [pc, #56]	; (8003bf8 <HAL_UART_MspDeInit+0x7c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d110      	bne.n	8003be6 <HAL_UART_MspDeInit+0x6a>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003bc4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003bc8:	f7ff fdb2 	bl	8003730 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8003bcc:	210c      	movs	r1, #12
 8003bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bd2:	f002 fc63 	bl	800649c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 fcc8 	bl	8005570 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003be0:	2025      	movs	r0, #37	; 0x25
 8003be2:	f001 fc0e 	bl	8005402 <HAL_NVIC_DisableIRQ>
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40013800 	.word	0x40013800
 8003bf4:	48000400 	.word	0x48000400
 8003bf8:	40004400 	.word	0x40004400

08003bfc <LL_APB2_GRP1_ForceReset>:
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr

08003c1e <LL_APB2_GRP1_ReleaseReset>:
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8003c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c34:	4013      	ands	r3, r2
 8003c36:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr
	...

08003c44 <LL_EXTI_EnableIT_0_31>:
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003c4c:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <LL_EXTI_EnableIT_0_31+0x24>)
 8003c4e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003c52:	4905      	ldr	r1, [pc, #20]	; (8003c68 <LL_EXTI_EnableIT_0_31+0x24>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	58000800 	.word	0x58000800

08003c6c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003c74:	4a07      	ldr	r2, [pc, #28]	; (8003c94 <vcom_Init+0x28>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8003c7a:	f7fd ffaf 	bl	8001bdc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003c7e:	f7ff fda5 	bl	80037cc <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8003c82:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003c86:	f7ff ffdd 	bl	8003c44 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8003c8a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20000ae0 	.word	0x20000ae0

08003c98 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8003c9c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003ca0:	f7ff ffac 	bl	8003bfc <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003ca4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003ca8:	f7ff ffb9 	bl	8003c1e <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003cac:	4804      	ldr	r0, [pc, #16]	; (8003cc0 <vcom_DeInit+0x28>)
 8003cae:	f7ff ff65 	bl	8003b7c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003cb2:	200f      	movs	r0, #15
 8003cb4:	f001 fba5 	bl	8005402 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003cb8:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	2000089c 	.word	0x2000089c

08003cc4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003cd0:	887b      	ldrh	r3, [r7, #2]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4804      	ldr	r0, [pc, #16]	; (8003ce8 <vcom_Trace_DMA+0x24>)
 8003cd8:	f007 faf0 	bl	800b2bc <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8003cdc:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	2000089c 	.word	0x2000089c

08003cec <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003cf4:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <vcom_ReceiveInit+0x70>)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003cfa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cfe:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003d00:	f107 0308 	add.w	r3, r7, #8
 8003d04:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003d08:	4815      	ldr	r0, [pc, #84]	; (8003d60 <vcom_ReceiveInit+0x74>)
 8003d0a:	f009 fb3c 	bl	800d386 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8003d0e:	bf00      	nop
 8003d10:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <vcom_ReceiveInit+0x74>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1e:	d0f7      	beq.n	8003d10 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8003d20:	bf00      	nop
 8003d22:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <vcom_ReceiveInit+0x74>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d30:	d1f7      	bne.n	8003d22 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003d32:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <vcom_ReceiveInit+0x74>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <vcom_ReceiveInit+0x74>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003d40:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8003d42:	4807      	ldr	r0, [pc, #28]	; (8003d60 <vcom_ReceiveInit+0x74>)
 8003d44:	f009 fb7a 	bl	800d43c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003d48:	2201      	movs	r2, #1
 8003d4a:	4906      	ldr	r1, [pc, #24]	; (8003d64 <vcom_ReceiveInit+0x78>)
 8003d4c:	4804      	ldr	r0, [pc, #16]	; (8003d60 <vcom_ReceiveInit+0x74>)
 8003d4e:	f007 fa5f 	bl	800b210 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8003d52:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	20000ae4 	.word	0x20000ae4
 8003d60:	2000089c 	.word	0x2000089c
 8003d64:	20000adc 	.word	0x20000adc

08003d68 <vcom_Resume>:

void vcom_Resume(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d6c:	4808      	ldr	r0, [pc, #32]	; (8003d90 <vcom_Resume+0x28>)
 8003d6e:	f007 f969 	bl	800b044 <HAL_UART_Init>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <vcom_Resume+0x14>
  {
    Error_Handler();
 8003d78:	f7fe fc8e 	bl	8002698 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003d7c:	4805      	ldr	r0, [pc, #20]	; (8003d94 <vcom_Resume+0x2c>)
 8003d7e:	f001 fb4f 	bl	8005420 <HAL_DMA_Init>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <vcom_Resume+0x24>
  {
    Error_Handler();
 8003d88:	f7fe fc86 	bl	8002698 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003d8c:	bf00      	nop
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	2000089c 	.word	0x2000089c
 8003d94:	200009bc 	.word	0x200009bc

08003d98 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a05      	ldr	r2, [pc, #20]	; (8003dbc <HAL_UART_TxCpltCallback+0x24>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d103      	bne.n	8003db2 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_UART_TxCpltCallback+0x28>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2000      	movs	r0, #0
 8003db0:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40013800 	.word	0x40013800
 8003dc0:	20000ae0 	.word	0x20000ae0

08003dc4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a13      	ldr	r2, [pc, #76]	; (8003e20 <HAL_UART_RxCpltCallback+0x5c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d113      	bne.n	8003dfe <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <HAL_UART_RxCpltCallback+0x60>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_UART_RxCpltCallback+0x30>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003de8:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <HAL_UART_RxCpltCallback+0x60>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2200      	movs	r2, #0
 8003dee:	2101      	movs	r1, #1
 8003df0:	480d      	ldr	r0, [pc, #52]	; (8003e28 <HAL_UART_RxCpltCallback+0x64>)
 8003df2:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8003df4:	2201      	movs	r2, #1
 8003df6:	490c      	ldr	r1, [pc, #48]	; (8003e28 <HAL_UART_RxCpltCallback+0x64>)
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f007 fa09 	bl	800b210 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <HAL_UART_RxCpltCallback+0x68>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d106      	bne.n	8003e16 <HAL_UART_RxCpltCallback+0x52>
    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
 8003e08:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <HAL_UART_RxCpltCallback+0x6c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	621a      	str	r2, [r3, #32]
    	  UART2_SET = 1;
 8003e10:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <HAL_UART_RxCpltCallback+0x70>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40013800 	.word	0x40013800
 8003e24:	20000ae4 	.word	0x20000ae4
 8003e28:	20000adc 	.word	0x20000adc
 8003e2c:	40004400 	.word	0x40004400
 8003e30:	2000092c 	.word	0x2000092c
 8003e34:	20000010 	.word	0x20000010

08003e38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e38:	480d      	ldr	r0, [pc, #52]	; (8003e70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e3a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e3c:	f7ff f955 	bl	80030ea <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e40:	480c      	ldr	r0, [pc, #48]	; (8003e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e42:	490d      	ldr	r1, [pc, #52]	; (8003e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e44:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <LoopForever+0xe>)
  movs r3, #0
 8003e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e48:	e002      	b.n	8003e50 <LoopCopyDataInit>

08003e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e4e:	3304      	adds	r3, #4

08003e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e54:	d3f9      	bcc.n	8003e4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e56:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e58:	4c0a      	ldr	r4, [pc, #40]	; (8003e84 <LoopForever+0x16>)
  movs r3, #0
 8003e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e5c:	e001      	b.n	8003e62 <LoopFillZerobss>

08003e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e60:	3204      	adds	r2, #4

08003e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e64:	d3fb      	bcc.n	8003e5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003e66:	f01c ff61 	bl	8020d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e6a:	f7fe f9f1 	bl	8002250 <main>

08003e6e <LoopForever>:

LoopForever:
    b LoopForever
 8003e6e:	e7fe      	b.n	8003e6e <LoopForever>
  ldr   r0, =_estack
 8003e70:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e78:	200005a4 	.word	0x200005a4
  ldr r2, =_sidata
 8003e7c:	08021f20 	.word	0x08021f20
  ldr r2, =_sbss
 8003e80:	200005a4 	.word	0x200005a4
  ldr r4, =_ebss
 8003e84:	20002b90 	.word	0x20002b90

08003e88 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e88:	e7fe      	b.n	8003e88 <ADC_IRQHandler>

08003e8a <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b086      	sub	sp, #24
 8003e8e:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003e90:	1d3b      	adds	r3, r7, #4
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	605a      	str	r2, [r3, #4]
 8003e98:	609a      	str	r2, [r3, #8]
 8003e9a:	60da      	str	r2, [r3, #12]
 8003e9c:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003e9e:	2310      	movs	r3, #16
 8003ea0:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003eae:	1d3b      	adds	r3, r7, #4
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eb6:	f002 f991 	bl	80061dc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003eba:	2320      	movs	r3, #32
 8003ebc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003ebe:	1d3b      	adds	r3, r7, #4
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ec6:	f002 f989 	bl	80061dc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2120      	movs	r1, #32
 8003ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ed2:	f002 fbb1 	bl	8006638 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2110      	movs	r1, #16
 8003eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ede:	f002 fbab 	bl	8006638 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	d83f      	bhi.n	8003f7c <BSP_RADIO_ConfigRFSwitch+0x90>
 8003efc:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8003efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f02:	bf00      	nop
 8003f04:	08003f15 	.word	0x08003f15
 8003f08:	08003f2f 	.word	0x08003f2f
 8003f0c:	08003f49 	.word	0x08003f49
 8003f10:	08003f63 	.word	0x08003f63
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003f14:	2200      	movs	r2, #0
 8003f16:	2110      	movs	r1, #16
 8003f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f1c:	f002 fb8c 	bl	8006638 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003f20:	2200      	movs	r2, #0
 8003f22:	2120      	movs	r1, #32
 8003f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f28:	f002 fb86 	bl	8006638 <HAL_GPIO_WritePin>
      break;      
 8003f2c:	e027      	b.n	8003f7e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003f2e:	2201      	movs	r2, #1
 8003f30:	2110      	movs	r1, #16
 8003f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f36:	f002 fb7f 	bl	8006638 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	2120      	movs	r1, #32
 8003f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f42:	f002 fb79 	bl	8006638 <HAL_GPIO_WritePin>
      break;
 8003f46:	e01a      	b.n	8003f7e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003f48:	2201      	movs	r2, #1
 8003f4a:	2110      	movs	r1, #16
 8003f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f50:	f002 fb72 	bl	8006638 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003f54:	2201      	movs	r2, #1
 8003f56:	2120      	movs	r1, #32
 8003f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f5c:	f002 fb6c 	bl	8006638 <HAL_GPIO_WritePin>
      break;
 8003f60:	e00d      	b.n	8003f7e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003f62:	2200      	movs	r2, #0
 8003f64:	2110      	movs	r1, #16
 8003f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f6a:	f002 fb65 	bl	8006638 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003f6e:	2201      	movs	r2, #1
 8003f70:	2120      	movs	r1, #32
 8003f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f76:	f002 fb5f 	bl	8006638 <HAL_GPIO_WritePin>
      break;
 8003f7a:	e000      	b.n	8003f7e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8003f7c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8003f8c:	2302      	movs	r3, #2
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8003f96:	b480      	push	{r7}
 8003f98:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8003f9a:	2301      	movs	r3, #1
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003fa8:	2301      	movs	r3, #1
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr

08003fb2 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b085      	sub	sp, #20
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	4603      	mov	r3, r0
 8003fba:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d102      	bne.n	8003fc8 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003fc2:	230f      	movs	r3, #15
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	e001      	b.n	8003fcc <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003fc8:	2316      	movs	r3, #22
 8003fca:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003fdc:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4a03      	ldr	r2, [pc, #12]	; (8003ff0 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	6053      	str	r3, [r2, #4]
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr
 8003ff0:	e0042000 	.word	0xe0042000

08003ff4 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003ff8:	4b04      	ldr	r3, [pc, #16]	; (800400c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4a03      	ldr	r2, [pc, #12]	; (800400c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003ffe:	f043 0302 	orr.w	r3, r3, #2
 8004002:	6053      	str	r3, [r2, #4]
}
 8004004:	bf00      	nop
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr
 800400c:	e0042000 	.word	0xe0042000

08004010 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	4a03      	ldr	r2, [pc, #12]	; (8004028 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800401a:	f043 0304 	orr.w	r3, r3, #4
 800401e:	6053      	str	r3, [r2, #4]
}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr
 8004028:	e0042000 	.word	0xe0042000

0800402c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004036:	2003      	movs	r0, #3
 8004038:	f001 f9b0 	bl	800539c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800403c:	f004 f95e 	bl	80082fc <HAL_RCC_GetHCLKFreq>
 8004040:	4603      	mov	r3, r0
 8004042:	4a09      	ldr	r2, [pc, #36]	; (8004068 <HAL_Init+0x3c>)
 8004044:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004046:	200f      	movs	r0, #15
 8004048:	f7fe ffce 	bl	8002fe8 <HAL_InitTick>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	71fb      	strb	r3, [r7, #7]
 8004056:	e001      	b.n	800405c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004058:	f7fe fd57 	bl	8002b0a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800405c:	79fb      	ldrb	r3, [r7, #7]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	2000000c 	.word	0x2000000c

0800406c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004070:	4b04      	ldr	r3, [pc, #16]	; (8004084 <HAL_SuspendTick+0x18>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a03      	ldr	r2, [pc, #12]	; (8004084 <HAL_SuspendTick+0x18>)
 8004076:	f023 0302 	bic.w	r3, r3, #2
 800407a:	6013      	str	r3, [r2, #0]
}
 800407c:	bf00      	nop
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr
 8004084:	e000e010 	.word	0xe000e010

08004088 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800408c:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <HAL_ResumeTick+0x18>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a03      	ldr	r2, [pc, #12]	; (80040a0 <HAL_ResumeTick+0x18>)
 8004092:	f043 0302 	orr.w	r3, r3, #2
 8004096:	6013      	str	r3, [r2, #0]
}
 8004098:	bf00      	nop
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr
 80040a0:	e000e010 	.word	0xe000e010

080040a4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80040a8:	4b02      	ldr	r3, [pc, #8]	; (80040b4 <HAL_GetUIDw0+0x10>)
 80040aa:	681b      	ldr	r3, [r3, #0]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr
 80040b4:	1fff7590 	.word	0x1fff7590

080040b8 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80040bc:	4b02      	ldr	r3, [pc, #8]	; (80040c8 <HAL_GetUIDw1+0x10>)
 80040be:	681b      	ldr	r3, [r3, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr
 80040c8:	1fff7594 	.word	0x1fff7594

080040cc <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80040d0:	4b02      	ldr	r3, [pc, #8]	; (80040dc <HAL_GetUIDw2+0x10>)
 80040d2:	681b      	ldr	r3, [r3, #0]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr
 80040dc:	1fff7598 	.word	0x1fff7598

080040e0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80040e4:	f7ff ff78 	bl	8003fd8 <LL_DBGMCU_EnableDBGSleepMode>
}
 80040e8:	bf00      	nop
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80040f0:	f7ff ff80 	bl	8003ff4 <LL_DBGMCU_EnableDBGStopMode>
}
 80040f4:	bf00      	nop
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 80040fc:	f7ff ff88 	bl	8004010 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8004100:	bf00      	nop
 8004102:	bd80      	pop	{r7, pc}

08004104 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	601a      	str	r2, [r3, #0]
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr

08004128 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr

08004142 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004142:	b480      	push	{r7}
 8004144:	b085      	sub	sp, #20
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2107      	movs	r1, #7
 800415a:	fa01 f303 	lsl.w	r3, r1, r3
 800415e:	43db      	mvns	r3, r3
 8004160:	401a      	ands	r2, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	fa01 f303 	lsl.w	r3, r1, r3
 800416e:	431a      	orrs	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004174:	bf00      	nop
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695a      	ldr	r2, [r3, #20]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2107      	movs	r1, #7
 8004194:	fa01 f303 	lsl.w	r3, r1, r3
 8004198:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	4770      	bx	lr

080041ae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr

080041d2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f003 031f 	and.w	r3, r3, #31
 80041e8:	210f      	movs	r1, #15
 80041ea:	fa01 f303 	lsl.w	r3, r1, r3
 80041ee:	43db      	mvns	r3, r3
 80041f0:	401a      	ands	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	0e9b      	lsrs	r3, r3, #26
 80041f6:	f003 010f 	and.w	r1, r3, #15
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	fa01 f303 	lsl.w	r3, r1, r3
 8004204:	431a      	orrs	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr

08004214 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800424c:	43db      	mvns	r3, r3
 800424e:	401a      	ands	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	4770      	bx	lr

0800425e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800425e:	b480      	push	{r7}
 8004260:	b085      	sub	sp, #20
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	695a      	ldr	r2, [r3, #20]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	43db      	mvns	r3, r3
 8004274:	401a      	ands	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	0219      	lsls	r1, r3, #8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	400b      	ands	r3, r1
 800427e:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8004282:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004286:	431a      	orrs	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800428c:	bf00      	nop
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr

08004296 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80042a6:	f023 0317 	bic.w	r3, r3, #23
 80042aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80042cc:	f023 0317 	bic.w	r3, r3, #23
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6093      	str	r3, [r2, #8]
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042f2:	d101      	bne.n	80042f8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr

08004304 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004314:	f023 0317 	bic.w	r3, r3, #23
 8004318:	f043 0201 	orr.w	r2, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr

0800432a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800433a:	f023 0317 	bic.w	r3, r3, #23
 800433e:	f043 0202 	orr.w	r2, r3, #2
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <LL_ADC_IsEnabled+0x18>
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <LL_ADC_IsEnabled+0x1a>
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr

08004374 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b02      	cmp	r3, #2
 8004386:	d101      	bne.n	800438c <LL_ADC_IsDisableOngoing+0x18>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <LL_ADC_IsDisableOngoing+0x1a>
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr

08004398 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043a8:	f023 0317 	bic.w	r3, r3, #23
 80043ac:	f043 0204 	orr.w	r2, r3, #4
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr

080043be <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043ce:	f023 0317 	bic.w	r3, r3, #23
 80043d2:	f043 0210 	orr.w	r2, r3, #16
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d101      	bne.n	80043fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8004414:	2300      	movs	r3, #0
 8004416:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800441c:	2300      	movs	r3, #0
 800441e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e19e      	b.n	8004768 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7fd fb07 	bl	8001a4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff ff44 	bl	80042de <LL_ADC_IsInternalRegulatorEnabled>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d115      	bne.n	8004488 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff ff18 	bl	8004296 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004466:	4b99      	ldr	r3, [pc, #612]	; (80046cc <HAL_ADC_Init+0x2c4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	099b      	lsrs	r3, r3, #6
 800446c:	4a98      	ldr	r2, [pc, #608]	; (80046d0 <HAL_ADC_Init+0x2c8>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	099b      	lsrs	r3, r3, #6
 8004474:	3301      	adds	r3, #1
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800447a:	e002      	b.n	8004482 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	3b01      	subs	r3, #1
 8004480:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f9      	bne.n	800447c <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff ff26 	bl	80042de <LL_ADC_IsInternalRegulatorEnabled>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10d      	bne.n	80044b4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449c:	f043 0210 	orr.w	r2, r3, #16
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a8:	f043 0201 	orr.w	r2, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff ff93 	bl	80043e4 <LL_ADC_REG_IsConversionOngoing>
 80044be:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f040 8144 	bne.w	8004756 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f040 8140 	bne.w	8004756 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044da:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80044de:	f043 0202 	orr.w	r2, r3, #2
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff ff30 	bl	8004350 <LL_ADC_IsEnabled>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f040 80a7 	bne.w	8004646 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	7e1b      	ldrb	r3, [r3, #24]
 8004500:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004502:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	7e5b      	ldrb	r3, [r3, #25]
 8004508:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800450a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	7e9b      	ldrb	r3, [r3, #26]
 8004510:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004512:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004518:	2a00      	cmp	r2, #0
 800451a:	d002      	beq.n	8004522 <HAL_ADC_Init+0x11a>
 800451c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004520:	e000      	b.n	8004524 <HAL_ADC_Init+0x11c>
 8004522:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004524:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800452a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	da04      	bge.n	800453e <HAL_ADC_Init+0x136>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800453c:	e001      	b.n	8004542 <HAL_ADC_Init+0x13a>
 800453e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8004542:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800454a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800454c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4313      	orrs	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3020 	ldrb.w	r3, [r3, #32]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d114      	bne.n	8004588 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	7e9b      	ldrb	r3, [r3, #26]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d104      	bne.n	8004570 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	e00b      	b.n	8004588 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004574:	f043 0220 	orr.w	r2, r3, #32
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004580:	f043 0201 	orr.w	r2, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	2b00      	cmp	r3, #0
 800458e:	d009      	beq.n	80045a4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800459c:	4313      	orrs	r3, r2
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80045ae:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	69b9      	ldr	r1, [r7, #24]
 80045b8:	430b      	orrs	r3, r1
 80045ba:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80045c8:	4313      	orrs	r3, r2
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d111      	bne.n	80045fe <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80045e6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80045ec:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80045f2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	4b33      	ldr	r3, [pc, #204]	; (80046d4 <HAL_ADC_Init+0x2cc>)
 8004606:	4013      	ands	r3, r2
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	6979      	ldr	r1, [r7, #20]
 800460e:	430b      	orrs	r3, r1
 8004610:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800461a:	d014      	beq.n	8004646 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004624:	d00f      	beq.n	8004646 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800462a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800462e:	d00a      	beq.n	8004646 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8004630:	4b29      	ldr	r3, [pc, #164]	; (80046d8 <HAL_ADC_Init+0x2d0>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004640:	4925      	ldr	r1, [pc, #148]	; (80046d8 <HAL_ADC_Init+0x2d0>)
 8004642:	4313      	orrs	r3, r2
 8004644:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464e:	461a      	mov	r2, r3
 8004650:	2100      	movs	r1, #0
 8004652:	f7ff fd76 	bl	8004142 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	461a      	mov	r2, r3
 8004660:	491e      	ldr	r1, [pc, #120]	; (80046dc <HAL_ADC_Init+0x2d4>)
 8004662:	f7ff fd6e 	bl	8004142 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d108      	bne.n	8004680 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f062 020f 	orn	r2, r2, #15
 800467c:	629a      	str	r2, [r3, #40]	; 0x28
 800467e:	e042      	b.n	8004706 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004688:	d13d      	bne.n	8004706 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	e00c      	b.n	80046aa <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	fa22 f303 	lsr.w	r3, r2, r3
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	2b0f      	cmp	r3, #15
 80046a2:	d006      	beq.n	80046b2 <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	3301      	adds	r3, #1
 80046a8:	613b      	str	r3, [r7, #16]
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	2b07      	cmp	r3, #7
 80046ae:	d9ef      	bls.n	8004690 <HAL_ADC_Init+0x288>
 80046b0:	e000      	b.n	80046b4 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 80046b2:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d112      	bne.n	80046e0 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f062 020f 	orn	r2, r2, #15
 80046c8:	629a      	str	r2, [r3, #40]	; 0x28
 80046ca:	e01c      	b.n	8004706 <HAL_ADC_Init+0x2fe>
 80046cc:	2000000c 	.word	0x2000000c
 80046d0:	053e2d63 	.word	0x053e2d63
 80046d4:	1ffffc02 	.word	0x1ffffc02
 80046d8:	40012708 	.word	0x40012708
 80046dc:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	f003 031c 	and.w	r3, r3, #28
 80046f2:	f06f 020f 	mvn.w	r2, #15
 80046f6:	fa02 f103 	lsl.w	r1, r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff fd36 	bl	800417e <LL_ADC_GetSamplingTimeCommonChannels>
 8004712:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004718:	429a      	cmp	r2, r3
 800471a:	d10b      	bne.n	8004734 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004726:	f023 0303 	bic.w	r3, r3, #3
 800472a:	f043 0201 	orr.w	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004732:	e018      	b.n	8004766 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004738:	f023 0312 	bic.w	r3, r3, #18
 800473c:	f043 0210 	orr.w	r2, r3, #16
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004748:	f043 0201 	orr.w	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004754:	e007      	b.n	8004766 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475a:	f043 0210 	orr.w	r2, r3, #16
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8004766:	7ffb      	ldrb	r3, [r7, #31]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3720      	adds	r7, #32
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e06a      	b.n	8004858 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004786:	f043 0202 	orr.w	r2, r3, #2
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fabe 	bl	8004d10 <ADC_ConversionStop>
 8004794:	4603      	mov	r3, r0
 8004796:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10f      	bne.n	80047be <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fb82 	bl	8004ea8 <ADC_Disable>
 80047a4:	4603      	mov	r3, r0
 80047a6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d102      	bne.n	80047b4 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff fd7f 	bl	80042bc <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6812      	ldr	r2, [r2, #0]
 80047c8:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80047cc:	f023 0303 	bic.w	r3, r3, #3
 80047d0:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f240 329f 	movw	r2, #927	; 0x39f
 80047da:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68d9      	ldr	r1, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4b1e      	ldr	r3, [pc, #120]	; (8004860 <HAL_ADC_DeInit+0xf0>)
 80047e8:	400b      	ands	r3, r1
 80047ea:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691a      	ldr	r2, [r3, #16]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80047fa:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695a      	ldr	r2, [r3, #20]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0207 	bic.w	r2, r2, #7
 800480a:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6a1a      	ldr	r2, [r3, #32]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800481a:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2200      	movs	r2, #0
 8004828:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800482a:	4b0e      	ldr	r3, [pc, #56]	; (8004864 <HAL_ADC_DeInit+0xf4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a0d      	ldr	r2, [pc, #52]	; (8004864 <HAL_ADC_DeInit+0xf4>)
 8004830:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8004834:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fd f91c 	bl	8001a74 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004856:	7bfb      	ldrb	r3, [r7, #15]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	833e0200 	.word	0x833e0200
 8004864:	40012708 	.word	0x40012708

08004868 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff fdb5 	bl	80043e4 <LL_ADC_REG_IsConversionOngoing>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d132      	bne.n	80048e6 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_ADC_Start+0x26>
 800488a:	2302      	movs	r3, #2
 800488c:	e02e      	b.n	80048ec <HAL_ADC_Start+0x84>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fa80 	bl	8004d9c <ADC_Enable>
 800489c:	4603      	mov	r3, r0
 800489e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d11a      	bne.n	80048dc <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048ae:	f023 0301 	bic.w	r3, r3, #1
 80048b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	221c      	movs	r2, #28
 80048c6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff fd5f 	bl	8004398 <LL_ADC_REG_StartConversion>
 80048da:	e006      	b.n	80048ea <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80048e4:	e001      	b.n	80048ea <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80048e6:	2302      	movs	r3, #2
 80048e8:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004902:	2b01      	cmp	r3, #1
 8004904:	d101      	bne.n	800490a <HAL_ADC_Stop+0x16>
 8004906:	2302      	movs	r3, #2
 8004908:	e022      	b.n	8004950 <HAL_ADC_Stop+0x5c>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f9fc 	bl	8004d10 <ADC_ConversionStop>
 8004918:	4603      	mov	r3, r0
 800491a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d111      	bne.n	8004946 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fac0 	bl	8004ea8 <ADC_Disable>
 8004928:	4603      	mov	r3, r0
 800492a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004936:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800493a:	f023 0301 	bic.w	r3, r3, #1
 800493e:	f043 0201 	orr.w	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800494e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	2b08      	cmp	r3, #8
 8004968:	d102      	bne.n	8004970 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800496a:	2308      	movs	r3, #8
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	e010      	b.n	8004992 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d007      	beq.n	800498e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004982:	f043 0220 	orr.w	r2, r3, #32
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e077      	b.n	8004a7e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800498e:	2304      	movs	r3, #4
 8004990:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004992:	f7fe fb33 	bl	8002ffc <HAL_GetTick>
 8004996:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004998:	e021      	b.n	80049de <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a0:	d01d      	beq.n	80049de <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80049a2:	f7fe fb2b 	bl	8002ffc <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d302      	bcc.n	80049b8 <HAL_ADC_PollForConversion+0x60>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d112      	bne.n	80049de <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4013      	ands	r3, r2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10b      	bne.n	80049de <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ca:	f043 0204 	orr.w	r2, r3, #4
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e04f      	b.n	8004a7e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0d6      	beq.n	800499a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fbd6 	bl	80041ae <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d031      	beq.n	8004a6c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	7e9b      	ldrb	r3, [r3, #26]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d12d      	bne.n	8004a6c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0308 	and.w	r3, r3, #8
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d126      	bne.n	8004a6c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fcde 	bl	80043e4 <LL_ADC_REG_IsConversionOngoing>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d112      	bne.n	8004a54 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 020c 	bic.w	r2, r2, #12
 8004a3c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a46:	f023 0301 	bic.w	r3, r3, #1
 8004a4a:	f043 0201 	orr.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	659a      	str	r2, [r3, #88]	; 0x58
 8004a52:	e00b      	b.n	8004a6c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a58:	f043 0220 	orr.w	r2, r3, #32
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a64:	f043 0201 	orr.w	r2, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	7e1b      	ldrb	r3, [r3, #24]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d103      	bne.n	8004a7c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	220c      	movs	r2, #12
 8004a7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bc80      	pop	{r7}
 8004a9c:	4770      	bx	lr
	...

08004aa0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_ADC_ConfigChannel+0x28>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e110      	b.n	8004cea <HAL_ADC_ConfigChannel+0x24a>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff fc85 	bl	80043e4 <LL_ADC_REG_IsConversionOngoing>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f040 80f7 	bne.w	8004cd0 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	f000 80b1 	beq.w	8004c4e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004af4:	d004      	beq.n	8004b00 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004afa:	4a7e      	ldr	r2, [pc, #504]	; (8004cf4 <HAL_ADC_ConfigChannel+0x254>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d108      	bne.n	8004b12 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	f7ff fb82 	bl	8004214 <LL_ADC_REG_SetSequencerChAdd>
 8004b10:	e041      	b.n	8004b96 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	210f      	movs	r1, #15
 8004b20:	fa01 f303 	lsl.w	r3, r1, r3
 8004b24:	43db      	mvns	r3, r3
 8004b26:	401a      	ands	r2, r3
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d105      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0xa0>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	0e9b      	lsrs	r3, r3, #26
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	e011      	b.n	8004b64 <HAL_ADC_ConfigChannel+0xc4>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	fa93 f3a3 	rbit	r3, r3
 8004b4c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004b58:	2320      	movs	r3, #32
 8004b5a:	e003      	b.n	8004b64 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	fab3 f383 	clz	r3, r3
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	6839      	ldr	r1, [r7, #0]
 8004b66:	6849      	ldr	r1, [r1, #4]
 8004b68:	f001 011f 	and.w	r1, r1, #31
 8004b6c:	408b      	lsls	r3, r1
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	089b      	lsrs	r3, r3, #2
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d808      	bhi.n	8004b96 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	6859      	ldr	r1, [r3, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	f7ff fb1e 	bl	80041d2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6819      	ldr	r1, [r3, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f7ff fb5b 	bl	800425e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f280 8097 	bge.w	8004ce0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bb2:	4851      	ldr	r0, [pc, #324]	; (8004cf8 <HAL_ADC_ConfigChannel+0x258>)
 8004bb4:	f7ff fab8 	bl	8004128 <LL_ADC_GetCommonPathInternalCh>
 8004bb8:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a4f      	ldr	r2, [pc, #316]	; (8004cfc <HAL_ADC_ConfigChannel+0x25c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d120      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d11b      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4848      	ldr	r0, [pc, #288]	; (8004cf8 <HAL_ADC_ConfigChannel+0x258>)
 8004bd8:	f7ff fa94 	bl	8004104 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bdc:	4b48      	ldr	r3, [pc, #288]	; (8004d00 <HAL_ADC_ConfigChannel+0x260>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	099b      	lsrs	r3, r3, #6
 8004be2:	4a48      	ldr	r2, [pc, #288]	; (8004d04 <HAL_ADC_ConfigChannel+0x264>)
 8004be4:	fba2 2303 	umull	r2, r3, r2, r3
 8004be8:	099b      	lsrs	r3, r3, #6
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	4613      	mov	r3, r2
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004bf6:	e002      	b.n	8004bfe <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f9      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004c04:	e06c      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a3f      	ldr	r2, [pc, #252]	; (8004d08 <HAL_ADC_ConfigChannel+0x268>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d10c      	bne.n	8004c2a <HAL_ADC_ConfigChannel+0x18a>
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d107      	bne.n	8004c2a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c20:	4619      	mov	r1, r3
 8004c22:	4835      	ldr	r0, [pc, #212]	; (8004cf8 <HAL_ADC_ConfigChannel+0x258>)
 8004c24:	f7ff fa6e 	bl	8004104 <LL_ADC_SetCommonPathInternalCh>
 8004c28:	e05a      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a37      	ldr	r2, [pc, #220]	; (8004d0c <HAL_ADC_ConfigChannel+0x26c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d155      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d150      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c44:	4619      	mov	r1, r3
 8004c46:	482c      	ldr	r0, [pc, #176]	; (8004cf8 <HAL_ADC_ConfigChannel+0x258>)
 8004c48:	f7ff fa5c 	bl	8004104 <LL_ADC_SetCommonPathInternalCh>
 8004c4c:	e048      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c56:	d004      	beq.n	8004c62 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004c5c:	4a25      	ldr	r2, [pc, #148]	; (8004cf4 <HAL_ADC_ConfigChannel+0x254>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d107      	bne.n	8004c72 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f7ff fae3 	bl	8004238 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	da32      	bge.n	8004ce0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c7a:	481f      	ldr	r0, [pc, #124]	; (8004cf8 <HAL_ADC_ConfigChannel+0x258>)
 8004c7c:	f7ff fa54 	bl	8004128 <LL_ADC_GetCommonPathInternalCh>
 8004c80:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1d      	ldr	r2, [pc, #116]	; (8004cfc <HAL_ADC_ConfigChannel+0x25c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d107      	bne.n	8004c9c <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c92:	4619      	mov	r1, r3
 8004c94:	4818      	ldr	r0, [pc, #96]	; (8004cf8 <HAL_ADC_ConfigChannel+0x258>)
 8004c96:	f7ff fa35 	bl	8004104 <LL_ADC_SetCommonPathInternalCh>
 8004c9a:	e021      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a19      	ldr	r2, [pc, #100]	; (8004d08 <HAL_ADC_ConfigChannel+0x268>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d107      	bne.n	8004cb6 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cac:	4619      	mov	r1, r3
 8004cae:	4812      	ldr	r0, [pc, #72]	; (8004cf8 <HAL_ADC_ConfigChannel+0x258>)
 8004cb0:	f7ff fa28 	bl	8004104 <LL_ADC_SetCommonPathInternalCh>
 8004cb4:	e014      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a14      	ldr	r2, [pc, #80]	; (8004d0c <HAL_ADC_ConfigChannel+0x26c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d10f      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	480b      	ldr	r0, [pc, #44]	; (8004cf8 <HAL_ADC_ConfigChannel+0x258>)
 8004cca:	f7ff fa1b 	bl	8004104 <LL_ADC_SetCommonPathInternalCh>
 8004cce:	e007      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd4:	f043 0220 	orr.w	r2, r3, #32
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004ce8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3720      	adds	r7, #32
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	80000004 	.word	0x80000004
 8004cf8:	40012708 	.word	0x40012708
 8004cfc:	b0001000 	.word	0xb0001000
 8004d00:	2000000c 	.word	0x2000000c
 8004d04:	053e2d63 	.word	0x053e2d63
 8004d08:	b8004000 	.word	0xb8004000
 8004d0c:	b4002000 	.word	0xb4002000

08004d10 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff fb61 	bl	80043e4 <LL_ADC_REG_IsConversionOngoing>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d033      	beq.n	8004d90 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fb21 	bl	8004374 <LL_ADC_IsDisableOngoing>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d104      	bne.n	8004d42 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff fb3e 	bl	80043be <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d42:	f7fe f95b 	bl	8002ffc <HAL_GetTick>
 8004d46:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004d48:	e01b      	b.n	8004d82 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004d4a:	f7fe f957 	bl	8002ffc <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d914      	bls.n	8004d82 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00d      	beq.n	8004d82 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6a:	f043 0210 	orr.w	r2, r3, #16
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d76:	f043 0201 	orr.w	r2, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e007      	b.n	8004d92 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1dc      	bne.n	8004d4a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff facf 	bl	8004350 <LL_ADC_IsEnabled>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d169      	bne.n	8004e8c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	4b36      	ldr	r3, [pc, #216]	; (8004e98 <ADC_Enable+0xfc>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00d      	beq.n	8004de2 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dca:	f043 0210 	orr.w	r2, r3, #16
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd6:	f043 0201 	orr.w	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e055      	b.n	8004e8e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff fa8c 	bl	8004304 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004dec:	482b      	ldr	r0, [pc, #172]	; (8004e9c <ADC_Enable+0x100>)
 8004dee:	f7ff f99b 	bl	8004128 <LL_ADC_GetCommonPathInternalCh>
 8004df2:	4603      	mov	r3, r0
 8004df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00f      	beq.n	8004e1c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004dfc:	4b28      	ldr	r3, [pc, #160]	; (8004ea0 <ADC_Enable+0x104>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	099b      	lsrs	r3, r3, #6
 8004e02:	4a28      	ldr	r2, [pc, #160]	; (8004ea4 <ADC_Enable+0x108>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	099b      	lsrs	r3, r3, #6
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004e0e:	e002      	b.n	8004e16 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1f9      	bne.n	8004e10 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	7e5b      	ldrb	r3, [r3, #25]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d033      	beq.n	8004e8c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004e24:	f7fe f8ea 	bl	8002ffc <HAL_GetTick>
 8004e28:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e2a:	e028      	b.n	8004e7e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff fa8d 	bl	8004350 <LL_ADC_IsEnabled>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d104      	bne.n	8004e46 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff fa5f 	bl	8004304 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e46:	f7fe f8d9 	bl	8002ffc <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d914      	bls.n	8004e7e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d00d      	beq.n	8004e7e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	f043 0210 	orr.w	r2, r3, #16
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e72:	f043 0201 	orr.w	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e007      	b.n	8004e8e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d1cf      	bne.n	8004e2c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	80000017 	.word	0x80000017
 8004e9c:	40012708 	.word	0x40012708
 8004ea0:	2000000c 	.word	0x2000000c
 8004ea4:	053e2d63 	.word	0x053e2d63

08004ea8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff fa5d 	bl	8004374 <LL_ADC_IsDisableOngoing>
 8004eba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff fa45 	bl	8004350 <LL_ADC_IsEnabled>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d047      	beq.n	8004f5c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d144      	bne.n	8004f5c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 0305 	and.w	r3, r3, #5
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d10c      	bne.n	8004efa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fa20 	bl	800432a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2203      	movs	r2, #3
 8004ef0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ef2:	f7fe f883 	bl	8002ffc <HAL_GetTick>
 8004ef6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ef8:	e029      	b.n	8004f4e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efe:	f043 0210 	orr.w	r2, r3, #16
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0a:	f043 0201 	orr.w	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e023      	b.n	8004f5e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004f16:	f7fe f871 	bl	8002ffc <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d914      	bls.n	8004f4e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00d      	beq.n	8004f4e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f36:	f043 0210 	orr.w	r2, r3, #16
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f42:	f043 0201 	orr.w	r2, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e007      	b.n	8004f5e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1dc      	bne.n	8004f16 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <LL_ADC_SetCalibrationFactor>:
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f76:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bc80      	pop	{r7}
 8004f8c:	4770      	bx	lr

08004f8e <LL_ADC_GetCalibrationFactor>:
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr

08004faa <LL_ADC_Enable>:
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fba:	f023 0317 	bic.w	r3, r3, #23
 8004fbe:	f043 0201 	orr.w	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	609a      	str	r2, [r3, #8]
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr

08004fd0 <LL_ADC_Disable>:
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fe0:	f023 0317 	bic.w	r3, r3, #23
 8004fe4:	f043 0202 	orr.w	r2, r3, #2
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	609a      	str	r2, [r3, #8]
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr

08004ff6 <LL_ADC_IsEnabled>:
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <LL_ADC_IsEnabled+0x18>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <LL_ADC_IsEnabled+0x1a>
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr

0800501a <LL_ADC_StartCalibration>:
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800502a:	f023 0317 	bic.w	r3, r3, #23
 800502e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	609a      	str	r2, [r3, #8]
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr

08005040 <LL_ADC_IsCalibrationOnGoing>:
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005054:	d101      	bne.n	800505a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	bc80      	pop	{r7}
 8005064:	4770      	bx	lr

08005066 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b088      	sub	sp, #32
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800506e:	2300      	movs	r3, #0
 8005070:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8005072:	2300      	movs	r3, #0
 8005074:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_ADCEx_Calibration_Start+0x1e>
 8005080:	2302      	movs	r3, #2
 8005082:	e0b9      	b.n	80051f8 <HAL_ADCEx_Calibration_Start+0x192>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff ff0b 	bl	8004ea8 <ADC_Disable>
 8005092:	4603      	mov	r3, r0
 8005094:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff ffab 	bl	8004ff6 <LL_ADC_IsEnabled>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f040 809d 	bne.w	80051e2 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80050b0:	f043 0202 	orr.w	r2, r3, #2
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	f248 0303 	movw	r3, #32771	; 0x8003
 80050c2:	4013      	ands	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050d4:	f023 0303 	bic.w	r3, r3, #3
 80050d8:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	e02e      	b.n	800513e <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff ff98 	bl	800501a <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80050ea:	e014      	b.n	8005116 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	3301      	adds	r3, #1
 80050f0:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 80050f8:	d30d      	bcc.n	8005116 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fe:	f023 0312 	bic.w	r3, r3, #18
 8005102:	f043 0210 	orr.w	r2, r3, #16
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e070      	b.n	80051f8 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff ff90 	bl	8005040 <LL_ADC_IsCalibrationOnGoing>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e2      	bne.n	80050ec <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff ff2f 	bl	8004f8e <LL_ADC_GetCalibrationFactor>
 8005130:	4602      	mov	r2, r0
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	4413      	add	r3, r2
 8005136:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	3301      	adds	r3, #1
 800513c:	61fb      	str	r3, [r7, #28]
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	2b07      	cmp	r3, #7
 8005142:	d9cd      	bls.n	80050e0 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff ff29 	bl	8004faa <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69b9      	ldr	r1, [r7, #24]
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff ff01 	bl	8004f66 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff ff31 	bl	8004fd0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800516e:	f7fd ff45 	bl	8002ffc <HAL_GetTick>
 8005172:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005174:	e01c      	b.n	80051b0 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005176:	f7fd ff41 	bl	8002ffc <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d915      	bls.n	80051b0 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff ff34 	bl	8004ff6 <LL_ADC_IsEnabled>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00d      	beq.n	80051b0 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005198:	f043 0210 	orr.w	r2, r3, #16
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a4:	f043 0201 	orr.w	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e023      	b.n	80051f8 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff ff1e 	bl	8004ff6 <LL_ADC_IsEnabled>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1da      	bne.n	8005176 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68d9      	ldr	r1, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d4:	f023 0303 	bic.w	r3, r3, #3
 80051d8:	f043 0201 	orr.w	r2, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	659a      	str	r2, [r3, #88]	; 0x58
 80051e0:	e005      	b.n	80051ee <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e6:	f043 0210 	orr.w	r2, r3, #16
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80051f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3720      	adds	r7, #32
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005210:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <__NVIC_SetPriorityGrouping+0x44>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800521c:	4013      	ands	r3, r2
 800521e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800522c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005232:	4a04      	ldr	r2, [pc, #16]	; (8005244 <__NVIC_SetPriorityGrouping+0x44>)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	60d3      	str	r3, [r2, #12]
}
 8005238:	bf00      	nop
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	e000ed00 	.word	0xe000ed00

08005248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800524c:	4b04      	ldr	r3, [pc, #16]	; (8005260 <__NVIC_GetPriorityGrouping+0x18>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	0a1b      	lsrs	r3, r3, #8
 8005252:	f003 0307 	and.w	r3, r3, #7
}
 8005256:	4618      	mov	r0, r3
 8005258:	46bd      	mov	sp, r7
 800525a:	bc80      	pop	{r7}
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	e000ed00 	.word	0xe000ed00

08005264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	4603      	mov	r3, r0
 800526c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800526e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005272:	2b00      	cmp	r3, #0
 8005274:	db0b      	blt.n	800528e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005276:	79fb      	ldrb	r3, [r7, #7]
 8005278:	f003 021f 	and.w	r2, r3, #31
 800527c:	4906      	ldr	r1, [pc, #24]	; (8005298 <__NVIC_EnableIRQ+0x34>)
 800527e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	2001      	movs	r0, #1
 8005286:	fa00 f202 	lsl.w	r2, r0, r2
 800528a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr
 8005298:	e000e100 	.word	0xe000e100

0800529c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	4603      	mov	r3, r0
 80052a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	db12      	blt.n	80052d4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	f003 021f 	and.w	r2, r3, #31
 80052b4:	490a      	ldr	r1, [pc, #40]	; (80052e0 <__NVIC_DisableIRQ+0x44>)
 80052b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	2001      	movs	r0, #1
 80052be:	fa00 f202 	lsl.w	r2, r0, r2
 80052c2:	3320      	adds	r3, #32
 80052c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80052c8:	f3bf 8f4f 	dsb	sy
}
 80052cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80052ce:	f3bf 8f6f 	isb	sy
}
 80052d2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	bc80      	pop	{r7}
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	e000e100 	.word	0xe000e100

080052e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	6039      	str	r1, [r7, #0]
 80052ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	db0a      	blt.n	800530e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	490c      	ldr	r1, [pc, #48]	; (8005330 <__NVIC_SetPriority+0x4c>)
 80052fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005302:	0112      	lsls	r2, r2, #4
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	440b      	add	r3, r1
 8005308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800530c:	e00a      	b.n	8005324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	b2da      	uxtb	r2, r3
 8005312:	4908      	ldr	r1, [pc, #32]	; (8005334 <__NVIC_SetPriority+0x50>)
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	3b04      	subs	r3, #4
 800531c:	0112      	lsls	r2, r2, #4
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	440b      	add	r3, r1
 8005322:	761a      	strb	r2, [r3, #24]
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	e000e100 	.word	0xe000e100
 8005334:	e000ed00 	.word	0xe000ed00

08005338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005338:	b480      	push	{r7}
 800533a:	b089      	sub	sp, #36	; 0x24
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	f1c3 0307 	rsb	r3, r3, #7
 8005352:	2b04      	cmp	r3, #4
 8005354:	bf28      	it	cs
 8005356:	2304      	movcs	r3, #4
 8005358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	3304      	adds	r3, #4
 800535e:	2b06      	cmp	r3, #6
 8005360:	d902      	bls.n	8005368 <NVIC_EncodePriority+0x30>
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	3b03      	subs	r3, #3
 8005366:	e000      	b.n	800536a <NVIC_EncodePriority+0x32>
 8005368:	2300      	movs	r3, #0
 800536a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800536c:	f04f 32ff 	mov.w	r2, #4294967295
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	43da      	mvns	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	401a      	ands	r2, r3
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005380:	f04f 31ff 	mov.w	r1, #4294967295
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	fa01 f303 	lsl.w	r3, r1, r3
 800538a:	43d9      	mvns	r1, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005390:	4313      	orrs	r3, r2
         );
}
 8005392:	4618      	mov	r0, r3
 8005394:	3724      	adds	r7, #36	; 0x24
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff ff2b 	bl	8005200 <__NVIC_SetPriorityGrouping>
}
 80053aa:	bf00      	nop
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b086      	sub	sp, #24
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	4603      	mov	r3, r0
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
 80053be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053c0:	f7ff ff42 	bl	8005248 <__NVIC_GetPriorityGrouping>
 80053c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	6978      	ldr	r0, [r7, #20]
 80053cc:	f7ff ffb4 	bl	8005338 <NVIC_EncodePriority>
 80053d0:	4602      	mov	r2, r0
 80053d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053d6:	4611      	mov	r1, r2
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff ff83 	bl	80052e4 <__NVIC_SetPriority>
}
 80053de:	bf00      	nop
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b082      	sub	sp, #8
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	4603      	mov	r3, r0
 80053ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff ff35 	bl	8005264 <__NVIC_EnableIRQ>
}
 80053fa:	bf00      	nop
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b082      	sub	sp, #8
 8005406:	af00      	add	r7, sp, #0
 8005408:	4603      	mov	r3, r0
 800540a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800540c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff ff43 	bl	800529c <__NVIC_DisableIRQ>
}
 8005416:	bf00      	nop
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e08e      	b.n	8005550 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	4b47      	ldr	r3, [pc, #284]	; (8005558 <HAL_DMA_Init+0x138>)
 800543a:	429a      	cmp	r2, r3
 800543c:	d80f      	bhi.n	800545e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	4b45      	ldr	r3, [pc, #276]	; (800555c <HAL_DMA_Init+0x13c>)
 8005446:	4413      	add	r3, r2
 8005448:	4a45      	ldr	r2, [pc, #276]	; (8005560 <HAL_DMA_Init+0x140>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	091b      	lsrs	r3, r3, #4
 8005450:	009a      	lsls	r2, r3, #2
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a42      	ldr	r2, [pc, #264]	; (8005564 <HAL_DMA_Init+0x144>)
 800545a:	641a      	str	r2, [r3, #64]	; 0x40
 800545c:	e00e      	b.n	800547c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	4b40      	ldr	r3, [pc, #256]	; (8005568 <HAL_DMA_Init+0x148>)
 8005466:	4413      	add	r3, r2
 8005468:	4a3d      	ldr	r2, [pc, #244]	; (8005560 <HAL_DMA_Init+0x140>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	091b      	lsrs	r3, r3, #4
 8005470:	009a      	lsls	r2, r3, #2
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a3c      	ldr	r2, [pc, #240]	; (800556c <HAL_DMA_Init+0x14c>)
 800547a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005496:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6819      	ldr	r1, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fb24 	bl	8005b1c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054dc:	d102      	bne.n	80054e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054f0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80054fa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d010      	beq.n	8005526 <HAL_DMA_Init+0x106>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b04      	cmp	r3, #4
 800550a:	d80c      	bhi.n	8005526 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fb4d 	bl	8005bac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005522:	605a      	str	r2, [r3, #4]
 8005524:	e008      	b.n	8005538 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40020407 	.word	0x40020407
 800555c:	bffdfff8 	.word	0xbffdfff8
 8005560:	cccccccd 	.word	0xcccccccd
 8005564:	40020000 	.word	0x40020000
 8005568:	bffdfbf8 	.word	0xbffdfbf8
 800556c:	40020400 	.word	0x40020400

08005570 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e07b      	b.n	800567a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0201 	bic.w	r2, r2, #1
 8005590:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	4b3a      	ldr	r3, [pc, #232]	; (8005684 <HAL_DMA_DeInit+0x114>)
 800559a:	429a      	cmp	r2, r3
 800559c:	d80f      	bhi.n	80055be <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	4b38      	ldr	r3, [pc, #224]	; (8005688 <HAL_DMA_DeInit+0x118>)
 80055a6:	4413      	add	r3, r2
 80055a8:	4a38      	ldr	r2, [pc, #224]	; (800568c <HAL_DMA_DeInit+0x11c>)
 80055aa:	fba2 2303 	umull	r2, r3, r2, r3
 80055ae:	091b      	lsrs	r3, r3, #4
 80055b0:	009a      	lsls	r2, r3, #2
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a35      	ldr	r2, [pc, #212]	; (8005690 <HAL_DMA_DeInit+0x120>)
 80055ba:	641a      	str	r2, [r3, #64]	; 0x40
 80055bc:	e00e      	b.n	80055dc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	4b33      	ldr	r3, [pc, #204]	; (8005694 <HAL_DMA_DeInit+0x124>)
 80055c6:	4413      	add	r3, r2
 80055c8:	4a30      	ldr	r2, [pc, #192]	; (800568c <HAL_DMA_DeInit+0x11c>)
 80055ca:	fba2 2303 	umull	r2, r3, r2, r3
 80055ce:	091b      	lsrs	r3, r3, #4
 80055d0:	009a      	lsls	r2, r3, #2
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a2f      	ldr	r2, [pc, #188]	; (8005698 <HAL_DMA_DeInit+0x128>)
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e8:	f003 021c 	and.w	r2, r3, #28
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	2101      	movs	r1, #1
 80055f2:	fa01 f202 	lsl.w	r2, r1, r2
 80055f6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fa8f 	bl	8005b1c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800560e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00f      	beq.n	8005638 <HAL_DMA_DeInit+0xc8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b04      	cmp	r3, #4
 800561e:	d80b      	bhi.n	8005638 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fac3 	bl	8005bac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005636:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	40020407 	.word	0x40020407
 8005688:	bffdfff8 	.word	0xbffdfff8
 800568c:	cccccccd 	.word	0xcccccccd
 8005690:	40020000 	.word	0x40020000
 8005694:	bffdfbf8 	.word	0xbffdfbf8
 8005698:	40020400 	.word	0x40020400

0800569c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_DMA_Start_IT+0x20>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e069      	b.n	8005790 <HAL_DMA_Start_IT+0xf4>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d155      	bne.n	800577c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0201 	bic.w	r2, r2, #1
 80056ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	68b9      	ldr	r1, [r7, #8]
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 f9d3 	bl	8005aa0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d008      	beq.n	8005714 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f042 020e 	orr.w	r2, r2, #14
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	e00f      	b.n	8005734 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0204 	bic.w	r2, r2, #4
 8005722:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 020a 	orr.w	r2, r2, #10
 8005732:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d007      	beq.n	8005752 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800574c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005750:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005756:	2b00      	cmp	r3, #0
 8005758:	d007      	beq.n	800576a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005768:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f042 0201 	orr.w	r2, r2, #1
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	e008      	b.n	800578e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2280      	movs	r2, #128	; 0x80
 8005780:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800578e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e04f      	b.n	800584a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d008      	beq.n	80057c8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2204      	movs	r2, #4
 80057ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e040      	b.n	800584a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 020e 	bic.w	r2, r2, #14
 80057d6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0201 	bic.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fc:	f003 021c 	and.w	r2, r3, #28
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005804:	2101      	movs	r1, #1
 8005806:	fa01 f202 	lsl.w	r2, r1, r2
 800580a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005814:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00c      	beq.n	8005838 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005828:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800582c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005836:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d005      	beq.n	8005878 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2204      	movs	r2, #4
 8005870:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	73fb      	strb	r3, [r7, #15]
 8005876:	e047      	b.n	8005908 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 020e 	bic.w	r2, r2, #14
 8005886:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0201 	bic.w	r2, r2, #1
 8005896:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ac:	f003 021c 	and.w	r2, r3, #28
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	2101      	movs	r1, #1
 80058b6:	fa01 f202 	lsl.w	r2, r1, r2
 80058ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80058c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00c      	beq.n	80058e8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80058e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	4798      	blx	r3
    }
  }
  return status;
 8005908:	7bfb      	ldrb	r3, [r7, #15]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005930:	f003 031c 	and.w	r3, r3, #28
 8005934:	2204      	movs	r2, #4
 8005936:	409a      	lsls	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4013      	ands	r3, r2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d027      	beq.n	8005990 <HAL_DMA_IRQHandler+0x7c>
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b00      	cmp	r3, #0
 8005948:	d022      	beq.n	8005990 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0320 	and.w	r3, r3, #32
 8005954:	2b00      	cmp	r3, #0
 8005956:	d107      	bne.n	8005968 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0204 	bic.w	r2, r2, #4
 8005966:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596c:	f003 021c 	and.w	r2, r3, #28
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	2104      	movs	r1, #4
 8005976:	fa01 f202 	lsl.w	r2, r1, r2
 800597a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 8081 	beq.w	8005a88 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800598e:	e07b      	b.n	8005a88 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005994:	f003 031c 	and.w	r3, r3, #28
 8005998:	2202      	movs	r2, #2
 800599a:	409a      	lsls	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4013      	ands	r3, r2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d03d      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x10c>
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d038      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10b      	bne.n	80059d4 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 020a 	bic.w	r2, r2, #10
 80059ca:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	461a      	mov	r2, r3
 80059da:	4b2e      	ldr	r3, [pc, #184]	; (8005a94 <HAL_DMA_IRQHandler+0x180>)
 80059dc:	429a      	cmp	r2, r3
 80059de:	d909      	bls.n	80059f4 <HAL_DMA_IRQHandler+0xe0>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e4:	f003 031c 	and.w	r3, r3, #28
 80059e8:	4a2b      	ldr	r2, [pc, #172]	; (8005a98 <HAL_DMA_IRQHandler+0x184>)
 80059ea:	2102      	movs	r1, #2
 80059ec:	fa01 f303 	lsl.w	r3, r1, r3
 80059f0:	6053      	str	r3, [r2, #4]
 80059f2:	e008      	b.n	8005a06 <HAL_DMA_IRQHandler+0xf2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f8:	f003 031c 	and.w	r3, r3, #28
 80059fc:	4a27      	ldr	r2, [pc, #156]	; (8005a9c <HAL_DMA_IRQHandler+0x188>)
 80059fe:	2102      	movs	r1, #2
 8005a00:	fa01 f303 	lsl.w	r3, r1, r3
 8005a04:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d038      	beq.n	8005a88 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005a1e:	e033      	b.n	8005a88 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a24:	f003 031c 	and.w	r3, r3, #28
 8005a28:	2208      	movs	r2, #8
 8005a2a:	409a      	lsls	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d02a      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x176>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d025      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 020e 	bic.w	r2, r2, #14
 8005a4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a52:	f003 021c 	and.w	r2, r3, #28
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a60:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
}
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	40020080 	.word	0x40020080
 8005a98:	40020400 	.word	0x40020400
 8005a9c:	40020000 	.word	0x40020000

08005aa0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005ab6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d004      	beq.n	8005aca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005ac8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ace:	f003 021c 	and.w	r2, r3, #28
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8005adc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	2b10      	cmp	r3, #16
 8005aec:	d108      	bne.n	8005b00 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005afe:	e007      	b.n	8005b10 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	60da      	str	r2, [r3, #12]
}
 8005b10:	bf00      	nop
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bc80      	pop	{r7}
 8005b18:	4770      	bx	lr
	...

08005b1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4b1c      	ldr	r3, [pc, #112]	; (8005b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d813      	bhi.n	8005b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b34:	089b      	lsrs	r3, r3, #2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b3c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	3b08      	subs	r3, #8
 8005b4c:	4a14      	ldr	r2, [pc, #80]	; (8005ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b52:	091b      	lsrs	r3, r3, #4
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	e011      	b.n	8005b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5c:	089b      	lsrs	r3, r3, #2
 8005b5e:	009a      	lsls	r2, r3, #2
 8005b60:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8005b62:	4413      	add	r3, r2
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	3b08      	subs	r3, #8
 8005b70:	4a0b      	ldr	r2, [pc, #44]	; (8005ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	091b      	lsrs	r3, r3, #4
 8005b78:	3307      	adds	r3, #7
 8005b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a0a      	ldr	r2, [pc, #40]	; (8005ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8005b80:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f003 031f 	and.w	r3, r3, #31
 8005b88:	2201      	movs	r2, #1
 8005b8a:	409a      	lsls	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b90:	bf00      	nop
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc80      	pop	{r7}
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40020407 	.word	0x40020407
 8005ba0:	cccccccd 	.word	0xcccccccd
 8005ba4:	4002081c 	.word	0x4002081c
 8005ba8:	40020880 	.word	0x40020880

08005bac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bbc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4b0a      	ldr	r3, [pc, #40]	; (8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a08      	ldr	r2, [pc, #32]	; (8005bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005bd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	2201      	movs	r2, #1
 8005bdc:	409a      	lsls	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr
 8005bec:	1000823f 	.word	0x1000823f
 8005bf0:	40020940 	.word	0x40020940

08005bf4 <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d12b      	bne.n	8005c62 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_DMAEx_ConfigMuxSync+0x24>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e028      	b.n	8005c6a <HAL_DMAEx_ConfigMuxSync+0x76>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	04db      	lsls	r3, r3, #19
 8005c36:	431a      	orrs	r2, r3
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	7a1b      	ldrb	r3, [r3, #8]
 8005c42:	041b      	lsls	r3, r3, #16
 8005c44:	431a      	orrs	r2, r3
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	7a5b      	ldrb	r3, [r3, #9]
 8005c4a:	025b      	lsls	r3, r3, #9
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c52:	430a      	orrs	r2, r1
 8005c54:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	e003      	b.n	8005c6a <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2280      	movs	r2, #128	; 0x80
 8005c66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
  }
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr

08005c74 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c86:	4013      	ands	r3, r2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01a      	beq.n	8005cc2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005ca4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005caa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d022      	beq.n	8005d10 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d01a      	beq.n	8005d10 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ce8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005cf2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	4798      	blx	r3
      }
    }
  }
}
 8005d10:	bf00      	nop
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005d26:	4b1c      	ldr	r3, [pc, #112]	; (8005d98 <HAL_FLASH_Program+0x80>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d101      	bne.n	8005d32 <HAL_FLASH_Program+0x1a>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e02d      	b.n	8005d8e <HAL_FLASH_Program+0x76>
 8005d32:	4b19      	ldr	r3, [pc, #100]	; (8005d98 <HAL_FLASH_Program+0x80>)
 8005d34:	2201      	movs	r2, #1
 8005d36:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005d38:	4b17      	ldr	r3, [pc, #92]	; (8005d98 <HAL_FLASH_Program+0x80>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005d3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d42:	f000 f869 	bl	8005e18 <FLASH_WaitForLastOperation>
 8005d46:	4603      	mov	r3, r0
 8005d48:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d11a      	bne.n	8005d86 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d105      	bne.n	8005d62 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005d56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d5a:	68b8      	ldr	r0, [r7, #8]
 8005d5c:	f000 f8be 	bl	8005edc <FLASH_Program_DoubleWord>
 8005d60:	e004      	b.n	8005d6c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	4619      	mov	r1, r3
 8005d66:	68b8      	ldr	r0, [r7, #8]
 8005d68:	f000 f8de 	bl	8005f28 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005d6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d70:	f000 f852 	bl	8005e18 <FLASH_WaitForLastOperation>
 8005d74:	4603      	mov	r3, r0
 8005d76:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005d78:	4b08      	ldr	r3, [pc, #32]	; (8005d9c <HAL_FLASH_Program+0x84>)
 8005d7a:	695a      	ldr	r2, [r3, #20]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	4906      	ldr	r1, [pc, #24]	; (8005d9c <HAL_FLASH_Program+0x84>)
 8005d82:	4013      	ands	r3, r2
 8005d84:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005d86:	4b04      	ldr	r3, [pc, #16]	; (8005d98 <HAL_FLASH_Program+0x80>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	20000ae8 	.word	0x20000ae8
 8005d9c:	58004000 	.word	0x58004000

08005da0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005daa:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <HAL_FLASH_Unlock+0x38>)
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	da0b      	bge.n	8005dca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005db2:	4b09      	ldr	r3, [pc, #36]	; (8005dd8 <HAL_FLASH_Unlock+0x38>)
 8005db4:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <HAL_FLASH_Unlock+0x3c>)
 8005db6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005db8:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <HAL_FLASH_Unlock+0x38>)
 8005dba:	4a09      	ldr	r2, [pc, #36]	; (8005de0 <HAL_FLASH_Unlock+0x40>)
 8005dbc:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005dbe:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <HAL_FLASH_Unlock+0x38>)
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	da01      	bge.n	8005dca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005dca:	79fb      	ldrb	r3, [r7, #7]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bc80      	pop	{r7}
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	58004000 	.word	0x58004000
 8005ddc:	45670123 	.word	0x45670123
 8005de0:	cdef89ab 	.word	0xcdef89ab

08005de4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005dee:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <HAL_FLASH_Lock+0x30>)
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	4a08      	ldr	r2, [pc, #32]	; (8005e14 <HAL_FLASH_Lock+0x30>)
 8005df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005df8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8005dfa:	4b06      	ldr	r3, [pc, #24]	; (8005e14 <HAL_FLASH_Lock+0x30>)
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	db01      	blt.n	8005e06 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005e06:	79fb      	ldrb	r3, [r7, #7]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc80      	pop	{r7}
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	58004000 	.word	0x58004000

08005e18 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005e20:	f7fd f8ec 	bl	8002ffc <HAL_GetTick>
 8005e24:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005e26:	e009      	b.n	8005e3c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005e28:	f7fd f8e8 	bl	8002ffc <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d801      	bhi.n	8005e3c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e047      	b.n	8005ecc <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005e3c:	4b25      	ldr	r3, [pc, #148]	; (8005ed4 <FLASH_WaitForLastOperation+0xbc>)
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e48:	d0ee      	beq.n	8005e28 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005e4a:	4b22      	ldr	r3, [pc, #136]	; (8005ed4 <FLASH_WaitForLastOperation+0xbc>)
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005e5a:	4b1e      	ldr	r3, [pc, #120]	; (8005ed4 <FLASH_WaitForLastOperation+0xbc>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005e66:	4013      	ands	r3, r2
 8005e68:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d007      	beq.n	8005e84 <FLASH_WaitForLastOperation+0x6c>
 8005e74:	4b17      	ldr	r3, [pc, #92]	; (8005ed4 <FLASH_WaitForLastOperation+0xbc>)
 8005e76:	699a      	ldr	r2, [r3, #24]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005e7e:	4915      	ldr	r1, [pc, #84]	; (8005ed4 <FLASH_WaitForLastOperation+0xbc>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	618b      	str	r3, [r1, #24]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d004      	beq.n	8005e98 <FLASH_WaitForLastOperation+0x80>
 8005e8e:	4a11      	ldr	r2, [pc, #68]	; (8005ed4 <FLASH_WaitForLastOperation+0xbc>)
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005e96:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00e      	beq.n	8005ebc <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8005e9e:	4a0e      	ldr	r2, [pc, #56]	; (8005ed8 <FLASH_WaitForLastOperation+0xc0>)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e011      	b.n	8005ecc <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005ea8:	f7fd f8a8 	bl	8002ffc <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d801      	bhi.n	8005ebc <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e007      	b.n	8005ecc <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005ebc:	4b05      	ldr	r3, [pc, #20]	; (8005ed4 <FLASH_WaitForLastOperation+0xbc>)
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ec4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ec8:	d0ee      	beq.n	8005ea8 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	58004000 	.word	0x58004000
 8005ed8:	20000ae8 	.word	0x20000ae8

08005edc <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005ee8:	4b0e      	ldr	r3, [pc, #56]	; (8005f24 <FLASH_Program_DoubleWord+0x48>)
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	4a0d      	ldr	r2, [pc, #52]	; (8005f24 <FLASH_Program_DoubleWord+0x48>)
 8005eee:	f043 0301 	orr.w	r3, r3, #1
 8005ef2:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005efa:	f3bf 8f6f 	isb	sy
}
 8005efe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005f00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	000a      	movs	r2, r1
 8005f0e:	2300      	movs	r3, #0
 8005f10:	68f9      	ldr	r1, [r7, #12]
 8005f12:	3104      	adds	r1, #4
 8005f14:	4613      	mov	r3, r2
 8005f16:	600b      	str	r3, [r1, #0]
}
 8005f18:	bf00      	nop
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bc80      	pop	{r7}
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	58004000 	.word	0x58004000

08005f28 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b089      	sub	sp, #36	; 0x24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005f32:	2340      	movs	r3, #64	; 0x40
 8005f34:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005f3e:	4b18      	ldr	r3, [pc, #96]	; (8005fa0 <FLASH_Program_Fast+0x78>)
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	4a17      	ldr	r2, [pc, #92]	; (8005fa0 <FLASH_Program_Fast+0x78>)
 8005f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f48:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f50:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8005f52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f54:	b672      	cpsid	i
}
 8005f56:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	3304      	adds	r3, #4
 8005f64:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	617b      	str	r3, [r7, #20]
    row_index--;
 8005f6c:	7ffb      	ldrb	r3, [r7, #31]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005f72:	7ffb      	ldrb	r3, [r7, #31]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1ef      	bne.n	8005f58 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005f78:	bf00      	nop
 8005f7a:	4b09      	ldr	r3, [pc, #36]	; (8005fa0 <FLASH_Program_Fast+0x78>)
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f86:	d0f8      	beq.n	8005f7a <FLASH_Program_Fast+0x52>
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f383 8810 	msr	PRIMASK, r3
}
 8005f92:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005f94:	bf00      	nop
 8005f96:	3724      	adds	r7, #36	; 0x24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bc80      	pop	{r7}
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	58004000 	.word	0x58004000

08005fa4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005fae:	4b28      	ldr	r3, [pc, #160]	; (8006050 <HAL_FLASHEx_Erase+0xac>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_FLASHEx_Erase+0x16>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e046      	b.n	8006048 <HAL_FLASHEx_Erase+0xa4>
 8005fba:	4b25      	ldr	r3, [pc, #148]	; (8006050 <HAL_FLASHEx_Erase+0xac>)
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005fc0:	4b23      	ldr	r3, [pc, #140]	; (8006050 <HAL_FLASHEx_Erase+0xac>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005fc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005fca:	f7ff ff25 	bl	8005e18 <FLASH_WaitForLastOperation>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d133      	bne.n	8006040 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d108      	bne.n	8005ff2 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005fe0:	f000 f880 	bl	80060e4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005fe4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005fe8:	f7ff ff16 	bl	8005e18 <FLASH_WaitForLastOperation>
 8005fec:	4603      	mov	r3, r0
 8005fee:	73fb      	strb	r3, [r7, #15]
 8005ff0:	e024      	b.n	800603c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff8:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	60bb      	str	r3, [r7, #8]
 8006000:	e012      	b.n	8006028 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8006002:	68b8      	ldr	r0, [r7, #8]
 8006004:	f000 f87e 	bl	8006104 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006008:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800600c:	f7ff ff04 	bl	8005e18 <FLASH_WaitForLastOperation>
 8006010:	4603      	mov	r3, r0
 8006012:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	601a      	str	r2, [r3, #0]
          break;
 8006020:	e00a      	b.n	8006038 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	3301      	adds	r3, #1
 8006026:	60bb      	str	r3, [r7, #8]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	4413      	add	r3, r2
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	429a      	cmp	r2, r3
 8006036:	d3e4      	bcc.n	8006002 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8006038:	f000 f8c0 	bl	80061bc <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800603c:	f000 f87a 	bl	8006134 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006040:	4b03      	ldr	r3, [pc, #12]	; (8006050 <HAL_FLASHEx_Erase+0xac>)
 8006042:	2200      	movs	r2, #0
 8006044:	701a      	strb	r2, [r3, #0]

  return status;
 8006046:	7bfb      	ldrb	r3, [r7, #15]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20000ae8 	.word	0x20000ae8

08006054 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800605c:	4b1f      	ldr	r3, [pc, #124]	; (80060dc <HAL_FLASHEx_Erase_IT+0x88>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_FLASHEx_Erase_IT+0x14>
 8006064:	2302      	movs	r3, #2
 8006066:	e034      	b.n	80060d2 <HAL_FLASHEx_Erase_IT+0x7e>
 8006068:	4b1c      	ldr	r3, [pc, #112]	; (80060dc <HAL_FLASHEx_Erase_IT+0x88>)
 800606a:	2201      	movs	r2, #1
 800606c:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800606e:	4b1b      	ldr	r3, [pc, #108]	; (80060dc <HAL_FLASHEx_Erase_IT+0x88>)
 8006070:	2200      	movs	r2, #0
 8006072:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a18      	ldr	r2, [pc, #96]	; (80060dc <HAL_FLASHEx_Erase_IT+0x88>)
 800607a:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800607c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006080:	f7ff feca 	bl	8005e18 <FLASH_WaitForLastOperation>
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800608e:	4b13      	ldr	r3, [pc, #76]	; (80060dc <HAL_FLASHEx_Erase_IT+0x88>)
 8006090:	2200      	movs	r2, #0
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	e01c      	b.n	80060d0 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8006096:	4b12      	ldr	r3, [pc, #72]	; (80060e0 <HAL_FLASHEx_Erase_IT+0x8c>)
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	4a11      	ldr	r2, [pc, #68]	; (80060e0 <HAL_FLASHEx_Erase_IT+0x8c>)
 800609c:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80060a0:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d105      	bne.n	80060b6 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 80060aa:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <HAL_FLASHEx_Erase_IT+0x88>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 80060b0:	f000 f818 	bl	80060e4 <FLASH_MassErase>
 80060b4:	e00c      	b.n	80060d0 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	4a08      	ldr	r2, [pc, #32]	; (80060dc <HAL_FLASHEx_Erase_IT+0x88>)
 80060bc:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	4a06      	ldr	r2, [pc, #24]	; (80060dc <HAL_FLASHEx_Erase_IT+0x88>)
 80060c4:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 f81a 	bl	8006104 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	20000ae8 	.word	0x20000ae8
 80060e0:	58004000 	.word	0x58004000

080060e4 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80060e8:	4b05      	ldr	r3, [pc, #20]	; (8006100 <FLASH_MassErase+0x1c>)
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	4a04      	ldr	r2, [pc, #16]	; (8006100 <FLASH_MassErase+0x1c>)
 80060ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f2:	f043 0304 	orr.w	r3, r3, #4
 80060f6:	6153      	str	r3, [r2, #20]
#endif
}
 80060f8:	bf00      	nop
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr
 8006100:	58004000 	.word	0x58004000

08006104 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800610c:	4b08      	ldr	r3, [pc, #32]	; (8006130 <FLASH_PageErase+0x2c>)
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	4313      	orrs	r3, r2
 800611a:	4a05      	ldr	r2, [pc, #20]	; (8006130 <FLASH_PageErase+0x2c>)
 800611c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006120:	f043 0302 	orr.w	r3, r3, #2
 8006124:	6153      	str	r3, [r2, #20]
#endif
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr
 8006130:	58004000 	.word	0x58004000

08006134 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8006138:	4b1f      	ldr	r3, [pc, #124]	; (80061b8 <FLASH_FlushCaches+0x84>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006140:	2b01      	cmp	r3, #1
 8006142:	d117      	bne.n	8006174 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006144:	4b1c      	ldr	r3, [pc, #112]	; (80061b8 <FLASH_FlushCaches+0x84>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a1b      	ldr	r2, [pc, #108]	; (80061b8 <FLASH_FlushCaches+0x84>)
 800614a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800614e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006150:	4b19      	ldr	r3, [pc, #100]	; (80061b8 <FLASH_FlushCaches+0x84>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a18      	ldr	r2, [pc, #96]	; (80061b8 <FLASH_FlushCaches+0x84>)
 8006156:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	4b16      	ldr	r3, [pc, #88]	; (80061b8 <FLASH_FlushCaches+0x84>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a15      	ldr	r2, [pc, #84]	; (80061b8 <FLASH_FlushCaches+0x84>)
 8006162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006166:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006168:	4b13      	ldr	r3, [pc, #76]	; (80061b8 <FLASH_FlushCaches+0x84>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a12      	ldr	r2, [pc, #72]	; (80061b8 <FLASH_FlushCaches+0x84>)
 800616e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006172:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8006174:	4b10      	ldr	r3, [pc, #64]	; (80061b8 <FLASH_FlushCaches+0x84>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617c:	2b01      	cmp	r3, #1
 800617e:	d117      	bne.n	80061b0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006180:	4b0d      	ldr	r3, [pc, #52]	; (80061b8 <FLASH_FlushCaches+0x84>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a0c      	ldr	r2, [pc, #48]	; (80061b8 <FLASH_FlushCaches+0x84>)
 8006186:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800618a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800618c:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <FLASH_FlushCaches+0x84>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a09      	ldr	r2, [pc, #36]	; (80061b8 <FLASH_FlushCaches+0x84>)
 8006192:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <FLASH_FlushCaches+0x84>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a06      	ldr	r2, [pc, #24]	; (80061b8 <FLASH_FlushCaches+0x84>)
 800619e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061a2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80061a4:	4b04      	ldr	r3, [pc, #16]	; (80061b8 <FLASH_FlushCaches+0x84>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a03      	ldr	r2, [pc, #12]	; (80061b8 <FLASH_FlushCaches+0x84>)
 80061aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061ae:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80061b0:	bf00      	nop
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bc80      	pop	{r7}
 80061b6:	4770      	bx	lr
 80061b8:	58004000 	.word	0x58004000

080061bc <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80061c0:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <FLASH_AcknowledgePageErase+0x1c>)
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	4a04      	ldr	r2, [pc, #16]	; (80061d8 <FLASH_AcknowledgePageErase+0x1c>)
 80061c6:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80061ca:	f023 0302 	bic.w	r3, r3, #2
 80061ce:	6153      	str	r3, [r2, #20]
#endif
}
 80061d0:	bf00      	nop
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bc80      	pop	{r7}
 80061d6:	4770      	bx	lr
 80061d8:	58004000 	.word	0x58004000

080061dc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80061e6:	2300      	movs	r3, #0
 80061e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061ea:	e140      	b.n	800646e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	2101      	movs	r1, #1
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	fa01 f303 	lsl.w	r3, r1, r3
 80061f8:	4013      	ands	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 8132 	beq.w	8006468 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f003 0303 	and.w	r3, r3, #3
 800620c:	2b01      	cmp	r3, #1
 800620e:	d005      	beq.n	800621c <HAL_GPIO_Init+0x40>
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f003 0303 	and.w	r3, r3, #3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d130      	bne.n	800627e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	2203      	movs	r2, #3
 8006228:	fa02 f303 	lsl.w	r3, r2, r3
 800622c:	43db      	mvns	r3, r3
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4013      	ands	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	68da      	ldr	r2, [r3, #12]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	fa02 f303 	lsl.w	r3, r2, r3
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006252:	2201      	movs	r2, #1
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	fa02 f303 	lsl.w	r3, r2, r3
 800625a:	43db      	mvns	r3, r3
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	4013      	ands	r3, r2
 8006260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	091b      	lsrs	r3, r3, #4
 8006268:	f003 0201 	and.w	r2, r3, #1
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	fa02 f303 	lsl.w	r3, r2, r3
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	2b03      	cmp	r3, #3
 8006288:	d017      	beq.n	80062ba <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	2203      	movs	r2, #3
 8006296:	fa02 f303 	lsl.w	r3, r2, r3
 800629a:	43db      	mvns	r3, r3
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4013      	ands	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	fa02 f303 	lsl.w	r3, r2, r3
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d123      	bne.n	800630e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	08da      	lsrs	r2, r3, #3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3208      	adds	r2, #8
 80062ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	220f      	movs	r2, #15
 80062de:	fa02 f303 	lsl.w	r3, r2, r3
 80062e2:	43db      	mvns	r3, r3
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	4013      	ands	r3, r2
 80062e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	691a      	ldr	r2, [r3, #16]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	fa02 f303 	lsl.w	r3, r2, r3
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	08da      	lsrs	r2, r3, #3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	3208      	adds	r2, #8
 8006308:	6939      	ldr	r1, [r7, #16]
 800630a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	2203      	movs	r2, #3
 800631a:	fa02 f303 	lsl.w	r3, r2, r3
 800631e:	43db      	mvns	r3, r3
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	4013      	ands	r3, r2
 8006324:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f003 0203 	and.w	r2, r3, #3
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	4313      	orrs	r3, r2
 800633a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 808c 	beq.w	8006468 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006350:	4a4e      	ldr	r2, [pc, #312]	; (800648c <HAL_GPIO_Init+0x2b0>)
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	089b      	lsrs	r3, r3, #2
 8006356:	3302      	adds	r3, #2
 8006358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800635c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f003 0303 	and.w	r3, r3, #3
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	2207      	movs	r2, #7
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	43db      	mvns	r3, r3
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4013      	ands	r3, r2
 8006372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800637a:	d00d      	beq.n	8006398 <HAL_GPIO_Init+0x1bc>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a44      	ldr	r2, [pc, #272]	; (8006490 <HAL_GPIO_Init+0x2b4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d007      	beq.n	8006394 <HAL_GPIO_Init+0x1b8>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a43      	ldr	r2, [pc, #268]	; (8006494 <HAL_GPIO_Init+0x2b8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d101      	bne.n	8006390 <HAL_GPIO_Init+0x1b4>
 800638c:	2302      	movs	r3, #2
 800638e:	e004      	b.n	800639a <HAL_GPIO_Init+0x1be>
 8006390:	2307      	movs	r3, #7
 8006392:	e002      	b.n	800639a <HAL_GPIO_Init+0x1be>
 8006394:	2301      	movs	r3, #1
 8006396:	e000      	b.n	800639a <HAL_GPIO_Init+0x1be>
 8006398:	2300      	movs	r3, #0
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	f002 0203 	and.w	r2, r2, #3
 80063a0:	0092      	lsls	r2, r2, #2
 80063a2:	4093      	lsls	r3, r2
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80063aa:	4938      	ldr	r1, [pc, #224]	; (800648c <HAL_GPIO_Init+0x2b0>)
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	089b      	lsrs	r3, r3, #2
 80063b0:	3302      	adds	r3, #2
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063b8:	4b37      	ldr	r3, [pc, #220]	; (8006498 <HAL_GPIO_Init+0x2bc>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	43db      	mvns	r3, r3
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4013      	ands	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4313      	orrs	r3, r2
 80063da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80063dc:	4a2e      	ldr	r2, [pc, #184]	; (8006498 <HAL_GPIO_Init+0x2bc>)
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80063e2:	4b2d      	ldr	r3, [pc, #180]	; (8006498 <HAL_GPIO_Init+0x2bc>)
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	43db      	mvns	r3, r3
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4013      	ands	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006406:	4a24      	ldr	r2, [pc, #144]	; (8006498 <HAL_GPIO_Init+0x2bc>)
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800640c:	4b22      	ldr	r3, [pc, #136]	; (8006498 <HAL_GPIO_Init+0x2bc>)
 800640e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006412:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	43db      	mvns	r3, r3
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4013      	ands	r3, r2
 800641c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4313      	orrs	r3, r2
 8006430:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8006432:	4a19      	ldr	r2, [pc, #100]	; (8006498 <HAL_GPIO_Init+0x2bc>)
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800643a:	4b17      	ldr	r3, [pc, #92]	; (8006498 <HAL_GPIO_Init+0x2bc>)
 800643c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006440:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	43db      	mvns	r3, r3
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	4013      	ands	r3, r2
 800644a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d003      	beq.n	8006460 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4313      	orrs	r3, r2
 800645e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8006460:	4a0d      	ldr	r2, [pc, #52]	; (8006498 <HAL_GPIO_Init+0x2bc>)
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	3301      	adds	r3, #1
 800646c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	fa22 f303 	lsr.w	r3, r2, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	f47f aeb7 	bne.w	80061ec <HAL_GPIO_Init+0x10>
  }
}
 800647e:	bf00      	nop
 8006480:	bf00      	nop
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	bc80      	pop	{r7}
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40010000 	.word	0x40010000
 8006490:	48000400 	.word	0x48000400
 8006494:	48000800 	.word	0x48000800
 8006498:	58000800 	.word	0x58000800

0800649c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064a6:	2300      	movs	r3, #0
 80064a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80064aa:	e0af      	b.n	800660c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80064ac:	2201      	movs	r2, #1
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	fa02 f303 	lsl.w	r3, r2, r3
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	4013      	ands	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 80a2 	beq.w	8006606 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80064c2:	4a59      	ldr	r2, [pc, #356]	; (8006628 <HAL_GPIO_DeInit+0x18c>)
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	089b      	lsrs	r3, r3, #2
 80064c8:	3302      	adds	r3, #2
 80064ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f003 0303 	and.w	r3, r3, #3
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	2207      	movs	r2, #7
 80064da:	fa02 f303 	lsl.w	r3, r2, r3
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4013      	ands	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80064ea:	d00d      	beq.n	8006508 <HAL_GPIO_DeInit+0x6c>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a4f      	ldr	r2, [pc, #316]	; (800662c <HAL_GPIO_DeInit+0x190>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d007      	beq.n	8006504 <HAL_GPIO_DeInit+0x68>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a4e      	ldr	r2, [pc, #312]	; (8006630 <HAL_GPIO_DeInit+0x194>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d101      	bne.n	8006500 <HAL_GPIO_DeInit+0x64>
 80064fc:	2302      	movs	r3, #2
 80064fe:	e004      	b.n	800650a <HAL_GPIO_DeInit+0x6e>
 8006500:	2307      	movs	r3, #7
 8006502:	e002      	b.n	800650a <HAL_GPIO_DeInit+0x6e>
 8006504:	2301      	movs	r3, #1
 8006506:	e000      	b.n	800650a <HAL_GPIO_DeInit+0x6e>
 8006508:	2300      	movs	r3, #0
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	f002 0203 	and.w	r2, r2, #3
 8006510:	0092      	lsls	r2, r2, #2
 8006512:	4093      	lsls	r3, r2
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	429a      	cmp	r2, r3
 8006518:	d136      	bne.n	8006588 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800651a:	4b46      	ldr	r3, [pc, #280]	; (8006634 <HAL_GPIO_DeInit+0x198>)
 800651c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	43db      	mvns	r3, r3
 8006524:	4943      	ldr	r1, [pc, #268]	; (8006634 <HAL_GPIO_DeInit+0x198>)
 8006526:	4013      	ands	r3, r2
 8006528:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800652c:	4b41      	ldr	r3, [pc, #260]	; (8006634 <HAL_GPIO_DeInit+0x198>)
 800652e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	43db      	mvns	r3, r3
 8006536:	493f      	ldr	r1, [pc, #252]	; (8006634 <HAL_GPIO_DeInit+0x198>)
 8006538:	4013      	ands	r3, r2
 800653a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800653e:	4b3d      	ldr	r3, [pc, #244]	; (8006634 <HAL_GPIO_DeInit+0x198>)
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	43db      	mvns	r3, r3
 8006546:	493b      	ldr	r1, [pc, #236]	; (8006634 <HAL_GPIO_DeInit+0x198>)
 8006548:	4013      	ands	r3, r2
 800654a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800654c:	4b39      	ldr	r3, [pc, #228]	; (8006634 <HAL_GPIO_DeInit+0x198>)
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	43db      	mvns	r3, r3
 8006554:	4937      	ldr	r1, [pc, #220]	; (8006634 <HAL_GPIO_DeInit+0x198>)
 8006556:	4013      	ands	r3, r2
 8006558:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f003 0303 	and.w	r3, r3, #3
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	2207      	movs	r2, #7
 8006564:	fa02 f303 	lsl.w	r3, r2, r3
 8006568:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800656a:	4a2f      	ldr	r2, [pc, #188]	; (8006628 <HAL_GPIO_DeInit+0x18c>)
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	089b      	lsrs	r3, r3, #2
 8006570:	3302      	adds	r3, #2
 8006572:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	43da      	mvns	r2, r3
 800657a:	482b      	ldr	r0, [pc, #172]	; (8006628 <HAL_GPIO_DeInit+0x18c>)
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	089b      	lsrs	r3, r3, #2
 8006580:	400a      	ands	r2, r1
 8006582:	3302      	adds	r3, #2
 8006584:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	2103      	movs	r1, #3
 8006592:	fa01 f303 	lsl.w	r3, r1, r3
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	08da      	lsrs	r2, r3, #3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	3208      	adds	r2, #8
 80065a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f003 0307 	and.w	r3, r3, #7
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	220f      	movs	r2, #15
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	43db      	mvns	r3, r3
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	08d2      	lsrs	r2, r2, #3
 80065bc:	4019      	ands	r1, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3208      	adds	r2, #8
 80065c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689a      	ldr	r2, [r3, #8]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	2103      	movs	r1, #3
 80065d0:	fa01 f303 	lsl.w	r3, r1, r3
 80065d4:	43db      	mvns	r3, r3
 80065d6:	401a      	ands	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	2101      	movs	r1, #1
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	fa01 f303 	lsl.w	r3, r1, r3
 80065e8:	43db      	mvns	r3, r3
 80065ea:	401a      	ands	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68da      	ldr	r2, [r3, #12]
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	2103      	movs	r1, #3
 80065fa:	fa01 f303 	lsl.w	r3, r1, r3
 80065fe:	43db      	mvns	r3, r3
 8006600:	401a      	ands	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60da      	str	r2, [r3, #12]
    }

    position++;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	3301      	adds	r3, #1
 800660a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	fa22 f303 	lsr.w	r3, r2, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	f47f af49 	bne.w	80064ac <HAL_GPIO_DeInit+0x10>
  }
}
 800661a:	bf00      	nop
 800661c:	bf00      	nop
 800661e:	371c      	adds	r7, #28
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40010000 	.word	0x40010000
 800662c:	48000400 	.word	0x48000400
 8006630:	48000800 	.word	0x48000800
 8006634:	58000800 	.word	0x58000800

08006638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	807b      	strh	r3, [r7, #2]
 8006644:	4613      	mov	r3, r2
 8006646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006648:	787b      	ldrb	r3, [r7, #1]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800664e:	887a      	ldrh	r2, [r7, #2]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006654:	e002      	b.n	800665c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006656:	887a      	ldrh	r2, [r7, #2]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	bc80      	pop	{r7}
 8006664:	4770      	bx	lr

08006666 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006666:	b480      	push	{r7}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	460b      	mov	r3, r1
 8006670:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006678:	887a      	ldrh	r2, [r7, #2]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4013      	ands	r3, r2
 800667e:	041a      	lsls	r2, r3, #16
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	43d9      	mvns	r1, r3
 8006684:	887b      	ldrh	r3, [r7, #2]
 8006686:	400b      	ands	r3, r1
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	619a      	str	r2, [r3, #24]
}
 800668e:	bf00      	nop
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr

08006698 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e081      	b.n	80067ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d106      	bne.n	80066c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7fb fd52 	bl	8002168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2224      	movs	r2, #36	; 0x24
 80066c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0201 	bic.w	r2, r2, #1
 80066da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d107      	bne.n	8006712 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800670e:	609a      	str	r2, [r3, #8]
 8006710:	e006      	b.n	8006720 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800671e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	2b02      	cmp	r3, #2
 8006726:	d104      	bne.n	8006732 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006730:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	6812      	ldr	r2, [r2, #0]
 800673c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006744:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68da      	ldr	r2, [r3, #12]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006754:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691a      	ldr	r2, [r3, #16]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	69d9      	ldr	r1, [r3, #28]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a1a      	ldr	r2, [r3, #32]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0201 	orr.w	r2, r2, #1
 800678e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
	...

080067b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af02      	add	r7, sp, #8
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	607a      	str	r2, [r7, #4]
 80067c2:	461a      	mov	r2, r3
 80067c4:	460b      	mov	r3, r1
 80067c6:	817b      	strh	r3, [r7, #10]
 80067c8:	4613      	mov	r3, r2
 80067ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	f040 80da 	bne.w	800698e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d101      	bne.n	80067e8 <HAL_I2C_Master_Transmit+0x30>
 80067e4:	2302      	movs	r3, #2
 80067e6:	e0d3      	b.n	8006990 <HAL_I2C_Master_Transmit+0x1d8>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067f0:	f7fc fc04 	bl	8002ffc <HAL_GetTick>
 80067f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	2319      	movs	r3, #25
 80067fc:	2201      	movs	r2, #1
 80067fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 f9e5 	bl	8006bd2 <I2C_WaitOnFlagUntilTimeout>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e0be      	b.n	8006990 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2221      	movs	r2, #33	; 0x21
 8006816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2210      	movs	r2, #16
 800681e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	893a      	ldrh	r2, [r7, #8]
 8006832:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683e:	b29b      	uxth	r3, r3
 8006840:	2bff      	cmp	r3, #255	; 0xff
 8006842:	d90e      	bls.n	8006862 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	22ff      	movs	r2, #255	; 0xff
 8006848:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800684e:	b2da      	uxtb	r2, r3
 8006850:	8979      	ldrh	r1, [r7, #10]
 8006852:	4b51      	ldr	r3, [pc, #324]	; (8006998 <HAL_I2C_Master_Transmit+0x1e0>)
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 fbdc 	bl	8007018 <I2C_TransferConfig>
 8006860:	e06c      	b.n	800693c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006870:	b2da      	uxtb	r2, r3
 8006872:	8979      	ldrh	r1, [r7, #10]
 8006874:	4b48      	ldr	r3, [pc, #288]	; (8006998 <HAL_I2C_Master_Transmit+0x1e0>)
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 fbcb 	bl	8007018 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006882:	e05b      	b.n	800693c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	6a39      	ldr	r1, [r7, #32]
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 f9e2 	bl	8006c52 <I2C_WaitOnTXISFlagUntilTimeout>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e07b      	b.n	8006990 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689c:	781a      	ldrb	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c0:	3b01      	subs	r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d034      	beq.n	800693c <HAL_I2C_Master_Transmit+0x184>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d130      	bne.n	800693c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	2200      	movs	r2, #0
 80068e2:	2180      	movs	r1, #128	; 0x80
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 f974 	bl	8006bd2 <I2C_WaitOnFlagUntilTimeout>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e04d      	b.n	8006990 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	2bff      	cmp	r3, #255	; 0xff
 80068fc:	d90e      	bls.n	800691c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	22ff      	movs	r2, #255	; 0xff
 8006902:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006908:	b2da      	uxtb	r2, r3
 800690a:	8979      	ldrh	r1, [r7, #10]
 800690c:	2300      	movs	r3, #0
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 fb7f 	bl	8007018 <I2C_TransferConfig>
 800691a:	e00f      	b.n	800693c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006920:	b29a      	uxth	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692a:	b2da      	uxtb	r2, r3
 800692c:	8979      	ldrh	r1, [r7, #10]
 800692e:	2300      	movs	r3, #0
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 fb6e 	bl	8007018 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006940:	b29b      	uxth	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d19e      	bne.n	8006884 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	6a39      	ldr	r1, [r7, #32]
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 f9c1 	bl	8006cd2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e01a      	b.n	8006990 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2220      	movs	r2, #32
 8006960:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6859      	ldr	r1, [r3, #4]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	4b0b      	ldr	r3, [pc, #44]	; (800699c <HAL_I2C_Master_Transmit+0x1e4>)
 800696e:	400b      	ands	r3, r1
 8006970:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2220      	movs	r2, #32
 8006976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	e000      	b.n	8006990 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800698e:	2302      	movs	r3, #2
  }
}
 8006990:	4618      	mov	r0, r3
 8006992:	3718      	adds	r7, #24
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	80002000 	.word	0x80002000
 800699c:	fe00e800 	.word	0xfe00e800

080069a0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b088      	sub	sp, #32
 80069a4:	af02      	add	r7, sp, #8
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	607a      	str	r2, [r7, #4]
 80069aa:	461a      	mov	r2, r3
 80069ac:	460b      	mov	r3, r1
 80069ae:	817b      	strh	r3, [r7, #10]
 80069b0:	4613      	mov	r3, r2
 80069b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b20      	cmp	r3, #32
 80069be:	f040 80db 	bne.w	8006b78 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d101      	bne.n	80069d0 <HAL_I2C_Master_Receive+0x30>
 80069cc:	2302      	movs	r3, #2
 80069ce:	e0d4      	b.n	8006b7a <HAL_I2C_Master_Receive+0x1da>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80069d8:	f7fc fb10 	bl	8002ffc <HAL_GetTick>
 80069dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	2319      	movs	r3, #25
 80069e4:	2201      	movs	r2, #1
 80069e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f8f1 	bl	8006bd2 <I2C_WaitOnFlagUntilTimeout>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e0bf      	b.n	8006b7a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2222      	movs	r2, #34	; 0x22
 80069fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2210      	movs	r2, #16
 8006a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	893a      	ldrh	r2, [r7, #8]
 8006a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	2bff      	cmp	r3, #255	; 0xff
 8006a2a:	d90e      	bls.n	8006a4a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	22ff      	movs	r2, #255	; 0xff
 8006a30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	8979      	ldrh	r1, [r7, #10]
 8006a3a:	4b52      	ldr	r3, [pc, #328]	; (8006b84 <HAL_I2C_Master_Receive+0x1e4>)
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 fae8 	bl	8007018 <I2C_TransferConfig>
 8006a48:	e06d      	b.n	8006b26 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	8979      	ldrh	r1, [r7, #10]
 8006a5c:	4b49      	ldr	r3, [pc, #292]	; (8006b84 <HAL_I2C_Master_Receive+0x1e4>)
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 fad7 	bl	8007018 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006a6a:	e05c      	b.n	8006b26 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	6a39      	ldr	r1, [r7, #32]
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 f96b 	bl	8006d4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e07c      	b.n	8006b7a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d034      	beq.n	8006b26 <HAL_I2C_Master_Receive+0x186>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d130      	bne.n	8006b26 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	2200      	movs	r2, #0
 8006acc:	2180      	movs	r1, #128	; 0x80
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 f87f 	bl	8006bd2 <I2C_WaitOnFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e04d      	b.n	8006b7a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	2bff      	cmp	r3, #255	; 0xff
 8006ae6:	d90e      	bls.n	8006b06 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	22ff      	movs	r2, #255	; 0xff
 8006aec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	8979      	ldrh	r1, [r7, #10]
 8006af6:	2300      	movs	r3, #0
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f000 fa8a 	bl	8007018 <I2C_TransferConfig>
 8006b04:	e00f      	b.n	8006b26 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	8979      	ldrh	r1, [r7, #10]
 8006b18:	2300      	movs	r3, #0
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 fa79 	bl	8007018 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d19d      	bne.n	8006a6c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	6a39      	ldr	r1, [r7, #32]
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 f8cc 	bl	8006cd2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e01a      	b.n	8006b7a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6859      	ldr	r1, [r3, #4]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4b0c      	ldr	r3, [pc, #48]	; (8006b88 <HAL_I2C_Master_Receive+0x1e8>)
 8006b58:	400b      	ands	r3, r1
 8006b5a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	e000      	b.n	8006b7a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006b78:	2302      	movs	r3, #2
  }
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	80002400 	.word	0x80002400
 8006b88:	fe00e800 	.word	0xfe00e800

08006b8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d103      	bne.n	8006baa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d007      	beq.n	8006bc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699a      	ldr	r2, [r3, #24]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0201 	orr.w	r2, r2, #1
 8006bc6:	619a      	str	r2, [r3, #24]
  }
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr

08006bd2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	60f8      	str	r0, [r7, #12]
 8006bda:	60b9      	str	r1, [r7, #8]
 8006bdc:	603b      	str	r3, [r7, #0]
 8006bde:	4613      	mov	r3, r2
 8006be0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006be2:	e022      	b.n	8006c2a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bea:	d01e      	beq.n	8006c2a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bec:	f7fc fa06 	bl	8002ffc <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d302      	bcc.n	8006c02 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d113      	bne.n	8006c2a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c06:	f043 0220 	orr.w	r2, r3, #32
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2220      	movs	r2, #32
 8006c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e00f      	b.n	8006c4a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	699a      	ldr	r2, [r3, #24]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	4013      	ands	r3, r2
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	bf0c      	ite	eq
 8006c3a:	2301      	moveq	r3, #1
 8006c3c:	2300      	movne	r3, #0
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	461a      	mov	r2, r3
 8006c42:	79fb      	ldrb	r3, [r7, #7]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d0cd      	beq.n	8006be4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c5e:	e02c      	b.n	8006cba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	68b9      	ldr	r1, [r7, #8]
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 f8eb 	bl	8006e40 <I2C_IsErrorOccurred>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e02a      	b.n	8006cca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7a:	d01e      	beq.n	8006cba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c7c:	f7fc f9be 	bl	8002ffc <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d302      	bcc.n	8006c92 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d113      	bne.n	8006cba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c96:	f043 0220 	orr.w	r2, r3, #32
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e007      	b.n	8006cca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d1cb      	bne.n	8006c60 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	60f8      	str	r0, [r7, #12]
 8006cda:	60b9      	str	r1, [r7, #8]
 8006cdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cde:	e028      	b.n	8006d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f8ab 	bl	8006e40 <I2C_IsErrorOccurred>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e026      	b.n	8006d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cf4:	f7fc f982 	bl	8002ffc <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d302      	bcc.n	8006d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d113      	bne.n	8006d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0e:	f043 0220 	orr.w	r2, r3, #32
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e007      	b.n	8006d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	f003 0320 	and.w	r3, r3, #32
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d1cf      	bne.n	8006ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d58:	e064      	b.n	8006e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	68b9      	ldr	r1, [r7, #8]
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 f86e 	bl	8006e40 <I2C_IsErrorOccurred>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e062      	b.n	8006e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	2b20      	cmp	r3, #32
 8006d7a:	d138      	bne.n	8006dee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	f003 0304 	and.w	r3, r3, #4
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	d105      	bne.n	8006d96 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e04e      	b.n	8006e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	f003 0310 	and.w	r3, r3, #16
 8006da0:	2b10      	cmp	r3, #16
 8006da2:	d107      	bne.n	8006db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2210      	movs	r2, #16
 8006daa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2204      	movs	r2, #4
 8006db0:	645a      	str	r2, [r3, #68]	; 0x44
 8006db2:	e002      	b.n	8006dba <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6859      	ldr	r1, [r3, #4]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	4b1b      	ldr	r3, [pc, #108]	; (8006e3c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006dce:	400b      	ands	r3, r1
 8006dd0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e022      	b.n	8006e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dee:	f7fc f905 	bl	8002ffc <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d302      	bcc.n	8006e04 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10f      	bne.n	8006e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e08:	f043 0220 	orr.w	r2, r3, #32
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2220      	movs	r2, #32
 8006e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e007      	b.n	8006e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	f003 0304 	and.w	r3, r3, #4
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	d193      	bne.n	8006d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	fe00e800 	.word	0xfe00e800

08006e40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08a      	sub	sp, #40	; 0x28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	f003 0310 	and.w	r3, r3, #16
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d075      	beq.n	8006f58 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2210      	movs	r2, #16
 8006e72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e74:	e056      	b.n	8006f24 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7c:	d052      	beq.n	8006f24 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006e7e:	f7fc f8bd 	bl	8002ffc <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d302      	bcc.n	8006e94 <I2C_IsErrorOccurred+0x54>
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d147      	bne.n	8006f24 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ea6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb6:	d12e      	bne.n	8006f16 <I2C_IsErrorOccurred+0xd6>
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ebe:	d02a      	beq.n	8006f16 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006ec0:	7cfb      	ldrb	r3, [r7, #19]
 8006ec2:	2b20      	cmp	r3, #32
 8006ec4:	d027      	beq.n	8006f16 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ed4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006ed6:	f7fc f891 	bl	8002ffc <HAL_GetTick>
 8006eda:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006edc:	e01b      	b.n	8006f16 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006ede:	f7fc f88d 	bl	8002ffc <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b19      	cmp	r3, #25
 8006eea:	d914      	bls.n	8006f16 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef0:	f043 0220 	orr.w	r2, r3, #32
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	f003 0320 	and.w	r3, r3, #32
 8006f20:	2b20      	cmp	r3, #32
 8006f22:	d1dc      	bne.n	8006ede <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	d003      	beq.n	8006f3a <I2C_IsErrorOccurred+0xfa>
 8006f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d09d      	beq.n	8006e76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d103      	bne.n	8006f4a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2220      	movs	r2, #32
 8006f48:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	f043 0304 	orr.w	r3, r3, #4
 8006f50:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00b      	beq.n	8006f82 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	f043 0301 	orr.w	r3, r3, #1
 8006f70:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	f043 0308 	orr.w	r3, r3, #8
 8006f92:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00b      	beq.n	8006fc6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	f043 0302 	orr.w	r3, r3, #2
 8006fb4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d01c      	beq.n	8007008 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f7ff fddc 	bl	8006b8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6859      	ldr	r1, [r3, #4]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	4b0d      	ldr	r3, [pc, #52]	; (8007014 <I2C_IsErrorOccurred+0x1d4>)
 8006fe0:	400b      	ands	r3, r1
 8006fe2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	431a      	orrs	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800700c:	4618      	mov	r0, r3
 800700e:	3728      	adds	r7, #40	; 0x28
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	fe00e800 	.word	0xfe00e800

08007018 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	607b      	str	r3, [r7, #4]
 8007022:	460b      	mov	r3, r1
 8007024:	817b      	strh	r3, [r7, #10]
 8007026:	4613      	mov	r3, r2
 8007028:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800702a:	897b      	ldrh	r3, [r7, #10]
 800702c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007030:	7a7b      	ldrb	r3, [r7, #9]
 8007032:	041b      	lsls	r3, r3, #16
 8007034:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007038:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	4313      	orrs	r3, r2
 8007042:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007046:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	0d5b      	lsrs	r3, r3, #21
 8007052:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007056:	4b07      	ldr	r3, [pc, #28]	; (8007074 <I2C_TransferConfig+0x5c>)
 8007058:	430b      	orrs	r3, r1
 800705a:	43db      	mvns	r3, r3
 800705c:	ea02 0103 	and.w	r1, r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	430a      	orrs	r2, r1
 8007068:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800706a:	bf00      	nop
 800706c:	371c      	adds	r7, #28
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr
 8007074:	03ff63ff 	.word	0x03ff63ff

08007078 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b20      	cmp	r3, #32
 800708c:	d138      	bne.n	8007100 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007094:	2b01      	cmp	r3, #1
 8007096:	d101      	bne.n	800709c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007098:	2302      	movs	r3, #2
 800709a:	e032      	b.n	8007102 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2224      	movs	r2, #36	; 0x24
 80070a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 0201 	bic.w	r2, r2, #1
 80070ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6819      	ldr	r1, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f042 0201 	orr.w	r2, r2, #1
 80070ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	e000      	b.n	8007102 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007100:	2302      	movs	r3, #2
  }
}
 8007102:	4618      	mov	r0, r3
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	bc80      	pop	{r7}
 800710a:	4770      	bx	lr

0800710c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b20      	cmp	r3, #32
 8007120:	d139      	bne.n	8007196 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007128:	2b01      	cmp	r3, #1
 800712a:	d101      	bne.n	8007130 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800712c:	2302      	movs	r3, #2
 800712e:	e033      	b.n	8007198 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2224      	movs	r2, #36	; 0x24
 800713c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0201 	bic.w	r2, r2, #1
 800714e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800715e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	021b      	lsls	r3, r3, #8
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f042 0201 	orr.w	r2, r2, #1
 8007180:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2220      	movs	r2, #32
 8007186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	e000      	b.n	8007198 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007196:	2302      	movs	r3, #2
  }
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	bc80      	pop	{r7}
 80071a0:	4770      	bx	lr
	...

080071a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80071a4:	b480      	push	{r7}
 80071a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071a8:	4b04      	ldr	r3, [pc, #16]	; (80071bc <HAL_PWR_EnableBkUpAccess+0x18>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a03      	ldr	r2, [pc, #12]	; (80071bc <HAL_PWR_EnableBkUpAccess+0x18>)
 80071ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b2:	6013      	str	r3, [r2, #0]
}
 80071b4:	bf00      	nop
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bc80      	pop	{r7}
 80071ba:	4770      	bx	lr
 80071bc:	58000400 	.word	0x58000400

080071c0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10c      	bne.n	80071ec <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80071d2:	4b13      	ldr	r3, [pc, #76]	; (8007220 <HAL_PWR_EnterSLEEPMode+0x60>)
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071de:	d10d      	bne.n	80071fc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80071e0:	f000 f83c 	bl	800725c <HAL_PWREx_DisableLowPowerRunMode>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d008      	beq.n	80071fc <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80071ea:	e015      	b.n	8007218 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80071ec:	4b0c      	ldr	r3, [pc, #48]	; (8007220 <HAL_PWR_EnterSLEEPMode+0x60>)
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80071f8:	f000 f822 	bl	8007240 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80071fc:	4b09      	ldr	r3, [pc, #36]	; (8007224 <HAL_PWR_EnterSLEEPMode+0x64>)
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	4a08      	ldr	r2, [pc, #32]	; (8007224 <HAL_PWR_EnterSLEEPMode+0x64>)
 8007202:	f023 0304 	bic.w	r3, r3, #4
 8007206:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8007208:	78fb      	ldrb	r3, [r7, #3]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d101      	bne.n	8007212 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800720e:	bf30      	wfi
 8007210:	e002      	b.n	8007218 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007212:	bf40      	sev
    __WFE();
 8007214:	bf20      	wfe
    __WFE();
 8007216:	bf20      	wfe
  }
}
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	58000400 	.word	0x58000400
 8007224:	e000ed00 	.word	0xe000ed00

08007228 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800722c:	4b03      	ldr	r3, [pc, #12]	; (800723c <HAL_PWREx_GetVoltageRange+0x14>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007234:	4618      	mov	r0, r3
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr
 800723c:	58000400 	.word	0x58000400

08007240 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8007244:	4b04      	ldr	r3, [pc, #16]	; (8007258 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a03      	ldr	r2, [pc, #12]	; (8007258 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800724a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800724e:	6013      	str	r3, [r2, #0]
}
 8007250:	bf00      	nop
 8007252:	46bd      	mov	sp, r7
 8007254:	bc80      	pop	{r7}
 8007256:	4770      	bx	lr
 8007258:	58000400 	.word	0x58000400

0800725c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8007262:	4b16      	ldr	r3, [pc, #88]	; (80072bc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a15      	ldr	r2, [pc, #84]	; (80072bc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8007268:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800726c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800726e:	4b14      	ldr	r3, [pc, #80]	; (80072c0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2232      	movs	r2, #50	; 0x32
 8007274:	fb02 f303 	mul.w	r3, r2, r3
 8007278:	4a12      	ldr	r2, [pc, #72]	; (80072c4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800727a:	fba2 2303 	umull	r2, r3, r2, r3
 800727e:	0c9b      	lsrs	r3, r3, #18
 8007280:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8007282:	e002      	b.n	800728a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	3b01      	subs	r3, #1
 8007288:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800728a:	4b0c      	ldr	r3, [pc, #48]	; (80072bc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007296:	d102      	bne.n	800729e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1f2      	bne.n	8007284 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800729e:	4b07      	ldr	r3, [pc, #28]	; (80072bc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072aa:	d101      	bne.n	80072b0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e000      	b.n	80072b2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bc80      	pop	{r7}
 80072ba:	4770      	bx	lr
 80072bc:	58000400 	.word	0x58000400
 80072c0:	2000000c 	.word	0x2000000c
 80072c4:	431bde83 	.word	0x431bde83

080072c8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	4603      	mov	r3, r0
 80072d0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80072d2:	4b10      	ldr	r3, [pc, #64]	; (8007314 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f023 0307 	bic.w	r3, r3, #7
 80072da:	4a0e      	ldr	r2, [pc, #56]	; (8007314 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80072dc:	f043 0302 	orr.w	r3, r3, #2
 80072e0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80072e2:	4b0d      	ldr	r3, [pc, #52]	; (8007318 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	4a0c      	ldr	r2, [pc, #48]	; (8007318 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80072e8:	f043 0304 	orr.w	r3, r3, #4
 80072ec:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80072ee:	79fb      	ldrb	r3, [r7, #7]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80072f4:	bf30      	wfi
 80072f6:	e002      	b.n	80072fe <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80072f8:	bf40      	sev
    __WFE();
 80072fa:	bf20      	wfe
    __WFE();
 80072fc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80072fe:	4b06      	ldr	r3, [pc, #24]	; (8007318 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	4a05      	ldr	r2, [pc, #20]	; (8007318 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8007304:	f023 0304 	bic.w	r3, r3, #4
 8007308:	6113      	str	r3, [r2, #16]
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	bc80      	pop	{r7}
 8007312:	4770      	bx	lr
 8007314:	58000400 	.word	0x58000400
 8007318:	e000ed00 	.word	0xe000ed00

0800731c <LL_PWR_IsEnabledBkUpAccess>:
{
 800731c:	b480      	push	{r7}
 800731e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8007320:	4b06      	ldr	r3, [pc, #24]	; (800733c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800732c:	d101      	bne.n	8007332 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800732e:	2301      	movs	r3, #1
 8007330:	e000      	b.n	8007334 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	46bd      	mov	sp, r7
 8007338:	bc80      	pop	{r7}
 800733a:	4770      	bx	lr
 800733c:	58000400 	.word	0x58000400

08007340 <LL_RCC_HSE_EnableTcxo>:
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8007344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800734e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007352:	6013      	str	r3, [r2, #0]
}
 8007354:	bf00      	nop
 8007356:	46bd      	mov	sp, r7
 8007358:	bc80      	pop	{r7}
 800735a:	4770      	bx	lr

0800735c <LL_RCC_HSE_DisableTcxo>:
{
 800735c:	b480      	push	{r7}
 800735e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8007360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800736a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800736e:	6013      	str	r3, [r2, #0]
}
 8007370:	bf00      	nop
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr

08007378 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800737c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800738a:	d101      	bne.n	8007390 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800738c:	2301      	movs	r3, #1
 800738e:	e000      	b.n	8007392 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	46bd      	mov	sp, r7
 8007396:	bc80      	pop	{r7}
 8007398:	4770      	bx	lr

0800739a <LL_RCC_HSE_Enable>:
{
 800739a:	b480      	push	{r7}
 800739c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800739e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073ac:	6013      	str	r3, [r2, #0]
}
 80073ae:	bf00      	nop
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr

080073b6 <LL_RCC_HSE_Disable>:
{
 80073b6:	b480      	push	{r7}
 80073b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80073ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073c8:	6013      	str	r3, [r2, #0]
}
 80073ca:	bf00      	nop
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bc80      	pop	{r7}
 80073d0:	4770      	bx	lr

080073d2 <LL_RCC_HSE_IsReady>:
{
 80073d2:	b480      	push	{r7}
 80073d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80073d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073e4:	d101      	bne.n	80073ea <LL_RCC_HSE_IsReady+0x18>
 80073e6:	2301      	movs	r3, #1
 80073e8:	e000      	b.n	80073ec <LL_RCC_HSE_IsReady+0x1a>
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bc80      	pop	{r7}
 80073f2:	4770      	bx	lr

080073f4 <LL_RCC_HSI_Enable>:
{
 80073f4:	b480      	push	{r7}
 80073f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80073f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007406:	6013      	str	r3, [r2, #0]
}
 8007408:	bf00      	nop
 800740a:	46bd      	mov	sp, r7
 800740c:	bc80      	pop	{r7}
 800740e:	4770      	bx	lr

08007410 <LL_RCC_HSI_Disable>:
{
 8007410:	b480      	push	{r7}
 8007412:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800741e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007422:	6013      	str	r3, [r2, #0]
}
 8007424:	bf00      	nop
 8007426:	46bd      	mov	sp, r7
 8007428:	bc80      	pop	{r7}
 800742a:	4770      	bx	lr

0800742c <LL_RCC_HSI_IsReady>:
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800743a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800743e:	d101      	bne.n	8007444 <LL_RCC_HSI_IsReady+0x18>
 8007440:	2301      	movs	r3, #1
 8007442:	e000      	b.n	8007446 <LL_RCC_HSI_IsReady+0x1a>
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	46bd      	mov	sp, r7
 800744a:	bc80      	pop	{r7}
 800744c:	4770      	bx	lr

0800744e <LL_RCC_HSI_SetCalibTrimming>:
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	061b      	lsls	r3, r3, #24
 8007464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007468:	4313      	orrs	r3, r2
 800746a:	604b      	str	r3, [r1, #4]
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	bc80      	pop	{r7}
 8007474:	4770      	bx	lr

08007476 <LL_RCC_LSE_IsReady>:
{
 8007476:	b480      	push	{r7}
 8007478:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800747a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800747e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b02      	cmp	r3, #2
 8007488:	d101      	bne.n	800748e <LL_RCC_LSE_IsReady+0x18>
 800748a:	2301      	movs	r3, #1
 800748c:	e000      	b.n	8007490 <LL_RCC_LSE_IsReady+0x1a>
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	46bd      	mov	sp, r7
 8007494:	bc80      	pop	{r7}
 8007496:	4770      	bx	lr

08007498 <LL_RCC_LSI_Enable>:
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800749c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074a8:	f043 0301 	orr.w	r3, r3, #1
 80074ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80074b0:	bf00      	nop
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bc80      	pop	{r7}
 80074b6:	4770      	bx	lr

080074b8 <LL_RCC_LSI_Disable>:
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80074bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074c8:	f023 0301 	bic.w	r3, r3, #1
 80074cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80074d0:	bf00      	nop
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bc80      	pop	{r7}
 80074d6:	4770      	bx	lr

080074d8 <LL_RCC_LSI_IsReady>:
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80074dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d101      	bne.n	80074f0 <LL_RCC_LSI_IsReady+0x18>
 80074ec:	2301      	movs	r3, #1
 80074ee:	e000      	b.n	80074f2 <LL_RCC_LSI_IsReady+0x1a>
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr

080074fa <LL_RCC_MSI_Enable>:
{
 80074fa:	b480      	push	{r7}
 80074fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80074fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007508:	f043 0301 	orr.w	r3, r3, #1
 800750c:	6013      	str	r3, [r2, #0]
}
 800750e:	bf00      	nop
 8007510:	46bd      	mov	sp, r7
 8007512:	bc80      	pop	{r7}
 8007514:	4770      	bx	lr

08007516 <LL_RCC_MSI_Disable>:
{
 8007516:	b480      	push	{r7}
 8007518:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800751a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007524:	f023 0301 	bic.w	r3, r3, #1
 8007528:	6013      	str	r3, [r2, #0]
}
 800752a:	bf00      	nop
 800752c:	46bd      	mov	sp, r7
 800752e:	bc80      	pop	{r7}
 8007530:	4770      	bx	lr

08007532 <LL_RCC_MSI_IsReady>:
{
 8007532:	b480      	push	{r7}
 8007534:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b02      	cmp	r3, #2
 8007542:	d101      	bne.n	8007548 <LL_RCC_MSI_IsReady+0x16>
 8007544:	2301      	movs	r3, #1
 8007546:	e000      	b.n	800754a <LL_RCC_MSI_IsReady+0x18>
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr

08007552 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8007552:	b480      	push	{r7}
 8007554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8007556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0308 	and.w	r3, r3, #8
 8007560:	2b08      	cmp	r3, #8
 8007562:	d101      	bne.n	8007568 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8007564:	2301      	movs	r3, #1
 8007566:	e000      	b.n	800756a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	46bd      	mov	sp, r7
 800756e:	bc80      	pop	{r7}
 8007570:	4770      	bx	lr

08007572 <LL_RCC_MSI_GetRange>:
{
 8007572:	b480      	push	{r7}
 8007574:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007580:	4618      	mov	r0, r3
 8007582:	46bd      	mov	sp, r7
 8007584:	bc80      	pop	{r7}
 8007586:	4770      	bx	lr

08007588 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8007588:	b480      	push	{r7}
 800758a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800758c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007594:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8007598:	4618      	mov	r0, r3
 800759a:	46bd      	mov	sp, r7
 800759c:	bc80      	pop	{r7}
 800759e:	4770      	bx	lr

080075a0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80075a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	021b      	lsls	r3, r3, #8
 80075b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075ba:	4313      	orrs	r3, r2
 80075bc:	604b      	str	r3, [r1, #4]
}
 80075be:	bf00      	nop
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bc80      	pop	{r7}
 80075c6:	4770      	bx	lr

080075c8 <LL_RCC_SetSysClkSource>:
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80075d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f023 0203 	bic.w	r2, r3, #3
 80075da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	608b      	str	r3, [r1, #8]
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc80      	pop	{r7}
 80075ec:	4770      	bx	lr

080075ee <LL_RCC_GetSysClkSource>:
{
 80075ee:	b480      	push	{r7}
 80075f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80075f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f003 030c 	and.w	r3, r3, #12
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	46bd      	mov	sp, r7
 8007600:	bc80      	pop	{r7}
 8007602:	4770      	bx	lr

08007604 <LL_RCC_SetAHBPrescaler>:
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800760c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007616:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4313      	orrs	r3, r2
 800761e:	608b      	str	r3, [r1, #8]
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	bc80      	pop	{r7}
 8007628:	4770      	bx	lr

0800762a <LL_RCC_SetAHB3Prescaler>:
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007636:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800763a:	f023 020f 	bic.w	r2, r3, #15
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	091b      	lsrs	r3, r3, #4
 8007642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007646:	4313      	orrs	r3, r2
 8007648:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	bc80      	pop	{r7}
 8007654:	4770      	bx	lr

08007656 <LL_RCC_SetAPB1Prescaler>:
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800765e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007668:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4313      	orrs	r3, r2
 8007670:	608b      	str	r3, [r1, #8]
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	bc80      	pop	{r7}
 800767a:	4770      	bx	lr

0800767c <LL_RCC_SetAPB2Prescaler>:
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800768e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4313      	orrs	r3, r2
 8007696:	608b      	str	r3, [r1, #8]
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	bc80      	pop	{r7}
 80076a0:	4770      	bx	lr

080076a2 <LL_RCC_GetAHBPrescaler>:
{
 80076a2:	b480      	push	{r7}
 80076a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80076a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bc80      	pop	{r7}
 80076b6:	4770      	bx	lr

080076b8 <LL_RCC_GetAHB3Prescaler>:
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80076bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80076c4:	011b      	lsls	r3, r3, #4
 80076c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bc80      	pop	{r7}
 80076d0:	4770      	bx	lr

080076d2 <LL_RCC_GetAPB1Prescaler>:
{
 80076d2:	b480      	push	{r7}
 80076d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80076d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bc80      	pop	{r7}
 80076e6:	4770      	bx	lr

080076e8 <LL_RCC_GetAPB2Prescaler>:
{
 80076e8:	b480      	push	{r7}
 80076ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80076ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bc80      	pop	{r7}
 80076fc:	4770      	bx	lr

080076fe <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80076fe:	b480      	push	{r7}
 8007700:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800770c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007710:	6013      	str	r3, [r2, #0]
}
 8007712:	bf00      	nop
 8007714:	46bd      	mov	sp, r7
 8007716:	bc80      	pop	{r7}
 8007718:	4770      	bx	lr

0800771a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800771a:	b480      	push	{r7}
 800771c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800771e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007728:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800772c:	6013      	str	r3, [r2, #0]
}
 800772e:	bf00      	nop
 8007730:	46bd      	mov	sp, r7
 8007732:	bc80      	pop	{r7}
 8007734:	4770      	bx	lr

08007736 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007736:	b480      	push	{r7}
 8007738:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800773a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007748:	d101      	bne.n	800774e <LL_RCC_PLL_IsReady+0x18>
 800774a:	2301      	movs	r3, #1
 800774c:	e000      	b.n	8007750 <LL_RCC_PLL_IsReady+0x1a>
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr

08007758 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800775c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	0a1b      	lsrs	r3, r3, #8
 8007764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007768:	4618      	mov	r0, r3
 800776a:	46bd      	mov	sp, r7
 800776c:	bc80      	pop	{r7}
 800776e:	4770      	bx	lr

08007770 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007770:	b480      	push	{r7}
 8007772:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800777e:	4618      	mov	r0, r3
 8007780:	46bd      	mov	sp, r7
 8007782:	bc80      	pop	{r7}
 8007784:	4770      	bx	lr

08007786 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007786:	b480      	push	{r7}
 8007788:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800778a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007794:	4618      	mov	r0, r3
 8007796:	46bd      	mov	sp, r7
 8007798:	bc80      	pop	{r7}
 800779a:	4770      	bx	lr

0800779c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800779c:	b480      	push	{r7}
 800779e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80077a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f003 0303 	and.w	r3, r3, #3
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bc80      	pop	{r7}
 80077b0:	4770      	bx	lr

080077b2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80077b2:	b480      	push	{r7}
 80077b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80077b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077c4:	d101      	bne.n	80077ca <LL_RCC_IsActiveFlag_HPRE+0x18>
 80077c6:	2301      	movs	r3, #1
 80077c8:	e000      	b.n	80077cc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bc80      	pop	{r7}
 80077d2:	4770      	bx	lr

080077d4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80077d4:	b480      	push	{r7}
 80077d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80077d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80077e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077e8:	d101      	bne.n	80077ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80077ea:	2301      	movs	r3, #1
 80077ec:	e000      	b.n	80077f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bc80      	pop	{r7}
 80077f6:	4770      	bx	lr

080077f8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80077f8:	b480      	push	{r7}
 80077fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80077fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800780a:	d101      	bne.n	8007810 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800780c:	2301      	movs	r3, #1
 800780e:	e000      	b.n	8007812 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	46bd      	mov	sp, r7
 8007816:	bc80      	pop	{r7}
 8007818:	4770      	bx	lr

0800781a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800781a:	b480      	push	{r7}
 800781c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800781e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007828:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800782c:	d101      	bne.n	8007832 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800782e:	2301      	movs	r3, #1
 8007830:	e000      	b.n	8007834 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	46bd      	mov	sp, r7
 8007838:	bc80      	pop	{r7}
 800783a:	4770      	bx	lr

0800783c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b088      	sub	sp, #32
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e38b      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800784e:	f7ff fece 	bl	80075ee <LL_RCC_GetSysClkSource>
 8007852:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007854:	f7ff ffa2 	bl	800779c <LL_RCC_PLL_GetMainSource>
 8007858:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 80c9 	beq.w	80079fa <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d005      	beq.n	800787a <HAL_RCC_OscConfig+0x3e>
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	2b0c      	cmp	r3, #12
 8007872:	d17b      	bne.n	800796c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d178      	bne.n	800796c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800787a:	f7ff fe5a 	bl	8007532 <LL_RCC_MSI_IsReady>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d005      	beq.n	8007890 <HAL_RCC_OscConfig+0x54>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e36a      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0308 	and.w	r3, r3, #8
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d005      	beq.n	80078ae <HAL_RCC_OscConfig+0x72>
 80078a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078ac:	e006      	b.n	80078bc <HAL_RCC_OscConfig+0x80>
 80078ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078b6:	091b      	lsrs	r3, r3, #4
 80078b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078bc:	4293      	cmp	r3, r2
 80078be:	d222      	bcs.n	8007906 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 fd51 	bl	800836c <RCC_SetFlashLatencyFromMSIRange>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e348      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80078d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078de:	f043 0308 	orr.w	r3, r3, #8
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078f6:	4313      	orrs	r3, r2
 80078f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	4618      	mov	r0, r3
 8007900:	f7ff fe4e 	bl	80075a0 <LL_RCC_MSI_SetCalibTrimming>
 8007904:	e021      	b.n	800794a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007910:	f043 0308 	orr.w	r3, r3, #8
 8007914:	6013      	str	r3, [r2, #0]
 8007916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007928:	4313      	orrs	r3, r2
 800792a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007930:	4618      	mov	r0, r3
 8007932:	f7ff fe35 	bl	80075a0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fd16 	bl	800836c <RCC_SetFlashLatencyFromMSIRange>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e30d      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800794a:	f000 fcd7 	bl	80082fc <HAL_RCC_GetHCLKFreq>
 800794e:	4603      	mov	r3, r0
 8007950:	4aa1      	ldr	r2, [pc, #644]	; (8007bd8 <HAL_RCC_OscConfig+0x39c>)
 8007952:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007954:	4ba1      	ldr	r3, [pc, #644]	; (8007bdc <HAL_RCC_OscConfig+0x3a0>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4618      	mov	r0, r3
 800795a:	f7fb fb45 	bl	8002fe8 <HAL_InitTick>
 800795e:	4603      	mov	r3, r0
 8007960:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8007962:	7cfb      	ldrb	r3, [r7, #19]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d047      	beq.n	80079f8 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8007968:	7cfb      	ldrb	r3, [r7, #19]
 800796a:	e2fc      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d02c      	beq.n	80079ce <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007974:	f7ff fdc1 	bl	80074fa <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007978:	f7fb fb40 	bl	8002ffc <HAL_GetTick>
 800797c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800797e:	e008      	b.n	8007992 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007980:	f7fb fb3c 	bl	8002ffc <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b02      	cmp	r3, #2
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e2e9      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007992:	f7ff fdce 	bl	8007532 <LL_RCC_MSI_IsReady>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d0f1      	beq.n	8007980 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800799c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079a6:	f043 0308 	orr.w	r3, r3, #8
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079be:	4313      	orrs	r3, r2
 80079c0:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff fdea 	bl	80075a0 <LL_RCC_MSI_SetCalibTrimming>
 80079cc:	e015      	b.n	80079fa <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80079ce:	f7ff fda2 	bl	8007516 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80079d2:	f7fb fb13 	bl	8002ffc <HAL_GetTick>
 80079d6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80079d8:	e008      	b.n	80079ec <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80079da:	f7fb fb0f 	bl	8002ffc <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d901      	bls.n	80079ec <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e2bc      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80079ec:	f7ff fda1 	bl	8007532 <LL_RCC_MSI_IsReady>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1f1      	bne.n	80079da <HAL_RCC_OscConfig+0x19e>
 80079f6:	e000      	b.n	80079fa <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80079f8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d05f      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	2b08      	cmp	r3, #8
 8007a0a:	d005      	beq.n	8007a18 <HAL_RCC_OscConfig+0x1dc>
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	2b0c      	cmp	r3, #12
 8007a10:	d10d      	bne.n	8007a2e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d10a      	bne.n	8007a2e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a18:	f7ff fcdb 	bl	80073d2 <LL_RCC_HSE_IsReady>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d050      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x288>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d14c      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e29b      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8007a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a40:	4313      	orrs	r3, r2
 8007a42:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a4c:	d102      	bne.n	8007a54 <HAL_RCC_OscConfig+0x218>
 8007a4e:	f7ff fca4 	bl	800739a <LL_RCC_HSE_Enable>
 8007a52:	e00d      	b.n	8007a70 <HAL_RCC_OscConfig+0x234>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8007a5c:	d104      	bne.n	8007a68 <HAL_RCC_OscConfig+0x22c>
 8007a5e:	f7ff fc6f 	bl	8007340 <LL_RCC_HSE_EnableTcxo>
 8007a62:	f7ff fc9a 	bl	800739a <LL_RCC_HSE_Enable>
 8007a66:	e003      	b.n	8007a70 <HAL_RCC_OscConfig+0x234>
 8007a68:	f7ff fca5 	bl	80073b6 <LL_RCC_HSE_Disable>
 8007a6c:	f7ff fc76 	bl	800735c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d012      	beq.n	8007a9e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a78:	f7fb fac0 	bl	8002ffc <HAL_GetTick>
 8007a7c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007a7e:	e008      	b.n	8007a92 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a80:	f7fb fabc 	bl	8002ffc <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	2b64      	cmp	r3, #100	; 0x64
 8007a8c:	d901      	bls.n	8007a92 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e269      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007a92:	f7ff fc9e 	bl	80073d2 <LL_RCC_HSE_IsReady>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0f1      	beq.n	8007a80 <HAL_RCC_OscConfig+0x244>
 8007a9c:	e013      	b.n	8007ac6 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a9e:	f7fb faad 	bl	8002ffc <HAL_GetTick>
 8007aa2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007aa4:	e008      	b.n	8007ab8 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007aa6:	f7fb faa9 	bl	8002ffc <HAL_GetTick>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	2b64      	cmp	r3, #100	; 0x64
 8007ab2:	d901      	bls.n	8007ab8 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e256      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007ab8:	f7ff fc8b 	bl	80073d2 <LL_RCC_HSE_IsReady>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1f1      	bne.n	8007aa6 <HAL_RCC_OscConfig+0x26a>
 8007ac2:	e000      	b.n	8007ac6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ac4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 0302 	and.w	r3, r3, #2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d04b      	beq.n	8007b6a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	d005      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x2a8>
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	2b0c      	cmp	r3, #12
 8007adc:	d113      	bne.n	8007b06 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d110      	bne.n	8007b06 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ae4:	f7ff fca2 	bl	800742c <LL_RCC_HSI_IsReady>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d005      	beq.n	8007afa <HAL_RCC_OscConfig+0x2be>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e235      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff fca5 	bl	800744e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b04:	e031      	b.n	8007b6a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d019      	beq.n	8007b42 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b0e:	f7ff fc71 	bl	80073f4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b12:	f7fb fa73 	bl	8002ffc <HAL_GetTick>
 8007b16:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007b18:	e008      	b.n	8007b2c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b1a:	f7fb fa6f 	bl	8002ffc <HAL_GetTick>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d901      	bls.n	8007b2c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e21c      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007b2c:	f7ff fc7e 	bl	800742c <LL_RCC_HSI_IsReady>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d0f1      	beq.n	8007b1a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7ff fc87 	bl	800744e <LL_RCC_HSI_SetCalibTrimming>
 8007b40:	e013      	b.n	8007b6a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b42:	f7ff fc65 	bl	8007410 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b46:	f7fb fa59 	bl	8002ffc <HAL_GetTick>
 8007b4a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007b4c:	e008      	b.n	8007b60 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b4e:	f7fb fa55 	bl	8002ffc <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d901      	bls.n	8007b60 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e202      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007b60:	f7ff fc64 	bl	800742c <LL_RCC_HSI_IsReady>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1f1      	bne.n	8007b4e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0308 	and.w	r3, r3, #8
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d06f      	beq.n	8007c56 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d057      	beq.n	8007c2e <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8007b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b86:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	69da      	ldr	r2, [r3, #28]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f003 0310 	and.w	r3, r3, #16
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d036      	beq.n	8007c04 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d006      	beq.n	8007bae <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e1db      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f003 0301 	and.w	r3, r3, #1
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d018      	beq.n	8007bea <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8007bb8:	f7ff fc7e 	bl	80074b8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007bbc:	f7fb fa1e 	bl	8002ffc <HAL_GetTick>
 8007bc0:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8007bc2:	e00d      	b.n	8007be0 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bc4:	f7fb fa1a 	bl	8002ffc <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	2b11      	cmp	r3, #17
 8007bd0:	d906      	bls.n	8007be0 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e1c7      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
 8007bd6:	bf00      	nop
 8007bd8:	2000000c 	.word	0x2000000c
 8007bdc:	20000014 	.word	0x20000014
          while (LL_RCC_LSI_IsReady() != 0U)
 8007be0:	f7ff fc7a 	bl	80074d8 <LL_RCC_LSI_IsReady>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1ec      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8007bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bf2:	f023 0210 	bic.w	r2, r3, #16
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c04:	f7ff fc48 	bl	8007498 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c08:	f7fb f9f8 	bl	8002ffc <HAL_GetTick>
 8007c0c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8007c0e:	e008      	b.n	8007c22 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c10:	f7fb f9f4 	bl	8002ffc <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	2b11      	cmp	r3, #17
 8007c1c:	d901      	bls.n	8007c22 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e1a1      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8007c22:	f7ff fc59 	bl	80074d8 <LL_RCC_LSI_IsReady>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d0f1      	beq.n	8007c10 <HAL_RCC_OscConfig+0x3d4>
 8007c2c:	e013      	b.n	8007c56 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c2e:	f7ff fc43 	bl	80074b8 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c32:	f7fb f9e3 	bl	8002ffc <HAL_GetTick>
 8007c36:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007c38:	e008      	b.n	8007c4c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c3a:	f7fb f9df 	bl	8002ffc <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	2b11      	cmp	r3, #17
 8007c46:	d901      	bls.n	8007c4c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e18c      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8007c4c:	f7ff fc44 	bl	80074d8 <LL_RCC_LSI_IsReady>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1f1      	bne.n	8007c3a <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0304 	and.w	r3, r3, #4
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 80d8 	beq.w	8007e14 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007c64:	f7ff fb5a 	bl	800731c <LL_PWR_IsEnabledBkUpAccess>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d113      	bne.n	8007c96 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007c6e:	f7ff fa99 	bl	80071a4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c72:	f7fb f9c3 	bl	8002ffc <HAL_GetTick>
 8007c76:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007c78:	e008      	b.n	8007c8c <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c7a:	f7fb f9bf 	bl	8002ffc <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d901      	bls.n	8007c8c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e16c      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007c8c:	f7ff fb46 	bl	800731c <LL_PWR_IsEnabledBkUpAccess>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d0f1      	beq.n	8007c7a <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d07b      	beq.n	8007d96 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	2b85      	cmp	r3, #133	; 0x85
 8007ca4:	d003      	beq.n	8007cae <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	2b05      	cmp	r3, #5
 8007cac:	d109      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cba:	f043 0304 	orr.w	r3, r3, #4
 8007cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cc2:	f7fb f99b 	bl	8002ffc <HAL_GetTick>
 8007cc6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cd4:	f043 0301 	orr.w	r3, r3, #1
 8007cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007cdc:	e00a      	b.n	8007cf4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cde:	f7fb f98d 	bl	8002ffc <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d901      	bls.n	8007cf4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e138      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007cf4:	f7ff fbbf 	bl	8007476 <LL_RCC_LSE_IsReady>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d0ef      	beq.n	8007cde <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	2b81      	cmp	r3, #129	; 0x81
 8007d04:	d003      	beq.n	8007d0e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	2b85      	cmp	r3, #133	; 0x85
 8007d0c:	d121      	bne.n	8007d52 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d0e:	f7fb f975 	bl	8002ffc <HAL_GetTick>
 8007d12:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007d28:	e00a      	b.n	8007d40 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d2a:	f7fb f967 	bl	8002ffc <HAL_GetTick>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d901      	bls.n	8007d40 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e112      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d0ec      	beq.n	8007d2a <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007d50:	e060      	b.n	8007e14 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d52:	f7fb f953 	bl	8002ffc <HAL_GetTick>
 8007d56:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007d6c:	e00a      	b.n	8007d84 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d6e:	f7fb f945 	bl	8002ffc <HAL_GetTick>
 8007d72:	4602      	mov	r2, r0
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d901      	bls.n	8007d84 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e0f0      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1ec      	bne.n	8007d6e <HAL_RCC_OscConfig+0x532>
 8007d94:	e03e      	b.n	8007e14 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d96:	f7fb f931 	bl	8002ffc <HAL_GetTick>
 8007d9a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007da8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007db0:	e00a      	b.n	8007dc8 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007db2:	f7fb f923 	bl	8002ffc <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d901      	bls.n	8007dc8 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e0ce      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1ec      	bne.n	8007db2 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dd8:	f7fb f910 	bl	8002ffc <HAL_GetTick>
 8007ddc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dea:	f023 0301 	bic.w	r3, r3, #1
 8007dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007df2:	e00a      	b.n	8007e0a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007df4:	f7fb f902 	bl	8002ffc <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d901      	bls.n	8007e0a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e0ad      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007e0a:	f7ff fb34 	bl	8007476 <LL_RCC_LSE_IsReady>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1ef      	bne.n	8007df4 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 80a3 	beq.w	8007f64 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	2b0c      	cmp	r3, #12
 8007e22:	d076      	beq.n	8007f12 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d14b      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e2c:	f7ff fc75 	bl	800771a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e30:	f7fb f8e4 	bl	8002ffc <HAL_GetTick>
 8007e34:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007e36:	e008      	b.n	8007e4a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e38:	f7fb f8e0 	bl	8002ffc <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	2b0a      	cmp	r3, #10
 8007e44:	d901      	bls.n	8007e4a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e08d      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007e4a:	f7ff fc74 	bl	8007736 <LL_RCC_PLL_IsReady>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1f1      	bne.n	8007e38 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e58:	68da      	ldr	r2, [r3, #12]
 8007e5a:	4b45      	ldr	r3, [pc, #276]	; (8007f70 <HAL_RCC_OscConfig+0x734>)
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e66:	4311      	orrs	r1, r2
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e6c:	0212      	lsls	r2, r2, #8
 8007e6e:	4311      	orrs	r1, r2
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007e74:	4311      	orrs	r1, r2
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007e7a:	4311      	orrs	r1, r2
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007e80:	430a      	orrs	r2, r1
 8007e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e8a:	f7ff fc38 	bl	80076fe <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e9c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e9e:	f7fb f8ad 	bl	8002ffc <HAL_GetTick>
 8007ea2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8007ea4:	e008      	b.n	8007eb8 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ea6:	f7fb f8a9 	bl	8002ffc <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	2b0a      	cmp	r3, #10
 8007eb2:	d901      	bls.n	8007eb8 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e056      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8007eb8:	f7ff fc3d 	bl	8007736 <LL_RCC_PLL_IsReady>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0f1      	beq.n	8007ea6 <HAL_RCC_OscConfig+0x66a>
 8007ec2:	e04f      	b.n	8007f64 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ec4:	f7ff fc29 	bl	800771a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8007ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ed2:	f023 0303 	bic.w	r3, r3, #3
 8007ed6:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8007ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ee2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8007ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eea:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eec:	f7fb f886 	bl	8002ffc <HAL_GetTick>
 8007ef0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007ef2:	e008      	b.n	8007f06 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ef4:	f7fb f882 	bl	8002ffc <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	2b0a      	cmp	r3, #10
 8007f00:	d901      	bls.n	8007f06 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e02f      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007f06:	f7ff fc16 	bl	8007736 <LL_RCC_PLL_IsReady>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1f1      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x6b8>
 8007f10:	e028      	b.n	8007f64 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d101      	bne.n	8007f1e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e023      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	f003 0203 	and.w	r2, r3, #3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d115      	bne.n	8007f60 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d10e      	bne.n	8007f60 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4c:	021b      	lsls	r3, r3, #8
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d106      	bne.n	8007f60 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d001      	beq.n	8007f64 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e000      	b.n	8007f66 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3720      	adds	r7, #32
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	11c1808c 	.word	0x11c1808c

08007f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e10f      	b.n	80081a8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f88:	4b89      	ldr	r3, [pc, #548]	; (80081b0 <HAL_RCC_ClockConfig+0x23c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0307 	and.w	r3, r3, #7
 8007f90:	683a      	ldr	r2, [r7, #0]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d91b      	bls.n	8007fce <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f96:	4b86      	ldr	r3, [pc, #536]	; (80081b0 <HAL_RCC_ClockConfig+0x23c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f023 0207 	bic.w	r2, r3, #7
 8007f9e:	4984      	ldr	r1, [pc, #528]	; (80081b0 <HAL_RCC_ClockConfig+0x23c>)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fa6:	f7fb f829 	bl	8002ffc <HAL_GetTick>
 8007faa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fac:	e008      	b.n	8007fc0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007fae:	f7fb f825 	bl	8002ffc <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d901      	bls.n	8007fc0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e0f3      	b.n	80081a8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fc0:	4b7b      	ldr	r3, [pc, #492]	; (80081b0 <HAL_RCC_ClockConfig+0x23c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0307 	and.w	r3, r3, #7
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d1ef      	bne.n	8007fae <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d016      	beq.n	8008008 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff fb10 	bl	8007604 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007fe4:	f7fb f80a 	bl	8002ffc <HAL_GetTick>
 8007fe8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007fea:	e008      	b.n	8007ffe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007fec:	f7fb f806 	bl	8002ffc <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d901      	bls.n	8007ffe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e0d4      	b.n	80081a8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007ffe:	f7ff fbd8 	bl	80077b2 <LL_RCC_IsActiveFlag_HPRE>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d0f1      	beq.n	8007fec <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	d016      	beq.n	8008042 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	695b      	ldr	r3, [r3, #20]
 8008018:	4618      	mov	r0, r3
 800801a:	f7ff fb06 	bl	800762a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800801e:	f7fa ffed 	bl	8002ffc <HAL_GetTick>
 8008022:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008024:	e008      	b.n	8008038 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008026:	f7fa ffe9 	bl	8002ffc <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	2b02      	cmp	r3, #2
 8008032:	d901      	bls.n	8008038 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e0b7      	b.n	80081a8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008038:	f7ff fbcc 	bl	80077d4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d0f1      	beq.n	8008026 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0304 	and.w	r3, r3, #4
 800804a:	2b00      	cmp	r3, #0
 800804c:	d016      	beq.n	800807c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	4618      	mov	r0, r3
 8008054:	f7ff faff 	bl	8007656 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008058:	f7fa ffd0 	bl	8002ffc <HAL_GetTick>
 800805c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800805e:	e008      	b.n	8008072 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008060:	f7fa ffcc 	bl	8002ffc <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b02      	cmp	r3, #2
 800806c:	d901      	bls.n	8008072 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e09a      	b.n	80081a8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008072:	f7ff fbc1 	bl	80077f8 <LL_RCC_IsActiveFlag_PPRE1>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d0f1      	beq.n	8008060 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0308 	and.w	r3, r3, #8
 8008084:	2b00      	cmp	r3, #0
 8008086:	d017      	beq.n	80080b8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	00db      	lsls	r3, r3, #3
 800808e:	4618      	mov	r0, r3
 8008090:	f7ff faf4 	bl	800767c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008094:	f7fa ffb2 	bl	8002ffc <HAL_GetTick>
 8008098:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800809a:	e008      	b.n	80080ae <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800809c:	f7fa ffae 	bl	8002ffc <HAL_GetTick>
 80080a0:	4602      	mov	r2, r0
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d901      	bls.n	80080ae <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e07c      	b.n	80081a8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80080ae:	f7ff fbb4 	bl	800781a <LL_RCC_IsActiveFlag_PPRE2>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d0f1      	beq.n	800809c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d043      	beq.n	800814c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d106      	bne.n	80080da <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80080cc:	f7ff f981 	bl	80073d2 <LL_RCC_HSE_IsReady>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d11e      	bne.n	8008114 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e066      	b.n	80081a8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d106      	bne.n	80080f0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80080e2:	f7ff fb28 	bl	8007736 <LL_RCC_PLL_IsReady>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d113      	bne.n	8008114 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e05b      	b.n	80081a8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d106      	bne.n	8008106 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80080f8:	f7ff fa1b 	bl	8007532 <LL_RCC_MSI_IsReady>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d108      	bne.n	8008114 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e050      	b.n	80081a8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008106:	f7ff f991 	bl	800742c <LL_RCC_HSI_IsReady>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e049      	b.n	80081a8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	4618      	mov	r0, r3
 800811a:	f7ff fa55 	bl	80075c8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800811e:	f7fa ff6d 	bl	8002ffc <HAL_GetTick>
 8008122:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008124:	e00a      	b.n	800813c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008126:	f7fa ff69 	bl	8002ffc <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	f241 3288 	movw	r2, #5000	; 0x1388
 8008134:	4293      	cmp	r3, r2
 8008136:	d901      	bls.n	800813c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e035      	b.n	80081a8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800813c:	f7ff fa57 	bl	80075ee <LL_RCC_GetSysClkSource>
 8008140:	4602      	mov	r2, r0
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	429a      	cmp	r2, r3
 800814a:	d1ec      	bne.n	8008126 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800814c:	4b18      	ldr	r3, [pc, #96]	; (80081b0 <HAL_RCC_ClockConfig+0x23c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0307 	and.w	r3, r3, #7
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	429a      	cmp	r2, r3
 8008158:	d21b      	bcs.n	8008192 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800815a:	4b15      	ldr	r3, [pc, #84]	; (80081b0 <HAL_RCC_ClockConfig+0x23c>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f023 0207 	bic.w	r2, r3, #7
 8008162:	4913      	ldr	r1, [pc, #76]	; (80081b0 <HAL_RCC_ClockConfig+0x23c>)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	4313      	orrs	r3, r2
 8008168:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800816a:	f7fa ff47 	bl	8002ffc <HAL_GetTick>
 800816e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008170:	e008      	b.n	8008184 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008172:	f7fa ff43 	bl	8002ffc <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d901      	bls.n	8008184 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e011      	b.n	80081a8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008184:	4b0a      	ldr	r3, [pc, #40]	; (80081b0 <HAL_RCC_ClockConfig+0x23c>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0307 	and.w	r3, r3, #7
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	429a      	cmp	r2, r3
 8008190:	d1ef      	bne.n	8008172 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008192:	f000 f8b3 	bl	80082fc <HAL_RCC_GetHCLKFreq>
 8008196:	4603      	mov	r3, r0
 8008198:	4a06      	ldr	r2, [pc, #24]	; (80081b4 <HAL_RCC_ClockConfig+0x240>)
 800819a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800819c:	4b06      	ldr	r3, [pc, #24]	; (80081b8 <HAL_RCC_ClockConfig+0x244>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fa ff21 	bl	8002fe8 <HAL_InitTick>
 80081a6:	4603      	mov	r3, r0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	58004000 	.word	0x58004000
 80081b4:	2000000c 	.word	0x2000000c
 80081b8:	20000014 	.word	0x20000014

080081bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081bc:	b590      	push	{r4, r7, lr}
 80081be:	b087      	sub	sp, #28
 80081c0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081ca:	f7ff fa10 	bl	80075ee <LL_RCC_GetSysClkSource>
 80081ce:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80081d0:	f7ff fae4 	bl	800779c <LL_RCC_PLL_GetMainSource>
 80081d4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d005      	beq.n	80081e8 <HAL_RCC_GetSysClockFreq+0x2c>
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	2b0c      	cmp	r3, #12
 80081e0:	d139      	bne.n	8008256 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d136      	bne.n	8008256 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80081e8:	f7ff f9b3 	bl	8007552 <LL_RCC_MSI_IsEnabledRangeSelect>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d115      	bne.n	800821e <HAL_RCC_GetSysClockFreq+0x62>
 80081f2:	f7ff f9ae 	bl	8007552 <LL_RCC_MSI_IsEnabledRangeSelect>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d106      	bne.n	800820a <HAL_RCC_GetSysClockFreq+0x4e>
 80081fc:	f7ff f9b9 	bl	8007572 <LL_RCC_MSI_GetRange>
 8008200:	4603      	mov	r3, r0
 8008202:	0a1b      	lsrs	r3, r3, #8
 8008204:	f003 030f 	and.w	r3, r3, #15
 8008208:	e005      	b.n	8008216 <HAL_RCC_GetSysClockFreq+0x5a>
 800820a:	f7ff f9bd 	bl	8007588 <LL_RCC_MSI_GetRangeAfterStandby>
 800820e:	4603      	mov	r3, r0
 8008210:	0a1b      	lsrs	r3, r3, #8
 8008212:	f003 030f 	and.w	r3, r3, #15
 8008216:	4a36      	ldr	r2, [pc, #216]	; (80082f0 <HAL_RCC_GetSysClockFreq+0x134>)
 8008218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800821c:	e014      	b.n	8008248 <HAL_RCC_GetSysClockFreq+0x8c>
 800821e:	f7ff f998 	bl	8007552 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008222:	4603      	mov	r3, r0
 8008224:	2b01      	cmp	r3, #1
 8008226:	d106      	bne.n	8008236 <HAL_RCC_GetSysClockFreq+0x7a>
 8008228:	f7ff f9a3 	bl	8007572 <LL_RCC_MSI_GetRange>
 800822c:	4603      	mov	r3, r0
 800822e:	091b      	lsrs	r3, r3, #4
 8008230:	f003 030f 	and.w	r3, r3, #15
 8008234:	e005      	b.n	8008242 <HAL_RCC_GetSysClockFreq+0x86>
 8008236:	f7ff f9a7 	bl	8007588 <LL_RCC_MSI_GetRangeAfterStandby>
 800823a:	4603      	mov	r3, r0
 800823c:	091b      	lsrs	r3, r3, #4
 800823e:	f003 030f 	and.w	r3, r3, #15
 8008242:	4a2b      	ldr	r2, [pc, #172]	; (80082f0 <HAL_RCC_GetSysClockFreq+0x134>)
 8008244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008248:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d115      	bne.n	800827c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008254:	e012      	b.n	800827c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2b04      	cmp	r3, #4
 800825a:	d102      	bne.n	8008262 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800825c:	4b25      	ldr	r3, [pc, #148]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800825e:	617b      	str	r3, [r7, #20]
 8008260:	e00c      	b.n	800827c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	2b08      	cmp	r3, #8
 8008266:	d109      	bne.n	800827c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008268:	f7ff f886 	bl	8007378 <LL_RCC_HSE_IsEnabledDiv2>
 800826c:	4603      	mov	r3, r0
 800826e:	2b01      	cmp	r3, #1
 8008270:	d102      	bne.n	8008278 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008272:	4b20      	ldr	r3, [pc, #128]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x138>)
 8008274:	617b      	str	r3, [r7, #20]
 8008276:	e001      	b.n	800827c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008278:	4b1f      	ldr	r3, [pc, #124]	; (80082f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800827a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800827c:	f7ff f9b7 	bl	80075ee <LL_RCC_GetSysClkSource>
 8008280:	4603      	mov	r3, r0
 8008282:	2b0c      	cmp	r3, #12
 8008284:	d12f      	bne.n	80082e6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008286:	f7ff fa89 	bl	800779c <LL_RCC_PLL_GetMainSource>
 800828a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b02      	cmp	r3, #2
 8008290:	d003      	beq.n	800829a <HAL_RCC_GetSysClockFreq+0xde>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b03      	cmp	r3, #3
 8008296:	d003      	beq.n	80082a0 <HAL_RCC_GetSysClockFreq+0xe4>
 8008298:	e00d      	b.n	80082b6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800829a:	4b16      	ldr	r3, [pc, #88]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800829c:	60fb      	str	r3, [r7, #12]
        break;
 800829e:	e00d      	b.n	80082bc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80082a0:	f7ff f86a 	bl	8007378 <LL_RCC_HSE_IsEnabledDiv2>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d102      	bne.n	80082b0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80082aa:	4b12      	ldr	r3, [pc, #72]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x138>)
 80082ac:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80082ae:	e005      	b.n	80082bc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80082b0:	4b11      	ldr	r3, [pc, #68]	; (80082f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80082b2:	60fb      	str	r3, [r7, #12]
        break;
 80082b4:	e002      	b.n	80082bc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	60fb      	str	r3, [r7, #12]
        break;
 80082ba:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80082bc:	f7ff fa4c 	bl	8007758 <LL_RCC_PLL_GetN>
 80082c0:	4602      	mov	r2, r0
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	fb03 f402 	mul.w	r4, r3, r2
 80082c8:	f7ff fa5d 	bl	8007786 <LL_RCC_PLL_GetDivider>
 80082cc:	4603      	mov	r3, r0
 80082ce:	091b      	lsrs	r3, r3, #4
 80082d0:	3301      	adds	r3, #1
 80082d2:	fbb4 f4f3 	udiv	r4, r4, r3
 80082d6:	f7ff fa4b 	bl	8007770 <LL_RCC_PLL_GetR>
 80082da:	4603      	mov	r3, r0
 80082dc:	0f5b      	lsrs	r3, r3, #29
 80082de:	3301      	adds	r3, #1
 80082e0:	fbb4 f3f3 	udiv	r3, r4, r3
 80082e4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80082e6:	697b      	ldr	r3, [r7, #20]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	371c      	adds	r7, #28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd90      	pop	{r4, r7, pc}
 80082f0:	08021900 	.word	0x08021900
 80082f4:	00f42400 	.word	0x00f42400
 80082f8:	01e84800 	.word	0x01e84800

080082fc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082fc:	b598      	push	{r3, r4, r7, lr}
 80082fe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008300:	f7ff ff5c 	bl	80081bc <HAL_RCC_GetSysClockFreq>
 8008304:	4604      	mov	r4, r0
 8008306:	f7ff f9cc 	bl	80076a2 <LL_RCC_GetAHBPrescaler>
 800830a:	4603      	mov	r3, r0
 800830c:	091b      	lsrs	r3, r3, #4
 800830e:	f003 030f 	and.w	r3, r3, #15
 8008312:	4a03      	ldr	r2, [pc, #12]	; (8008320 <HAL_RCC_GetHCLKFreq+0x24>)
 8008314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008318:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800831c:	4618      	mov	r0, r3
 800831e:	bd98      	pop	{r3, r4, r7, pc}
 8008320:	080218a0 	.word	0x080218a0

08008324 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008324:	b598      	push	{r3, r4, r7, lr}
 8008326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008328:	f7ff ffe8 	bl	80082fc <HAL_RCC_GetHCLKFreq>
 800832c:	4604      	mov	r4, r0
 800832e:	f7ff f9d0 	bl	80076d2 <LL_RCC_GetAPB1Prescaler>
 8008332:	4603      	mov	r3, r0
 8008334:	0a1b      	lsrs	r3, r3, #8
 8008336:	4a03      	ldr	r2, [pc, #12]	; (8008344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800833c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008340:	4618      	mov	r0, r3
 8008342:	bd98      	pop	{r3, r4, r7, pc}
 8008344:	080218e0 	.word	0x080218e0

08008348 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008348:	b598      	push	{r3, r4, r7, lr}
 800834a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800834c:	f7ff ffd6 	bl	80082fc <HAL_RCC_GetHCLKFreq>
 8008350:	4604      	mov	r4, r0
 8008352:	f7ff f9c9 	bl	80076e8 <LL_RCC_GetAPB2Prescaler>
 8008356:	4603      	mov	r3, r0
 8008358:	0adb      	lsrs	r3, r3, #11
 800835a:	4a03      	ldr	r2, [pc, #12]	; (8008368 <HAL_RCC_GetPCLK2Freq+0x20>)
 800835c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008360:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008364:	4618      	mov	r0, r3
 8008366:	bd98      	pop	{r3, r4, r7, pc}
 8008368:	080218e0 	.word	0x080218e0

0800836c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800836c:	b590      	push	{r4, r7, lr}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	091b      	lsrs	r3, r3, #4
 8008378:	f003 030f 	and.w	r3, r3, #15
 800837c:	4a10      	ldr	r2, [pc, #64]	; (80083c0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800837e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008382:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8008384:	f7ff f998 	bl	80076b8 <LL_RCC_GetAHB3Prescaler>
 8008388:	4603      	mov	r3, r0
 800838a:	091b      	lsrs	r3, r3, #4
 800838c:	f003 030f 	and.w	r3, r3, #15
 8008390:	4a0c      	ldr	r2, [pc, #48]	; (80083c4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8008392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	fbb2 f3f3 	udiv	r3, r2, r3
 800839c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	4a09      	ldr	r2, [pc, #36]	; (80083c8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80083a2:	fba2 2303 	umull	r2, r3, r2, r3
 80083a6:	0c9c      	lsrs	r4, r3, #18
 80083a8:	f7fe ff3e 	bl	8007228 <HAL_PWREx_GetVoltageRange>
 80083ac:	4603      	mov	r3, r0
 80083ae:	4619      	mov	r1, r3
 80083b0:	4620      	mov	r0, r4
 80083b2:	f000 f80b 	bl	80083cc <RCC_SetFlashLatency>
 80083b6:	4603      	mov	r3, r0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd90      	pop	{r4, r7, pc}
 80083c0:	08021900 	.word	0x08021900
 80083c4:	080218a0 	.word	0x080218a0
 80083c8:	431bde83 	.word	0x431bde83

080083cc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b08e      	sub	sp, #56	; 0x38
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80083d6:	4a3a      	ldr	r2, [pc, #232]	; (80084c0 <RCC_SetFlashLatency+0xf4>)
 80083d8:	f107 0320 	add.w	r3, r7, #32
 80083dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083e0:	6018      	str	r0, [r3, #0]
 80083e2:	3304      	adds	r3, #4
 80083e4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80083e6:	4a37      	ldr	r2, [pc, #220]	; (80084c4 <RCC_SetFlashLatency+0xf8>)
 80083e8:	f107 0318 	add.w	r3, r7, #24
 80083ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083f0:	6018      	str	r0, [r3, #0]
 80083f2:	3304      	adds	r3, #4
 80083f4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80083f6:	4a34      	ldr	r2, [pc, #208]	; (80084c8 <RCC_SetFlashLatency+0xfc>)
 80083f8:	f107 030c 	add.w	r3, r7, #12
 80083fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80083fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008402:	2300      	movs	r3, #0
 8008404:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800840c:	d11b      	bne.n	8008446 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800840e:	2300      	movs	r3, #0
 8008410:	633b      	str	r3, [r7, #48]	; 0x30
 8008412:	e014      	b.n	800843e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	005b      	lsls	r3, r3, #1
 8008418:	3338      	adds	r3, #56	; 0x38
 800841a:	443b      	add	r3, r7
 800841c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8008420:	461a      	mov	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4293      	cmp	r3, r2
 8008426:	d807      	bhi.n	8008438 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	3338      	adds	r3, #56	; 0x38
 800842e:	443b      	add	r3, r7
 8008430:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008434:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008436:	e021      	b.n	800847c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843a:	3301      	adds	r3, #1
 800843c:	633b      	str	r3, [r7, #48]	; 0x30
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	2b02      	cmp	r3, #2
 8008442:	d9e7      	bls.n	8008414 <RCC_SetFlashLatency+0x48>
 8008444:	e01a      	b.n	800847c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008446:	2300      	movs	r3, #0
 8008448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800844a:	e014      	b.n	8008476 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800844c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844e:	005b      	lsls	r3, r3, #1
 8008450:	3338      	adds	r3, #56	; 0x38
 8008452:	443b      	add	r3, r7
 8008454:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8008458:	461a      	mov	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4293      	cmp	r3, r2
 800845e:	d807      	bhi.n	8008470 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	3338      	adds	r3, #56	; 0x38
 8008466:	443b      	add	r3, r7
 8008468:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800846c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800846e:	e005      	b.n	800847c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008472:	3301      	adds	r3, #1
 8008474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008478:	2b02      	cmp	r3, #2
 800847a:	d9e7      	bls.n	800844c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800847c:	4b13      	ldr	r3, [pc, #76]	; (80084cc <RCC_SetFlashLatency+0x100>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f023 0207 	bic.w	r2, r3, #7
 8008484:	4911      	ldr	r1, [pc, #68]	; (80084cc <RCC_SetFlashLatency+0x100>)
 8008486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008488:	4313      	orrs	r3, r2
 800848a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800848c:	f7fa fdb6 	bl	8002ffc <HAL_GetTick>
 8008490:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008492:	e008      	b.n	80084a6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008494:	f7fa fdb2 	bl	8002ffc <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d901      	bls.n	80084a6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e007      	b.n	80084b6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80084a6:	4b09      	ldr	r3, [pc, #36]	; (80084cc <RCC_SetFlashLatency+0x100>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0307 	and.w	r3, r3, #7
 80084ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d1ef      	bne.n	8008494 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3738      	adds	r7, #56	; 0x38
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	08020f8c 	.word	0x08020f8c
 80084c4:	08020f94 	.word	0x08020f94
 80084c8:	08020f9c 	.word	0x08020f9c
 80084cc:	58004000 	.word	0x58004000

080084d0 <LL_RCC_LSE_IsReady>:
{
 80084d0:	b480      	push	{r7}
 80084d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80084d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084dc:	f003 0302 	and.w	r3, r3, #2
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d101      	bne.n	80084e8 <LL_RCC_LSE_IsReady+0x18>
 80084e4:	2301      	movs	r3, #1
 80084e6:	e000      	b.n	80084ea <LL_RCC_LSE_IsReady+0x1a>
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bc80      	pop	{r7}
 80084f0:	4770      	bx	lr

080084f2 <LL_RCC_SetUSARTClockSource>:
{
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80084fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	0c1b      	lsrs	r3, r3, #16
 8008506:	43db      	mvns	r3, r3
 8008508:	401a      	ands	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	b29b      	uxth	r3, r3
 800850e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008512:	4313      	orrs	r3, r2
 8008514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	bc80      	pop	{r7}
 8008520:	4770      	bx	lr

08008522 <LL_RCC_SetI2SClockSource>:
{
 8008522:	b480      	push	{r7}
 8008524:	b083      	sub	sp, #12
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800852a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800852e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008532:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4313      	orrs	r3, r2
 800853e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008542:	bf00      	nop
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	bc80      	pop	{r7}
 800854a:	4770      	bx	lr

0800854c <LL_RCC_SetLPUARTClockSource>:
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800855c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008560:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4313      	orrs	r3, r2
 8008568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	bc80      	pop	{r7}
 8008574:	4770      	bx	lr

08008576 <LL_RCC_SetI2CClockSource>:
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800857e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008582:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	091b      	lsrs	r3, r3, #4
 800858a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800858e:	43db      	mvns	r3, r3
 8008590:	401a      	ands	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	011b      	lsls	r3, r3, #4
 8008596:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800859a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800859e:	4313      	orrs	r3, r2
 80085a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bc80      	pop	{r7}
 80085ac:	4770      	bx	lr

080085ae <LL_RCC_SetLPTIMClockSource>:
{
 80085ae:	b480      	push	{r7}
 80085b0:	b083      	sub	sp, #12
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80085b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	0c1b      	lsrs	r3, r3, #16
 80085c2:	041b      	lsls	r3, r3, #16
 80085c4:	43db      	mvns	r3, r3
 80085c6:	401a      	ands	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	041b      	lsls	r3, r3, #16
 80085cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085d0:	4313      	orrs	r3, r2
 80085d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80085d6:	bf00      	nop
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	bc80      	pop	{r7}
 80085de:	4770      	bx	lr

080085e0 <LL_RCC_SetRNGClockSource>:
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80085e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085f0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80085f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	bc80      	pop	{r7}
 8008608:	4770      	bx	lr

0800860a <LL_RCC_SetADCClockSource>:
{
 800860a:	b480      	push	{r7}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800861a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800861e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4313      	orrs	r3, r2
 8008626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800862a:	bf00      	nop
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	bc80      	pop	{r7}
 8008632:	4770      	bx	lr

08008634 <LL_RCC_SetRTCClockSource>:
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800863c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008648:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4313      	orrs	r3, r2
 8008650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	bc80      	pop	{r7}
 800865c:	4770      	bx	lr

0800865e <LL_RCC_GetRTCClockSource>:
{
 800865e:	b480      	push	{r7}
 8008660:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800866a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800866e:	4618      	mov	r0, r3
 8008670:	46bd      	mov	sp, r7
 8008672:	bc80      	pop	{r7}
 8008674:	4770      	bx	lr

08008676 <LL_RCC_ForceBackupDomainReset>:
{
 8008676:	b480      	push	{r7}
 8008678:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800867a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800867e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008682:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800868a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800868e:	bf00      	nop
 8008690:	46bd      	mov	sp, r7
 8008692:	bc80      	pop	{r7}
 8008694:	4770      	bx	lr

08008696 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008696:	b480      	push	{r7}
 8008698:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800869a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800869e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80086ae:	bf00      	nop
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bc80      	pop	{r7}
 80086b4:	4770      	bx	lr
	...

080086b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80086c0:	2300      	movs	r3, #0
 80086c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80086c4:	2300      	movs	r3, #0
 80086c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80086c8:	2300      	movs	r3, #0
 80086ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d058      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80086d8:	f7fe fd64 	bl	80071a4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086dc:	f7fa fc8e 	bl	8002ffc <HAL_GetTick>
 80086e0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80086e2:	e009      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086e4:	f7fa fc8a 	bl	8002ffc <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d902      	bls.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	74fb      	strb	r3, [r7, #19]
        break;
 80086f6:	e006      	b.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80086f8:	4b7b      	ldr	r3, [pc, #492]	; (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008704:	d1ee      	bne.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8008706:	7cfb      	ldrb	r3, [r7, #19]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d13c      	bne.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800870c:	f7ff ffa7 	bl	800865e <LL_RCC_GetRTCClockSource>
 8008710:	4602      	mov	r2, r0
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008716:	429a      	cmp	r2, r3
 8008718:	d00f      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800871a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800871e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008726:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008728:	f7ff ffa5 	bl	8008676 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800872c:	f7ff ffb3 	bl	8008696 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f003 0302 	and.w	r3, r3, #2
 8008740:	2b00      	cmp	r3, #0
 8008742:	d014      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008744:	f7fa fc5a 	bl	8002ffc <HAL_GetTick>
 8008748:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800874a:	e00b      	b.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800874c:	f7fa fc56 	bl	8002ffc <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	f241 3288 	movw	r2, #5000	; 0x1388
 800875a:	4293      	cmp	r3, r2
 800875c:	d902      	bls.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	74fb      	strb	r3, [r7, #19]
            break;
 8008762:	e004      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8008764:	f7ff feb4 	bl	80084d0 <LL_RCC_LSE_IsReady>
 8008768:	4603      	mov	r3, r0
 800876a:	2b01      	cmp	r3, #1
 800876c:	d1ee      	bne.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800876e:	7cfb      	ldrb	r3, [r7, #19]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d105      	bne.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008778:	4618      	mov	r0, r3
 800877a:	f7ff ff5b 	bl	8008634 <LL_RCC_SetRTCClockSource>
 800877e:	e004      	b.n	800878a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008780:	7cfb      	ldrb	r3, [r7, #19]
 8008782:	74bb      	strb	r3, [r7, #18]
 8008784:	e001      	b.n	800878a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008786:	7cfb      	ldrb	r3, [r7, #19]
 8008788:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	d004      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	4618      	mov	r0, r3
 800879c:	f7ff fea9 	bl	80084f2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 0302 	and.w	r3, r3, #2
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d004      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7ff fe9e 	bl	80084f2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0320 	and.w	r3, r3, #32
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d004      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7ff fec0 	bl	800854c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d004      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a1b      	ldr	r3, [r3, #32]
 80087dc:	4618      	mov	r0, r3
 80087de:	f7ff fee6 	bl	80085ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d004      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7ff fedb 	bl	80085ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008800:	2b00      	cmp	r3, #0
 8008802:	d004      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008808:	4618      	mov	r0, r3
 800880a:	f7ff fed0 	bl	80085ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008816:	2b00      	cmp	r3, #0
 8008818:	d004      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	4618      	mov	r0, r3
 8008820:	f7ff fea9 	bl	8008576 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800882c:	2b00      	cmp	r3, #0
 800882e:	d004      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	4618      	mov	r0, r3
 8008836:	f7ff fe9e 	bl	8008576 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008842:	2b00      	cmp	r3, #0
 8008844:	d004      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff fe93 	bl	8008576 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0310 	and.w	r3, r3, #16
 8008858:	2b00      	cmp	r3, #0
 800885a:	d011      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	4618      	mov	r0, r3
 8008862:	f7ff fe5e 	bl	8008522 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800886e:	d107      	bne.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8008870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800887a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800887e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d010      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008890:	4618      	mov	r0, r3
 8008892:	f7ff fea5 	bl	80085e0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889a:	2b00      	cmp	r3, #0
 800889c:	d107      	bne.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800889e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088ac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d011      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088be:	4618      	mov	r0, r3
 80088c0:	f7ff fea3 	bl	800860a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088cc:	d107      	bne.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80088ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088dc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80088de:	7cbb      	ldrb	r3, [r7, #18]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3718      	adds	r7, #24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	58000400 	.word	0x58000400

080088ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d068      	beq.n	80089d0 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d106      	bne.n	8008918 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7f9 ffb8 	bl	8002888 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2202      	movs	r2, #2
 800891c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008920:	4b2e      	ldr	r3, [pc, #184]	; (80089dc <HAL_RTC_Init+0xf0>)
 8008922:	22ca      	movs	r2, #202	; 0xca
 8008924:	625a      	str	r2, [r3, #36]	; 0x24
 8008926:	4b2d      	ldr	r3, [pc, #180]	; (80089dc <HAL_RTC_Init+0xf0>)
 8008928:	2253      	movs	r2, #83	; 0x53
 800892a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fa0f 	bl	8008d50 <RTC_EnterInitMode>
 8008932:	4603      	mov	r3, r0
 8008934:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008936:	7bfb      	ldrb	r3, [r7, #15]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d13f      	bne.n	80089bc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800893c:	4b27      	ldr	r3, [pc, #156]	; (80089dc <HAL_RTC_Init+0xf0>)
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	4a26      	ldr	r2, [pc, #152]	; (80089dc <HAL_RTC_Init+0xf0>)
 8008942:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800894a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800894c:	4b23      	ldr	r3, [pc, #140]	; (80089dc <HAL_RTC_Init+0xf0>)
 800894e:	699a      	ldr	r2, [r3, #24]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6859      	ldr	r1, [r3, #4]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	4319      	orrs	r1, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	430b      	orrs	r3, r1
 8008960:	491e      	ldr	r1, [pc, #120]	; (80089dc <HAL_RTC_Init+0xf0>)
 8008962:	4313      	orrs	r3, r2
 8008964:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68da      	ldr	r2, [r3, #12]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	041b      	lsls	r3, r3, #16
 8008970:	491a      	ldr	r1, [pc, #104]	; (80089dc <HAL_RTC_Init+0xf0>)
 8008972:	4313      	orrs	r3, r2
 8008974:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008976:	4b19      	ldr	r3, [pc, #100]	; (80089dc <HAL_RTC_Init+0xf0>)
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008986:	430b      	orrs	r3, r1
 8008988:	4914      	ldr	r1, [pc, #80]	; (80089dc <HAL_RTC_Init+0xf0>)
 800898a:	4313      	orrs	r3, r2
 800898c:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fa12 	bl	8008db8 <RTC_ExitInitMode>
 8008994:	4603      	mov	r3, r0
 8008996:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008998:	7bfb      	ldrb	r3, [r7, #15]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10e      	bne.n	80089bc <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 800899e:	4b0f      	ldr	r3, [pc, #60]	; (80089dc <HAL_RTC_Init+0xf0>)
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a19      	ldr	r1, [r3, #32]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	69db      	ldr	r3, [r3, #28]
 80089ae:	4319      	orrs	r1, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	695b      	ldr	r3, [r3, #20]
 80089b4:	430b      	orrs	r3, r1
 80089b6:	4909      	ldr	r1, [pc, #36]	; (80089dc <HAL_RTC_Init+0xf0>)
 80089b8:	4313      	orrs	r3, r2
 80089ba:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089bc:	4b07      	ldr	r3, [pc, #28]	; (80089dc <HAL_RTC_Init+0xf0>)
 80089be:	22ff      	movs	r2, #255	; 0xff
 80089c0:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d103      	bne.n	80089d0 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	40002800 	.word	0x40002800

080089e0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80089e0:	b590      	push	{r4, r7, lr}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80089ec:	2300      	movs	r3, #0
 80089ee:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d101      	bne.n	80089fe <HAL_RTC_SetAlarm_IT+0x1e>
 80089fa:	2302      	movs	r3, #2
 80089fc:	e0f3      	b.n	8008be6 <HAL_RTC_SetAlarm_IT+0x206>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2202      	movs	r2, #2
 8008a0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8008a0e:	4b78      	ldr	r3, [pc, #480]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a16:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a1e:	d06a      	beq.n	8008af6 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d13a      	bne.n	8008a9c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008a26:	4b72      	ldr	r3, [pc, #456]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d102      	bne.n	8008a38 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2200      	movs	r2, #0
 8008a36:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 f9f5 	bl	8008e34 <RTC_ByteToBcd2>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	785b      	ldrb	r3, [r3, #1]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 f9ee 	bl	8008e34 <RTC_ByteToBcd2>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008a5c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	789b      	ldrb	r3, [r3, #2]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 f9e6 	bl	8008e34 <RTC_ByteToBcd2>
 8008a68:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008a6a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	78db      	ldrb	r3, [r3, #3]
 8008a72:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008a74:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 f9d8 	bl	8008e34 <RTC_ByteToBcd2>
 8008a84:	4603      	mov	r3, r0
 8008a86:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008a88:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008a90:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008a96:	4313      	orrs	r3, r2
 8008a98:	617b      	str	r3, [r7, #20]
 8008a9a:	e02c      	b.n	8008af6 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8008aa4:	d00d      	beq.n	8008ac2 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008aae:	d008      	beq.n	8008ac2 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008ab0:	4b4f      	ldr	r3, [pc, #316]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d102      	bne.n	8008ac2 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	785b      	ldrb	r3, [r3, #1]
 8008acc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008ace:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008ad4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	78db      	ldrb	r3, [r3, #3]
 8008ada:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008adc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008ae4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008ae6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008aec:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008af2:	4313      	orrs	r3, r2
 8008af4:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008af6:	4b3e      	ldr	r3, [pc, #248]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008af8:	22ca      	movs	r2, #202	; 0xca
 8008afa:	625a      	str	r2, [r3, #36]	; 0x24
 8008afc:	4b3c      	ldr	r3, [pc, #240]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008afe:	2253      	movs	r2, #83	; 0x53
 8008b00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b0a:	d12c      	bne.n	8008b66 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008b0c:	4b38      	ldr	r3, [pc, #224]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	4a37      	ldr	r2, [pc, #220]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008b16:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008b18:	4b35      	ldr	r3, [pc, #212]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b24:	d107      	bne.n	8008b36 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	699a      	ldr	r2, [r3, #24]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	4930      	ldr	r1, [pc, #192]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b30:	4313      	orrs	r3, r2
 8008b32:	644b      	str	r3, [r1, #68]	; 0x44
 8008b34:	e006      	b.n	8008b44 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008b36:	4a2e      	ldr	r2, [pc, #184]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8008b3c:	4a2c      	ldr	r2, [pc, #176]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008b44:	4a2a      	ldr	r2, [pc, #168]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b50:	f043 0201 	orr.w	r2, r3, #1
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008b58:	4b25      	ldr	r3, [pc, #148]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	4a24      	ldr	r2, [pc, #144]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b5e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8008b62:	6193      	str	r3, [r2, #24]
 8008b64:	e02b      	b.n	8008bbe <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008b66:	4b22      	ldr	r3, [pc, #136]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	4a21      	ldr	r2, [pc, #132]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b6c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8008b70:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008b72:	4b1f      	ldr	r3, [pc, #124]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b74:	2202      	movs	r2, #2
 8008b76:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b7e:	d107      	bne.n	8008b90 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	699a      	ldr	r2, [r3, #24]
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	69db      	ldr	r3, [r3, #28]
 8008b88:	4919      	ldr	r1, [pc, #100]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008b8e:	e006      	b.n	8008b9e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8008b90:	4a17      	ldr	r2, [pc, #92]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8008b96:	4a16      	ldr	r2, [pc, #88]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8008b9e:	4a14      	ldr	r2, [pc, #80]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008baa:	f043 0202 	orr.w	r2, r3, #2
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008bb2:	4b0f      	ldr	r3, [pc, #60]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	4a0e      	ldr	r2, [pc, #56]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008bb8:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8008bbc:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008bbe:	4b0d      	ldr	r3, [pc, #52]	; (8008bf4 <HAL_RTC_SetAlarm_IT+0x214>)
 8008bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bc4:	4a0b      	ldr	r2, [pc, #44]	; (8008bf4 <HAL_RTC_SetAlarm_IT+0x214>)
 8008bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bce:	4b08      	ldr	r3, [pc, #32]	; (8008bf0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008bd0:	22ff      	movs	r2, #255	; 0xff
 8008bd2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	371c      	adds	r7, #28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd90      	pop	{r4, r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	40002800 	.word	0x40002800
 8008bf4:	58000800 	.word	0x58000800

08008bf8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d101      	bne.n	8008c10 <HAL_RTC_DeactivateAlarm+0x18>
 8008c0c:	2302      	movs	r3, #2
 8008c0e:	e048      	b.n	8008ca2 <HAL_RTC_DeactivateAlarm+0xaa>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c20:	4b22      	ldr	r3, [pc, #136]	; (8008cac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008c22:	22ca      	movs	r2, #202	; 0xca
 8008c24:	625a      	str	r2, [r3, #36]	; 0x24
 8008c26:	4b21      	ldr	r3, [pc, #132]	; (8008cac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008c28:	2253      	movs	r2, #83	; 0x53
 8008c2a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c32:	d115      	bne.n	8008c60 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008c34:	4b1d      	ldr	r3, [pc, #116]	; (8008cac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008c36:	699b      	ldr	r3, [r3, #24]
 8008c38:	4a1c      	ldr	r2, [pc, #112]	; (8008cac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008c3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008c3e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8008c40:	4b1a      	ldr	r3, [pc, #104]	; (8008cac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c44:	4a19      	ldr	r2, [pc, #100]	; (8008cac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008c46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c4a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c50:	f023 0201 	bic.w	r2, r3, #1
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008c58:	4b14      	ldr	r3, [pc, #80]	; (8008cac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8008c5e:	e014      	b.n	8008c8a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008c60:	4b12      	ldr	r3, [pc, #72]	; (8008cac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	4a11      	ldr	r2, [pc, #68]	; (8008cac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008c66:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8008c6a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8008c6c:	4b0f      	ldr	r3, [pc, #60]	; (8008cac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c70:	4a0e      	ldr	r2, [pc, #56]	; (8008cac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008c72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c76:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7c:	f023 0202 	bic.w	r2, r3, #2
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008c84:	4b09      	ldr	r3, [pc, #36]	; (8008cac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008c86:	2202      	movs	r2, #2
 8008c88:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c8a:	4b08      	ldr	r3, [pc, #32]	; (8008cac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008c8c:	22ff      	movs	r2, #255	; 0xff
 8008c8e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bc80      	pop	{r7}
 8008caa:	4770      	bx	lr
 8008cac:	40002800 	.word	0x40002800

08008cb0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8008cb8:	4b11      	ldr	r3, [pc, #68]	; (8008d00 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008cba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d005      	beq.n	8008cda <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008cce:	4b0c      	ldr	r3, [pc, #48]	; (8008d00 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f7fa fc1a 	bl	800350e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f003 0302 	and.w	r3, r3, #2
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d005      	beq.n	8008cf0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008ce4:	4b06      	ldr	r3, [pc, #24]	; (8008d00 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f94a 	bl	8008f84 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008cf8:	bf00      	nop
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	40002800 	.word	0x40002800

08008d04 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008d0c:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <HAL_RTC_WaitForSynchro+0x48>)
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	4a0e      	ldr	r2, [pc, #56]	; (8008d4c <HAL_RTC_WaitForSynchro+0x48>)
 8008d12:	f023 0320 	bic.w	r3, r3, #32
 8008d16:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008d18:	f7fa f970 	bl	8002ffc <HAL_GetTick>
 8008d1c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008d1e:	e009      	b.n	8008d34 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d20:	f7fa f96c 	bl	8002ffc <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d2e:	d901      	bls.n	8008d34 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e006      	b.n	8008d42 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008d34:	4b05      	ldr	r3, [pc, #20]	; (8008d4c <HAL_RTC_WaitForSynchro+0x48>)
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f003 0320 	and.w	r3, r3, #32
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d0ef      	beq.n	8008d20 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	40002800 	.word	0x40002800

08008d50 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008d5c:	4b15      	ldr	r3, [pc, #84]	; (8008db4 <RTC_EnterInitMode+0x64>)
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d120      	bne.n	8008daa <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008d68:	4b12      	ldr	r3, [pc, #72]	; (8008db4 <RTC_EnterInitMode+0x64>)
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	4a11      	ldr	r2, [pc, #68]	; (8008db4 <RTC_EnterInitMode+0x64>)
 8008d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d72:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008d74:	f7fa f942 	bl	8002ffc <HAL_GetTick>
 8008d78:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008d7a:	e00d      	b.n	8008d98 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008d7c:	f7fa f93e 	bl	8002ffc <HAL_GetTick>
 8008d80:	4602      	mov	r2, r0
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d8a:	d905      	bls.n	8008d98 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2203      	movs	r2, #3
 8008d94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008d98:	4b06      	ldr	r3, [pc, #24]	; (8008db4 <RTC_EnterInitMode+0x64>)
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d102      	bne.n	8008daa <RTC_EnterInitMode+0x5a>
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	d1e8      	bne.n	8008d7c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	40002800 	.word	0x40002800

08008db8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008dc4:	4b1a      	ldr	r3, [pc, #104]	; (8008e30 <RTC_ExitInitMode+0x78>)
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	4a19      	ldr	r2, [pc, #100]	; (8008e30 <RTC_ExitInitMode+0x78>)
 8008dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dce:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008dd0:	4b17      	ldr	r3, [pc, #92]	; (8008e30 <RTC_ExitInitMode+0x78>)
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	f003 0320 	and.w	r3, r3, #32
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10c      	bne.n	8008df6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7ff ff91 	bl	8008d04 <HAL_RTC_WaitForSynchro>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d01e      	beq.n	8008e26 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2203      	movs	r2, #3
 8008dec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	73fb      	strb	r3, [r7, #15]
 8008df4:	e017      	b.n	8008e26 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008df6:	4b0e      	ldr	r3, [pc, #56]	; (8008e30 <RTC_ExitInitMode+0x78>)
 8008df8:	699b      	ldr	r3, [r3, #24]
 8008dfa:	4a0d      	ldr	r2, [pc, #52]	; (8008e30 <RTC_ExitInitMode+0x78>)
 8008dfc:	f023 0320 	bic.w	r3, r3, #32
 8008e00:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff ff7e 	bl	8008d04 <HAL_RTC_WaitForSynchro>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d005      	beq.n	8008e1a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2203      	movs	r2, #3
 8008e12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008e1a:	4b05      	ldr	r3, [pc, #20]	; (8008e30 <RTC_ExitInitMode+0x78>)
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	4a04      	ldr	r2, [pc, #16]	; (8008e30 <RTC_ExitInitMode+0x78>)
 8008e20:	f043 0320 	orr.w	r3, r3, #32
 8008e24:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	40002800 	.word	0x40002800

08008e34 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8008e42:	79fb      	ldrb	r3, [r7, #7]
 8008e44:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008e46:	e005      	b.n	8008e54 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8008e4e:	7afb      	ldrb	r3, [r7, #11]
 8008e50:	3b0a      	subs	r3, #10
 8008e52:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008e54:	7afb      	ldrb	r3, [r7, #11]
 8008e56:	2b09      	cmp	r3, #9
 8008e58:	d8f6      	bhi.n	8008e48 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	011b      	lsls	r3, r3, #4
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	7afb      	ldrb	r3, [r7, #11]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	b2db      	uxtb	r3, r3
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bc80      	pop	{r7}
 8008e70:	4770      	bx	lr
	...

08008e74 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d101      	bne.n	8008e8a <HAL_RTCEx_EnableBypassShadow+0x16>
 8008e86:	2302      	movs	r3, #2
 8008e88:	e01f      	b.n	8008eca <HAL_RTCEx_EnableBypassShadow+0x56>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2202      	movs	r2, #2
 8008e96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e9a:	4b0e      	ldr	r3, [pc, #56]	; (8008ed4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008e9c:	22ca      	movs	r2, #202	; 0xca
 8008e9e:	625a      	str	r2, [r3, #36]	; 0x24
 8008ea0:	4b0c      	ldr	r3, [pc, #48]	; (8008ed4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008ea2:	2253      	movs	r2, #83	; 0x53
 8008ea4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008ea6:	4b0b      	ldr	r3, [pc, #44]	; (8008ed4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	4a0a      	ldr	r2, [pc, #40]	; (8008ed4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008eac:	f043 0320 	orr.w	r3, r3, #32
 8008eb0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008eb2:	4b08      	ldr	r3, [pc, #32]	; (8008ed4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008eb4:	22ff      	movs	r2, #255	; 0xff
 8008eb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bc80      	pop	{r7}
 8008ed2:	4770      	bx	lr
 8008ed4:	40002800 	.word	0x40002800

08008ed8 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d101      	bne.n	8008eee <HAL_RTCEx_SetSSRU_IT+0x16>
 8008eea:	2302      	movs	r3, #2
 8008eec:	e027      	b.n	8008f3e <HAL_RTCEx_SetSSRU_IT+0x66>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2202      	movs	r2, #2
 8008efa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008efe:	4b12      	ldr	r3, [pc, #72]	; (8008f48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008f00:	22ca      	movs	r2, #202	; 0xca
 8008f02:	625a      	str	r2, [r3, #36]	; 0x24
 8008f04:	4b10      	ldr	r3, [pc, #64]	; (8008f48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008f06:	2253      	movs	r2, #83	; 0x53
 8008f08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8008f0a:	4b0f      	ldr	r3, [pc, #60]	; (8008f48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008f0c:	699b      	ldr	r3, [r3, #24]
 8008f0e:	4a0e      	ldr	r2, [pc, #56]	; (8008f48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f14:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8008f16:	4b0d      	ldr	r3, [pc, #52]	; (8008f4c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f1c:	4a0b      	ldr	r2, [pc, #44]	; (8008f4c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008f1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f22:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f26:	4b08      	ldr	r3, [pc, #32]	; (8008f48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008f28:	22ff      	movs	r2, #255	; 0xff
 8008f2a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	370c      	adds	r7, #12
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bc80      	pop	{r7}
 8008f46:	4770      	bx	lr
 8008f48:	40002800 	.word	0x40002800
 8008f4c:	58000800 	.word	0x58000800

08008f50 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8008f58:	4b09      	ldr	r3, [pc, #36]	; (8008f80 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d005      	beq.n	8008f70 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8008f64:	4b06      	ldr	r3, [pc, #24]	; (8008f80 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008f66:	2240      	movs	r2, #64	; 0x40
 8008f68:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7fa fad9 	bl	8003522 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008f78:	bf00      	nop
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	40002800 	.word	0x40002800

08008f84 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bc80      	pop	{r7}
 8008f94:	4770      	bx	lr
	...

08008f98 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b087      	sub	sp, #28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008fa4:	4b07      	ldr	r3, [pc, #28]	; (8008fc4 <HAL_RTCEx_BKUPWrite+0x2c>)
 8008fa6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	4413      	add	r3, r2
 8008fb0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	601a      	str	r2, [r3, #0]
}
 8008fb8:	bf00      	nop
 8008fba:	371c      	adds	r7, #28
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bc80      	pop	{r7}
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	4000b100 	.word	0x4000b100

08008fc8 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008fd2:	4b07      	ldr	r3, [pc, #28]	; (8008ff0 <HAL_RTCEx_BKUPRead+0x28>)
 8008fd4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	4413      	add	r3, r2
 8008fde:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3714      	adds	r7, #20
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bc80      	pop	{r7}
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	4000b100 	.word	0x4000b100

08008ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d101      	bne.n	8009006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e0c6      	b.n	8009194 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900a:	2b00      	cmp	r3, #0
 800900c:	d108      	bne.n	8009020 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009016:	d009      	beq.n	800902c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	61da      	str	r2, [r3, #28]
 800901e:	e005      	b.n	800902c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b00      	cmp	r3, #0
 8009036:	d106      	bne.n	8009046 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7f9 fccb 	bl	80029dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2202      	movs	r2, #2
 800904a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800905c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009066:	d902      	bls.n	800906e <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009068:	2300      	movs	r3, #0
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	e002      	b.n	8009074 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800906e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009072:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800907c:	d007      	beq.n	800908e <HAL_SPI_Init+0x9a>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009086:	d002      	beq.n	800908e <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800909e:	431a      	orrs	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	f003 0302 	and.w	r3, r3, #2
 80090a8:	431a      	orrs	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	431a      	orrs	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090bc:	431a      	orrs	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	69db      	ldr	r3, [r3, #28]
 80090c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090c6:	431a      	orrs	r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6a1b      	ldr	r3, [r3, #32]
 80090cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d0:	ea42 0103 	orr.w	r1, r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090ec:	d11b      	bne.n	8009126 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d10b      	bne.n	800910e <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80090fe:	d903      	bls.n	8009108 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2202      	movs	r2, #2
 8009104:	631a      	str	r2, [r3, #48]	; 0x30
 8009106:	e002      	b.n	800910e <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009112:	2b02      	cmp	r3, #2
 8009114:	d107      	bne.n	8009126 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009124:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	0c1b      	lsrs	r3, r3, #16
 800912c:	f003 0204 	and.w	r2, r3, #4
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009134:	f003 0310 	and.w	r3, r3, #16
 8009138:	431a      	orrs	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800913e:	f003 0308 	and.w	r3, r3, #8
 8009142:	431a      	orrs	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800914c:	ea42 0103 	orr.w	r1, r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	430a      	orrs	r2, r1
 800915c:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009166:	d105      	bne.n	8009174 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	b292      	uxth	r2, r2
 8009172:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	69da      	ldr	r2, [r3, #28]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009182:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b088      	sub	sp, #32
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	603b      	str	r3, [r7, #0]
 80091a8:	4613      	mov	r3, r2
 80091aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d101      	bne.n	80091be <HAL_SPI_Transmit+0x22>
 80091ba:	2302      	movs	r3, #2
 80091bc:	e17a      	b.n	80094b4 <HAL_SPI_Transmit+0x318>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091c6:	f7f9 ff19 	bl	8002ffc <HAL_GetTick>
 80091ca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80091cc:	88fb      	ldrh	r3, [r7, #6]
 80091ce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d002      	beq.n	80091e2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80091dc:	2302      	movs	r3, #2
 80091de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80091e0:	e15f      	b.n	80094a2 <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <HAL_SPI_Transmit+0x52>
 80091e8:	88fb      	ldrh	r3, [r7, #6]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d102      	bne.n	80091f4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80091f2:	e156      	b.n	80094a2 <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2203      	movs	r2, #3
 80091f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	88fa      	ldrh	r2, [r7, #6]
 800920c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	88fa      	ldrh	r2, [r7, #6]
 8009212:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800923e:	d10f      	bne.n	8009260 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800924e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800925e:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009268:	d10f      	bne.n	800928a <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009278:	601a      	str	r2, [r3, #0]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009288:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009294:	2b40      	cmp	r3, #64	; 0x40
 8009296:	d007      	beq.n	80092a8 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092b0:	d94b      	bls.n	800934a <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d002      	beq.n	80092c0 <HAL_SPI_Transmit+0x124>
 80092ba:	8afb      	ldrh	r3, [r7, #22]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d13e      	bne.n	800933e <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c4:	881a      	ldrh	r2, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d0:	1c9a      	adds	r2, r3, #2
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092da:	b29b      	uxth	r3, r3
 80092dc:	3b01      	subs	r3, #1
 80092de:	b29a      	uxth	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80092e4:	e02b      	b.n	800933e <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	f003 0302 	and.w	r3, r3, #2
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d112      	bne.n	800931a <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f8:	881a      	ldrh	r2, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009304:	1c9a      	adds	r2, r3, #2
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800930e:	b29b      	uxth	r3, r3
 8009310:	3b01      	subs	r3, #1
 8009312:	b29a      	uxth	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009318:	e011      	b.n	800933e <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800931a:	f7f9 fe6f 	bl	8002ffc <HAL_GetTick>
 800931e:	4602      	mov	r2, r0
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	683a      	ldr	r2, [r7, #0]
 8009326:	429a      	cmp	r2, r3
 8009328:	d803      	bhi.n	8009332 <HAL_SPI_Transmit+0x196>
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009330:	d102      	bne.n	8009338 <HAL_SPI_Transmit+0x19c>
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d102      	bne.n	800933e <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800933c:	e0b1      	b.n	80094a2 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009342:	b29b      	uxth	r3, r3
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1ce      	bne.n	80092e6 <HAL_SPI_Transmit+0x14a>
 8009348:	e07c      	b.n	8009444 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <HAL_SPI_Transmit+0x1bc>
 8009352:	8afb      	ldrh	r3, [r7, #22]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d170      	bne.n	800943a <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800935c:	b29b      	uxth	r3, r3
 800935e:	2b01      	cmp	r3, #1
 8009360:	d912      	bls.n	8009388 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009366:	881a      	ldrh	r2, [r3, #0]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009372:	1c9a      	adds	r2, r3, #2
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800937c:	b29b      	uxth	r3, r3
 800937e:	3b02      	subs	r3, #2
 8009380:	b29a      	uxth	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009386:	e058      	b.n	800943a <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	330c      	adds	r3, #12
 8009392:	7812      	ldrb	r2, [r2, #0]
 8009394:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939a:	1c5a      	adds	r2, r3, #1
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	3b01      	subs	r3, #1
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80093ae:	e044      	b.n	800943a <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f003 0302 	and.w	r3, r3, #2
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d12b      	bne.n	8009416 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d912      	bls.n	80093ee <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093cc:	881a      	ldrh	r2, [r3, #0]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d8:	1c9a      	adds	r2, r3, #2
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	3b02      	subs	r3, #2
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80093ec:	e025      	b.n	800943a <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	330c      	adds	r3, #12
 80093f8:	7812      	ldrb	r2, [r2, #0]
 80093fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009400:	1c5a      	adds	r2, r3, #1
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800940a:	b29b      	uxth	r3, r3
 800940c:	3b01      	subs	r3, #1
 800940e:	b29a      	uxth	r2, r3
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009414:	e011      	b.n	800943a <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009416:	f7f9 fdf1 	bl	8002ffc <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	683a      	ldr	r2, [r7, #0]
 8009422:	429a      	cmp	r2, r3
 8009424:	d803      	bhi.n	800942e <HAL_SPI_Transmit+0x292>
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800942c:	d102      	bne.n	8009434 <HAL_SPI_Transmit+0x298>
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d102      	bne.n	800943a <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009438:	e033      	b.n	80094a2 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800943e:	b29b      	uxth	r3, r3
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1b5      	bne.n	80093b0 <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800944c:	d107      	bne.n	800945e <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800945c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800945e:	69ba      	ldr	r2, [r7, #24]
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f000 fe6e 	bl	800a144 <SPI_EndRxTxTransaction>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2220      	movs	r2, #32
 8009472:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10a      	bne.n	8009492 <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800947c:	2300      	movs	r3, #0
 800947e:	613b      	str	r3, [r7, #16]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	613b      	str	r3, [r7, #16]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	613b      	str	r3, [r7, #16]
 8009490:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009496:	2b00      	cmp	r3, #0
 8009498:	d002      	beq.n	80094a0 <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	77fb      	strb	r3, [r7, #31]
 800949e:	e000      	b.n	80094a2 <HAL_SPI_Transmit+0x306>
  }

error:
 80094a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80094b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3720      	adds	r7, #32
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b08c      	sub	sp, #48	; 0x30
 80094c0:	af02      	add	r7, sp, #8
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	603b      	str	r3, [r7, #0]
 80094c8:	4613      	mov	r3, r2
 80094ca:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80094cc:	2300      	movs	r3, #0
 80094ce:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094e2:	d112      	bne.n	800950a <HAL_SPI_Receive+0x4e>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10e      	bne.n	800950a <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2204      	movs	r2, #4
 80094f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80094f4:	88fa      	ldrh	r2, [r7, #6]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	4613      	mov	r3, r2
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	68b9      	ldr	r1, [r7, #8]
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f000 f9c4 	bl	800988e <HAL_SPI_TransmitReceive>
 8009506:	4603      	mov	r3, r0
 8009508:	e1bd      	b.n	8009886 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009510:	2b01      	cmp	r3, #1
 8009512:	d101      	bne.n	8009518 <HAL_SPI_Receive+0x5c>
 8009514:	2302      	movs	r3, #2
 8009516:	e1b6      	b.n	8009886 <HAL_SPI_Receive+0x3ca>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009520:	f7f9 fd6c 	bl	8002ffc <HAL_GetTick>
 8009524:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b01      	cmp	r3, #1
 8009530:	d003      	beq.n	800953a <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 8009532:	2302      	movs	r3, #2
 8009534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8009538:	e19b      	b.n	8009872 <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <HAL_SPI_Receive+0x8a>
 8009540:	88fb      	ldrh	r3, [r7, #6]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d103      	bne.n	800954e <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 800954c:	e191      	b.n	8009872 <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2204      	movs	r2, #4
 8009552:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	88fa      	ldrh	r2, [r7, #6]
 8009566:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	88fa      	ldrh	r2, [r7, #6]
 800956e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009598:	d118      	bne.n	80095cc <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095b8:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	3b01      	subs	r3, #1
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095d4:	d908      	bls.n	80095e8 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80095e4:	605a      	str	r2, [r3, #4]
 80095e6:	e007      	b.n	80095f8 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80095f6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009600:	d10f      	bne.n	8009622 <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009610:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009620:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962c:	2b40      	cmp	r3, #64	; 0x40
 800962e:	d007      	beq.n	8009640 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800963e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009648:	d869      	bhi.n	800971e <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800964a:	e031      	b.n	80096b0 <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	2b01      	cmp	r3, #1
 8009658:	d117      	bne.n	800968a <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f103 020c 	add.w	r2, r3, #12
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009666:	7812      	ldrb	r2, [r2, #0]
 8009668:	b2d2      	uxtb	r2, r2
 800966a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009670:	1c5a      	adds	r2, r3, #1
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800967c:	b29b      	uxth	r3, r3
 800967e:	3b01      	subs	r3, #1
 8009680:	b29a      	uxth	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009688:	e012      	b.n	80096b0 <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800968a:	f7f9 fcb7 	bl	8002ffc <HAL_GetTick>
 800968e:	4602      	mov	r2, r0
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	683a      	ldr	r2, [r7, #0]
 8009696:	429a      	cmp	r2, r3
 8009698:	d803      	bhi.n	80096a2 <HAL_SPI_Receive+0x1e6>
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a0:	d102      	bne.n	80096a8 <HAL_SPI_Receive+0x1ec>
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d103      	bne.n	80096b0 <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 80096a8:	2303      	movs	r3, #3
 80096aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80096ae:	e0e0      	b.n	8009872 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1c7      	bne.n	800964c <HAL_SPI_Receive+0x190>
 80096bc:	e035      	b.n	800972a <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d115      	bne.n	80096f8 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68da      	ldr	r2, [r3, #12]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d6:	b292      	uxth	r2, r2
 80096d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096de:	1c9a      	adds	r2, r3, #2
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	3b01      	subs	r3, #1
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80096f6:	e012      	b.n	800971e <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096f8:	f7f9 fc80 	bl	8002ffc <HAL_GetTick>
 80096fc:	4602      	mov	r2, r0
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	683a      	ldr	r2, [r7, #0]
 8009704:	429a      	cmp	r2, r3
 8009706:	d803      	bhi.n	8009710 <HAL_SPI_Receive+0x254>
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800970e:	d102      	bne.n	8009716 <HAL_SPI_Receive+0x25a>
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d103      	bne.n	800971e <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800971c:	e0a9      	b.n	8009872 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009724:	b29b      	uxth	r3, r3
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1c9      	bne.n	80096be <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800972e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009732:	d178      	bne.n	8009826 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009742:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009744:	6a3b      	ldr	r3, [r7, #32]
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	2201      	movs	r2, #1
 800974c:	2101      	movs	r1, #1
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 fb82 	bl	8009e58 <SPI_WaitFlagStateUntilTimeout>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d003      	beq.n	8009762 <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 800975a:	2303      	movs	r3, #3
 800975c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8009760:	e087      	b.n	8009872 <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800976a:	d907      	bls.n	800977c <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68da      	ldr	r2, [r3, #12]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009776:	b292      	uxth	r2, r2
 8009778:	801a      	strh	r2, [r3, #0]
 800977a:	e008      	b.n	800978e <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f103 020c 	add.w	r2, r3, #12
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009788:	7812      	ldrb	r2, [r2, #0]
 800978a:	b2d2      	uxtb	r2, r2
 800978c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800978e:	6a3b      	ldr	r3, [r7, #32]
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2201      	movs	r2, #1
 8009796:	2101      	movs	r1, #1
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f000 fb5d 	bl	8009e58 <SPI_WaitFlagStateUntilTimeout>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d009      	beq.n	80097b8 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097a8:	f043 0202 	orr.w	r2, r3, #2
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80097b0:	2303      	movs	r3, #3
 80097b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 80097b6:	e05c      	b.n	8009872 <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80097c0:	d105      	bne.n	80097ce <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	e02b      	b.n	8009826 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	330c      	adds	r3, #12
 80097d4:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80097de:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097e8:	d11d      	bne.n	8009826 <HAL_SPI_Receive+0x36a>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d119      	bne.n	8009826 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80097f2:	6a3b      	ldr	r3, [r7, #32]
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2201      	movs	r2, #1
 80097fa:	2101      	movs	r1, #1
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 fb2b 	bl	8009e58 <SPI_WaitFlagStateUntilTimeout>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d009      	beq.n	800981c <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800980c:	f043 0202 	orr.w	r2, r3, #2
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800981a:	e02a      	b.n	8009872 <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	b2db      	uxtb	r3, r3
 8009822:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8009824:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009826:	6a3a      	ldr	r2, [r7, #32]
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 fc32 	bl	800a094 <SPI_EndRxTransaction>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d002      	beq.n	800983c <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2220      	movs	r2, #32
 800983a:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	f003 0310 	and.w	r3, r3, #16
 8009846:	2b10      	cmp	r3, #16
 8009848:	d10a      	bne.n	8009860 <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800984e:	f043 0202 	orr.w	r2, r3, #2
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800985e:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009864:	2b00      	cmp	r3, #0
 8009866:	d003      	beq.n	8009870 <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800986e:	e000      	b.n	8009872 <HAL_SPI_Receive+0x3b6>
  }

error :
 8009870:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2201      	movs	r2, #1
 8009876:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009886:	4618      	mov	r0, r3
 8009888:	3728      	adds	r7, #40	; 0x28
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b092      	sub	sp, #72	; 0x48
 8009892:	af02      	add	r7, sp, #8
 8009894:	60f8      	str	r0, [r7, #12]
 8009896:	60b9      	str	r1, [r7, #8]
 8009898:	607a      	str	r2, [r7, #4]
 800989a:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800989c:	2300      	movs	r3, #0
 800989e:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80098a0:	2300      	movs	r3, #0
 80098a2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80098a4:	2301      	movs	r3, #1
 80098a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d101      	bne.n	80098bc <HAL_SPI_TransmitReceive+0x2e>
 80098b8:	2302      	movs	r3, #2
 80098ba:	e2c8      	b.n	8009e4e <HAL_SPI_TransmitReceive+0x5c0>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098c4:	f7f9 fb9a 	bl	8002ffc <HAL_GetTick>
 80098c8:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80098d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 80098da:	887b      	ldrh	r3, [r7, #2]
 80098dc:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 80098de:	887b      	ldrh	r3, [r7, #2]
 80098e0:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80098f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d00f      	beq.n	800991a <HAL_SPI_TransmitReceive+0x8c>
 80098fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009900:	d107      	bne.n	8009912 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d103      	bne.n	8009912 <HAL_SPI_TransmitReceive+0x84>
 800990a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800990e:	2b04      	cmp	r3, #4
 8009910:	d003      	beq.n	800991a <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8009912:	2302      	movs	r3, #2
 8009914:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8009918:	e28f      	b.n	8009e3a <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d005      	beq.n	800992c <HAL_SPI_TransmitReceive+0x9e>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d002      	beq.n	800992c <HAL_SPI_TransmitReceive+0x9e>
 8009926:	887b      	ldrh	r3, [r7, #2]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d103      	bne.n	8009934 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8009932:	e282      	b.n	8009e3a <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800993a:	b2db      	uxtb	r3, r3
 800993c:	2b04      	cmp	r3, #4
 800993e:	d003      	beq.n	8009948 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2205      	movs	r2, #5
 8009944:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	887a      	ldrh	r2, [r7, #2]
 8009958:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	887a      	ldrh	r2, [r7, #2]
 8009960:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	887a      	ldrh	r2, [r7, #2]
 800996e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	887a      	ldrh	r2, [r7, #2]
 8009974:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800998a:	d10f      	bne.n	80099ac <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800999a:	601a      	str	r2, [r3, #0]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099aa:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80099b4:	d802      	bhi.n	80099bc <HAL_SPI_TransmitReceive+0x12e>
 80099b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d908      	bls.n	80099ce <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	685a      	ldr	r2, [r3, #4]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80099ca:	605a      	str	r2, [r3, #4]
 80099cc:	e007      	b.n	80099de <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	685a      	ldr	r2, [r3, #4]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80099dc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e8:	2b40      	cmp	r3, #64	; 0x40
 80099ea:	d007      	beq.n	80099fc <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a04:	f240 80a4 	bls.w	8009b50 <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d003      	beq.n	8009a18 <HAL_SPI_TransmitReceive+0x18a>
 8009a10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	f040 808e 	bne.w	8009b34 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1c:	881a      	ldrh	r2, [r3, #0]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a28:	1c9a      	adds	r2, r3, #2
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	3b01      	subs	r3, #1
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a3c:	e07a      	b.n	8009b34 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	f003 0302 	and.w	r3, r3, #2
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d13f      	bne.n	8009acc <HAL_SPI_TransmitReceive+0x23e>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d03a      	beq.n	8009acc <HAL_SPI_TransmitReceive+0x23e>
 8009a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d137      	bne.n	8009acc <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a60:	881a      	ldrh	r2, [r3, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6c:	1c9a      	adds	r2, r3, #2
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a80:	2300      	movs	r3, #0
 8009a82:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d11e      	bne.n	8009acc <HAL_SPI_TransmitReceive+0x23e>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a96:	d119      	bne.n	8009acc <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	f003 0304 	and.w	r3, r3, #4
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10c      	bne.n	8009abc <HAL_SPI_TransmitReceive+0x22e>
 8009aa2:	6a3b      	ldr	r3, [r7, #32]
 8009aa4:	f003 0308 	and.w	r3, r3, #8
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d007      	beq.n	8009abc <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009aba:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009aca:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d11c      	bne.n	8009b14 <HAL_SPI_TransmitReceive+0x286>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d016      	beq.n	8009b14 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68da      	ldr	r2, [r3, #12]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af0:	b292      	uxth	r2, r2
 8009af2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af8:	1c9a      	adds	r2, r3, #2
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	3b01      	subs	r3, #1
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b10:	2301      	movs	r3, #1
 8009b12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009b14:	f7f9 fa72 	bl	8002ffc <HAL_GetTick>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d807      	bhi.n	8009b34 <HAL_SPI_TransmitReceive+0x2a6>
 8009b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b2a:	d003      	beq.n	8009b34 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8009b32:	e182      	b.n	8009e3a <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	f47f af7f 	bne.w	8009a3e <HAL_SPI_TransmitReceive+0x1b0>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f47f af78 	bne.w	8009a3e <HAL_SPI_TransmitReceive+0x1b0>
 8009b4e:	e103      	b.n	8009d58 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d003      	beq.n	8009b60 <HAL_SPI_TransmitReceive+0x2d2>
 8009b58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	f040 80ef 	bne.w	8009d3e <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d912      	bls.n	8009b90 <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6e:	881a      	ldrh	r2, [r3, #0]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7a:	1c9a      	adds	r2, r3, #2
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	3b02      	subs	r3, #2
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009b8e:	e0d6      	b.n	8009d3e <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	330c      	adds	r3, #12
 8009b9a:	7812      	ldrb	r2, [r2, #0]
 8009b9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba2:	1c5a      	adds	r2, r3, #1
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bb6:	e0c2      	b.n	8009d3e <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	f003 0302 	and.w	r3, r3, #2
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d158      	bne.n	8009c78 <HAL_SPI_TransmitReceive+0x3ea>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d053      	beq.n	8009c78 <HAL_SPI_TransmitReceive+0x3ea>
 8009bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d150      	bne.n	8009c78 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d912      	bls.n	8009c06 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be4:	881a      	ldrh	r2, [r3, #0]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf0:	1c9a      	adds	r2, r3, #2
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	3b02      	subs	r3, #2
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009c04:	e012      	b.n	8009c2c <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	330c      	adds	r3, #12
 8009c10:	7812      	ldrb	r2, [r2, #0]
 8009c12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c18:	1c5a      	adds	r2, r3, #1
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	3b01      	subs	r3, #1
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d11e      	bne.n	8009c78 <HAL_SPI_TransmitReceive+0x3ea>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c42:	d119      	bne.n	8009c78 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8009c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c46:	f003 0304 	and.w	r3, r3, #4
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10c      	bne.n	8009c68 <HAL_SPI_TransmitReceive+0x3da>
 8009c4e:	6a3b      	ldr	r3, [r7, #32]
 8009c50:	f003 0308 	and.w	r3, r3, #8
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d007      	beq.n	8009c68 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c66:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c76:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d148      	bne.n	8009d18 <HAL_SPI_TransmitReceive+0x48a>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d042      	beq.n	8009d18 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d923      	bls.n	8009ce6 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68da      	ldr	r2, [r3, #12]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca8:	b292      	uxth	r2, r2
 8009caa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb0:	1c9a      	adds	r2, r3, #2
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	3b02      	subs	r3, #2
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d81f      	bhi.n	8009d14 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	685a      	ldr	r2, [r3, #4]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ce2:	605a      	str	r2, [r3, #4]
 8009ce4:	e016      	b.n	8009d14 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f103 020c 	add.w	r2, r3, #12
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf2:	7812      	ldrb	r2, [r2, #0]
 8009cf4:	b2d2      	uxtb	r2, r2
 8009cf6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfc:	1c5a      	adds	r2, r3, #1
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d14:	2301      	movs	r3, #1
 8009d16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009d18:	f7f9 f970 	bl	8002ffc <HAL_GetTick>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d803      	bhi.n	8009d30 <HAL_SPI_TransmitReceive+0x4a2>
 8009d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d2e:	d102      	bne.n	8009d36 <HAL_SPI_TransmitReceive+0x4a8>
 8009d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d103      	bne.n	8009d3e <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8009d36:	2303      	movs	r3, #3
 8009d38:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8009d3c:	e07d      	b.n	8009e3a <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f47f af37 	bne.w	8009bb8 <HAL_SPI_TransmitReceive+0x32a>
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f47f af30 	bne.w	8009bb8 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d60:	d146      	bne.n	8009df0 <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d68:	2201      	movs	r2, #1
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 f873 	bl	8009e58 <SPI_WaitFlagStateUntilTimeout>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d009      	beq.n	8009d8c <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d7c:	f043 0202 	orr.w	r2, r3, #2
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8009d84:	2303      	movs	r3, #3
 8009d86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 8009d8a:	e056      	b.n	8009e3a <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009d94:	d105      	bne.n	8009da2 <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	e026      	b.n	8009df0 <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	330c      	adds	r3, #12
 8009da8:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009db2:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d119      	bne.n	8009df0 <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f000 f846 	bl	8009e58 <SPI_WaitFlagStateUntilTimeout>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d009      	beq.n	8009de6 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dd6:	f043 0202 	orr.w	r2, r3, #2
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8009de4:	e029      	b.n	8009e3a <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8009dee:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	f003 0310 	and.w	r3, r3, #16
 8009dfa:	2b10      	cmp	r3, #16
 8009dfc:	d10d      	bne.n	8009e1a <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e02:	f043 0202 	orr.w	r2, r3, #2
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8009e12:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e1c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	f000 f990 	bl	800a144 <SPI_EndRxTxTransaction>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d006      	beq.n	8009e38 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2220      	movs	r2, #32
 8009e34:	661a      	str	r2, [r3, #96]	; 0x60
 8009e36:	e000      	b.n	8009e3a <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8009e38:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009e4a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3740      	adds	r7, #64	; 0x40
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
	...

08009e58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b088      	sub	sp, #32
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	603b      	str	r3, [r7, #0]
 8009e64:	4613      	mov	r3, r2
 8009e66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009e68:	f7f9 f8c8 	bl	8002ffc <HAL_GetTick>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e70:	1a9b      	subs	r3, r3, r2
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	4413      	add	r3, r2
 8009e76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009e78:	f7f9 f8c0 	bl	8002ffc <HAL_GetTick>
 8009e7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009e7e:	4b39      	ldr	r3, [pc, #228]	; (8009f64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	015b      	lsls	r3, r3, #5
 8009e84:	0d1b      	lsrs	r3, r3, #20
 8009e86:	69fa      	ldr	r2, [r7, #28]
 8009e88:	fb02 f303 	mul.w	r3, r2, r3
 8009e8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e8e:	e054      	b.n	8009f3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e96:	d050      	beq.n	8009f3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e98:	f7f9 f8b0 	bl	8002ffc <HAL_GetTick>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	69fa      	ldr	r2, [r7, #28]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d902      	bls.n	8009eae <SPI_WaitFlagStateUntilTimeout+0x56>
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d13d      	bne.n	8009f2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ebc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ec6:	d111      	bne.n	8009eec <SPI_WaitFlagStateUntilTimeout+0x94>
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ed0:	d004      	beq.n	8009edc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009eda:	d107      	bne.n	8009eec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009eea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ef4:	d10f      	bne.n	8009f16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f04:	601a      	str	r2, [r3, #0]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009f26:	2303      	movs	r3, #3
 8009f28:	e017      	b.n	8009f5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d101      	bne.n	8009f34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009f30:	2300      	movs	r3, #0
 8009f32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	3b01      	subs	r3, #1
 8009f38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	689a      	ldr	r2, [r3, #8]
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	4013      	ands	r3, r2
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	bf0c      	ite	eq
 8009f4a:	2301      	moveq	r3, #1
 8009f4c:	2300      	movne	r3, #0
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	461a      	mov	r2, r3
 8009f52:	79fb      	ldrb	r3, [r7, #7]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d19b      	bne.n	8009e90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3720      	adds	r7, #32
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	2000000c 	.word	0x2000000c

08009f68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b08a      	sub	sp, #40	; 0x28
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
 8009f74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009f7a:	f7f9 f83f 	bl	8002ffc <HAL_GetTick>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f82:	1a9b      	subs	r3, r3, r2
 8009f84:	683a      	ldr	r2, [r7, #0]
 8009f86:	4413      	add	r3, r2
 8009f88:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009f8a:	f7f9 f837 	bl	8002ffc <HAL_GetTick>
 8009f8e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	330c      	adds	r3, #12
 8009f96:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009f98:	4b3d      	ldr	r3, [pc, #244]	; (800a090 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	00da      	lsls	r2, r3, #3
 8009fa4:	1ad3      	subs	r3, r2, r3
 8009fa6:	0d1b      	lsrs	r3, r3, #20
 8009fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009faa:	fb02 f303 	mul.w	r3, r2, r3
 8009fae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009fb0:	e060      	b.n	800a074 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009fb8:	d107      	bne.n	8009fca <SPI_WaitFifoStateUntilTimeout+0x62>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d104      	bne.n	8009fca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009fc8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd0:	d050      	beq.n	800a074 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009fd2:	f7f9 f813 	bl	8002ffc <HAL_GetTick>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	6a3b      	ldr	r3, [r7, #32]
 8009fda:	1ad3      	subs	r3, r2, r3
 8009fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d902      	bls.n	8009fe8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d13d      	bne.n	800a064 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	685a      	ldr	r2, [r3, #4]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ff6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a000:	d111      	bne.n	800a026 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a00a:	d004      	beq.n	800a016 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a014:	d107      	bne.n	800a026 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a024:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a02e:	d10f      	bne.n	800a050 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a03e:	601a      	str	r2, [r3, #0]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a04e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a060:	2303      	movs	r3, #3
 800a062:	e010      	b.n	800a086 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d101      	bne.n	800a06e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a06a:	2300      	movs	r3, #0
 800a06c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	3b01      	subs	r3, #1
 800a072:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	689a      	ldr	r2, [r3, #8]
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	4013      	ands	r3, r2
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	429a      	cmp	r2, r3
 800a082:	d196      	bne.n	8009fb2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3728      	adds	r7, #40	; 0x28
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	2000000c 	.word	0x2000000c

0800a094 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b086      	sub	sp, #24
 800a098:	af02      	add	r7, sp, #8
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0a8:	d111      	bne.n	800a0ce <SPI_EndRxTransaction+0x3a>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0b2:	d004      	beq.n	800a0be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0bc:	d107      	bne.n	800a0ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0cc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	2180      	movs	r1, #128	; 0x80
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f7ff febd 	bl	8009e58 <SPI_WaitFlagStateUntilTimeout>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d007      	beq.n	800a0f4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0e8:	f043 0220 	orr.w	r2, r3, #32
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e023      	b.n	800a13c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0fc:	d11d      	bne.n	800a13a <SPI_EndRxTransaction+0xa6>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a106:	d004      	beq.n	800a112 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a110:	d113      	bne.n	800a13a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	2200      	movs	r2, #0
 800a11a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f7ff ff22 	bl	8009f68 <SPI_WaitFifoStateUntilTimeout>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d007      	beq.n	800a13a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a12e:	f043 0220 	orr.w	r2, r3, #32
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a136:	2303      	movs	r3, #3
 800a138:	e000      	b.n	800a13c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3710      	adds	r7, #16
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b086      	sub	sp, #24
 800a148:	af02      	add	r7, sp, #8
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	2200      	movs	r2, #0
 800a158:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f7ff ff03 	bl	8009f68 <SPI_WaitFifoStateUntilTimeout>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d007      	beq.n	800a178 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a16c:	f043 0220 	orr.w	r2, r3, #32
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a174:	2303      	movs	r3, #3
 800a176:	e027      	b.n	800a1c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	2200      	movs	r2, #0
 800a180:	2180      	movs	r1, #128	; 0x80
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f7ff fe68 	bl	8009e58 <SPI_WaitFlagStateUntilTimeout>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d007      	beq.n	800a19e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a192:	f043 0220 	orr.w	r2, r3, #32
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e014      	b.n	800a1c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	9300      	str	r3, [sp, #0]
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f7ff fedc 	bl	8009f68 <SPI_WaitFifoStateUntilTimeout>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d007      	beq.n	800a1c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1ba:	f043 0220 	orr.w	r2, r3, #32
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	e000      	b.n	800a1c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <LL_PWR_SetRadioBusyTrigger>:
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800a1d8:	4b06      	ldr	r3, [pc, #24]	; (800a1f4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a1e0:	4904      	ldr	r1, [pc, #16]	; (800a1f4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	608b      	str	r3, [r1, #8]
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bc80      	pop	{r7}
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	58000400 	.word	0x58000400

0800a1f8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800a1fc:	4b05      	ldr	r3, [pc, #20]	; (800a214 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800a1fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a202:	4a04      	ldr	r2, [pc, #16]	; (800a214 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800a204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a20c:	bf00      	nop
 800a20e:	46bd      	mov	sp, r7
 800a210:	bc80      	pop	{r7}
 800a212:	4770      	bx	lr
 800a214:	58000400 	.word	0x58000400

0800a218 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800a218:	b480      	push	{r7}
 800a21a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800a21c:	4b05      	ldr	r3, [pc, #20]	; (800a234 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800a21e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a222:	4a04      	ldr	r2, [pc, #16]	; (800a234 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800a224:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a22c:	bf00      	nop
 800a22e:	46bd      	mov	sp, r7
 800a230:	bc80      	pop	{r7}
 800a232:	4770      	bx	lr
 800a234:	58000400 	.word	0x58000400

0800a238 <LL_PWR_ClearFlag_RFBUSY>:
{
 800a238:	b480      	push	{r7}
 800a23a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800a23c:	4b03      	ldr	r3, [pc, #12]	; (800a24c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800a23e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a242:	619a      	str	r2, [r3, #24]
}
 800a244:	bf00      	nop
 800a246:	46bd      	mov	sp, r7
 800a248:	bc80      	pop	{r7}
 800a24a:	4770      	bx	lr
 800a24c:	58000400 	.word	0x58000400

0800a250 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800a250:	b480      	push	{r7}
 800a252:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800a254:	4b06      	ldr	r3, [pc, #24]	; (800a270 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800a256:	695b      	ldr	r3, [r3, #20]
 800a258:	f003 0302 	and.w	r3, r3, #2
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d101      	bne.n	800a264 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800a260:	2301      	movs	r3, #1
 800a262:	e000      	b.n	800a266 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	46bd      	mov	sp, r7
 800a26a:	bc80      	pop	{r7}
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	58000400 	.word	0x58000400

0800a274 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 800a274:	b480      	push	{r7}
 800a276:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800a278:	4b06      	ldr	r3, [pc, #24]	; (800a294 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	f003 0304 	and.w	r3, r3, #4
 800a280:	2b04      	cmp	r3, #4
 800a282:	d101      	bne.n	800a288 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800a284:	2301      	movs	r3, #1
 800a286:	e000      	b.n	800a28a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bc80      	pop	{r7}
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	58000400 	.word	0x58000400

0800a298 <LL_RCC_RF_DisableReset>:
{
 800a298:	b480      	push	{r7}
 800a29a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800a29c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a2a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a2ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800a2b0:	bf00      	nop
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bc80      	pop	{r7}
 800a2b6:	4770      	bx	lr

0800a2b8 <LL_RCC_IsRFUnderReset>:
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800a2bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2cc:	d101      	bne.n	800a2d2 <LL_RCC_IsRFUnderReset+0x1a>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e000      	b.n	800a2d4 <LL_RCC_IsRFUnderReset+0x1c>
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bc80      	pop	{r7}
 800a2da:	4770      	bx	lr

0800a2dc <LL_EXTI_EnableIT_32_63>:
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a2e4:	4b06      	ldr	r3, [pc, #24]	; (800a300 <LL_EXTI_EnableIT_32_63+0x24>)
 800a2e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a2ea:	4905      	ldr	r1, [pc, #20]	; (800a300 <LL_EXTI_EnableIT_32_63+0x24>)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bc80      	pop	{r7}
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	58000800 	.word	0x58000800

0800a304 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d103      	bne.n	800a31a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	73fb      	strb	r3, [r7, #15]
    return status;
 800a316:	7bfb      	ldrb	r3, [r7, #15]
 800a318:	e04b      	b.n	800a3b2 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	799b      	ldrb	r3, [r3, #6]
 800a322:	b2db      	uxtb	r3, r3
 800a324:	2b00      	cmp	r3, #0
 800a326:	d105      	bne.n	800a334 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7f8 fcbc 	bl	8002cac <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2202      	movs	r2, #2
 800a338:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 800a33a:	f7ff ffad 	bl	800a298 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a33e:	4b1f      	ldr	r3, [pc, #124]	; (800a3bc <HAL_SUBGHZ_Init+0xb8>)
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	4613      	mov	r3, r2
 800a344:	00db      	lsls	r3, r3, #3
 800a346:	1a9b      	subs	r3, r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	0cdb      	lsrs	r3, r3, #19
 800a34c:	2264      	movs	r2, #100	; 0x64
 800a34e:	fb02 f303 	mul.w	r3, r2, r3
 800a352:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d105      	bne.n	800a366 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2201      	movs	r2, #1
 800a362:	609a      	str	r2, [r3, #8]
      break;
 800a364:	e007      	b.n	800a376 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	3b01      	subs	r3, #1
 800a36a:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 800a36c:	f7ff ffa4 	bl	800a2b8 <LL_RCC_IsRFUnderReset>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1ee      	bne.n	800a354 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800a376:	f7ff ff3f 	bl	800a1f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800a37a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a37e:	f7ff ffad 	bl	800a2dc <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800a382:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a386:	f7ff ff23 	bl	800a1d0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800a38a:	f7ff ff55 	bl	800a238 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10a      	bne.n	800a3aa <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4618      	mov	r0, r3
 800a39a:	f000 faad 	bl	800a8f8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	719a      	strb	r2, [r3, #6]

  return status;
 800a3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	2000000c 	.word	0x2000000c

0800a3c0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	607a      	str	r2, [r7, #4]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	817b      	strh	r3, [r7, #10]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	799b      	ldrb	r3, [r3, #6]
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d14a      	bne.n	800a474 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	795b      	ldrb	r3, [r3, #5]
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d101      	bne.n	800a3ea <HAL_SUBGHZ_WriteRegisters+0x2a>
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	e045      	b.n	800a476 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2202      	movs	r2, #2
 800a3f4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f000 fb4c 	bl	800aa94 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a3fc:	f7ff ff0c 	bl	800a218 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800a400:	210d      	movs	r1, #13
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f000 fa98 	bl	800a938 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800a408:	897b      	ldrh	r3, [r7, #10]
 800a40a:	0a1b      	lsrs	r3, r3, #8
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	4619      	mov	r1, r3
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	f000 fa90 	bl	800a938 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800a418:	897b      	ldrh	r3, [r7, #10]
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	4619      	mov	r1, r3
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	f000 fa8a 	bl	800a938 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a424:	2300      	movs	r3, #0
 800a426:	82bb      	strh	r3, [r7, #20]
 800a428:	e00a      	b.n	800a440 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a42a:	8abb      	ldrh	r3, [r7, #20]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	4413      	add	r3, r2
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	4619      	mov	r1, r3
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	f000 fa7f 	bl	800a938 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a43a:	8abb      	ldrh	r3, [r7, #20]
 800a43c:	3301      	adds	r3, #1
 800a43e:	82bb      	strh	r3, [r7, #20]
 800a440:	8aba      	ldrh	r2, [r7, #20]
 800a442:	893b      	ldrh	r3, [r7, #8]
 800a444:	429a      	cmp	r2, r3
 800a446:	d3f0      	bcc.n	800a42a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a448:	f7ff fed6 	bl	800a1f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f000 fb45 	bl	800aadc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d002      	beq.n	800a460 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	75fb      	strb	r3, [r7, #23]
 800a45e:	e001      	b.n	800a464 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a460:	2300      	movs	r3, #0
 800a462:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2201      	movs	r2, #1
 800a468:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	715a      	strb	r2, [r3, #5]

    return status;
 800a470:	7dfb      	ldrb	r3, [r7, #23]
 800a472:	e000      	b.n	800a476 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a474:	2302      	movs	r3, #2
  }
}
 800a476:	4618      	mov	r0, r3
 800a478:	3718      	adds	r7, #24
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b088      	sub	sp, #32
 800a482:	af00      	add	r7, sp, #0
 800a484:	60f8      	str	r0, [r7, #12]
 800a486:	607a      	str	r2, [r7, #4]
 800a488:	461a      	mov	r2, r3
 800a48a:	460b      	mov	r3, r1
 800a48c:	817b      	strh	r3, [r7, #10]
 800a48e:	4613      	mov	r3, r2
 800a490:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	799b      	ldrb	r3, [r3, #6]
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d14a      	bne.n	800a536 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	795b      	ldrb	r3, [r3, #5]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d101      	bne.n	800a4ac <HAL_SUBGHZ_ReadRegisters+0x2e>
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	e045      	b.n	800a538 <HAL_SUBGHZ_ReadRegisters+0xba>
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	f000 faee 	bl	800aa94 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a4b8:	f7ff feae 	bl	800a218 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800a4bc:	211d      	movs	r1, #29
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f000 fa3a 	bl	800a938 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800a4c4:	897b      	ldrh	r3, [r7, #10]
 800a4c6:	0a1b      	lsrs	r3, r3, #8
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f000 fa32 	bl	800a938 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800a4d4:	897b      	ldrh	r3, [r7, #10]
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	4619      	mov	r1, r3
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f000 fa2c 	bl	800a938 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f000 fa28 	bl	800a938 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	82fb      	strh	r3, [r7, #22]
 800a4ec:	e009      	b.n	800a502 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a4ee:	69b9      	ldr	r1, [r7, #24]
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f000 fa77 	bl	800a9e4 <SUBGHZSPI_Receive>
      pData++;
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a4fc:	8afb      	ldrh	r3, [r7, #22]
 800a4fe:	3301      	adds	r3, #1
 800a500:	82fb      	strh	r3, [r7, #22]
 800a502:	8afa      	ldrh	r2, [r7, #22]
 800a504:	893b      	ldrh	r3, [r7, #8]
 800a506:	429a      	cmp	r2, r3
 800a508:	d3f1      	bcc.n	800a4ee <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a50a:	f7ff fe75 	bl	800a1f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f000 fae4 	bl	800aadc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d002      	beq.n	800a522 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	77fb      	strb	r3, [r7, #31]
 800a520:	e001      	b.n	800a526 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2201      	movs	r2, #1
 800a52a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	715a      	strb	r2, [r3, #5]

    return status;
 800a532:	7ffb      	ldrb	r3, [r7, #31]
 800a534:	e000      	b.n	800a538 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800a536:	2302      	movs	r3, #2
  }
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3720      	adds	r7, #32
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b086      	sub	sp, #24
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	607a      	str	r2, [r7, #4]
 800a54a:	461a      	mov	r2, r3
 800a54c:	460b      	mov	r3, r1
 800a54e:	72fb      	strb	r3, [r7, #11]
 800a550:	4613      	mov	r3, r2
 800a552:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	799b      	ldrb	r3, [r3, #6]
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d14a      	bne.n	800a5f4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	795b      	ldrb	r3, [r3, #5]
 800a562:	2b01      	cmp	r3, #1
 800a564:	d101      	bne.n	800a56a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800a566:	2302      	movs	r3, #2
 800a568:	e045      	b.n	800a5f6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2201      	movs	r2, #1
 800a56e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	f000 fa8f 	bl	800aa94 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800a576:	7afb      	ldrb	r3, [r7, #11]
 800a578:	2b84      	cmp	r3, #132	; 0x84
 800a57a:	d002      	beq.n	800a582 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800a57c:	7afb      	ldrb	r3, [r7, #11]
 800a57e:	2b94      	cmp	r3, #148	; 0x94
 800a580:	d103      	bne.n	800a58a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2201      	movs	r2, #1
 800a586:	711a      	strb	r2, [r3, #4]
 800a588:	e002      	b.n	800a590 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2200      	movs	r2, #0
 800a58e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a590:	f7ff fe42 	bl	800a218 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a594:	7afb      	ldrb	r3, [r7, #11]
 800a596:	4619      	mov	r1, r3
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f000 f9cd 	bl	800a938 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a59e:	2300      	movs	r3, #0
 800a5a0:	82bb      	strh	r3, [r7, #20]
 800a5a2:	e00a      	b.n	800a5ba <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a5a4:	8abb      	ldrh	r3, [r7, #20]
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f000 f9c2 	bl	800a938 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a5b4:	8abb      	ldrh	r3, [r7, #20]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	82bb      	strh	r3, [r7, #20]
 800a5ba:	8aba      	ldrh	r2, [r7, #20]
 800a5bc:	893b      	ldrh	r3, [r7, #8]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d3f0      	bcc.n	800a5a4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a5c2:	f7ff fe19 	bl	800a1f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800a5c6:	7afb      	ldrb	r3, [r7, #11]
 800a5c8:	2b84      	cmp	r3, #132	; 0x84
 800a5ca:	d002      	beq.n	800a5d2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f000 fa85 	bl	800aadc <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d002      	beq.n	800a5e0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	75fb      	strb	r3, [r7, #23]
 800a5de:	e001      	b.n	800a5e4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	715a      	strb	r2, [r3, #5]

    return status;
 800a5f0:	7dfb      	ldrb	r3, [r7, #23]
 800a5f2:	e000      	b.n	800a5f6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a5f4:	2302      	movs	r3, #2
  }
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3718      	adds	r7, #24
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b088      	sub	sp, #32
 800a602:	af00      	add	r7, sp, #0
 800a604:	60f8      	str	r0, [r7, #12]
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	461a      	mov	r2, r3
 800a60a:	460b      	mov	r3, r1
 800a60c:	72fb      	strb	r3, [r7, #11]
 800a60e:	4613      	mov	r3, r2
 800a610:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	799b      	ldrb	r3, [r3, #6]
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d13d      	bne.n	800a69c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	795b      	ldrb	r3, [r3, #5]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d101      	bne.n	800a62c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800a628:	2302      	movs	r3, #2
 800a62a:	e038      	b.n	800a69e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2201      	movs	r2, #1
 800a630:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f000 fa2e 	bl	800aa94 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a638:	f7ff fdee 	bl	800a218 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a63c:	7afb      	ldrb	r3, [r7, #11]
 800a63e:	4619      	mov	r1, r3
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f000 f979 	bl	800a938 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a646:	2100      	movs	r1, #0
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f000 f975 	bl	800a938 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a64e:	2300      	movs	r3, #0
 800a650:	82fb      	strh	r3, [r7, #22]
 800a652:	e009      	b.n	800a668 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a654:	69b9      	ldr	r1, [r7, #24]
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f000 f9c4 	bl	800a9e4 <SUBGHZSPI_Receive>
      pData++;
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	3301      	adds	r3, #1
 800a660:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a662:	8afb      	ldrh	r3, [r7, #22]
 800a664:	3301      	adds	r3, #1
 800a666:	82fb      	strh	r3, [r7, #22]
 800a668:	8afa      	ldrh	r2, [r7, #22]
 800a66a:	893b      	ldrh	r3, [r7, #8]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d3f1      	bcc.n	800a654 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a670:	f7ff fdc2 	bl	800a1f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f000 fa31 	bl	800aadc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d002      	beq.n	800a688 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	77fb      	strb	r3, [r7, #31]
 800a686:	e001      	b.n	800a68c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800a688:	2300      	movs	r3, #0
 800a68a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2201      	movs	r2, #1
 800a690:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	715a      	strb	r2, [r3, #5]

    return status;
 800a698:	7ffb      	ldrb	r3, [r7, #31]
 800a69a:	e000      	b.n	800a69e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a69c:	2302      	movs	r3, #2
  }
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3720      	adds	r7, #32
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b086      	sub	sp, #24
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	60f8      	str	r0, [r7, #12]
 800a6ae:	607a      	str	r2, [r7, #4]
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	72fb      	strb	r3, [r7, #11]
 800a6b6:	4613      	mov	r3, r2
 800a6b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	799b      	ldrb	r3, [r3, #6]
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d13e      	bne.n	800a742 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	795b      	ldrb	r3, [r3, #5]
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d101      	bne.n	800a6d0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	e039      	b.n	800a744 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f000 f9dc 	bl	800aa94 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a6dc:	f7ff fd9c 	bl	800a218 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800a6e0:	210e      	movs	r1, #14
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f000 f928 	bl	800a938 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a6e8:	7afb      	ldrb	r3, [r7, #11]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f000 f923 	bl	800a938 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	82bb      	strh	r3, [r7, #20]
 800a6f6:	e00a      	b.n	800a70e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a6f8:	8abb      	ldrh	r3, [r7, #20]
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	4619      	mov	r1, r3
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f000 f918 	bl	800a938 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a708:	8abb      	ldrh	r3, [r7, #20]
 800a70a:	3301      	adds	r3, #1
 800a70c:	82bb      	strh	r3, [r7, #20]
 800a70e:	8aba      	ldrh	r2, [r7, #20]
 800a710:	893b      	ldrh	r3, [r7, #8]
 800a712:	429a      	cmp	r2, r3
 800a714:	d3f0      	bcc.n	800a6f8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a716:	f7ff fd6f 	bl	800a1f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f000 f9de 	bl	800aadc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d002      	beq.n	800a72e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	75fb      	strb	r3, [r7, #23]
 800a72c:	e001      	b.n	800a732 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2201      	movs	r2, #1
 800a736:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	715a      	strb	r2, [r3, #5]

    return status;
 800a73e:	7dfb      	ldrb	r3, [r7, #23]
 800a740:	e000      	b.n	800a744 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a742:	2302      	movs	r3, #2
  }
}
 800a744:	4618      	mov	r0, r3
 800a746:	3718      	adds	r7, #24
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b088      	sub	sp, #32
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	607a      	str	r2, [r7, #4]
 800a756:	461a      	mov	r2, r3
 800a758:	460b      	mov	r3, r1
 800a75a:	72fb      	strb	r3, [r7, #11]
 800a75c:	4613      	mov	r3, r2
 800a75e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	799b      	ldrb	r3, [r3, #6]
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d141      	bne.n	800a7f2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	795b      	ldrb	r3, [r3, #5]
 800a772:	2b01      	cmp	r3, #1
 800a774:	d101      	bne.n	800a77a <HAL_SUBGHZ_ReadBuffer+0x2e>
 800a776:	2302      	movs	r3, #2
 800a778:	e03c      	b.n	800a7f4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2201      	movs	r2, #1
 800a77e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f000 f987 	bl	800aa94 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a786:	f7ff fd47 	bl	800a218 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800a78a:	211e      	movs	r1, #30
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f000 f8d3 	bl	800a938 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a792:	7afb      	ldrb	r3, [r7, #11]
 800a794:	4619      	mov	r1, r3
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f000 f8ce 	bl	800a938 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a79c:	2100      	movs	r1, #0
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f000 f8ca 	bl	800a938 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	82fb      	strh	r3, [r7, #22]
 800a7a8:	e009      	b.n	800a7be <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a7aa:	69b9      	ldr	r1, [r7, #24]
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f000 f919 	bl	800a9e4 <SUBGHZSPI_Receive>
      pData++;
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a7b8:	8afb      	ldrh	r3, [r7, #22]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	82fb      	strh	r3, [r7, #22]
 800a7be:	8afa      	ldrh	r2, [r7, #22]
 800a7c0:	893b      	ldrh	r3, [r7, #8]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d3f1      	bcc.n	800a7aa <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a7c6:	f7ff fd17 	bl	800a1f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f000 f986 	bl	800aadc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d002      	beq.n	800a7de <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	77fb      	strb	r3, [r7, #31]
 800a7dc:	e001      	b.n	800a7e2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	715a      	strb	r2, [r3, #5]

    return status;
 800a7ee:	7ffb      	ldrb	r3, [r7, #31]
 800a7f0:	e000      	b.n	800a7f4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a7f2:	2302      	movs	r3, #2
  }
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3720      	adds	r7, #32
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800a804:	2300      	movs	r3, #0
 800a806:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800a808:	f107 020c 	add.w	r2, r7, #12
 800a80c:	2302      	movs	r3, #2
 800a80e:	2112      	movs	r1, #18
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7ff fef4 	bl	800a5fe <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800a816:	7b3b      	ldrb	r3, [r7, #12]
 800a818:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800a81a:	89fb      	ldrh	r3, [r7, #14]
 800a81c:	021b      	lsls	r3, r3, #8
 800a81e:	b21a      	sxth	r2, r3
 800a820:	7b7b      	ldrb	r3, [r7, #13]
 800a822:	b21b      	sxth	r3, r3
 800a824:	4313      	orrs	r3, r2
 800a826:	b21b      	sxth	r3, r3
 800a828:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800a82a:	89fb      	ldrh	r3, [r7, #14]
 800a82c:	f003 0301 	and.w	r3, r3, #1
 800a830:	2b00      	cmp	r3, #0
 800a832:	d002      	beq.n	800a83a <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f014 fd3f 	bl	801f2b8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800a83a:	89fb      	ldrh	r3, [r7, #14]
 800a83c:	085b      	lsrs	r3, r3, #1
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	2b00      	cmp	r3, #0
 800a844:	d002      	beq.n	800a84c <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f014 fd44 	bl	801f2d4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800a84c:	89fb      	ldrh	r3, [r7, #14]
 800a84e:	089b      	lsrs	r3, r3, #2
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	2b00      	cmp	r3, #0
 800a856:	d002      	beq.n	800a85e <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f014 fd93 	bl	801f384 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800a85e:	89fb      	ldrh	r3, [r7, #14]
 800a860:	08db      	lsrs	r3, r3, #3
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	2b00      	cmp	r3, #0
 800a868:	d002      	beq.n	800a870 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f014 fd98 	bl	801f3a0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800a870:	89fb      	ldrh	r3, [r7, #14]
 800a872:	091b      	lsrs	r3, r3, #4
 800a874:	f003 0301 	and.w	r3, r3, #1
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d002      	beq.n	800a882 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f014 fd9d 	bl	801f3bc <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800a882:	89fb      	ldrh	r3, [r7, #14]
 800a884:	095b      	lsrs	r3, r3, #5
 800a886:	f003 0301 	and.w	r3, r3, #1
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d002      	beq.n	800a894 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f014 fd6a 	bl	801f368 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800a894:	89fb      	ldrh	r3, [r7, #14]
 800a896:	099b      	lsrs	r3, r3, #6
 800a898:	f003 0301 	and.w	r3, r3, #1
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d002      	beq.n	800a8a6 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f014 fd25 	bl	801f2f0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800a8a6:	89fb      	ldrh	r3, [r7, #14]
 800a8a8:	09db      	lsrs	r3, r3, #7
 800a8aa:	f003 0301 	and.w	r3, r3, #1
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00e      	beq.n	800a8d0 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800a8b2:	89fb      	ldrh	r3, [r7, #14]
 800a8b4:	0a1b      	lsrs	r3, r3, #8
 800a8b6:	f003 0301 	and.w	r3, r3, #1
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d004      	beq.n	800a8c8 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800a8be:	2101      	movs	r1, #1
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f014 fd23 	bl	801f30c <HAL_SUBGHZ_CADStatusCallback>
 800a8c6:	e003      	b.n	800a8d0 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f014 fd1e 	bl	801f30c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800a8d0:	89fb      	ldrh	r3, [r7, #14]
 800a8d2:	0a5b      	lsrs	r3, r3, #9
 800a8d4:	f003 0301 	and.w	r3, r3, #1
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f014 fd33 	bl	801f348 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 800a8e2:	f107 020c 	add.w	r2, r7, #12
 800a8e6:	2302      	movs	r3, #2
 800a8e8:	2102      	movs	r1, #2
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff fe28 	bl	800a540 <HAL_SUBGHZ_ExecSetCmd>
}
 800a8f0:	bf00      	nop
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a900:	4b0c      	ldr	r3, [pc, #48]	; (800a934 <SUBGHZSPI_Init+0x3c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a0b      	ldr	r2, [pc, #44]	; (800a934 <SUBGHZSPI_Init+0x3c>)
 800a906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a90a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800a90c:	4a09      	ldr	r2, [pc, #36]	; (800a934 <SUBGHZSPI_Init+0x3c>)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800a914:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800a916:	4b07      	ldr	r3, [pc, #28]	; (800a934 <SUBGHZSPI_Init+0x3c>)
 800a918:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800a91c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a91e:	4b05      	ldr	r3, [pc, #20]	; (800a934 <SUBGHZSPI_Init+0x3c>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a04      	ldr	r2, [pc, #16]	; (800a934 <SUBGHZSPI_Init+0x3c>)
 800a924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a928:	6013      	str	r3, [r2, #0]
}
 800a92a:	bf00      	nop
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	bc80      	pop	{r7}
 800a932:	4770      	bx	lr
 800a934:	58010000 	.word	0x58010000

0800a938 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800a938:	b480      	push	{r7}
 800a93a:	b087      	sub	sp, #28
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	460b      	mov	r3, r1
 800a942:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a948:	4b23      	ldr	r3, [pc, #140]	; (800a9d8 <SUBGHZSPI_Transmit+0xa0>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	4613      	mov	r3, r2
 800a94e:	00db      	lsls	r3, r3, #3
 800a950:	1a9b      	subs	r3, r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	0cdb      	lsrs	r3, r3, #19
 800a956:	2264      	movs	r2, #100	; 0x64
 800a958:	fb02 f303 	mul.w	r3, r2, r3
 800a95c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d105      	bne.n	800a970 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	609a      	str	r2, [r3, #8]
      break;
 800a96e:	e008      	b.n	800a982 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	3b01      	subs	r3, #1
 800a974:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a976:	4b19      	ldr	r3, [pc, #100]	; (800a9dc <SUBGHZSPI_Transmit+0xa4>)
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	f003 0302 	and.w	r3, r3, #2
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d1ed      	bne.n	800a95e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a982:	4b17      	ldr	r3, [pc, #92]	; (800a9e0 <SUBGHZSPI_Transmit+0xa8>)
 800a984:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	78fa      	ldrb	r2, [r7, #3]
 800a98a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a98c:	4b12      	ldr	r3, [pc, #72]	; (800a9d8 <SUBGHZSPI_Transmit+0xa0>)
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	4613      	mov	r3, r2
 800a992:	00db      	lsls	r3, r3, #3
 800a994:	1a9b      	subs	r3, r3, r2
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	0cdb      	lsrs	r3, r3, #19
 800a99a:	2264      	movs	r2, #100	; 0x64
 800a99c:	fb02 f303 	mul.w	r3, r2, r3
 800a9a0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d105      	bne.n	800a9b4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	609a      	str	r2, [r3, #8]
      break;
 800a9b2:	e008      	b.n	800a9c6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a9ba:	4b08      	ldr	r3, [pc, #32]	; (800a9dc <SUBGHZSPI_Transmit+0xa4>)
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	f003 0301 	and.w	r3, r3, #1
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d1ed      	bne.n	800a9a2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800a9c6:	4b05      	ldr	r3, [pc, #20]	; (800a9dc <SUBGHZSPI_Transmit+0xa4>)
 800a9c8:	68db      	ldr	r3, [r3, #12]

  return status;
 800a9ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	371c      	adds	r7, #28
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bc80      	pop	{r7}
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	2000000c 	.word	0x2000000c
 800a9dc:	58010000 	.word	0x58010000
 800a9e0:	5801000c 	.word	0x5801000c

0800a9e4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b087      	sub	sp, #28
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a9f2:	4b25      	ldr	r3, [pc, #148]	; (800aa88 <SUBGHZSPI_Receive+0xa4>)
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	00db      	lsls	r3, r3, #3
 800a9fa:	1a9b      	subs	r3, r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	0cdb      	lsrs	r3, r3, #19
 800aa00:	2264      	movs	r2, #100	; 0x64
 800aa02:	fb02 f303 	mul.w	r3, r2, r3
 800aa06:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d105      	bne.n	800aa1a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2201      	movs	r2, #1
 800aa16:	609a      	str	r2, [r3, #8]
      break;
 800aa18:	e008      	b.n	800aa2c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800aa20:	4b1a      	ldr	r3, [pc, #104]	; (800aa8c <SUBGHZSPI_Receive+0xa8>)
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	f003 0302 	and.w	r3, r3, #2
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	d1ed      	bne.n	800aa08 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800aa2c:	4b18      	ldr	r3, [pc, #96]	; (800aa90 <SUBGHZSPI_Receive+0xac>)
 800aa2e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	22ff      	movs	r2, #255	; 0xff
 800aa34:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800aa36:	4b14      	ldr	r3, [pc, #80]	; (800aa88 <SUBGHZSPI_Receive+0xa4>)
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	00db      	lsls	r3, r3, #3
 800aa3e:	1a9b      	subs	r3, r3, r2
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	0cdb      	lsrs	r3, r3, #19
 800aa44:	2264      	movs	r2, #100	; 0x64
 800aa46:	fb02 f303 	mul.w	r3, r2, r3
 800aa4a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d105      	bne.n	800aa5e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2201      	movs	r2, #1
 800aa5a:	609a      	str	r2, [r3, #8]
      break;
 800aa5c:	e008      	b.n	800aa70 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800aa64:	4b09      	ldr	r3, [pc, #36]	; (800aa8c <SUBGHZSPI_Receive+0xa8>)
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	f003 0301 	and.w	r3, r3, #1
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d1ed      	bne.n	800aa4c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800aa70:	4b06      	ldr	r3, [pc, #24]	; (800aa8c <SUBGHZSPI_Receive+0xa8>)
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	b2da      	uxtb	r2, r3
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	701a      	strb	r2, [r3, #0]

  return status;
 800aa7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	371c      	adds	r7, #28
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bc80      	pop	{r7}
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	2000000c 	.word	0x2000000c
 800aa8c:	58010000 	.word	0x58010000
 800aa90:	5801000c 	.word	0x5801000c

0800aa94 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	791b      	ldrb	r3, [r3, #4]
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d111      	bne.n	800aac8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800aaa4:	4b0c      	ldr	r3, [pc, #48]	; (800aad8 <SUBGHZ_CheckDeviceReady+0x44>)
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	005b      	lsls	r3, r3, #1
 800aaac:	4413      	add	r3, r2
 800aaae:	00db      	lsls	r3, r3, #3
 800aab0:	0c1b      	lsrs	r3, r3, #16
 800aab2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800aab4:	f7ff fbb0 	bl	800a218 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	3b01      	subs	r3, #1
 800aabc:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1f9      	bne.n	800aab8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800aac4:	f7ff fb98 	bl	800a1f8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 f807 	bl	800aadc <SUBGHZ_WaitOnBusy>
 800aace:	4603      	mov	r3, r0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	2000000c 	.word	0x2000000c

0800aadc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b086      	sub	sp, #24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800aae8:	4b12      	ldr	r3, [pc, #72]	; (800ab34 <SUBGHZ_WaitOnBusy+0x58>)
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	4613      	mov	r3, r2
 800aaee:	005b      	lsls	r3, r3, #1
 800aaf0:	4413      	add	r3, r2
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	0d1b      	lsrs	r3, r3, #20
 800aaf6:	2264      	movs	r2, #100	; 0x64
 800aaf8:	fb02 f303 	mul.w	r3, r2, r3
 800aafc:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800aafe:	f7ff fbb9 	bl	800a274 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800ab02:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d105      	bne.n	800ab16 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2202      	movs	r2, #2
 800ab12:	609a      	str	r2, [r3, #8]
      break;
 800ab14:	e009      	b.n	800ab2a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800ab1c:	f7ff fb98 	bl	800a250 <LL_PWR_IsActiveFlag_RFBUSYS>
 800ab20:	4602      	mov	r2, r0
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	4013      	ands	r3, r2
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d0e9      	beq.n	800aafe <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800ab2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3718      	adds	r7, #24
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	2000000c 	.word	0x2000000c

0800ab38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d101      	bne.n	800ab4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	e049      	b.n	800abde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d106      	bne.n	800ab64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7f8 fb48 	bl	80031f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2202      	movs	r2, #2
 800ab68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	3304      	adds	r3, #4
 800ab74:	4619      	mov	r1, r3
 800ab76:	4610      	mov	r0, r2
 800ab78:	f000 f9c6 	bl	800af08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2201      	movs	r2, #1
 800abd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abdc:	2300      	movs	r3, #0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3708      	adds	r7, #8
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
	...

0800abe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d001      	beq.n	800ac00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	e036      	b.n	800ac6e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68da      	ldr	r2, [r3, #12]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f042 0201 	orr.w	r2, r2, #1
 800ac16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a16      	ldr	r2, [pc, #88]	; (800ac78 <HAL_TIM_Base_Start_IT+0x90>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d004      	beq.n	800ac2c <HAL_TIM_Base_Start_IT+0x44>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac2a:	d115      	bne.n	800ac58 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	689a      	ldr	r2, [r3, #8]
 800ac32:	4b12      	ldr	r3, [pc, #72]	; (800ac7c <HAL_TIM_Base_Start_IT+0x94>)
 800ac34:	4013      	ands	r3, r2
 800ac36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2b06      	cmp	r3, #6
 800ac3c:	d015      	beq.n	800ac6a <HAL_TIM_Base_Start_IT+0x82>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac44:	d011      	beq.n	800ac6a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f042 0201 	orr.w	r2, r2, #1
 800ac54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac56:	e008      	b.n	800ac6a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f042 0201 	orr.w	r2, r2, #1
 800ac66:	601a      	str	r2, [r3, #0]
 800ac68:	e000      	b.n	800ac6c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3714      	adds	r7, #20
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bc80      	pop	{r7}
 800ac76:	4770      	bx	lr
 800ac78:	40012c00 	.word	0x40012c00
 800ac7c:	00010007 	.word	0x00010007

0800ac80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	691b      	ldr	r3, [r3, #16]
 800ac8e:	f003 0302 	and.w	r3, r3, #2
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d122      	bne.n	800acdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	f003 0302 	and.w	r3, r3, #2
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	d11b      	bne.n	800acdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f06f 0202 	mvn.w	r2, #2
 800acac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2201      	movs	r2, #1
 800acb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	699b      	ldr	r3, [r3, #24]
 800acba:	f003 0303 	and.w	r3, r3, #3
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d003      	beq.n	800acca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 f904 	bl	800aed0 <HAL_TIM_IC_CaptureCallback>
 800acc8:	e005      	b.n	800acd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f8f7 	bl	800aebe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f906 	bl	800aee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	691b      	ldr	r3, [r3, #16]
 800ace2:	f003 0304 	and.w	r3, r3, #4
 800ace6:	2b04      	cmp	r3, #4
 800ace8:	d122      	bne.n	800ad30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	f003 0304 	and.w	r3, r3, #4
 800acf4:	2b04      	cmp	r3, #4
 800acf6:	d11b      	bne.n	800ad30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f06f 0204 	mvn.w	r2, #4
 800ad00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2202      	movs	r2, #2
 800ad06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	699b      	ldr	r3, [r3, #24]
 800ad0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d003      	beq.n	800ad1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f8da 	bl	800aed0 <HAL_TIM_IC_CaptureCallback>
 800ad1c:	e005      	b.n	800ad2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 f8cd 	bl	800aebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 f8dc 	bl	800aee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	f003 0308 	and.w	r3, r3, #8
 800ad3a:	2b08      	cmp	r3, #8
 800ad3c:	d122      	bne.n	800ad84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	f003 0308 	and.w	r3, r3, #8
 800ad48:	2b08      	cmp	r3, #8
 800ad4a:	d11b      	bne.n	800ad84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f06f 0208 	mvn.w	r2, #8
 800ad54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2204      	movs	r2, #4
 800ad5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	69db      	ldr	r3, [r3, #28]
 800ad62:	f003 0303 	and.w	r3, r3, #3
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d003      	beq.n	800ad72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 f8b0 	bl	800aed0 <HAL_TIM_IC_CaptureCallback>
 800ad70:	e005      	b.n	800ad7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 f8a3 	bl	800aebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 f8b2 	bl	800aee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2200      	movs	r2, #0
 800ad82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	691b      	ldr	r3, [r3, #16]
 800ad8a:	f003 0310 	and.w	r3, r3, #16
 800ad8e:	2b10      	cmp	r3, #16
 800ad90:	d122      	bne.n	800add8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	f003 0310 	and.w	r3, r3, #16
 800ad9c:	2b10      	cmp	r3, #16
 800ad9e:	d11b      	bne.n	800add8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f06f 0210 	mvn.w	r2, #16
 800ada8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2208      	movs	r2, #8
 800adae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	69db      	ldr	r3, [r3, #28]
 800adb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d003      	beq.n	800adc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f886 	bl	800aed0 <HAL_TIM_IC_CaptureCallback>
 800adc4:	e005      	b.n	800add2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 f879 	bl	800aebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f888 	bl	800aee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	f003 0301 	and.w	r3, r3, #1
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d10e      	bne.n	800ae04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	f003 0301 	and.w	r3, r3, #1
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d107      	bne.n	800ae04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f06f 0201 	mvn.w	r2, #1
 800adfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f7f7 fbfa 	bl	80025f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae0e:	2b80      	cmp	r3, #128	; 0x80
 800ae10:	d10e      	bne.n	800ae30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae1c:	2b80      	cmp	r3, #128	; 0x80
 800ae1e:	d107      	bne.n	800ae30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ae28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f8d7 	bl	800afde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae3e:	d10e      	bne.n	800ae5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae4a:	2b80      	cmp	r3, #128	; 0x80
 800ae4c:	d107      	bne.n	800ae5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ae56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 f8c9 	bl	800aff0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae68:	2b40      	cmp	r3, #64	; 0x40
 800ae6a:	d10e      	bne.n	800ae8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae76:	2b40      	cmp	r3, #64	; 0x40
 800ae78:	d107      	bne.n	800ae8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ae82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 f835 	bl	800aef4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	691b      	ldr	r3, [r3, #16]
 800ae90:	f003 0320 	and.w	r3, r3, #32
 800ae94:	2b20      	cmp	r3, #32
 800ae96:	d10e      	bne.n	800aeb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	f003 0320 	and.w	r3, r3, #32
 800aea2:	2b20      	cmp	r3, #32
 800aea4:	d107      	bne.n	800aeb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f06f 0220 	mvn.w	r2, #32
 800aeae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 f88b 	bl	800afcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aeb6:	bf00      	nop
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aebe:	b480      	push	{r7}
 800aec0:	b083      	sub	sp, #12
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aec6:	bf00      	nop
 800aec8:	370c      	adds	r7, #12
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bc80      	pop	{r7}
 800aece:	4770      	bx	lr

0800aed0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aed8:	bf00      	nop
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	bc80      	pop	{r7}
 800aee0:	4770      	bx	lr

0800aee2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aee2:	b480      	push	{r7}
 800aee4:	b083      	sub	sp, #12
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aeea:	bf00      	nop
 800aeec:	370c      	adds	r7, #12
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bc80      	pop	{r7}
 800aef2:	4770      	bx	lr

0800aef4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aefc:	bf00      	nop
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	bc80      	pop	{r7}
 800af04:	4770      	bx	lr
	...

0800af08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4a29      	ldr	r2, [pc, #164]	; (800afc0 <TIM_Base_SetConfig+0xb8>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d003      	beq.n	800af28 <TIM_Base_SetConfig+0x20>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af26:	d108      	bne.n	800af3a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	4313      	orrs	r3, r2
 800af38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4a20      	ldr	r2, [pc, #128]	; (800afc0 <TIM_Base_SetConfig+0xb8>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d00b      	beq.n	800af5a <TIM_Base_SetConfig+0x52>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af48:	d007      	beq.n	800af5a <TIM_Base_SetConfig+0x52>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	4a1d      	ldr	r2, [pc, #116]	; (800afc4 <TIM_Base_SetConfig+0xbc>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d003      	beq.n	800af5a <TIM_Base_SetConfig+0x52>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4a1c      	ldr	r2, [pc, #112]	; (800afc8 <TIM_Base_SetConfig+0xc0>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d108      	bne.n	800af6c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	4313      	orrs	r3, r2
 800af6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	695b      	ldr	r3, [r3, #20]
 800af76:	4313      	orrs	r3, r2
 800af78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	689a      	ldr	r2, [r3, #8]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a0b      	ldr	r2, [pc, #44]	; (800afc0 <TIM_Base_SetConfig+0xb8>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d007      	beq.n	800afa8 <TIM_Base_SetConfig+0xa0>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a0a      	ldr	r2, [pc, #40]	; (800afc4 <TIM_Base_SetConfig+0xbc>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d003      	beq.n	800afa8 <TIM_Base_SetConfig+0xa0>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4a09      	ldr	r2, [pc, #36]	; (800afc8 <TIM_Base_SetConfig+0xc0>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d103      	bne.n	800afb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	691a      	ldr	r2, [r3, #16]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	615a      	str	r2, [r3, #20]
}
 800afb6:	bf00      	nop
 800afb8:	3714      	adds	r7, #20
 800afba:	46bd      	mov	sp, r7
 800afbc:	bc80      	pop	{r7}
 800afbe:	4770      	bx	lr
 800afc0:	40012c00 	.word	0x40012c00
 800afc4:	40014400 	.word	0x40014400
 800afc8:	40014800 	.word	0x40014800

0800afcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800afcc:	b480      	push	{r7}
 800afce:	b083      	sub	sp, #12
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800afd4:	bf00      	nop
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	bc80      	pop	{r7}
 800afdc:	4770      	bx	lr

0800afde <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afde:	b480      	push	{r7}
 800afe0:	b083      	sub	sp, #12
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afe6:	bf00      	nop
 800afe8:	370c      	adds	r7, #12
 800afea:	46bd      	mov	sp, r7
 800afec:	bc80      	pop	{r7}
 800afee:	4770      	bx	lr

0800aff0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aff8:	bf00      	nop
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	bc80      	pop	{r7}
 800b000:	4770      	bx	lr

0800b002 <LL_RCC_GetUSARTClockSource>:
{
 800b002:	b480      	push	{r7}
 800b004:	b083      	sub	sp, #12
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800b00a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b00e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	401a      	ands	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	041b      	lsls	r3, r3, #16
 800b01a:	4313      	orrs	r3, r2
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	bc80      	pop	{r7}
 800b024:	4770      	bx	lr

0800b026 <LL_RCC_GetLPUARTClockSource>:
{
 800b026:	b480      	push	{r7}
 800b028:	b083      	sub	sp, #12
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800b02e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b032:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4013      	ands	r3, r2
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	370c      	adds	r7, #12
 800b03e:	46bd      	mov	sp, r7
 800b040:	bc80      	pop	{r7}
 800b042:	4770      	bx	lr

0800b044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d101      	bne.n	800b056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	e042      	b.n	800b0dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d106      	bne.n	800b06e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7f8 fc51 	bl	8003910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2224      	movs	r2, #36	; 0x24
 800b072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f022 0201 	bic.w	r2, r2, #1
 800b084:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 fcde 	bl	800ba48 <UART_SetConfig>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d101      	bne.n	800b096 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	e022      	b.n	800b0dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d002      	beq.n	800b0a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 ff46 	bl	800bf30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	685a      	ldr	r2, [r3, #4]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b0b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	689a      	ldr	r2, [r3, #8]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b0c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f042 0201 	orr.w	r2, r2, #1
 800b0d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 ffcc 	bl	800c072 <UART_CheckIdleState>
 800b0da:	4603      	mov	r3, r0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b08a      	sub	sp, #40	; 0x28
 800b0e8:	af02      	add	r7, sp, #8
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	603b      	str	r3, [r7, #0]
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0fa:	2b20      	cmp	r3, #32
 800b0fc:	f040 8083 	bne.w	800b206 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d002      	beq.n	800b10c <HAL_UART_Transmit+0x28>
 800b106:	88fb      	ldrh	r3, [r7, #6]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d101      	bne.n	800b110 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e07b      	b.n	800b208 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b116:	2b01      	cmp	r3, #1
 800b118:	d101      	bne.n	800b11e <HAL_UART_Transmit+0x3a>
 800b11a:	2302      	movs	r3, #2
 800b11c:	e074      	b.n	800b208 <HAL_UART_Transmit+0x124>
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2201      	movs	r2, #1
 800b122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2200      	movs	r2, #0
 800b12a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2221      	movs	r2, #33	; 0x21
 800b132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b136:	f7f7 ff61 	bl	8002ffc <HAL_GetTick>
 800b13a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	88fa      	ldrh	r2, [r7, #6]
 800b140:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	88fa      	ldrh	r2, [r7, #6]
 800b148:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b154:	d108      	bne.n	800b168 <HAL_UART_Transmit+0x84>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	691b      	ldr	r3, [r3, #16]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d104      	bne.n	800b168 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b15e:	2300      	movs	r3, #0
 800b160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	61bb      	str	r3, [r7, #24]
 800b166:	e003      	b.n	800b170 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b16c:	2300      	movs	r3, #0
 800b16e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2200      	movs	r2, #0
 800b174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b178:	e02c      	b.n	800b1d4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	2200      	movs	r2, #0
 800b182:	2180      	movs	r1, #128	; 0x80
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f000 ffbf 	bl	800c108 <UART_WaitOnFlagUntilTimeout>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d001      	beq.n	800b194 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b190:	2303      	movs	r3, #3
 800b192:	e039      	b.n	800b208 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d10b      	bne.n	800b1b2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	881b      	ldrh	r3, [r3, #0]
 800b19e:	461a      	mov	r2, r3
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	3302      	adds	r3, #2
 800b1ae:	61bb      	str	r3, [r7, #24]
 800b1b0:	e007      	b.n	800b1c2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	781a      	ldrb	r2, [r3, #0]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	b29a      	uxth	r2, r3
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d1cc      	bne.n	800b17a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	2140      	movs	r1, #64	; 0x40
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f000 ff8c 	bl	800c108 <UART_WaitOnFlagUntilTimeout>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d001      	beq.n	800b1fa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b1f6:	2303      	movs	r3, #3
 800b1f8:	e006      	b.n	800b208 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2220      	movs	r2, #32
 800b1fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b202:	2300      	movs	r3, #0
 800b204:	e000      	b.n	800b208 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b206:	2302      	movs	r3, #2
  }
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3720      	adds	r7, #32
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b08a      	sub	sp, #40	; 0x28
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	4613      	mov	r3, r2
 800b21c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b224:	2b20      	cmp	r3, #32
 800b226:	d142      	bne.n	800b2ae <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d002      	beq.n	800b234 <HAL_UART_Receive_IT+0x24>
 800b22e:	88fb      	ldrh	r3, [r7, #6]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d101      	bne.n	800b238 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	e03b      	b.n	800b2b0 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d101      	bne.n	800b246 <HAL_UART_Receive_IT+0x36>
 800b242:	2302      	movs	r3, #2
 800b244:	e034      	b.n	800b2b0 <HAL_UART_Receive_IT+0xa0>
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2201      	movs	r2, #1
 800b24a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a17      	ldr	r2, [pc, #92]	; (800b2b8 <HAL_UART_Receive_IT+0xa8>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d01f      	beq.n	800b29e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d018      	beq.n	800b29e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	e853 3f00 	ldrex	r3, [r3]
 800b278:	613b      	str	r3, [r7, #16]
   return(result);
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b280:	627b      	str	r3, [r7, #36]	; 0x24
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	461a      	mov	r2, r3
 800b288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28a:	623b      	str	r3, [r7, #32]
 800b28c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28e:	69f9      	ldr	r1, [r7, #28]
 800b290:	6a3a      	ldr	r2, [r7, #32]
 800b292:	e841 2300 	strex	r3, r2, [r1]
 800b296:	61bb      	str	r3, [r7, #24]
   return(result);
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d1e6      	bne.n	800b26c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800b29e:	88fb      	ldrh	r3, [r7, #6]
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	68b9      	ldr	r1, [r7, #8]
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f000 fff7 	bl	800c298 <UART_Start_Receive_IT>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	e000      	b.n	800b2b0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b2ae:	2302      	movs	r3, #2
  }
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3728      	adds	r7, #40	; 0x28
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	40008000 	.word	0x40008000

0800b2bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b08a      	sub	sp, #40	; 0x28
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2d0:	2b20      	cmp	r3, #32
 800b2d2:	d17a      	bne.n	800b3ca <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d002      	beq.n	800b2e0 <HAL_UART_Transmit_DMA+0x24>
 800b2da:	88fb      	ldrh	r3, [r7, #6]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d101      	bne.n	800b2e4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	e073      	b.n	800b3cc <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d101      	bne.n	800b2f2 <HAL_UART_Transmit_DMA+0x36>
 800b2ee:	2302      	movs	r3, #2
 800b2f0:	e06c      	b.n	800b3cc <HAL_UART_Transmit_DMA+0x110>
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	88fa      	ldrh	r2, [r7, #6]
 800b304:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	88fa      	ldrh	r2, [r7, #6]
 800b30c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2200      	movs	r2, #0
 800b314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2221      	movs	r2, #33	; 0x21
 800b31c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b324:	2b00      	cmp	r3, #0
 800b326:	d02c      	beq.n	800b382 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b32c:	4a29      	ldr	r2, [pc, #164]	; (800b3d4 <HAL_UART_Transmit_DMA+0x118>)
 800b32e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b334:	4a28      	ldr	r2, [pc, #160]	; (800b3d8 <HAL_UART_Transmit_DMA+0x11c>)
 800b336:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b33c:	4a27      	ldr	r2, [pc, #156]	; (800b3dc <HAL_UART_Transmit_DMA+0x120>)
 800b33e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b344:	2200      	movs	r2, #0
 800b346:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b350:	4619      	mov	r1, r3
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	3328      	adds	r3, #40	; 0x28
 800b358:	461a      	mov	r2, r3
 800b35a:	88fb      	ldrh	r3, [r7, #6]
 800b35c:	f7fa f99e 	bl	800569c <HAL_DMA_Start_IT>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d00d      	beq.n	800b382 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2210      	movs	r2, #16
 800b36a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2220      	movs	r2, #32
 800b37a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	e024      	b.n	800b3cc <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2240      	movs	r2, #64	; 0x40
 800b388:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	3308      	adds	r3, #8
 800b398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	e853 3f00 	ldrex	r3, [r3]
 800b3a0:	613b      	str	r3, [r7, #16]
   return(result);
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3a8:	627b      	str	r3, [r7, #36]	; 0x24
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3308      	adds	r3, #8
 800b3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3b2:	623a      	str	r2, [r7, #32]
 800b3b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b6:	69f9      	ldr	r1, [r7, #28]
 800b3b8:	6a3a      	ldr	r2, [r7, #32]
 800b3ba:	e841 2300 	strex	r3, r2, [r1]
 800b3be:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d1e5      	bne.n	800b392 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	e000      	b.n	800b3cc <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800b3ca:	2302      	movs	r3, #2
  }
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3728      	adds	r7, #40	; 0x28
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	0800c783 	.word	0x0800c783
 800b3d8:	0800c81d 	.word	0x0800c81d
 800b3dc:	0800c997 	.word	0x0800c997

0800b3e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b0ba      	sub	sp, #232	; 0xe8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	69db      	ldr	r3, [r3, #28]
 800b3ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b406:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b40a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b40e:	4013      	ands	r3, r2
 800b410:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b414:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d11b      	bne.n	800b454 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b41c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b420:	f003 0320 	and.w	r3, r3, #32
 800b424:	2b00      	cmp	r3, #0
 800b426:	d015      	beq.n	800b454 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b42c:	f003 0320 	and.w	r3, r3, #32
 800b430:	2b00      	cmp	r3, #0
 800b432:	d105      	bne.n	800b440 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d009      	beq.n	800b454 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b444:	2b00      	cmp	r3, #0
 800b446:	f000 82d6 	beq.w	800b9f6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	4798      	blx	r3
      }
      return;
 800b452:	e2d0      	b.n	800b9f6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f000 811f 	beq.w	800b69c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b45e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b462:	4b8b      	ldr	r3, [pc, #556]	; (800b690 <HAL_UART_IRQHandler+0x2b0>)
 800b464:	4013      	ands	r3, r2
 800b466:	2b00      	cmp	r3, #0
 800b468:	d106      	bne.n	800b478 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b46a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b46e:	4b89      	ldr	r3, [pc, #548]	; (800b694 <HAL_UART_IRQHandler+0x2b4>)
 800b470:	4013      	ands	r3, r2
 800b472:	2b00      	cmp	r3, #0
 800b474:	f000 8112 	beq.w	800b69c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b47c:	f003 0301 	and.w	r3, r3, #1
 800b480:	2b00      	cmp	r3, #0
 800b482:	d011      	beq.n	800b4a8 <HAL_UART_IRQHandler+0xc8>
 800b484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00b      	beq.n	800b4a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2201      	movs	r2, #1
 800b496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b49e:	f043 0201 	orr.w	r2, r3, #1
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4ac:	f003 0302 	and.w	r3, r3, #2
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d011      	beq.n	800b4d8 <HAL_UART_IRQHandler+0xf8>
 800b4b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4b8:	f003 0301 	and.w	r3, r3, #1
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00b      	beq.n	800b4d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2202      	movs	r2, #2
 800b4c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4ce:	f043 0204 	orr.w	r2, r3, #4
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4dc:	f003 0304 	and.w	r3, r3, #4
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d011      	beq.n	800b508 <HAL_UART_IRQHandler+0x128>
 800b4e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4e8:	f003 0301 	and.w	r3, r3, #1
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00b      	beq.n	800b508 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2204      	movs	r2, #4
 800b4f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4fe:	f043 0202 	orr.w	r2, r3, #2
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b50c:	f003 0308 	and.w	r3, r3, #8
 800b510:	2b00      	cmp	r3, #0
 800b512:	d017      	beq.n	800b544 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b518:	f003 0320 	and.w	r3, r3, #32
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d105      	bne.n	800b52c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b520:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b524:	4b5a      	ldr	r3, [pc, #360]	; (800b690 <HAL_UART_IRQHandler+0x2b0>)
 800b526:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00b      	beq.n	800b544 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2208      	movs	r2, #8
 800b532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b53a:	f043 0208 	orr.w	r2, r3, #8
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d012      	beq.n	800b576 <HAL_UART_IRQHandler+0x196>
 800b550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b554:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00c      	beq.n	800b576 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b564:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b56c:	f043 0220 	orr.w	r2, r3, #32
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f000 823c 	beq.w	800b9fa <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b586:	f003 0320 	and.w	r3, r3, #32
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d013      	beq.n	800b5b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b58e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b592:	f003 0320 	and.w	r3, r3, #32
 800b596:	2b00      	cmp	r3, #0
 800b598:	d105      	bne.n	800b5a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b59a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b59e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d007      	beq.n	800b5b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d003      	beq.n	800b5b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5ca:	2b40      	cmp	r3, #64	; 0x40
 800b5cc:	d005      	beq.n	800b5da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b5ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d04f      	beq.n	800b67a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f001 f86c 	bl	800c6b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5ea:	2b40      	cmp	r3, #64	; 0x40
 800b5ec:	d141      	bne.n	800b672 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	3308      	adds	r3, #8
 800b5f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b5fc:	e853 3f00 	ldrex	r3, [r3]
 800b600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b604:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b60c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	3308      	adds	r3, #8
 800b616:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b61a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b61e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b622:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b626:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b62a:	e841 2300 	strex	r3, r2, [r1]
 800b62e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1d9      	bne.n	800b5ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d013      	beq.n	800b66a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b646:	4a14      	ldr	r2, [pc, #80]	; (800b698 <HAL_UART_IRQHandler+0x2b8>)
 800b648:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fa f900 	bl	8005854 <HAL_DMA_Abort_IT>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d017      	beq.n	800b68a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b664:	4610      	mov	r0, r2
 800b666:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b668:	e00f      	b.n	800b68a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 f9e2 	bl	800ba34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b670:	e00b      	b.n	800b68a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f9de 	bl	800ba34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b678:	e007      	b.n	800b68a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f9da 	bl	800ba34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2200      	movs	r2, #0
 800b684:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b688:	e1b7      	b.n	800b9fa <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b68a:	bf00      	nop
    return;
 800b68c:	e1b5      	b.n	800b9fa <HAL_UART_IRQHandler+0x61a>
 800b68e:	bf00      	nop
 800b690:	10000001 	.word	0x10000001
 800b694:	04000120 	.word	0x04000120
 800b698:	0800ca17 	.word	0x0800ca17

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	f040 814a 	bne.w	800b93a <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800b6a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6aa:	f003 0310 	and.w	r3, r3, #16
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f000 8143 	beq.w	800b93a <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800b6b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6b8:	f003 0310 	and.w	r3, r3, #16
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	f000 813c 	beq.w	800b93a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2210      	movs	r2, #16
 800b6c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6d4:	2b40      	cmp	r3, #64	; 0x40
 800b6d6:	f040 80b5 	bne.w	800b844 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800b6e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f000 8187 	beq.w	800b9fe <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b6f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	f080 817f 	bcs.w	800b9fe <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b706:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f003 0320 	and.w	r3, r3, #32
 800b716:	2b00      	cmp	r3, #0
 800b718:	f040 8086 	bne.w	800b828 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b724:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b728:	e853 3f00 	ldrex	r3, [r3]
 800b72c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b730:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b738:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	461a      	mov	r2, r3
 800b742:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b746:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b74a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b752:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b756:	e841 2300 	strex	r3, r2, [r1]
 800b75a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b75e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1da      	bne.n	800b71c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	3308      	adds	r3, #8
 800b76c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b770:	e853 3f00 	ldrex	r3, [r3]
 800b774:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b776:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b778:	f023 0301 	bic.w	r3, r3, #1
 800b77c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	3308      	adds	r3, #8
 800b786:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b78a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b78e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b790:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b792:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b796:	e841 2300 	strex	r3, r2, [r1]
 800b79a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b79c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d1e1      	bne.n	800b766 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	3308      	adds	r3, #8
 800b7a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7ac:	e853 3f00 	ldrex	r3, [r3]
 800b7b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b7b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b7c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b7c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b7cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b7ce:	e841 2300 	strex	r3, r2, [r1]
 800b7d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b7d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1e3      	bne.n	800b7a2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2220      	movs	r2, #32
 800b7de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7f0:	e853 3f00 	ldrex	r3, [r3]
 800b7f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b7f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7f8:	f023 0310 	bic.w	r3, r3, #16
 800b7fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	461a      	mov	r2, r3
 800b806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b80a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b80c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b810:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b812:	e841 2300 	strex	r3, r2, [r1]
 800b816:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1e4      	bne.n	800b7e8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b822:	4618      	mov	r0, r3
 800b824:	f7f9 ffb8 	bl	8005798 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b834:	b29b      	uxth	r3, r3
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	b29b      	uxth	r3, r3
 800b83a:	4619      	mov	r1, r3
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f7f6 fe6b 	bl	8002518 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b842:	e0dc      	b.n	800b9fe <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b850:	b29b      	uxth	r3, r3
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b85e:	b29b      	uxth	r3, r3
 800b860:	2b00      	cmp	r3, #0
 800b862:	f000 80ce 	beq.w	800ba02 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800b866:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f000 80c9 	beq.w	800ba02 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b878:	e853 3f00 	ldrex	r3, [r3]
 800b87c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b880:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b884:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	461a      	mov	r2, r3
 800b88e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b892:	647b      	str	r3, [r7, #68]	; 0x44
 800b894:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b896:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b898:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b89a:	e841 2300 	strex	r3, r2, [r1]
 800b89e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b8a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1e4      	bne.n	800b870 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	3308      	adds	r3, #8
 800b8ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b0:	e853 3f00 	ldrex	r3, [r3]
 800b8b4:	623b      	str	r3, [r7, #32]
   return(result);
 800b8b6:	6a3b      	ldr	r3, [r7, #32]
 800b8b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8bc:	f023 0301 	bic.w	r3, r3, #1
 800b8c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	3308      	adds	r3, #8
 800b8ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b8ce:	633a      	str	r2, [r7, #48]	; 0x30
 800b8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8d6:	e841 2300 	strex	r3, r2, [r1]
 800b8da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1e1      	bne.n	800b8a6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2220      	movs	r2, #32
 800b8e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	e853 3f00 	ldrex	r3, [r3]
 800b902:	60fb      	str	r3, [r7, #12]
   return(result);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f023 0310 	bic.w	r3, r3, #16
 800b90a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	461a      	mov	r2, r3
 800b914:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b918:	61fb      	str	r3, [r7, #28]
 800b91a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b91c:	69b9      	ldr	r1, [r7, #24]
 800b91e:	69fa      	ldr	r2, [r7, #28]
 800b920:	e841 2300 	strex	r3, r2, [r1]
 800b924:	617b      	str	r3, [r7, #20]
   return(result);
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d1e4      	bne.n	800b8f6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b92c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b930:	4619      	mov	r1, r3
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f7f6 fdf0 	bl	8002518 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b938:	e063      	b.n	800ba02 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b93a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b93e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00e      	beq.n	800b964 <HAL_UART_IRQHandler+0x584>
 800b946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b94a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d008      	beq.n	800b964 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b95a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f001 fcf7 	bl	800d350 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b962:	e051      	b.n	800ba08 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d014      	beq.n	800b99a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d105      	bne.n	800b988 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b97c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b984:	2b00      	cmp	r3, #0
 800b986:	d008      	beq.n	800b99a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d03a      	beq.n	800ba06 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	4798      	blx	r3
    }
    return;
 800b998:	e035      	b.n	800ba06 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b99a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d009      	beq.n	800b9ba <HAL_UART_IRQHandler+0x5da>
 800b9a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d003      	beq.n	800b9ba <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f001 f845 	bl	800ca42 <UART_EndTransmit_IT>
    return;
 800b9b8:	e026      	b.n	800ba08 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b9ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d009      	beq.n	800b9da <HAL_UART_IRQHandler+0x5fa>
 800b9c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d003      	beq.n	800b9da <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f001 fcce 	bl	800d374 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9d8:	e016      	b.n	800ba08 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b9da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d010      	beq.n	800ba08 <HAL_UART_IRQHandler+0x628>
 800b9e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	da0c      	bge.n	800ba08 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f001 fcb7 	bl	800d362 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9f4:	e008      	b.n	800ba08 <HAL_UART_IRQHandler+0x628>
      return;
 800b9f6:	bf00      	nop
 800b9f8:	e006      	b.n	800ba08 <HAL_UART_IRQHandler+0x628>
    return;
 800b9fa:	bf00      	nop
 800b9fc:	e004      	b.n	800ba08 <HAL_UART_IRQHandler+0x628>
      return;
 800b9fe:	bf00      	nop
 800ba00:	e002      	b.n	800ba08 <HAL_UART_IRQHandler+0x628>
      return;
 800ba02:	bf00      	nop
 800ba04:	e000      	b.n	800ba08 <HAL_UART_IRQHandler+0x628>
    return;
 800ba06:	bf00      	nop
  }
}
 800ba08:	37e8      	adds	r7, #232	; 0xe8
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop

0800ba10 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b083      	sub	sp, #12
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ba18:	bf00      	nop
 800ba1a:	370c      	adds	r7, #12
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bc80      	pop	{r7}
 800ba20:	4770      	bx	lr

0800ba22 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ba22:	b480      	push	{r7}
 800ba24:	b083      	sub	sp, #12
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ba2a:	bf00      	nop
 800ba2c:	370c      	adds	r7, #12
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bc80      	pop	{r7}
 800ba32:	4770      	bx	lr

0800ba34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ba3c:	bf00      	nop
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bc80      	pop	{r7}
 800ba44:	4770      	bx	lr
	...

0800ba48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba4c:	b08c      	sub	sp, #48	; 0x30
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba52:	2300      	movs	r3, #0
 800ba54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	689a      	ldr	r2, [r3, #8]
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	691b      	ldr	r3, [r3, #16]
 800ba60:	431a      	orrs	r2, r3
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	695b      	ldr	r3, [r3, #20]
 800ba66:	431a      	orrs	r2, r3
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	69db      	ldr	r3, [r3, #28]
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	4b94      	ldr	r3, [pc, #592]	; (800bcc8 <UART_SetConfig+0x280>)
 800ba78:	4013      	ands	r3, r2
 800ba7a:	697a      	ldr	r2, [r7, #20]
 800ba7c:	6812      	ldr	r2, [r2, #0]
 800ba7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba80:	430b      	orrs	r3, r1
 800ba82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	68da      	ldr	r2, [r3, #12]
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	430a      	orrs	r2, r1
 800ba98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	699b      	ldr	r3, [r3, #24]
 800ba9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a89      	ldr	r2, [pc, #548]	; (800bccc <UART_SetConfig+0x284>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d004      	beq.n	800bab4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	6a1b      	ldr	r3, [r3, #32]
 800baae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bab0:	4313      	orrs	r3, r2
 800bab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800babe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800bac2:	697a      	ldr	r2, [r7, #20]
 800bac4:	6812      	ldr	r2, [r2, #0]
 800bac6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bac8:	430b      	orrs	r3, r1
 800baca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad2:	f023 010f 	bic.w	r1, r3, #15
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	430a      	orrs	r2, r1
 800bae0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a7a      	ldr	r2, [pc, #488]	; (800bcd0 <UART_SetConfig+0x288>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d127      	bne.n	800bb3c <UART_SetConfig+0xf4>
 800baec:	2003      	movs	r0, #3
 800baee:	f7ff fa88 	bl	800b002 <LL_RCC_GetUSARTClockSource>
 800baf2:	4603      	mov	r3, r0
 800baf4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800baf8:	2b03      	cmp	r3, #3
 800bafa:	d81b      	bhi.n	800bb34 <UART_SetConfig+0xec>
 800bafc:	a201      	add	r2, pc, #4	; (adr r2, 800bb04 <UART_SetConfig+0xbc>)
 800bafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb02:	bf00      	nop
 800bb04:	0800bb15 	.word	0x0800bb15
 800bb08:	0800bb25 	.word	0x0800bb25
 800bb0c:	0800bb1d 	.word	0x0800bb1d
 800bb10:	0800bb2d 	.word	0x0800bb2d
 800bb14:	2301      	movs	r3, #1
 800bb16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb1a:	e080      	b.n	800bc1e <UART_SetConfig+0x1d6>
 800bb1c:	2302      	movs	r3, #2
 800bb1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb22:	e07c      	b.n	800bc1e <UART_SetConfig+0x1d6>
 800bb24:	2304      	movs	r3, #4
 800bb26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb2a:	e078      	b.n	800bc1e <UART_SetConfig+0x1d6>
 800bb2c:	2308      	movs	r3, #8
 800bb2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb32:	e074      	b.n	800bc1e <UART_SetConfig+0x1d6>
 800bb34:	2310      	movs	r3, #16
 800bb36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb3a:	e070      	b.n	800bc1e <UART_SetConfig+0x1d6>
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a64      	ldr	r2, [pc, #400]	; (800bcd4 <UART_SetConfig+0x28c>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d138      	bne.n	800bbb8 <UART_SetConfig+0x170>
 800bb46:	200c      	movs	r0, #12
 800bb48:	f7ff fa5b 	bl	800b002 <LL_RCC_GetUSARTClockSource>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800bb52:	2b0c      	cmp	r3, #12
 800bb54:	d82c      	bhi.n	800bbb0 <UART_SetConfig+0x168>
 800bb56:	a201      	add	r2, pc, #4	; (adr r2, 800bb5c <UART_SetConfig+0x114>)
 800bb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5c:	0800bb91 	.word	0x0800bb91
 800bb60:	0800bbb1 	.word	0x0800bbb1
 800bb64:	0800bbb1 	.word	0x0800bbb1
 800bb68:	0800bbb1 	.word	0x0800bbb1
 800bb6c:	0800bba1 	.word	0x0800bba1
 800bb70:	0800bbb1 	.word	0x0800bbb1
 800bb74:	0800bbb1 	.word	0x0800bbb1
 800bb78:	0800bbb1 	.word	0x0800bbb1
 800bb7c:	0800bb99 	.word	0x0800bb99
 800bb80:	0800bbb1 	.word	0x0800bbb1
 800bb84:	0800bbb1 	.word	0x0800bbb1
 800bb88:	0800bbb1 	.word	0x0800bbb1
 800bb8c:	0800bba9 	.word	0x0800bba9
 800bb90:	2300      	movs	r3, #0
 800bb92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb96:	e042      	b.n	800bc1e <UART_SetConfig+0x1d6>
 800bb98:	2302      	movs	r3, #2
 800bb9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb9e:	e03e      	b.n	800bc1e <UART_SetConfig+0x1d6>
 800bba0:	2304      	movs	r3, #4
 800bba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bba6:	e03a      	b.n	800bc1e <UART_SetConfig+0x1d6>
 800bba8:	2308      	movs	r3, #8
 800bbaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbae:	e036      	b.n	800bc1e <UART_SetConfig+0x1d6>
 800bbb0:	2310      	movs	r3, #16
 800bbb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbb6:	e032      	b.n	800bc1e <UART_SetConfig+0x1d6>
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a43      	ldr	r2, [pc, #268]	; (800bccc <UART_SetConfig+0x284>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d12a      	bne.n	800bc18 <UART_SetConfig+0x1d0>
 800bbc2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800bbc6:	f7ff fa2e 	bl	800b026 <LL_RCC_GetLPUARTClockSource>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bbd0:	d01a      	beq.n	800bc08 <UART_SetConfig+0x1c0>
 800bbd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bbd6:	d81b      	bhi.n	800bc10 <UART_SetConfig+0x1c8>
 800bbd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbdc:	d00c      	beq.n	800bbf8 <UART_SetConfig+0x1b0>
 800bbde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbe2:	d815      	bhi.n	800bc10 <UART_SetConfig+0x1c8>
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d003      	beq.n	800bbf0 <UART_SetConfig+0x1a8>
 800bbe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbec:	d008      	beq.n	800bc00 <UART_SetConfig+0x1b8>
 800bbee:	e00f      	b.n	800bc10 <UART_SetConfig+0x1c8>
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbf6:	e012      	b.n	800bc1e <UART_SetConfig+0x1d6>
 800bbf8:	2302      	movs	r3, #2
 800bbfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbfe:	e00e      	b.n	800bc1e <UART_SetConfig+0x1d6>
 800bc00:	2304      	movs	r3, #4
 800bc02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc06:	e00a      	b.n	800bc1e <UART_SetConfig+0x1d6>
 800bc08:	2308      	movs	r3, #8
 800bc0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc0e:	e006      	b.n	800bc1e <UART_SetConfig+0x1d6>
 800bc10:	2310      	movs	r3, #16
 800bc12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc16:	e002      	b.n	800bc1e <UART_SetConfig+0x1d6>
 800bc18:	2310      	movs	r3, #16
 800bc1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a2a      	ldr	r2, [pc, #168]	; (800bccc <UART_SetConfig+0x284>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	f040 80a4 	bne.w	800bd72 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bc2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc2e:	2b08      	cmp	r3, #8
 800bc30:	d823      	bhi.n	800bc7a <UART_SetConfig+0x232>
 800bc32:	a201      	add	r2, pc, #4	; (adr r2, 800bc38 <UART_SetConfig+0x1f0>)
 800bc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc38:	0800bc5d 	.word	0x0800bc5d
 800bc3c:	0800bc7b 	.word	0x0800bc7b
 800bc40:	0800bc65 	.word	0x0800bc65
 800bc44:	0800bc7b 	.word	0x0800bc7b
 800bc48:	0800bc6b 	.word	0x0800bc6b
 800bc4c:	0800bc7b 	.word	0x0800bc7b
 800bc50:	0800bc7b 	.word	0x0800bc7b
 800bc54:	0800bc7b 	.word	0x0800bc7b
 800bc58:	0800bc73 	.word	0x0800bc73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc5c:	f7fc fb62 	bl	8008324 <HAL_RCC_GetPCLK1Freq>
 800bc60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc62:	e010      	b.n	800bc86 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc64:	4b1c      	ldr	r3, [pc, #112]	; (800bcd8 <UART_SetConfig+0x290>)
 800bc66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bc68:	e00d      	b.n	800bc86 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc6a:	f7fc faa7 	bl	80081bc <HAL_RCC_GetSysClockFreq>
 800bc6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc70:	e009      	b.n	800bc86 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bc78:	e005      	b.n	800bc86 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bc84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f000 8137 	beq.w	800befc <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc92:	4a12      	ldr	r2, [pc, #72]	; (800bcdc <UART_SetConfig+0x294>)
 800bc94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc98:	461a      	mov	r2, r3
 800bc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bca0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	685a      	ldr	r2, [r3, #4]
 800bca6:	4613      	mov	r3, r2
 800bca8:	005b      	lsls	r3, r3, #1
 800bcaa:	4413      	add	r3, r2
 800bcac:	69ba      	ldr	r2, [r7, #24]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d305      	bcc.n	800bcbe <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bcb8:	69ba      	ldr	r2, [r7, #24]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d910      	bls.n	800bce0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bcc4:	e11a      	b.n	800befc <UART_SetConfig+0x4b4>
 800bcc6:	bf00      	nop
 800bcc8:	cfff69f3 	.word	0xcfff69f3
 800bccc:	40008000 	.word	0x40008000
 800bcd0:	40013800 	.word	0x40013800
 800bcd4:	40004400 	.word	0x40004400
 800bcd8:	00f42400 	.word	0x00f42400
 800bcdc:	08021990 	.word	0x08021990
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce2:	2200      	movs	r2, #0
 800bce4:	60bb      	str	r3, [r7, #8]
 800bce6:	60fa      	str	r2, [r7, #12]
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcec:	4a8e      	ldr	r2, [pc, #568]	; (800bf28 <UART_SetConfig+0x4e0>)
 800bcee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	603b      	str	r3, [r7, #0]
 800bcf8:	607a      	str	r2, [r7, #4]
 800bcfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bd02:	f7f5 fa29 	bl	8001158 <__aeabi_uldivmod>
 800bd06:	4602      	mov	r2, r0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4610      	mov	r0, r2
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	f04f 0200 	mov.w	r2, #0
 800bd12:	f04f 0300 	mov.w	r3, #0
 800bd16:	020b      	lsls	r3, r1, #8
 800bd18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bd1c:	0202      	lsls	r2, r0, #8
 800bd1e:	6979      	ldr	r1, [r7, #20]
 800bd20:	6849      	ldr	r1, [r1, #4]
 800bd22:	0849      	lsrs	r1, r1, #1
 800bd24:	2000      	movs	r0, #0
 800bd26:	460c      	mov	r4, r1
 800bd28:	4605      	mov	r5, r0
 800bd2a:	eb12 0804 	adds.w	r8, r2, r4
 800bd2e:	eb43 0905 	adc.w	r9, r3, r5
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	2200      	movs	r2, #0
 800bd38:	469a      	mov	sl, r3
 800bd3a:	4693      	mov	fp, r2
 800bd3c:	4652      	mov	r2, sl
 800bd3e:	465b      	mov	r3, fp
 800bd40:	4640      	mov	r0, r8
 800bd42:	4649      	mov	r1, r9
 800bd44:	f7f5 fa08 	bl	8001158 <__aeabi_uldivmod>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bd50:	6a3b      	ldr	r3, [r7, #32]
 800bd52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd56:	d308      	bcc.n	800bd6a <UART_SetConfig+0x322>
 800bd58:	6a3b      	ldr	r3, [r7, #32]
 800bd5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd5e:	d204      	bcs.n	800bd6a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	6a3a      	ldr	r2, [r7, #32]
 800bd66:	60da      	str	r2, [r3, #12]
 800bd68:	e0c8      	b.n	800befc <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bd70:	e0c4      	b.n	800befc <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	69db      	ldr	r3, [r3, #28]
 800bd76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd7a:	d168      	bne.n	800be4e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800bd7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd80:	2b08      	cmp	r3, #8
 800bd82:	d828      	bhi.n	800bdd6 <UART_SetConfig+0x38e>
 800bd84:	a201      	add	r2, pc, #4	; (adr r2, 800bd8c <UART_SetConfig+0x344>)
 800bd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd8a:	bf00      	nop
 800bd8c:	0800bdb1 	.word	0x0800bdb1
 800bd90:	0800bdb9 	.word	0x0800bdb9
 800bd94:	0800bdc1 	.word	0x0800bdc1
 800bd98:	0800bdd7 	.word	0x0800bdd7
 800bd9c:	0800bdc7 	.word	0x0800bdc7
 800bda0:	0800bdd7 	.word	0x0800bdd7
 800bda4:	0800bdd7 	.word	0x0800bdd7
 800bda8:	0800bdd7 	.word	0x0800bdd7
 800bdac:	0800bdcf 	.word	0x0800bdcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bdb0:	f7fc fab8 	bl	8008324 <HAL_RCC_GetPCLK1Freq>
 800bdb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bdb6:	e014      	b.n	800bde2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bdb8:	f7fc fac6 	bl	8008348 <HAL_RCC_GetPCLK2Freq>
 800bdbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bdbe:	e010      	b.n	800bde2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bdc0:	4b5a      	ldr	r3, [pc, #360]	; (800bf2c <UART_SetConfig+0x4e4>)
 800bdc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bdc4:	e00d      	b.n	800bde2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bdc6:	f7fc f9f9 	bl	80081bc <HAL_RCC_GetSysClockFreq>
 800bdca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bdcc:	e009      	b.n	800bde2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bdd4:	e005      	b.n	800bde2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bdda:	2301      	movs	r3, #1
 800bddc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bde0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f000 8089 	beq.w	800befc <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdee:	4a4e      	ldr	r2, [pc, #312]	; (800bf28 <UART_SetConfig+0x4e0>)
 800bdf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdfc:	005a      	lsls	r2, r3, #1
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	085b      	lsrs	r3, r3, #1
 800be04:	441a      	add	r2, r3
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be0e:	b29b      	uxth	r3, r3
 800be10:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be12:	6a3b      	ldr	r3, [r7, #32]
 800be14:	2b0f      	cmp	r3, #15
 800be16:	d916      	bls.n	800be46 <UART_SetConfig+0x3fe>
 800be18:	6a3b      	ldr	r3, [r7, #32]
 800be1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be1e:	d212      	bcs.n	800be46 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be20:	6a3b      	ldr	r3, [r7, #32]
 800be22:	b29b      	uxth	r3, r3
 800be24:	f023 030f 	bic.w	r3, r3, #15
 800be28:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800be2a:	6a3b      	ldr	r3, [r7, #32]
 800be2c:	085b      	lsrs	r3, r3, #1
 800be2e:	b29b      	uxth	r3, r3
 800be30:	f003 0307 	and.w	r3, r3, #7
 800be34:	b29a      	uxth	r2, r3
 800be36:	8bfb      	ldrh	r3, [r7, #30]
 800be38:	4313      	orrs	r3, r2
 800be3a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	8bfa      	ldrh	r2, [r7, #30]
 800be42:	60da      	str	r2, [r3, #12]
 800be44:	e05a      	b.n	800befc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800be4c:	e056      	b.n	800befc <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800be4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be52:	2b08      	cmp	r3, #8
 800be54:	d827      	bhi.n	800bea6 <UART_SetConfig+0x45e>
 800be56:	a201      	add	r2, pc, #4	; (adr r2, 800be5c <UART_SetConfig+0x414>)
 800be58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5c:	0800be81 	.word	0x0800be81
 800be60:	0800be89 	.word	0x0800be89
 800be64:	0800be91 	.word	0x0800be91
 800be68:	0800bea7 	.word	0x0800bea7
 800be6c:	0800be97 	.word	0x0800be97
 800be70:	0800bea7 	.word	0x0800bea7
 800be74:	0800bea7 	.word	0x0800bea7
 800be78:	0800bea7 	.word	0x0800bea7
 800be7c:	0800be9f 	.word	0x0800be9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be80:	f7fc fa50 	bl	8008324 <HAL_RCC_GetPCLK1Freq>
 800be84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be86:	e014      	b.n	800beb2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be88:	f7fc fa5e 	bl	8008348 <HAL_RCC_GetPCLK2Freq>
 800be8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be8e:	e010      	b.n	800beb2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be90:	4b26      	ldr	r3, [pc, #152]	; (800bf2c <UART_SetConfig+0x4e4>)
 800be92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be94:	e00d      	b.n	800beb2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be96:	f7fc f991 	bl	80081bc <HAL_RCC_GetSysClockFreq>
 800be9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be9c:	e009      	b.n	800beb2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bea2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bea4:	e005      	b.n	800beb2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800bea6:	2300      	movs	r3, #0
 800bea8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800beaa:	2301      	movs	r3, #1
 800beac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800beb0:	bf00      	nop
    }

    if (pclk != 0U)
 800beb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d021      	beq.n	800befc <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bebc:	4a1a      	ldr	r2, [pc, #104]	; (800bf28 <UART_SetConfig+0x4e0>)
 800bebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bec2:	461a      	mov	r2, r3
 800bec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec6:	fbb3 f2f2 	udiv	r2, r3, r2
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	085b      	lsrs	r3, r3, #1
 800bed0:	441a      	add	r2, r3
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	fbb2 f3f3 	udiv	r3, r2, r3
 800beda:	b29b      	uxth	r3, r3
 800bedc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	2b0f      	cmp	r3, #15
 800bee2:	d908      	bls.n	800bef6 <UART_SetConfig+0x4ae>
 800bee4:	6a3b      	ldr	r3, [r7, #32]
 800bee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800beea:	d204      	bcs.n	800bef6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	6a3a      	ldr	r2, [r7, #32]
 800bef2:	60da      	str	r2, [r3, #12]
 800bef4:	e002      	b.n	800befc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	2201      	movs	r2, #1
 800bf00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	2200      	movs	r2, #0
 800bf16:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bf18:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3730      	adds	r7, #48	; 0x30
 800bf20:	46bd      	mov	sp, r7
 800bf22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf26:	bf00      	nop
 800bf28:	08021990 	.word	0x08021990
 800bf2c:	00f42400 	.word	0x00f42400

0800bf30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf3c:	f003 0301 	and.w	r3, r3, #1
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00a      	beq.n	800bf5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	430a      	orrs	r2, r1
 800bf58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf5e:	f003 0302 	and.w	r3, r3, #2
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00a      	beq.n	800bf7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	430a      	orrs	r2, r1
 800bf7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf80:	f003 0304 	and.w	r3, r3, #4
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00a      	beq.n	800bf9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	430a      	orrs	r2, r1
 800bf9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfa2:	f003 0308 	and.w	r3, r3, #8
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00a      	beq.n	800bfc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	430a      	orrs	r2, r1
 800bfbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc4:	f003 0310 	and.w	r3, r3, #16
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d00a      	beq.n	800bfe2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	430a      	orrs	r2, r1
 800bfe0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfe6:	f003 0320 	and.w	r3, r3, #32
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00a      	beq.n	800c004 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	430a      	orrs	r2, r1
 800c002:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d01a      	beq.n	800c046 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	430a      	orrs	r2, r1
 800c024:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c02a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c02e:	d10a      	bne.n	800c046 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	430a      	orrs	r2, r1
 800c044:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c04a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00a      	beq.n	800c068 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	430a      	orrs	r2, r1
 800c066:	605a      	str	r2, [r3, #4]
  }
}
 800c068:	bf00      	nop
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bc80      	pop	{r7}
 800c070:	4770      	bx	lr

0800c072 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b086      	sub	sp, #24
 800c076:	af02      	add	r7, sp, #8
 800c078:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2200      	movs	r2, #0
 800c07e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c082:	f7f6 ffbb 	bl	8002ffc <HAL_GetTick>
 800c086:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f003 0308 	and.w	r3, r3, #8
 800c092:	2b08      	cmp	r3, #8
 800c094:	d10e      	bne.n	800c0b4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c096:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c09a:	9300      	str	r3, [sp, #0]
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 f82f 	bl	800c108 <UART_WaitOnFlagUntilTimeout>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d001      	beq.n	800c0b4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0b0:	2303      	movs	r3, #3
 800c0b2:	e025      	b.n	800c100 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 0304 	and.w	r3, r3, #4
 800c0be:	2b04      	cmp	r3, #4
 800c0c0:	d10e      	bne.n	800c0e0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 f819 	bl	800c108 <UART_WaitOnFlagUntilTimeout>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d001      	beq.n	800c0e0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0dc:	2303      	movs	r3, #3
 800c0de:	e00f      	b.n	800c100 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2220      	movs	r2, #32
 800c0e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2220      	movs	r2, #32
 800c0ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3710      	adds	r7, #16
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b09c      	sub	sp, #112	; 0x70
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	603b      	str	r3, [r7, #0]
 800c114:	4613      	mov	r3, r2
 800c116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c118:	e0a9      	b.n	800c26e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c11a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c120:	f000 80a5 	beq.w	800c26e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c124:	f7f6 ff6a 	bl	8002ffc <HAL_GetTick>
 800c128:	4602      	mov	r2, r0
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	1ad3      	subs	r3, r2, r3
 800c12e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c130:	429a      	cmp	r2, r3
 800c132:	d302      	bcc.n	800c13a <UART_WaitOnFlagUntilTimeout+0x32>
 800c134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c136:	2b00      	cmp	r3, #0
 800c138:	d140      	bne.n	800c1bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c142:	e853 3f00 	ldrex	r3, [r3]
 800c146:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c14a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c14e:	667b      	str	r3, [r7, #100]	; 0x64
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	461a      	mov	r2, r3
 800c156:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c158:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c15a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c15c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c15e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c160:	e841 2300 	strex	r3, r2, [r1]
 800c164:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1e6      	bne.n	800c13a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	3308      	adds	r3, #8
 800c172:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c176:	e853 3f00 	ldrex	r3, [r3]
 800c17a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17e:	f023 0301 	bic.w	r3, r3, #1
 800c182:	663b      	str	r3, [r7, #96]	; 0x60
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	3308      	adds	r3, #8
 800c18a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c18c:	64ba      	str	r2, [r7, #72]	; 0x48
 800c18e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c190:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c194:	e841 2300 	strex	r3, r2, [r1]
 800c198:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c19a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1e5      	bne.n	800c16c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2220      	movs	r2, #32
 800c1a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2220      	movs	r2, #32
 800c1ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c1b8:	2303      	movs	r3, #3
 800c1ba:	e069      	b.n	800c290 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f003 0304 	and.w	r3, r3, #4
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d051      	beq.n	800c26e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	69db      	ldr	r3, [r3, #28]
 800c1d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c1d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1d8:	d149      	bne.n	800c26e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1e2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ec:	e853 3f00 	ldrex	r3, [r3]
 800c1f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c1f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	461a      	mov	r2, r3
 800c200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c202:	637b      	str	r3, [r7, #52]	; 0x34
 800c204:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c206:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c20a:	e841 2300 	strex	r3, r2, [r1]
 800c20e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c212:	2b00      	cmp	r3, #0
 800c214:	d1e6      	bne.n	800c1e4 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	3308      	adds	r3, #8
 800c21c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	e853 3f00 	ldrex	r3, [r3]
 800c224:	613b      	str	r3, [r7, #16]
   return(result);
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	f023 0301 	bic.w	r3, r3, #1
 800c22c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	3308      	adds	r3, #8
 800c234:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c236:	623a      	str	r2, [r7, #32]
 800c238:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c23a:	69f9      	ldr	r1, [r7, #28]
 800c23c:	6a3a      	ldr	r2, [r7, #32]
 800c23e:	e841 2300 	strex	r3, r2, [r1]
 800c242:	61bb      	str	r3, [r7, #24]
   return(result);
 800c244:	69bb      	ldr	r3, [r7, #24]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1e5      	bne.n	800c216 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2220      	movs	r2, #32
 800c24e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2220      	movs	r2, #32
 800c256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2220      	movs	r2, #32
 800c25e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c26a:	2303      	movs	r3, #3
 800c26c:	e010      	b.n	800c290 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	69da      	ldr	r2, [r3, #28]
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	4013      	ands	r3, r2
 800c278:	68ba      	ldr	r2, [r7, #8]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	bf0c      	ite	eq
 800c27e:	2301      	moveq	r3, #1
 800c280:	2300      	movne	r3, #0
 800c282:	b2db      	uxtb	r3, r3
 800c284:	461a      	mov	r2, r3
 800c286:	79fb      	ldrb	r3, [r7, #7]
 800c288:	429a      	cmp	r2, r3
 800c28a:	f43f af46 	beq.w	800c11a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c28e:	2300      	movs	r3, #0
}
 800c290:	4618      	mov	r0, r3
 800c292:	3770      	adds	r7, #112	; 0x70
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c298:	b480      	push	{r7}
 800c29a:	b0a3      	sub	sp, #140	; 0x8c
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	68ba      	ldr	r2, [r7, #8]
 800c2aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	88fa      	ldrh	r2, [r7, #6]
 800c2b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	88fa      	ldrh	r2, [r7, #6]
 800c2b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	689b      	ldr	r3, [r3, #8]
 800c2c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2ca:	d10e      	bne.n	800c2ea <UART_Start_Receive_IT+0x52>
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	691b      	ldr	r3, [r3, #16]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d105      	bne.n	800c2e0 <UART_Start_Receive_IT+0x48>
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c2da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c2de:	e02d      	b.n	800c33c <UART_Start_Receive_IT+0xa4>
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	22ff      	movs	r2, #255	; 0xff
 800c2e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c2e8:	e028      	b.n	800c33c <UART_Start_Receive_IT+0xa4>
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d10d      	bne.n	800c30e <UART_Start_Receive_IT+0x76>
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	691b      	ldr	r3, [r3, #16]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d104      	bne.n	800c304 <UART_Start_Receive_IT+0x6c>
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	22ff      	movs	r2, #255	; 0xff
 800c2fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c302:	e01b      	b.n	800c33c <UART_Start_Receive_IT+0xa4>
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	227f      	movs	r2, #127	; 0x7f
 800c308:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c30c:	e016      	b.n	800c33c <UART_Start_Receive_IT+0xa4>
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	689b      	ldr	r3, [r3, #8]
 800c312:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c316:	d10d      	bne.n	800c334 <UART_Start_Receive_IT+0x9c>
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	691b      	ldr	r3, [r3, #16]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d104      	bne.n	800c32a <UART_Start_Receive_IT+0x92>
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	227f      	movs	r2, #127	; 0x7f
 800c324:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c328:	e008      	b.n	800c33c <UART_Start_Receive_IT+0xa4>
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	223f      	movs	r2, #63	; 0x3f
 800c32e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c332:	e003      	b.n	800c33c <UART_Start_Receive_IT+0xa4>
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2200      	movs	r2, #0
 800c338:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2200      	movs	r2, #0
 800c340:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2222      	movs	r2, #34	; 0x22
 800c348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	3308      	adds	r3, #8
 800c352:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c356:	e853 3f00 	ldrex	r3, [r3]
 800c35a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c35c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c35e:	f043 0301 	orr.w	r3, r3, #1
 800c362:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	3308      	adds	r3, #8
 800c36c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c370:	673a      	str	r2, [r7, #112]	; 0x70
 800c372:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c374:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c376:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c378:	e841 2300 	strex	r3, r2, [r1]
 800c37c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800c37e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c380:	2b00      	cmp	r3, #0
 800c382:	d1e3      	bne.n	800c34c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c38c:	d153      	bne.n	800c436 <UART_Start_Receive_IT+0x19e>
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c394:	88fa      	ldrh	r2, [r7, #6]
 800c396:	429a      	cmp	r2, r3
 800c398:	d34d      	bcc.n	800c436 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3a2:	d107      	bne.n	800c3b4 <UART_Start_Receive_IT+0x11c>
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d103      	bne.n	800c3b4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	4a4a      	ldr	r2, [pc, #296]	; (800c4d8 <UART_Start_Receive_IT+0x240>)
 800c3b0:	671a      	str	r2, [r3, #112]	; 0x70
 800c3b2:	e002      	b.n	800c3ba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	4a49      	ldr	r2, [pc, #292]	; (800c4dc <UART_Start_Receive_IT+0x244>)
 800c3b8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	691b      	ldr	r3, [r3, #16]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d01a      	beq.n	800c400 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3d2:	e853 3f00 	ldrex	r3, [r3]
 800c3d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c3d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c3ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c3ee:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c3f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c3f4:	e841 2300 	strex	r3, r2, [r1]
 800c3f8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c3fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d1e4      	bne.n	800c3ca <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	3308      	adds	r3, #8
 800c406:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c40a:	e853 3f00 	ldrex	r3, [r3]
 800c40e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c416:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	3308      	adds	r3, #8
 800c41e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c420:	64ba      	str	r2, [r7, #72]	; 0x48
 800c422:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c424:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c426:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c428:	e841 2300 	strex	r3, r2, [r1]
 800c42c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c42e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c430:	2b00      	cmp	r3, #0
 800c432:	d1e5      	bne.n	800c400 <UART_Start_Receive_IT+0x168>
 800c434:	e04a      	b.n	800c4cc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c43e:	d107      	bne.n	800c450 <UART_Start_Receive_IT+0x1b8>
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	691b      	ldr	r3, [r3, #16]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d103      	bne.n	800c450 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	4a25      	ldr	r2, [pc, #148]	; (800c4e0 <UART_Start_Receive_IT+0x248>)
 800c44c:	671a      	str	r2, [r3, #112]	; 0x70
 800c44e:	e002      	b.n	800c456 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	4a24      	ldr	r2, [pc, #144]	; (800c4e4 <UART_Start_Receive_IT+0x24c>)
 800c454:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2200      	movs	r2, #0
 800c45a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d019      	beq.n	800c49a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46e:	e853 3f00 	ldrex	r3, [r3]
 800c472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c476:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c47a:	677b      	str	r3, [r7, #116]	; 0x74
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	461a      	mov	r2, r3
 800c482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c484:	637b      	str	r3, [r7, #52]	; 0x34
 800c486:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c488:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c48a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c48c:	e841 2300 	strex	r3, r2, [r1]
 800c490:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1e6      	bne.n	800c466 <UART_Start_Receive_IT+0x1ce>
 800c498:	e018      	b.n	800c4cc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	e853 3f00 	ldrex	r3, [r3]
 800c4a6:	613b      	str	r3, [r7, #16]
   return(result);
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	f043 0320 	orr.w	r3, r3, #32
 800c4ae:	67bb      	str	r3, [r7, #120]	; 0x78
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4b8:	623b      	str	r3, [r7, #32]
 800c4ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4bc:	69f9      	ldr	r1, [r7, #28]
 800c4be:	6a3a      	ldr	r2, [r7, #32]
 800c4c0:	e841 2300 	strex	r3, r2, [r1]
 800c4c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d1e6      	bne.n	800c49a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800c4cc:	2300      	movs	r3, #0
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	378c      	adds	r7, #140	; 0x8c
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bc80      	pop	{r7}
 800c4d6:	4770      	bx	lr
 800c4d8:	0800d051 	.word	0x0800d051
 800c4dc:	0800cd59 	.word	0x0800cd59
 800c4e0:	0800cbf9 	.word	0x0800cbf9
 800c4e4:	0800ca99 	.word	0x0800ca99

0800c4e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b096      	sub	sp, #88	; 0x58
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	4613      	mov	r3, r2
 800c4f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	68ba      	ldr	r2, [r7, #8]
 800c4fa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	88fa      	ldrh	r2, [r7, #6]
 800c500:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2200      	movs	r2, #0
 800c508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2222      	movs	r2, #34	; 0x22
 800c510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d02c      	beq.n	800c576 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c520:	4a42      	ldr	r2, [pc, #264]	; (800c62c <UART_Start_Receive_DMA+0x144>)
 800c522:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c528:	4a41      	ldr	r2, [pc, #260]	; (800c630 <UART_Start_Receive_DMA+0x148>)
 800c52a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c530:	4a40      	ldr	r2, [pc, #256]	; (800c634 <UART_Start_Receive_DMA+0x14c>)
 800c532:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c538:	2200      	movs	r2, #0
 800c53a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	3324      	adds	r3, #36	; 0x24
 800c546:	4619      	mov	r1, r3
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c54c:	461a      	mov	r2, r3
 800c54e:	88fb      	ldrh	r3, [r7, #6]
 800c550:	f7f9 f8a4 	bl	800569c <HAL_DMA_Start_IT>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00d      	beq.n	800c576 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2210      	movs	r2, #16
 800c55e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2200      	movs	r2, #0
 800c566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2220      	movs	r2, #32
 800c56e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800c572:	2301      	movs	r3, #1
 800c574:	e055      	b.n	800c622 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	691b      	ldr	r3, [r3, #16]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d018      	beq.n	800c5b8 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c58e:	e853 3f00 	ldrex	r3, [r3]
 800c592:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c59a:	657b      	str	r3, [r7, #84]	; 0x54
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5a6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c5aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5ac:	e841 2300 	strex	r3, r2, [r1]
 800c5b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d1e6      	bne.n	800c586 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3308      	adds	r3, #8
 800c5be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c2:	e853 3f00 	ldrex	r3, [r3]
 800c5c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ca:	f043 0301 	orr.w	r3, r3, #1
 800c5ce:	653b      	str	r3, [r7, #80]	; 0x50
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	3308      	adds	r3, #8
 800c5d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c5d8:	637a      	str	r2, [r7, #52]	; 0x34
 800c5da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c5de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5e0:	e841 2300 	strex	r3, r2, [r1]
 800c5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d1e5      	bne.n	800c5b8 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	3308      	adds	r3, #8
 800c5f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	e853 3f00 	ldrex	r3, [r3]
 800c5fa:	613b      	str	r3, [r7, #16]
   return(result);
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c602:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	3308      	adds	r3, #8
 800c60a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c60c:	623a      	str	r2, [r7, #32]
 800c60e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c610:	69f9      	ldr	r1, [r7, #28]
 800c612:	6a3a      	ldr	r2, [r7, #32]
 800c614:	e841 2300 	strex	r3, r2, [r1]
 800c618:	61bb      	str	r3, [r7, #24]
   return(result);
 800c61a:	69bb      	ldr	r3, [r7, #24]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1e5      	bne.n	800c5ec <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	3758      	adds	r7, #88	; 0x58
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop
 800c62c:	0800c839 	.word	0x0800c839
 800c630:	0800c95f 	.word	0x0800c95f
 800c634:	0800c997 	.word	0x0800c997

0800c638 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c638:	b480      	push	{r7}
 800c63a:	b08f      	sub	sp, #60	; 0x3c
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c646:	6a3b      	ldr	r3, [r7, #32]
 800c648:	e853 3f00 	ldrex	r3, [r3]
 800c64c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c654:	637b      	str	r3, [r7, #52]	; 0x34
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	461a      	mov	r2, r3
 800c65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c65e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c660:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c666:	e841 2300 	strex	r3, r2, [r1]
 800c66a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d1e6      	bne.n	800c640 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	3308      	adds	r3, #8
 800c678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	e853 3f00 	ldrex	r3, [r3]
 800c680:	60bb      	str	r3, [r7, #8]
   return(result);
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c688:	633b      	str	r3, [r7, #48]	; 0x30
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	3308      	adds	r3, #8
 800c690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c692:	61ba      	str	r2, [r7, #24]
 800c694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c696:	6979      	ldr	r1, [r7, #20]
 800c698:	69ba      	ldr	r2, [r7, #24]
 800c69a:	e841 2300 	strex	r3, r2, [r1]
 800c69e:	613b      	str	r3, [r7, #16]
   return(result);
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d1e5      	bne.n	800c672 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2220      	movs	r2, #32
 800c6aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800c6ae:	bf00      	nop
 800c6b0:	373c      	adds	r7, #60	; 0x3c
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bc80      	pop	{r7}
 800c6b6:	4770      	bx	lr

0800c6b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b095      	sub	sp, #84	; 0x54
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c8:	e853 3f00 	ldrex	r3, [r3]
 800c6cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	461a      	mov	r2, r3
 800c6dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6de:	643b      	str	r3, [r7, #64]	; 0x40
 800c6e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c6e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6e6:	e841 2300 	strex	r3, r2, [r1]
 800c6ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d1e6      	bne.n	800c6c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	3308      	adds	r3, #8
 800c6f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6fa:	6a3b      	ldr	r3, [r7, #32]
 800c6fc:	e853 3f00 	ldrex	r3, [r3]
 800c700:	61fb      	str	r3, [r7, #28]
   return(result);
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c708:	f023 0301 	bic.w	r3, r3, #1
 800c70c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	3308      	adds	r3, #8
 800c714:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c716:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c718:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c71c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c71e:	e841 2300 	strex	r3, r2, [r1]
 800c722:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c726:	2b00      	cmp	r3, #0
 800c728:	d1e3      	bne.n	800c6f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d118      	bne.n	800c764 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	e853 3f00 	ldrex	r3, [r3]
 800c73e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	f023 0310 	bic.w	r3, r3, #16
 800c746:	647b      	str	r3, [r7, #68]	; 0x44
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	461a      	mov	r2, r3
 800c74e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c750:	61bb      	str	r3, [r7, #24]
 800c752:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c754:	6979      	ldr	r1, [r7, #20]
 800c756:	69ba      	ldr	r2, [r7, #24]
 800c758:	e841 2300 	strex	r3, r2, [r1]
 800c75c:	613b      	str	r3, [r7, #16]
   return(result);
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1e6      	bne.n	800c732 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2220      	movs	r2, #32
 800c768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c778:	bf00      	nop
 800c77a:	3754      	adds	r7, #84	; 0x54
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bc80      	pop	{r7}
 800c780:	4770      	bx	lr

0800c782 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c782:	b580      	push	{r7, lr}
 800c784:	b090      	sub	sp, #64	; 0x40
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c78e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f003 0320 	and.w	r3, r3, #32
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d137      	bne.n	800c80e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c7a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	3308      	adds	r3, #8
 800c7ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b0:	e853 3f00 	ldrex	r3, [r3]
 800c7b4:	623b      	str	r3, [r7, #32]
   return(result);
 800c7b6:	6a3b      	ldr	r3, [r7, #32]
 800c7b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	3308      	adds	r3, #8
 800c7c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7c6:	633a      	str	r2, [r7, #48]	; 0x30
 800c7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7ce:	e841 2300 	strex	r3, r2, [r1]
 800c7d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1e5      	bne.n	800c7a6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	e853 3f00 	ldrex	r3, [r3]
 800c7e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7ee:	637b      	str	r3, [r7, #52]	; 0x34
 800c7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f8:	61fb      	str	r3, [r7, #28]
 800c7fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7fc:	69b9      	ldr	r1, [r7, #24]
 800c7fe:	69fa      	ldr	r2, [r7, #28]
 800c800:	e841 2300 	strex	r3, r2, [r1]
 800c804:	617b      	str	r3, [r7, #20]
   return(result);
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1e6      	bne.n	800c7da <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c80c:	e002      	b.n	800c814 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c80e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c810:	f7f7 fac2 	bl	8003d98 <HAL_UART_TxCpltCallback>
}
 800c814:	bf00      	nop
 800c816:	3740      	adds	r7, #64	; 0x40
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c828:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f7ff f8f0 	bl	800ba10 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c830:	bf00      	nop
 800c832:	3710      	adds	r7, #16
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b09c      	sub	sp, #112	; 0x70
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c844:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f003 0320 	and.w	r3, r3, #32
 800c850:	2b00      	cmp	r3, #0
 800c852:	d171      	bne.n	800c938 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c856:	2200      	movs	r2, #0
 800c858:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c85c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c864:	e853 3f00 	ldrex	r3, [r3]
 800c868:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c86a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c86c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c870:	66bb      	str	r3, [r7, #104]	; 0x68
 800c872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	461a      	mov	r2, r3
 800c878:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c87a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c87c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c87e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c880:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c882:	e841 2300 	strex	r3, r2, [r1]
 800c886:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1e6      	bne.n	800c85c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c88e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	3308      	adds	r3, #8
 800c894:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c898:	e853 3f00 	ldrex	r3, [r3]
 800c89c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a0:	f023 0301 	bic.w	r3, r3, #1
 800c8a4:	667b      	str	r3, [r7, #100]	; 0x64
 800c8a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	3308      	adds	r3, #8
 800c8ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c8ae:	647a      	str	r2, [r7, #68]	; 0x44
 800c8b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c8b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8b6:	e841 2300 	strex	r3, r2, [r1]
 800c8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c8bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d1e5      	bne.n	800c88e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	3308      	adds	r3, #8
 800c8c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8cc:	e853 3f00 	ldrex	r3, [r3]
 800c8d0:	623b      	str	r3, [r7, #32]
   return(result);
 800c8d2:	6a3b      	ldr	r3, [r7, #32]
 800c8d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8d8:	663b      	str	r3, [r7, #96]	; 0x60
 800c8da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	3308      	adds	r3, #8
 800c8e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c8e2:	633a      	str	r2, [r7, #48]	; 0x30
 800c8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8ea:	e841 2300 	strex	r3, r2, [r1]
 800c8ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1e5      	bne.n	800c8c2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c8f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8f8:	2220      	movs	r2, #32
 800c8fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c902:	2b01      	cmp	r3, #1
 800c904:	d118      	bne.n	800c938 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	e853 3f00 	ldrex	r3, [r3]
 800c912:	60fb      	str	r3, [r7, #12]
   return(result);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f023 0310 	bic.w	r3, r3, #16
 800c91a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c91c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	461a      	mov	r2, r3
 800c922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c924:	61fb      	str	r3, [r7, #28]
 800c926:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c928:	69b9      	ldr	r1, [r7, #24]
 800c92a:	69fa      	ldr	r2, [r7, #28]
 800c92c:	e841 2300 	strex	r3, r2, [r1]
 800c930:	617b      	str	r3, [r7, #20]
   return(result);
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1e6      	bne.n	800c906 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c93a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d107      	bne.n	800c950 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c942:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c946:	4619      	mov	r1, r3
 800c948:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c94a:	f7f5 fde5 	bl	8002518 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c94e:	e002      	b.n	800c956 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c950:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c952:	f7f7 fa37 	bl	8003dc4 <HAL_UART_RxCpltCallback>
}
 800c956:	bf00      	nop
 800c958:	3770      	adds	r7, #112	; 0x70
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b084      	sub	sp, #16
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c96a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c970:	2b01      	cmp	r3, #1
 800c972:	d109      	bne.n	800c988 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c97a:	085b      	lsrs	r3, r3, #1
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	4619      	mov	r1, r3
 800c980:	68f8      	ldr	r0, [r7, #12]
 800c982:	f7f5 fdc9 	bl	8002518 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c986:	e002      	b.n	800c98e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f7ff f84a 	bl	800ba22 <HAL_UART_RxHalfCpltCallback>
}
 800c98e:	bf00      	nop
 800c990:	3710      	adds	r7, #16
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c996:	b580      	push	{r7, lr}
 800c998:	b086      	sub	sp, #24
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9aa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9b2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	689b      	ldr	r3, [r3, #8]
 800c9ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9be:	2b80      	cmp	r3, #128	; 0x80
 800c9c0:	d109      	bne.n	800c9d6 <UART_DMAError+0x40>
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	2b21      	cmp	r3, #33	; 0x21
 800c9c6:	d106      	bne.n	800c9d6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c9d0:	6978      	ldr	r0, [r7, #20]
 800c9d2:	f7ff fe31 	bl	800c638 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	689b      	ldr	r3, [r3, #8]
 800c9dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9e0:	2b40      	cmp	r3, #64	; 0x40
 800c9e2:	d109      	bne.n	800c9f8 <UART_DMAError+0x62>
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2b22      	cmp	r3, #34	; 0x22
 800c9e8:	d106      	bne.n	800c9f8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c9f2:	6978      	ldr	r0, [r7, #20]
 800c9f4:	f7ff fe60 	bl	800c6b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9fe:	f043 0210 	orr.w	r2, r3, #16
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca08:	6978      	ldr	r0, [r7, #20]
 800ca0a:	f7ff f813 	bl	800ba34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca0e:	bf00      	nop
 800ca10:	3718      	adds	r7, #24
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b084      	sub	sp, #16
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f7fe fffd 	bl	800ba34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca3a:	bf00      	nop
 800ca3c:	3710      	adds	r7, #16
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b088      	sub	sp, #32
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	e853 3f00 	ldrex	r3, [r3]
 800ca56:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca5e:	61fb      	str	r3, [r7, #28]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	461a      	mov	r2, r3
 800ca66:	69fb      	ldr	r3, [r7, #28]
 800ca68:	61bb      	str	r3, [r7, #24]
 800ca6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca6c:	6979      	ldr	r1, [r7, #20]
 800ca6e:	69ba      	ldr	r2, [r7, #24]
 800ca70:	e841 2300 	strex	r3, r2, [r1]
 800ca74:	613b      	str	r3, [r7, #16]
   return(result);
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1e6      	bne.n	800ca4a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2220      	movs	r2, #32
 800ca80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2200      	movs	r2, #0
 800ca88:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f7f7 f984 	bl	8003d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca90:	bf00      	nop
 800ca92:	3720      	adds	r7, #32
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b096      	sub	sp, #88	; 0x58
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800caa6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cab0:	2b22      	cmp	r3, #34	; 0x22
 800cab2:	f040 8095 	bne.w	800cbe0 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cabc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cac0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800cac4:	b2d9      	uxtb	r1, r3
 800cac6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cad0:	400a      	ands	r2, r1
 800cad2:	b2d2      	uxtb	r2, r2
 800cad4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cada:	1c5a      	adds	r2, r3, #1
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	3b01      	subs	r3, #1
 800caea:	b29a      	uxth	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d178      	bne.n	800cbf0 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb06:	e853 3f00 	ldrex	r3, [r3]
 800cb0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb12:	653b      	str	r3, [r7, #80]	; 0x50
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	461a      	mov	r2, r3
 800cb1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb1c:	647b      	str	r3, [r7, #68]	; 0x44
 800cb1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cb22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb24:	e841 2300 	strex	r3, r2, [r1]
 800cb28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cb2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1e6      	bne.n	800cafe <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	3308      	adds	r3, #8
 800cb36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3a:	e853 3f00 	ldrex	r3, [r3]
 800cb3e:	623b      	str	r3, [r7, #32]
   return(result);
 800cb40:	6a3b      	ldr	r3, [r7, #32]
 800cb42:	f023 0301 	bic.w	r3, r3, #1
 800cb46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	3308      	adds	r3, #8
 800cb4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb50:	633a      	str	r2, [r7, #48]	; 0x30
 800cb52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb58:	e841 2300 	strex	r3, r2, [r1]
 800cb5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d1e5      	bne.n	800cb30 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2220      	movs	r2, #32
 800cb68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d12e      	bne.n	800cbd8 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	e853 3f00 	ldrex	r3, [r3]
 800cb8c:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f023 0310 	bic.w	r3, r3, #16
 800cb94:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb9e:	61fb      	str	r3, [r7, #28]
 800cba0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba2:	69b9      	ldr	r1, [r7, #24]
 800cba4:	69fa      	ldr	r2, [r7, #28]
 800cba6:	e841 2300 	strex	r3, r2, [r1]
 800cbaa:	617b      	str	r3, [r7, #20]
   return(result);
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d1e6      	bne.n	800cb80 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	69db      	ldr	r3, [r3, #28]
 800cbb8:	f003 0310 	and.w	r3, r3, #16
 800cbbc:	2b10      	cmp	r3, #16
 800cbbe:	d103      	bne.n	800cbc8 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	2210      	movs	r2, #16
 800cbc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cbce:	4619      	mov	r1, r3
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f7f5 fca1 	bl	8002518 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cbd6:	e00b      	b.n	800cbf0 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7f7 f8f3 	bl	8003dc4 <HAL_UART_RxCpltCallback>
}
 800cbde:	e007      	b.n	800cbf0 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	699a      	ldr	r2, [r3, #24]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f042 0208 	orr.w	r2, r2, #8
 800cbee:	619a      	str	r2, [r3, #24]
}
 800cbf0:	bf00      	nop
 800cbf2:	3758      	adds	r7, #88	; 0x58
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b096      	sub	sp, #88	; 0x58
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cc06:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc10:	2b22      	cmp	r3, #34	; 0x22
 800cc12:	f040 8095 	bne.w	800cd40 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc1c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc24:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800cc26:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800cc2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cc2e:	4013      	ands	r3, r2
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc34:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc3a:	1c9a      	adds	r2, r3, #2
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	3b01      	subs	r3, #1
 800cc4a:	b29a      	uxth	r2, r3
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d178      	bne.n	800cd50 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc66:	e853 3f00 	ldrex	r3, [r3]
 800cc6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	461a      	mov	r2, r3
 800cc7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc7c:	643b      	str	r3, [r7, #64]	; 0x40
 800cc7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc84:	e841 2300 	strex	r3, r2, [r1]
 800cc88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d1e6      	bne.n	800cc5e <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	3308      	adds	r3, #8
 800cc96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc98:	6a3b      	ldr	r3, [r7, #32]
 800cc9a:	e853 3f00 	ldrex	r3, [r3]
 800cc9e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	f023 0301 	bic.w	r3, r3, #1
 800cca6:	64bb      	str	r3, [r7, #72]	; 0x48
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	3308      	adds	r3, #8
 800ccae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ccb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccb8:	e841 2300 	strex	r3, r2, [r1]
 800ccbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ccbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d1e5      	bne.n	800cc90 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2220      	movs	r2, #32
 800ccc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d12e      	bne.n	800cd38 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	e853 3f00 	ldrex	r3, [r3]
 800ccec:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	f023 0310 	bic.w	r3, r3, #16
 800ccf4:	647b      	str	r3, [r7, #68]	; 0x44
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccfe:	61bb      	str	r3, [r7, #24]
 800cd00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd02:	6979      	ldr	r1, [r7, #20]
 800cd04:	69ba      	ldr	r2, [r7, #24]
 800cd06:	e841 2300 	strex	r3, r2, [r1]
 800cd0a:	613b      	str	r3, [r7, #16]
   return(result);
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1e6      	bne.n	800cce0 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	69db      	ldr	r3, [r3, #28]
 800cd18:	f003 0310 	and.w	r3, r3, #16
 800cd1c:	2b10      	cmp	r3, #16
 800cd1e:	d103      	bne.n	800cd28 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	2210      	movs	r2, #16
 800cd26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cd2e:	4619      	mov	r1, r3
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f7f5 fbf1 	bl	8002518 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd36:	e00b      	b.n	800cd50 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f7f7 f843 	bl	8003dc4 <HAL_UART_RxCpltCallback>
}
 800cd3e:	e007      	b.n	800cd50 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	699a      	ldr	r2, [r3, #24]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f042 0208 	orr.w	r2, r2, #8
 800cd4e:	619a      	str	r2, [r3, #24]
}
 800cd50:	bf00      	nop
 800cd52:	3758      	adds	r7, #88	; 0x58
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b0a6      	sub	sp, #152	; 0x98
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cd66:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	69db      	ldr	r3, [r3, #28]
 800cd70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd8e:	2b22      	cmp	r3, #34	; 0x22
 800cd90:	f040 814f 	bne.w	800d032 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cd9a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cd9e:	e0f6      	b.n	800cf8e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cdaa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800cdae:	b2d9      	uxtb	r1, r3
 800cdb0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800cdb4:	b2da      	uxtb	r2, r3
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdba:	400a      	ands	r2, r1
 800cdbc:	b2d2      	uxtb	r2, r2
 800cdbe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdc4:	1c5a      	adds	r2, r3, #1
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	b29a      	uxth	r2, r3
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	69db      	ldr	r3, [r3, #28]
 800cde2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cde6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cdea:	f003 0307 	and.w	r3, r3, #7
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d053      	beq.n	800ce9a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cdf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cdf6:	f003 0301 	and.w	r3, r3, #1
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d011      	beq.n	800ce22 <UART_RxISR_8BIT_FIFOEN+0xca>
 800cdfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00b      	beq.n	800ce22 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce18:	f043 0201 	orr.w	r2, r3, #1
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ce26:	f003 0302 	and.w	r3, r3, #2
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d011      	beq.n	800ce52 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ce2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce32:	f003 0301 	and.w	r3, r3, #1
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00b      	beq.n	800ce52 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2202      	movs	r2, #2
 800ce40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce48:	f043 0204 	orr.w	r2, r3, #4
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ce56:	f003 0304 	and.w	r3, r3, #4
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d011      	beq.n	800ce82 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ce5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce62:	f003 0301 	and.w	r3, r3, #1
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00b      	beq.n	800ce82 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	2204      	movs	r2, #4
 800ce70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce78:	f043 0202 	orr.w	r2, r3, #2
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d006      	beq.n	800ce9a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f7fe fdd1 	bl	800ba34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d173      	bne.n	800cf8e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ceae:	e853 3f00 	ldrex	r3, [r3]
 800ceb2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800ceb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ceb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ceba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	461a      	mov	r2, r3
 800cec4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cec8:	66bb      	str	r3, [r7, #104]	; 0x68
 800ceca:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cecc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cece:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ced0:	e841 2300 	strex	r3, r2, [r1]
 800ced4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ced6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d1e4      	bne.n	800cea6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	3308      	adds	r3, #8
 800cee2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cee6:	e853 3f00 	ldrex	r3, [r3]
 800ceea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ceec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cef2:	f023 0301 	bic.w	r3, r3, #1
 800cef6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	3308      	adds	r3, #8
 800cefe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cf00:	657a      	str	r2, [r7, #84]	; 0x54
 800cf02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf08:	e841 2300 	strex	r3, r2, [r1]
 800cf0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cf0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d1e3      	bne.n	800cedc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2220      	movs	r2, #32
 800cf18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d12e      	bne.n	800cf88 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf38:	e853 3f00 	ldrex	r3, [r3]
 800cf3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf40:	f023 0310 	bic.w	r3, r3, #16
 800cf44:	67bb      	str	r3, [r7, #120]	; 0x78
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf4e:	643b      	str	r3, [r7, #64]	; 0x40
 800cf50:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cf54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf56:	e841 2300 	strex	r3, r2, [r1]
 800cf5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d1e6      	bne.n	800cf30 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	69db      	ldr	r3, [r3, #28]
 800cf68:	f003 0310 	and.w	r3, r3, #16
 800cf6c:	2b10      	cmp	r3, #16
 800cf6e:	d103      	bne.n	800cf78 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	2210      	movs	r2, #16
 800cf76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cf7e:	4619      	mov	r1, r3
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f7f5 fac9 	bl	8002518 <HAL_UARTEx_RxEventCallback>
 800cf86:	e002      	b.n	800cf8e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f7f6 ff1b 	bl	8003dc4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cf8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d006      	beq.n	800cfa4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800cf96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf9a:	f003 0320 	and.w	r3, r3, #32
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f47f aefe 	bne.w	800cda0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cfaa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cfae:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d045      	beq.n	800d042 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cfbc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d23e      	bcs.n	800d042 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	3308      	adds	r3, #8
 800cfca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfcc:	6a3b      	ldr	r3, [r7, #32]
 800cfce:	e853 3f00 	ldrex	r3, [r3]
 800cfd2:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfda:	673b      	str	r3, [r7, #112]	; 0x70
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	3308      	adds	r3, #8
 800cfe2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cfe4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cfe6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cfea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfec:	e841 2300 	strex	r3, r2, [r1]
 800cff0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d1e5      	bne.n	800cfc4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	4a14      	ldr	r2, [pc, #80]	; (800d04c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800cffc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	e853 3f00 	ldrex	r3, [r3]
 800d00a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	f043 0320 	orr.w	r3, r3, #32
 800d012:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	461a      	mov	r2, r3
 800d01a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d01c:	61bb      	str	r3, [r7, #24]
 800d01e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d020:	6979      	ldr	r1, [r7, #20]
 800d022:	69ba      	ldr	r2, [r7, #24]
 800d024:	e841 2300 	strex	r3, r2, [r1]
 800d028:	613b      	str	r3, [r7, #16]
   return(result);
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d1e6      	bne.n	800cffe <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d030:	e007      	b.n	800d042 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	699a      	ldr	r2, [r3, #24]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f042 0208 	orr.w	r2, r2, #8
 800d040:	619a      	str	r2, [r3, #24]
}
 800d042:	bf00      	nop
 800d044:	3798      	adds	r7, #152	; 0x98
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	0800ca99 	.word	0x0800ca99

0800d050 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b0a8      	sub	sp, #160	; 0xa0
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d05e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	69db      	ldr	r3, [r3, #28]
 800d068:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	689b      	ldr	r3, [r3, #8]
 800d07c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d086:	2b22      	cmp	r3, #34	; 0x22
 800d088:	f040 8153 	bne.w	800d332 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d092:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d096:	e0fa      	b.n	800d28e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d09e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800d0aa:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800d0ae:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800d0b2:	4013      	ands	r3, r2
 800d0b4:	b29a      	uxth	r2, r3
 800d0b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d0ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0c0:	1c9a      	adds	r2, r3, #2
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	3b01      	subs	r3, #1
 800d0d0:	b29a      	uxth	r2, r3
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	69db      	ldr	r3, [r3, #28]
 800d0de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d0e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d0e6:	f003 0307 	and.w	r3, r3, #7
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d053      	beq.n	800d196 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d0ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d0f2:	f003 0301 	and.w	r3, r3, #1
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d011      	beq.n	800d11e <UART_RxISR_16BIT_FIFOEN+0xce>
 800d0fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d0fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d102:	2b00      	cmp	r3, #0
 800d104:	d00b      	beq.n	800d11e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	2201      	movs	r2, #1
 800d10c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d114:	f043 0201 	orr.w	r2, r3, #1
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d11e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d122:	f003 0302 	and.w	r3, r3, #2
 800d126:	2b00      	cmp	r3, #0
 800d128:	d011      	beq.n	800d14e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d12a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d12e:	f003 0301 	and.w	r3, r3, #1
 800d132:	2b00      	cmp	r3, #0
 800d134:	d00b      	beq.n	800d14e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2202      	movs	r2, #2
 800d13c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d144:	f043 0204 	orr.w	r2, r3, #4
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d14e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d152:	f003 0304 	and.w	r3, r3, #4
 800d156:	2b00      	cmp	r3, #0
 800d158:	d011      	beq.n	800d17e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d15a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d15e:	f003 0301 	and.w	r3, r3, #1
 800d162:	2b00      	cmp	r3, #0
 800d164:	d00b      	beq.n	800d17e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2204      	movs	r2, #4
 800d16c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d174:	f043 0202 	orr.w	r2, r3, #2
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d184:	2b00      	cmp	r3, #0
 800d186:	d006      	beq.n	800d196 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f7fe fc53 	bl	800ba34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2200      	movs	r2, #0
 800d192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d175      	bne.n	800d28e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1aa:	e853 3f00 	ldrex	r3, [r3]
 800d1ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d1b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	461a      	mov	r2, r3
 800d1c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d1c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d1c6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d1ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d1cc:	e841 2300 	strex	r3, r2, [r1]
 800d1d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d1d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1e4      	bne.n	800d1a2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	3308      	adds	r3, #8
 800d1de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1e2:	e853 3f00 	ldrex	r3, [r3]
 800d1e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d1e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d1ee:	f023 0301 	bic.w	r3, r3, #1
 800d1f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	3308      	adds	r3, #8
 800d1fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d200:	65ba      	str	r2, [r7, #88]	; 0x58
 800d202:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d204:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d206:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d208:	e841 2300 	strex	r3, r2, [r1]
 800d20c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d20e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d210:	2b00      	cmp	r3, #0
 800d212:	d1e1      	bne.n	800d1d8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2220      	movs	r2, #32
 800d218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2200      	movs	r2, #0
 800d220:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d226:	2b01      	cmp	r3, #1
 800d228:	d12e      	bne.n	800d288 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2200      	movs	r2, #0
 800d22e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d238:	e853 3f00 	ldrex	r3, [r3]
 800d23c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d240:	f023 0310 	bic.w	r3, r3, #16
 800d244:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	461a      	mov	r2, r3
 800d24c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d24e:	647b      	str	r3, [r7, #68]	; 0x44
 800d250:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d252:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d256:	e841 2300 	strex	r3, r2, [r1]
 800d25a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d1e6      	bne.n	800d230 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	69db      	ldr	r3, [r3, #28]
 800d268:	f003 0310 	and.w	r3, r3, #16
 800d26c:	2b10      	cmp	r3, #16
 800d26e:	d103      	bne.n	800d278 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2210      	movs	r2, #16
 800d276:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d27e:	4619      	mov	r1, r3
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7f5 f949 	bl	8002518 <HAL_UARTEx_RxEventCallback>
 800d286:	e002      	b.n	800d28e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f7f6 fd9b 	bl	8003dc4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d28e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800d292:	2b00      	cmp	r3, #0
 800d294:	d006      	beq.n	800d2a4 <UART_RxISR_16BIT_FIFOEN+0x254>
 800d296:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d29a:	f003 0320 	and.w	r3, r3, #32
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	f47f aefa 	bne.w	800d098 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2aa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d2ae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d045      	beq.n	800d342 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d2bc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d23e      	bcs.n	800d342 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	3308      	adds	r3, #8
 800d2ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ce:	e853 3f00 	ldrex	r3, [r3]
 800d2d2:	623b      	str	r3, [r7, #32]
   return(result);
 800d2d4:	6a3b      	ldr	r3, [r7, #32]
 800d2d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d2da:	677b      	str	r3, [r7, #116]	; 0x74
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	3308      	adds	r3, #8
 800d2e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d2e4:	633a      	str	r2, [r7, #48]	; 0x30
 800d2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2ec:	e841 2300 	strex	r3, r2, [r1]
 800d2f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d1e5      	bne.n	800d2c4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	4a14      	ldr	r2, [pc, #80]	; (800d34c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800d2fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	e853 3f00 	ldrex	r3, [r3]
 800d30a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f043 0320 	orr.w	r3, r3, #32
 800d312:	673b      	str	r3, [r7, #112]	; 0x70
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	461a      	mov	r2, r3
 800d31a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d31c:	61fb      	str	r3, [r7, #28]
 800d31e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d320:	69b9      	ldr	r1, [r7, #24]
 800d322:	69fa      	ldr	r2, [r7, #28]
 800d324:	e841 2300 	strex	r3, r2, [r1]
 800d328:	617b      	str	r3, [r7, #20]
   return(result);
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d1e6      	bne.n	800d2fe <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d330:	e007      	b.n	800d342 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	699a      	ldr	r2, [r3, #24]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f042 0208 	orr.w	r2, r2, #8
 800d340:	619a      	str	r2, [r3, #24]
}
 800d342:	bf00      	nop
 800d344:	37a0      	adds	r7, #160	; 0xa0
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	0800cbf9 	.word	0x0800cbf9

0800d350 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d358:	bf00      	nop
 800d35a:	370c      	adds	r7, #12
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bc80      	pop	{r7}
 800d360:	4770      	bx	lr

0800d362 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d362:	b480      	push	{r7}
 800d364:	b083      	sub	sp, #12
 800d366:	af00      	add	r7, sp, #0
 800d368:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d36a:	bf00      	nop
 800d36c:	370c      	adds	r7, #12
 800d36e:	46bd      	mov	sp, r7
 800d370:	bc80      	pop	{r7}
 800d372:	4770      	bx	lr

0800d374 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d374:	b480      	push	{r7}
 800d376:	b083      	sub	sp, #12
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d37c:	bf00      	nop
 800d37e:	370c      	adds	r7, #12
 800d380:	46bd      	mov	sp, r7
 800d382:	bc80      	pop	{r7}
 800d384:	4770      	bx	lr

0800d386 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800d386:	b580      	push	{r7, lr}
 800d388:	b088      	sub	sp, #32
 800d38a:	af02      	add	r7, sp, #8
 800d38c:	60f8      	str	r0, [r7, #12]
 800d38e:	1d3b      	adds	r3, r7, #4
 800d390:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800d394:	2300      	movs	r3, #0
 800d396:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d101      	bne.n	800d3a6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800d3a2:	2302      	movs	r3, #2
 800d3a4:	e046      	b.n	800d434 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2224      	movs	r2, #36	; 0x24
 800d3b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f022 0201 	bic.w	r2, r2, #1
 800d3c4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	689b      	ldr	r3, [r3, #8]
 800d3cc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	430a      	orrs	r2, r1
 800d3d8:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d105      	bne.n	800d3ec <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800d3e0:	1d3b      	adds	r3, r7, #4
 800d3e2:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d3e6:	68f8      	ldr	r0, [r7, #12]
 800d3e8:	f000 f9a5 	bl	800d736 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f042 0201 	orr.w	r2, r2, #1
 800d3fa:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d3fc:	f7f5 fdfe 	bl	8002ffc <HAL_GetTick>
 800d400:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d402:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d406:	9300      	str	r3, [sp, #0]
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d410:	68f8      	ldr	r0, [r7, #12]
 800d412:	f7fe fe79 	bl	800c108 <UART_WaitOnFlagUntilTimeout>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d002      	beq.n	800d422 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800d41c:	2303      	movs	r3, #3
 800d41e:	75fb      	strb	r3, [r7, #23]
 800d420:	e003      	b.n	800d42a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2220      	movs	r2, #32
 800d426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2200      	movs	r2, #0
 800d42e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800d432:	7dfb      	ldrb	r3, [r7, #23]
}
 800d434:	4618      	mov	r0, r3
 800d436:	3718      	adds	r7, #24
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b089      	sub	sp, #36	; 0x24
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	d101      	bne.n	800d452 <HAL_UARTEx_EnableStopMode+0x16>
 800d44e:	2302      	movs	r3, #2
 800d450:	e021      	b.n	800d496 <HAL_UARTEx_EnableStopMode+0x5a>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2201      	movs	r2, #1
 800d456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	e853 3f00 	ldrex	r3, [r3]
 800d466:	60bb      	str	r3, [r7, #8]
   return(result);
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	f043 0302 	orr.w	r3, r3, #2
 800d46e:	61fb      	str	r3, [r7, #28]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	461a      	mov	r2, r3
 800d476:	69fb      	ldr	r3, [r7, #28]
 800d478:	61bb      	str	r3, [r7, #24]
 800d47a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47c:	6979      	ldr	r1, [r7, #20]
 800d47e:	69ba      	ldr	r2, [r7, #24]
 800d480:	e841 2300 	strex	r3, r2, [r1]
 800d484:	613b      	str	r3, [r7, #16]
   return(result);
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d1e6      	bne.n	800d45a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2200      	movs	r2, #0
 800d490:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d494:	2300      	movs	r3, #0
}
 800d496:	4618      	mov	r0, r3
 800d498:	3724      	adds	r7, #36	; 0x24
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bc80      	pop	{r7}
 800d49e:	4770      	bx	lr

0800d4a0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	d101      	bne.n	800d4b6 <HAL_UARTEx_EnableFifoMode+0x16>
 800d4b2:	2302      	movs	r3, #2
 800d4b4:	e02b      	b.n	800d50e <HAL_UARTEx_EnableFifoMode+0x6e>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2224      	movs	r2, #36	; 0x24
 800d4c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f022 0201 	bic.w	r2, r2, #1
 800d4dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d4e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800d4ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	68fa      	ldr	r2, [r7, #12]
 800d4f4:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f000 f940 	bl	800d77c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2220      	movs	r2, #32
 800d500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d50c:	2300      	movs	r3, #0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d516:	b480      	push	{r7}
 800d518:	b085      	sub	sp, #20
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d524:	2b01      	cmp	r3, #1
 800d526:	d101      	bne.n	800d52c <HAL_UARTEx_DisableFifoMode+0x16>
 800d528:	2302      	movs	r3, #2
 800d52a:	e027      	b.n	800d57c <HAL_UARTEx_DisableFifoMode+0x66>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2201      	movs	r2, #1
 800d530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2224      	movs	r2, #36	; 0x24
 800d538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	681a      	ldr	r2, [r3, #0]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f022 0201 	bic.w	r2, r2, #1
 800d552:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d55a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2200      	movs	r2, #0
 800d560:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	68fa      	ldr	r2, [r7, #12]
 800d568:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2220      	movs	r2, #32
 800d56e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2200      	movs	r2, #0
 800d576:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d57a:	2300      	movs	r3, #0
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3714      	adds	r7, #20
 800d580:	46bd      	mov	sp, r7
 800d582:	bc80      	pop	{r7}
 800d584:	4770      	bx	lr

0800d586 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d586:	b580      	push	{r7, lr}
 800d588:	b084      	sub	sp, #16
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	6078      	str	r0, [r7, #4]
 800d58e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d596:	2b01      	cmp	r3, #1
 800d598:	d101      	bne.n	800d59e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d59a:	2302      	movs	r3, #2
 800d59c:	e02d      	b.n	800d5fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2224      	movs	r2, #36	; 0x24
 800d5aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	681a      	ldr	r2, [r3, #0]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f022 0201 	bic.w	r2, r2, #1
 800d5c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	689b      	ldr	r3, [r3, #8]
 800d5cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	683a      	ldr	r2, [r7, #0]
 800d5d6:	430a      	orrs	r2, r1
 800d5d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f000 f8ce 	bl	800d77c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2220      	movs	r2, #32
 800d5ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b084      	sub	sp, #16
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
 800d60a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d612:	2b01      	cmp	r3, #1
 800d614:	d101      	bne.n	800d61a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d616:	2302      	movs	r3, #2
 800d618:	e02d      	b.n	800d676 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2201      	movs	r2, #1
 800d61e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2224      	movs	r2, #36	; 0x24
 800d626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f022 0201 	bic.w	r2, r2, #1
 800d640:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	683a      	ldr	r2, [r7, #0]
 800d652:	430a      	orrs	r2, r1
 800d654:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f000 f890 	bl	800d77c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2220      	movs	r2, #32
 800d668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d674:	2300      	movs	r3, #0
}
 800d676:	4618      	mov	r0, r3
 800d678:	3710      	adds	r7, #16
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b08c      	sub	sp, #48	; 0x30
 800d682:	af00      	add	r7, sp, #0
 800d684:	60f8      	str	r0, [r7, #12]
 800d686:	60b9      	str	r1, [r7, #8]
 800d688:	4613      	mov	r3, r2
 800d68a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d692:	2b20      	cmp	r3, #32
 800d694:	d14a      	bne.n	800d72c <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d002      	beq.n	800d6a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800d69c:	88fb      	ldrh	r3, [r7, #6]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d101      	bne.n	800d6a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e043      	b.n	800d72e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d101      	bne.n	800d6b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800d6b0:	2302      	movs	r3, #2
 800d6b2:	e03c      	b.n	800d72e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2201      	movs	r2, #1
 800d6c0:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800d6c2:	88fb      	ldrh	r3, [r7, #6]
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	68b9      	ldr	r1, [r7, #8]
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f7fe ff0d 	bl	800c4e8 <UART_Start_Receive_DMA>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800d6d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d124      	bne.n	800d726 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	d11d      	bne.n	800d720 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2210      	movs	r2, #16
 800d6ea:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6f2:	69bb      	ldr	r3, [r7, #24]
 800d6f4:	e853 3f00 	ldrex	r3, [r3]
 800d6f8:	617b      	str	r3, [r7, #20]
   return(result);
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	f043 0310 	orr.w	r3, r3, #16
 800d700:	62bb      	str	r3, [r7, #40]	; 0x28
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	461a      	mov	r2, r3
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	627b      	str	r3, [r7, #36]	; 0x24
 800d70c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d70e:	6a39      	ldr	r1, [r7, #32]
 800d710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d712:	e841 2300 	strex	r3, r2, [r1]
 800d716:	61fb      	str	r3, [r7, #28]
   return(result);
 800d718:	69fb      	ldr	r3, [r7, #28]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d1e6      	bne.n	800d6ec <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800d71e:	e002      	b.n	800d726 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800d720:	2301      	movs	r3, #1
 800d722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800d726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d72a:	e000      	b.n	800d72e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800d72c:	2302      	movs	r3, #2
  }
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3730      	adds	r7, #48	; 0x30
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}

0800d736 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800d736:	b480      	push	{r7}
 800d738:	b085      	sub	sp, #20
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	60f8      	str	r0, [r7, #12]
 800d73e:	1d3b      	adds	r3, r7, #4
 800d740:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	f023 0210 	bic.w	r2, r3, #16
 800d74e:	893b      	ldrh	r3, [r7, #8]
 800d750:	4619      	mov	r1, r3
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	430a      	orrs	r2, r1
 800d758:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800d764:	7abb      	ldrb	r3, [r7, #10]
 800d766:	061a      	lsls	r2, r3, #24
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	430a      	orrs	r2, r1
 800d76e:	605a      	str	r2, [r3, #4]
}
 800d770:	bf00      	nop
 800d772:	3714      	adds	r7, #20
 800d774:	46bd      	mov	sp, r7
 800d776:	bc80      	pop	{r7}
 800d778:	4770      	bx	lr
	...

0800d77c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b085      	sub	sp, #20
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d108      	bne.n	800d79e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2201      	movs	r2, #1
 800d790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2201      	movs	r2, #1
 800d798:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d79c:	e031      	b.n	800d802 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d79e:	2308      	movs	r3, #8
 800d7a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d7a2:	2308      	movs	r3, #8
 800d7a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	0e5b      	lsrs	r3, r3, #25
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	f003 0307 	and.w	r3, r3, #7
 800d7b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	689b      	ldr	r3, [r3, #8]
 800d7bc:	0f5b      	lsrs	r3, r3, #29
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	f003 0307 	and.w	r3, r3, #7
 800d7c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d7c6:	7bbb      	ldrb	r3, [r7, #14]
 800d7c8:	7b3a      	ldrb	r2, [r7, #12]
 800d7ca:	4910      	ldr	r1, [pc, #64]	; (800d80c <UARTEx_SetNbDataToProcess+0x90>)
 800d7cc:	5c8a      	ldrb	r2, [r1, r2]
 800d7ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d7d2:	7b3a      	ldrb	r2, [r7, #12]
 800d7d4:	490e      	ldr	r1, [pc, #56]	; (800d810 <UARTEx_SetNbDataToProcess+0x94>)
 800d7d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d7d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7dc:	b29a      	uxth	r2, r3
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d7e4:	7bfb      	ldrb	r3, [r7, #15]
 800d7e6:	7b7a      	ldrb	r2, [r7, #13]
 800d7e8:	4908      	ldr	r1, [pc, #32]	; (800d80c <UARTEx_SetNbDataToProcess+0x90>)
 800d7ea:	5c8a      	ldrb	r2, [r1, r2]
 800d7ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d7f0:	7b7a      	ldrb	r2, [r7, #13]
 800d7f2:	4907      	ldr	r1, [pc, #28]	; (800d810 <UARTEx_SetNbDataToProcess+0x94>)
 800d7f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d7f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7fa:	b29a      	uxth	r2, r3
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d802:	bf00      	nop
 800d804:	3714      	adds	r7, #20
 800d806:	46bd      	mov	sp, r7
 800d808:	bc80      	pop	{r7}
 800d80a:	4770      	bx	lr
 800d80c:	080219a8 	.word	0x080219a8
 800d810:	080219b0 	.word	0x080219b0

0800d814 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800d818:	f7f5 fa90 	bl	8002d3c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800d81c:	f000 f820 	bl	800d860 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800d820:	bf00      	nop
 800d822:	bd80      	pop	{r7, pc}

0800d824 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800d828:	f04f 30ff 	mov.w	r0, #4294967295
 800d82c:	f012 fbb8 	bl	801ffa0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800d830:	bf00      	nop
 800d832:	bd80      	pop	{r7, pc}

0800d834 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800d834:	b480      	push	{r7}
 800d836:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d838:	f3bf 8f4f 	dsb	sy
}
 800d83c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d83e:	4b06      	ldr	r3, [pc, #24]	; (800d858 <__NVIC_SystemReset+0x24>)
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d846:	4904      	ldr	r1, [pc, #16]	; (800d858 <__NVIC_SystemReset+0x24>)
 800d848:	4b04      	ldr	r3, [pc, #16]	; (800d85c <__NVIC_SystemReset+0x28>)
 800d84a:	4313      	orrs	r3, r2
 800d84c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d84e:	f3bf 8f4f 	dsb	sy
}
 800d852:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800d854:	bf00      	nop
 800d856:	e7fd      	b.n	800d854 <__NVIC_SystemReset+0x20>
 800d858:	e000ed00 	.word	0xe000ed00
 800d85c:	05fa0004 	.word	0x05fa0004

0800d860 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800d866:	2300      	movs	r3, #0
 800d868:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800d86a:	2300      	movs	r3, #0
 800d86c:	9302      	str	r3, [sp, #8]
 800d86e:	2302      	movs	r3, #2
 800d870:	9301      	str	r3, [sp, #4]
 800d872:	2301      	movs	r3, #1
 800d874:	9300      	str	r3, [sp, #0]
 800d876:	4b5a      	ldr	r3, [pc, #360]	; (800d9e0 <LoRaWAN_Init+0x180>)
 800d878:	2200      	movs	r2, #0
 800d87a:	2100      	movs	r1, #0
 800d87c:	2002      	movs	r0, #2
 800d87e:	f012 ffdd 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800d882:	2300      	movs	r3, #0
 800d884:	9302      	str	r3, [sp, #8]
 800d886:	2304      	movs	r3, #4
 800d888:	9301      	str	r3, [sp, #4]
 800d88a:	2302      	movs	r3, #2
 800d88c:	9300      	str	r3, [sp, #0]
 800d88e:	4b55      	ldr	r3, [pc, #340]	; (800d9e4 <LoRaWAN_Init+0x184>)
 800d890:	2200      	movs	r2, #0
 800d892:	2100      	movs	r1, #0
 800d894:	2002      	movs	r0, #2
 800d896:	f012 ffd1 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800d89a:	2300      	movs	r3, #0
 800d89c:	9302      	str	r3, [sp, #8]
 800d89e:	2302      	movs	r3, #2
 800d8a0:	9301      	str	r3, [sp, #4]
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	9300      	str	r3, [sp, #0]
 800d8a6:	4b50      	ldr	r3, [pc, #320]	; (800d9e8 <LoRaWAN_Init+0x188>)
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	2100      	movs	r1, #0
 800d8ac:	2002      	movs	r0, #2
 800d8ae:	f012 ffc5 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800d8b2:	1d3b      	adds	r3, r7, #4
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	2000      	movs	r0, #0
 800d8b8:	f003 f9f8 	bl	8010cac <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	0e1b      	lsrs	r3, r3, #24
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	0c1b      	lsrs	r3, r3, #16
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	0a1b      	lsrs	r3, r3, #8
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	9302      	str	r3, [sp, #8]
 800d8d4:	9101      	str	r1, [sp, #4]
 800d8d6:	9200      	str	r2, [sp, #0]
 800d8d8:	4b44      	ldr	r3, [pc, #272]	; (800d9ec <LoRaWAN_Init+0x18c>)
 800d8da:	2200      	movs	r2, #0
 800d8dc:	2100      	movs	r1, #0
 800d8de:	2002      	movs	r0, #2
 800d8e0:	f012 ffac 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800d8e4:	1d3b      	adds	r3, r7, #4
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	2001      	movs	r0, #1
 800d8ea:	f003 f9df 	bl	8010cac <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	0e1b      	lsrs	r3, r3, #24
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	461a      	mov	r2, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	0c1b      	lsrs	r3, r3, #16
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	0a1b      	lsrs	r3, r3, #8
 800d902:	b2db      	uxtb	r3, r3
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	b2c0      	uxtb	r0, r0
 800d908:	9003      	str	r0, [sp, #12]
 800d90a:	9302      	str	r3, [sp, #8]
 800d90c:	9101      	str	r1, [sp, #4]
 800d90e:	9200      	str	r2, [sp, #0]
 800d910:	4b37      	ldr	r3, [pc, #220]	; (800d9f0 <LoRaWAN_Init+0x190>)
 800d912:	2200      	movs	r2, #0
 800d914:	2100      	movs	r1, #0
 800d916:	2002      	movs	r0, #2
 800d918:	f012 ff90 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800d91c:	2300      	movs	r3, #0
 800d91e:	9300      	str	r3, [sp, #0]
 800d920:	4b34      	ldr	r3, [pc, #208]	; (800d9f4 <LoRaWAN_Init+0x194>)
 800d922:	2200      	movs	r2, #0
 800d924:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d928:	4833      	ldr	r0, [pc, #204]	; (800d9f8 <LoRaWAN_Init+0x198>)
 800d92a:	f012 fcd9 	bl	80202e0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800d92e:	2300      	movs	r3, #0
 800d930:	9300      	str	r3, [sp, #0]
 800d932:	4b32      	ldr	r3, [pc, #200]	; (800d9fc <LoRaWAN_Init+0x19c>)
 800d934:	2200      	movs	r2, #0
 800d936:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d93a:	4831      	ldr	r0, [pc, #196]	; (800da00 <LoRaWAN_Init+0x1a0>)
 800d93c:	f012 fcd0 	bl	80202e0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800d940:	2300      	movs	r3, #0
 800d942:	9300      	str	r3, [sp, #0]
 800d944:	4b2f      	ldr	r3, [pc, #188]	; (800da04 <LoRaWAN_Init+0x1a4>)
 800d946:	2201      	movs	r2, #1
 800d948:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d94c:	482e      	ldr	r0, [pc, #184]	; (800da08 <LoRaWAN_Init+0x1a8>)
 800d94e:	f012 fcc7 	bl	80202e0 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800d952:	2300      	movs	r3, #0
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	4b2d      	ldr	r3, [pc, #180]	; (800da0c <LoRaWAN_Init+0x1ac>)
 800d958:	2200      	movs	r2, #0
 800d95a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800d95e:	482c      	ldr	r0, [pc, #176]	; (800da10 <LoRaWAN_Init+0x1b0>)
 800d960:	f012 fcbe 	bl	80202e0 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800d964:	4a2b      	ldr	r2, [pc, #172]	; (800da14 <LoRaWAN_Init+0x1b4>)
 800d966:	2100      	movs	r1, #0
 800d968:	2001      	movs	r0, #1
 800d96a:	f012 fc15 	bl	8020198 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800d96e:	4a2a      	ldr	r2, [pc, #168]	; (800da18 <LoRaWAN_Init+0x1b8>)
 800d970:	2100      	movs	r1, #0
 800d972:	2002      	movs	r0, #2
 800d974:	f012 fc10 	bl	8020198 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800d978:	4a28      	ldr	r2, [pc, #160]	; (800da1c <LoRaWAN_Init+0x1bc>)
 800d97a:	2100      	movs	r1, #0
 800d97c:	2004      	movs	r0, #4
 800d97e:	f012 fc0b 	bl	8020198 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800d982:	4a27      	ldr	r2, [pc, #156]	; (800da20 <LoRaWAN_Init+0x1c0>)
 800d984:	2100      	movs	r1, #0
 800d986:	2008      	movs	r0, #8
 800d988:	f012 fc06 	bl	8020198 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800d98c:	f000 fcc6 	bl	800e31c <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800d990:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 800d994:	4823      	ldr	r0, [pc, #140]	; (800da24 <LoRaWAN_Init+0x1c4>)
 800d996:	f002 f993 	bl	800fcc0 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800d99a:	4823      	ldr	r0, [pc, #140]	; (800da28 <LoRaWAN_Init+0x1c8>)
 800d99c:	f002 f9dc 	bl	800fd58 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800d9a0:	4819      	ldr	r0, [pc, #100]	; (800da08 <LoRaWAN_Init+0x1a8>)
 800d9a2:	f012 fcd3 	bl	802034c <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800d9a6:	4b21      	ldr	r3, [pc, #132]	; (800da2c <LoRaWAN_Init+0x1cc>)
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	4a21      	ldr	r2, [pc, #132]	; (800da30 <LoRaWAN_Init+0x1d0>)
 800d9ac:	7812      	ldrb	r2, [r2, #0]
 800d9ae:	4611      	mov	r1, r2
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f002 fb27 	bl	8010004 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800d9b6:	4b1f      	ldr	r3, [pc, #124]	; (800da34 <LoRaWAN_Init+0x1d4>)
 800d9b8:	781b      	ldrb	r3, [r3, #0]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d10b      	bne.n	800d9d6 <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800d9be:	4b1e      	ldr	r3, [pc, #120]	; (800da38 <LoRaWAN_Init+0x1d8>)
 800d9c0:	6819      	ldr	r1, [r3, #0]
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	9300      	str	r3, [sp, #0]
 800d9c6:	4b1d      	ldr	r3, [pc, #116]	; (800da3c <LoRaWAN_Init+0x1dc>)
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	481d      	ldr	r0, [pc, #116]	; (800da40 <LoRaWAN_Init+0x1e0>)
 800d9cc:	f012 fc88 	bl	80202e0 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800d9d0:	481b      	ldr	r0, [pc, #108]	; (800da40 <LoRaWAN_Init+0x1e0>)
 800d9d2:	f012 fcbb 	bl	802034c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800d9d6:	bf00      	nop
 800d9d8:	3708      	adds	r7, #8
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	08020fc8 	.word	0x08020fc8
 800d9e4:	08020fec 	.word	0x08020fec
 800d9e8:	0802100c 	.word	0x0802100c
 800d9ec:	0802102c 	.word	0x0802102c
 800d9f0:	08021050 	.word	0x08021050
 800d9f4:	0800de15 	.word	0x0800de15
 800d9f8:	20000c28 	.word	0x20000c28
 800d9fc:	0800de27 	.word	0x0800de27
 800da00:	20000c40 	.word	0x20000c40
 800da04:	0800de39 	.word	0x0800de39
 800da08:	20000c58 	.word	0x20000c58
 800da0c:	0800e1e5 	.word	0x0800e1e5
 800da10:	20000b1c 	.word	0x20000b1c
 800da14:	0800ffe1 	.word	0x0800ffe1
 800da18:	0800db91 	.word	0x0800db91
 800da1c:	0800e209 	.word	0x0800e209
 800da20:	0800e165 	.word	0x0800e165
 800da24:	20000034 	.word	0x20000034
 800da28:	20000080 	.word	0x20000080
 800da2c:	20000030 	.word	0x20000030
 800da30:	20000031 	.word	0x20000031
 800da34:	20000b00 	.word	0x20000b00
 800da38:	20000094 	.word	0x20000094
 800da3c:	0800ddf1 	.word	0x0800ddf1
 800da40:	20000b04 	.word	0x20000b04

0800da44 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800da44:	b5b0      	push	{r4, r5, r7, lr}
 800da46:	b08a      	sub	sp, #40	; 0x28
 800da48:	af06      	add	r7, sp, #24
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
 uint8_t RxPort = 0;
 800da4e:	2300      	movs	r3, #0
 800da50:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	2b00      	cmp	r3, #0
 800da56:	f000 8088 	beq.w	800db6a <OnRxData+0x126>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800da5a:	4846      	ldr	r0, [pc, #280]	; (800db74 <OnRxData+0x130>)
 800da5c:	f012 fc76 	bl	802034c <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d057      	beq.n	800db18 <OnRxData+0xd4>
    {
      if (appData != NULL)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d054      	beq.n	800db18 <OnRxData+0xd4>
      {
        RxPort = appData->Port;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	685b      	ldr	r3, [r3, #4]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d04d      	beq.n	800db18 <OnRxData+0xd4>
        {
    switch (appData->Port)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	2b02      	cmp	r3, #2
 800da82:	d021      	beq.n	800dac8 <OnRxData+0x84>
 800da84:	2b03      	cmp	r3, #3
 800da86:	d149      	bne.n	800db1c <OnRxData+0xd8>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	785b      	ldrb	r3, [r3, #1]
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d117      	bne.n	800dac0 <OnRxData+0x7c>
        {
          switch (appData->Buffer[0])
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	685b      	ldr	r3, [r3, #4]
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	2b02      	cmp	r3, #2
 800da98:	d00e      	beq.n	800dab8 <OnRxData+0x74>
 800da9a:	2b02      	cmp	r3, #2
 800da9c:	dc12      	bgt.n	800dac4 <OnRxData+0x80>
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d002      	beq.n	800daa8 <OnRxData+0x64>
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d004      	beq.n	800dab0 <OnRxData+0x6c>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800daa6:	e00d      	b.n	800dac4 <OnRxData+0x80>
              LmHandlerRequestClass(CLASS_A);
 800daa8:	2000      	movs	r0, #0
 800daaa:	f002 fc97 	bl	80103dc <LmHandlerRequestClass>
              break;
 800daae:	e00a      	b.n	800dac6 <OnRxData+0x82>
              LmHandlerRequestClass(CLASS_B);
 800dab0:	2001      	movs	r0, #1
 800dab2:	f002 fc93 	bl	80103dc <LmHandlerRequestClass>
              break;
 800dab6:	e006      	b.n	800dac6 <OnRxData+0x82>
              LmHandlerRequestClass(CLASS_C);
 800dab8:	2002      	movs	r0, #2
 800daba:	f002 fc8f 	bl	80103dc <LmHandlerRequestClass>
              break;
 800dabe:	e002      	b.n	800dac6 <OnRxData+0x82>
          }
        }
 800dac0:	bf00      	nop
 800dac2:	e02e      	b.n	800db22 <OnRxData+0xde>
              break;
 800dac4:	bf00      	nop
        break;
 800dac6:	e02c      	b.n	800db22 <OnRxData+0xde>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	785b      	ldrb	r3, [r3, #1]
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d127      	bne.n	800db20 <OnRxData+0xdc>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	f003 0301 	and.w	r3, r3, #1
 800dada:	b2da      	uxtb	r2, r3
 800dadc:	4b26      	ldr	r3, [pc, #152]	; (800db78 <OnRxData+0x134>)
 800dade:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800dae0:	4b25      	ldr	r3, [pc, #148]	; (800db78 <OnRxData+0x134>)
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d10b      	bne.n	800db00 <OnRxData+0xbc>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800dae8:	4b24      	ldr	r3, [pc, #144]	; (800db7c <OnRxData+0x138>)
 800daea:	2200      	movs	r2, #0
 800daec:	2100      	movs	r1, #0
 800daee:	2003      	movs	r0, #3
 800daf0:	f012 fea4 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800daf4:	2201      	movs	r2, #1
 800daf6:	2120      	movs	r1, #32
 800daf8:	4821      	ldr	r0, [pc, #132]	; (800db80 <OnRxData+0x13c>)
 800dafa:	f7f8 fd9d 	bl	8006638 <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800dafe:	e00f      	b.n	800db20 <OnRxData+0xdc>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800db00:	4b20      	ldr	r3, [pc, #128]	; (800db84 <OnRxData+0x140>)
 800db02:	2200      	movs	r2, #0
 800db04:	2100      	movs	r1, #0
 800db06:	2003      	movs	r0, #3
 800db08:	f012 fe98 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800db0c:	2200      	movs	r2, #0
 800db0e:	2120      	movs	r1, #32
 800db10:	481b      	ldr	r0, [pc, #108]	; (800db80 <OnRxData+0x13c>)
 800db12:	f7f8 fd91 	bl	8006638 <HAL_GPIO_WritePin>
        break;
 800db16:	e003      	b.n	800db20 <OnRxData+0xdc>

      default:

        break;
    }
  }
 800db18:	bf00      	nop
 800db1a:	e002      	b.n	800db22 <OnRxData+0xde>
        break;
 800db1c:	bf00      	nop
 800db1e:	e000      	b.n	800db22 <OnRxData+0xde>
        break;
 800db20:	bf00      	nop
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	7c1b      	ldrb	r3, [r3, #16]
 800db26:	2b05      	cmp	r3, #5
 800db28:	d81f      	bhi.n	800db6a <OnRxData+0x126>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	68db      	ldr	r3, [r3, #12]
 800db2e:	7bfa      	ldrb	r2, [r7, #15]
 800db30:	6839      	ldr	r1, [r7, #0]
 800db32:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800db36:	460c      	mov	r4, r1
 800db38:	6839      	ldr	r1, [r7, #0]
 800db3a:	7c09      	ldrb	r1, [r1, #16]
 800db3c:	4608      	mov	r0, r1
 800db3e:	4912      	ldr	r1, [pc, #72]	; (800db88 <OnRxData+0x144>)
 800db40:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800db44:	6838      	ldr	r0, [r7, #0]
 800db46:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800db4a:	4605      	mov	r5, r0
 800db4c:	6838      	ldr	r0, [r7, #0]
 800db4e:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800db52:	9005      	str	r0, [sp, #20]
 800db54:	9504      	str	r5, [sp, #16]
 800db56:	9103      	str	r1, [sp, #12]
 800db58:	9402      	str	r4, [sp, #8]
 800db5a:	9201      	str	r2, [sp, #4]
 800db5c:	9300      	str	r3, [sp, #0]
 800db5e:	4b0b      	ldr	r3, [pc, #44]	; (800db8c <OnRxData+0x148>)
 800db60:	2200      	movs	r2, #0
 800db62:	2100      	movs	r1, #0
 800db64:	2003      	movs	r0, #3
 800db66:	f012 fe69 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800db6a:	bf00      	nop
 800db6c:	3710      	adds	r7, #16
 800db6e:	46bd      	mov	sp, r7
 800db70:	bdb0      	pop	{r4, r5, r7, pc}
 800db72:	bf00      	nop
 800db74:	20000c40 	.word	0x20000c40
 800db78:	20000c26 	.word	0x20000c26
 800db7c:	08021074 	.word	0x08021074
 800db80:	48000400 	.word	0x48000400
 800db84:	08021080 	.word	0x08021080
 800db88:	20000018 	.word	0x20000018
 800db8c:	0802108c 	.word	0x0802108c

0800db90 <SendTxData>:

static void SendTxData(void)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b08c      	sub	sp, #48	; 0x30
 800db94:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800db96:	23ff      	movs	r3, #255	; 0xff
 800db98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t batteryLevel = GetBatteryLevel();
 800db9c:	f7f5 f902 	bl	8002da4 <GetBatteryLevel>
 800dba0:	4603      	mov	r3, r0
 800dba2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800dba6:	2300      	movs	r3, #0
 800dba8:	627b      	str	r3, [r7, #36]	; 0x24


  uint16_t pressure = 0;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	843b      	strh	r3, [r7, #32]

  uint32_t i = 0;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	61fb      	str	r3, [r7, #28]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800dbb2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dbb6:	9300      	str	r3, [sp, #0]
 800dbb8:	4b7d      	ldr	r3, [pc, #500]	; (800ddb0 <SendTxData+0x220>)
 800dbba:	2201      	movs	r2, #1
 800dbbc:	2100      	movs	r1, #0
 800dbbe:	2002      	movs	r0, #2
 800dbc0:	f012 fe3c 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7f3 fa80 	bl	80010cc <__aeabi_f2iz>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	b21b      	sxth	r3, r3
 800dbd0:	9300      	str	r3, [sp, #0]
 800dbd2:	4b78      	ldr	r3, [pc, #480]	; (800ddb4 <SendTxData+0x224>)
 800dbd4:	2201      	movs	r2, #1
 800dbd6:	2100      	movs	r1, #0
 800dbd8:	2002      	movs	r0, #2
 800dbda:	f012 fe2f 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800dbde:	4b76      	ldr	r3, [pc, #472]	; (800ddb8 <SendTxData+0x228>)
 800dbe0:	2202      	movs	r2, #2
 800dbe2:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = PM2_5/100;
 800dbe4:	4b75      	ldr	r3, [pc, #468]	; (800ddbc <SendTxData+0x22c>)
 800dbe6:	881b      	ldrh	r3, [r3, #0]
 800dbe8:	4a75      	ldr	r2, [pc, #468]	; (800ddc0 <SendTxData+0x230>)
 800dbea:	fba2 2303 	umull	r2, r3, r2, r3
 800dbee:	095b      	lsrs	r3, r3, #5
 800dbf0:	b298      	uxth	r0, r3
 800dbf2:	4b71      	ldr	r3, [pc, #452]	; (800ddb8 <SendTxData+0x228>)
 800dbf4:	685a      	ldr	r2, [r3, #4]
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	1c59      	adds	r1, r3, #1
 800dbfa:	61f9      	str	r1, [r7, #28]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	b2c2      	uxtb	r2, r0
 800dc00:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM2_5%100;
 800dc02:	4b6e      	ldr	r3, [pc, #440]	; (800ddbc <SendTxData+0x22c>)
 800dc04:	881b      	ldrh	r3, [r3, #0]
 800dc06:	4a6e      	ldr	r2, [pc, #440]	; (800ddc0 <SendTxData+0x230>)
 800dc08:	fba2 1203 	umull	r1, r2, r2, r3
 800dc0c:	0952      	lsrs	r2, r2, #5
 800dc0e:	2164      	movs	r1, #100	; 0x64
 800dc10:	fb01 f202 	mul.w	r2, r1, r2
 800dc14:	1a9b      	subs	r3, r3, r2
 800dc16:	b298      	uxth	r0, r3
 800dc18:	4b67      	ldr	r3, [pc, #412]	; (800ddb8 <SendTxData+0x228>)
 800dc1a:	685a      	ldr	r2, [r3, #4]
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	1c59      	adds	r1, r3, #1
 800dc20:	61f9      	str	r1, [r7, #28]
 800dc22:	4413      	add	r3, r2
 800dc24:	b2c2      	uxtb	r2, r0
 800dc26:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temp*100.0));
 800dc28:	4b66      	ldr	r3, [pc, #408]	; (800ddc4 <SendTxData+0x234>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7f2 fc0f 	bl	8000450 <__aeabi_f2d>
 800dc32:	f04f 0200 	mov.w	r2, #0
 800dc36:	4b64      	ldr	r3, [pc, #400]	; (800ddc8 <SendTxData+0x238>)
 800dc38:	f7f2 fc62 	bl	8000500 <__aeabi_dmul>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	460b      	mov	r3, r1
 800dc40:	4610      	mov	r0, r2
 800dc42:	4619      	mov	r1, r3
 800dc44:	f7f2 fef6 	bl	8000a34 <__aeabi_d2iz>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800dc4c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800dc50:	4a5b      	ldr	r2, [pc, #364]	; (800ddc0 <SendTxData+0x230>)
 800dc52:	fb82 1203 	smull	r1, r2, r2, r3
 800dc56:	1152      	asrs	r2, r2, #5
 800dc58:	17db      	asrs	r3, r3, #31
 800dc5a:	1ad3      	subs	r3, r2, r3
 800dc5c:	b218      	sxth	r0, r3
 800dc5e:	4b56      	ldr	r3, [pc, #344]	; (800ddb8 <SendTxData+0x228>)
 800dc60:	685a      	ldr	r2, [r3, #4]
 800dc62:	69fb      	ldr	r3, [r7, #28]
 800dc64:	1c59      	adds	r1, r3, #1
 800dc66:	61f9      	str	r1, [r7, #28]
 800dc68:	4413      	add	r3, r2
 800dc6a:	b2c2      	uxtb	r2, r0
 800dc6c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800dc6e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800dc72:	4a53      	ldr	r2, [pc, #332]	; (800ddc0 <SendTxData+0x230>)
 800dc74:	fb82 1203 	smull	r1, r2, r2, r3
 800dc78:	1151      	asrs	r1, r2, #5
 800dc7a:	17da      	asrs	r2, r3, #31
 800dc7c:	1a8a      	subs	r2, r1, r2
 800dc7e:	2164      	movs	r1, #100	; 0x64
 800dc80:	fb01 f202 	mul.w	r2, r1, r2
 800dc84:	1a9b      	subs	r3, r3, r2
 800dc86:	b218      	sxth	r0, r3
 800dc88:	4b4b      	ldr	r3, [pc, #300]	; (800ddb8 <SendTxData+0x228>)
 800dc8a:	685a      	ldr	r2, [r3, #4]
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	1c59      	adds	r1, r3, #1
 800dc90:	61f9      	str	r1, [r7, #28]
 800dc92:	4413      	add	r3, r2
 800dc94:	b2c2      	uxtb	r2, r0
 800dc96:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800dc98:	4b4c      	ldr	r3, [pc, #304]	; (800ddcc <SendTxData+0x23c>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f7f2 fbd7 	bl	8000450 <__aeabi_f2d>
 800dca2:	f04f 0200 	mov.w	r2, #0
 800dca6:	4b48      	ldr	r3, [pc, #288]	; (800ddc8 <SendTxData+0x238>)
 800dca8:	f7f2 fc2a 	bl	8000500 <__aeabi_dmul>
 800dcac:	4602      	mov	r2, r0
 800dcae:	460b      	mov	r3, r1
 800dcb0:	4610      	mov	r0, r2
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	f7f2 febe 	bl	8000a34 <__aeabi_d2iz>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800dcbc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800dcc0:	4a3f      	ldr	r2, [pc, #252]	; (800ddc0 <SendTxData+0x230>)
 800dcc2:	fb82 1203 	smull	r1, r2, r2, r3
 800dcc6:	1152      	asrs	r2, r2, #5
 800dcc8:	17db      	asrs	r3, r3, #31
 800dcca:	1ad3      	subs	r3, r2, r3
 800dccc:	b218      	sxth	r0, r3
 800dcce:	4b3a      	ldr	r3, [pc, #232]	; (800ddb8 <SendTxData+0x228>)
 800dcd0:	685a      	ldr	r2, [r3, #4]
 800dcd2:	69fb      	ldr	r3, [r7, #28]
 800dcd4:	1c59      	adds	r1, r3, #1
 800dcd6:	61f9      	str	r1, [r7, #28]
 800dcd8:	4413      	add	r3, r2
 800dcda:	b2c2      	uxtb	r2, r0
 800dcdc:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800dcde:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800dce2:	4a37      	ldr	r2, [pc, #220]	; (800ddc0 <SendTxData+0x230>)
 800dce4:	fb82 1203 	smull	r1, r2, r2, r3
 800dce8:	1151      	asrs	r1, r2, #5
 800dcea:	17da      	asrs	r2, r3, #31
 800dcec:	1a8a      	subs	r2, r1, r2
 800dcee:	2164      	movs	r1, #100	; 0x64
 800dcf0:	fb01 f202 	mul.w	r2, r1, r2
 800dcf4:	1a9b      	subs	r3, r3, r2
 800dcf6:	b218      	sxth	r0, r3
 800dcf8:	4b2f      	ldr	r3, [pc, #188]	; (800ddb8 <SendTxData+0x228>)
 800dcfa:	685a      	ldr	r2, [r3, #4]
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	1c59      	adds	r1, r3, #1
 800dd00:	61f9      	str	r1, [r7, #28]
 800dd02:	4413      	add	r3, r2
 800dd04:	b2c2      	uxtb	r2, r0
 800dd06:	701a      	strb	r2, [r3, #0]


  AppData.BufferSize = i;
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	b2da      	uxtb	r2, r3
 800dd0c:	4b2a      	ldr	r3, [pc, #168]	; (800ddb8 <SendTxData+0x228>)
 800dd0e:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800dd10:	4b2f      	ldr	r3, [pc, #188]	; (800ddd0 <SendTxData+0x240>)
 800dd12:	7a5b      	ldrb	r3, [r3, #9]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d007      	beq.n	800dd28 <SendTxData+0x198>
 800dd18:	f002 f9f4 	bl	8010104 <LmHandlerJoinStatus>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	d102      	bne.n	800dd28 <SendTxData+0x198>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800dd22:	482b      	ldr	r0, [pc, #172]	; (800ddd0 <SendTxData+0x240>)
 800dd24:	f012 fb80 	bl	8020428 <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800dd28:	4b2a      	ldr	r3, [pc, #168]	; (800ddd4 <SendTxData+0x244>)
 800dd2a:	78db      	ldrb	r3, [r3, #3]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	4619      	mov	r1, r3
 800dd30:	4821      	ldr	r0, [pc, #132]	; (800ddb8 <SendTxData+0x228>)
 800dd32:	f002 fa03 	bl	801013c <LmHandlerSend>
 800dd36:	4603      	mov	r3, r0
 800dd38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (LORAMAC_HANDLER_SUCCESS == status)
 800dd3c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d106      	bne.n	800dd52 <SendTxData+0x1c2>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800dd44:	4b24      	ldr	r3, [pc, #144]	; (800ddd8 <SendTxData+0x248>)
 800dd46:	2201      	movs	r2, #1
 800dd48:	2100      	movs	r1, #0
 800dd4a:	2001      	movs	r0, #1
 800dd4c:	f012 fd76 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
 800dd50:	e016      	b.n	800dd80 <SendTxData+0x1f0>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800dd52:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800dd56:	f113 0f06 	cmn.w	r3, #6
 800dd5a:	d111      	bne.n	800dd80 <SendTxData+0x1f0>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800dd5c:	f002 f948 	bl	800fff0 <LmHandlerGetDutyCycleWaitTime>
 800dd60:	6278      	str	r0, [r7, #36]	; 0x24
    if (nextTxIn > 0)
 800dd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d00b      	beq.n	800dd80 <SendTxData+0x1f0>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800dd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6a:	4a1c      	ldr	r2, [pc, #112]	; (800dddc <SendTxData+0x24c>)
 800dd6c:	fba2 2303 	umull	r2, r3, r2, r3
 800dd70:	099b      	lsrs	r3, r3, #6
 800dd72:	9300      	str	r3, [sp, #0]
 800dd74:	4b1a      	ldr	r3, [pc, #104]	; (800dde0 <SendTxData+0x250>)
 800dd76:	2201      	movs	r2, #1
 800dd78:	2100      	movs	r1, #0
 800dd7a:	2001      	movs	r0, #1
 800dd7c:	f012 fd5e 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
  }
  }

  if (EventType == TX_ON_TIMER)
 800dd80:	4b18      	ldr	r3, [pc, #96]	; (800dde4 <SendTxData+0x254>)
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d10f      	bne.n	800dda8 <SendTxData+0x218>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800dd88:	4817      	ldr	r0, [pc, #92]	; (800dde8 <SendTxData+0x258>)
 800dd8a:	f012 fb4d 	bl	8020428 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800dd8e:	4b17      	ldr	r3, [pc, #92]	; (800ddec <SendTxData+0x25c>)
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd94:	4293      	cmp	r3, r2
 800dd96:	bf38      	it	cc
 800dd98:	4613      	movcc	r3, r2
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	4812      	ldr	r0, [pc, #72]	; (800dde8 <SendTxData+0x258>)
 800dd9e:	f012 fbb3 	bl	8020508 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800dda2:	4811      	ldr	r0, [pc, #68]	; (800dde8 <SendTxData+0x258>)
 800dda4:	f012 fad2 	bl	802034c <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800dda8:	bf00      	nop
 800ddaa:	3728      	adds	r7, #40	; 0x28
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	080210d4 	.word	0x080210d4
 800ddb4:	080210e0 	.word	0x080210e0
 800ddb8:	20000098 	.word	0x20000098
 800ddbc:	20000690 	.word	0x20000690
 800ddc0:	51eb851f 	.word	0x51eb851f
 800ddc4:	20000694 	.word	0x20000694
 800ddc8:	40590000 	.word	0x40590000
 800ddcc:	20000698 	.word	0x20000698
 800ddd0:	20000c58 	.word	0x20000c58
 800ddd4:	20000080 	.word	0x20000080
 800ddd8:	080210ec 	.word	0x080210ec
 800dddc:	10624dd3 	.word	0x10624dd3
 800dde0:	080210fc 	.word	0x080210fc
 800dde4:	20000b00 	.word	0x20000b00
 800dde8:	20000b04 	.word	0x20000b04
 800ddec:	20000094 	.word	0x20000094

0800ddf0 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800ddf8:	2100      	movs	r1, #0
 800ddfa:	2002      	movs	r0, #2
 800ddfc:	f012 f9ee 	bl	80201dc <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800de00:	4803      	ldr	r0, [pc, #12]	; (800de10 <OnTxTimerEvent+0x20>)
 800de02:	f012 faa3 	bl	802034c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800de06:	bf00      	nop
 800de08:	3708      	adds	r7, #8
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	20000b04 	.word	0x20000b04

0800de14 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800de14:	b480      	push	{r7}
 800de16:	b083      	sub	sp, #12
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800de1c:	bf00      	nop
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	bc80      	pop	{r7}
 800de24:	4770      	bx	lr

0800de26 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800de26:	b480      	push	{r7}
 800de28:	b083      	sub	sp, #12
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800de2e:	bf00      	nop
 800de30:	370c      	adds	r7, #12
 800de32:	46bd      	mov	sp, r7
 800de34:	bc80      	pop	{r7}
 800de36:	4770      	bx	lr

0800de38 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800de38:	b480      	push	{r7}
 800de3a:	b083      	sub	sp, #12
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800de40:	bf00      	nop
 800de42:	370c      	adds	r7, #12
 800de44:	46bd      	mov	sp, r7
 800de46:	bc80      	pop	{r7}
 800de48:	4770      	bx	lr
	...

0800de4c <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b086      	sub	sp, #24
 800de50:	af04      	add	r7, sp, #16
 800de52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d041      	beq.n	800dede <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d03d      	beq.n	800dede <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800de62:	4821      	ldr	r0, [pc, #132]	; (800dee8 <OnTxData+0x9c>)
 800de64:	f012 fa72 	bl	802034c <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800de68:	4b20      	ldr	r3, [pc, #128]	; (800deec <OnTxData+0xa0>)
 800de6a:	2200      	movs	r2, #0
 800de6c:	2100      	movs	r1, #0
 800de6e:	2002      	movs	r0, #2
 800de70:	f012 fce4 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	68db      	ldr	r3, [r3, #12]
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	7c12      	ldrb	r2, [r2, #16]
 800de7c:	4611      	mov	r1, r2
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800de84:	4610      	mov	r0, r2
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800de8c:	9203      	str	r2, [sp, #12]
 800de8e:	9002      	str	r0, [sp, #8]
 800de90:	9101      	str	r1, [sp, #4]
 800de92:	9300      	str	r3, [sp, #0]
 800de94:	4b16      	ldr	r3, [pc, #88]	; (800def0 <OnTxData+0xa4>)
 800de96:	2200      	movs	r2, #0
 800de98:	2100      	movs	r1, #0
 800de9a:	2003      	movs	r0, #3
 800de9c:	f012 fcce 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800dea0:	4b14      	ldr	r3, [pc, #80]	; (800def4 <OnTxData+0xa8>)
 800dea2:	2200      	movs	r2, #0
 800dea4:	2100      	movs	r1, #0
 800dea6:	2003      	movs	r0, #3
 800dea8:	f012 fcc8 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	7a1b      	ldrb	r3, [r3, #8]
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	d10e      	bne.n	800ded2 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	7a5b      	ldrb	r3, [r3, #9]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d001      	beq.n	800dec0 <OnTxData+0x74>
 800debc:	4b0e      	ldr	r3, [pc, #56]	; (800def8 <OnTxData+0xac>)
 800debe:	e000      	b.n	800dec2 <OnTxData+0x76>
 800dec0:	4b0e      	ldr	r3, [pc, #56]	; (800defc <OnTxData+0xb0>)
 800dec2:	9300      	str	r3, [sp, #0]
 800dec4:	4b0e      	ldr	r3, [pc, #56]	; (800df00 <OnTxData+0xb4>)
 800dec6:	2200      	movs	r2, #0
 800dec8:	2100      	movs	r1, #0
 800deca:	2003      	movs	r0, #3
 800decc:	f012 fcb6 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800ded0:	e005      	b.n	800dede <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800ded2:	4b0c      	ldr	r3, [pc, #48]	; (800df04 <OnTxData+0xb8>)
 800ded4:	2200      	movs	r2, #0
 800ded6:	2100      	movs	r1, #0
 800ded8:	2003      	movs	r0, #3
 800deda:	f012 fcaf 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
}
 800dede:	bf00      	nop
 800dee0:	3708      	adds	r7, #8
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	20000c28 	.word	0x20000c28
 800deec:	0802111c 	.word	0x0802111c
 800def0:	08021150 	.word	0x08021150
 800def4:	08021184 	.word	0x08021184
 800def8:	08021194 	.word	0x08021194
 800defc:	08021198 	.word	0x08021198
 800df00:	080211a0 	.word	0x080211a0
 800df04:	080211b4 	.word	0x080211b4

0800df08 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d035      	beq.n	800df82 <OnJoinRequest+0x7a>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d11a      	bne.n	800df56 <OnJoinRequest+0x4e>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800df20:	481a      	ldr	r0, [pc, #104]	; (800df8c <OnJoinRequest+0x84>)
 800df22:	f012 fa81 	bl	8020428 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800df26:	4b1a      	ldr	r3, [pc, #104]	; (800df90 <OnJoinRequest+0x88>)
 800df28:	2200      	movs	r2, #0
 800df2a:	2100      	movs	r1, #0
 800df2c:	2002      	movs	r0, #2
 800df2e:	f012 fc85 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	799b      	ldrb	r3, [r3, #6]
 800df36:	2b01      	cmp	r3, #1
 800df38:	d106      	bne.n	800df48 <OnJoinRequest+0x40>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800df3a:	4b16      	ldr	r3, [pc, #88]	; (800df94 <OnJoinRequest+0x8c>)
 800df3c:	2200      	movs	r2, #0
 800df3e:	2100      	movs	r1, #0
 800df40:	2002      	movs	r0, #2
 800df42:	f012 fc7b 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800df46:	e01c      	b.n	800df82 <OnJoinRequest+0x7a>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800df48:	4b13      	ldr	r3, [pc, #76]	; (800df98 <OnJoinRequest+0x90>)
 800df4a:	2200      	movs	r2, #0
 800df4c:	2100      	movs	r1, #0
 800df4e:	2002      	movs	r0, #2
 800df50:	f012 fc74 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
}
 800df54:	e015      	b.n	800df82 <OnJoinRequest+0x7a>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800df56:	4b11      	ldr	r3, [pc, #68]	; (800df9c <OnJoinRequest+0x94>)
 800df58:	2200      	movs	r2, #0
 800df5a:	2100      	movs	r1, #0
 800df5c:	2002      	movs	r0, #2
 800df5e:	f012 fc6d 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	799b      	ldrb	r3, [r3, #6]
 800df66:	2b02      	cmp	r3, #2
 800df68:	d10b      	bne.n	800df82 <OnJoinRequest+0x7a>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800df6a:	4b0d      	ldr	r3, [pc, #52]	; (800dfa0 <OnJoinRequest+0x98>)
 800df6c:	2200      	movs	r2, #0
 800df6e:	2100      	movs	r1, #0
 800df70:	2002      	movs	r0, #2
 800df72:	f012 fc63 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800df76:	4b0b      	ldr	r3, [pc, #44]	; (800dfa4 <OnJoinRequest+0x9c>)
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	2101      	movs	r1, #1
 800df7c:	4618      	mov	r0, r3
 800df7e:	f002 f841 	bl	8010004 <LmHandlerJoin>
}
 800df82:	bf00      	nop
 800df84:	3708      	adds	r7, #8
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	20000c58 	.word	0x20000c58
 800df90:	080211c4 	.word	0x080211c4
 800df94:	080211dc 	.word	0x080211dc
 800df98:	080211fc 	.word	0x080211fc
 800df9c:	0802121c 	.word	0x0802121c
 800dfa0:	08021238 	.word	0x08021238
 800dfa4:	20000030 	.word	0x20000030

0800dfa8 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800dfa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfaa:	b093      	sub	sp, #76	; 0x4c
 800dfac:	af0c      	add	r7, sp, #48	; 0x30
 800dfae:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d056      	beq.n	800e064 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	785b      	ldrb	r3, [r3, #1]
 800dfba:	2b02      	cmp	r3, #2
 800dfbc:	d008      	beq.n	800dfd0 <OnBeaconStatusChange+0x28>
 800dfbe:	2b03      	cmp	r3, #3
 800dfc0:	d049      	beq.n	800e056 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800dfc2:	4b2b      	ldr	r3, [pc, #172]	; (800e070 <OnBeaconStatusChange+0xc8>)
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	2002      	movs	r0, #2
 800dfca:	f012 fc37 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800dfce:	e04a      	b.n	800e066 <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	7c1b      	ldrb	r3, [r3, #16]
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800dfdc:	461c      	mov	r4, r3
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800dfe4:	461d      	mov	r5, r3
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	68db      	ldr	r3, [r3, #12]
 800dfea:	697a      	ldr	r2, [r7, #20]
 800dfec:	6852      	ldr	r2, [r2, #4]
 800dfee:	6979      	ldr	r1, [r7, #20]
 800dff0:	7d49      	ldrb	r1, [r1, #21]
 800dff2:	460e      	mov	r6, r1
 800dff4:	6979      	ldr	r1, [r7, #20]
 800dff6:	7d89      	ldrb	r1, [r1, #22]
 800dff8:	6139      	str	r1, [r7, #16]
 800dffa:	6979      	ldr	r1, [r7, #20]
 800dffc:	7dc9      	ldrb	r1, [r1, #23]
 800dffe:	60f9      	str	r1, [r7, #12]
 800e000:	6979      	ldr	r1, [r7, #20]
 800e002:	7e09      	ldrb	r1, [r1, #24]
 800e004:	60b9      	str	r1, [r7, #8]
 800e006:	6979      	ldr	r1, [r7, #20]
 800e008:	7e49      	ldrb	r1, [r1, #25]
 800e00a:	6079      	str	r1, [r7, #4]
 800e00c:	6979      	ldr	r1, [r7, #20]
 800e00e:	7e89      	ldrb	r1, [r1, #26]
 800e010:	6039      	str	r1, [r7, #0]
 800e012:	6979      	ldr	r1, [r7, #20]
 800e014:	7ec9      	ldrb	r1, [r1, #27]
 800e016:	910b      	str	r1, [sp, #44]	; 0x2c
 800e018:	f8d7 c000 	ldr.w	ip, [r7]
 800e01c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800e020:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800e024:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e028:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800e02c:	f8cd c020 	str.w	ip, [sp, #32]
 800e030:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800e034:	f8cd c01c 	str.w	ip, [sp, #28]
 800e038:	6939      	ldr	r1, [r7, #16]
 800e03a:	9106      	str	r1, [sp, #24]
 800e03c:	9605      	str	r6, [sp, #20]
 800e03e:	9204      	str	r2, [sp, #16]
 800e040:	9303      	str	r3, [sp, #12]
 800e042:	9502      	str	r5, [sp, #8]
 800e044:	9401      	str	r4, [sp, #4]
 800e046:	9000      	str	r0, [sp, #0]
 800e048:	4b0a      	ldr	r3, [pc, #40]	; (800e074 <OnBeaconStatusChange+0xcc>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	2100      	movs	r1, #0
 800e04e:	2002      	movs	r0, #2
 800e050:	f012 fbf4 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800e054:	e007      	b.n	800e066 <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800e056:	4b08      	ldr	r3, [pc, #32]	; (800e078 <OnBeaconStatusChange+0xd0>)
 800e058:	2200      	movs	r2, #0
 800e05a:	2100      	movs	r1, #0
 800e05c:	2002      	movs	r0, #2
 800e05e:	f012 fbed 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800e062:	e000      	b.n	800e066 <OnBeaconStatusChange+0xbe>
      }
    }
  }
 800e064:	bf00      	nop
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800e066:	bf00      	nop
 800e068:	371c      	adds	r7, #28
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e06e:	bf00      	nop
 800e070:	0802125c 	.word	0x0802125c
 800e074:	08021274 	.word	0x08021274
 800e078:	080212e8 	.word	0x080212e8

0800e07c <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b084      	sub	sp, #16
 800e080:	af02      	add	r7, sp, #8
 800e082:	4603      	mov	r3, r0
 800e084:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800e086:	79fb      	ldrb	r3, [r7, #7]
 800e088:	4a06      	ldr	r2, [pc, #24]	; (800e0a4 <OnClassChange+0x28>)
 800e08a:	5cd3      	ldrb	r3, [r2, r3]
 800e08c:	9300      	str	r3, [sp, #0]
 800e08e:	4b06      	ldr	r3, [pc, #24]	; (800e0a8 <OnClassChange+0x2c>)
 800e090:	2200      	movs	r2, #0
 800e092:	2100      	movs	r1, #0
 800e094:	2002      	movs	r0, #2
 800e096:	f012 fbd1 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800e09a:	bf00      	nop
 800e09c:	3708      	adds	r7, #8
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}
 800e0a2:	bf00      	nop
 800e0a4:	08021324 	.word	0x08021324
 800e0a8:	08021308 	.word	0x08021308

0800e0ac <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800e0b0:	2100      	movs	r1, #0
 800e0b2:	2001      	movs	r0, #1
 800e0b4:	f012 f892 	bl	80201dc <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800e0b8:	bf00      	nop
 800e0ba:	bd80      	pop	{r7, pc}

0800e0bc <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b082      	sub	sp, #8
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800e0c4:	4a0d      	ldr	r2, [pc, #52]	; (800e0fc <OnTxPeriodicityChanged+0x40>)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800e0ca:	4b0c      	ldr	r3, [pc, #48]	; (800e0fc <OnTxPeriodicityChanged+0x40>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d103      	bne.n	800e0da <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800e0d2:	4b0a      	ldr	r3, [pc, #40]	; (800e0fc <OnTxPeriodicityChanged+0x40>)
 800e0d4:	f242 7210 	movw	r2, #10000	; 0x2710
 800e0d8:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800e0da:	4809      	ldr	r0, [pc, #36]	; (800e100 <OnTxPeriodicityChanged+0x44>)
 800e0dc:	f012 f9a4 	bl	8020428 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800e0e0:	4b06      	ldr	r3, [pc, #24]	; (800e0fc <OnTxPeriodicityChanged+0x40>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	4806      	ldr	r0, [pc, #24]	; (800e100 <OnTxPeriodicityChanged+0x44>)
 800e0e8:	f012 fa0e 	bl	8020508 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800e0ec:	4804      	ldr	r0, [pc, #16]	; (800e100 <OnTxPeriodicityChanged+0x44>)
 800e0ee:	f012 f92d 	bl	802034c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800e0f2:	bf00      	nop
 800e0f4:	3708      	adds	r7, #8
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	20000094 	.word	0x20000094
 800e100:	20000b04 	.word	0x20000b04

0800e104 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800e104:	b480      	push	{r7}
 800e106:	b083      	sub	sp, #12
 800e108:	af00      	add	r7, sp, #0
 800e10a:	4603      	mov	r3, r0
 800e10c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800e10e:	4a04      	ldr	r2, [pc, #16]	; (800e120 <OnTxFrameCtrlChanged+0x1c>)
 800e110:	79fb      	ldrb	r3, [r7, #7]
 800e112:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800e114:	bf00      	nop
 800e116:	370c      	adds	r7, #12
 800e118:	46bd      	mov	sp, r7
 800e11a:	bc80      	pop	{r7}
 800e11c:	4770      	bx	lr
 800e11e:	bf00      	nop
 800e120:	20000080 	.word	0x20000080

0800e124 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	4603      	mov	r3, r0
 800e12c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800e12e:	4a04      	ldr	r2, [pc, #16]	; (800e140 <OnPingSlotPeriodicityChanged+0x1c>)
 800e130:	79fb      	ldrb	r3, [r7, #7]
 800e132:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800e134:	bf00      	nop
 800e136:	370c      	adds	r7, #12
 800e138:	46bd      	mov	sp, r7
 800e13a:	bc80      	pop	{r7}
 800e13c:	4770      	bx	lr
 800e13e:	bf00      	nop
 800e140:	20000080 	.word	0x20000080

0800e144 <OnSystemReset>:

static void OnSystemReset(void)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800e148:	f002 fde1 	bl	8010d0e <LmHandlerHalt>
 800e14c:	4603      	mov	r3, r0
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d106      	bne.n	800e160 <OnSystemReset+0x1c>
 800e152:	f001 ffd7 	bl	8010104 <LmHandlerJoinStatus>
 800e156:	4603      	mov	r3, r0
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d101      	bne.n	800e160 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800e15c:	f7ff fb6a 	bl	800d834 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800e160:	bf00      	nop
 800e162:	bd80      	pop	{r7, pc}

0800e164 <StopJoin>:

static void StopJoin(void)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800e168:	4817      	ldr	r0, [pc, #92]	; (800e1c8 <StopJoin+0x64>)
 800e16a:	f012 f95d 	bl	8020428 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800e16e:	f002 fdc1 	bl	8010cf4 <LmHandlerStop>
 800e172:	4603      	mov	r3, r0
 800e174:	2b00      	cmp	r3, #0
 800e176:	d006      	beq.n	800e186 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800e178:	4b14      	ldr	r3, [pc, #80]	; (800e1cc <StopJoin+0x68>)
 800e17a:	2200      	movs	r2, #0
 800e17c:	2100      	movs	r1, #0
 800e17e:	2002      	movs	r0, #2
 800e180:	f012 fb5c 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
 800e184:	e01a      	b.n	800e1bc <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800e186:	4b12      	ldr	r3, [pc, #72]	; (800e1d0 <StopJoin+0x6c>)
 800e188:	2200      	movs	r2, #0
 800e18a:	2100      	movs	r1, #0
 800e18c:	2002      	movs	r0, #2
 800e18e:	f012 fb55 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800e192:	4b10      	ldr	r3, [pc, #64]	; (800e1d4 <StopJoin+0x70>)
 800e194:	2201      	movs	r2, #1
 800e196:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800e198:	4b0f      	ldr	r3, [pc, #60]	; (800e1d8 <StopJoin+0x74>)
 800e19a:	2200      	movs	r2, #0
 800e19c:	2100      	movs	r1, #0
 800e19e:	2002      	movs	r0, #2
 800e1a0:	f012 fb4c 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800e1a4:	480d      	ldr	r0, [pc, #52]	; (800e1dc <StopJoin+0x78>)
 800e1a6:	f001 fdd7 	bl	800fd58 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800e1aa:	4b0a      	ldr	r3, [pc, #40]	; (800e1d4 <StopJoin+0x70>)
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	2101      	movs	r1, #1
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f001 ff27 	bl	8010004 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800e1b6:	4804      	ldr	r0, [pc, #16]	; (800e1c8 <StopJoin+0x64>)
 800e1b8:	f012 f8c8 	bl	802034c <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800e1bc:	4808      	ldr	r0, [pc, #32]	; (800e1e0 <StopJoin+0x7c>)
 800e1be:	f012 f8c5 	bl	802034c <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800e1c2:	bf00      	nop
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	20000b04 	.word	0x20000b04
 800e1cc:	08021328 	.word	0x08021328
 800e1d0:	08021348 	.word	0x08021348
 800e1d4:	20000030 	.word	0x20000030
 800e1d8:	0802135c 	.word	0x0802135c
 800e1dc:	20000080 	.word	0x20000080
 800e1e0:	20000b1c 	.word	0x20000b1c

0800e1e4 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800e1ec:	4b05      	ldr	r3, [pc, #20]	; (800e204 <OnStopJoinTimerEvent+0x20>)
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	2b02      	cmp	r3, #2
 800e1f2:	d103      	bne.n	800e1fc <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	2008      	movs	r0, #8
 800e1f8:	f011 fff0 	bl	80201dc <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800e1fc:	bf00      	nop
 800e1fe:	3708      	adds	r7, #8
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	20000030 	.word	0x20000030

0800e208 <StoreContext>:

static void StoreContext(void)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800e20e:	23ff      	movs	r3, #255	; 0xff
 800e210:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800e212:	f002 fd89 	bl	8010d28 <LmHandlerNvmDataStore>
 800e216:	4603      	mov	r3, r0
 800e218:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800e21a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e21e:	f113 0f08 	cmn.w	r3, #8
 800e222:	d106      	bne.n	800e232 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800e224:	4b0a      	ldr	r3, [pc, #40]	; (800e250 <StoreContext+0x48>)
 800e226:	2200      	movs	r2, #0
 800e228:	2100      	movs	r1, #0
 800e22a:	2002      	movs	r0, #2
 800e22c:	f012 fb06 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800e230:	e00a      	b.n	800e248 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800e232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e23a:	d105      	bne.n	800e248 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800e23c:	4b05      	ldr	r3, [pc, #20]	; (800e254 <StoreContext+0x4c>)
 800e23e:	2200      	movs	r2, #0
 800e240:	2100      	movs	r1, #0
 800e242:	2002      	movs	r0, #2
 800e244:	f012 fafa 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
}
 800e248:	bf00      	nop
 800e24a:	3708      	adds	r7, #8
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	0802137c 	.word	0x0802137c
 800e254:	08021394 	.word	0x08021394

0800e258 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	4603      	mov	r3, r0
 800e260:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800e262:	79fb      	ldrb	r3, [r7, #7]
 800e264:	2b01      	cmp	r3, #1
 800e266:	d106      	bne.n	800e276 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800e268:	4b08      	ldr	r3, [pc, #32]	; (800e28c <OnNvmDataChange+0x34>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	2100      	movs	r1, #0
 800e26e:	2002      	movs	r0, #2
 800e270:	f012 fae4 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800e274:	e005      	b.n	800e282 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800e276:	4b06      	ldr	r3, [pc, #24]	; (800e290 <OnNvmDataChange+0x38>)
 800e278:	2200      	movs	r2, #0
 800e27a:	2100      	movs	r1, #0
 800e27c:	2002      	movs	r0, #2
 800e27e:	f012 fadd 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
}
 800e282:	bf00      	nop
 800e284:	3708      	adds	r7, #8
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	080213ac 	.word	0x080213ac
 800e290:	080213c0 	.word	0x080213c0

0800e294 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b082      	sub	sp, #8
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800e29e:	f7f7 fd7f 	bl	8005da0 <HAL_FLASH_Unlock>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d11c      	bne.n	800e2e2 <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800e2a8:	4b10      	ldr	r3, [pc, #64]	; (800e2ec <OnStoreContextRequest+0x58>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	029a      	lsls	r2, r3, #10
 800e2ae:	4b10      	ldr	r3, [pc, #64]	; (800e2f0 <OnStoreContextRequest+0x5c>)
 800e2b0:	4013      	ands	r3, r2
 800e2b2:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800e2b6:	fbb2 f1f3 	udiv	r1, r2, r3
 800e2ba:	fb01 f303 	mul.w	r3, r1, r3
 800e2be:	1ad3      	subs	r3, r2, r3
 800e2c0:	0adb      	lsrs	r3, r3, #11
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	2101      	movs	r1, #1
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7f3 fda5 	bl	8001e16 <FLASH_IF_EraseByPages>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d105      	bne.n	800e2de <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	683a      	ldr	r2, [r7, #0]
 800e2d6:	6879      	ldr	r1, [r7, #4]
 800e2d8:	4806      	ldr	r0, [pc, #24]	; (800e2f4 <OnStoreContextRequest+0x60>)
 800e2da:	f7f3 fcbb 	bl	8001c54 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800e2de:	f7f7 fd81 	bl	8005de4 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800e2e2:	bf00      	nop
 800e2e4:	3708      	adds	r7, #8
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
 800e2ea:	bf00      	nop
 800e2ec:	1fff75e0 	.word	0x1fff75e0
 800e2f0:	03fffc00 	.word	0x03fffc00
 800e2f4:	0803f000 	.word	0x0803f000

0800e2f8 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	b29b      	uxth	r3, r3
 800e306:	461a      	mov	r2, r3
 800e308:	4903      	ldr	r1, [pc, #12]	; (800e318 <OnRestoreContextRequest+0x20>)
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f011 fa46 	bl	801f79c <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800e310:	bf00      	nop
 800e312:	3708      	adds	r7, #8
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}
 800e318:	0803f000 	.word	0x0803f000

0800e31c <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800e320:	4b16      	ldr	r3, [pc, #88]	; (800e37c <LoraInfo_Init+0x60>)
 800e322:	2200      	movs	r2, #0
 800e324:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800e326:	4b15      	ldr	r3, [pc, #84]	; (800e37c <LoraInfo_Init+0x60>)
 800e328:	2200      	movs	r2, #0
 800e32a:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800e32c:	4b13      	ldr	r3, [pc, #76]	; (800e37c <LoraInfo_Init+0x60>)
 800e32e:	2200      	movs	r2, #0
 800e330:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800e332:	4b12      	ldr	r3, [pc, #72]	; (800e37c <LoraInfo_Init+0x60>)
 800e334:	2200      	movs	r2, #0
 800e336:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800e338:	4b10      	ldr	r3, [pc, #64]	; (800e37c <LoraInfo_Init+0x60>)
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	f043 0320 	orr.w	r3, r3, #32
 800e340:	4a0e      	ldr	r2, [pc, #56]	; (800e37c <LoraInfo_Init+0x60>)
 800e342:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800e344:	4b0d      	ldr	r3, [pc, #52]	; (800e37c <LoraInfo_Init+0x60>)
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d10c      	bne.n	800e366 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800e34c:	4b0c      	ldr	r3, [pc, #48]	; (800e380 <LoraInfo_Init+0x64>)
 800e34e:	2200      	movs	r2, #0
 800e350:	2100      	movs	r1, #0
 800e352:	2000      	movs	r0, #0
 800e354:	f012 fa72 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800e358:	bf00      	nop
 800e35a:	f012 fa5d 	bl	8020818 <UTIL_ADV_TRACE_IsBufferEmpty>
 800e35e:	4603      	mov	r3, r0
 800e360:	2b01      	cmp	r3, #1
 800e362:	d1fa      	bne.n	800e35a <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800e364:	e7fe      	b.n	800e364 <LoraInfo_Init+0x48>
  }

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  loraInfo.ClassB = 1;
 800e366:	4b05      	ldr	r3, [pc, #20]	; (800e37c <LoraInfo_Init+0x60>)
 800e368:	2201      	movs	r2, #1
 800e36a:	609a      	str	r2, [r3, #8]
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800e36c:	4b03      	ldr	r3, [pc, #12]	; (800e37c <LoraInfo_Init+0x60>)
 800e36e:	2200      	movs	r2, #0
 800e370:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800e372:	4b02      	ldr	r3, [pc, #8]	; (800e37c <LoraInfo_Init+0x60>)
 800e374:	2203      	movs	r2, #3
 800e376:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800e378:	bf00      	nop
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	20000c70 	.word	0x20000c70
 800e380:	080213d4 	.word	0x080213d4

0800e384 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800e384:	b480      	push	{r7}
 800e386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800e388:	4b02      	ldr	r3, [pc, #8]	; (800e394 <LoraInfo_GetPtr+0x10>)
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bc80      	pop	{r7}
 800e390:	4770      	bx	lr
 800e392:	bf00      	nop
 800e394:	20000c70 	.word	0x20000c70

0800e398 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800e39c:	f7f5 fd75 	bl	8003e8a <BSP_RADIO_Init>
 800e3a0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	bd80      	pop	{r7, pc}

0800e3a6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b082      	sub	sp, #8
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800e3b0:	79fb      	ldrb	r3, [r7, #7]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7f5 fd9a 	bl	8003eec <BSP_RADIO_ConfigRFSwitch>
 800e3b8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3708      	adds	r7, #8
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}

0800e3c2 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800e3c2:	b580      	push	{r7, lr}
 800e3c4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800e3c6:	f7f5 fddf 	bl	8003f88 <BSP_RADIO_GetTxConfig>
 800e3ca:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800e3d4:	f7f5 fddf 	bl	8003f96 <BSP_RADIO_IsTCXO>
 800e3d8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	bd80      	pop	{r7, pc}

0800e3de <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800e3e2:	f7f5 fddf 	bl	8003fa4 <BSP_RADIO_IsDCDC>
 800e3e6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800e3f6:	79fb      	ldrb	r3, [r7, #7]
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7f5 fdda 	bl	8003fb2 <BSP_RADIO_GetRFOMaxPowerConfig>
 800e3fe:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800e400:	4618      	mov	r0, r3
 800e402:	3708      	adds	r7, #8
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	33f1      	adds	r3, #241	; 0xf1
 800e414:	2210      	movs	r2, #16
 800e416:	2100      	movs	r1, #0
 800e418:	4618      	mov	r0, r3
 800e41a:	f00d fef5 	bl	801c208 <memset1>
    ctx->M_n = 0;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2200      	movs	r2, #0
 800e422:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	22f0      	movs	r2, #240	; 0xf0
 800e42a:	2100      	movs	r1, #0
 800e42c:	4618      	mov	r0, r3
 800e42e:	f00d feeb 	bl	801c208 <memset1>
}
 800e432:	bf00      	nop
 800e434:	3708      	adds	r7, #8
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}

0800e43a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800e43a:	b580      	push	{r7, lr}
 800e43c:	b082      	sub	sp, #8
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
 800e442:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	461a      	mov	r2, r3
 800e448:	2110      	movs	r1, #16
 800e44a:	6838      	ldr	r0, [r7, #0]
 800e44c:	f000 fe5c 	bl	800f108 <lorawan_aes_set_key>
}
 800e450:	bf00      	nop
 800e452:	3708      	adds	r7, #8
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b08c      	sub	sp, #48	; 0x30
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	60b9      	str	r1, [r7, #8]
 800e462:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	f000 80a1 	beq.w	800e5b2 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e476:	f1c3 0310 	rsb	r3, r3, #16
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	4293      	cmp	r3, r2
 800e47e:	bf28      	it	cs
 800e480:	4613      	movcs	r3, r2
 800e482:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	f203 1201 	addw	r2, r3, #257	; 0x101
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e490:	4413      	add	r3, r2
 800e492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e494:	b292      	uxth	r2, r2
 800e496:	68b9      	ldr	r1, [r7, #8]
 800e498:	4618      	mov	r0, r3
 800e49a:	f00d fe7a 	bl	801c192 <memcpy1>
        ctx->M_n += mlen;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a6:	441a      	add	r2, r3
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e4b4:	2b0f      	cmp	r3, #15
 800e4b6:	f240 808d 	bls.w	800e5d4 <AES_CMAC_Update+0x17c>
 800e4ba:	687a      	ldr	r2, [r7, #4]
 800e4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	f000 8088 	beq.w	800e5d4 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4c8:	e015      	b.n	800e4f6 <AES_CMAC_Update+0x9e>
 800e4ca:	68fa      	ldr	r2, [r7, #12]
 800e4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ce:	4413      	add	r3, r2
 800e4d0:	33f1      	adds	r3, #241	; 0xf1
 800e4d2:	781a      	ldrb	r2, [r3, #0]
 800e4d4:	68f9      	ldr	r1, [r7, #12]
 800e4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d8:	440b      	add	r3, r1
 800e4da:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	4053      	eors	r3, r2
 800e4e2:	b2d9      	uxtb	r1, r3
 800e4e4:	68fa      	ldr	r2, [r7, #12]
 800e4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e8:	4413      	add	r3, r2
 800e4ea:	33f1      	adds	r3, #241	; 0xf1
 800e4ec:	460a      	mov	r2, r1
 800e4ee:	701a      	strb	r2, [r3, #0]
 800e4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f8:	2b0f      	cmp	r3, #15
 800e4fa:	dde6      	ble.n	800e4ca <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800e502:	f107 0314 	add.w	r3, r7, #20
 800e506:	2210      	movs	r2, #16
 800e508:	4618      	mov	r0, r3
 800e50a:	f00d fe42 	bl	801c192 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e50e:	68fa      	ldr	r2, [r7, #12]
 800e510:	f107 0114 	add.w	r1, r7, #20
 800e514:	f107 0314 	add.w	r3, r7, #20
 800e518:	4618      	mov	r0, r3
 800e51a:	f000 fed3 	bl	800f2c4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	33f1      	adds	r3, #241	; 0xf1
 800e522:	f107 0114 	add.w	r1, r7, #20
 800e526:	2210      	movs	r2, #16
 800e528:	4618      	mov	r0, r3
 800e52a:	f00d fe32 	bl	801c192 <memcpy1>

        data += mlen;
 800e52e:	68ba      	ldr	r2, [r7, #8]
 800e530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e532:	4413      	add	r3, r2
 800e534:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800e536:	687a      	ldr	r2, [r7, #4]
 800e538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53a:	1ad3      	subs	r3, r2, r3
 800e53c:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800e53e:	e038      	b.n	800e5b2 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800e540:	2300      	movs	r3, #0
 800e542:	62bb      	str	r3, [r7, #40]	; 0x28
 800e544:	e013      	b.n	800e56e <AES_CMAC_Update+0x116>
 800e546:	68fa      	ldr	r2, [r7, #12]
 800e548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54a:	4413      	add	r3, r2
 800e54c:	33f1      	adds	r3, #241	; 0xf1
 800e54e:	781a      	ldrb	r2, [r3, #0]
 800e550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e552:	68b9      	ldr	r1, [r7, #8]
 800e554:	440b      	add	r3, r1
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	4053      	eors	r3, r2
 800e55a:	b2d9      	uxtb	r1, r3
 800e55c:	68fa      	ldr	r2, [r7, #12]
 800e55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e560:	4413      	add	r3, r2
 800e562:	33f1      	adds	r3, #241	; 0xf1
 800e564:	460a      	mov	r2, r1
 800e566:	701a      	strb	r2, [r3, #0]
 800e568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56a:	3301      	adds	r3, #1
 800e56c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e570:	2b0f      	cmp	r3, #15
 800e572:	dde8      	ble.n	800e546 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800e57a:	f107 0314 	add.w	r3, r7, #20
 800e57e:	2210      	movs	r2, #16
 800e580:	4618      	mov	r0, r3
 800e582:	f00d fe06 	bl	801c192 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e586:	68fa      	ldr	r2, [r7, #12]
 800e588:	f107 0114 	add.w	r1, r7, #20
 800e58c:	f107 0314 	add.w	r3, r7, #20
 800e590:	4618      	mov	r0, r3
 800e592:	f000 fe97 	bl	800f2c4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	33f1      	adds	r3, #241	; 0xf1
 800e59a:	f107 0114 	add.w	r1, r7, #20
 800e59e:	2210      	movs	r2, #16
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f00d fdf6 	bl	801c192 <memcpy1>

        data += 16;
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	3310      	adds	r3, #16
 800e5aa:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	3b10      	subs	r3, #16
 800e5b0:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2b10      	cmp	r3, #16
 800e5b6:	d8c3      	bhi.n	800e540 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	b292      	uxth	r2, r2
 800e5c2:	68b9      	ldr	r1, [r7, #8]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f00d fde4 	bl	801c192 <memcpy1>
    ctx->M_n = len;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800e5d2:	e000      	b.n	800e5d6 <AES_CMAC_Update+0x17e>
            return;
 800e5d4:	bf00      	nop
}
 800e5d6:	3730      	adds	r7, #48	; 0x30
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b092      	sub	sp, #72	; 0x48
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800e5e6:	f107 031c 	add.w	r3, r7, #28
 800e5ea:	2210      	movs	r2, #16
 800e5ec:	2100      	movs	r1, #0
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f00d fe0a 	bl	801c208 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800e5f4:	683a      	ldr	r2, [r7, #0]
 800e5f6:	f107 011c 	add.w	r1, r7, #28
 800e5fa:	f107 031c 	add.w	r3, r7, #28
 800e5fe:	4618      	mov	r0, r3
 800e600:	f000 fe60 	bl	800f2c4 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800e604:	7f3b      	ldrb	r3, [r7, #28]
 800e606:	b25b      	sxtb	r3, r3
 800e608:	2b00      	cmp	r3, #0
 800e60a:	da30      	bge.n	800e66e <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800e60c:	2300      	movs	r3, #0
 800e60e:	647b      	str	r3, [r7, #68]	; 0x44
 800e610:	e01b      	b.n	800e64a <AES_CMAC_Final+0x6e>
 800e612:	f107 021c 	add.w	r2, r7, #28
 800e616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e618:	4413      	add	r3, r2
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	005b      	lsls	r3, r3, #1
 800e61e:	b25a      	sxtb	r2, r3
 800e620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e622:	3301      	adds	r3, #1
 800e624:	3348      	adds	r3, #72	; 0x48
 800e626:	443b      	add	r3, r7
 800e628:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e62c:	09db      	lsrs	r3, r3, #7
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	b25b      	sxtb	r3, r3
 800e632:	4313      	orrs	r3, r2
 800e634:	b25b      	sxtb	r3, r3
 800e636:	b2d9      	uxtb	r1, r3
 800e638:	f107 021c 	add.w	r2, r7, #28
 800e63c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e63e:	4413      	add	r3, r2
 800e640:	460a      	mov	r2, r1
 800e642:	701a      	strb	r2, [r3, #0]
 800e644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e646:	3301      	adds	r3, #1
 800e648:	647b      	str	r3, [r7, #68]	; 0x44
 800e64a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e64c:	2b0e      	cmp	r3, #14
 800e64e:	dde0      	ble.n	800e612 <AES_CMAC_Final+0x36>
 800e650:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e654:	005b      	lsls	r3, r3, #1
 800e656:	b2db      	uxtb	r3, r3
 800e658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800e65c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e660:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800e664:	43db      	mvns	r3, r3
 800e666:	b2db      	uxtb	r3, r3
 800e668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e66c:	e027      	b.n	800e6be <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800e66e:	2300      	movs	r3, #0
 800e670:	643b      	str	r3, [r7, #64]	; 0x40
 800e672:	e01b      	b.n	800e6ac <AES_CMAC_Final+0xd0>
 800e674:	f107 021c 	add.w	r2, r7, #28
 800e678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e67a:	4413      	add	r3, r2
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	005b      	lsls	r3, r3, #1
 800e680:	b25a      	sxtb	r2, r3
 800e682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e684:	3301      	adds	r3, #1
 800e686:	3348      	adds	r3, #72	; 0x48
 800e688:	443b      	add	r3, r7
 800e68a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e68e:	09db      	lsrs	r3, r3, #7
 800e690:	b2db      	uxtb	r3, r3
 800e692:	b25b      	sxtb	r3, r3
 800e694:	4313      	orrs	r3, r2
 800e696:	b25b      	sxtb	r3, r3
 800e698:	b2d9      	uxtb	r1, r3
 800e69a:	f107 021c 	add.w	r2, r7, #28
 800e69e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6a0:	4413      	add	r3, r2
 800e6a2:	460a      	mov	r2, r1
 800e6a4:	701a      	strb	r2, [r3, #0]
 800e6a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	643b      	str	r3, [r7, #64]	; 0x40
 800e6ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ae:	2b0e      	cmp	r3, #14
 800e6b0:	dde0      	ble.n	800e674 <AES_CMAC_Final+0x98>
 800e6b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e6b6:	005b      	lsls	r3, r3, #1
 800e6b8:	b2db      	uxtb	r3, r3
 800e6ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e6c4:	2b10      	cmp	r3, #16
 800e6c6:	d11d      	bne.n	800e704 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6cc:	e016      	b.n	800e6fc <AES_CMAC_Final+0x120>
 800e6ce:	683a      	ldr	r2, [r7, #0]
 800e6d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6d2:	4413      	add	r3, r2
 800e6d4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e6d8:	781a      	ldrb	r2, [r3, #0]
 800e6da:	f107 011c 	add.w	r1, r7, #28
 800e6de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6e0:	440b      	add	r3, r1
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	4053      	eors	r3, r2
 800e6e6:	b2d9      	uxtb	r1, r3
 800e6e8:	683a      	ldr	r2, [r7, #0]
 800e6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6ec:	4413      	add	r3, r2
 800e6ee:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e6f2:	460a      	mov	r2, r1
 800e6f4:	701a      	strb	r2, [r3, #0]
 800e6f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6fe:	2b0f      	cmp	r3, #15
 800e700:	dde5      	ble.n	800e6ce <AES_CMAC_Final+0xf2>
 800e702:	e096      	b.n	800e832 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800e704:	7f3b      	ldrb	r3, [r7, #28]
 800e706:	b25b      	sxtb	r3, r3
 800e708:	2b00      	cmp	r3, #0
 800e70a:	da30      	bge.n	800e76e <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800e70c:	2300      	movs	r3, #0
 800e70e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e710:	e01b      	b.n	800e74a <AES_CMAC_Final+0x16e>
 800e712:	f107 021c 	add.w	r2, r7, #28
 800e716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e718:	4413      	add	r3, r2
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	005b      	lsls	r3, r3, #1
 800e71e:	b25a      	sxtb	r2, r3
 800e720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e722:	3301      	adds	r3, #1
 800e724:	3348      	adds	r3, #72	; 0x48
 800e726:	443b      	add	r3, r7
 800e728:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e72c:	09db      	lsrs	r3, r3, #7
 800e72e:	b2db      	uxtb	r3, r3
 800e730:	b25b      	sxtb	r3, r3
 800e732:	4313      	orrs	r3, r2
 800e734:	b25b      	sxtb	r3, r3
 800e736:	b2d9      	uxtb	r1, r3
 800e738:	f107 021c 	add.w	r2, r7, #28
 800e73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73e:	4413      	add	r3, r2
 800e740:	460a      	mov	r2, r1
 800e742:	701a      	strb	r2, [r3, #0]
 800e744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e746:	3301      	adds	r3, #1
 800e748:	63bb      	str	r3, [r7, #56]	; 0x38
 800e74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74c:	2b0e      	cmp	r3, #14
 800e74e:	dde0      	ble.n	800e712 <AES_CMAC_Final+0x136>
 800e750:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e754:	005b      	lsls	r3, r3, #1
 800e756:	b2db      	uxtb	r3, r3
 800e758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800e75c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e760:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800e764:	43db      	mvns	r3, r3
 800e766:	b2db      	uxtb	r3, r3
 800e768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e76c:	e027      	b.n	800e7be <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800e76e:	2300      	movs	r3, #0
 800e770:	637b      	str	r3, [r7, #52]	; 0x34
 800e772:	e01b      	b.n	800e7ac <AES_CMAC_Final+0x1d0>
 800e774:	f107 021c 	add.w	r2, r7, #28
 800e778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e77a:	4413      	add	r3, r2
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	005b      	lsls	r3, r3, #1
 800e780:	b25a      	sxtb	r2, r3
 800e782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e784:	3301      	adds	r3, #1
 800e786:	3348      	adds	r3, #72	; 0x48
 800e788:	443b      	add	r3, r7
 800e78a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e78e:	09db      	lsrs	r3, r3, #7
 800e790:	b2db      	uxtb	r3, r3
 800e792:	b25b      	sxtb	r3, r3
 800e794:	4313      	orrs	r3, r2
 800e796:	b25b      	sxtb	r3, r3
 800e798:	b2d9      	uxtb	r1, r3
 800e79a:	f107 021c 	add.w	r2, r7, #28
 800e79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7a0:	4413      	add	r3, r2
 800e7a2:	460a      	mov	r2, r1
 800e7a4:	701a      	strb	r2, [r3, #0]
 800e7a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	637b      	str	r3, [r7, #52]	; 0x34
 800e7ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ae:	2b0e      	cmp	r3, #14
 800e7b0:	dde0      	ble.n	800e774 <AES_CMAC_Final+0x198>
 800e7b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e7b6:	005b      	lsls	r3, r3, #1
 800e7b8:	b2db      	uxtb	r3, r3
 800e7ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e7c4:	683a      	ldr	r2, [r7, #0]
 800e7c6:	4413      	add	r3, r2
 800e7c8:	2280      	movs	r2, #128	; 0x80
 800e7ca:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e7ce:	e007      	b.n	800e7e0 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e7d6:	683a      	ldr	r2, [r7, #0]
 800e7d8:	4413      	add	r3, r2
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e7e6:	1c5a      	adds	r2, r3, #1
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e7f4:	2b0f      	cmp	r3, #15
 800e7f6:	d9eb      	bls.n	800e7d0 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	633b      	str	r3, [r7, #48]	; 0x30
 800e7fc:	e016      	b.n	800e82c <AES_CMAC_Final+0x250>
 800e7fe:	683a      	ldr	r2, [r7, #0]
 800e800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e802:	4413      	add	r3, r2
 800e804:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e808:	781a      	ldrb	r2, [r3, #0]
 800e80a:	f107 011c 	add.w	r1, r7, #28
 800e80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e810:	440b      	add	r3, r1
 800e812:	781b      	ldrb	r3, [r3, #0]
 800e814:	4053      	eors	r3, r2
 800e816:	b2d9      	uxtb	r1, r3
 800e818:	683a      	ldr	r2, [r7, #0]
 800e81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e81c:	4413      	add	r3, r2
 800e81e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e822:	460a      	mov	r2, r1
 800e824:	701a      	strb	r2, [r3, #0]
 800e826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e828:	3301      	adds	r3, #1
 800e82a:	633b      	str	r3, [r7, #48]	; 0x30
 800e82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82e:	2b0f      	cmp	r3, #15
 800e830:	dde5      	ble.n	800e7fe <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800e832:	2300      	movs	r3, #0
 800e834:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e836:	e015      	b.n	800e864 <AES_CMAC_Final+0x288>
 800e838:	683a      	ldr	r2, [r7, #0]
 800e83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83c:	4413      	add	r3, r2
 800e83e:	33f1      	adds	r3, #241	; 0xf1
 800e840:	781a      	ldrb	r2, [r3, #0]
 800e842:	6839      	ldr	r1, [r7, #0]
 800e844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e846:	440b      	add	r3, r1
 800e848:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e84c:	781b      	ldrb	r3, [r3, #0]
 800e84e:	4053      	eors	r3, r2
 800e850:	b2d9      	uxtb	r1, r3
 800e852:	683a      	ldr	r2, [r7, #0]
 800e854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e856:	4413      	add	r3, r2
 800e858:	33f1      	adds	r3, #241	; 0xf1
 800e85a:	460a      	mov	r2, r1
 800e85c:	701a      	strb	r2, [r3, #0]
 800e85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e860:	3301      	adds	r3, #1
 800e862:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e866:	2b0f      	cmp	r3, #15
 800e868:	dde6      	ble.n	800e838 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800e870:	f107 030c 	add.w	r3, r7, #12
 800e874:	2210      	movs	r2, #16
 800e876:	4618      	mov	r0, r3
 800e878:	f00d fc8b 	bl	801c192 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800e87c:	683a      	ldr	r2, [r7, #0]
 800e87e:	f107 030c 	add.w	r3, r7, #12
 800e882:	6879      	ldr	r1, [r7, #4]
 800e884:	4618      	mov	r0, r3
 800e886:	f000 fd1d 	bl	800f2c4 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800e88a:	f107 031c 	add.w	r3, r7, #28
 800e88e:	2210      	movs	r2, #16
 800e890:	2100      	movs	r1, #0
 800e892:	4618      	mov	r0, r3
 800e894:	f00d fcb8 	bl	801c208 <memset1>
}
 800e898:	bf00      	nop
 800e89a:	3748      	adds	r7, #72	; 0x48
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	781a      	ldrb	r2, [r3, #0]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	683a      	ldr	r2, [r7, #0]
 800e8b8:	7852      	ldrb	r2, [r2, #1]
 800e8ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	3302      	adds	r3, #2
 800e8c0:	683a      	ldr	r2, [r7, #0]
 800e8c2:	7892      	ldrb	r2, [r2, #2]
 800e8c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	3303      	adds	r3, #3
 800e8ca:	683a      	ldr	r2, [r7, #0]
 800e8cc:	78d2      	ldrb	r2, [r2, #3]
 800e8ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	3304      	adds	r3, #4
 800e8d4:	683a      	ldr	r2, [r7, #0]
 800e8d6:	7912      	ldrb	r2, [r2, #4]
 800e8d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	3305      	adds	r3, #5
 800e8de:	683a      	ldr	r2, [r7, #0]
 800e8e0:	7952      	ldrb	r2, [r2, #5]
 800e8e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	3306      	adds	r3, #6
 800e8e8:	683a      	ldr	r2, [r7, #0]
 800e8ea:	7992      	ldrb	r2, [r2, #6]
 800e8ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	3307      	adds	r3, #7
 800e8f2:	683a      	ldr	r2, [r7, #0]
 800e8f4:	79d2      	ldrb	r2, [r2, #7]
 800e8f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	3308      	adds	r3, #8
 800e8fc:	683a      	ldr	r2, [r7, #0]
 800e8fe:	7a12      	ldrb	r2, [r2, #8]
 800e900:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	3309      	adds	r3, #9
 800e906:	683a      	ldr	r2, [r7, #0]
 800e908:	7a52      	ldrb	r2, [r2, #9]
 800e90a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	330a      	adds	r3, #10
 800e910:	683a      	ldr	r2, [r7, #0]
 800e912:	7a92      	ldrb	r2, [r2, #10]
 800e914:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	330b      	adds	r3, #11
 800e91a:	683a      	ldr	r2, [r7, #0]
 800e91c:	7ad2      	ldrb	r2, [r2, #11]
 800e91e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	330c      	adds	r3, #12
 800e924:	683a      	ldr	r2, [r7, #0]
 800e926:	7b12      	ldrb	r2, [r2, #12]
 800e928:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	330d      	adds	r3, #13
 800e92e:	683a      	ldr	r2, [r7, #0]
 800e930:	7b52      	ldrb	r2, [r2, #13]
 800e932:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	330e      	adds	r3, #14
 800e938:	683a      	ldr	r2, [r7, #0]
 800e93a:	7b92      	ldrb	r2, [r2, #14]
 800e93c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	330f      	adds	r3, #15
 800e942:	683a      	ldr	r2, [r7, #0]
 800e944:	7bd2      	ldrb	r2, [r2, #15]
 800e946:	701a      	strb	r2, [r3, #0]
#endif
}
 800e948:	bf00      	nop
 800e94a:	370c      	adds	r7, #12
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bc80      	pop	{r7}
 800e950:	4770      	bx	lr

0800e952 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800e952:	b480      	push	{r7}
 800e954:	b085      	sub	sp, #20
 800e956:	af00      	add	r7, sp, #0
 800e958:	60f8      	str	r0, [r7, #12]
 800e95a:	60b9      	str	r1, [r7, #8]
 800e95c:	4613      	mov	r3, r2
 800e95e:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800e960:	e007      	b.n	800e972 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800e962:	68ba      	ldr	r2, [r7, #8]
 800e964:	1c53      	adds	r3, r2, #1
 800e966:	60bb      	str	r3, [r7, #8]
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	1c59      	adds	r1, r3, #1
 800e96c:	60f9      	str	r1, [r7, #12]
 800e96e:	7812      	ldrb	r2, [r2, #0]
 800e970:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800e972:	79fb      	ldrb	r3, [r7, #7]
 800e974:	1e5a      	subs	r2, r3, #1
 800e976:	71fa      	strb	r2, [r7, #7]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d1f2      	bne.n	800e962 <copy_block_nn+0x10>
}
 800e97c:	bf00      	nop
 800e97e:	bf00      	nop
 800e980:	3714      	adds	r7, #20
 800e982:	46bd      	mov	sp, r7
 800e984:	bc80      	pop	{r7}
 800e986:	4770      	bx	lr

0800e988 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800e988:	b480      	push	{r7}
 800e98a:	b083      	sub	sp, #12
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	781a      	ldrb	r2, [r3, #0]
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	4053      	eors	r3, r2
 800e99c:	b2da      	uxtb	r2, r3
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	3301      	adds	r3, #1
 800e9a6:	7819      	ldrb	r1, [r3, #0]
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	3301      	adds	r3, #1
 800e9ac:	781a      	ldrb	r2, [r3, #0]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	404a      	eors	r2, r1
 800e9b4:	b2d2      	uxtb	r2, r2
 800e9b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	3302      	adds	r3, #2
 800e9bc:	7819      	ldrb	r1, [r3, #0]
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	3302      	adds	r3, #2
 800e9c2:	781a      	ldrb	r2, [r3, #0]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	3302      	adds	r3, #2
 800e9c8:	404a      	eors	r2, r1
 800e9ca:	b2d2      	uxtb	r2, r2
 800e9cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	3303      	adds	r3, #3
 800e9d2:	7819      	ldrb	r1, [r3, #0]
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	3303      	adds	r3, #3
 800e9d8:	781a      	ldrb	r2, [r3, #0]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	3303      	adds	r3, #3
 800e9de:	404a      	eors	r2, r1
 800e9e0:	b2d2      	uxtb	r2, r2
 800e9e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	3304      	adds	r3, #4
 800e9e8:	7819      	ldrb	r1, [r3, #0]
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	3304      	adds	r3, #4
 800e9ee:	781a      	ldrb	r2, [r3, #0]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	3304      	adds	r3, #4
 800e9f4:	404a      	eors	r2, r1
 800e9f6:	b2d2      	uxtb	r2, r2
 800e9f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	3305      	adds	r3, #5
 800e9fe:	7819      	ldrb	r1, [r3, #0]
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	3305      	adds	r3, #5
 800ea04:	781a      	ldrb	r2, [r3, #0]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	3305      	adds	r3, #5
 800ea0a:	404a      	eors	r2, r1
 800ea0c:	b2d2      	uxtb	r2, r2
 800ea0e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	3306      	adds	r3, #6
 800ea14:	7819      	ldrb	r1, [r3, #0]
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	3306      	adds	r3, #6
 800ea1a:	781a      	ldrb	r2, [r3, #0]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	3306      	adds	r3, #6
 800ea20:	404a      	eors	r2, r1
 800ea22:	b2d2      	uxtb	r2, r2
 800ea24:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	3307      	adds	r3, #7
 800ea2a:	7819      	ldrb	r1, [r3, #0]
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	3307      	adds	r3, #7
 800ea30:	781a      	ldrb	r2, [r3, #0]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	3307      	adds	r3, #7
 800ea36:	404a      	eors	r2, r1
 800ea38:	b2d2      	uxtb	r2, r2
 800ea3a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	3308      	adds	r3, #8
 800ea40:	7819      	ldrb	r1, [r3, #0]
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	3308      	adds	r3, #8
 800ea46:	781a      	ldrb	r2, [r3, #0]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	3308      	adds	r3, #8
 800ea4c:	404a      	eors	r2, r1
 800ea4e:	b2d2      	uxtb	r2, r2
 800ea50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	3309      	adds	r3, #9
 800ea56:	7819      	ldrb	r1, [r3, #0]
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	3309      	adds	r3, #9
 800ea5c:	781a      	ldrb	r2, [r3, #0]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	3309      	adds	r3, #9
 800ea62:	404a      	eors	r2, r1
 800ea64:	b2d2      	uxtb	r2, r2
 800ea66:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	330a      	adds	r3, #10
 800ea6c:	7819      	ldrb	r1, [r3, #0]
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	330a      	adds	r3, #10
 800ea72:	781a      	ldrb	r2, [r3, #0]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	330a      	adds	r3, #10
 800ea78:	404a      	eors	r2, r1
 800ea7a:	b2d2      	uxtb	r2, r2
 800ea7c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	330b      	adds	r3, #11
 800ea82:	7819      	ldrb	r1, [r3, #0]
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	330b      	adds	r3, #11
 800ea88:	781a      	ldrb	r2, [r3, #0]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	330b      	adds	r3, #11
 800ea8e:	404a      	eors	r2, r1
 800ea90:	b2d2      	uxtb	r2, r2
 800ea92:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	330c      	adds	r3, #12
 800ea98:	7819      	ldrb	r1, [r3, #0]
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	330c      	adds	r3, #12
 800ea9e:	781a      	ldrb	r2, [r3, #0]
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	330c      	adds	r3, #12
 800eaa4:	404a      	eors	r2, r1
 800eaa6:	b2d2      	uxtb	r2, r2
 800eaa8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	330d      	adds	r3, #13
 800eaae:	7819      	ldrb	r1, [r3, #0]
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	330d      	adds	r3, #13
 800eab4:	781a      	ldrb	r2, [r3, #0]
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	330d      	adds	r3, #13
 800eaba:	404a      	eors	r2, r1
 800eabc:	b2d2      	uxtb	r2, r2
 800eabe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	330e      	adds	r3, #14
 800eac4:	7819      	ldrb	r1, [r3, #0]
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	330e      	adds	r3, #14
 800eaca:	781a      	ldrb	r2, [r3, #0]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	330e      	adds	r3, #14
 800ead0:	404a      	eors	r2, r1
 800ead2:	b2d2      	uxtb	r2, r2
 800ead4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	330f      	adds	r3, #15
 800eada:	7819      	ldrb	r1, [r3, #0]
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	330f      	adds	r3, #15
 800eae0:	781a      	ldrb	r2, [r3, #0]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	330f      	adds	r3, #15
 800eae6:	404a      	eors	r2, r1
 800eae8:	b2d2      	uxtb	r2, r2
 800eaea:	701a      	strb	r2, [r3, #0]
#endif
}
 800eaec:	bf00      	nop
 800eaee:	370c      	adds	r7, #12
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bc80      	pop	{r7}
 800eaf4:	4770      	bx	lr

0800eaf6 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800eaf6:	b480      	push	{r7}
 800eaf8:	b085      	sub	sp, #20
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	60f8      	str	r0, [r7, #12]
 800eafe:	60b9      	str	r1, [r7, #8]
 800eb00:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	781a      	ldrb	r2, [r3, #0]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	781b      	ldrb	r3, [r3, #0]
 800eb0a:	4053      	eors	r3, r2
 800eb0c:	b2da      	uxtb	r2, r3
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	3301      	adds	r3, #1
 800eb16:	7819      	ldrb	r1, [r3, #0]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	781a      	ldrb	r2, [r3, #0]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	3301      	adds	r3, #1
 800eb22:	404a      	eors	r2, r1
 800eb24:	b2d2      	uxtb	r2, r2
 800eb26:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	3302      	adds	r3, #2
 800eb2c:	7819      	ldrb	r1, [r3, #0]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	3302      	adds	r3, #2
 800eb32:	781a      	ldrb	r2, [r3, #0]
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	3302      	adds	r3, #2
 800eb38:	404a      	eors	r2, r1
 800eb3a:	b2d2      	uxtb	r2, r2
 800eb3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	3303      	adds	r3, #3
 800eb42:	7819      	ldrb	r1, [r3, #0]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	3303      	adds	r3, #3
 800eb48:	781a      	ldrb	r2, [r3, #0]
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	3303      	adds	r3, #3
 800eb4e:	404a      	eors	r2, r1
 800eb50:	b2d2      	uxtb	r2, r2
 800eb52:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	3304      	adds	r3, #4
 800eb58:	7819      	ldrb	r1, [r3, #0]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	3304      	adds	r3, #4
 800eb5e:	781a      	ldrb	r2, [r3, #0]
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	3304      	adds	r3, #4
 800eb64:	404a      	eors	r2, r1
 800eb66:	b2d2      	uxtb	r2, r2
 800eb68:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	3305      	adds	r3, #5
 800eb6e:	7819      	ldrb	r1, [r3, #0]
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	3305      	adds	r3, #5
 800eb74:	781a      	ldrb	r2, [r3, #0]
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	3305      	adds	r3, #5
 800eb7a:	404a      	eors	r2, r1
 800eb7c:	b2d2      	uxtb	r2, r2
 800eb7e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	3306      	adds	r3, #6
 800eb84:	7819      	ldrb	r1, [r3, #0]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	3306      	adds	r3, #6
 800eb8a:	781a      	ldrb	r2, [r3, #0]
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	3306      	adds	r3, #6
 800eb90:	404a      	eors	r2, r1
 800eb92:	b2d2      	uxtb	r2, r2
 800eb94:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	3307      	adds	r3, #7
 800eb9a:	7819      	ldrb	r1, [r3, #0]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	3307      	adds	r3, #7
 800eba0:	781a      	ldrb	r2, [r3, #0]
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	3307      	adds	r3, #7
 800eba6:	404a      	eors	r2, r1
 800eba8:	b2d2      	uxtb	r2, r2
 800ebaa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	3308      	adds	r3, #8
 800ebb0:	7819      	ldrb	r1, [r3, #0]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	3308      	adds	r3, #8
 800ebb6:	781a      	ldrb	r2, [r3, #0]
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	3308      	adds	r3, #8
 800ebbc:	404a      	eors	r2, r1
 800ebbe:	b2d2      	uxtb	r2, r2
 800ebc0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	3309      	adds	r3, #9
 800ebc6:	7819      	ldrb	r1, [r3, #0]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	3309      	adds	r3, #9
 800ebcc:	781a      	ldrb	r2, [r3, #0]
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	3309      	adds	r3, #9
 800ebd2:	404a      	eors	r2, r1
 800ebd4:	b2d2      	uxtb	r2, r2
 800ebd6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	330a      	adds	r3, #10
 800ebdc:	7819      	ldrb	r1, [r3, #0]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	330a      	adds	r3, #10
 800ebe2:	781a      	ldrb	r2, [r3, #0]
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	330a      	adds	r3, #10
 800ebe8:	404a      	eors	r2, r1
 800ebea:	b2d2      	uxtb	r2, r2
 800ebec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	330b      	adds	r3, #11
 800ebf2:	7819      	ldrb	r1, [r3, #0]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	330b      	adds	r3, #11
 800ebf8:	781a      	ldrb	r2, [r3, #0]
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	330b      	adds	r3, #11
 800ebfe:	404a      	eors	r2, r1
 800ec00:	b2d2      	uxtb	r2, r2
 800ec02:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	330c      	adds	r3, #12
 800ec08:	7819      	ldrb	r1, [r3, #0]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	330c      	adds	r3, #12
 800ec0e:	781a      	ldrb	r2, [r3, #0]
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	330c      	adds	r3, #12
 800ec14:	404a      	eors	r2, r1
 800ec16:	b2d2      	uxtb	r2, r2
 800ec18:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	330d      	adds	r3, #13
 800ec1e:	7819      	ldrb	r1, [r3, #0]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	330d      	adds	r3, #13
 800ec24:	781a      	ldrb	r2, [r3, #0]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	330d      	adds	r3, #13
 800ec2a:	404a      	eors	r2, r1
 800ec2c:	b2d2      	uxtb	r2, r2
 800ec2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	330e      	adds	r3, #14
 800ec34:	7819      	ldrb	r1, [r3, #0]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	330e      	adds	r3, #14
 800ec3a:	781a      	ldrb	r2, [r3, #0]
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	330e      	adds	r3, #14
 800ec40:	404a      	eors	r2, r1
 800ec42:	b2d2      	uxtb	r2, r2
 800ec44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	330f      	adds	r3, #15
 800ec4a:	7819      	ldrb	r1, [r3, #0]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	330f      	adds	r3, #15
 800ec50:	781a      	ldrb	r2, [r3, #0]
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	330f      	adds	r3, #15
 800ec56:	404a      	eors	r2, r1
 800ec58:	b2d2      	uxtb	r2, r2
 800ec5a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800ec5c:	bf00      	nop
 800ec5e:	3714      	adds	r7, #20
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bc80      	pop	{r7}
 800ec64:	4770      	bx	lr

0800ec66 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800ec66:	b580      	push	{r7, lr}
 800ec68:	b082      	sub	sp, #8
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	6078      	str	r0, [r7, #4]
 800ec6e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800ec70:	6839      	ldr	r1, [r7, #0]
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f7ff fe88 	bl	800e988 <xor_block>
}
 800ec78:	bf00      	nop
 800ec7a:	3708      	adds	r7, #8
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800ec80:	b480      	push	{r7}
 800ec82:	b085      	sub	sp, #20
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	781b      	ldrb	r3, [r3, #0]
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	4b48      	ldr	r3, [pc, #288]	; (800edb0 <shift_sub_rows+0x130>)
 800ec90:	5c9a      	ldrb	r2, [r3, r2]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	701a      	strb	r2, [r3, #0]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	3304      	adds	r3, #4
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	4619      	mov	r1, r3
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	3304      	adds	r3, #4
 800eca2:	4a43      	ldr	r2, [pc, #268]	; (800edb0 <shift_sub_rows+0x130>)
 800eca4:	5c52      	ldrb	r2, [r2, r1]
 800eca6:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	3308      	adds	r3, #8
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	4619      	mov	r1, r3
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	3308      	adds	r3, #8
 800ecb4:	4a3e      	ldr	r2, [pc, #248]	; (800edb0 <shift_sub_rows+0x130>)
 800ecb6:	5c52      	ldrb	r2, [r2, r1]
 800ecb8:	701a      	strb	r2, [r3, #0]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	330c      	adds	r3, #12
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	330c      	adds	r3, #12
 800ecc6:	4a3a      	ldr	r2, [pc, #232]	; (800edb0 <shift_sub_rows+0x130>)
 800ecc8:	5c52      	ldrb	r2, [r2, r1]
 800ecca:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	785b      	ldrb	r3, [r3, #1]
 800ecd0:	73fb      	strb	r3, [r7, #15]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	3305      	adds	r3, #5
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	4619      	mov	r1, r3
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	3301      	adds	r3, #1
 800ecde:	4a34      	ldr	r2, [pc, #208]	; (800edb0 <shift_sub_rows+0x130>)
 800ece0:	5c52      	ldrb	r2, [r2, r1]
 800ece2:	701a      	strb	r2, [r3, #0]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	3309      	adds	r3, #9
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	4619      	mov	r1, r3
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	3305      	adds	r3, #5
 800ecf0:	4a2f      	ldr	r2, [pc, #188]	; (800edb0 <shift_sub_rows+0x130>)
 800ecf2:	5c52      	ldrb	r2, [r2, r1]
 800ecf4:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	330d      	adds	r3, #13
 800ecfa:	781b      	ldrb	r3, [r3, #0]
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	3309      	adds	r3, #9
 800ed02:	4a2b      	ldr	r2, [pc, #172]	; (800edb0 <shift_sub_rows+0x130>)
 800ed04:	5c52      	ldrb	r2, [r2, r1]
 800ed06:	701a      	strb	r2, [r3, #0]
 800ed08:	7bfa      	ldrb	r2, [r7, #15]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	330d      	adds	r3, #13
 800ed0e:	4928      	ldr	r1, [pc, #160]	; (800edb0 <shift_sub_rows+0x130>)
 800ed10:	5c8a      	ldrb	r2, [r1, r2]
 800ed12:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	789b      	ldrb	r3, [r3, #2]
 800ed18:	73fb      	strb	r3, [r7, #15]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	330a      	adds	r3, #10
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	4619      	mov	r1, r3
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	3302      	adds	r3, #2
 800ed26:	4a22      	ldr	r2, [pc, #136]	; (800edb0 <shift_sub_rows+0x130>)
 800ed28:	5c52      	ldrb	r2, [r2, r1]
 800ed2a:	701a      	strb	r2, [r3, #0]
 800ed2c:	7bfa      	ldrb	r2, [r7, #15]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	330a      	adds	r3, #10
 800ed32:	491f      	ldr	r1, [pc, #124]	; (800edb0 <shift_sub_rows+0x130>)
 800ed34:	5c8a      	ldrb	r2, [r1, r2]
 800ed36:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	799b      	ldrb	r3, [r3, #6]
 800ed3c:	73fb      	strb	r3, [r7, #15]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	330e      	adds	r3, #14
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	4619      	mov	r1, r3
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	3306      	adds	r3, #6
 800ed4a:	4a19      	ldr	r2, [pc, #100]	; (800edb0 <shift_sub_rows+0x130>)
 800ed4c:	5c52      	ldrb	r2, [r2, r1]
 800ed4e:	701a      	strb	r2, [r3, #0]
 800ed50:	7bfa      	ldrb	r2, [r7, #15]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	330e      	adds	r3, #14
 800ed56:	4916      	ldr	r1, [pc, #88]	; (800edb0 <shift_sub_rows+0x130>)
 800ed58:	5c8a      	ldrb	r2, [r1, r2]
 800ed5a:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	7bdb      	ldrb	r3, [r3, #15]
 800ed60:	73fb      	strb	r3, [r7, #15]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	330b      	adds	r3, #11
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	4619      	mov	r1, r3
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	330f      	adds	r3, #15
 800ed6e:	4a10      	ldr	r2, [pc, #64]	; (800edb0 <shift_sub_rows+0x130>)
 800ed70:	5c52      	ldrb	r2, [r2, r1]
 800ed72:	701a      	strb	r2, [r3, #0]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	3307      	adds	r3, #7
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	4619      	mov	r1, r3
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	330b      	adds	r3, #11
 800ed80:	4a0b      	ldr	r2, [pc, #44]	; (800edb0 <shift_sub_rows+0x130>)
 800ed82:	5c52      	ldrb	r2, [r2, r1]
 800ed84:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	3303      	adds	r3, #3
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	3307      	adds	r3, #7
 800ed92:	4a07      	ldr	r2, [pc, #28]	; (800edb0 <shift_sub_rows+0x130>)
 800ed94:	5c52      	ldrb	r2, [r2, r1]
 800ed96:	701a      	strb	r2, [r3, #0]
 800ed98:	7bfa      	ldrb	r2, [r7, #15]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	3303      	adds	r3, #3
 800ed9e:	4904      	ldr	r1, [pc, #16]	; (800edb0 <shift_sub_rows+0x130>)
 800eda0:	5c8a      	ldrb	r2, [r1, r2]
 800eda2:	701a      	strb	r2, [r3, #0]
}
 800eda4:	bf00      	nop
 800eda6:	3714      	adds	r7, #20
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bc80      	pop	{r7}
 800edac:	4770      	bx	lr
 800edae:	bf00      	nop
 800edb0:	080219b8 	.word	0x080219b8

0800edb4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b086      	sub	sp, #24
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800edbc:	f107 0308 	add.w	r3, r7, #8
 800edc0:	6879      	ldr	r1, [r7, #4]
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7ff fd6c 	bl	800e8a0 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800edc8:	7a3b      	ldrb	r3, [r7, #8]
 800edca:	461a      	mov	r2, r3
 800edcc:	4b9a      	ldr	r3, [pc, #616]	; (800f038 <mix_sub_columns+0x284>)
 800edce:	5c9a      	ldrb	r2, [r3, r2]
 800edd0:	7b7b      	ldrb	r3, [r7, #13]
 800edd2:	4619      	mov	r1, r3
 800edd4:	4b99      	ldr	r3, [pc, #612]	; (800f03c <mix_sub_columns+0x288>)
 800edd6:	5c5b      	ldrb	r3, [r3, r1]
 800edd8:	4053      	eors	r3, r2
 800edda:	b2da      	uxtb	r2, r3
 800eddc:	7cbb      	ldrb	r3, [r7, #18]
 800edde:	4619      	mov	r1, r3
 800ede0:	4b97      	ldr	r3, [pc, #604]	; (800f040 <mix_sub_columns+0x28c>)
 800ede2:	5c5b      	ldrb	r3, [r3, r1]
 800ede4:	4053      	eors	r3, r2
 800ede6:	b2da      	uxtb	r2, r3
 800ede8:	7dfb      	ldrb	r3, [r7, #23]
 800edea:	4619      	mov	r1, r3
 800edec:	4b94      	ldr	r3, [pc, #592]	; (800f040 <mix_sub_columns+0x28c>)
 800edee:	5c5b      	ldrb	r3, [r3, r1]
 800edf0:	4053      	eors	r3, r2
 800edf2:	b2da      	uxtb	r2, r3
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800edf8:	7a3b      	ldrb	r3, [r7, #8]
 800edfa:	461a      	mov	r2, r3
 800edfc:	4b90      	ldr	r3, [pc, #576]	; (800f040 <mix_sub_columns+0x28c>)
 800edfe:	5c9a      	ldrb	r2, [r3, r2]
 800ee00:	7b7b      	ldrb	r3, [r7, #13]
 800ee02:	4619      	mov	r1, r3
 800ee04:	4b8c      	ldr	r3, [pc, #560]	; (800f038 <mix_sub_columns+0x284>)
 800ee06:	5c5b      	ldrb	r3, [r3, r1]
 800ee08:	4053      	eors	r3, r2
 800ee0a:	b2da      	uxtb	r2, r3
 800ee0c:	7cbb      	ldrb	r3, [r7, #18]
 800ee0e:	4619      	mov	r1, r3
 800ee10:	4b8a      	ldr	r3, [pc, #552]	; (800f03c <mix_sub_columns+0x288>)
 800ee12:	5c5b      	ldrb	r3, [r3, r1]
 800ee14:	4053      	eors	r3, r2
 800ee16:	b2d9      	uxtb	r1, r3
 800ee18:	7dfb      	ldrb	r3, [r7, #23]
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	4b88      	ldr	r3, [pc, #544]	; (800f040 <mix_sub_columns+0x28c>)
 800ee1e:	5c9a      	ldrb	r2, [r3, r2]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	3301      	adds	r3, #1
 800ee24:	404a      	eors	r2, r1
 800ee26:	b2d2      	uxtb	r2, r2
 800ee28:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800ee2a:	7a3b      	ldrb	r3, [r7, #8]
 800ee2c:	461a      	mov	r2, r3
 800ee2e:	4b84      	ldr	r3, [pc, #528]	; (800f040 <mix_sub_columns+0x28c>)
 800ee30:	5c9a      	ldrb	r2, [r3, r2]
 800ee32:	7b7b      	ldrb	r3, [r7, #13]
 800ee34:	4619      	mov	r1, r3
 800ee36:	4b82      	ldr	r3, [pc, #520]	; (800f040 <mix_sub_columns+0x28c>)
 800ee38:	5c5b      	ldrb	r3, [r3, r1]
 800ee3a:	4053      	eors	r3, r2
 800ee3c:	b2da      	uxtb	r2, r3
 800ee3e:	7cbb      	ldrb	r3, [r7, #18]
 800ee40:	4619      	mov	r1, r3
 800ee42:	4b7d      	ldr	r3, [pc, #500]	; (800f038 <mix_sub_columns+0x284>)
 800ee44:	5c5b      	ldrb	r3, [r3, r1]
 800ee46:	4053      	eors	r3, r2
 800ee48:	b2d9      	uxtb	r1, r3
 800ee4a:	7dfb      	ldrb	r3, [r7, #23]
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	4b7b      	ldr	r3, [pc, #492]	; (800f03c <mix_sub_columns+0x288>)
 800ee50:	5c9a      	ldrb	r2, [r3, r2]
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	3302      	adds	r3, #2
 800ee56:	404a      	eors	r2, r1
 800ee58:	b2d2      	uxtb	r2, r2
 800ee5a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ee5c:	7a3b      	ldrb	r3, [r7, #8]
 800ee5e:	461a      	mov	r2, r3
 800ee60:	4b76      	ldr	r3, [pc, #472]	; (800f03c <mix_sub_columns+0x288>)
 800ee62:	5c9a      	ldrb	r2, [r3, r2]
 800ee64:	7b7b      	ldrb	r3, [r7, #13]
 800ee66:	4619      	mov	r1, r3
 800ee68:	4b75      	ldr	r3, [pc, #468]	; (800f040 <mix_sub_columns+0x28c>)
 800ee6a:	5c5b      	ldrb	r3, [r3, r1]
 800ee6c:	4053      	eors	r3, r2
 800ee6e:	b2da      	uxtb	r2, r3
 800ee70:	7cbb      	ldrb	r3, [r7, #18]
 800ee72:	4619      	mov	r1, r3
 800ee74:	4b72      	ldr	r3, [pc, #456]	; (800f040 <mix_sub_columns+0x28c>)
 800ee76:	5c5b      	ldrb	r3, [r3, r1]
 800ee78:	4053      	eors	r3, r2
 800ee7a:	b2d9      	uxtb	r1, r3
 800ee7c:	7dfb      	ldrb	r3, [r7, #23]
 800ee7e:	461a      	mov	r2, r3
 800ee80:	4b6d      	ldr	r3, [pc, #436]	; (800f038 <mix_sub_columns+0x284>)
 800ee82:	5c9a      	ldrb	r2, [r3, r2]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	3303      	adds	r3, #3
 800ee88:	404a      	eors	r2, r1
 800ee8a:	b2d2      	uxtb	r2, r2
 800ee8c:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800ee8e:	7b3b      	ldrb	r3, [r7, #12]
 800ee90:	461a      	mov	r2, r3
 800ee92:	4b69      	ldr	r3, [pc, #420]	; (800f038 <mix_sub_columns+0x284>)
 800ee94:	5c9a      	ldrb	r2, [r3, r2]
 800ee96:	7c7b      	ldrb	r3, [r7, #17]
 800ee98:	4619      	mov	r1, r3
 800ee9a:	4b68      	ldr	r3, [pc, #416]	; (800f03c <mix_sub_columns+0x288>)
 800ee9c:	5c5b      	ldrb	r3, [r3, r1]
 800ee9e:	4053      	eors	r3, r2
 800eea0:	b2da      	uxtb	r2, r3
 800eea2:	7dbb      	ldrb	r3, [r7, #22]
 800eea4:	4619      	mov	r1, r3
 800eea6:	4b66      	ldr	r3, [pc, #408]	; (800f040 <mix_sub_columns+0x28c>)
 800eea8:	5c5b      	ldrb	r3, [r3, r1]
 800eeaa:	4053      	eors	r3, r2
 800eeac:	b2d9      	uxtb	r1, r3
 800eeae:	7afb      	ldrb	r3, [r7, #11]
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	4b63      	ldr	r3, [pc, #396]	; (800f040 <mix_sub_columns+0x28c>)
 800eeb4:	5c9a      	ldrb	r2, [r3, r2]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	3304      	adds	r3, #4
 800eeba:	404a      	eors	r2, r1
 800eebc:	b2d2      	uxtb	r2, r2
 800eebe:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800eec0:	7b3b      	ldrb	r3, [r7, #12]
 800eec2:	461a      	mov	r2, r3
 800eec4:	4b5e      	ldr	r3, [pc, #376]	; (800f040 <mix_sub_columns+0x28c>)
 800eec6:	5c9a      	ldrb	r2, [r3, r2]
 800eec8:	7c7b      	ldrb	r3, [r7, #17]
 800eeca:	4619      	mov	r1, r3
 800eecc:	4b5a      	ldr	r3, [pc, #360]	; (800f038 <mix_sub_columns+0x284>)
 800eece:	5c5b      	ldrb	r3, [r3, r1]
 800eed0:	4053      	eors	r3, r2
 800eed2:	b2da      	uxtb	r2, r3
 800eed4:	7dbb      	ldrb	r3, [r7, #22]
 800eed6:	4619      	mov	r1, r3
 800eed8:	4b58      	ldr	r3, [pc, #352]	; (800f03c <mix_sub_columns+0x288>)
 800eeda:	5c5b      	ldrb	r3, [r3, r1]
 800eedc:	4053      	eors	r3, r2
 800eede:	b2d9      	uxtb	r1, r3
 800eee0:	7afb      	ldrb	r3, [r7, #11]
 800eee2:	461a      	mov	r2, r3
 800eee4:	4b56      	ldr	r3, [pc, #344]	; (800f040 <mix_sub_columns+0x28c>)
 800eee6:	5c9a      	ldrb	r2, [r3, r2]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	3305      	adds	r3, #5
 800eeec:	404a      	eors	r2, r1
 800eeee:	b2d2      	uxtb	r2, r2
 800eef0:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800eef2:	7b3b      	ldrb	r3, [r7, #12]
 800eef4:	461a      	mov	r2, r3
 800eef6:	4b52      	ldr	r3, [pc, #328]	; (800f040 <mix_sub_columns+0x28c>)
 800eef8:	5c9a      	ldrb	r2, [r3, r2]
 800eefa:	7c7b      	ldrb	r3, [r7, #17]
 800eefc:	4619      	mov	r1, r3
 800eefe:	4b50      	ldr	r3, [pc, #320]	; (800f040 <mix_sub_columns+0x28c>)
 800ef00:	5c5b      	ldrb	r3, [r3, r1]
 800ef02:	4053      	eors	r3, r2
 800ef04:	b2da      	uxtb	r2, r3
 800ef06:	7dbb      	ldrb	r3, [r7, #22]
 800ef08:	4619      	mov	r1, r3
 800ef0a:	4b4b      	ldr	r3, [pc, #300]	; (800f038 <mix_sub_columns+0x284>)
 800ef0c:	5c5b      	ldrb	r3, [r3, r1]
 800ef0e:	4053      	eors	r3, r2
 800ef10:	b2d9      	uxtb	r1, r3
 800ef12:	7afb      	ldrb	r3, [r7, #11]
 800ef14:	461a      	mov	r2, r3
 800ef16:	4b49      	ldr	r3, [pc, #292]	; (800f03c <mix_sub_columns+0x288>)
 800ef18:	5c9a      	ldrb	r2, [r3, r2]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	3306      	adds	r3, #6
 800ef1e:	404a      	eors	r2, r1
 800ef20:	b2d2      	uxtb	r2, r2
 800ef22:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800ef24:	7b3b      	ldrb	r3, [r7, #12]
 800ef26:	461a      	mov	r2, r3
 800ef28:	4b44      	ldr	r3, [pc, #272]	; (800f03c <mix_sub_columns+0x288>)
 800ef2a:	5c9a      	ldrb	r2, [r3, r2]
 800ef2c:	7c7b      	ldrb	r3, [r7, #17]
 800ef2e:	4619      	mov	r1, r3
 800ef30:	4b43      	ldr	r3, [pc, #268]	; (800f040 <mix_sub_columns+0x28c>)
 800ef32:	5c5b      	ldrb	r3, [r3, r1]
 800ef34:	4053      	eors	r3, r2
 800ef36:	b2da      	uxtb	r2, r3
 800ef38:	7dbb      	ldrb	r3, [r7, #22]
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	4b40      	ldr	r3, [pc, #256]	; (800f040 <mix_sub_columns+0x28c>)
 800ef3e:	5c5b      	ldrb	r3, [r3, r1]
 800ef40:	4053      	eors	r3, r2
 800ef42:	b2d9      	uxtb	r1, r3
 800ef44:	7afb      	ldrb	r3, [r7, #11]
 800ef46:	461a      	mov	r2, r3
 800ef48:	4b3b      	ldr	r3, [pc, #236]	; (800f038 <mix_sub_columns+0x284>)
 800ef4a:	5c9a      	ldrb	r2, [r3, r2]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	3307      	adds	r3, #7
 800ef50:	404a      	eors	r2, r1
 800ef52:	b2d2      	uxtb	r2, r2
 800ef54:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ef56:	7c3b      	ldrb	r3, [r7, #16]
 800ef58:	461a      	mov	r2, r3
 800ef5a:	4b37      	ldr	r3, [pc, #220]	; (800f038 <mix_sub_columns+0x284>)
 800ef5c:	5c9a      	ldrb	r2, [r3, r2]
 800ef5e:	7d7b      	ldrb	r3, [r7, #21]
 800ef60:	4619      	mov	r1, r3
 800ef62:	4b36      	ldr	r3, [pc, #216]	; (800f03c <mix_sub_columns+0x288>)
 800ef64:	5c5b      	ldrb	r3, [r3, r1]
 800ef66:	4053      	eors	r3, r2
 800ef68:	b2da      	uxtb	r2, r3
 800ef6a:	7abb      	ldrb	r3, [r7, #10]
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	4b34      	ldr	r3, [pc, #208]	; (800f040 <mix_sub_columns+0x28c>)
 800ef70:	5c5b      	ldrb	r3, [r3, r1]
 800ef72:	4053      	eors	r3, r2
 800ef74:	b2d9      	uxtb	r1, r3
 800ef76:	7bfb      	ldrb	r3, [r7, #15]
 800ef78:	461a      	mov	r2, r3
 800ef7a:	4b31      	ldr	r3, [pc, #196]	; (800f040 <mix_sub_columns+0x28c>)
 800ef7c:	5c9a      	ldrb	r2, [r3, r2]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	3308      	adds	r3, #8
 800ef82:	404a      	eors	r2, r1
 800ef84:	b2d2      	uxtb	r2, r2
 800ef86:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ef88:	7c3b      	ldrb	r3, [r7, #16]
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	4b2c      	ldr	r3, [pc, #176]	; (800f040 <mix_sub_columns+0x28c>)
 800ef8e:	5c9a      	ldrb	r2, [r3, r2]
 800ef90:	7d7b      	ldrb	r3, [r7, #21]
 800ef92:	4619      	mov	r1, r3
 800ef94:	4b28      	ldr	r3, [pc, #160]	; (800f038 <mix_sub_columns+0x284>)
 800ef96:	5c5b      	ldrb	r3, [r3, r1]
 800ef98:	4053      	eors	r3, r2
 800ef9a:	b2da      	uxtb	r2, r3
 800ef9c:	7abb      	ldrb	r3, [r7, #10]
 800ef9e:	4619      	mov	r1, r3
 800efa0:	4b26      	ldr	r3, [pc, #152]	; (800f03c <mix_sub_columns+0x288>)
 800efa2:	5c5b      	ldrb	r3, [r3, r1]
 800efa4:	4053      	eors	r3, r2
 800efa6:	b2d9      	uxtb	r1, r3
 800efa8:	7bfb      	ldrb	r3, [r7, #15]
 800efaa:	461a      	mov	r2, r3
 800efac:	4b24      	ldr	r3, [pc, #144]	; (800f040 <mix_sub_columns+0x28c>)
 800efae:	5c9a      	ldrb	r2, [r3, r2]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	3309      	adds	r3, #9
 800efb4:	404a      	eors	r2, r1
 800efb6:	b2d2      	uxtb	r2, r2
 800efb8:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800efba:	7c3b      	ldrb	r3, [r7, #16]
 800efbc:	461a      	mov	r2, r3
 800efbe:	4b20      	ldr	r3, [pc, #128]	; (800f040 <mix_sub_columns+0x28c>)
 800efc0:	5c9a      	ldrb	r2, [r3, r2]
 800efc2:	7d7b      	ldrb	r3, [r7, #21]
 800efc4:	4619      	mov	r1, r3
 800efc6:	4b1e      	ldr	r3, [pc, #120]	; (800f040 <mix_sub_columns+0x28c>)
 800efc8:	5c5b      	ldrb	r3, [r3, r1]
 800efca:	4053      	eors	r3, r2
 800efcc:	b2da      	uxtb	r2, r3
 800efce:	7abb      	ldrb	r3, [r7, #10]
 800efd0:	4619      	mov	r1, r3
 800efd2:	4b19      	ldr	r3, [pc, #100]	; (800f038 <mix_sub_columns+0x284>)
 800efd4:	5c5b      	ldrb	r3, [r3, r1]
 800efd6:	4053      	eors	r3, r2
 800efd8:	b2d9      	uxtb	r1, r3
 800efda:	7bfb      	ldrb	r3, [r7, #15]
 800efdc:	461a      	mov	r2, r3
 800efde:	4b17      	ldr	r3, [pc, #92]	; (800f03c <mix_sub_columns+0x288>)
 800efe0:	5c9a      	ldrb	r2, [r3, r2]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	330a      	adds	r3, #10
 800efe6:	404a      	eors	r2, r1
 800efe8:	b2d2      	uxtb	r2, r2
 800efea:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800efec:	7c3b      	ldrb	r3, [r7, #16]
 800efee:	461a      	mov	r2, r3
 800eff0:	4b12      	ldr	r3, [pc, #72]	; (800f03c <mix_sub_columns+0x288>)
 800eff2:	5c9a      	ldrb	r2, [r3, r2]
 800eff4:	7d7b      	ldrb	r3, [r7, #21]
 800eff6:	4619      	mov	r1, r3
 800eff8:	4b11      	ldr	r3, [pc, #68]	; (800f040 <mix_sub_columns+0x28c>)
 800effa:	5c5b      	ldrb	r3, [r3, r1]
 800effc:	4053      	eors	r3, r2
 800effe:	b2da      	uxtb	r2, r3
 800f000:	7abb      	ldrb	r3, [r7, #10]
 800f002:	4619      	mov	r1, r3
 800f004:	4b0e      	ldr	r3, [pc, #56]	; (800f040 <mix_sub_columns+0x28c>)
 800f006:	5c5b      	ldrb	r3, [r3, r1]
 800f008:	4053      	eors	r3, r2
 800f00a:	b2d9      	uxtb	r1, r3
 800f00c:	7bfb      	ldrb	r3, [r7, #15]
 800f00e:	461a      	mov	r2, r3
 800f010:	4b09      	ldr	r3, [pc, #36]	; (800f038 <mix_sub_columns+0x284>)
 800f012:	5c9a      	ldrb	r2, [r3, r2]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	330b      	adds	r3, #11
 800f018:	404a      	eors	r2, r1
 800f01a:	b2d2      	uxtb	r2, r2
 800f01c:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800f01e:	7d3b      	ldrb	r3, [r7, #20]
 800f020:	461a      	mov	r2, r3
 800f022:	4b05      	ldr	r3, [pc, #20]	; (800f038 <mix_sub_columns+0x284>)
 800f024:	5c9a      	ldrb	r2, [r3, r2]
 800f026:	7a7b      	ldrb	r3, [r7, #9]
 800f028:	4619      	mov	r1, r3
 800f02a:	4b04      	ldr	r3, [pc, #16]	; (800f03c <mix_sub_columns+0x288>)
 800f02c:	5c5b      	ldrb	r3, [r3, r1]
 800f02e:	4053      	eors	r3, r2
 800f030:	b2da      	uxtb	r2, r3
 800f032:	7bbb      	ldrb	r3, [r7, #14]
 800f034:	4619      	mov	r1, r3
 800f036:	e005      	b.n	800f044 <mix_sub_columns+0x290>
 800f038:	08021ab8 	.word	0x08021ab8
 800f03c:	08021bb8 	.word	0x08021bb8
 800f040:	080219b8 	.word	0x080219b8
 800f044:	4b2d      	ldr	r3, [pc, #180]	; (800f0fc <mix_sub_columns+0x348>)
 800f046:	5c5b      	ldrb	r3, [r3, r1]
 800f048:	4053      	eors	r3, r2
 800f04a:	b2d9      	uxtb	r1, r3
 800f04c:	7cfb      	ldrb	r3, [r7, #19]
 800f04e:	461a      	mov	r2, r3
 800f050:	4b2a      	ldr	r3, [pc, #168]	; (800f0fc <mix_sub_columns+0x348>)
 800f052:	5c9a      	ldrb	r2, [r3, r2]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	330c      	adds	r3, #12
 800f058:	404a      	eors	r2, r1
 800f05a:	b2d2      	uxtb	r2, r2
 800f05c:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800f05e:	7d3b      	ldrb	r3, [r7, #20]
 800f060:	461a      	mov	r2, r3
 800f062:	4b26      	ldr	r3, [pc, #152]	; (800f0fc <mix_sub_columns+0x348>)
 800f064:	5c9a      	ldrb	r2, [r3, r2]
 800f066:	7a7b      	ldrb	r3, [r7, #9]
 800f068:	4619      	mov	r1, r3
 800f06a:	4b25      	ldr	r3, [pc, #148]	; (800f100 <mix_sub_columns+0x34c>)
 800f06c:	5c5b      	ldrb	r3, [r3, r1]
 800f06e:	4053      	eors	r3, r2
 800f070:	b2da      	uxtb	r2, r3
 800f072:	7bbb      	ldrb	r3, [r7, #14]
 800f074:	4619      	mov	r1, r3
 800f076:	4b23      	ldr	r3, [pc, #140]	; (800f104 <mix_sub_columns+0x350>)
 800f078:	5c5b      	ldrb	r3, [r3, r1]
 800f07a:	4053      	eors	r3, r2
 800f07c:	b2d9      	uxtb	r1, r3
 800f07e:	7cfb      	ldrb	r3, [r7, #19]
 800f080:	461a      	mov	r2, r3
 800f082:	4b1e      	ldr	r3, [pc, #120]	; (800f0fc <mix_sub_columns+0x348>)
 800f084:	5c9a      	ldrb	r2, [r3, r2]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	330d      	adds	r3, #13
 800f08a:	404a      	eors	r2, r1
 800f08c:	b2d2      	uxtb	r2, r2
 800f08e:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800f090:	7d3b      	ldrb	r3, [r7, #20]
 800f092:	461a      	mov	r2, r3
 800f094:	4b19      	ldr	r3, [pc, #100]	; (800f0fc <mix_sub_columns+0x348>)
 800f096:	5c9a      	ldrb	r2, [r3, r2]
 800f098:	7a7b      	ldrb	r3, [r7, #9]
 800f09a:	4619      	mov	r1, r3
 800f09c:	4b17      	ldr	r3, [pc, #92]	; (800f0fc <mix_sub_columns+0x348>)
 800f09e:	5c5b      	ldrb	r3, [r3, r1]
 800f0a0:	4053      	eors	r3, r2
 800f0a2:	b2da      	uxtb	r2, r3
 800f0a4:	7bbb      	ldrb	r3, [r7, #14]
 800f0a6:	4619      	mov	r1, r3
 800f0a8:	4b15      	ldr	r3, [pc, #84]	; (800f100 <mix_sub_columns+0x34c>)
 800f0aa:	5c5b      	ldrb	r3, [r3, r1]
 800f0ac:	4053      	eors	r3, r2
 800f0ae:	b2d9      	uxtb	r1, r3
 800f0b0:	7cfb      	ldrb	r3, [r7, #19]
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	4b13      	ldr	r3, [pc, #76]	; (800f104 <mix_sub_columns+0x350>)
 800f0b6:	5c9a      	ldrb	r2, [r3, r2]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	330e      	adds	r3, #14
 800f0bc:	404a      	eors	r2, r1
 800f0be:	b2d2      	uxtb	r2, r2
 800f0c0:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800f0c2:	7d3b      	ldrb	r3, [r7, #20]
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	4b0f      	ldr	r3, [pc, #60]	; (800f104 <mix_sub_columns+0x350>)
 800f0c8:	5c9a      	ldrb	r2, [r3, r2]
 800f0ca:	7a7b      	ldrb	r3, [r7, #9]
 800f0cc:	4619      	mov	r1, r3
 800f0ce:	4b0b      	ldr	r3, [pc, #44]	; (800f0fc <mix_sub_columns+0x348>)
 800f0d0:	5c5b      	ldrb	r3, [r3, r1]
 800f0d2:	4053      	eors	r3, r2
 800f0d4:	b2da      	uxtb	r2, r3
 800f0d6:	7bbb      	ldrb	r3, [r7, #14]
 800f0d8:	4619      	mov	r1, r3
 800f0da:	4b08      	ldr	r3, [pc, #32]	; (800f0fc <mix_sub_columns+0x348>)
 800f0dc:	5c5b      	ldrb	r3, [r3, r1]
 800f0de:	4053      	eors	r3, r2
 800f0e0:	b2d9      	uxtb	r1, r3
 800f0e2:	7cfb      	ldrb	r3, [r7, #19]
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	4b06      	ldr	r3, [pc, #24]	; (800f100 <mix_sub_columns+0x34c>)
 800f0e8:	5c9a      	ldrb	r2, [r3, r2]
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	330f      	adds	r3, #15
 800f0ee:	404a      	eors	r2, r1
 800f0f0:	b2d2      	uxtb	r2, r2
 800f0f2:	701a      	strb	r2, [r3, #0]
  }
 800f0f4:	bf00      	nop
 800f0f6:	3718      	adds	r7, #24
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}
 800f0fc:	080219b8 	.word	0x080219b8
 800f100:	08021ab8 	.word	0x08021ab8
 800f104:	08021bb8 	.word	0x08021bb8

0800f108 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b086      	sub	sp, #24
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	460b      	mov	r3, r1
 800f112:	607a      	str	r2, [r7, #4]
 800f114:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800f116:	7afb      	ldrb	r3, [r7, #11]
 800f118:	3b10      	subs	r3, #16
 800f11a:	2b10      	cmp	r3, #16
 800f11c:	bf8c      	ite	hi
 800f11e:	2201      	movhi	r2, #1
 800f120:	2200      	movls	r2, #0
 800f122:	b2d2      	uxtb	r2, r2
 800f124:	2a00      	cmp	r2, #0
 800f126:	d10d      	bne.n	800f144 <lorawan_aes_set_key+0x3c>
 800f128:	2201      	movs	r2, #1
 800f12a:	fa02 f303 	lsl.w	r3, r2, r3
 800f12e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800f132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f136:	2b00      	cmp	r3, #0
 800f138:	bf14      	ite	ne
 800f13a:	2301      	movne	r3, #1
 800f13c:	2300      	moveq	r3, #0
 800f13e:	b2db      	uxtb	r3, r3
 800f140:	2b00      	cmp	r3, #0
 800f142:	d105      	bne.n	800f150 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800f14c:	23ff      	movs	r3, #255	; 0xff
 800f14e:	e0b2      	b.n	800f2b6 <lorawan_aes_set_key+0x1ae>
        break;
 800f150:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	7afa      	ldrb	r2, [r7, #11]
 800f156:	68f9      	ldr	r1, [r7, #12]
 800f158:	4618      	mov	r0, r3
 800f15a:	f7ff fbfa 	bl	800e952 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800f15e:	7afb      	ldrb	r3, [r7, #11]
 800f160:	331c      	adds	r3, #28
 800f162:	b2db      	uxtb	r3, r3
 800f164:	009b      	lsls	r3, r3, #2
 800f166:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800f168:	7c7b      	ldrb	r3, [r7, #17]
 800f16a:	091b      	lsrs	r3, r3, #4
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	3b01      	subs	r3, #1
 800f170:	b2da      	uxtb	r2, r3
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800f178:	7afb      	ldrb	r3, [r7, #11]
 800f17a:	75fb      	strb	r3, [r7, #23]
 800f17c:	2301      	movs	r3, #1
 800f17e:	75bb      	strb	r3, [r7, #22]
 800f180:	e093      	b.n	800f2aa <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800f182:	7dfb      	ldrb	r3, [r7, #23]
 800f184:	3b04      	subs	r3, #4
 800f186:	687a      	ldr	r2, [r7, #4]
 800f188:	5cd3      	ldrb	r3, [r2, r3]
 800f18a:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800f18c:	7dfb      	ldrb	r3, [r7, #23]
 800f18e:	3b03      	subs	r3, #3
 800f190:	687a      	ldr	r2, [r7, #4]
 800f192:	5cd3      	ldrb	r3, [r2, r3]
 800f194:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800f196:	7dfb      	ldrb	r3, [r7, #23]
 800f198:	3b02      	subs	r3, #2
 800f19a:	687a      	ldr	r2, [r7, #4]
 800f19c:	5cd3      	ldrb	r3, [r2, r3]
 800f19e:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800f1a0:	7dfb      	ldrb	r3, [r7, #23]
 800f1a2:	3b01      	subs	r3, #1
 800f1a4:	687a      	ldr	r2, [r7, #4]
 800f1a6:	5cd3      	ldrb	r3, [r2, r3]
 800f1a8:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800f1aa:	7dfb      	ldrb	r3, [r7, #23]
 800f1ac:	7afa      	ldrb	r2, [r7, #11]
 800f1ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800f1b2:	fb01 f202 	mul.w	r2, r1, r2
 800f1b6:	1a9b      	subs	r3, r3, r2
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d127      	bne.n	800f20e <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800f1be:	7d7b      	ldrb	r3, [r7, #21]
 800f1c0:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800f1c2:	7d3b      	ldrb	r3, [r7, #20]
 800f1c4:	4a3e      	ldr	r2, [pc, #248]	; (800f2c0 <lorawan_aes_set_key+0x1b8>)
 800f1c6:	5cd2      	ldrb	r2, [r2, r3]
 800f1c8:	7dbb      	ldrb	r3, [r7, #22]
 800f1ca:	4053      	eors	r3, r2
 800f1cc:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800f1ce:	7cfb      	ldrb	r3, [r7, #19]
 800f1d0:	4a3b      	ldr	r2, [pc, #236]	; (800f2c0 <lorawan_aes_set_key+0x1b8>)
 800f1d2:	5cd3      	ldrb	r3, [r2, r3]
 800f1d4:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800f1d6:	7cbb      	ldrb	r3, [r7, #18]
 800f1d8:	4a39      	ldr	r2, [pc, #228]	; (800f2c0 <lorawan_aes_set_key+0x1b8>)
 800f1da:	5cd3      	ldrb	r3, [r2, r3]
 800f1dc:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800f1de:	7c3b      	ldrb	r3, [r7, #16]
 800f1e0:	4a37      	ldr	r2, [pc, #220]	; (800f2c0 <lorawan_aes_set_key+0x1b8>)
 800f1e2:	5cd3      	ldrb	r3, [r2, r3]
 800f1e4:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800f1e6:	7dbb      	ldrb	r3, [r7, #22]
 800f1e8:	005b      	lsls	r3, r3, #1
 800f1ea:	b25a      	sxtb	r2, r3
 800f1ec:	7dbb      	ldrb	r3, [r7, #22]
 800f1ee:	09db      	lsrs	r3, r3, #7
 800f1f0:	b2db      	uxtb	r3, r3
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	0049      	lsls	r1, r1, #1
 800f1f6:	440b      	add	r3, r1
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	00c8      	lsls	r0, r1, #3
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	4603      	mov	r3, r0
 800f200:	440b      	add	r3, r1
 800f202:	b2db      	uxtb	r3, r3
 800f204:	b25b      	sxtb	r3, r3
 800f206:	4053      	eors	r3, r2
 800f208:	b25b      	sxtb	r3, r3
 800f20a:	75bb      	strb	r3, [r7, #22]
 800f20c:	e01c      	b.n	800f248 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800f20e:	7afb      	ldrb	r3, [r7, #11]
 800f210:	2b18      	cmp	r3, #24
 800f212:	d919      	bls.n	800f248 <lorawan_aes_set_key+0x140>
 800f214:	7dfb      	ldrb	r3, [r7, #23]
 800f216:	7afa      	ldrb	r2, [r7, #11]
 800f218:	fbb3 f1f2 	udiv	r1, r3, r2
 800f21c:	fb01 f202 	mul.w	r2, r1, r2
 800f220:	1a9b      	subs	r3, r3, r2
 800f222:	b2db      	uxtb	r3, r3
 800f224:	2b10      	cmp	r3, #16
 800f226:	d10f      	bne.n	800f248 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800f228:	7d7b      	ldrb	r3, [r7, #21]
 800f22a:	4a25      	ldr	r2, [pc, #148]	; (800f2c0 <lorawan_aes_set_key+0x1b8>)
 800f22c:	5cd3      	ldrb	r3, [r2, r3]
 800f22e:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800f230:	7d3b      	ldrb	r3, [r7, #20]
 800f232:	4a23      	ldr	r2, [pc, #140]	; (800f2c0 <lorawan_aes_set_key+0x1b8>)
 800f234:	5cd3      	ldrb	r3, [r2, r3]
 800f236:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800f238:	7cfb      	ldrb	r3, [r7, #19]
 800f23a:	4a21      	ldr	r2, [pc, #132]	; (800f2c0 <lorawan_aes_set_key+0x1b8>)
 800f23c:	5cd3      	ldrb	r3, [r2, r3]
 800f23e:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800f240:	7cbb      	ldrb	r3, [r7, #18]
 800f242:	4a1f      	ldr	r2, [pc, #124]	; (800f2c0 <lorawan_aes_set_key+0x1b8>)
 800f244:	5cd3      	ldrb	r3, [r2, r3]
 800f246:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800f248:	7dfa      	ldrb	r2, [r7, #23]
 800f24a:	7afb      	ldrb	r3, [r7, #11]
 800f24c:	1ad3      	subs	r3, r2, r3
 800f24e:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800f250:	7c3b      	ldrb	r3, [r7, #16]
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	5cd1      	ldrb	r1, [r2, r3]
 800f256:	7dfb      	ldrb	r3, [r7, #23]
 800f258:	7d7a      	ldrb	r2, [r7, #21]
 800f25a:	404a      	eors	r2, r1
 800f25c:	b2d1      	uxtb	r1, r2
 800f25e:	687a      	ldr	r2, [r7, #4]
 800f260:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800f262:	7c3b      	ldrb	r3, [r7, #16]
 800f264:	3301      	adds	r3, #1
 800f266:	687a      	ldr	r2, [r7, #4]
 800f268:	5cd1      	ldrb	r1, [r2, r3]
 800f26a:	7dfb      	ldrb	r3, [r7, #23]
 800f26c:	3301      	adds	r3, #1
 800f26e:	7d3a      	ldrb	r2, [r7, #20]
 800f270:	404a      	eors	r2, r1
 800f272:	b2d1      	uxtb	r1, r2
 800f274:	687a      	ldr	r2, [r7, #4]
 800f276:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800f278:	7c3b      	ldrb	r3, [r7, #16]
 800f27a:	3302      	adds	r3, #2
 800f27c:	687a      	ldr	r2, [r7, #4]
 800f27e:	5cd1      	ldrb	r1, [r2, r3]
 800f280:	7dfb      	ldrb	r3, [r7, #23]
 800f282:	3302      	adds	r3, #2
 800f284:	7cfa      	ldrb	r2, [r7, #19]
 800f286:	404a      	eors	r2, r1
 800f288:	b2d1      	uxtb	r1, r2
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800f28e:	7c3b      	ldrb	r3, [r7, #16]
 800f290:	3303      	adds	r3, #3
 800f292:	687a      	ldr	r2, [r7, #4]
 800f294:	5cd1      	ldrb	r1, [r2, r3]
 800f296:	7dfb      	ldrb	r3, [r7, #23]
 800f298:	3303      	adds	r3, #3
 800f29a:	7cba      	ldrb	r2, [r7, #18]
 800f29c:	404a      	eors	r2, r1
 800f29e:	b2d1      	uxtb	r1, r2
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800f2a4:	7dfb      	ldrb	r3, [r7, #23]
 800f2a6:	3304      	adds	r3, #4
 800f2a8:	75fb      	strb	r3, [r7, #23]
 800f2aa:	7dfa      	ldrb	r2, [r7, #23]
 800f2ac:	7c7b      	ldrb	r3, [r7, #17]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	f4ff af67 	bcc.w	800f182 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800f2b4:	2300      	movs	r3, #0
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3718      	adds	r7, #24
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	080219b8 	.word	0x080219b8

0800f2c4 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b08a      	sub	sp, #40	; 0x28
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	60f8      	str	r0, [r7, #12]
 800f2cc:	60b9      	str	r1, [r7, #8]
 800f2ce:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d038      	beq.n	800f34c <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800f2da:	687a      	ldr	r2, [r7, #4]
 800f2dc:	f107 0314 	add.w	r3, r7, #20
 800f2e0:	68f9      	ldr	r1, [r7, #12]
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7ff fc07 	bl	800eaf6 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f2ee:	e014      	b.n	800f31a <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800f2f0:	f107 0314 	add.w	r3, r7, #20
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7ff fd5d 	bl	800edb4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f300:	0112      	lsls	r2, r2, #4
 800f302:	441a      	add	r2, r3
 800f304:	f107 0314 	add.w	r3, r7, #20
 800f308:	4611      	mov	r1, r2
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7ff fcab 	bl	800ec66 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800f310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f314:	3301      	adds	r3, #1
 800f316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800f320:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f324:	429a      	cmp	r2, r3
 800f326:	d3e3      	bcc.n	800f2f0 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800f328:	f107 0314 	add.w	r3, r7, #20
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7ff fca7 	bl	800ec80 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f338:	0112      	lsls	r2, r2, #4
 800f33a:	441a      	add	r2, r3
 800f33c:	f107 0314 	add.w	r3, r7, #20
 800f340:	4619      	mov	r1, r3
 800f342:	68b8      	ldr	r0, [r7, #8]
 800f344:	f7ff fbd7 	bl	800eaf6 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800f348:	2300      	movs	r3, #0
 800f34a:	e000      	b.n	800f34e <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800f34c:	23ff      	movs	r3, #255	; 0xff
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3728      	adds	r7, #40	; 0x28
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}
	...

0800f358 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800f358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f35a:	b09d      	sub	sp, #116	; 0x74
 800f35c:	af10      	add	r7, sp, #64	; 0x40
 800f35e:	4603      	mov	r3, r0
 800f360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800f364:	2306      	movs	r3, #6
 800f366:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800f36a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f36e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f372:	4611      	mov	r1, r2
 800f374:	4618      	mov	r0, r3
 800f376:	f000 f9a7 	bl	800f6c8 <SecureElementGetKeyByID>
 800f37a:	4603      	mov	r3, r0
 800f37c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800f380:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f384:	2b00      	cmp	r3, #0
 800f386:	f040 80b0 	bne.w	800f4ea <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800f38a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d106      	bne.n	800f3a0 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800f392:	4b58      	ldr	r3, [pc, #352]	; (800f4f4 <PrintKey+0x19c>)
 800f394:	2200      	movs	r2, #0
 800f396:	2100      	movs	r1, #0
 800f398:	2002      	movs	r0, #2
 800f39a:	f011 fa4f 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
 800f39e:	e056      	b.n	800f44e <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800f3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d106      	bne.n	800f3b6 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800f3a8:	4b53      	ldr	r3, [pc, #332]	; (800f4f8 <PrintKey+0x1a0>)
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	2100      	movs	r1, #0
 800f3ae:	2002      	movs	r0, #2
 800f3b0:	f011 fa44 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
 800f3b4:	e04b      	b.n	800f44e <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800f3b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3ba:	2b03      	cmp	r3, #3
 800f3bc:	d106      	bne.n	800f3cc <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800f3be:	4b4f      	ldr	r3, [pc, #316]	; (800f4fc <PrintKey+0x1a4>)
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	2100      	movs	r1, #0
 800f3c4:	2002      	movs	r0, #2
 800f3c6:	f011 fa39 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
 800f3ca:	e040      	b.n	800f44e <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800f3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3d0:	2b02      	cmp	r3, #2
 800f3d2:	d106      	bne.n	800f3e2 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800f3d4:	4b4a      	ldr	r3, [pc, #296]	; (800f500 <PrintKey+0x1a8>)
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	2100      	movs	r1, #0
 800f3da:	2002      	movs	r0, #2
 800f3dc:	f011 fa2e 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
 800f3e0:	e035      	b.n	800f44e <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800f3e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3e6:	2b04      	cmp	r3, #4
 800f3e8:	d106      	bne.n	800f3f8 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800f3ea:	4b46      	ldr	r3, [pc, #280]	; (800f504 <PrintKey+0x1ac>)
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	2100      	movs	r1, #0
 800f3f0:	2002      	movs	r0, #2
 800f3f2:	f011 fa23 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
 800f3f6:	e02a      	b.n	800f44e <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800f3f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3fc:	2b7f      	cmp	r3, #127	; 0x7f
 800f3fe:	d106      	bne.n	800f40e <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800f400:	4b41      	ldr	r3, [pc, #260]	; (800f508 <PrintKey+0x1b0>)
 800f402:	2200      	movs	r2, #0
 800f404:	2100      	movs	r1, #0
 800f406:	2002      	movs	r0, #2
 800f408:	f011 fa18 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
 800f40c:	e01f      	b.n	800f44e <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800f40e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f412:	2b80      	cmp	r3, #128	; 0x80
 800f414:	d106      	bne.n	800f424 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800f416:	4b3d      	ldr	r3, [pc, #244]	; (800f50c <PrintKey+0x1b4>)
 800f418:	2200      	movs	r2, #0
 800f41a:	2100      	movs	r1, #0
 800f41c:	2002      	movs	r0, #2
 800f41e:	f011 fa0d 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
 800f422:	e014      	b.n	800f44e <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800f424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f428:	2b81      	cmp	r3, #129	; 0x81
 800f42a:	d106      	bne.n	800f43a <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800f42c:	4b38      	ldr	r3, [pc, #224]	; (800f510 <PrintKey+0x1b8>)
 800f42e:	2200      	movs	r2, #0
 800f430:	2100      	movs	r1, #0
 800f432:	2002      	movs	r0, #2
 800f434:	f011 fa02 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
 800f438:	e009      	b.n	800f44e <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800f43a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f43e:	2b82      	cmp	r3, #130	; 0x82
 800f440:	d105      	bne.n	800f44e <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800f442:	4b34      	ldr	r3, [pc, #208]	; (800f514 <PrintKey+0x1bc>)
 800f444:	2200      	movs	r2, #0
 800f446:	2100      	movs	r1, #0
 800f448:	2002      	movs	r0, #2
 800f44a:	f011 f9f7 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800f44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f450:	785b      	ldrb	r3, [r3, #1]
 800f452:	4618      	mov	r0, r3
 800f454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f456:	789b      	ldrb	r3, [r3, #2]
 800f458:	461c      	mov	r4, r3
 800f45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45c:	78db      	ldrb	r3, [r3, #3]
 800f45e:	461d      	mov	r5, r3
 800f460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f462:	791b      	ldrb	r3, [r3, #4]
 800f464:	461e      	mov	r6, r3
 800f466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f468:	795b      	ldrb	r3, [r3, #5]
 800f46a:	623b      	str	r3, [r7, #32]
 800f46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46e:	799b      	ldrb	r3, [r3, #6]
 800f470:	61fb      	str	r3, [r7, #28]
 800f472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f474:	79db      	ldrb	r3, [r3, #7]
 800f476:	61bb      	str	r3, [r7, #24]
 800f478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47a:	7a1b      	ldrb	r3, [r3, #8]
 800f47c:	617b      	str	r3, [r7, #20]
 800f47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f480:	7a5b      	ldrb	r3, [r3, #9]
 800f482:	613b      	str	r3, [r7, #16]
 800f484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f486:	7a9b      	ldrb	r3, [r3, #10]
 800f488:	60fb      	str	r3, [r7, #12]
 800f48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48c:	7adb      	ldrb	r3, [r3, #11]
 800f48e:	60bb      	str	r3, [r7, #8]
 800f490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f492:	7b1b      	ldrb	r3, [r3, #12]
 800f494:	607b      	str	r3, [r7, #4]
 800f496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f498:	7b5b      	ldrb	r3, [r3, #13]
 800f49a:	603b      	str	r3, [r7, #0]
 800f49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49e:	7b9b      	ldrb	r3, [r3, #14]
 800f4a0:	4619      	mov	r1, r3
 800f4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a4:	7bdb      	ldrb	r3, [r3, #15]
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4aa:	7c1b      	ldrb	r3, [r3, #16]
 800f4ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800f4ae:	920e      	str	r2, [sp, #56]	; 0x38
 800f4b0:	910d      	str	r1, [sp, #52]	; 0x34
 800f4b2:	683a      	ldr	r2, [r7, #0]
 800f4b4:	920c      	str	r2, [sp, #48]	; 0x30
 800f4b6:	687a      	ldr	r2, [r7, #4]
 800f4b8:	920b      	str	r2, [sp, #44]	; 0x2c
 800f4ba:	68ba      	ldr	r2, [r7, #8]
 800f4bc:	920a      	str	r2, [sp, #40]	; 0x28
 800f4be:	68fa      	ldr	r2, [r7, #12]
 800f4c0:	9209      	str	r2, [sp, #36]	; 0x24
 800f4c2:	693a      	ldr	r2, [r7, #16]
 800f4c4:	9208      	str	r2, [sp, #32]
 800f4c6:	697a      	ldr	r2, [r7, #20]
 800f4c8:	9207      	str	r2, [sp, #28]
 800f4ca:	69ba      	ldr	r2, [r7, #24]
 800f4cc:	9206      	str	r2, [sp, #24]
 800f4ce:	69fa      	ldr	r2, [r7, #28]
 800f4d0:	9205      	str	r2, [sp, #20]
 800f4d2:	6a3b      	ldr	r3, [r7, #32]
 800f4d4:	9304      	str	r3, [sp, #16]
 800f4d6:	9603      	str	r6, [sp, #12]
 800f4d8:	9502      	str	r5, [sp, #8]
 800f4da:	9401      	str	r4, [sp, #4]
 800f4dc:	9000      	str	r0, [sp, #0]
 800f4de:	4b0e      	ldr	r3, [pc, #56]	; (800f518 <PrintKey+0x1c0>)
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	2100      	movs	r1, #0
 800f4e4:	2002      	movs	r0, #2
 800f4e6:	f011 f9a9 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800f4ea:	bf00      	nop
 800f4ec:	3734      	adds	r7, #52	; 0x34
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4f2:	bf00      	nop
 800f4f4:	08021424 	.word	0x08021424
 800f4f8:	0802143c 	.word	0x0802143c
 800f4fc:	08021454 	.word	0x08021454
 800f500:	0802146c 	.word	0x0802146c
 800f504:	08021484 	.word	0x08021484
 800f508:	0802149c 	.word	0x0802149c
 800f50c:	080214b4 	.word	0x080214b4
 800f510:	080214cc 	.word	0x080214cc
 800f514:	080214e4 	.word	0x080214e4
 800f518:	080214fc 	.word	0x080214fc

0800f51c <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800f51c:	b480      	push	{r7}
 800f51e:	b085      	sub	sp, #20
 800f520:	af00      	add	r7, sp, #0
 800f522:	4603      	mov	r3, r0
 800f524:	6039      	str	r1, [r7, #0]
 800f526:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f528:	2300      	movs	r3, #0
 800f52a:	73fb      	strb	r3, [r7, #15]
 800f52c:	e01a      	b.n	800f564 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f52e:	4b12      	ldr	r3, [pc, #72]	; (800f578 <GetKeyByID+0x5c>)
 800f530:	6819      	ldr	r1, [r3, #0]
 800f532:	7bfa      	ldrb	r2, [r7, #15]
 800f534:	4613      	mov	r3, r2
 800f536:	011b      	lsls	r3, r3, #4
 800f538:	4413      	add	r3, r2
 800f53a:	440b      	add	r3, r1
 800f53c:	3310      	adds	r3, #16
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	79fa      	ldrb	r2, [r7, #7]
 800f542:	429a      	cmp	r2, r3
 800f544:	d10b      	bne.n	800f55e <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800f546:	4b0c      	ldr	r3, [pc, #48]	; (800f578 <GetKeyByID+0x5c>)
 800f548:	6819      	ldr	r1, [r3, #0]
 800f54a:	7bfa      	ldrb	r2, [r7, #15]
 800f54c:	4613      	mov	r3, r2
 800f54e:	011b      	lsls	r3, r3, #4
 800f550:	4413      	add	r3, r2
 800f552:	3310      	adds	r3, #16
 800f554:	18ca      	adds	r2, r1, r3
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f55a:	2300      	movs	r3, #0
 800f55c:	e006      	b.n	800f56c <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f55e:	7bfb      	ldrb	r3, [r7, #15]
 800f560:	3301      	adds	r3, #1
 800f562:	73fb      	strb	r3, [r7, #15]
 800f564:	7bfb      	ldrb	r3, [r7, #15]
 800f566:	2b09      	cmp	r3, #9
 800f568:	d9e1      	bls.n	800f52e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f56a:	2303      	movs	r3, #3
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3714      	adds	r7, #20
 800f570:	46bd      	mov	sp, r7
 800f572:	bc80      	pop	{r7}
 800f574:	4770      	bx	lr
 800f576:	bf00      	nop
 800f578:	20000c80 	.word	0x20000c80

0800f57c <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800f57c:	b590      	push	{r4, r7, lr}
 800f57e:	b0d1      	sub	sp, #324	; 0x144
 800f580:	af00      	add	r7, sp, #0
 800f582:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800f586:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800f58a:	6020      	str	r0, [r4, #0]
 800f58c:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800f590:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800f594:	6001      	str	r1, [r0, #0]
 800f596:	4619      	mov	r1, r3
 800f598:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f59c:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800f5a0:	801a      	strh	r2, [r3, #0]
 800f5a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f5a6:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800f5aa:	460a      	mov	r2, r1
 800f5ac:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800f5ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f5b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d003      	beq.n	800f5c4 <ComputeCmac+0x48>
 800f5bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d101      	bne.n	800f5c8 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f5c4:	2302      	movs	r3, #2
 800f5c6:	e05c      	b.n	800f682 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800f5c8:	f107 0314 	add.w	r3, r7, #20
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7fe ff1b 	bl	800e408 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800f5d2:	f107 0210 	add.w	r2, r7, #16
 800f5d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f5da:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800f5de:	781b      	ldrb	r3, [r3, #0]
 800f5e0:	4611      	mov	r1, r2
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7ff ff9a 	bl	800f51c <GetKeyByID>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f5ee:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d143      	bne.n	800f67e <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800f5f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f5fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	1c5a      	adds	r2, r3, #1
 800f602:	f107 0314 	add.w	r3, r7, #20
 800f606:	4611      	mov	r1, r2
 800f608:	4618      	mov	r0, r3
 800f60a:	f7fe ff16 	bl	800e43a <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800f60e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f612:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d009      	beq.n	800f630 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800f61c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f620:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800f624:	f107 0014 	add.w	r0, r7, #20
 800f628:	2210      	movs	r2, #16
 800f62a:	6819      	ldr	r1, [r3, #0]
 800f62c:	f7fe ff14 	bl	800e458 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800f630:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f634:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800f638:	881a      	ldrh	r2, [r3, #0]
 800f63a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f63e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800f642:	f107 0014 	add.w	r0, r7, #20
 800f646:	6819      	ldr	r1, [r3, #0]
 800f648:	f7fe ff06 	bl	800e458 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800f64c:	f107 0214 	add.w	r2, r7, #20
 800f650:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800f654:	4611      	mov	r1, r2
 800f656:	4618      	mov	r0, r3
 800f658:	f7fe ffc0 	bl	800e5dc <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800f65c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800f660:	061a      	lsls	r2, r3, #24
 800f662:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800f666:	041b      	lsls	r3, r3, #16
 800f668:	431a      	orrs	r2, r3
 800f66a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800f66e:	021b      	lsls	r3, r3, #8
 800f670:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800f672:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800f676:	431a      	orrs	r2, r3
 800f678:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800f67c:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800f67e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800f682:	4618      	mov	r0, r3
 800f684:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd90      	pop	{r4, r7, pc}

0800f68c <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b082      	sub	sp, #8
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d101      	bne.n	800f6a0 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f69c:	2302      	movs	r3, #2
 800f69e:	e00a      	b.n	800f6b6 <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800f6a0:	4a07      	ldr	r2, [pc, #28]	; (800f6c0 <SecureElementInit+0x34>)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800f6a6:	4b06      	ldr	r3, [pc, #24]	; (800f6c0 <SecureElementInit+0x34>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	22c0      	movs	r2, #192	; 0xc0
 800f6ac:	4905      	ldr	r1, [pc, #20]	; (800f6c4 <SecureElementInit+0x38>)
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f00c fd6f 	bl	801c192 <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3708      	adds	r7, #8
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	20000c80 	.word	0x20000c80
 800f6c4:	08021e4c 	.word	0x08021e4c

0800f6c8 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b085      	sub	sp, #20
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	6039      	str	r1, [r7, #0]
 800f6d2:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	73fb      	strb	r3, [r7, #15]
 800f6d8:	e01a      	b.n	800f710 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800f6da:	4b12      	ldr	r3, [pc, #72]	; (800f724 <SecureElementGetKeyByID+0x5c>)
 800f6dc:	6819      	ldr	r1, [r3, #0]
 800f6de:	7bfa      	ldrb	r2, [r7, #15]
 800f6e0:	4613      	mov	r3, r2
 800f6e2:	011b      	lsls	r3, r3, #4
 800f6e4:	4413      	add	r3, r2
 800f6e6:	440b      	add	r3, r1
 800f6e8:	3310      	adds	r3, #16
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	79fa      	ldrb	r2, [r7, #7]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d10b      	bne.n	800f70a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800f6f2:	4b0c      	ldr	r3, [pc, #48]	; (800f724 <SecureElementGetKeyByID+0x5c>)
 800f6f4:	6819      	ldr	r1, [r3, #0]
 800f6f6:	7bfa      	ldrb	r2, [r7, #15]
 800f6f8:	4613      	mov	r3, r2
 800f6fa:	011b      	lsls	r3, r3, #4
 800f6fc:	4413      	add	r3, r2
 800f6fe:	3310      	adds	r3, #16
 800f700:	18ca      	adds	r2, r1, r3
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f706:	2300      	movs	r3, #0
 800f708:	e006      	b.n	800f718 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800f70a:	7bfb      	ldrb	r3, [r7, #15]
 800f70c:	3301      	adds	r3, #1
 800f70e:	73fb      	strb	r3, [r7, #15]
 800f710:	7bfb      	ldrb	r3, [r7, #15]
 800f712:	2b09      	cmp	r3, #9
 800f714:	d9e1      	bls.n	800f6da <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f716:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800f718:	4618      	mov	r0, r3
 800f71a:	3714      	adds	r7, #20
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bc80      	pop	{r7}
 800f720:	4770      	bx	lr
 800f722:	bf00      	nop
 800f724:	20000c80 	.word	0x20000c80

0800f728 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800f728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f72a:	b08b      	sub	sp, #44	; 0x2c
 800f72c:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800f72e:	4b3f      	ldr	r3, [pc, #252]	; (800f82c <SecureElementPrintKeys+0x104>)
 800f730:	2200      	movs	r2, #0
 800f732:	2100      	movs	r1, #0
 800f734:	2002      	movs	r0, #2
 800f736:	f011 f881 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800f73a:	2000      	movs	r0, #0
 800f73c:	f7ff fe0c 	bl	800f358 <PrintKey>
    PrintKey(NWK_KEY);
 800f740:	2001      	movs	r0, #1
 800f742:	f7ff fe09 	bl	800f358 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800f746:	4b3a      	ldr	r3, [pc, #232]	; (800f830 <SecureElementPrintKeys+0x108>)
 800f748:	2200      	movs	r2, #0
 800f74a:	2100      	movs	r1, #0
 800f74c:	2002      	movs	r0, #2
 800f74e:	f011 f875 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800f752:	2003      	movs	r0, #3
 800f754:	f7ff fe00 	bl	800f358 <PrintKey>
    PrintKey(NWK_S_KEY);
 800f758:	2002      	movs	r0, #2
 800f75a:	f7ff fdfd 	bl	800f358 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800f75e:	4b35      	ldr	r3, [pc, #212]	; (800f834 <SecureElementPrintKeys+0x10c>)
 800f760:	2200      	movs	r2, #0
 800f762:	2100      	movs	r1, #0
 800f764:	2002      	movs	r0, #2
 800f766:	f011 f869 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800f76a:	4b33      	ldr	r3, [pc, #204]	; (800f838 <SecureElementPrintKeys+0x110>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	461a      	mov	r2, r3
 800f772:	4b31      	ldr	r3, [pc, #196]	; (800f838 <SecureElementPrintKeys+0x110>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	785b      	ldrb	r3, [r3, #1]
 800f778:	4619      	mov	r1, r3
 800f77a:	4b2f      	ldr	r3, [pc, #188]	; (800f838 <SecureElementPrintKeys+0x110>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	789b      	ldrb	r3, [r3, #2]
 800f780:	4618      	mov	r0, r3
 800f782:	4b2d      	ldr	r3, [pc, #180]	; (800f838 <SecureElementPrintKeys+0x110>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	78db      	ldrb	r3, [r3, #3]
 800f788:	461c      	mov	r4, r3
 800f78a:	4b2b      	ldr	r3, [pc, #172]	; (800f838 <SecureElementPrintKeys+0x110>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	791b      	ldrb	r3, [r3, #4]
 800f790:	461d      	mov	r5, r3
 800f792:	4b29      	ldr	r3, [pc, #164]	; (800f838 <SecureElementPrintKeys+0x110>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	795b      	ldrb	r3, [r3, #5]
 800f798:	461e      	mov	r6, r3
 800f79a:	4b27      	ldr	r3, [pc, #156]	; (800f838 <SecureElementPrintKeys+0x110>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	799b      	ldrb	r3, [r3, #6]
 800f7a0:	607b      	str	r3, [r7, #4]
 800f7a2:	4b25      	ldr	r3, [pc, #148]	; (800f838 <SecureElementPrintKeys+0x110>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	79db      	ldrb	r3, [r3, #7]
 800f7a8:	9307      	str	r3, [sp, #28]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	9306      	str	r3, [sp, #24]
 800f7ae:	9605      	str	r6, [sp, #20]
 800f7b0:	9504      	str	r5, [sp, #16]
 800f7b2:	9403      	str	r4, [sp, #12]
 800f7b4:	9002      	str	r0, [sp, #8]
 800f7b6:	9101      	str	r1, [sp, #4]
 800f7b8:	9200      	str	r2, [sp, #0]
 800f7ba:	4b20      	ldr	r3, [pc, #128]	; (800f83c <SecureElementPrintKeys+0x114>)
 800f7bc:	2200      	movs	r2, #0
 800f7be:	2100      	movs	r1, #0
 800f7c0:	2002      	movs	r0, #2
 800f7c2:	f011 f83b 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800f7c6:	4b1c      	ldr	r3, [pc, #112]	; (800f838 <SecureElementPrintKeys+0x110>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	7a1b      	ldrb	r3, [r3, #8]
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	4b1a      	ldr	r3, [pc, #104]	; (800f838 <SecureElementPrintKeys+0x110>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	7a5b      	ldrb	r3, [r3, #9]
 800f7d4:	4619      	mov	r1, r3
 800f7d6:	4b18      	ldr	r3, [pc, #96]	; (800f838 <SecureElementPrintKeys+0x110>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	7a9b      	ldrb	r3, [r3, #10]
 800f7dc:	4618      	mov	r0, r3
 800f7de:	4b16      	ldr	r3, [pc, #88]	; (800f838 <SecureElementPrintKeys+0x110>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	7adb      	ldrb	r3, [r3, #11]
 800f7e4:	461c      	mov	r4, r3
 800f7e6:	4b14      	ldr	r3, [pc, #80]	; (800f838 <SecureElementPrintKeys+0x110>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	7b1b      	ldrb	r3, [r3, #12]
 800f7ec:	461d      	mov	r5, r3
 800f7ee:	4b12      	ldr	r3, [pc, #72]	; (800f838 <SecureElementPrintKeys+0x110>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	7b5b      	ldrb	r3, [r3, #13]
 800f7f4:	461e      	mov	r6, r3
 800f7f6:	4b10      	ldr	r3, [pc, #64]	; (800f838 <SecureElementPrintKeys+0x110>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	7b9b      	ldrb	r3, [r3, #14]
 800f7fc:	607b      	str	r3, [r7, #4]
 800f7fe:	4b0e      	ldr	r3, [pc, #56]	; (800f838 <SecureElementPrintKeys+0x110>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	7bdb      	ldrb	r3, [r3, #15]
 800f804:	9307      	str	r3, [sp, #28]
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	9306      	str	r3, [sp, #24]
 800f80a:	9605      	str	r6, [sp, #20]
 800f80c:	9504      	str	r5, [sp, #16]
 800f80e:	9403      	str	r4, [sp, #12]
 800f810:	9002      	str	r0, [sp, #8]
 800f812:	9101      	str	r1, [sp, #4]
 800f814:	9200      	str	r2, [sp, #0]
 800f816:	4b0a      	ldr	r3, [pc, #40]	; (800f840 <SecureElementPrintKeys+0x118>)
 800f818:	2200      	movs	r2, #0
 800f81a:	2100      	movs	r1, #0
 800f81c:	2002      	movs	r0, #2
 800f81e:	f011 f80d 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800f822:	2300      	movs	r3, #0
}
 800f824:	4618      	mov	r0, r3
 800f826:	370c      	adds	r7, #12
 800f828:	46bd      	mov	sp, r7
 800f82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f82c:	08021550 	.word	0x08021550
 800f830:	08021568 	.word	0x08021568
 800f834:	08021580 	.word	0x08021580
 800f838:	20000c80 	.word	0x20000c80
 800f83c:	08021598 	.word	0x08021598
 800f840:	080215d8 	.word	0x080215d8

0800f844 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800f844:	b580      	push	{r7, lr}
 800f846:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800f848:	2004      	movs	r0, #4
 800f84a:	f7ff fd85 	bl	800f358 <PrintKey>
    PrintKey(MC_KE_KEY);
 800f84e:	207f      	movs	r0, #127	; 0x7f
 800f850:	f7ff fd82 	bl	800f358 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800f854:	2002      	movs	r0, #2
 800f856:	f7ff fd7f 	bl	800f358 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800f85a:	2003      	movs	r0, #3
 800f85c:	f7ff fd7c 	bl	800f358 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800f860:	2300      	movs	r3, #0
}
 800f862:	4618      	mov	r0, r3
 800f864:	bd80      	pop	{r7, pc}
	...

0800f868 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b088      	sub	sp, #32
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	4603      	mov	r3, r0
 800f870:	6039      	str	r1, [r7, #0]
 800f872:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d101      	bne.n	800f87e <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f87a:	2302      	movs	r3, #2
 800f87c:	e04c      	b.n	800f918 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f87e:	2300      	movs	r3, #0
 800f880:	77fb      	strb	r3, [r7, #31]
 800f882:	e045      	b.n	800f910 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f884:	4b26      	ldr	r3, [pc, #152]	; (800f920 <SecureElementSetKey+0xb8>)
 800f886:	6819      	ldr	r1, [r3, #0]
 800f888:	7ffa      	ldrb	r2, [r7, #31]
 800f88a:	4613      	mov	r3, r2
 800f88c:	011b      	lsls	r3, r3, #4
 800f88e:	4413      	add	r3, r2
 800f890:	440b      	add	r3, r1
 800f892:	3310      	adds	r3, #16
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	79fa      	ldrb	r2, [r7, #7]
 800f898:	429a      	cmp	r2, r3
 800f89a:	d136      	bne.n	800f90a <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800f89c:	79fb      	ldrb	r3, [r7, #7]
 800f89e:	2b80      	cmp	r3, #128	; 0x80
 800f8a0:	d123      	bne.n	800f8ea <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800f8a2:	2306      	movs	r3, #6
 800f8a4:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	60fb      	str	r3, [r7, #12]
 800f8aa:	f107 0310 	add.w	r3, r7, #16
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	601a      	str	r2, [r3, #0]
 800f8b2:	605a      	str	r2, [r3, #4]
 800f8b4:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800f8b6:	f107 030c 	add.w	r3, r7, #12
 800f8ba:	227f      	movs	r2, #127	; 0x7f
 800f8bc:	2110      	movs	r1, #16
 800f8be:	6838      	ldr	r0, [r7, #0]
 800f8c0:	f000 f87d 	bl	800f9be <SecureElementAesEncrypt>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800f8c8:	4b15      	ldr	r3, [pc, #84]	; (800f920 <SecureElementSetKey+0xb8>)
 800f8ca:	6819      	ldr	r1, [r3, #0]
 800f8cc:	7ffa      	ldrb	r2, [r7, #31]
 800f8ce:	4613      	mov	r3, r2
 800f8d0:	011b      	lsls	r3, r3, #4
 800f8d2:	4413      	add	r3, r2
 800f8d4:	3310      	adds	r3, #16
 800f8d6:	440b      	add	r3, r1
 800f8d8:	3301      	adds	r3, #1
 800f8da:	f107 010c 	add.w	r1, r7, #12
 800f8de:	2210      	movs	r2, #16
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f00c fc56 	bl	801c192 <memcpy1>
                return retval;
 800f8e6:	7fbb      	ldrb	r3, [r7, #30]
 800f8e8:	e016      	b.n	800f918 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800f8ea:	4b0d      	ldr	r3, [pc, #52]	; (800f920 <SecureElementSetKey+0xb8>)
 800f8ec:	6819      	ldr	r1, [r3, #0]
 800f8ee:	7ffa      	ldrb	r2, [r7, #31]
 800f8f0:	4613      	mov	r3, r2
 800f8f2:	011b      	lsls	r3, r3, #4
 800f8f4:	4413      	add	r3, r2
 800f8f6:	3310      	adds	r3, #16
 800f8f8:	440b      	add	r3, r1
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	2210      	movs	r2, #16
 800f8fe:	6839      	ldr	r1, [r7, #0]
 800f900:	4618      	mov	r0, r3
 800f902:	f00c fc46 	bl	801c192 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800f906:	2300      	movs	r3, #0
 800f908:	e006      	b.n	800f918 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f90a:	7ffb      	ldrb	r3, [r7, #31]
 800f90c:	3301      	adds	r3, #1
 800f90e:	77fb      	strb	r3, [r7, #31]
 800f910:	7ffb      	ldrb	r3, [r7, #31]
 800f912:	2b09      	cmp	r3, #9
 800f914:	d9b6      	bls.n	800f884 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f916:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3720      	adds	r7, #32
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}
 800f920:	20000c80 	.word	0x20000c80

0800f924 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b086      	sub	sp, #24
 800f928:	af02      	add	r7, sp, #8
 800f92a:	60f8      	str	r0, [r7, #12]
 800f92c:	60b9      	str	r1, [r7, #8]
 800f92e:	4611      	mov	r1, r2
 800f930:	461a      	mov	r2, r3
 800f932:	460b      	mov	r3, r1
 800f934:	80fb      	strh	r3, [r7, #6]
 800f936:	4613      	mov	r3, r2
 800f938:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800f93a:	797b      	ldrb	r3, [r7, #5]
 800f93c:	2b7e      	cmp	r3, #126	; 0x7e
 800f93e:	d901      	bls.n	800f944 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f940:	2303      	movs	r3, #3
 800f942:	e009      	b.n	800f958 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800f944:	7979      	ldrb	r1, [r7, #5]
 800f946:	88fa      	ldrh	r2, [r7, #6]
 800f948:	69bb      	ldr	r3, [r7, #24]
 800f94a:	9300      	str	r3, [sp, #0]
 800f94c:	460b      	mov	r3, r1
 800f94e:	68b9      	ldr	r1, [r7, #8]
 800f950:	68f8      	ldr	r0, [r7, #12]
 800f952:	f7ff fe13 	bl	800f57c <ComputeCmac>
 800f956:	4603      	mov	r3, r0
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3710      	adds	r7, #16
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b088      	sub	sp, #32
 800f964:	af02      	add	r7, sp, #8
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	607a      	str	r2, [r7, #4]
 800f96a:	461a      	mov	r2, r3
 800f96c:	460b      	mov	r3, r1
 800f96e:	817b      	strh	r3, [r7, #10]
 800f970:	4613      	mov	r3, r2
 800f972:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d101      	bne.n	800f97e <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f97a:	2302      	movs	r3, #2
 800f97c:	e01b      	b.n	800f9b6 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800f97e:	2306      	movs	r3, #6
 800f980:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800f982:	2300      	movs	r3, #0
 800f984:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800f986:	7a79      	ldrb	r1, [r7, #9]
 800f988:	897a      	ldrh	r2, [r7, #10]
 800f98a:	f107 0310 	add.w	r3, r7, #16
 800f98e:	9300      	str	r3, [sp, #0]
 800f990:	460b      	mov	r3, r1
 800f992:	68f9      	ldr	r1, [r7, #12]
 800f994:	2000      	movs	r0, #0
 800f996:	f7ff fdf1 	bl	800f57c <ComputeCmac>
 800f99a:	4603      	mov	r3, r0
 800f99c:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f99e:	7dfb      	ldrb	r3, [r7, #23]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d001      	beq.n	800f9a8 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800f9a4:	7dfb      	ldrb	r3, [r7, #23]
 800f9a6:	e006      	b.n	800f9b6 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	687a      	ldr	r2, [r7, #4]
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d001      	beq.n	800f9b4 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800f9b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3718      	adds	r7, #24
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}

0800f9be <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800f9be:	b580      	push	{r7, lr}
 800f9c0:	b0c2      	sub	sp, #264	; 0x108
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	60f8      	str	r0, [r7, #12]
 800f9c6:	4608      	mov	r0, r1
 800f9c8:	4611      	mov	r1, r2
 800f9ca:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f9ce:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800f9d2:	6013      	str	r3, [r2, #0]
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	817b      	strh	r3, [r7, #10]
 800f9d8:	460b      	mov	r3, r1
 800f9da:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d006      	beq.n	800f9f0 <SecureElementAesEncrypt+0x32>
 800f9e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d101      	bne.n	800f9f4 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f9f0:	2302      	movs	r3, #2
 800f9f2:	e046      	b.n	800fa82 <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800f9f4:	897b      	ldrh	r3, [r7, #10]
 800f9f6:	f003 030f 	and.w	r3, r3, #15
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d001      	beq.n	800fa04 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800fa00:	2305      	movs	r3, #5
 800fa02:	e03e      	b.n	800fa82 <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800fa04:	f107 0314 	add.w	r3, r7, #20
 800fa08:	22f0      	movs	r2, #240	; 0xf0
 800fa0a:	2100      	movs	r1, #0
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f00c fbfb 	bl	801c208 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800fa12:	f107 0210 	add.w	r2, r7, #16
 800fa16:	7a7b      	ldrb	r3, [r7, #9]
 800fa18:	4611      	mov	r1, r2
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7ff fd7e 	bl	800f51c <GetKeyByID>
 800fa20:	4603      	mov	r3, r0
 800fa22:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800fa26:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d127      	bne.n	800fa7e <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	3301      	adds	r3, #1
 800fa32:	f107 0214 	add.w	r2, r7, #20
 800fa36:	2110      	movs	r1, #16
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7ff fb65 	bl	800f108 <lorawan_aes_set_key>

        uint8_t block = 0;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800fa44:	e018      	b.n	800fa78 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800fa46:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800fa4a:	68fa      	ldr	r2, [r7, #12]
 800fa4c:	18d0      	adds	r0, r2, r3
 800fa4e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800fa52:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800fa56:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800fa5a:	6812      	ldr	r2, [r2, #0]
 800fa5c:	4413      	add	r3, r2
 800fa5e:	f107 0214 	add.w	r2, r7, #20
 800fa62:	4619      	mov	r1, r3
 800fa64:	f7ff fc2e 	bl	800f2c4 <lorawan_aes_encrypt>
            block = block + 16;
 800fa68:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800fa6c:	3310      	adds	r3, #16
 800fa6e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800fa72:	897b      	ldrh	r3, [r7, #10]
 800fa74:	3b10      	subs	r3, #16
 800fa76:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800fa78:	897b      	ldrh	r3, [r7, #10]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d1e3      	bne.n	800fa46 <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800fa7e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}

0800fa8c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b088      	sub	sp, #32
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
 800fa94:	460b      	mov	r3, r1
 800fa96:	70fb      	strb	r3, [r7, #3]
 800fa98:	4613      	mov	r3, r2
 800fa9a:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d101      	bne.n	800faa6 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800faa2:	2302      	movs	r3, #2
 800faa4:	e02e      	b.n	800fb04 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800faa6:	2306      	movs	r3, #6
 800faa8:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800faaa:	78bb      	ldrb	r3, [r7, #2]
 800faac:	2b7f      	cmp	r3, #127	; 0x7f
 800faae:	d104      	bne.n	800faba <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800fab0:	78fb      	ldrb	r3, [r7, #3]
 800fab2:	2b04      	cmp	r3, #4
 800fab4:	d001      	beq.n	800faba <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fab6:	2303      	movs	r3, #3
 800fab8:	e024      	b.n	800fb04 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800faba:	2300      	movs	r3, #0
 800fabc:	60fb      	str	r3, [r7, #12]
 800fabe:	f107 0310 	add.w	r3, r7, #16
 800fac2:	2200      	movs	r2, #0
 800fac4:	601a      	str	r2, [r3, #0]
 800fac6:	605a      	str	r2, [r3, #4]
 800fac8:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800faca:	f107 030c 	add.w	r3, r7, #12
 800face:	78fa      	ldrb	r2, [r7, #3]
 800fad0:	2110      	movs	r1, #16
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f7ff ff73 	bl	800f9be <SecureElementAesEncrypt>
 800fad8:	4603      	mov	r3, r0
 800fada:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800fadc:	7ffb      	ldrb	r3, [r7, #31]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d001      	beq.n	800fae6 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800fae2:	7ffb      	ldrb	r3, [r7, #31]
 800fae4:	e00e      	b.n	800fb04 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800fae6:	f107 020c 	add.w	r2, r7, #12
 800faea:	78bb      	ldrb	r3, [r7, #2]
 800faec:	4611      	mov	r1, r2
 800faee:	4618      	mov	r0, r3
 800faf0:	f7ff feba 	bl	800f868 <SecureElementSetKey>
 800faf4:	4603      	mov	r3, r0
 800faf6:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800faf8:	7ffb      	ldrb	r3, [r7, #31]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d001      	beq.n	800fb02 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800fafe:	7ffb      	ldrb	r3, [r7, #31]
 800fb00:	e000      	b.n	800fb04 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800fb02:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3720      	adds	r7, #32
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b086      	sub	sp, #24
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60b9      	str	r1, [r7, #8]
 800fb14:	607b      	str	r3, [r7, #4]
 800fb16:	4603      	mov	r3, r0
 800fb18:	73fb      	strb	r3, [r7, #15]
 800fb1a:	4613      	mov	r3, r2
 800fb1c:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d005      	beq.n	800fb30 <SecureElementProcessJoinAccept+0x24>
 800fb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d002      	beq.n	800fb30 <SecureElementProcessJoinAccept+0x24>
 800fb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d101      	bne.n	800fb34 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800fb30:	2302      	movs	r3, #2
 800fb32:	e064      	b.n	800fbfe <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800fb34:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb38:	2b21      	cmp	r3, #33	; 0x21
 800fb3a:	d901      	bls.n	800fb40 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800fb3c:	2305      	movs	r3, #5
 800fb3e:	e05e      	b.n	800fbfe <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800fb40:	2301      	movs	r3, #1
 800fb42:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800fb44:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb48:	b29b      	uxth	r3, r3
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	6879      	ldr	r1, [r7, #4]
 800fb4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb50:	f00c fb1f 	bl	801c192 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	1c58      	adds	r0, r3, #1
 800fb58:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb5c:	b29b      	uxth	r3, r3
 800fb5e:	3b01      	subs	r3, #1
 800fb60:	b299      	uxth	r1, r3
 800fb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb64:	3301      	adds	r3, #1
 800fb66:	7dfa      	ldrb	r2, [r7, #23]
 800fb68:	f7ff ff29 	bl	800f9be <SecureElementAesEncrypt>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d001      	beq.n	800fb76 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800fb72:	2307      	movs	r3, #7
 800fb74:	e043      	b.n	800fbfe <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800fb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb78:	330b      	adds	r3, #11
 800fb7a:	781b      	ldrb	r3, [r3, #0]
 800fb7c:	09db      	lsrs	r3, r3, #7
 800fb7e:	b2da      	uxtb	r2, r3
 800fb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb82:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800fb84:	2300      	movs	r3, #0
 800fb86:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800fb88:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb8c:	3b04      	subs	r3, #4
 800fb8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb90:	4413      	add	r3, r2
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800fb96:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb9a:	3b03      	subs	r3, #3
 800fb9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb9e:	4413      	add	r3, r2
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	021b      	lsls	r3, r3, #8
 800fba4:	693a      	ldr	r2, [r7, #16]
 800fba6:	4313      	orrs	r3, r2
 800fba8:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800fbaa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fbae:	3b02      	subs	r3, #2
 800fbb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbb2:	4413      	add	r3, r2
 800fbb4:	781b      	ldrb	r3, [r3, #0]
 800fbb6:	041b      	lsls	r3, r3, #16
 800fbb8:	693a      	ldr	r2, [r7, #16]
 800fbba:	4313      	orrs	r3, r2
 800fbbc:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800fbbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fbc2:	3b01      	subs	r3, #1
 800fbc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbc6:	4413      	add	r3, r2
 800fbc8:	781b      	ldrb	r3, [r3, #0]
 800fbca:	061b      	lsls	r3, r3, #24
 800fbcc:	693a      	ldr	r2, [r7, #16]
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800fbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d10e      	bne.n	800fbf8 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800fbda:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fbde:	b29b      	uxth	r3, r3
 800fbe0:	3b04      	subs	r3, #4
 800fbe2:	b299      	uxth	r1, r3
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	693a      	ldr	r2, [r7, #16]
 800fbe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbea:	f7ff feb9 	bl	800f960 <SecureElementVerifyAesCmac>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d003      	beq.n	800fbfc <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	e002      	b.n	800fbfe <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800fbf8:	2304      	movs	r3, #4
 800fbfa:	e000      	b.n	800fbfe <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800fbfc:	2300      	movs	r3, #0
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3718      	adds	r7, #24
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
	...

0800fc08 <SecureElementRandomNumber>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d101      	bne.n	800fc1a <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800fc16:	2302      	movs	r3, #2
 800fc18:	e006      	b.n	800fc28 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800fc1a:	4b05      	ldr	r3, [pc, #20]	; (800fc30 <SecureElementRandomNumber+0x28>)
 800fc1c:	695b      	ldr	r3, [r3, #20]
 800fc1e:	4798      	blx	r3
 800fc20:	4602      	mov	r2, r0
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800fc26:	2300      	movs	r3, #0
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3708      	adds	r7, #8
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	08021d00 	.word	0x08021d00

0800fc34 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d101      	bne.n	800fc46 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800fc42:	2302      	movs	r3, #2
 800fc44:	e007      	b.n	800fc56 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800fc46:	4b06      	ldr	r3, [pc, #24]	; (800fc60 <SecureElementSetDevEui+0x2c>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	2208      	movs	r2, #8
 800fc4c:	6879      	ldr	r1, [r7, #4]
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f00c fa9f 	bl	801c192 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800fc54:	2300      	movs	r3, #0
}
 800fc56:	4618      	mov	r0, r3
 800fc58:	3708      	adds	r7, #8
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}
 800fc5e:	bf00      	nop
 800fc60:	20000c80 	.word	0x20000c80

0800fc64 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800fc64:	b480      	push	{r7}
 800fc66:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800fc68:	4b02      	ldr	r3, [pc, #8]	; (800fc74 <SecureElementGetDevEui+0x10>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bc80      	pop	{r7}
 800fc72:	4770      	bx	lr
 800fc74:	20000c80 	.word	0x20000c80

0800fc78 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d101      	bne.n	800fc8a <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800fc86:	2302      	movs	r3, #2
 800fc88:	e008      	b.n	800fc9c <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800fc8a:	4b06      	ldr	r3, [pc, #24]	; (800fca4 <SecureElementSetJoinEui+0x2c>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	3308      	adds	r3, #8
 800fc90:	2208      	movs	r2, #8
 800fc92:	6879      	ldr	r1, [r7, #4]
 800fc94:	4618      	mov	r0, r3
 800fc96:	f00c fa7c 	bl	801c192 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800fc9a:	2300      	movs	r3, #0
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3708      	adds	r7, #8
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}
 800fca4:	20000c80 	.word	0x20000c80

0800fca8 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800fca8:	b480      	push	{r7}
 800fcaa:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800fcac:	4b03      	ldr	r3, [pc, #12]	; (800fcbc <SecureElementGetJoinEui+0x14>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	3308      	adds	r3, #8
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bc80      	pop	{r7}
 800fcb8:	4770      	bx	lr
 800fcba:	bf00      	nop
 800fcbc:	20000c80 	.word	0x20000c80

0800fcc0 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b082      	sub	sp, #8
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800fcca:	4a1a      	ldr	r2, [pc, #104]	; (800fd34 <LmHandlerInit+0x74>)
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800fcd0:	4b19      	ldr	r3, [pc, #100]	; (800fd38 <LmHandlerInit+0x78>)
 800fcd2:	4a1a      	ldr	r2, [pc, #104]	; (800fd3c <LmHandlerInit+0x7c>)
 800fcd4:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800fcd6:	4b18      	ldr	r3, [pc, #96]	; (800fd38 <LmHandlerInit+0x78>)
 800fcd8:	4a19      	ldr	r2, [pc, #100]	; (800fd40 <LmHandlerInit+0x80>)
 800fcda:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800fcdc:	4b16      	ldr	r3, [pc, #88]	; (800fd38 <LmHandlerInit+0x78>)
 800fcde:	4a19      	ldr	r2, [pc, #100]	; (800fd44 <LmHandlerInit+0x84>)
 800fce0:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800fce2:	4b15      	ldr	r3, [pc, #84]	; (800fd38 <LmHandlerInit+0x78>)
 800fce4:	4a18      	ldr	r2, [pc, #96]	; (800fd48 <LmHandlerInit+0x88>)
 800fce6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800fce8:	4b12      	ldr	r3, [pc, #72]	; (800fd34 <LmHandlerInit+0x74>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	4a17      	ldr	r2, [pc, #92]	; (800fd4c <LmHandlerInit+0x8c>)
 800fcf0:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800fcf2:	4b10      	ldr	r3, [pc, #64]	; (800fd34 <LmHandlerInit+0x74>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	4a14      	ldr	r2, [pc, #80]	; (800fd4c <LmHandlerInit+0x8c>)
 800fcfa:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800fcfc:	4b0d      	ldr	r3, [pc, #52]	; (800fd34 <LmHandlerInit+0x74>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	689b      	ldr	r3, [r3, #8]
 800fd02:	4a12      	ldr	r2, [pc, #72]	; (800fd4c <LmHandlerInit+0x8c>)
 800fd04:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800fd06:	4b11      	ldr	r3, [pc, #68]	; (800fd4c <LmHandlerInit+0x8c>)
 800fd08:	4a11      	ldr	r2, [pc, #68]	; (800fd50 <LmHandlerInit+0x90>)
 800fd0a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800fd0c:	4b09      	ldr	r3, [pc, #36]	; (800fd34 <LmHandlerInit+0x74>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	699b      	ldr	r3, [r3, #24]
 800fd12:	4a0e      	ldr	r2, [pc, #56]	; (800fd4c <LmHandlerInit+0x8c>)
 800fd14:	6113      	str	r3, [r2, #16]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800fd16:	490f      	ldr	r1, [pc, #60]	; (800fd54 <LmHandlerInit+0x94>)
 800fd18:	2000      	movs	r0, #0
 800fd1a:	f000 fe8f 	bl	8010a3c <LmHandlerPackageRegister>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d002      	beq.n	800fd2a <LmHandlerInit+0x6a>
    {
        return LORAMAC_HANDLER_ERROR;
 800fd24:	f04f 33ff 	mov.w	r3, #4294967295
 800fd28:	e000      	b.n	800fd2c <LmHandlerInit+0x6c>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800fd2a:	2300      	movs	r3, #0
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3708      	adds	r7, #8
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}
 800fd34:	20000cac 	.word	0x20000cac
 800fd38:	20000cb0 	.word	0x20000cb0
 800fd3c:	080105d1 	.word	0x080105d1
 800fd40:	08010639 	.word	0x08010639
 800fd44:	08010715 	.word	0x08010715
 800fd48:	0801088d 	.word	0x0801088d
 800fd4c:	20000cc0 	.word	0x20000cc0
 800fd50:	08010dd9 	.word	0x08010dd9
 800fd54:	200000b8 	.word	0x200000b8

0800fd58 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b094      	sub	sp, #80	; 0x50
 800fd5c:	af04      	add	r7, sp, #16
 800fd5e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800fd60:	2214      	movs	r2, #20
 800fd62:	6879      	ldr	r1, [r7, #4]
 800fd64:	4890      	ldr	r0, [pc, #576]	; (800ffa8 <LmHandlerConfigure+0x250>)
 800fd66:	f00f fd19 	bl	801f79c <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
 800fd6a:	4b90      	ldr	r3, [pc, #576]	; (800ffac <LmHandlerConfigure+0x254>)
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800fd70:	f7fe fb08 	bl	800e384 <LoraInfo_GetPtr>
 800fd74:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800fd76:	4b8c      	ldr	r3, [pc, #560]	; (800ffa8 <LmHandlerConfigure+0x250>)
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	461a      	mov	r2, r3
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	4093      	lsls	r3, r2
 800fd80:	461a      	mov	r2, r3
 800fd82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd84:	685b      	ldr	r3, [r3, #4]
 800fd86:	4013      	ands	r3, r2
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d106      	bne.n	800fd9a <LmHandlerConfigure+0x42>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800fd8c:	4b88      	ldr	r3, [pc, #544]	; (800ffb0 <LmHandlerConfigure+0x258>)
 800fd8e:	2201      	movs	r2, #1
 800fd90:	2100      	movs	r1, #0
 800fd92:	2000      	movs	r0, #0
 800fd94:	f010 fd52 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800fd98:	e7fe      	b.n	800fd98 <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800fd9a:	4b83      	ldr	r3, [pc, #524]	; (800ffa8 <LmHandlerConfigure+0x250>)
 800fd9c:	781b      	ldrb	r3, [r3, #0]
 800fd9e:	461a      	mov	r2, r3
 800fda0:	4984      	ldr	r1, [pc, #528]	; (800ffb4 <LmHandlerConfigure+0x25c>)
 800fda2:	4885      	ldr	r0, [pc, #532]	; (800ffb8 <LmHandlerConfigure+0x260>)
 800fda4:	f004 fcfe 	bl	80147a4 <LoRaMacInitialization>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d002      	beq.n	800fdb4 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800fdae:	f04f 33ff 	mov.w	r3, #4294967295
 800fdb2:	e0f5      	b.n	800ffa0 <LmHandlerConfigure+0x248>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800fdb4:	2326      	movs	r3, #38	; 0x26
 800fdb6:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800fdb8:	f107 0318 	add.w	r3, r7, #24
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f005 fa15 	bl	80151ec <LoRaMacMibSetRequestConfirm>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d103      	bne.n	800fdd0 <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800fdc8:	4b7c      	ldr	r3, [pc, #496]	; (800ffbc <LmHandlerConfigure+0x264>)
 800fdca:	2201      	movs	r2, #1
 800fdcc:	701a      	strb	r2, [r3, #0]
 800fdce:	e02a      	b.n	800fe26 <LmHandlerConfigure+0xce>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800fdd0:	2327      	movs	r3, #39	; 0x27
 800fdd2:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800fdd4:	4b7a      	ldr	r3, [pc, #488]	; (800ffc0 <LmHandlerConfigure+0x268>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	691b      	ldr	r3, [r3, #16]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d00c      	beq.n	800fdf8 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800fdde:	f107 0318 	add.w	r3, r7, #24
 800fde2:	4618      	mov	r0, r3
 800fde4:	f005 f87c 	bl	8014ee0 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800fde8:	4b75      	ldr	r3, [pc, #468]	; (800ffc0 <LmHandlerConfigure+0x268>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	691b      	ldr	r3, [r3, #16]
 800fdee:	69fa      	ldr	r2, [r7, #28]
 800fdf0:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 800fdf4:	4610      	mov	r0, r2
 800fdf6:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800fdf8:	2326      	movs	r3, #38	; 0x26
 800fdfa:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800fdfc:	f107 0318 	add.w	r3, r7, #24
 800fe00:	4618      	mov	r0, r3
 800fe02:	f005 f9f3 	bl	80151ec <LoRaMacMibSetRequestConfirm>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d10c      	bne.n	800fe26 <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800fe10:	f107 0318 	add.w	r3, r7, #24
 800fe14:	4618      	mov	r0, r3
 800fe16:	f005 f863 	bl	8014ee0 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800fe1a:	7f3b      	ldrb	r3, [r7, #28]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d002      	beq.n	800fe26 <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800fe20:	4b66      	ldr	r3, [pc, #408]	; (800ffbc <LmHandlerConfigure+0x264>)
 800fe22:	2201      	movs	r2, #1
 800fe24:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800fe26:	4b65      	ldr	r3, [pc, #404]	; (800ffbc <LmHandlerConfigure+0x264>)
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d02a      	beq.n	800fe84 <LmHandlerConfigure+0x12c>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800fe2e:	4b64      	ldr	r3, [pc, #400]	; (800ffc0 <LmHandlerConfigure+0x268>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	69db      	ldr	r3, [r3, #28]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d004      	beq.n	800fe42 <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800fe38:	4b61      	ldr	r3, [pc, #388]	; (800ffc0 <LmHandlerConfigure+0x268>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	69db      	ldr	r3, [r3, #28]
 800fe3e:	2000      	movs	r0, #0
 800fe40:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800fe42:	2306      	movs	r3, #6
 800fe44:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800fe46:	f107 0318 	add.w	r3, r7, #24
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f005 f848 	bl	8014ee0 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800fe50:	69fb      	ldr	r3, [r7, #28]
 800fe52:	4a5c      	ldr	r2, [pc, #368]	; (800ffc4 <LmHandlerConfigure+0x26c>)
 800fe54:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800fe56:	2326      	movs	r3, #38	; 0x26
 800fe58:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800fe5a:	f107 0318 	add.w	r3, r7, #24
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f005 f83e 	bl	8014ee0 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800fe64:	69fb      	ldr	r3, [r7, #28]
 800fe66:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800fe6a:	4b4f      	ldr	r3, [pc, #316]	; (800ffa8 <LmHandlerConfigure+0x250>)
 800fe6c:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800fe6e:	69fb      	ldr	r3, [r7, #28]
 800fe70:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800fe74:	4b4c      	ldr	r3, [pc, #304]	; (800ffa8 <LmHandlerConfigure+0x250>)
 800fe76:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800fe7e:	4b4a      	ldr	r3, [pc, #296]	; (800ffa8 <LmHandlerConfigure+0x250>)
 800fe80:	709a      	strb	r2, [r3, #2]
 800fe82:	e019      	b.n	800feb8 <LmHandlerConfigure+0x160>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800fe84:	2305      	movs	r3, #5
 800fe86:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800fe8c:	f107 0318 	add.w	r3, r7, #24
 800fe90:	4618      	mov	r0, r3
 800fe92:	f005 f9ab 	bl	80151ec <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800fe96:	4b4a      	ldr	r3, [pc, #296]	; (800ffc0 <LmHandlerConfigure+0x268>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	68db      	ldr	r3, [r3, #12]
 800fe9c:	4798      	blx	r3
 800fe9e:	4603      	mov	r3, r0
 800fea0:	4a48      	ldr	r2, [pc, #288]	; (800ffc4 <LmHandlerConfigure+0x26c>)
 800fea2:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800fea4:	2306      	movs	r3, #6
 800fea6:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800fea8:	4b46      	ldr	r3, [pc, #280]	; (800ffc4 <LmHandlerConfigure+0x26c>)
 800feaa:	695b      	ldr	r3, [r3, #20]
 800feac:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800feae:	f107 0318 	add.w	r3, r7, #24
 800feb2:	4618      	mov	r0, r3
 800feb4:	f005 f99a 	bl	80151ec <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800feb8:	2302      	movs	r3, #2
 800feba:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800febc:	f107 0318 	add.w	r3, r7, #24
 800fec0:	4618      	mov	r0, r3
 800fec2:	f005 f80d 	bl	8014ee0 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800fec6:	69fb      	ldr	r3, [r7, #28]
 800fec8:	2208      	movs	r2, #8
 800feca:	4619      	mov	r1, r3
 800fecc:	483d      	ldr	r0, [pc, #244]	; (800ffc4 <LmHandlerConfigure+0x26c>)
 800fece:	f00c f960 	bl	801c192 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800fed2:	2303      	movs	r3, #3
 800fed4:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800fed6:	f107 0318 	add.w	r3, r7, #24
 800feda:	4618      	mov	r0, r3
 800fedc:	f005 f800 	bl	8014ee0 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800fee0:	69fb      	ldr	r3, [r7, #28]
 800fee2:	2208      	movs	r2, #8
 800fee4:	4619      	mov	r1, r3
 800fee6:	4838      	ldr	r0, [pc, #224]	; (800ffc8 <LmHandlerConfigure+0x270>)
 800fee8:	f00c f953 	bl	801c192 <memcpy1>

    SecureElementPrintKeys();
 800feec:	f7ff fc1c 	bl	800f728 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800fef0:	4b36      	ldr	r3, [pc, #216]	; (800ffcc <LmHandlerConfigure+0x274>)
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	461a      	mov	r2, r3
 800fef6:	4b36      	ldr	r3, [pc, #216]	; (800ffd0 <LmHandlerConfigure+0x278>)
 800fef8:	781b      	ldrb	r3, [r3, #0]
 800fefa:	4619      	mov	r1, r3
 800fefc:	4b35      	ldr	r3, [pc, #212]	; (800ffd4 <LmHandlerConfigure+0x27c>)
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	4618      	mov	r0, r3
 800ff02:	4b35      	ldr	r3, [pc, #212]	; (800ffd8 <LmHandlerConfigure+0x280>)
 800ff04:	781b      	ldrb	r3, [r3, #0]
 800ff06:	9303      	str	r3, [sp, #12]
 800ff08:	9002      	str	r0, [sp, #8]
 800ff0a:	9101      	str	r1, [sp, #4]
 800ff0c:	9200      	str	r2, [sp, #0]
 800ff0e:	4b33      	ldr	r3, [pc, #204]	; (800ffdc <LmHandlerConfigure+0x284>)
 800ff10:	2200      	movs	r2, #0
 800ff12:	2100      	movs	r1, #0
 800ff14:	2002      	movs	r0, #2
 800ff16:	f010 fc91 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800ff1a:	230f      	movs	r3, #15
 800ff1c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800ff1e:	2301      	movs	r3, #1
 800ff20:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800ff22:	f107 0318 	add.w	r3, r7, #24
 800ff26:	4618      	mov	r0, r3
 800ff28:	f005 f960 	bl	80151ec <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800ff2c:	2310      	movs	r3, #16
 800ff2e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800ff30:	2300      	movs	r3, #0
 800ff32:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ff34:	f107 0318 	add.w	r3, r7, #24
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f005 f957 	bl	80151ec <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800ff3e:	2304      	movs	r3, #4
 800ff40:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800ff42:	4b19      	ldr	r3, [pc, #100]	; (800ffa8 <LmHandlerConfigure+0x250>)
 800ff44:	789b      	ldrb	r3, [r3, #2]
 800ff46:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ff48:	f107 0318 	add.w	r3, r7, #24
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f005 f94d 	bl	80151ec <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800ff52:	2337      	movs	r3, #55	; 0x37
 800ff54:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800ff56:	4b14      	ldr	r3, [pc, #80]	; (800ffa8 <LmHandlerConfigure+0x250>)
 800ff58:	691b      	ldr	r3, [r3, #16]
 800ff5a:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ff5c:	f107 0318 	add.w	r3, r7, #24
 800ff60:	4618      	mov	r0, r3
 800ff62:	f005 f943 	bl	80151ec <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800ff66:	230f      	movs	r3, #15
 800ff68:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800ff6a:	4b0f      	ldr	r3, [pc, #60]	; (800ffa8 <LmHandlerConfigure+0x250>)
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	f107 0210 	add.w	r2, r7, #16
 800ff72:	4611      	mov	r1, r2
 800ff74:	4618      	mov	r0, r3
 800ff76:	f009 fd61 	bl	8019a3c <RegionGetPhyParam>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	bf14      	ite	ne
 800ff84:	2301      	movne	r3, #1
 800ff86:	2300      	moveq	r3, #0
 800ff88:	b2da      	uxtb	r2, r3
 800ff8a:	4b07      	ldr	r3, [pc, #28]	; (800ffa8 <LmHandlerConfigure+0x250>)
 800ff8c:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800ff8e:	2014      	movs	r0, #20
 800ff90:	f000 fb06 	bl	80105a0 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800ff94:	4b04      	ldr	r3, [pc, #16]	; (800ffa8 <LmHandlerConfigure+0x250>)
 800ff96:	799b      	ldrb	r3, [r3, #6]
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f005 feb7 	bl	8015d0c <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800ff9e:	2300      	movs	r3, #0
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3740      	adds	r7, #64	; 0x40
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}
 800ffa8:	20000c98 	.word	0x20000c98
 800ffac:	20000cf0 	.word	0x20000cf0
 800ffb0:	08021618 	.word	0x08021618
 800ffb4:	20000cc0 	.word	0x20000cc0
 800ffb8:	20000cb0 	.word	0x20000cb0
 800ffbc:	20000dea 	.word	0x20000dea
 800ffc0:	20000cac 	.word	0x20000cac
 800ffc4:	200000a0 	.word	0x200000a0
 800ffc8:	200000a8 	.word	0x200000a8
 800ffcc:	200000b7 	.word	0x200000b7
 800ffd0:	200000b6 	.word	0x200000b6
 800ffd4:	200000b5 	.word	0x200000b5
 800ffd8:	200000b4 	.word	0x200000b4
 800ffdc:	08021664 	.word	0x08021664

0800ffe0 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800ffe4:	f002 fbb0 	bl	8012748 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800ffe8:	f000 fe2c 	bl	8010c44 <LmHandlerPackagesProcess>
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800ffec:	bf00      	nop
 800ffee:	bd80      	pop	{r7, pc}

0800fff0 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800fff0:	b480      	push	{r7}
 800fff2:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800fff4:	4b02      	ldr	r3, [pc, #8]	; (8010000 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800fff6:	681b      	ldr	r3, [r3, #0]
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bc80      	pop	{r7}
 800fffe:	4770      	bx	lr
 8010000:	20000cf4 	.word	0x20000cf4

08010004 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b090      	sub	sp, #64	; 0x40
 8010008:	af00      	add	r7, sp, #0
 801000a:	4603      	mov	r3, r0
 801000c:	460a      	mov	r2, r1
 801000e:	71fb      	strb	r3, [r7, #7]
 8010010:	4613      	mov	r3, r2
 8010012:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 8010014:	2301      	movs	r3, #1
 8010016:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 801001a:	4b35      	ldr	r3, [pc, #212]	; (80100f0 <LmHandlerJoin+0xec>)
 801001c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010020:	b2db      	uxtb	r3, r3
 8010022:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 8010026:	79fb      	ldrb	r3, [r7, #7]
 8010028:	2b02      	cmp	r3, #2
 801002a:	d110      	bne.n	801004e <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 801002c:	2302      	movs	r3, #2
 801002e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8010032:	4b30      	ldr	r3, [pc, #192]	; (80100f4 <LmHandlerJoin+0xf0>)
 8010034:	2202      	movs	r2, #2
 8010036:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8010038:	4a2e      	ldr	r2, [pc, #184]	; (80100f4 <LmHandlerJoin+0xf0>)
 801003a:	79bb      	ldrb	r3, [r7, #6]
 801003c:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 801003e:	f004 fe65 	bl	8014d0c <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 8010042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010046:	4618      	mov	r0, r3
 8010048:	f005 fc2a 	bl	80158a0 <LoRaMacMlmeRequest>
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 801004c:	e04b      	b.n	80100e6 <LmHandlerJoin+0xe2>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 801004e:	2301      	movs	r3, #1
 8010050:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8010054:	4b27      	ldr	r3, [pc, #156]	; (80100f4 <LmHandlerJoin+0xf0>)
 8010056:	2201      	movs	r2, #1
 8010058:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 801005a:	4b25      	ldr	r3, [pc, #148]	; (80100f0 <LmHandlerJoin+0xec>)
 801005c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8010060:	4b24      	ldr	r3, [pc, #144]	; (80100f4 <LmHandlerJoin+0xf0>)
 8010062:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8010064:	4b23      	ldr	r3, [pc, #140]	; (80100f4 <LmHandlerJoin+0xf0>)
 8010066:	2200      	movs	r2, #0
 8010068:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 801006a:	4a22      	ldr	r2, [pc, #136]	; (80100f4 <LmHandlerJoin+0xf0>)
 801006c:	79bb      	ldrb	r3, [r7, #6]
 801006e:	71d3      	strb	r3, [r2, #7]
        if (CtxRestoreDone == false)
 8010070:	4b21      	ldr	r3, [pc, #132]	; (80100f8 <LmHandlerJoin+0xf4>)
 8010072:	781b      	ldrb	r3, [r3, #0]
 8010074:	f083 0301 	eor.w	r3, r3, #1
 8010078:	b2db      	uxtb	r3, r3
 801007a:	2b00      	cmp	r3, #0
 801007c:	d01e      	beq.n	80100bc <LmHandlerJoin+0xb8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 801007e:	231e      	movs	r3, #30
 8010080:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8010082:	4b1b      	ldr	r3, [pc, #108]	; (80100f0 <LmHandlerJoin+0xec>)
 8010084:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010088:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 801008a:	f107 0308 	add.w	r3, r7, #8
 801008e:	4618      	mov	r0, r3
 8010090:	f005 f8ac 	bl	80151ec <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8010094:	231f      	movs	r3, #31
 8010096:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8010098:	4b15      	ldr	r3, [pc, #84]	; (80100f0 <LmHandlerJoin+0xec>)
 801009a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801009e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80100a0:	f107 0308 	add.w	r3, r7, #8
 80100a4:	4618      	mov	r0, r3
 80100a6:	f005 f8a1 	bl	80151ec <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80100aa:	2328      	movs	r3, #40	; 0x28
 80100ac:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80100ae:	4b13      	ldr	r3, [pc, #76]	; (80100fc <LmHandlerJoin+0xf8>)
 80100b0:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 80100b2:	f107 0308 	add.w	r3, r7, #8
 80100b6:	4618      	mov	r0, r3
 80100b8:	f005 f898 	bl	80151ec <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 80100bc:	f004 fe26 	bl	8014d0c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 80100c0:	2301      	movs	r3, #1
 80100c2:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80100c4:	2301      	movs	r3, #1
 80100c6:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80100c8:	f107 0308 	add.w	r3, r7, #8
 80100cc:	4618      	mov	r0, r3
 80100ce:	f005 f88d 	bl	80151ec <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80100d2:	4b0b      	ldr	r3, [pc, #44]	; (8010100 <LmHandlerJoin+0xfc>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d8:	4806      	ldr	r0, [pc, #24]	; (80100f4 <LmHandlerJoin+0xf0>)
 80100da:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80100dc:	4b04      	ldr	r3, [pc, #16]	; (80100f0 <LmHandlerJoin+0xec>)
 80100de:	785b      	ldrb	r3, [r3, #1]
 80100e0:	4618      	mov	r0, r3
 80100e2:	f000 f97b 	bl	80103dc <LmHandlerRequestClass>
}
 80100e6:	bf00      	nop
 80100e8:	3740      	adds	r7, #64	; 0x40
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}
 80100ee:	bf00      	nop
 80100f0:	20000c98 	.word	0x20000c98
 80100f4:	200000c4 	.word	0x200000c4
 80100f8:	20000dea 	.word	0x20000dea
 80100fc:	01000300 	.word	0x01000300
 8010100:	20000cac 	.word	0x20000cac

08010104 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b08a      	sub	sp, #40	; 0x28
 8010108:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 801010a:	2301      	movs	r3, #1
 801010c:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 801010e:	463b      	mov	r3, r7
 8010110:	4618      	mov	r0, r3
 8010112:	f004 fee5 	bl	8014ee0 <LoRaMacMibGetRequestConfirm>
 8010116:	4603      	mov	r3, r0
 8010118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 801011c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010120:	2b00      	cmp	r3, #0
 8010122:	d106      	bne.n	8010132 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010124:	793b      	ldrb	r3, [r7, #4]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d101      	bne.n	801012e <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 801012a:	2300      	movs	r3, #0
 801012c:	e002      	b.n	8010134 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 801012e:	2301      	movs	r3, #1
 8010130:	e000      	b.n	8010134 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 8010132:	2300      	movs	r3, #0
    }
}
 8010134:	4618      	mov	r0, r3
 8010136:	3728      	adds	r7, #40	; 0x28
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}

0801013c <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b08a      	sub	sp, #40	; 0x28
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	460b      	mov	r3, r1
 8010146:	70fb      	strb	r3, [r7, #3]
 8010148:	4613      	mov	r3, r2
 801014a:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 801014c:	23ff      	movs	r3, #255	; 0xff
 801014e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 8010152:	f002 f887 	bl	8012264 <LoRaMacIsBusy>
 8010156:	4603      	mov	r3, r0
 8010158:	2b00      	cmp	r3, #0
 801015a:	d002      	beq.n	8010162 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 801015c:	f06f 0301 	mvn.w	r3, #1
 8010160:	e0b6      	b.n	80102d0 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8010162:	f7ff ffcf 	bl	8010104 <LmHandlerJoinStatus>
 8010166:	4603      	mov	r3, r0
 8010168:	2b01      	cmp	r3, #1
 801016a:	d00a      	beq.n	8010182 <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 801016c:	4b5a      	ldr	r3, [pc, #360]	; (80102d8 <LmHandlerSend+0x19c>)
 801016e:	799b      	ldrb	r3, [r3, #6]
 8010170:	4a59      	ldr	r2, [pc, #356]	; (80102d8 <LmHandlerSend+0x19c>)
 8010172:	79d2      	ldrb	r2, [r2, #7]
 8010174:	4611      	mov	r1, r2
 8010176:	4618      	mov	r0, r3
 8010178:	f7ff ff44 	bl	8010004 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 801017c:	f06f 0302 	mvn.w	r3, #2
 8010180:	e0a6      	b.n	80102d0 <LmHandlerSend+0x194>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8010182:	4b56      	ldr	r3, [pc, #344]	; (80102dc <LmHandlerSend+0x1a0>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	68db      	ldr	r3, [r3, #12]
 8010188:	4798      	blx	r3
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d00d      	beq.n	80101ac <LmHandlerSend+0x70>
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	781a      	ldrb	r2, [r3, #0]
 8010194:	4b51      	ldr	r3, [pc, #324]	; (80102dc <LmHandlerSend+0x1a0>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	781b      	ldrb	r3, [r3, #0]
 801019a:	429a      	cmp	r2, r3
 801019c:	d006      	beq.n	80101ac <LmHandlerSend+0x70>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	781b      	ldrb	r3, [r3, #0]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d002      	beq.n	80101ac <LmHandlerSend+0x70>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 80101a6:	f06f 0303 	mvn.w	r3, #3
 80101aa:	e091      	b.n	80102d0 <LmHandlerSend+0x194>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 80101ac:	4a4c      	ldr	r2, [pc, #304]	; (80102e0 <LmHandlerSend+0x1a4>)
 80101ae:	78fb      	ldrb	r3, [r7, #3]
 80101b0:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 80101b2:	78fb      	ldrb	r3, [r7, #3]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	bf14      	ite	ne
 80101b8:	2301      	movne	r3, #1
 80101ba:	2300      	moveq	r3, #0
 80101bc:	b2db      	uxtb	r3, r3
 80101be:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80101c0:	4b48      	ldr	r3, [pc, #288]	; (80102e4 <LmHandlerSend+0x1a8>)
 80101c2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80101c6:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	785b      	ldrb	r3, [r3, #1]
 80101cc:	f107 020c 	add.w	r2, r7, #12
 80101d0:	4611      	mov	r1, r2
 80101d2:	4618      	mov	r0, r3
 80101d4:	f004 fdfc 	bl	8014dd0 <LoRaMacQueryTxPossible>
 80101d8:	4603      	mov	r3, r0
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d009      	beq.n	80101f2 <LmHandlerSend+0xb6>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 80101de:	2300      	movs	r3, #0
 80101e0:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80101e2:	2300      	movs	r3, #0
 80101e4:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80101e6:	2300      	movs	r3, #0
 80101e8:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 80101ea:	23f9      	movs	r3, #249	; 0xf9
 80101ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80101f0:	e009      	b.n	8010206 <LmHandlerSend+0xca>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	781b      	ldrb	r3, [r3, #0]
 80101f6:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	785b      	ldrb	r3, [r3, #1]
 80101fc:	b29b      	uxth	r3, r3
 80101fe:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	685b      	ldr	r3, [r3, #4]
 8010204:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 8010206:	4b36      	ldr	r3, [pc, #216]	; (80102e0 <LmHandlerSend+0x1a4>)
 8010208:	687a      	ldr	r2, [r7, #4]
 801020a:	3310      	adds	r3, #16
 801020c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010210:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8010214:	4b33      	ldr	r3, [pc, #204]	; (80102e4 <LmHandlerSend+0x1a8>)
 8010216:	f993 2004 	ldrsb.w	r2, [r3, #4]
 801021a:	4b31      	ldr	r3, [pc, #196]	; (80102e0 <LmHandlerSend+0x1a4>)
 801021c:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 801021e:	78ba      	ldrb	r2, [r7, #2]
 8010220:	f107 0310 	add.w	r3, r7, #16
 8010224:	4611      	mov	r1, r2
 8010226:	4618      	mov	r0, r3
 8010228:	f005 fc7a 	bl	8015b20 <LoRaMacMcpsRequest>
 801022c:	4603      	mov	r3, r0
 801022e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8010232:	6a3b      	ldr	r3, [r7, #32]
 8010234:	4a2c      	ldr	r2, [pc, #176]	; (80102e8 <LmHandlerSend+0x1ac>)
 8010236:	6013      	str	r3, [r2, #0]

    switch (status)
 8010238:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801023c:	2b11      	cmp	r3, #17
 801023e:	d840      	bhi.n	80102c2 <LmHandlerSend+0x186>
 8010240:	a201      	add	r2, pc, #4	; (adr r2, 8010248 <LmHandlerSend+0x10c>)
 8010242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010246:	bf00      	nop
 8010248:	08010291 	.word	0x08010291
 801024c:	080102a3 	.word	0x080102a3
 8010250:	080102c3 	.word	0x080102c3
 8010254:	080102c3 	.word	0x080102c3
 8010258:	080102c3 	.word	0x080102c3
 801025c:	080102c3 	.word	0x080102c3
 8010260:	080102c3 	.word	0x080102c3
 8010264:	080102ab 	.word	0x080102ab
 8010268:	080102c3 	.word	0x080102c3
 801026c:	080102c3 	.word	0x080102c3
 8010270:	080102c3 	.word	0x080102c3
 8010274:	080102bb 	.word	0x080102bb
 8010278:	080102c3 	.word	0x080102c3
 801027c:	080102c3 	.word	0x080102c3
 8010280:	080102a3 	.word	0x080102a3
 8010284:	080102a3 	.word	0x080102a3
 8010288:	080102a3 	.word	0x080102a3
 801028c:	080102b3 	.word	0x080102b3
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 8010290:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010294:	f113 0f07 	cmn.w	r3, #7
 8010298:	d017      	beq.n	80102ca <LmHandlerSend+0x18e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 801029a:	2300      	movs	r3, #0
 801029c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 80102a0:	e013      	b.n	80102ca <LmHandlerSend+0x18e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 80102a2:	23fe      	movs	r3, #254	; 0xfe
 80102a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80102a8:	e010      	b.n	80102cc <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80102aa:	23fd      	movs	r3, #253	; 0xfd
 80102ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80102b0:	e00c      	b.n	80102cc <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80102b2:	23fb      	movs	r3, #251	; 0xfb
 80102b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80102b8:	e008      	b.n	80102cc <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 80102ba:	23fa      	movs	r3, #250	; 0xfa
 80102bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80102c0:	e004      	b.n	80102cc <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80102c2:	23ff      	movs	r3, #255	; 0xff
 80102c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80102c8:	e000      	b.n	80102cc <LmHandlerSend+0x190>
            break;
 80102ca:	bf00      	nop
    }

    return lmhStatus;
 80102cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80102d0:	4618      	mov	r0, r3
 80102d2:	3728      	adds	r7, #40	; 0x28
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}
 80102d8:	200000c4 	.word	0x200000c4
 80102dc:	20000c84 	.word	0x20000c84
 80102e0:	200000cc 	.word	0x200000cc
 80102e4:	20000c98 	.word	0x20000c98
 80102e8:	20000cf4 	.word	0x20000cf4

080102ec <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b086      	sub	sp, #24
 80102f0:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 80102f2:	230a      	movs	r3, #10
 80102f4:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 80102f6:	463b      	mov	r3, r7
 80102f8:	4618      	mov	r0, r3
 80102fa:	f005 fad1 	bl	80158a0 <LoRaMacMlmeRequest>
 80102fe:	4603      	mov	r3, r0
 8010300:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8010302:	693b      	ldr	r3, [r7, #16]
 8010304:	4a06      	ldr	r2, [pc, #24]	; (8010320 <LmHandlerDeviceTimeReq+0x34>)
 8010306:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 8010308:	7dfb      	ldrb	r3, [r7, #23]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d101      	bne.n	8010312 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 801030e:	2300      	movs	r3, #0
 8010310:	e001      	b.n	8010316 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8010312:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8010316:	4618      	mov	r0, r3
 8010318:	3718      	adds	r7, #24
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
 801031e:	bf00      	nop
 8010320:	20000cf4 	.word	0x20000cf4

08010324 <LmHandlerBeaconReq>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static LmHandlerErrorStatus_t LmHandlerBeaconReq( void )
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b086      	sub	sp, #24
 8010328:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_BEACON_ACQUISITION;
 801032a:	230c      	movs	r3, #12
 801032c:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 801032e:	463b      	mov	r3, r7
 8010330:	4618      	mov	r0, r3
 8010332:	f005 fab5 	bl	80158a0 <LoRaMacMlmeRequest>
 8010336:	4603      	mov	r3, r0
 8010338:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 801033a:	693b      	ldr	r3, [r7, #16]
 801033c:	4a06      	ldr	r2, [pc, #24]	; (8010358 <LmHandlerBeaconReq+0x34>)
 801033e:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 8010340:	7dfb      	ldrb	r3, [r7, #23]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d101      	bne.n	801034a <LmHandlerBeaconReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010346:	2300      	movs	r3, #0
 8010348:	e001      	b.n	801034e <LmHandlerBeaconReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 801034a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 801034e:	4618      	mov	r0, r3
 8010350:	3718      	adds	r7, #24
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop
 8010358:	20000cf4 	.word	0x20000cf4

0801035c <LmHandlerPingSlotReq>:
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b08a      	sub	sp, #40	; 0x28
 8010360:	af00      	add	r7, sp, #0
 8010362:	4603      	mov	r3, r0
 8010364:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_PING_SLOT_INFO;
 8010366:	230d      	movs	r3, #13
 8010368:	743b      	strb	r3, [r7, #16]
    mlmeReq.Req.PingSlotInfo.PingSlot.Fields.Periodicity = periodicity;
 801036a:	79fb      	ldrb	r3, [r7, #7]
 801036c:	f003 0307 	and.w	r3, r3, #7
 8010370:	b2da      	uxtb	r2, r3
 8010372:	7d3b      	ldrb	r3, [r7, #20]
 8010374:	f362 0302 	bfi	r3, r2, #0, #3
 8010378:	753b      	strb	r3, [r7, #20]
    mlmeReq.Req.PingSlotInfo.PingSlot.Fields.RFU = 0;
 801037a:	7d3b      	ldrb	r3, [r7, #20]
 801037c:	f36f 03c7 	bfc	r3, #3, #5
 8010380:	753b      	strb	r3, [r7, #20]

    status = LoRaMacMlmeRequest( &mlmeReq );
 8010382:	f107 0310 	add.w	r3, r7, #16
 8010386:	4618      	mov	r0, r3
 8010388:	f005 fa8a 	bl	80158a0 <LoRaMacMlmeRequest>
 801038c:	4603      	mov	r3, r0
 801038e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8010392:	6a3b      	ldr	r3, [r7, #32]
 8010394:	4a0f      	ldr	r2, [pc, #60]	; (80103d4 <LmHandlerPingSlotReq+0x78>)
 8010396:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 8010398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801039c:	2b00      	cmp	r3, #0
 801039e:	d112      	bne.n	80103c6 <LmHandlerPingSlotReq+0x6a>
    {
        LmHandlerParams.PingSlotPeriodicity = periodicity;
 80103a0:	4a0d      	ldr	r2, [pc, #52]	; (80103d8 <LmHandlerPingSlotReq+0x7c>)
 80103a2:	79fb      	ldrb	r3, [r7, #7]
 80103a4:	7313      	strb	r3, [r2, #12]
        // Send an empty message
        LmHandlerAppData_t appData =
 80103a6:	2300      	movs	r3, #0
 80103a8:	723b      	strb	r3, [r7, #8]
 80103aa:	2300      	movs	r3, #0
 80103ac:	727b      	strb	r3, [r7, #9]
 80103ae:	2300      	movs	r3, #0
 80103b0:	60fb      	str	r3, [r7, #12]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
 80103b2:	4b09      	ldr	r3, [pc, #36]	; (80103d8 <LmHandlerPingSlotReq+0x7c>)
 80103b4:	78d9      	ldrb	r1, [r3, #3]
 80103b6:	f107 0308 	add.w	r3, r7, #8
 80103ba:	2200      	movs	r2, #0
 80103bc:	4618      	mov	r0, r3
 80103be:	f7ff febd 	bl	801013c <LmHandlerSend>
 80103c2:	4603      	mov	r3, r0
 80103c4:	e001      	b.n	80103ca <LmHandlerPingSlotReq+0x6e>
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 80103c6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3728      	adds	r7, #40	; 0x28
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}
 80103d2:	bf00      	nop
 80103d4:	20000cf4 	.word	0x20000cf4
 80103d8:	20000c98 	.word	0x20000c98

080103dc <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b08c      	sub	sp, #48	; 0x30
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	4603      	mov	r3, r0
 80103e4:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80103e6:	2300      	movs	r3, #0
 80103e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 80103ec:	f001 ff3a 	bl	8012264 <LoRaMacIsBusy>
 80103f0:	4603      	mov	r3, r0
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d002      	beq.n	80103fc <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 80103f6:	f06f 0301 	mvn.w	r3, #1
 80103fa:	e080      	b.n	80104fe <LmHandlerRequestClass+0x122>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80103fc:	f7ff fe82 	bl	8010104 <LmHandlerJoinStatus>
 8010400:	4603      	mov	r3, r0
 8010402:	2b01      	cmp	r3, #1
 8010404:	d002      	beq.n	801040c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010406:	f06f 0302 	mvn.w	r3, #2
 801040a:	e078      	b.n	80104fe <LmHandlerRequestClass+0x122>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 801040c:	2300      	movs	r3, #0
 801040e:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8010410:	f107 0308 	add.w	r3, r7, #8
 8010414:	4618      	mov	r0, r3
 8010416:	f004 fd63 	bl	8014ee0 <LoRaMacMibGetRequestConfirm>
 801041a:	4603      	mov	r3, r0
 801041c:	2b00      	cmp	r3, #0
 801041e:	d002      	beq.n	8010426 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 8010420:	f04f 33ff 	mov.w	r3, #4294967295
 8010424:	e06b      	b.n	80104fe <LmHandlerRequestClass+0x122>
    }
    currentClass = mibReq.Param.Class;
 8010426:	7b3b      	ldrb	r3, [r7, #12]
 8010428:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 801042c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8010430:	79fb      	ldrb	r3, [r7, #7]
 8010432:	429a      	cmp	r2, r3
 8010434:	d05a      	beq.n	80104ec <LmHandlerRequestClass+0x110>
    {
        switch( newClass )
 8010436:	79fb      	ldrb	r3, [r7, #7]
 8010438:	2b02      	cmp	r3, #2
 801043a:	d035      	beq.n	80104a8 <LmHandlerRequestClass+0xcc>
 801043c:	2b02      	cmp	r3, #2
 801043e:	dc57      	bgt.n	80104f0 <LmHandlerRequestClass+0x114>
 8010440:	2b00      	cmp	r3, #0
 8010442:	d002      	beq.n	801044a <LmHandlerRequestClass+0x6e>
 8010444:	2b01      	cmp	r3, #1
 8010446:	d01e      	beq.n	8010486 <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 8010448:	e052      	b.n	80104f0 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 801044a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801044e:	2b00      	cmp	r3, #0
 8010450:	d050      	beq.n	80104f4 <LmHandlerRequestClass+0x118>
                    mibReq.Param.Class = newClass;
 8010452:	79fb      	ldrb	r3, [r7, #7]
 8010454:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8010456:	f107 0308 	add.w	r3, r7, #8
 801045a:	4618      	mov	r0, r3
 801045c:	f004 fec6 	bl	80151ec <LoRaMacMibSetRequestConfirm>
 8010460:	4603      	mov	r3, r0
 8010462:	2b00      	cmp	r3, #0
 8010464:	d10b      	bne.n	801047e <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8010466:	4b28      	ldr	r3, [pc, #160]	; (8010508 <LmHandlerRequestClass+0x12c>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801046c:	2b00      	cmp	r3, #0
 801046e:	d041      	beq.n	80104f4 <LmHandlerRequestClass+0x118>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8010470:	4b25      	ldr	r3, [pc, #148]	; (8010508 <LmHandlerRequestClass+0x12c>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010476:	79fa      	ldrb	r2, [r7, #7]
 8010478:	4610      	mov	r0, r2
 801047a:	4798      	blx	r3
            break;
 801047c:	e03a      	b.n	80104f4 <LmHandlerRequestClass+0x118>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 801047e:	23ff      	movs	r3, #255	; 0xff
 8010480:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8010484:	e036      	b.n	80104f4 <LmHandlerRequestClass+0x118>
                if( currentClass != CLASS_A )
 8010486:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801048a:	2b00      	cmp	r3, #0
 801048c:	d003      	beq.n	8010496 <LmHandlerRequestClass+0xba>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 801048e:	23ff      	movs	r3, #255	; 0xff
 8010490:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8010494:	e031      	b.n	80104fa <LmHandlerRequestClass+0x11e>
                    errorStatus = LmHandlerDeviceTimeReq( );
 8010496:	f7ff ff29 	bl	80102ec <LmHandlerDeviceTimeReq>
 801049a:	4603      	mov	r3, r0
 801049c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    IsClassBSwitchPending = true;
 80104a0:	4b1a      	ldr	r3, [pc, #104]	; (801050c <LmHandlerRequestClass+0x130>)
 80104a2:	2201      	movs	r2, #1
 80104a4:	701a      	strb	r2, [r3, #0]
            break;
 80104a6:	e028      	b.n	80104fa <LmHandlerRequestClass+0x11e>
                if( currentClass != CLASS_A )
 80104a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d003      	beq.n	80104b8 <LmHandlerRequestClass+0xdc>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 80104b0:	23ff      	movs	r3, #255	; 0xff
 80104b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 80104b6:	e01f      	b.n	80104f8 <LmHandlerRequestClass+0x11c>
                    mibReq.Param.Class = newClass;
 80104b8:	79fb      	ldrb	r3, [r7, #7]
 80104ba:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 80104bc:	f107 0308 	add.w	r3, r7, #8
 80104c0:	4618      	mov	r0, r3
 80104c2:	f004 fe93 	bl	80151ec <LoRaMacMibSetRequestConfirm>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d10b      	bne.n	80104e4 <LmHandlerRequestClass+0x108>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80104cc:	4b0e      	ldr	r3, [pc, #56]	; (8010508 <LmHandlerRequestClass+0x12c>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d010      	beq.n	80104f8 <LmHandlerRequestClass+0x11c>
                            LmHandlerCallbacks->OnClassChange( newClass );
 80104d6:	4b0c      	ldr	r3, [pc, #48]	; (8010508 <LmHandlerRequestClass+0x12c>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104dc:	79fa      	ldrb	r2, [r7, #7]
 80104de:	4610      	mov	r0, r2
 80104e0:	4798      	blx	r3
            break;
 80104e2:	e009      	b.n	80104f8 <LmHandlerRequestClass+0x11c>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80104e4:	23ff      	movs	r3, #255	; 0xff
 80104e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 80104ea:	e005      	b.n	80104f8 <LmHandlerRequestClass+0x11c>
        }
    }
 80104ec:	bf00      	nop
 80104ee:	e004      	b.n	80104fa <LmHandlerRequestClass+0x11e>
            break;
 80104f0:	bf00      	nop
 80104f2:	e002      	b.n	80104fa <LmHandlerRequestClass+0x11e>
            break;
 80104f4:	bf00      	nop
 80104f6:	e000      	b.n	80104fa <LmHandlerRequestClass+0x11e>
            break;
 80104f8:	bf00      	nop
    return errorStatus;
 80104fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3730      	adds	r7, #48	; 0x30
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}
 8010506:	bf00      	nop
 8010508:	20000cac 	.word	0x20000cac
 801050c:	20000cf0 	.word	0x20000cf0

08010510 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b08c      	sub	sp, #48	; 0x30
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d102      	bne.n	8010524 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 801051e:	f04f 33ff 	mov.w	r3, #4294967295
 8010522:	e010      	b.n	8010546 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8010524:	2300      	movs	r3, #0
 8010526:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8010528:	f107 030c 	add.w	r3, r7, #12
 801052c:	4618      	mov	r0, r3
 801052e:	f004 fcd7 	bl	8014ee0 <LoRaMacMibGetRequestConfirm>
 8010532:	4603      	mov	r3, r0
 8010534:	2b00      	cmp	r3, #0
 8010536:	d002      	beq.n	801053e <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010538:	f04f 33ff 	mov.w	r3, #4294967295
 801053c:	e003      	b.n	8010546 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 801053e:	7c3a      	ldrb	r2, [r7, #16]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8010544:	2300      	movs	r3, #0
}
 8010546:	4618      	mov	r0, r3
 8010548:	3730      	adds	r7, #48	; 0x30
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}
	...

08010550 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b08c      	sub	sp, #48	; 0x30
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d102      	bne.n	8010564 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 801055e:	f04f 33ff 	mov.w	r3, #4294967295
 8010562:	e016      	b.n	8010592 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 8010564:	231f      	movs	r3, #31
 8010566:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8010568:	f107 030c 	add.w	r3, r7, #12
 801056c:	4618      	mov	r0, r3
 801056e:	f004 fcb7 	bl	8014ee0 <LoRaMacMibGetRequestConfirm>
 8010572:	4603      	mov	r3, r0
 8010574:	2b00      	cmp	r3, #0
 8010576:	d002      	beq.n	801057e <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010578:	f04f 33ff 	mov.w	r3, #4294967295
 801057c:	e009      	b.n	8010592 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 801057e:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f993 2000 	ldrsb.w	r2, [r3]
 801058c:	4b03      	ldr	r3, [pc, #12]	; (801059c <LmHandlerGetTxDatarate+0x4c>)
 801058e:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 8010590:	2300      	movs	r3, #0
}
 8010592:	4618      	mov	r0, r3
 8010594:	3730      	adds	r7, #48	; 0x30
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
 801059a:	bf00      	nop
 801059c:	20000c98 	.word	0x20000c98

080105a0 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b08c      	sub	sp, #48	; 0x30
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 80105a8:	2322      	movs	r3, #34	; 0x22
 80105aa:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80105b0:	f107 030c 	add.w	r3, r7, #12
 80105b4:	4618      	mov	r0, r3
 80105b6:	f004 fe19 	bl	80151ec <LoRaMacMibSetRequestConfirm>
 80105ba:	4603      	mov	r3, r0
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d002      	beq.n	80105c6 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 80105c0:	f04f 33ff 	mov.w	r3, #4294967295
 80105c4:	e000      	b.n	80105c8 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 80105c6:	2300      	movs	r3, #0
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3730      	adds	r7, #48	; 0x30
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b082      	sub	sp, #8
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 80105d8:	4b15      	ldr	r3, [pc, #84]	; (8010630 <McpsConfirm+0x60>)
 80105da:	2201      	movs	r2, #1
 80105dc:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	785a      	ldrb	r2, [r3, #1]
 80105e2:	4b13      	ldr	r3, [pc, #76]	; (8010630 <McpsConfirm+0x60>)
 80105e4:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	789b      	ldrb	r3, [r3, #2]
 80105ea:	b25a      	sxtb	r2, r3
 80105ec:	4b10      	ldr	r3, [pc, #64]	; (8010630 <McpsConfirm+0x60>)
 80105ee:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	68db      	ldr	r3, [r3, #12]
 80105f4:	4a0e      	ldr	r2, [pc, #56]	; (8010630 <McpsConfirm+0x60>)
 80105f6:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f993 2003 	ldrsb.w	r2, [r3, #3]
 80105fe:	4b0c      	ldr	r3, [pc, #48]	; (8010630 <McpsConfirm+0x60>)
 8010600:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	691b      	ldr	r3, [r3, #16]
 8010606:	b2da      	uxtb	r2, r3
 8010608:	4b09      	ldr	r3, [pc, #36]	; (8010630 <McpsConfirm+0x60>)
 801060a:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	791b      	ldrb	r3, [r3, #4]
 8010610:	461a      	mov	r2, r3
 8010612:	4b07      	ldr	r3, [pc, #28]	; (8010630 <McpsConfirm+0x60>)
 8010614:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 8010616:	4b07      	ldr	r3, [pc, #28]	; (8010634 <McpsConfirm+0x64>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801061c:	4804      	ldr	r0, [pc, #16]	; (8010630 <McpsConfirm+0x60>)
 801061e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8010620:	6879      	ldr	r1, [r7, #4]
 8010622:	2000      	movs	r0, #0
 8010624:	f000 fa7a 	bl	8010b1c <LmHandlerPackagesNotify>
}
 8010628:	bf00      	nop
 801062a:	3708      	adds	r7, #8
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}
 8010630:	200000cc 	.word	0x200000cc
 8010634:	20000cac 	.word	0x20000cac

08010638 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b088      	sub	sp, #32
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
 8010640:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 8010642:	2300      	movs	r3, #0
 8010644:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 8010646:	4b31      	ldr	r3, [pc, #196]	; (801070c <McpsIndication+0xd4>)
 8010648:	2201      	movs	r2, #1
 801064a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	785a      	ldrb	r2, [r3, #1]
 8010650:	4b2e      	ldr	r3, [pc, #184]	; (801070c <McpsIndication+0xd4>)
 8010652:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8010654:	4b2d      	ldr	r3, [pc, #180]	; (801070c <McpsIndication+0xd4>)
 8010656:	785b      	ldrb	r3, [r3, #1]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d153      	bne.n	8010704 <McpsIndication+0xcc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	791b      	ldrb	r3, [r3, #4]
 8010660:	b25a      	sxtb	r2, r3
 8010662:	4b2a      	ldr	r3, [pc, #168]	; (801070c <McpsIndication+0xd4>)
 8010664:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	f9b3 3000 	ldrsh.w	r3, [r3]
 801066c:	b25a      	sxtb	r2, r3
 801066e:	4b27      	ldr	r3, [pc, #156]	; (801070c <McpsIndication+0xd4>)
 8010670:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8010678:	4b24      	ldr	r3, [pc, #144]	; (801070c <McpsIndication+0xd4>)
 801067a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	78da      	ldrb	r2, [r3, #3]
 8010680:	4b22      	ldr	r3, [pc, #136]	; (801070c <McpsIndication+0xd4>)
 8010682:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	691b      	ldr	r3, [r3, #16]
 8010688:	4a20      	ldr	r2, [pc, #128]	; (801070c <McpsIndication+0xd4>)
 801068a:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	78db      	ldrb	r3, [r3, #3]
 8010690:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	7b1b      	ldrb	r3, [r3, #12]
 8010696:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	689b      	ldr	r3, [r3, #8]
 801069c:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 801069e:	4b1c      	ldr	r3, [pc, #112]	; (8010710 <McpsIndication+0xd8>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106a4:	f107 0218 	add.w	r2, r7, #24
 80106a8:	4918      	ldr	r1, [pc, #96]	; (801070c <McpsIndication+0xd4>)
 80106aa:	4610      	mov	r0, r2
 80106ac:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 80106ae:	4b18      	ldr	r3, [pc, #96]	; (8010710 <McpsIndication+0xd8>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d007      	beq.n	80106c8 <McpsIndication+0x90>
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	7e1b      	ldrb	r3, [r3, #24]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d003      	beq.n	80106c8 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 80106c0:	4b13      	ldr	r3, [pc, #76]	; (8010710 <McpsIndication+0xd8>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106c6:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 80106c8:	6879      	ldr	r1, [r7, #4]
 80106ca:	2001      	movs	r0, #1
 80106cc:	f000 fa26 	bl	8010b1c <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 80106d0:	f107 0317 	add.w	r3, r7, #23
 80106d4:	4618      	mov	r0, r3
 80106d6:	f7ff ff1b 	bl	8010510 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	795b      	ldrb	r3, [r3, #5]
 80106de:	2b01      	cmp	r3, #1
 80106e0:	d111      	bne.n	8010706 <McpsIndication+0xce>
 80106e2:	7dfb      	ldrb	r3, [r7, #23]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d10e      	bne.n	8010706 <McpsIndication+0xce>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 80106e8:	2300      	movs	r3, #0
 80106ea:	733b      	strb	r3, [r7, #12]
 80106ec:	2300      	movs	r3, #0
 80106ee:	737b      	strb	r3, [r7, #13]
 80106f0:	2300      	movs	r3, #0
 80106f2:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 80106f4:	f107 030c 	add.w	r3, r7, #12
 80106f8:	2201      	movs	r2, #1
 80106fa:	2100      	movs	r1, #0
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7ff fd1d 	bl	801013c <LmHandlerSend>
 8010702:	e000      	b.n	8010706 <McpsIndication+0xce>
        return;
 8010704:	bf00      	nop
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 8010706:	3720      	adds	r7, #32
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}
 801070c:	200000e8 	.word	0x200000e8
 8010710:	20000cac 	.word	0x20000cac

08010714 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b08c      	sub	sp, #48	; 0x30
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 801071c:	4b53      	ldr	r3, [pc, #332]	; (801086c <MlmeConfirm+0x158>)
 801071e:	2200      	movs	r2, #0
 8010720:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	785a      	ldrb	r2, [r3, #1]
 8010726:	4b51      	ldr	r3, [pc, #324]	; (801086c <MlmeConfirm+0x158>)
 8010728:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 801072a:	4b51      	ldr	r3, [pc, #324]	; (8010870 <MlmeConfirm+0x15c>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010730:	484e      	ldr	r0, [pc, #312]	; (801086c <MlmeConfirm+0x158>)
 8010732:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8010734:	6879      	ldr	r1, [r7, #4]
 8010736:	2002      	movs	r0, #2
 8010738:	f000 f9f0 	bl	8010b1c <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	3b01      	subs	r3, #1
 8010742:	2b0c      	cmp	r3, #12
 8010744:	f200 8088 	bhi.w	8010858 <MlmeConfirm+0x144>
 8010748:	a201      	add	r2, pc, #4	; (adr r2, 8010750 <MlmeConfirm+0x3c>)
 801074a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801074e:	bf00      	nop
 8010750:	08010785 	.word	0x08010785
 8010754:	08010859 	.word	0x08010859
 8010758:	08010859 	.word	0x08010859
 801075c:	080107d7 	.word	0x080107d7
 8010760:	08010859 	.word	0x08010859
 8010764:	08010859 	.word	0x08010859
 8010768:	08010859 	.word	0x08010859
 801076c:	08010859 	.word	0x08010859
 8010770:	08010859 	.word	0x08010859
 8010774:	080107ef 	.word	0x080107ef
 8010778:	08010859 	.word	0x08010859
 801077c:	080107fd 	.word	0x080107fd
 8010780:	08010817 	.word	0x08010817
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 8010784:	2306      	movs	r3, #6
 8010786:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8010788:	f107 030c 	add.w	r3, r7, #12
 801078c:	4618      	mov	r0, r3
 801078e:	f004 fba7 	bl	8014ee0 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	4a37      	ldr	r2, [pc, #220]	; (8010874 <MlmeConfirm+0x160>)
 8010796:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8010798:	4837      	ldr	r0, [pc, #220]	; (8010878 <MlmeConfirm+0x164>)
 801079a:	f7ff fed9 	bl	8010550 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	785b      	ldrb	r3, [r3, #1]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d108      	bne.n	80107b8 <MlmeConfirm+0xa4>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80107a6:	4b35      	ldr	r3, [pc, #212]	; (801087c <MlmeConfirm+0x168>)
 80107a8:	2200      	movs	r2, #0
 80107aa:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80107ac:	4b34      	ldr	r3, [pc, #208]	; (8010880 <MlmeConfirm+0x16c>)
 80107ae:	785b      	ldrb	r3, [r3, #1]
 80107b0:	4618      	mov	r0, r3
 80107b2:	f7ff fe13 	bl	80103dc <LmHandlerRequestClass>
 80107b6:	e002      	b.n	80107be <MlmeConfirm+0xaa>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80107b8:	4b30      	ldr	r3, [pc, #192]	; (801087c <MlmeConfirm+0x168>)
 80107ba:	22ff      	movs	r2, #255	; 0xff
 80107bc:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80107be:	4b2c      	ldr	r3, [pc, #176]	; (8010870 <MlmeConfirm+0x15c>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107c4:	482d      	ldr	r0, [pc, #180]	; (801087c <MlmeConfirm+0x168>)
 80107c6:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	785b      	ldrb	r3, [r3, #1]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d145      	bne.n	801085c <MlmeConfirm+0x148>
            {
                SecureElementPrintSessionKeys();
 80107d0:	f7ff f838 	bl	800f844 <SecureElementPrintSessionKeys>
            }
        }
        break;
 80107d4:	e042      	b.n	801085c <MlmeConfirm+0x148>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 80107d6:	4b2b      	ldr	r3, [pc, #172]	; (8010884 <MlmeConfirm+0x170>)
 80107d8:	2201      	movs	r2, #1
 80107da:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	7a1a      	ldrb	r2, [r3, #8]
 80107e0:	4b28      	ldr	r3, [pc, #160]	; (8010884 <MlmeConfirm+0x170>)
 80107e2:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	7a5a      	ldrb	r2, [r3, #9]
 80107e8:	4b26      	ldr	r3, [pc, #152]	; (8010884 <MlmeConfirm+0x170>)
 80107ea:	74da      	strb	r2, [r3, #19]
        }
        break;
 80107ec:	e039      	b.n	8010862 <MlmeConfirm+0x14e>
    case MLME_DEVICE_TIME:
        {
#if ( LORAMAC_CLASSB_ENABLED == 1 )
            if( IsClassBSwitchPending == true )
 80107ee:	4b26      	ldr	r3, [pc, #152]	; (8010888 <MlmeConfirm+0x174>)
 80107f0:	781b      	ldrb	r3, [r3, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d034      	beq.n	8010860 <MlmeConfirm+0x14c>
            {
                LmHandlerBeaconReq( );
 80107f6:	f7ff fd95 	bl	8010324 <LmHandlerBeaconReq>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
 80107fa:	e031      	b.n	8010860 <MlmeConfirm+0x14c>
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	785b      	ldrb	r3, [r3, #1]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d105      	bne.n	8010810 <MlmeConfirm+0xfc>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8010804:	4b1e      	ldr	r3, [pc, #120]	; (8010880 <MlmeConfirm+0x16c>)
 8010806:	7b1b      	ldrb	r3, [r3, #12]
 8010808:	4618      	mov	r0, r3
 801080a:	f7ff fda7 	bl	801035c <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 801080e:	e028      	b.n	8010862 <MlmeConfirm+0x14e>
                LmHandlerDeviceTimeReq( );
 8010810:	f7ff fd6c 	bl	80102ec <LmHandlerDeviceTimeReq>
        break;
 8010814:	e025      	b.n	8010862 <MlmeConfirm+0x14e>
    case MLME_PING_SLOT_INFO:
        {
#if ( LORAMAC_CLASSB_ENABLED == 1 )
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	785b      	ldrb	r3, [r3, #1]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d116      	bne.n	801084c <MlmeConfirm+0x138>
            {
                MibRequestConfirm_t mibReq;

                // Class B is now activated
                mibReq.Type = MIB_DEVICE_CLASS;
 801081e:	2300      	movs	r3, #0
 8010820:	733b      	strb	r3, [r7, #12]
                mibReq.Param.Class = CLASS_B;
 8010822:	2301      	movs	r3, #1
 8010824:	743b      	strb	r3, [r7, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8010826:	f107 030c 	add.w	r3, r7, #12
 801082a:	4618      	mov	r0, r3
 801082c:	f004 fcde 	bl	80151ec <LoRaMacMibSetRequestConfirm>
                // Notify upper layer
                if (LmHandlerCallbacks->OnClassChange != NULL)
 8010830:	4b0f      	ldr	r3, [pc, #60]	; (8010870 <MlmeConfirm+0x15c>)
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010836:	2b00      	cmp	r3, #0
 8010838:	d004      	beq.n	8010844 <MlmeConfirm+0x130>
                {
                    LmHandlerCallbacks->OnClassChange( CLASS_B );
 801083a:	4b0d      	ldr	r3, [pc, #52]	; (8010870 <MlmeConfirm+0x15c>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010840:	2001      	movs	r0, #1
 8010842:	4798      	blx	r3
                }
                IsClassBSwitchPending = false;
 8010844:	4b10      	ldr	r3, [pc, #64]	; (8010888 <MlmeConfirm+0x174>)
 8010846:	2200      	movs	r2, #0
 8010848:	701a      	strb	r2, [r3, #0]
            {
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
 801084a:	e00a      	b.n	8010862 <MlmeConfirm+0x14e>
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 801084c:	4b0c      	ldr	r3, [pc, #48]	; (8010880 <MlmeConfirm+0x16c>)
 801084e:	7b1b      	ldrb	r3, [r3, #12]
 8010850:	4618      	mov	r0, r3
 8010852:	f7ff fd83 	bl	801035c <LmHandlerPingSlotReq>
        break;
 8010856:	e004      	b.n	8010862 <MlmeConfirm+0x14e>
    default:
        break;
 8010858:	bf00      	nop
 801085a:	e002      	b.n	8010862 <MlmeConfirm+0x14e>
        break;
 801085c:	bf00      	nop
 801085e:	e000      	b.n	8010862 <MlmeConfirm+0x14e>
        break;
 8010860:	bf00      	nop
    }
}
 8010862:	bf00      	nop
 8010864:	3730      	adds	r7, #48	; 0x30
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}
 801086a:	bf00      	nop
 801086c:	200000cc 	.word	0x200000cc
 8010870:	20000cac 	.word	0x20000cac
 8010874:	200000a0 	.word	0x200000a0
 8010878:	200000c8 	.word	0x200000c8
 801087c:	200000c4 	.word	0x200000c4
 8010880:	20000c98 	.word	0x20000c98
 8010884:	200000e8 	.word	0x200000e8
 8010888:	20000cf0 	.word	0x20000cf0

0801088c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 801088c:	b5b0      	push	{r4, r5, r7, lr}
 801088e:	b08e      	sub	sp, #56	; 0x38
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 8010896:	4b64      	ldr	r3, [pc, #400]	; (8010a28 <MlmeIndication+0x19c>)
 8010898:	2200      	movs	r2, #0
 801089a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	785a      	ldrb	r2, [r3, #1]
 80108a0:	4b61      	ldr	r3, [pc, #388]	; (8010a28 <MlmeIndication+0x19c>)
 80108a2:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	789b      	ldrb	r3, [r3, #2]
 80108a8:	b25a      	sxtb	r2, r3
 80108aa:	4b5f      	ldr	r3, [pc, #380]	; (8010a28 <MlmeIndication+0x19c>)
 80108ac:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80108b4:	b25a      	sxtb	r2, r3
 80108b6:	4b5c      	ldr	r3, [pc, #368]	; (8010a28 <MlmeIndication+0x19c>)
 80108b8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80108c0:	4b59      	ldr	r3, [pc, #356]	; (8010a28 <MlmeIndication+0x19c>)
 80108c2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	78da      	ldrb	r2, [r3, #3]
 80108c8:	4b57      	ldr	r3, [pc, #348]	; (8010a28 <MlmeIndication+0x19c>)
 80108ca:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	685b      	ldr	r3, [r3, #4]
 80108d0:	4a55      	ldr	r2, [pc, #340]	; (8010a28 <MlmeIndication+0x19c>)
 80108d2:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	2b0b      	cmp	r3, #11
 80108da:	d009      	beq.n	80108f0 <MlmeIndication+0x64>
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	2b0f      	cmp	r3, #15
 80108e2:	d005      	beq.n	80108f0 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80108e4:	4b51      	ldr	r3, [pc, #324]	; (8010a2c <MlmeIndication+0x1a0>)
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108ea:	494f      	ldr	r1, [pc, #316]	; (8010a28 <MlmeIndication+0x19c>)
 80108ec:	2000      	movs	r0, #0
 80108ee:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 80108f0:	6879      	ldr	r1, [r7, #4]
 80108f2:	2003      	movs	r0, #3
 80108f4:	f000 f912 	bl	8010b1c <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	781b      	ldrb	r3, [r3, #0]
 80108fc:	2b0f      	cmp	r3, #15
 80108fe:	d021      	beq.n	8010944 <MlmeIndication+0xb8>
 8010900:	2b0f      	cmp	r3, #15
 8010902:	f300 8087 	bgt.w	8010a14 <MlmeIndication+0x188>
 8010906:	2b07      	cmp	r3, #7
 8010908:	d002      	beq.n	8010910 <MlmeIndication+0x84>
 801090a:	2b0b      	cmp	r3, #11
 801090c:	d048      	beq.n	80109a0 <MlmeIndication+0x114>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 801090e:	e081      	b.n	8010a14 <MlmeIndication+0x188>
            LmHandlerAppData_t appData =
 8010910:	2300      	movs	r3, #0
 8010912:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8010916:	2300      	movs	r3, #0
 8010918:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 801091c:	2300      	movs	r3, #0
 801091e:	637b      	str	r3, [r7, #52]	; 0x34
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 8010920:	4b43      	ldr	r3, [pc, #268]	; (8010a30 <MlmeIndication+0x1a4>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	68db      	ldr	r3, [r3, #12]
 8010926:	4798      	blx	r3
 8010928:	4603      	mov	r3, r0
 801092a:	f083 0301 	eor.w	r3, r3, #1
 801092e:	b2db      	uxtb	r3, r3
 8010930:	2b00      	cmp	r3, #0
 8010932:	d071      	beq.n	8010a18 <MlmeIndication+0x18c>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 8010934:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010938:	2201      	movs	r2, #1
 801093a:	2100      	movs	r1, #0
 801093c:	4618      	mov	r0, r3
 801093e:	f7ff fbfd 	bl	801013c <LmHandlerSend>
        break;
 8010942:	e069      	b.n	8010a18 <MlmeIndication+0x18c>
            mibReq.Type = MIB_DEVICE_CLASS;
 8010944:	2300      	movs	r3, #0
 8010946:	733b      	strb	r3, [r7, #12]
            mibReq.Param.Class = CLASS_A;
 8010948:	2300      	movs	r3, #0
 801094a:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 801094c:	f107 030c 	add.w	r3, r7, #12
 8010950:	4618      	mov	r0, r3
 8010952:	f004 fc4b 	bl	80151ec <LoRaMacMibSetRequestConfirm>
            BeaconParams.State = LORAMAC_HANDLER_BEACON_LOST;
 8010956:	4b37      	ldr	r3, [pc, #220]	; (8010a34 <MlmeIndication+0x1a8>)
 8010958:	2201      	movs	r2, #1
 801095a:	705a      	strb	r2, [r3, #1]
            BeaconParams.Info.Time.Seconds = 0;
 801095c:	4b35      	ldr	r3, [pc, #212]	; (8010a34 <MlmeIndication+0x1a8>)
 801095e:	2200      	movs	r2, #0
 8010960:	605a      	str	r2, [r3, #4]
            BeaconParams.Info.GwSpecific.InfoDesc = 0;
 8010962:	4b34      	ldr	r3, [pc, #208]	; (8010a34 <MlmeIndication+0x1a8>)
 8010964:	2200      	movs	r2, #0
 8010966:	755a      	strb	r2, [r3, #21]
            UTIL_MEM_set_8( BeaconParams.Info.GwSpecific.Info, 0, 6 );
 8010968:	2206      	movs	r2, #6
 801096a:	2100      	movs	r1, #0
 801096c:	4832      	ldr	r0, [pc, #200]	; (8010a38 <MlmeIndication+0x1ac>)
 801096e:	f00e ff34 	bl	801f7da <UTIL_MEM_set_8>
            if (LmHandlerCallbacks->OnClassChange != NULL)
 8010972:	4b2e      	ldr	r3, [pc, #184]	; (8010a2c <MlmeIndication+0x1a0>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010978:	2b00      	cmp	r3, #0
 801097a:	d004      	beq.n	8010986 <MlmeIndication+0xfa>
                LmHandlerCallbacks->OnClassChange( CLASS_A );
 801097c:	4b2b      	ldr	r3, [pc, #172]	; (8010a2c <MlmeIndication+0x1a0>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010982:	2000      	movs	r0, #0
 8010984:	4798      	blx	r3
            if (LmHandlerCallbacks->OnBeaconStatusChange != NULL)
 8010986:	4b29      	ldr	r3, [pc, #164]	; (8010a2c <MlmeIndication+0x1a0>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801098c:	2b00      	cmp	r3, #0
 801098e:	d004      	beq.n	801099a <MlmeIndication+0x10e>
                LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 8010990:	4b26      	ldr	r3, [pc, #152]	; (8010a2c <MlmeIndication+0x1a0>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010996:	4827      	ldr	r0, [pc, #156]	; (8010a34 <MlmeIndication+0x1a8>)
 8010998:	4798      	blx	r3
            LmHandlerDeviceTimeReq( );
 801099a:	f7ff fca7 	bl	80102ec <LmHandlerDeviceTimeReq>
        break;
 801099e:	e03e      	b.n	8010a1e <MlmeIndication+0x192>
            if( mlmeIndication->Status == LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	785b      	ldrb	r3, [r3, #1]
 80109a4:	2b0e      	cmp	r3, #14
 80109a6:	d118      	bne.n	80109da <MlmeIndication+0x14e>
                BeaconParams.State = LORAMAC_HANDLER_BEACON_RX;
 80109a8:	4b22      	ldr	r3, [pc, #136]	; (8010a34 <MlmeIndication+0x1a8>)
 80109aa:	2202      	movs	r2, #2
 80109ac:	705a      	strb	r2, [r3, #1]
                BeaconParams.Info = mlmeIndication->BeaconInfo;
 80109ae:	4a21      	ldr	r2, [pc, #132]	; (8010a34 <MlmeIndication+0x1a8>)
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	1d14      	adds	r4, r2, #4
 80109b4:	f103 0508 	add.w	r5, r3, #8
 80109b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80109c0:	e884 0003 	stmia.w	r4, {r0, r1}
                if (LmHandlerCallbacks->OnBeaconStatusChange != NULL)
 80109c4:	4b19      	ldr	r3, [pc, #100]	; (8010a2c <MlmeIndication+0x1a0>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d026      	beq.n	8010a1c <MlmeIndication+0x190>
                    LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 80109ce:	4b17      	ldr	r3, [pc, #92]	; (8010a2c <MlmeIndication+0x1a0>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109d4:	4817      	ldr	r0, [pc, #92]	; (8010a34 <MlmeIndication+0x1a8>)
 80109d6:	4798      	blx	r3
        break;
 80109d8:	e020      	b.n	8010a1c <MlmeIndication+0x190>
            else if ( mlmeIndication->Status == LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND )
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	785b      	ldrb	r3, [r3, #1]
 80109de:	2b10      	cmp	r3, #16
 80109e0:	d11c      	bne.n	8010a1c <MlmeIndication+0x190>
                BeaconParams.State = LORAMAC_HANDLER_BEACON_NRX;
 80109e2:	4b14      	ldr	r3, [pc, #80]	; (8010a34 <MlmeIndication+0x1a8>)
 80109e4:	2203      	movs	r2, #3
 80109e6:	705a      	strb	r2, [r3, #1]
                BeaconParams.Info = mlmeIndication->BeaconInfo;
 80109e8:	4a12      	ldr	r2, [pc, #72]	; (8010a34 <MlmeIndication+0x1a8>)
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	1d14      	adds	r4, r2, #4
 80109ee:	f103 0508 	add.w	r5, r3, #8
 80109f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80109fa:	e884 0003 	stmia.w	r4, {r0, r1}
                if (LmHandlerCallbacks->OnBeaconStatusChange != NULL)
 80109fe:	4b0b      	ldr	r3, [pc, #44]	; (8010a2c <MlmeIndication+0x1a0>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d009      	beq.n	8010a1c <MlmeIndication+0x190>
                    LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 8010a08:	4b08      	ldr	r3, [pc, #32]	; (8010a2c <MlmeIndication+0x1a0>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a0e:	4809      	ldr	r0, [pc, #36]	; (8010a34 <MlmeIndication+0x1a8>)
 8010a10:	4798      	blx	r3
        break;
 8010a12:	e003      	b.n	8010a1c <MlmeIndication+0x190>
        break;
 8010a14:	bf00      	nop
 8010a16:	e002      	b.n	8010a1e <MlmeIndication+0x192>
        break;
 8010a18:	bf00      	nop
 8010a1a:	e000      	b.n	8010a1e <MlmeIndication+0x192>
        break;
 8010a1c:	bf00      	nop
    }
}
 8010a1e:	bf00      	nop
 8010a20:	3738      	adds	r7, #56	; 0x38
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bdb0      	pop	{r4, r5, r7, pc}
 8010a26:	bf00      	nop
 8010a28:	200000e8 	.word	0x200000e8
 8010a2c:	20000cac 	.word	0x20000cac
 8010a30:	20000c84 	.word	0x20000c84
 8010a34:	20000cd4 	.word	0x20000cd4
 8010a38:	20000cea 	.word	0x20000cea

08010a3c <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b084      	sub	sp, #16
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	4603      	mov	r3, r0
 8010a44:	6039      	str	r1, [r7, #0]
 8010a46:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	60fb      	str	r3, [r7, #12]
    switch( id )
 8010a4c:	79fb      	ldrb	r3, [r7, #7]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d103      	bne.n	8010a5a <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 8010a52:	f000 f9db 	bl	8010e0c <LmhpCompliancePackageFactory>
 8010a56:	60f8      	str	r0, [r7, #12]
            break;
 8010a58:	e000      	b.n	8010a5c <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 8010a5a:	bf00      	nop
        }
    }
    if( package != NULL )
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d02b      	beq.n	8010aba <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 8010a62:	79fb      	ldrb	r3, [r7, #7]
 8010a64:	4918      	ldr	r1, [pc, #96]	; (8010ac8 <LmHandlerPackageRegister+0x8c>)
 8010a66:	68fa      	ldr	r2, [r7, #12]
 8010a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8010a6c:	79fb      	ldrb	r3, [r7, #7]
 8010a6e:	4a16      	ldr	r2, [pc, #88]	; (8010ac8 <LmHandlerPackageRegister+0x8c>)
 8010a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a74:	4a15      	ldr	r2, [pc, #84]	; (8010acc <LmHandlerPackageRegister+0x90>)
 8010a76:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8010a78:	79fb      	ldrb	r3, [r7, #7]
 8010a7a:	4a13      	ldr	r2, [pc, #76]	; (8010ac8 <LmHandlerPackageRegister+0x8c>)
 8010a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a80:	4a13      	ldr	r2, [pc, #76]	; (8010ad0 <LmHandlerPackageRegister+0x94>)
 8010a82:	62da      	str	r2, [r3, #44]	; 0x2c
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8010a84:	79fb      	ldrb	r3, [r7, #7]
 8010a86:	4a10      	ldr	r2, [pc, #64]	; (8010ac8 <LmHandlerPackageRegister+0x8c>)
 8010a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a8c:	4a11      	ldr	r2, [pc, #68]	; (8010ad4 <LmHandlerPackageRegister+0x98>)
 8010a8e:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8010a90:	4b11      	ldr	r3, [pc, #68]	; (8010ad8 <LmHandlerPackageRegister+0x9c>)
 8010a92:	681a      	ldr	r2, [r3, #0]
 8010a94:	79fb      	ldrb	r3, [r7, #7]
 8010a96:	490c      	ldr	r1, [pc, #48]	; (8010ac8 <LmHandlerPackageRegister+0x8c>)
 8010a98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010a9c:	6992      	ldr	r2, [r2, #24]
 8010a9e:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8010aa0:	79fb      	ldrb	r3, [r7, #7]
 8010aa2:	4a09      	ldr	r2, [pc, #36]	; (8010ac8 <LmHandlerPackageRegister+0x8c>)
 8010aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010aa8:	685b      	ldr	r3, [r3, #4]
 8010aaa:	4a0c      	ldr	r2, [pc, #48]	; (8010adc <LmHandlerPackageRegister+0xa0>)
 8010aac:	6851      	ldr	r1, [r2, #4]
 8010aae:	4a0b      	ldr	r2, [pc, #44]	; (8010adc <LmHandlerPackageRegister+0xa0>)
 8010ab0:	7852      	ldrb	r2, [r2, #1]
 8010ab2:	6838      	ldr	r0, [r7, #0]
 8010ab4:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	e001      	b.n	8010abe <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8010aba:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3710      	adds	r7, #16
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}
 8010ac6:	bf00      	nop
 8010ac8:	20000c84 	.word	0x20000c84
 8010acc:	08010005 	.word	0x08010005
 8010ad0:	0801013d 	.word	0x0801013d
 8010ad4:	080102ed 	.word	0x080102ed
 8010ad8:	20000cac 	.word	0x20000cac
 8010adc:	200000fc 	.word	0x200000fc

08010ae0 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b082      	sub	sp, #8
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8010aea:	79fb      	ldrb	r3, [r7, #7]
 8010aec:	2b04      	cmp	r3, #4
 8010aee:	d80e      	bhi.n	8010b0e <LmHandlerPackageIsInitialized+0x2e>
 8010af0:	79fb      	ldrb	r3, [r7, #7]
 8010af2:	4a09      	ldr	r2, [pc, #36]	; (8010b18 <LmHandlerPackageIsInitialized+0x38>)
 8010af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010af8:	689b      	ldr	r3, [r3, #8]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d007      	beq.n	8010b0e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8010afe:	79fb      	ldrb	r3, [r7, #7]
 8010b00:	4a05      	ldr	r2, [pc, #20]	; (8010b18 <LmHandlerPackageIsInitialized+0x38>)
 8010b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b06:	689b      	ldr	r3, [r3, #8]
 8010b08:	4798      	blx	r3
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	e000      	b.n	8010b10 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 8010b0e:	2300      	movs	r3, #0
    }
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3708      	adds	r7, #8
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}
 8010b18:	20000c84 	.word	0x20000c84

08010b1c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b084      	sub	sp, #16
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	4603      	mov	r3, r0
 8010b24:	6039      	str	r1, [r7, #0]
 8010b26:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010b28:	2300      	movs	r3, #0
 8010b2a:	73fb      	strb	r3, [r7, #15]
 8010b2c:	e07e      	b.n	8010c2c <LmHandlerPackagesNotify+0x110>
    {
        if( LmHandlerPackages[i] != NULL )
 8010b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b32:	4a43      	ldr	r2, [pc, #268]	; (8010c40 <LmHandlerPackagesNotify+0x124>)
 8010b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d066      	beq.n	8010c0a <LmHandlerPackagesNotify+0xee>
        {
            switch( notifyType )
 8010b3c:	79fb      	ldrb	r3, [r7, #7]
 8010b3e:	2b03      	cmp	r3, #3
 8010b40:	d865      	bhi.n	8010c0e <LmHandlerPackagesNotify+0xf2>
 8010b42:	a201      	add	r2, pc, #4	; (adr r2, 8010b48 <LmHandlerPackagesNotify+0x2c>)
 8010b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b48:	08010b59 	.word	0x08010b59
 8010b4c:	08010b7b 	.word	0x08010b7b
 8010b50:	08010bc7 	.word	0x08010bc7
 8010b54:	08010be9 	.word	0x08010be9
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8010b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b5c:	4a38      	ldr	r2, [pc, #224]	; (8010c40 <LmHandlerPackagesNotify+0x124>)
 8010b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b62:	699b      	ldr	r3, [r3, #24]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d054      	beq.n	8010c12 <LmHandlerPackagesNotify+0xf6>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8010b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b6c:	4a34      	ldr	r2, [pc, #208]	; (8010c40 <LmHandlerPackagesNotify+0x124>)
 8010b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b72:	699b      	ldr	r3, [r3, #24]
 8010b74:	6838      	ldr	r0, [r7, #0]
 8010b76:	4798      	blx	r3
                    }
                    break;
 8010b78:	e04b      	b.n	8010c12 <LmHandlerPackagesNotify+0xf6>
                }
                case PACKAGE_MCPS_INDICATION:
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8010b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b7e:	4a30      	ldr	r2, [pc, #192]	; (8010c40 <LmHandlerPackagesNotify+0x124>)
 8010b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b84:	69db      	ldr	r3, [r3, #28]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d045      	beq.n	8010c16 <LmHandlerPackagesNotify+0xfa>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8010b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b8e:	4a2c      	ldr	r2, [pc, #176]	; (8010c40 <LmHandlerPackagesNotify+0x124>)
 8010b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b94:	781a      	ldrb	r2, [r3, #0]
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8010b9a:	429a      	cmp	r2, r3
 8010b9c:	d00a      	beq.n	8010bb4 <LmHandlerPackagesNotify+0x98>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8010b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d137      	bne.n	8010c16 <LmHandlerPackagesNotify+0xfa>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 8010ba6:	4b26      	ldr	r3, [pc, #152]	; (8010c40 <LmHandlerPackagesNotify+0x124>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	68db      	ldr	r3, [r3, #12]
 8010bac:	4798      	blx	r3
 8010bae:	4603      	mov	r3, r0
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d030      	beq.n	8010c16 <LmHandlerPackagesNotify+0xfa>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8010bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bb8:	4a21      	ldr	r2, [pc, #132]	; (8010c40 <LmHandlerPackagesNotify+0x124>)
 8010bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010bbe:	69db      	ldr	r3, [r3, #28]
 8010bc0:	6838      	ldr	r0, [r7, #0]
 8010bc2:	4798      	blx	r3
                    }
                    break;
 8010bc4:	e027      	b.n	8010c16 <LmHandlerPackagesNotify+0xfa>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8010bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bca:	4a1d      	ldr	r2, [pc, #116]	; (8010c40 <LmHandlerPackagesNotify+0x124>)
 8010bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010bd0:	6a1b      	ldr	r3, [r3, #32]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d021      	beq.n	8010c1a <LmHandlerPackagesNotify+0xfe>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8010bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bda:	4a19      	ldr	r2, [pc, #100]	; (8010c40 <LmHandlerPackagesNotify+0x124>)
 8010bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010be0:	6a1b      	ldr	r3, [r3, #32]
 8010be2:	6838      	ldr	r0, [r7, #0]
 8010be4:	4798      	blx	r3
                    }
                    break;
 8010be6:	e018      	b.n	8010c1a <LmHandlerPackagesNotify+0xfe>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8010be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bec:	4a14      	ldr	r2, [pc, #80]	; (8010c40 <LmHandlerPackagesNotify+0x124>)
 8010bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d012      	beq.n	8010c1e <LmHandlerPackagesNotify+0x102>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8010bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bfc:	4a10      	ldr	r2, [pc, #64]	; (8010c40 <LmHandlerPackagesNotify+0x124>)
 8010bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c04:	6838      	ldr	r0, [r7, #0]
 8010c06:	4798      	blx	r3
                    }
                    break;
 8010c08:	e009      	b.n	8010c1e <LmHandlerPackagesNotify+0x102>
                default:
                {
                    break;
                }
            }
        }
 8010c0a:	bf00      	nop
 8010c0c:	e008      	b.n	8010c20 <LmHandlerPackagesNotify+0x104>
                    break;
 8010c0e:	bf00      	nop
 8010c10:	e006      	b.n	8010c20 <LmHandlerPackagesNotify+0x104>
                    break;
 8010c12:	bf00      	nop
 8010c14:	e004      	b.n	8010c20 <LmHandlerPackagesNotify+0x104>
                    break;
 8010c16:	bf00      	nop
 8010c18:	e002      	b.n	8010c20 <LmHandlerPackagesNotify+0x104>
                    break;
 8010c1a:	bf00      	nop
 8010c1c:	e000      	b.n	8010c20 <LmHandlerPackagesNotify+0x104>
                    break;
 8010c1e:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c24:	b2db      	uxtb	r3, r3
 8010c26:	3301      	adds	r3, #1
 8010c28:	b2db      	uxtb	r3, r3
 8010c2a:	73fb      	strb	r3, [r7, #15]
 8010c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c30:	2b04      	cmp	r3, #4
 8010c32:	f77f af7c 	ble.w	8010b2e <LmHandlerPackagesNotify+0x12>
    }
}
 8010c36:	bf00      	nop
 8010c38:	bf00      	nop
 8010c3a:	3710      	adds	r7, #16
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}
 8010c40:	20000c84 	.word	0x20000c84

08010c44 <LmHandlerPackagesProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b082      	sub	sp, #8
 8010c48:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	71fb      	strb	r3, [r7, #7]
 8010c4e:	e022      	b.n	8010c96 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8010c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c54:	4a14      	ldr	r2, [pc, #80]	; (8010ca8 <LmHandlerPackagesProcess+0x64>)
 8010c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d015      	beq.n	8010c8a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8010c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c62:	4a11      	ldr	r2, [pc, #68]	; (8010ca8 <LmHandlerPackagesProcess+0x64>)
 8010c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c68:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d00d      	beq.n	8010c8a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8010c6e:	79fb      	ldrb	r3, [r7, #7]
 8010c70:	4618      	mov	r0, r3
 8010c72:	f7ff ff35 	bl	8010ae0 <LmHandlerPackageIsInitialized>
 8010c76:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d006      	beq.n	8010c8a <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 8010c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c80:	4a09      	ldr	r2, [pc, #36]	; (8010ca8 <LmHandlerPackagesProcess+0x64>)
 8010c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c86:	691b      	ldr	r3, [r3, #16]
 8010c88:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	3301      	adds	r3, #1
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	71fb      	strb	r3, [r7, #7]
 8010c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c9a:	2b04      	cmp	r3, #4
 8010c9c:	ddd8      	ble.n	8010c50 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 8010c9e:	bf00      	nop
 8010ca0:	bf00      	nop
 8010ca2:	3708      	adds	r7, #8
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}
 8010ca8:	20000c84 	.word	0x20000c84

08010cac <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 8010cac:	b480      	push	{r7}
 8010cae:	b083      	sub	sp, #12
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	6039      	str	r1, [r7, #0]
 8010cb6:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d102      	bne.n	8010cc4 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 8010cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8010cc2:	e00e      	b.n	8010ce2 <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 8010cc4:	79fb      	ldrb	r3, [r7, #7]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d002      	beq.n	8010cd0 <LmHandlerGetVersion+0x24>
 8010cca:	2b01      	cmp	r3, #1
 8010ccc:	d004      	beq.n	8010cd8 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 8010cce:	e007      	b.n	8010ce0 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	4a06      	ldr	r2, [pc, #24]	; (8010cec <LmHandlerGetVersion+0x40>)
 8010cd4:	601a      	str	r2, [r3, #0]
            break;
 8010cd6:	e003      	b.n	8010ce0 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	4a05      	ldr	r2, [pc, #20]	; (8010cf0 <LmHandlerGetVersion+0x44>)
 8010cdc:	601a      	str	r2, [r3, #0]
            break;
 8010cde:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 8010ce0:	2300      	movs	r3, #0
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	370c      	adds	r7, #12
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bc80      	pop	{r7}
 8010cea:	4770      	bx	lr
 8010cec:	01000300 	.word	0x01000300
 8010cf0:	01010003 	.word	0x01010003

08010cf4 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 8010cf8:	f005 f826 	bl	8015d48 <LoRaMacDeInitialization>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d101      	bne.n	8010d06 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010d02:	2300      	movs	r3, #0
 8010d04:	e001      	b.n	8010d0a <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010d06:	f06f 0301 	mvn.w	r3, #1
    }
}
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	bd80      	pop	{r7, pc}

08010d0e <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 8010d0e:	b580      	push	{r7, lr}
 8010d10:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 8010d12:	f004 f825 	bl	8014d60 <LoRaMacHalt>
 8010d16:	4603      	mov	r3, r0
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d101      	bne.n	8010d20 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	e001      	b.n	8010d24 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010d20:	f06f 0301 	mvn.w	r3, #1
    }
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	bd80      	pop	{r7, pc}

08010d28 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b08e      	sub	sp, #56	; 0x38
 8010d2c:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 8010d34:	2300      	movs	r3, #0
 8010d36:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 8010d38:	f7ff ffe9 	bl	8010d0e <LmHandlerHalt>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 8010d42:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d12f      	bne.n	8010daa <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 8010d4a:	f000 f84f 	bl	8010dec <NvmDataMgmtStoreBegin>
 8010d4e:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 8010d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d52:	f113 0f02 	cmn.w	r3, #2
 8010d56:	d103      	bne.n	8010d60 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8010d58:	23f8      	movs	r3, #248	; 0xf8
 8010d5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010d5e:	e01c      	b.n	8010d9a <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 8010d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d104      	bne.n	8010d70 <LmHandlerNvmDataStore+0x48>
 8010d66:	4b1b      	ldr	r3, [pc, #108]	; (8010dd4 <LmHandlerNvmDataStore+0xac>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	695b      	ldr	r3, [r3, #20]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d103      	bne.n	8010d78 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8010d70:	23ff      	movs	r3, #255	; 0xff
 8010d72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010d76:	e010      	b.n	8010d9a <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 8010d78:	2326      	movs	r3, #38	; 0x26
 8010d7a:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 8010d7c:	1d3b      	adds	r3, r7, #4
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f004 f8ae 	bl	8014ee0 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 8010d88:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 8010d8c:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 8010d8e:	4b11      	ldr	r3, [pc, #68]	; (8010dd4 <LmHandlerNvmDataStore+0xac>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	695b      	ldr	r3, [r3, #20]
 8010d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010d96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010d98:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 8010d9a:	f000 f82f 	bl	8010dfc <NvmDataMgmtStoreEnd>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d002      	beq.n	8010daa <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8010da4:	23ff      	movs	r3, #255	; 0xff
 8010da6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 8010daa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d109      	bne.n	8010dc6 <LmHandlerNvmDataStore+0x9e>
 8010db2:	4b08      	ldr	r3, [pc, #32]	; (8010dd4 <LmHandlerNvmDataStore+0xac>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	69db      	ldr	r3, [r3, #28]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d004      	beq.n	8010dc6 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 8010dbc:	4b05      	ldr	r3, [pc, #20]	; (8010dd4 <LmHandlerNvmDataStore+0xac>)
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	69db      	ldr	r3, [r3, #28]
 8010dc2:	2001      	movs	r0, #1
 8010dc4:	4798      	blx	r3
    }

    return lmhStatus;
 8010dc6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3738      	adds	r7, #56	; 0x38
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}
 8010dd2:	bf00      	nop
 8010dd4:	20000cac 	.word	0x20000cac

08010dd8 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 8010dd8:	b480      	push	{r7}
 8010dda:	b083      	sub	sp, #12
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	4603      	mov	r3, r0
 8010de0:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8010de2:	bf00      	nop
 8010de4:	370c      	adds	r7, #12
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bc80      	pop	{r7}
 8010dea:	4770      	bx	lr

08010dec <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 8010dec:	b480      	push	{r7}
 8010dee:	af00      	add	r7, sp, #0
    {
        return NVM_DATA_NOT_AVAILABLE;
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 8010df0:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bc80      	pop	{r7}
 8010dfa:	4770      	bx	lr

08010dfc <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 8010e00:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bc80      	pop	{r7}
 8010e0a:	4770      	bx	lr

08010e0c <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 8010e10:	4b02      	ldr	r3, [pc, #8]	; (8010e1c <LmhpCompliancePackageFactory+0x10>)
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bc80      	pop	{r7}
 8010e18:	4770      	bx	lr
 8010e1a:	bf00      	nop
 8010e1c:	20000104 	.word	0x20000104

08010e20 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 8010e20:	b480      	push	{r7}
 8010e22:	b085      	sub	sp, #20
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	60f8      	str	r0, [r7, #12]
 8010e28:	60b9      	str	r1, [r7, #8]
 8010e2a:	4613      	mov	r3, r2
 8010e2c:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d00f      	beq.n	8010e54 <LmhpComplianceInit+0x34>
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d00c      	beq.n	8010e54 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 8010e3a:	4a0c      	ldr	r2, [pc, #48]	; (8010e6c <LmhpComplianceInit+0x4c>)
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 8010e40:	4a0b      	ldr	r2, [pc, #44]	; (8010e70 <LmhpComplianceInit+0x50>)
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8010e46:	4a0a      	ldr	r2, [pc, #40]	; (8010e70 <LmhpComplianceInit+0x50>)
 8010e48:	79fb      	ldrb	r3, [r7, #7]
 8010e4a:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 8010e4c:	4b08      	ldr	r3, [pc, #32]	; (8010e70 <LmhpComplianceInit+0x50>)
 8010e4e:	2201      	movs	r2, #1
 8010e50:	701a      	strb	r2, [r3, #0]
 8010e52:	e006      	b.n	8010e62 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 8010e54:	4b05      	ldr	r3, [pc, #20]	; (8010e6c <LmhpComplianceInit+0x4c>)
 8010e56:	2200      	movs	r2, #0
 8010e58:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 8010e5a:	4b05      	ldr	r3, [pc, #20]	; (8010e70 <LmhpComplianceInit+0x50>)
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	701a      	strb	r2, [r3, #0]
    }
}
 8010e60:	bf00      	nop
 8010e62:	bf00      	nop
 8010e64:	3714      	adds	r7, #20
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bc80      	pop	{r7}
 8010e6a:	4770      	bx	lr
 8010e6c:	20000e18 	.word	0x20000e18
 8010e70:	20000e04 	.word	0x20000e04

08010e74 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 8010e74:	b480      	push	{r7}
 8010e76:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 8010e78:	4b02      	ldr	r3, [pc, #8]	; (8010e84 <LmhpComplianceIsInitialized+0x10>)
 8010e7a:	781b      	ldrb	r3, [r3, #0]
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bc80      	pop	{r7}
 8010e82:	4770      	bx	lr
 8010e84:	20000e04 	.word	0x20000e04

08010e88 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 8010e88:	b480      	push	{r7}
 8010e8a:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8010e8c:	4b07      	ldr	r3, [pc, #28]	; (8010eac <LmhpComplianceIsRunning+0x24>)
 8010e8e:	781b      	ldrb	r3, [r3, #0]
 8010e90:	f083 0301 	eor.w	r3, r3, #1
 8010e94:	b2db      	uxtb	r3, r3
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d001      	beq.n	8010e9e <LmhpComplianceIsRunning+0x16>
    {
        return false;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	e001      	b.n	8010ea2 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 8010e9e:	4b03      	ldr	r3, [pc, #12]	; (8010eac <LmhpComplianceIsRunning+0x24>)
 8010ea0:	785b      	ldrb	r3, [r3, #1]
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bc80      	pop	{r7}
 8010ea8:	4770      	bx	lr
 8010eaa:	bf00      	nop
 8010eac:	20000e04 	.word	0x20000e04

08010eb0 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 8010eb0:	b480      	push	{r7}
 8010eb2:	b083      	sub	sp, #12
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 8010eb8:	4b0f      	ldr	r3, [pc, #60]	; (8010ef8 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010eba:	781b      	ldrb	r3, [r3, #0]
 8010ebc:	f083 0301 	eor.w	r3, r3, #1
 8010ec0:	b2db      	uxtb	r3, r3
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d112      	bne.n	8010eec <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 8010ec6:	4b0c      	ldr	r3, [pc, #48]	; (8010ef8 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010ec8:	785b      	ldrb	r3, [r3, #1]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d00f      	beq.n	8010eee <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 8010ed2:	2b01      	cmp	r3, #1
 8010ed4:	d10b      	bne.n	8010eee <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d007      	beq.n	8010eee <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 8010ede:	4b06      	ldr	r3, [pc, #24]	; (8010ef8 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010ee0:	899b      	ldrh	r3, [r3, #12]
 8010ee2:	3301      	adds	r3, #1
 8010ee4:	b29a      	uxth	r2, r3
 8010ee6:	4b04      	ldr	r3, [pc, #16]	; (8010ef8 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010ee8:	819a      	strh	r2, [r3, #12]
 8010eea:	e000      	b.n	8010eee <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 8010eec:	bf00      	nop
    }
}
 8010eee:	370c      	adds	r7, #12
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bc80      	pop	{r7}
 8010ef4:	4770      	bx	lr
 8010ef6:	bf00      	nop
 8010ef8:	20000e04 	.word	0x20000e04

08010efc <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8010efc:	b480      	push	{r7}
 8010efe:	b083      	sub	sp, #12
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010f04:	4b12      	ldr	r3, [pc, #72]	; (8010f50 <LmhpComplianceOnMlmeConfirm+0x54>)
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	f083 0301 	eor.w	r3, r3, #1
 8010f0c:	b2db      	uxtb	r3, r3
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d116      	bne.n	8010f40 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8010f12:	4b0f      	ldr	r3, [pc, #60]	; (8010f50 <LmhpComplianceOnMlmeConfirm+0x54>)
 8010f14:	785b      	ldrb	r3, [r3, #1]
 8010f16:	f083 0301 	eor.w	r3, r3, #1
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d111      	bne.n	8010f44 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	781b      	ldrb	r3, [r3, #0]
 8010f24:	2b04      	cmp	r3, #4
 8010f26:	d10e      	bne.n	8010f46 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 8010f28:	4b09      	ldr	r3, [pc, #36]	; (8010f50 <LmhpComplianceOnMlmeConfirm+0x54>)
 8010f2a:	2201      	movs	r2, #1
 8010f2c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	7a1a      	ldrb	r2, [r3, #8]
 8010f32:	4b07      	ldr	r3, [pc, #28]	; (8010f50 <LmhpComplianceOnMlmeConfirm+0x54>)
 8010f34:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	7a5a      	ldrb	r2, [r3, #9]
 8010f3a:	4b05      	ldr	r3, [pc, #20]	; (8010f50 <LmhpComplianceOnMlmeConfirm+0x54>)
 8010f3c:	741a      	strb	r2, [r3, #16]
 8010f3e:	e002      	b.n	8010f46 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 8010f40:	bf00      	nop
 8010f42:	e000      	b.n	8010f46 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 8010f44:	bf00      	nop
    }
}
 8010f46:	370c      	adds	r7, #12
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bc80      	pop	{r7}
 8010f4c:	4770      	bx	lr
 8010f4e:	bf00      	nop
 8010f50:	20000e04 	.word	0x20000e04

08010f54 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b082      	sub	sp, #8
 8010f58:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8010f5a:	4b33      	ldr	r3, [pc, #204]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010f5c:	781b      	ldrb	r3, [r3, #0]
 8010f5e:	f083 0301 	eor.w	r3, r3, #1
 8010f62:	b2db      	uxtb	r3, r3
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d002      	beq.n	8010f6e <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 8010f68:	f04f 33ff 	mov.w	r3, #4294967295
 8010f6c:	e057      	b.n	801101e <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.IsRunning == false )
 8010f6e:	4b2e      	ldr	r3, [pc, #184]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010f70:	785b      	ldrb	r3, [r3, #1]
 8010f72:	f083 0301 	eor.w	r3, r3, #1
 8010f76:	b2db      	uxtb	r3, r3
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d001      	beq.n	8010f80 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	e04e      	b.n	801101e <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.LinkCheck == true )
 8010f80:	4b29      	ldr	r3, [pc, #164]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010f82:	7b9b      	ldrb	r3, [r3, #14]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d019      	beq.n	8010fbc <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 8010f88:	4b27      	ldr	r3, [pc, #156]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 8010f8e:	4b26      	ldr	r3, [pc, #152]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010f90:	2203      	movs	r2, #3
 8010f92:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8010f94:	4b24      	ldr	r3, [pc, #144]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010f96:	689b      	ldr	r3, [r3, #8]
 8010f98:	2205      	movs	r2, #5
 8010f9a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8010f9c:	4b22      	ldr	r3, [pc, #136]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010f9e:	689b      	ldr	r3, [r3, #8]
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	4a21      	ldr	r2, [pc, #132]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010fa4:	7bd2      	ldrb	r2, [r2, #15]
 8010fa6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8010fa8:	4b1f      	ldr	r3, [pc, #124]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010faa:	689b      	ldr	r3, [r3, #8]
 8010fac:	3302      	adds	r3, #2
 8010fae:	4a1e      	ldr	r2, [pc, #120]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010fb0:	7c12      	ldrb	r2, [r2, #16]
 8010fb2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 8010fb4:	4b1c      	ldr	r3, [pc, #112]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010fb6:	2201      	movs	r2, #1
 8010fb8:	709a      	strb	r2, [r3, #2]
 8010fba:	e01c      	b.n	8010ff6 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 8010fbc:	4b1a      	ldr	r3, [pc, #104]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010fbe:	789b      	ldrb	r3, [r3, #2]
 8010fc0:	2b01      	cmp	r3, #1
 8010fc2:	d005      	beq.n	8010fd0 <LmhpComplianceTxProcess+0x7c>
 8010fc4:	2b04      	cmp	r3, #4
 8010fc6:	d116      	bne.n	8010ff6 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 8010fc8:	4b17      	ldr	r3, [pc, #92]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010fca:	2201      	movs	r2, #1
 8010fcc:	709a      	strb	r2, [r3, #2]
            break;
 8010fce:	e012      	b.n	8010ff6 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 8010fd0:	4b15      	ldr	r3, [pc, #84]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010fd2:	2202      	movs	r2, #2
 8010fd4:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8010fd6:	4b14      	ldr	r3, [pc, #80]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010fd8:	899b      	ldrh	r3, [r3, #12]
 8010fda:	0a1b      	lsrs	r3, r3, #8
 8010fdc:	b29a      	uxth	r2, r3
 8010fde:	4b12      	ldr	r3, [pc, #72]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010fe0:	689b      	ldr	r3, [r3, #8]
 8010fe2:	b2d2      	uxtb	r2, r2
 8010fe4:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8010fe6:	4b10      	ldr	r3, [pc, #64]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010fe8:	899a      	ldrh	r2, [r3, #12]
 8010fea:	4b0f      	ldr	r3, [pc, #60]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010fec:	689b      	ldr	r3, [r3, #8]
 8010fee:	3301      	adds	r3, #1
 8010ff0:	b2d2      	uxtb	r2, r2
 8010ff2:	701a      	strb	r2, [r3, #0]
            break;
 8010ff4:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 8010ff6:	23e0      	movs	r3, #224	; 0xe0
 8010ff8:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 8010ffa:	4b0b      	ldr	r3, [pc, #44]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8010ffc:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 8010ffe:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8011000:	4b09      	ldr	r3, [pc, #36]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8011002:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 8011004:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 8011006:	4809      	ldr	r0, [pc, #36]	; (801102c <LmhpComplianceTxProcess+0xd8>)
 8011008:	f00f f9a0 	bl	802034c <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 801100c:	4b08      	ldr	r3, [pc, #32]	; (8011030 <LmhpComplianceTxProcess+0xdc>)
 801100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011010:	4a05      	ldr	r2, [pc, #20]	; (8011028 <LmhpComplianceTxProcess+0xd4>)
 8011012:	78d2      	ldrb	r2, [r2, #3]
 8011014:	4611      	mov	r1, r2
 8011016:	4638      	mov	r0, r7
 8011018:	2201      	movs	r2, #1
 801101a:	4798      	blx	r3
 801101c:	4603      	mov	r3, r0
}
 801101e:	4618      	mov	r0, r3
 8011020:	3708      	adds	r7, #8
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}
 8011026:	bf00      	nop
 8011028:	20000e04 	.word	0x20000e04
 801102c:	20000dec 	.word	0x20000dec
 8011030:	20000104 	.word	0x20000104

08011034 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b0a2      	sub	sp, #136	; 0x88
 8011038:	af02      	add	r7, sp, #8
 801103a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 801103c:	4ba3      	ldr	r3, [pc, #652]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 801103e:	781b      	ldrb	r3, [r3, #0]
 8011040:	f083 0301 	eor.w	r3, r3, #1
 8011044:	b2db      	uxtb	r3, r3
 8011046:	2b00      	cmp	r3, #0
 8011048:	f040 81c2 	bne.w	80113d0 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	7b5b      	ldrb	r3, [r3, #13]
 8011050:	f083 0301 	eor.w	r3, r3, #1
 8011054:	b2db      	uxtb	r3, r3
 8011056:	2b00      	cmp	r3, #0
 8011058:	f040 81bc 	bne.w	80113d4 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 801105c:	4b9b      	ldr	r3, [pc, #620]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 801105e:	785b      	ldrb	r3, [r3, #1]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d00c      	beq.n	801107e <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	7b9b      	ldrb	r3, [r3, #14]
 8011068:	f083 0301 	eor.w	r3, r3, #1
 801106c:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 801106e:	2b00      	cmp	r3, #0
 8011070:	d005      	beq.n	801107e <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 8011072:	4b96      	ldr	r3, [pc, #600]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 8011074:	899b      	ldrh	r3, [r3, #12]
 8011076:	3301      	adds	r3, #1
 8011078:	b29a      	uxth	r2, r3
 801107a:	4b94      	ldr	r3, [pc, #592]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 801107c:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	78db      	ldrb	r3, [r3, #3]
 8011082:	2be0      	cmp	r3, #224	; 0xe0
 8011084:	f040 81a8 	bne.w	80113d8 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8011088:	4b90      	ldr	r3, [pc, #576]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 801108a:	785b      	ldrb	r3, [r3, #1]
 801108c:	f083 0301 	eor.w	r3, r3, #1
 8011090:	b2db      	uxtb	r3, r3
 8011092:	2b00      	cmp	r3, #0
 8011094:	d060      	beq.n	8011158 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	7b1b      	ldrb	r3, [r3, #12]
 801109a:	2b04      	cmp	r3, #4
 801109c:	f040 81a1 	bne.w	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	689b      	ldr	r3, [r3, #8]
 80110a4:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80110a6:	2b01      	cmp	r3, #1
 80110a8:	f040 819b 	bne.w	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	689b      	ldr	r3, [r3, #8]
 80110b0:	3301      	adds	r3, #1
 80110b2:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80110b4:	2b01      	cmp	r3, #1
 80110b6:	f040 8194 	bne.w	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	689b      	ldr	r3, [r3, #8]
 80110be:	3302      	adds	r3, #2
 80110c0:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80110c2:	2b01      	cmp	r3, #1
 80110c4:	f040 818d 	bne.w	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	689b      	ldr	r3, [r3, #8]
 80110cc:	3303      	adds	r3, #3
 80110ce:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80110d0:	2b01      	cmp	r3, #1
 80110d2:	f040 8186 	bne.w	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 80110d6:	4b7d      	ldr	r3, [pc, #500]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 80110d8:	2200      	movs	r2, #0
 80110da:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 80110dc:	4b7b      	ldr	r3, [pc, #492]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 80110de:	22e0      	movs	r2, #224	; 0xe0
 80110e0:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 80110e2:	4b7a      	ldr	r3, [pc, #488]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 80110e4:	2202      	movs	r2, #2
 80110e6:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 80110e8:	4b78      	ldr	r3, [pc, #480]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 80110ea:	2200      	movs	r2, #0
 80110ec:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 80110ee:	4b77      	ldr	r3, [pc, #476]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 80110f0:	2200      	movs	r2, #0
 80110f2:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 80110f4:	4b75      	ldr	r3, [pc, #468]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 80110f6:	2200      	movs	r2, #0
 80110f8:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 80110fa:	4b74      	ldr	r3, [pc, #464]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 80110fc:	2200      	movs	r2, #0
 80110fe:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8011100:	4b72      	ldr	r3, [pc, #456]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 8011102:	2201      	movs	r2, #1
 8011104:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8011106:	4b71      	ldr	r3, [pc, #452]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 8011108:	2201      	movs	r2, #1
 801110a:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 801110c:	2304      	movs	r3, #4
 801110e:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 8011110:	2301      	movs	r3, #1
 8011112:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8011114:	f107 0308 	add.w	r3, r7, #8
 8011118:	4618      	mov	r0, r3
 801111a:	f004 f867 	bl	80151ec <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 801111e:	2000      	movs	r0, #0
 8011120:	f004 fdf4 	bl	8015d0c <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8011124:	4b6a      	ldr	r3, [pc, #424]	; (80112d0 <LmhpComplianceOnMcpsIndication+0x29c>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	685b      	ldr	r3, [r3, #4]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d003      	beq.n	8011136 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 801112e:	4b68      	ldr	r3, [pc, #416]	; (80112d0 <LmhpComplianceOnMcpsIndication+0x29c>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	685b      	ldr	r3, [r3, #4]
 8011134:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8011136:	2300      	movs	r3, #0
 8011138:	9300      	str	r3, [sp, #0]
 801113a:	4b66      	ldr	r3, [pc, #408]	; (80112d4 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801113c:	2200      	movs	r2, #0
 801113e:	f04f 31ff 	mov.w	r1, #4294967295
 8011142:	4865      	ldr	r0, [pc, #404]	; (80112d8 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8011144:	f00f f8cc 	bl	80202e0 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8011148:	f241 3188 	movw	r1, #5000	; 0x1388
 801114c:	4862      	ldr	r0, [pc, #392]	; (80112d8 <LmhpComplianceOnMcpsIndication+0x2a4>)
 801114e:	f00f f9db 	bl	8020508 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 8011152:	f7ff feff 	bl	8010f54 <LmhpComplianceTxProcess>
 8011156:	e144      	b.n	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	689b      	ldr	r3, [r3, #8]
 801115c:	781a      	ldrb	r2, [r3, #0]
 801115e:	4b5b      	ldr	r3, [pc, #364]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 8011160:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 8011162:	4b5a      	ldr	r3, [pc, #360]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 8011164:	789b      	ldrb	r3, [r3, #2]
 8011166:	2b0a      	cmp	r3, #10
 8011168:	f200 8138 	bhi.w	80113dc <LmhpComplianceOnMcpsIndication+0x3a8>
 801116c:	a201      	add	r2, pc, #4	; (adr r2, 8011174 <LmhpComplianceOnMcpsIndication+0x140>)
 801116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011172:	bf00      	nop
 8011174:	080111a1 	.word	0x080111a1
 8011178:	080111eb 	.word	0x080111eb
 801117c:	080111f3 	.word	0x080111f3
 8011180:	08011201 	.word	0x08011201
 8011184:	0801120f 	.word	0x0801120f
 8011188:	08011267 	.word	0x08011267
 801118c:	08011279 	.word	0x08011279
 8011190:	080112e1 	.word	0x080112e1
 8011194:	08011389 	.word	0x08011389
 8011198:	0801139b 	.word	0x0801139b
 801119c:	080113b5 	.word	0x080113b5
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 80111a0:	484d      	ldr	r0, [pc, #308]	; (80112d8 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80111a2:	f00f f941 	bl	8020428 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 80111a6:	4b49      	ldr	r3, [pc, #292]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 80111a8:	2200      	movs	r2, #0
 80111aa:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 80111ac:	4b47      	ldr	r3, [pc, #284]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 80111ae:	2200      	movs	r2, #0
 80111b0:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 80111b2:	2304      	movs	r3, #4
 80111b4:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80111b6:	4b46      	ldr	r3, [pc, #280]	; (80112d0 <LmhpComplianceOnMcpsIndication+0x29c>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	781b      	ldrb	r3, [r3, #0]
 80111bc:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80111be:	f107 0308 	add.w	r3, r7, #8
 80111c2:	4618      	mov	r0, r3
 80111c4:	f004 f812 	bl	80151ec <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80111c8:	4b41      	ldr	r3, [pc, #260]	; (80112d0 <LmhpComplianceOnMcpsIndication+0x29c>)
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	785b      	ldrb	r3, [r3, #1]
 80111ce:	4618      	mov	r0, r3
 80111d0:	f004 fd9c 	bl	8015d0c <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 80111d4:	4b3e      	ldr	r3, [pc, #248]	; (80112d0 <LmhpComplianceOnMcpsIndication+0x29c>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	689b      	ldr	r3, [r3, #8]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	f000 8100 	beq.w	80113e0 <LmhpComplianceOnMcpsIndication+0x3ac>
                {
                    LmhpComplianceParams->StartPeripherals( );
 80111e0:	4b3b      	ldr	r3, [pc, #236]	; (80112d0 <LmhpComplianceOnMcpsIndication+0x29c>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	689b      	ldr	r3, [r3, #8]
 80111e6:	4798      	blx	r3
                }
            }
            break;
 80111e8:	e0fa      	b.n	80113e0 <LmhpComplianceOnMcpsIndication+0x3ac>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 80111ea:	4b38      	ldr	r3, [pc, #224]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 80111ec:	2202      	movs	r2, #2
 80111ee:	719a      	strb	r2, [r3, #6]
            break;
 80111f0:	e0f7      	b.n	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 80111f2:	4b36      	ldr	r3, [pc, #216]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 80111f4:	2201      	movs	r2, #1
 80111f6:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 80111f8:	4b34      	ldr	r3, [pc, #208]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 80111fa:	2201      	movs	r2, #1
 80111fc:	709a      	strb	r2, [r3, #2]
            break;
 80111fe:	e0f0      	b.n	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 8011200:	4b32      	ldr	r3, [pc, #200]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 8011202:	2200      	movs	r2, #0
 8011204:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8011206:	4b31      	ldr	r3, [pc, #196]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 8011208:	2201      	movs	r2, #1
 801120a:	709a      	strb	r2, [r3, #2]
            break;
 801120c:	e0e9      	b.n	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	7b1a      	ldrb	r2, [r3, #12]
 8011212:	4b2e      	ldr	r3, [pc, #184]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 8011214:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 8011216:	4b2d      	ldr	r3, [pc, #180]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 8011218:	689b      	ldr	r3, [r3, #8]
 801121a:	2204      	movs	r2, #4
 801121c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 801121e:	2301      	movs	r3, #1
 8011220:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8011224:	e012      	b.n	801124c <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	689a      	ldr	r2, [r3, #8]
 801122a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801122e:	4413      	add	r3, r2
 8011230:	781a      	ldrb	r2, [r3, #0]
 8011232:	4b26      	ldr	r3, [pc, #152]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 8011234:	6899      	ldr	r1, [r3, #8]
 8011236:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801123a:	440b      	add	r3, r1
 801123c:	3201      	adds	r2, #1
 801123e:	b2d2      	uxtb	r2, r2
 8011240:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8011242:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011246:	3301      	adds	r3, #1
 8011248:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801124c:	4b1f      	ldr	r3, [pc, #124]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 801124e:	795a      	ldrb	r2, [r3, #5]
 8011250:	4b1e      	ldr	r3, [pc, #120]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 8011252:	799b      	ldrb	r3, [r3, #6]
 8011254:	4293      	cmp	r3, r2
 8011256:	bf28      	it	cs
 8011258:	4613      	movcs	r3, r2
 801125a:	b2db      	uxtb	r3, r3
 801125c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8011260:	429a      	cmp	r2, r3
 8011262:	d3e0      	bcc.n	8011226 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 8011264:	e0bd      	b.n	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 8011266:	2304      	movs	r3, #4
 8011268:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 801126c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011270:	4618      	mov	r0, r3
 8011272:	f004 fb15 	bl	80158a0 <LoRaMacMlmeRequest>
            }
            break;
 8011276:	e0b4      	b.n	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 8011278:	4817      	ldr	r0, [pc, #92]	; (80112d8 <LmhpComplianceOnMcpsIndication+0x2a4>)
 801127a:	f00f f8d5 	bl	8020428 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 801127e:	4b13      	ldr	r3, [pc, #76]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 8011280:	2200      	movs	r2, #0
 8011282:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8011284:	4b11      	ldr	r3, [pc, #68]	; (80112cc <LmhpComplianceOnMcpsIndication+0x298>)
 8011286:	2200      	movs	r2, #0
 8011288:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 801128a:	2304      	movs	r3, #4
 801128c:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 801128e:	4b10      	ldr	r3, [pc, #64]	; (80112d0 <LmhpComplianceOnMcpsIndication+0x29c>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8011296:	f107 0308 	add.w	r3, r7, #8
 801129a:	4618      	mov	r0, r3
 801129c:	f003 ffa6 	bl	80151ec <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80112a0:	4b0b      	ldr	r3, [pc, #44]	; (80112d0 <LmhpComplianceOnMcpsIndication+0x29c>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	785b      	ldrb	r3, [r3, #1]
 80112a6:	4618      	mov	r0, r3
 80112a8:	f004 fd30 	bl	8015d0c <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 80112ac:	4b08      	ldr	r3, [pc, #32]	; (80112d0 <LmhpComplianceOnMcpsIndication+0x29c>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	689b      	ldr	r3, [r3, #8]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d003      	beq.n	80112be <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 80112b6:	4b06      	ldr	r3, [pc, #24]	; (80112d0 <LmhpComplianceOnMcpsIndication+0x29c>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	689b      	ldr	r3, [r3, #8]
 80112bc:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 80112be:	4b07      	ldr	r3, [pc, #28]	; (80112dc <LmhpComplianceOnMcpsIndication+0x2a8>)
 80112c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112c2:	2101      	movs	r1, #1
 80112c4:	2002      	movs	r0, #2
 80112c6:	4798      	blx	r3
            }
            break;
 80112c8:	e08b      	b.n	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
 80112ca:	bf00      	nop
 80112cc:	20000e04 	.word	0x20000e04
 80112d0:	20000e18 	.word	0x20000e18
 80112d4:	080113f9 	.word	0x080113f9
 80112d8:	20000dec 	.word	0x20000dec
 80112dc:	20000104 	.word	0x20000104
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	7b1b      	ldrb	r3, [r3, #12]
 80112e4:	2b03      	cmp	r3, #3
 80112e6:	d113      	bne.n	8011310 <LmhpComplianceOnMcpsIndication+0x2dc>
                {
                    mlmeReq.Type = MLME_TXCW;
 80112e8:	2305      	movs	r3, #5
 80112ea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	689b      	ldr	r3, [r3, #8]
 80112f2:	3301      	adds	r3, #1
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	021b      	lsls	r3, r3, #8
 80112f8:	b21a      	sxth	r2, r3
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	689b      	ldr	r3, [r3, #8]
 80112fe:	3302      	adds	r3, #2
 8011300:	781b      	ldrb	r3, [r3, #0]
 8011302:	b21b      	sxth	r3, r3
 8011304:	4313      	orrs	r3, r2
 8011306:	b21b      	sxth	r3, r3
 8011308:	b29b      	uxth	r3, r3
 801130a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 801130e:	e032      	b.n	8011376 <LmhpComplianceOnMcpsIndication+0x342>
                }
                else if( mcpsIndication->BufferSize == 7 )
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	7b1b      	ldrb	r3, [r3, #12]
 8011314:	2b07      	cmp	r3, #7
 8011316:	d12e      	bne.n	8011376 <LmhpComplianceOnMcpsIndication+0x342>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 8011318:	2306      	movs	r3, #6
 801131a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	689b      	ldr	r3, [r3, #8]
 8011322:	3301      	adds	r3, #1
 8011324:	781b      	ldrb	r3, [r3, #0]
 8011326:	021b      	lsls	r3, r3, #8
 8011328:	b21a      	sxth	r2, r3
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	689b      	ldr	r3, [r3, #8]
 801132e:	3302      	adds	r3, #2
 8011330:	781b      	ldrb	r3, [r3, #0]
 8011332:	b21b      	sxth	r3, r3
 8011334:	4313      	orrs	r3, r2
 8011336:	b21b      	sxth	r3, r3
 8011338:	b29b      	uxth	r3, r3
 801133a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	689b      	ldr	r3, [r3, #8]
 8011342:	3303      	adds	r3, #3
 8011344:	781b      	ldrb	r3, [r3, #0]
 8011346:	041a      	lsls	r2, r3, #16
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	689b      	ldr	r3, [r3, #8]
 801134c:	3304      	adds	r3, #4
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	021b      	lsls	r3, r3, #8
 8011352:	4313      	orrs	r3, r2
 8011354:	687a      	ldr	r2, [r7, #4]
 8011356:	6892      	ldr	r2, [r2, #8]
 8011358:	3205      	adds	r2, #5
 801135a:	7812      	ldrb	r2, [r2, #0]
 801135c:	4313      	orrs	r3, r2
 801135e:	461a      	mov	r2, r3
 8011360:	2364      	movs	r3, #100	; 0x64
 8011362:	fb02 f303 	mul.w	r3, r2, r3
 8011366:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	689b      	ldr	r3, [r3, #8]
 801136c:	3306      	adds	r3, #6
 801136e:	781b      	ldrb	r3, [r3, #0]
 8011370:	b25b      	sxtb	r3, r3
 8011372:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 8011376:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801137a:	4618      	mov	r0, r3
 801137c:	f004 fa90 	bl	80158a0 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8011380:	4b19      	ldr	r3, [pc, #100]	; (80113e8 <LmhpComplianceOnMcpsIndication+0x3b4>)
 8011382:	2201      	movs	r2, #1
 8011384:	709a      	strb	r2, [r3, #2]
            }
            break;
 8011386:	e02c      	b.n	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 8011388:	230a      	movs	r3, #10
 801138a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 801138e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011392:	4618      	mov	r0, r3
 8011394:	f004 fa84 	bl	80158a0 <LoRaMacMlmeRequest>
            }
            break;
 8011398:	e023      	b.n	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 801139a:	2300      	movs	r3, #0
 801139c:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	689b      	ldr	r3, [r3, #8]
 80113a2:	3301      	adds	r3, #1
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80113a8:	f107 0308 	add.w	r3, r7, #8
 80113ac:	4618      	mov	r0, r3
 80113ae:	f003 ff1d 	bl	80151ec <LoRaMacMibSetRequestConfirm>
            }
            break;
 80113b2:	e016      	b.n	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 80113b4:	230d      	movs	r3, #13
 80113b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	689b      	ldr	r3, [r3, #8]
 80113be:	785b      	ldrb	r3, [r3, #1]
 80113c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 80113c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80113c8:	4618      	mov	r0, r3
 80113ca:	f004 fa69 	bl	80158a0 <LoRaMacMlmeRequest>
            }
            break;
 80113ce:	e008      	b.n	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 80113d0:	bf00      	nop
 80113d2:	e006      	b.n	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 80113d4:	bf00      	nop
 80113d6:	e004      	b.n	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 80113d8:	bf00      	nop
 80113da:	e002      	b.n	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
        default:
            break;
 80113dc:	bf00      	nop
 80113de:	e000      	b.n	80113e2 <LmhpComplianceOnMcpsIndication+0x3ae>
            break;
 80113e0:	bf00      	nop
        }
    }
}
 80113e2:	3780      	adds	r7, #128	; 0x80
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}
 80113e8:	20000e04 	.word	0x20000e04

080113ec <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 80113ec:	b480      	push	{r7}
 80113ee:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 80113f0:	bf00      	nop
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bc80      	pop	{r7}
 80113f6:	4770      	bx	lr

080113f8 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 8011400:	f7ff fda8 	bl	8010f54 <LmhpComplianceTxProcess>
}
 8011404:	bf00      	nop
 8011406:	3708      	adds	r7, #8
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}

0801140c <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 801140c:	b590      	push	{r4, r7, lr}
 801140e:	b083      	sub	sp, #12
 8011410:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8011412:	f00f f923 	bl	802065c <UTIL_TIMER_GetCurrentTime>
 8011416:	4603      	mov	r3, r0
 8011418:	4a16      	ldr	r2, [pc, #88]	; (8011474 <OnRadioTxDone+0x68>)
 801141a:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 801141c:	4c16      	ldr	r4, [pc, #88]	; (8011478 <OnRadioTxDone+0x6c>)
 801141e:	463b      	mov	r3, r7
 8011420:	4618      	mov	r0, r3
 8011422:	f00e fa95 	bl	801f950 <SysTimeGet>
 8011426:	f504 734e 	add.w	r3, r4, #824	; 0x338
 801142a:	463a      	mov	r2, r7
 801142c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011430:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8011434:	4a11      	ldr	r2, [pc, #68]	; (801147c <OnRadioTxDone+0x70>)
 8011436:	7813      	ldrb	r3, [r2, #0]
 8011438:	f043 0310 	orr.w	r3, r3, #16
 801143c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 801143e:	4b0e      	ldr	r3, [pc, #56]	; (8011478 <OnRadioTxDone+0x6c>)
 8011440:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011444:	2b00      	cmp	r3, #0
 8011446:	d00a      	beq.n	801145e <OnRadioTxDone+0x52>
 8011448:	4b0b      	ldr	r3, [pc, #44]	; (8011478 <OnRadioTxDone+0x6c>)
 801144a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801144e:	691b      	ldr	r3, [r3, #16]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d004      	beq.n	801145e <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8011454:	4b08      	ldr	r3, [pc, #32]	; (8011478 <OnRadioTxDone+0x6c>)
 8011456:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801145a:	691b      	ldr	r3, [r3, #16]
 801145c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 801145e:	4b08      	ldr	r3, [pc, #32]	; (8011480 <OnRadioTxDone+0x74>)
 8011460:	2201      	movs	r2, #1
 8011462:	2100      	movs	r1, #0
 8011464:	2002      	movs	r0, #2
 8011466:	f00f f9e9 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
}
 801146a:	bf00      	nop
 801146c:	370c      	adds	r7, #12
 801146e:	46bd      	mov	sp, r7
 8011470:	bd90      	pop	{r4, r7, pc}
 8011472:	bf00      	nop
 8011474:	2000217c 	.word	0x2000217c
 8011478:	20000e1c 	.word	0x20000e1c
 801147c:	20002178 	.word	0x20002178
 8011480:	08021690 	.word	0x08021690

08011484 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b084      	sub	sp, #16
 8011488:	af00      	add	r7, sp, #0
 801148a:	60f8      	str	r0, [r7, #12]
 801148c:	4608      	mov	r0, r1
 801148e:	4611      	mov	r1, r2
 8011490:	461a      	mov	r2, r3
 8011492:	4603      	mov	r3, r0
 8011494:	817b      	strh	r3, [r7, #10]
 8011496:	460b      	mov	r3, r1
 8011498:	813b      	strh	r3, [r7, #8]
 801149a:	4613      	mov	r3, r2
 801149c:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 801149e:	f00f f8dd 	bl	802065c <UTIL_TIMER_GetCurrentTime>
 80114a2:	4603      	mov	r3, r0
 80114a4:	4a16      	ldr	r2, [pc, #88]	; (8011500 <OnRadioRxDone+0x7c>)
 80114a6:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 80114a8:	4a15      	ldr	r2, [pc, #84]	; (8011500 <OnRadioRxDone+0x7c>)
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 80114ae:	4a14      	ldr	r2, [pc, #80]	; (8011500 <OnRadioRxDone+0x7c>)
 80114b0:	897b      	ldrh	r3, [r7, #10]
 80114b2:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 80114b4:	4a12      	ldr	r2, [pc, #72]	; (8011500 <OnRadioRxDone+0x7c>)
 80114b6:	893b      	ldrh	r3, [r7, #8]
 80114b8:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 80114ba:	4a11      	ldr	r2, [pc, #68]	; (8011500 <OnRadioRxDone+0x7c>)
 80114bc:	79fb      	ldrb	r3, [r7, #7]
 80114be:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 80114c0:	4a10      	ldr	r2, [pc, #64]	; (8011504 <OnRadioRxDone+0x80>)
 80114c2:	7813      	ldrb	r3, [r2, #0]
 80114c4:	f043 0308 	orr.w	r3, r3, #8
 80114c8:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80114ca:	4b0f      	ldr	r3, [pc, #60]	; (8011508 <OnRadioRxDone+0x84>)
 80114cc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d00a      	beq.n	80114ea <OnRadioRxDone+0x66>
 80114d4:	4b0c      	ldr	r3, [pc, #48]	; (8011508 <OnRadioRxDone+0x84>)
 80114d6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80114da:	691b      	ldr	r3, [r3, #16]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d004      	beq.n	80114ea <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80114e0:	4b09      	ldr	r3, [pc, #36]	; (8011508 <OnRadioRxDone+0x84>)
 80114e2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80114e6:	691b      	ldr	r3, [r3, #16]
 80114e8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 80114ea:	4b08      	ldr	r3, [pc, #32]	; (801150c <OnRadioRxDone+0x88>)
 80114ec:	2201      	movs	r2, #1
 80114ee:	2100      	movs	r1, #0
 80114f0:	2002      	movs	r0, #2
 80114f2:	f00f f9a3 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
}
 80114f6:	bf00      	nop
 80114f8:	3710      	adds	r7, #16
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	20002180 	.word	0x20002180
 8011504:	20002178 	.word	0x20002178
 8011508:	20000e1c 	.word	0x20000e1c
 801150c:	080216a0 	.word	0x080216a0

08011510 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8011510:	b580      	push	{r7, lr}
 8011512:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8011514:	4a0e      	ldr	r2, [pc, #56]	; (8011550 <OnRadioTxTimeout+0x40>)
 8011516:	7813      	ldrb	r3, [r2, #0]
 8011518:	f043 0304 	orr.w	r3, r3, #4
 801151c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 801151e:	4b0d      	ldr	r3, [pc, #52]	; (8011554 <OnRadioTxTimeout+0x44>)
 8011520:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011524:	2b00      	cmp	r3, #0
 8011526:	d00a      	beq.n	801153e <OnRadioTxTimeout+0x2e>
 8011528:	4b0a      	ldr	r3, [pc, #40]	; (8011554 <OnRadioTxTimeout+0x44>)
 801152a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801152e:	691b      	ldr	r3, [r3, #16]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d004      	beq.n	801153e <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8011534:	4b07      	ldr	r3, [pc, #28]	; (8011554 <OnRadioTxTimeout+0x44>)
 8011536:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801153a:	691b      	ldr	r3, [r3, #16]
 801153c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 801153e:	4b06      	ldr	r3, [pc, #24]	; (8011558 <OnRadioTxTimeout+0x48>)
 8011540:	2201      	movs	r2, #1
 8011542:	2100      	movs	r1, #0
 8011544:	2002      	movs	r0, #2
 8011546:	f00f f979 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
}
 801154a:	bf00      	nop
 801154c:	bd80      	pop	{r7, pc}
 801154e:	bf00      	nop
 8011550:	20002178 	.word	0x20002178
 8011554:	20000e1c 	.word	0x20000e1c
 8011558:	080216b0 	.word	0x080216b0

0801155c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 801155c:	b580      	push	{r7, lr}
 801155e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8011560:	4a0b      	ldr	r2, [pc, #44]	; (8011590 <OnRadioRxError+0x34>)
 8011562:	7813      	ldrb	r3, [r2, #0]
 8011564:	f043 0302 	orr.w	r3, r3, #2
 8011568:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 801156a:	4b0a      	ldr	r3, [pc, #40]	; (8011594 <OnRadioRxError+0x38>)
 801156c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011570:	2b00      	cmp	r3, #0
 8011572:	d00a      	beq.n	801158a <OnRadioRxError+0x2e>
 8011574:	4b07      	ldr	r3, [pc, #28]	; (8011594 <OnRadioRxError+0x38>)
 8011576:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801157a:	691b      	ldr	r3, [r3, #16]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d004      	beq.n	801158a <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8011580:	4b04      	ldr	r3, [pc, #16]	; (8011594 <OnRadioRxError+0x38>)
 8011582:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011586:	691b      	ldr	r3, [r3, #16]
 8011588:	4798      	blx	r3
    }
}
 801158a:	bf00      	nop
 801158c:	bd80      	pop	{r7, pc}
 801158e:	bf00      	nop
 8011590:	20002178 	.word	0x20002178
 8011594:	20000e1c 	.word	0x20000e1c

08011598 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8011598:	b580      	push	{r7, lr}
 801159a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 801159c:	4a0e      	ldr	r2, [pc, #56]	; (80115d8 <OnRadioRxTimeout+0x40>)
 801159e:	7813      	ldrb	r3, [r2, #0]
 80115a0:	f043 0301 	orr.w	r3, r3, #1
 80115a4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80115a6:	4b0d      	ldr	r3, [pc, #52]	; (80115dc <OnRadioRxTimeout+0x44>)
 80115a8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d00a      	beq.n	80115c6 <OnRadioRxTimeout+0x2e>
 80115b0:	4b0a      	ldr	r3, [pc, #40]	; (80115dc <OnRadioRxTimeout+0x44>)
 80115b2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80115b6:	691b      	ldr	r3, [r3, #16]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d004      	beq.n	80115c6 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80115bc:	4b07      	ldr	r3, [pc, #28]	; (80115dc <OnRadioRxTimeout+0x44>)
 80115be:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80115c2:	691b      	ldr	r3, [r3, #16]
 80115c4:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 80115c6:	4b06      	ldr	r3, [pc, #24]	; (80115e0 <OnRadioRxTimeout+0x48>)
 80115c8:	2201      	movs	r2, #1
 80115ca:	2100      	movs	r1, #0
 80115cc:	2002      	movs	r0, #2
 80115ce:	f00f f935 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
}
 80115d2:	bf00      	nop
 80115d4:	bd80      	pop	{r7, pc}
 80115d6:	bf00      	nop
 80115d8:	20002178 	.word	0x20002178
 80115dc:	20000e1c 	.word	0x20000e1c
 80115e0:	080216c0 	.word	0x080216c0

080115e4 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 80115e4:	b480      	push	{r7}
 80115e6:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80115e8:	4b08      	ldr	r3, [pc, #32]	; (801160c <UpdateRxSlotIdleState+0x28>)
 80115ea:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80115ee:	2b02      	cmp	r3, #2
 80115f0:	d004      	beq.n	80115fc <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80115f2:	4b07      	ldr	r3, [pc, #28]	; (8011610 <UpdateRxSlotIdleState+0x2c>)
 80115f4:	2206      	movs	r2, #6
 80115f6:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 80115fa:	e003      	b.n	8011604 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 80115fc:	4b04      	ldr	r3, [pc, #16]	; (8011610 <UpdateRxSlotIdleState+0x2c>)
 80115fe:	2202      	movs	r2, #2
 8011600:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
}
 8011604:	bf00      	nop
 8011606:	46bd      	mov	sp, r7
 8011608:	bc80      	pop	{r7}
 801160a:	4770      	bx	lr
 801160c:	20001328 	.word	0x20001328
 8011610:	20000e1c 	.word	0x20000e1c

08011614 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b08e      	sub	sp, #56	; 0x38
 8011618:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801161a:	4b44      	ldr	r3, [pc, #272]	; (801172c <ProcessRadioTxDone+0x118>)
 801161c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011620:	2b02      	cmp	r3, #2
 8011622:	d002      	beq.n	801162a <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8011624:	4b42      	ldr	r3, [pc, #264]	; (8011730 <ProcessRadioTxDone+0x11c>)
 8011626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011628:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 801162a:	4b42      	ldr	r3, [pc, #264]	; (8011734 <ProcessRadioTxDone+0x120>)
 801162c:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 8011630:	4619      	mov	r1, r3
 8011632:	4841      	ldr	r0, [pc, #260]	; (8011738 <ProcessRadioTxDone+0x124>)
 8011634:	f00e ff68 	bl	8020508 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8011638:	483f      	ldr	r0, [pc, #252]	; (8011738 <ProcessRadioTxDone+0x124>)
 801163a:	f00e fe87 	bl	802034c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 801163e:	4b3d      	ldr	r3, [pc, #244]	; (8011734 <ProcessRadioTxDone+0x120>)
 8011640:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8011644:	4619      	mov	r1, r3
 8011646:	483d      	ldr	r0, [pc, #244]	; (801173c <ProcessRadioTxDone+0x128>)
 8011648:	f00e ff5e 	bl	8020508 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 801164c:	483b      	ldr	r0, [pc, #236]	; (801173c <ProcessRadioTxDone+0x128>)
 801164e:	f00e fe7d 	bl	802034c <UTIL_TIMER_Start>
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8011652:	4b36      	ldr	r3, [pc, #216]	; (801172c <ProcessRadioTxDone+0x118>)
 8011654:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011658:	2b02      	cmp	r3, #2
 801165a:	d004      	beq.n	8011666 <ProcessRadioTxDone+0x52>
 801165c:	4b35      	ldr	r3, [pc, #212]	; (8011734 <ProcessRadioTxDone+0x120>)
 801165e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011662:	2b00      	cmp	r3, #0
 8011664:	d019      	beq.n	801169a <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8011666:	2316      	movs	r3, #22
 8011668:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801166c:	4b2f      	ldr	r3, [pc, #188]	; (801172c <ProcessRadioTxDone+0x118>)
 801166e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011672:	f107 0220 	add.w	r2, r7, #32
 8011676:	4611      	mov	r1, r2
 8011678:	4618      	mov	r0, r3
 801167a:	f008 f9df 	bl	8019a3c <RegionGetPhyParam>
 801167e:	4603      	mov	r3, r0
 8011680:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8011682:	4b2c      	ldr	r3, [pc, #176]	; (8011734 <ProcessRadioTxDone+0x120>)
 8011684:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8011688:	69fb      	ldr	r3, [r7, #28]
 801168a:	4413      	add	r3, r2
 801168c:	4619      	mov	r1, r3
 801168e:	482c      	ldr	r0, [pc, #176]	; (8011740 <ProcessRadioTxDone+0x12c>)
 8011690:	f00e ff3a 	bl	8020508 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8011694:	482a      	ldr	r0, [pc, #168]	; (8011740 <ProcessRadioTxDone+0x12c>)
 8011696:	f00e fe59 	bl	802034c <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 801169a:	4b2a      	ldr	r3, [pc, #168]	; (8011744 <ProcessRadioTxDone+0x130>)
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	4a23      	ldr	r2, [pc, #140]	; (801172c <ProcessRadioTxDone+0x118>)
 80116a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 80116a2:	4b24      	ldr	r3, [pc, #144]	; (8011734 <ProcessRadioTxDone+0x120>)
 80116a4:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 80116a8:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80116aa:	4b26      	ldr	r3, [pc, #152]	; (8011744 <ProcessRadioTxDone+0x130>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80116b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80116b4:	4618      	mov	r0, r3
 80116b6:	f00e f983 	bl	801f9c0 <SysTimeGetMcuTime>
 80116ba:	4638      	mov	r0, r7
 80116bc:	4b1b      	ldr	r3, [pc, #108]	; (801172c <ProcessRadioTxDone+0x118>)
 80116be:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80116c2:	9200      	str	r2, [sp, #0]
 80116c4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80116c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80116cc:	ca06      	ldmia	r2, {r1, r2}
 80116ce:	f00e f8d8 	bl	801f882 <SysTimeSub>
 80116d2:	f107 0314 	add.w	r3, r7, #20
 80116d6:	463a      	mov	r2, r7
 80116d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80116dc:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80116e0:	4b14      	ldr	r3, [pc, #80]	; (8011734 <ProcessRadioTxDone+0x120>)
 80116e2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80116e6:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 80116e8:	2301      	movs	r3, #1
 80116ea:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80116ec:	4b0f      	ldr	r3, [pc, #60]	; (801172c <ProcessRadioTxDone+0x118>)
 80116ee:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d101      	bne.n	80116fa <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 80116f6:	2300      	movs	r3, #0
 80116f8:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 80116fa:	4b0c      	ldr	r3, [pc, #48]	; (801172c <ProcessRadioTxDone+0x118>)
 80116fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011700:	f107 0208 	add.w	r2, r7, #8
 8011704:	4611      	mov	r1, r2
 8011706:	4618      	mov	r0, r3
 8011708:	f008 f9b0 	bl	8019a6c <RegionSetBandTxDone>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 801170c:	4b09      	ldr	r3, [pc, #36]	; (8011734 <ProcessRadioTxDone+0x120>)
 801170e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011712:	f083 0301 	eor.w	r3, r3, #1
 8011716:	b2db      	uxtb	r3, r3
 8011718:	2b00      	cmp	r3, #0
 801171a:	d003      	beq.n	8011724 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801171c:	4b05      	ldr	r3, [pc, #20]	; (8011734 <ProcessRadioTxDone+0x120>)
 801171e:	2200      	movs	r2, #0
 8011720:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
#endif /* LORAMAC_VERSION */
}
 8011724:	bf00      	nop
 8011726:	3730      	adds	r7, #48	; 0x30
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}
 801172c:	20001328 	.word	0x20001328
 8011730:	08021d00 	.word	0x08021d00
 8011734:	20000e1c 	.word	0x20000e1c
 8011738:	2000119c 	.word	0x2000119c
 801173c:	200011b4 	.word	0x200011b4
 8011740:	20001214 	.word	0x20001214
 8011744:	2000217c 	.word	0x2000217c

08011748 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8011748:	b580      	push	{r7, lr}
 801174a:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 801174c:	4b10      	ldr	r3, [pc, #64]	; (8011790 <PrepareRxDoneAbort+0x48>)
 801174e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011756:	4a0e      	ldr	r2, [pc, #56]	; (8011790 <PrepareRxDoneAbort+0x48>)
 8011758:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 801175c:	4b0c      	ldr	r3, [pc, #48]	; (8011790 <PrepareRxDoneAbort+0x48>)
 801175e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011762:	2b00      	cmp	r3, #0
 8011764:	d002      	beq.n	801176c <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 8011766:	2000      	movs	r0, #0
 8011768:	f001 f8f2 	bl	8012950 <OnAckTimeoutTimerEvent>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 801176c:	4a08      	ldr	r2, [pc, #32]	; (8011790 <PrepareRxDoneAbort+0x48>)
 801176e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011772:	f043 0302 	orr.w	r3, r3, #2
 8011776:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 801177a:	4a05      	ldr	r2, [pc, #20]	; (8011790 <PrepareRxDoneAbort+0x48>)
 801177c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011780:	f043 0320 	orr.w	r3, r3, #32
 8011784:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

    UpdateRxSlotIdleState( );
 8011788:	f7ff ff2c 	bl	80115e4 <UpdateRxSlotIdleState>
}
 801178c:	bf00      	nop
 801178e:	bd80      	pop	{r7, pc}
 8011790:	20000e1c 	.word	0x20000e1c

08011794 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8011794:	b5b0      	push	{r4, r5, r7, lr}
 8011796:	b0a6      	sub	sp, #152	; 0x98
 8011798:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 801179a:	2313      	movs	r3, #19
 801179c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 80117a0:	4bb9      	ldr	r3, [pc, #740]	; (8011a88 <ProcessRadioRxDone+0x2f4>)
 80117a2:	685b      	ldr	r3, [r3, #4]
 80117a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 80117a6:	4bb8      	ldr	r3, [pc, #736]	; (8011a88 <ProcessRadioRxDone+0x2f4>)
 80117a8:	891b      	ldrh	r3, [r3, #8]
 80117aa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 80117ae:	4bb6      	ldr	r3, [pc, #728]	; (8011a88 <ProcessRadioRxDone+0x2f4>)
 80117b0:	895b      	ldrh	r3, [r3, #10]
 80117b2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 80117b6:	4bb4      	ldr	r3, [pc, #720]	; (8011a88 <ProcessRadioRxDone+0x2f4>)
 80117b8:	7b1b      	ldrb	r3, [r3, #12]
 80117ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 80117be:	2300      	movs	r3, #0
 80117c0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 80117c4:	2300      	movs	r3, #0
 80117c6:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80117c8:	4bb0      	ldr	r3, [pc, #704]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 80117ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80117ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 80117d2:	2300      	movs	r3, #0
 80117d4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 80117d8:	2301      	movs	r3, #1
 80117da:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 80117de:	4bac      	ldr	r3, [pc, #688]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 80117e0:	2200      	movs	r2, #0
 80117e2:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 80117e6:	4aaa      	ldr	r2, [pc, #680]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 80117e8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80117ec:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    MacCtx.RxStatus.Snr = snr;
 80117f0:	4aa7      	ldr	r2, [pc, #668]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 80117f2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80117f6:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 80117fa:	4ba5      	ldr	r3, [pc, #660]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 80117fc:	f893 2484 	ldrb.w	r2, [r3, #1156]	; 0x484
 8011800:	4ba3      	ldr	r3, [pc, #652]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 8011802:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
    MacCtx.McpsIndication.Port = 0;
 8011806:	4ba2      	ldr	r3, [pc, #648]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 8011808:	2200      	movs	r2, #0
 801180a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 801180e:	4ba0      	ldr	r3, [pc, #640]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 8011810:	2200      	movs	r2, #0
 8011812:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 8011816:	4b9e      	ldr	r3, [pc, #632]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 8011818:	2200      	movs	r2, #0
 801181a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 801181e:	4b9c      	ldr	r3, [pc, #624]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 8011820:	2200      	movs	r2, #0
 8011822:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 8011826:	4b9a      	ldr	r3, [pc, #616]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 8011828:	2200      	movs	r2, #0
 801182a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 801182e:	4b98      	ldr	r3, [pc, #608]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 8011830:	2200      	movs	r2, #0
 8011832:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 8011836:	4b96      	ldr	r3, [pc, #600]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 8011838:	2200      	movs	r2, #0
 801183a:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 801183e:	4b94      	ldr	r3, [pc, #592]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 8011840:	2200      	movs	r2, #0
 8011842:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8011846:	4b92      	ldr	r3, [pc, #584]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 8011848:	2200      	movs	r2, #0
 801184a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 801184e:	4b90      	ldr	r3, [pc, #576]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 8011850:	2200      	movs	r2, #0
 8011852:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8011856:	4b8e      	ldr	r3, [pc, #568]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 8011858:	2200      	movs	r2, #0
 801185a:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 801185e:	4b8d      	ldr	r3, [pc, #564]	; (8011a94 <ProcessRadioRxDone+0x300>)
 8011860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011862:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011864:	488c      	ldr	r0, [pc, #560]	; (8011a98 <ProcessRadioRxDone+0x304>)
 8011866:	f00e fddf 	bl	8020428 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 801186a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801186e:	4619      	mov	r1, r3
 8011870:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8011872:	f005 fd0b 	bl	801728c <LoRaMacClassBRxBeacon>
 8011876:	4603      	mov	r3, r0
 8011878:	2b00      	cmp	r3, #0
 801187a:	d00a      	beq.n	8011892 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 801187c:	4a84      	ldr	r2, [pc, #528]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 801187e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8011882:	f8a2 3476 	strh.w	r3, [r2, #1142]	; 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8011886:	4a82      	ldr	r2, [pc, #520]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 8011888:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801188c:	f882 3478 	strb.w	r3, [r2, #1144]	; 0x478
        return;
 8011890:	e3c7      	b.n	8012022 <ProcessRadioRxDone+0x88e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011892:	4b7e      	ldr	r3, [pc, #504]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 8011894:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011898:	2b01      	cmp	r3, #1
 801189a:	d11e      	bne.n	80118da <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 801189c:	f005 fe8a 	bl	80175b4 <LoRaMacClassBIsPingExpected>
 80118a0:	4603      	mov	r3, r0
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d00a      	beq.n	80118bc <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80118a6:	2000      	movs	r0, #0
 80118a8:	f005 f856 	bl	8016958 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80118ac:	2000      	movs	r0, #0
 80118ae:	f005 fa89 	bl	8016dc4 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80118b2:	4b77      	ldr	r3, [pc, #476]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 80118b4:	2204      	movs	r2, #4
 80118b6:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 80118ba:	e00e      	b.n	80118da <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80118bc:	f005 fe8a 	bl	80175d4 <LoRaMacClassBIsMulticastExpected>
 80118c0:	4603      	mov	r3, r0
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d009      	beq.n	80118da <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80118c6:	2000      	movs	r0, #0
 80118c8:	f005 f856 	bl	8016978 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80118cc:	2000      	movs	r0, #0
 80118ce:	f005 fb83 	bl	8016fd8 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80118d2:	4b6f      	ldr	r3, [pc, #444]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 80118d4:	2205      	movs	r2, #5
 80118d6:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 80118da:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80118de:	1c5a      	adds	r2, r3, #1
 80118e0:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 80118e4:	461a      	mov	r2, r3
 80118e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80118e8:	4413      	add	r3, r2
 80118ea:	781b      	ldrb	r3, [r3, #0]
 80118ec:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 80118f0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80118f4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80118f8:	b2db      	uxtb	r3, r3
 80118fa:	3b01      	subs	r3, #1
 80118fc:	2b06      	cmp	r3, #6
 80118fe:	f200 836a 	bhi.w	8011fd6 <ProcessRadioRxDone+0x842>
 8011902:	a201      	add	r2, pc, #4	; (adr r2, 8011908 <ProcessRadioRxDone+0x174>)
 8011904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011908:	08011925 	.word	0x08011925
 801190c:	08011fd7 	.word	0x08011fd7
 8011910:	08011aa5 	.word	0x08011aa5
 8011914:	08011fd7 	.word	0x08011fd7
 8011918:	08011a9d 	.word	0x08011a9d
 801191c:	08011fd7 	.word	0x08011fd7
 8011920:	08011f7d 	.word	0x08011f7d
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8011924:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011928:	2b10      	cmp	r3, #16
 801192a:	d806      	bhi.n	801193a <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801192c:	4b58      	ldr	r3, [pc, #352]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 801192e:	2201      	movs	r2, #1
 8011930:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011934:	f7ff ff08 	bl	8011748 <PrepareRxDoneAbort>
                return;
 8011938:	e373      	b.n	8012022 <ProcessRadioRxDone+0x88e>
            }
            macMsgJoinAccept.Buffer = payload;
 801193a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801193c:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 801193e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011942:	b2db      	uxtb	r3, r3
 8011944:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011946:	4b51      	ldr	r3, [pc, #324]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 8011948:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801194c:	2b00      	cmp	r3, #0
 801194e:	d006      	beq.n	801195e <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011950:	4b4f      	ldr	r3, [pc, #316]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 8011952:	2201      	movs	r2, #1
 8011954:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011958:	f7ff fef6 	bl	8011748 <PrepareRxDoneAbort>
                return;
 801195c:	e361      	b.n	8012022 <ProcessRadioRxDone+0x88e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 801195e:	f7fe f9a3 	bl	800fca8 <SecureElementGetJoinEui>
 8011962:	4601      	mov	r1, r0
 8011964:	f107 0308 	add.w	r3, r7, #8
 8011968:	461a      	mov	r2, r3
 801196a:	20ff      	movs	r0, #255	; 0xff
 801196c:	f007 faea 	bl	8018f44 <LoRaMacCryptoHandleJoinAccept>
 8011970:	4603      	mov	r3, r0
 8011972:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8011976:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801197a:	2b00      	cmp	r3, #0
 801197c:	d172      	bne.n	8011a64 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 801197e:	7c7b      	ldrb	r3, [r7, #17]
 8011980:	461a      	mov	r2, r3
 8011982:	4b42      	ldr	r3, [pc, #264]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 8011984:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8011988:	4b40      	ldr	r3, [pc, #256]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 801198a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 801198e:	7cbb      	ldrb	r3, [r7, #18]
 8011990:	021b      	lsls	r3, r3, #8
 8011992:	4313      	orrs	r3, r2
 8011994:	4a3d      	ldr	r2, [pc, #244]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 8011996:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 801199a:	4b3c      	ldr	r3, [pc, #240]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 801199c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80119a0:	7cfb      	ldrb	r3, [r7, #19]
 80119a2:	041b      	lsls	r3, r3, #16
 80119a4:	4313      	orrs	r3, r2
 80119a6:	4a39      	ldr	r2, [pc, #228]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 80119a8:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80119ac:	697b      	ldr	r3, [r7, #20]
 80119ae:	4a37      	ldr	r2, [pc, #220]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 80119b0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80119b4:	7e3b      	ldrb	r3, [r7, #24]
 80119b6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80119ba:	b2db      	uxtb	r3, r3
 80119bc:	461a      	mov	r2, r3
 80119be:	4b33      	ldr	r3, [pc, #204]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 80119c0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80119c4:	7e3b      	ldrb	r3, [r7, #24]
 80119c6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80119ca:	b2db      	uxtb	r3, r3
 80119cc:	461a      	mov	r2, r3
 80119ce:	4b2f      	ldr	r3, [pc, #188]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 80119d0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80119d4:	7e3b      	ldrb	r3, [r7, #24]
 80119d6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80119da:	b2db      	uxtb	r3, r3
 80119dc:	461a      	mov	r2, r3
 80119de:	4b2b      	ldr	r3, [pc, #172]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 80119e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 80119e4:	7e7b      	ldrb	r3, [r7, #25]
 80119e6:	461a      	mov	r2, r3
 80119e8:	4b28      	ldr	r3, [pc, #160]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 80119ea:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 80119ec:	4b27      	ldr	r3, [pc, #156]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 80119ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d102      	bne.n	80119fa <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 80119f4:	4b25      	ldr	r3, [pc, #148]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 80119f6:	2201      	movs	r2, #1
 80119f8:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 80119fa:	4b24      	ldr	r3, [pc, #144]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 80119fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011a02:	fb02 f303 	mul.w	r3, r2, r3
 8011a06:	4a21      	ldr	r2, [pc, #132]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 8011a08:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8011a0a:	4b20      	ldr	r3, [pc, #128]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 8011a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a0e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8011a12:	4a1e      	ldr	r2, [pc, #120]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 8011a14:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8011a16:	4b1d      	ldr	r3, [pc, #116]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 8011a18:	2200      	movs	r2, #0
 8011a1a:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8011a1e:	f107 0308 	add.w	r3, r7, #8
 8011a22:	3312      	adds	r3, #18
 8011a24:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8011a26:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011a2a:	b2db      	uxtb	r3, r3
 8011a2c:	3b11      	subs	r3, #17
 8011a2e:	b2db      	uxtb	r3, r3
 8011a30:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8011a34:	4b15      	ldr	r3, [pc, #84]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 8011a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a3a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8011a3e:	4611      	mov	r1, r2
 8011a40:	4618      	mov	r0, r3
 8011a42:	f008 f84d 	bl	8019ae0 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8011a46:	4b11      	ldr	r3, [pc, #68]	; (8011a8c <ProcessRadioRxDone+0x2f8>)
 8011a48:	2202      	movs	r2, #2
 8011a4a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011a4e:	2001      	movs	r0, #1
 8011a50:	f006 fd70 	bl	8018534 <LoRaMacConfirmQueueIsCmdActive>
 8011a54:	4603      	mov	r3, r0
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d00e      	beq.n	8011a78 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8011a5a:	2101      	movs	r1, #1
 8011a5c:	2000      	movs	r0, #0
 8011a5e:	f006 fcdd 	bl	801841c <LoRaMacConfirmQueueSetStatus>
 8011a62:	e009      	b.n	8011a78 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011a64:	2001      	movs	r0, #1
 8011a66:	f006 fd65 	bl	8018534 <LoRaMacConfirmQueueIsCmdActive>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d003      	beq.n	8011a78 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8011a70:	2101      	movs	r1, #1
 8011a72:	2007      	movs	r0, #7
 8011a74:	f006 fcd2 	bl	801841c <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8011a78:	4a05      	ldr	r2, [pc, #20]	; (8011a90 <ProcessRadioRxDone+0x2fc>)
 8011a7a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011a7e:	f043 0308 	orr.w	r3, r3, #8
 8011a82:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 8011a86:	e2ad      	b.n	8011fe4 <ProcessRadioRxDone+0x850>
 8011a88:	20002180 	.word	0x20002180
 8011a8c:	20001328 	.word	0x20001328
 8011a90:	20000e1c 	.word	0x20000e1c
 8011a94:	08021d00 	.word	0x08021d00
 8011a98:	200011b4 	.word	0x200011b4
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8011a9c:	4bb0      	ldr	r3, [pc, #704]	; (8011d60 <ProcessRadioRxDone+0x5cc>)
 8011a9e:	2201      	movs	r2, #1
 8011aa0:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011aa4:	4baf      	ldr	r3, [pc, #700]	; (8011d64 <ProcessRadioRxDone+0x5d0>)
 8011aa6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011aaa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8011aae:	4bac      	ldr	r3, [pc, #688]	; (8011d60 <ProcessRadioRxDone+0x5cc>)
 8011ab0:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8011ab4:	b25b      	sxtb	r3, r3
 8011ab6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8011aba:	230d      	movs	r3, #13
 8011abc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8011ac0:	4ba8      	ldr	r3, [pc, #672]	; (8011d64 <ProcessRadioRxDone+0x5d0>)
 8011ac2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d002      	beq.n	8011ad0 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8011aca:	230e      	movs	r3, #14
 8011acc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ad0:	4ba4      	ldr	r3, [pc, #656]	; (8011d64 <ProcessRadioRxDone+0x5d0>)
 8011ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ad6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8011ada:	4611      	mov	r1, r2
 8011adc:	4618      	mov	r0, r3
 8011ade:	f007 ffad 	bl	8019a3c <RegionGetPhyParam>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8011ae6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011aea:	3b0d      	subs	r3, #13
 8011aec:	b29b      	uxth	r3, r3
 8011aee:	b21b      	sxth	r3, r3
 8011af0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011af4:	b21a      	sxth	r2, r3
 8011af6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011af8:	b21b      	sxth	r3, r3
 8011afa:	429a      	cmp	r2, r3
 8011afc:	dc03      	bgt.n	8011b06 <ProcessRadioRxDone+0x372>
 8011afe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011b02:	2b0b      	cmp	r3, #11
 8011b04:	d806      	bhi.n	8011b14 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011b06:	4b96      	ldr	r3, [pc, #600]	; (8011d60 <ProcessRadioRxDone+0x5cc>)
 8011b08:	2201      	movs	r2, #1
 8011b0a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011b0e:	f7ff fe1b 	bl	8011748 <PrepareRxDoneAbort>
                return;
 8011b12:	e286      	b.n	8012022 <ProcessRadioRxDone+0x88e>
            }
            macMsgData.Buffer = payload;
 8011b14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b16:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 8011b18:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8011b22:	4b91      	ldr	r3, [pc, #580]	; (8011d68 <ProcessRadioRxDone+0x5d4>)
 8011b24:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8011b26:	23ff      	movs	r3, #255	; 0xff
 8011b28:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8011b2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011b30:	4618      	mov	r0, r3
 8011b32:	f007 fd06 	bl	8019542 <LoRaMacParserData>
 8011b36:	4603      	mov	r3, r0
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d006      	beq.n	8011b4a <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011b3c:	4b88      	ldr	r3, [pc, #544]	; (8011d60 <ProcessRadioRxDone+0x5cc>)
 8011b3e:	2201      	movs	r2, #1
 8011b40:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011b44:	f7ff fe00 	bl	8011748 <PrepareRxDoneAbort>
                return;
 8011b48:	e26b      	b.n	8012022 <ProcessRadioRxDone+0x88e>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8011b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b4c:	4a84      	ldr	r2, [pc, #528]	; (8011d60 <ProcessRadioRxDone+0x5cc>)
 8011b4e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8011b52:	1cba      	adds	r2, r7, #2
 8011b54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011b58:	4611      	mov	r1, r2
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f002 fc9e 	bl	801449c <DetermineFrameType>
 8011b60:	4603      	mov	r3, r0
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d006      	beq.n	8011b74 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011b66:	4b7e      	ldr	r3, [pc, #504]	; (8011d60 <ProcessRadioRxDone+0x5cc>)
 8011b68:	2201      	movs	r2, #1
 8011b6a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011b6e:	f7ff fdeb 	bl	8011748 <PrepareRxDoneAbort>
                return;
 8011b72:	e256      	b.n	8012022 <ProcessRadioRxDone+0x88e>
            }

            //Check if it is a multicast message
            multicast = 0;
 8011b74:	2300      	movs	r3, #0
 8011b76:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011b7e:	2300      	movs	r3, #0
 8011b80:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8011b84:	e049      	b.n	8011c1a <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8011b86:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011b8a:	4a76      	ldr	r2, [pc, #472]	; (8011d64 <ProcessRadioRxDone+0x5d0>)
 8011b8c:	212c      	movs	r1, #44	; 0x2c
 8011b8e:	fb01 f303 	mul.w	r3, r1, r3
 8011b92:	4413      	add	r3, r2
 8011b94:	33dc      	adds	r3, #220	; 0xdc
 8011b96:	681a      	ldr	r2, [r3, #0]
 8011b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d138      	bne.n	8011c10 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8011b9e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011ba2:	4a70      	ldr	r2, [pc, #448]	; (8011d64 <ProcessRadioRxDone+0x5d0>)
 8011ba4:	212c      	movs	r1, #44	; 0x2c
 8011ba6:	fb01 f303 	mul.w	r3, r1, r3
 8011baa:	4413      	add	r3, r2
 8011bac:	33da      	adds	r3, #218	; 0xda
 8011bae:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d02d      	beq.n	8011c10 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 8011bb4:	2301      	movs	r3, #1
 8011bb6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8011bba:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011bbe:	4a69      	ldr	r2, [pc, #420]	; (8011d64 <ProcessRadioRxDone+0x5d0>)
 8011bc0:	212c      	movs	r1, #44	; 0x2c
 8011bc2:	fb01 f303 	mul.w	r3, r1, r3
 8011bc6:	4413      	add	r3, r2
 8011bc8:	33db      	adds	r3, #219	; 0xdb
 8011bca:	781b      	ldrb	r3, [r3, #0]
 8011bcc:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8011bd0:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011bd4:	4a63      	ldr	r2, [pc, #396]	; (8011d64 <ProcessRadioRxDone+0x5d0>)
 8011bd6:	212c      	movs	r1, #44	; 0x2c
 8011bd8:	fb01 f303 	mul.w	r3, r1, r3
 8011bdc:	4413      	add	r3, r2
 8011bde:	33f8      	adds	r3, #248	; 0xf8
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8011be6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011bea:	4a5e      	ldr	r2, [pc, #376]	; (8011d64 <ProcessRadioRxDone+0x5d0>)
 8011bec:	212c      	movs	r1, #44	; 0x2c
 8011bee:	fb01 f303 	mul.w	r3, r1, r3
 8011bf2:	4413      	add	r3, r2
 8011bf4:	33dc      	adds	r3, #220	; 0xdc
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011bfc:	4b59      	ldr	r3, [pc, #356]	; (8011d64 <ProcessRadioRxDone+0x5d0>)
 8011bfe:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011c02:	2b02      	cmp	r3, #2
 8011c04:	d10e      	bne.n	8011c24 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8011c06:	4b56      	ldr	r3, [pc, #344]	; (8011d60 <ProcessRadioRxDone+0x5cc>)
 8011c08:	2203      	movs	r2, #3
 8011c0a:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
                    }
                    break;
 8011c0e:	e009      	b.n	8011c24 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011c10:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011c14:	3301      	adds	r3, #1
 8011c16:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8011c1a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d0b1      	beq.n	8011b86 <ProcessRadioRxDone+0x3f2>
 8011c22:	e000      	b.n	8011c26 <ProcessRadioRxDone+0x492>
                    break;
 8011c24:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8011c26:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8011c2a:	2b01      	cmp	r3, #1
 8011c2c:	d117      	bne.n	8011c5e <ProcessRadioRxDone+0x4ca>
 8011c2e:	78bb      	ldrb	r3, [r7, #2]
 8011c30:	2b03      	cmp	r3, #3
 8011c32:	d10d      	bne.n	8011c50 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8011c34:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011c38:	f003 0320 	and.w	r3, r3, #32
 8011c3c:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d106      	bne.n	8011c50 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 8011c42:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c4a:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d006      	beq.n	8011c5e <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011c50:	4b43      	ldr	r3, [pc, #268]	; (8011d60 <ProcessRadioRxDone+0x5cc>)
 8011c52:	2201      	movs	r2, #1
 8011c54:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011c58:	f7ff fd76 	bl	8011748 <PrepareRxDoneAbort>
                return;
 8011c5c:	e1e1      	b.n	8012022 <ProcessRadioRxDone+0x88e>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8011c5e:	2315      	movs	r3, #21
 8011c60:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c64:	4b3f      	ldr	r3, [pc, #252]	; (8011d64 <ProcessRadioRxDone+0x5d0>)
 8011c66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c6a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8011c6e:	4611      	mov	r1, r2
 8011c70:	4618      	mov	r0, r3
 8011c72:	f007 fee3 	bl	8019a3c <RegionGetPhyParam>
 8011c76:	4603      	mov	r3, r0
 8011c78:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 8011c7a:	78b9      	ldrb	r1, [r7, #2]
 8011c7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c7e:	b29b      	uxth	r3, r3
 8011c80:	4d38      	ldr	r5, [pc, #224]	; (8011d64 <ProcessRadioRxDone+0x5d0>)
 8011c82:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8011c86:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 8011c8a:	1d3a      	adds	r2, r7, #4
 8011c8c:	9202      	str	r2, [sp, #8]
 8011c8e:	1cfa      	adds	r2, r7, #3
 8011c90:	9201      	str	r2, [sp, #4]
 8011c92:	9300      	str	r3, [sp, #0]
 8011c94:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 8011c98:	4622      	mov	r2, r4
 8011c9a:	f000 fe8f 	bl	80129bc <GetFCntDown>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011ca4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d035      	beq.n	8011d18 <ProcessRadioRxDone+0x584>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8011cac:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011cb0:	2b07      	cmp	r3, #7
 8011cb2:	d119      	bne.n	8011ce8 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8011cb4:	4b2a      	ldr	r3, [pc, #168]	; (8011d60 <ProcessRadioRxDone+0x5cc>)
 8011cb6:	2208      	movs	r2, #8
 8011cb8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8011cbc:	4b29      	ldr	r3, [pc, #164]	; (8011d64 <ProcessRadioRxDone+0x5d0>)
 8011cbe:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d11d      	bne.n	8011d02 <ProcessRadioRxDone+0x56e>
 8011cc6:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8011cca:	f023 031f 	bic.w	r3, r3, #31
 8011cce:	b2db      	uxtb	r3, r3
 8011cd0:	2ba0      	cmp	r3, #160	; 0xa0
 8011cd2:	d116      	bne.n	8011d02 <ProcessRadioRxDone+0x56e>
 8011cd4:	4b23      	ldr	r3, [pc, #140]	; (8011d64 <ProcessRadioRxDone+0x5d0>)
 8011cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cda:	429a      	cmp	r2, r3
 8011cdc:	d111      	bne.n	8011d02 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 8011cde:	4b21      	ldr	r3, [pc, #132]	; (8011d64 <ProcessRadioRxDone+0x5d0>)
 8011ce0:	2201      	movs	r2, #1
 8011ce2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8011ce6:	e00c      	b.n	8011d02 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8011ce8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011cec:	2b08      	cmp	r3, #8
 8011cee:	d104      	bne.n	8011cfa <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8011cf0:	4b1b      	ldr	r3, [pc, #108]	; (8011d60 <ProcessRadioRxDone+0x5cc>)
 8011cf2:	220a      	movs	r2, #10
 8011cf4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8011cf8:	e003      	b.n	8011d02 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011cfa:	4b19      	ldr	r3, [pc, #100]	; (8011d60 <ProcessRadioRxDone+0x5cc>)
 8011cfc:	2201      	movs	r2, #1
 8011cfe:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	4a16      	ldr	r2, [pc, #88]	; (8011d60 <ProcessRadioRxDone+0x5cc>)
 8011d06:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	4a14      	ldr	r2, [pc, #80]	; (8011d60 <ProcessRadioRxDone+0x5cc>)
 8011d0e:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
                PrepareRxDoneAbort( );
 8011d12:	f7ff fd19 	bl	8011748 <PrepareRxDoneAbort>
                return;
 8011d16:	e184      	b.n	8012022 <ProcessRadioRxDone+0x88e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8011d18:	78fa      	ldrb	r2, [r7, #3]
 8011d1a:	6879      	ldr	r1, [r7, #4]
 8011d1c:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 8011d20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011d24:	9300      	str	r3, [sp, #0]
 8011d26:	460b      	mov	r3, r1
 8011d28:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8011d2c:	f007 fa56 	bl	80191dc <LoRaMacCryptoUnsecureMessage>
 8011d30:	4603      	mov	r3, r0
 8011d32:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011d36:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d016      	beq.n	8011d6c <ProcessRadioRxDone+0x5d8>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8011d3e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011d42:	2b02      	cmp	r3, #2
 8011d44:	d104      	bne.n	8011d50 <ProcessRadioRxDone+0x5bc>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8011d46:	4b06      	ldr	r3, [pc, #24]	; (8011d60 <ProcessRadioRxDone+0x5cc>)
 8011d48:	220b      	movs	r2, #11
 8011d4a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8011d4e:	e003      	b.n	8011d58 <ProcessRadioRxDone+0x5c4>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8011d50:	4b03      	ldr	r3, [pc, #12]	; (8011d60 <ProcessRadioRxDone+0x5cc>)
 8011d52:	220c      	movs	r2, #12
 8011d54:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 8011d58:	f7ff fcf6 	bl	8011748 <PrepareRxDoneAbort>
                return;
 8011d5c:	e161      	b.n	8012022 <ProcessRadioRxDone+0x88e>
 8011d5e:	bf00      	nop
 8011d60:	20000e1c 	.word	0x20000e1c
 8011d64:	20001328 	.word	0x20001328
 8011d68:	20001054 	.word	0x20001054
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011d6c:	4bae      	ldr	r3, [pc, #696]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011d6e:	2200      	movs	r2, #0
 8011d70:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 8011d74:	4aac      	ldr	r2, [pc, #688]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011d76:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8011d7a:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8011d7e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011d82:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8011d86:	b2db      	uxtb	r3, r3
 8011d88:	461a      	mov	r2, r3
 8011d8a:	4ba7      	ldr	r3, [pc, #668]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011d8c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 8011d90:	4ba5      	ldr	r3, [pc, #660]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011d92:	2200      	movs	r2, #0
 8011d94:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 8011d98:	4ba3      	ldr	r3, [pc, #652]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	4aa1      	ldr	r2, [pc, #644]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011da4:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	4a9f      	ldr	r2, [pc, #636]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011dac:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8011db0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011db4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011db8:	b2db      	uxtb	r3, r3
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	bf14      	ite	ne
 8011dbe:	2301      	movne	r3, #1
 8011dc0:	2300      	moveq	r3, #0
 8011dc2:	b2da      	uxtb	r2, r3
 8011dc4:	4b98      	ldr	r3, [pc, #608]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011dc6:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011dca:	4b97      	ldr	r3, [pc, #604]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011dcc:	2200      	movs	r2, #0
 8011dce:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8011dd2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011dd6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011dda:	b2db      	uxtb	r3, r3
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	bf14      	ite	ne
 8011de0:	2301      	movne	r3, #1
 8011de2:	2300      	moveq	r3, #0
 8011de4:	b2da      	uxtb	r2, r3
 8011de6:	4b90      	ldr	r3, [pc, #576]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011de8:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011dec:	4b8e      	ldr	r3, [pc, #568]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011dee:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d004      	beq.n	8011e00 <ProcessRadioRxDone+0x66c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011df6:	4b8c      	ldr	r3, [pc, #560]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011df8:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011dfc:	2b01      	cmp	r3, #1
 8011dfe:	d102      	bne.n	8011e06 <ProcessRadioRxDone+0x672>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8011e00:	4b8a      	ldr	r3, [pc, #552]	; (801202c <ProcessRadioRxDone+0x898>)
 8011e02:	2200      	movs	r2, #0
 8011e04:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8011e06:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8011e0a:	2b01      	cmp	r3, #1
 8011e0c:	d104      	bne.n	8011e18 <ProcessRadioRxDone+0x684>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8011e0e:	4b86      	ldr	r3, [pc, #536]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011e10:	2202      	movs	r2, #2
 8011e12:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8011e16:	e01f      	b.n	8011e58 <ProcessRadioRxDone+0x6c4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8011e18:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8011e1c:	f023 031f 	bic.w	r3, r3, #31
 8011e20:	b2db      	uxtb	r3, r3
 8011e22:	2ba0      	cmp	r3, #160	; 0xa0
 8011e24:	d110      	bne.n	8011e48 <ProcessRadioRxDone+0x6b4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8011e26:	4b81      	ldr	r3, [pc, #516]	; (801202c <ProcessRadioRxDone+0x898>)
 8011e28:	2201      	movs	r2, #1
 8011e2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011e2e:	4b7f      	ldr	r3, [pc, #508]	; (801202c <ProcessRadioRxDone+0x898>)
 8011e30:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d102      	bne.n	8011e3e <ProcessRadioRxDone+0x6aa>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8011e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e3a:	4a7c      	ldr	r2, [pc, #496]	; (801202c <ProcessRadioRxDone+0x898>)
 8011e3c:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8011e3e:	4b7a      	ldr	r3, [pc, #488]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011e40:	2201      	movs	r2, #1
 8011e42:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8011e46:	e007      	b.n	8011e58 <ProcessRadioRxDone+0x6c4>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8011e48:	4b78      	ldr	r3, [pc, #480]	; (801202c <ProcessRadioRxDone+0x898>)
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8011e50:	4b75      	ldr	r3, [pc, #468]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011e52:	2200      	movs	r2, #0
 8011e54:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8011e58:	4b73      	ldr	r3, [pc, #460]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011e5a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8011e5e:	4a72      	ldr	r2, [pc, #456]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011e60:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 8011e64:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f001 fee9 	bl	8013c40 <RemoveMacCommands>

            switch( fType )
 8011e6e:	78bb      	ldrb	r3, [r7, #2]
 8011e70:	2b03      	cmp	r3, #3
 8011e72:	d874      	bhi.n	8011f5e <ProcessRadioRxDone+0x7ca>
 8011e74:	a201      	add	r2, pc, #4	; (adr r2, 8011e7c <ProcessRadioRxDone+0x6e8>)
 8011e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e7a:	bf00      	nop
 8011e7c:	08011e8d 	.word	0x08011e8d
 8011e80:	08011edd 	.word	0x08011edd
 8011e84:	08011f13 	.word	0x08011f13
 8011e88:	08011f39 	.word	0x08011f39
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011e8c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011e90:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011e94:	b2db      	uxtb	r3, r3
 8011e96:	461c      	mov	r4, r3
 8011e98:	4b63      	ldr	r3, [pc, #396]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011e9a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8011e9e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8011ea2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011ea6:	f102 0010 	add.w	r0, r2, #16
 8011eaa:	9300      	str	r3, [sp, #0]
 8011eac:	460b      	mov	r3, r1
 8011eae:	4622      	mov	r2, r4
 8011eb0:	2100      	movs	r1, #0
 8011eb2:	f000 fee5 	bl	8012c80 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011eb6:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8011eba:	4b5b      	ldr	r3, [pc, #364]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011ebc:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ec2:	4a59      	ldr	r2, [pc, #356]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011ec4:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011ec8:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8011ecc:	4b56      	ldr	r3, [pc, #344]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011ece:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8011ed2:	4b55      	ldr	r3, [pc, #340]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011ed4:	2201      	movs	r2, #1
 8011ed6:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8011eda:	e047      	b.n	8011f6c <ProcessRadioRxDone+0x7d8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011edc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011ee0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011ee4:	b2db      	uxtb	r3, r3
 8011ee6:	461c      	mov	r4, r3
 8011ee8:	4b4f      	ldr	r3, [pc, #316]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011eea:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8011eee:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8011ef2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011ef6:	f102 0010 	add.w	r0, r2, #16
 8011efa:	9300      	str	r3, [sp, #0]
 8011efc:	460b      	mov	r3, r1
 8011efe:	4622      	mov	r2, r4
 8011f00:	2100      	movs	r1, #0
 8011f02:	f000 febd 	bl	8012c80 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011f06:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8011f0a:	4b47      	ldr	r3, [pc, #284]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011f0c:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 8011f10:	e02c      	b.n	8011f6c <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8011f12:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011f14:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8011f18:	4b43      	ldr	r3, [pc, #268]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011f1a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8011f1e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8011f22:	9300      	str	r3, [sp, #0]
 8011f24:	460b      	mov	r3, r1
 8011f26:	2100      	movs	r1, #0
 8011f28:	f000 feaa 	bl	8012c80 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011f2c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8011f30:	4b3d      	ldr	r3, [pc, #244]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011f32:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 8011f36:	e019      	b.n	8011f6c <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011f38:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8011f3c:	4b3a      	ldr	r3, [pc, #232]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011f3e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f44:	4a38      	ldr	r2, [pc, #224]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011f46:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011f4a:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8011f4e:	4b36      	ldr	r3, [pc, #216]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011f50:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8011f54:	4b34      	ldr	r3, [pc, #208]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011f56:	2201      	movs	r2, #1
 8011f58:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8011f5c:	e006      	b.n	8011f6c <ProcessRadioRxDone+0x7d8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011f5e:	4b32      	ldr	r3, [pc, #200]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011f60:	2201      	movs	r2, #1
 8011f62:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 8011f66:	f7ff fbef 	bl	8011748 <PrepareRxDoneAbort>
                    break;
 8011f6a:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011f6c:	4a2e      	ldr	r2, [pc, #184]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011f6e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011f72:	f043 0302 	orr.w	r3, r3, #2
 8011f76:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

            break;
 8011f7a:	e033      	b.n	8011fe4 <ProcessRadioRxDone+0x850>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8011f7c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011f80:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011f82:	18d1      	adds	r1, r2, r3
 8011f84:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011f88:	b29b      	uxth	r3, r3
 8011f8a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8011f8e:	1ad3      	subs	r3, r2, r3
 8011f90:	b29b      	uxth	r3, r3
 8011f92:	461a      	mov	r2, r3
 8011f94:	4826      	ldr	r0, [pc, #152]	; (8012030 <ProcessRadioRxDone+0x89c>)
 8011f96:	f00a f8fc 	bl	801c192 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8011f9a:	4b23      	ldr	r3, [pc, #140]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011f9c:	2203      	movs	r2, #3
 8011f9e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011fa2:	4b21      	ldr	r3, [pc, #132]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8011faa:	4b1f      	ldr	r3, [pc, #124]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011fac:	4a20      	ldr	r2, [pc, #128]	; (8012030 <ProcessRadioRxDone+0x89c>)
 8011fae:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8011fb2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011fb6:	b2da      	uxtb	r2, r3
 8011fb8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011fbc:	1ad3      	subs	r3, r2, r3
 8011fbe:	b2da      	uxtb	r2, r3
 8011fc0:	4b19      	ldr	r3, [pc, #100]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011fc2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011fc6:	4a18      	ldr	r2, [pc, #96]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011fc8:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011fcc:	f043 0302 	orr.w	r3, r3, #2
 8011fd0:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 8011fd4:	e006      	b.n	8011fe4 <ProcessRadioRxDone+0x850>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011fd6:	4b14      	ldr	r3, [pc, #80]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011fd8:	2201      	movs	r2, #1
 8011fda:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 8011fde:	f7ff fbb3 	bl	8011748 <PrepareRxDoneAbort>
            break;
 8011fe2:	bf00      	nop
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 8011fe4:	4b10      	ldr	r3, [pc, #64]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011fe6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d008      	beq.n	8012000 <ProcessRadioRxDone+0x86c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011fee:	4b0e      	ldr	r3, [pc, #56]	; (8012028 <ProcessRadioRxDone+0x894>)
 8011ff0:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d00b      	beq.n	8012010 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 8011ff8:	2000      	movs	r0, #0
 8011ffa:	f000 fca9 	bl	8012950 <OnAckTimeoutTimerEvent>
 8011ffe:	e007      	b.n	8012010 <ProcessRadioRxDone+0x87c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8012000:	4b0a      	ldr	r3, [pc, #40]	; (801202c <ProcessRadioRxDone+0x898>)
 8012002:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012006:	2b02      	cmp	r3, #2
 8012008:	d102      	bne.n	8012010 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 801200a:	2000      	movs	r0, #0
 801200c:	f000 fca0 	bl	8012950 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8012010:	4a05      	ldr	r2, [pc, #20]	; (8012028 <ProcessRadioRxDone+0x894>)
 8012012:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8012016:	f043 0320 	orr.w	r3, r3, #32
 801201a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 801201e:	f7ff fae1 	bl	80115e4 <UpdateRxSlotIdleState>
}
 8012022:	3788      	adds	r7, #136	; 0x88
 8012024:	46bd      	mov	sp, r7
 8012026:	bdb0      	pop	{r4, r5, r7, pc}
 8012028:	20000e1c 	.word	0x20000e1c
 801202c:	20001328 	.word	0x20001328
 8012030:	20001054 	.word	0x20001054

08012034 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8012034:	b580      	push	{r7, lr}
 8012036:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8012038:	4b11      	ldr	r3, [pc, #68]	; (8012080 <ProcessRadioTxTimeout+0x4c>)
 801203a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801203e:	2b02      	cmp	r3, #2
 8012040:	d002      	beq.n	8012048 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8012042:	4b10      	ldr	r3, [pc, #64]	; (8012084 <ProcessRadioTxTimeout+0x50>)
 8012044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012046:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8012048:	f7ff facc 	bl	80115e4 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 801204c:	4b0e      	ldr	r3, [pc, #56]	; (8012088 <ProcessRadioTxTimeout+0x54>)
 801204e:	2202      	movs	r2, #2
 8012050:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8012054:	2002      	movs	r0, #2
 8012056:	f006 fa39 	bl	80184cc <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 801205a:	4b0b      	ldr	r3, [pc, #44]	; (8012088 <ProcessRadioTxTimeout+0x54>)
 801205c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8012060:	2b00      	cmp	r3, #0
 8012062:	d003      	beq.n	801206c <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 8012064:	4b08      	ldr	r3, [pc, #32]	; (8012088 <ProcessRadioTxTimeout+0x54>)
 8012066:	2201      	movs	r2, #1
 8012068:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 801206c:	4a06      	ldr	r2, [pc, #24]	; (8012088 <ProcessRadioTxTimeout+0x54>)
 801206e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8012072:	f043 0320 	orr.w	r3, r3, #32
 8012076:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
}
 801207a:	bf00      	nop
 801207c:	bd80      	pop	{r7, pc}
 801207e:	bf00      	nop
 8012080:	20001328 	.word	0x20001328
 8012084:	08021d00 	.word	0x08021d00
 8012088:	20000e1c 	.word	0x20000e1c

0801208c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b084      	sub	sp, #16
 8012090:	af00      	add	r7, sp, #0
 8012092:	4603      	mov	r3, r0
 8012094:	460a      	mov	r2, r1
 8012096:	71fb      	strb	r3, [r7, #7]
 8012098:	4613      	mov	r3, r2
 801209a:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 801209c:	2300      	movs	r3, #0
 801209e:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80120a0:	4b40      	ldr	r3, [pc, #256]	; (80121a4 <HandleRadioRxErrorTimeout+0x118>)
 80120a2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80120a6:	2b02      	cmp	r3, #2
 80120a8:	d002      	beq.n	80120b0 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 80120aa:	4b3f      	ldr	r3, [pc, #252]	; (80121a8 <HandleRadioRxErrorTimeout+0x11c>)
 80120ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120ae:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80120b0:	f005 fa68 	bl	8017584 <LoRaMacClassBIsBeaconExpected>
 80120b4:	4603      	mov	r3, r0
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d007      	beq.n	80120ca <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80120ba:	2002      	movs	r0, #2
 80120bc:	f004 fc16 	bl	80168ec <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80120c0:	2000      	movs	r0, #0
 80120c2:	f004 fc7f 	bl	80169c4 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 80120c6:	2301      	movs	r3, #1
 80120c8:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80120ca:	4b36      	ldr	r3, [pc, #216]	; (80121a4 <HandleRadioRxErrorTimeout+0x118>)
 80120cc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80120d0:	2b01      	cmp	r3, #1
 80120d2:	d119      	bne.n	8012108 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80120d4:	f005 fa6e 	bl	80175b4 <LoRaMacClassBIsPingExpected>
 80120d8:	4603      	mov	r3, r0
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d007      	beq.n	80120ee <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80120de:	2000      	movs	r0, #0
 80120e0:	f004 fc3a 	bl	8016958 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80120e4:	2000      	movs	r0, #0
 80120e6:	f004 fe6d 	bl	8016dc4 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80120ea:	2301      	movs	r3, #1
 80120ec:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80120ee:	f005 fa71 	bl	80175d4 <LoRaMacClassBIsMulticastExpected>
 80120f2:	4603      	mov	r3, r0
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d007      	beq.n	8012108 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80120f8:	2000      	movs	r0, #0
 80120fa:	f004 fc3d 	bl	8016978 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80120fe:	2000      	movs	r0, #0
 8012100:	f004 ff6a 	bl	8016fd8 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8012104:	2301      	movs	r3, #1
 8012106:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8012108:	7bfb      	ldrb	r3, [r7, #15]
 801210a:	f083 0301 	eor.w	r3, r3, #1
 801210e:	b2db      	uxtb	r3, r3
 8012110:	2b00      	cmp	r3, #0
 8012112:	d040      	beq.n	8012196 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8012114:	4b25      	ldr	r3, [pc, #148]	; (80121ac <HandleRadioRxErrorTimeout+0x120>)
 8012116:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 801211a:	2b00      	cmp	r3, #0
 801211c:	d122      	bne.n	8012164 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 801211e:	4b23      	ldr	r3, [pc, #140]	; (80121ac <HandleRadioRxErrorTimeout+0x120>)
 8012120:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8012124:	2b00      	cmp	r3, #0
 8012126:	d003      	beq.n	8012130 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8012128:	4a20      	ldr	r2, [pc, #128]	; (80121ac <HandleRadioRxErrorTimeout+0x120>)
 801212a:	79fb      	ldrb	r3, [r7, #7]
 801212c:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8012130:	79fb      	ldrb	r3, [r7, #7]
 8012132:	4618      	mov	r0, r3
 8012134:	f006 f9ca 	bl	80184cc <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8012138:	4b1a      	ldr	r3, [pc, #104]	; (80121a4 <HandleRadioRxErrorTimeout+0x118>)
 801213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801213c:	4618      	mov	r0, r3
 801213e:	f00e fa9f 	bl	8020680 <UTIL_TIMER_GetElapsedTime>
 8012142:	4602      	mov	r2, r0
 8012144:	4b19      	ldr	r3, [pc, #100]	; (80121ac <HandleRadioRxErrorTimeout+0x120>)
 8012146:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 801214a:	429a      	cmp	r2, r3
 801214c:	d323      	bcc.n	8012196 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 801214e:	4818      	ldr	r0, [pc, #96]	; (80121b0 <HandleRadioRxErrorTimeout+0x124>)
 8012150:	f00e f96a 	bl	8020428 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8012154:	4a15      	ldr	r2, [pc, #84]	; (80121ac <HandleRadioRxErrorTimeout+0x120>)
 8012156:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801215a:	f043 0320 	orr.w	r3, r3, #32
 801215e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8012162:	e018      	b.n	8012196 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8012164:	4b11      	ldr	r3, [pc, #68]	; (80121ac <HandleRadioRxErrorTimeout+0x120>)
 8012166:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801216a:	2b00      	cmp	r3, #0
 801216c:	d003      	beq.n	8012176 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 801216e:	4a0f      	ldr	r2, [pc, #60]	; (80121ac <HandleRadioRxErrorTimeout+0x120>)
 8012170:	79bb      	ldrb	r3, [r7, #6]
 8012172:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8012176:	79bb      	ldrb	r3, [r7, #6]
 8012178:	4618      	mov	r0, r3
 801217a:	f006 f9a7 	bl	80184cc <LoRaMacConfirmQueueSetStatusCmn>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801217e:	4b09      	ldr	r3, [pc, #36]	; (80121a4 <HandleRadioRxErrorTimeout+0x118>)
 8012180:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012184:	2b02      	cmp	r3, #2
 8012186:	d006      	beq.n	8012196 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 8012188:	4a08      	ldr	r2, [pc, #32]	; (80121ac <HandleRadioRxErrorTimeout+0x120>)
 801218a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801218e:	f043 0320 	orr.w	r3, r3, #32
 8012192:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 8012196:	f7ff fa25 	bl	80115e4 <UpdateRxSlotIdleState>
}
 801219a:	bf00      	nop
 801219c:	3710      	adds	r7, #16
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}
 80121a2:	bf00      	nop
 80121a4:	20001328 	.word	0x20001328
 80121a8:	08021d00 	.word	0x08021d00
 80121ac:	20000e1c 	.word	0x20000e1c
 80121b0:	200011b4 	.word	0x200011b4

080121b4 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80121b8:	2106      	movs	r1, #6
 80121ba:	2005      	movs	r0, #5
 80121bc:	f7ff ff66 	bl	801208c <HandleRadioRxErrorTimeout>
}
 80121c0:	bf00      	nop
 80121c2:	bd80      	pop	{r7, pc}

080121c4 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 80121c8:	2104      	movs	r1, #4
 80121ca:	2003      	movs	r0, #3
 80121cc:	f7ff ff5e 	bl	801208c <HandleRadioRxErrorTimeout>
}
 80121d0:	bf00      	nop
 80121d2:	bd80      	pop	{r7, pc}

080121d4 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b084      	sub	sp, #16
 80121d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80121da:	f3ef 8310 	mrs	r3, PRIMASK
 80121de:	607b      	str	r3, [r7, #4]
  return(result);
 80121e0:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 80121e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80121e4:	b672      	cpsid	i
}
 80121e6:	bf00      	nop
    events = LoRaMacRadioEvents;
 80121e8:	4b1d      	ldr	r3, [pc, #116]	; (8012260 <LoRaMacHandleIrqEvents+0x8c>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 80121ee:	4b1c      	ldr	r3, [pc, #112]	; (8012260 <LoRaMacHandleIrqEvents+0x8c>)
 80121f0:	2200      	movs	r2, #0
 80121f2:	601a      	str	r2, [r3, #0]
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	f383 8810 	msr	PRIMASK, r3
}
 80121fe:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8012200:	683b      	ldr	r3, [r7, #0]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d027      	beq.n	8012256 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8012206:	783b      	ldrb	r3, [r7, #0]
 8012208:	f003 0310 	and.w	r3, r3, #16
 801220c:	b2db      	uxtb	r3, r3
 801220e:	2b00      	cmp	r3, #0
 8012210:	d001      	beq.n	8012216 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8012212:	f7ff f9ff 	bl	8011614 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8012216:	783b      	ldrb	r3, [r7, #0]
 8012218:	f003 0308 	and.w	r3, r3, #8
 801221c:	b2db      	uxtb	r3, r3
 801221e:	2b00      	cmp	r3, #0
 8012220:	d001      	beq.n	8012226 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8012222:	f7ff fab7 	bl	8011794 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8012226:	783b      	ldrb	r3, [r7, #0]
 8012228:	f003 0304 	and.w	r3, r3, #4
 801222c:	b2db      	uxtb	r3, r3
 801222e:	2b00      	cmp	r3, #0
 8012230:	d001      	beq.n	8012236 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8012232:	f7ff feff 	bl	8012034 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8012236:	783b      	ldrb	r3, [r7, #0]
 8012238:	f003 0302 	and.w	r3, r3, #2
 801223c:	b2db      	uxtb	r3, r3
 801223e:	2b00      	cmp	r3, #0
 8012240:	d001      	beq.n	8012246 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8012242:	f7ff ffb7 	bl	80121b4 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8012246:	783b      	ldrb	r3, [r7, #0]
 8012248:	f003 0301 	and.w	r3, r3, #1
 801224c:	b2db      	uxtb	r3, r3
 801224e:	2b00      	cmp	r3, #0
 8012250:	d001      	beq.n	8012256 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8012252:	f7ff ffb7 	bl	80121c4 <ProcessRadioRxTimeout>
        }
    }
}
 8012256:	bf00      	nop
 8012258:	3710      	adds	r7, #16
 801225a:	46bd      	mov	sp, r7
 801225c:	bd80      	pop	{r7, pc}
 801225e:	bf00      	nop
 8012260:	20002178 	.word	0x20002178

08012264 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8012264:	b480      	push	{r7}
 8012266:	af00      	add	r7, sp, #0
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8012268:	4b08      	ldr	r3, [pc, #32]	; (801228c <LoRaMacIsBusy+0x28>)
 801226a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801226e:	2b00      	cmp	r3, #0
 8012270:	d106      	bne.n	8012280 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8012272:	4b06      	ldr	r3, [pc, #24]	; (801228c <LoRaMacIsBusy+0x28>)
 8012274:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8012278:	2b01      	cmp	r3, #1
 801227a:	d101      	bne.n	8012280 <LoRaMacIsBusy+0x1c>
    {
        return false;
 801227c:	2300      	movs	r3, #0
 801227e:	e000      	b.n	8012282 <LoRaMacIsBusy+0x1e>
    }
    return true;
 8012280:	2301      	movs	r3, #1
}
 8012282:	4618      	mov	r0, r3
 8012284:	46bd      	mov	sp, r7
 8012286:	bc80      	pop	{r7}
 8012288:	4770      	bx	lr
 801228a:	bf00      	nop
 801228c:	20000e1c 	.word	0x20000e1c

08012290 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8012290:	b480      	push	{r7}
 8012292:	b083      	sub	sp, #12
 8012294:	af00      	add	r7, sp, #0
 8012296:	4603      	mov	r3, r0
 8012298:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 801229a:	4a04      	ldr	r2, [pc, #16]	; (80122ac <LoRaMacEnableRequests+0x1c>)
 801229c:	79fb      	ldrb	r3, [r7, #7]
 801229e:	f882 3486 	strb.w	r3, [r2, #1158]	; 0x486
}
 80122a2:	bf00      	nop
 80122a4:	370c      	adds	r7, #12
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bc80      	pop	{r7}
 80122aa:	4770      	bx	lr
 80122ac:	20000e1c 	.word	0x20000e1c

080122b0 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b082      	sub	sp, #8
 80122b4:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 80122b6:	4b2c      	ldr	r3, [pc, #176]	; (8012368 <LoRaMacHandleRequestEvents+0xb8>)
 80122b8:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80122bc:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 80122be:	4b2a      	ldr	r3, [pc, #168]	; (8012368 <LoRaMacHandleRequestEvents+0xb8>)
 80122c0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d14a      	bne.n	801235e <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80122c8:	4b27      	ldr	r3, [pc, #156]	; (8012368 <LoRaMacHandleRequestEvents+0xb8>)
 80122ca:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80122ce:	f003 0301 	and.w	r3, r3, #1
 80122d2:	b2db      	uxtb	r3, r3
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d006      	beq.n	80122e6 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80122d8:	4a23      	ldr	r2, [pc, #140]	; (8012368 <LoRaMacHandleRequestEvents+0xb8>)
 80122da:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80122de:	f36f 0300 	bfc	r3, #0, #1
 80122e2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80122e6:	4b20      	ldr	r3, [pc, #128]	; (8012368 <LoRaMacHandleRequestEvents+0xb8>)
 80122e8:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80122ec:	f003 0304 	and.w	r3, r3, #4
 80122f0:	b2db      	uxtb	r3, r3
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d006      	beq.n	8012304 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80122f6:	4a1c      	ldr	r2, [pc, #112]	; (8012368 <LoRaMacHandleRequestEvents+0xb8>)
 80122f8:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80122fc:	f36f 0382 	bfc	r3, #2, #1
 8012300:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012304:	2001      	movs	r0, #1
 8012306:	f7ff ffc3 	bl	8012290 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 801230a:	793b      	ldrb	r3, [r7, #4]
 801230c:	f003 0301 	and.w	r3, r3, #1
 8012310:	b2db      	uxtb	r3, r3
 8012312:	2b00      	cmp	r3, #0
 8012314:	d005      	beq.n	8012322 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8012316:	4b14      	ldr	r3, [pc, #80]	; (8012368 <LoRaMacHandleRequestEvents+0xb8>)
 8012318:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	4813      	ldr	r0, [pc, #76]	; (801236c <LoRaMacHandleRequestEvents+0xbc>)
 8012320:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8012322:	793b      	ldrb	r3, [r7, #4]
 8012324:	f003 0304 	and.w	r3, r3, #4
 8012328:	b2db      	uxtb	r3, r3
 801232a:	2b00      	cmp	r3, #0
 801232c:	d00e      	beq.n	801234c <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 801232e:	4810      	ldr	r0, [pc, #64]	; (8012370 <LoRaMacHandleRequestEvents+0xc0>)
 8012330:	f006 f91a 	bl	8018568 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8012334:	f006 f964 	bl	8018600 <LoRaMacConfirmQueueGetCnt>
 8012338:	4603      	mov	r3, r0
 801233a:	2b00      	cmp	r3, #0
 801233c:	d006      	beq.n	801234c <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 801233e:	4a0a      	ldr	r2, [pc, #40]	; (8012368 <LoRaMacHandleRequestEvents+0xb8>)
 8012340:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8012344:	f043 0304 	orr.w	r3, r3, #4
 8012348:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 801234c:	f005 f9d6 	bl	80176fc <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8012350:	4a05      	ldr	r2, [pc, #20]	; (8012368 <LoRaMacHandleRequestEvents+0xb8>)
 8012352:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8012356:	f36f 1345 	bfc	r3, #5, #1
 801235a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
}
 801235e:	bf00      	nop
 8012360:	3708      	adds	r7, #8
 8012362:	46bd      	mov	sp, r7
 8012364:	bd80      	pop	{r7, pc}
 8012366:	bf00      	nop
 8012368:	20000e1c 	.word	0x20000e1c
 801236c:	20001254 	.word	0x20001254
 8012370:	20001268 	.word	0x20001268

08012374 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b082      	sub	sp, #8
 8012378:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 801237a:	4b07      	ldr	r3, [pc, #28]	; (8012398 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 801237c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012380:	2b00      	cmp	r3, #0
 8012382:	d105      	bne.n	8012390 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 8012384:	2300      	movs	r3, #0
 8012386:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8012388:	1dfb      	adds	r3, r7, #7
 801238a:	4618      	mov	r0, r3
 801238c:	f005 fed2 	bl	8018134 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 8012390:	bf00      	nop
 8012392:	3708      	adds	r7, #8
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}
 8012398:	20000e1c 	.word	0x20000e1c

0801239c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 801239c:	b580      	push	{r7, lr}
 801239e:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80123a0:	4b16      	ldr	r3, [pc, #88]	; (80123fc <LoRaMacHandleIndicationEvents+0x60>)
 80123a2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80123a6:	f003 0308 	and.w	r3, r3, #8
 80123aa:	b2db      	uxtb	r3, r3
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d00d      	beq.n	80123cc <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80123b0:	4a12      	ldr	r2, [pc, #72]	; (80123fc <LoRaMacHandleIndicationEvents+0x60>)
 80123b2:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80123b6:	f36f 03c3 	bfc	r3, #3, #1
 80123ba:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80123be:	4b0f      	ldr	r3, [pc, #60]	; (80123fc <LoRaMacHandleIndicationEvents+0x60>)
 80123c0:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80123c4:	68db      	ldr	r3, [r3, #12]
 80123c6:	490e      	ldr	r1, [pc, #56]	; (8012400 <LoRaMacHandleIndicationEvents+0x64>)
 80123c8:	480e      	ldr	r0, [pc, #56]	; (8012404 <LoRaMacHandleIndicationEvents+0x68>)
 80123ca:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80123cc:	4b0b      	ldr	r3, [pc, #44]	; (80123fc <LoRaMacHandleIndicationEvents+0x60>)
 80123ce:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80123d2:	f003 0302 	and.w	r3, r3, #2
 80123d6:	b2db      	uxtb	r3, r3
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d00d      	beq.n	80123f8 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80123dc:	4a07      	ldr	r2, [pc, #28]	; (80123fc <LoRaMacHandleIndicationEvents+0x60>)
 80123de:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80123e2:	f36f 0341 	bfc	r3, #1, #1
 80123e6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 80123ea:	4b04      	ldr	r3, [pc, #16]	; (80123fc <LoRaMacHandleIndicationEvents+0x60>)
 80123ec:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80123f0:	685b      	ldr	r3, [r3, #4]
 80123f2:	4903      	ldr	r1, [pc, #12]	; (8012400 <LoRaMacHandleIndicationEvents+0x64>)
 80123f4:	4804      	ldr	r0, [pc, #16]	; (8012408 <LoRaMacHandleIndicationEvents+0x6c>)
 80123f6:	4798      	blx	r3
    }
}
 80123f8:	bf00      	nop
 80123fa:	bd80      	pop	{r7, pc}
 80123fc:	20000e1c 	.word	0x20000e1c
 8012400:	2000129c 	.word	0x2000129c
 8012404:	2000127c 	.word	0x2000127c
 8012408:	20001238 	.word	0x20001238

0801240c <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b082      	sub	sp, #8
 8012410:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8012412:	4b32      	ldr	r3, [pc, #200]	; (80124dc <LoRaMacHandleMcpsRequest+0xd0>)
 8012414:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8012418:	f003 0301 	and.w	r3, r3, #1
 801241c:	b2db      	uxtb	r3, r3
 801241e:	2b00      	cmp	r3, #0
 8012420:	d058      	beq.n	80124d4 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 8012422:	2300      	movs	r3, #0
 8012424:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8012426:	2300      	movs	r3, #0
 8012428:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801242a:	4b2c      	ldr	r3, [pc, #176]	; (80124dc <LoRaMacHandleMcpsRequest+0xd0>)
 801242c:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8012430:	2b00      	cmp	r3, #0
 8012432:	d004      	beq.n	801243e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8012434:	4b29      	ldr	r3, [pc, #164]	; (80124dc <LoRaMacHandleMcpsRequest+0xd0>)
 8012436:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801243a:	2b03      	cmp	r3, #3
 801243c:	d104      	bne.n	8012448 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 801243e:	f002 f87b 	bl	8014538 <CheckRetransUnconfirmedUplink>
 8012442:	4603      	mov	r3, r0
 8012444:	71fb      	strb	r3, [r7, #7]
 8012446:	e020      	b.n	801248a <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8012448:	4b24      	ldr	r3, [pc, #144]	; (80124dc <LoRaMacHandleMcpsRequest+0xd0>)
 801244a:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 801244e:	2b01      	cmp	r3, #1
 8012450:	d11b      	bne.n	801248a <LoRaMacHandleMcpsRequest+0x7e>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 8012452:	4b22      	ldr	r3, [pc, #136]	; (80124dc <LoRaMacHandleMcpsRequest+0xd0>)
 8012454:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 8012458:	2b00      	cmp	r3, #0
 801245a:	d014      	beq.n	8012486 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 801245c:	f002 f898 	bl	8014590 <CheckRetransConfirmedUplink>
 8012460:	4603      	mov	r3, r0
 8012462:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8012464:	4b1e      	ldr	r3, [pc, #120]	; (80124e0 <LoRaMacHandleMcpsRequest+0xd4>)
 8012466:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 801246a:	2b00      	cmp	r3, #0
 801246c:	d10d      	bne.n	801248a <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 801246e:	79fb      	ldrb	r3, [r7, #7]
 8012470:	f083 0301 	eor.w	r3, r3, #1
 8012474:	b2db      	uxtb	r3, r3
 8012476:	2b00      	cmp	r3, #0
 8012478:	d002      	beq.n	8012480 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 801247a:	f002 f905 	bl	8014688 <AckTimeoutRetriesProcess>
 801247e:	e004      	b.n	801248a <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8012480:	f002 f940 	bl	8014704 <AckTimeoutRetriesFinalize>
 8012484:	e001      	b.n	801248a <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8012486:	2301      	movs	r3, #1
 8012488:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 801248a:	79fb      	ldrb	r3, [r7, #7]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d00d      	beq.n	80124ac <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8012490:	4814      	ldr	r0, [pc, #80]	; (80124e4 <LoRaMacHandleMcpsRequest+0xd8>)
 8012492:	f00d ffc9 	bl	8020428 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8012496:	4b11      	ldr	r3, [pc, #68]	; (80124dc <LoRaMacHandleMcpsRequest+0xd0>)
 8012498:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801249c:	f023 0320 	bic.w	r3, r3, #32
 80124a0:	4a0e      	ldr	r2, [pc, #56]	; (80124dc <LoRaMacHandleMcpsRequest+0xd0>)
 80124a2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 80124a6:	f002 f895 	bl	80145d4 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 80124aa:	e013      	b.n	80124d4 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 80124ac:	79bb      	ldrb	r3, [r7, #6]
 80124ae:	f083 0301 	eor.w	r3, r3, #1
 80124b2:	b2db      	uxtb	r3, r3
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d00d      	beq.n	80124d4 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80124b8:	4a08      	ldr	r2, [pc, #32]	; (80124dc <LoRaMacHandleMcpsRequest+0xd0>)
 80124ba:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80124be:	f36f 1345 	bfc	r3, #5, #1
 80124c2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 80124c6:	4b05      	ldr	r3, [pc, #20]	; (80124dc <LoRaMacHandleMcpsRequest+0xd0>)
 80124c8:	2200      	movs	r2, #0
 80124ca:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 80124ce:	2000      	movs	r0, #0
 80124d0:	f000 f994 	bl	80127fc <OnTxDelayedTimerEvent>
}
 80124d4:	bf00      	nop
 80124d6:	3708      	adds	r7, #8
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}
 80124dc:	20000e1c 	.word	0x20000e1c
 80124e0:	20001328 	.word	0x20001328
 80124e4:	20001184 	.word	0x20001184

080124e8 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80124ec:	4b1b      	ldr	r3, [pc, #108]	; (801255c <LoRaMacHandleMlmeRequest+0x74>)
 80124ee:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80124f2:	f003 0304 	and.w	r3, r3, #4
 80124f6:	b2db      	uxtb	r3, r3
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d02c      	beq.n	8012556 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80124fc:	2001      	movs	r0, #1
 80124fe:	f006 f819 	bl	8018534 <LoRaMacConfirmQueueIsCmdActive>
 8012502:	4603      	mov	r3, r0
 8012504:	2b00      	cmp	r3, #0
 8012506:	d012      	beq.n	801252e <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8012508:	2001      	movs	r0, #1
 801250a:	f005 ffb5 	bl	8018478 <LoRaMacConfirmQueueGetStatus>
 801250e:	4603      	mov	r3, r0
 8012510:	2b00      	cmp	r3, #0
 8012512:	d103      	bne.n	801251c <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8012514:	4b11      	ldr	r3, [pc, #68]	; (801255c <LoRaMacHandleMlmeRequest+0x74>)
 8012516:	2200      	movs	r2, #0
 8012518:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801251c:	4b0f      	ldr	r3, [pc, #60]	; (801255c <LoRaMacHandleMlmeRequest+0x74>)
 801251e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012522:	f023 0302 	bic.w	r3, r3, #2
 8012526:	4a0d      	ldr	r2, [pc, #52]	; (801255c <LoRaMacHandleMlmeRequest+0x74>)
 8012528:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 801252c:	e013      	b.n	8012556 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 801252e:	2005      	movs	r0, #5
 8012530:	f006 f800 	bl	8018534 <LoRaMacConfirmQueueIsCmdActive>
 8012534:	4603      	mov	r3, r0
 8012536:	2b00      	cmp	r3, #0
 8012538:	d105      	bne.n	8012546 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 801253a:	2006      	movs	r0, #6
 801253c:	f005 fffa 	bl	8018534 <LoRaMacConfirmQueueIsCmdActive>
 8012540:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8012542:	2b00      	cmp	r3, #0
 8012544:	d007      	beq.n	8012556 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012546:	4b05      	ldr	r3, [pc, #20]	; (801255c <LoRaMacHandleMlmeRequest+0x74>)
 8012548:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801254c:	f023 0302 	bic.w	r3, r3, #2
 8012550:	4a02      	ldr	r2, [pc, #8]	; (801255c <LoRaMacHandleMlmeRequest+0x74>)
 8012552:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8012556:	bf00      	nop
 8012558:	bd80      	pop	{r7, pc}
 801255a:	bf00      	nop
 801255c:	20000e1c 	.word	0x20000e1c

08012560 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8012560:	b580      	push	{r7, lr}
 8012562:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8012564:	200c      	movs	r0, #12
 8012566:	f005 ffe5 	bl	8018534 <LoRaMacConfirmQueueIsCmdActive>
 801256a:	4603      	mov	r3, r0
 801256c:	2b00      	cmp	r3, #0
 801256e:	d019      	beq.n	80125a4 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8012570:	4b0e      	ldr	r3, [pc, #56]	; (80125ac <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8012572:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8012576:	f003 0301 	and.w	r3, r3, #1
 801257a:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 801257c:	2b00      	cmp	r3, #0
 801257e:	d111      	bne.n	80125a4 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8012580:	4b0a      	ldr	r3, [pc, #40]	; (80125ac <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8012582:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8012586:	f003 0304 	and.w	r3, r3, #4
 801258a:	b2db      	uxtb	r3, r3
 801258c:	2b00      	cmp	r3, #0
 801258e:	d009      	beq.n	80125a4 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012590:	4b06      	ldr	r3, [pc, #24]	; (80125ac <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8012592:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012596:	f023 0302 	bic.w	r3, r3, #2
 801259a:	4a04      	ldr	r2, [pc, #16]	; (80125ac <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801259c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 80125a0:	2301      	movs	r3, #1
 80125a2:	e000      	b.n	80125a6 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 80125a4:	2300      	movs	r3, #0
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	bd80      	pop	{r7, pc}
 80125aa:	bf00      	nop
 80125ac:	20000e1c 	.word	0x20000e1c

080125b0 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 80125b0:	b480      	push	{r7}
 80125b2:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80125b4:	4b0d      	ldr	r3, [pc, #52]	; (80125ec <LoRaMacCheckForRxAbort+0x3c>)
 80125b6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80125ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d00f      	beq.n	80125e2 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 80125c2:	4b0a      	ldr	r3, [pc, #40]	; (80125ec <LoRaMacCheckForRxAbort+0x3c>)
 80125c4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80125c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80125cc:	4a07      	ldr	r2, [pc, #28]	; (80125ec <LoRaMacCheckForRxAbort+0x3c>)
 80125ce:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80125d2:	4b06      	ldr	r3, [pc, #24]	; (80125ec <LoRaMacCheckForRxAbort+0x3c>)
 80125d4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80125d8:	f023 0302 	bic.w	r3, r3, #2
 80125dc:	4a03      	ldr	r2, [pc, #12]	; (80125ec <LoRaMacCheckForRxAbort+0x3c>)
 80125de:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 80125e2:	bf00      	nop
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bc80      	pop	{r7}
 80125e8:	4770      	bx	lr
 80125ea:	bf00      	nop
 80125ec:	20000e1c 	.word	0x20000e1c

080125f0 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b084      	sub	sp, #16
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 80125f8:	2300      	movs	r3, #0
 80125fa:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80125fc:	2300      	movs	r3, #0
 80125fe:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8012600:	4b50      	ldr	r3, [pc, #320]	; (8012744 <LoRaMacHandleNvm+0x154>)
 8012602:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012606:	2b00      	cmp	r3, #0
 8012608:	f040 8098 	bne.w	801273c <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	2124      	movs	r1, #36	; 0x24
 8012610:	4618      	mov	r0, r3
 8012612:	f009 fe13 	bl	801c23c <Crc32>
 8012616:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801261c:	68ba      	ldr	r2, [r7, #8]
 801261e:	429a      	cmp	r2, r3
 8012620:	d006      	beq.n	8012630 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	68ba      	ldr	r2, [r7, #8]
 8012626:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8012628:	89fb      	ldrh	r3, [r7, #14]
 801262a:	f043 0301 	orr.w	r3, r3, #1
 801262e:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	3328      	adds	r3, #40	; 0x28
 8012634:	2114      	movs	r1, #20
 8012636:	4618      	mov	r0, r3
 8012638:	f009 fe00 	bl	801c23c <Crc32>
 801263c:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012642:	68ba      	ldr	r2, [r7, #8]
 8012644:	429a      	cmp	r2, r3
 8012646:	d006      	beq.n	8012656 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	68ba      	ldr	r2, [r7, #8]
 801264c:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 801264e:	89fb      	ldrh	r3, [r7, #14]
 8012650:	f043 0302 	orr.w	r3, r3, #2
 8012654:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	3340      	adds	r3, #64	; 0x40
 801265a:	21dc      	movs	r1, #220	; 0xdc
 801265c:	4618      	mov	r0, r3
 801265e:	f009 fded 	bl	801c23c <Crc32>
 8012662:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801266a:	68ba      	ldr	r2, [r7, #8]
 801266c:	429a      	cmp	r2, r3
 801266e:	d007      	beq.n	8012680 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	68ba      	ldr	r2, [r7, #8]
 8012674:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8012678:	89fb      	ldrh	r3, [r7, #14]
 801267a:	f043 0304 	orr.w	r3, r3, #4
 801267e:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8012686:	21bc      	movs	r1, #188	; 0xbc
 8012688:	4618      	mov	r0, r3
 801268a:	f009 fdd7 	bl	801c23c <Crc32>
 801268e:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8012696:	68ba      	ldr	r2, [r7, #8]
 8012698:	429a      	cmp	r2, r3
 801269a:	d007      	beq.n	80126ac <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	68ba      	ldr	r2, [r7, #8]
 80126a0:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80126a4:	89fb      	ldrh	r3, [r7, #14]
 80126a6:	f043 0308 	orr.w	r3, r3, #8
 80126aa:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80126b2:	2190      	movs	r1, #144	; 0x90
 80126b4:	4618      	mov	r0, r3
 80126b6:	f009 fdc1 	bl	801c23c <Crc32>
 80126ba:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80126c2:	68ba      	ldr	r2, [r7, #8]
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d007      	beq.n	80126d8 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	68ba      	ldr	r2, [r7, #8]
 80126cc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 80126d0:	89fb      	ldrh	r3, [r7, #14]
 80126d2:	f043 0310 	orr.w	r3, r3, #16
 80126d6:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	f503 731d 	add.w	r3, r3, #628	; 0x274
 80126de:	f44f 6193 	mov.w	r1, #1176	; 0x498
 80126e2:	4618      	mov	r0, r3
 80126e4:	f009 fdaa 	bl	801c23c <Crc32>
 80126e8:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 80126f0:	68ba      	ldr	r2, [r7, #8]
 80126f2:	429a      	cmp	r2, r3
 80126f4:	d007      	beq.n	8012706 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	68ba      	ldr	r2, [r7, #8]
 80126fa:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 80126fe:	89fb      	ldrh	r3, [r7, #14]
 8012700:	f043 0320 	orr.w	r3, r3, #32
 8012704:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 801270c:	2114      	movs	r1, #20
 801270e:	4618      	mov	r0, r3
 8012710:	f009 fd94 	bl	801c23c <Crc32>
 8012714:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 801271c:	68ba      	ldr	r2, [r7, #8]
 801271e:	429a      	cmp	r2, r3
 8012720:	d007      	beq.n	8012732 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	68ba      	ldr	r2, [r7, #8]
 8012726:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 801272a:	89fb      	ldrh	r3, [r7, #14]
 801272c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012730:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8012732:	89fb      	ldrh	r3, [r7, #14]
 8012734:	4618      	mov	r0, r3
 8012736:	f001 ff89 	bl	801464c <CallNvmDataChangeCallback>
 801273a:	e000      	b.n	801273e <LoRaMacHandleNvm+0x14e>
        return;
 801273c:	bf00      	nop
}
 801273e:	3710      	adds	r7, #16
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}
 8012744:	20000e1c 	.word	0x20000e1c

08012748 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b082      	sub	sp, #8
 801274c:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 801274e:	2300      	movs	r3, #0
 8012750:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8012752:	f7ff fd3f 	bl	80121d4 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8012756:	f005 fa77 	bl	8017c48 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 801275a:	4b26      	ldr	r3, [pc, #152]	; (80127f4 <LoRaMacProcess+0xac>)
 801275c:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8012760:	f003 0320 	and.w	r3, r3, #32
 8012764:	b2db      	uxtb	r3, r3
 8012766:	2b00      	cmp	r3, #0
 8012768:	d025      	beq.n	80127b6 <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 801276a:	2000      	movs	r0, #0
 801276c:	f7ff fd90 	bl	8012290 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8012770:	f7ff ff1e 	bl	80125b0 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8012774:	f001 fffa 	bl	801476c <IsRequestPending>
 8012778:	4603      	mov	r3, r0
 801277a:	2b00      	cmp	r3, #0
 801277c:	d006      	beq.n	801278c <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 801277e:	f7ff feef 	bl	8012560 <LoRaMacCheckForBeaconAcquisition>
 8012782:	4603      	mov	r3, r0
 8012784:	461a      	mov	r2, r3
 8012786:	79fb      	ldrb	r3, [r7, #7]
 8012788:	4313      	orrs	r3, r2
 801278a:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 801278c:	79fb      	ldrb	r3, [r7, #7]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d103      	bne.n	801279a <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8012792:	f7ff fea9 	bl	80124e8 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8012796:	f7ff fe39 	bl	801240c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 801279a:	f7ff fd89 	bl	80122b0 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 801279e:	f7ff fde9 	bl	8012374 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80127a2:	2001      	movs	r0, #1
 80127a4:	f7ff fd74 	bl	8012290 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80127a8:	4a12      	ldr	r2, [pc, #72]	; (80127f4 <LoRaMacProcess+0xac>)
 80127aa:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80127ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127b2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    LoRaMacHandleIndicationEvents( );
 80127b6:	f7ff fdf1 	bl	801239c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 80127ba:	4b0e      	ldr	r3, [pc, #56]	; (80127f4 <LoRaMacProcess+0xac>)
 80127bc:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80127c0:	2b02      	cmp	r3, #2
 80127c2:	d101      	bne.n	80127c8 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 80127c4:	f001 fb7e 	bl	8013ec4 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 80127c8:	4b0a      	ldr	r3, [pc, #40]	; (80127f4 <LoRaMacProcess+0xac>)
 80127ca:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80127ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127d2:	b2db      	uxtb	r3, r3
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d009      	beq.n	80127ec <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 80127d8:	4a06      	ldr	r2, [pc, #24]	; (80127f4 <LoRaMacProcess+0xac>)
 80127da:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80127de:	f36f 1386 	bfc	r3, #6, #1
 80127e2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        LoRaMacHandleNvm( &Nvm );
 80127e6:	4804      	ldr	r0, [pc, #16]	; (80127f8 <LoRaMacProcess+0xb0>)
 80127e8:	f7ff ff02 	bl	80125f0 <LoRaMacHandleNvm>
    }
}
 80127ec:	bf00      	nop
 80127ee:	3708      	adds	r7, #8
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}
 80127f4:	20000e1c 	.word	0x20000e1c
 80127f8:	20001328 	.word	0x20001328

080127fc <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b082      	sub	sp, #8
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8012804:	4817      	ldr	r0, [pc, #92]	; (8012864 <OnTxDelayedTimerEvent+0x68>)
 8012806:	f00d fe0f 	bl	8020428 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 801280a:	4b17      	ldr	r3, [pc, #92]	; (8012868 <OnTxDelayedTimerEvent+0x6c>)
 801280c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012810:	f023 0320 	bic.w	r3, r3, #32
 8012814:	4a14      	ldr	r2, [pc, #80]	; (8012868 <OnTxDelayedTimerEvent+0x6c>)
 8012816:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 801281a:	2001      	movs	r0, #1
 801281c:	f001 f8e6 	bl	80139ec <ScheduleTx>
 8012820:	4603      	mov	r3, r0
 8012822:	2b00      	cmp	r3, #0
 8012824:	d018      	beq.n	8012858 <OnTxDelayedTimerEvent+0x5c>
 8012826:	2b0b      	cmp	r3, #11
 8012828:	d016      	beq.n	8012858 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801282a:	4b10      	ldr	r3, [pc, #64]	; (801286c <OnTxDelayedTimerEvent+0x70>)
 801282c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012830:	b2da      	uxtb	r2, r3
 8012832:	4b0d      	ldr	r3, [pc, #52]	; (8012868 <OnTxDelayedTimerEvent+0x6c>)
 8012834:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8012838:	4b0b      	ldr	r3, [pc, #44]	; (8012868 <OnTxDelayedTimerEvent+0x6c>)
 801283a:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 801283e:	4b0a      	ldr	r3, [pc, #40]	; (8012868 <OnTxDelayedTimerEvent+0x6c>)
 8012840:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8012844:	4b08      	ldr	r3, [pc, #32]	; (8012868 <OnTxDelayedTimerEvent+0x6c>)
 8012846:	2209      	movs	r2, #9
 8012848:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 801284c:	2009      	movs	r0, #9
 801284e:	f005 fe3d 	bl	80184cc <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8012852:	f001 febf 	bl	80145d4 <StopRetransmission>
            break;
 8012856:	e000      	b.n	801285a <OnTxDelayedTimerEvent+0x5e>
            break;
 8012858:	bf00      	nop
        }
    }
}
 801285a:	bf00      	nop
 801285c:	3708      	adds	r7, #8
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}
 8012862:	bf00      	nop
 8012864:	20001184 	.word	0x20001184
 8012868:	20000e1c 	.word	0x20000e1c
 801286c:	20001328 	.word	0x20001328

08012870 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8012878:	4b14      	ldr	r3, [pc, #80]	; (80128cc <OnRxWindow1TimerEvent+0x5c>)
 801287a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 801287e:	4b13      	ldr	r3, [pc, #76]	; (80128cc <OnRxWindow1TimerEvent+0x5c>)
 8012880:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8012884:	4b12      	ldr	r3, [pc, #72]	; (80128d0 <OnRxWindow1TimerEvent+0x60>)
 8012886:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 801288a:	b25a      	sxtb	r2, r3
 801288c:	4b0f      	ldr	r3, [pc, #60]	; (80128cc <OnRxWindow1TimerEvent+0x5c>)
 801288e:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012892:	4b0f      	ldr	r3, [pc, #60]	; (80128d0 <OnRxWindow1TimerEvent+0x60>)
 8012894:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8012898:	4b0c      	ldr	r3, [pc, #48]	; (80128cc <OnRxWindow1TimerEvent+0x5c>)
 801289a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 801289e:	4b0c      	ldr	r3, [pc, #48]	; (80128d0 <OnRxWindow1TimerEvent+0x60>)
 80128a0:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80128a4:	4b09      	ldr	r3, [pc, #36]	; (80128cc <OnRxWindow1TimerEvent+0x5c>)
 80128a6:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 80128aa:	4b08      	ldr	r3, [pc, #32]	; (80128cc <OnRxWindow1TimerEvent+0x5c>)
 80128ac:	2200      	movs	r2, #0
 80128ae:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80128b2:	4b06      	ldr	r3, [pc, #24]	; (80128cc <OnRxWindow1TimerEvent+0x5c>)
 80128b4:	2200      	movs	r2, #0
 80128b6:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80128ba:	4906      	ldr	r1, [pc, #24]	; (80128d4 <OnRxWindow1TimerEvent+0x64>)
 80128bc:	4806      	ldr	r0, [pc, #24]	; (80128d8 <OnRxWindow1TimerEvent+0x68>)
 80128be:	f001 facd 	bl	8013e5c <RxWindowSetup>
}
 80128c2:	bf00      	nop
 80128c4:	3708      	adds	r7, #8
 80128c6:	46bd      	mov	sp, r7
 80128c8:	bd80      	pop	{r7, pc}
 80128ca:	bf00      	nop
 80128cc:	20000e1c 	.word	0x20000e1c
 80128d0:	20001328 	.word	0x20001328
 80128d4:	200011d4 	.word	0x200011d4
 80128d8:	2000119c 	.word	0x2000119c

080128dc <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b082      	sub	sp, #8
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80128e4:	4b16      	ldr	r3, [pc, #88]	; (8012940 <OnRxWindow2TimerEvent+0x64>)
 80128e6:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d023      	beq.n	8012936 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80128ee:	4b14      	ldr	r3, [pc, #80]	; (8012940 <OnRxWindow2TimerEvent+0x64>)
 80128f0:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80128f4:	4b12      	ldr	r3, [pc, #72]	; (8012940 <OnRxWindow2TimerEvent+0x64>)
 80128f6:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80128fa:	4b12      	ldr	r3, [pc, #72]	; (8012944 <OnRxWindow2TimerEvent+0x68>)
 80128fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80128fe:	4a10      	ldr	r2, [pc, #64]	; (8012940 <OnRxWindow2TimerEvent+0x64>)
 8012900:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012904:	4b0f      	ldr	r3, [pc, #60]	; (8012944 <OnRxWindow2TimerEvent+0x68>)
 8012906:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 801290a:	4b0d      	ldr	r3, [pc, #52]	; (8012940 <OnRxWindow2TimerEvent+0x64>)
 801290c:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8012910:	4b0c      	ldr	r3, [pc, #48]	; (8012944 <OnRxWindow2TimerEvent+0x68>)
 8012912:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8012916:	4b0a      	ldr	r3, [pc, #40]	; (8012940 <OnRxWindow2TimerEvent+0x64>)
 8012918:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 801291c:	4b08      	ldr	r3, [pc, #32]	; (8012940 <OnRxWindow2TimerEvent+0x64>)
 801291e:	2200      	movs	r2, #0
 8012920:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012924:	4b06      	ldr	r3, [pc, #24]	; (8012940 <OnRxWindow2TimerEvent+0x64>)
 8012926:	2201      	movs	r2, #1
 8012928:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 801292c:	4906      	ldr	r1, [pc, #24]	; (8012948 <OnRxWindow2TimerEvent+0x6c>)
 801292e:	4807      	ldr	r0, [pc, #28]	; (801294c <OnRxWindow2TimerEvent+0x70>)
 8012930:	f001 fa94 	bl	8013e5c <RxWindowSetup>
 8012934:	e000      	b.n	8012938 <OnRxWindow2TimerEvent+0x5c>
        return;
 8012936:	bf00      	nop
}
 8012938:	3708      	adds	r7, #8
 801293a:	46bd      	mov	sp, r7
 801293c:	bd80      	pop	{r7, pc}
 801293e:	bf00      	nop
 8012940:	20000e1c 	.word	0x20000e1c
 8012944:	20001328 	.word	0x20001328
 8012948:	200011e8 	.word	0x200011e8
 801294c:	200011b4 	.word	0x200011b4

08012950 <OnAckTimeoutTimerEvent>:
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b082      	sub	sp, #8
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8012958:	4815      	ldr	r0, [pc, #84]	; (80129b0 <OnAckTimeoutTimerEvent+0x60>)
 801295a:	f00d fd65 	bl	8020428 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 801295e:	4b15      	ldr	r3, [pc, #84]	; (80129b4 <OnAckTimeoutTimerEvent+0x64>)
 8012960:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8012964:	2b00      	cmp	r3, #0
 8012966:	d003      	beq.n	8012970 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 8012968:	4b12      	ldr	r3, [pc, #72]	; (80129b4 <OnAckTimeoutTimerEvent+0x64>)
 801296a:	2201      	movs	r2, #1
 801296c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8012970:	4b11      	ldr	r3, [pc, #68]	; (80129b8 <OnAckTimeoutTimerEvent+0x68>)
 8012972:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012976:	2b02      	cmp	r3, #2
 8012978:	d106      	bne.n	8012988 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 801297a:	4a0e      	ldr	r2, [pc, #56]	; (80129b4 <OnAckTimeoutTimerEvent+0x64>)
 801297c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8012980:	f043 0320 	orr.w	r3, r3, #32
 8012984:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8012988:	4b0a      	ldr	r3, [pc, #40]	; (80129b4 <OnAckTimeoutTimerEvent+0x64>)
 801298a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801298e:	2b00      	cmp	r3, #0
 8012990:	d00a      	beq.n	80129a8 <OnAckTimeoutTimerEvent+0x58>
 8012992:	4b08      	ldr	r3, [pc, #32]	; (80129b4 <OnAckTimeoutTimerEvent+0x64>)
 8012994:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012998:	691b      	ldr	r3, [r3, #16]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d004      	beq.n	80129a8 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801299e:	4b05      	ldr	r3, [pc, #20]	; (80129b4 <OnAckTimeoutTimerEvent+0x64>)
 80129a0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80129a4:	691b      	ldr	r3, [r3, #16]
 80129a6:	4798      	blx	r3
    }
}
 80129a8:	bf00      	nop
 80129aa:	3708      	adds	r7, #8
 80129ac:	46bd      	mov	sp, r7
 80129ae:	bd80      	pop	{r7, pc}
 80129b0:	20001214 	.word	0x20001214
 80129b4:	20000e1c 	.word	0x20000e1c
 80129b8:	20001328 	.word	0x20001328

080129bc <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b084      	sub	sp, #16
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	60ba      	str	r2, [r7, #8]
 80129c4:	607b      	str	r3, [r7, #4]
 80129c6:	4603      	mov	r3, r0
 80129c8:	73fb      	strb	r3, [r7, #15]
 80129ca:	460b      	mov	r3, r1
 80129cc:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80129ce:	68bb      	ldr	r3, [r7, #8]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d005      	beq.n	80129e0 <GetFCntDown+0x24>
 80129d4:	69fb      	ldr	r3, [r7, #28]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d002      	beq.n	80129e0 <GetFCntDown+0x24>
 80129da:	6a3b      	ldr	r3, [r7, #32]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d101      	bne.n	80129e4 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80129e0:	230a      	movs	r3, #10
 80129e2:	e029      	b.n	8012a38 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 80129e4:	7bfb      	ldrb	r3, [r7, #15]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d016      	beq.n	8012a18 <GetFCntDown+0x5c>
 80129ea:	2b01      	cmp	r3, #1
 80129ec:	d118      	bne.n	8012a20 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 80129ee:	79bb      	ldrb	r3, [r7, #6]
 80129f0:	2b01      	cmp	r3, #1
 80129f2:	d10d      	bne.n	8012a10 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80129f4:	7bbb      	ldrb	r3, [r7, #14]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d002      	beq.n	8012a00 <GetFCntDown+0x44>
 80129fa:	7bbb      	ldrb	r3, [r7, #14]
 80129fc:	2b03      	cmp	r3, #3
 80129fe:	d103      	bne.n	8012a08 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8012a00:	69fb      	ldr	r3, [r7, #28]
 8012a02:	2202      	movs	r2, #2
 8012a04:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8012a06:	e00d      	b.n	8012a24 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8012a08:	69fb      	ldr	r3, [r7, #28]
 8012a0a:	2201      	movs	r2, #1
 8012a0c:	701a      	strb	r2, [r3, #0]
            break;
 8012a0e:	e009      	b.n	8012a24 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8012a10:	69fb      	ldr	r3, [r7, #28]
 8012a12:	2203      	movs	r2, #3
 8012a14:	701a      	strb	r2, [r3, #0]
            break;
 8012a16:	e005      	b.n	8012a24 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8012a18:	69fb      	ldr	r3, [r7, #28]
 8012a1a:	2204      	movs	r2, #4
 8012a1c:	701a      	strb	r2, [r3, #0]
            break;
 8012a1e:	e001      	b.n	8012a24 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012a20:	2305      	movs	r3, #5
 8012a22:	e009      	b.n	8012a38 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8012a24:	69fb      	ldr	r3, [r7, #28]
 8012a26:	7818      	ldrb	r0, [r3, #0]
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	89db      	ldrh	r3, [r3, #14]
 8012a2c:	461a      	mov	r2, r3
 8012a2e:	8b39      	ldrh	r1, [r7, #24]
 8012a30:	6a3b      	ldr	r3, [r7, #32]
 8012a32:	f006 f975 	bl	8018d20 <LoRaMacCryptoGetFCntDown>
 8012a36:	4603      	mov	r3, r0
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3710      	adds	r7, #16
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}

08012a40 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8012a40:	b5b0      	push	{r4, r5, r7, lr}
 8012a42:	b084      	sub	sp, #16
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	4603      	mov	r3, r0
 8012a48:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a4a:	2303      	movs	r3, #3
 8012a4c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8012a4e:	4b61      	ldr	r3, [pc, #388]	; (8012bd4 <SwitchClass+0x194>)
 8012a50:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012a54:	2b02      	cmp	r3, #2
 8012a56:	f000 80a5 	beq.w	8012ba4 <SwitchClass+0x164>
 8012a5a:	2b02      	cmp	r3, #2
 8012a5c:	f300 80b4 	bgt.w	8012bc8 <SwitchClass+0x188>
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d003      	beq.n	8012a6c <SwitchClass+0x2c>
 8012a64:	2b01      	cmp	r3, #1
 8012a66:	f000 808f 	beq.w	8012b88 <SwitchClass+0x148>
 8012a6a:	e0ad      	b.n	8012bc8 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8012a6c:	79fb      	ldrb	r3, [r7, #7]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d107      	bne.n	8012a82 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8012a72:	4b58      	ldr	r3, [pc, #352]	; (8012bd4 <SwitchClass+0x194>)
 8012a74:	4a57      	ldr	r2, [pc, #348]	; (8012bd4 <SwitchClass+0x194>)
 8012a76:	336c      	adds	r3, #108	; 0x6c
 8012a78:	3264      	adds	r2, #100	; 0x64
 8012a7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a7e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 8012a82:	79fb      	ldrb	r3, [r7, #7]
 8012a84:	2b01      	cmp	r3, #1
 8012a86:	d10c      	bne.n	8012aa2 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8012a88:	79fb      	ldrb	r3, [r7, #7]
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f004 fe58 	bl	8017740 <LoRaMacClassBSwitchClass>
 8012a90:	4603      	mov	r3, r0
 8012a92:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8012a94:	7bfb      	ldrb	r3, [r7, #15]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d103      	bne.n	8012aa2 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8012a9a:	4a4e      	ldr	r2, [pc, #312]	; (8012bd4 <SwitchClass+0x194>)
 8012a9c:	79fb      	ldrb	r3, [r7, #7]
 8012a9e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 8012aa2:	79fb      	ldrb	r3, [r7, #7]
 8012aa4:	2b02      	cmp	r3, #2
 8012aa6:	f040 808a 	bne.w	8012bbe <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8012aaa:	4a4a      	ldr	r2, [pc, #296]	; (8012bd4 <SwitchClass+0x194>)
 8012aac:	79fb      	ldrb	r3, [r7, #7]
 8012aae:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8012ab2:	4a49      	ldr	r2, [pc, #292]	; (8012bd8 <SwitchClass+0x198>)
 8012ab4:	4b48      	ldr	r3, [pc, #288]	; (8012bd8 <SwitchClass+0x198>)
 8012ab6:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8012aba:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8012abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012ac2:	682b      	ldr	r3, [r5, #0]
 8012ac4:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012ac6:	4b44      	ldr	r3, [pc, #272]	; (8012bd8 <SwitchClass+0x198>)
 8012ac8:	2202      	movs	r2, #2
 8012aca:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012ace:	2300      	movs	r3, #0
 8012ad0:	73bb      	strb	r3, [r7, #14]
 8012ad2:	e049      	b.n	8012b68 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8012ad4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012ad8:	4a3e      	ldr	r2, [pc, #248]	; (8012bd4 <SwitchClass+0x194>)
 8012ada:	212c      	movs	r1, #44	; 0x2c
 8012adc:	fb01 f303 	mul.w	r3, r1, r3
 8012ae0:	4413      	add	r3, r2
 8012ae2:	33da      	adds	r3, #218	; 0xda
 8012ae4:	781b      	ldrb	r3, [r3, #0]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d038      	beq.n	8012b5c <SwitchClass+0x11c>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8012aea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012aee:	4a39      	ldr	r2, [pc, #228]	; (8012bd4 <SwitchClass+0x194>)
 8012af0:	212c      	movs	r1, #44	; 0x2c
 8012af2:	fb01 f303 	mul.w	r3, r1, r3
 8012af6:	4413      	add	r3, r2
 8012af8:	33f0      	adds	r3, #240	; 0xf0
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	4a35      	ldr	r2, [pc, #212]	; (8012bd4 <SwitchClass+0x194>)
 8012afe:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8012b00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012b04:	4a33      	ldr	r2, [pc, #204]	; (8012bd4 <SwitchClass+0x194>)
 8012b06:	212c      	movs	r1, #44	; 0x2c
 8012b08:	fb01 f303 	mul.w	r3, r1, r3
 8012b0c:	4413      	add	r3, r2
 8012b0e:	33f4      	adds	r3, #244	; 0xf4
 8012b10:	f993 3000 	ldrsb.w	r3, [r3]
 8012b14:	b2da      	uxtb	r2, r3
 8012b16:	4b2f      	ldr	r3, [pc, #188]	; (8012bd4 <SwitchClass+0x194>)
 8012b18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012b1c:	4b2e      	ldr	r3, [pc, #184]	; (8012bd8 <SwitchClass+0x198>)
 8012b1e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8012b22:	4b2d      	ldr	r3, [pc, #180]	; (8012bd8 <SwitchClass+0x198>)
 8012b24:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8012b28:	4b2a      	ldr	r3, [pc, #168]	; (8012bd4 <SwitchClass+0x194>)
 8012b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b2c:	4a2a      	ldr	r2, [pc, #168]	; (8012bd8 <SwitchClass+0x198>)
 8012b2e:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012b32:	4b28      	ldr	r3, [pc, #160]	; (8012bd4 <SwitchClass+0x194>)
 8012b34:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8012b38:	4b27      	ldr	r3, [pc, #156]	; (8012bd8 <SwitchClass+0x198>)
 8012b3a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8012b3e:	4b25      	ldr	r3, [pc, #148]	; (8012bd4 <SwitchClass+0x194>)
 8012b40:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8012b44:	4b24      	ldr	r3, [pc, #144]	; (8012bd8 <SwitchClass+0x198>)
 8012b46:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8012b4a:	4b23      	ldr	r3, [pc, #140]	; (8012bd8 <SwitchClass+0x198>)
 8012b4c:	2203      	movs	r2, #3
 8012b4e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8012b52:	4b21      	ldr	r3, [pc, #132]	; (8012bd8 <SwitchClass+0x198>)
 8012b54:	2201      	movs	r2, #1
 8012b56:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8012b5a:	e009      	b.n	8012b70 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012b60:	b2db      	uxtb	r3, r3
 8012b62:	3301      	adds	r3, #1
 8012b64:	b2db      	uxtb	r3, r3
 8012b66:	73bb      	strb	r3, [r7, #14]
 8012b68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	ddb1      	ble.n	8012ad4 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8012b70:	4b19      	ldr	r3, [pc, #100]	; (8012bd8 <SwitchClass+0x198>)
 8012b72:	2200      	movs	r2, #0
 8012b74:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8012b78:	4b18      	ldr	r3, [pc, #96]	; (8012bdc <SwitchClass+0x19c>)
 8012b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b7c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8012b7e:	f001 f9a1 	bl	8013ec4 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 8012b82:	2300      	movs	r3, #0
 8012b84:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8012b86:	e01a      	b.n	8012bbe <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8012b88:	79fb      	ldrb	r3, [r7, #7]
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f004 fdd8 	bl	8017740 <LoRaMacClassBSwitchClass>
 8012b90:	4603      	mov	r3, r0
 8012b92:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8012b94:	7bfb      	ldrb	r3, [r7, #15]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d113      	bne.n	8012bc2 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8012b9a:	4a0e      	ldr	r2, [pc, #56]	; (8012bd4 <SwitchClass+0x194>)
 8012b9c:	79fb      	ldrb	r3, [r7, #7]
 8012b9e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 8012ba2:	e00e      	b.n	8012bc2 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8012ba4:	79fb      	ldrb	r3, [r7, #7]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d10d      	bne.n	8012bc6 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8012baa:	4a0a      	ldr	r2, [pc, #40]	; (8012bd4 <SwitchClass+0x194>)
 8012bac:	79fb      	ldrb	r3, [r7, #7]
 8012bae:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8012bb2:	4b0a      	ldr	r3, [pc, #40]	; (8012bdc <SwitchClass+0x19c>)
 8012bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bb6:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8012bb8:	2300      	movs	r3, #0
 8012bba:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8012bbc:	e003      	b.n	8012bc6 <SwitchClass+0x186>
            break;
 8012bbe:	bf00      	nop
 8012bc0:	e002      	b.n	8012bc8 <SwitchClass+0x188>
            break;
 8012bc2:	bf00      	nop
 8012bc4:	e000      	b.n	8012bc8 <SwitchClass+0x188>
            break;
 8012bc6:	bf00      	nop
        }
    }

    return status;
 8012bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bca:	4618      	mov	r0, r3
 8012bcc:	3710      	adds	r7, #16
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8012bd2:	bf00      	nop
 8012bd4:	20001328 	.word	0x20001328
 8012bd8:	20000e1c 	.word	0x20000e1c
 8012bdc:	08021d00 	.word	0x08021d00

08012be0 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b086      	sub	sp, #24
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	4603      	mov	r3, r0
 8012be8:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012bea:	4b10      	ldr	r3, [pc, #64]	; (8012c2c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012bec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012bf0:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8012bf2:	79fb      	ldrb	r3, [r7, #7]
 8012bf4:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8012bf6:	230d      	movs	r3, #13
 8012bf8:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8012bfa:	4b0c      	ldr	r3, [pc, #48]	; (8012c2c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012bfc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d001      	beq.n	8012c08 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8012c04:	230e      	movs	r3, #14
 8012c06:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c08:	4b08      	ldr	r3, [pc, #32]	; (8012c2c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c0e:	f107 0210 	add.w	r2, r7, #16
 8012c12:	4611      	mov	r1, r2
 8012c14:	4618      	mov	r0, r3
 8012c16:	f006 ff11 	bl	8019a3c <RegionGetPhyParam>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	b2db      	uxtb	r3, r3
}
 8012c22:	4618      	mov	r0, r3
 8012c24:	3718      	adds	r7, #24
 8012c26:	46bd      	mov	sp, r7
 8012c28:	bd80      	pop	{r7, pc}
 8012c2a:	bf00      	nop
 8012c2c:	20001328 	.word	0x20001328

08012c30 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b084      	sub	sp, #16
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	4603      	mov	r3, r0
 8012c38:	71fb      	strb	r3, [r7, #7]
 8012c3a:	460b      	mov	r3, r1
 8012c3c:	71bb      	strb	r3, [r7, #6]
 8012c3e:	4613      	mov	r3, r2
 8012c40:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8012c42:	2300      	movs	r3, #0
 8012c44:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8012c46:	2300      	movs	r3, #0
 8012c48:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8012c4a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7ff ffc6 	bl	8012be0 <GetMaxAppPayloadWithoutFOptsLength>
 8012c54:	4603      	mov	r3, r0
 8012c56:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8012c58:	79fb      	ldrb	r3, [r7, #7]
 8012c5a:	b29a      	uxth	r2, r3
 8012c5c:	797b      	ldrb	r3, [r7, #5]
 8012c5e:	b29b      	uxth	r3, r3
 8012c60:	4413      	add	r3, r2
 8012c62:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8012c64:	89ba      	ldrh	r2, [r7, #12]
 8012c66:	89fb      	ldrh	r3, [r7, #14]
 8012c68:	429a      	cmp	r2, r3
 8012c6a:	d804      	bhi.n	8012c76 <ValidatePayloadLength+0x46>
 8012c6c:	89bb      	ldrh	r3, [r7, #12]
 8012c6e:	2bff      	cmp	r3, #255	; 0xff
 8012c70:	d801      	bhi.n	8012c76 <ValidatePayloadLength+0x46>
    {
        return true;
 8012c72:	2301      	movs	r3, #1
 8012c74:	e000      	b.n	8012c78 <ValidatePayloadLength+0x48>
    }
    return false;
 8012c76:	2300      	movs	r3, #0
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3710      	adds	r7, #16
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}

08012c80 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8012c80:	b590      	push	{r4, r7, lr}
 8012c82:	b0a5      	sub	sp, #148	; 0x94
 8012c84:	af02      	add	r7, sp, #8
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	4608      	mov	r0, r1
 8012c8a:	4611      	mov	r1, r2
 8012c8c:	461a      	mov	r2, r3
 8012c8e:	4603      	mov	r3, r0
 8012c90:	70fb      	strb	r3, [r7, #3]
 8012c92:	460b      	mov	r3, r1
 8012c94:	70bb      	strb	r3, [r7, #2]
 8012c96:	4613      	mov	r3, r2
 8012c98:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8012cac:	f000 bc6d 	b.w	801358a <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8012cb0:	78fb      	ldrb	r3, [r7, #3]
 8012cb2:	687a      	ldr	r2, [r7, #4]
 8012cb4:	4413      	add	r3, r2
 8012cb6:	781b      	ldrb	r3, [r3, #0]
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f005 fa63 	bl	8018184 <LoRaMacCommandsGetCmdSize>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	461a      	mov	r2, r3
 8012cc2:	78fb      	ldrb	r3, [r7, #3]
 8012cc4:	441a      	add	r2, r3
 8012cc6:	78bb      	ldrb	r3, [r7, #2]
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	f300 8464 	bgt.w	8013596 <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8012cce:	78fb      	ldrb	r3, [r7, #3]
 8012cd0:	1c5a      	adds	r2, r3, #1
 8012cd2:	70fa      	strb	r2, [r7, #3]
 8012cd4:	461a      	mov	r2, r3
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	4413      	add	r3, r2
 8012cda:	781b      	ldrb	r3, [r3, #0]
 8012cdc:	3b02      	subs	r3, #2
 8012cde:	2b11      	cmp	r3, #17
 8012ce0:	f200 845b 	bhi.w	801359a <ProcessMacCommands+0x91a>
 8012ce4:	a201      	add	r2, pc, #4	; (adr r2, 8012cec <ProcessMacCommands+0x6c>)
 8012ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cea:	bf00      	nop
 8012cec:	08012d35 	.word	0x08012d35
 8012cf0:	08012d77 	.word	0x08012d77
 8012cf4:	08012e93 	.word	0x08012e93
 8012cf8:	08012ed1 	.word	0x08012ed1
 8012cfc:	08012fbd 	.word	0x08012fbd
 8012d00:	08013019 	.word	0x08013019
 8012d04:	080130d5 	.word	0x080130d5
 8012d08:	0801312b 	.word	0x0801312b
 8012d0c:	0801320f 	.word	0x0801320f
 8012d10:	0801359b 	.word	0x0801359b
 8012d14:	0801359b 	.word	0x0801359b
 8012d18:	080132b5 	.word	0x080132b5
 8012d1c:	0801359b 	.word	0x0801359b
 8012d20:	0801359b 	.word	0x0801359b
 8012d24:	080133cb 	.word	0x080133cb
 8012d28:	080133ff 	.word	0x080133ff
 8012d2c:	0801348f 	.word	0x0801348f
 8012d30:	08013505 	.word	0x08013505
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8012d34:	2004      	movs	r0, #4
 8012d36:	f005 fbfd 	bl	8018534 <LoRaMacConfirmQueueIsCmdActive>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	f000 8424 	beq.w	801358a <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8012d42:	2104      	movs	r1, #4
 8012d44:	2000      	movs	r0, #0
 8012d46:	f005 fb69 	bl	801841c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8012d4a:	78fb      	ldrb	r3, [r7, #3]
 8012d4c:	1c5a      	adds	r2, r3, #1
 8012d4e:	70fa      	strb	r2, [r7, #3]
 8012d50:	461a      	mov	r2, r3
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	4413      	add	r3, r2
 8012d56:	781a      	ldrb	r2, [r3, #0]
 8012d58:	4bac      	ldr	r3, [pc, #688]	; (801300c <ProcessMacCommands+0x38c>)
 8012d5a:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8012d5e:	78fb      	ldrb	r3, [r7, #3]
 8012d60:	1c5a      	adds	r2, r3, #1
 8012d62:	70fa      	strb	r2, [r7, #3]
 8012d64:	461a      	mov	r2, r3
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	4413      	add	r3, r2
 8012d6a:	781a      	ldrb	r2, [r3, #0]
 8012d6c:	4ba7      	ldr	r3, [pc, #668]	; (801300c <ProcessMacCommands+0x38c>)
 8012d6e:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 8012d72:	f000 bc0a 	b.w	801358a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8012d76:	2300      	movs	r3, #0
 8012d78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 8012d82:	2300      	movs	r3, #0
 8012d84:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8012d88:	2300      	movs	r3, #0
 8012d8a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 8012d8e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8012d92:	f083 0301 	eor.w	r3, r3, #1
 8012d96:	b2db      	uxtb	r3, r3
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d078      	beq.n	8012e8e <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8012da2:	78fb      	ldrb	r3, [r7, #3]
 8012da4:	3b01      	subs	r3, #1
 8012da6:	687a      	ldr	r2, [r7, #4]
 8012da8:	4413      	add	r3, r2
 8012daa:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8012dac:	78ba      	ldrb	r2, [r7, #2]
 8012dae:	78fb      	ldrb	r3, [r7, #3]
 8012db0:	1ad3      	subs	r3, r2, r3
 8012db2:	b2db      	uxtb	r3, r3
 8012db4:	3301      	adds	r3, #1
 8012db6:	b2db      	uxtb	r3, r3
 8012db8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012dbc:	4b94      	ldr	r3, [pc, #592]	; (8013010 <ProcessMacCommands+0x390>)
 8012dbe:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8012dc2:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012dc6:	4b92      	ldr	r3, [pc, #584]	; (8013010 <ProcessMacCommands+0x390>)
 8012dc8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012dcc:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012dd0:	4b8f      	ldr	r3, [pc, #572]	; (8013010 <ProcessMacCommands+0x390>)
 8012dd2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012dd6:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012dda:	4b8d      	ldr	r3, [pc, #564]	; (8013010 <ProcessMacCommands+0x390>)
 8012ddc:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012de0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012de4:	4b8a      	ldr	r3, [pc, #552]	; (8013010 <ProcessMacCommands+0x390>)
 8012de6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8012dea:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8012dee:	4b88      	ldr	r3, [pc, #544]	; (8013010 <ProcessMacCommands+0x390>)
 8012df0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8012df4:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8012df6:	4b86      	ldr	r3, [pc, #536]	; (8013010 <ProcessMacCommands+0x390>)
 8012df8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012dfc:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8012e00:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8012e04:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012e08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012e0c:	9301      	str	r3, [sp, #4]
 8012e0e:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8012e12:	9300      	str	r3, [sp, #0]
 8012e14:	4623      	mov	r3, r4
 8012e16:	f006 fece 	bl	8019bb6 <RegionLinkAdrReq>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8012e20:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012e24:	f003 0307 	and.w	r3, r3, #7
 8012e28:	2b07      	cmp	r3, #7
 8012e2a:	d10e      	bne.n	8012e4a <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8012e2c:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8012e30:	4b77      	ldr	r3, [pc, #476]	; (8013010 <ProcessMacCommands+0x390>)
 8012e32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8012e36:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8012e3a:	4b75      	ldr	r3, [pc, #468]	; (8013010 <ProcessMacCommands+0x390>)
 8012e3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8012e40:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8012e44:	4b72      	ldr	r3, [pc, #456]	; (8013010 <ProcessMacCommands+0x390>)
 8012e46:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8012e50:	e00b      	b.n	8012e6a <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8012e52:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8012e56:	2201      	movs	r2, #1
 8012e58:	4619      	mov	r1, r3
 8012e5a:	2003      	movs	r0, #3
 8012e5c:	f005 f842 	bl	8017ee4 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8012e60:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8012e64:	3301      	adds	r3, #1
 8012e66:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8012e6a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8012e6e:	4a69      	ldr	r2, [pc, #420]	; (8013014 <ProcessMacCommands+0x394>)
 8012e70:	fba2 2303 	umull	r2, r3, r2, r3
 8012e74:	089b      	lsrs	r3, r3, #2
 8012e76:	b2db      	uxtb	r3, r3
 8012e78:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8012e7c:	429a      	cmp	r2, r3
 8012e7e:	d3e8      	bcc.n	8012e52 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 8012e80:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8012e84:	78fb      	ldrb	r3, [r7, #3]
 8012e86:	4413      	add	r3, r2
 8012e88:	b2db      	uxtb	r3, r3
 8012e8a:	3b01      	subs	r3, #1
 8012e8c:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8012e8e:	bf00      	nop
 8012e90:	e37b      	b.n	801358a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8012e92:	78fb      	ldrb	r3, [r7, #3]
 8012e94:	1c5a      	adds	r2, r3, #1
 8012e96:	70fa      	strb	r2, [r7, #3]
 8012e98:	461a      	mov	r2, r3
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	4413      	add	r3, r2
 8012e9e:	781b      	ldrb	r3, [r3, #0]
 8012ea0:	f003 030f 	and.w	r3, r3, #15
 8012ea4:	b2da      	uxtb	r2, r3
 8012ea6:	4b5a      	ldr	r3, [pc, #360]	; (8013010 <ProcessMacCommands+0x390>)
 8012ea8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8012eac:	4b58      	ldr	r3, [pc, #352]	; (8013010 <ProcessMacCommands+0x390>)
 8012eae:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8012eb2:	461a      	mov	r2, r3
 8012eb4:	2301      	movs	r3, #1
 8012eb6:	4093      	lsls	r3, r2
 8012eb8:	b29a      	uxth	r2, r3
 8012eba:	4b55      	ldr	r3, [pc, #340]	; (8013010 <ProcessMacCommands+0x390>)
 8012ebc:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8012ec0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012ec4:	2200      	movs	r2, #0
 8012ec6:	4619      	mov	r1, r3
 8012ec8:	2004      	movs	r0, #4
 8012eca:	f005 f80b 	bl	8017ee4 <LoRaMacCommandsAddCmd>
                break;
 8012ece:	e35c      	b.n	801358a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8012ed0:	2307      	movs	r3, #7
 8012ed2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8012ed6:	78fb      	ldrb	r3, [r7, #3]
 8012ed8:	687a      	ldr	r2, [r7, #4]
 8012eda:	4413      	add	r3, r2
 8012edc:	781b      	ldrb	r3, [r3, #0]
 8012ede:	091b      	lsrs	r3, r3, #4
 8012ee0:	b2db      	uxtb	r3, r3
 8012ee2:	b25b      	sxtb	r3, r3
 8012ee4:	f003 0307 	and.w	r3, r3, #7
 8012ee8:	b25b      	sxtb	r3, r3
 8012eea:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8012eee:	78fb      	ldrb	r3, [r7, #3]
 8012ef0:	687a      	ldr	r2, [r7, #4]
 8012ef2:	4413      	add	r3, r2
 8012ef4:	781b      	ldrb	r3, [r3, #0]
 8012ef6:	b25b      	sxtb	r3, r3
 8012ef8:	f003 030f 	and.w	r3, r3, #15
 8012efc:	b25b      	sxtb	r3, r3
 8012efe:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 8012f02:	78fb      	ldrb	r3, [r7, #3]
 8012f04:	3301      	adds	r3, #1
 8012f06:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8012f08:	78fb      	ldrb	r3, [r7, #3]
 8012f0a:	1c5a      	adds	r2, r3, #1
 8012f0c:	70fa      	strb	r2, [r7, #3]
 8012f0e:	461a      	mov	r2, r3
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	4413      	add	r3, r2
 8012f14:	781b      	ldrb	r3, [r3, #0]
 8012f16:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012f18:	78fb      	ldrb	r3, [r7, #3]
 8012f1a:	1c5a      	adds	r2, r3, #1
 8012f1c:	70fa      	strb	r2, [r7, #3]
 8012f1e:	461a      	mov	r2, r3
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	4413      	add	r3, r2
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	021a      	lsls	r2, r3, #8
 8012f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f2a:	4313      	orrs	r3, r2
 8012f2c:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012f2e:	78fb      	ldrb	r3, [r7, #3]
 8012f30:	1c5a      	adds	r2, r3, #1
 8012f32:	70fa      	strb	r2, [r7, #3]
 8012f34:	461a      	mov	r2, r3
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	4413      	add	r3, r2
 8012f3a:	781b      	ldrb	r3, [r3, #0]
 8012f3c:	041a      	lsls	r2, r3, #16
 8012f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f40:	4313      	orrs	r3, r2
 8012f42:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8012f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f46:	2264      	movs	r2, #100	; 0x64
 8012f48:	fb02 f303 	mul.w	r3, r2, r3
 8012f4c:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8012f4e:	4b30      	ldr	r3, [pc, #192]	; (8013010 <ProcessMacCommands+0x390>)
 8012f50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012f54:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012f58:	4611      	mov	r1, r2
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f006 fe45 	bl	8019bea <RegionRxParamSetupReq>
 8012f60:	4603      	mov	r3, r0
 8012f62:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8012f66:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012f6a:	f003 0307 	and.w	r3, r3, #7
 8012f6e:	2b07      	cmp	r3, #7
 8012f70:	d117      	bne.n	8012fa2 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8012f72:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8012f76:	b2da      	uxtb	r2, r3
 8012f78:	4b25      	ldr	r3, [pc, #148]	; (8013010 <ProcessMacCommands+0x390>)
 8012f7a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8012f7e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8012f82:	b2da      	uxtb	r2, r3
 8012f84:	4b22      	ldr	r3, [pc, #136]	; (8013010 <ProcessMacCommands+0x390>)
 8012f86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8012f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f8c:	4a20      	ldr	r2, [pc, #128]	; (8013010 <ProcessMacCommands+0x390>)
 8012f8e:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8012f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f92:	4a1f      	ldr	r2, [pc, #124]	; (8013010 <ProcessMacCommands+0x390>)
 8012f94:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8012f96:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8012f9a:	b2da      	uxtb	r2, r3
 8012f9c:	4b1c      	ldr	r3, [pc, #112]	; (8013010 <ProcessMacCommands+0x390>)
 8012f9e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 8012fa2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012fa6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8012faa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012fae:	2201      	movs	r2, #1
 8012fb0:	4619      	mov	r1, r3
 8012fb2:	2005      	movs	r0, #5
 8012fb4:	f004 ff96 	bl	8017ee4 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 8012fb8:	bf00      	nop
 8012fba:	e2e6      	b.n	801358a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8012fbc:	23ff      	movs	r3, #255	; 0xff
 8012fbe:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8012fc2:	4b12      	ldr	r3, [pc, #72]	; (801300c <ProcessMacCommands+0x38c>)
 8012fc4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d00d      	beq.n	8012fe8 <ProcessMacCommands+0x368>
 8012fcc:	4b0f      	ldr	r3, [pc, #60]	; (801300c <ProcessMacCommands+0x38c>)
 8012fce:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d007      	beq.n	8012fe8 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8012fd8:	4b0c      	ldr	r3, [pc, #48]	; (801300c <ProcessMacCommands+0x38c>)
 8012fda:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	4798      	blx	r3
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8012fe8:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8012fec:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8012ff0:	787b      	ldrb	r3, [r7, #1]
 8012ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ff6:	b2db      	uxtb	r3, r3
 8012ff8:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8012ffc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013000:	2202      	movs	r2, #2
 8013002:	4619      	mov	r1, r3
 8013004:	2006      	movs	r0, #6
 8013006:	f004 ff6d 	bl	8017ee4 <LoRaMacCommandsAddCmd>
                break;
 801300a:	e2be      	b.n	801358a <ProcessMacCommands+0x90a>
 801300c:	20000e1c 	.word	0x20000e1c
 8013010:	20001328 	.word	0x20001328
 8013014:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8013018:	2303      	movs	r3, #3
 801301a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 801301e:	78fb      	ldrb	r3, [r7, #3]
 8013020:	1c5a      	adds	r2, r3, #1
 8013022:	70fa      	strb	r2, [r7, #3]
 8013024:	461a      	mov	r2, r3
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	4413      	add	r3, r2
 801302a:	781b      	ldrb	r3, [r3, #0]
 801302c:	b25b      	sxtb	r3, r3
 801302e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8013032:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013036:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8013038:	78fb      	ldrb	r3, [r7, #3]
 801303a:	1c5a      	adds	r2, r3, #1
 801303c:	70fa      	strb	r2, [r7, #3]
 801303e:	461a      	mov	r2, r3
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	4413      	add	r3, r2
 8013044:	781b      	ldrb	r3, [r3, #0]
 8013046:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8013048:	78fb      	ldrb	r3, [r7, #3]
 801304a:	1c5a      	adds	r2, r3, #1
 801304c:	70fa      	strb	r2, [r7, #3]
 801304e:	461a      	mov	r2, r3
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	4413      	add	r3, r2
 8013054:	781b      	ldrb	r3, [r3, #0]
 8013056:	021a      	lsls	r2, r3, #8
 8013058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801305a:	4313      	orrs	r3, r2
 801305c:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801305e:	78fb      	ldrb	r3, [r7, #3]
 8013060:	1c5a      	adds	r2, r3, #1
 8013062:	70fa      	strb	r2, [r7, #3]
 8013064:	461a      	mov	r2, r3
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	4413      	add	r3, r2
 801306a:	781b      	ldrb	r3, [r3, #0]
 801306c:	041a      	lsls	r2, r3, #16
 801306e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013070:	4313      	orrs	r3, r2
 8013072:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8013074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013076:	2264      	movs	r2, #100	; 0x64
 8013078:	fb02 f303 	mul.w	r3, r2, r3
 801307c:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 801307e:	2300      	movs	r3, #0
 8013080:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8013082:	78fb      	ldrb	r3, [r7, #3]
 8013084:	1c5a      	adds	r2, r3, #1
 8013086:	70fa      	strb	r2, [r7, #3]
 8013088:	461a      	mov	r2, r3
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	4413      	add	r3, r2
 801308e:	781b      	ldrb	r3, [r3, #0]
 8013090:	b25b      	sxtb	r3, r3
 8013092:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8013096:	4b85      	ldr	r3, [pc, #532]	; (80132ac <ProcessMacCommands+0x62c>)
 8013098:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801309c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80130a0:	4611      	mov	r1, r2
 80130a2:	4618      	mov	r0, r3
 80130a4:	f006 fdb4 	bl	8019c10 <RegionNewChannelReq>
 80130a8:	4603      	mov	r3, r0
 80130aa:	b2db      	uxtb	r3, r3
 80130ac:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80130b0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80130b4:	b25b      	sxtb	r3, r3
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	db0a      	blt.n	80130d0 <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 80130ba:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80130be:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80130c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80130c6:	2201      	movs	r2, #1
 80130c8:	4619      	mov	r1, r3
 80130ca:	2007      	movs	r0, #7
 80130cc:	f004 ff0a 	bl	8017ee4 <LoRaMacCommandsAddCmd>
                }
                break;
 80130d0:	bf00      	nop
 80130d2:	e25a      	b.n	801358a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 80130d4:	78fb      	ldrb	r3, [r7, #3]
 80130d6:	1c5a      	adds	r2, r3, #1
 80130d8:	70fa      	strb	r2, [r7, #3]
 80130da:	461a      	mov	r2, r3
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	4413      	add	r3, r2
 80130e0:	781b      	ldrb	r3, [r3, #0]
 80130e2:	f003 030f 	and.w	r3, r3, #15
 80130e6:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 80130ea:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d104      	bne.n	80130fc <ProcessMacCommands+0x47c>
                {
                    delay++;
 80130f2:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80130f6:	3301      	adds	r3, #1
 80130f8:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80130fc:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8013100:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013104:	fb02 f303 	mul.w	r3, r2, r3
 8013108:	461a      	mov	r2, r3
 801310a:	4b68      	ldr	r3, [pc, #416]	; (80132ac <ProcessMacCommands+0x62c>)
 801310c:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801310e:	4b67      	ldr	r3, [pc, #412]	; (80132ac <ProcessMacCommands+0x62c>)
 8013110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013112:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8013116:	4a65      	ldr	r2, [pc, #404]	; (80132ac <ProcessMacCommands+0x62c>)
 8013118:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 801311a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801311e:	2200      	movs	r2, #0
 8013120:	4619      	mov	r1, r3
 8013122:	2008      	movs	r0, #8
 8013124:	f004 fede 	bl	8017ee4 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 8013128:	e22f      	b.n	801358a <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801312a:	78fb      	ldrb	r3, [r7, #3]
 801312c:	1c5a      	adds	r2, r3, #1
 801312e:	70fa      	strb	r2, [r7, #3]
 8013130:	461a      	mov	r2, r3
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	4413      	add	r3, r2
 8013136:	781b      	ldrb	r3, [r3, #0]
 8013138:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 801313c:	2300      	movs	r3, #0
 801313e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8013142:	2300      	movs	r3, #0
 8013144:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8013148:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801314c:	f003 0320 	and.w	r3, r3, #32
 8013150:	2b00      	cmp	r3, #0
 8013152:	d002      	beq.n	801315a <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8013154:	2301      	movs	r3, #1
 8013156:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 801315a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801315e:	f003 0310 	and.w	r3, r3, #16
 8013162:	2b00      	cmp	r3, #0
 8013164:	d002      	beq.n	801316c <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8013166:	2301      	movs	r3, #1
 8013168:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 801316c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8013170:	f003 030f 	and.w	r3, r3, #15
 8013174:	b2db      	uxtb	r3, r3
 8013176:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 801317a:	4b4c      	ldr	r3, [pc, #304]	; (80132ac <ProcessMacCommands+0x62c>)
 801317c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013180:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8013184:	4611      	mov	r1, r2
 8013186:	4618      	mov	r0, r3
 8013188:	f006 fd55 	bl	8019c36 <RegionTxParamSetupReq>
 801318c:	4603      	mov	r3, r0
 801318e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013192:	d03a      	beq.n	801320a <ProcessMacCommands+0x58a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8013194:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8013198:	4b44      	ldr	r3, [pc, #272]	; (80132ac <ProcessMacCommands+0x62c>)
 801319a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 801319e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80131a2:	4b42      	ldr	r3, [pc, #264]	; (80132ac <ProcessMacCommands+0x62c>)
 80131a4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80131a8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80131ac:	461a      	mov	r2, r3
 80131ae:	4b40      	ldr	r3, [pc, #256]	; (80132b0 <ProcessMacCommands+0x630>)
 80131b0:	5c9b      	ldrb	r3, [r3, r2]
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7ed fd6c 	bl	8000c90 <__aeabi_ui2f>
 80131b8:	4603      	mov	r3, r0
 80131ba:	4a3c      	ldr	r2, [pc, #240]	; (80132ac <ProcessMacCommands+0x62c>)
 80131bc:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80131be:	2302      	movs	r3, #2
 80131c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80131c4:	4b39      	ldr	r3, [pc, #228]	; (80132ac <ProcessMacCommands+0x62c>)
 80131c6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80131ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80131ce:	4b37      	ldr	r3, [pc, #220]	; (80132ac <ProcessMacCommands+0x62c>)
 80131d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80131d4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80131d8:	4611      	mov	r1, r2
 80131da:	4618      	mov	r0, r3
 80131dc:	f006 fc2e 	bl	8019a3c <RegionGetPhyParam>
 80131e0:	4603      	mov	r3, r0
 80131e2:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80131e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e6:	b25a      	sxtb	r2, r3
 80131e8:	4b30      	ldr	r3, [pc, #192]	; (80132ac <ProcessMacCommands+0x62c>)
 80131ea:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80131ee:	4293      	cmp	r3, r2
 80131f0:	bfb8      	it	lt
 80131f2:	4613      	movlt	r3, r2
 80131f4:	b25a      	sxtb	r2, r3
 80131f6:	4b2d      	ldr	r3, [pc, #180]	; (80132ac <ProcessMacCommands+0x62c>)
 80131f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80131fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013200:	2200      	movs	r2, #0
 8013202:	4619      	mov	r1, r3
 8013204:	2009      	movs	r0, #9
 8013206:	f004 fe6d 	bl	8017ee4 <LoRaMacCommandsAddCmd>
                }
                break;
 801320a:	bf00      	nop
 801320c:	e1bd      	b.n	801358a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 801320e:	2303      	movs	r3, #3
 8013210:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8013214:	78fb      	ldrb	r3, [r7, #3]
 8013216:	1c5a      	adds	r2, r3, #1
 8013218:	70fa      	strb	r2, [r7, #3]
 801321a:	461a      	mov	r2, r3
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	4413      	add	r3, r2
 8013220:	781b      	ldrb	r3, [r3, #0]
 8013222:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8013226:	78fb      	ldrb	r3, [r7, #3]
 8013228:	1c5a      	adds	r2, r3, #1
 801322a:	70fa      	strb	r2, [r7, #3]
 801322c:	461a      	mov	r2, r3
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	4413      	add	r3, r2
 8013232:	781b      	ldrb	r3, [r3, #0]
 8013234:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8013236:	78fb      	ldrb	r3, [r7, #3]
 8013238:	1c5a      	adds	r2, r3, #1
 801323a:	70fa      	strb	r2, [r7, #3]
 801323c:	461a      	mov	r2, r3
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	4413      	add	r3, r2
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	021a      	lsls	r2, r3, #8
 8013246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013248:	4313      	orrs	r3, r2
 801324a:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801324c:	78fb      	ldrb	r3, [r7, #3]
 801324e:	1c5a      	adds	r2, r3, #1
 8013250:	70fa      	strb	r2, [r7, #3]
 8013252:	461a      	mov	r2, r3
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	4413      	add	r3, r2
 8013258:	781b      	ldrb	r3, [r3, #0]
 801325a:	041a      	lsls	r2, r3, #16
 801325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325e:	4313      	orrs	r3, r2
 8013260:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8013262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013264:	2264      	movs	r2, #100	; 0x64
 8013266:	fb02 f303 	mul.w	r3, r2, r3
 801326a:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 801326c:	4b0f      	ldr	r3, [pc, #60]	; (80132ac <ProcessMacCommands+0x62c>)
 801326e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013272:	f107 0220 	add.w	r2, r7, #32
 8013276:	4611      	mov	r1, r2
 8013278:	4618      	mov	r0, r3
 801327a:	f006 fcef 	bl	8019c5c <RegionDlChannelReq>
 801327e:	4603      	mov	r3, r0
 8013280:	b2db      	uxtb	r3, r3
 8013282:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8013286:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801328a:	b25b      	sxtb	r3, r3
 801328c:	2b00      	cmp	r3, #0
 801328e:	db0a      	blt.n	80132a6 <ProcessMacCommands+0x626>
                {
                    macCmdPayload[0] = status;
 8013290:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013294:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8013298:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801329c:	2201      	movs	r2, #1
 801329e:	4619      	mov	r1, r3
 80132a0:	200a      	movs	r0, #10
 80132a2:	f004 fe1f 	bl	8017ee4 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 80132a6:	bf00      	nop
 80132a8:	e16f      	b.n	801358a <ProcessMacCommands+0x90a>
 80132aa:	bf00      	nop
 80132ac:	20001328 	.word	0x20001328
 80132b0:	08021cb8 	.word	0x08021cb8
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80132b4:	200a      	movs	r0, #10
 80132b6:	f005 f93d 	bl	8018534 <LoRaMacConfirmQueueIsCmdActive>
 80132ba:	4603      	mov	r3, r0
 80132bc:	2b00      	cmp	r3, #0
 80132be:	f000 8164 	beq.w	801358a <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80132c2:	210a      	movs	r1, #10
 80132c4:	2000      	movs	r0, #0
 80132c6:	f005 f8a9 	bl	801841c <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 80132ca:	f107 0318 	add.w	r3, r7, #24
 80132ce:	2200      	movs	r2, #0
 80132d0:	601a      	str	r2, [r3, #0]
 80132d2:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 80132d4:	f107 0310 	add.w	r3, r7, #16
 80132d8:	2200      	movs	r2, #0
 80132da:	601a      	str	r2, [r3, #0]
 80132dc:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 80132de:	f107 0308 	add.w	r3, r7, #8
 80132e2:	2200      	movs	r2, #0
 80132e4:	601a      	str	r2, [r3, #0]
 80132e6:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80132e8:	78fb      	ldrb	r3, [r7, #3]
 80132ea:	1c5a      	adds	r2, r3, #1
 80132ec:	70fa      	strb	r2, [r7, #3]
 80132ee:	461a      	mov	r2, r3
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	4413      	add	r3, r2
 80132f4:	781b      	ldrb	r3, [r3, #0]
 80132f6:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80132f8:	78fb      	ldrb	r3, [r7, #3]
 80132fa:	1c5a      	adds	r2, r3, #1
 80132fc:	70fa      	strb	r2, [r7, #3]
 80132fe:	461a      	mov	r2, r3
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	4413      	add	r3, r2
 8013304:	781b      	ldrb	r3, [r3, #0]
 8013306:	021a      	lsls	r2, r3, #8
 8013308:	69bb      	ldr	r3, [r7, #24]
 801330a:	4313      	orrs	r3, r2
 801330c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 801330e:	78fb      	ldrb	r3, [r7, #3]
 8013310:	1c5a      	adds	r2, r3, #1
 8013312:	70fa      	strb	r2, [r7, #3]
 8013314:	461a      	mov	r2, r3
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	4413      	add	r3, r2
 801331a:	781b      	ldrb	r3, [r3, #0]
 801331c:	041a      	lsls	r2, r3, #16
 801331e:	69bb      	ldr	r3, [r7, #24]
 8013320:	4313      	orrs	r3, r2
 8013322:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8013324:	78fb      	ldrb	r3, [r7, #3]
 8013326:	1c5a      	adds	r2, r3, #1
 8013328:	70fa      	strb	r2, [r7, #3]
 801332a:	461a      	mov	r2, r3
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	4413      	add	r3, r2
 8013330:	781b      	ldrb	r3, [r3, #0]
 8013332:	061a      	lsls	r2, r3, #24
 8013334:	69bb      	ldr	r3, [r7, #24]
 8013336:	4313      	orrs	r3, r2
 8013338:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 801333a:	78fb      	ldrb	r3, [r7, #3]
 801333c:	1c5a      	adds	r2, r3, #1
 801333e:	70fa      	strb	r2, [r7, #3]
 8013340:	461a      	mov	r2, r3
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	4413      	add	r3, r2
 8013346:	781b      	ldrb	r3, [r3, #0]
 8013348:	b21b      	sxth	r3, r3
 801334a:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 801334c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8013350:	461a      	mov	r2, r3
 8013352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013356:	fb02 f303 	mul.w	r3, r2, r3
 801335a:	121b      	asrs	r3, r3, #8
 801335c:	b21b      	sxth	r3, r3
 801335e:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8013360:	f107 0310 	add.w	r3, r7, #16
 8013364:	f107 0218 	add.w	r2, r7, #24
 8013368:	e892 0003 	ldmia.w	r2, {r0, r1}
 801336c:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8013370:	693a      	ldr	r2, [r7, #16]
 8013372:	4b8c      	ldr	r3, [pc, #560]	; (80135a4 <ProcessMacCommands+0x924>)
 8013374:	4413      	add	r3, r2
 8013376:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8013378:	f107 0308 	add.w	r3, r7, #8
 801337c:	4618      	mov	r0, r3
 801337e:	f00c fae7 	bl	801f950 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8013382:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8013386:	4b88      	ldr	r3, [pc, #544]	; (80135a8 <ProcessMacCommands+0x928>)
 8013388:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 801338c:	9200      	str	r2, [sp, #0]
 801338e:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8013392:	f107 0210 	add.w	r2, r7, #16
 8013396:	ca06      	ldmia	r2, {r1, r2}
 8013398:	f00c fa73 	bl	801f882 <SysTimeSub>
 801339c:	f107 0010 	add.w	r0, r7, #16
 80133a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80133a2:	9300      	str	r3, [sp, #0]
 80133a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80133a6:	f107 0208 	add.w	r2, r7, #8
 80133aa:	ca06      	ldmia	r2, {r1, r2}
 80133ac:	f00c fa30 	bl	801f810 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 80133b0:	f107 0310 	add.w	r3, r7, #16
 80133b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80133b8:	f00c fa9c 	bl	801f8f4 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80133bc:	f004 fb10 	bl	80179e0 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80133c0:	4b79      	ldr	r3, [pc, #484]	; (80135a8 <ProcessMacCommands+0x928>)
 80133c2:	2201      	movs	r2, #1
 80133c4:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 80133c8:	e0df      	b.n	801358a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80133ca:	200d      	movs	r0, #13
 80133cc:	f005 f8b2 	bl	8018534 <LoRaMacConfirmQueueIsCmdActive>
 80133d0:	4603      	mov	r3, r0
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	f000 80d9 	beq.w	801358a <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80133d8:	210d      	movs	r1, #13
 80133da:	2000      	movs	r0, #0
 80133dc:	f005 f81e 	bl	801841c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80133e0:	4b71      	ldr	r3, [pc, #452]	; (80135a8 <ProcessMacCommands+0x928>)
 80133e2:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80133e6:	2b04      	cmp	r3, #4
 80133e8:	f000 80cf 	beq.w	801358a <ProcessMacCommands+0x90a>
 80133ec:	4b6e      	ldr	r3, [pc, #440]	; (80135a8 <ProcessMacCommands+0x928>)
 80133ee:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80133f2:	2b05      	cmp	r3, #5
 80133f4:	f000 80c9 	beq.w	801358a <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 80133f8:	f004 fa12 	bl	8017820 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 80133fc:	e0c5      	b.n	801358a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 80133fe:	2303      	movs	r3, #3
 8013400:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8013404:	2300      	movs	r3, #0
 8013406:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8013408:	78fb      	ldrb	r3, [r7, #3]
 801340a:	1c5a      	adds	r2, r3, #1
 801340c:	70fa      	strb	r2, [r7, #3]
 801340e:	461a      	mov	r2, r3
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	4413      	add	r3, r2
 8013414:	781b      	ldrb	r3, [r3, #0]
 8013416:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8013418:	78fb      	ldrb	r3, [r7, #3]
 801341a:	1c5a      	adds	r2, r3, #1
 801341c:	70fa      	strb	r2, [r7, #3]
 801341e:	461a      	mov	r2, r3
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	4413      	add	r3, r2
 8013424:	781b      	ldrb	r3, [r3, #0]
 8013426:	021b      	lsls	r3, r3, #8
 8013428:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801342a:	4313      	orrs	r3, r2
 801342c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 801342e:	78fb      	ldrb	r3, [r7, #3]
 8013430:	1c5a      	adds	r2, r3, #1
 8013432:	70fa      	strb	r2, [r7, #3]
 8013434:	461a      	mov	r2, r3
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	4413      	add	r3, r2
 801343a:	781b      	ldrb	r3, [r3, #0]
 801343c:	041b      	lsls	r3, r3, #16
 801343e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013440:	4313      	orrs	r3, r2
 8013442:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8013444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013446:	2264      	movs	r2, #100	; 0x64
 8013448:	fb02 f303 	mul.w	r3, r2, r3
 801344c:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 801344e:	78fb      	ldrb	r3, [r7, #3]
 8013450:	1c5a      	adds	r2, r3, #1
 8013452:	70fa      	strb	r2, [r7, #3]
 8013454:	461a      	mov	r2, r3
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	4413      	add	r3, r2
 801345a:	781b      	ldrb	r3, [r3, #0]
 801345c:	f003 030f 	and.w	r3, r3, #15
 8013460:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8013464:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013468:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801346a:	4618      	mov	r0, r3
 801346c:	f004 f9ee 	bl	801784c <LoRaMacClassBPingSlotChannelReq>
 8013470:	4603      	mov	r3, r0
 8013472:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8013476:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 801347a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 801347e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013482:	2201      	movs	r2, #1
 8013484:	4619      	mov	r1, r3
 8013486:	2011      	movs	r0, #17
 8013488:	f004 fd2c 	bl	8017ee4 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 801348c:	e07d      	b.n	801358a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 801348e:	200e      	movs	r0, #14
 8013490:	f005 f850 	bl	8018534 <LoRaMacConfirmQueueIsCmdActive>
 8013494:	4603      	mov	r3, r0
 8013496:	2b00      	cmp	r3, #0
 8013498:	d077      	beq.n	801358a <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 801349a:	210e      	movs	r1, #14
 801349c:	2000      	movs	r0, #0
 801349e:	f004 ffbd 	bl	801841c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80134a2:	2300      	movs	r3, #0
 80134a4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 80134a8:	2300      	movs	r3, #0
 80134aa:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80134ae:	78fb      	ldrb	r3, [r7, #3]
 80134b0:	1c5a      	adds	r2, r3, #1
 80134b2:	70fa      	strb	r2, [r7, #3]
 80134b4:	461a      	mov	r2, r3
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	4413      	add	r3, r2
 80134ba:	781b      	ldrb	r3, [r3, #0]
 80134bc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80134c0:	78fb      	ldrb	r3, [r7, #3]
 80134c2:	1c5a      	adds	r2, r3, #1
 80134c4:	70fa      	strb	r2, [r7, #3]
 80134c6:	461a      	mov	r2, r3
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	4413      	add	r3, r2
 80134cc:	781b      	ldrb	r3, [r3, #0]
 80134ce:	021b      	lsls	r3, r3, #8
 80134d0:	b21a      	sxth	r2, r3
 80134d2:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80134d6:	4313      	orrs	r3, r2
 80134d8:	b21b      	sxth	r3, r3
 80134da:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 80134de:	78fb      	ldrb	r3, [r7, #3]
 80134e0:	1c5a      	adds	r2, r3, #1
 80134e2:	70fa      	strb	r2, [r7, #3]
 80134e4:	461a      	mov	r2, r3
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	4413      	add	r3, r2
 80134ea:	781b      	ldrb	r3, [r3, #0]
 80134ec:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80134f0:	4b2e      	ldr	r3, [pc, #184]	; (80135ac <ProcessMacCommands+0x92c>)
 80134f2:	681a      	ldr	r2, [r3, #0]
 80134f4:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 80134f8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80134fc:	4618      	mov	r0, r3
 80134fe:	f004 fa11 	bl	8017924 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8013502:	e042      	b.n	801358a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8013504:	2300      	movs	r3, #0
 8013506:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 801350a:	78fb      	ldrb	r3, [r7, #3]
 801350c:	1c5a      	adds	r2, r3, #1
 801350e:	70fa      	strb	r2, [r7, #3]
 8013510:	461a      	mov	r2, r3
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	4413      	add	r3, r2
 8013516:	781b      	ldrb	r3, [r3, #0]
 8013518:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 801351c:	78fb      	ldrb	r3, [r7, #3]
 801351e:	1c5a      	adds	r2, r3, #1
 8013520:	70fa      	strb	r2, [r7, #3]
 8013522:	461a      	mov	r2, r3
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	4413      	add	r3, r2
 8013528:	781b      	ldrb	r3, [r3, #0]
 801352a:	021b      	lsls	r3, r3, #8
 801352c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013530:	4313      	orrs	r3, r2
 8013532:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8013536:	78fb      	ldrb	r3, [r7, #3]
 8013538:	1c5a      	adds	r2, r3, #1
 801353a:	70fa      	strb	r2, [r7, #3]
 801353c:	461a      	mov	r2, r3
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	4413      	add	r3, r2
 8013542:	781b      	ldrb	r3, [r3, #0]
 8013544:	041b      	lsls	r3, r3, #16
 8013546:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801354a:	4313      	orrs	r3, r2
 801354c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8013550:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013554:	2264      	movs	r2, #100	; 0x64
 8013556:	fb02 f303 	mul.w	r3, r2, r3
 801355a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 801355e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8013562:	f004 fab5 	bl	8017ad0 <LoRaMacClassBBeaconFreqReq>
 8013566:	4603      	mov	r3, r0
 8013568:	2b00      	cmp	r3, #0
 801356a:	d003      	beq.n	8013574 <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 801356c:	2301      	movs	r3, #1
 801356e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8013572:	e002      	b.n	801357a <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8013574:	2300      	movs	r3, #0
 8013576:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 801357a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801357e:	2201      	movs	r2, #1
 8013580:	4619      	mov	r1, r3
 8013582:	2013      	movs	r0, #19
 8013584:	f004 fcae 	bl	8017ee4 <LoRaMacCommandsAddCmd>
                }
                break;
 8013588:	bf00      	nop
    while( macIndex < commandsSize )
 801358a:	78fa      	ldrb	r2, [r7, #3]
 801358c:	78bb      	ldrb	r3, [r7, #2]
 801358e:	429a      	cmp	r2, r3
 8013590:	f4ff ab8e 	bcc.w	8012cb0 <ProcessMacCommands+0x30>
 8013594:	e002      	b.n	801359c <ProcessMacCommands+0x91c>
            return;
 8013596:	bf00      	nop
 8013598:	e000      	b.n	801359c <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 801359a:	bf00      	nop
        }
    }
}
 801359c:	378c      	adds	r7, #140	; 0x8c
 801359e:	46bd      	mov	sp, r7
 80135a0:	bd90      	pop	{r4, r7, pc}
 80135a2:	bf00      	nop
 80135a4:	12d53d80 	.word	0x12d53d80
 80135a8:	20000e1c 	.word	0x20000e1c
 80135ac:	20002180 	.word	0x20002180

080135b0 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b08e      	sub	sp, #56	; 0x38
 80135b4:	af02      	add	r7, sp, #8
 80135b6:	60f8      	str	r0, [r7, #12]
 80135b8:	607a      	str	r2, [r7, #4]
 80135ba:	461a      	mov	r2, r3
 80135bc:	460b      	mov	r3, r1
 80135be:	72fb      	strb	r3, [r7, #11]
 80135c0:	4613      	mov	r3, r2
 80135c2:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80135c4:	2303      	movs	r3, #3
 80135c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80135ca:	4b65      	ldr	r3, [pc, #404]	; (8013760 <Send+0x1b0>)
 80135cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80135d0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80135d4:	4b62      	ldr	r3, [pc, #392]	; (8013760 <Send+0x1b0>)
 80135d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80135da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80135de:	4b60      	ldr	r3, [pc, #384]	; (8013760 <Send+0x1b0>)
 80135e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135e2:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80135e4:	4b5e      	ldr	r3, [pc, #376]	; (8013760 <Send+0x1b0>)
 80135e6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d101      	bne.n	80135f2 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80135ee:	2307      	movs	r3, #7
 80135f0:	e0b1      	b.n	8013756 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80135f2:	4b5b      	ldr	r3, [pc, #364]	; (8013760 <Send+0x1b0>)
 80135f4:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d102      	bne.n	8013602 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80135fc:	4b58      	ldr	r3, [pc, #352]	; (8013760 <Send+0x1b0>)
 80135fe:	2200      	movs	r2, #0
 8013600:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8013602:	2300      	movs	r3, #0
 8013604:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8013608:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801360c:	f36f 0303 	bfc	r3, #0, #4
 8013610:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8013614:	4b52      	ldr	r3, [pc, #328]	; (8013760 <Send+0x1b0>)
 8013616:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 801361a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801361e:	f362 13c7 	bfi	r3, r2, #7, #1
 8013622:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013626:	4b4e      	ldr	r3, [pc, #312]	; (8013760 <Send+0x1b0>)
 8013628:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801362c:	2b01      	cmp	r3, #1
 801362e:	d106      	bne.n	801363e <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8013630:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013634:	f043 0310 	orr.w	r3, r3, #16
 8013638:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 801363c:	e005      	b.n	801364a <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 801363e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013642:	f36f 1304 	bfc	r3, #4, #1
 8013646:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 801364a:	4b45      	ldr	r3, [pc, #276]	; (8013760 <Send+0x1b0>)
 801364c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013650:	2b00      	cmp	r3, #0
 8013652:	d005      	beq.n	8013660 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8013654:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013658:	f043 0320 	orr.w	r3, r3, #32
 801365c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8013660:	4b3f      	ldr	r3, [pc, #252]	; (8013760 <Send+0x1b0>)
 8013662:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8013666:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 8013668:	2301      	movs	r3, #1
 801366a:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 801366c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013670:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8013674:	b2db      	uxtb	r3, r3
 8013676:	2b00      	cmp	r3, #0
 8013678:	bf14      	ite	ne
 801367a:	2301      	movne	r3, #1
 801367c:	2300      	moveq	r3, #0
 801367e:	b2db      	uxtb	r3, r3
 8013680:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8013682:	4b37      	ldr	r3, [pc, #220]	; (8013760 <Send+0x1b0>)
 8013684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013686:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8013688:	4b36      	ldr	r3, [pc, #216]	; (8013764 <Send+0x1b4>)
 801368a:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 801368e:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8013690:	4b34      	ldr	r3, [pc, #208]	; (8013764 <Send+0x1b4>)
 8013692:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8013696:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013698:	4b31      	ldr	r3, [pc, #196]	; (8013760 <Send+0x1b0>)
 801369a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801369e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80136a2:	4b2f      	ldr	r3, [pc, #188]	; (8013760 <Send+0x1b0>)
 80136a4:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80136a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80136ac:	4b2c      	ldr	r3, [pc, #176]	; (8013760 <Send+0x1b0>)
 80136ae:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80136b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80136b6:	4b2a      	ldr	r3, [pc, #168]	; (8013760 <Send+0x1b0>)
 80136b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80136bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80136c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80136c4:	f107 0014 	add.w	r0, r7, #20
 80136c8:	4a27      	ldr	r2, [pc, #156]	; (8013768 <Send+0x1b8>)
 80136ca:	4928      	ldr	r1, [pc, #160]	; (801376c <Send+0x1bc>)
 80136cc:	f002 fc1a 	bl	8015f04 <LoRaMacAdrCalcNext>
 80136d0:	4603      	mov	r3, r0
 80136d2:	461a      	mov	r2, r3
 80136d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80136d8:	f362 1386 	bfi	r3, r2, #6, #1
 80136dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80136e0:	7afa      	ldrb	r2, [r7, #11]
 80136e2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80136e6:	893b      	ldrh	r3, [r7, #8]
 80136e8:	9300      	str	r3, [sp, #0]
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	68f8      	ldr	r0, [r7, #12]
 80136ee:	f000 fc2d 	bl	8013f4c <PrepareFrame>
 80136f2:	4603      	mov	r3, r0
 80136f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80136f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d003      	beq.n	8013708 <Send+0x158>
 8013700:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013704:	2b0a      	cmp	r3, #10
 8013706:	d107      	bne.n	8013718 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8013708:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801370c:	4618      	mov	r0, r3
 801370e:	f000 f96d 	bl	80139ec <ScheduleTx>
 8013712:	4603      	mov	r3, r0
 8013714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8013718:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801371c:	2b00      	cmp	r3, #0
 801371e:	d00a      	beq.n	8013736 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8013720:	4a0f      	ldr	r2, [pc, #60]	; (8013760 <Send+0x1b0>)
 8013722:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013726:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 801372a:	4a0d      	ldr	r2, [pc, #52]	; (8013760 <Send+0x1b0>)
 801372c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013730:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8013734:	e00d      	b.n	8013752 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8013736:	4b0a      	ldr	r3, [pc, #40]	; (8013760 <Send+0x1b0>)
 8013738:	2200      	movs	r2, #0
 801373a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 801373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013740:	4a07      	ldr	r2, [pc, #28]	; (8013760 <Send+0x1b0>)
 8013742:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8013744:	f004 fc46 	bl	8017fd4 <LoRaMacCommandsRemoveNoneStickyCmds>
 8013748:	4603      	mov	r3, r0
 801374a:	2b00      	cmp	r3, #0
 801374c:	d001      	beq.n	8013752 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801374e:	2313      	movs	r3, #19
 8013750:	e001      	b.n	8013756 <Send+0x1a6>
        }
    }
    return status;
 8013752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013756:	4618      	mov	r0, r3
 8013758:	3730      	adds	r7, #48	; 0x30
 801375a:	46bd      	mov	sp, r7
 801375c:	bd80      	pop	{r7, pc}
 801375e:	bf00      	nop
 8013760:	20001328 	.word	0x20001328
 8013764:	20000e1c 	.word	0x20000e1c
 8013768:	20001360 	.word	0x20001360
 801376c:	20001361 	.word	0x20001361

08013770 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b084      	sub	sp, #16
 8013774:	af00      	add	r7, sp, #0
 8013776:	4603      	mov	r3, r0
 8013778:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801377a:	2300      	movs	r3, #0
 801377c:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 801377e:	2300      	movs	r3, #0
 8013780:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8013782:	2301      	movs	r3, #1
 8013784:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8013786:	79fb      	ldrb	r3, [r7, #7]
 8013788:	2bff      	cmp	r3, #255	; 0xff
 801378a:	d129      	bne.n	80137e0 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 801378c:	2000      	movs	r0, #0
 801378e:	f7ff f957 	bl	8012a40 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8013792:	4b1a      	ldr	r3, [pc, #104]	; (80137fc <SendReJoinReq+0x8c>)
 8013794:	2200      	movs	r2, #0
 8013796:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 801379a:	4b18      	ldr	r3, [pc, #96]	; (80137fc <SendReJoinReq+0x8c>)
 801379c:	4a18      	ldr	r2, [pc, #96]	; (8013800 <SendReJoinReq+0x90>)
 801379e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80137a2:	4b16      	ldr	r3, [pc, #88]	; (80137fc <SendReJoinReq+0x8c>)
 80137a4:	22ff      	movs	r2, #255	; 0xff
 80137a6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80137aa:	7b3b      	ldrb	r3, [r7, #12]
 80137ac:	f36f 1347 	bfc	r3, #5, #3
 80137b0:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80137b2:	7b3a      	ldrb	r2, [r7, #12]
 80137b4:	4b11      	ldr	r3, [pc, #68]	; (80137fc <SendReJoinReq+0x8c>)
 80137b6:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 80137ba:	f7fc fa75 	bl	800fca8 <SecureElementGetJoinEui>
 80137be:	4603      	mov	r3, r0
 80137c0:	2208      	movs	r2, #8
 80137c2:	4619      	mov	r1, r3
 80137c4:	480f      	ldr	r0, [pc, #60]	; (8013804 <SendReJoinReq+0x94>)
 80137c6:	f008 fce4 	bl	801c192 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 80137ca:	f7fc fa4b 	bl	800fc64 <SecureElementGetDevEui>
 80137ce:	4603      	mov	r3, r0
 80137d0:	2208      	movs	r2, #8
 80137d2:	4619      	mov	r1, r3
 80137d4:	480c      	ldr	r0, [pc, #48]	; (8013808 <SendReJoinReq+0x98>)
 80137d6:	f008 fcdc 	bl	801c192 <memcpy1>

            allowDelayedTx = false;
 80137da:	2300      	movs	r3, #0
 80137dc:	73fb      	strb	r3, [r7, #15]

            break;
 80137de:	e002      	b.n	80137e6 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80137e0:	2302      	movs	r3, #2
 80137e2:	73bb      	strb	r3, [r7, #14]
            break;
 80137e4:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 80137e6:	7bfb      	ldrb	r3, [r7, #15]
 80137e8:	4618      	mov	r0, r3
 80137ea:	f000 f8ff 	bl	80139ec <ScheduleTx>
 80137ee:	4603      	mov	r3, r0
 80137f0:	73bb      	strb	r3, [r7, #14]
    return status;
 80137f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80137f4:	4618      	mov	r0, r3
 80137f6:	3710      	adds	r7, #16
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}
 80137fc:	20000e1c 	.word	0x20000e1c
 8013800:	20000e1e 	.word	0x20000e1e
 8013804:	20000f2a 	.word	0x20000f2a
 8013808:	20000f32 	.word	0x20000f32

0801380c <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 801380c:	b580      	push	{r7, lr}
 801380e:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8013810:	f003 feb8 	bl	8017584 <LoRaMacClassBIsBeaconExpected>
 8013814:	4603      	mov	r3, r0
 8013816:	2b00      	cmp	r3, #0
 8013818:	d001      	beq.n	801381e <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 801381a:	230e      	movs	r3, #14
 801381c:	e013      	b.n	8013846 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801381e:	4b0b      	ldr	r3, [pc, #44]	; (801384c <CheckForClassBCollision+0x40>)
 8013820:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013824:	2b01      	cmp	r3, #1
 8013826:	d10d      	bne.n	8013844 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8013828:	f003 fec4 	bl	80175b4 <LoRaMacClassBIsPingExpected>
 801382c:	4603      	mov	r3, r0
 801382e:	2b00      	cmp	r3, #0
 8013830:	d001      	beq.n	8013836 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8013832:	230f      	movs	r3, #15
 8013834:	e007      	b.n	8013846 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8013836:	f003 fecd 	bl	80175d4 <LoRaMacClassBIsMulticastExpected>
 801383a:	4603      	mov	r3, r0
 801383c:	2b00      	cmp	r3, #0
 801383e:	d001      	beq.n	8013844 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8013840:	230f      	movs	r3, #15
 8013842:	e000      	b.n	8013846 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8013844:	2300      	movs	r3, #0
}
 8013846:	4618      	mov	r0, r3
 8013848:	bd80      	pop	{r7, pc}
 801384a:	bf00      	nop
 801384c:	20001328 	.word	0x20001328

08013850 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8013850:	b590      	push	{r4, r7, lr}
 8013852:	b083      	sub	sp, #12
 8013854:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013856:	4b2d      	ldr	r3, [pc, #180]	; (801390c <ComputeRxWindowParameters+0xbc>)
 8013858:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 801385c:	4b2b      	ldr	r3, [pc, #172]	; (801390c <ComputeRxWindowParameters+0xbc>)
 801385e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8013862:	4b2a      	ldr	r3, [pc, #168]	; (801390c <ComputeRxWindowParameters+0xbc>)
 8013864:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 8013868:	4b28      	ldr	r3, [pc, #160]	; (801390c <ComputeRxWindowParameters+0xbc>)
 801386a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 801386e:	4b27      	ldr	r3, [pc, #156]	; (801390c <ComputeRxWindowParameters+0xbc>)
 8013870:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8013874:	b25b      	sxtb	r3, r3
 8013876:	f006 fa48 	bl	8019d0a <RegionApplyDrOffset>
 801387a:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801387c:	b259      	sxtb	r1, r3
 801387e:	4b23      	ldr	r3, [pc, #140]	; (801390c <ComputeRxWindowParameters+0xbc>)
 8013880:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013884:	4b21      	ldr	r3, [pc, #132]	; (801390c <ComputeRxWindowParameters+0xbc>)
 8013886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013888:	4821      	ldr	r0, [pc, #132]	; (8013910 <ComputeRxWindowParameters+0xc0>)
 801388a:	9000      	str	r0, [sp, #0]
 801388c:	4620      	mov	r0, r4
 801388e:	f006 f94c 	bl	8019b2a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013892:	4b1e      	ldr	r3, [pc, #120]	; (801390c <ComputeRxWindowParameters+0xbc>)
 8013894:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8013898:	4b1c      	ldr	r3, [pc, #112]	; (801390c <ComputeRxWindowParameters+0xbc>)
 801389a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801389e:	b259      	sxtb	r1, r3
 80138a0:	4b1a      	ldr	r3, [pc, #104]	; (801390c <ComputeRxWindowParameters+0xbc>)
 80138a2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80138a6:	4b19      	ldr	r3, [pc, #100]	; (801390c <ComputeRxWindowParameters+0xbc>)
 80138a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138aa:	4c1a      	ldr	r4, [pc, #104]	; (8013914 <ComputeRxWindowParameters+0xc4>)
 80138ac:	9400      	str	r4, [sp, #0]
 80138ae:	f006 f93c 	bl	8019b2a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80138b2:	4b16      	ldr	r3, [pc, #88]	; (801390c <ComputeRxWindowParameters+0xbc>)
 80138b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80138b6:	4a18      	ldr	r2, [pc, #96]	; (8013918 <ComputeRxWindowParameters+0xc8>)
 80138b8:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80138bc:	4413      	add	r3, r2
 80138be:	4a16      	ldr	r2, [pc, #88]	; (8013918 <ComputeRxWindowParameters+0xc8>)
 80138c0:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80138c4:	4b11      	ldr	r3, [pc, #68]	; (801390c <ComputeRxWindowParameters+0xbc>)
 80138c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138c8:	4a13      	ldr	r2, [pc, #76]	; (8013918 <ComputeRxWindowParameters+0xc8>)
 80138ca:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 80138ce:	4413      	add	r3, r2
 80138d0:	4a11      	ldr	r2, [pc, #68]	; (8013918 <ComputeRxWindowParameters+0xc8>)
 80138d2:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80138d6:	4b0d      	ldr	r3, [pc, #52]	; (801390c <ComputeRxWindowParameters+0xbc>)
 80138d8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d111      	bne.n	8013904 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80138e0:	4b0a      	ldr	r3, [pc, #40]	; (801390c <ComputeRxWindowParameters+0xbc>)
 80138e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80138e4:	4a0c      	ldr	r2, [pc, #48]	; (8013918 <ComputeRxWindowParameters+0xc8>)
 80138e6:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80138ea:	4413      	add	r3, r2
 80138ec:	4a0a      	ldr	r2, [pc, #40]	; (8013918 <ComputeRxWindowParameters+0xc8>)
 80138ee:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80138f2:	4b06      	ldr	r3, [pc, #24]	; (801390c <ComputeRxWindowParameters+0xbc>)
 80138f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80138f6:	4a08      	ldr	r2, [pc, #32]	; (8013918 <ComputeRxWindowParameters+0xc8>)
 80138f8:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 80138fc:	4413      	add	r3, r2
 80138fe:	4a06      	ldr	r2, [pc, #24]	; (8013918 <ComputeRxWindowParameters+0xc8>)
 8013900:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8013904:	bf00      	nop
 8013906:	3704      	adds	r7, #4
 8013908:	46bd      	mov	sp, r7
 801390a:	bd90      	pop	{r4, r7, pc}
 801390c:	20001328 	.word	0x20001328
 8013910:	200011d4 	.word	0x200011d4
 8013914:	200011e8 	.word	0x200011e8
 8013918:	20000e1c 	.word	0x20000e1c

0801391c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b082      	sub	sp, #8
 8013920:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8013922:	2300      	movs	r3, #0
 8013924:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8013926:	4b13      	ldr	r3, [pc, #76]	; (8013974 <VerifyTxFrame+0x58>)
 8013928:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801392c:	2b00      	cmp	r3, #0
 801392e:	d01b      	beq.n	8013968 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013930:	1d3b      	adds	r3, r7, #4
 8013932:	4618      	mov	r0, r3
 8013934:	f004 fb94 	bl	8018060 <LoRaMacCommandsGetSizeSerializedCmds>
 8013938:	4603      	mov	r3, r0
 801393a:	2b00      	cmp	r3, #0
 801393c:	d001      	beq.n	8013942 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801393e:	2313      	movs	r3, #19
 8013940:	e013      	b.n	801396a <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8013942:	4b0d      	ldr	r3, [pc, #52]	; (8013978 <VerifyTxFrame+0x5c>)
 8013944:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013948:	4a0a      	ldr	r2, [pc, #40]	; (8013974 <VerifyTxFrame+0x58>)
 801394a:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 801394e:	687a      	ldr	r2, [r7, #4]
 8013950:	b2d2      	uxtb	r2, r2
 8013952:	4618      	mov	r0, r3
 8013954:	f7ff f96c 	bl	8012c30 <ValidatePayloadLength>
 8013958:	4603      	mov	r3, r0
 801395a:	f083 0301 	eor.w	r3, r3, #1
 801395e:	b2db      	uxtb	r3, r3
 8013960:	2b00      	cmp	r3, #0
 8013962:	d001      	beq.n	8013968 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8013964:	2308      	movs	r3, #8
 8013966:	e000      	b.n	801396a <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8013968:	2300      	movs	r3, #0
}
 801396a:	4618      	mov	r0, r3
 801396c:	3708      	adds	r7, #8
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}
 8013972:	bf00      	nop
 8013974:	20001328 	.word	0x20001328
 8013978:	20000e1c 	.word	0x20000e1c

0801397c <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b082      	sub	sp, #8
 8013980:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8013982:	4b18      	ldr	r3, [pc, #96]	; (80139e4 <SerializeTxFrame+0x68>)
 8013984:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013988:	2b00      	cmp	r3, #0
 801398a:	d002      	beq.n	8013992 <SerializeTxFrame+0x16>
 801398c:	2b04      	cmp	r3, #4
 801398e:	d011      	beq.n	80139b4 <SerializeTxFrame+0x38>
 8013990:	e021      	b.n	80139d6 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8013992:	4815      	ldr	r0, [pc, #84]	; (80139e8 <SerializeTxFrame+0x6c>)
 8013994:	f005 fec9 	bl	801972a <LoRaMacSerializerJoinRequest>
 8013998:	4603      	mov	r3, r0
 801399a:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801399c:	79fb      	ldrb	r3, [r7, #7]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d001      	beq.n	80139a6 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80139a2:	2311      	movs	r3, #17
 80139a4:	e01a      	b.n	80139dc <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80139a6:	4b0f      	ldr	r3, [pc, #60]	; (80139e4 <SerializeTxFrame+0x68>)
 80139a8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80139ac:	b29a      	uxth	r2, r3
 80139ae:	4b0d      	ldr	r3, [pc, #52]	; (80139e4 <SerializeTxFrame+0x68>)
 80139b0:	801a      	strh	r2, [r3, #0]
            break;
 80139b2:	e012      	b.n	80139da <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80139b4:	480c      	ldr	r0, [pc, #48]	; (80139e8 <SerializeTxFrame+0x6c>)
 80139b6:	f005 ff3a 	bl	801982e <LoRaMacSerializerData>
 80139ba:	4603      	mov	r3, r0
 80139bc:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80139be:	79fb      	ldrb	r3, [r7, #7]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d001      	beq.n	80139c8 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80139c4:	2311      	movs	r3, #17
 80139c6:	e009      	b.n	80139dc <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80139c8:	4b06      	ldr	r3, [pc, #24]	; (80139e4 <SerializeTxFrame+0x68>)
 80139ca:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80139ce:	b29a      	uxth	r2, r3
 80139d0:	4b04      	ldr	r3, [pc, #16]	; (80139e4 <SerializeTxFrame+0x68>)
 80139d2:	801a      	strh	r2, [r3, #0]
            break;
 80139d4:	e001      	b.n	80139da <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80139d6:	2303      	movs	r3, #3
 80139d8:	e000      	b.n	80139dc <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 80139da:	2300      	movs	r3, #0
}
 80139dc:	4618      	mov	r0, r3
 80139de:	3708      	adds	r7, #8
 80139e0:	46bd      	mov	sp, r7
 80139e2:	bd80      	pop	{r7, pc}
 80139e4:	20000e1c 	.word	0x20000e1c
 80139e8:	20000f24 	.word	0x20000f24

080139ec <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b090      	sub	sp, #64	; 0x40
 80139f0:	af02      	add	r7, sp, #8
 80139f2:	4603      	mov	r3, r0
 80139f4:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80139f6:	2303      	movs	r3, #3
 80139f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 80139fc:	f7ff ff06 	bl	801380c <CheckForClassBCollision>
 8013a00:	4603      	mov	r3, r0
 8013a02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013a06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d002      	beq.n	8013a14 <ScheduleTx+0x28>
    {
        return status;
 8013a0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013a12:	e08f      	b.n	8013b34 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8013a14:	f000 f8fa 	bl	8013c0c <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8013a18:	f7ff ffb0 	bl	801397c <SerializeTxFrame>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013a22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d002      	beq.n	8013a30 <ScheduleTx+0x44>
    {
        return status;
 8013a2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013a2e:	e081      	b.n	8013b34 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8013a30:	4b42      	ldr	r3, [pc, #264]	; (8013b3c <ScheduleTx+0x150>)
 8013a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a34:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013a36:	4b41      	ldr	r3, [pc, #260]	; (8013b3c <ScheduleTx+0x150>)
 8013a38:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013a3c:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8013a3e:	4b3f      	ldr	r3, [pc, #252]	; (8013b3c <ScheduleTx+0x150>)
 8013a40:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8013a44:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8013a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f00b ffb8 	bl	801f9c0 <SysTimeGetMcuTime>
 8013a50:	4638      	mov	r0, r7
 8013a52:	4b3a      	ldr	r3, [pc, #232]	; (8013b3c <ScheduleTx+0x150>)
 8013a54:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8013a58:	9200      	str	r2, [sp, #0]
 8013a5a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8013a5e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8013a62:	ca06      	ldmia	r2, {r1, r2}
 8013a64:	f00b ff0d 	bl	801f882 <SysTimeSub>
 8013a68:	f107 0320 	add.w	r3, r7, #32
 8013a6c:	463a      	mov	r2, r7
 8013a6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013a72:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8013a76:	4b31      	ldr	r3, [pc, #196]	; (8013b3c <ScheduleTx+0x150>)
 8013a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a7a:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8013a82:	2301      	movs	r3, #1
 8013a84:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8013a86:	4b2e      	ldr	r3, [pc, #184]	; (8013b40 <ScheduleTx+0x154>)
 8013a88:	881b      	ldrh	r3, [r3, #0]
 8013a8a:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8013a8c:	4b2b      	ldr	r3, [pc, #172]	; (8013b3c <ScheduleTx+0x150>)
 8013a8e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d104      	bne.n	8013aa0 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8013a96:	2301      	movs	r3, #1
 8013a98:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8013aa0:	4b26      	ldr	r3, [pc, #152]	; (8013b3c <ScheduleTx+0x150>)
 8013aa2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8013aa6:	f107 0114 	add.w	r1, r7, #20
 8013aaa:	4b26      	ldr	r3, [pc, #152]	; (8013b44 <ScheduleTx+0x158>)
 8013aac:	9300      	str	r3, [sp, #0]
 8013aae:	4b26      	ldr	r3, [pc, #152]	; (8013b48 <ScheduleTx+0x15c>)
 8013ab0:	4a26      	ldr	r2, [pc, #152]	; (8013b4c <ScheduleTx+0x160>)
 8013ab2:	f006 f900 	bl	8019cb6 <RegionNextChannel>
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8013abc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d022      	beq.n	8013b0a <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8013ac4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013ac8:	2b0b      	cmp	r3, #11
 8013aca:	d11b      	bne.n	8013b04 <ScheduleTx+0x118>
 8013acc:	7bfb      	ldrb	r3, [r7, #15]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d018      	beq.n	8013b04 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8013ad2:	4b1b      	ldr	r3, [pc, #108]	; (8013b40 <ScheduleTx+0x154>)
 8013ad4:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d011      	beq.n	8013b00 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8013adc:	4b18      	ldr	r3, [pc, #96]	; (8013b40 <ScheduleTx+0x154>)
 8013ade:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013ae2:	f043 0320 	orr.w	r3, r3, #32
 8013ae6:	4a16      	ldr	r2, [pc, #88]	; (8013b40 <ScheduleTx+0x154>)
 8013ae8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8013aec:	4b14      	ldr	r3, [pc, #80]	; (8013b40 <ScheduleTx+0x154>)
 8013aee:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8013af2:	4619      	mov	r1, r3
 8013af4:	4816      	ldr	r0, [pc, #88]	; (8013b50 <ScheduleTx+0x164>)
 8013af6:	f00c fd07 	bl	8020508 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8013afa:	4815      	ldr	r0, [pc, #84]	; (8013b50 <ScheduleTx+0x164>)
 8013afc:	f00c fc26 	bl	802034c <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8013b00:	2300      	movs	r3, #0
 8013b02:	e017      	b.n	8013b34 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8013b04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b08:	e014      	b.n	8013b34 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8013b0a:	f7ff fea1 	bl	8013850 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8013b0e:	f7ff ff05 	bl	801391c <VerifyTxFrame>
 8013b12:	4603      	mov	r3, r0
 8013b14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013b18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d002      	beq.n	8013b26 <ScheduleTx+0x13a>
    {
        return status;
 8013b20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b24:	e006      	b.n	8013b34 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8013b26:	4b06      	ldr	r3, [pc, #24]	; (8013b40 <ScheduleTx+0x154>)
 8013b28:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f000 fb29 	bl	8014184 <SendFrameOnChannel>
 8013b32:	4603      	mov	r3, r0
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	3738      	adds	r7, #56	; 0x38
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bd80      	pop	{r7, pc}
 8013b3c:	20001328 	.word	0x20001328
 8013b40:	20000e1c 	.word	0x20000e1c
 8013b44:	20001358 	.word	0x20001358
 8013b48:	200012a4 	.word	0x200012a4
 8013b4c:	20001231 	.word	0x20001231
 8013b50:	20001184 	.word	0x20001184

08013b54 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b084      	sub	sp, #16
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	460a      	mov	r2, r1
 8013b5e:	71fb      	strb	r3, [r7, #7]
 8013b60:	4613      	mov	r3, r2
 8013b62:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013b64:	2313      	movs	r3, #19
 8013b66:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8013b68:	2300      	movs	r3, #0
 8013b6a:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8013b6c:	4b25      	ldr	r3, [pc, #148]	; (8013c04 <SecureFrame+0xb0>)
 8013b6e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d002      	beq.n	8013b7c <SecureFrame+0x28>
 8013b76:	2b04      	cmp	r3, #4
 8013b78:	d011      	beq.n	8013b9e <SecureFrame+0x4a>
 8013b7a:	e03b      	b.n	8013bf4 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8013b7c:	4822      	ldr	r0, [pc, #136]	; (8013c08 <SecureFrame+0xb4>)
 8013b7e:	f005 f99d 	bl	8018ebc <LoRaMacCryptoPrepareJoinRequest>
 8013b82:	4603      	mov	r3, r0
 8013b84:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8013b86:	7bfb      	ldrb	r3, [r7, #15]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d001      	beq.n	8013b90 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b8c:	2311      	movs	r3, #17
 8013b8e:	e034      	b.n	8013bfa <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8013b90:	4b1c      	ldr	r3, [pc, #112]	; (8013c04 <SecureFrame+0xb0>)
 8013b92:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013b96:	b29a      	uxth	r2, r3
 8013b98:	4b1a      	ldr	r3, [pc, #104]	; (8013c04 <SecureFrame+0xb0>)
 8013b9a:	801a      	strh	r2, [r3, #0]
            break;
 8013b9c:	e02c      	b.n	8013bf8 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013b9e:	f107 0308 	add.w	r3, r7, #8
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	f005 f8a4 	bl	8018cf0 <LoRaMacCryptoGetFCntUp>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d001      	beq.n	8013bb2 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8013bae:	2312      	movs	r3, #18
 8013bb0:	e023      	b.n	8013bfa <SecureFrame+0xa6>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8013bb2:	4b14      	ldr	r3, [pc, #80]	; (8013c04 <SecureFrame+0xb0>)
 8013bb4:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d104      	bne.n	8013bc6 <SecureFrame+0x72>
 8013bbc:	4b11      	ldr	r3, [pc, #68]	; (8013c04 <SecureFrame+0xb0>)
 8013bbe:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8013bc2:	2b01      	cmp	r3, #1
 8013bc4:	d902      	bls.n	8013bcc <SecureFrame+0x78>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	3b01      	subs	r3, #1
 8013bca:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8013bcc:	68b8      	ldr	r0, [r7, #8]
 8013bce:	79ba      	ldrb	r2, [r7, #6]
 8013bd0:	79f9      	ldrb	r1, [r7, #7]
 8013bd2:	4b0d      	ldr	r3, [pc, #52]	; (8013c08 <SecureFrame+0xb4>)
 8013bd4:	f005 fa8a 	bl	80190ec <LoRaMacCryptoSecureMessage>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8013bdc:	7bfb      	ldrb	r3, [r7, #15]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d001      	beq.n	8013be6 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013be2:	2311      	movs	r3, #17
 8013be4:	e009      	b.n	8013bfa <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8013be6:	4b07      	ldr	r3, [pc, #28]	; (8013c04 <SecureFrame+0xb0>)
 8013be8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013bec:	b29a      	uxth	r2, r3
 8013bee:	4b05      	ldr	r3, [pc, #20]	; (8013c04 <SecureFrame+0xb0>)
 8013bf0:	801a      	strh	r2, [r3, #0]
            break;
 8013bf2:	e001      	b.n	8013bf8 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013bf4:	2303      	movs	r3, #3
 8013bf6:	e000      	b.n	8013bfa <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8013bf8:	2300      	movs	r3, #0
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3710      	adds	r7, #16
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}
 8013c02:	bf00      	nop
 8013c04:	20000e1c 	.word	0x20000e1c
 8013c08:	20000f24 	.word	0x20000f24

08013c0c <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8013c0c:	b480      	push	{r7}
 8013c0e:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8013c10:	4b09      	ldr	r3, [pc, #36]	; (8013c38 <CalculateBackOff+0x2c>)
 8013c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d10a      	bne.n	8013c2e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8013c18:	4b07      	ldr	r3, [pc, #28]	; (8013c38 <CalculateBackOff+0x2c>)
 8013c1a:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8013c1e:	3b01      	subs	r3, #1
 8013c20:	4a06      	ldr	r2, [pc, #24]	; (8013c3c <CalculateBackOff+0x30>)
 8013c22:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 8013c26:	fb02 f303 	mul.w	r3, r2, r3
 8013c2a:	4a03      	ldr	r2, [pc, #12]	; (8013c38 <CalculateBackOff+0x2c>)
 8013c2c:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8013c2e:	bf00      	nop
 8013c30:	46bd      	mov	sp, r7
 8013c32:	bc80      	pop	{r7}
 8013c34:	4770      	bx	lr
 8013c36:	bf00      	nop
 8013c38:	20001328 	.word	0x20001328
 8013c3c:	20000e1c 	.word	0x20000e1c

08013c40 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b082      	sub	sp, #8
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	4603      	mov	r3, r0
 8013c48:	7139      	strb	r1, [r7, #4]
 8013c4a:	71fb      	strb	r3, [r7, #7]
 8013c4c:	4613      	mov	r3, r2
 8013c4e:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8013c50:	79fb      	ldrb	r3, [r7, #7]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d002      	beq.n	8013c5c <RemoveMacCommands+0x1c>
 8013c56:	79fb      	ldrb	r3, [r7, #7]
 8013c58:	2b01      	cmp	r3, #1
 8013c5a:	d10d      	bne.n	8013c78 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8013c5c:	79bb      	ldrb	r3, [r7, #6]
 8013c5e:	2b01      	cmp	r3, #1
 8013c60:	d108      	bne.n	8013c74 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8013c62:	793b      	ldrb	r3, [r7, #4]
 8013c64:	f003 0320 	and.w	r3, r3, #32
 8013c68:	b2db      	uxtb	r3, r3
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d004      	beq.n	8013c78 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8013c6e:	f004 f9d5 	bl	801801c <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8013c72:	e001      	b.n	8013c78 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8013c74:	f004 f9d2 	bl	801801c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8013c78:	bf00      	nop
 8013c7a:	3708      	adds	r7, #8
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}

08013c80 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8013c80:	b5b0      	push	{r4, r5, r7, lr}
 8013c82:	b08e      	sub	sp, #56	; 0x38
 8013c84:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8013c86:	4b68      	ldr	r3, [pc, #416]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013c88:	2200      	movs	r2, #0
 8013c8a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8013c8e:	4b66      	ldr	r3, [pc, #408]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013c90:	2200      	movs	r2, #0
 8013c92:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8013c94:	4b65      	ldr	r3, [pc, #404]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013c96:	2200      	movs	r2, #0
 8013c98:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 8013c9c:	4b63      	ldr	r3, [pc, #396]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013c9e:	2201      	movs	r2, #1
 8013ca0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013ca4:	4b61      	ldr	r3, [pc, #388]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013ca6:	2201      	movs	r2, #1
 8013ca8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8013cac:	4b5f      	ldr	r3, [pc, #380]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013cae:	2200      	movs	r2, #0
 8013cb0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8013cb4:	4b5c      	ldr	r3, [pc, #368]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8013cbc:	4b5a      	ldr	r3, [pc, #360]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013cbe:	2201      	movs	r2, #1
 8013cc0:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013cc4:	4b58      	ldr	r3, [pc, #352]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013cc6:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8013cca:	4b57      	ldr	r3, [pc, #348]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013cd0:	4b55      	ldr	r3, [pc, #340]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013cd2:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8013cd6:	4b54      	ldr	r3, [pc, #336]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013cd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8013cdc:	4b52      	ldr	r3, [pc, #328]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013cde:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 8013ce2:	4b51      	ldr	r3, [pc, #324]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013ce4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013ce8:	4b4f      	ldr	r3, [pc, #316]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013cea:	4a4f      	ldr	r2, [pc, #316]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013cec:	3364      	adds	r3, #100	; 0x64
 8013cee:	32a8      	adds	r2, #168	; 0xa8
 8013cf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013cf4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013cf8:	4b4b      	ldr	r3, [pc, #300]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013cfa:	4a4b      	ldr	r2, [pc, #300]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013cfc:	336c      	adds	r3, #108	; 0x6c
 8013cfe:	32b0      	adds	r2, #176	; 0xb0
 8013d00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013d04:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8013d08:	4b47      	ldr	r3, [pc, #284]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013d0a:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8013d0e:	4b46      	ldr	r3, [pc, #280]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013d10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8013d14:	4b44      	ldr	r3, [pc, #272]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013d16:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 8013d1a:	4b43      	ldr	r3, [pc, #268]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013d1c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8013d20:	4b41      	ldr	r3, [pc, #260]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013d22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013d26:	4a40      	ldr	r2, [pc, #256]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013d28:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013d2a:	4b3f      	ldr	r3, [pc, #252]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013d2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8013d30:	4a3d      	ldr	r2, [pc, #244]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013d32:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 8013d34:	4b3d      	ldr	r3, [pc, #244]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013d36:	2200      	movs	r2, #0
 8013d38:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8013d3c:	4b3a      	ldr	r3, [pc, #232]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013d3e:	2200      	movs	r2, #0
 8013d40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8013d44:	2301      	movs	r3, #1
 8013d46:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8013d48:	4b39      	ldr	r3, [pc, #228]	; (8013e30 <ResetMacParameters+0x1b0>)
 8013d4a:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013d4c:	4b39      	ldr	r3, [pc, #228]	; (8013e34 <ResetMacParameters+0x1b4>)
 8013d4e:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013d50:	4b35      	ldr	r3, [pc, #212]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013d56:	1d3a      	adds	r2, r7, #4
 8013d58:	4611      	mov	r1, r2
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f005 fe97 	bl	8019a8e <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8013d60:	4b32      	ldr	r3, [pc, #200]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013d62:	2200      	movs	r2, #0
 8013d64:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8013d68:	4b30      	ldr	r3, [pc, #192]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013d6a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8013d6e:	4b2f      	ldr	r3, [pc, #188]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013d70:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8013d74:	4b2c      	ldr	r3, [pc, #176]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013d78:	4a2c      	ldr	r2, [pc, #176]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013d7a:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013d7e:	4b2a      	ldr	r3, [pc, #168]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013d80:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8013d84:	4b29      	ldr	r3, [pc, #164]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013d86:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8013d8a:	4b27      	ldr	r3, [pc, #156]	; (8013e28 <ResetMacParameters+0x1a8>)
 8013d8c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8013d90:	4b26      	ldr	r3, [pc, #152]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013d92:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8013d96:	4b25      	ldr	r3, [pc, #148]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013d98:	2200      	movs	r2, #0
 8013d9a:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8013d9e:	4b23      	ldr	r3, [pc, #140]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013da0:	2201      	movs	r2, #1
 8013da2:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8013da6:	4a21      	ldr	r2, [pc, #132]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013da8:	4b20      	ldr	r3, [pc, #128]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013daa:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8013dae:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8013db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013db6:	682b      	ldr	r3, [r5, #0]
 8013db8:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013dba:	4b1c      	ldr	r3, [pc, #112]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013dbc:	2201      	movs	r2, #1
 8013dbe:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013dc2:	4b1a      	ldr	r3, [pc, #104]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013dc4:	2202      	movs	r2, #2
 8013dc6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8013dca:	2300      	movs	r3, #0
 8013dcc:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8013dce:	2300      	movs	r3, #0
 8013dd0:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 8013dd2:	4b16      	ldr	r3, [pc, #88]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013dd4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d009      	beq.n	8013df0 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8013ddc:	4b13      	ldr	r3, [pc, #76]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013dde:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013de2:	685b      	ldr	r3, [r3, #4]
 8013de4:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8013de6:	4b11      	ldr	r3, [pc, #68]	; (8013e2c <ResetMacParameters+0x1ac>)
 8013de8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013dec:	691b      	ldr	r3, [r3, #16]
 8013dee:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8013df0:	4b11      	ldr	r3, [pc, #68]	; (8013e38 <ResetMacParameters+0x1b8>)
 8013df2:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8013df4:	4b11      	ldr	r3, [pc, #68]	; (8013e3c <ResetMacParameters+0x1bc>)
 8013df6:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8013df8:	4b11      	ldr	r3, [pc, #68]	; (8013e40 <ResetMacParameters+0x1c0>)
 8013dfa:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8013dfc:	4b11      	ldr	r3, [pc, #68]	; (8013e44 <ResetMacParameters+0x1c4>)
 8013dfe:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8013e00:	4b11      	ldr	r3, [pc, #68]	; (8013e48 <ResetMacParameters+0x1c8>)
 8013e02:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8013e04:	4b11      	ldr	r3, [pc, #68]	; (8013e4c <ResetMacParameters+0x1cc>)
 8013e06:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8013e08:	4b11      	ldr	r3, [pc, #68]	; (8013e50 <ResetMacParameters+0x1d0>)
 8013e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8013e0c:	4b11      	ldr	r3, [pc, #68]	; (8013e54 <ResetMacParameters+0x1d4>)
 8013e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8013e10:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8013e14:	f107 0310 	add.w	r3, r7, #16
 8013e18:	4a0f      	ldr	r2, [pc, #60]	; (8013e58 <ResetMacParameters+0x1d8>)
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f002 fd16 	bl	801684c <LoRaMacClassBInit>
}
 8013e20:	bf00      	nop
 8013e22:	3738      	adds	r7, #56	; 0x38
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bdb0      	pop	{r4, r5, r7, pc}
 8013e28:	20001328 	.word	0x20001328
 8013e2c:	20000e1c 	.word	0x20000e1c
 8013e30:	20001508 	.word	0x20001508
 8013e34:	2000159c 	.word	0x2000159c
 8013e38:	2000127c 	.word	0x2000127c
 8013e3c:	20001238 	.word	0x20001238
 8013e40:	20001268 	.word	0x20001268
 8013e44:	200012a1 	.word	0x200012a1
 8013e48:	200013fc 	.word	0x200013fc
 8013e4c:	20001368 	.word	0x20001368
 8013e50:	2000136c 	.word	0x2000136c
 8013e54:	20001400 	.word	0x20001400
 8013e58:	20001a38 	.word	0x20001a38

08013e5c <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b082      	sub	sp, #8
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
 8013e64:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8013e66:	6878      	ldr	r0, [r7, #4]
 8013e68:	f00c fade 	bl	8020428 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8013e6c:	4b11      	ldr	r3, [pc, #68]	; (8013eb4 <RxWindowSetup+0x58>)
 8013e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e70:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8013e72:	4b11      	ldr	r3, [pc, #68]	; (8013eb8 <RxWindowSetup+0x5c>)
 8013e74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013e78:	4a10      	ldr	r2, [pc, #64]	; (8013ebc <RxWindowSetup+0x60>)
 8013e7a:	6839      	ldr	r1, [r7, #0]
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	f005 fe6e 	bl	8019b5e <RegionRxConfig>
 8013e82:	4603      	mov	r3, r0
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d010      	beq.n	8013eaa <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8013e88:	4b0d      	ldr	r3, [pc, #52]	; (8013ec0 <RxWindowSetup+0x64>)
 8013e8a:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 8013e8e:	4b0c      	ldr	r3, [pc, #48]	; (8013ec0 <RxWindowSetup+0x64>)
 8013e90:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8013e94:	4b07      	ldr	r3, [pc, #28]	; (8013eb4 <RxWindowSetup+0x58>)
 8013e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e98:	4a07      	ldr	r2, [pc, #28]	; (8013eb8 <RxWindowSetup+0x5c>)
 8013e9a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8013e9c:	4610      	mov	r0, r2
 8013e9e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8013ea0:	683b      	ldr	r3, [r7, #0]
 8013ea2:	7cda      	ldrb	r2, [r3, #19]
 8013ea4:	4b06      	ldr	r3, [pc, #24]	; (8013ec0 <RxWindowSetup+0x64>)
 8013ea6:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 8013eaa:	bf00      	nop
 8013eac:	3708      	adds	r7, #8
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}
 8013eb2:	bf00      	nop
 8013eb4:	08021d00 	.word	0x08021d00
 8013eb8:	20001328 	.word	0x20001328
 8013ebc:	2000123c 	.word	0x2000123c
 8013ec0:	20000e1c 	.word	0x20000e1c

08013ec4 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8013ec4:	b590      	push	{r4, r7, lr}
 8013ec6:	b083      	sub	sp, #12
 8013ec8:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013eca:	4b1b      	ldr	r3, [pc, #108]	; (8013f38 <OpenContinuousRxCWindow+0x74>)
 8013ecc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8013ed0:	4b19      	ldr	r3, [pc, #100]	; (8013f38 <OpenContinuousRxCWindow+0x74>)
 8013ed2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013ed6:	b259      	sxtb	r1, r3
 8013ed8:	4b17      	ldr	r3, [pc, #92]	; (8013f38 <OpenContinuousRxCWindow+0x74>)
 8013eda:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013ede:	4b16      	ldr	r3, [pc, #88]	; (8013f38 <OpenContinuousRxCWindow+0x74>)
 8013ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ee2:	4c16      	ldr	r4, [pc, #88]	; (8013f3c <OpenContinuousRxCWindow+0x78>)
 8013ee4:	9400      	str	r4, [sp, #0]
 8013ee6:	f005 fe20 	bl	8019b2a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013eea:	4b15      	ldr	r3, [pc, #84]	; (8013f40 <OpenContinuousRxCWindow+0x7c>)
 8013eec:	2202      	movs	r2, #2
 8013eee:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013ef2:	4b13      	ldr	r3, [pc, #76]	; (8013f40 <OpenContinuousRxCWindow+0x7c>)
 8013ef4:	2201      	movs	r2, #1
 8013ef6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8013efa:	4b0f      	ldr	r3, [pc, #60]	; (8013f38 <OpenContinuousRxCWindow+0x74>)
 8013efc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013f00:	4a10      	ldr	r2, [pc, #64]	; (8013f44 <OpenContinuousRxCWindow+0x80>)
 8013f02:	490e      	ldr	r1, [pc, #56]	; (8013f3c <OpenContinuousRxCWindow+0x78>)
 8013f04:	4618      	mov	r0, r3
 8013f06:	f005 fe2a 	bl	8019b5e <RegionRxConfig>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d00f      	beq.n	8013f30 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8013f10:	4b0b      	ldr	r3, [pc, #44]	; (8013f40 <OpenContinuousRxCWindow+0x7c>)
 8013f12:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 8013f16:	4b0a      	ldr	r3, [pc, #40]	; (8013f40 <OpenContinuousRxCWindow+0x7c>)
 8013f18:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 8013f1c:	4b0a      	ldr	r3, [pc, #40]	; (8013f48 <OpenContinuousRxCWindow+0x84>)
 8013f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f20:	2000      	movs	r0, #0
 8013f22:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8013f24:	4b06      	ldr	r3, [pc, #24]	; (8013f40 <OpenContinuousRxCWindow+0x7c>)
 8013f26:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 8013f2a:	4b05      	ldr	r3, [pc, #20]	; (8013f40 <OpenContinuousRxCWindow+0x7c>)
 8013f2c:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 8013f30:	bf00      	nop
 8013f32:	3704      	adds	r7, #4
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd90      	pop	{r4, r7, pc}
 8013f38:	20001328 	.word	0x20001328
 8013f3c:	200011fc 	.word	0x200011fc
 8013f40:	20000e1c 	.word	0x20000e1c
 8013f44:	2000123c 	.word	0x2000123c
 8013f48:	08021d00 	.word	0x08021d00

08013f4c <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b088      	sub	sp, #32
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	60f8      	str	r0, [r7, #12]
 8013f54:	60b9      	str	r1, [r7, #8]
 8013f56:	603b      	str	r3, [r7, #0]
 8013f58:	4613      	mov	r3, r2
 8013f5a:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8013f5c:	4b82      	ldr	r3, [pc, #520]	; (8014168 <PrepareFrame+0x21c>)
 8013f5e:	2200      	movs	r2, #0
 8013f60:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8013f62:	4b81      	ldr	r3, [pc, #516]	; (8014168 <PrepareFrame+0x21c>)
 8013f64:	2200      	movs	r2, #0
 8013f66:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8013f6e:	2300      	movs	r3, #0
 8013f70:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8013f72:	2300      	movs	r3, #0
 8013f74:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d101      	bne.n	8013f80 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8013f80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013f82:	461a      	mov	r2, r3
 8013f84:	6839      	ldr	r1, [r7, #0]
 8013f86:	4879      	ldr	r0, [pc, #484]	; (801416c <PrepareFrame+0x220>)
 8013f88:	f008 f903 	bl	801c192 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8013f8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013f8e:	b2da      	uxtb	r2, r3
 8013f90:	4b75      	ldr	r3, [pc, #468]	; (8014168 <PrepareFrame+0x21c>)
 8013f92:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	781a      	ldrb	r2, [r3, #0]
 8013f9a:	4b73      	ldr	r3, [pc, #460]	; (8014168 <PrepareFrame+0x21c>)
 8013f9c:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	781b      	ldrb	r3, [r3, #0]
 8013fa2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8013fa6:	b2db      	uxtb	r3, r3
 8013fa8:	2b07      	cmp	r3, #7
 8013faa:	f000 80b9 	beq.w	8014120 <PrepareFrame+0x1d4>
 8013fae:	2b07      	cmp	r3, #7
 8013fb0:	f300 80d0 	bgt.w	8014154 <PrepareFrame+0x208>
 8013fb4:	2b02      	cmp	r3, #2
 8013fb6:	d006      	beq.n	8013fc6 <PrepareFrame+0x7a>
 8013fb8:	2b04      	cmp	r3, #4
 8013fba:	f040 80cb 	bne.w	8014154 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8013fbe:	4b6a      	ldr	r3, [pc, #424]	; (8014168 <PrepareFrame+0x21c>)
 8013fc0:	2201      	movs	r2, #1
 8013fc2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8013fc6:	4b68      	ldr	r3, [pc, #416]	; (8014168 <PrepareFrame+0x21c>)
 8013fc8:	2204      	movs	r2, #4
 8013fca:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8013fce:	4b66      	ldr	r3, [pc, #408]	; (8014168 <PrepareFrame+0x21c>)
 8013fd0:	4a67      	ldr	r2, [pc, #412]	; (8014170 <PrepareFrame+0x224>)
 8013fd2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8013fd6:	4b64      	ldr	r3, [pc, #400]	; (8014168 <PrepareFrame+0x21c>)
 8013fd8:	22ff      	movs	r2, #255	; 0xff
 8013fda:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	781a      	ldrb	r2, [r3, #0]
 8013fe2:	4b61      	ldr	r3, [pc, #388]	; (8014168 <PrepareFrame+0x21c>)
 8013fe4:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8013fe8:	4a5f      	ldr	r2, [pc, #380]	; (8014168 <PrepareFrame+0x21c>)
 8013fea:	79fb      	ldrb	r3, [r7, #7]
 8013fec:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8013ff0:	4b60      	ldr	r3, [pc, #384]	; (8014174 <PrepareFrame+0x228>)
 8013ff2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8013ff6:	4a5c      	ldr	r2, [pc, #368]	; (8014168 <PrepareFrame+0x21c>)
 8013ff8:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013ffc:	68bb      	ldr	r3, [r7, #8]
 8013ffe:	781a      	ldrb	r2, [r3, #0]
 8014000:	4b59      	ldr	r3, [pc, #356]	; (8014168 <PrepareFrame+0x21c>)
 8014002:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8014006:	4b58      	ldr	r3, [pc, #352]	; (8014168 <PrepareFrame+0x21c>)
 8014008:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 801400c:	4b56      	ldr	r3, [pc, #344]	; (8014168 <PrepareFrame+0x21c>)
 801400e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8014012:	4b55      	ldr	r3, [pc, #340]	; (8014168 <PrepareFrame+0x21c>)
 8014014:	4a55      	ldr	r2, [pc, #340]	; (801416c <PrepareFrame+0x220>)
 8014016:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801401a:	f107 0318 	add.w	r3, r7, #24
 801401e:	4618      	mov	r0, r3
 8014020:	f004 fe66 	bl	8018cf0 <LoRaMacCryptoGetFCntUp>
 8014024:	4603      	mov	r3, r0
 8014026:	2b00      	cmp	r3, #0
 8014028:	d001      	beq.n	801402e <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801402a:	2312      	movs	r3, #18
 801402c:	e098      	b.n	8014160 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801402e:	69bb      	ldr	r3, [r7, #24]
 8014030:	b29a      	uxth	r2, r3
 8014032:	4b4d      	ldr	r3, [pc, #308]	; (8014168 <PrepareFrame+0x21c>)
 8014034:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 8014038:	4b4b      	ldr	r3, [pc, #300]	; (8014168 <PrepareFrame+0x21c>)
 801403a:	2200      	movs	r2, #0
 801403c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8014040:	4b49      	ldr	r3, [pc, #292]	; (8014168 <PrepareFrame+0x21c>)
 8014042:	2200      	movs	r2, #0
 8014044:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8014048:	69bb      	ldr	r3, [r7, #24]
 801404a:	4a47      	ldr	r2, [pc, #284]	; (8014168 <PrepareFrame+0x21c>)
 801404c:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8014050:	f107 0314 	add.w	r3, r7, #20
 8014054:	4618      	mov	r0, r3
 8014056:	f004 f803 	bl	8018060 <LoRaMacCommandsGetSizeSerializedCmds>
 801405a:	4603      	mov	r3, r0
 801405c:	2b00      	cmp	r3, #0
 801405e:	d001      	beq.n	8014064 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014060:	2313      	movs	r3, #19
 8014062:	e07d      	b.n	8014160 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8014064:	697b      	ldr	r3, [r7, #20]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d076      	beq.n	8014158 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801406a:	4b42      	ldr	r3, [pc, #264]	; (8014174 <PrepareFrame+0x228>)
 801406c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014070:	4618      	mov	r0, r3
 8014072:	f7fe fdb5 	bl	8012be0 <GetMaxAppPayloadWithoutFOptsLength>
 8014076:	4603      	mov	r3, r0
 8014078:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801407a:	4b3b      	ldr	r3, [pc, #236]	; (8014168 <PrepareFrame+0x21c>)
 801407c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8014080:	2b00      	cmp	r3, #0
 8014082:	d01d      	beq.n	80140c0 <PrepareFrame+0x174>
 8014084:	697b      	ldr	r3, [r7, #20]
 8014086:	2b0f      	cmp	r3, #15
 8014088:	d81a      	bhi.n	80140c0 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801408a:	f107 0314 	add.w	r3, r7, #20
 801408e:	4a3a      	ldr	r2, [pc, #232]	; (8014178 <PrepareFrame+0x22c>)
 8014090:	4619      	mov	r1, r3
 8014092:	200f      	movs	r0, #15
 8014094:	f003 fffa 	bl	801808c <LoRaMacCommandsSerializeCmds>
 8014098:	4603      	mov	r3, r0
 801409a:	2b00      	cmp	r3, #0
 801409c:	d001      	beq.n	80140a2 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801409e:	2313      	movs	r3, #19
 80140a0:	e05e      	b.n	8014160 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80140a2:	697b      	ldr	r3, [r7, #20]
 80140a4:	f003 030f 	and.w	r3, r3, #15
 80140a8:	b2d9      	uxtb	r1, r3
 80140aa:	68ba      	ldr	r2, [r7, #8]
 80140ac:	7813      	ldrb	r3, [r2, #0]
 80140ae:	f361 0303 	bfi	r3, r1, #0, #4
 80140b2:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80140b4:	68bb      	ldr	r3, [r7, #8]
 80140b6:	781a      	ldrb	r2, [r3, #0]
 80140b8:	4b2b      	ldr	r3, [pc, #172]	; (8014168 <PrepareFrame+0x21c>)
 80140ba:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80140be:	e04b      	b.n	8014158 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80140c0:	4b29      	ldr	r3, [pc, #164]	; (8014168 <PrepareFrame+0x21c>)
 80140c2:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d010      	beq.n	80140ec <PrepareFrame+0x1a0>
 80140ca:	697b      	ldr	r3, [r7, #20]
 80140cc:	2b0f      	cmp	r3, #15
 80140ce:	d90d      	bls.n	80140ec <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80140d0:	7ffb      	ldrb	r3, [r7, #31]
 80140d2:	f107 0114 	add.w	r1, r7, #20
 80140d6:	4a29      	ldr	r2, [pc, #164]	; (801417c <PrepareFrame+0x230>)
 80140d8:	4618      	mov	r0, r3
 80140da:	f003 ffd7 	bl	801808c <LoRaMacCommandsSerializeCmds>
 80140de:	4603      	mov	r3, r0
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d001      	beq.n	80140e8 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80140e4:	2313      	movs	r3, #19
 80140e6:	e03b      	b.n	8014160 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80140e8:	230a      	movs	r3, #10
 80140ea:	e039      	b.n	8014160 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80140ec:	7ffb      	ldrb	r3, [r7, #31]
 80140ee:	f107 0114 	add.w	r1, r7, #20
 80140f2:	4a22      	ldr	r2, [pc, #136]	; (801417c <PrepareFrame+0x230>)
 80140f4:	4618      	mov	r0, r3
 80140f6:	f003 ffc9 	bl	801808c <LoRaMacCommandsSerializeCmds>
 80140fa:	4603      	mov	r3, r0
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d001      	beq.n	8014104 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014100:	2313      	movs	r3, #19
 8014102:	e02d      	b.n	8014160 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8014104:	4b18      	ldr	r3, [pc, #96]	; (8014168 <PrepareFrame+0x21c>)
 8014106:	2200      	movs	r2, #0
 8014108:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 801410c:	4b16      	ldr	r3, [pc, #88]	; (8014168 <PrepareFrame+0x21c>)
 801410e:	4a1b      	ldr	r2, [pc, #108]	; (801417c <PrepareFrame+0x230>)
 8014110:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8014114:	697b      	ldr	r3, [r7, #20]
 8014116:	b2da      	uxtb	r2, r3
 8014118:	4b13      	ldr	r3, [pc, #76]	; (8014168 <PrepareFrame+0x21c>)
 801411a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 801411e:	e01b      	b.n	8014158 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8014120:	683b      	ldr	r3, [r7, #0]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d01a      	beq.n	801415c <PrepareFrame+0x210>
 8014126:	4b10      	ldr	r3, [pc, #64]	; (8014168 <PrepareFrame+0x21c>)
 8014128:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801412c:	2b00      	cmp	r3, #0
 801412e:	d015      	beq.n	801415c <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8014130:	4813      	ldr	r0, [pc, #76]	; (8014180 <PrepareFrame+0x234>)
 8014132:	4b0d      	ldr	r3, [pc, #52]	; (8014168 <PrepareFrame+0x21c>)
 8014134:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8014138:	b29b      	uxth	r3, r3
 801413a:	461a      	mov	r2, r3
 801413c:	6839      	ldr	r1, [r7, #0]
 801413e:	f008 f828 	bl	801c192 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8014142:	4b09      	ldr	r3, [pc, #36]	; (8014168 <PrepareFrame+0x21c>)
 8014144:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8014148:	b29b      	uxth	r3, r3
 801414a:	3301      	adds	r3, #1
 801414c:	b29a      	uxth	r2, r3
 801414e:	4b06      	ldr	r3, [pc, #24]	; (8014168 <PrepareFrame+0x21c>)
 8014150:	801a      	strh	r2, [r3, #0]
            }
            break;
 8014152:	e003      	b.n	801415c <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014154:	2302      	movs	r3, #2
 8014156:	e003      	b.n	8014160 <PrepareFrame+0x214>
            break;
 8014158:	bf00      	nop
 801415a:	e000      	b.n	801415e <PrepareFrame+0x212>
            break;
 801415c:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 801415e:	2300      	movs	r3, #0
}
 8014160:	4618      	mov	r0, r3
 8014162:	3720      	adds	r7, #32
 8014164:	46bd      	mov	sp, r7
 8014166:	bd80      	pop	{r7, pc}
 8014168:	20000e1c 	.word	0x20000e1c
 801416c:	20000f54 	.word	0x20000f54
 8014170:	20000e1e 	.word	0x20000e1e
 8014174:	20001328 	.word	0x20001328
 8014178:	20000f34 	.word	0x20000f34
 801417c:	200012a8 	.word	0x200012a8
 8014180:	20000e1f 	.word	0x20000e1f

08014184 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b08a      	sub	sp, #40	; 0x28
 8014188:	af00      	add	r7, sp, #0
 801418a:	4603      	mov	r3, r0
 801418c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801418e:	2303      	movs	r3, #3
 8014190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8014194:	2300      	movs	r3, #0
 8014196:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8014198:	79fb      	ldrb	r3, [r7, #7]
 801419a:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801419c:	4b47      	ldr	r3, [pc, #284]	; (80142bc <SendFrameOnChannel+0x138>)
 801419e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80141a2:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80141a4:	4b45      	ldr	r3, [pc, #276]	; (80142bc <SendFrameOnChannel+0x138>)
 80141a6:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80141aa:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80141ac:	4b43      	ldr	r3, [pc, #268]	; (80142bc <SendFrameOnChannel+0x138>)
 80141ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80141b0:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80141b2:	4b42      	ldr	r3, [pc, #264]	; (80142bc <SendFrameOnChannel+0x138>)
 80141b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80141b6:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80141b8:	4b41      	ldr	r3, [pc, #260]	; (80142c0 <SendFrameOnChannel+0x13c>)
 80141ba:	881b      	ldrh	r3, [r3, #0]
 80141bc:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80141be:	4b3f      	ldr	r3, [pc, #252]	; (80142bc <SendFrameOnChannel+0x138>)
 80141c0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80141c4:	f107 020f 	add.w	r2, r7, #15
 80141c8:	f107 0110 	add.w	r1, r7, #16
 80141cc:	4b3d      	ldr	r3, [pc, #244]	; (80142c4 <SendFrameOnChannel+0x140>)
 80141ce:	f005 fcdb 	bl	8019b88 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80141d2:	4b3b      	ldr	r3, [pc, #236]	; (80142c0 <SendFrameOnChannel+0x13c>)
 80141d4:	2201      	movs	r2, #1
 80141d6:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80141da:	4b38      	ldr	r3, [pc, #224]	; (80142bc <SendFrameOnChannel+0x138>)
 80141dc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80141e0:	b2da      	uxtb	r2, r3
 80141e2:	4b37      	ldr	r3, [pc, #220]	; (80142c0 <SendFrameOnChannel+0x13c>)
 80141e4:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 80141e8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80141ec:	4b34      	ldr	r3, [pc, #208]	; (80142c0 <SendFrameOnChannel+0x13c>)
 80141ee:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 80141f2:	79fb      	ldrb	r3, [r7, #7]
 80141f4:	4a32      	ldr	r2, [pc, #200]	; (80142c0 <SendFrameOnChannel+0x13c>)
 80141f6:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80141fa:	4b31      	ldr	r3, [pc, #196]	; (80142c0 <SendFrameOnChannel+0x13c>)
 80141fc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8014200:	4a2f      	ldr	r2, [pc, #188]	; (80142c0 <SendFrameOnChannel+0x13c>)
 8014202:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8014206:	4b2e      	ldr	r3, [pc, #184]	; (80142c0 <SendFrameOnChannel+0x13c>)
 8014208:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 801420c:	4a2c      	ldr	r2, [pc, #176]	; (80142c0 <SendFrameOnChannel+0x13c>)
 801420e:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8014212:	f003 fa01 	bl	8017618 <LoRaMacClassBIsBeaconModeActive>
 8014216:	4603      	mov	r3, r0
 8014218:	2b00      	cmp	r3, #0
 801421a:	d00b      	beq.n	8014234 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 801421c:	4b28      	ldr	r3, [pc, #160]	; (80142c0 <SendFrameOnChannel+0x13c>)
 801421e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8014222:	4618      	mov	r0, r3
 8014224:	f003 fc88 	bl	8017b38 <LoRaMacClassBIsUplinkCollision>
 8014228:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801422a:	6a3b      	ldr	r3, [r7, #32]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d001      	beq.n	8014234 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8014230:	2310      	movs	r3, #16
 8014232:	e03e      	b.n	80142b2 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8014234:	4b21      	ldr	r3, [pc, #132]	; (80142bc <SendFrameOnChannel+0x138>)
 8014236:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801423a:	2b01      	cmp	r3, #1
 801423c:	d101      	bne.n	8014242 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801423e:	f003 fcaf 	bl	8017ba0 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8014242:	f003 fa1f 	bl	8017684 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8014246:	4b1d      	ldr	r3, [pc, #116]	; (80142bc <SendFrameOnChannel+0x138>)
 8014248:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801424c:	b2db      	uxtb	r3, r3
 801424e:	4a1c      	ldr	r2, [pc, #112]	; (80142c0 <SendFrameOnChannel+0x13c>)
 8014250:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8014254:	4611      	mov	r1, r2
 8014256:	4618      	mov	r0, r3
 8014258:	f7ff fc7c 	bl	8013b54 <SecureFrame>
 801425c:	4603      	mov	r3, r0
 801425e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8014262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014266:	2b00      	cmp	r3, #0
 8014268:	d002      	beq.n	8014270 <SendFrameOnChannel+0xec>
    {
        return status;
 801426a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801426e:	e020      	b.n	80142b2 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8014270:	4b13      	ldr	r3, [pc, #76]	; (80142c0 <SendFrameOnChannel+0x13c>)
 8014272:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014276:	f043 0302 	orr.w	r3, r3, #2
 801427a:	4a11      	ldr	r2, [pc, #68]	; (80142c0 <SendFrameOnChannel+0x13c>)
 801427c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8014280:	4b0f      	ldr	r3, [pc, #60]	; (80142c0 <SendFrameOnChannel+0x13c>)
 8014282:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8014286:	f083 0301 	eor.w	r3, r3, #1
 801428a:	b2db      	uxtb	r3, r3
 801428c:	2b00      	cmp	r3, #0
 801428e:	d007      	beq.n	80142a0 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8014290:	4b0b      	ldr	r3, [pc, #44]	; (80142c0 <SendFrameOnChannel+0x13c>)
 8014292:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8014296:	3301      	adds	r3, #1
 8014298:	b2da      	uxtb	r2, r3
 801429a:	4b09      	ldr	r3, [pc, #36]	; (80142c0 <SendFrameOnChannel+0x13c>)
 801429c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80142a0:	4b09      	ldr	r3, [pc, #36]	; (80142c8 <SendFrameOnChannel+0x144>)
 80142a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142a4:	4a06      	ldr	r2, [pc, #24]	; (80142c0 <SendFrameOnChannel+0x13c>)
 80142a6:	8812      	ldrh	r2, [r2, #0]
 80142a8:	b2d2      	uxtb	r2, r2
 80142aa:	4611      	mov	r1, r2
 80142ac:	4807      	ldr	r0, [pc, #28]	; (80142cc <SendFrameOnChannel+0x148>)
 80142ae:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80142b0:	2300      	movs	r3, #0
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	3728      	adds	r7, #40	; 0x28
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}
 80142ba:	bf00      	nop
 80142bc:	20001328 	.word	0x20001328
 80142c0:	20000e1c 	.word	0x20000e1c
 80142c4:	20001234 	.word	0x20001234
 80142c8:	08021d00 	.word	0x08021d00
 80142cc:	20000e1e 	.word	0x20000e1e

080142d0 <SetTxContinuousWave>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b086      	sub	sp, #24
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	4603      	mov	r3, r0
 80142d8:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 80142da:	4b15      	ldr	r3, [pc, #84]	; (8014330 <SetTxContinuousWave+0x60>)
 80142dc:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 80142e0:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80142e2:	4b14      	ldr	r3, [pc, #80]	; (8014334 <SetTxContinuousWave+0x64>)
 80142e4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80142e8:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80142ea:	4b12      	ldr	r3, [pc, #72]	; (8014334 <SetTxContinuousWave+0x64>)
 80142ec:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80142f0:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80142f2:	4b10      	ldr	r3, [pc, #64]	; (8014334 <SetTxContinuousWave+0x64>)
 80142f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80142f6:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80142f8:	4b0e      	ldr	r3, [pc, #56]	; (8014334 <SetTxContinuousWave+0x64>)
 80142fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80142fc:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 80142fe:	88fb      	ldrh	r3, [r7, #6]
 8014300:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8014302:	4b0c      	ldr	r3, [pc, #48]	; (8014334 <SetTxContinuousWave+0x64>)
 8014304:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014308:	f107 0208 	add.w	r2, r7, #8
 801430c:	4611      	mov	r1, r2
 801430e:	4618      	mov	r0, r3
 8014310:	f005 fce9 	bl	8019ce6 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8014314:	4b06      	ldr	r3, [pc, #24]	; (8014330 <SetTxContinuousWave+0x60>)
 8014316:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801431a:	f043 0302 	orr.w	r3, r3, #2
 801431e:	4a04      	ldr	r2, [pc, #16]	; (8014330 <SetTxContinuousWave+0x60>)
 8014320:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8014324:	2300      	movs	r3, #0
}
 8014326:	4618      	mov	r0, r3
 8014328:	3718      	adds	r7, #24
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}
 801432e:	bf00      	nop
 8014330:	20000e1c 	.word	0x20000e1c
 8014334:	20001328 	.word	0x20001328

08014338 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b082      	sub	sp, #8
 801433c:	af00      	add	r7, sp, #0
 801433e:	4603      	mov	r3, r0
 8014340:	6039      	str	r1, [r7, #0]
 8014342:	80fb      	strh	r3, [r7, #6]
 8014344:	4613      	mov	r3, r2
 8014346:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8014348:	4b09      	ldr	r3, [pc, #36]	; (8014370 <SetTxContinuousWave1+0x38>)
 801434a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801434c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014350:	88fa      	ldrh	r2, [r7, #6]
 8014352:	6838      	ldr	r0, [r7, #0]
 8014354:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8014356:	4b07      	ldr	r3, [pc, #28]	; (8014374 <SetTxContinuousWave1+0x3c>)
 8014358:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801435c:	f043 0302 	orr.w	r3, r3, #2
 8014360:	4a04      	ldr	r2, [pc, #16]	; (8014374 <SetTxContinuousWave1+0x3c>)
 8014362:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8014366:	2300      	movs	r3, #0
}
 8014368:	4618      	mov	r0, r3
 801436a:	3708      	adds	r7, #8
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}
 8014370:	08021d00 	.word	0x08021d00
 8014374:	20000e1c 	.word	0x20000e1c

08014378 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b082      	sub	sp, #8
 801437c:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 801437e:	2300      	movs	r3, #0
 8014380:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8014382:	4b3e      	ldr	r3, [pc, #248]	; (801447c <RestoreNvmData+0x104>)
 8014384:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014388:	2b01      	cmp	r3, #1
 801438a:	d001      	beq.n	8014390 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 801438c:	2301      	movs	r3, #1
 801438e:	e071      	b.n	8014474 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8014390:	2124      	movs	r1, #36	; 0x24
 8014392:	483b      	ldr	r0, [pc, #236]	; (8014480 <RestoreNvmData+0x108>)
 8014394:	f007 ff52 	bl	801c23c <Crc32>
 8014398:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 801439a:	4b39      	ldr	r3, [pc, #228]	; (8014480 <RestoreNvmData+0x108>)
 801439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801439e:	687a      	ldr	r2, [r7, #4]
 80143a0:	429a      	cmp	r2, r3
 80143a2:	d001      	beq.n	80143a8 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80143a4:	2317      	movs	r3, #23
 80143a6:	e065      	b.n	8014474 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 80143a8:	2114      	movs	r1, #20
 80143aa:	4836      	ldr	r0, [pc, #216]	; (8014484 <RestoreNvmData+0x10c>)
 80143ac:	f007 ff46 	bl	801c23c <Crc32>
 80143b0:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 80143b2:	4b33      	ldr	r3, [pc, #204]	; (8014480 <RestoreNvmData+0x108>)
 80143b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143b6:	687a      	ldr	r2, [r7, #4]
 80143b8:	429a      	cmp	r2, r3
 80143ba:	d001      	beq.n	80143c0 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80143bc:	2317      	movs	r3, #23
 80143be:	e059      	b.n	8014474 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 80143c0:	21dc      	movs	r1, #220	; 0xdc
 80143c2:	4831      	ldr	r0, [pc, #196]	; (8014488 <RestoreNvmData+0x110>)
 80143c4:	f007 ff3a 	bl	801c23c <Crc32>
 80143c8:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 80143ca:	4b2d      	ldr	r3, [pc, #180]	; (8014480 <RestoreNvmData+0x108>)
 80143cc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80143d0:	687a      	ldr	r2, [r7, #4]
 80143d2:	429a      	cmp	r2, r3
 80143d4:	d001      	beq.n	80143da <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80143d6:	2317      	movs	r3, #23
 80143d8:	e04c      	b.n	8014474 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 80143da:	21bc      	movs	r1, #188	; 0xbc
 80143dc:	482b      	ldr	r0, [pc, #172]	; (801448c <RestoreNvmData+0x114>)
 80143de:	f007 ff2d 	bl	801c23c <Crc32>
 80143e2:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 80143e4:	4b26      	ldr	r3, [pc, #152]	; (8014480 <RestoreNvmData+0x108>)
 80143e6:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80143ea:	687a      	ldr	r2, [r7, #4]
 80143ec:	429a      	cmp	r2, r3
 80143ee:	d001      	beq.n	80143f4 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80143f0:	2317      	movs	r3, #23
 80143f2:	e03f      	b.n	8014474 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 80143f4:	2190      	movs	r1, #144	; 0x90
 80143f6:	4826      	ldr	r0, [pc, #152]	; (8014490 <RestoreNvmData+0x118>)
 80143f8:	f007 ff20 	bl	801c23c <Crc32>
 80143fc:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 80143fe:	4b20      	ldr	r3, [pc, #128]	; (8014480 <RestoreNvmData+0x108>)
 8014400:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8014404:	687a      	ldr	r2, [r7, #4]
 8014406:	429a      	cmp	r2, r3
 8014408:	d001      	beq.n	801440e <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801440a:	2317      	movs	r3, #23
 801440c:	e032      	b.n	8014474 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 801440e:	2114      	movs	r1, #20
 8014410:	4820      	ldr	r0, [pc, #128]	; (8014494 <RestoreNvmData+0x11c>)
 8014412:	f007 ff13 	bl	801c23c <Crc32>
 8014416:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8014418:	4b19      	ldr	r3, [pc, #100]	; (8014480 <RestoreNvmData+0x108>)
 801441a:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 801441e:	687a      	ldr	r2, [r7, #4]
 8014420:	429a      	cmp	r2, r3
 8014422:	d001      	beq.n	8014428 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8014424:	2317      	movs	r3, #23
 8014426:	e025      	b.n	8014474 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8014428:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 801442c:	4914      	ldr	r1, [pc, #80]	; (8014480 <RestoreNvmData+0x108>)
 801442e:	481a      	ldr	r0, [pc, #104]	; (8014498 <RestoreNvmData+0x120>)
 8014430:	f007 feaf 	bl	801c192 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8014434:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8014438:	2100      	movs	r1, #0
 801443a:	4811      	ldr	r0, [pc, #68]	; (8014480 <RestoreNvmData+0x108>)
 801443c:	f007 fee4 	bl	801c208 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8014440:	4b0e      	ldr	r3, [pc, #56]	; (801447c <RestoreNvmData+0x104>)
 8014442:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8014446:	4b0d      	ldr	r3, [pc, #52]	; (801447c <RestoreNvmData+0x104>)
 8014448:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 801444c:	4b12      	ldr	r3, [pc, #72]	; (8014498 <RestoreNvmData+0x120>)
 801444e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014450:	4a0a      	ldr	r2, [pc, #40]	; (801447c <RestoreNvmData+0x104>)
 8014452:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014456:	4b10      	ldr	r3, [pc, #64]	; (8014498 <RestoreNvmData+0x120>)
 8014458:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 801445c:	4b07      	ldr	r3, [pc, #28]	; (801447c <RestoreNvmData+0x104>)
 801445e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8014462:	4b06      	ldr	r3, [pc, #24]	; (801447c <RestoreNvmData+0x104>)
 8014464:	2201      	movs	r2, #1
 8014466:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801446a:	4b04      	ldr	r3, [pc, #16]	; (801447c <RestoreNvmData+0x104>)
 801446c:	2202      	movs	r2, #2
 801446e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    return LORAMAC_STATUS_OK;
 8014472:	2300      	movs	r3, #0
}
 8014474:	4618      	mov	r0, r3
 8014476:	3708      	adds	r7, #8
 8014478:	46bd      	mov	sp, r7
 801447a:	bd80      	pop	{r7, pc}
 801447c:	20000e1c 	.word	0x20000e1c
 8014480:	20001a50 	.word	0x20001a50
 8014484:	20001a78 	.word	0x20001a78
 8014488:	20001a90 	.word	0x20001a90
 801448c:	20001b70 	.word	0x20001b70
 8014490:	20001c30 	.word	0x20001c30
 8014494:	20002160 	.word	0x20002160
 8014498:	20001328 	.word	0x20001328

0801449c <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 801449c:	b480      	push	{r7}
 801449e:	b083      	sub	sp, #12
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
 80144a4:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d002      	beq.n	80144b2 <DetermineFrameType+0x16>
 80144ac:	683b      	ldr	r3, [r7, #0]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d101      	bne.n	80144b6 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80144b2:	2303      	movs	r3, #3
 80144b4:	e03b      	b.n	801452e <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	7b1b      	ldrb	r3, [r3, #12]
 80144ba:	f003 030f 	and.w	r3, r3, #15
 80144be:	b2db      	uxtb	r3, r3
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d008      	beq.n	80144d6 <DetermineFrameType+0x3a>
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d003      	beq.n	80144d6 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80144ce:	683b      	ldr	r3, [r7, #0]
 80144d0:	2200      	movs	r2, #0
 80144d2:	701a      	strb	r2, [r3, #0]
 80144d4:	e02a      	b.n	801452c <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d103      	bne.n	80144e8 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80144e0:	683b      	ldr	r3, [r7, #0]
 80144e2:	2201      	movs	r2, #1
 80144e4:	701a      	strb	r2, [r3, #0]
 80144e6:	e021      	b.n	801452c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	7b1b      	ldrb	r3, [r3, #12]
 80144ec:	f003 030f 	and.w	r3, r3, #15
 80144f0:	b2db      	uxtb	r3, r3
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d108      	bne.n	8014508 <DetermineFrameType+0x6c>
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d103      	bne.n	8014508 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8014500:	683b      	ldr	r3, [r7, #0]
 8014502:	2202      	movs	r2, #2
 8014504:	701a      	strb	r2, [r3, #0]
 8014506:	e011      	b.n	801452c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	7b1b      	ldrb	r3, [r3, #12]
 801450c:	f003 030f 	and.w	r3, r3, #15
 8014510:	b2db      	uxtb	r3, r3
 8014512:	2b00      	cmp	r3, #0
 8014514:	d108      	bne.n	8014528 <DetermineFrameType+0x8c>
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	f893 3020 	ldrb.w	r3, [r3, #32]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d003      	beq.n	8014528 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8014520:	683b      	ldr	r3, [r7, #0]
 8014522:	2203      	movs	r2, #3
 8014524:	701a      	strb	r2, [r3, #0]
 8014526:	e001      	b.n	801452c <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8014528:	2318      	movs	r3, #24
 801452a:	e000      	b.n	801452e <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 801452c:	2300      	movs	r3, #0
}
 801452e:	4618      	mov	r0, r3
 8014530:	370c      	adds	r7, #12
 8014532:	46bd      	mov	sp, r7
 8014534:	bc80      	pop	{r7}
 8014536:	4770      	bx	lr

08014538 <CheckRetransUnconfirmedUplink>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8014538:	b480      	push	{r7}
 801453a:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 801453c:	4b12      	ldr	r3, [pc, #72]	; (8014588 <CheckRetransUnconfirmedUplink+0x50>)
 801453e:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8014542:	4b12      	ldr	r3, [pc, #72]	; (801458c <CheckRetransUnconfirmedUplink+0x54>)
 8014544:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8014548:	429a      	cmp	r2, r3
 801454a:	d301      	bcc.n	8014550 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 801454c:	2301      	movs	r3, #1
 801454e:	e016      	b.n	801457e <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8014550:	4b0d      	ldr	r3, [pc, #52]	; (8014588 <CheckRetransUnconfirmedUplink+0x50>)
 8014552:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8014556:	f003 0302 	and.w	r3, r3, #2
 801455a:	b2db      	uxtb	r3, r3
 801455c:	2b00      	cmp	r3, #0
 801455e:	d00d      	beq.n	801457c <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8014560:	4b0a      	ldr	r3, [pc, #40]	; (801458c <CheckRetransUnconfirmedUplink+0x54>)
 8014562:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8014566:	2b00      	cmp	r3, #0
 8014568:	d101      	bne.n	801456e <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 801456a:	2301      	movs	r3, #1
 801456c:	e007      	b.n	801457e <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 801456e:	4b06      	ldr	r3, [pc, #24]	; (8014588 <CheckRetransUnconfirmedUplink+0x50>)
 8014570:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8014574:	2b00      	cmp	r3, #0
 8014576:	d101      	bne.n	801457c <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8014578:	2301      	movs	r3, #1
 801457a:	e000      	b.n	801457e <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 801457c:	2300      	movs	r3, #0
}
 801457e:	4618      	mov	r0, r3
 8014580:	46bd      	mov	sp, r7
 8014582:	bc80      	pop	{r7}
 8014584:	4770      	bx	lr
 8014586:	bf00      	nop
 8014588:	20000e1c 	.word	0x20000e1c
 801458c:	20001328 	.word	0x20001328

08014590 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8014590:	b480      	push	{r7}
 8014592:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8014594:	4b0e      	ldr	r3, [pc, #56]	; (80145d0 <CheckRetransConfirmedUplink+0x40>)
 8014596:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 801459a:	4b0d      	ldr	r3, [pc, #52]	; (80145d0 <CheckRetransConfirmedUplink+0x40>)
 801459c:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 80145a0:	429a      	cmp	r2, r3
 80145a2:	d301      	bcc.n	80145a8 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 80145a4:	2301      	movs	r3, #1
 80145a6:	e00f      	b.n	80145c8 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80145a8:	4b09      	ldr	r3, [pc, #36]	; (80145d0 <CheckRetransConfirmedUplink+0x40>)
 80145aa:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80145ae:	f003 0302 	and.w	r3, r3, #2
 80145b2:	b2db      	uxtb	r3, r3
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d006      	beq.n	80145c6 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80145b8:	4b05      	ldr	r3, [pc, #20]	; (80145d0 <CheckRetransConfirmedUplink+0x40>)
 80145ba:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d001      	beq.n	80145c6 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 80145c2:	2301      	movs	r3, #1
 80145c4:	e000      	b.n	80145c8 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 80145c6:	2300      	movs	r3, #0
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bc80      	pop	{r7}
 80145ce:	4770      	bx	lr
 80145d0:	20000e1c 	.word	0x20000e1c

080145d4 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80145d4:	b480      	push	{r7}
 80145d6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80145d8:	4b1a      	ldr	r3, [pc, #104]	; (8014644 <StopRetransmission+0x70>)
 80145da:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80145de:	f003 0302 	and.w	r3, r3, #2
 80145e2:	b2db      	uxtb	r3, r3
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d009      	beq.n	80145fc <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80145e8:	4b16      	ldr	r3, [pc, #88]	; (8014644 <StopRetransmission+0x70>)
 80145ea:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d00e      	beq.n	8014610 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80145f2:	4b14      	ldr	r3, [pc, #80]	; (8014644 <StopRetransmission+0x70>)
 80145f4:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80145f8:	2b01      	cmp	r3, #1
 80145fa:	d009      	beq.n	8014610 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80145fc:	4b12      	ldr	r3, [pc, #72]	; (8014648 <StopRetransmission+0x74>)
 80145fe:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8014602:	2b00      	cmp	r3, #0
 8014604:	d004      	beq.n	8014610 <StopRetransmission+0x3c>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8014606:	4b10      	ldr	r3, [pc, #64]	; (8014648 <StopRetransmission+0x74>)
 8014608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801460a:	3301      	adds	r3, #1
 801460c:	4a0e      	ldr	r2, [pc, #56]	; (8014648 <StopRetransmission+0x74>)
 801460e:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8014610:	4b0c      	ldr	r3, [pc, #48]	; (8014644 <StopRetransmission+0x70>)
 8014612:	2200      	movs	r2, #0
 8014614:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8014618:	4b0a      	ldr	r3, [pc, #40]	; (8014644 <StopRetransmission+0x70>)
 801461a:	2200      	movs	r2, #0
 801461c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8014620:	4b08      	ldr	r3, [pc, #32]	; (8014644 <StopRetransmission+0x70>)
 8014622:	2200      	movs	r2, #0
 8014624:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8014628:	4b06      	ldr	r3, [pc, #24]	; (8014644 <StopRetransmission+0x70>)
 801462a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801462e:	f023 0302 	bic.w	r3, r3, #2
 8014632:	4a04      	ldr	r2, [pc, #16]	; (8014644 <StopRetransmission+0x70>)
 8014634:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8014638:	2301      	movs	r3, #1
}
 801463a:	4618      	mov	r0, r3
 801463c:	46bd      	mov	sp, r7
 801463e:	bc80      	pop	{r7}
 8014640:	4770      	bx	lr
 8014642:	bf00      	nop
 8014644:	20000e1c 	.word	0x20000e1c
 8014648:	20001328 	.word	0x20001328

0801464c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b082      	sub	sp, #8
 8014650:	af00      	add	r7, sp, #0
 8014652:	4603      	mov	r3, r0
 8014654:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8014656:	4b0b      	ldr	r3, [pc, #44]	; (8014684 <CallNvmDataChangeCallback+0x38>)
 8014658:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801465c:	2b00      	cmp	r3, #0
 801465e:	d00c      	beq.n	801467a <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8014660:	4b08      	ldr	r3, [pc, #32]	; (8014684 <CallNvmDataChangeCallback+0x38>)
 8014662:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014666:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8014668:	2b00      	cmp	r3, #0
 801466a:	d006      	beq.n	801467a <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 801466c:	4b05      	ldr	r3, [pc, #20]	; (8014684 <CallNvmDataChangeCallback+0x38>)
 801466e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014672:	68db      	ldr	r3, [r3, #12]
 8014674:	88fa      	ldrh	r2, [r7, #6]
 8014676:	4610      	mov	r0, r2
 8014678:	4798      	blx	r3
    }
}
 801467a:	bf00      	nop
 801467c:	3708      	adds	r7, #8
 801467e:	46bd      	mov	sp, r7
 8014680:	bd80      	pop	{r7, pc}
 8014682:	bf00      	nop
 8014684:	20000e1c 	.word	0x20000e1c

08014688 <AckTimeoutRetriesProcess>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b084      	sub	sp, #16
 801468c:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 801468e:	4b1b      	ldr	r3, [pc, #108]	; (80146fc <AckTimeoutRetriesProcess+0x74>)
 8014690:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8014694:	4b19      	ldr	r3, [pc, #100]	; (80146fc <AckTimeoutRetriesProcess+0x74>)
 8014696:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 801469a:	429a      	cmp	r2, r3
 801469c:	d229      	bcs.n	80146f2 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 801469e:	4b17      	ldr	r3, [pc, #92]	; (80146fc <AckTimeoutRetriesProcess+0x74>)
 80146a0:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80146a4:	3301      	adds	r3, #1
 80146a6:	b2da      	uxtb	r2, r3
 80146a8:	4b14      	ldr	r3, [pc, #80]	; (80146fc <AckTimeoutRetriesProcess+0x74>)
 80146aa:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 80146ae:	4b13      	ldr	r3, [pc, #76]	; (80146fc <AckTimeoutRetriesProcess+0x74>)
 80146b0:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80146b4:	f003 0301 	and.w	r3, r3, #1
 80146b8:	b2db      	uxtb	r3, r3
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d019      	beq.n	80146f2 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80146be:	2322      	movs	r3, #34	; 0x22
 80146c0:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80146c2:	4b0f      	ldr	r3, [pc, #60]	; (8014700 <AckTimeoutRetriesProcess+0x78>)
 80146c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80146c8:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80146ca:	4b0d      	ldr	r3, [pc, #52]	; (8014700 <AckTimeoutRetriesProcess+0x78>)
 80146cc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80146d0:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80146d2:	4b0b      	ldr	r3, [pc, #44]	; (8014700 <AckTimeoutRetriesProcess+0x78>)
 80146d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80146d8:	f107 0208 	add.w	r2, r7, #8
 80146dc:	4611      	mov	r1, r2
 80146de:	4618      	mov	r0, r3
 80146e0:	f005 f9ac 	bl	8019a3c <RegionGetPhyParam>
 80146e4:	4603      	mov	r3, r0
 80146e6:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	b25a      	sxtb	r2, r3
 80146ec:	4b04      	ldr	r3, [pc, #16]	; (8014700 <AckTimeoutRetriesProcess+0x78>)
 80146ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 80146f2:	bf00      	nop
 80146f4:	3710      	adds	r7, #16
 80146f6:	46bd      	mov	sp, r7
 80146f8:	bd80      	pop	{r7, pc}
 80146fa:	bf00      	nop
 80146fc:	20000e1c 	.word	0x20000e1c
 8014700:	20001328 	.word	0x20001328

08014704 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b084      	sub	sp, #16
 8014708:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 801470a:	4b14      	ldr	r3, [pc, #80]	; (801475c <AckTimeoutRetriesFinalize+0x58>)
 801470c:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8014710:	f083 0301 	eor.w	r3, r3, #1
 8014714:	b2db      	uxtb	r3, r3
 8014716:	2b00      	cmp	r3, #0
 8014718:	d015      	beq.n	8014746 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801471a:	2302      	movs	r3, #2
 801471c:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 801471e:	4b10      	ldr	r3, [pc, #64]	; (8014760 <AckTimeoutRetriesFinalize+0x5c>)
 8014720:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8014722:	4b10      	ldr	r3, [pc, #64]	; (8014764 <AckTimeoutRetriesFinalize+0x60>)
 8014724:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8014726:	4b10      	ldr	r3, [pc, #64]	; (8014768 <AckTimeoutRetriesFinalize+0x64>)
 8014728:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801472c:	1d3a      	adds	r2, r7, #4
 801472e:	4611      	mov	r1, r2
 8014730:	4618      	mov	r0, r3
 8014732:	f005 f9ac 	bl	8019a8e <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8014736:	4b09      	ldr	r3, [pc, #36]	; (801475c <AckTimeoutRetriesFinalize+0x58>)
 8014738:	2200      	movs	r2, #0
 801473a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 801473e:	4b07      	ldr	r3, [pc, #28]	; (801475c <AckTimeoutRetriesFinalize+0x58>)
 8014740:	2200      	movs	r2, #0
 8014742:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8014746:	4b05      	ldr	r3, [pc, #20]	; (801475c <AckTimeoutRetriesFinalize+0x58>)
 8014748:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 801474c:	4b03      	ldr	r3, [pc, #12]	; (801475c <AckTimeoutRetriesFinalize+0x58>)
 801474e:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8014752:	bf00      	nop
 8014754:	3710      	adds	r7, #16
 8014756:	46bd      	mov	sp, r7
 8014758:	bd80      	pop	{r7, pc}
 801475a:	bf00      	nop
 801475c:	20000e1c 	.word	0x20000e1c
 8014760:	20001508 	.word	0x20001508
 8014764:	2000159c 	.word	0x2000159c
 8014768:	20001328 	.word	0x20001328

0801476c <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 801476c:	b480      	push	{r7}
 801476e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8014770:	4b0b      	ldr	r3, [pc, #44]	; (80147a0 <IsRequestPending+0x34>)
 8014772:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8014776:	f003 0304 	and.w	r3, r3, #4
 801477a:	b2db      	uxtb	r3, r3
 801477c:	2b00      	cmp	r3, #0
 801477e:	d107      	bne.n	8014790 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8014780:	4b07      	ldr	r3, [pc, #28]	; (80147a0 <IsRequestPending+0x34>)
 8014782:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8014786:	f003 0301 	and.w	r3, r3, #1
 801478a:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801478c:	2b00      	cmp	r3, #0
 801478e:	d001      	beq.n	8014794 <IsRequestPending+0x28>
    {
        return 1;
 8014790:	2301      	movs	r3, #1
 8014792:	e000      	b.n	8014796 <IsRequestPending+0x2a>
    }
    return 0;
 8014794:	2300      	movs	r3, #0
}
 8014796:	4618      	mov	r0, r3
 8014798:	46bd      	mov	sp, r7
 801479a:	bc80      	pop	{r7}
 801479c:	4770      	bx	lr
 801479e:	bf00      	nop
 80147a0:	20000e1c 	.word	0x20000e1c

080147a4 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80147a4:	b590      	push	{r4, r7, lr}
 80147a6:	b08f      	sub	sp, #60	; 0x3c
 80147a8:	af02      	add	r7, sp, #8
 80147aa:	6178      	str	r0, [r7, #20]
 80147ac:	6139      	str	r1, [r7, #16]
 80147ae:	4613      	mov	r3, r2
 80147b0:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80147b2:	697b      	ldr	r3, [r7, #20]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d002      	beq.n	80147be <LoRaMacInitialization+0x1a>
 80147b8:	693b      	ldr	r3, [r7, #16]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d101      	bne.n	80147c2 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80147be:	2303      	movs	r3, #3
 80147c0:	e275      	b.n	8014cae <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80147c2:	697b      	ldr	r3, [r7, #20]
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d00b      	beq.n	80147e2 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80147ca:	697b      	ldr	r3, [r7, #20]
 80147cc:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d007      	beq.n	80147e2 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80147d2:	697b      	ldr	r3, [r7, #20]
 80147d4:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d003      	beq.n	80147e2 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 80147da:	697b      	ldr	r3, [r7, #20]
 80147dc:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d101      	bne.n	80147e6 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80147e2:	2303      	movs	r3, #3
 80147e4:	e263      	b.n	8014cae <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80147e6:	7bfb      	ldrb	r3, [r7, #15]
 80147e8:	4618      	mov	r0, r3
 80147ea:	f005 f917 	bl	8019a1c <RegionIsActive>
 80147ee:	4603      	mov	r3, r0
 80147f0:	f083 0301 	eor.w	r3, r3, #1
 80147f4:	b2db      	uxtb	r3, r3
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d001      	beq.n	80147fe <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80147fa:	2309      	movs	r3, #9
 80147fc:	e257      	b.n	8014cae <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80147fe:	6978      	ldr	r0, [r7, #20]
 8014800:	f003 fd8e 	bl	8018320 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8014804:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8014808:	2100      	movs	r1, #0
 801480a:	48c7      	ldr	r0, [pc, #796]	; (8014b28 <LoRaMacInitialization+0x384>)
 801480c:	f007 fcfc 	bl	801c208 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8014810:	f240 520c 	movw	r2, #1292	; 0x50c
 8014814:	2100      	movs	r1, #0
 8014816:	48c5      	ldr	r0, [pc, #788]	; (8014b2c <LoRaMacInitialization+0x388>)
 8014818:	f007 fcf6 	bl	801c208 <memset1>

    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 801481c:	4bc3      	ldr	r3, [pc, #780]	; (8014b2c <LoRaMacInitialization+0x388>)
 801481e:	2201      	movs	r2, #1
 8014820:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8014824:	4bc1      	ldr	r3, [pc, #772]	; (8014b2c <LoRaMacInitialization+0x388>)
 8014826:	2201      	movs	r2, #1
 8014828:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 801482c:	4abe      	ldr	r2, [pc, #760]	; (8014b28 <LoRaMacInitialization+0x384>)
 801482e:	7bfb      	ldrb	r3, [r7, #15]
 8014830:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8014834:	4bbc      	ldr	r3, [pc, #752]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014836:	2200      	movs	r2, #0
 8014838:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 801483c:	4bba      	ldr	r3, [pc, #744]	; (8014b28 <LoRaMacInitialization+0x384>)
 801483e:	2200      	movs	r2, #0
 8014840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8014844:	4bb8      	ldr	r3, [pc, #736]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014846:	4aba      	ldr	r2, [pc, #744]	; (8014b30 <LoRaMacInitialization+0x38c>)
 8014848:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 801484c:	230f      	movs	r3, #15
 801484e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014852:	4bb5      	ldr	r3, [pc, #724]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014854:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014858:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801485c:	4611      	mov	r1, r2
 801485e:	4618      	mov	r0, r3
 8014860:	f005 f8ec 	bl	8019a3c <RegionGetPhyParam>
 8014864:	4603      	mov	r3, r0
 8014866:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8014868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801486a:	2b00      	cmp	r3, #0
 801486c:	bf14      	ite	ne
 801486e:	2301      	movne	r3, #1
 8014870:	2300      	moveq	r3, #0
 8014872:	b2da      	uxtb	r2, r3
 8014874:	4bac      	ldr	r3, [pc, #688]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014876:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 801487a:	230a      	movs	r3, #10
 801487c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014880:	4ba9      	ldr	r3, [pc, #676]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014886:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801488a:	4611      	mov	r1, r2
 801488c:	4618      	mov	r0, r3
 801488e:	f005 f8d5 	bl	8019a3c <RegionGetPhyParam>
 8014892:	4603      	mov	r3, r0
 8014894:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8014896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014898:	b25a      	sxtb	r2, r3
 801489a:	4ba3      	ldr	r3, [pc, #652]	; (8014b28 <LoRaMacInitialization+0x384>)
 801489c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80148a0:	2306      	movs	r3, #6
 80148a2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80148a6:	4ba0      	ldr	r3, [pc, #640]	; (8014b28 <LoRaMacInitialization+0x384>)
 80148a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80148ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80148b0:	4611      	mov	r1, r2
 80148b2:	4618      	mov	r0, r3
 80148b4:	f005 f8c2 	bl	8019a3c <RegionGetPhyParam>
 80148b8:	4603      	mov	r3, r0
 80148ba:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80148bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148be:	b25a      	sxtb	r2, r3
 80148c0:	4b99      	ldr	r3, [pc, #612]	; (8014b28 <LoRaMacInitialization+0x384>)
 80148c2:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80148c6:	2310      	movs	r3, #16
 80148c8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80148cc:	4b96      	ldr	r3, [pc, #600]	; (8014b28 <LoRaMacInitialization+0x384>)
 80148ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80148d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80148d6:	4611      	mov	r1, r2
 80148d8:	4618      	mov	r0, r3
 80148da:	f005 f8af 	bl	8019a3c <RegionGetPhyParam>
 80148de:	4603      	mov	r3, r0
 80148e0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80148e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148e4:	4a90      	ldr	r2, [pc, #576]	; (8014b28 <LoRaMacInitialization+0x384>)
 80148e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80148ea:	2311      	movs	r3, #17
 80148ec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80148f0:	4b8d      	ldr	r3, [pc, #564]	; (8014b28 <LoRaMacInitialization+0x384>)
 80148f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80148f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80148fa:	4611      	mov	r1, r2
 80148fc:	4618      	mov	r0, r3
 80148fe:	f005 f89d 	bl	8019a3c <RegionGetPhyParam>
 8014902:	4603      	mov	r3, r0
 8014904:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8014906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014908:	4a87      	ldr	r2, [pc, #540]	; (8014b28 <LoRaMacInitialization+0x384>)
 801490a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801490e:	2312      	movs	r3, #18
 8014910:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014914:	4b84      	ldr	r3, [pc, #528]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801491a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801491e:	4611      	mov	r1, r2
 8014920:	4618      	mov	r0, r3
 8014922:	f005 f88b 	bl	8019a3c <RegionGetPhyParam>
 8014926:	4603      	mov	r3, r0
 8014928:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 801492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801492c:	4a7e      	ldr	r2, [pc, #504]	; (8014b28 <LoRaMacInitialization+0x384>)
 801492e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8014932:	2313      	movs	r3, #19
 8014934:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014938:	4b7b      	ldr	r3, [pc, #492]	; (8014b28 <LoRaMacInitialization+0x384>)
 801493a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801493e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014942:	4611      	mov	r1, r2
 8014944:	4618      	mov	r0, r3
 8014946:	f005 f879 	bl	8019a3c <RegionGetPhyParam>
 801494a:	4603      	mov	r3, r0
 801494c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014950:	4a75      	ldr	r2, [pc, #468]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014952:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8014956:	2314      	movs	r3, #20
 8014958:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801495c:	4b72      	ldr	r3, [pc, #456]	; (8014b28 <LoRaMacInitialization+0x384>)
 801495e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014962:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014966:	4611      	mov	r1, r2
 8014968:	4618      	mov	r0, r3
 801496a:	f005 f867 	bl	8019a3c <RegionGetPhyParam>
 801496e:	4603      	mov	r3, r0
 8014970:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8014972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014974:	4a6c      	ldr	r2, [pc, #432]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014976:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 801497a:	2317      	movs	r3, #23
 801497c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014980:	4b69      	ldr	r3, [pc, #420]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014986:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801498a:	4611      	mov	r1, r2
 801498c:	4618      	mov	r0, r3
 801498e:	f005 f855 	bl	8019a3c <RegionGetPhyParam>
 8014992:	4603      	mov	r3, r0
 8014994:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8014996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014998:	b2da      	uxtb	r2, r3
 801499a:	4b63      	ldr	r3, [pc, #396]	; (8014b28 <LoRaMacInitialization+0x384>)
 801499c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80149a0:	2318      	movs	r3, #24
 80149a2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80149a6:	4b60      	ldr	r3, [pc, #384]	; (8014b28 <LoRaMacInitialization+0x384>)
 80149a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80149ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80149b0:	4611      	mov	r1, r2
 80149b2:	4618      	mov	r0, r3
 80149b4:	f005 f842 	bl	8019a3c <RegionGetPhyParam>
 80149b8:	4603      	mov	r3, r0
 80149ba:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80149bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149be:	4a5a      	ldr	r2, [pc, #360]	; (8014b28 <LoRaMacInitialization+0x384>)
 80149c0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80149c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c6:	4a58      	ldr	r2, [pc, #352]	; (8014b28 <LoRaMacInitialization+0x384>)
 80149c8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80149cc:	2319      	movs	r3, #25
 80149ce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80149d2:	4b55      	ldr	r3, [pc, #340]	; (8014b28 <LoRaMacInitialization+0x384>)
 80149d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80149d8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80149dc:	4611      	mov	r1, r2
 80149de:	4618      	mov	r0, r3
 80149e0:	f005 f82c 	bl	8019a3c <RegionGetPhyParam>
 80149e4:	4603      	mov	r3, r0
 80149e6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80149e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ea:	b2da      	uxtb	r2, r3
 80149ec:	4b4e      	ldr	r3, [pc, #312]	; (8014b28 <LoRaMacInitialization+0x384>)
 80149ee:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80149f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149f4:	b2da      	uxtb	r2, r3
 80149f6:	4b4c      	ldr	r3, [pc, #304]	; (8014b28 <LoRaMacInitialization+0x384>)
 80149f8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80149fc:	231e      	movs	r3, #30
 80149fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014a02:	4b49      	ldr	r3, [pc, #292]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014a04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014a08:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014a0c:	4611      	mov	r1, r2
 8014a0e:	4618      	mov	r0, r3
 8014a10:	f005 f814 	bl	8019a3c <RegionGetPhyParam>
 8014a14:	4603      	mov	r3, r0
 8014a16:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8014a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a1a:	b2da      	uxtb	r2, r3
 8014a1c:	4b42      	ldr	r3, [pc, #264]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014a1e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8014a22:	231f      	movs	r3, #31
 8014a24:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014a28:	4b3f      	ldr	r3, [pc, #252]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014a2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014a32:	4611      	mov	r1, r2
 8014a34:	4618      	mov	r0, r3
 8014a36:	f005 f801 	bl	8019a3c <RegionGetPhyParam>
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8014a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a40:	b2da      	uxtb	r2, r3
 8014a42:	4b39      	ldr	r3, [pc, #228]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014a44:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8014a48:	2320      	movs	r3, #32
 8014a4a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014a4e:	4b36      	ldr	r3, [pc, #216]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014a50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014a54:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014a58:	4611      	mov	r1, r2
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f004 ffee 	bl	8019a3c <RegionGetPhyParam>
 8014a60:	4603      	mov	r3, r0
 8014a62:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8014a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a66:	4a30      	ldr	r2, [pc, #192]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014a68:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8014a6c:	2321      	movs	r3, #33	; 0x21
 8014a6e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014a72:	4b2d      	ldr	r3, [pc, #180]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014a74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014a78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014a7c:	4611      	mov	r1, r2
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f004 ffdc 	bl	8019a3c <RegionGetPhyParam>
 8014a84:	4603      	mov	r3, r0
 8014a86:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8014a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a8a:	4a27      	ldr	r2, [pc, #156]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014a8c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8014a90:	230b      	movs	r3, #11
 8014a92:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014a96:	4b24      	ldr	r3, [pc, #144]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014a98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014a9c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014aa0:	4611      	mov	r1, r2
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f004 ffca 	bl	8019a3c <RegionGetPhyParam>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8014aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aae:	b29a      	uxth	r2, r3
 8014ab0:	4b1e      	ldr	r3, [pc, #120]	; (8014b2c <LoRaMacInitialization+0x388>)
 8014ab2:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8014ab6:	230c      	movs	r3, #12
 8014ab8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014abc:	4b1a      	ldr	r3, [pc, #104]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014ac2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014ac6:	4611      	mov	r1, r2
 8014ac8:	4618      	mov	r0, r3
 8014aca:	f004 ffb7 	bl	8019a3c <RegionGetPhyParam>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8014ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ad4:	b29a      	uxth	r2, r3
 8014ad6:	4b15      	ldr	r3, [pc, #84]	; (8014b2c <LoRaMacInitialization+0x388>)
 8014ad8:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8014adc:	4b12      	ldr	r3, [pc, #72]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014ade:	2201      	movs	r2, #1
 8014ae0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8014ae4:	4b10      	ldr	r3, [pc, #64]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014ae6:	220a      	movs	r2, #10
 8014ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8014aec:	4b0e      	ldr	r3, [pc, #56]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014aee:	2206      	movs	r2, #6
 8014af0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8014af4:	4b0c      	ldr	r3, [pc, #48]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014afa:	4a0b      	ldr	r2, [pc, #44]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014afc:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8014afe:	4b0a      	ldr	r3, [pc, #40]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014b00:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8014b04:	4b08      	ldr	r3, [pc, #32]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014b06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8014b0a:	4b07      	ldr	r3, [pc, #28]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014b10:	4a05      	ldr	r2, [pc, #20]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014b12:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8014b14:	4b04      	ldr	r3, [pc, #16]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014b1a:	4a03      	ldr	r2, [pc, #12]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014b1c:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8014b1e:	4b02      	ldr	r3, [pc, #8]	; (8014b28 <LoRaMacInitialization+0x384>)
 8014b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014b24:	e006      	b.n	8014b34 <LoRaMacInitialization+0x390>
 8014b26:	bf00      	nop
 8014b28:	20001328 	.word	0x20001328
 8014b2c:	20000e1c 	.word	0x20000e1c
 8014b30:	01000300 	.word	0x01000300
 8014b34:	4a60      	ldr	r2, [pc, #384]	; (8014cb8 <LoRaMacInitialization+0x514>)
 8014b36:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8014b38:	4b5f      	ldr	r3, [pc, #380]	; (8014cb8 <LoRaMacInitialization+0x514>)
 8014b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014b3e:	4a5e      	ldr	r2, [pc, #376]	; (8014cb8 <LoRaMacInitialization+0x514>)
 8014b40:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8014b42:	4b5d      	ldr	r3, [pc, #372]	; (8014cb8 <LoRaMacInitialization+0x514>)
 8014b44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014b48:	4a5b      	ldr	r2, [pc, #364]	; (8014cb8 <LoRaMacInitialization+0x514>)
 8014b4a:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8014b4c:	4b5a      	ldr	r3, [pc, #360]	; (8014cb8 <LoRaMacInitialization+0x514>)
 8014b4e:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8014b52:	4b59      	ldr	r3, [pc, #356]	; (8014cb8 <LoRaMacInitialization+0x514>)
 8014b54:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8014b58:	2300      	movs	r3, #0
 8014b5a:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8014b5e:	4b57      	ldr	r3, [pc, #348]	; (8014cbc <LoRaMacInitialization+0x518>)
 8014b60:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8014b62:	4b57      	ldr	r3, [pc, #348]	; (8014cc0 <LoRaMacInitialization+0x51c>)
 8014b64:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8014b66:	4b54      	ldr	r3, [pc, #336]	; (8014cb8 <LoRaMacInitialization+0x514>)
 8014b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014b6c:	f107 0218 	add.w	r2, r7, #24
 8014b70:	4611      	mov	r1, r2
 8014b72:	4618      	mov	r0, r3
 8014b74:	f004 ff8b 	bl	8019a8e <RegionInitDefaults>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8014b78:	4a52      	ldr	r2, [pc, #328]	; (8014cc4 <LoRaMacInitialization+0x520>)
 8014b7a:	693b      	ldr	r3, [r7, #16]
 8014b7c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8014b80:	f7ff f87e 	bl	8013c80 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8014b84:	4b4c      	ldr	r3, [pc, #304]	; (8014cb8 <LoRaMacInitialization+0x514>)
 8014b86:	2201      	movs	r2, #1
 8014b88:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 8014b8c:	4a4d      	ldr	r2, [pc, #308]	; (8014cc4 <LoRaMacInitialization+0x520>)
 8014b8e:	697b      	ldr	r3, [r7, #20]
 8014b90:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8014b94:	4b4b      	ldr	r3, [pc, #300]	; (8014cc4 <LoRaMacInitialization+0x520>)
 8014b96:	2200      	movs	r2, #0
 8014b98:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 8014b9c:	4b49      	ldr	r3, [pc, #292]	; (8014cc4 <LoRaMacInitialization+0x520>)
 8014b9e:	2201      	movs	r2, #1
 8014ba0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8014ba4:	4b44      	ldr	r3, [pc, #272]	; (8014cb8 <LoRaMacInitialization+0x514>)
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8014baa:	4b43      	ldr	r3, [pc, #268]	; (8014cb8 <LoRaMacInitialization+0x514>)
 8014bac:	2200      	movs	r2, #0
 8014bae:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	9300      	str	r3, [sp, #0]
 8014bb4:	4b44      	ldr	r3, [pc, #272]	; (8014cc8 <LoRaMacInitialization+0x524>)
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8014bbc:	4843      	ldr	r0, [pc, #268]	; (8014ccc <LoRaMacInitialization+0x528>)
 8014bbe:	f00b fb8f 	bl	80202e0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	9300      	str	r3, [sp, #0]
 8014bc6:	4b42      	ldr	r3, [pc, #264]	; (8014cd0 <LoRaMacInitialization+0x52c>)
 8014bc8:	2200      	movs	r2, #0
 8014bca:	f04f 31ff 	mov.w	r1, #4294967295
 8014bce:	4841      	ldr	r0, [pc, #260]	; (8014cd4 <LoRaMacInitialization+0x530>)
 8014bd0:	f00b fb86 	bl	80202e0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	9300      	str	r3, [sp, #0]
 8014bd8:	4b3f      	ldr	r3, [pc, #252]	; (8014cd8 <LoRaMacInitialization+0x534>)
 8014bda:	2200      	movs	r2, #0
 8014bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8014be0:	483e      	ldr	r0, [pc, #248]	; (8014cdc <LoRaMacInitialization+0x538>)
 8014be2:	f00b fb7d 	bl	80202e0 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8014be6:	2300      	movs	r3, #0
 8014be8:	9300      	str	r3, [sp, #0]
 8014bea:	4b3d      	ldr	r3, [pc, #244]	; (8014ce0 <LoRaMacInitialization+0x53c>)
 8014bec:	2200      	movs	r2, #0
 8014bee:	f04f 31ff 	mov.w	r1, #4294967295
 8014bf2:	483c      	ldr	r0, [pc, #240]	; (8014ce4 <LoRaMacInitialization+0x540>)
 8014bf4:	f00b fb74 	bl	80202e0 <UTIL_TIMER_Create>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8014bf8:	4c2f      	ldr	r4, [pc, #188]	; (8014cb8 <LoRaMacInitialization+0x514>)
 8014bfa:	463b      	mov	r3, r7
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f00a fedf 	bl	801f9c0 <SysTimeGetMcuTime>
 8014c02:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8014c06:	463a      	mov	r2, r7
 8014c08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014c0c:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8014c10:	4b2c      	ldr	r3, [pc, #176]	; (8014cc4 <LoRaMacInitialization+0x520>)
 8014c12:	4a35      	ldr	r2, [pc, #212]	; (8014ce8 <LoRaMacInitialization+0x544>)
 8014c14:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8014c18:	4b2a      	ldr	r3, [pc, #168]	; (8014cc4 <LoRaMacInitialization+0x520>)
 8014c1a:	4a34      	ldr	r2, [pc, #208]	; (8014cec <LoRaMacInitialization+0x548>)
 8014c1c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8014c20:	4b28      	ldr	r3, [pc, #160]	; (8014cc4 <LoRaMacInitialization+0x520>)
 8014c22:	4a33      	ldr	r2, [pc, #204]	; (8014cf0 <LoRaMacInitialization+0x54c>)
 8014c24:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8014c28:	4b26      	ldr	r3, [pc, #152]	; (8014cc4 <LoRaMacInitialization+0x520>)
 8014c2a:	4a32      	ldr	r2, [pc, #200]	; (8014cf4 <LoRaMacInitialization+0x550>)
 8014c2c:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8014c30:	4b24      	ldr	r3, [pc, #144]	; (8014cc4 <LoRaMacInitialization+0x520>)
 8014c32:	4a31      	ldr	r2, [pc, #196]	; (8014cf8 <LoRaMacInitialization+0x554>)
 8014c34:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8014c38:	4b30      	ldr	r3, [pc, #192]	; (8014cfc <LoRaMacInitialization+0x558>)
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	4830      	ldr	r0, [pc, #192]	; (8014d00 <LoRaMacInitialization+0x55c>)
 8014c3e:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8014c40:	693b      	ldr	r3, [r7, #16]
 8014c42:	689b      	ldr	r3, [r3, #8]
 8014c44:	4619      	mov	r1, r3
 8014c46:	482f      	ldr	r0, [pc, #188]	; (8014d04 <LoRaMacInitialization+0x560>)
 8014c48:	f7fa fd20 	bl	800f68c <SecureElementInit>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d001      	beq.n	8014c56 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c52:	2311      	movs	r3, #17
 8014c54:	e02b      	b.n	8014cae <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8014c56:	4818      	ldr	r0, [pc, #96]	; (8014cb8 <LoRaMacInitialization+0x514>)
 8014c58:	f004 f80e 	bl	8018c78 <LoRaMacCryptoInit>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d001      	beq.n	8014c66 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c62:	2311      	movs	r3, #17
 8014c64:	e023      	b.n	8014cae <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8014c66:	f003 f92d 	bl	8017ec4 <LoRaMacCommandsInit>
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d001      	beq.n	8014c74 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014c70:	2313      	movs	r3, #19
 8014c72:	e01c      	b.n	8014cae <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8014c74:	4824      	ldr	r0, [pc, #144]	; (8014d08 <LoRaMacInitialization+0x564>)
 8014c76:	f004 f8c9 	bl	8018e0c <LoRaMacCryptoSetMulticastReference>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d001      	beq.n	8014c84 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c80:	2311      	movs	r3, #17
 8014c82:	e014      	b.n	8014cae <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8014c84:	4b1d      	ldr	r3, [pc, #116]	; (8014cfc <LoRaMacInitialization+0x558>)
 8014c86:	695b      	ldr	r3, [r3, #20]
 8014c88:	4798      	blx	r3
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	f007 fa5b 	bl	801c148 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014c92:	4b1a      	ldr	r3, [pc, #104]	; (8014cfc <LoRaMacInitialization+0x558>)
 8014c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c96:	4a08      	ldr	r2, [pc, #32]	; (8014cb8 <LoRaMacInitialization+0x514>)
 8014c98:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8014c9c:	4610      	mov	r0, r2
 8014c9e:	4798      	blx	r3
    Radio.Sleep( );
 8014ca0:	4b16      	ldr	r3, [pc, #88]	; (8014cfc <LoRaMacInitialization+0x558>)
 8014ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ca4:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8014ca6:	2001      	movs	r0, #1
 8014ca8:	f7fd faf2 	bl	8012290 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8014cac:	2300      	movs	r3, #0
}
 8014cae:	4618      	mov	r0, r3
 8014cb0:	3734      	adds	r7, #52	; 0x34
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	bd90      	pop	{r4, r7, pc}
 8014cb6:	bf00      	nop
 8014cb8:	20001328 	.word	0x20001328
 8014cbc:	20001508 	.word	0x20001508
 8014cc0:	2000159c 	.word	0x2000159c
 8014cc4:	20000e1c 	.word	0x20000e1c
 8014cc8:	080127fd 	.word	0x080127fd
 8014ccc:	20001184 	.word	0x20001184
 8014cd0:	08012871 	.word	0x08012871
 8014cd4:	2000119c 	.word	0x2000119c
 8014cd8:	080128dd 	.word	0x080128dd
 8014cdc:	200011b4 	.word	0x200011b4
 8014ce0:	08012951 	.word	0x08012951
 8014ce4:	20001214 	.word	0x20001214
 8014ce8:	0801140d 	.word	0x0801140d
 8014cec:	08011485 	.word	0x08011485
 8014cf0:	0801155d 	.word	0x0801155d
 8014cf4:	08011511 	.word	0x08011511
 8014cf8:	08011599 	.word	0x08011599
 8014cfc:	08021d00 	.word	0x08021d00
 8014d00:	20001168 	.word	0x20001168
 8014d04:	20001448 	.word	0x20001448
 8014d08:	20001400 	.word	0x20001400

08014d0c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8014d0c:	b480      	push	{r7}
 8014d0e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8014d10:	4b04      	ldr	r3, [pc, #16]	; (8014d24 <LoRaMacStart+0x18>)
 8014d12:	2200      	movs	r2, #0
 8014d14:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8014d18:	2300      	movs	r3, #0
}
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bc80      	pop	{r7}
 8014d20:	4770      	bx	lr
 8014d22:	bf00      	nop
 8014d24:	20000e1c 	.word	0x20000e1c

08014d28 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8014d2c:	f7fd fa9a 	bl	8012264 <LoRaMacIsBusy>
 8014d30:	4603      	mov	r3, r0
 8014d32:	f083 0301 	eor.w	r3, r3, #1
 8014d36:	b2db      	uxtb	r3, r3
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d005      	beq.n	8014d48 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8014d3c:	4b07      	ldr	r3, [pc, #28]	; (8014d5c <LoRaMacStop+0x34>)
 8014d3e:	2201      	movs	r2, #1
 8014d40:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8014d44:	2300      	movs	r3, #0
 8014d46:	e007      	b.n	8014d58 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8014d48:	4b04      	ldr	r3, [pc, #16]	; (8014d5c <LoRaMacStop+0x34>)
 8014d4a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014d4e:	2b01      	cmp	r3, #1
 8014d50:	d101      	bne.n	8014d56 <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 8014d52:	2300      	movs	r3, #0
 8014d54:	e000      	b.n	8014d58 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 8014d56:	2301      	movs	r3, #1
}
 8014d58:	4618      	mov	r0, r3
 8014d5a:	bd80      	pop	{r7, pc}
 8014d5c:	20000e1c 	.word	0x20000e1c

08014d60 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8014d64:	4812      	ldr	r0, [pc, #72]	; (8014db0 <LoRaMacHalt+0x50>)
 8014d66:	f00b fb5f 	bl	8020428 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8014d6a:	4812      	ldr	r0, [pc, #72]	; (8014db4 <LoRaMacHalt+0x54>)
 8014d6c:	f00b fb5c 	bl	8020428 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8014d70:	4811      	ldr	r0, [pc, #68]	; (8014db8 <LoRaMacHalt+0x58>)
 8014d72:	f00b fb59 	bl	8020428 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 8014d76:	4811      	ldr	r0, [pc, #68]	; (8014dbc <LoRaMacHalt+0x5c>)
 8014d78:	f00b fb56 	bl	8020428 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8014d7c:	f002 fc82 	bl	8017684 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8014d80:	4b0f      	ldr	r3, [pc, #60]	; (8014dc0 <LoRaMacHalt+0x60>)
 8014d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d84:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8014d86:	4b0f      	ldr	r3, [pc, #60]	; (8014dc4 <LoRaMacHalt+0x64>)
 8014d88:	2200      	movs	r2, #0
 8014d8a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 8014d8e:	480e      	ldr	r0, [pc, #56]	; (8014dc8 <LoRaMacHalt+0x68>)
 8014d90:	f7fd fc2e 	bl	80125f0 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8014d94:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8014d98:	490b      	ldr	r1, [pc, #44]	; (8014dc8 <LoRaMacHalt+0x68>)
 8014d9a:	480c      	ldr	r0, [pc, #48]	; (8014dcc <LoRaMacHalt+0x6c>)
 8014d9c:	f007 f9f9 	bl	801c192 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8014da0:	4b08      	ldr	r3, [pc, #32]	; (8014dc4 <LoRaMacHalt+0x64>)
 8014da2:	2201      	movs	r2, #1
 8014da4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8014da8:	2300      	movs	r3, #0
}
 8014daa:	4618      	mov	r0, r3
 8014dac:	bd80      	pop	{r7, pc}
 8014dae:	bf00      	nop
 8014db0:	20001184 	.word	0x20001184
 8014db4:	2000119c 	.word	0x2000119c
 8014db8:	200011b4 	.word	0x200011b4
 8014dbc:	20001214 	.word	0x20001214
 8014dc0:	08021d00 	.word	0x08021d00
 8014dc4:	20000e1c 	.word	0x20000e1c
 8014dc8:	20001328 	.word	0x20001328
 8014dcc:	20001a50 	.word	0x20001a50

08014dd0 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b08a      	sub	sp, #40	; 0x28
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	4603      	mov	r3, r0
 8014dd8:	6039      	str	r1, [r7, #0]
 8014dda:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014ddc:	4b3e      	ldr	r3, [pc, #248]	; (8014ed8 <LoRaMacQueryTxPossible+0x108>)
 8014dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014de0:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014de2:	4b3d      	ldr	r3, [pc, #244]	; (8014ed8 <LoRaMacQueryTxPossible+0x108>)
 8014de4:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8014de8:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8014dea:	4b3b      	ldr	r3, [pc, #236]	; (8014ed8 <LoRaMacQueryTxPossible+0x108>)
 8014dec:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 8014df0:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8014df2:	2300      	movs	r3, #0
 8014df4:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8014df6:	683b      	ldr	r3, [r7, #0]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d101      	bne.n	8014e00 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014dfc:	2303      	movs	r3, #3
 8014dfe:	e066      	b.n	8014ece <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8014e00:	4b35      	ldr	r3, [pc, #212]	; (8014ed8 <LoRaMacQueryTxPossible+0x108>)
 8014e02:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8014e06:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8014e08:	2300      	movs	r3, #0
 8014e0a:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8014e0c:	4b32      	ldr	r3, [pc, #200]	; (8014ed8 <LoRaMacQueryTxPossible+0x108>)
 8014e0e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8014e12:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014e14:	4b30      	ldr	r3, [pc, #192]	; (8014ed8 <LoRaMacQueryTxPossible+0x108>)
 8014e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e18:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8014e1a:	4b30      	ldr	r3, [pc, #192]	; (8014edc <LoRaMacQueryTxPossible+0x10c>)
 8014e1c:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8014e20:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8014e22:	4b2e      	ldr	r3, [pc, #184]	; (8014edc <LoRaMacQueryTxPossible+0x10c>)
 8014e24:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8014e28:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8014e2a:	4b2b      	ldr	r3, [pc, #172]	; (8014ed8 <LoRaMacQueryTxPossible+0x108>)
 8014e2c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014e30:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014e34:	4b28      	ldr	r3, [pc, #160]	; (8014ed8 <LoRaMacQueryTxPossible+0x108>)
 8014e36:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8014e3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014e3e:	4b26      	ldr	r3, [pc, #152]	; (8014ed8 <LoRaMacQueryTxPossible+0x108>)
 8014e40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8014e44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8014e48:	4b23      	ldr	r3, [pc, #140]	; (8014ed8 <LoRaMacQueryTxPossible+0x108>)
 8014e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8014e52:	f107 0310 	add.w	r3, r7, #16
 8014e56:	f107 020e 	add.w	r2, r7, #14
 8014e5a:	f107 010f 	add.w	r1, r7, #15
 8014e5e:	f107 0014 	add.w	r0, r7, #20
 8014e62:	f001 f84f 	bl	8015f04 <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8014e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7fd feb8 	bl	8012be0 <GetMaxAppPayloadWithoutFOptsLength>
 8014e70:	4603      	mov	r3, r0
 8014e72:	461a      	mov	r2, r3
 8014e74:	683b      	ldr	r3, [r7, #0]
 8014e76:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8014e78:	f107 0308 	add.w	r3, r7, #8
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	f003 f8ef 	bl	8018060 <LoRaMacCommandsGetSizeSerializedCmds>
 8014e82:	4603      	mov	r3, r0
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d001      	beq.n	8014e8c <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014e88:	2313      	movs	r3, #19
 8014e8a:	e020      	b.n	8014ece <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8014e8c:	68bb      	ldr	r3, [r7, #8]
 8014e8e:	2b0f      	cmp	r3, #15
 8014e90:	d819      	bhi.n	8014ec6 <LoRaMacQueryTxPossible+0xf6>
 8014e92:	683b      	ldr	r3, [r7, #0]
 8014e94:	785b      	ldrb	r3, [r3, #1]
 8014e96:	461a      	mov	r2, r3
 8014e98:	68bb      	ldr	r3, [r7, #8]
 8014e9a:	429a      	cmp	r2, r3
 8014e9c:	d313      	bcc.n	8014ec6 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8014e9e:	683b      	ldr	r3, [r7, #0]
 8014ea0:	785a      	ldrb	r2, [r3, #1]
 8014ea2:	68bb      	ldr	r3, [r7, #8]
 8014ea4:	b2db      	uxtb	r3, r3
 8014ea6:	1ad3      	subs	r3, r2, r3
 8014ea8:	b2da      	uxtb	r2, r3
 8014eaa:	683b      	ldr	r3, [r7, #0]
 8014eac:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8014eae:	683b      	ldr	r3, [r7, #0]
 8014eb0:	785b      	ldrb	r3, [r3, #1]
 8014eb2:	4619      	mov	r1, r3
 8014eb4:	79fa      	ldrb	r2, [r7, #7]
 8014eb6:	68bb      	ldr	r3, [r7, #8]
 8014eb8:	4413      	add	r3, r2
 8014eba:	4299      	cmp	r1, r3
 8014ebc:	d301      	bcc.n	8014ec2 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	e005      	b.n	8014ece <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8014ec2:	2308      	movs	r3, #8
 8014ec4:	e003      	b.n	8014ece <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	2200      	movs	r2, #0
 8014eca:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8014ecc:	2308      	movs	r3, #8
    }
}
 8014ece:	4618      	mov	r0, r3
 8014ed0:	3728      	adds	r7, #40	; 0x28
 8014ed2:	46bd      	mov	sp, r7
 8014ed4:	bd80      	pop	{r7, pc}
 8014ed6:	bf00      	nop
 8014ed8:	20001328 	.word	0x20001328
 8014edc:	20000e1c 	.word	0x20000e1c

08014ee0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8014ee0:	b590      	push	{r4, r7, lr}
 8014ee2:	b087      	sub	sp, #28
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014ee8:	2300      	movs	r3, #0
 8014eea:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d101      	bne.n	8014ef6 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014ef2:	2303      	movs	r3, #3
 8014ef4:	e171      	b.n	80151da <LoRaMacMibGetRequestConfirm+0x2fa>
    }

    switch( mibGet->Type )
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	781b      	ldrb	r3, [r3, #0]
 8014efa:	2b37      	cmp	r3, #55	; 0x37
 8014efc:	f200 8166 	bhi.w	80151cc <LoRaMacMibGetRequestConfirm+0x2ec>
 8014f00:	a201      	add	r2, pc, #4	; (adr r2, 8014f08 <LoRaMacMibGetRequestConfirm+0x28>)
 8014f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f06:	bf00      	nop
 8014f08:	08014fe9 	.word	0x08014fe9
 8014f0c:	08014ff5 	.word	0x08014ff5
 8014f10:	08015001 	.word	0x08015001
 8014f14:	0801500d 	.word	0x0801500d
 8014f18:	08015019 	.word	0x08015019
 8014f1c:	08015025 	.word	0x08015025
 8014f20:	08015031 	.word	0x08015031
 8014f24:	080151cd 	.word	0x080151cd
 8014f28:	080151cd 	.word	0x080151cd
 8014f2c:	080151cd 	.word	0x080151cd
 8014f30:	080151cd 	.word	0x080151cd
 8014f34:	080151cd 	.word	0x080151cd
 8014f38:	080151cd 	.word	0x080151cd
 8014f3c:	080151cd 	.word	0x080151cd
 8014f40:	080151cd 	.word	0x080151cd
 8014f44:	0801503d 	.word	0x0801503d
 8014f48:	08015049 	.word	0x08015049
 8014f4c:	08015055 	.word	0x08015055
 8014f50:	08015077 	.word	0x08015077
 8014f54:	08015089 	.word	0x08015089
 8014f58:	0801509b 	.word	0x0801509b
 8014f5c:	080150ad 	.word	0x080150ad
 8014f60:	080150e1 	.word	0x080150e1
 8014f64:	080150bf 	.word	0x080150bf
 8014f68:	08015103 	.word	0x08015103
 8014f6c:	0801510f 	.word	0x0801510f
 8014f70:	08015119 	.word	0x08015119
 8014f74:	08015123 	.word	0x08015123
 8014f78:	0801512d 	.word	0x0801512d
 8014f7c:	08015137 	.word	0x08015137
 8014f80:	08015141 	.word	0x08015141
 8014f84:	0801514d 	.word	0x0801514d
 8014f88:	08015165 	.word	0x08015165
 8014f8c:	08015159 	.word	0x08015159
 8014f90:	08015171 	.word	0x08015171
 8014f94:	0801517b 	.word	0x0801517b
 8014f98:	08015187 	.word	0x08015187
 8014f9c:	080151a1 	.word	0x080151a1
 8014fa0:	08015191 	.word	0x08015191
 8014fa4:	08015199 	.word	0x08015199
 8014fa8:	080151cd 	.word	0x080151cd
 8014fac:	080151ad 	.word	0x080151ad
 8014fb0:	080151cd 	.word	0x080151cd
 8014fb4:	080151cd 	.word	0x080151cd
 8014fb8:	080151cd 	.word	0x080151cd
 8014fbc:	080151cd 	.word	0x080151cd
 8014fc0:	080151cd 	.word	0x080151cd
 8014fc4:	080151cd 	.word	0x080151cd
 8014fc8:	080151cd 	.word	0x080151cd
 8014fcc:	080151cd 	.word	0x080151cd
 8014fd0:	080151cd 	.word	0x080151cd
 8014fd4:	080151cd 	.word	0x080151cd
 8014fd8:	080151cd 	.word	0x080151cd
 8014fdc:	080151cd 	.word	0x080151cd
 8014fe0:	080151cd 	.word	0x080151cd
 8014fe4:	080151c1 	.word	0x080151c1
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8014fe8:	4b7e      	ldr	r3, [pc, #504]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 8014fea:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	711a      	strb	r2, [r3, #4]
            break;
 8014ff2:	e0f1      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014ff4:	4b7b      	ldr	r3, [pc, #492]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 8014ff6:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	711a      	strb	r2, [r3, #4]
            break;
 8014ffe:	e0eb      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8015000:	f7fa fe30 	bl	800fc64 <SecureElementGetDevEui>
 8015004:	4602      	mov	r2, r0
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	605a      	str	r2, [r3, #4]
            break;
 801500a:	e0e5      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 801500c:	f7fa fe4c 	bl	800fca8 <SecureElementGetJoinEui>
 8015010:	4602      	mov	r2, r0
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	605a      	str	r2, [r3, #4]
            break;
 8015016:	e0df      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8015018:	4b72      	ldr	r3, [pc, #456]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 801501a:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	711a      	strb	r2, [r3, #4]
            break;
 8015022:	e0d9      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8015024:	4b6f      	ldr	r3, [pc, #444]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 8015026:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	605a      	str	r2, [r3, #4]
            break;
 801502e:	e0d3      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8015030:	4b6c      	ldr	r3, [pc, #432]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 8015032:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	605a      	str	r2, [r3, #4]
            break;
 801503a:	e0cd      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 801503c:	4b69      	ldr	r3, [pc, #420]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 801503e:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	711a      	strb	r2, [r3, #4]
            break;
 8015046:	e0c7      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8015048:	4b66      	ldr	r3, [pc, #408]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 801504a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	711a      	strb	r2, [r3, #4]
            break;
 8015052:	e0c1      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8015054:	231d      	movs	r3, #29
 8015056:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015058:	4b62      	ldr	r3, [pc, #392]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 801505a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801505e:	f107 0210 	add.w	r2, r7, #16
 8015062:	4611      	mov	r1, r2
 8015064:	4618      	mov	r0, r3
 8015066:	f004 fce9 	bl	8019a3c <RegionGetPhyParam>
 801506a:	4603      	mov	r3, r0
 801506c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801506e:	68fa      	ldr	r2, [r7, #12]
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	605a      	str	r2, [r3, #4]
            break;
 8015074:	e0b0      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	4a5a      	ldr	r2, [pc, #360]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 801507a:	3304      	adds	r3, #4
 801507c:	3264      	adds	r2, #100	; 0x64
 801507e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015082:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8015086:	e0a7      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	4a56      	ldr	r2, [pc, #344]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 801508c:	3304      	adds	r3, #4
 801508e:	32a8      	adds	r2, #168	; 0xa8
 8015090:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015094:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8015098:	e09e      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	4a51      	ldr	r2, [pc, #324]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 801509e:	3304      	adds	r3, #4
 80150a0:	326c      	adds	r2, #108	; 0x6c
 80150a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80150a6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80150aa:	e095      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	4a4d      	ldr	r2, [pc, #308]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 80150b0:	3304      	adds	r3, #4
 80150b2:	32b0      	adds	r2, #176	; 0xb0
 80150b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80150b8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80150bc:	e08c      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80150be:	231b      	movs	r3, #27
 80150c0:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80150c2:	4b48      	ldr	r3, [pc, #288]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 80150c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80150c8:	f107 0210 	add.w	r2, r7, #16
 80150cc:	4611      	mov	r1, r2
 80150ce:	4618      	mov	r0, r3
 80150d0:	f004 fcb4 	bl	8019a3c <RegionGetPhyParam>
 80150d4:	4603      	mov	r3, r0
 80150d6:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80150d8:	68fa      	ldr	r2, [r7, #12]
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	605a      	str	r2, [r3, #4]
            break;
 80150de:	e07b      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80150e0:	231a      	movs	r3, #26
 80150e2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80150e4:	4b3f      	ldr	r3, [pc, #252]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 80150e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80150ea:	f107 0210 	add.w	r2, r7, #16
 80150ee:	4611      	mov	r1, r2
 80150f0:	4618      	mov	r0, r3
 80150f2:	f004 fca3 	bl	8019a3c <RegionGetPhyParam>
 80150f6:	4603      	mov	r3, r0
 80150f8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80150fa:	68fa      	ldr	r2, [r7, #12]
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	605a      	str	r2, [r3, #4]
            break;
 8015100:	e06a      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8015102:	4b38      	ldr	r3, [pc, #224]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 8015104:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	711a      	strb	r2, [r3, #4]
            break;
 801510c:	e064      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801510e:	4b35      	ldr	r3, [pc, #212]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 8015110:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	605a      	str	r2, [r3, #4]
            break;
 8015116:	e05f      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8015118:	4b32      	ldr	r3, [pc, #200]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 801511a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	605a      	str	r2, [r3, #4]
            break;
 8015120:	e05a      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8015122:	4b30      	ldr	r3, [pc, #192]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 8015124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	605a      	str	r2, [r3, #4]
            break;
 801512a:	e055      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 801512c:	4b2d      	ldr	r3, [pc, #180]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 801512e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	605a      	str	r2, [r3, #4]
            break;
 8015134:	e050      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8015136:	4b2b      	ldr	r3, [pc, #172]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 8015138:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	605a      	str	r2, [r3, #4]
            break;
 801513e:	e04b      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8015140:	4b28      	ldr	r3, [pc, #160]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 8015142:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	711a      	strb	r2, [r3, #4]
            break;
 801514a:	e045      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801514c:	4b25      	ldr	r3, [pc, #148]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 801514e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	711a      	strb	r2, [r3, #4]
            break;
 8015156:	e03f      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8015158:	4b22      	ldr	r3, [pc, #136]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 801515a:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	711a      	strb	r2, [r3, #4]
            break;
 8015162:	e039      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8015164:	4b1f      	ldr	r3, [pc, #124]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 8015166:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	711a      	strb	r2, [r3, #4]
            break;
 801516e:	e033      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8015170:	4b1c      	ldr	r3, [pc, #112]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 8015172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	605a      	str	r2, [r3, #4]
            break;
 8015178:	e02e      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801517a:	4b1a      	ldr	r3, [pc, #104]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 801517c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	711a      	strb	r2, [r3, #4]
            break;
 8015184:	e028      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8015186:	4b17      	ldr	r3, [pc, #92]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 8015188:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	605a      	str	r2, [r3, #4]
            break;
 801518e:	e023      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	4a14      	ldr	r2, [pc, #80]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 8015194:	605a      	str	r2, [r3, #4]
            break;
 8015196:	e01f      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	4a13      	ldr	r2, [pc, #76]	; (80151e8 <LoRaMacMibGetRequestConfirm+0x308>)
 801519c:	605a      	str	r2, [r3, #4]
            break;
 801519e:	e01b      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80151a0:	4b10      	ldr	r3, [pc, #64]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 80151a2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	605a      	str	r2, [r3, #4]
            break;
 80151aa:	e015      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	4a0d      	ldr	r2, [pc, #52]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 80151b0:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 80151b4:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80151b6:	687c      	ldr	r4, [r7, #4]
 80151b8:	f004 fddc 	bl	8019d74 <RegionGetVersion>
 80151bc:	60a0      	str	r0, [r4, #8]
            break;
 80151be:	e00b      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80151c0:	4b08      	ldr	r3, [pc, #32]	; (80151e4 <LoRaMacMibGetRequestConfirm+0x304>)
 80151c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	605a      	str	r2, [r3, #4]
            break;
 80151ca:	e005      	b.n	80151d8 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f002 fae3 	bl	8017798 <LoRaMacClassBMibGetRequestConfirm>
 80151d2:	4603      	mov	r3, r0
 80151d4:	75fb      	strb	r3, [r7, #23]
            break;
 80151d6:	bf00      	nop
        }
    }
    return status;
 80151d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80151da:	4618      	mov	r0, r3
 80151dc:	371c      	adds	r7, #28
 80151de:	46bd      	mov	sp, r7
 80151e0:	bd90      	pop	{r4, r7, pc}
 80151e2:	bf00      	nop
 80151e4:	20001328 	.word	0x20001328
 80151e8:	20001a50 	.word	0x20001a50

080151ec <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b086      	sub	sp, #24
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80151f4:	2300      	movs	r3, #0
 80151f6:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d101      	bne.n	8015202 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80151fe:	2303      	movs	r3, #3
 8015200:	e348      	b.n	8015894 <LoRaMacMibSetRequestConfirm+0x6a8>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8015202:	4bb7      	ldr	r3, [pc, #732]	; (80154e0 <LoRaMacMibSetRequestConfirm+0x2f4>)
 8015204:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8015208:	f003 0302 	and.w	r3, r3, #2
 801520c:	2b00      	cmp	r3, #0
 801520e:	d001      	beq.n	8015214 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8015210:	2301      	movs	r3, #1
 8015212:	e33f      	b.n	8015894 <LoRaMacMibSetRequestConfirm+0x6a8>
    }

    switch( mibSet->Type )
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	781b      	ldrb	r3, [r3, #0]
 8015218:	2b37      	cmp	r3, #55	; 0x37
 801521a:	f200 8319 	bhi.w	8015850 <LoRaMacMibSetRequestConfirm+0x664>
 801521e:	a201      	add	r2, pc, #4	; (adr r2, 8015224 <LoRaMacMibSetRequestConfirm+0x38>)
 8015220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015224:	08015305 	.word	0x08015305
 8015228:	08015315 	.word	0x08015315
 801522c:	0801532f 	.word	0x0801532f
 8015230:	08015347 	.word	0x08015347
 8015234:	0801535f 	.word	0x0801535f
 8015238:	0801536b 	.word	0x0801536b
 801523c:	08015377 	.word	0x08015377
 8015240:	08015383 	.word	0x08015383
 8015244:	080153a9 	.word	0x080153a9
 8015248:	080153cf 	.word	0x080153cf
 801524c:	080153f5 	.word	0x080153f5
 8015250:	0801541b 	.word	0x0801541b
 8015254:	08015441 	.word	0x08015441
 8015258:	08015467 	.word	0x08015467
 801525c:	0801548d 	.word	0x0801548d
 8015260:	080154b3 	.word	0x080154b3
 8015264:	080154d3 	.word	0x080154d3
 8015268:	08015851 	.word	0x08015851
 801526c:	080154ed 	.word	0x080154ed
 8015270:	0801555d 	.word	0x0801555d
 8015274:	0801559d 	.word	0x0801559d
 8015278:	080155ff 	.word	0x080155ff
 801527c:	0801566f 	.word	0x0801566f
 8015280:	0801563f 	.word	0x0801563f
 8015284:	0801569f 	.word	0x0801569f
 8015288:	080156c1 	.word	0x080156c1
 801528c:	080156cb 	.word	0x080156cb
 8015290:	080156d5 	.word	0x080156d5
 8015294:	080156df 	.word	0x080156df
 8015298:	080156e9 	.word	0x080156e9
 801529c:	080156f3 	.word	0x080156f3
 80152a0:	08015725 	.word	0x08015725
 80152a4:	08015791 	.word	0x08015791
 80152a8:	0801575f 	.word	0x0801575f
 80152ac:	080157cd 	.word	0x080157cd
 80152b0:	080157e3 	.word	0x080157e3
 80152b4:	080157fb 	.word	0x080157fb
 80152b8:	08015805 	.word	0x08015805
 80152bc:	08015811 	.word	0x08015811
 80152c0:	08015851 	.word	0x08015851
 80152c4:	0801581b 	.word	0x0801581b
 80152c8:	08015851 	.word	0x08015851
 80152cc:	08015851 	.word	0x08015851
 80152d0:	08015851 	.word	0x08015851
 80152d4:	08015851 	.word	0x08015851
 80152d8:	08015851 	.word	0x08015851
 80152dc:	08015851 	.word	0x08015851
 80152e0:	08015851 	.word	0x08015851
 80152e4:	08015851 	.word	0x08015851
 80152e8:	08015851 	.word	0x08015851
 80152ec:	08015851 	.word	0x08015851
 80152f0:	08015851 	.word	0x08015851
 80152f4:	08015851 	.word	0x08015851
 80152f8:	08015851 	.word	0x08015851
 80152fc:	08015851 	.word	0x08015851
 8015300:	08015845 	.word	0x08015845
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	791b      	ldrb	r3, [r3, #4]
 8015308:	4618      	mov	r0, r3
 801530a:	f7fd fb99 	bl	8012a40 <SwitchClass>
 801530e:	4603      	mov	r3, r0
 8015310:	75fb      	strb	r3, [r7, #23]
            break;
 8015312:	e2be      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	791b      	ldrb	r3, [r3, #4]
 8015318:	2b02      	cmp	r3, #2
 801531a:	d005      	beq.n	8015328 <LoRaMacMibSetRequestConfirm+0x13c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	791a      	ldrb	r2, [r3, #4]
 8015320:	4b70      	ldr	r3, [pc, #448]	; (80154e4 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8015322:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015326:	e2b4      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015328:	2303      	movs	r3, #3
 801532a:	75fb      	strb	r3, [r7, #23]
            break;
 801532c:	e2b1      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	685b      	ldr	r3, [r3, #4]
 8015332:	4618      	mov	r0, r3
 8015334:	f7fa fc7e 	bl	800fc34 <SecureElementSetDevEui>
 8015338:	4603      	mov	r3, r0
 801533a:	2b00      	cmp	r3, #0
 801533c:	f000 828e 	beq.w	801585c <LoRaMacMibSetRequestConfirm+0x670>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015340:	2303      	movs	r3, #3
 8015342:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015344:	e28a      	b.n	801585c <LoRaMacMibSetRequestConfirm+0x670>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	685b      	ldr	r3, [r3, #4]
 801534a:	4618      	mov	r0, r3
 801534c:	f7fa fc94 	bl	800fc78 <SecureElementSetJoinEui>
 8015350:	4603      	mov	r3, r0
 8015352:	2b00      	cmp	r3, #0
 8015354:	f000 8284 	beq.w	8015860 <LoRaMacMibSetRequestConfirm+0x674>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015358:	2303      	movs	r3, #3
 801535a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801535c:	e280      	b.n	8015860 <LoRaMacMibSetRequestConfirm+0x674>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	791a      	ldrb	r2, [r3, #4]
 8015362:	4b60      	ldr	r3, [pc, #384]	; (80154e4 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8015364:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 8015368:	e293      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	685b      	ldr	r3, [r3, #4]
 801536e:	4a5d      	ldr	r2, [pc, #372]	; (80154e4 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8015370:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 8015374:	e28d      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	685b      	ldr	r3, [r3, #4]
 801537a:	4a5a      	ldr	r2, [pc, #360]	; (80154e4 <LoRaMacMibSetRequestConfirm+0x2f8>)
 801537c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 8015380:	e287      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	685b      	ldr	r3, [r3, #4]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d00b      	beq.n	80153a2 <LoRaMacMibSetRequestConfirm+0x1b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	685b      	ldr	r3, [r3, #4]
 801538e:	4619      	mov	r1, r3
 8015390:	2000      	movs	r0, #0
 8015392:	f003 fd63 	bl	8018e5c <LoRaMacCryptoSetKey>
 8015396:	4603      	mov	r3, r0
 8015398:	2b00      	cmp	r3, #0
 801539a:	f000 8263 	beq.w	8015864 <LoRaMacMibSetRequestConfirm+0x678>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801539e:	2311      	movs	r3, #17
 80153a0:	e278      	b.n	8015894 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80153a2:	2303      	movs	r3, #3
 80153a4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80153a6:	e25d      	b.n	8015864 <LoRaMacMibSetRequestConfirm+0x678>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	685b      	ldr	r3, [r3, #4]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d00b      	beq.n	80153c8 <LoRaMacMibSetRequestConfirm+0x1dc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	685b      	ldr	r3, [r3, #4]
 80153b4:	4619      	mov	r1, r3
 80153b6:	2001      	movs	r0, #1
 80153b8:	f003 fd50 	bl	8018e5c <LoRaMacCryptoSetKey>
 80153bc:	4603      	mov	r3, r0
 80153be:	2b00      	cmp	r3, #0
 80153c0:	f000 8252 	beq.w	8015868 <LoRaMacMibSetRequestConfirm+0x67c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80153c4:	2311      	movs	r3, #17
 80153c6:	e265      	b.n	8015894 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80153c8:	2303      	movs	r3, #3
 80153ca:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80153cc:	e24c      	b.n	8015868 <LoRaMacMibSetRequestConfirm+0x67c>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	685b      	ldr	r3, [r3, #4]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d00b      	beq.n	80153ee <LoRaMacMibSetRequestConfirm+0x202>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	685b      	ldr	r3, [r3, #4]
 80153da:	4619      	mov	r1, r3
 80153dc:	2002      	movs	r0, #2
 80153de:	f003 fd3d 	bl	8018e5c <LoRaMacCryptoSetKey>
 80153e2:	4603      	mov	r3, r0
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	f000 8241 	beq.w	801586c <LoRaMacMibSetRequestConfirm+0x680>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80153ea:	2311      	movs	r3, #17
 80153ec:	e252      	b.n	8015894 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80153ee:	2303      	movs	r3, #3
 80153f0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80153f2:	e23b      	b.n	801586c <LoRaMacMibSetRequestConfirm+0x680>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	685b      	ldr	r3, [r3, #4]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d00b      	beq.n	8015414 <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	685b      	ldr	r3, [r3, #4]
 8015400:	4619      	mov	r1, r3
 8015402:	2003      	movs	r0, #3
 8015404:	f003 fd2a 	bl	8018e5c <LoRaMacCryptoSetKey>
 8015408:	4603      	mov	r3, r0
 801540a:	2b00      	cmp	r3, #0
 801540c:	f000 8230 	beq.w	8015870 <LoRaMacMibSetRequestConfirm+0x684>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8015410:	2311      	movs	r3, #17
 8015412:	e23f      	b.n	8015894 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015414:	2303      	movs	r3, #3
 8015416:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015418:	e22a      	b.n	8015870 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	685b      	ldr	r3, [r3, #4]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d00b      	beq.n	801543a <LoRaMacMibSetRequestConfirm+0x24e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	685b      	ldr	r3, [r3, #4]
 8015426:	4619      	mov	r1, r3
 8015428:	207f      	movs	r0, #127	; 0x7f
 801542a:	f003 fd17 	bl	8018e5c <LoRaMacCryptoSetKey>
 801542e:	4603      	mov	r3, r0
 8015430:	2b00      	cmp	r3, #0
 8015432:	f000 821f 	beq.w	8015874 <LoRaMacMibSetRequestConfirm+0x688>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8015436:	2311      	movs	r3, #17
 8015438:	e22c      	b.n	8015894 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801543a:	2303      	movs	r3, #3
 801543c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801543e:	e219      	b.n	8015874 <LoRaMacMibSetRequestConfirm+0x688>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	685b      	ldr	r3, [r3, #4]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d00b      	beq.n	8015460 <LoRaMacMibSetRequestConfirm+0x274>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	685b      	ldr	r3, [r3, #4]
 801544c:	4619      	mov	r1, r3
 801544e:	2080      	movs	r0, #128	; 0x80
 8015450:	f003 fd04 	bl	8018e5c <LoRaMacCryptoSetKey>
 8015454:	4603      	mov	r3, r0
 8015456:	2b00      	cmp	r3, #0
 8015458:	f000 820e 	beq.w	8015878 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801545c:	2311      	movs	r3, #17
 801545e:	e219      	b.n	8015894 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015460:	2303      	movs	r3, #3
 8015462:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015464:	e208      	b.n	8015878 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	685b      	ldr	r3, [r3, #4]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d00b      	beq.n	8015486 <LoRaMacMibSetRequestConfirm+0x29a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	685b      	ldr	r3, [r3, #4]
 8015472:	4619      	mov	r1, r3
 8015474:	2081      	movs	r0, #129	; 0x81
 8015476:	f003 fcf1 	bl	8018e5c <LoRaMacCryptoSetKey>
 801547a:	4603      	mov	r3, r0
 801547c:	2b00      	cmp	r3, #0
 801547e:	f000 81fd 	beq.w	801587c <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8015482:	2311      	movs	r3, #17
 8015484:	e206      	b.n	8015894 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015486:	2303      	movs	r3, #3
 8015488:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801548a:	e1f7      	b.n	801587c <LoRaMacMibSetRequestConfirm+0x690>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	685b      	ldr	r3, [r3, #4]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d00b      	beq.n	80154ac <LoRaMacMibSetRequestConfirm+0x2c0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	685b      	ldr	r3, [r3, #4]
 8015498:	4619      	mov	r1, r3
 801549a:	2082      	movs	r0, #130	; 0x82
 801549c:	f003 fcde 	bl	8018e5c <LoRaMacCryptoSetKey>
 80154a0:	4603      	mov	r3, r0
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	f000 81ec 	beq.w	8015880 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80154a8:	2311      	movs	r3, #17
 80154aa:	e1f3      	b.n	8015894 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80154ac:	2303      	movs	r3, #3
 80154ae:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80154b0:	e1e6      	b.n	8015880 <LoRaMacMibSetRequestConfirm+0x694>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	791a      	ldrb	r2, [r3, #4]
 80154b6:	4b0b      	ldr	r3, [pc, #44]	; (80154e4 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80154b8:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80154bc:	4b0a      	ldr	r3, [pc, #40]	; (80154e8 <LoRaMacMibSetRequestConfirm+0x2fc>)
 80154be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80154c0:	4a08      	ldr	r2, [pc, #32]	; (80154e4 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80154c2:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 80154c6:	4610      	mov	r0, r2
 80154c8:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80154ca:	4b07      	ldr	r3, [pc, #28]	; (80154e8 <LoRaMacMibSetRequestConfirm+0x2fc>)
 80154cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154ce:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80154d0:	e1df      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	791a      	ldrb	r2, [r3, #4]
 80154d6:	4b03      	ldr	r3, [pc, #12]	; (80154e4 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80154d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 80154dc:	e1d9      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
 80154de:	bf00      	nop
 80154e0:	20000e1c 	.word	0x20000e1c
 80154e4:	20001328 	.word	0x20001328
 80154e8:	08021d00 	.word	0x08021d00
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	7a1b      	ldrb	r3, [r3, #8]
 80154f0:	b25b      	sxtb	r3, r3
 80154f2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80154f4:	4bb3      	ldr	r3, [pc, #716]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80154f6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80154fa:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80154fc:	4bb1      	ldr	r3, [pc, #708]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80154fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015502:	f107 0108 	add.w	r1, r7, #8
 8015506:	2207      	movs	r2, #7
 8015508:	4618      	mov	r0, r3
 801550a:	f004 fad2 	bl	8019ab2 <RegionVerify>
 801550e:	4603      	mov	r3, r0
 8015510:	f083 0301 	eor.w	r3, r3, #1
 8015514:	b2db      	uxtb	r3, r3
 8015516:	2b00      	cmp	r3, #0
 8015518:	d002      	beq.n	8015520 <LoRaMacMibSetRequestConfirm+0x334>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801551a:	2303      	movs	r3, #3
 801551c:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 801551e:	e1b8      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	685b      	ldr	r3, [r3, #4]
 8015524:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8015526:	4ba7      	ldr	r3, [pc, #668]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015528:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801552c:	f107 0108 	add.w	r1, r7, #8
 8015530:	2200      	movs	r2, #0
 8015532:	4618      	mov	r0, r3
 8015534:	f004 fabd 	bl	8019ab2 <RegionVerify>
 8015538:	4603      	mov	r3, r0
 801553a:	f083 0301 	eor.w	r3, r3, #1
 801553e:	b2db      	uxtb	r3, r3
 8015540:	2b00      	cmp	r3, #0
 8015542:	d002      	beq.n	801554a <LoRaMacMibSetRequestConfirm+0x35e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015544:	2303      	movs	r3, #3
 8015546:	75fb      	strb	r3, [r7, #23]
            break;
 8015548:	e1a3      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 801554a:	4b9e      	ldr	r3, [pc, #632]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801554c:	687a      	ldr	r2, [r7, #4]
 801554e:	3364      	adds	r3, #100	; 0x64
 8015550:	3204      	adds	r2, #4
 8015552:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015556:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801555a:	e19a      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	7a1b      	ldrb	r3, [r3, #8]
 8015560:	b25b      	sxtb	r3, r3
 8015562:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8015564:	4b97      	ldr	r3, [pc, #604]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015566:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801556a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801556c:	4b95      	ldr	r3, [pc, #596]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801556e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015572:	f107 0108 	add.w	r1, r7, #8
 8015576:	2207      	movs	r2, #7
 8015578:	4618      	mov	r0, r3
 801557a:	f004 fa9a 	bl	8019ab2 <RegionVerify>
 801557e:	4603      	mov	r3, r0
 8015580:	2b00      	cmp	r3, #0
 8015582:	d008      	beq.n	8015596 <LoRaMacMibSetRequestConfirm+0x3aa>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8015584:	4b8f      	ldr	r3, [pc, #572]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015586:	687a      	ldr	r2, [r7, #4]
 8015588:	33a8      	adds	r3, #168	; 0xa8
 801558a:	3204      	adds	r2, #4
 801558c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015590:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015594:	e17d      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015596:	2303      	movs	r3, #3
 8015598:	75fb      	strb	r3, [r7, #23]
            break;
 801559a:	e17a      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	7a1b      	ldrb	r3, [r3, #8]
 80155a0:	b25b      	sxtb	r3, r3
 80155a2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80155a4:	4b87      	ldr	r3, [pc, #540]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80155a6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80155aa:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80155ac:	4b85      	ldr	r3, [pc, #532]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80155ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80155b2:	f107 0108 	add.w	r1, r7, #8
 80155b6:	2207      	movs	r2, #7
 80155b8:	4618      	mov	r0, r3
 80155ba:	f004 fa7a 	bl	8019ab2 <RegionVerify>
 80155be:	4603      	mov	r3, r0
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d019      	beq.n	80155f8 <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80155c4:	4b7f      	ldr	r3, [pc, #508]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80155c6:	687a      	ldr	r2, [r7, #4]
 80155c8:	336c      	adds	r3, #108	; 0x6c
 80155ca:	3204      	adds	r2, #4
 80155cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80155d0:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80155d4:	4b7b      	ldr	r3, [pc, #492]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80155d6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80155da:	2b02      	cmp	r3, #2
 80155dc:	f040 8152 	bne.w	8015884 <LoRaMacMibSetRequestConfirm+0x698>
 80155e0:	4b78      	ldr	r3, [pc, #480]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80155e2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	f000 814c 	beq.w	8015884 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80155ec:	4b76      	ldr	r3, [pc, #472]	; (80157c8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80155ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155f0:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80155f2:	f7fe fc67 	bl	8013ec4 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80155f6:	e145      	b.n	8015884 <LoRaMacMibSetRequestConfirm+0x698>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80155f8:	2303      	movs	r3, #3
 80155fa:	75fb      	strb	r3, [r7, #23]
            break;
 80155fc:	e142      	b.n	8015884 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	7a1b      	ldrb	r3, [r3, #8]
 8015602:	b25b      	sxtb	r3, r3
 8015604:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8015606:	4b6f      	ldr	r3, [pc, #444]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015608:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801560c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801560e:	4b6d      	ldr	r3, [pc, #436]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015610:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015614:	f107 0108 	add.w	r1, r7, #8
 8015618:	2207      	movs	r2, #7
 801561a:	4618      	mov	r0, r3
 801561c:	f004 fa49 	bl	8019ab2 <RegionVerify>
 8015620:	4603      	mov	r3, r0
 8015622:	2b00      	cmp	r3, #0
 8015624:	d008      	beq.n	8015638 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8015626:	4b67      	ldr	r3, [pc, #412]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015628:	687a      	ldr	r2, [r7, #4]
 801562a:	33b0      	adds	r3, #176	; 0xb0
 801562c:	3204      	adds	r2, #4
 801562e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015632:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015636:	e12c      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015638:	2303      	movs	r3, #3
 801563a:	75fb      	strb	r3, [r7, #23]
            break;
 801563c:	e129      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	685b      	ldr	r3, [r3, #4]
 8015642:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8015644:	2301      	movs	r3, #1
 8015646:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8015648:	4b5e      	ldr	r3, [pc, #376]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801564a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801564e:	f107 020c 	add.w	r2, r7, #12
 8015652:	4611      	mov	r1, r2
 8015654:	4618      	mov	r0, r3
 8015656:	f004 fa55 	bl	8019b04 <RegionChanMaskSet>
 801565a:	4603      	mov	r3, r0
 801565c:	f083 0301 	eor.w	r3, r3, #1
 8015660:	b2db      	uxtb	r3, r3
 8015662:	2b00      	cmp	r3, #0
 8015664:	f000 8110 	beq.w	8015888 <LoRaMacMibSetRequestConfirm+0x69c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015668:	2303      	movs	r3, #3
 801566a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801566c:	e10c      	b.n	8015888 <LoRaMacMibSetRequestConfirm+0x69c>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	685b      	ldr	r3, [r3, #4]
 8015672:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8015674:	2300      	movs	r3, #0
 8015676:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8015678:	4b52      	ldr	r3, [pc, #328]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801567a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801567e:	f107 020c 	add.w	r2, r7, #12
 8015682:	4611      	mov	r1, r2
 8015684:	4618      	mov	r0, r3
 8015686:	f004 fa3d 	bl	8019b04 <RegionChanMaskSet>
 801568a:	4603      	mov	r3, r0
 801568c:	f083 0301 	eor.w	r3, r3, #1
 8015690:	b2db      	uxtb	r3, r3
 8015692:	2b00      	cmp	r3, #0
 8015694:	f000 80fa 	beq.w	801588c <LoRaMacMibSetRequestConfirm+0x6a0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015698:	2303      	movs	r3, #3
 801569a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801569c:	e0f6      	b.n	801588c <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	791b      	ldrb	r3, [r3, #4]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d009      	beq.n	80156ba <LoRaMacMibSetRequestConfirm+0x4ce>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80156aa:	2b0f      	cmp	r3, #15
 80156ac:	d805      	bhi.n	80156ba <LoRaMacMibSetRequestConfirm+0x4ce>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	791a      	ldrb	r2, [r3, #4]
 80156b2:	4b44      	ldr	r3, [pc, #272]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80156b4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80156b8:	e0eb      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80156ba:	2303      	movs	r3, #3
 80156bc:	75fb      	strb	r3, [r7, #23]
            break;
 80156be:	e0e8      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	685b      	ldr	r3, [r3, #4]
 80156c4:	4a3f      	ldr	r2, [pc, #252]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80156c6:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80156c8:	e0e3      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	685b      	ldr	r3, [r3, #4]
 80156ce:	4a3d      	ldr	r2, [pc, #244]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80156d0:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 80156d2:	e0de      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	685b      	ldr	r3, [r3, #4]
 80156d8:	4a3a      	ldr	r2, [pc, #232]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80156da:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80156dc:	e0d9      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	685b      	ldr	r3, [r3, #4]
 80156e2:	4a38      	ldr	r2, [pc, #224]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80156e4:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80156e6:	e0d4      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	685b      	ldr	r3, [r3, #4]
 80156ec:	4a35      	ldr	r2, [pc, #212]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80156ee:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80156f0:	e0cf      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80156f8:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80156fa:	4b32      	ldr	r3, [pc, #200]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80156fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015700:	f107 0108 	add.w	r1, r7, #8
 8015704:	2206      	movs	r2, #6
 8015706:	4618      	mov	r0, r3
 8015708:	f004 f9d3 	bl	8019ab2 <RegionVerify>
 801570c:	4603      	mov	r3, r0
 801570e:	2b00      	cmp	r3, #0
 8015710:	d005      	beq.n	801571e <LoRaMacMibSetRequestConfirm+0x532>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8015712:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015716:	4b2b      	ldr	r3, [pc, #172]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015718:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801571c:	e0b9      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801571e:	2303      	movs	r3, #3
 8015720:	75fb      	strb	r3, [r7, #23]
            break;
 8015722:	e0b6      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801572a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801572c:	4b25      	ldr	r3, [pc, #148]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801572e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8015732:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8015734:	4b23      	ldr	r3, [pc, #140]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015736:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801573a:	f107 0108 	add.w	r1, r7, #8
 801573e:	2205      	movs	r2, #5
 8015740:	4618      	mov	r0, r3
 8015742:	f004 f9b6 	bl	8019ab2 <RegionVerify>
 8015746:	4603      	mov	r3, r0
 8015748:	2b00      	cmp	r3, #0
 801574a:	d005      	beq.n	8015758 <LoRaMacMibSetRequestConfirm+0x56c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801574c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015750:	4b1c      	ldr	r3, [pc, #112]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015752:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015756:	e09c      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015758:	2303      	movs	r3, #3
 801575a:	75fb      	strb	r3, [r7, #23]
            break;
 801575c:	e099      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015764:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8015766:	4b17      	ldr	r3, [pc, #92]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015768:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801576c:	f107 0108 	add.w	r1, r7, #8
 8015770:	220a      	movs	r2, #10
 8015772:	4618      	mov	r0, r3
 8015774:	f004 f99d 	bl	8019ab2 <RegionVerify>
 8015778:	4603      	mov	r3, r0
 801577a:	2b00      	cmp	r3, #0
 801577c:	d005      	beq.n	801578a <LoRaMacMibSetRequestConfirm+0x59e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 801577e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015782:	4b10      	ldr	r3, [pc, #64]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015784:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015788:	e083      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801578a:	2303      	movs	r3, #3
 801578c:	75fb      	strb	r3, [r7, #23]
            break;
 801578e:	e080      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015796:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8015798:	4b0a      	ldr	r3, [pc, #40]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801579a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801579e:	f107 0108 	add.w	r1, r7, #8
 80157a2:	2209      	movs	r2, #9
 80157a4:	4618      	mov	r0, r3
 80157a6:	f004 f984 	bl	8019ab2 <RegionVerify>
 80157aa:	4603      	mov	r3, r0
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d005      	beq.n	80157bc <LoRaMacMibSetRequestConfirm+0x5d0>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80157b0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80157b4:	4b03      	ldr	r3, [pc, #12]	; (80157c4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80157b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80157ba:	e06a      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80157bc:	2303      	movs	r3, #3
 80157be:	75fb      	strb	r3, [r7, #23]
            break;
 80157c0:	e067      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
 80157c2:	bf00      	nop
 80157c4:	20001328 	.word	0x20001328
 80157c8:	08021d00 	.word	0x08021d00
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	685b      	ldr	r3, [r3, #4]
 80157d0:	4a32      	ldr	r2, [pc, #200]	; (801589c <LoRaMacMibSetRequestConfirm+0x6b0>)
 80157d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80157d6:	4b31      	ldr	r3, [pc, #196]	; (801589c <LoRaMacMibSetRequestConfirm+0x6b0>)
 80157d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80157dc:	4a2f      	ldr	r2, [pc, #188]	; (801589c <LoRaMacMibSetRequestConfirm+0x6b0>)
 80157de:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 80157e0:	e057      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	791a      	ldrb	r2, [r3, #4]
 80157e6:	4b2d      	ldr	r3, [pc, #180]	; (801589c <LoRaMacMibSetRequestConfirm+0x6b0>)
 80157e8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80157ec:	4b2b      	ldr	r3, [pc, #172]	; (801589c <LoRaMacMibSetRequestConfirm+0x6b0>)
 80157ee:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80157f2:	4b2a      	ldr	r3, [pc, #168]	; (801589c <LoRaMacMibSetRequestConfirm+0x6b0>)
 80157f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 80157f8:	e04b      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	685b      	ldr	r3, [r3, #4]
 80157fe:	4a27      	ldr	r2, [pc, #156]	; (801589c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8015800:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8015802:	e046      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	685b      	ldr	r3, [r3, #4]
 8015808:	4a24      	ldr	r2, [pc, #144]	; (801589c <LoRaMacMibSetRequestConfirm+0x6b0>)
 801580a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 801580e:	e040      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8015810:	f7fe fdb2 	bl	8014378 <RestoreNvmData>
 8015814:	4603      	mov	r3, r0
 8015816:	75fb      	strb	r3, [r7, #23]
            break;
 8015818:	e03b      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	799b      	ldrb	r3, [r3, #6]
 801581e:	2b01      	cmp	r3, #1
 8015820:	d80d      	bhi.n	801583e <LoRaMacMibSetRequestConfirm+0x652>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8015822:	4a1e      	ldr	r2, [pc, #120]	; (801589c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	685b      	ldr	r3, [r3, #4]
 8015828:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	6858      	ldr	r0, [r3, #4]
 8015830:	f003 fa4e 	bl	8018cd0 <LoRaMacCryptoSetLrWanVersion>
 8015834:	4603      	mov	r3, r0
 8015836:	2b00      	cmp	r3, #0
 8015838:	d02a      	beq.n	8015890 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801583a:	2311      	movs	r3, #17
 801583c:	e02a      	b.n	8015894 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801583e:	2303      	movs	r3, #3
 8015840:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015842:	e025      	b.n	8015890 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	685b      	ldr	r3, [r3, #4]
 8015848:	4a14      	ldr	r2, [pc, #80]	; (801589c <LoRaMacMibSetRequestConfirm+0x6b0>)
 801584a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 801584e:	e020      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f001 ffc9 	bl	80177e8 <LoRaMacMibClassBSetRequestConfirm>
 8015856:	4603      	mov	r3, r0
 8015858:	75fb      	strb	r3, [r7, #23]
            break;
 801585a:	e01a      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 801585c:	bf00      	nop
 801585e:	e018      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015860:	bf00      	nop
 8015862:	e016      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015864:	bf00      	nop
 8015866:	e014      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015868:	bf00      	nop
 801586a:	e012      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 801586c:	bf00      	nop
 801586e:	e010      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015870:	bf00      	nop
 8015872:	e00e      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015874:	bf00      	nop
 8015876:	e00c      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015878:	bf00      	nop
 801587a:	e00a      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 801587c:	bf00      	nop
 801587e:	e008      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015880:	bf00      	nop
 8015882:	e006      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015884:	bf00      	nop
 8015886:	e004      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015888:	bf00      	nop
 801588a:	e002      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 801588c:	bf00      	nop
 801588e:	e000      	b.n	8015892 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015890:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8015892:	7dfb      	ldrb	r3, [r7, #23]
}
 8015894:	4618      	mov	r0, r3
 8015896:	3718      	adds	r7, #24
 8015898:	46bd      	mov	sp, r7
 801589a:	bd80      	pop	{r7, pc}
 801589c:	20001328 	.word	0x20001328

080158a0 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b086      	sub	sp, #24
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80158a8:	2302      	movs	r3, #2
 80158aa:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80158ac:	2300      	movs	r3, #0
 80158ae:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d101      	bne.n	80158ba <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80158b6:	2303      	movs	r3, #3
 80158b8:	e127      	b.n	8015b0a <LoRaMacMlmeRequest+0x26a>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80158ba:	f7fc fcd3 	bl	8012264 <LoRaMacIsBusy>
 80158be:	4603      	mov	r3, r0
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d001      	beq.n	80158c8 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80158c4:	2301      	movs	r3, #1
 80158c6:	e120      	b.n	8015b0a <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80158c8:	f002 fea6 	bl	8018618 <LoRaMacConfirmQueueIsFull>
 80158cc:	4603      	mov	r3, r0
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d001      	beq.n	80158d6 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 80158d2:	2301      	movs	r3, #1
 80158d4:	e119      	b.n	8015b0a <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80158d6:	f002 fe93 	bl	8018600 <LoRaMacConfirmQueueGetCnt>
 80158da:	4603      	mov	r3, r0
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d104      	bne.n	80158ea <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80158e0:	2214      	movs	r2, #20
 80158e2:	2100      	movs	r1, #0
 80158e4:	488b      	ldr	r0, [pc, #556]	; (8015b14 <LoRaMacMlmeRequest+0x274>)
 80158e6:	f006 fc8f 	bl	801c208 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80158ea:	4b8b      	ldr	r3, [pc, #556]	; (8015b18 <LoRaMacMlmeRequest+0x278>)
 80158ec:	2201      	movs	r2, #1
 80158ee:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80158f2:	4a89      	ldr	r2, [pc, #548]	; (8015b18 <LoRaMacMlmeRequest+0x278>)
 80158f4:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80158f8:	f043 0304 	orr.w	r3, r3, #4
 80158fc:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	781b      	ldrb	r3, [r3, #0]
 8015904:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015906:	2301      	movs	r3, #1
 8015908:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 801590a:	2300      	movs	r3, #0
 801590c:	74fb      	strb	r3, [r7, #19]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	781b      	ldrb	r3, [r3, #0]
 8015912:	3b01      	subs	r3, #1
 8015914:	2b0d      	cmp	r3, #13
 8015916:	f200 80ce 	bhi.w	8015ab6 <LoRaMacMlmeRequest+0x216>
 801591a:	a201      	add	r2, pc, #4	; (adr r2, 8015920 <LoRaMacMlmeRequest+0x80>)
 801591c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015920:	08015959 	.word	0x08015959
 8015924:	08015ab7 	.word	0x08015ab7
 8015928:	08015ab7 	.word	0x08015ab7
 801592c:	080159c3 	.word	0x080159c3
 8015930:	080159e1 	.word	0x080159e1
 8015934:	080159f1 	.word	0x080159f1
 8015938:	08015ab7 	.word	0x08015ab7
 801593c:	08015ab7 	.word	0x08015ab7
 8015940:	08015ab7 	.word	0x08015ab7
 8015944:	08015a0d 	.word	0x08015a0d
 8015948:	08015ab7 	.word	0x08015ab7
 801594c:	08015a8b 	.word	0x08015a8b
 8015950:	08015a2b 	.word	0x08015a2b
 8015954:	08015a6d 	.word	0x08015a6d
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8015958:	4b6f      	ldr	r3, [pc, #444]	; (8015b18 <LoRaMacMlmeRequest+0x278>)
 801595a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801595e:	f003 0320 	and.w	r3, r3, #32
 8015962:	2b00      	cmp	r3, #0
 8015964:	d001      	beq.n	801596a <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8015966:	2301      	movs	r3, #1
 8015968:	e0cf      	b.n	8015b0a <LoRaMacMlmeRequest+0x26a>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( );
 801596a:	f7fe f989 	bl	8013c80 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 801596e:	4b6b      	ldr	r3, [pc, #428]	; (8015b1c <LoRaMacMlmeRequest+0x27c>)
 8015970:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	795b      	ldrb	r3, [r3, #5]
 8015978:	b25b      	sxtb	r3, r3
 801597a:	2200      	movs	r2, #0
 801597c:	4619      	mov	r1, r3
 801597e:	f004 f980 	bl	8019c82 <RegionAlternateDr>
 8015982:	4603      	mov	r3, r0
 8015984:	461a      	mov	r2, r3
 8015986:	4b65      	ldr	r3, [pc, #404]	; (8015b1c <LoRaMacMlmeRequest+0x27c>)
 8015988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 801598c:	2307      	movs	r3, #7
 801598e:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8015990:	20ff      	movs	r0, #255	; 0xff
 8015992:	f7fd feed 	bl	8013770 <SendReJoinReq>
 8015996:	4603      	mov	r3, r0
 8015998:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 801599a:	7dfb      	ldrb	r3, [r7, #23]
 801599c:	2b00      	cmp	r3, #0
 801599e:	f000 808c 	beq.w	8015aba <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80159a2:	4b5e      	ldr	r3, [pc, #376]	; (8015b1c <LoRaMacMlmeRequest+0x27c>)
 80159a4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	795b      	ldrb	r3, [r3, #5]
 80159ac:	b25b      	sxtb	r3, r3
 80159ae:	2201      	movs	r2, #1
 80159b0:	4619      	mov	r1, r3
 80159b2:	f004 f966 	bl	8019c82 <RegionAlternateDr>
 80159b6:	4603      	mov	r3, r0
 80159b8:	461a      	mov	r2, r3
 80159ba:	4b58      	ldr	r3, [pc, #352]	; (8015b1c <LoRaMacMlmeRequest+0x27c>)
 80159bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 80159c0:	e07b      	b.n	8015aba <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80159c2:	2300      	movs	r3, #0
 80159c4:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80159c6:	f107 030c 	add.w	r3, r7, #12
 80159ca:	2200      	movs	r2, #0
 80159cc:	4619      	mov	r1, r3
 80159ce:	2002      	movs	r0, #2
 80159d0:	f002 fa88 	bl	8017ee4 <LoRaMacCommandsAddCmd>
 80159d4:	4603      	mov	r3, r0
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d071      	beq.n	8015abe <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80159da:	2313      	movs	r3, #19
 80159dc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80159de:	e06e      	b.n	8015abe <LoRaMacMlmeRequest+0x21e>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	889b      	ldrh	r3, [r3, #4]
 80159e4:	4618      	mov	r0, r3
 80159e6:	f7fe fc73 	bl	80142d0 <SetTxContinuousWave>
 80159ea:	4603      	mov	r3, r0
 80159ec:	75fb      	strb	r3, [r7, #23]
            break;
 80159ee:	e06d      	b.n	8015acc <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	8898      	ldrh	r0, [r3, #4]
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	6899      	ldr	r1, [r3, #8]
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80159fe:	b2db      	uxtb	r3, r3
 8015a00:	461a      	mov	r2, r3
 8015a02:	f7fe fc99 	bl	8014338 <SetTxContinuousWave1>
 8015a06:	4603      	mov	r3, r0
 8015a08:	75fb      	strb	r3, [r7, #23]
            break;
 8015a0a:	e05f      	b.n	8015acc <LoRaMacMlmeRequest+0x22c>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015a10:	f107 030c 	add.w	r3, r7, #12
 8015a14:	2200      	movs	r2, #0
 8015a16:	4619      	mov	r1, r3
 8015a18:	200d      	movs	r0, #13
 8015a1a:	f002 fa63 	bl	8017ee4 <LoRaMacCommandsAddCmd>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d04e      	beq.n	8015ac2 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015a24:	2313      	movs	r3, #19
 8015a26:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015a28:	e04b      	b.n	8015ac2 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8015a2a:	4b3c      	ldr	r3, [pc, #240]	; (8015b1c <LoRaMacMlmeRequest+0x27c>)
 8015a2c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d148      	bne.n	8015ac6 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	791b      	ldrb	r3, [r3, #4]
 8015a38:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	791b      	ldrb	r3, [r3, #4]
 8015a3e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015a42:	b2db      	uxtb	r3, r3
 8015a44:	4618      	mov	r0, r3
 8015a46:	f001 fdff 	bl	8017648 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8015a4a:	7dbb      	ldrb	r3, [r7, #22]
 8015a4c:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8015a4e:	2300      	movs	r3, #0
 8015a50:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8015a52:	f107 030c 	add.w	r3, r7, #12
 8015a56:	2201      	movs	r2, #1
 8015a58:	4619      	mov	r1, r3
 8015a5a:	2010      	movs	r0, #16
 8015a5c:	f002 fa42 	bl	8017ee4 <LoRaMacCommandsAddCmd>
 8015a60:	4603      	mov	r3, r0
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d02f      	beq.n	8015ac6 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015a66:	2313      	movs	r3, #19
 8015a68:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8015a6a:	e02c      	b.n	8015ac6 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015a70:	f107 030c 	add.w	r3, r7, #12
 8015a74:	2200      	movs	r2, #0
 8015a76:	4619      	mov	r1, r3
 8015a78:	2012      	movs	r0, #18
 8015a7a:	f002 fa33 	bl	8017ee4 <LoRaMacCommandsAddCmd>
 8015a7e:	4603      	mov	r3, r0
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d022      	beq.n	8015aca <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015a84:	2313      	movs	r3, #19
 8015a86:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015a88:	e01f      	b.n	8015aca <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8015a8a:	2301      	movs	r3, #1
 8015a8c:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8015a8e:	f000 ff83 	bl	8016998 <LoRaMacClassBIsAcquisitionInProgress>
 8015a92:	4603      	mov	r3, r0
 8015a94:	f083 0301 	eor.w	r3, r3, #1
 8015a98:	b2db      	uxtb	r3, r3
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d008      	beq.n	8015ab0 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8015a9e:	2000      	movs	r0, #0
 8015aa0:	f000 ff24 	bl	80168ec <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8015aa4:	2000      	movs	r0, #0
 8015aa6:	f000 ff8d 	bl	80169c4 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8015aaa:	2300      	movs	r3, #0
 8015aac:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8015aae:	e00d      	b.n	8015acc <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8015ab0:	2301      	movs	r3, #1
 8015ab2:	75fb      	strb	r3, [r7, #23]
            break;
 8015ab4:	e00a      	b.n	8015acc <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8015ab6:	bf00      	nop
 8015ab8:	e008      	b.n	8015acc <LoRaMacMlmeRequest+0x22c>
            break;
 8015aba:	bf00      	nop
 8015abc:	e006      	b.n	8015acc <LoRaMacMlmeRequest+0x22c>
            break;
 8015abe:	bf00      	nop
 8015ac0:	e004      	b.n	8015acc <LoRaMacMlmeRequest+0x22c>
            break;
 8015ac2:	bf00      	nop
 8015ac4:	e002      	b.n	8015acc <LoRaMacMlmeRequest+0x22c>
            break;
 8015ac6:	bf00      	nop
 8015ac8:	e000      	b.n	8015acc <LoRaMacMlmeRequest+0x22c>
            break;
 8015aca:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8015acc:	4b12      	ldr	r3, [pc, #72]	; (8015b18 <LoRaMacMlmeRequest+0x278>)
 8015ace:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8015ad6:	7dfb      	ldrb	r3, [r7, #23]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d010      	beq.n	8015afe <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8015adc:	f002 fd90 	bl	8018600 <LoRaMacConfirmQueueGetCnt>
 8015ae0:	4603      	mov	r3, r0
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d110      	bne.n	8015b08 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8015ae6:	4b0c      	ldr	r3, [pc, #48]	; (8015b18 <LoRaMacMlmeRequest+0x278>)
 8015ae8:	2200      	movs	r2, #0
 8015aea:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8015aee:	4a0a      	ldr	r2, [pc, #40]	; (8015b18 <LoRaMacMlmeRequest+0x278>)
 8015af0:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8015af4:	f36f 0382 	bfc	r3, #2, #1
 8015af8:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8015afc:	e004      	b.n	8015b08 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8015afe:	f107 0310 	add.w	r3, r7, #16
 8015b02:	4618      	mov	r0, r3
 8015b04:	f002 fc2e 	bl	8018364 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8015b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	3718      	adds	r7, #24
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bd80      	pop	{r7, pc}
 8015b12:	bf00      	nop
 8015b14:	20001268 	.word	0x20001268
 8015b18:	20000e1c 	.word	0x20000e1c
 8015b1c:	20001328 	.word	0x20001328

08015b20 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b08c      	sub	sp, #48	; 0x30
 8015b24:	af02      	add	r7, sp, #8
 8015b26:	6078      	str	r0, [r7, #4]
 8015b28:	460b      	mov	r3, r1
 8015b2a:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015b2c:	2302      	movs	r3, #2
 8015b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8015b32:	2300      	movs	r3, #0
 8015b34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8015b38:	2300      	movs	r3, #0
 8015b3a:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8015b40:	2300      	movs	r3, #0
 8015b42:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d101      	bne.n	8015b4e <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015b4a:	2303      	movs	r3, #3
 8015b4c:	e0d4      	b.n	8015cf8 <LoRaMacMcpsRequest+0x1d8>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8015b4e:	f7fc fb89 	bl	8012264 <LoRaMacIsBusy>
 8015b52:	4603      	mov	r3, r0
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d001      	beq.n	8015b5c <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8015b58:	2301      	movs	r3, #1
 8015b5a:	e0cd      	b.n	8015cf8 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8015b60:	2214      	movs	r2, #20
 8015b62:	2100      	movs	r1, #0
 8015b64:	4866      	ldr	r0, [pc, #408]	; (8015d00 <LoRaMacMcpsRequest+0x1e0>)
 8015b66:	f006 fb4f 	bl	801c208 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015b6a:	4b66      	ldr	r3, [pc, #408]	; (8015d04 <LoRaMacMcpsRequest+0x1e4>)
 8015b6c:	2201      	movs	r2, #1
 8015b6e:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8015b72:	4b64      	ldr	r3, [pc, #400]	; (8015d04 <LoRaMacMcpsRequest+0x1e4>)
 8015b74:	2201      	movs	r2, #1
 8015b76:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	781b      	ldrb	r3, [r3, #0]
 8015b7e:	2b03      	cmp	r3, #3
 8015b80:	d03d      	beq.n	8015bfe <LoRaMacMcpsRequest+0xde>
 8015b82:	2b03      	cmp	r3, #3
 8015b84:	dc4f      	bgt.n	8015c26 <LoRaMacMcpsRequest+0x106>
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d002      	beq.n	8015b90 <LoRaMacMcpsRequest+0x70>
 8015b8a:	2b01      	cmp	r3, #1
 8015b8c:	d019      	beq.n	8015bc2 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8015b8e:	e04a      	b.n	8015c26 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8015b90:	2301      	movs	r3, #1
 8015b92:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8015b94:	4b5b      	ldr	r3, [pc, #364]	; (8015d04 <LoRaMacMcpsRequest+0x1e4>)
 8015b96:	2201      	movs	r2, #1
 8015b98:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8015b9c:	7b3b      	ldrb	r3, [r7, #12]
 8015b9e:	2202      	movs	r2, #2
 8015ba0:	f362 1347 	bfi	r3, r2, #5, #3
 8015ba4:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	791b      	ldrb	r3, [r3, #4]
 8015baa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	689b      	ldr	r3, [r3, #8]
 8015bb2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	899b      	ldrh	r3, [r3, #12]
 8015bb8:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	7b9b      	ldrb	r3, [r3, #14]
 8015bbe:	777b      	strb	r3, [r7, #29]
            break;
 8015bc0:	e032      	b.n	8015c28 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8015bc2:	2301      	movs	r3, #1
 8015bc4:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	7bdb      	ldrb	r3, [r3, #15]
 8015bca:	2b08      	cmp	r3, #8
 8015bcc:	bf28      	it	cs
 8015bce:	2308      	movcs	r3, #8
 8015bd0:	b2da      	uxtb	r2, r3
 8015bd2:	4b4c      	ldr	r3, [pc, #304]	; (8015d04 <LoRaMacMcpsRequest+0x1e4>)
 8015bd4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8015bd8:	7b3b      	ldrb	r3, [r7, #12]
 8015bda:	2204      	movs	r2, #4
 8015bdc:	f362 1347 	bfi	r3, r2, #5, #3
 8015be0:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	791b      	ldrb	r3, [r3, #4]
 8015be6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	689b      	ldr	r3, [r3, #8]
 8015bee:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	899b      	ldrh	r3, [r3, #12]
 8015bf4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	7b9b      	ldrb	r3, [r3, #14]
 8015bfa:	777b      	strb	r3, [r7, #29]
            break;
 8015bfc:	e014      	b.n	8015c28 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8015bfe:	2301      	movs	r3, #1
 8015c00:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8015c02:	4b40      	ldr	r3, [pc, #256]	; (8015d04 <LoRaMacMcpsRequest+0x1e4>)
 8015c04:	2201      	movs	r2, #1
 8015c06:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8015c0a:	7b3b      	ldrb	r3, [r7, #12]
 8015c0c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8015c10:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	685b      	ldr	r3, [r3, #4]
 8015c16:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	891b      	ldrh	r3, [r3, #8]
 8015c1c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	7a9b      	ldrb	r3, [r3, #10]
 8015c22:	777b      	strb	r3, [r7, #29]
            break;
 8015c24:	e000      	b.n	8015c28 <LoRaMacMcpsRequest+0x108>
            break;
 8015c26:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015c28:	2302      	movs	r3, #2
 8015c2a:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015c2c:	4b36      	ldr	r3, [pc, #216]	; (8015d08 <LoRaMacMcpsRequest+0x1e8>)
 8015c2e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8015c32:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015c34:	4b34      	ldr	r3, [pc, #208]	; (8015d08 <LoRaMacMcpsRequest+0x1e8>)
 8015c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015c3a:	f107 0214 	add.w	r2, r7, #20
 8015c3e:	4611      	mov	r1, r2
 8015c40:	4618      	mov	r0, r3
 8015c42:	f003 fefb 	bl	8019a3c <RegionGetPhyParam>
 8015c46:	4603      	mov	r3, r0
 8015c48:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8015c4a:	693b      	ldr	r3, [r7, #16]
 8015c4c:	b25b      	sxtb	r3, r3
 8015c4e:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8015c52:	4293      	cmp	r3, r2
 8015c54:	bfb8      	it	lt
 8015c56:	4613      	movlt	r3, r2
 8015c58:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8015c5a:	7f3b      	ldrb	r3, [r7, #28]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d044      	beq.n	8015cea <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8015c60:	4b29      	ldr	r3, [pc, #164]	; (8015d08 <LoRaMacMcpsRequest+0x1e8>)
 8015c62:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8015c66:	f083 0301 	eor.w	r3, r3, #1
 8015c6a:	b2db      	uxtb	r3, r3
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d019      	beq.n	8015ca4 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8015c70:	7f7b      	ldrb	r3, [r7, #29]
 8015c72:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015c74:	4b24      	ldr	r3, [pc, #144]	; (8015d08 <LoRaMacMcpsRequest+0x1e8>)
 8015c76:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8015c7a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8015c7c:	4b22      	ldr	r3, [pc, #136]	; (8015d08 <LoRaMacMcpsRequest+0x1e8>)
 8015c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015c82:	f107 0108 	add.w	r1, r7, #8
 8015c86:	2205      	movs	r2, #5
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f003 ff12 	bl	8019ab2 <RegionVerify>
 8015c8e:	4603      	mov	r3, r0
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d005      	beq.n	8015ca0 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8015c94:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015c98:	4b1b      	ldr	r3, [pc, #108]	; (8015d08 <LoRaMacMcpsRequest+0x1e8>)
 8015c9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8015c9e:	e001      	b.n	8015ca4 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8015ca0:	2303      	movs	r3, #3
 8015ca2:	e029      	b.n	8015cf8 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8015ca4:	8bfa      	ldrh	r2, [r7, #30]
 8015ca6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8015caa:	f107 000c 	add.w	r0, r7, #12
 8015cae:	78fb      	ldrb	r3, [r7, #3]
 8015cb0:	9300      	str	r3, [sp, #0]
 8015cb2:	4613      	mov	r3, r2
 8015cb4:	6a3a      	ldr	r2, [r7, #32]
 8015cb6:	f7fd fc7b 	bl	80135b0 <Send>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8015cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d10c      	bne.n	8015ce2 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	781a      	ldrb	r2, [r3, #0]
 8015ccc:	4b0d      	ldr	r3, [pc, #52]	; (8015d04 <LoRaMacMcpsRequest+0x1e4>)
 8015cce:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8015cd2:	4a0c      	ldr	r2, [pc, #48]	; (8015d04 <LoRaMacMcpsRequest+0x1e4>)
 8015cd4:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8015cd8:	f043 0301 	orr.w	r3, r3, #1
 8015cdc:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8015ce0:	e003      	b.n	8015cea <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8015ce2:	4b08      	ldr	r3, [pc, #32]	; (8015d04 <LoRaMacMcpsRequest+0x1e4>)
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8015cea:	4b06      	ldr	r3, [pc, #24]	; (8015d04 <LoRaMacMcpsRequest+0x1e4>)
 8015cec:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	611a      	str	r2, [r3, #16]

    return status;
 8015cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	3728      	adds	r7, #40	; 0x28
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd80      	pop	{r7, pc}
 8015d00:	20001254 	.word	0x20001254
 8015d04:	20000e1c 	.word	0x20000e1c
 8015d08:	20001328 	.word	0x20001328

08015d0c <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b084      	sub	sp, #16
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	4603      	mov	r3, r0
 8015d14:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8015d16:	79fb      	ldrb	r3, [r7, #7]
 8015d18:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8015d1a:	4b0a      	ldr	r3, [pc, #40]	; (8015d44 <LoRaMacTestSetDutyCycleOn+0x38>)
 8015d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015d20:	f107 010c 	add.w	r1, r7, #12
 8015d24:	220f      	movs	r2, #15
 8015d26:	4618      	mov	r0, r3
 8015d28:	f003 fec3 	bl	8019ab2 <RegionVerify>
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d003      	beq.n	8015d3a <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8015d32:	4a04      	ldr	r2, [pc, #16]	; (8015d44 <LoRaMacTestSetDutyCycleOn+0x38>)
 8015d34:	79fb      	ldrb	r3, [r7, #7]
 8015d36:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 8015d3a:	bf00      	nop
 8015d3c:	3710      	adds	r7, #16
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	bd80      	pop	{r7, pc}
 8015d42:	bf00      	nop
 8015d44:	20001328 	.word	0x20001328

08015d48 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8015d4c:	f7fe ffec 	bl	8014d28 <LoRaMacStop>
 8015d50:	4603      	mov	r3, r0
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d114      	bne.n	8015d80 <LoRaMacDeInitialization+0x38>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8015d56:	480c      	ldr	r0, [pc, #48]	; (8015d88 <LoRaMacDeInitialization+0x40>)
 8015d58:	f00a fb66 	bl	8020428 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8015d5c:	480b      	ldr	r0, [pc, #44]	; (8015d8c <LoRaMacDeInitialization+0x44>)
 8015d5e:	f00a fb63 	bl	8020428 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8015d62:	480b      	ldr	r0, [pc, #44]	; (8015d90 <LoRaMacDeInitialization+0x48>)
 8015d64:	f00a fb60 	bl	8020428 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8015d68:	480a      	ldr	r0, [pc, #40]	; (8015d94 <LoRaMacDeInitialization+0x4c>)
 8015d6a:	f00a fb5d 	bl	8020428 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8015d6e:	f001 fc89 	bl	8017684 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8015d72:	f7fd ff85 	bl	8013c80 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8015d76:	4b08      	ldr	r3, [pc, #32]	; (8015d98 <LoRaMacDeInitialization+0x50>)
 8015d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d7a:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	e000      	b.n	8015d82 <LoRaMacDeInitialization+0x3a>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8015d80:	2301      	movs	r3, #1
    }
}
 8015d82:	4618      	mov	r0, r3
 8015d84:	bd80      	pop	{r7, pc}
 8015d86:	bf00      	nop
 8015d88:	20001184 	.word	0x20001184
 8015d8c:	2000119c 	.word	0x2000119c
 8015d90:	200011b4 	.word	0x200011b4
 8015d94:	20001214 	.word	0x20001214
 8015d98:	08021d00 	.word	0x08021d00

08015d9c <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b08c      	sub	sp, #48	; 0x30
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	60f8      	str	r0, [r7, #12]
 8015da4:	60b9      	str	r1, [r7, #8]
 8015da6:	607a      	str	r2, [r7, #4]
 8015da8:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8015daa:	2300      	movs	r3, #0
 8015dac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	7c1b      	ldrb	r3, [r3, #16]
 8015db4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	7c5b      	ldrb	r3, [r3, #17]
 8015dbc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	689a      	ldr	r2, [r3, #8]
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	795b      	ldrb	r3, [r3, #5]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	f000 808b 	beq.w	8015ee8 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8015dd2:	2302      	movs	r3, #2
 8015dd4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	7c9b      	ldrb	r3, [r3, #18]
 8015ddc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	7cdb      	ldrb	r3, [r3, #19]
 8015de4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015de8:	4611      	mov	r1, r2
 8015dea:	4618      	mov	r0, r3
 8015dec:	f003 fe26 	bl	8019a3c <RegionGetPhyParam>
 8015df0:	4603      	mov	r3, r0
 8015df2:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8015df4:	6a3b      	ldr	r3, [r7, #32]
 8015df6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8015dfa:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8015dfe:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8015e02:	4293      	cmp	r3, r2
 8015e04:	bfb8      	it	lt
 8015e06:	4613      	movlt	r3, r2
 8015e08:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8015e0c:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015e10:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8015e14:	429a      	cmp	r2, r3
 8015e16:	d106      	bne.n	8015e26 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8015e18:	683b      	ldr	r3, [r7, #0]
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8015e1e:	2300      	movs	r3, #0
 8015e20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015e24:	e060      	b.n	8015ee8 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	689b      	ldr	r3, [r3, #8]
 8015e2a:	68fa      	ldr	r2, [r7, #12]
 8015e2c:	8992      	ldrh	r2, [r2, #12]
 8015e2e:	4293      	cmp	r3, r2
 8015e30:	d303      	bcc.n	8015e3a <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8015e32:	2301      	movs	r3, #1
 8015e34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015e38:	e002      	b.n	8015e40 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	689b      	ldr	r3, [r3, #8]
 8015e44:	68fa      	ldr	r2, [r7, #12]
 8015e46:	8992      	ldrh	r2, [r2, #12]
 8015e48:	4611      	mov	r1, r2
 8015e4a:	68fa      	ldr	r2, [r7, #12]
 8015e4c:	89d2      	ldrh	r2, [r2, #14]
 8015e4e:	440a      	add	r2, r1
 8015e50:	4293      	cmp	r3, r2
 8015e52:	d349      	bcc.n	8015ee8 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8015e54:	2308      	movs	r3, #8
 8015e56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	7cdb      	ldrb	r3, [r3, #19]
 8015e5e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015e62:	4611      	mov	r1, r2
 8015e64:	4618      	mov	r0, r3
 8015e66:	f003 fde9 	bl	8019a3c <RegionGetPhyParam>
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8015e6e:	6a3b      	ldr	r3, [r7, #32]
 8015e70:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	689b      	ldr	r3, [r3, #8]
 8015e78:	68fa      	ldr	r2, [r7, #12]
 8015e7a:	89d2      	ldrh	r2, [r2, #14]
 8015e7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015e80:	fb01 f202 	mul.w	r2, r1, r2
 8015e84:	1a9b      	subs	r3, r3, r2
 8015e86:	2b01      	cmp	r3, #1
 8015e88:	d12e      	bne.n	8015ee8 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8015e8a:	2322      	movs	r3, #34	; 0x22
 8015e8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8015e90:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015e94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	7c9b      	ldrb	r3, [r3, #18]
 8015e9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	7cdb      	ldrb	r3, [r3, #19]
 8015ea4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015ea8:	4611      	mov	r1, r2
 8015eaa:	4618      	mov	r0, r3
 8015eac:	f003 fdc6 	bl	8019a3c <RegionGetPhyParam>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8015eb4:	6a3b      	ldr	r3, [r7, #32]
 8015eb6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8015eba:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015ebe:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8015ec2:	429a      	cmp	r2, r3
 8015ec4:	d110      	bne.n	8015ee8 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	791b      	ldrb	r3, [r3, #4]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d009      	beq.n	8015ee8 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015ed4:	2302      	movs	r3, #2
 8015ed6:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	7cdb      	ldrb	r3, [r3, #19]
 8015edc:	f107 0214 	add.w	r2, r7, #20
 8015ee0:	4611      	mov	r1, r2
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	f003 fdd3 	bl	8019a8e <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8015ee8:	68bb      	ldr	r3, [r7, #8]
 8015eea:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8015eee:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015ef6:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8015ef8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015efc:	4618      	mov	r0, r3
 8015efe:	3730      	adds	r7, #48	; 0x30
 8015f00:	46bd      	mov	sp, r7
 8015f02:	bd80      	pop	{r7, pc}

08015f04 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	b084      	sub	sp, #16
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	60f8      	str	r0, [r7, #12]
 8015f0c:	60b9      	str	r1, [r7, #8]
 8015f0e:	607a      	str	r2, [r7, #4]
 8015f10:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	789b      	ldrb	r3, [r3, #2]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d107      	bne.n	8015f2a <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8015f1a:	683b      	ldr	r3, [r7, #0]
 8015f1c:	687a      	ldr	r2, [r7, #4]
 8015f1e:	68b9      	ldr	r1, [r7, #8]
 8015f20:	68f8      	ldr	r0, [r7, #12]
 8015f22:	f7ff ff3b 	bl	8015d9c <CalcNextV10X>
 8015f26:	4603      	mov	r3, r0
 8015f28:	e000      	b.n	8015f2c <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8015f2a:	2300      	movs	r3, #0
}
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	3710      	adds	r7, #16
 8015f30:	46bd      	mov	sp, r7
 8015f32:	bd80      	pop	{r7, pc}

08015f34 <TimerTempCompensation>:
 * \retval Compensated time period
 */
static TimerTime_t TimerTempCompensation( TimerTime_t period, int16_t temperature );

static TimerTime_t TimerTempCompensation( TimerTime_t period, int16_t temperature )
{
 8015f34:	b590      	push	{r4, r7, lr}
 8015f36:	b089      	sub	sp, #36	; 0x24
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	6078      	str	r0, [r7, #4]
 8015f3c:	460b      	mov	r3, r1
 8015f3e:	807b      	strh	r3, [r7, #2]
  float k = RTC_TEMP_COEFFICIENT;
 8015f40:	4b3e      	ldr	r3, [pc, #248]	; (801603c <TimerTempCompensation+0x108>)
 8015f42:	617b      	str	r3, [r7, #20]
  float kDev = RTC_TEMP_DEV_COEFFICIENT;
 8015f44:	4b3e      	ldr	r3, [pc, #248]	; (8016040 <TimerTempCompensation+0x10c>)
 8015f46:	613b      	str	r3, [r7, #16]
  float t = RTC_TEMP_TURNOVER;
 8015f48:	4b3e      	ldr	r3, [pc, #248]	; (8016044 <TimerTempCompensation+0x110>)
 8015f4a:	60fb      	str	r3, [r7, #12]
  float tDev = RTC_TEMP_DEV_TURNOVER;
 8015f4c:	4b3e      	ldr	r3, [pc, #248]	; (8016048 <TimerTempCompensation+0x114>)
 8015f4e:	60bb      	str	r3, [r7, #8]
  float interim = 0.0f;
 8015f50:	f04f 0300 	mov.w	r3, #0
 8015f54:	61fb      	str	r3, [r7, #28]
  float ppm = 0.0f;
 8015f56:	f04f 0300 	mov.w	r3, #0
 8015f5a:	61bb      	str	r3, [r7, #24]

  if (k < 0.0f)
 8015f5c:	f04f 0100 	mov.w	r1, #0
 8015f60:	6978      	ldr	r0, [r7, #20]
 8015f62:	f7eb f88b 	bl	800107c <__aeabi_fcmplt>
 8015f66:	4603      	mov	r3, r0
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d006      	beq.n	8015f7a <TimerTempCompensation+0x46>
  {
    ppm = (k - kDev);
 8015f6c:	6939      	ldr	r1, [r7, #16]
 8015f6e:	6978      	ldr	r0, [r7, #20]
 8015f70:	f7ea fddc 	bl	8000b2c <__aeabi_fsub>
 8015f74:	4603      	mov	r3, r0
 8015f76:	61bb      	str	r3, [r7, #24]
 8015f78:	e005      	b.n	8015f86 <TimerTempCompensation+0x52>
  }
  else
  {
    ppm = (k + kDev);
 8015f7a:	6939      	ldr	r1, [r7, #16]
 8015f7c:	6978      	ldr	r0, [r7, #20]
 8015f7e:	f7ea fdd7 	bl	8000b30 <__addsf3>
 8015f82:	4603      	mov	r3, r0
 8015f84:	61bb      	str	r3, [r7, #24]
  }
  interim = (float)temperature - (t - tDev);
 8015f86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	f7ea fe84 	bl	8000c98 <__aeabi_i2f>
 8015f90:	4604      	mov	r4, r0
 8015f92:	68b9      	ldr	r1, [r7, #8]
 8015f94:	68f8      	ldr	r0, [r7, #12]
 8015f96:	f7ea fdc9 	bl	8000b2c <__aeabi_fsub>
 8015f9a:	4603      	mov	r3, r0
 8015f9c:	4619      	mov	r1, r3
 8015f9e:	4620      	mov	r0, r4
 8015fa0:	f7ea fdc4 	bl	8000b2c <__aeabi_fsub>
 8015fa4:	4603      	mov	r3, r0
 8015fa6:	61fb      	str	r3, [r7, #28]
  ppm *=  interim * interim;
 8015fa8:	69f9      	ldr	r1, [r7, #28]
 8015faa:	69f8      	ldr	r0, [r7, #28]
 8015fac:	f7ea fec8 	bl	8000d40 <__aeabi_fmul>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	4619      	mov	r1, r3
 8015fb4:	69b8      	ldr	r0, [r7, #24]
 8015fb6:	f7ea fec3 	bl	8000d40 <__aeabi_fmul>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	61bb      	str	r3, [r7, #24]

  // Calculate the drift in time
  interim = ((float) period * ppm) / 1000000.0f;
 8015fbe:	6878      	ldr	r0, [r7, #4]
 8015fc0:	f7ea fe66 	bl	8000c90 <__aeabi_ui2f>
 8015fc4:	4603      	mov	r3, r0
 8015fc6:	69b9      	ldr	r1, [r7, #24]
 8015fc8:	4618      	mov	r0, r3
 8015fca:	f7ea feb9 	bl	8000d40 <__aeabi_fmul>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	491e      	ldr	r1, [pc, #120]	; (801604c <TimerTempCompensation+0x118>)
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f7ea ff68 	bl	8000ea8 <__aeabi_fdiv>
 8015fd8:	4603      	mov	r3, r0
 8015fda:	61fb      	str	r3, [r7, #28]
  // Calculate the resulting time period
  interim += period;
 8015fdc:	6878      	ldr	r0, [r7, #4]
 8015fde:	f7ea fe57 	bl	8000c90 <__aeabi_ui2f>
 8015fe2:	4603      	mov	r3, r0
 8015fe4:	4619      	mov	r1, r3
 8015fe6:	69f8      	ldr	r0, [r7, #28]
 8015fe8:	f7ea fda2 	bl	8000b30 <__addsf3>
 8015fec:	4603      	mov	r3, r0
 8015fee:	61fb      	str	r3, [r7, #28]
  interim = floor(interim);
 8015ff0:	69f8      	ldr	r0, [r7, #28]
 8015ff2:	f7ea fa2d 	bl	8000450 <__aeabi_f2d>
 8015ff6:	4602      	mov	r2, r0
 8015ff8:	460b      	mov	r3, r1
 8015ffa:	4610      	mov	r0, r2
 8015ffc:	4619      	mov	r1, r3
 8015ffe:	f00a ff2b 	bl	8020e58 <floor>
 8016002:	4602      	mov	r2, r0
 8016004:	460b      	mov	r3, r1
 8016006:	4610      	mov	r0, r2
 8016008:	4619      	mov	r1, r3
 801600a:	f7ea fd3b 	bl	8000a84 <__aeabi_d2f>
 801600e:	4603      	mov	r3, r0
 8016010:	61fb      	str	r3, [r7, #28]

  if (interim < 0.0f)
 8016012:	f04f 0100 	mov.w	r1, #0
 8016016:	69f8      	ldr	r0, [r7, #28]
 8016018:	f7eb f830 	bl	800107c <__aeabi_fcmplt>
 801601c:	4603      	mov	r3, r0
 801601e:	2b00      	cmp	r3, #0
 8016020:	d004      	beq.n	801602c <TimerTempCompensation+0xf8>
  {
    interim = (float)period;
 8016022:	6878      	ldr	r0, [r7, #4]
 8016024:	f7ea fe34 	bl	8000c90 <__aeabi_ui2f>
 8016028:	4603      	mov	r3, r0
 801602a:	61fb      	str	r3, [r7, #28]
  }

  // Calculate the resulting period
  return ( TimerTime_t ) interim;
 801602c:	69f8      	ldr	r0, [r7, #28]
 801602e:	f7eb f873 	bl	8001118 <__aeabi_f2uiz>
 8016032:	4603      	mov	r3, r0
}
 8016034:	4618      	mov	r0, r3
 8016036:	3724      	adds	r7, #36	; 0x24
 8016038:	46bd      	mov	sp, r7
 801603a:	bd90      	pop	{r4, r7, pc}
 801603c:	bd0f5c29 	.word	0xbd0f5c29
 8016040:	3b656042 	.word	0x3b656042
 8016044:	41c80000 	.word	0x41c80000
 8016048:	40a00000 	.word	0x40a00000
 801604c:	49742400 	.word	0x49742400

08016050 <ComputePingOffset>:
 * \param [in]  address         - Frame address
 * \param [in]  pingPeriod      - Ping period of the node
 * \param [out] pingOffset      - Pseudo random ping offset
 */
static void ComputePingOffset( uint64_t beaconTime, uint32_t address, uint16_t pingPeriod, uint16_t *pingOffset )
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b08e      	sub	sp, #56	; 0x38
 8016054:	af00      	add	r7, sp, #0
 8016056:	e9c7 0102 	strd	r0, r1, [r7, #8]
 801605a:	607a      	str	r2, [r7, #4]
 801605c:	807b      	strh	r3, [r7, #2]
    uint8_t buffer[16];
    uint8_t cipher[16];
    uint32_t result = 0;
 801605e:	2300      	movs	r3, #0
 8016060:	637b      	str	r3, [r7, #52]	; 0x34
    /* Refer to chapter 15.2 of the LoRaWAN specification v1.1. The beacon time
     * GPS time in seconds modulo 2^32
     */
    uint32_t time = ( beaconTime % ( ( ( uint64_t ) 1 ) << 32 ) );
 8016062:	68bb      	ldr	r3, [r7, #8]
 8016064:	633b      	str	r3, [r7, #48]	; 0x30

    memset1( buffer, 0, 16 );
 8016066:	f107 0320 	add.w	r3, r7, #32
 801606a:	2210      	movs	r2, #16
 801606c:	2100      	movs	r1, #0
 801606e:	4618      	mov	r0, r3
 8016070:	f006 f8ca 	bl	801c208 <memset1>
    memset1( cipher, 0, 16 );
 8016074:	f107 0310 	add.w	r3, r7, #16
 8016078:	2210      	movs	r2, #16
 801607a:	2100      	movs	r1, #0
 801607c:	4618      	mov	r0, r3
 801607e:	f006 f8c3 	bl	801c208 <memset1>

    buffer[0] = ( time ) & 0xFF;
 8016082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016084:	b2db      	uxtb	r3, r3
 8016086:	f887 3020 	strb.w	r3, [r7, #32]
    buffer[1] = ( time >> 8 ) & 0xFF;
 801608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801608c:	0a1b      	lsrs	r3, r3, #8
 801608e:	b2db      	uxtb	r3, r3
 8016090:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    buffer[2] = ( time >> 16 ) & 0xFF;
 8016094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016096:	0c1b      	lsrs	r3, r3, #16
 8016098:	b2db      	uxtb	r3, r3
 801609a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    buffer[3] = ( time >> 24 ) & 0xFF;
 801609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160a0:	0e1b      	lsrs	r3, r3, #24
 80160a2:	b2db      	uxtb	r3, r3
 80160a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    buffer[4] = ( address ) & 0xFF;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	b2db      	uxtb	r3, r3
 80160ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    buffer[5] = ( address >> 8 ) & 0xFF;
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	0a1b      	lsrs	r3, r3, #8
 80160b4:	b2db      	uxtb	r3, r3
 80160b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    buffer[6] = ( address >> 16 ) & 0xFF;
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	0c1b      	lsrs	r3, r3, #16
 80160be:	b2db      	uxtb	r3, r3
 80160c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    buffer[7] = ( address >> 24 ) & 0xFF;
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	0e1b      	lsrs	r3, r3, #24
 80160c8:	b2db      	uxtb	r3, r3
 80160ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    SecureElementAesEncrypt( buffer, 16, SLOT_RAND_ZERO_KEY, cipher );
 80160ce:	f107 0310 	add.w	r3, r7, #16
 80160d2:	f107 0020 	add.w	r0, r7, #32
 80160d6:	2283      	movs	r2, #131	; 0x83
 80160d8:	2110      	movs	r1, #16
 80160da:	f7f9 fc70 	bl	800f9be <SecureElementAesEncrypt>

    result = ( ( ( uint32_t ) cipher[0] ) + ( ( ( uint32_t ) cipher[1] ) * 256 ) );
 80160de:	7c3b      	ldrb	r3, [r7, #16]
 80160e0:	461a      	mov	r2, r3
 80160e2:	7c7b      	ldrb	r3, [r7, #17]
 80160e4:	021b      	lsls	r3, r3, #8
 80160e6:	4413      	add	r3, r2
 80160e8:	637b      	str	r3, [r7, #52]	; 0x34

    *pingOffset = ( uint16_t )( result % pingPeriod );
 80160ea:	887a      	ldrh	r2, [r7, #2]
 80160ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80160f2:	fb01 f202 	mul.w	r2, r1, r2
 80160f6:	1a9b      	subs	r3, r3, r2
 80160f8:	b29a      	uxth	r2, r3
 80160fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160fc:	801a      	strh	r2, [r3, #0]
}
 80160fe:	bf00      	nop
 8016100:	3738      	adds	r7, #56	; 0x38
 8016102:	46bd      	mov	sp, r7
 8016104:	bd80      	pop	{r7, pc}
	...

08016108 <CalcDownlinkFrequency>:
 *                      calculate the frequency for a beacon.
 *
 * \retval The downlink frequency
 */
static uint32_t CalcDownlinkFrequency( uint8_t channel, bool isBeacon )
{
 8016108:	b580      	push	{r7, lr}
 801610a:	b086      	sub	sp, #24
 801610c:	af00      	add	r7, sp, #0
 801610e:	4603      	mov	r3, r0
 8016110:	460a      	mov	r2, r1
 8016112:	71fb      	strb	r3, [r7, #7]
 8016114:	4613      	mov	r3, r2
 8016116:	71bb      	strb	r3, [r7, #6]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    getPhy.Attribute = PHY_PING_SLOT_CHANNEL_FREQ;
 8016118:	2335      	movs	r3, #53	; 0x35
 801611a:	743b      	strb	r3, [r7, #16]

    if( isBeacon == true )
 801611c:	79bb      	ldrb	r3, [r7, #6]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d001      	beq.n	8016126 <CalcDownlinkFrequency+0x1e>
    {
        getPhy.Attribute = PHY_BEACON_CHANNEL_FREQ;
 8016122:	2330      	movs	r3, #48	; 0x30
 8016124:	743b      	strb	r3, [r7, #16]
    }
    getPhy.Channel = channel;
 8016126:	79fb      	ldrb	r3, [r7, #7]
 8016128:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 801612a:	4b08      	ldr	r3, [pc, #32]	; (801614c <CalcDownlinkFrequency+0x44>)
 801612c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016130:	781b      	ldrb	r3, [r3, #0]
 8016132:	f107 0210 	add.w	r2, r7, #16
 8016136:	4611      	mov	r1, r2
 8016138:	4618      	mov	r0, r3
 801613a:	f003 fc7f 	bl	8019a3c <RegionGetPhyParam>
 801613e:	4603      	mov	r3, r0
 8016140:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8016142:	68fb      	ldr	r3, [r7, #12]
}
 8016144:	4618      	mov	r0, r3
 8016146:	3718      	adds	r7, #24
 8016148:	46bd      	mov	sp, r7
 801614a:	bd80      	pop	{r7, pc}
 801614c:	20002194 	.word	0x20002194

08016150 <CalcDownlinkChannelAndFrequency>:
 *
 * \retval The downlink channel
 */
static uint32_t CalcDownlinkChannelAndFrequency( uint32_t devAddr, TimerTime_t beaconTime,
                                                 TimerTime_t beaconInterval, bool isBeacon )
{
 8016150:	b580      	push	{r7, lr}
 8016152:	b088      	sub	sp, #32
 8016154:	af00      	add	r7, sp, #0
 8016156:	60f8      	str	r0, [r7, #12]
 8016158:	60b9      	str	r1, [r7, #8]
 801615a:	607a      	str	r2, [r7, #4]
 801615c:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    uint32_t channel = 0;
 801615e:	2300      	movs	r3, #0
 8016160:	61fb      	str	r3, [r7, #28]
    uint8_t nbChannels = 0;
 8016162:	2300      	movs	r3, #0
 8016164:	76fb      	strb	r3, [r7, #27]
    uint8_t offset = 0;
 8016166:	2300      	movs	r3, #0
 8016168:	76bb      	strb	r3, [r7, #26]

    // Default initialization - ping slot channels
    getPhy.Attribute = PHY_PING_SLOT_NB_CHANNELS;
 801616a:	2337      	movs	r3, #55	; 0x37
 801616c:	753b      	strb	r3, [r7, #20]

    if( isBeacon == true )
 801616e:	78fb      	ldrb	r3, [r7, #3]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d001      	beq.n	8016178 <CalcDownlinkChannelAndFrequency+0x28>
    {
        // Beacon channels
        getPhy.Attribute = PHY_BEACON_NB_CHANNELS;
 8016174:	2333      	movs	r3, #51	; 0x33
 8016176:	753b      	strb	r3, [r7, #20]
    }
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8016178:	4b21      	ldr	r3, [pc, #132]	; (8016200 <CalcDownlinkChannelAndFrequency+0xb0>)
 801617a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801617e:	781b      	ldrb	r3, [r3, #0]
 8016180:	f107 0214 	add.w	r2, r7, #20
 8016184:	4611      	mov	r1, r2
 8016186:	4618      	mov	r0, r3
 8016188:	f003 fc58 	bl	8019a3c <RegionGetPhyParam>
 801618c:	4603      	mov	r3, r0
 801618e:	613b      	str	r3, [r7, #16]
    nbChannels = ( uint8_t ) phyParam.Value;
 8016190:	693b      	ldr	r3, [r7, #16]
 8016192:	76fb      	strb	r3, [r7, #27]

    // nbChannels is > 1, when the channel plan requires more than one possible channel
    // defined by the calculation below.
    if( nbChannels > 1 )
 8016194:	7efb      	ldrb	r3, [r7, #27]
 8016196:	2b01      	cmp	r3, #1
 8016198:	d926      	bls.n	80161e8 <CalcDownlinkChannelAndFrequency+0x98>
    {
        getPhy.Attribute = PHY_BEACON_CHANNEL_OFFSET;
 801619a:	2334      	movs	r3, #52	; 0x34
 801619c:	753b      	strb	r3, [r7, #20]
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 801619e:	4b18      	ldr	r3, [pc, #96]	; (8016200 <CalcDownlinkChannelAndFrequency+0xb0>)
 80161a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80161a4:	781b      	ldrb	r3, [r3, #0]
 80161a6:	f107 0214 	add.w	r2, r7, #20
 80161aa:	4611      	mov	r1, r2
 80161ac:	4618      	mov	r0, r3
 80161ae:	f003 fc45 	bl	8019a3c <RegionGetPhyParam>
 80161b2:	4603      	mov	r3, r0
 80161b4:	613b      	str	r3, [r7, #16]
        offset = ( uint8_t ) phyParam.Value;
 80161b6:	693b      	ldr	r3, [r7, #16]
 80161b8:	76bb      	strb	r3, [r7, #26]

        // Calculate the channel for the next downlink
        channel = devAddr + ( beaconTime / ( beaconInterval / 1000 ) );
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	4a11      	ldr	r2, [pc, #68]	; (8016204 <CalcDownlinkChannelAndFrequency+0xb4>)
 80161be:	fba2 2303 	umull	r2, r3, r2, r3
 80161c2:	099b      	lsrs	r3, r3, #6
 80161c4:	68ba      	ldr	r2, [r7, #8]
 80161c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80161ca:	68fa      	ldr	r2, [r7, #12]
 80161cc:	4413      	add	r3, r2
 80161ce:	61fb      	str	r3, [r7, #28]
        channel = channel % nbChannels;
 80161d0:	7efa      	ldrb	r2, [r7, #27]
 80161d2:	69fb      	ldr	r3, [r7, #28]
 80161d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80161d8:	fb01 f202 	mul.w	r2, r1, r2
 80161dc:	1a9b      	subs	r3, r3, r2
 80161de:	61fb      	str	r3, [r7, #28]
        channel += offset;
 80161e0:	7ebb      	ldrb	r3, [r7, #26]
 80161e2:	69fa      	ldr	r2, [r7, #28]
 80161e4:	4413      	add	r3, r2
 80161e6:	61fb      	str	r3, [r7, #28]
    }

    // Calculate the frequency for the next downlink. This holds
    // for beacons and ping slots.
    return CalcDownlinkFrequency( channel, isBeacon );
 80161e8:	69fb      	ldr	r3, [r7, #28]
 80161ea:	b2db      	uxtb	r3, r3
 80161ec:	78fa      	ldrb	r2, [r7, #3]
 80161ee:	4611      	mov	r1, r2
 80161f0:	4618      	mov	r0, r3
 80161f2:	f7ff ff89 	bl	8016108 <CalcDownlinkFrequency>
 80161f6:	4603      	mov	r3, r0
}
 80161f8:	4618      	mov	r0, r3
 80161fa:	3720      	adds	r7, #32
 80161fc:	46bd      	mov	sp, r7
 80161fe:	bd80      	pop	{r7, pc}
 8016200:	20002194 	.word	0x20002194
 8016204:	10624dd3 	.word	0x10624dd3

08016208 <CalculateBeaconRxWindowConfig>:
 * \param [in] rxConfig Reception parameters for the beacon window.
 *
 * \param [in] currentSymbolTimeout Current symbol timeout.
 */
static void CalculateBeaconRxWindowConfig( RxConfigParams_t* rxConfig, uint16_t currentSymbolTimeout )
{
 8016208:	b590      	push	{r4, r7, lr}
 801620a:	b089      	sub	sp, #36	; 0x24
 801620c:	af02      	add	r7, sp, #8
 801620e:	6078      	str	r0, [r7, #4]
 8016210:	460b      	mov	r3, r1
 8016212:	807b      	strh	r3, [r7, #2]
    PhyParam_t phyParam;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint32_t maxRxError = 0;
#endif /* LORAMAC_VERSION */

    rxConfig->WindowTimeout = currentSymbolTimeout;
 8016214:	887a      	ldrh	r2, [r7, #2]
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	609a      	str	r2, [r3, #8]
    rxConfig->WindowOffset = 0;
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	2200      	movs	r2, #0
 801621e:	60da      	str	r2, [r3, #12]

    if( ( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 8016220:	4b19      	ldr	r3, [pc, #100]	; (8016288 <CalculateBeaconRxWindowConfig+0x80>)
 8016222:	7b1b      	ldrb	r3, [r3, #12]
 8016224:	f003 0302 	and.w	r3, r3, #2
 8016228:	b2db      	uxtb	r3, r3
 801622a:	2b00      	cmp	r3, #0
 801622c:	d106      	bne.n	801623c <CalculateBeaconRxWindowConfig+0x34>
 801622e:	4b16      	ldr	r3, [pc, #88]	; (8016288 <CalculateBeaconRxWindowConfig+0x80>)
 8016230:	7b1b      	ldrb	r3, [r3, #12]
 8016232:	f003 0310 	and.w	r3, r3, #16
 8016236:	b2db      	uxtb	r3, r3
 8016238:	2b00      	cmp	r3, #0
 801623a:	d020      	beq.n	801627e <CalculateBeaconRxWindowConfig+0x76>
    {
        // Apply the symbol timeout only if we have acquired the beacon
        // Otherwise, take the window enlargement into account
        // Read beacon datarate
        getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 801623c:	2332      	movs	r3, #50	; 0x32
 801623e:	743b      	strb	r3, [r7, #16]
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8016240:	4b11      	ldr	r3, [pc, #68]	; (8016288 <CalculateBeaconRxWindowConfig+0x80>)
 8016242:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016246:	781b      	ldrb	r3, [r3, #0]
 8016248:	f107 0210 	add.w	r2, r7, #16
 801624c:	4611      	mov	r1, r2
 801624e:	4618      	mov	r0, r3
 8016250:	f003 fbf4 	bl	8019a3c <RegionGetPhyParam>
 8016254:	4603      	mov	r3, r0
 8016256:	60fb      	str	r3, [r7, #12]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        // Calculate downlink symbols
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8016258:	4b0b      	ldr	r3, [pc, #44]	; (8016288 <CalculateBeaconRxWindowConfig+0x80>)
 801625a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801625e:	7818      	ldrb	r0, [r3, #0]
                                        ( int8_t )phyParam.Value, // datarate
 8016260:	68fb      	ldr	r3, [r7, #12]
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8016262:	b259      	sxtb	r1, r3
                                        Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 8016264:	4b08      	ldr	r3, [pc, #32]	; (8016288 <CalculateBeaconRxWindowConfig+0x80>)
 8016266:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 801626a:	791a      	ldrb	r2, [r3, #4]
                                        Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError,
 801626c:	4b06      	ldr	r3, [pc, #24]	; (8016288 <CalculateBeaconRxWindowConfig+0x80>)
 801626e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8016272:	681c      	ldr	r4, [r3, #0]
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	9300      	str	r3, [sp, #0]
 8016278:	4623      	mov	r3, r4
 801627a:	f003 fc56 	bl	8019b2a <RegionComputeRxWindowParameters>
                                        Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
                                        maxRxError,
                                        rxConfig );
    }
#endif /* LORAMAC_VERSION */
}
 801627e:	bf00      	nop
 8016280:	371c      	adds	r7, #28
 8016282:	46bd      	mov	sp, r7
 8016284:	bd90      	pop	{r4, r7, pc}
 8016286:	bf00      	nop
 8016288:	20002194 	.word	0x20002194

0801628c <RxBeaconSetup>:
 * \param [in] activateDefaultChannel Set to true, if the function shall setup the default channel
 *
 * \param [in] symbolTimeout Symbol timeout
 */
static void RxBeaconSetup( TimerTime_t rxTime, bool activateDefaultChannel, uint16_t symbolTimeout )
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b086      	sub	sp, #24
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
 8016294:	460b      	mov	r3, r1
 8016296:	70fb      	strb	r3, [r7, #3]
 8016298:	4613      	mov	r3, r2
 801629a:	803b      	strh	r3, [r7, #0]
    RxBeaconSetup_t rxBeaconSetup;
    uint32_t frequency = 0;
 801629c:	2300      	movs	r3, #0
 801629e:	617b      	str	r3, [r7, #20]

    if( activateDefaultChannel == true )
 80162a0:	78fb      	ldrb	r3, [r7, #3]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d005      	beq.n	80162b2 <RxBeaconSetup+0x26>
    {
        // This is the default frequency in case we don't know when the next
        // beacon will be transmitted. We select channel 0 as default.
        frequency = CalcDownlinkFrequency( 0, true );
 80162a6:	2101      	movs	r1, #1
 80162a8:	2000      	movs	r0, #0
 80162aa:	f7ff ff2d 	bl	8016108 <CalcDownlinkFrequency>
 80162ae:	6178      	str	r0, [r7, #20]
 80162b0:	e00a      	b.n	80162c8 <RxBeaconSetup+0x3c>
    }
    else
    {
        // This is the frequency according to the channel plan
        frequency = CalcDownlinkChannelAndFrequency( 0, Ctx.BeaconCtx.BeaconTime.Seconds + ( CLASSB_BEACON_INTERVAL / 1000 ),
 80162b2:	4b27      	ldr	r3, [pc, #156]	; (8016350 <RxBeaconSetup+0xc4>)
 80162b4:	691b      	ldr	r3, [r3, #16]
 80162b6:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80162ba:	2301      	movs	r3, #1
 80162bc:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 80162c0:	2000      	movs	r0, #0
 80162c2:	f7ff ff45 	bl	8016150 <CalcDownlinkChannelAndFrequency>
 80162c6:	6178      	str	r0, [r7, #20]
                                                     CLASSB_BEACON_INTERVAL, true );
    }

    if( ClassBNvm->BeaconCtx.Ctrl.CustomFreq == 1 )
 80162c8:	4b22      	ldr	r3, [pc, #136]	; (8016354 <RxBeaconSetup+0xc8>)
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	7b1b      	ldrb	r3, [r3, #12]
 80162ce:	f003 0301 	and.w	r3, r3, #1
 80162d2:	b2db      	uxtb	r3, r3
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d003      	beq.n	80162e0 <RxBeaconSetup+0x54>
    {
        // Set the frequency from the BeaconFreqReq
        frequency = ClassBNvm->BeaconCtx.Frequency;
 80162d8:	4b1e      	ldr	r3, [pc, #120]	; (8016354 <RxBeaconSetup+0xc8>)
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	691b      	ldr	r3, [r3, #16]
 80162de:	617b      	str	r3, [r7, #20]
    }

    if( Ctx.BeaconCtx.Ctrl.BeaconChannelSet == 1 )
 80162e0:	4b1b      	ldr	r3, [pc, #108]	; (8016350 <RxBeaconSetup+0xc4>)
 80162e2:	7b1b      	ldrb	r3, [r3, #12]
 80162e4:	f003 0308 	and.w	r3, r3, #8
 80162e8:	b2db      	uxtb	r3, r3
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d00c      	beq.n	8016308 <RxBeaconSetup+0x7c>
    {
        // Set the frequency which was provided by BeaconTimingAns MAC command
        Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 0;
 80162ee:	4a18      	ldr	r2, [pc, #96]	; (8016350 <RxBeaconSetup+0xc4>)
 80162f0:	7b13      	ldrb	r3, [r2, #12]
 80162f2:	f36f 03c3 	bfc	r3, #3, #1
 80162f6:	7313      	strb	r3, [r2, #12]
        frequency = CalcDownlinkFrequency( Ctx.BeaconCtx.BeaconTimingChannel, true );
 80162f8:	4b15      	ldr	r3, [pc, #84]	; (8016350 <RxBeaconSetup+0xc4>)
 80162fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80162fe:	2101      	movs	r1, #1
 8016300:	4618      	mov	r0, r3
 8016302:	f7ff ff01 	bl	8016108 <CalcDownlinkFrequency>
 8016306:	6178      	str	r0, [r7, #20]
    }

    rxBeaconSetup.SymbolTimeout = symbolTimeout;
 8016308:	883b      	ldrh	r3, [r7, #0]
 801630a:	813b      	strh	r3, [r7, #8]
    rxBeaconSetup.RxTime = rxTime;
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	60fb      	str	r3, [r7, #12]
    rxBeaconSetup.Frequency = frequency;
 8016310:	697b      	ldr	r3, [r7, #20]
 8016312:	613b      	str	r3, [r7, #16]

    RegionRxBeaconSetup( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &rxBeaconSetup, &Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 8016314:	4b0e      	ldr	r3, [pc, #56]	; (8016350 <RxBeaconSetup+0xc4>)
 8016316:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801631a:	7818      	ldrb	r0, [r3, #0]
 801631c:	4b0c      	ldr	r3, [pc, #48]	; (8016350 <RxBeaconSetup+0xc4>)
 801631e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016322:	1d1a      	adds	r2, r3, #4
 8016324:	f107 0308 	add.w	r3, r7, #8
 8016328:	4619      	mov	r1, r3
 801632a:	f003 fd0f 	bl	8019d4c <RegionRxBeaconSetup>

    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Frequency = frequency;
 801632e:	4b08      	ldr	r3, [pc, #32]	; (8016350 <RxBeaconSetup+0xc4>)
 8016330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016334:	697a      	ldr	r2, [r7, #20]
 8016336:	611a      	str	r2, [r3, #16]
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Datarate = Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate;
 8016338:	4b05      	ldr	r3, [pc, #20]	; (8016350 <RxBeaconSetup+0xc4>)
 801633a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801633e:	4b04      	ldr	r3, [pc, #16]	; (8016350 <RxBeaconSetup+0xc4>)
 8016340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016344:	7912      	ldrb	r2, [r2, #4]
 8016346:	751a      	strb	r2, [r3, #20]
}
 8016348:	bf00      	nop
 801634a:	3718      	adds	r7, #24
 801634c:	46bd      	mov	sp, r7
 801634e:	bd80      	pop	{r7, pc}
 8016350:	20002194 	.word	0x20002194
 8016354:	20002248 	.word	0x20002248

08016358 <CalcNextSlotTime>:
 * \param [out] timeOffset Time offset of the next slot, based on current time
 *
 * \retval [true: ping slot found, false: no ping slot found]
 */
static bool CalcNextSlotTime( uint16_t slotOffset, uint16_t pingPeriod, uint16_t pingNb, TimerTime_t* timeOffset )
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b088      	sub	sp, #32
 801635c:	af00      	add	r7, sp, #0
 801635e:	607b      	str	r3, [r7, #4]
 8016360:	4603      	mov	r3, r0
 8016362:	81fb      	strh	r3, [r7, #14]
 8016364:	460b      	mov	r3, r1
 8016366:	81bb      	strh	r3, [r7, #12]
 8016368:	4613      	mov	r3, r2
 801636a:	817b      	strh	r3, [r7, #10]
    uint8_t currentPingSlot = 0;
 801636c:	2300      	movs	r3, #0
 801636e:	77fb      	strb	r3, [r7, #31]
    TimerTime_t slotTime = 0;
 8016370:	2300      	movs	r3, #0
 8016372:	61bb      	str	r3, [r7, #24]
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8016374:	f00a f972 	bl	802065c <UTIL_TIMER_GetCurrentTime>
 8016378:	6178      	str	r0, [r7, #20]

    // Calculate the point in time of the last beacon even if we missed it
    slotTime = ( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) % CLASSB_BEACON_INTERVAL );
 801637a:	4b38      	ldr	r3, [pc, #224]	; (801645c <CalcNextSlotTime+0x104>)
 801637c:	3318      	adds	r3, #24
 801637e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016382:	f009 fb3d 	bl	801fa00 <SysTimeToMs>
 8016386:	4602      	mov	r2, r0
 8016388:	697b      	ldr	r3, [r7, #20]
 801638a:	1a9b      	subs	r3, r3, r2
 801638c:	4a34      	ldr	r2, [pc, #208]	; (8016460 <CalcNextSlotTime+0x108>)
 801638e:	fba2 1203 	umull	r1, r2, r2, r3
 8016392:	0b52      	lsrs	r2, r2, #13
 8016394:	f44f 31fa 	mov.w	r1, #128000	; 0x1f400
 8016398:	fb01 f202 	mul.w	r2, r1, r2
 801639c:	1a9b      	subs	r3, r3, r2
 801639e:	61bb      	str	r3, [r7, #24]
    slotTime = currentTime - slotTime;
 80163a0:	697a      	ldr	r2, [r7, #20]
 80163a2:	69bb      	ldr	r3, [r7, #24]
 80163a4:	1ad3      	subs	r3, r2, r3
 80163a6:	61bb      	str	r3, [r7, #24]

    // Add the reserved time and the ping offset
    slotTime += CLASSB_BEACON_RESERVED;
 80163a8:	69bb      	ldr	r3, [r7, #24]
 80163aa:	f603 0348 	addw	r3, r3, #2120	; 0x848
 80163ae:	61bb      	str	r3, [r7, #24]
    slotTime += slotOffset * CLASSB_PING_SLOT_WINDOW;
 80163b0:	89fa      	ldrh	r2, [r7, #14]
 80163b2:	4613      	mov	r3, r2
 80163b4:	011b      	lsls	r3, r3, #4
 80163b6:	1a9b      	subs	r3, r3, r2
 80163b8:	005b      	lsls	r3, r3, #1
 80163ba:	461a      	mov	r2, r3
 80163bc:	69bb      	ldr	r3, [r7, #24]
 80163be:	4413      	add	r3, r2
 80163c0:	61bb      	str	r3, [r7, #24]

    if( slotTime < currentTime )
 80163c2:	69ba      	ldr	r2, [r7, #24]
 80163c4:	697b      	ldr	r3, [r7, #20]
 80163c6:	429a      	cmp	r2, r3
 80163c8:	d219      	bcs.n	80163fe <CalcNextSlotTime+0xa6>
    {
        currentPingSlot = ( ( currentTime - slotTime ) /
 80163ca:	697a      	ldr	r2, [r7, #20]
 80163cc:	69bb      	ldr	r3, [r7, #24]
 80163ce:	1ad1      	subs	r1, r2, r3
                          ( pingPeriod * CLASSB_PING_SLOT_WINDOW ) ) + 1;
 80163d0:	89ba      	ldrh	r2, [r7, #12]
 80163d2:	4613      	mov	r3, r2
 80163d4:	011b      	lsls	r3, r3, #4
 80163d6:	1a9b      	subs	r3, r3, r2
 80163d8:	005b      	lsls	r3, r3, #1
        currentPingSlot = ( ( currentTime - slotTime ) /
 80163da:	fbb1 f3f3 	udiv	r3, r1, r3
                          ( pingPeriod * CLASSB_PING_SLOT_WINDOW ) ) + 1;
 80163de:	b2db      	uxtb	r3, r3
        currentPingSlot = ( ( currentTime - slotTime ) /
 80163e0:	3301      	adds	r3, #1
 80163e2:	77fb      	strb	r3, [r7, #31]
        slotTime += ( ( TimerTime_t )( currentPingSlot * pingPeriod ) *
 80163e4:	7ffb      	ldrb	r3, [r7, #31]
 80163e6:	89ba      	ldrh	r2, [r7, #12]
 80163e8:	fb02 f303 	mul.w	r3, r2, r3
 80163ec:	461a      	mov	r2, r3
 80163ee:	4613      	mov	r3, r2
 80163f0:	011b      	lsls	r3, r3, #4
 80163f2:	1a9b      	subs	r3, r3, r2
 80163f4:	005b      	lsls	r3, r3, #1
 80163f6:	461a      	mov	r2, r3
 80163f8:	69bb      	ldr	r3, [r7, #24]
 80163fa:	4413      	add	r3, r2
 80163fc:	61bb      	str	r3, [r7, #24]
                    CLASSB_PING_SLOT_WINDOW );
    }

    if( currentPingSlot < pingNb )
 80163fe:	7ffb      	ldrb	r3, [r7, #31]
 8016400:	b29b      	uxth	r3, r3
 8016402:	897a      	ldrh	r2, [r7, #10]
 8016404:	429a      	cmp	r2, r3
 8016406:	d923      	bls.n	8016450 <CalcNextSlotTime+0xf8>
    {
        if( slotTime <= ( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - CLASSB_BEACON_GUARD - CLASSB_PING_SLOT_WINDOW ) )
 8016408:	4b14      	ldr	r3, [pc, #80]	; (801645c <CalcNextSlotTime+0x104>)
 801640a:	3320      	adds	r3, #32
 801640c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016410:	f009 faf6 	bl	801fa00 <SysTimeToMs>
 8016414:	4603      	mov	r3, r0
 8016416:	f6a3 33d6 	subw	r3, r3, #3030	; 0xbd6
 801641a:	69ba      	ldr	r2, [r7, #24]
 801641c:	429a      	cmp	r2, r3
 801641e:	d817      	bhi.n	8016450 <CalcNextSlotTime+0xf8>
        {
            // Calculate the relative ping slot time
            slotTime -= currentTime;
 8016420:	69ba      	ldr	r2, [r7, #24]
 8016422:	697b      	ldr	r3, [r7, #20]
 8016424:	1ad3      	subs	r3, r2, r3
 8016426:	61bb      	str	r3, [r7, #24]
            slotTime -= Radio.GetWakeupTime( );
 8016428:	4b0e      	ldr	r3, [pc, #56]	; (8016464 <CalcNextSlotTime+0x10c>)
 801642a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801642c:	4798      	blx	r3
 801642e:	4602      	mov	r2, r0
 8016430:	69bb      	ldr	r3, [r7, #24]
 8016432:	1a9b      	subs	r3, r3, r2
 8016434:	61bb      	str	r3, [r7, #24]
            slotTime = TimerTempCompensation( slotTime, Ctx.BeaconCtx.Temperature );
 8016436:	4b09      	ldr	r3, [pc, #36]	; (801645c <CalcNextSlotTime+0x104>)
 8016438:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801643c:	4619      	mov	r1, r3
 801643e:	69b8      	ldr	r0, [r7, #24]
 8016440:	f7ff fd78 	bl	8015f34 <TimerTempCompensation>
 8016444:	61b8      	str	r0, [r7, #24]
            *timeOffset = slotTime;
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	69ba      	ldr	r2, [r7, #24]
 801644a:	601a      	str	r2, [r3, #0]
            return true;
 801644c:	2301      	movs	r3, #1
 801644e:	e000      	b.n	8016452 <CalcNextSlotTime+0xfa>
        }
    }
    return false;
 8016450:	2300      	movs	r3, #0
}
 8016452:	4618      	mov	r0, r3
 8016454:	3720      	adds	r7, #32
 8016456:	46bd      	mov	sp, r7
 8016458:	bd80      	pop	{r7, pc}
 801645a:	bf00      	nop
 801645c:	20002194 	.word	0x20002194
 8016460:	10624dd3 	.word	0x10624dd3
 8016464:	08021d00 	.word	0x08021d00

08016468 <BeaconCrc>:
 * \param [in] length Length of the data
 *
 * \retval CRC
 */
static uint16_t BeaconCrc( uint8_t *buffer, uint16_t length )
{
 8016468:	b480      	push	{r7}
 801646a:	b085      	sub	sp, #20
 801646c:	af00      	add	r7, sp, #0
 801646e:	6078      	str	r0, [r7, #4]
 8016470:	460b      	mov	r3, r1
 8016472:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint16_t crc = 0x0000;
 8016474:	2300      	movs	r3, #0
 8016476:	81fb      	strh	r3, [r7, #14]

    if( buffer == NULL )
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d101      	bne.n	8016482 <BeaconCrc+0x1a>
    {
        return 0;
 801647e:	2300      	movs	r3, #0
 8016480:	e030      	b.n	80164e4 <BeaconCrc+0x7c>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016482:	2300      	movs	r3, #0
 8016484:	81bb      	strh	r3, [r7, #12]
 8016486:	e028      	b.n	80164da <BeaconCrc+0x72>
    {
        crc ^= ( uint16_t ) buffer[i] << 8;
 8016488:	89bb      	ldrh	r3, [r7, #12]
 801648a:	687a      	ldr	r2, [r7, #4]
 801648c:	4413      	add	r3, r2
 801648e:	781b      	ldrb	r3, [r3, #0]
 8016490:	021b      	lsls	r3, r3, #8
 8016492:	b21a      	sxth	r2, r3
 8016494:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016498:	4053      	eors	r3, r2
 801649a:	b21b      	sxth	r3, r3
 801649c:	81fb      	strh	r3, [r7, #14]
        for( uint16_t j = 0; j < 8; ++j )
 801649e:	2300      	movs	r3, #0
 80164a0:	817b      	strh	r3, [r7, #10]
 80164a2:	e014      	b.n	80164ce <BeaconCrc+0x66>
        {
            crc = ( crc & 0x8000 ) ? ( crc << 1 ) ^ polynom : ( crc << 1 );
 80164a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	da09      	bge.n	80164c0 <BeaconCrc+0x58>
 80164ac:	89fb      	ldrh	r3, [r7, #14]
 80164ae:	005b      	lsls	r3, r3, #1
 80164b0:	b21a      	sxth	r2, r3
 80164b2:	f241 0321 	movw	r3, #4129	; 0x1021
 80164b6:	b21b      	sxth	r3, r3
 80164b8:	4053      	eors	r3, r2
 80164ba:	b21b      	sxth	r3, r3
 80164bc:	b29b      	uxth	r3, r3
 80164be:	e002      	b.n	80164c6 <BeaconCrc+0x5e>
 80164c0:	89fb      	ldrh	r3, [r7, #14]
 80164c2:	005b      	lsls	r3, r3, #1
 80164c4:	b29b      	uxth	r3, r3
 80164c6:	81fb      	strh	r3, [r7, #14]
        for( uint16_t j = 0; j < 8; ++j )
 80164c8:	897b      	ldrh	r3, [r7, #10]
 80164ca:	3301      	adds	r3, #1
 80164cc:	817b      	strh	r3, [r7, #10]
 80164ce:	897b      	ldrh	r3, [r7, #10]
 80164d0:	2b07      	cmp	r3, #7
 80164d2:	d9e7      	bls.n	80164a4 <BeaconCrc+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 80164d4:	89bb      	ldrh	r3, [r7, #12]
 80164d6:	3301      	adds	r3, #1
 80164d8:	81bb      	strh	r3, [r7, #12]
 80164da:	89ba      	ldrh	r2, [r7, #12]
 80164dc:	887b      	ldrh	r3, [r7, #2]
 80164de:	429a      	cmp	r2, r3
 80164e0:	d3d2      	bcc.n	8016488 <BeaconCrc+0x20>
        }
    }

    return crc;
 80164e2:	89fb      	ldrh	r3, [r7, #14]
}
 80164e4:	4618      	mov	r0, r3
 80164e6:	3714      	adds	r7, #20
 80164e8:	46bd      	mov	sp, r7
 80164ea:	bc80      	pop	{r7}
 80164ec:	4770      	bx	lr

080164ee <GetTemperature>:

static void GetTemperature( LoRaMacClassBCallback_t *callbacks, BeaconContext_t *beaconCtx )
{
 80164ee:	b580      	push	{r7, lr}
 80164f0:	b082      	sub	sp, #8
 80164f2:	af00      	add	r7, sp, #0
 80164f4:	6078      	str	r0, [r7, #4]
 80164f6:	6039      	str	r1, [r7, #0]
    // Measure temperature, if available
    if( ( callbacks != NULL ) && ( callbacks->GetTemperatureLevel != NULL ) )
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d00a      	beq.n	8016514 <GetTemperature+0x26>
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d006      	beq.n	8016514 <GetTemperature+0x26>
    {
        beaconCtx->Temperature = callbacks->GetTemperatureLevel( );
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	4798      	blx	r3
 801650c:	4603      	mov	r3, r0
 801650e:	461a      	mov	r2, r3
 8016510:	683b      	ldr	r3, [r7, #0]
 8016512:	805a      	strh	r2, [r3, #2]
    }
}
 8016514:	bf00      	nop
 8016516:	3708      	adds	r7, #8
 8016518:	46bd      	mov	sp, r7
 801651a:	bd80      	pop	{r7, pc}

0801651c <InitClassB>:

static void InitClassB( void )
{
 801651c:	b580      	push	{r7, lr}
 801651e:	b084      	sub	sp, #16
 8016520:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Init events
    LoRaMacClassBEvents.Value = 0;
 8016522:	4b1f      	ldr	r3, [pc, #124]	; (80165a0 <InitClassB+0x84>)
 8016524:	2200      	movs	r2, #0
 8016526:	601a      	str	r2, [r3, #0]

    // Init variables to default
    memset1( ( uint8_t* ) ClassBNvm, 0, sizeof( LoRaMacClassBNvmData_t ) );
 8016528:	4b1e      	ldr	r3, [pc, #120]	; (80165a4 <InitClassB+0x88>)
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	2218      	movs	r2, #24
 801652e:	2100      	movs	r1, #0
 8016530:	4618      	mov	r0, r3
 8016532:	f005 fe69 	bl	801c208 <memset1>
    memset1( ( uint8_t* ) &Ctx.PingSlotCtx, 0, sizeof( PingSlotContext_t ) );
 8016536:	220c      	movs	r2, #12
 8016538:	2100      	movs	r1, #0
 801653a:	481b      	ldr	r0, [pc, #108]	; (80165a8 <InitClassB+0x8c>)
 801653c:	f005 fe64 	bl	801c208 <memset1>
    memset1( ( uint8_t* ) &Ctx.BeaconCtx, 0, sizeof( BeaconContext_t ) );
 8016540:	2234      	movs	r2, #52	; 0x34
 8016542:	2100      	movs	r1, #0
 8016544:	4819      	ldr	r0, [pc, #100]	; (80165ac <InitClassB+0x90>)
 8016546:	f005 fe5f 	bl	801c208 <memset1>

    // Setup default temperature
    Ctx.BeaconCtx.Temperature = 25.0;
 801654a:	4b17      	ldr	r3, [pc, #92]	; (80165a8 <InitClassB+0x8c>)
 801654c:	2219      	movs	r2, #25
 801654e:	81da      	strh	r2, [r3, #14]
    GetTemperature( &Ctx.LoRaMacClassBCallbacks, &Ctx.BeaconCtx );
 8016550:	4916      	ldr	r1, [pc, #88]	; (80165ac <InitClassB+0x90>)
 8016552:	4817      	ldr	r0, [pc, #92]	; (80165b0 <InitClassB+0x94>)
 8016554:	f7ff ffcb 	bl	80164ee <GetTemperature>

    // Setup default ping slot datarate
    getPhy.Attribute = PHY_PING_SLOT_CHANNEL_DR;
 8016558:	2336      	movs	r3, #54	; 0x36
 801655a:	723b      	strb	r3, [r7, #8]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 801655c:	4b12      	ldr	r3, [pc, #72]	; (80165a8 <InitClassB+0x8c>)
 801655e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016562:	781b      	ldrb	r3, [r3, #0]
 8016564:	f107 0208 	add.w	r2, r7, #8
 8016568:	4611      	mov	r1, r2
 801656a:	4618      	mov	r0, r3
 801656c:	f003 fa66 	bl	8019a3c <RegionGetPhyParam>
 8016570:	4603      	mov	r3, r0
 8016572:	607b      	str	r3, [r7, #4]
    ClassBNvm->PingSlotCtx.Datarate = ( int8_t )( phyParam.Value );
 8016574:	687a      	ldr	r2, [r7, #4]
 8016576:	4b0b      	ldr	r3, [pc, #44]	; (80165a4 <InitClassB+0x88>)
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	b252      	sxtb	r2, r2
 801657c:	721a      	strb	r2, [r3, #8]
    // Setup default FPending bit
    ClassBNvm->PingSlotCtx.FPendingSet = 0;
#endif /* LORAMAC_VERSION */

    // Setup default states
    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 801657e:	4b0a      	ldr	r3, [pc, #40]	; (80165a8 <InitClassB+0x8c>)
 8016580:	2200      	movs	r2, #0
 8016582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8016586:	4b08      	ldr	r3, [pc, #32]	; (80165a8 <InitClassB+0x8c>)
 8016588:	2200      	movs	r2, #0
 801658a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 801658e:	4b06      	ldr	r3, [pc, #24]	; (80165a8 <InitClassB+0x8c>)
 8016590:	2200      	movs	r2, #0
 8016592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 8016596:	bf00      	nop
 8016598:	3710      	adds	r7, #16
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}
 801659e:	bf00      	nop
 80165a0:	20002190 	.word	0x20002190
 80165a4:	20002248 	.word	0x20002248
 80165a8:	20002194 	.word	0x20002194
 80165ac:	200021a0 	.word	0x200021a0
 80165b0:	20002220 	.word	0x20002220

080165b4 <InitClassBDefaults>:

static void InitClassBDefaults( void )
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b086      	sub	sp, #24
 80165b8:	af00      	add	r7, sp, #0
    // This function shall reset the Class B settings to default,
    // but should keep important configurations
    LoRaMacClassBBeaconNvmData_t beaconCtx = ClassBNvm->BeaconCtx;
 80165ba:	4b1b      	ldr	r3, [pc, #108]	; (8016628 <InitClassBDefaults+0x74>)
 80165bc:	681a      	ldr	r2, [r3, #0]
 80165be:	f107 0310 	add.w	r3, r7, #16
 80165c2:	320c      	adds	r2, #12
 80165c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80165c8:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacClassBPingSlotNvmData_t pingSlotCtx = ClassBNvm->PingSlotCtx;
 80165cc:	4b16      	ldr	r3, [pc, #88]	; (8016628 <InitClassBDefaults+0x74>)
 80165ce:	681a      	ldr	r2, [r3, #0]
 80165d0:	1d3b      	adds	r3, r7, #4
 80165d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80165d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    InitClassB( );
 80165d8:	f7ff ffa0 	bl	801651c <InitClassB>

    // Parameters from BeaconFreqReq
    ClassBNvm->BeaconCtx.Frequency = beaconCtx.Frequency;
 80165dc:	4b12      	ldr	r3, [pc, #72]	; (8016628 <InitClassBDefaults+0x74>)
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	697a      	ldr	r2, [r7, #20]
 80165e2:	611a      	str	r2, [r3, #16]
    ClassBNvm->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 80165e4:	4b10      	ldr	r3, [pc, #64]	; (8016628 <InitClassBDefaults+0x74>)
 80165e6:	681a      	ldr	r2, [r3, #0]
 80165e8:	7c3b      	ldrb	r3, [r7, #16]
 80165ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80165ee:	b2d9      	uxtb	r1, r3
 80165f0:	7b13      	ldrb	r3, [r2, #12]
 80165f2:	f361 0300 	bfi	r3, r1, #0, #1
 80165f6:	7313      	strb	r3, [r2, #12]

    // Parameters from PingSlotChannelReq
    ClassBNvm->PingSlotCtx.Ctrl.CustomFreq = pingSlotCtx.Ctrl.CustomFreq;
 80165f8:	4b0b      	ldr	r3, [pc, #44]	; (8016628 <InitClassBDefaults+0x74>)
 80165fa:	681a      	ldr	r2, [r3, #0]
 80165fc:	793b      	ldrb	r3, [r7, #4]
 80165fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8016602:	b2d9      	uxtb	r1, r3
 8016604:	7813      	ldrb	r3, [r2, #0]
 8016606:	f361 0341 	bfi	r3, r1, #1, #1
 801660a:	7013      	strb	r3, [r2, #0]
    ClassBNvm->PingSlotCtx.Frequency = pingSlotCtx.Frequency;
 801660c:	4b06      	ldr	r3, [pc, #24]	; (8016628 <InitClassBDefaults+0x74>)
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	68ba      	ldr	r2, [r7, #8]
 8016612:	605a      	str	r2, [r3, #4]
    ClassBNvm->PingSlotCtx.Datarate = pingSlotCtx.Datarate;
 8016614:	4b04      	ldr	r3, [pc, #16]	; (8016628 <InitClassBDefaults+0x74>)
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	f997 200c 	ldrsb.w	r2, [r7, #12]
 801661c:	721a      	strb	r2, [r3, #8]
}
 801661e:	bf00      	nop
 8016620:	3718      	adds	r7, #24
 8016622:	46bd      	mov	sp, r7
 8016624:	bd80      	pop	{r7, pc}
 8016626:	bf00      	nop
 8016628:	20002248 	.word	0x20002248

0801662c <EnlargeWindowTimeout>:

static void EnlargeWindowTimeout( void )
{
 801662c:	b480      	push	{r7}
 801662e:	af00      	add	r7, sp, #0
    // Update beacon movement
    Ctx.BeaconCtx.BeaconWindowMovement *= CLASSB_WINDOW_MOVE_EXPANSION_FACTOR;
 8016630:	4b15      	ldr	r3, [pc, #84]	; (8016688 <EnlargeWindowTimeout+0x5c>)
 8016632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016634:	005b      	lsls	r3, r3, #1
 8016636:	4a14      	ldr	r2, [pc, #80]	; (8016688 <EnlargeWindowTimeout+0x5c>)
 8016638:	6313      	str	r3, [r2, #48]	; 0x30
    if( Ctx.BeaconCtx.BeaconWindowMovement > CLASSB_WINDOW_MOVE_EXPANSION_MAX )
 801663a:	4b13      	ldr	r3, [pc, #76]	; (8016688 <EnlargeWindowTimeout+0x5c>)
 801663c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801663e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016642:	d903      	bls.n	801664c <EnlargeWindowTimeout+0x20>
    {
        Ctx.BeaconCtx.BeaconWindowMovement = CLASSB_WINDOW_MOVE_EXPANSION_MAX;
 8016644:	4b10      	ldr	r3, [pc, #64]	; (8016688 <EnlargeWindowTimeout+0x5c>)
 8016646:	f44f 7280 	mov.w	r2, #256	; 0x100
 801664a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    // Update symbol timeout
    Ctx.BeaconCtx.SymbolTimeout *= CLASSB_BEACON_SYMBOL_TO_EXPANSION_FACTOR;
 801664c:	4b0e      	ldr	r3, [pc, #56]	; (8016688 <EnlargeWindowTimeout+0x5c>)
 801664e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8016650:	005b      	lsls	r3, r3, #1
 8016652:	b29a      	uxth	r2, r3
 8016654:	4b0c      	ldr	r3, [pc, #48]	; (8016688 <EnlargeWindowTimeout+0x5c>)
 8016656:	859a      	strh	r2, [r3, #44]	; 0x2c
    if( Ctx.BeaconCtx.SymbolTimeout > CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX )
 8016658:	4b0b      	ldr	r3, [pc, #44]	; (8016688 <EnlargeWindowTimeout+0x5c>)
 801665a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801665c:	2bff      	cmp	r3, #255	; 0xff
 801665e:	d902      	bls.n	8016666 <EnlargeWindowTimeout+0x3a>
    {
        Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX;
 8016660:	4b09      	ldr	r3, [pc, #36]	; (8016688 <EnlargeWindowTimeout+0x5c>)
 8016662:	22ff      	movs	r2, #255	; 0xff
 8016664:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
    Ctx.PingSlotCtx.SymbolTimeout *= CLASSB_BEACON_SYMBOL_TO_EXPANSION_FACTOR;
 8016666:	4b08      	ldr	r3, [pc, #32]	; (8016688 <EnlargeWindowTimeout+0x5c>)
 8016668:	88db      	ldrh	r3, [r3, #6]
 801666a:	005b      	lsls	r3, r3, #1
 801666c:	b29a      	uxth	r2, r3
 801666e:	4b06      	ldr	r3, [pc, #24]	; (8016688 <EnlargeWindowTimeout+0x5c>)
 8016670:	80da      	strh	r2, [r3, #6]
    if( Ctx.PingSlotCtx.SymbolTimeout > CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX )
 8016672:	4b05      	ldr	r3, [pc, #20]	; (8016688 <EnlargeWindowTimeout+0x5c>)
 8016674:	88db      	ldrh	r3, [r3, #6]
 8016676:	2b1e      	cmp	r3, #30
 8016678:	d902      	bls.n	8016680 <EnlargeWindowTimeout+0x54>
    {
        Ctx.PingSlotCtx.SymbolTimeout = CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX;
 801667a:	4b03      	ldr	r3, [pc, #12]	; (8016688 <EnlargeWindowTimeout+0x5c>)
 801667c:	221e      	movs	r2, #30
 801667e:	80da      	strh	r2, [r3, #6]
    }
}
 8016680:	bf00      	nop
 8016682:	46bd      	mov	sp, r7
 8016684:	bc80      	pop	{r7}
 8016686:	4770      	bx	lr
 8016688:	20002194 	.word	0x20002194

0801668c <ResetWindowTimeout>:

static void ResetWindowTimeout( void )
{
 801668c:	b480      	push	{r7}
 801668e:	af00      	add	r7, sp, #0
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 8016690:	4b06      	ldr	r3, [pc, #24]	; (80166ac <ResetWindowTimeout+0x20>)
 8016692:	2208      	movs	r2, #8
 8016694:	859a      	strh	r2, [r3, #44]	; 0x2c
    Ctx.PingSlotCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 8016696:	4b05      	ldr	r3, [pc, #20]	; (80166ac <ResetWindowTimeout+0x20>)
 8016698:	2208      	movs	r2, #8
 801669a:	80da      	strh	r2, [r3, #6]
    Ctx.BeaconCtx.BeaconWindowMovement  = CLASSB_WINDOW_MOVE_DEFAULT;
 801669c:	4b03      	ldr	r3, [pc, #12]	; (80166ac <ResetWindowTimeout+0x20>)
 801669e:	2202      	movs	r2, #2
 80166a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80166a2:	bf00      	nop
 80166a4:	46bd      	mov	sp, r7
 80166a6:	bc80      	pop	{r7}
 80166a8:	4770      	bx	lr
 80166aa:	bf00      	nop
 80166ac:	20002194 	.word	0x20002194

080166b0 <CalcDelayForNextBeacon>:

static TimerTime_t CalcDelayForNextBeacon( TimerTime_t currentTime, TimerTime_t lastBeaconRx )
{
 80166b0:	b480      	push	{r7}
 80166b2:	b085      	sub	sp, #20
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
 80166b8:	6039      	str	r1, [r7, #0]
    TimerTime_t nextBeaconRxTime = 0;
 80166ba:	2300      	movs	r3, #0
 80166bc:	60fb      	str	r3, [r7, #12]

    // Calculate the point in time of the next beacon
    nextBeaconRxTime = ( ( currentTime - lastBeaconRx ) % CLASSB_BEACON_INTERVAL );
 80166be:	687a      	ldr	r2, [r7, #4]
 80166c0:	683b      	ldr	r3, [r7, #0]
 80166c2:	1ad3      	subs	r3, r2, r3
 80166c4:	4a08      	ldr	r2, [pc, #32]	; (80166e8 <CalcDelayForNextBeacon+0x38>)
 80166c6:	fba2 1203 	umull	r1, r2, r2, r3
 80166ca:	0b52      	lsrs	r2, r2, #13
 80166cc:	f44f 31fa 	mov.w	r1, #128000	; 0x1f400
 80166d0:	fb01 f202 	mul.w	r2, r1, r2
 80166d4:	1a9b      	subs	r3, r3, r2
 80166d6:	60fb      	str	r3, [r7, #12]
    return ( CLASSB_BEACON_INTERVAL - nextBeaconRxTime );
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	f5c3 33fa 	rsb	r3, r3, #128000	; 0x1f400
}
 80166de:	4618      	mov	r0, r3
 80166e0:	3714      	adds	r7, #20
 80166e2:	46bd      	mov	sp, r7
 80166e4:	bc80      	pop	{r7}
 80166e6:	4770      	bx	lr
 80166e8:	10624dd3 	.word	0x10624dd3

080166ec <IndicateBeaconStatus>:

static void IndicateBeaconStatus( LoRaMacEventInfoStatus_t status )
{
 80166ec:	b480      	push	{r7}
 80166ee:	b083      	sub	sp, #12
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	4603      	mov	r3, r0
 80166f4:	71fb      	strb	r3, [r7, #7]
    if( Ctx.BeaconCtx.Ctrl.ResumeBeaconing == 0 )
 80166f6:	4b14      	ldr	r3, [pc, #80]	; (8016748 <IndicateBeaconStatus+0x5c>)
 80166f8:	7b1b      	ldrb	r3, [r3, #12]
 80166fa:	f003 0320 	and.w	r3, r3, #32
 80166fe:	b2db      	uxtb	r3, r3
 8016700:	2b00      	cmp	r3, #0
 8016702:	d117      	bne.n	8016734 <IndicateBeaconStatus+0x48>
    {
        Ctx.LoRaMacClassBParams.MlmeIndication->MlmeIndication = MLME_BEACON;
 8016704:	4b10      	ldr	r3, [pc, #64]	; (8016748 <IndicateBeaconStatus+0x5c>)
 8016706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801670a:	220b      	movs	r2, #11
 801670c:	701a      	strb	r2, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeIndication->Status = status;
 801670e:	4b0e      	ldr	r3, [pc, #56]	; (8016748 <IndicateBeaconStatus+0x5c>)
 8016710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016714:	79fa      	ldrb	r2, [r7, #7]
 8016716:	705a      	strb	r2, [r3, #1]
        Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeInd = 1;
 8016718:	4b0b      	ldr	r3, [pc, #44]	; (8016748 <IndicateBeaconStatus+0x5c>)
 801671a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801671e:	7813      	ldrb	r3, [r2, #0]
 8016720:	f043 0308 	orr.w	r3, r3, #8
 8016724:	7013      	strb	r3, [r2, #0]

        Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MacDone = 1;
 8016726:	4b08      	ldr	r3, [pc, #32]	; (8016748 <IndicateBeaconStatus+0x5c>)
 8016728:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801672c:	7813      	ldrb	r3, [r2, #0]
 801672e:	f043 0320 	orr.w	r3, r3, #32
 8016732:	7013      	strb	r3, [r2, #0]
    }
    Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 0;
 8016734:	4a04      	ldr	r2, [pc, #16]	; (8016748 <IndicateBeaconStatus+0x5c>)
 8016736:	7b13      	ldrb	r3, [r2, #12]
 8016738:	f36f 1345 	bfc	r3, #5, #1
 801673c:	7313      	strb	r3, [r2, #12]
}
 801673e:	bf00      	nop
 8016740:	370c      	adds	r7, #12
 8016742:	46bd      	mov	sp, r7
 8016744:	bc80      	pop	{r7}
 8016746:	4770      	bx	lr
 8016748:	20002194 	.word	0x20002194

0801674c <ApplyGuardTime>:

static TimerTime_t ApplyGuardTime( TimerTime_t beaconEventTime )
{
 801674c:	b480      	push	{r7}
 801674e:	b085      	sub	sp, #20
 8016750:	af00      	add	r7, sp, #0
 8016752:	6078      	str	r0, [r7, #4]
    TimerTime_t timeGuard = beaconEventTime;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	60fb      	str	r3, [r7, #12]

    if( timeGuard > CLASSB_BEACON_GUARD )
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801675e:	4293      	cmp	r3, r2
 8016760:	d903      	bls.n	801676a <ApplyGuardTime+0x1e>
    {
        timeGuard -= CLASSB_BEACON_GUARD;
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8016768:	60fb      	str	r3, [r7, #12]
    }
    return timeGuard;
 801676a:	68fb      	ldr	r3, [r7, #12]
}
 801676c:	4618      	mov	r0, r3
 801676e:	3714      	adds	r7, #20
 8016770:	46bd      	mov	sp, r7
 8016772:	bc80      	pop	{r7}
 8016774:	4770      	bx	lr
	...

08016778 <UpdateBeaconState>:

static TimerTime_t UpdateBeaconState( LoRaMacEventInfoStatus_t status,
                                      TimerTime_t windowMovement, TimerTime_t currentTime )

{
 8016778:	b590      	push	{r4, r7, lr}
 801677a:	b089      	sub	sp, #36	; 0x24
 801677c:	af00      	add	r7, sp, #0
 801677e:	4603      	mov	r3, r0
 8016780:	6139      	str	r1, [r7, #16]
 8016782:	60fa      	str	r2, [r7, #12]
 8016784:	75fb      	strb	r3, [r7, #23]
    TimerTime_t beaconEventTime = 0;
 8016786:	2300      	movs	r3, #0
 8016788:	61fb      	str	r3, [r7, #28]

    // Calculate the next beacon RX time
    beaconEventTime = CalcDelayForNextBeacon( currentTime, SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) );
 801678a:	4b1f      	ldr	r3, [pc, #124]	; (8016808 <UpdateBeaconState+0x90>)
 801678c:	3318      	adds	r3, #24
 801678e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016792:	f009 f935 	bl	801fa00 <SysTimeToMs>
 8016796:	4603      	mov	r3, r0
 8016798:	4619      	mov	r1, r3
 801679a:	68f8      	ldr	r0, [r7, #12]
 801679c:	f7ff ff88 	bl	80166b0 <CalcDelayForNextBeacon>
 80167a0:	61f8      	str	r0, [r7, #28]
    Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( currentTime + beaconEventTime );
 80167a2:	68fa      	ldr	r2, [r7, #12]
 80167a4:	69fb      	ldr	r3, [r7, #28]
 80167a6:	441a      	add	r2, r3
 80167a8:	4c17      	ldr	r4, [pc, #92]	; (8016808 <UpdateBeaconState+0x90>)
 80167aa:	463b      	mov	r3, r7
 80167ac:	4611      	mov	r1, r2
 80167ae:	4618      	mov	r0, r3
 80167b0:	f009 f94e 	bl	801fa50 <SysTimeFromMs>
 80167b4:	f104 0320 	add.w	r3, r4, #32
 80167b8:	463a      	mov	r2, r7
 80167ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80167be:	e883 0003 	stmia.w	r3, {r0, r1}

    // Take temperature compensation into account
    beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 80167c2:	4b11      	ldr	r3, [pc, #68]	; (8016808 <UpdateBeaconState+0x90>)
 80167c4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80167c8:	4619      	mov	r1, r3
 80167ca:	69f8      	ldr	r0, [r7, #28]
 80167cc:	f7ff fbb2 	bl	8015f34 <TimerTempCompensation>
 80167d0:	61f8      	str	r0, [r7, #28]

    // Move the window
    if( beaconEventTime > windowMovement )
 80167d2:	69fa      	ldr	r2, [r7, #28]
 80167d4:	693b      	ldr	r3, [r7, #16]
 80167d6:	429a      	cmp	r2, r3
 80167d8:	d903      	bls.n	80167e2 <UpdateBeaconState+0x6a>
    {
        beaconEventTime -= windowMovement;
 80167da:	69fa      	ldr	r2, [r7, #28]
 80167dc:	693b      	ldr	r3, [r7, #16]
 80167de:	1ad3      	subs	r3, r2, r3
 80167e0:	61fb      	str	r3, [r7, #28]
    }
    Ctx.BeaconCtx.NextBeaconRxAdjusted = currentTime + beaconEventTime;
 80167e2:	68fa      	ldr	r2, [r7, #12]
 80167e4:	69fb      	ldr	r3, [r7, #28]
 80167e6:	4413      	add	r3, r2
 80167e8:	4a07      	ldr	r2, [pc, #28]	; (8016808 <UpdateBeaconState+0x90>)
 80167ea:	6293      	str	r3, [r2, #40]	; 0x28

    // Start the RX slot state machine for ping and multicast slots
    LoRaMacClassBStartRxSlots( );
 80167ec:	f001 fa02 	bl	8017bf4 <LoRaMacClassBStartRxSlots>

    // Setup an MLME_BEACON indication to inform the upper layer
    IndicateBeaconStatus( status );
 80167f0:	7dfb      	ldrb	r3, [r7, #23]
 80167f2:	4618      	mov	r0, r3
 80167f4:	f7ff ff7a 	bl	80166ec <IndicateBeaconStatus>

    // Apply guard time
    return ApplyGuardTime( beaconEventTime );
 80167f8:	69f8      	ldr	r0, [r7, #28]
 80167fa:	f7ff ffa7 	bl	801674c <ApplyGuardTime>
 80167fe:	4603      	mov	r3, r0
}
 8016800:	4618      	mov	r0, r3
 8016802:	3724      	adds	r7, #36	; 0x24
 8016804:	46bd      	mov	sp, r7
 8016806:	bd90      	pop	{r4, r7, pc}
 8016808:	20002194 	.word	0x20002194

0801680c <CalcPingNb>:

static uint8_t CalcPingNb( uint16_t periodicity )
{
 801680c:	b480      	push	{r7}
 801680e:	b083      	sub	sp, #12
 8016810:	af00      	add	r7, sp, #0
 8016812:	4603      	mov	r3, r0
 8016814:	80fb      	strh	r3, [r7, #6]
    return 128 / ( 1 << periodicity );
 8016816:	88fb      	ldrh	r3, [r7, #6]
 8016818:	2280      	movs	r2, #128	; 0x80
 801681a:	fa42 f303 	asr.w	r3, r2, r3
 801681e:	b2db      	uxtb	r3, r3
}
 8016820:	4618      	mov	r0, r3
 8016822:	370c      	adds	r7, #12
 8016824:	46bd      	mov	sp, r7
 8016826:	bc80      	pop	{r7}
 8016828:	4770      	bx	lr

0801682a <CalcPingPeriod>:

static uint16_t CalcPingPeriod( uint8_t pingNb )
{
 801682a:	b480      	push	{r7}
 801682c:	b083      	sub	sp, #12
 801682e:	af00      	add	r7, sp, #0
 8016830:	4603      	mov	r3, r0
 8016832:	71fb      	strb	r3, [r7, #7]
    return CLASSB_BEACON_WINDOW_SLOTS / pingNb;
 8016834:	79fb      	ldrb	r3, [r7, #7]
 8016836:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801683a:	fb92 f3f3 	sdiv	r3, r2, r3
 801683e:	b29b      	uxth	r3, r3
}
 8016840:	4618      	mov	r0, r3
 8016842:	370c      	adds	r7, #12
 8016844:	46bd      	mov	sp, r7
 8016846:	bc80      	pop	{r7}
 8016848:	4770      	bx	lr
	...

0801684c <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 801684c:	b5b0      	push	{r4, r5, r7, lr}
 801684e:	b086      	sub	sp, #24
 8016850:	af02      	add	r7, sp, #8
 8016852:	60f8      	str	r0, [r7, #12]
 8016854:	60b9      	str	r1, [r7, #8]
 8016856:	607a      	str	r2, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    // Assign non-volatile context
    if( nvm == NULL )
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d032      	beq.n	80168c4 <LoRaMacClassBInit+0x78>
    {
        return;
    }
    ClassBNvm = nvm;
 801685e:	4a1b      	ldr	r2, [pc, #108]	; (80168cc <LoRaMacClassBInit+0x80>)
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	6013      	str	r3, [r2, #0]

    // Store callbacks
    Ctx.LoRaMacClassBCallbacks = *callbacks;
 8016864:	4b1a      	ldr	r3, [pc, #104]	; (80168d0 <LoRaMacClassBInit+0x84>)
 8016866:	68ba      	ldr	r2, [r7, #8]
 8016868:	338c      	adds	r3, #140	; 0x8c
 801686a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801686e:	e883 0003 	stmia.w	r3, {r0, r1}

    // Store parameter pointers
    Ctx.LoRaMacClassBParams = *classBParams;
 8016872:	4b17      	ldr	r3, [pc, #92]	; (80168d0 <LoRaMacClassBInit+0x84>)
 8016874:	68fa      	ldr	r2, [r7, #12]
 8016876:	f103 0494 	add.w	r4, r3, #148	; 0x94
 801687a:	4615      	mov	r5, r2
 801687c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801687e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016880:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016884:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Initialize timers
    TimerInit( &Ctx.BeaconTimer, LoRaMacClassBBeaconTimerEvent );
 8016888:	2300      	movs	r3, #0
 801688a:	9300      	str	r3, [sp, #0]
 801688c:	4b11      	ldr	r3, [pc, #68]	; (80168d4 <LoRaMacClassBInit+0x88>)
 801688e:	2200      	movs	r2, #0
 8016890:	f04f 31ff 	mov.w	r1, #4294967295
 8016894:	4810      	ldr	r0, [pc, #64]	; (80168d8 <LoRaMacClassBInit+0x8c>)
 8016896:	f009 fd23 	bl	80202e0 <UTIL_TIMER_Create>
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
 801689a:	2300      	movs	r3, #0
 801689c:	9300      	str	r3, [sp, #0]
 801689e:	4b0f      	ldr	r3, [pc, #60]	; (80168dc <LoRaMacClassBInit+0x90>)
 80168a0:	2200      	movs	r2, #0
 80168a2:	f04f 31ff 	mov.w	r1, #4294967295
 80168a6:	480e      	ldr	r0, [pc, #56]	; (80168e0 <LoRaMacClassBInit+0x94>)
 80168a8:	f009 fd1a 	bl	80202e0 <UTIL_TIMER_Create>
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );
 80168ac:	2300      	movs	r3, #0
 80168ae:	9300      	str	r3, [sp, #0]
 80168b0:	4b0c      	ldr	r3, [pc, #48]	; (80168e4 <LoRaMacClassBInit+0x98>)
 80168b2:	2200      	movs	r2, #0
 80168b4:	f04f 31ff 	mov.w	r1, #4294967295
 80168b8:	480b      	ldr	r0, [pc, #44]	; (80168e8 <LoRaMacClassBInit+0x9c>)
 80168ba:	f009 fd11 	bl	80202e0 <UTIL_TIMER_Create>

    InitClassB( );
 80168be:	f7ff fe2d 	bl	801651c <InitClassB>
 80168c2:	e000      	b.n	80168c6 <LoRaMacClassBInit+0x7a>
        return;
 80168c4:	bf00      	nop
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80168c6:	3710      	adds	r7, #16
 80168c8:	46bd      	mov	sp, r7
 80168ca:	bdb0      	pop	{r4, r5, r7, pc}
 80168cc:	20002248 	.word	0x20002248
 80168d0:	20002194 	.word	0x20002194
 80168d4:	080169c5 	.word	0x080169c5
 80168d8:	200021d8 	.word	0x200021d8
 80168dc:	08016dc5 	.word	0x08016dc5
 80168e0:	200021f0 	.word	0x200021f0
 80168e4:	08016fd9 	.word	0x08016fd9
 80168e8:	20002208 	.word	0x20002208

080168ec <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b082      	sub	sp, #8
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	4603      	mov	r3, r0
 80168f4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( beaconState == BEACON_STATE_ACQUISITION )
 80168f6:	79fb      	ldrb	r3, [r7, #7]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d118      	bne.n	801692e <LoRaMacClassBSetBeaconState+0x42>
    {
        // If the MAC has received a time reference for the beacon,
        // apply the state BEACON_STATE_ACQUISITION_BY_TIME.
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 80168fc:	4b15      	ldr	r3, [pc, #84]	; (8016954 <LoRaMacClassBSetBeaconState+0x68>)
 80168fe:	7b1b      	ldrb	r3, [r3, #12]
 8016900:	f003 0304 	and.w	r3, r3, #4
 8016904:	b2db      	uxtb	r3, r3
 8016906:	2b00      	cmp	r3, #0
 8016908:	d00c      	beq.n	8016924 <LoRaMacClassBSetBeaconState+0x38>
            ( LoRaMacClassBIsAcquisitionPending( ) == false ) )
 801690a:	f000 fe73 	bl	80175f4 <LoRaMacClassBIsAcquisitionPending>
 801690e:	4603      	mov	r3, r0
 8016910:	f083 0301 	eor.w	r3, r3, #1
 8016914:	b2db      	uxtb	r3, r3
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 8016916:	2b00      	cmp	r3, #0
 8016918:	d004      	beq.n	8016924 <LoRaMacClassBSetBeaconState+0x38>
        {
            Ctx.BeaconState = BEACON_STATE_ACQUISITION_BY_TIME;
 801691a:	4b0e      	ldr	r3, [pc, #56]	; (8016954 <LoRaMacClassBSetBeaconState+0x68>)
 801691c:	2201      	movs	r2, #1
 801691e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016922:	e012      	b.n	801694a <LoRaMacClassBSetBeaconState+0x5e>
           Ctx.BeaconState = beaconState;
 8016924:	4a0b      	ldr	r2, [pc, #44]	; (8016954 <LoRaMacClassBSetBeaconState+0x68>)
 8016926:	79fb      	ldrb	r3, [r7, #7]
 8016928:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
}
 801692c:	e00d      	b.n	801694a <LoRaMacClassBSetBeaconState+0x5e>
        if( ( Ctx.BeaconState != BEACON_STATE_ACQUISITION ) &&
 801692e:	4b09      	ldr	r3, [pc, #36]	; (8016954 <LoRaMacClassBSetBeaconState+0x68>)
 8016930:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016934:	2b00      	cmp	r3, #0
 8016936:	d008      	beq.n	801694a <LoRaMacClassBSetBeaconState+0x5e>
            ( Ctx.BeaconState != BEACON_STATE_ACQUISITION_BY_TIME ) )
 8016938:	4b06      	ldr	r3, [pc, #24]	; (8016954 <LoRaMacClassBSetBeaconState+0x68>)
 801693a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
        if( ( Ctx.BeaconState != BEACON_STATE_ACQUISITION ) &&
 801693e:	2b01      	cmp	r3, #1
 8016940:	d003      	beq.n	801694a <LoRaMacClassBSetBeaconState+0x5e>
            Ctx.BeaconState = beaconState;
 8016942:	4a04      	ldr	r2, [pc, #16]	; (8016954 <LoRaMacClassBSetBeaconState+0x68>)
 8016944:	79fb      	ldrb	r3, [r7, #7]
 8016946:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
}
 801694a:	bf00      	nop
 801694c:	3708      	adds	r7, #8
 801694e:	46bd      	mov	sp, r7
 8016950:	bd80      	pop	{r7, pc}
 8016952:	bf00      	nop
 8016954:	20002194 	.word	0x20002194

08016958 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8016958:	b480      	push	{r7}
 801695a:	b083      	sub	sp, #12
 801695c:	af00      	add	r7, sp, #0
 801695e:	4603      	mov	r3, r0
 8016960:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
 8016962:	4a04      	ldr	r2, [pc, #16]	; (8016974 <LoRaMacClassBSetPingSlotState+0x1c>)
 8016964:	79fb      	ldrb	r3, [r7, #7]
 8016966:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801696a:	bf00      	nop
 801696c:	370c      	adds	r7, #12
 801696e:	46bd      	mov	sp, r7
 8016970:	bc80      	pop	{r7}
 8016972:	4770      	bx	lr
 8016974:	20002194 	.word	0x20002194

08016978 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8016978:	b480      	push	{r7}
 801697a:	b083      	sub	sp, #12
 801697c:	af00      	add	r7, sp, #0
 801697e:	4603      	mov	r3, r0
 8016980:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
 8016982:	4a04      	ldr	r2, [pc, #16]	; (8016994 <LoRaMacClassBSetMulticastSlotState+0x1c>)
 8016984:	79fb      	ldrb	r3, [r7, #7]
 8016986:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801698a:	bf00      	nop
 801698c:	370c      	adds	r7, #12
 801698e:	46bd      	mov	sp, r7
 8016990:	bc80      	pop	{r7}
 8016992:	4770      	bx	lr
 8016994:	20002194 	.word	0x20002194

08016998 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8016998:	b580      	push	{r7, lr}
 801699a:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME )
 801699c:	4b08      	ldr	r3, [pc, #32]	; (80169c0 <LoRaMacClassBIsAcquisitionInProgress+0x28>)
 801699e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80169a2:	2b01      	cmp	r3, #1
 80169a4:	d101      	bne.n	80169aa <LoRaMacClassBIsAcquisitionInProgress+0x12>
    {
        // In this case the acquisition is in progress, as the MAC has
        // a time reference for the next beacon RX.
        return true;
 80169a6:	2301      	movs	r3, #1
 80169a8:	e007      	b.n	80169ba <LoRaMacClassBIsAcquisitionInProgress+0x22>
    }
    if( LoRaMacClassBIsAcquisitionPending( ) == true )
 80169aa:	f000 fe23 	bl	80175f4 <LoRaMacClassBIsAcquisitionPending>
 80169ae:	4603      	mov	r3, r0
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d001      	beq.n	80169b8 <LoRaMacClassBIsAcquisitionInProgress+0x20>
    {
        // In this case the acquisition is in progress, as the MAC
        // searches for a beacon.
        return true;
 80169b4:	2301      	movs	r3, #1
 80169b6:	e000      	b.n	80169ba <LoRaMacClassBIsAcquisitionInProgress+0x22>
    }
    return false;
 80169b8:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80169ba:	4618      	mov	r0, r3
 80169bc:	bd80      	pop	{r7, pc}
 80169be:	bf00      	nop
 80169c0:	20002194 	.word	0x20002194

080169c4 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b082      	sub	sp, #8
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
 80169cc:	f009 fe46 	bl	802065c <UTIL_TIMER_GetCurrentTime>
 80169d0:	4603      	mov	r3, r0
 80169d2:	4a0b      	ldr	r2, [pc, #44]	; (8016a00 <LoRaMacClassBBeaconTimerEvent+0x3c>)
 80169d4:	63d3      	str	r3, [r2, #60]	; 0x3c
    TimerStop( &Ctx.BeaconTimer );
 80169d6:	480b      	ldr	r0, [pc, #44]	; (8016a04 <LoRaMacClassBBeaconTimerEvent+0x40>)
 80169d8:	f009 fd26 	bl	8020428 <UTIL_TIMER_Stop>
    LoRaMacClassBEvents.Events.Beacon = 1;
 80169dc:	4a0a      	ldr	r2, [pc, #40]	; (8016a08 <LoRaMacClassBBeaconTimerEvent+0x44>)
 80169de:	7813      	ldrb	r3, [r2, #0]
 80169e0:	f043 0301 	orr.w	r3, r3, #1
 80169e4:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 80169e6:	4b06      	ldr	r3, [pc, #24]	; (8016a00 <LoRaMacClassBBeaconTimerEvent+0x3c>)
 80169e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d003      	beq.n	80169f8 <LoRaMacClassBBeaconTimerEvent+0x34>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 80169f0:	4b03      	ldr	r3, [pc, #12]	; (8016a00 <LoRaMacClassBBeaconTimerEvent+0x3c>)
 80169f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80169f6:	4798      	blx	r3
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80169f8:	bf00      	nop
 80169fa:	3708      	adds	r7, #8
 80169fc:	46bd      	mov	sp, r7
 80169fe:	bd80      	pop	{r7, pc}
 8016a00:	20002194 	.word	0x20002194
 8016a04:	200021d8 	.word	0x200021d8
 8016a08:	20002190 	.word	0x20002190

08016a0c <LoRaMacClassBProcessBeacon>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static void LoRaMacClassBProcessBeacon( void )
{
 8016a0c:	b590      	push	{r4, r7, lr}
 8016a0e:	b08b      	sub	sp, #44	; 0x2c
 8016a10:	af02      	add	r7, sp, #8
    bool activateTimer = false;
 8016a12:	2300      	movs	r3, #0
 8016a14:	77fb      	strb	r3, [r7, #31]
    TimerTime_t beaconEventTime = 1;
 8016a16:	2301      	movs	r3, #1
 8016a18:	61bb      	str	r3, [r7, #24]
    RxConfigParams_t beaconRxConfig;
    TimerTime_t currentTime = Ctx.BeaconCtx.TimeStamp;
 8016a1a:	4bb3      	ldr	r3, [pc, #716]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a1e:	617b      	str	r3, [r7, #20]

    // Beacon state machine
    switch( Ctx.BeaconState )
 8016a20:	4bb1      	ldr	r3, [pc, #708]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016a26:	2b0a      	cmp	r3, #10
 8016a28:	f200 81a8 	bhi.w	8016d7c <LoRaMacClassBProcessBeacon+0x370>
 8016a2c:	a201      	add	r2, pc, #4	; (adr r2, 8016a34 <LoRaMacClassBProcessBeacon+0x28>)
 8016a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a32:	bf00      	nop
 8016a34:	08016b5f 	.word	0x08016b5f
 8016a38:	08016a61 	.word	0x08016a61
 8016a3c:	08016bb3 	.word	0x08016bb3
 8016a40:	08016d7d 	.word	0x08016d7d
 8016a44:	08016bcf 	.word	0x08016bcf
 8016a48:	08016c19 	.word	0x08016c19
 8016a4c:	08016d7d 	.word	0x08016d7d
 8016a50:	08016c6d 	.word	0x08016c6d
 8016a54:	08016cfd 	.word	0x08016cfd
 8016a58:	08016d7d 	.word	0x08016d7d
 8016a5c:	08016d1b 	.word	0x08016d1b
    {
        case BEACON_STATE_ACQUISITION_BY_TIME:
        {
            activateTimer = true;
 8016a60:	2301      	movs	r3, #1
 8016a62:	77fb      	strb	r3, [r7, #31]

            if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 8016a64:	4ba0      	ldr	r3, [pc, #640]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016a66:	7b1b      	ldrb	r3, [r3, #12]
 8016a68:	f003 0310 	and.w	r3, r3, #16
 8016a6c:	b2db      	uxtb	r3, r3
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d007      	beq.n	8016a82 <LoRaMacClassBProcessBeacon+0x76>
            {
                Radio.Sleep();
 8016a72:	4b9e      	ldr	r3, [pc, #632]	; (8016cec <LoRaMacClassBProcessBeacon+0x2e0>)
 8016a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a76:	4798      	blx	r3
                Ctx.BeaconState = BEACON_STATE_LOST;
 8016a78:	4b9b      	ldr	r3, [pc, #620]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016a7a:	220a      	movs	r2, #10
 8016a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                    Ctx.BeaconCtx.BeaconTimingDelay = 0;

                    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
                }
            }
            break;
 8016a80:	e182      	b.n	8016d88 <LoRaMacClassBProcessBeacon+0x37c>
                ResetWindowTimeout( );
 8016a82:	f7ff fe03 	bl	801668c <ResetWindowTimeout>
                if( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 )
 8016a86:	4b98      	ldr	r3, [pc, #608]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016a88:	7b1b      	ldrb	r3, [r3, #12]
 8016a8a:	f003 0304 	and.w	r3, r3, #4
 8016a8e:	b2db      	uxtb	r3, r3
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d056      	beq.n	8016b42 <LoRaMacClassBProcessBeacon+0x136>
                    CalculateBeaconRxWindowConfig( &beaconRxConfig, Ctx.BeaconCtx.SymbolTimeout );
 8016a94:	4b94      	ldr	r3, [pc, #592]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016a96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8016a98:	463b      	mov	r3, r7
 8016a9a:	4611      	mov	r1, r2
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	f7ff fbb3 	bl	8016208 <CalculateBeaconRxWindowConfig>
                    if( Ctx.BeaconCtx.BeaconTimingDelay > 0 )
 8016aa2:	4b91      	ldr	r3, [pc, #580]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d036      	beq.n	8016b18 <LoRaMacClassBProcessBeacon+0x10c>
                        if( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) > currentTime )
 8016aaa:	4b8f      	ldr	r3, [pc, #572]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016aac:	3320      	adds	r3, #32
 8016aae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016ab2:	f008 ffa5 	bl	801fa00 <SysTimeToMs>
 8016ab6:	4602      	mov	r2, r0
 8016ab8:	697b      	ldr	r3, [r7, #20]
 8016aba:	4293      	cmp	r3, r2
 8016abc:	d21a      	bcs.n	8016af4 <LoRaMacClassBProcessBeacon+0xe8>
                            beaconEventTime = TimerTempCompensation( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTime, Ctx.BeaconCtx.Temperature );
 8016abe:	4b8a      	ldr	r3, [pc, #552]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016ac0:	3320      	adds	r3, #32
 8016ac2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016ac6:	f008 ff9b 	bl	801fa00 <SysTimeToMs>
 8016aca:	4602      	mov	r2, r0
 8016acc:	697b      	ldr	r3, [r7, #20]
 8016ace:	1ad3      	subs	r3, r2, r3
 8016ad0:	4a85      	ldr	r2, [pc, #532]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016ad2:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8016ad6:	4611      	mov	r1, r2
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f7ff fa2b 	bl	8015f34 <TimerTempCompensation>
 8016ade:	61b8      	str	r0, [r7, #24]
                            if( ( int32_t ) beaconEventTime > beaconRxConfig.WindowOffset )
 8016ae0:	68fa      	ldr	r2, [r7, #12]
 8016ae2:	69bb      	ldr	r3, [r7, #24]
 8016ae4:	429a      	cmp	r2, r3
 8016ae6:	da13      	bge.n	8016b10 <LoRaMacClassBProcessBeacon+0x104>
                                beaconEventTime += beaconRxConfig.WindowOffset;
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	461a      	mov	r2, r3
 8016aec:	69bb      	ldr	r3, [r7, #24]
 8016aee:	4413      	add	r3, r2
 8016af0:	61bb      	str	r3, [r7, #24]
 8016af2:	e00d      	b.n	8016b10 <LoRaMacClassBProcessBeacon+0x104>
                            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 8016af4:	4a7c      	ldr	r2, [pc, #496]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016af6:	7b13      	ldrb	r3, [r2, #12]
 8016af8:	f36f 0382 	bfc	r3, #2, #1
 8016afc:	7313      	strb	r3, [r2, #12]
                            Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 0;
 8016afe:	4a7a      	ldr	r2, [pc, #488]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016b00:	7b13      	ldrb	r3, [r2, #12]
 8016b02:	f36f 03c3 	bfc	r3, #3, #1
 8016b06:	7313      	strb	r3, [r2, #12]
                            Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 8016b08:	4b77      	ldr	r3, [pc, #476]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016b0a:	2200      	movs	r2, #0
 8016b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                        Ctx.BeaconCtx.BeaconTimingDelay = 0;
 8016b10:	4b75      	ldr	r3, [pc, #468]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016b12:	2200      	movs	r2, #0
 8016b14:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 8016b16:	e137      	b.n	8016d88 <LoRaMacClassBProcessBeacon+0x37c>
                        activateTimer = false;
 8016b18:	2300      	movs	r3, #0
 8016b1a:	77fb      	strb	r3, [r7, #31]
                        Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 8016b1c:	4a72      	ldr	r2, [pc, #456]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016b1e:	7b13      	ldrb	r3, [r2, #12]
 8016b20:	f36f 0382 	bfc	r3, #2, #1
 8016b24:	7313      	strb	r3, [r2, #12]
                        Ctx.BeaconCtx.Ctrl.AcquisitionPending = 1;
 8016b26:	4a70      	ldr	r2, [pc, #448]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016b28:	7b13      	ldrb	r3, [r2, #12]
 8016b2a:	f043 0310 	orr.w	r3, r3, #16
 8016b2e:	7313      	strb	r3, [r2, #12]
                        RxBeaconSetup( CLASSB_BEACON_RESERVED, false, beaconRxConfig.WindowTimeout );
 8016b30:	68bb      	ldr	r3, [r7, #8]
 8016b32:	b29b      	uxth	r3, r3
 8016b34:	461a      	mov	r2, r3
 8016b36:	2100      	movs	r1, #0
 8016b38:	f640 0048 	movw	r0, #2120	; 0x848
 8016b3c:	f7ff fba6 	bl	801628c <RxBeaconSetup>
            break;
 8016b40:	e122      	b.n	8016d88 <LoRaMacClassBProcessBeacon+0x37c>
                    Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
 8016b42:	4b69      	ldr	r3, [pc, #420]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016b44:	2200      	movs	r2, #0
 8016b46:	621a      	str	r2, [r3, #32]
                    Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
 8016b48:	4b67      	ldr	r3, [pc, #412]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016b4a:	2200      	movs	r2, #0
 8016b4c:	849a      	strh	r2, [r3, #36]	; 0x24
                    Ctx.BeaconCtx.BeaconTimingDelay = 0;
 8016b4e:	4b66      	ldr	r3, [pc, #408]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016b50:	2200      	movs	r2, #0
 8016b52:	639a      	str	r2, [r3, #56]	; 0x38
                    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 8016b54:	4b64      	ldr	r3, [pc, #400]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016b56:	2200      	movs	r2, #0
 8016b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            break;
 8016b5c:	e114      	b.n	8016d88 <LoRaMacClassBProcessBeacon+0x37c>
        }
        case BEACON_STATE_ACQUISITION:
        {
            activateTimer = true;
 8016b5e:	2301      	movs	r3, #1
 8016b60:	77fb      	strb	r3, [r7, #31]

            if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 8016b62:	4b61      	ldr	r3, [pc, #388]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016b64:	7b1b      	ldrb	r3, [r3, #12]
 8016b66:	f003 0310 	and.w	r3, r3, #16
 8016b6a:	b2db      	uxtb	r3, r3
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d007      	beq.n	8016b80 <LoRaMacClassBProcessBeacon+0x174>
            {
                Radio.Sleep();
 8016b70:	4b5e      	ldr	r3, [pc, #376]	; (8016cec <LoRaMacClassBProcessBeacon+0x2e0>)
 8016b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b74:	4798      	blx	r3
                Ctx.BeaconState = BEACON_STATE_LOST;
 8016b76:	4b5c      	ldr	r3, [pc, #368]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016b78:	220a      	movs	r2, #10
 8016b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                // find a beacon, the state machine will stay in state BEACON_STATE_ACQUISITION.
                // This state detects that a acquisition was pending previously and will change the next
                // state to BEACON_STATE_LOST.
                RxBeaconSetup( 0, true, beaconRxConfig.WindowTimeout );
            }
            break;
 8016b7e:	e103      	b.n	8016d88 <LoRaMacClassBProcessBeacon+0x37c>
                ResetWindowTimeout( );
 8016b80:	f7ff fd84 	bl	801668c <ResetWindowTimeout>
                Ctx.BeaconCtx.Ctrl.AcquisitionPending = 1;
 8016b84:	4a58      	ldr	r2, [pc, #352]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016b86:	7b13      	ldrb	r3, [r2, #12]
 8016b88:	f043 0310 	orr.w	r3, r3, #16
 8016b8c:	7313      	strb	r3, [r2, #12]
                beaconEventTime = CLASSB_BEACON_INTERVAL;
 8016b8e:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 8016b92:	61bb      	str	r3, [r7, #24]
                CalculateBeaconRxWindowConfig( &beaconRxConfig, Ctx.BeaconCtx.SymbolTimeout );
 8016b94:	4b54      	ldr	r3, [pc, #336]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016b96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8016b98:	463b      	mov	r3, r7
 8016b9a:	4611      	mov	r1, r2
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	f7ff fb33 	bl	8016208 <CalculateBeaconRxWindowConfig>
                RxBeaconSetup( 0, true, beaconRxConfig.WindowTimeout );
 8016ba2:	68bb      	ldr	r3, [r7, #8]
 8016ba4:	b29b      	uxth	r3, r3
 8016ba6:	461a      	mov	r2, r3
 8016ba8:	2101      	movs	r1, #1
 8016baa:	2000      	movs	r0, #0
 8016bac:	f7ff fb6e 	bl	801628c <RxBeaconSetup>
            break;
 8016bb0:	e0ea      	b.n	8016d88 <LoRaMacClassBProcessBeacon+0x37c>
        }
        case BEACON_STATE_TIMEOUT:
        {
            // We have to update the beacon time, since we missed a beacon
            Ctx.BeaconCtx.BeaconTime.Seconds += ( CLASSB_BEACON_INTERVAL / 1000 );
 8016bb2:	4b4d      	ldr	r3, [pc, #308]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016bb4:	691b      	ldr	r3, [r3, #16]
 8016bb6:	3380      	adds	r3, #128	; 0x80
 8016bb8:	4a4b      	ldr	r2, [pc, #300]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016bba:	6113      	str	r3, [r2, #16]
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 8016bbc:	4b4a      	ldr	r3, [pc, #296]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016bbe:	2200      	movs	r2, #0
 8016bc0:	829a      	strh	r2, [r3, #20]

            // Enlarge window timeouts to increase the chance to receive the next beacon
            EnlargeWindowTimeout( );
 8016bc2:	f7ff fd33 	bl	801662c <EnlargeWindowTimeout>

            // Setup next state
            Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 8016bc6:	4b48      	ldr	r3, [pc, #288]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016bc8:	2204      	movs	r2, #4
 8016bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
            // Intentional fall through
        case BEACON_STATE_REACQUISITION:
        {
            activateTimer = true;
 8016bce:	2301      	movs	r3, #1
 8016bd0:	77fb      	strb	r3, [r7, #31]

            // The beacon is no longer acquired
            Ctx.BeaconCtx.Ctrl.BeaconAcquired = 0;
 8016bd2:	4a45      	ldr	r2, [pc, #276]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016bd4:	7b13      	ldrb	r3, [r2, #12]
 8016bd6:	f36f 0341 	bfc	r3, #1, #1
 8016bda:	7313      	strb	r3, [r2, #12]

            // Verify if the maximum beacon less period has been elapsed
            if( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) > CLASSB_MAX_BEACON_LESS_PERIOD )
 8016bdc:	4b42      	ldr	r3, [pc, #264]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016bde:	3318      	adds	r3, #24
 8016be0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016be4:	f008 ff0c 	bl	801fa00 <SysTimeToMs>
 8016be8:	4602      	mov	r2, r0
 8016bea:	697b      	ldr	r3, [r7, #20]
 8016bec:	1a9b      	subs	r3, r3, r2
 8016bee:	4a40      	ldr	r2, [pc, #256]	; (8016cf0 <LoRaMacClassBProcessBeacon+0x2e4>)
 8016bf0:	4293      	cmp	r3, r2
 8016bf2:	d904      	bls.n	8016bfe <LoRaMacClassBProcessBeacon+0x1f2>
            {
                Ctx.BeaconState = BEACON_STATE_LOST;
 8016bf4:	4b3c      	ldr	r3, [pc, #240]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016bf6:	220a      	movs	r2, #10
 8016bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                     Ctx.BeaconCtx.BeaconWindowMovement, currentTime );

                // Setup next state
                Ctx.BeaconState = BEACON_STATE_IDLE;
            }
            break;
 8016bfc:	e0c4      	b.n	8016d88 <LoRaMacClassBProcessBeacon+0x37c>
                beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND,
 8016bfe:	4b3a      	ldr	r3, [pc, #232]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c02:	697a      	ldr	r2, [r7, #20]
 8016c04:	4619      	mov	r1, r3
 8016c06:	2010      	movs	r0, #16
 8016c08:	f7ff fdb6 	bl	8016778 <UpdateBeaconState>
 8016c0c:	61b8      	str	r0, [r7, #24]
                Ctx.BeaconState = BEACON_STATE_IDLE;
 8016c0e:	4b36      	ldr	r3, [pc, #216]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c10:	2207      	movs	r2, #7
 8016c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            break;
 8016c16:	e0b7      	b.n	8016d88 <LoRaMacClassBProcessBeacon+0x37c>
        }
        case BEACON_STATE_LOCKED:
        {
            activateTimer = true;
 8016c18:	2301      	movs	r3, #1
 8016c1a:	77fb      	strb	r3, [r7, #31]

            // We have received a beacon. Acquisition is no longer pending.
            Ctx.BeaconCtx.Ctrl.AcquisitionPending = 0;
 8016c1c:	4a32      	ldr	r2, [pc, #200]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c1e:	7b13      	ldrb	r3, [r2, #12]
 8016c20:	f36f 1304 	bfc	r3, #4, #1
 8016c24:	7313      	strb	r3, [r2, #12]

            // Handle beacon reception
            beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED,
 8016c26:	697a      	ldr	r2, [r7, #20]
 8016c28:	2100      	movs	r1, #0
 8016c2a:	200e      	movs	r0, #14
 8016c2c:	f7ff fda4 	bl	8016778 <UpdateBeaconState>
 8016c30:	61b8      	str	r0, [r7, #24]
                                                 0, currentTime );

            // Setup the MLME confirm for the MLME_BEACON_ACQUISITION
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 8016c32:	4b2d      	ldr	r3, [pc, #180]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016c38:	781b      	ldrb	r3, [r3, #0]
 8016c3a:	f003 0304 	and.w	r3, r3, #4
 8016c3e:	b2db      	uxtb	r3, r3
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d00e      	beq.n	8016c62 <LoRaMacClassBProcessBeacon+0x256>
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true )
 8016c44:	200c      	movs	r0, #12
 8016c46:	f001 fc75 	bl	8018534 <LoRaMacConfirmQueueIsCmdActive>
 8016c4a:	4603      	mov	r3, r0
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d008      	beq.n	8016c62 <LoRaMacClassBProcessBeacon+0x256>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_ACQUISITION );
 8016c50:	210c      	movs	r1, #12
 8016c52:	2000      	movs	r0, #0
 8016c54:	f001 fbe2 	bl	801841c <LoRaMacConfirmQueueSetStatus>
                    Ctx.LoRaMacClassBParams.MlmeConfirm->TxTimeOnAir = 0;
 8016c58:	4b23      	ldr	r3, [pc, #140]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016c5e:	2200      	movs	r2, #0
 8016c60:	605a      	str	r2, [r3, #4]
                }
            }

            // Setup next state
            Ctx.BeaconState = BEACON_STATE_IDLE;
 8016c62:	4b21      	ldr	r3, [pc, #132]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c64:	2207      	movs	r2, #7
 8016c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            break;
 8016c6a:	e08d      	b.n	8016d88 <LoRaMacClassBProcessBeacon+0x37c>
        }
        case BEACON_STATE_IDLE:
        {
            activateTimer = true;
 8016c6c:	2301      	movs	r3, #1
 8016c6e:	77fb      	strb	r3, [r7, #31]
            GetTemperature( &Ctx.LoRaMacClassBCallbacks, &Ctx.BeaconCtx );
 8016c70:	4920      	ldr	r1, [pc, #128]	; (8016cf4 <LoRaMacClassBProcessBeacon+0x2e8>)
 8016c72:	4821      	ldr	r0, [pc, #132]	; (8016cf8 <LoRaMacClassBProcessBeacon+0x2ec>)
 8016c74:	f7ff fc3b 	bl	80164ee <GetTemperature>
            beaconEventTime = Ctx.BeaconCtx.NextBeaconRxAdjusted - Radio.GetWakeupTime( );
 8016c78:	4b1b      	ldr	r3, [pc, #108]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c7a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8016c7c:	4b1b      	ldr	r3, [pc, #108]	; (8016cec <LoRaMacClassBProcessBeacon+0x2e0>)
 8016c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016c80:	4798      	blx	r3
 8016c82:	4603      	mov	r3, r0
 8016c84:	1ae3      	subs	r3, r4, r3
 8016c86:	61bb      	str	r3, [r7, #24]
            currentTime = TimerGetCurrentTime( );
 8016c88:	f009 fce8 	bl	802065c <UTIL_TIMER_GetCurrentTime>
 8016c8c:	6178      	str	r0, [r7, #20]

            // The goal is to calculate beaconRxConfig.WindowTimeout and beaconRxConfig.WindowOffset
            CalculateBeaconRxWindowConfig( &beaconRxConfig, Ctx.BeaconCtx.SymbolTimeout );
 8016c8e:	4b16      	ldr	r3, [pc, #88]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8016c92:	463b      	mov	r3, r7
 8016c94:	4611      	mov	r1, r2
 8016c96:	4618      	mov	r0, r3
 8016c98:	f7ff fab6 	bl	8016208 <CalculateBeaconRxWindowConfig>

            if( beaconEventTime > currentTime )
 8016c9c:	69ba      	ldr	r2, [r7, #24]
 8016c9e:	697b      	ldr	r3, [r7, #20]
 8016ca0:	429a      	cmp	r2, r3
 8016ca2:	d919      	bls.n	8016cd8 <LoRaMacClassBProcessBeacon+0x2cc>
            {
                Ctx.BeaconState = BEACON_STATE_GUARD;
 8016ca4:	4b10      	ldr	r3, [pc, #64]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016ca6:	2208      	movs	r2, #8
 8016ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                beaconEventTime -= currentTime;
 8016cac:	69ba      	ldr	r2, [r7, #24]
 8016cae:	697b      	ldr	r3, [r7, #20]
 8016cb0:	1ad3      	subs	r3, r2, r3
 8016cb2:	61bb      	str	r3, [r7, #24]
                beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 8016cb4:	4b0c      	ldr	r3, [pc, #48]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016cb6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016cba:	4619      	mov	r1, r3
 8016cbc:	69b8      	ldr	r0, [r7, #24]
 8016cbe:	f7ff f939 	bl	8015f34 <TimerTempCompensation>
 8016cc2:	61b8      	str	r0, [r7, #24]

                if( ( int32_t ) beaconEventTime > beaconRxConfig.WindowOffset )
 8016cc4:	68fa      	ldr	r2, [r7, #12]
 8016cc6:	69bb      	ldr	r3, [r7, #24]
 8016cc8:	429a      	cmp	r2, r3
 8016cca:	da5c      	bge.n	8016d86 <LoRaMacClassBProcessBeacon+0x37a>
                {
                    // Apply the offset of the system error respectively beaconing precision setting
                    beaconEventTime += beaconRxConfig.WindowOffset;
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	461a      	mov	r2, r3
 8016cd0:	69bb      	ldr	r3, [r7, #24]
 8016cd2:	4413      	add	r3, r2
 8016cd4:	61bb      	str	r3, [r7, #24]
            else
            {
                Ctx.BeaconState = BEACON_STATE_REACQUISITION;
                beaconEventTime = 1;
            }
            break;
 8016cd6:	e056      	b.n	8016d86 <LoRaMacClassBProcessBeacon+0x37a>
                Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 8016cd8:	4b03      	ldr	r3, [pc, #12]	; (8016ce8 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016cda:	2204      	movs	r2, #4
 8016cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                beaconEventTime = 1;
 8016ce0:	2301      	movs	r3, #1
 8016ce2:	61bb      	str	r3, [r7, #24]
            break;
 8016ce4:	e04f      	b.n	8016d86 <LoRaMacClassBProcessBeacon+0x37a>
 8016ce6:	bf00      	nop
 8016ce8:	20002194 	.word	0x20002194
 8016cec:	08021d00 	.word	0x08021d00
 8016cf0:	006ddd00 	.word	0x006ddd00
 8016cf4:	200021a0 	.word	0x200021a0
 8016cf8:	20002220 	.word	0x20002220
        }
        case BEACON_STATE_GUARD:
        {
            Ctx.BeaconState = BEACON_STATE_RX;
 8016cfc:	4b2e      	ldr	r3, [pc, #184]	; (8016db8 <LoRaMacClassBProcessBeacon+0x3ac>)
 8016cfe:	2209      	movs	r2, #9
 8016d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            // Stop slot timers
            LoRaMacClassBStopRxSlots( );
 8016d04:	f000 ff4c 	bl	8017ba0 <LoRaMacClassBStopRxSlots>

            // Don't use the default channel. We know on which
            // channel the next beacon will be transmitted
            RxBeaconSetup( CLASSB_BEACON_RESERVED, false, beaconRxConfig.WindowTimeout );
 8016d08:	68bb      	ldr	r3, [r7, #8]
 8016d0a:	b29b      	uxth	r3, r3
 8016d0c:	461a      	mov	r2, r3
 8016d0e:	2100      	movs	r1, #0
 8016d10:	f640 0048 	movw	r0, #2120	; 0x848
 8016d14:	f7ff faba 	bl	801628c <RxBeaconSetup>
            break;
 8016d18:	e036      	b.n	8016d88 <LoRaMacClassBProcessBeacon+0x37c>
        }
        case BEACON_STATE_LOST:
        {
            // Handle events
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 8016d1a:	4b27      	ldr	r3, [pc, #156]	; (8016db8 <LoRaMacClassBProcessBeacon+0x3ac>)
 8016d1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016d20:	781b      	ldrb	r3, [r3, #0]
 8016d22:	f003 0304 	and.w	r3, r3, #4
 8016d26:	b2db      	uxtb	r3, r3
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d00a      	beq.n	8016d42 <LoRaMacClassBProcessBeacon+0x336>
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true )
 8016d2c:	200c      	movs	r0, #12
 8016d2e:	f001 fc01 	bl	8018534 <LoRaMacConfirmQueueIsCmdActive>
 8016d32:	4603      	mov	r3, r0
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d015      	beq.n	8016d64 <LoRaMacClassBProcessBeacon+0x358>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_BEACON_ACQUISITION );
 8016d38:	210c      	movs	r1, #12
 8016d3a:	2010      	movs	r0, #16
 8016d3c:	f001 fb6e 	bl	801841c <LoRaMacConfirmQueueSetStatus>
 8016d40:	e010      	b.n	8016d64 <LoRaMacClassBProcessBeacon+0x358>
                }
            }
            else
            {
                Ctx.LoRaMacClassBParams.MlmeIndication->MlmeIndication = MLME_BEACON_LOST;
 8016d42:	4b1d      	ldr	r3, [pc, #116]	; (8016db8 <LoRaMacClassBProcessBeacon+0x3ac>)
 8016d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016d48:	220f      	movs	r2, #15
 8016d4a:	701a      	strb	r2, [r3, #0]
                Ctx.LoRaMacClassBParams.MlmeIndication->Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8016d4c:	4b1a      	ldr	r3, [pc, #104]	; (8016db8 <LoRaMacClassBProcessBeacon+0x3ac>)
 8016d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016d52:	2200      	movs	r2, #0
 8016d54:	705a      	strb	r2, [r3, #1]
                Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeInd = 1;
 8016d56:	4b18      	ldr	r3, [pc, #96]	; (8016db8 <LoRaMacClassBProcessBeacon+0x3ac>)
 8016d58:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8016d5c:	7813      	ldrb	r3, [r2, #0]
 8016d5e:	f043 0308 	orr.w	r3, r3, #8
 8016d62:	7013      	strb	r3, [r2, #0]
            }

            // Stop slot timers
            LoRaMacClassBStopRxSlots( );
 8016d64:	f000 ff1c 	bl	8017ba0 <LoRaMacClassBStopRxSlots>

            // Initialize default state for class b
            InitClassBDefaults( );
 8016d68:	f7ff fc24 	bl	80165b4 <InitClassBDefaults>

            Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MacDone = 1;
 8016d6c:	4b12      	ldr	r3, [pc, #72]	; (8016db8 <LoRaMacClassBProcessBeacon+0x3ac>)
 8016d6e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8016d72:	7813      	ldrb	r3, [r2, #0]
 8016d74:	f043 0320 	orr.w	r3, r3, #32
 8016d78:	7013      	strb	r3, [r2, #0]

            break;
 8016d7a:	e005      	b.n	8016d88 <LoRaMacClassBProcessBeacon+0x37c>
        }
        default:
        {
            Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 8016d7c:	4b0e      	ldr	r3, [pc, #56]	; (8016db8 <LoRaMacClassBProcessBeacon+0x3ac>)
 8016d7e:	2200      	movs	r2, #0
 8016d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            break;
 8016d84:	e000      	b.n	8016d88 <LoRaMacClassBProcessBeacon+0x37c>
            break;
 8016d86:	bf00      	nop
        }
    }
    MW_LOG(TS_ON, VLEVEL_H, "beacon state %d\r\n", Ctx.BeaconState);
 8016d88:	4b0b      	ldr	r3, [pc, #44]	; (8016db8 <LoRaMacClassBProcessBeacon+0x3ac>)
 8016d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016d8e:	9300      	str	r3, [sp, #0]
 8016d90:	4b0a      	ldr	r3, [pc, #40]	; (8016dbc <LoRaMacClassBProcessBeacon+0x3b0>)
 8016d92:	2201      	movs	r2, #1
 8016d94:	2100      	movs	r1, #0
 8016d96:	2003      	movs	r0, #3
 8016d98:	f009 fd50 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>

    if( activateTimer == true )
 8016d9c:	7ffb      	ldrb	r3, [r7, #31]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d006      	beq.n	8016db0 <LoRaMacClassBProcessBeacon+0x3a4>
    {
        TimerSetValue( &Ctx.BeaconTimer, beaconEventTime );
 8016da2:	69b9      	ldr	r1, [r7, #24]
 8016da4:	4806      	ldr	r0, [pc, #24]	; (8016dc0 <LoRaMacClassBProcessBeacon+0x3b4>)
 8016da6:	f009 fbaf 	bl	8020508 <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.BeaconTimer );
 8016daa:	4805      	ldr	r0, [pc, #20]	; (8016dc0 <LoRaMacClassBProcessBeacon+0x3b4>)
 8016dac:	f009 face 	bl	802034c <UTIL_TIMER_Start>
    }
}
 8016db0:	bf00      	nop
 8016db2:	3724      	adds	r7, #36	; 0x24
 8016db4:	46bd      	mov	sp, r7
 8016db6:	bd90      	pop	{r4, r7, pc}
 8016db8:	20002194 	.word	0x20002194
 8016dbc:	080216d0 	.word	0x080216d0
 8016dc0:	200021d8 	.word	0x200021d8

08016dc4 <LoRaMacClassBPingSlotTimerEvent>:
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b082      	sub	sp, #8
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;
 8016dcc:	4a08      	ldr	r2, [pc, #32]	; (8016df0 <LoRaMacClassBPingSlotTimerEvent+0x2c>)
 8016dce:	7813      	ldrb	r3, [r2, #0]
 8016dd0:	f043 0302 	orr.w	r3, r3, #2
 8016dd4:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 8016dd6:	4b07      	ldr	r3, [pc, #28]	; (8016df4 <LoRaMacClassBPingSlotTimerEvent+0x30>)
 8016dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d003      	beq.n	8016de8 <LoRaMacClassBPingSlotTimerEvent+0x24>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 8016de0:	4b04      	ldr	r3, [pc, #16]	; (8016df4 <LoRaMacClassBPingSlotTimerEvent+0x30>)
 8016de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016de6:	4798      	blx	r3
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016de8:	bf00      	nop
 8016dea:	3708      	adds	r7, #8
 8016dec:	46bd      	mov	sp, r7
 8016dee:	bd80      	pop	{r7, pc}
 8016df0:	20002190 	.word	0x20002190
 8016df4:	20002194 	.word	0x20002194

08016df8 <LoRaMacClassBProcessPingSlot>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static void LoRaMacClassBProcessPingSlot( void )
{
 8016df8:	b590      	push	{r4, r7, lr}
 8016dfa:	b085      	sub	sp, #20
 8016dfc:	af02      	add	r7, sp, #8
    static RxConfigParams_t pingSlotRxConfig;
    TimerTime_t pingSlotTime = 0;
 8016dfe:	2300      	movs	r3, #0
 8016e00:	603b      	str	r3, [r7, #0]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint32_t maxRxError = 0;
    bool slotHasPriority = false;
#endif /* LORAMAC_VERSION */

    switch( Ctx.PingSlotState )
 8016e02:	4b6f      	ldr	r3, [pc, #444]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016e08:	2b02      	cmp	r3, #2
 8016e0a:	d063      	beq.n	8016ed4 <LoRaMacClassBProcessPingSlot+0xdc>
 8016e0c:	2b02      	cmp	r3, #2
 8016e0e:	f300 80cc 	bgt.w	8016faa <LoRaMacClassBProcessPingSlot+0x1b2>
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d002      	beq.n	8016e1c <LoRaMacClassBProcessPingSlot+0x24>
 8016e16:	2b01      	cmp	r3, #1
 8016e18:	d014      	beq.n	8016e44 <LoRaMacClassBProcessPingSlot+0x4c>
 8016e1a:	e0c6      	b.n	8016faa <LoRaMacClassBProcessPingSlot+0x1b2>
    {
        case PINGSLOT_STATE_CALC_PING_OFFSET:
        {
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 8016e1c:	4b68      	ldr	r3, [pc, #416]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016e1e:	691b      	ldr	r3, [r3, #16]
 8016e20:	2200      	movs	r2, #0
 8016e22:	4618      	mov	r0, r3
 8016e24:	4611      	mov	r1, r2
                               *Ctx.LoRaMacClassBParams.LoRaMacDevAddr,
 8016e26:	4b66      	ldr	r3, [pc, #408]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016e28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 8016e2c:	681a      	ldr	r2, [r3, #0]
                               ClassBNvm->PingSlotCtx.PingPeriod,
 8016e2e:	4b65      	ldr	r3, [pc, #404]	; (8016fc4 <LoRaMacClassBProcessPingSlot+0x1cc>)
 8016e30:	681b      	ldr	r3, [r3, #0]
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 8016e32:	885b      	ldrh	r3, [r3, #2]
 8016e34:	4c64      	ldr	r4, [pc, #400]	; (8016fc8 <LoRaMacClassBProcessPingSlot+0x1d0>)
 8016e36:	9400      	str	r4, [sp, #0]
 8016e38:	f7ff f90a 	bl	8016050 <ComputePingOffset>
                               &( Ctx.PingSlotCtx.PingOffset ) );
            Ctx.PingSlotState = PINGSLOT_STATE_SET_TIMER;
 8016e3c:	4b60      	ldr	r3, [pc, #384]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016e3e:	2201      	movs	r2, #1
 8016e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
            // Intentional fall through
        case PINGSLOT_STATE_SET_TIMER:
        {
            if( CalcNextSlotTime( Ctx.PingSlotCtx.PingOffset, ClassBNvm->PingSlotCtx.PingPeriod, ClassBNvm->PingSlotCtx.PingNb, &pingSlotTime ) == true )
 8016e44:	4b5e      	ldr	r3, [pc, #376]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016e46:	8898      	ldrh	r0, [r3, #4]
 8016e48:	4b5e      	ldr	r3, [pc, #376]	; (8016fc4 <LoRaMacClassBProcessPingSlot+0x1cc>)
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	8859      	ldrh	r1, [r3, #2]
 8016e4e:	4b5d      	ldr	r3, [pc, #372]	; (8016fc4 <LoRaMacClassBProcessPingSlot+0x1cc>)
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	785b      	ldrb	r3, [r3, #1]
 8016e54:	b29a      	uxth	r2, r3
 8016e56:	463b      	mov	r3, r7
 8016e58:	f7ff fa7e 	bl	8016358 <CalcNextSlotTime>
 8016e5c:	4603      	mov	r3, r0
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	f000 80a8 	beq.w	8016fb4 <LoRaMacClassBProcessPingSlot+0x1bc>
            {
                if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 )
 8016e64:	4b56      	ldr	r3, [pc, #344]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016e66:	7b1b      	ldrb	r3, [r3, #12]
 8016e68:	f003 0302 	and.w	r3, r3, #2
 8016e6c:	b2db      	uxtb	r3, r3
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d023      	beq.n	8016eba <LoRaMacClassBProcessPingSlot+0xc2>
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    // Compute the symbol timeout. Apply it only, if the beacon is acquired
                    // Otherwise, take the enlargement of the symbols into account.
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8016e72:	4b53      	ldr	r3, [pc, #332]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016e74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016e78:	7818      	ldrb	r0, [r3, #0]
                                                     ClassBNvm->PingSlotCtx.Datarate,
 8016e7a:	4b52      	ldr	r3, [pc, #328]	; (8016fc4 <LoRaMacClassBProcessPingSlot+0x1cc>)
 8016e7c:	681b      	ldr	r3, [r3, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8016e7e:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 8016e82:	4b4f      	ldr	r3, [pc, #316]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016e84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8016e88:	791a      	ldrb	r2, [r3, #4]
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError,
 8016e8a:	4b4d      	ldr	r3, [pc, #308]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016e8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	4c4e      	ldr	r4, [pc, #312]	; (8016fcc <LoRaMacClassBProcessPingSlot+0x1d4>)
 8016e94:	9400      	str	r4, [sp, #0]
 8016e96:	f002 fe48 	bl	8019b2a <RegionComputeRxWindowParameters>
                                                     ClassBNvm->PingSlotCtx.Datarate,
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
                                                     maxRxError,
                                                     &pingSlotRxConfig );
#endif /* LORAMAC_VERSION */
                    Ctx.PingSlotCtx.SymbolTimeout = pingSlotRxConfig.WindowTimeout;
 8016e9a:	4b4c      	ldr	r3, [pc, #304]	; (8016fcc <LoRaMacClassBProcessPingSlot+0x1d4>)
 8016e9c:	689b      	ldr	r3, [r3, #8]
 8016e9e:	b29a      	uxth	r2, r3
 8016ea0:	4b47      	ldr	r3, [pc, #284]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016ea2:	80da      	strh	r2, [r3, #6]

                    if( ( int32_t )pingSlotTime > pingSlotRxConfig.WindowOffset )
 8016ea4:	4b49      	ldr	r3, [pc, #292]	; (8016fcc <LoRaMacClassBProcessPingSlot+0x1d4>)
 8016ea6:	68db      	ldr	r3, [r3, #12]
 8016ea8:	683a      	ldr	r2, [r7, #0]
 8016eaa:	4293      	cmp	r3, r2
 8016eac:	da05      	bge.n	8016eba <LoRaMacClassBProcessPingSlot+0xc2>
                    {// Apply the window offset
                        pingSlotTime += pingSlotRxConfig.WindowOffset;
 8016eae:	4b47      	ldr	r3, [pc, #284]	; (8016fcc <LoRaMacClassBProcessPingSlot+0x1d4>)
 8016eb0:	68db      	ldr	r3, [r3, #12]
 8016eb2:	461a      	mov	r2, r3
 8016eb4:	683b      	ldr	r3, [r7, #0]
 8016eb6:	4413      	add	r3, r2
 8016eb8:	603b      	str	r3, [r7, #0]
                    }
                }

                // Start the timer if the ping slot time is in range
                Ctx.PingSlotState = PINGSLOT_STATE_IDLE;
 8016eba:	4b41      	ldr	r3, [pc, #260]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016ebc:	2202      	movs	r2, #2
 8016ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                TimerSetValue( &Ctx.PingSlotTimer, pingSlotTime );
 8016ec2:	683b      	ldr	r3, [r7, #0]
 8016ec4:	4619      	mov	r1, r3
 8016ec6:	4842      	ldr	r0, [pc, #264]	; (8016fd0 <LoRaMacClassBProcessPingSlot+0x1d8>)
 8016ec8:	f009 fb1e 	bl	8020508 <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.PingSlotTimer );
 8016ecc:	4840      	ldr	r0, [pc, #256]	; (8016fd0 <LoRaMacClassBProcessPingSlot+0x1d8>)
 8016ece:	f009 fa3d 	bl	802034c <UTIL_TIMER_Start>
            }
            break;
 8016ed2:	e06f      	b.n	8016fb4 <LoRaMacClassBProcessPingSlot+0x1bc>
        }
        case PINGSLOT_STATE_IDLE:
        {
            uint32_t frequency = ClassBNvm->PingSlotCtx.Frequency;
 8016ed4:	4b3b      	ldr	r3, [pc, #236]	; (8016fc4 <LoRaMacClassBProcessPingSlot+0x1cc>)
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	685b      	ldr	r3, [r3, #4]
 8016eda:	607b      	str	r3, [r7, #4]

            // Apply a custom frequency if the following bit is set
            if( ClassBNvm->PingSlotCtx.Ctrl.CustomFreq == 0 )
 8016edc:	4b39      	ldr	r3, [pc, #228]	; (8016fc4 <LoRaMacClassBProcessPingSlot+0x1cc>)
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	781b      	ldrb	r3, [r3, #0]
 8016ee2:	f003 0302 	and.w	r3, r3, #2
 8016ee6:	b2db      	uxtb	r3, r3
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d10b      	bne.n	8016f04 <LoRaMacClassBProcessPingSlot+0x10c>
            {
                // Restore floor plan
                frequency = CalcDownlinkChannelAndFrequency( *Ctx.LoRaMacClassBParams.LoRaMacDevAddr, Ctx.BeaconCtx.BeaconTime.Seconds,
 8016eec:	4b34      	ldr	r3, [pc, #208]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016eee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8016ef2:	6818      	ldr	r0, [r3, #0]
 8016ef4:	4b32      	ldr	r3, [pc, #200]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016ef6:	6919      	ldr	r1, [r3, #16]
 8016ef8:	2300      	movs	r3, #0
 8016efa:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 8016efe:	f7ff f927 	bl	8016150 <CalcDownlinkChannelAndFrequency>
 8016f02:	6078      	str	r0, [r7, #4]
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Open the ping slot window only, if there is no multicast ping slot
            // open. Multicast ping slots have always priority
            if( Ctx.MulticastSlotState != PINGSLOT_STATE_RX )
 8016f04:	4b2e      	ldr	r3, [pc, #184]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016f06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016f0a:	2b03      	cmp	r3, #3
 8016f0c:	d041      	beq.n	8016f92 <LoRaMacClassBProcessPingSlot+0x19a>
            {
                Ctx.PingSlotState = PINGSLOT_STATE_RX;
 8016f0e:	4b2c      	ldr	r3, [pc, #176]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016f10:	2203      	movs	r2, #3
 8016f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

                pingSlotRxConfig.Datarate = ClassBNvm->PingSlotCtx.Datarate;
 8016f16:	4b2b      	ldr	r3, [pc, #172]	; (8016fc4 <LoRaMacClassBProcessPingSlot+0x1cc>)
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8016f1e:	4b2b      	ldr	r3, [pc, #172]	; (8016fcc <LoRaMacClassBProcessPingSlot+0x1d4>)
 8016f20:	705a      	strb	r2, [r3, #1]
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 8016f22:	4b27      	ldr	r3, [pc, #156]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016f24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016f28:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8016f2c:	4b27      	ldr	r3, [pc, #156]	; (8016fcc <LoRaMacClassBProcessPingSlot+0x1d4>)
 8016f2e:	741a      	strb	r2, [r3, #16]
                pingSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport; /* ST_WORKAROUND: keep repeater feature */
 8016f30:	4b23      	ldr	r3, [pc, #140]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016f32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016f36:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8016f3a:	4b24      	ldr	r3, [pc, #144]	; (8016fcc <LoRaMacClassBProcessPingSlot+0x1d4>)
 8016f3c:	745a      	strb	r2, [r3, #17]
                pingSlotRxConfig.Frequency = frequency;
 8016f3e:	4a23      	ldr	r2, [pc, #140]	; (8016fcc <LoRaMacClassBProcessPingSlot+0x1d4>)
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	6053      	str	r3, [r2, #4]
                pingSlotRxConfig.RxContinuous = false;
 8016f44:	4b21      	ldr	r3, [pc, #132]	; (8016fcc <LoRaMacClassBProcessPingSlot+0x1d4>)
 8016f46:	2200      	movs	r2, #0
 8016f48:	749a      	strb	r2, [r3, #18]
                pingSlotRxConfig.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8016f4a:	4b20      	ldr	r3, [pc, #128]	; (8016fcc <LoRaMacClassBProcessPingSlot+0x1d4>)
 8016f4c:	2204      	movs	r2, #4
 8016f4e:	74da      	strb	r2, [r3, #19]

                RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &pingSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 8016f50:	4b1b      	ldr	r3, [pc, #108]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016f52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016f56:	7818      	ldrb	r0, [r3, #0]
 8016f58:	4b19      	ldr	r3, [pc, #100]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016f5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016f5e:	3304      	adds	r3, #4
 8016f60:	461a      	mov	r2, r3
 8016f62:	491a      	ldr	r1, [pc, #104]	; (8016fcc <LoRaMacClassBProcessPingSlot+0x1d4>)
 8016f64:	f002 fdfb 	bl	8019b5e <RegionRxConfig>

                if( pingSlotRxConfig.RxContinuous == false )
 8016f68:	4b18      	ldr	r3, [pc, #96]	; (8016fcc <LoRaMacClassBProcessPingSlot+0x1d4>)
 8016f6a:	7c9b      	ldrb	r3, [r3, #18]
 8016f6c:	f083 0301 	eor.w	r3, r3, #1
 8016f70:	b2db      	uxtb	r3, r3
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d008      	beq.n	8016f88 <LoRaMacClassBProcessPingSlot+0x190>
                {
                    Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 8016f76:	4b17      	ldr	r3, [pc, #92]	; (8016fd4 <LoRaMacClassBProcessPingSlot+0x1dc>)
 8016f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f7a:	4a11      	ldr	r2, [pc, #68]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016f7c:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 8016f80:	6892      	ldr	r2, [r2, #8]
 8016f82:	4610      	mov	r0, r2
 8016f84:	4798      	blx	r3
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
                TimerStart( &Ctx.PingSlotTimer );
            }
#endif /* LORAMAC_VERSION */
            break;
 8016f86:	e016      	b.n	8016fb6 <LoRaMacClassBProcessPingSlot+0x1be>
                    Radio.Rx( 0 ); // Continuous mode
 8016f88:	4b12      	ldr	r3, [pc, #72]	; (8016fd4 <LoRaMacClassBProcessPingSlot+0x1dc>)
 8016f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f8c:	2000      	movs	r0, #0
 8016f8e:	4798      	blx	r3
            break;
 8016f90:	e011      	b.n	8016fb6 <LoRaMacClassBProcessPingSlot+0x1be>
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8016f92:	4b0b      	ldr	r3, [pc, #44]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016f94:	2200      	movs	r2, #0
 8016f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 8016f9a:	211e      	movs	r1, #30
 8016f9c:	480c      	ldr	r0, [pc, #48]	; (8016fd0 <LoRaMacClassBProcessPingSlot+0x1d8>)
 8016f9e:	f009 fab3 	bl	8020508 <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.PingSlotTimer );
 8016fa2:	480b      	ldr	r0, [pc, #44]	; (8016fd0 <LoRaMacClassBProcessPingSlot+0x1d8>)
 8016fa4:	f009 f9d2 	bl	802034c <UTIL_TIMER_Start>
            break;
 8016fa8:	e005      	b.n	8016fb6 <LoRaMacClassBProcessPingSlot+0x1be>
        }
        default:
        {
            Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8016faa:	4b05      	ldr	r3, [pc, #20]	; (8016fc0 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016fac:	2200      	movs	r2, #0
 8016fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            break;
 8016fb2:	e000      	b.n	8016fb6 <LoRaMacClassBProcessPingSlot+0x1be>
            break;
 8016fb4:	bf00      	nop
        }
    }
}
 8016fb6:	bf00      	nop
 8016fb8:	370c      	adds	r7, #12
 8016fba:	46bd      	mov	sp, r7
 8016fbc:	bd90      	pop	{r4, r7, pc}
 8016fbe:	bf00      	nop
 8016fc0:	20002194 	.word	0x20002194
 8016fc4:	20002248 	.word	0x20002248
 8016fc8:	20002198 	.word	0x20002198
 8016fcc:	2000224c 	.word	0x2000224c
 8016fd0:	200021f0 	.word	0x200021f0
 8016fd4:	08021d00 	.word	0x08021d00

08016fd8 <LoRaMacClassBMulticastSlotTimerEvent>:
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b082      	sub	sp, #8
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;
 8016fe0:	4a08      	ldr	r2, [pc, #32]	; (8017004 <LoRaMacClassBMulticastSlotTimerEvent+0x2c>)
 8016fe2:	7813      	ldrb	r3, [r2, #0]
 8016fe4:	f043 0304 	orr.w	r3, r3, #4
 8016fe8:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 8016fea:	4b07      	ldr	r3, [pc, #28]	; (8017008 <LoRaMacClassBMulticastSlotTimerEvent+0x30>)
 8016fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d003      	beq.n	8016ffc <LoRaMacClassBMulticastSlotTimerEvent+0x24>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 8016ff4:	4b04      	ldr	r3, [pc, #16]	; (8017008 <LoRaMacClassBMulticastSlotTimerEvent+0x30>)
 8016ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ffa:	4798      	blx	r3
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016ffc:	bf00      	nop
 8016ffe:	3708      	adds	r7, #8
 8017000:	46bd      	mov	sp, r7
 8017002:	bd80      	pop	{r7, pc}
 8017004:	20002190 	.word	0x20002190
 8017008:	20002194 	.word	0x20002194

0801700c <LoRaMacClassBProcessMulticastSlot>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static void LoRaMacClassBProcessMulticastSlot( void )
{
 801700c:	b5b0      	push	{r4, r5, r7, lr}
 801700e:	b088      	sub	sp, #32
 8017010:	af02      	add	r7, sp, #8
    static RxConfigParams_t multicastSlotRxConfig;
    TimerTime_t multicastSlotTime = 0;
 8017012:	2300      	movs	r3, #0
 8017014:	617b      	str	r3, [r7, #20]
    TimerTime_t slotTime = 0;
 8017016:	2300      	movs	r3, #0
 8017018:	607b      	str	r3, [r7, #4]
    MulticastCtx_t *cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 801701a:	4b96      	ldr	r3, [pc, #600]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801701c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8017020:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint32_t maxRxError = 0;
    bool slotHasPriority = false;
#endif /* LORAMAC_VERSION */

    if( cur == NULL )
 8017022:	693b      	ldr	r3, [r7, #16]
 8017024:	2b00      	cmp	r3, #0
 8017026:	f000 811c 	beq.w	8017262 <LoRaMacClassBProcessMulticastSlot+0x256>
    {
        return;
    }

    if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 801702a:	4b92      	ldr	r3, [pc, #584]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801702c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017030:	2b03      	cmp	r3, #3
 8017032:	f000 8118 	beq.w	8017266 <LoRaMacClassBProcessMulticastSlot+0x25a>
    {
        // A multicast slot is already open
        return;
    }

    switch( Ctx.MulticastSlotState )
 8017036:	4b8f      	ldr	r3, [pc, #572]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017038:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801703c:	2b02      	cmp	r3, #2
 801703e:	f000 8092 	beq.w	8017166 <LoRaMacClassBProcessMulticastSlot+0x15a>
 8017042:	2b02      	cmp	r3, #2
 8017044:	f300 8108 	bgt.w	8017258 <LoRaMacClassBProcessMulticastSlot+0x24c>
 8017048:	2b00      	cmp	r3, #0
 801704a:	d002      	beq.n	8017052 <LoRaMacClassBProcessMulticastSlot+0x46>
 801704c:	2b01      	cmp	r3, #1
 801704e:	d021      	beq.n	8017094 <LoRaMacClassBProcessMulticastSlot+0x88>
 8017050:	e102      	b.n	8017258 <LoRaMacClassBProcessMulticastSlot+0x24c>
    {
        case PINGSLOT_STATE_CALC_PING_OFFSET:
        {
            // Compute all offsets for every multicast slots
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
 8017052:	2300      	movs	r3, #0
 8017054:	73fb      	strb	r3, [r7, #15]
 8017056:	e016      	b.n	8017086 <LoRaMacClassBProcessMulticastSlot+0x7a>
            {
                ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 8017058:	4b86      	ldr	r3, [pc, #536]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801705a:	691b      	ldr	r3, [r3, #16]
 801705c:	2200      	movs	r2, #0
 801705e:	461c      	mov	r4, r3
 8017060:	4615      	mov	r5, r2
 8017062:	693b      	ldr	r3, [r7, #16]
 8017064:	685a      	ldr	r2, [r3, #4]
 8017066:	693b      	ldr	r3, [r7, #16]
 8017068:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 801706a:	693b      	ldr	r3, [r7, #16]
 801706c:	3328      	adds	r3, #40	; 0x28
 801706e:	9300      	str	r3, [sp, #0]
 8017070:	460b      	mov	r3, r1
 8017072:	4620      	mov	r0, r4
 8017074:	4629      	mov	r1, r5
 8017076:	f7fe ffeb 	bl	8016050 <ComputePingOffset>
                                   cur->ChannelParams.Address,
                                   cur->PingPeriod,
                                   &( cur->PingOffset ) );
                cur++;
 801707a:	693b      	ldr	r3, [r7, #16]
 801707c:	332c      	adds	r3, #44	; 0x2c
 801707e:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
 8017080:	7bfb      	ldrb	r3, [r7, #15]
 8017082:	3301      	adds	r3, #1
 8017084:	73fb      	strb	r3, [r7, #15]
 8017086:	7bfb      	ldrb	r3, [r7, #15]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d0e5      	beq.n	8017058 <LoRaMacClassBProcessMulticastSlot+0x4c>
            }
            Ctx.MulticastSlotState = PINGSLOT_STATE_SET_TIMER;
 801708c:	4b79      	ldr	r3, [pc, #484]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801708e:	2201      	movs	r2, #1
 8017090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }
            // Intentional fall through
        case PINGSLOT_STATE_SET_TIMER:
        {
            cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 8017094:	4b77      	ldr	r3, [pc, #476]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017096:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801709a:	613b      	str	r3, [r7, #16]
            Ctx.PingSlotCtx.NextMulticastChannel = NULL;
 801709c:	4b75      	ldr	r3, [pc, #468]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801709e:	2200      	movs	r2, #0
 80170a0:	609a      	str	r2, [r3, #8]

            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80170a2:	2300      	movs	r3, #0
 80170a4:	73bb      	strb	r3, [r7, #14]
 80170a6:	e01f      	b.n	80170e8 <LoRaMacClassBProcessMulticastSlot+0xdc>
            {
                // Calculate the next slot time for every multicast slot
                if( CalcNextSlotTime( cur->PingOffset, cur->PingPeriod, cur->PingNb, &slotTime ) == true )
 80170a8:	693b      	ldr	r3, [r7, #16]
 80170aa:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 80170ac:	693b      	ldr	r3, [r7, #16]
 80170ae:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 80170b0:	693b      	ldr	r3, [r7, #16]
 80170b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80170b6:	b29a      	uxth	r2, r3
 80170b8:	1d3b      	adds	r3, r7, #4
 80170ba:	f7ff f94d 	bl	8016358 <CalcNextSlotTime>
 80170be:	4603      	mov	r3, r0
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d00b      	beq.n	80170dc <LoRaMacClassBProcessMulticastSlot+0xd0>
                {
                    if( ( multicastSlotTime == 0 ) || ( multicastSlotTime > slotTime ) )
 80170c4:	697b      	ldr	r3, [r7, #20]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d003      	beq.n	80170d2 <LoRaMacClassBProcessMulticastSlot+0xc6>
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	697a      	ldr	r2, [r7, #20]
 80170ce:	429a      	cmp	r2, r3
 80170d0:	d904      	bls.n	80170dc <LoRaMacClassBProcessMulticastSlot+0xd0>
                    {
                        // Update the slot time and the next multicast channel
                        multicastSlotTime = slotTime;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	617b      	str	r3, [r7, #20]
                        Ctx.PingSlotCtx.NextMulticastChannel = cur;
 80170d6:	4a67      	ldr	r2, [pc, #412]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80170d8:	693b      	ldr	r3, [r7, #16]
 80170da:	6093      	str	r3, [r2, #8]
                    }
                }
                cur++;
 80170dc:	693b      	ldr	r3, [r7, #16]
 80170de:	332c      	adds	r3, #44	; 0x2c
 80170e0:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80170e2:	7bbb      	ldrb	r3, [r7, #14]
 80170e4:	3301      	adds	r3, #1
 80170e6:	73bb      	strb	r3, [r7, #14]
 80170e8:	7bbb      	ldrb	r3, [r7, #14]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d0dc      	beq.n	80170a8 <LoRaMacClassBProcessMulticastSlot+0x9c>
            }

            // Schedule the next multicast slot
            if( Ctx.PingSlotCtx.NextMulticastChannel != NULL )
 80170ee:	4b61      	ldr	r3, [pc, #388]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80170f0:	689b      	ldr	r3, [r3, #8]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	f000 80b9 	beq.w	801726a <LoRaMacClassBProcessMulticastSlot+0x25e>
            {
                if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 )
 80170f8:	4b5e      	ldr	r3, [pc, #376]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80170fa:	7b1b      	ldrb	r3, [r3, #12]
 80170fc:	f003 0302 	and.w	r3, r3, #2
 8017100:	b2db      	uxtb	r3, r3
 8017102:	2b00      	cmp	r3, #0
 8017104:	d018      	beq.n	8017138 <LoRaMacClassBProcessMulticastSlot+0x12c>
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8017106:	4b5b      	ldr	r3, [pc, #364]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017108:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801710c:	7818      	ldrb	r0, [r3, #0]
                                                    ClassBNvm->PingSlotCtx.Datarate,
 801710e:	4b5a      	ldr	r3, [pc, #360]	; (8017278 <LoRaMacClassBProcessMulticastSlot+0x26c>)
 8017110:	681b      	ldr	r3, [r3, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8017112:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 8017116:	4b57      	ldr	r3, [pc, #348]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017118:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 801711c:	791a      	ldrb	r2, [r3, #4]
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError,
 801711e:	4b55      	ldr	r3, [pc, #340]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017120:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	4c55      	ldr	r4, [pc, #340]	; (801727c <LoRaMacClassBProcessMulticastSlot+0x270>)
 8017128:	9400      	str	r4, [sp, #0]
 801712a:	f002 fcfe 	bl	8019b2a <RegionComputeRxWindowParameters>
                                                    ClassBNvm->PingSlotCtx.Datarate,
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
                                                    maxRxError,
                                                    &multicastSlotRxConfig );
#endif /* LORAMAC_VERSION */
                    Ctx.PingSlotCtx.SymbolTimeout = multicastSlotRxConfig.WindowTimeout;
 801712e:	4b53      	ldr	r3, [pc, #332]	; (801727c <LoRaMacClassBProcessMulticastSlot+0x270>)
 8017130:	689b      	ldr	r3, [r3, #8]
 8017132:	b29a      	uxth	r2, r3
 8017134:	4b4f      	ldr	r3, [pc, #316]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017136:	80da      	strh	r2, [r3, #6]
                }

                if( ( int32_t )multicastSlotTime > multicastSlotRxConfig.WindowOffset )
 8017138:	4b50      	ldr	r3, [pc, #320]	; (801727c <LoRaMacClassBProcessMulticastSlot+0x270>)
 801713a:	68da      	ldr	r2, [r3, #12]
 801713c:	697b      	ldr	r3, [r7, #20]
 801713e:	429a      	cmp	r2, r3
 8017140:	da05      	bge.n	801714e <LoRaMacClassBProcessMulticastSlot+0x142>
                {// Apply the window offset
                    multicastSlotTime += multicastSlotRxConfig.WindowOffset;
 8017142:	4b4e      	ldr	r3, [pc, #312]	; (801727c <LoRaMacClassBProcessMulticastSlot+0x270>)
 8017144:	68db      	ldr	r3, [r3, #12]
 8017146:	461a      	mov	r2, r3
 8017148:	697b      	ldr	r3, [r7, #20]
 801714a:	4413      	add	r3, r2
 801714c:	617b      	str	r3, [r7, #20]
                }

                // Start the timer if the ping slot time is in range
                Ctx.MulticastSlotState = PINGSLOT_STATE_IDLE;
 801714e:	4b49      	ldr	r3, [pc, #292]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017150:	2202      	movs	r2, #2
 8017152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                TimerSetValue( &Ctx.MulticastSlotTimer, multicastSlotTime );
 8017156:	6979      	ldr	r1, [r7, #20]
 8017158:	4849      	ldr	r0, [pc, #292]	; (8017280 <LoRaMacClassBProcessMulticastSlot+0x274>)
 801715a:	f009 f9d5 	bl	8020508 <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.MulticastSlotTimer );
 801715e:	4848      	ldr	r0, [pc, #288]	; (8017280 <LoRaMacClassBProcessMulticastSlot+0x274>)
 8017160:	f009 f8f4 	bl	802034c <UTIL_TIMER_Start>
            }
            break;
 8017164:	e081      	b.n	801726a <LoRaMacClassBProcessMulticastSlot+0x25e>
        }
        case PINGSLOT_STATE_IDLE:
        {
            uint32_t frequency = 0;
 8017166:	2300      	movs	r3, #0
 8017168:	60bb      	str	r3, [r7, #8]

            // Verify if the multicast channel is valid
            if( Ctx.PingSlotCtx.NextMulticastChannel == NULL )
 801716a:	4b42      	ldr	r3, [pc, #264]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801716c:	689b      	ldr	r3, [r3, #8]
 801716e:	2b00      	cmp	r3, #0
 8017170:	d10b      	bne.n	801718a <LoRaMacClassBProcessMulticastSlot+0x17e>
            {
                Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8017172:	4b40      	ldr	r3, [pc, #256]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017174:	2200      	movs	r2, #0
 8017176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 801717a:	2101      	movs	r1, #1
 801717c:	4840      	ldr	r0, [pc, #256]	; (8017280 <LoRaMacClassBProcessMulticastSlot+0x274>)
 801717e:	f009 f9c3 	bl	8020508 <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.MulticastSlotTimer );
 8017182:	483f      	ldr	r0, [pc, #252]	; (8017280 <LoRaMacClassBProcessMulticastSlot+0x274>)
 8017184:	f009 f8e2 	bl	802034c <UTIL_TIMER_Start>
                break;
 8017188:	e070      	b.n	801726c <LoRaMacClassBProcessMulticastSlot+0x260>
            }

            // Apply frequency
            frequency = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Frequency;
 801718a:	4b3a      	ldr	r3, [pc, #232]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801718c:	689b      	ldr	r3, [r3, #8]
 801718e:	699b      	ldr	r3, [r3, #24]
 8017190:	60bb      	str	r3, [r7, #8]

            // Restore the floor plan frequency if there is no individual frequency assigned
            if( frequency == 0 )
 8017192:	68bb      	ldr	r3, [r7, #8]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d10a      	bne.n	80171ae <LoRaMacClassBProcessMulticastSlot+0x1a2>
            {
                // Restore floor plan
                frequency = CalcDownlinkChannelAndFrequency( Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.Address,
 8017198:	4b36      	ldr	r3, [pc, #216]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801719a:	689b      	ldr	r3, [r3, #8]
 801719c:	6858      	ldr	r0, [r3, #4]
 801719e:	4b35      	ldr	r3, [pc, #212]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80171a0:	6919      	ldr	r1, [r3, #16]
 80171a2:	2300      	movs	r3, #0
 80171a4:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 80171a8:	f7fe ffd2 	bl	8016150 <CalcDownlinkChannelAndFrequency>
 80171ac:	60b8      	str	r0, [r7, #8]
                                                             Ctx.BeaconCtx.BeaconTime.Seconds, CLASSB_BEACON_INTERVAL, false );
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Ctx.MulticastSlotState = PINGSLOT_STATE_RX;
 80171ae:	4b31      	ldr	r3, [pc, #196]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80171b0:	2203      	movs	r2, #3
 80171b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

            multicastSlotRxConfig.Datarate = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Datarate;
 80171b6:	4b2f      	ldr	r3, [pc, #188]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80171b8:	689b      	ldr	r3, [r3, #8]
 80171ba:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80171be:	4b2f      	ldr	r3, [pc, #188]	; (801727c <LoRaMacClassBProcessMulticastSlot+0x270>)
 80171c0:	705a      	strb	r2, [r3, #1]
            multicastSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 80171c2:	4b2c      	ldr	r3, [pc, #176]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80171c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80171c8:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80171cc:	4b2b      	ldr	r3, [pc, #172]	; (801727c <LoRaMacClassBProcessMulticastSlot+0x270>)
 80171ce:	741a      	strb	r2, [r3, #16]
            multicastSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport; /* ST_WORKAROUND: keep repeater feature */
 80171d0:	4b28      	ldr	r3, [pc, #160]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80171d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80171d6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80171da:	4b28      	ldr	r3, [pc, #160]	; (801727c <LoRaMacClassBProcessMulticastSlot+0x270>)
 80171dc:	745a      	strb	r2, [r3, #17]
            multicastSlotRxConfig.Frequency = frequency;
 80171de:	4a27      	ldr	r2, [pc, #156]	; (801727c <LoRaMacClassBProcessMulticastSlot+0x270>)
 80171e0:	68bb      	ldr	r3, [r7, #8]
 80171e2:	6053      	str	r3, [r2, #4]
            multicastSlotRxConfig.RxContinuous = false;
 80171e4:	4b25      	ldr	r3, [pc, #148]	; (801727c <LoRaMacClassBProcessMulticastSlot+0x270>)
 80171e6:	2200      	movs	r2, #0
 80171e8:	749a      	strb	r2, [r3, #18]
            multicastSlotRxConfig.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80171ea:	4b24      	ldr	r3, [pc, #144]	; (801727c <LoRaMacClassBProcessMulticastSlot+0x270>)
 80171ec:	2205      	movs	r2, #5
 80171ee:	74da      	strb	r2, [r3, #19]

            RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &multicastSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 80171f0:	4b20      	ldr	r3, [pc, #128]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80171f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80171f6:	7818      	ldrb	r0, [r3, #0]
 80171f8:	4b1e      	ldr	r3, [pc, #120]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80171fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80171fe:	3304      	adds	r3, #4
 8017200:	461a      	mov	r2, r3
 8017202:	491e      	ldr	r1, [pc, #120]	; (801727c <LoRaMacClassBProcessMulticastSlot+0x270>)
 8017204:	f002 fcab 	bl	8019b5e <RegionRxConfig>

            if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 8017208:	4b1a      	ldr	r3, [pc, #104]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801720a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801720e:	2b03      	cmp	r3, #3
 8017210:	d10d      	bne.n	801722e <LoRaMacClassBProcessMulticastSlot+0x222>
            {
                // Close ping slot window, if necessary. Multicast slots have priority
                Radio.Standby( );
 8017212:	4b1c      	ldr	r3, [pc, #112]	; (8017284 <LoRaMacClassBProcessMulticastSlot+0x278>)
 8017214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017216:	4798      	blx	r3
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8017218:	4b16      	ldr	r3, [pc, #88]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801721a:	2200      	movs	r2, #0
 801721c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 8017220:	211e      	movs	r1, #30
 8017222:	4819      	ldr	r0, [pc, #100]	; (8017288 <LoRaMacClassBProcessMulticastSlot+0x27c>)
 8017224:	f009 f970 	bl	8020508 <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.PingSlotTimer );
 8017228:	4817      	ldr	r0, [pc, #92]	; (8017288 <LoRaMacClassBProcessMulticastSlot+0x27c>)
 801722a:	f009 f88f 	bl	802034c <UTIL_TIMER_Start>
            }

            if( multicastSlotRxConfig.RxContinuous == false )
 801722e:	4b13      	ldr	r3, [pc, #76]	; (801727c <LoRaMacClassBProcessMulticastSlot+0x270>)
 8017230:	7c9b      	ldrb	r3, [r3, #18]
 8017232:	f083 0301 	eor.w	r3, r3, #1
 8017236:	b2db      	uxtb	r3, r3
 8017238:	2b00      	cmp	r3, #0
 801723a:	d008      	beq.n	801724e <LoRaMacClassBProcessMulticastSlot+0x242>
            {
                Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 801723c:	4b11      	ldr	r3, [pc, #68]	; (8017284 <LoRaMacClassBProcessMulticastSlot+0x278>)
 801723e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017240:	4a0c      	ldr	r2, [pc, #48]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017242:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 8017246:	6892      	ldr	r2, [r2, #8]
 8017248:	4610      	mov	r0, r2
 801724a:	4798      	blx	r3
                Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
                TimerSetValue( &Ctx.MulticastSlotTimer, CLASSB_PING_SLOT_WINDOW );
                TimerStart( &Ctx.MulticastSlotTimer );
            }
#endif /* LORAMAC_VERSION */
            break;
 801724c:	e00e      	b.n	801726c <LoRaMacClassBProcessMulticastSlot+0x260>
                Radio.Rx( 0 ); // Continuous mode
 801724e:	4b0d      	ldr	r3, [pc, #52]	; (8017284 <LoRaMacClassBProcessMulticastSlot+0x278>)
 8017250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017252:	2000      	movs	r0, #0
 8017254:	4798      	blx	r3
            break;
 8017256:	e009      	b.n	801726c <LoRaMacClassBProcessMulticastSlot+0x260>
        }
        default:
        {
            Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8017258:	4b06      	ldr	r3, [pc, #24]	; (8017274 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801725a:	2200      	movs	r2, #0
 801725c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            break;
 8017260:	e004      	b.n	801726c <LoRaMacClassBProcessMulticastSlot+0x260>
        return;
 8017262:	bf00      	nop
 8017264:	e002      	b.n	801726c <LoRaMacClassBProcessMulticastSlot+0x260>
        return;
 8017266:	bf00      	nop
 8017268:	e000      	b.n	801726c <LoRaMacClassBProcessMulticastSlot+0x260>
            break;
 801726a:	bf00      	nop
        }
    }
}
 801726c:	3718      	adds	r7, #24
 801726e:	46bd      	mov	sp, r7
 8017270:	bdb0      	pop	{r4, r5, r7, pc}
 8017272:	bf00      	nop
 8017274:	20002194 	.word	0x20002194
 8017278:	20002248 	.word	0x20002248
 801727c:	20002260 	.word	0x20002260
 8017280:	20002208 	.word	0x20002208
 8017284:	08021d00 	.word	0x08021d00
 8017288:	200021f0 	.word	0x200021f0

0801728c <LoRaMacClassBRxBeacon>:
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801728c:	b590      	push	{r4, r7, lr}
 801728e:	b095      	sub	sp, #84	; 0x54
 8017290:	af04      	add	r7, sp, #16
 8017292:	6078      	str	r0, [r7, #4]
 8017294:	460b      	mov	r3, r1
 8017296:	807b      	strh	r3, [r7, #2]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    bool beaconProcessed = false;
 8017298:	2300      	movs	r3, #0
 801729a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint16_t crc0 = 0;
 801729e:	2300      	movs	r3, #0
 80172a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    uint16_t crc1 = 0;
 80172a2:	2300      	movs	r3, #0
 80172a4:	877b      	strh	r3, [r7, #58]	; 0x3a
    uint16_t beaconCrc0 = 0;
 80172a6:	2300      	movs	r3, #0
 80172a8:	873b      	strh	r3, [r7, #56]	; 0x38
    uint16_t beaconCrc1 = 0;
 80172aa:	2300      	movs	r3, #0
 80172ac:	86fb      	strh	r3, [r7, #54]	; 0x36

    getPhy.Attribute = PHY_BEACON_FORMAT;
 80172ae:	2331      	movs	r3, #49	; 0x31
 80172b0:	763b      	strb	r3, [r7, #24]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 80172b2:	4bb0      	ldr	r3, [pc, #704]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 80172b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80172b8:	781b      	ldrb	r3, [r3, #0]
 80172ba:	f107 0218 	add.w	r2, r7, #24
 80172be:	4611      	mov	r1, r2
 80172c0:	4618      	mov	r0, r3
 80172c2:	f002 fbbb 	bl	8019a3c <RegionGetPhyParam>
 80172c6:	4603      	mov	r3, r0
 80172c8:	617b      	str	r3, [r7, #20]

    // Verify if we are in the state where we expect a beacon
    if( ( Ctx.BeaconState == BEACON_STATE_RX ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 80172ca:	4baa      	ldr	r3, [pc, #680]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 80172cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80172d0:	2b09      	cmp	r3, #9
 80172d2:	d007      	beq.n	80172e4 <LoRaMacClassBRxBeacon+0x58>
 80172d4:	4ba7      	ldr	r3, [pc, #668]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 80172d6:	7b1b      	ldrb	r3, [r3, #12]
 80172d8:	f003 0310 	and.w	r3, r3, #16
 80172dc:	b2db      	uxtb	r3, r3
 80172de:	2b00      	cmp	r3, #0
 80172e0:	f000 8142 	beq.w	8017568 <LoRaMacClassBRxBeacon+0x2dc>
    {
        if( size == phyParam.BeaconFormat.BeaconSize )
 80172e4:	7d3b      	ldrb	r3, [r7, #20]
 80172e6:	b29b      	uxth	r3, r3
 80172e8:	887a      	ldrh	r2, [r7, #2]
 80172ea:	429a      	cmp	r2, r3
 80172ec:	f040 812d 	bne.w	801754a <LoRaMacClassBRxBeacon+0x2be>
            // Field: | RFU1 | Time | CRC1 | GwSpecific | RFU2 | CRC2 |
            //
            // Field RFU1 and RFU2 have variable sizes. It depends on the region specific implementation

            // Read CRC1 field from the frame
            beaconCrc0 = ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4] ) & 0x00FF;
 80172f0:	7d7b      	ldrb	r3, [r7, #21]
 80172f2:	3304      	adds	r3, #4
 80172f4:	687a      	ldr	r2, [r7, #4]
 80172f6:	4413      	add	r3, r2
 80172f8:	781b      	ldrb	r3, [r3, #0]
 80172fa:	873b      	strh	r3, [r7, #56]	; 0x38
            beaconCrc0 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 1] << 8 ) & 0xFF00;
 80172fc:	7d7b      	ldrb	r3, [r7, #21]
 80172fe:	3305      	adds	r3, #5
 8017300:	687a      	ldr	r2, [r7, #4]
 8017302:	4413      	add	r3, r2
 8017304:	781b      	ldrb	r3, [r3, #0]
 8017306:	021b      	lsls	r3, r3, #8
 8017308:	b21a      	sxth	r2, r3
 801730a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801730e:	4313      	orrs	r3, r2
 8017310:	b21b      	sxth	r3, r3
 8017312:	873b      	strh	r3, [r7, #56]	; 0x38
            crc0 = BeaconCrc( payload, phyParam.BeaconFormat.Rfu1Size + 4 );
 8017314:	7d7b      	ldrb	r3, [r7, #21]
 8017316:	b29b      	uxth	r3, r3
 8017318:	3304      	adds	r3, #4
 801731a:	b29b      	uxth	r3, r3
 801731c:	4619      	mov	r1, r3
 801731e:	6878      	ldr	r0, [r7, #4]
 8017320:	f7ff f8a2 	bl	8016468 <BeaconCrc>
 8017324:	4603      	mov	r3, r0
 8017326:	87bb      	strh	r3, [r7, #60]	; 0x3c

            // Validate the first crc of the beacon frame
            if( crc0 == beaconCrc0 )
 8017328:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801732a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801732c:	429a      	cmp	r2, r3
 801732e:	d13b      	bne.n	80173a8 <LoRaMacClassBRxBeacon+0x11c>
            {
                // Read Time field from the frame
                Ctx.BeaconCtx.BeaconTime.Seconds  = ( ( uint32_t )payload[phyParam.BeaconFormat.Rfu1Size] ) & 0x000000FF;
 8017330:	7d7b      	ldrb	r3, [r7, #21]
 8017332:	461a      	mov	r2, r3
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	4413      	add	r3, r2
 8017338:	781b      	ldrb	r3, [r3, #0]
 801733a:	461a      	mov	r2, r3
 801733c:	4b8d      	ldr	r3, [pc, #564]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 801733e:	611a      	str	r2, [r3, #16]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 1] << 8 ) ) & 0x0000FF00;
 8017340:	4b8c      	ldr	r3, [pc, #560]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 8017342:	691a      	ldr	r2, [r3, #16]
 8017344:	7d7b      	ldrb	r3, [r7, #21]
 8017346:	3301      	adds	r3, #1
 8017348:	6879      	ldr	r1, [r7, #4]
 801734a:	440b      	add	r3, r1
 801734c:	781b      	ldrb	r3, [r3, #0]
 801734e:	021b      	lsls	r3, r3, #8
 8017350:	b29b      	uxth	r3, r3
 8017352:	4313      	orrs	r3, r2
 8017354:	4a87      	ldr	r2, [pc, #540]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 8017356:	6113      	str	r3, [r2, #16]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 2] << 16 ) ) & 0x00FF0000;
 8017358:	4b86      	ldr	r3, [pc, #536]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 801735a:	691a      	ldr	r2, [r3, #16]
 801735c:	7d7b      	ldrb	r3, [r7, #21]
 801735e:	3302      	adds	r3, #2
 8017360:	6879      	ldr	r1, [r7, #4]
 8017362:	440b      	add	r3, r1
 8017364:	781b      	ldrb	r3, [r3, #0]
 8017366:	041b      	lsls	r3, r3, #16
 8017368:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801736c:	4313      	orrs	r3, r2
 801736e:	4a81      	ldr	r2, [pc, #516]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 8017370:	6113      	str	r3, [r2, #16]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 3] << 24 ) ) & 0xFF000000;
 8017372:	4b80      	ldr	r3, [pc, #512]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 8017374:	691b      	ldr	r3, [r3, #16]
 8017376:	7d7a      	ldrb	r2, [r7, #21]
 8017378:	3203      	adds	r2, #3
 801737a:	6879      	ldr	r1, [r7, #4]
 801737c:	440a      	add	r2, r1
 801737e:	7812      	ldrb	r2, [r2, #0]
 8017380:	0612      	lsls	r2, r2, #24
 8017382:	4313      	orrs	r3, r2
 8017384:	4a7b      	ldr	r2, [pc, #492]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 8017386:	6113      	str	r3, [r2, #16]
                Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 8017388:	4b7a      	ldr	r3, [pc, #488]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 801738a:	2200      	movs	r2, #0
 801738c:	829a      	strh	r2, [r3, #20]
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Time = Ctx.BeaconCtx.BeaconTime;
 801738e:	4b79      	ldr	r3, [pc, #484]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 8017390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017394:	4a77      	ldr	r2, [pc, #476]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 8017396:	3308      	adds	r3, #8
 8017398:	3210      	adds	r2, #16
 801739a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801739e:	e883 0003 	stmia.w	r3, {r0, r1}
                beaconProcessed = true;
 80173a2:	2301      	movs	r3, #1
 80173a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            }

            // Read CRC2 field from the frame
            beaconCrc1 = ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size] ) & 0x00FF;
 80173a8:	7d7b      	ldrb	r3, [r7, #21]
 80173aa:	330d      	adds	r3, #13
 80173ac:	7dba      	ldrb	r2, [r7, #22]
 80173ae:	4413      	add	r3, r2
 80173b0:	461a      	mov	r2, r3
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	4413      	add	r3, r2
 80173b6:	781b      	ldrb	r3, [r3, #0]
 80173b8:	86fb      	strh	r3, [r7, #54]	; 0x36
            beaconCrc1 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size + 1] << 8 ) & 0xFF00;
 80173ba:	7d7b      	ldrb	r3, [r7, #21]
 80173bc:	330d      	adds	r3, #13
 80173be:	7dba      	ldrb	r2, [r7, #22]
 80173c0:	4413      	add	r3, r2
 80173c2:	3301      	adds	r3, #1
 80173c4:	687a      	ldr	r2, [r7, #4]
 80173c6:	4413      	add	r3, r2
 80173c8:	781b      	ldrb	r3, [r3, #0]
 80173ca:	021b      	lsls	r3, r3, #8
 80173cc:	b21a      	sxth	r2, r3
 80173ce:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80173d2:	4313      	orrs	r3, r2
 80173d4:	b21b      	sxth	r3, r3
 80173d6:	86fb      	strh	r3, [r7, #54]	; 0x36
            crc1 = BeaconCrc( &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2], 7 + phyParam.BeaconFormat.Rfu2Size );
 80173d8:	7d7b      	ldrb	r3, [r7, #21]
 80173da:	3306      	adds	r3, #6
 80173dc:	687a      	ldr	r2, [r7, #4]
 80173de:	441a      	add	r2, r3
 80173e0:	7dbb      	ldrb	r3, [r7, #22]
 80173e2:	b29b      	uxth	r3, r3
 80173e4:	3307      	adds	r3, #7
 80173e6:	b29b      	uxth	r3, r3
 80173e8:	4619      	mov	r1, r3
 80173ea:	4610      	mov	r0, r2
 80173ec:	f7ff f83c 	bl	8016468 <BeaconCrc>
 80173f0:	4603      	mov	r3, r0
 80173f2:	877b      	strh	r3, [r7, #58]	; 0x3a

            // Validate the second crc of the beacon frame
            if( crc1 == beaconCrc1 )
 80173f4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80173f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80173f8:	429a      	cmp	r2, r3
 80173fa:	d115      	bne.n	8017428 <LoRaMacClassBRxBeacon+0x19c>
            {
                // Read GwSpecific field from the frame
                // The GwSpecific field contains 1 byte InfoDesc and 6 bytes Info
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.InfoDesc = payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2];
 80173fc:	7d7b      	ldrb	r3, [r7, #21]
 80173fe:	3306      	adds	r3, #6
 8017400:	687a      	ldr	r2, [r7, #4]
 8017402:	441a      	add	r2, r3
 8017404:	4b5b      	ldr	r3, [pc, #364]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 8017406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801740a:	7812      	ldrb	r2, [r2, #0]
 801740c:	765a      	strb	r2, [r3, #25]
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 1], 6 );
 801740e:	4b59      	ldr	r3, [pc, #356]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 8017410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017414:	f103 001a 	add.w	r0, r3, #26
 8017418:	7d7b      	ldrb	r3, [r7, #21]
 801741a:	3307      	adds	r3, #7
 801741c:	687a      	ldr	r2, [r7, #4]
 801741e:	4413      	add	r3, r2
 8017420:	2206      	movs	r2, #6
 8017422:	4619      	mov	r1, r3
 8017424:	f004 feb5 	bl	801c192 <memcpy1>
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 2 + 1], 6 );
            }
#endif /* LORAMAC_VERSION */

            // Reset beacon variables, if one of the crc is valid
            if( beaconProcessed == true )
 8017428:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801742c:	2b00      	cmp	r3, #0
 801742e:	f000 808c 	beq.w	801754a <LoRaMacClassBRxBeacon+0x2be>
            {
                uint32_t spreadingFactor = 0;
 8017432:	2300      	movs	r3, #0
 8017434:	633b      	str	r3, [r7, #48]	; 0x30
                uint32_t bandwidth = 0;
 8017436:	2300      	movs	r3, #0
 8017438:	62fb      	str	r3, [r7, #44]	; 0x2c

                getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 801743a:	2332      	movs	r3, #50	; 0x32
 801743c:	763b      	strb	r3, [r7, #24]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 801743e:	4b4d      	ldr	r3, [pc, #308]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 8017440:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017444:	781b      	ldrb	r3, [r3, #0]
 8017446:	f107 0218 	add.w	r2, r7, #24
 801744a:	4611      	mov	r1, r2
 801744c:	4618      	mov	r0, r3
 801744e:	f002 faf5 	bl	8019a3c <RegionGetPhyParam>
 8017452:	4603      	mov	r3, r0
 8017454:	617b      	str	r3, [r7, #20]

                getPhy.Attribute = PHY_SF_FROM_DR;
 8017456:	2338      	movs	r3, #56	; 0x38
 8017458:	763b      	strb	r3, [r7, #24]
                getPhy.Datarate = phyParam.Value;
 801745a:	697b      	ldr	r3, [r7, #20]
 801745c:	b25b      	sxtb	r3, r3
 801745e:	767b      	strb	r3, [r7, #25]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8017460:	4b44      	ldr	r3, [pc, #272]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 8017462:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017466:	781b      	ldrb	r3, [r3, #0]
 8017468:	f107 0218 	add.w	r2, r7, #24
 801746c:	4611      	mov	r1, r2
 801746e:	4618      	mov	r0, r3
 8017470:	f002 fae4 	bl	8019a3c <RegionGetPhyParam>
 8017474:	4603      	mov	r3, r0
 8017476:	617b      	str	r3, [r7, #20]
                spreadingFactor = phyParam.Value;
 8017478:	697b      	ldr	r3, [r7, #20]
 801747a:	633b      	str	r3, [r7, #48]	; 0x30

                getPhy.Attribute = PHY_BW_FROM_DR;
 801747c:	2339      	movs	r3, #57	; 0x39
 801747e:	763b      	strb	r3, [r7, #24]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8017480:	4b3c      	ldr	r3, [pc, #240]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 8017482:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017486:	781b      	ldrb	r3, [r3, #0]
 8017488:	f107 0218 	add.w	r2, r7, #24
 801748c:	4611      	mov	r1, r2
 801748e:	4618      	mov	r0, r3
 8017490:	f002 fad4 	bl	8019a3c <RegionGetPhyParam>
 8017494:	4603      	mov	r3, r0
 8017496:	617b      	str	r3, [r7, #20]
                bandwidth = phyParam.Value;
 8017498:	697b      	ldr	r3, [r7, #20]
 801749a:	62fb      	str	r3, [r7, #44]	; 0x2c

                TimerTime_t time = Radio.TimeOnAir( MODEM_LORA, bandwidth, spreadingFactor, 1, 10, true, size, false );
 801749c:	4b36      	ldr	r3, [pc, #216]	; (8017578 <LoRaMacClassBRxBeacon+0x2ec>)
 801749e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80174a0:	887b      	ldrh	r3, [r7, #2]
 80174a2:	b2db      	uxtb	r3, r3
 80174a4:	2200      	movs	r2, #0
 80174a6:	9203      	str	r2, [sp, #12]
 80174a8:	9302      	str	r3, [sp, #8]
 80174aa:	2301      	movs	r3, #1
 80174ac:	9301      	str	r3, [sp, #4]
 80174ae:	230a      	movs	r3, #10
 80174b0:	9300      	str	r3, [sp, #0]
 80174b2:	2301      	movs	r3, #1
 80174b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80174b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80174b8:	2001      	movs	r0, #1
 80174ba:	47a0      	blx	r4
 80174bc:	62b8      	str	r0, [r7, #40]	; 0x28
                SysTime_t timeOnAir;
                timeOnAir.Seconds = time / 1000;
 80174be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174c0:	4a2e      	ldr	r2, [pc, #184]	; (801757c <LoRaMacClassBRxBeacon+0x2f0>)
 80174c2:	fba2 2303 	umull	r2, r3, r2, r3
 80174c6:	099b      	lsrs	r3, r3, #6
 80174c8:	60fb      	str	r3, [r7, #12]
                timeOnAir.SubSeconds = time - timeOnAir.Seconds * 1000;
 80174ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174cc:	b29a      	uxth	r2, r3
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	b29b      	uxth	r3, r3
 80174d2:	4619      	mov	r1, r3
 80174d4:	0149      	lsls	r1, r1, #5
 80174d6:	1ac9      	subs	r1, r1, r3
 80174d8:	0089      	lsls	r1, r1, #2
 80174da:	440b      	add	r3, r1
 80174dc:	00db      	lsls	r3, r3, #3
 80174de:	b29b      	uxth	r3, r3
 80174e0:	1ad3      	subs	r3, r2, r3
 80174e2:	b29b      	uxth	r3, r3
 80174e4:	b21b      	sxth	r3, r3
 80174e6:	823b      	strh	r3, [r7, #16]

                Ctx.BeaconCtx.LastBeaconRx = Ctx.BeaconCtx.BeaconTime;
 80174e8:	4b22      	ldr	r3, [pc, #136]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 80174ea:	4a22      	ldr	r2, [pc, #136]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 80174ec:	3318      	adds	r3, #24
 80174ee:	3210      	adds	r2, #16
 80174f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80174f4:	e883 0003 	stmia.w	r3, {r0, r1}
                Ctx.BeaconCtx.LastBeaconRx.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80174f8:	4b1e      	ldr	r3, [pc, #120]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 80174fa:	699a      	ldr	r2, [r3, #24]
 80174fc:	4b20      	ldr	r3, [pc, #128]	; (8017580 <LoRaMacClassBRxBeacon+0x2f4>)
 80174fe:	4413      	add	r3, r2
 8017500:	4a1c      	ldr	r2, [pc, #112]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 8017502:	6193      	str	r3, [r2, #24]

                // Update system time.
                SysTimeSet( SysTimeAdd( Ctx.BeaconCtx.LastBeaconRx, timeOnAir ) );
 8017504:	f107 0020 	add.w	r0, r7, #32
 8017508:	4a1a      	ldr	r2, [pc, #104]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 801750a:	693b      	ldr	r3, [r7, #16]
 801750c:	9300      	str	r3, [sp, #0]
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	3218      	adds	r2, #24
 8017512:	ca06      	ldmia	r2, {r1, r2}
 8017514:	f008 f97c 	bl	801f810 <SysTimeAdd>
 8017518:	f107 0320 	add.w	r3, r7, #32
 801751c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017520:	f008 f9e8 	bl	801f8f4 <SysTimeSet>

                Ctx.BeaconCtx.Ctrl.BeaconAcquired = 1;
 8017524:	4a13      	ldr	r2, [pc, #76]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 8017526:	7b13      	ldrb	r3, [r2, #12]
 8017528:	f043 0302 	orr.w	r3, r3, #2
 801752c:	7313      	strb	r3, [r2, #12]
                Ctx.BeaconCtx.Ctrl.BeaconMode = 1;
 801752e:	4a11      	ldr	r2, [pc, #68]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 8017530:	7b13      	ldrb	r3, [r2, #12]
 8017532:	f043 0301 	orr.w	r3, r3, #1
 8017536:	7313      	strb	r3, [r2, #12]
                ResetWindowTimeout( );
 8017538:	f7ff f8a8 	bl	801668c <ResetWindowTimeout>
                Ctx.BeaconState = BEACON_STATE_LOCKED;
 801753c:	4b0d      	ldr	r3, [pc, #52]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 801753e:	2205      	movs	r2, #5
 8017540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

                LoRaMacClassBBeaconTimerEvent( NULL );
 8017544:	2000      	movs	r0, #0
 8017546:	f7ff fa3d 	bl	80169c4 <LoRaMacClassBBeaconTimerEvent>
            }
        }

        if( Ctx.BeaconState == BEACON_STATE_RX )
 801754a:	4b0a      	ldr	r3, [pc, #40]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 801754c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017550:	2b09      	cmp	r3, #9
 8017552:	d106      	bne.n	8017562 <LoRaMacClassBRxBeacon+0x2d6>
        {
            Ctx.BeaconState = BEACON_STATE_TIMEOUT;
 8017554:	4b07      	ldr	r3, [pc, #28]	; (8017574 <LoRaMacClassBRxBeacon+0x2e8>)
 8017556:	2202      	movs	r2, #2
 8017558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            LoRaMacClassBBeaconTimerEvent( NULL );
 801755c:	2000      	movs	r0, #0
 801755e:	f7ff fa31 	bl	80169c4 <LoRaMacClassBBeaconTimerEvent>
        // If it receives a frame which is
        // 1. not a beacon or
        // 2. a beacon with a crc fail
        // the MAC shall ignore the frame completely. Thus, the function must always return true, even if no
        // valid beacon has been received.
        beaconProcessed = true;
 8017562:	2301      	movs	r3, #1
 8017564:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    return beaconProcessed;
 8017568:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801756c:	4618      	mov	r0, r3
 801756e:	3744      	adds	r7, #68	; 0x44
 8017570:	46bd      	mov	sp, r7
 8017572:	bd90      	pop	{r4, r7, pc}
 8017574:	20002194 	.word	0x20002194
 8017578:	08021d00 	.word	0x08021d00
 801757c:	10624dd3 	.word	0x10624dd3
 8017580:	12d53d80 	.word	0x12d53d80

08017584 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8017584:	b480      	push	{r7}
 8017586:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 8017588:	4b09      	ldr	r3, [pc, #36]	; (80175b0 <LoRaMacClassBIsBeaconExpected+0x2c>)
 801758a:	7b1b      	ldrb	r3, [r3, #12]
 801758c:	f003 0310 	and.w	r3, r3, #16
 8017590:	b2db      	uxtb	r3, r3
 8017592:	2b00      	cmp	r3, #0
 8017594:	d104      	bne.n	80175a0 <LoRaMacClassBIsBeaconExpected+0x1c>
        ( Ctx.BeaconState == BEACON_STATE_RX ) )
 8017596:	4b06      	ldr	r3, [pc, #24]	; (80175b0 <LoRaMacClassBIsBeaconExpected+0x2c>)
 8017598:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 801759c:	2b09      	cmp	r3, #9
 801759e:	d101      	bne.n	80175a4 <LoRaMacClassBIsBeaconExpected+0x20>
    {
        return true;
 80175a0:	2301      	movs	r3, #1
 80175a2:	e000      	b.n	80175a6 <LoRaMacClassBIsBeaconExpected+0x22>
    }
    return false;
 80175a4:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80175a6:	4618      	mov	r0, r3
 80175a8:	46bd      	mov	sp, r7
 80175aa:	bc80      	pop	{r7}
 80175ac:	4770      	bx	lr
 80175ae:	bf00      	nop
 80175b0:	20002194 	.word	0x20002194

080175b4 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80175b4:	b480      	push	{r7}
 80175b6:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 80175b8:	4b05      	ldr	r3, [pc, #20]	; (80175d0 <LoRaMacClassBIsPingExpected+0x1c>)
 80175ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80175be:	2b03      	cmp	r3, #3
 80175c0:	d101      	bne.n	80175c6 <LoRaMacClassBIsPingExpected+0x12>
    {
        return true;
 80175c2:	2301      	movs	r3, #1
 80175c4:	e000      	b.n	80175c8 <LoRaMacClassBIsPingExpected+0x14>
    }
    return false;
 80175c6:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80175c8:	4618      	mov	r0, r3
 80175ca:	46bd      	mov	sp, r7
 80175cc:	bc80      	pop	{r7}
 80175ce:	4770      	bx	lr
 80175d0:	20002194 	.word	0x20002194

080175d4 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80175d4:	b480      	push	{r7}
 80175d6:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 80175d8:	4b05      	ldr	r3, [pc, #20]	; (80175f0 <LoRaMacClassBIsMulticastExpected+0x1c>)
 80175da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80175de:	2b03      	cmp	r3, #3
 80175e0:	d101      	bne.n	80175e6 <LoRaMacClassBIsMulticastExpected+0x12>
    {
        return true;
 80175e2:	2301      	movs	r3, #1
 80175e4:	e000      	b.n	80175e8 <LoRaMacClassBIsMulticastExpected+0x14>
    }
    return false;
 80175e6:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80175e8:	4618      	mov	r0, r3
 80175ea:	46bd      	mov	sp, r7
 80175ec:	bc80      	pop	{r7}
 80175ee:	4770      	bx	lr
 80175f0:	20002194 	.word	0x20002194

080175f4 <LoRaMacClassBIsAcquisitionPending>:

bool LoRaMacClassBIsAcquisitionPending( void )
{
 80175f4:	b480      	push	{r7}
 80175f6:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 80175f8:	4b06      	ldr	r3, [pc, #24]	; (8017614 <LoRaMacClassBIsAcquisitionPending+0x20>)
 80175fa:	7b1b      	ldrb	r3, [r3, #12]
 80175fc:	f003 0310 	and.w	r3, r3, #16
 8017600:	b2db      	uxtb	r3, r3
 8017602:	2b00      	cmp	r3, #0
 8017604:	d001      	beq.n	801760a <LoRaMacClassBIsAcquisitionPending+0x16>
    {
        return true;
 8017606:	2301      	movs	r3, #1
 8017608:	e000      	b.n	801760c <LoRaMacClassBIsAcquisitionPending+0x18>
    }
    return false;
 801760a:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801760c:	4618      	mov	r0, r3
 801760e:	46bd      	mov	sp, r7
 8017610:	bc80      	pop	{r7}
 8017612:	4770      	bx	lr
 8017614:	20002194 	.word	0x20002194

08017618 <LoRaMacClassBIsBeaconModeActive>:

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8017618:	b480      	push	{r7}
 801761a:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 801761c:	4b09      	ldr	r3, [pc, #36]	; (8017644 <LoRaMacClassBIsBeaconModeActive+0x2c>)
 801761e:	7b1b      	ldrb	r3, [r3, #12]
 8017620:	f003 0301 	and.w	r3, r3, #1
 8017624:	b2db      	uxtb	r3, r3
 8017626:	2b00      	cmp	r3, #0
 8017628:	d104      	bne.n	8017634 <LoRaMacClassBIsBeaconModeActive+0x1c>
        ( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME ) )
 801762a:	4b06      	ldr	r3, [pc, #24]	; (8017644 <LoRaMacClassBIsBeaconModeActive+0x2c>)
 801762c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 8017630:	2b01      	cmp	r3, #1
 8017632:	d101      	bne.n	8017638 <LoRaMacClassBIsBeaconModeActive+0x20>
    {
        return true;
 8017634:	2301      	movs	r3, #1
 8017636:	e000      	b.n	801763a <LoRaMacClassBIsBeaconModeActive+0x22>
    }
    return false;
 8017638:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801763a:	4618      	mov	r0, r3
 801763c:	46bd      	mov	sp, r7
 801763e:	bc80      	pop	{r7}
 8017640:	4770      	bx	lr
 8017642:	bf00      	nop
 8017644:	20002194 	.word	0x20002194

08017648 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8017648:	b590      	push	{r4, r7, lr}
 801764a:	b083      	sub	sp, #12
 801764c:	af00      	add	r7, sp, #0
 801764e:	4603      	mov	r3, r0
 8017650:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
 8017652:	79fb      	ldrb	r3, [r7, #7]
 8017654:	b29b      	uxth	r3, r3
 8017656:	4a0a      	ldr	r2, [pc, #40]	; (8017680 <LoRaMacClassBSetPingSlotInfo+0x38>)
 8017658:	6814      	ldr	r4, [r2, #0]
 801765a:	4618      	mov	r0, r3
 801765c:	f7ff f8d6 	bl	801680c <CalcPingNb>
 8017660:	4603      	mov	r3, r0
 8017662:	7063      	strb	r3, [r4, #1]
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
 8017664:	4b06      	ldr	r3, [pc, #24]	; (8017680 <LoRaMacClassBSetPingSlotInfo+0x38>)
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	785b      	ldrb	r3, [r3, #1]
 801766a:	4a05      	ldr	r2, [pc, #20]	; (8017680 <LoRaMacClassBSetPingSlotInfo+0x38>)
 801766c:	6814      	ldr	r4, [r2, #0]
 801766e:	4618      	mov	r0, r3
 8017670:	f7ff f8db 	bl	801682a <CalcPingPeriod>
 8017674:	4603      	mov	r3, r0
 8017676:	8063      	strh	r3, [r4, #2]
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017678:	bf00      	nop
 801767a:	370c      	adds	r7, #12
 801767c:	46bd      	mov	sp, r7
 801767e:	bd90      	pop	{r4, r7, pc}
 8017680:	20002248 	.word	0x20002248

08017684 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8017684:	b580      	push	{r7, lr}
 8017686:	b084      	sub	sp, #16
 8017688:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 )
 801768a:	4b19      	ldr	r3, [pc, #100]	; (80176f0 <LoRaMacClassBHaltBeaconing+0x6c>)
 801768c:	7b1b      	ldrb	r3, [r3, #12]
 801768e:	f003 0301 	and.w	r3, r3, #1
 8017692:	b2db      	uxtb	r3, r3
 8017694:	2b00      	cmp	r3, #0
 8017696:	d027      	beq.n	80176e8 <LoRaMacClassBHaltBeaconing+0x64>
    {
        if( ( Ctx.BeaconState == BEACON_STATE_TIMEOUT ) ||
 8017698:	4b15      	ldr	r3, [pc, #84]	; (80176f0 <LoRaMacClassBHaltBeaconing+0x6c>)
 801769a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801769e:	2b02      	cmp	r3, #2
 80176a0:	d004      	beq.n	80176ac <LoRaMacClassBHaltBeaconing+0x28>
            ( Ctx.BeaconState == BEACON_STATE_LOST ) )
 80176a2:	4b13      	ldr	r3, [pc, #76]	; (80176f0 <LoRaMacClassBHaltBeaconing+0x6c>)
 80176a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
        if( ( Ctx.BeaconState == BEACON_STATE_TIMEOUT ) ||
 80176a8:	2b0a      	cmp	r3, #10
 80176aa:	d102      	bne.n	80176b2 <LoRaMacClassBHaltBeaconing+0x2e>
        {
            // Update the state machine before halt
            LoRaMacClassBBeaconTimerEvent( NULL );
 80176ac:	2000      	movs	r0, #0
 80176ae:	f7ff f989 	bl	80169c4 <LoRaMacClassBBeaconTimerEvent>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80176b2:	f3ef 8310 	mrs	r3, PRIMASK
 80176b6:	607b      	str	r3, [r7, #4]
  return(result);
 80176b8:	687b      	ldr	r3, [r7, #4]
        }

        CRITICAL_SECTION_BEGIN( );
 80176ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80176bc:	b672      	cpsid	i
}
 80176be:	bf00      	nop
        LoRaMacClassBEvents.Events.Beacon = 0;
 80176c0:	4a0c      	ldr	r2, [pc, #48]	; (80176f4 <LoRaMacClassBHaltBeaconing+0x70>)
 80176c2:	7813      	ldrb	r3, [r2, #0]
 80176c4:	f36f 0300 	bfc	r3, #0, #1
 80176c8:	7013      	strb	r3, [r2, #0]
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80176ce:	68bb      	ldr	r3, [r7, #8]
 80176d0:	f383 8810 	msr	PRIMASK, r3
}
 80176d4:	bf00      	nop
        CRITICAL_SECTION_END( );

        // Halt ping slot state machine
        TimerStop( &Ctx.BeaconTimer );
 80176d6:	4808      	ldr	r0, [pc, #32]	; (80176f8 <LoRaMacClassBHaltBeaconing+0x74>)
 80176d8:	f008 fea6 	bl	8020428 <UTIL_TIMER_Stop>

        // Halt beacon state machine
        Ctx.BeaconState = BEACON_STATE_HALT;
 80176dc:	4b04      	ldr	r3, [pc, #16]	; (80176f0 <LoRaMacClassBHaltBeaconing+0x6c>)
 80176de:	2206      	movs	r2, #6
 80176e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
 80176e4:	f000 fa5c 	bl	8017ba0 <LoRaMacClassBStopRxSlots>
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80176e8:	bf00      	nop
 80176ea:	3710      	adds	r7, #16
 80176ec:	46bd      	mov	sp, r7
 80176ee:	bd80      	pop	{r7, pc}
 80176f0:	20002194 	.word	0x20002194
 80176f4:	20002190 	.word	0x20002190
 80176f8:	200021d8 	.word	0x200021d8

080176fc <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80176fc:	b580      	push	{r7, lr}
 80176fe:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconState == BEACON_STATE_HALT )
 8017700:	4b0e      	ldr	r3, [pc, #56]	; (801773c <LoRaMacClassBResumeBeaconing+0x40>)
 8017702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017706:	2b06      	cmp	r3, #6
 8017708:	d116      	bne.n	8017738 <LoRaMacClassBResumeBeaconing+0x3c>
    {
        Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 1;
 801770a:	4a0c      	ldr	r2, [pc, #48]	; (801773c <LoRaMacClassBResumeBeaconing+0x40>)
 801770c:	7b13      	ldrb	r3, [r2, #12]
 801770e:	f043 0320 	orr.w	r3, r3, #32
 8017712:	7313      	strb	r3, [r2, #12]

        // Set default state
        Ctx.BeaconState = BEACON_STATE_LOCKED;
 8017714:	4b09      	ldr	r3, [pc, #36]	; (801773c <LoRaMacClassBResumeBeaconing+0x40>)
 8017716:	2205      	movs	r2, #5
 8017718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 0 )
 801771c:	4b07      	ldr	r3, [pc, #28]	; (801773c <LoRaMacClassBResumeBeaconing+0x40>)
 801771e:	7b1b      	ldrb	r3, [r3, #12]
 8017720:	f003 0302 	and.w	r3, r3, #2
 8017724:	b2db      	uxtb	r3, r3
 8017726:	2b00      	cmp	r3, #0
 8017728:	d103      	bne.n	8017732 <LoRaMacClassBResumeBeaconing+0x36>
        {
            // Set the default state for beacon less operation
            Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 801772a:	4b04      	ldr	r3, [pc, #16]	; (801773c <LoRaMacClassBResumeBeaconing+0x40>)
 801772c:	2204      	movs	r2, #4
 801772e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
 8017732:	2000      	movs	r0, #0
 8017734:	f7ff f946 	bl	80169c4 <LoRaMacClassBBeaconTimerEvent>
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017738:	bf00      	nop
 801773a:	bd80      	pop	{r7, pc}
 801773c:	20002194 	.word	0x20002194

08017740 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8017740:	b580      	push	{r7, lr}
 8017742:	b082      	sub	sp, #8
 8017744:	af00      	add	r7, sp, #0
 8017746:	4603      	mov	r3, r0
 8017748:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( nextClass == CLASS_B )
 801774a:	79fb      	ldrb	r3, [r7, #7]
 801774c:	2b01      	cmp	r3, #1
 801774e:	d110      	bne.n	8017772 <LoRaMacClassBSwitchClass+0x32>
    {// Switch to from class a to class b
        if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) && ( ClassBNvm->PingSlotCtx.Ctrl.Assigned == 1 ) )
 8017750:	4b0f      	ldr	r3, [pc, #60]	; (8017790 <LoRaMacClassBSwitchClass+0x50>)
 8017752:	7b1b      	ldrb	r3, [r3, #12]
 8017754:	f003 0301 	and.w	r3, r3, #1
 8017758:	b2db      	uxtb	r3, r3
 801775a:	2b00      	cmp	r3, #0
 801775c:	d009      	beq.n	8017772 <LoRaMacClassBSwitchClass+0x32>
 801775e:	4b0d      	ldr	r3, [pc, #52]	; (8017794 <LoRaMacClassBSwitchClass+0x54>)
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	781b      	ldrb	r3, [r3, #0]
 8017764:	f003 0301 	and.w	r3, r3, #1
 8017768:	b2db      	uxtb	r3, r3
 801776a:	2b00      	cmp	r3, #0
 801776c:	d001      	beq.n	8017772 <LoRaMacClassBSwitchClass+0x32>
        {
            return LORAMAC_STATUS_OK;
 801776e:	2300      	movs	r3, #0
 8017770:	e009      	b.n	8017786 <LoRaMacClassBSwitchClass+0x46>
        }
    }
    if( nextClass == CLASS_A )
 8017772:	79fb      	ldrb	r3, [r7, #7]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d105      	bne.n	8017784 <LoRaMacClassBSwitchClass+0x44>
    {// Switch from class b to class a
        LoRaMacClassBHaltBeaconing( );
 8017778:	f7ff ff84 	bl	8017684 <LoRaMacClassBHaltBeaconing>

        // Initialize default state for class b
        InitClassBDefaults( );
 801777c:	f7fe ff1a 	bl	80165b4 <InitClassBDefaults>

        return LORAMAC_STATUS_OK;
 8017780:	2300      	movs	r3, #0
 8017782:	e000      	b.n	8017786 <LoRaMacClassBSwitchClass+0x46>
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8017784:	2302      	movs	r3, #2
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017786:	4618      	mov	r0, r3
 8017788:	3708      	adds	r7, #8
 801778a:	46bd      	mov	sp, r7
 801778c:	bd80      	pop	{r7, pc}
 801778e:	bf00      	nop
 8017790:	20002194 	.word	0x20002194
 8017794:	20002248 	.word	0x20002248

08017798 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8017798:	b480      	push	{r7}
 801779a:	b085      	sub	sp, #20
 801779c:	af00      	add	r7, sp, #0
 801779e:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80177a0:	2300      	movs	r3, #0
 80177a2:	73fb      	strb	r3, [r7, #15]

    switch( mibGet->Type )
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	781b      	ldrb	r3, [r3, #0]
 80177a8:	2b36      	cmp	r3, #54	; 0x36
 80177aa:	d002      	beq.n	80177b2 <LoRaMacClassBMibGetRequestConfirm+0x1a>
 80177ac:	2b38      	cmp	r3, #56	; 0x38
 80177ae:	d007      	beq.n	80177c0 <LoRaMacClassBMibGetRequestConfirm+0x28>
 80177b0:	e00c      	b.n	80177cc <LoRaMacClassBMibGetRequestConfirm+0x34>
    {
        case MIB_PING_SLOT_DATARATE:
        {
            mibGet->Param.PingSlotDatarate = ClassBNvm->PingSlotCtx.Datarate;
 80177b2:	4b0b      	ldr	r3, [pc, #44]	; (80177e0 <LoRaMacClassBMibGetRequestConfirm+0x48>)
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	711a      	strb	r2, [r3, #4]
            break;
 80177be:	e008      	b.n	80177d2 <LoRaMacClassBMibGetRequestConfirm+0x3a>
        }
        case MIB_BEACON_STATE:
        {
            mibGet->Param.BeaconState = Ctx.BeaconState;
 80177c0:	4b08      	ldr	r3, [pc, #32]	; (80177e4 <LoRaMacClassBMibGetRequestConfirm+0x4c>)
 80177c2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	711a      	strb	r2, [r3, #4]
            break;
 80177ca:	e002      	b.n	80177d2 <LoRaMacClassBMibGetRequestConfirm+0x3a>
        }
        default:
        {
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80177cc:	2302      	movs	r3, #2
 80177ce:	73fb      	strb	r3, [r7, #15]
            break;
 80177d0:	bf00      	nop
        }
    }
    return status;
 80177d2:	7bfb      	ldrb	r3, [r7, #15]
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80177d4:	4618      	mov	r0, r3
 80177d6:	3714      	adds	r7, #20
 80177d8:	46bd      	mov	sp, r7
 80177da:	bc80      	pop	{r7}
 80177dc:	4770      	bx	lr
 80177de:	bf00      	nop
 80177e0:	20002248 	.word	0x20002248
 80177e4:	20002194 	.word	0x20002194

080177e8 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80177e8:	b480      	push	{r7}
 80177ea:	b085      	sub	sp, #20
 80177ec:	af00      	add	r7, sp, #0
 80177ee:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80177f0:	2300      	movs	r3, #0
 80177f2:	73fb      	strb	r3, [r7, #15]

    switch( mibSet->Type )
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	781b      	ldrb	r3, [r3, #0]
 80177f8:	2b36      	cmp	r3, #54	; 0x36
 80177fa:	d106      	bne.n	801780a <LoRaMacMibClassBSetRequestConfirm+0x22>
    {
        case MIB_PING_SLOT_DATARATE:
        {
            ClassBNvm->PingSlotCtx.Datarate = mibSet->Param.PingSlotDatarate;
 80177fc:	4b07      	ldr	r3, [pc, #28]	; (801781c <LoRaMacMibClassBSetRequestConfirm+0x34>)
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	687a      	ldr	r2, [r7, #4]
 8017802:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8017806:	721a      	strb	r2, [r3, #8]
            break;
 8017808:	e002      	b.n	8017810 <LoRaMacMibClassBSetRequestConfirm+0x28>
        }
        default:
        {
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801780a:	2302      	movs	r3, #2
 801780c:	73fb      	strb	r3, [r7, #15]
            break;
 801780e:	bf00      	nop
        }
    }
    return status;
 8017810:	7bfb      	ldrb	r3, [r7, #15]
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017812:	4618      	mov	r0, r3
 8017814:	3714      	adds	r7, #20
 8017816:	46bd      	mov	sp, r7
 8017818:	bc80      	pop	{r7}
 801781a:	4770      	bx	lr
 801781c:	20002248 	.word	0x20002248

08017820 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8017820:	b580      	push	{r7, lr}
 8017822:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8017824:	200d      	movs	r0, #13
 8017826:	f000 fe85 	bl	8018534 <LoRaMacConfirmQueueIsCmdActive>
 801782a:	4603      	mov	r3, r0
 801782c:	2b00      	cmp	r3, #0
 801782e:	d009      	beq.n	8017844 <LoRaMacClassBPingSlotInfoAns+0x24>
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8017830:	210d      	movs	r1, #13
 8017832:	2000      	movs	r0, #0
 8017834:	f000 fdf2 	bl	801841c <LoRaMacConfirmQueueSetStatus>
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
 8017838:	4b03      	ldr	r3, [pc, #12]	; (8017848 <LoRaMacClassBPingSlotInfoAns+0x28>)
 801783a:	681a      	ldr	r2, [r3, #0]
 801783c:	7813      	ldrb	r3, [r2, #0]
 801783e:	f043 0301 	orr.w	r3, r3, #1
 8017842:	7013      	strb	r3, [r2, #0]
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017844:	bf00      	nop
 8017846:	bd80      	pop	{r7, pc}
 8017848:	20002248 	.word	0x20002248

0801784c <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801784c:	b580      	push	{r7, lr}
 801784e:	b084      	sub	sp, #16
 8017850:	af00      	add	r7, sp, #0
 8017852:	4603      	mov	r3, r0
 8017854:	6039      	str	r1, [r7, #0]
 8017856:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    uint8_t status = 0x03;
 8017858:	2303      	movs	r3, #3
 801785a:	73fb      	strb	r3, [r7, #15]
    VerifyParams_t verify;
    bool isCustomFreq = false;
 801785c:	2300      	movs	r3, #0
 801785e:	73bb      	strb	r3, [r7, #14]

    if( frequency != 0 )
 8017860:	683b      	ldr	r3, [r7, #0]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d017      	beq.n	8017896 <LoRaMacClassBPingSlotChannelReq+0x4a>
    {
        isCustomFreq = true;
 8017866:	2301      	movs	r3, #1
 8017868:	73bb      	strb	r3, [r7, #14]
        verify.Frequency = frequency;
 801786a:	683b      	ldr	r3, [r7, #0]
 801786c:	60bb      	str	r3, [r7, #8]
        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == false )
 801786e:	4b2b      	ldr	r3, [pc, #172]	; (801791c <LoRaMacClassBPingSlotChannelReq+0xd0>)
 8017870:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017874:	781b      	ldrb	r3, [r3, #0]
 8017876:	f107 0108 	add.w	r1, r7, #8
 801787a:	2200      	movs	r2, #0
 801787c:	4618      	mov	r0, r3
 801787e:	f002 f918 	bl	8019ab2 <RegionVerify>
 8017882:	4603      	mov	r3, r0
 8017884:	f083 0301 	eor.w	r3, r3, #1
 8017888:	b2db      	uxtb	r3, r3
 801788a:	2b00      	cmp	r3, #0
 801788c:	d003      	beq.n	8017896 <LoRaMacClassBPingSlotChannelReq+0x4a>
        {
            status &= 0xFE; // Channel frequency KO
 801788e:	7bfb      	ldrb	r3, [r7, #15]
 8017890:	f023 0301 	bic.w	r3, r3, #1
 8017894:	73fb      	strb	r3, [r7, #15]
        }
    }

    verify.DatarateParams.Datarate = datarate;
 8017896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801789a:	723b      	strb	r3, [r7, #8]
    verify.DatarateParams.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 801789c:	4b1f      	ldr	r3, [pc, #124]	; (801791c <LoRaMacClassBPingSlotChannelReq+0xd0>)
 801789e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80178a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80178a6:	727b      	strb	r3, [r7, #9]

    if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_RX_DR ) == false )
 80178a8:	4b1c      	ldr	r3, [pc, #112]	; (801791c <LoRaMacClassBPingSlotChannelReq+0xd0>)
 80178aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80178ae:	781b      	ldrb	r3, [r3, #0]
 80178b0:	f107 0108 	add.w	r1, r7, #8
 80178b4:	2207      	movs	r2, #7
 80178b6:	4618      	mov	r0, r3
 80178b8:	f002 f8fb 	bl	8019ab2 <RegionVerify>
 80178bc:	4603      	mov	r3, r0
 80178be:	f083 0301 	eor.w	r3, r3, #1
 80178c2:	b2db      	uxtb	r3, r3
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d003      	beq.n	80178d0 <LoRaMacClassBPingSlotChannelReq+0x84>
    {
        status &= 0xFD; // Datarate range KO
 80178c8:	7bfb      	ldrb	r3, [r7, #15]
 80178ca:	f023 0302 	bic.w	r3, r3, #2
 80178ce:	73fb      	strb	r3, [r7, #15]
    }

    if( status == 0x03 )
 80178d0:	7bfb      	ldrb	r3, [r7, #15]
 80178d2:	2b03      	cmp	r3, #3
 80178d4:	d11c      	bne.n	8017910 <LoRaMacClassBPingSlotChannelReq+0xc4>
    {
        if( isCustomFreq == true )
 80178d6:	7bbb      	ldrb	r3, [r7, #14]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d00a      	beq.n	80178f2 <LoRaMacClassBPingSlotChannelReq+0xa6>
        {
            ClassBNvm->PingSlotCtx.Ctrl.CustomFreq = 1;
 80178dc:	4b10      	ldr	r3, [pc, #64]	; (8017920 <LoRaMacClassBPingSlotChannelReq+0xd4>)
 80178de:	681a      	ldr	r2, [r3, #0]
 80178e0:	7813      	ldrb	r3, [r2, #0]
 80178e2:	f043 0302 	orr.w	r3, r3, #2
 80178e6:	7013      	strb	r3, [r2, #0]
            ClassBNvm->PingSlotCtx.Frequency = frequency;
 80178e8:	4b0d      	ldr	r3, [pc, #52]	; (8017920 <LoRaMacClassBPingSlotChannelReq+0xd4>)
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	683a      	ldr	r2, [r7, #0]
 80178ee:	605a      	str	r2, [r3, #4]
 80178f0:	e009      	b.n	8017906 <LoRaMacClassBPingSlotChannelReq+0xba>
        }
        else
        {
            ClassBNvm->PingSlotCtx.Ctrl.CustomFreq = 0;
 80178f2:	4b0b      	ldr	r3, [pc, #44]	; (8017920 <LoRaMacClassBPingSlotChannelReq+0xd4>)
 80178f4:	681a      	ldr	r2, [r3, #0]
 80178f6:	7813      	ldrb	r3, [r2, #0]
 80178f8:	f36f 0341 	bfc	r3, #1, #1
 80178fc:	7013      	strb	r3, [r2, #0]
            ClassBNvm->PingSlotCtx.Frequency = 0;
 80178fe:	4b08      	ldr	r3, [pc, #32]	; (8017920 <LoRaMacClassBPingSlotChannelReq+0xd4>)
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	2200      	movs	r2, #0
 8017904:	605a      	str	r2, [r3, #4]
        }
        ClassBNvm->PingSlotCtx.Datarate = datarate;
 8017906:	4b06      	ldr	r3, [pc, #24]	; (8017920 <LoRaMacClassBPingSlotChannelReq+0xd4>)
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801790e:	721a      	strb	r2, [r3, #8]
    }

    return status;
 8017910:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017912:	4618      	mov	r0, r3
 8017914:	3710      	adds	r7, #16
 8017916:	46bd      	mov	sp, r7
 8017918:	bd80      	pop	{r7, pc}
 801791a:	bf00      	nop
 801791c:	20002194 	.word	0x20002194
 8017920:	20002248 	.word	0x20002248

08017924 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8017924:	b590      	push	{r4, r7, lr}
 8017926:	b085      	sub	sp, #20
 8017928:	af00      	add	r7, sp, #0
 801792a:	4603      	mov	r3, r0
 801792c:	60ba      	str	r2, [r7, #8]
 801792e:	81fb      	strh	r3, [r7, #14]
 8017930:	460b      	mov	r3, r1
 8017932:	737b      	strb	r3, [r7, #13]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.BeaconCtx.BeaconTimingDelay = ( CLASSB_BEACON_DELAY_BEACON_TIMING_ANS * beaconTimingDelay );
 8017934:	89fa      	ldrh	r2, [r7, #14]
 8017936:	4613      	mov	r3, r2
 8017938:	011b      	lsls	r3, r3, #4
 801793a:	1a9b      	subs	r3, r3, r2
 801793c:	005b      	lsls	r3, r3, #1
 801793e:	461a      	mov	r2, r3
 8017940:	4b26      	ldr	r3, [pc, #152]	; (80179dc <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017942:	639a      	str	r2, [r3, #56]	; 0x38
    Ctx.BeaconCtx.BeaconTimingChannel = beaconTimingChannel;
 8017944:	4a25      	ldr	r2, [pc, #148]	; (80179dc <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017946:	7b7b      	ldrb	r3, [r7, #13]
 8017948:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34

    if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 801794c:	200e      	movs	r0, #14
 801794e:	f000 fdf1 	bl	8018534 <LoRaMacConfirmQueueIsCmdActive>
 8017952:	4603      	mov	r3, r0
 8017954:	2b00      	cmp	r3, #0
 8017956:	d03c      	beq.n	80179d2 <LoRaMacClassBBeaconTimingAns+0xae>
    {
        if( Ctx.BeaconCtx.BeaconTimingDelay > CLASSB_BEACON_INTERVAL )
 8017958:	4b20      	ldr	r3, [pc, #128]	; (80179dc <LoRaMacClassBBeaconTimingAns+0xb8>)
 801795a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801795c:	f5b3 3ffa 	cmp.w	r3, #128000	; 0x1f400
 8017960:	d90b      	bls.n	801797a <LoRaMacClassBBeaconTimingAns+0x56>
        {
            // We missed the beacon already
            Ctx.BeaconCtx.BeaconTimingDelay = 0;
 8017962:	4b1e      	ldr	r3, [pc, #120]	; (80179dc <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017964:	2200      	movs	r2, #0
 8017966:	639a      	str	r2, [r3, #56]	; 0x38
            Ctx.BeaconCtx.BeaconTimingChannel = 0;
 8017968:	4b1c      	ldr	r3, [pc, #112]	; (80179dc <LoRaMacClassBBeaconTimingAns+0xb8>)
 801796a:	2200      	movs	r2, #0
 801796c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_BEACON_TIMING );
 8017970:	210e      	movs	r1, #14
 8017972:	2010      	movs	r0, #16
 8017974:	f000 fd52 	bl	801841c <LoRaMacConfirmQueueSetStatus>
 8017978:	e01e      	b.n	80179b8 <LoRaMacClassBBeaconTimingAns+0x94>
        }
        else
        {
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 801797a:	4a18      	ldr	r2, [pc, #96]	; (80179dc <LoRaMacClassBBeaconTimingAns+0xb8>)
 801797c:	7b13      	ldrb	r3, [r2, #12]
 801797e:	f043 0304 	orr.w	r3, r3, #4
 8017982:	7313      	strb	r3, [r2, #12]
            Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 1;
 8017984:	4a15      	ldr	r2, [pc, #84]	; (80179dc <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017986:	7b13      	ldrb	r3, [r2, #12]
 8017988:	f043 0308 	orr.w	r3, r3, #8
 801798c:	7313      	strb	r3, [r2, #12]
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
 801798e:	4b13      	ldr	r3, [pc, #76]	; (80179dc <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017992:	68bb      	ldr	r3, [r7, #8]
 8017994:	441a      	add	r2, r3
 8017996:	4c11      	ldr	r4, [pc, #68]	; (80179dc <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017998:	463b      	mov	r3, r7
 801799a:	4611      	mov	r1, r2
 801799c:	4618      	mov	r0, r3
 801799e:	f008 f857 	bl	801fa50 <SysTimeFromMs>
 80179a2:	f104 0320 	add.w	r3, r4, #32
 80179a6:	463a      	mov	r2, r7
 80179a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80179ac:	e883 0003 	stmia.w	r3, {r0, r1}
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80179b0:	210e      	movs	r1, #14
 80179b2:	2000      	movs	r0, #0
 80179b4:	f000 fd32 	bl	801841c <LoRaMacConfirmQueueSetStatus>
        }

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
 80179b8:	4b08      	ldr	r3, [pc, #32]	; (80179dc <LoRaMacClassBBeaconTimingAns+0xb8>)
 80179ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80179be:	4a07      	ldr	r2, [pc, #28]	; (80179dc <LoRaMacClassBBeaconTimingAns+0xb8>)
 80179c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80179c2:	60da      	str	r2, [r3, #12]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
 80179c4:	4b05      	ldr	r3, [pc, #20]	; (80179dc <LoRaMacClassBBeaconTimingAns+0xb8>)
 80179c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80179ca:	4a04      	ldr	r2, [pc, #16]	; (80179dc <LoRaMacClassBBeaconTimingAns+0xb8>)
 80179cc:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80179d0:	741a      	strb	r2, [r3, #16]
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80179d2:	bf00      	nop
 80179d4:	3714      	adds	r7, #20
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bd90      	pop	{r4, r7, pc}
 80179da:	bf00      	nop
 80179dc:	20002194 	.word	0x20002194

080179e0 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80179e0:	b590      	push	{r4, r7, lr}
 80179e2:	b08b      	sub	sp, #44	; 0x2c
 80179e4:	af02      	add	r7, sp, #8
#if ( LORAMAC_CLASSB_ENABLED == 1 )

    SysTime_t nextBeacon = SysTimeGet( );
 80179e6:	f107 0314 	add.w	r3, r7, #20
 80179ea:	4618      	mov	r0, r3
 80179ec:	f007 ffb0 	bl	801f950 <SysTimeGet>
    uint32_t currentTimeMs = SysTimeToMs( nextBeacon );
 80179f0:	f107 0314 	add.w	r3, r7, #20
 80179f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80179f8:	f008 f802 	bl	801fa00 <SysTimeToMs>
 80179fc:	61f8      	str	r0, [r7, #28]

    nextBeacon.Seconds = nextBeacon.Seconds + ( 128 - ( nextBeacon.Seconds % 128 ) );
 80179fe:	697b      	ldr	r3, [r7, #20]
 8017a00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8017a04:	3380      	adds	r3, #128	; 0x80
 8017a06:	617b      	str	r3, [r7, #20]
    nextBeacon.SubSeconds = 0;
 8017a08:	2300      	movs	r3, #0
 8017a0a:	833b      	strh	r3, [r7, #24]

    Ctx.BeaconCtx.NextBeaconRx = nextBeacon;
 8017a0c:	4b2e      	ldr	r3, [pc, #184]	; (8017ac8 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017a0e:	3320      	adds	r3, #32
 8017a10:	f107 0214 	add.w	r2, r7, #20
 8017a14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017a18:	e883 0003 	stmia.w	r3, {r0, r1}
    Ctx.BeaconCtx.LastBeaconRx = SysTimeSub( Ctx.BeaconCtx.NextBeaconRx, ( SysTime_t ){ .Seconds = CLASSB_BEACON_INTERVAL / 1000, .SubSeconds = 0 } );
 8017a1c:	2380      	movs	r3, #128	; 0x80
 8017a1e:	60fb      	str	r3, [r7, #12]
 8017a20:	2300      	movs	r3, #0
 8017a22:	823b      	strh	r3, [r7, #16]
 8017a24:	4c28      	ldr	r4, [pc, #160]	; (8017ac8 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017a26:	4638      	mov	r0, r7
 8017a28:	4a27      	ldr	r2, [pc, #156]	; (8017ac8 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017a2a:	693b      	ldr	r3, [r7, #16]
 8017a2c:	9300      	str	r3, [sp, #0]
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	3220      	adds	r2, #32
 8017a32:	ca06      	ldmia	r2, {r1, r2}
 8017a34:	f007 ff25 	bl	801f882 <SysTimeSub>
 8017a38:	f104 0318 	add.w	r3, r4, #24
 8017a3c:	463a      	mov	r2, r7
 8017a3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017a42:	e883 0003 	stmia.w	r3, {r0, r1}

    if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8017a46:	200a      	movs	r0, #10
 8017a48:	f000 fd74 	bl	8018534 <LoRaMacConfirmQueueIsCmdActive>
 8017a4c:	4603      	mov	r3, r0
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d036      	beq.n	8017ac0 <LoRaMacClassBDeviceTimeAns+0xe0>
    {
        if( currentTimeMs > SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) )
 8017a52:	4b1d      	ldr	r3, [pc, #116]	; (8017ac8 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017a54:	3320      	adds	r3, #32
 8017a56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017a5a:	f007 ffd1 	bl	801fa00 <SysTimeToMs>
 8017a5e:	4602      	mov	r2, r0
 8017a60:	69fb      	ldr	r3, [r7, #28]
 8017a62:	4293      	cmp	r3, r2
 8017a64:	d910      	bls.n	8017a88 <LoRaMacClassBDeviceTimeAns+0xa8>
        {
            // We missed the beacon already
            Ctx.BeaconCtx.LastBeaconRx.Seconds = 0;
 8017a66:	4b18      	ldr	r3, [pc, #96]	; (8017ac8 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017a68:	2200      	movs	r2, #0
 8017a6a:	619a      	str	r2, [r3, #24]
            Ctx.BeaconCtx.LastBeaconRx.SubSeconds = 0;
 8017a6c:	4b16      	ldr	r3, [pc, #88]	; (8017ac8 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017a6e:	2200      	movs	r2, #0
 8017a70:	839a      	strh	r2, [r3, #28]
            Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
 8017a72:	4b15      	ldr	r3, [pc, #84]	; (8017ac8 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017a74:	2200      	movs	r2, #0
 8017a76:	621a      	str	r2, [r3, #32]
            Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
 8017a78:	4b13      	ldr	r3, [pc, #76]	; (8017ac8 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017a7a:	2200      	movs	r2, #0
 8017a7c:	849a      	strh	r2, [r3, #36]	; 0x24
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_DEVICE_TIME );
 8017a7e:	210a      	movs	r1, #10
 8017a80:	2010      	movs	r0, #16
 8017a82:	f000 fccb 	bl	801841c <LoRaMacConfirmQueueSetStatus>
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017a86:	e01b      	b.n	8017ac0 <LoRaMacClassBDeviceTimeAns+0xe0>
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 8017a88:	4a0f      	ldr	r2, [pc, #60]	; (8017ac8 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017a8a:	7b13      	ldrb	r3, [r2, #12]
 8017a8c:	f043 0304 	orr.w	r3, r3, #4
 8017a90:	7313      	strb	r3, [r2, #12]
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 8017a92:	4b0d      	ldr	r3, [pc, #52]	; (8017ac8 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017a94:	3320      	adds	r3, #32
 8017a96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017a9a:	f007 ffb1 	bl	801fa00 <SysTimeToMs>
 8017a9e:	4602      	mov	r2, r0
 8017aa0:	69fb      	ldr	r3, [r7, #28]
 8017aa2:	1ad3      	subs	r3, r2, r3
 8017aa4:	4a08      	ldr	r2, [pc, #32]	; (8017ac8 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017aa6:	6393      	str	r3, [r2, #56]	; 0x38
            Ctx.BeaconCtx.BeaconTime.Seconds = nextBeacon.Seconds - UNIX_GPS_EPOCH_OFFSET - 128;
 8017aa8:	697a      	ldr	r2, [r7, #20]
 8017aaa:	4b08      	ldr	r3, [pc, #32]	; (8017acc <LoRaMacClassBDeviceTimeAns+0xec>)
 8017aac:	4413      	add	r3, r2
 8017aae:	4a06      	ldr	r2, [pc, #24]	; (8017ac8 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017ab0:	6113      	str	r3, [r2, #16]
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 8017ab2:	4b05      	ldr	r3, [pc, #20]	; (8017ac8 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	829a      	strh	r2, [r3, #20]
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8017ab8:	210a      	movs	r1, #10
 8017aba:	2000      	movs	r0, #0
 8017abc:	f000 fcae 	bl	801841c <LoRaMacConfirmQueueSetStatus>
}
 8017ac0:	bf00      	nop
 8017ac2:	3724      	adds	r7, #36	; 0x24
 8017ac4:	46bd      	mov	sp, r7
 8017ac6:	bd90      	pop	{r4, r7, pc}
 8017ac8:	20002194 	.word	0x20002194
 8017acc:	ed2ac200 	.word	0xed2ac200

08017ad0 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8017ad0:	b580      	push	{r7, lr}
 8017ad2:	b084      	sub	sp, #16
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    VerifyParams_t verify;

    if( frequency != 0 )
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d01a      	beq.n	8017b14 <LoRaMacClassBBeaconFreqReq+0x44>
    {
        verify.Frequency = frequency;
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	60fb      	str	r3, [r7, #12]

        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == true )
 8017ae2:	4b13      	ldr	r3, [pc, #76]	; (8017b30 <LoRaMacClassBBeaconFreqReq+0x60>)
 8017ae4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017ae8:	781b      	ldrb	r3, [r3, #0]
 8017aea:	f107 010c 	add.w	r1, r7, #12
 8017aee:	2200      	movs	r2, #0
 8017af0:	4618      	mov	r0, r3
 8017af2:	f001 ffde 	bl	8019ab2 <RegionVerify>
 8017af6:	4603      	mov	r3, r0
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d013      	beq.n	8017b24 <LoRaMacClassBBeaconFreqReq+0x54>
        {
            ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 1;
 8017afc:	4b0d      	ldr	r3, [pc, #52]	; (8017b34 <LoRaMacClassBBeaconFreqReq+0x64>)
 8017afe:	681a      	ldr	r2, [r3, #0]
 8017b00:	7b13      	ldrb	r3, [r2, #12]
 8017b02:	f043 0301 	orr.w	r3, r3, #1
 8017b06:	7313      	strb	r3, [r2, #12]
            ClassBNvm->BeaconCtx.Frequency = frequency;
 8017b08:	4b0a      	ldr	r3, [pc, #40]	; (8017b34 <LoRaMacClassBBeaconFreqReq+0x64>)
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	687a      	ldr	r2, [r7, #4]
 8017b0e:	611a      	str	r2, [r3, #16]
            return true;
 8017b10:	2301      	movs	r3, #1
 8017b12:	e008      	b.n	8017b26 <LoRaMacClassBBeaconFreqReq+0x56>
        }
    }
    else
    {
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
 8017b14:	4b07      	ldr	r3, [pc, #28]	; (8017b34 <LoRaMacClassBBeaconFreqReq+0x64>)
 8017b16:	681a      	ldr	r2, [r3, #0]
 8017b18:	7b13      	ldrb	r3, [r2, #12]
 8017b1a:	f36f 0300 	bfc	r3, #0, #1
 8017b1e:	7313      	strb	r3, [r2, #12]
        return true;
 8017b20:	2301      	movs	r3, #1
 8017b22:	e000      	b.n	8017b26 <LoRaMacClassBBeaconFreqReq+0x56>
    }
    return false;
 8017b24:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017b26:	4618      	mov	r0, r3
 8017b28:	3710      	adds	r7, #16
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	bd80      	pop	{r7, pc}
 8017b2e:	bf00      	nop
 8017b30:	20002194 	.word	0x20002194
 8017b34:	20002248 	.word	0x20002248

08017b38 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b086      	sub	sp, #24
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017b40:	f008 fd8c 	bl	802065c <UTIL_TIMER_GetCurrentTime>
 8017b44:	6178      	str	r0, [r7, #20]
    TimerTime_t beaconReserved = 0;
 8017b46:	2300      	movs	r3, #0
 8017b48:	613b      	str	r3, [r7, #16]
    TimerTime_t nextBeacon = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx );
 8017b4a:	4b14      	ldr	r3, [pc, #80]	; (8017b9c <LoRaMacClassBIsUplinkCollision+0x64>)
 8017b4c:	3320      	adds	r3, #32
 8017b4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017b52:	f007 ff55 	bl	801fa00 <SysTimeToMs>
 8017b56:	60f8      	str	r0, [r7, #12]

    beaconReserved = nextBeacon -
                     CLASSB_BEACON_GUARD -
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay1 -
 8017b58:	4b10      	ldr	r3, [pc, #64]	; (8017b9c <LoRaMacClassBIsUplinkCollision+0x64>)
 8017b5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017b5e:	68db      	ldr	r3, [r3, #12]
                     CLASSB_BEACON_GUARD -
 8017b60:	68fa      	ldr	r2, [r7, #12]
 8017b62:	1ad2      	subs	r2, r2, r3
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay2 -
 8017b64:	4b0d      	ldr	r3, [pc, #52]	; (8017b9c <LoRaMacClassBIsUplinkCollision+0x64>)
 8017b66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017b6a:	691b      	ldr	r3, [r3, #16]
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay1 -
 8017b6c:	1ad2      	subs	r2, r2, r3
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay2 -
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	1ad3      	subs	r3, r2, r3
    beaconReserved = nextBeacon -
 8017b72:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8017b76:	613b      	str	r3, [r7, #16]
                     txTimeOnAir;

    // Check if the next beacon will be received during the next uplink.
    if( ( currentTime >= beaconReserved ) && ( currentTime < ( nextBeacon + CLASSB_BEACON_RESERVED ) ) )
 8017b78:	697a      	ldr	r2, [r7, #20]
 8017b7a:	693b      	ldr	r3, [r7, #16]
 8017b7c:	429a      	cmp	r2, r3
 8017b7e:	d308      	bcc.n	8017b92 <LoRaMacClassBIsUplinkCollision+0x5a>
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	f603 0348 	addw	r3, r3, #2120	; 0x848
 8017b86:	697a      	ldr	r2, [r7, #20]
 8017b88:	429a      	cmp	r2, r3
 8017b8a:	d202      	bcs.n	8017b92 <LoRaMacClassBIsUplinkCollision+0x5a>
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
 8017b8c:	f640 0348 	movw	r3, #2120	; 0x848
 8017b90:	e000      	b.n	8017b94 <LoRaMacClassBIsUplinkCollision+0x5c>
    }
    return 0;
 8017b92:	2300      	movs	r3, #0
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017b94:	4618      	mov	r0, r3
 8017b96:	3718      	adds	r7, #24
 8017b98:	46bd      	mov	sp, r7
 8017b9a:	bd80      	pop	{r7, pc}
 8017b9c:	20002194 	.word	0x20002194

08017ba0 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b084      	sub	sp, #16
 8017ba4:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    TimerStop( &Ctx.PingSlotTimer );
 8017ba6:	4810      	ldr	r0, [pc, #64]	; (8017be8 <LoRaMacClassBStopRxSlots+0x48>)
 8017ba8:	f008 fc3e 	bl	8020428 <UTIL_TIMER_Stop>
    TimerStop( &Ctx.MulticastSlotTimer );
 8017bac:	480f      	ldr	r0, [pc, #60]	; (8017bec <LoRaMacClassBStopRxSlots+0x4c>)
 8017bae:	f008 fc3b 	bl	8020428 <UTIL_TIMER_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8017bb6:	607b      	str	r3, [r7, #4]
  return(result);
 8017bb8:	687b      	ldr	r3, [r7, #4]

    CRITICAL_SECTION_BEGIN( );
 8017bba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8017bbc:	b672      	cpsid	i
}
 8017bbe:	bf00      	nop
    LoRaMacClassBEvents.Events.PingSlot = 0;
 8017bc0:	4a0b      	ldr	r2, [pc, #44]	; (8017bf0 <LoRaMacClassBStopRxSlots+0x50>)
 8017bc2:	7813      	ldrb	r3, [r2, #0]
 8017bc4:	f36f 0341 	bfc	r3, #1, #1
 8017bc8:	7013      	strb	r3, [r2, #0]
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
 8017bca:	4a09      	ldr	r2, [pc, #36]	; (8017bf0 <LoRaMacClassBStopRxSlots+0x50>)
 8017bcc:	7813      	ldrb	r3, [r2, #0]
 8017bce:	f36f 0382 	bfc	r3, #2, #1
 8017bd2:	7013      	strb	r3, [r2, #0]
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bd8:	68bb      	ldr	r3, [r7, #8]
 8017bda:	f383 8810 	msr	PRIMASK, r3
}
 8017bde:	bf00      	nop
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017be0:	bf00      	nop
 8017be2:	3710      	adds	r7, #16
 8017be4:	46bd      	mov	sp, r7
 8017be6:	bd80      	pop	{r7, pc}
 8017be8:	200021f0 	.word	0x200021f0
 8017bec:	20002208 	.word	0x20002208
 8017bf0:	20002190 	.word	0x20002190

08017bf4 <LoRaMacClassBStartRxSlots>:

void LoRaMacClassBStartRxSlots( void )
{
 8017bf4:	b580      	push	{r7, lr}
 8017bf6:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ClassBNvm->PingSlotCtx.Ctrl.Assigned == 1 )
 8017bf8:	4b0f      	ldr	r3, [pc, #60]	; (8017c38 <LoRaMacClassBStartRxSlots+0x44>)
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	781b      	ldrb	r3, [r3, #0]
 8017bfe:	f003 0301 	and.w	r3, r3, #1
 8017c02:	b2db      	uxtb	r3, r3
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d015      	beq.n	8017c34 <LoRaMacClassBStartRxSlots+0x40>
    {
        Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8017c08:	4b0c      	ldr	r3, [pc, #48]	; (8017c3c <LoRaMacClassBStartRxSlots+0x48>)
 8017c0a:	2200      	movs	r2, #0
 8017c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        TimerSetValue( &Ctx.PingSlotTimer, 1 );
 8017c10:	2101      	movs	r1, #1
 8017c12:	480b      	ldr	r0, [pc, #44]	; (8017c40 <LoRaMacClassBStartRxSlots+0x4c>)
 8017c14:	f008 fc78 	bl	8020508 <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.PingSlotTimer );
 8017c18:	4809      	ldr	r0, [pc, #36]	; (8017c40 <LoRaMacClassBStartRxSlots+0x4c>)
 8017c1a:	f008 fb97 	bl	802034c <UTIL_TIMER_Start>

        Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8017c1e:	4b07      	ldr	r3, [pc, #28]	; (8017c3c <LoRaMacClassBStartRxSlots+0x48>)
 8017c20:	2200      	movs	r2, #0
 8017c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 8017c26:	2101      	movs	r1, #1
 8017c28:	4806      	ldr	r0, [pc, #24]	; (8017c44 <LoRaMacClassBStartRxSlots+0x50>)
 8017c2a:	f008 fc6d 	bl	8020508 <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.MulticastSlotTimer );
 8017c2e:	4805      	ldr	r0, [pc, #20]	; (8017c44 <LoRaMacClassBStartRxSlots+0x50>)
 8017c30:	f008 fb8c 	bl	802034c <UTIL_TIMER_Start>
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017c34:	bf00      	nop
 8017c36:	bd80      	pop	{r7, pc}
 8017c38:	20002248 	.word	0x20002248
 8017c3c:	20002194 	.word	0x20002194
 8017c40:	200021f0 	.word	0x200021f0
 8017c44:	20002208 	.word	0x20002208

08017c48 <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8017c48:	b580      	push	{r7, lr}
 8017c4a:	b084      	sub	sp, #16
 8017c4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8017c52:	607b      	str	r3, [r7, #4]
  return(result);
 8017c54:	687b      	ldr	r3, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8017c56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8017c58:	b672      	cpsid	i
}
 8017c5a:	bf00      	nop
    events = LoRaMacClassBEvents;
 8017c5c:	4b15      	ldr	r3, [pc, #84]	; (8017cb4 <LoRaMacClassBProcess+0x6c>)
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	603b      	str	r3, [r7, #0]
    LoRaMacClassBEvents.Value = 0;
 8017c62:	4b14      	ldr	r3, [pc, #80]	; (8017cb4 <LoRaMacClassBProcess+0x6c>)
 8017c64:	2200      	movs	r2, #0
 8017c66:	601a      	str	r2, [r3, #0]
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c6c:	68bb      	ldr	r3, [r7, #8]
 8017c6e:	f383 8810 	msr	PRIMASK, r3
}
 8017c72:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8017c74:	683b      	ldr	r3, [r7, #0]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d017      	beq.n	8017caa <LoRaMacClassBProcess+0x62>
    {
        if( events.Events.Beacon == 1 )
 8017c7a:	783b      	ldrb	r3, [r7, #0]
 8017c7c:	f003 0301 	and.w	r3, r3, #1
 8017c80:	b2db      	uxtb	r3, r3
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d001      	beq.n	8017c8a <LoRaMacClassBProcess+0x42>
        {
            LoRaMacClassBProcessBeacon( );
 8017c86:	f7fe fec1 	bl	8016a0c <LoRaMacClassBProcessBeacon>
        }
        if( events.Events.PingSlot == 1 )
 8017c8a:	783b      	ldrb	r3, [r7, #0]
 8017c8c:	f003 0302 	and.w	r3, r3, #2
 8017c90:	b2db      	uxtb	r3, r3
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d001      	beq.n	8017c9a <LoRaMacClassBProcess+0x52>
        {
            LoRaMacClassBProcessPingSlot( );
 8017c96:	f7ff f8af 	bl	8016df8 <LoRaMacClassBProcessPingSlot>
        }
        if( events.Events.MulticastSlot == 1 )
 8017c9a:	783b      	ldrb	r3, [r7, #0]
 8017c9c:	f003 0304 	and.w	r3, r3, #4
 8017ca0:	b2db      	uxtb	r3, r3
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d001      	beq.n	8017caa <LoRaMacClassBProcess+0x62>
        {
            LoRaMacClassBProcessMulticastSlot( );
 8017ca6:	f7ff f9b1 	bl	801700c <LoRaMacClassBProcessMulticastSlot>
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017caa:	bf00      	nop
 8017cac:	3710      	adds	r7, #16
 8017cae:	46bd      	mov	sp, r7
 8017cb0:	bd80      	pop	{r7, pc}
 8017cb2:	bf00      	nop
 8017cb4:	20002190 	.word	0x20002190

08017cb8 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8017cb8:	b480      	push	{r7}
 8017cba:	b085      	sub	sp, #20
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	81fb      	strh	r3, [r7, #14]
 8017cc8:	e00a      	b.n	8017ce0 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8017cca:	89fb      	ldrh	r3, [r7, #14]
 8017ccc:	68ba      	ldr	r2, [r7, #8]
 8017cce:	4413      	add	r3, r2
 8017cd0:	781b      	ldrb	r3, [r3, #0]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d001      	beq.n	8017cda <IsSlotFree+0x22>
        {
            return false;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	e006      	b.n	8017ce8 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8017cda:	89fb      	ldrh	r3, [r7, #14]
 8017cdc:	3301      	adds	r3, #1
 8017cde:	81fb      	strh	r3, [r7, #14]
 8017ce0:	89fb      	ldrh	r3, [r7, #14]
 8017ce2:	2b0f      	cmp	r3, #15
 8017ce4:	d9f1      	bls.n	8017cca <IsSlotFree+0x12>
        }
    }
    return true;
 8017ce6:	2301      	movs	r3, #1
}
 8017ce8:	4618      	mov	r0, r3
 8017cea:	3714      	adds	r7, #20
 8017cec:	46bd      	mov	sp, r7
 8017cee:	bc80      	pop	{r7}
 8017cf0:	4770      	bx	lr
	...

08017cf4 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b082      	sub	sp, #8
 8017cf8:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8017cfe:	e007      	b.n	8017d10 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8017d00:	79fb      	ldrb	r3, [r7, #7]
 8017d02:	3301      	adds	r3, #1
 8017d04:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8017d06:	79fb      	ldrb	r3, [r7, #7]
 8017d08:	2b0f      	cmp	r3, #15
 8017d0a:	d101      	bne.n	8017d10 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	e012      	b.n	8017d36 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8017d10:	79fb      	ldrb	r3, [r7, #7]
 8017d12:	011b      	lsls	r3, r3, #4
 8017d14:	3308      	adds	r3, #8
 8017d16:	4a0a      	ldr	r2, [pc, #40]	; (8017d40 <MallocNewMacCommandSlot+0x4c>)
 8017d18:	4413      	add	r3, r2
 8017d1a:	4618      	mov	r0, r3
 8017d1c:	f7ff ffcc 	bl	8017cb8 <IsSlotFree>
 8017d20:	4603      	mov	r3, r0
 8017d22:	f083 0301 	eor.w	r3, r3, #1
 8017d26:	b2db      	uxtb	r3, r3
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d1e9      	bne.n	8017d00 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8017d2c:	79fb      	ldrb	r3, [r7, #7]
 8017d2e:	011b      	lsls	r3, r3, #4
 8017d30:	3308      	adds	r3, #8
 8017d32:	4a03      	ldr	r2, [pc, #12]	; (8017d40 <MallocNewMacCommandSlot+0x4c>)
 8017d34:	4413      	add	r3, r2
}
 8017d36:	4618      	mov	r0, r3
 8017d38:	3708      	adds	r7, #8
 8017d3a:	46bd      	mov	sp, r7
 8017d3c:	bd80      	pop	{r7, pc}
 8017d3e:	bf00      	nop
 8017d40:	20002274 	.word	0x20002274

08017d44 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b082      	sub	sp, #8
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d101      	bne.n	8017d56 <FreeMacCommandSlot+0x12>
    {
        return false;
 8017d52:	2300      	movs	r3, #0
 8017d54:	e005      	b.n	8017d62 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8017d56:	2210      	movs	r2, #16
 8017d58:	2100      	movs	r1, #0
 8017d5a:	6878      	ldr	r0, [r7, #4]
 8017d5c:	f004 fa54 	bl	801c208 <memset1>

    return true;
 8017d60:	2301      	movs	r3, #1
}
 8017d62:	4618      	mov	r0, r3
 8017d64:	3708      	adds	r7, #8
 8017d66:	46bd      	mov	sp, r7
 8017d68:	bd80      	pop	{r7, pc}

08017d6a <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8017d6a:	b480      	push	{r7}
 8017d6c:	b083      	sub	sp, #12
 8017d6e:	af00      	add	r7, sp, #0
 8017d70:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d101      	bne.n	8017d7c <LinkedListInit+0x12>
    {
        return false;
 8017d78:	2300      	movs	r3, #0
 8017d7a:	e006      	b.n	8017d8a <LinkedListInit+0x20>
    }

    list->First = NULL;
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	2200      	movs	r2, #0
 8017d80:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	2200      	movs	r2, #0
 8017d86:	605a      	str	r2, [r3, #4]

    return true;
 8017d88:	2301      	movs	r3, #1
}
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	370c      	adds	r7, #12
 8017d8e:	46bd      	mov	sp, r7
 8017d90:	bc80      	pop	{r7}
 8017d92:	4770      	bx	lr

08017d94 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8017d94:	b480      	push	{r7}
 8017d96:	b083      	sub	sp, #12
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	6078      	str	r0, [r7, #4]
 8017d9c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d002      	beq.n	8017daa <LinkedListAdd+0x16>
 8017da4:	683b      	ldr	r3, [r7, #0]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d101      	bne.n	8017dae <LinkedListAdd+0x1a>
    {
        return false;
 8017daa:	2300      	movs	r3, #0
 8017dac:	e015      	b.n	8017dda <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d102      	bne.n	8017dbc <LinkedListAdd+0x28>
    {
        list->First = element;
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	683a      	ldr	r2, [r7, #0]
 8017dba:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	685b      	ldr	r3, [r3, #4]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d003      	beq.n	8017dcc <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	685b      	ldr	r3, [r3, #4]
 8017dc8:	683a      	ldr	r2, [r7, #0]
 8017dca:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8017dcc:	683b      	ldr	r3, [r7, #0]
 8017dce:	2200      	movs	r2, #0
 8017dd0:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	683a      	ldr	r2, [r7, #0]
 8017dd6:	605a      	str	r2, [r3, #4]

    return true;
 8017dd8:	2301      	movs	r3, #1
}
 8017dda:	4618      	mov	r0, r3
 8017ddc:	370c      	adds	r7, #12
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bc80      	pop	{r7}
 8017de2:	4770      	bx	lr

08017de4 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8017de4:	b480      	push	{r7}
 8017de6:	b085      	sub	sp, #20
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	6078      	str	r0, [r7, #4]
 8017dec:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d002      	beq.n	8017dfa <LinkedListGetPrevious+0x16>
 8017df4:	683b      	ldr	r3, [r7, #0]
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d101      	bne.n	8017dfe <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	e016      	b.n	8017e2c <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8017e04:	683a      	ldr	r2, [r7, #0]
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	429a      	cmp	r2, r3
 8017e0a:	d00c      	beq.n	8017e26 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8017e0c:	e002      	b.n	8017e14 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d007      	beq.n	8017e2a <LinkedListGetPrevious+0x46>
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	683a      	ldr	r2, [r7, #0]
 8017e20:	429a      	cmp	r2, r3
 8017e22:	d1f4      	bne.n	8017e0e <LinkedListGetPrevious+0x2a>
 8017e24:	e001      	b.n	8017e2a <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8017e26:	2300      	movs	r3, #0
 8017e28:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8017e2a:	68fb      	ldr	r3, [r7, #12]
}
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	3714      	adds	r7, #20
 8017e30:	46bd      	mov	sp, r7
 8017e32:	bc80      	pop	{r7}
 8017e34:	4770      	bx	lr

08017e36 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8017e36:	b580      	push	{r7, lr}
 8017e38:	b084      	sub	sp, #16
 8017e3a:	af00      	add	r7, sp, #0
 8017e3c:	6078      	str	r0, [r7, #4]
 8017e3e:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d002      	beq.n	8017e4c <LinkedListRemove+0x16>
 8017e46:	683b      	ldr	r3, [r7, #0]
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d101      	bne.n	8017e50 <LinkedListRemove+0x1a>
    {
        return false;
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	e020      	b.n	8017e92 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8017e50:	6839      	ldr	r1, [r7, #0]
 8017e52:	6878      	ldr	r0, [r7, #4]
 8017e54:	f7ff ffc6 	bl	8017de4 <LinkedListGetPrevious>
 8017e58:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	683a      	ldr	r2, [r7, #0]
 8017e60:	429a      	cmp	r2, r3
 8017e62:	d103      	bne.n	8017e6c <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8017e64:	683b      	ldr	r3, [r7, #0]
 8017e66:	681a      	ldr	r2, [r3, #0]
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	685b      	ldr	r3, [r3, #4]
 8017e70:	683a      	ldr	r2, [r7, #0]
 8017e72:	429a      	cmp	r2, r3
 8017e74:	d102      	bne.n	8017e7c <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	68fa      	ldr	r2, [r7, #12]
 8017e7a:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d003      	beq.n	8017e8a <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8017e82:	683b      	ldr	r3, [r7, #0]
 8017e84:	681a      	ldr	r2, [r3, #0]
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8017e8a:	683b      	ldr	r3, [r7, #0]
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	601a      	str	r2, [r3, #0]

    return true;
 8017e90:	2301      	movs	r3, #1
}
 8017e92:	4618      	mov	r0, r3
 8017e94:	3710      	adds	r7, #16
 8017e96:	46bd      	mov	sp, r7
 8017e98:	bd80      	pop	{r7, pc}

08017e9a <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8017e9a:	b480      	push	{r7}
 8017e9c:	b083      	sub	sp, #12
 8017e9e:	af00      	add	r7, sp, #0
 8017ea0:	4603      	mov	r3, r0
 8017ea2:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8017ea4:	79fb      	ldrb	r3, [r7, #7]
 8017ea6:	2b05      	cmp	r3, #5
 8017ea8:	d004      	beq.n	8017eb4 <IsSticky+0x1a>
 8017eaa:	2b05      	cmp	r3, #5
 8017eac:	db04      	blt.n	8017eb8 <IsSticky+0x1e>
 8017eae:	3b08      	subs	r3, #8
 8017eb0:	2b02      	cmp	r3, #2
 8017eb2:	d801      	bhi.n	8017eb8 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8017eb4:	2301      	movs	r3, #1
 8017eb6:	e000      	b.n	8017eba <IsSticky+0x20>
        default:
            return false;
 8017eb8:	2300      	movs	r3, #0
    }
}
 8017eba:	4618      	mov	r0, r3
 8017ebc:	370c      	adds	r7, #12
 8017ebe:	46bd      	mov	sp, r7
 8017ec0:	bc80      	pop	{r7}
 8017ec2:	4770      	bx	lr

08017ec4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8017ec4:	b580      	push	{r7, lr}
 8017ec6:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8017ec8:	22fc      	movs	r2, #252	; 0xfc
 8017eca:	2100      	movs	r1, #0
 8017ecc:	4804      	ldr	r0, [pc, #16]	; (8017ee0 <LoRaMacCommandsInit+0x1c>)
 8017ece:	f004 f99b 	bl	801c208 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8017ed2:	4803      	ldr	r0, [pc, #12]	; (8017ee0 <LoRaMacCommandsInit+0x1c>)
 8017ed4:	f7ff ff49 	bl	8017d6a <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8017ed8:	2300      	movs	r3, #0
}
 8017eda:	4618      	mov	r0, r3
 8017edc:	bd80      	pop	{r7, pc}
 8017ede:	bf00      	nop
 8017ee0:	20002274 	.word	0x20002274

08017ee4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8017ee4:	b580      	push	{r7, lr}
 8017ee6:	b086      	sub	sp, #24
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	4603      	mov	r3, r0
 8017eec:	60b9      	str	r1, [r7, #8]
 8017eee:	607a      	str	r2, [r7, #4]
 8017ef0:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8017ef2:	68bb      	ldr	r3, [r7, #8]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d101      	bne.n	8017efc <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8017ef8:	2301      	movs	r3, #1
 8017efa:	e033      	b.n	8017f64 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8017efc:	f7ff fefa 	bl	8017cf4 <MallocNewMacCommandSlot>
 8017f00:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8017f02:	697b      	ldr	r3, [r7, #20]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d101      	bne.n	8017f0c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8017f08:	2302      	movs	r3, #2
 8017f0a:	e02b      	b.n	8017f64 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8017f0c:	6979      	ldr	r1, [r7, #20]
 8017f0e:	4817      	ldr	r0, [pc, #92]	; (8017f6c <LoRaMacCommandsAddCmd+0x88>)
 8017f10:	f7ff ff40 	bl	8017d94 <LinkedListAdd>
 8017f14:	4603      	mov	r3, r0
 8017f16:	f083 0301 	eor.w	r3, r3, #1
 8017f1a:	b2db      	uxtb	r3, r3
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d001      	beq.n	8017f24 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8017f20:	2305      	movs	r3, #5
 8017f22:	e01f      	b.n	8017f64 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8017f24:	697b      	ldr	r3, [r7, #20]
 8017f26:	7bfa      	ldrb	r2, [r7, #15]
 8017f28:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8017f2a:	697b      	ldr	r3, [r7, #20]
 8017f2c:	687a      	ldr	r2, [r7, #4]
 8017f2e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8017f30:	697b      	ldr	r3, [r7, #20]
 8017f32:	3305      	adds	r3, #5
 8017f34:	687a      	ldr	r2, [r7, #4]
 8017f36:	b292      	uxth	r2, r2
 8017f38:	68b9      	ldr	r1, [r7, #8]
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	f004 f929 	bl	801c192 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8017f40:	7bfb      	ldrb	r3, [r7, #15]
 8017f42:	4618      	mov	r0, r3
 8017f44:	f7ff ffa9 	bl	8017e9a <IsSticky>
 8017f48:	4603      	mov	r3, r0
 8017f4a:	461a      	mov	r2, r3
 8017f4c:	697b      	ldr	r3, [r7, #20]
 8017f4e:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8017f50:	4b06      	ldr	r3, [pc, #24]	; (8017f6c <LoRaMacCommandsAddCmd+0x88>)
 8017f52:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	4413      	add	r3, r2
 8017f5a:	3301      	adds	r3, #1
 8017f5c:	4a03      	ldr	r2, [pc, #12]	; (8017f6c <LoRaMacCommandsAddCmd+0x88>)
 8017f5e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8017f62:	2300      	movs	r3, #0
}
 8017f64:	4618      	mov	r0, r3
 8017f66:	3718      	adds	r7, #24
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	bd80      	pop	{r7, pc}
 8017f6c:	20002274 	.word	0x20002274

08017f70 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8017f70:	b580      	push	{r7, lr}
 8017f72:	b082      	sub	sp, #8
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d101      	bne.n	8017f82 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8017f7e:	2301      	movs	r3, #1
 8017f80:	e021      	b.n	8017fc6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8017f82:	6879      	ldr	r1, [r7, #4]
 8017f84:	4812      	ldr	r0, [pc, #72]	; (8017fd0 <LoRaMacCommandsRemoveCmd+0x60>)
 8017f86:	f7ff ff56 	bl	8017e36 <LinkedListRemove>
 8017f8a:	4603      	mov	r3, r0
 8017f8c:	f083 0301 	eor.w	r3, r3, #1
 8017f90:	b2db      	uxtb	r3, r3
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d001      	beq.n	8017f9a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8017f96:	2303      	movs	r3, #3
 8017f98:	e015      	b.n	8017fc6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8017f9a:	4b0d      	ldr	r3, [pc, #52]	; (8017fd0 <LoRaMacCommandsRemoveCmd+0x60>)
 8017f9c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	689b      	ldr	r3, [r3, #8]
 8017fa4:	1ad3      	subs	r3, r2, r3
 8017fa6:	3b01      	subs	r3, #1
 8017fa8:	4a09      	ldr	r2, [pc, #36]	; (8017fd0 <LoRaMacCommandsRemoveCmd+0x60>)
 8017faa:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8017fae:	6878      	ldr	r0, [r7, #4]
 8017fb0:	f7ff fec8 	bl	8017d44 <FreeMacCommandSlot>
 8017fb4:	4603      	mov	r3, r0
 8017fb6:	f083 0301 	eor.w	r3, r3, #1
 8017fba:	b2db      	uxtb	r3, r3
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d001      	beq.n	8017fc4 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8017fc0:	2305      	movs	r3, #5
 8017fc2:	e000      	b.n	8017fc6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8017fc4:	2300      	movs	r3, #0
}
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	3708      	adds	r7, #8
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	bd80      	pop	{r7, pc}
 8017fce:	bf00      	nop
 8017fd0:	20002274 	.word	0x20002274

08017fd4 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b082      	sub	sp, #8
 8017fd8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8017fda:	4b0f      	ldr	r3, [pc, #60]	; (8018018 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8017fe0:	e012      	b.n	8018008 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	7b1b      	ldrb	r3, [r3, #12]
 8017fe6:	f083 0301 	eor.w	r3, r3, #1
 8017fea:	b2db      	uxtb	r3, r3
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d008      	beq.n	8018002 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8017ff6:	6878      	ldr	r0, [r7, #4]
 8017ff8:	f7ff ffba 	bl	8017f70 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8017ffc:	683b      	ldr	r3, [r7, #0]
 8017ffe:	607b      	str	r3, [r7, #4]
 8018000:	e002      	b.n	8018008 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	2b00      	cmp	r3, #0
 801800c:	d1e9      	bne.n	8017fe2 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801800e:	2300      	movs	r3, #0
}
 8018010:	4618      	mov	r0, r3
 8018012:	3708      	adds	r7, #8
 8018014:	46bd      	mov	sp, r7
 8018016:	bd80      	pop	{r7, pc}
 8018018:	20002274 	.word	0x20002274

0801801c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 801801c:	b580      	push	{r7, lr}
 801801e:	b082      	sub	sp, #8
 8018020:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8018022:	4b0e      	ldr	r3, [pc, #56]	; (801805c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8018028:	e00f      	b.n	801804a <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	791b      	ldrb	r3, [r3, #4]
 8018034:	4618      	mov	r0, r3
 8018036:	f7ff ff30 	bl	8017e9a <IsSticky>
 801803a:	4603      	mov	r3, r0
 801803c:	2b00      	cmp	r3, #0
 801803e:	d002      	beq.n	8018046 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8018040:	6878      	ldr	r0, [r7, #4]
 8018042:	f7ff ff95 	bl	8017f70 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8018046:	683b      	ldr	r3, [r7, #0]
 8018048:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	2b00      	cmp	r3, #0
 801804e:	d1ec      	bne.n	801802a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8018050:	2300      	movs	r3, #0
}
 8018052:	4618      	mov	r0, r3
 8018054:	3708      	adds	r7, #8
 8018056:	46bd      	mov	sp, r7
 8018058:	bd80      	pop	{r7, pc}
 801805a:	bf00      	nop
 801805c:	20002274 	.word	0x20002274

08018060 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8018060:	b480      	push	{r7}
 8018062:	b083      	sub	sp, #12
 8018064:	af00      	add	r7, sp, #0
 8018066:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	2b00      	cmp	r3, #0
 801806c:	d101      	bne.n	8018072 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801806e:	2301      	movs	r3, #1
 8018070:	e005      	b.n	801807e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8018072:	4b05      	ldr	r3, [pc, #20]	; (8018088 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8018074:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 801807c:	2300      	movs	r3, #0
}
 801807e:	4618      	mov	r0, r3
 8018080:	370c      	adds	r7, #12
 8018082:	46bd      	mov	sp, r7
 8018084:	bc80      	pop	{r7}
 8018086:	4770      	bx	lr
 8018088:	20002274 	.word	0x20002274

0801808c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 801808c:	b580      	push	{r7, lr}
 801808e:	b088      	sub	sp, #32
 8018090:	af00      	add	r7, sp, #0
 8018092:	60f8      	str	r0, [r7, #12]
 8018094:	60b9      	str	r1, [r7, #8]
 8018096:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8018098:	4b25      	ldr	r3, [pc, #148]	; (8018130 <LoRaMacCommandsSerializeCmds+0xa4>)
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801809e:	2300      	movs	r3, #0
 80180a0:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d002      	beq.n	80180ae <LoRaMacCommandsSerializeCmds+0x22>
 80180a8:	68bb      	ldr	r3, [r7, #8]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d126      	bne.n	80180fc <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80180ae:	2301      	movs	r3, #1
 80180b0:	e039      	b.n	8018126 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80180b2:	7efb      	ldrb	r3, [r7, #27]
 80180b4:	68fa      	ldr	r2, [r7, #12]
 80180b6:	1ad2      	subs	r2, r2, r3
 80180b8:	69fb      	ldr	r3, [r7, #28]
 80180ba:	689b      	ldr	r3, [r3, #8]
 80180bc:	3301      	adds	r3, #1
 80180be:	429a      	cmp	r2, r3
 80180c0:	d320      	bcc.n	8018104 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80180c2:	7efb      	ldrb	r3, [r7, #27]
 80180c4:	1c5a      	adds	r2, r3, #1
 80180c6:	76fa      	strb	r2, [r7, #27]
 80180c8:	461a      	mov	r2, r3
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	4413      	add	r3, r2
 80180ce:	69fa      	ldr	r2, [r7, #28]
 80180d0:	7912      	ldrb	r2, [r2, #4]
 80180d2:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80180d4:	7efb      	ldrb	r3, [r7, #27]
 80180d6:	687a      	ldr	r2, [r7, #4]
 80180d8:	18d0      	adds	r0, r2, r3
 80180da:	69fb      	ldr	r3, [r7, #28]
 80180dc:	1d59      	adds	r1, r3, #5
 80180de:	69fb      	ldr	r3, [r7, #28]
 80180e0:	689b      	ldr	r3, [r3, #8]
 80180e2:	b29b      	uxth	r3, r3
 80180e4:	461a      	mov	r2, r3
 80180e6:	f004 f854 	bl	801c192 <memcpy1>
            itr += curElement->PayloadSize;
 80180ea:	69fb      	ldr	r3, [r7, #28]
 80180ec:	689b      	ldr	r3, [r3, #8]
 80180ee:	b2da      	uxtb	r2, r3
 80180f0:	7efb      	ldrb	r3, [r7, #27]
 80180f2:	4413      	add	r3, r2
 80180f4:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80180f6:	69fb      	ldr	r3, [r7, #28]
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80180fc:	69fb      	ldr	r3, [r7, #28]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d1d7      	bne.n	80180b2 <LoRaMacCommandsSerializeCmds+0x26>
 8018102:	e009      	b.n	8018118 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8018104:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8018106:	e007      	b.n	8018118 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8018108:	69fb      	ldr	r3, [r7, #28]
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801810e:	69f8      	ldr	r0, [r7, #28]
 8018110:	f7ff ff2e 	bl	8017f70 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8018114:	697b      	ldr	r3, [r7, #20]
 8018116:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8018118:	69fb      	ldr	r3, [r7, #28]
 801811a:	2b00      	cmp	r3, #0
 801811c:	d1f4      	bne.n	8018108 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801811e:	68b8      	ldr	r0, [r7, #8]
 8018120:	f7ff ff9e 	bl	8018060 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8018124:	2300      	movs	r3, #0
}
 8018126:	4618      	mov	r0, r3
 8018128:	3720      	adds	r7, #32
 801812a:	46bd      	mov	sp, r7
 801812c:	bd80      	pop	{r7, pc}
 801812e:	bf00      	nop
 8018130:	20002274 	.word	0x20002274

08018134 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8018134:	b480      	push	{r7}
 8018136:	b085      	sub	sp, #20
 8018138:	af00      	add	r7, sp, #0
 801813a:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	2b00      	cmp	r3, #0
 8018140:	d101      	bne.n	8018146 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8018142:	2301      	movs	r3, #1
 8018144:	e016      	b.n	8018174 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8018146:	4b0e      	ldr	r3, [pc, #56]	; (8018180 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	2200      	movs	r2, #0
 8018150:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8018152:	e00b      	b.n	801816c <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	7b1b      	ldrb	r3, [r3, #12]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d004      	beq.n	8018166 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	2201      	movs	r2, #1
 8018160:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8018162:	2300      	movs	r3, #0
 8018164:	e006      	b.n	8018174 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d1f0      	bne.n	8018154 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8018172:	2300      	movs	r3, #0
}
 8018174:	4618      	mov	r0, r3
 8018176:	3714      	adds	r7, #20
 8018178:	46bd      	mov	sp, r7
 801817a:	bc80      	pop	{r7}
 801817c:	4770      	bx	lr
 801817e:	bf00      	nop
 8018180:	20002274 	.word	0x20002274

08018184 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8018184:	b480      	push	{r7}
 8018186:	b085      	sub	sp, #20
 8018188:	af00      	add	r7, sp, #0
 801818a:	4603      	mov	r3, r0
 801818c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801818e:	2300      	movs	r3, #0
 8018190:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8018192:	79fb      	ldrb	r3, [r7, #7]
 8018194:	3b02      	subs	r3, #2
 8018196:	2b11      	cmp	r3, #17
 8018198:	d850      	bhi.n	801823c <LoRaMacCommandsGetCmdSize+0xb8>
 801819a:	a201      	add	r2, pc, #4	; (adr r2, 80181a0 <LoRaMacCommandsGetCmdSize+0x1c>)
 801819c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181a0:	080181e9 	.word	0x080181e9
 80181a4:	080181ef 	.word	0x080181ef
 80181a8:	080181f5 	.word	0x080181f5
 80181ac:	080181fb 	.word	0x080181fb
 80181b0:	08018201 	.word	0x08018201
 80181b4:	08018207 	.word	0x08018207
 80181b8:	0801820d 	.word	0x0801820d
 80181bc:	08018213 	.word	0x08018213
 80181c0:	08018219 	.word	0x08018219
 80181c4:	0801823d 	.word	0x0801823d
 80181c8:	0801823d 	.word	0x0801823d
 80181cc:	0801821f 	.word	0x0801821f
 80181d0:	0801823d 	.word	0x0801823d
 80181d4:	0801823d 	.word	0x0801823d
 80181d8:	08018225 	.word	0x08018225
 80181dc:	0801822b 	.word	0x0801822b
 80181e0:	08018231 	.word	0x08018231
 80181e4:	08018237 	.word	0x08018237
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80181e8:	2303      	movs	r3, #3
 80181ea:	73fb      	strb	r3, [r7, #15]
            break;
 80181ec:	e027      	b.n	801823e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80181ee:	2305      	movs	r3, #5
 80181f0:	73fb      	strb	r3, [r7, #15]
            break;
 80181f2:	e024      	b.n	801823e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80181f4:	2302      	movs	r3, #2
 80181f6:	73fb      	strb	r3, [r7, #15]
            break;
 80181f8:	e021      	b.n	801823e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80181fa:	2305      	movs	r3, #5
 80181fc:	73fb      	strb	r3, [r7, #15]
            break;
 80181fe:	e01e      	b.n	801823e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8018200:	2301      	movs	r3, #1
 8018202:	73fb      	strb	r3, [r7, #15]
            break;
 8018204:	e01b      	b.n	801823e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8018206:	2306      	movs	r3, #6
 8018208:	73fb      	strb	r3, [r7, #15]
            break;
 801820a:	e018      	b.n	801823e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801820c:	2302      	movs	r3, #2
 801820e:	73fb      	strb	r3, [r7, #15]
            break;
 8018210:	e015      	b.n	801823e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8018212:	2302      	movs	r3, #2
 8018214:	73fb      	strb	r3, [r7, #15]
            break;
 8018216:	e012      	b.n	801823e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8018218:	2305      	movs	r3, #5
 801821a:	73fb      	strb	r3, [r7, #15]
            break;
 801821c:	e00f      	b.n	801823e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801821e:	2306      	movs	r3, #6
 8018220:	73fb      	strb	r3, [r7, #15]
            break;
 8018222:	e00c      	b.n	801823e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8018224:	2301      	movs	r3, #1
 8018226:	73fb      	strb	r3, [r7, #15]
            break;
 8018228:	e009      	b.n	801823e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801822a:	2305      	movs	r3, #5
 801822c:	73fb      	strb	r3, [r7, #15]
            break;
 801822e:	e006      	b.n	801823e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8018230:	2304      	movs	r3, #4
 8018232:	73fb      	strb	r3, [r7, #15]
            break;
 8018234:	e003      	b.n	801823e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8018236:	2304      	movs	r3, #4
 8018238:	73fb      	strb	r3, [r7, #15]
            break;
 801823a:	e000      	b.n	801823e <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 801823c:	bf00      	nop
        }
    }
    return cidSize;
 801823e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018240:	4618      	mov	r0, r3
 8018242:	3714      	adds	r7, #20
 8018244:	46bd      	mov	sp, r7
 8018246:	bc80      	pop	{r7}
 8018248:	4770      	bx	lr
 801824a:	bf00      	nop

0801824c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801824c:	b480      	push	{r7}
 801824e:	b083      	sub	sp, #12
 8018250:	af00      	add	r7, sp, #0
 8018252:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	4a07      	ldr	r2, [pc, #28]	; (8018274 <IncreaseBufferPointer+0x28>)
 8018258:	4293      	cmp	r3, r2
 801825a:	d102      	bne.n	8018262 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801825c:	4b06      	ldr	r3, [pc, #24]	; (8018278 <IncreaseBufferPointer+0x2c>)
 801825e:	607b      	str	r3, [r7, #4]
 8018260:	e002      	b.n	8018268 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	3304      	adds	r3, #4
 8018266:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8018268:	687b      	ldr	r3, [r7, #4]
}
 801826a:	4618      	mov	r0, r3
 801826c:	370c      	adds	r7, #12
 801826e:	46bd      	mov	sp, r7
 8018270:	bc80      	pop	{r7}
 8018272:	4770      	bx	lr
 8018274:	2000238c 	.word	0x2000238c
 8018278:	2000237c 	.word	0x2000237c

0801827c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801827c:	b480      	push	{r7}
 801827e:	b083      	sub	sp, #12
 8018280:	af00      	add	r7, sp, #0
 8018282:	4603      	mov	r3, r0
 8018284:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8018286:	79fb      	ldrb	r3, [r7, #7]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d101      	bne.n	8018290 <IsListEmpty+0x14>
    {
        return true;
 801828c:	2301      	movs	r3, #1
 801828e:	e000      	b.n	8018292 <IsListEmpty+0x16>
    }
    return false;
 8018290:	2300      	movs	r3, #0
}
 8018292:	4618      	mov	r0, r3
 8018294:	370c      	adds	r7, #12
 8018296:	46bd      	mov	sp, r7
 8018298:	bc80      	pop	{r7}
 801829a:	4770      	bx	lr

0801829c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801829c:	b480      	push	{r7}
 801829e:	b083      	sub	sp, #12
 80182a0:	af00      	add	r7, sp, #0
 80182a2:	4603      	mov	r3, r0
 80182a4:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80182a6:	79fb      	ldrb	r3, [r7, #7]
 80182a8:	2b04      	cmp	r3, #4
 80182aa:	d901      	bls.n	80182b0 <IsListFull+0x14>
    {
        return true;
 80182ac:	2301      	movs	r3, #1
 80182ae:	e000      	b.n	80182b2 <IsListFull+0x16>
    }
    return false;
 80182b0:	2300      	movs	r3, #0
}
 80182b2:	4618      	mov	r0, r3
 80182b4:	370c      	adds	r7, #12
 80182b6:	46bd      	mov	sp, r7
 80182b8:	bc80      	pop	{r7}
 80182ba:	4770      	bx	lr

080182bc <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80182bc:	b580      	push	{r7, lr}
 80182be:	b086      	sub	sp, #24
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	4603      	mov	r3, r0
 80182c4:	60b9      	str	r1, [r7, #8]
 80182c6:	607a      	str	r2, [r7, #4]
 80182c8:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80182ca:	68bb      	ldr	r3, [r7, #8]
 80182cc:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80182ce:	4b13      	ldr	r3, [pc, #76]	; (801831c <GetElement+0x60>)
 80182d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80182d4:	4618      	mov	r0, r3
 80182d6:	f7ff ffd1 	bl	801827c <IsListEmpty>
 80182da:	4603      	mov	r3, r0
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d001      	beq.n	80182e4 <GetElement+0x28>
    {
        return NULL;
 80182e0:	2300      	movs	r3, #0
 80182e2:	e017      	b.n	8018314 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80182e4:	2300      	movs	r3, #0
 80182e6:	74fb      	strb	r3, [r7, #19]
 80182e8:	e00d      	b.n	8018306 <GetElement+0x4a>
    {
        if( element->Request == request )
 80182ea:	697b      	ldr	r3, [r7, #20]
 80182ec:	781b      	ldrb	r3, [r3, #0]
 80182ee:	7bfa      	ldrb	r2, [r7, #15]
 80182f0:	429a      	cmp	r2, r3
 80182f2:	d101      	bne.n	80182f8 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80182f4:	697b      	ldr	r3, [r7, #20]
 80182f6:	e00d      	b.n	8018314 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80182f8:	6978      	ldr	r0, [r7, #20]
 80182fa:	f7ff ffa7 	bl	801824c <IncreaseBufferPointer>
 80182fe:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8018300:	7cfb      	ldrb	r3, [r7, #19]
 8018302:	3301      	adds	r3, #1
 8018304:	74fb      	strb	r3, [r7, #19]
 8018306:	4b05      	ldr	r3, [pc, #20]	; (801831c <GetElement+0x60>)
 8018308:	f893 3020 	ldrb.w	r3, [r3, #32]
 801830c:	7cfa      	ldrb	r2, [r7, #19]
 801830e:	429a      	cmp	r2, r3
 8018310:	d3eb      	bcc.n	80182ea <GetElement+0x2e>
    }

    return NULL;
 8018312:	2300      	movs	r3, #0
}
 8018314:	4618      	mov	r0, r3
 8018316:	3718      	adds	r7, #24
 8018318:	46bd      	mov	sp, r7
 801831a:	bd80      	pop	{r7, pc}
 801831c:	20002370 	.word	0x20002370

08018320 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8018320:	b580      	push	{r7, lr}
 8018322:	b082      	sub	sp, #8
 8018324:	af00      	add	r7, sp, #0
 8018326:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8018328:	4a0c      	ldr	r2, [pc, #48]	; (801835c <LoRaMacConfirmQueueInit+0x3c>)
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801832e:	4b0b      	ldr	r3, [pc, #44]	; (801835c <LoRaMacConfirmQueueInit+0x3c>)
 8018330:	2200      	movs	r2, #0
 8018332:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8018336:	4b09      	ldr	r3, [pc, #36]	; (801835c <LoRaMacConfirmQueueInit+0x3c>)
 8018338:	4a09      	ldr	r2, [pc, #36]	; (8018360 <LoRaMacConfirmQueueInit+0x40>)
 801833a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801833c:	4b07      	ldr	r3, [pc, #28]	; (801835c <LoRaMacConfirmQueueInit+0x3c>)
 801833e:	4a08      	ldr	r2, [pc, #32]	; (8018360 <LoRaMacConfirmQueueInit+0x40>)
 8018340:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8018342:	2214      	movs	r2, #20
 8018344:	21ff      	movs	r1, #255	; 0xff
 8018346:	4806      	ldr	r0, [pc, #24]	; (8018360 <LoRaMacConfirmQueueInit+0x40>)
 8018348:	f003 ff5e 	bl	801c208 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801834c:	4b03      	ldr	r3, [pc, #12]	; (801835c <LoRaMacConfirmQueueInit+0x3c>)
 801834e:	2201      	movs	r2, #1
 8018350:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8018354:	bf00      	nop
 8018356:	3708      	adds	r7, #8
 8018358:	46bd      	mov	sp, r7
 801835a:	bd80      	pop	{r7, pc}
 801835c:	20002370 	.word	0x20002370
 8018360:	2000237c 	.word	0x2000237c

08018364 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b082      	sub	sp, #8
 8018368:	af00      	add	r7, sp, #0
 801836a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801836c:	4b19      	ldr	r3, [pc, #100]	; (80183d4 <LoRaMacConfirmQueueAdd+0x70>)
 801836e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018372:	4618      	mov	r0, r3
 8018374:	f7ff ff92 	bl	801829c <IsListFull>
 8018378:	4603      	mov	r3, r0
 801837a:	2b00      	cmp	r3, #0
 801837c:	d001      	beq.n	8018382 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801837e:	2300      	movs	r3, #0
 8018380:	e023      	b.n	80183ca <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8018382:	4b14      	ldr	r3, [pc, #80]	; (80183d4 <LoRaMacConfirmQueueAdd+0x70>)
 8018384:	689b      	ldr	r3, [r3, #8]
 8018386:	687a      	ldr	r2, [r7, #4]
 8018388:	7812      	ldrb	r2, [r2, #0]
 801838a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 801838c:	4b11      	ldr	r3, [pc, #68]	; (80183d4 <LoRaMacConfirmQueueAdd+0x70>)
 801838e:	689b      	ldr	r3, [r3, #8]
 8018390:	687a      	ldr	r2, [r7, #4]
 8018392:	7852      	ldrb	r2, [r2, #1]
 8018394:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8018396:	4b0f      	ldr	r3, [pc, #60]	; (80183d4 <LoRaMacConfirmQueueAdd+0x70>)
 8018398:	689b      	ldr	r3, [r3, #8]
 801839a:	687a      	ldr	r2, [r7, #4]
 801839c:	78d2      	ldrb	r2, [r2, #3]
 801839e:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 80183a0:	4b0c      	ldr	r3, [pc, #48]	; (80183d4 <LoRaMacConfirmQueueAdd+0x70>)
 80183a2:	689b      	ldr	r3, [r3, #8]
 80183a4:	2200      	movs	r2, #0
 80183a6:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80183a8:	4b0a      	ldr	r3, [pc, #40]	; (80183d4 <LoRaMacConfirmQueueAdd+0x70>)
 80183aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80183ae:	3301      	adds	r3, #1
 80183b0:	b2da      	uxtb	r2, r3
 80183b2:	4b08      	ldr	r3, [pc, #32]	; (80183d4 <LoRaMacConfirmQueueAdd+0x70>)
 80183b4:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80183b8:	4b06      	ldr	r3, [pc, #24]	; (80183d4 <LoRaMacConfirmQueueAdd+0x70>)
 80183ba:	689b      	ldr	r3, [r3, #8]
 80183bc:	4618      	mov	r0, r3
 80183be:	f7ff ff45 	bl	801824c <IncreaseBufferPointer>
 80183c2:	4603      	mov	r3, r0
 80183c4:	4a03      	ldr	r2, [pc, #12]	; (80183d4 <LoRaMacConfirmQueueAdd+0x70>)
 80183c6:	6093      	str	r3, [r2, #8]

    return true;
 80183c8:	2301      	movs	r3, #1
}
 80183ca:	4618      	mov	r0, r3
 80183cc:	3708      	adds	r7, #8
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bd80      	pop	{r7, pc}
 80183d2:	bf00      	nop
 80183d4:	20002370 	.word	0x20002370

080183d8 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80183d8:	b580      	push	{r7, lr}
 80183da:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80183dc:	4b0e      	ldr	r3, [pc, #56]	; (8018418 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80183de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80183e2:	4618      	mov	r0, r3
 80183e4:	f7ff ff4a 	bl	801827c <IsListEmpty>
 80183e8:	4603      	mov	r3, r0
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d001      	beq.n	80183f2 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 80183ee:	2300      	movs	r3, #0
 80183f0:	e010      	b.n	8018414 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 80183f2:	4b09      	ldr	r3, [pc, #36]	; (8018418 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80183f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80183f8:	3b01      	subs	r3, #1
 80183fa:	b2da      	uxtb	r2, r3
 80183fc:	4b06      	ldr	r3, [pc, #24]	; (8018418 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80183fe:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8018402:	4b05      	ldr	r3, [pc, #20]	; (8018418 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8018404:	685b      	ldr	r3, [r3, #4]
 8018406:	4618      	mov	r0, r3
 8018408:	f7ff ff20 	bl	801824c <IncreaseBufferPointer>
 801840c:	4603      	mov	r3, r0
 801840e:	4a02      	ldr	r2, [pc, #8]	; (8018418 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8018410:	6053      	str	r3, [r2, #4]

    return true;
 8018412:	2301      	movs	r3, #1
}
 8018414:	4618      	mov	r0, r3
 8018416:	bd80      	pop	{r7, pc}
 8018418:	20002370 	.word	0x20002370

0801841c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b084      	sub	sp, #16
 8018420:	af00      	add	r7, sp, #0
 8018422:	4603      	mov	r3, r0
 8018424:	460a      	mov	r2, r1
 8018426:	71fb      	strb	r3, [r7, #7]
 8018428:	4613      	mov	r3, r2
 801842a:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 801842c:	2300      	movs	r3, #0
 801842e:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8018430:	4b10      	ldr	r3, [pc, #64]	; (8018474 <LoRaMacConfirmQueueSetStatus+0x58>)
 8018432:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018436:	4618      	mov	r0, r3
 8018438:	f7ff ff20 	bl	801827c <IsListEmpty>
 801843c:	4603      	mov	r3, r0
 801843e:	f083 0301 	eor.w	r3, r3, #1
 8018442:	b2db      	uxtb	r3, r3
 8018444:	2b00      	cmp	r3, #0
 8018446:	d011      	beq.n	801846c <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8018448:	4b0a      	ldr	r3, [pc, #40]	; (8018474 <LoRaMacConfirmQueueSetStatus+0x58>)
 801844a:	6859      	ldr	r1, [r3, #4]
 801844c:	4b09      	ldr	r3, [pc, #36]	; (8018474 <LoRaMacConfirmQueueSetStatus+0x58>)
 801844e:	689a      	ldr	r2, [r3, #8]
 8018450:	79bb      	ldrb	r3, [r7, #6]
 8018452:	4618      	mov	r0, r3
 8018454:	f7ff ff32 	bl	80182bc <GetElement>
 8018458:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801845a:	68fb      	ldr	r3, [r7, #12]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d005      	beq.n	801846c <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	79fa      	ldrb	r2, [r7, #7]
 8018464:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	2201      	movs	r2, #1
 801846a:	709a      	strb	r2, [r3, #2]
        }
    }
}
 801846c:	bf00      	nop
 801846e:	3710      	adds	r7, #16
 8018470:	46bd      	mov	sp, r7
 8018472:	bd80      	pop	{r7, pc}
 8018474:	20002370 	.word	0x20002370

08018478 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8018478:	b580      	push	{r7, lr}
 801847a:	b084      	sub	sp, #16
 801847c:	af00      	add	r7, sp, #0
 801847e:	4603      	mov	r3, r0
 8018480:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8018482:	2300      	movs	r3, #0
 8018484:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8018486:	4b10      	ldr	r3, [pc, #64]	; (80184c8 <LoRaMacConfirmQueueGetStatus+0x50>)
 8018488:	f893 3020 	ldrb.w	r3, [r3, #32]
 801848c:	4618      	mov	r0, r3
 801848e:	f7ff fef5 	bl	801827c <IsListEmpty>
 8018492:	4603      	mov	r3, r0
 8018494:	f083 0301 	eor.w	r3, r3, #1
 8018498:	b2db      	uxtb	r3, r3
 801849a:	2b00      	cmp	r3, #0
 801849c:	d00e      	beq.n	80184bc <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801849e:	4b0a      	ldr	r3, [pc, #40]	; (80184c8 <LoRaMacConfirmQueueGetStatus+0x50>)
 80184a0:	6859      	ldr	r1, [r3, #4]
 80184a2:	4b09      	ldr	r3, [pc, #36]	; (80184c8 <LoRaMacConfirmQueueGetStatus+0x50>)
 80184a4:	689a      	ldr	r2, [r3, #8]
 80184a6:	79fb      	ldrb	r3, [r7, #7]
 80184a8:	4618      	mov	r0, r3
 80184aa:	f7ff ff07 	bl	80182bc <GetElement>
 80184ae:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d002      	beq.n	80184bc <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	785b      	ldrb	r3, [r3, #1]
 80184ba:	e000      	b.n	80184be <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80184bc:	2301      	movs	r3, #1
}
 80184be:	4618      	mov	r0, r3
 80184c0:	3710      	adds	r7, #16
 80184c2:	46bd      	mov	sp, r7
 80184c4:	bd80      	pop	{r7, pc}
 80184c6:	bf00      	nop
 80184c8:	20002370 	.word	0x20002370

080184cc <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80184cc:	b580      	push	{r7, lr}
 80184ce:	b084      	sub	sp, #16
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	4603      	mov	r3, r0
 80184d4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80184d6:	4b16      	ldr	r3, [pc, #88]	; (8018530 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80184d8:	685b      	ldr	r3, [r3, #4]
 80184da:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 80184dc:	4a14      	ldr	r2, [pc, #80]	; (8018530 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80184de:	79fb      	ldrb	r3, [r7, #7]
 80184e0:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80184e4:	4b12      	ldr	r3, [pc, #72]	; (8018530 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80184e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80184ea:	4618      	mov	r0, r3
 80184ec:	f7ff fec6 	bl	801827c <IsListEmpty>
 80184f0:	4603      	mov	r3, r0
 80184f2:	f083 0301 	eor.w	r3, r3, #1
 80184f6:	b2db      	uxtb	r3, r3
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d015      	beq.n	8018528 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	79fa      	ldrb	r2, [r7, #7]
 8018500:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8018502:	68fb      	ldr	r3, [r7, #12]
 8018504:	78db      	ldrb	r3, [r3, #3]
 8018506:	f083 0301 	eor.w	r3, r3, #1
 801850a:	b2db      	uxtb	r3, r3
 801850c:	2b00      	cmp	r3, #0
 801850e:	d002      	beq.n	8018516 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	2201      	movs	r2, #1
 8018514:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8018516:	68f8      	ldr	r0, [r7, #12]
 8018518:	f7ff fe98 	bl	801824c <IncreaseBufferPointer>
 801851c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801851e:	4b04      	ldr	r3, [pc, #16]	; (8018530 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8018520:	689b      	ldr	r3, [r3, #8]
 8018522:	68fa      	ldr	r2, [r7, #12]
 8018524:	429a      	cmp	r2, r3
 8018526:	d1e9      	bne.n	80184fc <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8018528:	bf00      	nop
 801852a:	3710      	adds	r7, #16
 801852c:	46bd      	mov	sp, r7
 801852e:	bd80      	pop	{r7, pc}
 8018530:	20002370 	.word	0x20002370

08018534 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8018534:	b580      	push	{r7, lr}
 8018536:	b082      	sub	sp, #8
 8018538:	af00      	add	r7, sp, #0
 801853a:	4603      	mov	r3, r0
 801853c:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801853e:	4b09      	ldr	r3, [pc, #36]	; (8018564 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8018540:	6859      	ldr	r1, [r3, #4]
 8018542:	4b08      	ldr	r3, [pc, #32]	; (8018564 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8018544:	689a      	ldr	r2, [r3, #8]
 8018546:	79fb      	ldrb	r3, [r7, #7]
 8018548:	4618      	mov	r0, r3
 801854a:	f7ff feb7 	bl	80182bc <GetElement>
 801854e:	4603      	mov	r3, r0
 8018550:	2b00      	cmp	r3, #0
 8018552:	d001      	beq.n	8018558 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8018554:	2301      	movs	r3, #1
 8018556:	e000      	b.n	801855a <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8018558:	2300      	movs	r3, #0
}
 801855a:	4618      	mov	r0, r3
 801855c:	3708      	adds	r7, #8
 801855e:	46bd      	mov	sp, r7
 8018560:	bd80      	pop	{r7, pc}
 8018562:	bf00      	nop
 8018564:	20002370 	.word	0x20002370

08018568 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8018568:	b580      	push	{r7, lr}
 801856a:	b084      	sub	sp, #16
 801856c:	af00      	add	r7, sp, #0
 801856e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8018570:	4b22      	ldr	r3, [pc, #136]	; (80185fc <LoRaMacConfirmQueueHandleCb+0x94>)
 8018572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018576:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8018578:	2300      	movs	r3, #0
 801857a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 801857c:	2300      	movs	r3, #0
 801857e:	73fb      	strb	r3, [r7, #15]
 8018580:	e032      	b.n	80185e8 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8018582:	4b1e      	ldr	r3, [pc, #120]	; (80185fc <LoRaMacConfirmQueueHandleCb+0x94>)
 8018584:	685b      	ldr	r3, [r3, #4]
 8018586:	781a      	ldrb	r2, [r3, #0]
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 801858c:	4b1b      	ldr	r3, [pc, #108]	; (80185fc <LoRaMacConfirmQueueHandleCb+0x94>)
 801858e:	685b      	ldr	r3, [r3, #4]
 8018590:	785a      	ldrb	r2, [r3, #1]
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8018596:	4b19      	ldr	r3, [pc, #100]	; (80185fc <LoRaMacConfirmQueueHandleCb+0x94>)
 8018598:	685b      	ldr	r3, [r3, #4]
 801859a:	789b      	ldrb	r3, [r3, #2]
 801859c:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 801859e:	7b7b      	ldrb	r3, [r7, #13]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d005      	beq.n	80185b0 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80185a4:	4b15      	ldr	r3, [pc, #84]	; (80185fc <LoRaMacConfirmQueueHandleCb+0x94>)
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	689b      	ldr	r3, [r3, #8]
 80185aa:	6878      	ldr	r0, [r7, #4]
 80185ac:	4798      	blx	r3
 80185ae:	e00b      	b.n	80185c8 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80185b0:	4b12      	ldr	r3, [pc, #72]	; (80185fc <LoRaMacConfirmQueueHandleCb+0x94>)
 80185b2:	685b      	ldr	r3, [r3, #4]
 80185b4:	781b      	ldrb	r3, [r3, #0]
 80185b6:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80185b8:	4b10      	ldr	r3, [pc, #64]	; (80185fc <LoRaMacConfirmQueueHandleCb+0x94>)
 80185ba:	685b      	ldr	r3, [r3, #4]
 80185bc:	785b      	ldrb	r3, [r3, #1]
 80185be:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80185c0:	4b0e      	ldr	r3, [pc, #56]	; (80185fc <LoRaMacConfirmQueueHandleCb+0x94>)
 80185c2:	685b      	ldr	r3, [r3, #4]
 80185c4:	78db      	ldrb	r3, [r3, #3]
 80185c6:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80185c8:	f7ff ff06 	bl	80183d8 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80185cc:	7b7b      	ldrb	r3, [r7, #13]
 80185ce:	f083 0301 	eor.w	r3, r3, #1
 80185d2:	b2db      	uxtb	r3, r3
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d004      	beq.n	80185e2 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80185d8:	f107 0308 	add.w	r3, r7, #8
 80185dc:	4618      	mov	r0, r3
 80185de:	f7ff fec1 	bl	8018364 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80185e2:	7bfb      	ldrb	r3, [r7, #15]
 80185e4:	3301      	adds	r3, #1
 80185e6:	73fb      	strb	r3, [r7, #15]
 80185e8:	7bfa      	ldrb	r2, [r7, #15]
 80185ea:	7bbb      	ldrb	r3, [r7, #14]
 80185ec:	429a      	cmp	r2, r3
 80185ee:	d3c8      	bcc.n	8018582 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 80185f0:	bf00      	nop
 80185f2:	bf00      	nop
 80185f4:	3710      	adds	r7, #16
 80185f6:	46bd      	mov	sp, r7
 80185f8:	bd80      	pop	{r7, pc}
 80185fa:	bf00      	nop
 80185fc:	20002370 	.word	0x20002370

08018600 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8018600:	b480      	push	{r7}
 8018602:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8018604:	4b03      	ldr	r3, [pc, #12]	; (8018614 <LoRaMacConfirmQueueGetCnt+0x14>)
 8018606:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801860a:	4618      	mov	r0, r3
 801860c:	46bd      	mov	sp, r7
 801860e:	bc80      	pop	{r7}
 8018610:	4770      	bx	lr
 8018612:	bf00      	nop
 8018614:	20002370 	.word	0x20002370

08018618 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8018618:	b580      	push	{r7, lr}
 801861a:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801861c:	4b06      	ldr	r3, [pc, #24]	; (8018638 <LoRaMacConfirmQueueIsFull+0x20>)
 801861e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018622:	4618      	mov	r0, r3
 8018624:	f7ff fe3a 	bl	801829c <IsListFull>
 8018628:	4603      	mov	r3, r0
 801862a:	2b00      	cmp	r3, #0
 801862c:	d001      	beq.n	8018632 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801862e:	2301      	movs	r3, #1
 8018630:	e000      	b.n	8018634 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8018632:	2300      	movs	r3, #0
    }
}
 8018634:	4618      	mov	r0, r3
 8018636:	bd80      	pop	{r7, pc}
 8018638:	20002370 	.word	0x20002370

0801863c <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 801863c:	b580      	push	{r7, lr}
 801863e:	b08e      	sub	sp, #56	; 0x38
 8018640:	af00      	add	r7, sp, #0
 8018642:	60f8      	str	r0, [r7, #12]
 8018644:	607b      	str	r3, [r7, #4]
 8018646:	460b      	mov	r3, r1
 8018648:	817b      	strh	r3, [r7, #10]
 801864a:	4613      	mov	r3, r2
 801864c:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	2b00      	cmp	r3, #0
 8018652:	d101      	bne.n	8018658 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018654:	230a      	movs	r3, #10
 8018656:	e086      	b.n	8018766 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8018658:	2300      	movs	r3, #0
 801865a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 801865e:	2301      	movs	r3, #1
 8018660:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8018662:	2300      	movs	r3, #0
 8018664:	623b      	str	r3, [r7, #32]
 8018666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801866a:	2200      	movs	r2, #0
 801866c:	601a      	str	r2, [r3, #0]
 801866e:	605a      	str	r2, [r3, #4]
 8018670:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8018672:	2300      	movs	r3, #0
 8018674:	613b      	str	r3, [r7, #16]
 8018676:	f107 0314 	add.w	r3, r7, #20
 801867a:	2200      	movs	r2, #0
 801867c:	601a      	str	r2, [r3, #0]
 801867e:	605a      	str	r2, [r3, #4]
 8018680:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8018682:	2301      	movs	r3, #1
 8018684:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8018686:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801868a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	b2db      	uxtb	r3, r3
 8018690:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	0a1b      	lsrs	r3, r3, #8
 8018696:	b2db      	uxtb	r3, r3
 8018698:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	0c1b      	lsrs	r3, r3, #16
 801869e:	b2db      	uxtb	r3, r3
 80186a0:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	0e1b      	lsrs	r3, r3, #24
 80186a6:	b2db      	uxtb	r3, r3
 80186a8:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80186aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80186ac:	b2db      	uxtb	r3, r3
 80186ae:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80186b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80186b2:	0a1b      	lsrs	r3, r3, #8
 80186b4:	b2db      	uxtb	r3, r3
 80186b6:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80186b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80186ba:	0c1b      	lsrs	r3, r3, #16
 80186bc:	b2db      	uxtb	r3, r3
 80186be:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80186c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80186c2:	0e1b      	lsrs	r3, r3, #24
 80186c4:	b2db      	uxtb	r3, r3
 80186c6:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 80186c8:	e048      	b.n	801875c <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 80186ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80186cc:	b2db      	uxtb	r3, r3
 80186ce:	77fb      	strb	r3, [r7, #31]
        ctr++;
 80186d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80186d2:	3301      	adds	r3, #1
 80186d4:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80186d6:	f107 0320 	add.w	r3, r7, #32
 80186da:	7a7a      	ldrb	r2, [r7, #9]
 80186dc:	f107 0010 	add.w	r0, r7, #16
 80186e0:	2110      	movs	r1, #16
 80186e2:	f7f7 f96c 	bl	800f9be <SecureElementAesEncrypt>
 80186e6:	4603      	mov	r3, r0
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d001      	beq.n	80186f0 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80186ec:	230f      	movs	r3, #15
 80186ee:	e03a      	b.n	8018766 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80186f0:	2300      	movs	r3, #0
 80186f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80186f6:	e01e      	b.n	8018736 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80186f8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80186fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8018700:	4413      	add	r3, r2
 8018702:	461a      	mov	r2, r3
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	4413      	add	r3, r2
 8018708:	7819      	ldrb	r1, [r3, #0]
 801870a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801870e:	3338      	adds	r3, #56	; 0x38
 8018710:	443b      	add	r3, r7
 8018712:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8018716:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 801871a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801871e:	4403      	add	r3, r0
 8018720:	4618      	mov	r0, r3
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	4403      	add	r3, r0
 8018726:	404a      	eors	r2, r1
 8018728:	b2d2      	uxtb	r2, r2
 801872a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801872c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8018730:	3301      	adds	r3, #1
 8018732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018736:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801873a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801873e:	2a10      	cmp	r2, #16
 8018740:	bfa8      	it	ge
 8018742:	2210      	movge	r2, #16
 8018744:	b212      	sxth	r2, r2
 8018746:	4293      	cmp	r3, r2
 8018748:	dbd6      	blt.n	80186f8 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 801874a:	897b      	ldrh	r3, [r7, #10]
 801874c:	3b10      	subs	r3, #16
 801874e:	b29b      	uxth	r3, r3
 8018750:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8018752:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018756:	3310      	adds	r3, #16
 8018758:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 801875c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018760:	2b00      	cmp	r3, #0
 8018762:	dcb2      	bgt.n	80186ca <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8018764:	2300      	movs	r3, #0
}
 8018766:	4618      	mov	r0, r3
 8018768:	3738      	adds	r7, #56	; 0x38
 801876a:	46bd      	mov	sp, r7
 801876c:	bd80      	pop	{r7, pc}

0801876e <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801876e:	b490      	push	{r4, r7}
 8018770:	b082      	sub	sp, #8
 8018772:	af00      	add	r7, sp, #0
 8018774:	4604      	mov	r4, r0
 8018776:	4608      	mov	r0, r1
 8018778:	4611      	mov	r1, r2
 801877a:	461a      	mov	r2, r3
 801877c:	4623      	mov	r3, r4
 801877e:	80fb      	strh	r3, [r7, #6]
 8018780:	4603      	mov	r3, r0
 8018782:	717b      	strb	r3, [r7, #5]
 8018784:	460b      	mov	r3, r1
 8018786:	713b      	strb	r3, [r7, #4]
 8018788:	4613      	mov	r3, r2
 801878a:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 801878c:	69bb      	ldr	r3, [r7, #24]
 801878e:	2b00      	cmp	r3, #0
 8018790:	d101      	bne.n	8018796 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018792:	230a      	movs	r3, #10
 8018794:	e04e      	b.n	8018834 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8018796:	69bb      	ldr	r3, [r7, #24]
 8018798:	2249      	movs	r2, #73	; 0x49
 801879a:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 801879c:	69bb      	ldr	r3, [r7, #24]
 801879e:	3301      	adds	r3, #1
 80187a0:	2200      	movs	r2, #0
 80187a2:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80187a4:	69bb      	ldr	r3, [r7, #24]
 80187a6:	3302      	adds	r3, #2
 80187a8:	2200      	movs	r2, #0
 80187aa:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80187ac:	69bb      	ldr	r3, [r7, #24]
 80187ae:	3303      	adds	r3, #3
 80187b0:	2200      	movs	r2, #0
 80187b2:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80187b4:	69bb      	ldr	r3, [r7, #24]
 80187b6:	3304      	adds	r3, #4
 80187b8:	2200      	movs	r2, #0
 80187ba:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80187bc:	69bb      	ldr	r3, [r7, #24]
 80187be:	3305      	adds	r3, #5
 80187c0:	78fa      	ldrb	r2, [r7, #3]
 80187c2:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80187c4:	69bb      	ldr	r3, [r7, #24]
 80187c6:	3306      	adds	r3, #6
 80187c8:	693a      	ldr	r2, [r7, #16]
 80187ca:	b2d2      	uxtb	r2, r2
 80187cc:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80187ce:	693b      	ldr	r3, [r7, #16]
 80187d0:	0a1a      	lsrs	r2, r3, #8
 80187d2:	69bb      	ldr	r3, [r7, #24]
 80187d4:	3307      	adds	r3, #7
 80187d6:	b2d2      	uxtb	r2, r2
 80187d8:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80187da:	693b      	ldr	r3, [r7, #16]
 80187dc:	0c1a      	lsrs	r2, r3, #16
 80187de:	69bb      	ldr	r3, [r7, #24]
 80187e0:	3308      	adds	r3, #8
 80187e2:	b2d2      	uxtb	r2, r2
 80187e4:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80187e6:	693b      	ldr	r3, [r7, #16]
 80187e8:	0e1a      	lsrs	r2, r3, #24
 80187ea:	69bb      	ldr	r3, [r7, #24]
 80187ec:	3309      	adds	r3, #9
 80187ee:	b2d2      	uxtb	r2, r2
 80187f0:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 80187f2:	69bb      	ldr	r3, [r7, #24]
 80187f4:	330a      	adds	r3, #10
 80187f6:	697a      	ldr	r2, [r7, #20]
 80187f8:	b2d2      	uxtb	r2, r2
 80187fa:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80187fc:	697b      	ldr	r3, [r7, #20]
 80187fe:	0a1a      	lsrs	r2, r3, #8
 8018800:	69bb      	ldr	r3, [r7, #24]
 8018802:	330b      	adds	r3, #11
 8018804:	b2d2      	uxtb	r2, r2
 8018806:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8018808:	697b      	ldr	r3, [r7, #20]
 801880a:	0c1a      	lsrs	r2, r3, #16
 801880c:	69bb      	ldr	r3, [r7, #24]
 801880e:	330c      	adds	r3, #12
 8018810:	b2d2      	uxtb	r2, r2
 8018812:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8018814:	697b      	ldr	r3, [r7, #20]
 8018816:	0e1a      	lsrs	r2, r3, #24
 8018818:	69bb      	ldr	r3, [r7, #24]
 801881a:	330d      	adds	r3, #13
 801881c:	b2d2      	uxtb	r2, r2
 801881e:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8018820:	69bb      	ldr	r3, [r7, #24]
 8018822:	330e      	adds	r3, #14
 8018824:	2200      	movs	r2, #0
 8018826:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8018828:	69bb      	ldr	r3, [r7, #24]
 801882a:	330f      	adds	r3, #15
 801882c:	88fa      	ldrh	r2, [r7, #6]
 801882e:	b2d2      	uxtb	r2, r2
 8018830:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8018832:	2300      	movs	r3, #0
}
 8018834:	4618      	mov	r0, r3
 8018836:	3708      	adds	r7, #8
 8018838:	46bd      	mov	sp, r7
 801883a:	bc90      	pop	{r4, r7}
 801883c:	4770      	bx	lr

0801883e <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801883e:	b590      	push	{r4, r7, lr}
 8018840:	b08b      	sub	sp, #44	; 0x2c
 8018842:	af04      	add	r7, sp, #16
 8018844:	6078      	str	r0, [r7, #4]
 8018846:	4608      	mov	r0, r1
 8018848:	4611      	mov	r1, r2
 801884a:	461a      	mov	r2, r3
 801884c:	4603      	mov	r3, r0
 801884e:	807b      	strh	r3, [r7, #2]
 8018850:	460b      	mov	r3, r1
 8018852:	707b      	strb	r3, [r7, #1]
 8018854:	4613      	mov	r3, r2
 8018856:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	2b00      	cmp	r3, #0
 801885c:	d002      	beq.n	8018864 <ComputeCmacB0+0x26>
 801885e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018860:	2b00      	cmp	r3, #0
 8018862:	d101      	bne.n	8018868 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018864:	230a      	movs	r3, #10
 8018866:	e024      	b.n	80188b2 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8018868:	887b      	ldrh	r3, [r7, #2]
 801886a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801886e:	d901      	bls.n	8018874 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8018870:	230e      	movs	r3, #14
 8018872:	e01e      	b.n	80188b2 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8018874:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8018878:	783a      	ldrb	r2, [r7, #0]
 801887a:	7879      	ldrb	r1, [r7, #1]
 801887c:	8878      	ldrh	r0, [r7, #2]
 801887e:	f107 0308 	add.w	r3, r7, #8
 8018882:	9302      	str	r3, [sp, #8]
 8018884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018886:	9301      	str	r3, [sp, #4]
 8018888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801888a:	9300      	str	r3, [sp, #0]
 801888c:	4623      	mov	r3, r4
 801888e:	f7ff ff6e 	bl	801876e <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8018892:	7879      	ldrb	r1, [r7, #1]
 8018894:	887a      	ldrh	r2, [r7, #2]
 8018896:	f107 0008 	add.w	r0, r7, #8
 801889a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801889c:	9300      	str	r3, [sp, #0]
 801889e:	460b      	mov	r3, r1
 80188a0:	6879      	ldr	r1, [r7, #4]
 80188a2:	f7f7 f83f 	bl	800f924 <SecureElementComputeAesCmac>
 80188a6:	4603      	mov	r3, r0
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d001      	beq.n	80188b0 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80188ac:	230f      	movs	r3, #15
 80188ae:	e000      	b.n	80188b2 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80188b0:	2300      	movs	r3, #0
}
 80188b2:	4618      	mov	r0, r3
 80188b4:	371c      	adds	r7, #28
 80188b6:	46bd      	mov	sp, r7
 80188b8:	bd90      	pop	{r4, r7, pc}

080188ba <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80188ba:	b590      	push	{r4, r7, lr}
 80188bc:	b0cd      	sub	sp, #308	; 0x134
 80188be:	af04      	add	r7, sp, #16
 80188c0:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80188c4:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 80188c8:	6020      	str	r0, [r4, #0]
 80188ca:	460c      	mov	r4, r1
 80188cc:	4610      	mov	r0, r2
 80188ce:	4619      	mov	r1, r3
 80188d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80188d4:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80188d8:	4622      	mov	r2, r4
 80188da:	801a      	strh	r2, [r3, #0]
 80188dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80188e0:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80188e4:	4602      	mov	r2, r0
 80188e6:	701a      	strb	r2, [r3, #0]
 80188e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80188ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80188f0:	460a      	mov	r2, r1
 80188f2:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80188f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80188f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d101      	bne.n	8018906 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018902:	230a      	movs	r3, #10
 8018904:	e063      	b.n	80189ce <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8018906:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801890a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801890e:	881b      	ldrh	r3, [r3, #0]
 8018910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018914:	d901      	bls.n	801891a <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8018916:	230e      	movs	r3, #14
 8018918:	e059      	b.n	80189ce <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801891a:	f107 030c 	add.w	r3, r7, #12
 801891e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8018922:	2100      	movs	r1, #0
 8018924:	4618      	mov	r0, r3
 8018926:	f003 fc6f 	bl	801c208 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801892a:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 801892e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018932:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8018936:	781a      	ldrb	r2, [r3, #0]
 8018938:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801893c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8018940:	7819      	ldrb	r1, [r3, #0]
 8018942:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018946:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801894a:	8818      	ldrh	r0, [r3, #0]
 801894c:	f107 030c 	add.w	r3, r7, #12
 8018950:	9302      	str	r3, [sp, #8]
 8018952:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8018956:	9301      	str	r3, [sp, #4]
 8018958:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801895c:	9300      	str	r3, [sp, #0]
 801895e:	4623      	mov	r3, r4
 8018960:	f7ff ff05 	bl	801876e <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8018964:	f107 030c 	add.w	r3, r7, #12
 8018968:	3310      	adds	r3, #16
 801896a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 801896e:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8018972:	8812      	ldrh	r2, [r2, #0]
 8018974:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8018978:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 801897c:	6809      	ldr	r1, [r1, #0]
 801897e:	4618      	mov	r0, r3
 8018980:	f003 fc07 	bl	801c192 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8018984:	2306      	movs	r3, #6
 8018986:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801898a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801898e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8018992:	881b      	ldrh	r3, [r3, #0]
 8018994:	3310      	adds	r3, #16
 8018996:	b299      	uxth	r1, r3
 8018998:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801899c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80189a0:	781b      	ldrb	r3, [r3, #0]
 80189a2:	f107 000c 	add.w	r0, r7, #12
 80189a6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80189aa:	f7f6 ffd9 	bl	800f960 <SecureElementVerifyAesCmac>
 80189ae:	4603      	mov	r3, r0
 80189b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80189b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d101      	bne.n	80189c0 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80189bc:	2300      	movs	r3, #0
 80189be:	e006      	b.n	80189ce <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80189c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80189c4:	2b01      	cmp	r3, #1
 80189c6:	d101      	bne.n	80189cc <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80189c8:	2301      	movs	r3, #1
 80189ca:	e000      	b.n	80189ce <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80189cc:	230f      	movs	r3, #15
}
 80189ce:	4618      	mov	r0, r3
 80189d0:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80189d4:	46bd      	mov	sp, r7
 80189d6:	bd90      	pop	{r4, r7, pc}

080189d8 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80189d8:	b480      	push	{r7}
 80189da:	b085      	sub	sp, #20
 80189dc:	af00      	add	r7, sp, #0
 80189de:	4603      	mov	r3, r0
 80189e0:	6039      	str	r1, [r7, #0]
 80189e2:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80189e4:	2300      	movs	r3, #0
 80189e6:	73fb      	strb	r3, [r7, #15]
 80189e8:	e011      	b.n	8018a0e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80189ea:	7bfb      	ldrb	r3, [r7, #15]
 80189ec:	4a0c      	ldr	r2, [pc, #48]	; (8018a20 <GetKeyAddrItem+0x48>)
 80189ee:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80189f2:	79fa      	ldrb	r2, [r7, #7]
 80189f4:	429a      	cmp	r2, r3
 80189f6:	d107      	bne.n	8018a08 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80189f8:	7bfb      	ldrb	r3, [r7, #15]
 80189fa:	009b      	lsls	r3, r3, #2
 80189fc:	4a08      	ldr	r2, [pc, #32]	; (8018a20 <GetKeyAddrItem+0x48>)
 80189fe:	441a      	add	r2, r3
 8018a00:	683b      	ldr	r3, [r7, #0]
 8018a02:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8018a04:	2300      	movs	r3, #0
 8018a06:	e006      	b.n	8018a16 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8018a08:	7bfb      	ldrb	r3, [r7, #15]
 8018a0a:	3301      	adds	r3, #1
 8018a0c:	73fb      	strb	r3, [r7, #15]
 8018a0e:	7bfb      	ldrb	r3, [r7, #15]
 8018a10:	2b01      	cmp	r3, #1
 8018a12:	d9ea      	bls.n	80189ea <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8018a14:	230c      	movs	r3, #12
}
 8018a16:	4618      	mov	r0, r3
 8018a18:	3714      	adds	r7, #20
 8018a1a:	46bd      	mov	sp, r7
 8018a1c:	bc80      	pop	{r7}
 8018a1e:	4770      	bx	lr
 8018a20:	2000013c 	.word	0x2000013c

08018a24 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8018a24:	b580      	push	{r7, lr}
 8018a26:	b088      	sub	sp, #32
 8018a28:	af00      	add	r7, sp, #0
 8018a2a:	60b9      	str	r1, [r7, #8]
 8018a2c:	607a      	str	r2, [r7, #4]
 8018a2e:	461a      	mov	r2, r3
 8018a30:	4603      	mov	r3, r0
 8018a32:	73fb      	strb	r3, [r7, #15]
 8018a34:	4613      	mov	r3, r2
 8018a36:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8018a38:	2300      	movs	r3, #0
 8018a3a:	613b      	str	r3, [r7, #16]
 8018a3c:	f107 0314 	add.w	r3, r7, #20
 8018a40:	2200      	movs	r2, #0
 8018a42:	601a      	str	r2, [r3, #0]
 8018a44:	605a      	str	r2, [r3, #4]
 8018a46:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8018a48:	7bfb      	ldrb	r3, [r7, #15]
 8018a4a:	2b02      	cmp	r3, #2
 8018a4c:	d002      	beq.n	8018a54 <DeriveSessionKey10x+0x30>
 8018a4e:	2b03      	cmp	r3, #3
 8018a50:	d003      	beq.n	8018a5a <DeriveSessionKey10x+0x36>
 8018a52:	e005      	b.n	8018a60 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8018a54:	2301      	movs	r3, #1
 8018a56:	743b      	strb	r3, [r7, #16]
            break;
 8018a58:	e004      	b.n	8018a64 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8018a5a:	2302      	movs	r3, #2
 8018a5c:	743b      	strb	r3, [r7, #16]
            break;
 8018a5e:	e001      	b.n	8018a64 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8018a60:	230b      	movs	r3, #11
 8018a62:	e02a      	b.n	8018aba <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8018a64:	68bb      	ldr	r3, [r7, #8]
 8018a66:	b2db      	uxtb	r3, r3
 8018a68:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8018a6a:	68bb      	ldr	r3, [r7, #8]
 8018a6c:	0a1b      	lsrs	r3, r3, #8
 8018a6e:	b2db      	uxtb	r3, r3
 8018a70:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8018a72:	68bb      	ldr	r3, [r7, #8]
 8018a74:	0c1b      	lsrs	r3, r3, #16
 8018a76:	b2db      	uxtb	r3, r3
 8018a78:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	b2db      	uxtb	r3, r3
 8018a7e:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	0a1b      	lsrs	r3, r3, #8
 8018a84:	b2db      	uxtb	r3, r3
 8018a86:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	0c1b      	lsrs	r3, r3, #16
 8018a8c:	b2db      	uxtb	r3, r3
 8018a8e:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8018a90:	89bb      	ldrh	r3, [r7, #12]
 8018a92:	b2db      	uxtb	r3, r3
 8018a94:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8018a96:	89bb      	ldrh	r3, [r7, #12]
 8018a98:	0a1b      	lsrs	r3, r3, #8
 8018a9a:	b29b      	uxth	r3, r3
 8018a9c:	b2db      	uxtb	r3, r3
 8018a9e:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8018aa0:	7bfa      	ldrb	r2, [r7, #15]
 8018aa2:	f107 0310 	add.w	r3, r7, #16
 8018aa6:	2101      	movs	r1, #1
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	f7f6 ffef 	bl	800fa8c <SecureElementDeriveAndStoreKey>
 8018aae:	4603      	mov	r3, r0
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d001      	beq.n	8018ab8 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018ab4:	230f      	movs	r3, #15
 8018ab6:	e000      	b.n	8018aba <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8018ab8:	2300      	movs	r3, #0
}
 8018aba:	4618      	mov	r0, r3
 8018abc:	3720      	adds	r7, #32
 8018abe:	46bd      	mov	sp, r7
 8018ac0:	bd80      	pop	{r7, pc}
	...

08018ac4 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8018ac4:	b480      	push	{r7}
 8018ac6:	b083      	sub	sp, #12
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	4603      	mov	r3, r0
 8018acc:	6039      	str	r1, [r7, #0]
 8018ace:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8018ad0:	683b      	ldr	r3, [r7, #0]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d101      	bne.n	8018ada <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018ad6:	230a      	movs	r3, #10
 8018ad8:	e03b      	b.n	8018b52 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8018ada:	79fb      	ldrb	r3, [r7, #7]
 8018adc:	3b01      	subs	r3, #1
 8018ade:	2b03      	cmp	r3, #3
 8018ae0:	d834      	bhi.n	8018b4c <GetLastFcntDown+0x88>
 8018ae2:	a201      	add	r2, pc, #4	; (adr r2, 8018ae8 <GetLastFcntDown+0x24>)
 8018ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ae8:	08018af9 	.word	0x08018af9
 8018aec:	08018b11 	.word	0x08018b11
 8018af0:	08018b29 	.word	0x08018b29
 8018af4:	08018b41 	.word	0x08018b41
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8018af8:	4b18      	ldr	r3, [pc, #96]	; (8018b5c <GetLastFcntDown+0x98>)
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	691a      	ldr	r2, [r3, #16]
 8018afe:	683b      	ldr	r3, [r7, #0]
 8018b00:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8018b02:	4b16      	ldr	r3, [pc, #88]	; (8018b5c <GetLastFcntDown+0x98>)
 8018b04:	681a      	ldr	r2, [r3, #0]
 8018b06:	4b15      	ldr	r3, [pc, #84]	; (8018b5c <GetLastFcntDown+0x98>)
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	6912      	ldr	r2, [r2, #16]
 8018b0c:	621a      	str	r2, [r3, #32]
            break;
 8018b0e:	e01f      	b.n	8018b50 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8018b10:	4b12      	ldr	r3, [pc, #72]	; (8018b5c <GetLastFcntDown+0x98>)
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	695a      	ldr	r2, [r3, #20]
 8018b16:	683b      	ldr	r3, [r7, #0]
 8018b18:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8018b1a:	4b10      	ldr	r3, [pc, #64]	; (8018b5c <GetLastFcntDown+0x98>)
 8018b1c:	681a      	ldr	r2, [r3, #0]
 8018b1e:	4b0f      	ldr	r3, [pc, #60]	; (8018b5c <GetLastFcntDown+0x98>)
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	6952      	ldr	r2, [r2, #20]
 8018b24:	621a      	str	r2, [r3, #32]
            break;
 8018b26:	e013      	b.n	8018b50 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8018b28:	4b0c      	ldr	r3, [pc, #48]	; (8018b5c <GetLastFcntDown+0x98>)
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	699a      	ldr	r2, [r3, #24]
 8018b2e:	683b      	ldr	r3, [r7, #0]
 8018b30:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8018b32:	4b0a      	ldr	r3, [pc, #40]	; (8018b5c <GetLastFcntDown+0x98>)
 8018b34:	681a      	ldr	r2, [r3, #0]
 8018b36:	4b09      	ldr	r3, [pc, #36]	; (8018b5c <GetLastFcntDown+0x98>)
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	6992      	ldr	r2, [r2, #24]
 8018b3c:	621a      	str	r2, [r3, #32]
            break;
 8018b3e:	e007      	b.n	8018b50 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8018b40:	4b06      	ldr	r3, [pc, #24]	; (8018b5c <GetLastFcntDown+0x98>)
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	69da      	ldr	r2, [r3, #28]
 8018b46:	683b      	ldr	r3, [r7, #0]
 8018b48:	601a      	str	r2, [r3, #0]
            break;
 8018b4a:	e001      	b.n	8018b50 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8018b4c:	2305      	movs	r3, #5
 8018b4e:	e000      	b.n	8018b52 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8018b50:	2300      	movs	r3, #0
}
 8018b52:	4618      	mov	r0, r3
 8018b54:	370c      	adds	r7, #12
 8018b56:	46bd      	mov	sp, r7
 8018b58:	bc80      	pop	{r7}
 8018b5a:	4770      	bx	lr
 8018b5c:	20002394 	.word	0x20002394

08018b60 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8018b60:	b580      	push	{r7, lr}
 8018b62:	b084      	sub	sp, #16
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	4603      	mov	r3, r0
 8018b68:	6039      	str	r1, [r7, #0]
 8018b6a:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8018b6c:	2300      	movs	r3, #0
 8018b6e:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8018b70:	f107 020c 	add.w	r2, r7, #12
 8018b74:	79fb      	ldrb	r3, [r7, #7]
 8018b76:	4611      	mov	r1, r2
 8018b78:	4618      	mov	r0, r3
 8018b7a:	f7ff ffa3 	bl	8018ac4 <GetLastFcntDown>
 8018b7e:	4603      	mov	r3, r0
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d001      	beq.n	8018b88 <CheckFCntDown+0x28>
    {
        return false;
 8018b84:	2300      	movs	r3, #0
 8018b86:	e00a      	b.n	8018b9e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	683a      	ldr	r2, [r7, #0]
 8018b8c:	429a      	cmp	r2, r3
 8018b8e:	d803      	bhi.n	8018b98 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8018b90:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8018b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b96:	d101      	bne.n	8018b9c <CheckFCntDown+0x3c>
    {
        return true;
 8018b98:	2301      	movs	r3, #1
 8018b9a:	e000      	b.n	8018b9e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8018b9c:	2300      	movs	r3, #0
    }
}
 8018b9e:	4618      	mov	r0, r3
 8018ba0:	3710      	adds	r7, #16
 8018ba2:	46bd      	mov	sp, r7
 8018ba4:	bd80      	pop	{r7, pc}
	...

08018ba8 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8018ba8:	b480      	push	{r7}
 8018baa:	b083      	sub	sp, #12
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	4603      	mov	r3, r0
 8018bb0:	6039      	str	r1, [r7, #0]
 8018bb2:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8018bb4:	79fb      	ldrb	r3, [r7, #7]
 8018bb6:	3b01      	subs	r3, #1
 8018bb8:	2b03      	cmp	r3, #3
 8018bba:	d81f      	bhi.n	8018bfc <UpdateFCntDown+0x54>
 8018bbc:	a201      	add	r2, pc, #4	; (adr r2, 8018bc4 <UpdateFCntDown+0x1c>)
 8018bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bc2:	bf00      	nop
 8018bc4:	08018bd5 	.word	0x08018bd5
 8018bc8:	08018bdf 	.word	0x08018bdf
 8018bcc:	08018be9 	.word	0x08018be9
 8018bd0:	08018bf3 	.word	0x08018bf3
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8018bd4:	4b0c      	ldr	r3, [pc, #48]	; (8018c08 <UpdateFCntDown+0x60>)
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	683a      	ldr	r2, [r7, #0]
 8018bda:	611a      	str	r2, [r3, #16]
            break;
 8018bdc:	e00f      	b.n	8018bfe <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8018bde:	4b0a      	ldr	r3, [pc, #40]	; (8018c08 <UpdateFCntDown+0x60>)
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	683a      	ldr	r2, [r7, #0]
 8018be4:	615a      	str	r2, [r3, #20]
            break;
 8018be6:	e00a      	b.n	8018bfe <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8018be8:	4b07      	ldr	r3, [pc, #28]	; (8018c08 <UpdateFCntDown+0x60>)
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	683a      	ldr	r2, [r7, #0]
 8018bee:	619a      	str	r2, [r3, #24]
            break;
 8018bf0:	e005      	b.n	8018bfe <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8018bf2:	4b05      	ldr	r3, [pc, #20]	; (8018c08 <UpdateFCntDown+0x60>)
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	683a      	ldr	r2, [r7, #0]
 8018bf8:	61da      	str	r2, [r3, #28]
            break;
 8018bfa:	e000      	b.n	8018bfe <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8018bfc:	bf00      	nop
    }
}
 8018bfe:	bf00      	nop
 8018c00:	370c      	adds	r7, #12
 8018c02:	46bd      	mov	sp, r7
 8018c04:	bc80      	pop	{r7}
 8018c06:	4770      	bx	lr
 8018c08:	20002394 	.word	0x20002394

08018c0c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8018c0c:	b480      	push	{r7}
 8018c0e:	b083      	sub	sp, #12
 8018c10:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8018c12:	4b18      	ldr	r3, [pc, #96]	; (8018c74 <ResetFCnts+0x68>)
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	2200      	movs	r2, #0
 8018c18:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8018c1a:	4b16      	ldr	r3, [pc, #88]	; (8018c74 <ResetFCnts+0x68>)
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8018c22:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8018c24:	4b13      	ldr	r3, [pc, #76]	; (8018c74 <ResetFCnts+0x68>)
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	f04f 32ff 	mov.w	r2, #4294967295
 8018c2c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8018c2e:	4b11      	ldr	r3, [pc, #68]	; (8018c74 <ResetFCnts+0x68>)
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	f04f 32ff 	mov.w	r2, #4294967295
 8018c36:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8018c38:	4b0e      	ldr	r3, [pc, #56]	; (8018c74 <ResetFCnts+0x68>)
 8018c3a:	681a      	ldr	r2, [r3, #0]
 8018c3c:	4b0d      	ldr	r3, [pc, #52]	; (8018c74 <ResetFCnts+0x68>)
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	6992      	ldr	r2, [r2, #24]
 8018c42:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8018c44:	2300      	movs	r3, #0
 8018c46:	607b      	str	r3, [r7, #4]
 8018c48:	e00b      	b.n	8018c62 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8018c4a:	4b0a      	ldr	r3, [pc, #40]	; (8018c74 <ResetFCnts+0x68>)
 8018c4c:	681a      	ldr	r2, [r3, #0]
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	3306      	adds	r3, #6
 8018c52:	009b      	lsls	r3, r3, #2
 8018c54:	4413      	add	r3, r2
 8018c56:	f04f 32ff 	mov.w	r2, #4294967295
 8018c5a:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	3301      	adds	r3, #1
 8018c60:	607b      	str	r3, [r7, #4]
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	ddf0      	ble.n	8018c4a <ResetFCnts+0x3e>
    }
}
 8018c68:	bf00      	nop
 8018c6a:	bf00      	nop
 8018c6c:	370c      	adds	r7, #12
 8018c6e:	46bd      	mov	sp, r7
 8018c70:	bc80      	pop	{r7}
 8018c72:	4770      	bx	lr
 8018c74:	20002394 	.word	0x20002394

08018c78 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8018c78:	b580      	push	{r7, lr}
 8018c7a:	b082      	sub	sp, #8
 8018c7c:	af00      	add	r7, sp, #0
 8018c7e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d101      	bne.n	8018c8a <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8018c86:	2309      	movs	r3, #9
 8018c88:	e01c      	b.n	8018cc4 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8018c8a:	4a10      	ldr	r2, [pc, #64]	; (8018ccc <LoRaMacCryptoInit+0x54>)
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8018c90:	4b0e      	ldr	r3, [pc, #56]	; (8018ccc <LoRaMacCryptoInit+0x54>)
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	2228      	movs	r2, #40	; 0x28
 8018c96:	2100      	movs	r1, #0
 8018c98:	4618      	mov	r0, r3
 8018c9a:	f003 fab5 	bl	801c208 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8018c9e:	4b0b      	ldr	r3, [pc, #44]	; (8018ccc <LoRaMacCryptoInit+0x54>)
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	2201      	movs	r2, #1
 8018ca4:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8018ca6:	4b09      	ldr	r3, [pc, #36]	; (8018ccc <LoRaMacCryptoInit+0x54>)
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	2201      	movs	r2, #1
 8018cac:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8018cae:	4b07      	ldr	r3, [pc, #28]	; (8018ccc <LoRaMacCryptoInit+0x54>)
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	2201      	movs	r2, #1
 8018cb4:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8018cb6:	4b05      	ldr	r3, [pc, #20]	; (8018ccc <LoRaMacCryptoInit+0x54>)
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	2200      	movs	r2, #0
 8018cbc:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8018cbe:	f7ff ffa5 	bl	8018c0c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8018cc2:	2300      	movs	r3, #0
}
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	3708      	adds	r7, #8
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	bd80      	pop	{r7, pc}
 8018ccc:	20002394 	.word	0x20002394

08018cd0 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8018cd0:	b480      	push	{r7}
 8018cd2:	b083      	sub	sp, #12
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8018cd8:	4b04      	ldr	r3, [pc, #16]	; (8018cec <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	687a      	ldr	r2, [r7, #4]
 8018cde:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8018ce0:	2300      	movs	r3, #0
}
 8018ce2:	4618      	mov	r0, r3
 8018ce4:	370c      	adds	r7, #12
 8018ce6:	46bd      	mov	sp, r7
 8018ce8:	bc80      	pop	{r7}
 8018cea:	4770      	bx	lr
 8018cec:	20002394 	.word	0x20002394

08018cf0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8018cf0:	b480      	push	{r7}
 8018cf2:	b083      	sub	sp, #12
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d101      	bne.n	8018d02 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018cfe:	230a      	movs	r3, #10
 8018d00:	e006      	b.n	8018d10 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8018d02:	4b06      	ldr	r3, [pc, #24]	; (8018d1c <LoRaMacCryptoGetFCntUp+0x2c>)
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	68db      	ldr	r3, [r3, #12]
 8018d08:	1c5a      	adds	r2, r3, #1
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8018d0e:	2300      	movs	r3, #0
}
 8018d10:	4618      	mov	r0, r3
 8018d12:	370c      	adds	r7, #12
 8018d14:	46bd      	mov	sp, r7
 8018d16:	bc80      	pop	{r7}
 8018d18:	4770      	bx	lr
 8018d1a:	bf00      	nop
 8018d1c:	20002394 	.word	0x20002394

08018d20 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8018d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018d24:	b08a      	sub	sp, #40	; 0x28
 8018d26:	af00      	add	r7, sp, #0
 8018d28:	613a      	str	r2, [r7, #16]
 8018d2a:	60fb      	str	r3, [r7, #12]
 8018d2c:	4603      	mov	r3, r0
 8018d2e:	75fb      	strb	r3, [r7, #23]
 8018d30:	460b      	mov	r3, r1
 8018d32:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8018d34:	2300      	movs	r3, #0
 8018d36:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8018d38:	2300      	movs	r3, #0
 8018d3a:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8018d3c:	2313      	movs	r3, #19
 8018d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 8018d42:	68fb      	ldr	r3, [r7, #12]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d101      	bne.n	8018d4c <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018d48:	230a      	movs	r3, #10
 8018d4a:	e057      	b.n	8018dfc <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8018d4c:	f107 021c 	add.w	r2, r7, #28
 8018d50:	7dfb      	ldrb	r3, [r7, #23]
 8018d52:	4611      	mov	r1, r2
 8018d54:	4618      	mov	r0, r3
 8018d56:	f7ff feb5 	bl	8018ac4 <GetLastFcntDown>
 8018d5a:	4603      	mov	r3, r0
 8018d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8018d60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d002      	beq.n	8018d6e <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8018d68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018d6c:	e046      	b.n	8018dfc <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8018d6e:	69fb      	ldr	r3, [r7, #28]
 8018d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d74:	d103      	bne.n	8018d7e <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	693a      	ldr	r2, [r7, #16]
 8018d7a:	601a      	str	r2, [r3, #0]
 8018d7c:	e01e      	b.n	8018dbc <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8018d7e:	69fb      	ldr	r3, [r7, #28]
 8018d80:	b29b      	uxth	r3, r3
 8018d82:	693a      	ldr	r2, [r7, #16]
 8018d84:	1ad3      	subs	r3, r2, r3
 8018d86:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 8018d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	dd05      	ble.n	8018d9a <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8018d8e:	69fa      	ldr	r2, [r7, #28]
 8018d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d92:	441a      	add	r2, r3
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	601a      	str	r2, [r3, #0]
 8018d98:	e010      	b.n	8018dbc <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8018d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d104      	bne.n	8018daa <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8018da0:	69fa      	ldr	r2, [r7, #28]
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8018da6:	2307      	movs	r3, #7
 8018da8:	e028      	b.n	8018dfc <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8018daa:	69fb      	ldr	r3, [r7, #28]
 8018dac:	0c1b      	lsrs	r3, r3, #16
 8018dae:	041b      	lsls	r3, r3, #16
 8018db0:	693a      	ldr	r2, [r7, #16]
 8018db2:	4413      	add	r3, r2
 8018db4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8018dbc:	4b12      	ldr	r3, [pc, #72]	; (8018e08 <LoRaMacCryptoGetFCntDown+0xe8>)
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	789b      	ldrb	r3, [r3, #2]
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d119      	bne.n	8018dfa <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8018dc6:	68fb      	ldr	r3, [r7, #12]
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	2200      	movs	r2, #0
 8018dcc:	603b      	str	r3, [r7, #0]
 8018dce:	607a      	str	r2, [r7, #4]
 8018dd0:	69fb      	ldr	r3, [r7, #28]
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	469a      	mov	sl, r3
 8018dd6:	4693      	mov	fp, r2
 8018dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018ddc:	4611      	mov	r1, r2
 8018dde:	ebb1 040a 	subs.w	r4, r1, sl
 8018de2:	eb63 050b 	sbc.w	r5, r3, fp
 8018de6:	8abb      	ldrh	r3, [r7, #20]
 8018de8:	2200      	movs	r2, #0
 8018dea:	4698      	mov	r8, r3
 8018dec:	4691      	mov	r9, r2
 8018dee:	4544      	cmp	r4, r8
 8018df0:	eb75 0309 	sbcs.w	r3, r5, r9
 8018df4:	db01      	blt.n	8018dfa <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8018df6:	2308      	movs	r3, #8
 8018df8:	e000      	b.n	8018dfc <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8018dfa:	2300      	movs	r3, #0
}
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	3728      	adds	r7, #40	; 0x28
 8018e00:	46bd      	mov	sp, r7
 8018e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018e06:	bf00      	nop
 8018e08:	20002394 	.word	0x20002394

08018e0c <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8018e0c:	b480      	push	{r7}
 8018e0e:	b085      	sub	sp, #20
 8018e10:	af00      	add	r7, sp, #0
 8018e12:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d101      	bne.n	8018e1e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018e1a:	230a      	movs	r3, #10
 8018e1c:	e017      	b.n	8018e4e <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8018e1e:	2300      	movs	r3, #0
 8018e20:	60fb      	str	r3, [r7, #12]
 8018e22:	e010      	b.n	8018e46 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8018e24:	4b0c      	ldr	r3, [pc, #48]	; (8018e58 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8018e26:	6819      	ldr	r1, [r3, #0]
 8018e28:	68fb      	ldr	r3, [r7, #12]
 8018e2a:	222c      	movs	r2, #44	; 0x2c
 8018e2c:	fb02 f303 	mul.w	r3, r2, r3
 8018e30:	687a      	ldr	r2, [r7, #4]
 8018e32:	4413      	add	r3, r2
 8018e34:	68fa      	ldr	r2, [r7, #12]
 8018e36:	3206      	adds	r2, #6
 8018e38:	0092      	lsls	r2, r2, #2
 8018e3a:	440a      	add	r2, r1
 8018e3c:	3204      	adds	r2, #4
 8018e3e:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	3301      	adds	r3, #1
 8018e44:	60fb      	str	r3, [r7, #12]
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	ddeb      	ble.n	8018e24 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8018e4c:	2300      	movs	r3, #0
}
 8018e4e:	4618      	mov	r0, r3
 8018e50:	3714      	adds	r7, #20
 8018e52:	46bd      	mov	sp, r7
 8018e54:	bc80      	pop	{r7}
 8018e56:	4770      	bx	lr
 8018e58:	20002394 	.word	0x20002394

08018e5c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8018e5c:	b580      	push	{r7, lr}
 8018e5e:	b082      	sub	sp, #8
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	4603      	mov	r3, r0
 8018e64:	6039      	str	r1, [r7, #0]
 8018e66:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8018e68:	79fb      	ldrb	r3, [r7, #7]
 8018e6a:	6839      	ldr	r1, [r7, #0]
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	f7f6 fcfb 	bl	800f868 <SecureElementSetKey>
 8018e72:	4603      	mov	r3, r0
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d001      	beq.n	8018e7c <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018e78:	230f      	movs	r3, #15
 8018e7a:	e018      	b.n	8018eae <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8018e7c:	79fb      	ldrb	r3, [r7, #7]
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d114      	bne.n	8018eac <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8018e82:	4b0d      	ldr	r3, [pc, #52]	; (8018eb8 <LoRaMacCryptoSetKey+0x5c>)
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	789b      	ldrb	r3, [r3, #2]
 8018e88:	79fa      	ldrb	r2, [r7, #7]
 8018e8a:	4611      	mov	r1, r2
 8018e8c:	4618      	mov	r0, r3
 8018e8e:	f000 fa3f 	bl	8019310 <LoRaMacCryptoDeriveMcRootKey>
 8018e92:	4603      	mov	r3, r0
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d001      	beq.n	8018e9c <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018e98:	230f      	movs	r3, #15
 8018e9a:	e008      	b.n	8018eae <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8018e9c:	2004      	movs	r0, #4
 8018e9e:	f000 fa62 	bl	8019366 <LoRaMacCryptoDeriveMcKEKey>
 8018ea2:	4603      	mov	r3, r0
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d001      	beq.n	8018eac <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018ea8:	230f      	movs	r3, #15
 8018eaa:	e000      	b.n	8018eae <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8018eac:	2300      	movs	r3, #0
}
 8018eae:	4618      	mov	r0, r3
 8018eb0:	3708      	adds	r7, #8
 8018eb2:	46bd      	mov	sp, r7
 8018eb4:	bd80      	pop	{r7, pc}
 8018eb6:	bf00      	nop
 8018eb8:	20002394 	.word	0x20002394

08018ebc <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8018ebc:	b580      	push	{r7, lr}
 8018ebe:	b086      	sub	sp, #24
 8018ec0:	af02      	add	r7, sp, #8
 8018ec2:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d101      	bne.n	8018ece <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018eca:	230a      	movs	r3, #10
 8018ecc:	e033      	b.n	8018f36 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8018ece:	2301      	movs	r3, #1
 8018ed0:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8018ed2:	2300      	movs	r3, #0
 8018ed4:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8018ed6:	f107 0308 	add.w	r3, r7, #8
 8018eda:	4618      	mov	r0, r3
 8018edc:	f7f6 fe94 	bl	800fc08 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8018ee0:	68ba      	ldr	r2, [r7, #8]
 8018ee2:	4b17      	ldr	r3, [pc, #92]	; (8018f40 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	b292      	uxth	r2, r2
 8018ee8:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8018eea:	4b15      	ldr	r3, [pc, #84]	; (8018f40 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	889a      	ldrh	r2, [r3, #4]
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8018ef4:	6878      	ldr	r0, [r7, #4]
 8018ef6:	f000 fc18 	bl	801972a <LoRaMacSerializerJoinRequest>
 8018efa:	4603      	mov	r3, r0
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d001      	beq.n	8018f04 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8018f00:	2311      	movs	r3, #17
 8018f02:	e018      	b.n	8018f36 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	6819      	ldr	r1, [r3, #0]
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	3318      	adds	r3, #24
 8018f0c:	7bfa      	ldrb	r2, [r7, #15]
 8018f0e:	9300      	str	r3, [sp, #0]
 8018f10:	4613      	mov	r3, r2
 8018f12:	2213      	movs	r2, #19
 8018f14:	2000      	movs	r0, #0
 8018f16:	f7f6 fd05 	bl	800f924 <SecureElementComputeAesCmac>
 8018f1a:	4603      	mov	r3, r0
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d001      	beq.n	8018f24 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018f20:	230f      	movs	r3, #15
 8018f22:	e008      	b.n	8018f36 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8018f24:	6878      	ldr	r0, [r7, #4]
 8018f26:	f000 fc00 	bl	801972a <LoRaMacSerializerJoinRequest>
 8018f2a:	4603      	mov	r3, r0
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d001      	beq.n	8018f34 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8018f30:	2311      	movs	r3, #17
 8018f32:	e000      	b.n	8018f36 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8018f34:	2300      	movs	r3, #0
}
 8018f36:	4618      	mov	r0, r3
 8018f38:	3710      	adds	r7, #16
 8018f3a:	46bd      	mov	sp, r7
 8018f3c:	bd80      	pop	{r7, pc}
 8018f3e:	bf00      	nop
 8018f40:	20002394 	.word	0x20002394

08018f44 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8018f44:	b590      	push	{r4, r7, lr}
 8018f46:	b097      	sub	sp, #92	; 0x5c
 8018f48:	af04      	add	r7, sp, #16
 8018f4a:	4603      	mov	r3, r0
 8018f4c:	60b9      	str	r1, [r7, #8]
 8018f4e:	607a      	str	r2, [r7, #4]
 8018f50:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d002      	beq.n	8018f5e <LoRaMacCryptoHandleJoinAccept+0x1a>
 8018f58:	68bb      	ldr	r3, [r7, #8]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d101      	bne.n	8018f62 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018f5e:	230a      	movs	r3, #10
 8018f60:	e0bd      	b.n	80190de <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8018f62:	2313      	movs	r3, #19
 8018f64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8018f68:	2300      	movs	r3, #0
 8018f6a:	61bb      	str	r3, [r7, #24]
 8018f6c:	f107 031c 	add.w	r3, r7, #28
 8018f70:	221d      	movs	r2, #29
 8018f72:	2100      	movs	r1, #0
 8018f74:	4618      	mov	r0, r3
 8018f76:	f007 fefd 	bl	8020d74 <memset>
    uint8_t versionMinor         = 0;
 8018f7a:	2300      	movs	r3, #0
 8018f7c:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8018f7e:	4b5a      	ldr	r3, [pc, #360]	; (80190e8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8018f80:	681b      	ldr	r3, [r3, #0]
 8018f82:	889b      	ldrh	r3, [r3, #4]
 8018f84:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	681c      	ldr	r4, [r3, #0]
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	791b      	ldrb	r3, [r3, #4]
 8018f90:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8018f94:	7bf8      	ldrb	r0, [r7, #15]
 8018f96:	f107 0217 	add.w	r2, r7, #23
 8018f9a:	9202      	str	r2, [sp, #8]
 8018f9c:	f107 0218 	add.w	r2, r7, #24
 8018fa0:	9201      	str	r2, [sp, #4]
 8018fa2:	9300      	str	r3, [sp, #0]
 8018fa4:	4623      	mov	r3, r4
 8018fa6:	460a      	mov	r2, r1
 8018fa8:	68b9      	ldr	r1, [r7, #8]
 8018faa:	f7f6 fdaf 	bl	800fb0c <SecureElementProcessJoinAccept>
 8018fae:	4603      	mov	r3, r0
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d001      	beq.n	8018fb8 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018fb4:	230f      	movs	r3, #15
 8018fb6:	e092      	b.n	80190de <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	6818      	ldr	r0, [r3, #0]
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	791b      	ldrb	r3, [r3, #4]
 8018fc0:	b29a      	uxth	r2, r3
 8018fc2:	f107 0318 	add.w	r3, r7, #24
 8018fc6:	4619      	mov	r1, r3
 8018fc8:	f003 f8e3 	bl	801c192 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8018fcc:	6878      	ldr	r0, [r7, #4]
 8018fce:	f000 f9ed 	bl	80193ac <LoRaMacParserJoinAccept>
 8018fd2:	4603      	mov	r3, r0
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d001      	beq.n	8018fdc <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8018fd8:	2310      	movs	r3, #16
 8018fda:	e080      	b.n	80190de <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	799b      	ldrb	r3, [r3, #6]
 8018fe0:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	79db      	ldrb	r3, [r3, #7]
 8018fe6:	021b      	lsls	r3, r3, #8
 8018fe8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018fea:	4313      	orrs	r3, r2
 8018fec:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	7a1b      	ldrb	r3, [r3, #8]
 8018ff2:	041b      	lsls	r3, r3, #16
 8018ff4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018ff6:	4313      	orrs	r3, r2
 8018ff8:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8018ffa:	4b3b      	ldr	r3, [pc, #236]	; (80190e8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	689b      	ldr	r3, [r3, #8]
 8019000:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019002:	429a      	cmp	r2, r3
 8019004:	d010      	beq.n	8019028 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8019006:	4b38      	ldr	r3, [pc, #224]	; (80190e8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801900c:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 801900e:	7dfb      	ldrb	r3, [r7, #23]
 8019010:	2100      	movs	r1, #0
 8019012:	4618      	mov	r0, r3
 8019014:	f000 f97c 	bl	8019310 <LoRaMacCryptoDeriveMcRootKey>
 8019018:	4603      	mov	r3, r0
 801901a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801901e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019022:	2b00      	cmp	r3, #0
 8019024:	d005      	beq.n	8019032 <LoRaMacCryptoHandleJoinAccept+0xee>
 8019026:	e001      	b.n	801902c <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8019028:	2303      	movs	r3, #3
 801902a:	e058      	b.n	80190de <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 801902c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019030:	e055      	b.n	80190de <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8019032:	2004      	movs	r0, #4
 8019034:	f000 f997 	bl	8019366 <LoRaMacCryptoDeriveMcKEKey>
 8019038:	4603      	mov	r3, r0
 801903a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801903e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019042:	2b00      	cmp	r3, #0
 8019044:	d002      	beq.n	801904c <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8019046:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801904a:	e048      	b.n	80190de <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	7a5b      	ldrb	r3, [r3, #9]
 8019050:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	7a9b      	ldrb	r3, [r3, #10]
 8019056:	021b      	lsls	r3, r3, #8
 8019058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801905a:	4313      	orrs	r3, r2
 801905c:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	7adb      	ldrb	r3, [r3, #11]
 8019062:	041b      	lsls	r3, r3, #16
 8019064:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019066:	4313      	orrs	r3, r2
 8019068:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801906a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801906e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019070:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8019072:	2003      	movs	r0, #3
 8019074:	f7ff fcd6 	bl	8018a24 <DeriveSessionKey10x>
 8019078:	4603      	mov	r3, r0
 801907a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801907e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019082:	2b00      	cmp	r3, #0
 8019084:	d002      	beq.n	801908c <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8019086:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801908a:	e028      	b.n	80190de <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 801908c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019090:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019092:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8019094:	2002      	movs	r0, #2
 8019096:	f7ff fcc5 	bl	8018a24 <DeriveSessionKey10x>
 801909a:	4603      	mov	r3, r0
 801909c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80190a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d002      	beq.n	80190ae <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 80190a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80190ac:	e017      	b.n	80190de <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80190ae:	4b0e      	ldr	r3, [pc, #56]	; (80190e8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	7dfa      	ldrb	r2, [r7, #23]
 80190b4:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 80190b6:	4b0c      	ldr	r3, [pc, #48]	; (80190e8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	2200      	movs	r2, #0
 80190bc:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80190be:	4b0a      	ldr	r3, [pc, #40]	; (80190e8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	f04f 32ff 	mov.w	r2, #4294967295
 80190c6:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80190c8:	4b07      	ldr	r3, [pc, #28]	; (80190e8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	f04f 32ff 	mov.w	r2, #4294967295
 80190d0:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80190d2:	4b05      	ldr	r3, [pc, #20]	; (80190e8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	f04f 32ff 	mov.w	r2, #4294967295
 80190da:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80190dc:	2300      	movs	r3, #0
}
 80190de:	4618      	mov	r0, r3
 80190e0:	374c      	adds	r7, #76	; 0x4c
 80190e2:	46bd      	mov	sp, r7
 80190e4:	bd90      	pop	{r4, r7, pc}
 80190e6:	bf00      	nop
 80190e8:	20002394 	.word	0x20002394

080190ec <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80190ec:	b590      	push	{r4, r7, lr}
 80190ee:	b08b      	sub	sp, #44	; 0x2c
 80190f0:	af04      	add	r7, sp, #16
 80190f2:	60f8      	str	r0, [r7, #12]
 80190f4:	607b      	str	r3, [r7, #4]
 80190f6:	460b      	mov	r3, r1
 80190f8:	72fb      	strb	r3, [r7, #11]
 80190fa:	4613      	mov	r3, r2
 80190fc:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80190fe:	2313      	movs	r3, #19
 8019100:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8019102:	2303      	movs	r3, #3
 8019104:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d101      	bne.n	8019110 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801910c:	230a      	movs	r3, #10
 801910e:	e05f      	b.n	80191d0 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8019110:	4b31      	ldr	r3, [pc, #196]	; (80191d8 <LoRaMacCryptoSecureMessage+0xec>)
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	68db      	ldr	r3, [r3, #12]
 8019116:	68fa      	ldr	r2, [r7, #12]
 8019118:	429a      	cmp	r2, r3
 801911a:	d201      	bcs.n	8019120 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801911c:	2306      	movs	r3, #6
 801911e:	e057      	b.n	80191d0 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019126:	2b00      	cmp	r3, #0
 8019128:	d101      	bne.n	801912e <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801912a:	2302      	movs	r3, #2
 801912c:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 801912e:	4b2a      	ldr	r3, [pc, #168]	; (80191d8 <LoRaMacCryptoSecureMessage+0xec>)
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	68db      	ldr	r3, [r3, #12]
 8019134:	68fa      	ldr	r2, [r7, #12]
 8019136:	429a      	cmp	r2, r3
 8019138:	d916      	bls.n	8019168 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019144:	b219      	sxth	r1, r3
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	689c      	ldr	r4, [r3, #8]
 801914a:	7dfa      	ldrb	r2, [r7, #23]
 801914c:	68fb      	ldr	r3, [r7, #12]
 801914e:	9301      	str	r3, [sp, #4]
 8019150:	2300      	movs	r3, #0
 8019152:	9300      	str	r3, [sp, #0]
 8019154:	4623      	mov	r3, r4
 8019156:	f7ff fa71 	bl	801863c <PayloadEncrypt>
 801915a:	4603      	mov	r3, r0
 801915c:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801915e:	7dbb      	ldrb	r3, [r7, #22]
 8019160:	2b00      	cmp	r3, #0
 8019162:	d001      	beq.n	8019168 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8019164:	7dbb      	ldrb	r3, [r7, #22]
 8019166:	e033      	b.n	80191d0 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8019168:	6878      	ldr	r0, [r7, #4]
 801916a:	f000 fb60 	bl	801982e <LoRaMacSerializerData>
 801916e:	4603      	mov	r3, r0
 8019170:	2b00      	cmp	r3, #0
 8019172:	d001      	beq.n	8019178 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8019174:	2311      	movs	r3, #17
 8019176:	e02b      	b.n	80191d0 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8019178:	2302      	movs	r3, #2
 801917a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	6818      	ldr	r0, [r3, #0]
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	791b      	ldrb	r3, [r3, #4]
 8019184:	b29b      	uxth	r3, r3
 8019186:	3b04      	subs	r3, #4
 8019188:	b299      	uxth	r1, r3
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	689b      	ldr	r3, [r3, #8]
 801918e:	687a      	ldr	r2, [r7, #4]
 8019190:	322c      	adds	r2, #44	; 0x2c
 8019192:	7dfc      	ldrb	r4, [r7, #23]
 8019194:	9203      	str	r2, [sp, #12]
 8019196:	68fa      	ldr	r2, [r7, #12]
 8019198:	9202      	str	r2, [sp, #8]
 801919a:	9301      	str	r3, [sp, #4]
 801919c:	2300      	movs	r3, #0
 801919e:	9300      	str	r3, [sp, #0]
 80191a0:	2300      	movs	r3, #0
 80191a2:	4622      	mov	r2, r4
 80191a4:	f7ff fb4b 	bl	801883e <ComputeCmacB0>
 80191a8:	4603      	mov	r3, r0
 80191aa:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80191ac:	7dbb      	ldrb	r3, [r7, #22]
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d001      	beq.n	80191b6 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 80191b2:	7dbb      	ldrb	r3, [r7, #22]
 80191b4:	e00c      	b.n	80191d0 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80191b6:	6878      	ldr	r0, [r7, #4]
 80191b8:	f000 fb39 	bl	801982e <LoRaMacSerializerData>
 80191bc:	4603      	mov	r3, r0
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d001      	beq.n	80191c6 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80191c2:	2311      	movs	r3, #17
 80191c4:	e004      	b.n	80191d0 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80191c6:	4b04      	ldr	r3, [pc, #16]	; (80191d8 <LoRaMacCryptoSecureMessage+0xec>)
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	68fa      	ldr	r2, [r7, #12]
 80191cc:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80191ce:	2300      	movs	r3, #0
}
 80191d0:	4618      	mov	r0, r3
 80191d2:	371c      	adds	r7, #28
 80191d4:	46bd      	mov	sp, r7
 80191d6:	bd90      	pop	{r4, r7, pc}
 80191d8:	20002394 	.word	0x20002394

080191dc <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80191dc:	b590      	push	{r4, r7, lr}
 80191de:	b08b      	sub	sp, #44	; 0x2c
 80191e0:	af04      	add	r7, sp, #16
 80191e2:	60b9      	str	r1, [r7, #8]
 80191e4:	607b      	str	r3, [r7, #4]
 80191e6:	4603      	mov	r3, r0
 80191e8:	73fb      	strb	r3, [r7, #15]
 80191ea:	4613      	mov	r3, r2
 80191ec:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80191ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d101      	bne.n	80191f8 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80191f4:	230a      	movs	r3, #10
 80191f6:	e084      	b.n	8019302 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80191f8:	7bbb      	ldrb	r3, [r7, #14]
 80191fa:	6879      	ldr	r1, [r7, #4]
 80191fc:	4618      	mov	r0, r3
 80191fe:	f7ff fcaf 	bl	8018b60 <CheckFCntDown>
 8019202:	4603      	mov	r3, r0
 8019204:	f083 0301 	eor.w	r3, r3, #1
 8019208:	b2db      	uxtb	r3, r3
 801920a:	2b00      	cmp	r3, #0
 801920c:	d001      	beq.n	8019212 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801920e:	2306      	movs	r3, #6
 8019210:	e077      	b.n	8019302 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8019212:	2313      	movs	r3, #19
 8019214:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8019216:	2303      	movs	r3, #3
 8019218:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801921a:	2302      	movs	r3, #2
 801921c:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801921e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019220:	f000 f98f 	bl	8019542 <LoRaMacParserData>
 8019224:	4603      	mov	r3, r0
 8019226:	2b00      	cmp	r3, #0
 8019228:	d001      	beq.n	801922e <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801922a:	2310      	movs	r3, #16
 801922c:	e069      	b.n	8019302 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 801922e:	f107 0210 	add.w	r2, r7, #16
 8019232:	7bfb      	ldrb	r3, [r7, #15]
 8019234:	4611      	mov	r1, r2
 8019236:	4618      	mov	r0, r3
 8019238:	f7ff fbce 	bl	80189d8 <GetKeyAddrItem>
 801923c:	4603      	mov	r3, r0
 801923e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8019240:	7d7b      	ldrb	r3, [r7, #21]
 8019242:	2b00      	cmp	r3, #0
 8019244:	d001      	beq.n	801924a <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8019246:	7d7b      	ldrb	r3, [r7, #21]
 8019248:	e05b      	b.n	8019302 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801924a:	693b      	ldr	r3, [r7, #16]
 801924c:	785b      	ldrb	r3, [r3, #1]
 801924e:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8019250:	693b      	ldr	r3, [r7, #16]
 8019252:	789b      	ldrb	r3, [r3, #2]
 8019254:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8019256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019258:	689b      	ldr	r3, [r3, #8]
 801925a:	68ba      	ldr	r2, [r7, #8]
 801925c:	429a      	cmp	r2, r3
 801925e:	d001      	beq.n	8019264 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8019260:	2302      	movs	r3, #2
 8019262:	e04e      	b.n	8019302 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8019264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019266:	7b1b      	ldrb	r3, [r3, #12]
 8019268:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801926c:	b2db      	uxtb	r3, r3
 801926e:	2b00      	cmp	r3, #0
 8019270:	bf14      	ite	ne
 8019272:	2301      	movne	r3, #1
 8019274:	2300      	moveq	r3, #0
 8019276:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8019278:	4b24      	ldr	r3, [pc, #144]	; (801930c <LoRaMacCryptoUnsecureMessage+0x130>)
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	789b      	ldrb	r3, [r3, #2]
 801927e:	2b00      	cmp	r3, #0
 8019280:	d101      	bne.n	8019286 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8019282:	2300      	movs	r3, #0
 8019284:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8019286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019288:	6818      	ldr	r0, [r3, #0]
 801928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801928c:	791b      	ldrb	r3, [r3, #4]
 801928e:	b29b      	uxth	r3, r3
 8019290:	3b04      	subs	r3, #4
 8019292:	b299      	uxth	r1, r3
 8019294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019298:	7dbc      	ldrb	r4, [r7, #22]
 801929a:	7d3a      	ldrb	r2, [r7, #20]
 801929c:	9303      	str	r3, [sp, #12]
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	9302      	str	r3, [sp, #8]
 80192a2:	68bb      	ldr	r3, [r7, #8]
 80192a4:	9301      	str	r3, [sp, #4]
 80192a6:	2301      	movs	r3, #1
 80192a8:	9300      	str	r3, [sp, #0]
 80192aa:	4623      	mov	r3, r4
 80192ac:	f7ff fb05 	bl	80188ba <VerifyCmacB0>
 80192b0:	4603      	mov	r3, r0
 80192b2:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80192b4:	7d7b      	ldrb	r3, [r7, #21]
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d001      	beq.n	80192be <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 80192ba:	7d7b      	ldrb	r3, [r7, #21]
 80192bc:	e021      	b.n	8019302 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80192be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d101      	bne.n	80192cc <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80192c8:	2302      	movs	r3, #2
 80192ca:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80192cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192ce:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80192d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80192d6:	b219      	sxth	r1, r3
 80192d8:	7dfa      	ldrb	r2, [r7, #23]
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	9301      	str	r3, [sp, #4]
 80192de:	2301      	movs	r3, #1
 80192e0:	9300      	str	r3, [sp, #0]
 80192e2:	68bb      	ldr	r3, [r7, #8]
 80192e4:	f7ff f9aa 	bl	801863c <PayloadEncrypt>
 80192e8:	4603      	mov	r3, r0
 80192ea:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80192ec:	7d7b      	ldrb	r3, [r7, #21]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d001      	beq.n	80192f6 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 80192f2:	7d7b      	ldrb	r3, [r7, #21]
 80192f4:	e005      	b.n	8019302 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 80192f6:	7bbb      	ldrb	r3, [r7, #14]
 80192f8:	6879      	ldr	r1, [r7, #4]
 80192fa:	4618      	mov	r0, r3
 80192fc:	f7ff fc54 	bl	8018ba8 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8019300:	2300      	movs	r3, #0
}
 8019302:	4618      	mov	r0, r3
 8019304:	371c      	adds	r7, #28
 8019306:	46bd      	mov	sp, r7
 8019308:	bd90      	pop	{r4, r7, pc}
 801930a:	bf00      	nop
 801930c:	20002394 	.word	0x20002394

08019310 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b086      	sub	sp, #24
 8019314:	af00      	add	r7, sp, #0
 8019316:	4603      	mov	r3, r0
 8019318:	460a      	mov	r2, r1
 801931a:	71fb      	strb	r3, [r7, #7]
 801931c:	4613      	mov	r3, r2
 801931e:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8019320:	79bb      	ldrb	r3, [r7, #6]
 8019322:	2b00      	cmp	r3, #0
 8019324:	d001      	beq.n	801932a <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8019326:	230b      	movs	r3, #11
 8019328:	e019      	b.n	801935e <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 801932a:	2300      	movs	r3, #0
 801932c:	60bb      	str	r3, [r7, #8]
 801932e:	f107 030c 	add.w	r3, r7, #12
 8019332:	2200      	movs	r2, #0
 8019334:	601a      	str	r2, [r3, #0]
 8019336:	605a      	str	r2, [r3, #4]
 8019338:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 801933a:	79fb      	ldrb	r3, [r7, #7]
 801933c:	2b01      	cmp	r3, #1
 801933e:	d101      	bne.n	8019344 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8019340:	2320      	movs	r3, #32
 8019342:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8019344:	79b9      	ldrb	r1, [r7, #6]
 8019346:	f107 0308 	add.w	r3, r7, #8
 801934a:	2204      	movs	r2, #4
 801934c:	4618      	mov	r0, r3
 801934e:	f7f6 fb9d 	bl	800fa8c <SecureElementDeriveAndStoreKey>
 8019352:	4603      	mov	r3, r0
 8019354:	2b00      	cmp	r3, #0
 8019356:	d001      	beq.n	801935c <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8019358:	230f      	movs	r3, #15
 801935a:	e000      	b.n	801935e <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801935c:	2300      	movs	r3, #0
}
 801935e:	4618      	mov	r0, r3
 8019360:	3718      	adds	r7, #24
 8019362:	46bd      	mov	sp, r7
 8019364:	bd80      	pop	{r7, pc}

08019366 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8019366:	b580      	push	{r7, lr}
 8019368:	b086      	sub	sp, #24
 801936a:	af00      	add	r7, sp, #0
 801936c:	4603      	mov	r3, r0
 801936e:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8019370:	79fb      	ldrb	r3, [r7, #7]
 8019372:	2b04      	cmp	r3, #4
 8019374:	d001      	beq.n	801937a <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8019376:	230b      	movs	r3, #11
 8019378:	e014      	b.n	80193a4 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 801937a:	2300      	movs	r3, #0
 801937c:	60bb      	str	r3, [r7, #8]
 801937e:	f107 030c 	add.w	r3, r7, #12
 8019382:	2200      	movs	r2, #0
 8019384:	601a      	str	r2, [r3, #0]
 8019386:	605a      	str	r2, [r3, #4]
 8019388:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 801938a:	79f9      	ldrb	r1, [r7, #7]
 801938c:	f107 0308 	add.w	r3, r7, #8
 8019390:	227f      	movs	r2, #127	; 0x7f
 8019392:	4618      	mov	r0, r3
 8019394:	f7f6 fb7a 	bl	800fa8c <SecureElementDeriveAndStoreKey>
 8019398:	4603      	mov	r3, r0
 801939a:	2b00      	cmp	r3, #0
 801939c:	d001      	beq.n	80193a2 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801939e:	230f      	movs	r3, #15
 80193a0:	e000      	b.n	80193a4 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80193a2:	2300      	movs	r3, #0
}
 80193a4:	4618      	mov	r0, r3
 80193a6:	3718      	adds	r7, #24
 80193a8:	46bd      	mov	sp, r7
 80193aa:	bd80      	pop	{r7, pc}

080193ac <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80193ac:	b580      	push	{r7, lr}
 80193ae:	b084      	sub	sp, #16
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d003      	beq.n	80193c2 <LoRaMacParserJoinAccept+0x16>
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d101      	bne.n	80193c6 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80193c2:	2302      	movs	r3, #2
 80193c4:	e0b9      	b.n	801953a <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80193c6:	2300      	movs	r3, #0
 80193c8:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	681a      	ldr	r2, [r3, #0]
 80193ce:	89fb      	ldrh	r3, [r7, #14]
 80193d0:	1c59      	adds	r1, r3, #1
 80193d2:	81f9      	strh	r1, [r7, #14]
 80193d4:	4413      	add	r3, r2
 80193d6:	781a      	ldrb	r2, [r3, #0]
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	1d98      	adds	r0, r3, #6
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	681a      	ldr	r2, [r3, #0]
 80193e4:	89fb      	ldrh	r3, [r7, #14]
 80193e6:	4413      	add	r3, r2
 80193e8:	2203      	movs	r2, #3
 80193ea:	4619      	mov	r1, r3
 80193ec:	f002 fed1 	bl	801c192 <memcpy1>
    bufItr = bufItr + 3;
 80193f0:	89fb      	ldrh	r3, [r7, #14]
 80193f2:	3303      	adds	r3, #3
 80193f4:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	f103 0009 	add.w	r0, r3, #9
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	681a      	ldr	r2, [r3, #0]
 8019400:	89fb      	ldrh	r3, [r7, #14]
 8019402:	4413      	add	r3, r2
 8019404:	2203      	movs	r2, #3
 8019406:	4619      	mov	r1, r3
 8019408:	f002 fec3 	bl	801c192 <memcpy1>
    bufItr = bufItr + 3;
 801940c:	89fb      	ldrh	r3, [r7, #14]
 801940e:	3303      	adds	r3, #3
 8019410:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	681a      	ldr	r2, [r3, #0]
 8019416:	89fb      	ldrh	r3, [r7, #14]
 8019418:	1c59      	adds	r1, r3, #1
 801941a:	81f9      	strh	r1, [r7, #14]
 801941c:	4413      	add	r3, r2
 801941e:	781b      	ldrb	r3, [r3, #0]
 8019420:	461a      	mov	r2, r3
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	681a      	ldr	r2, [r3, #0]
 801942a:	89fb      	ldrh	r3, [r7, #14]
 801942c:	1c59      	adds	r1, r3, #1
 801942e:	81f9      	strh	r1, [r7, #14]
 8019430:	4413      	add	r3, r2
 8019432:	781b      	ldrb	r3, [r3, #0]
 8019434:	021a      	lsls	r2, r3, #8
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	68db      	ldr	r3, [r3, #12]
 801943a:	431a      	orrs	r2, r3
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	681a      	ldr	r2, [r3, #0]
 8019444:	89fb      	ldrh	r3, [r7, #14]
 8019446:	1c59      	adds	r1, r3, #1
 8019448:	81f9      	strh	r1, [r7, #14]
 801944a:	4413      	add	r3, r2
 801944c:	781b      	ldrb	r3, [r3, #0]
 801944e:	041a      	lsls	r2, r3, #16
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	68db      	ldr	r3, [r3, #12]
 8019454:	431a      	orrs	r2, r3
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	681a      	ldr	r2, [r3, #0]
 801945e:	89fb      	ldrh	r3, [r7, #14]
 8019460:	1c59      	adds	r1, r3, #1
 8019462:	81f9      	strh	r1, [r7, #14]
 8019464:	4413      	add	r3, r2
 8019466:	781b      	ldrb	r3, [r3, #0]
 8019468:	061a      	lsls	r2, r3, #24
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	68db      	ldr	r3, [r3, #12]
 801946e:	431a      	orrs	r2, r3
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	681a      	ldr	r2, [r3, #0]
 8019478:	89fb      	ldrh	r3, [r7, #14]
 801947a:	1c59      	adds	r1, r3, #1
 801947c:	81f9      	strh	r1, [r7, #14]
 801947e:	4413      	add	r3, r2
 8019480:	781a      	ldrb	r2, [r3, #0]
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	681a      	ldr	r2, [r3, #0]
 801948a:	89fb      	ldrh	r3, [r7, #14]
 801948c:	1c59      	adds	r1, r3, #1
 801948e:	81f9      	strh	r1, [r7, #14]
 8019490:	4413      	add	r3, r2
 8019492:	781a      	ldrb	r2, [r3, #0]
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	791b      	ldrb	r3, [r3, #4]
 801949c:	1f1a      	subs	r2, r3, #4
 801949e:	89fb      	ldrh	r3, [r7, #14]
 80194a0:	1ad3      	subs	r3, r2, r3
 80194a2:	2b10      	cmp	r3, #16
 80194a4:	d10e      	bne.n	80194c4 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	f103 0012 	add.w	r0, r3, #18
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	681a      	ldr	r2, [r3, #0]
 80194b0:	89fb      	ldrh	r3, [r7, #14]
 80194b2:	4413      	add	r3, r2
 80194b4:	2210      	movs	r2, #16
 80194b6:	4619      	mov	r1, r3
 80194b8:	f002 fe6b 	bl	801c192 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80194bc:	89fb      	ldrh	r3, [r7, #14]
 80194be:	3310      	adds	r3, #16
 80194c0:	81fb      	strh	r3, [r7, #14]
 80194c2:	e008      	b.n	80194d6 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	791b      	ldrb	r3, [r3, #4]
 80194c8:	1f1a      	subs	r2, r3, #4
 80194ca:	89fb      	ldrh	r3, [r7, #14]
 80194cc:	1ad3      	subs	r3, r2, r3
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	dd01      	ble.n	80194d6 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80194d2:	2301      	movs	r3, #1
 80194d4:	e031      	b.n	801953a <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	681a      	ldr	r2, [r3, #0]
 80194da:	89fb      	ldrh	r3, [r7, #14]
 80194dc:	1c59      	adds	r1, r3, #1
 80194de:	81f9      	strh	r1, [r7, #14]
 80194e0:	4413      	add	r3, r2
 80194e2:	781b      	ldrb	r3, [r3, #0]
 80194e4:	461a      	mov	r2, r3
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	681a      	ldr	r2, [r3, #0]
 80194ee:	89fb      	ldrh	r3, [r7, #14]
 80194f0:	1c59      	adds	r1, r3, #1
 80194f2:	81f9      	strh	r1, [r7, #14]
 80194f4:	4413      	add	r3, r2
 80194f6:	781b      	ldrb	r3, [r3, #0]
 80194f8:	021a      	lsls	r2, r3, #8
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194fe:	431a      	orrs	r2, r3
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	681a      	ldr	r2, [r3, #0]
 8019508:	89fb      	ldrh	r3, [r7, #14]
 801950a:	1c59      	adds	r1, r3, #1
 801950c:	81f9      	strh	r1, [r7, #14]
 801950e:	4413      	add	r3, r2
 8019510:	781b      	ldrb	r3, [r3, #0]
 8019512:	041a      	lsls	r2, r3, #16
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019518:	431a      	orrs	r2, r3
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	681a      	ldr	r2, [r3, #0]
 8019522:	89fb      	ldrh	r3, [r7, #14]
 8019524:	1c59      	adds	r1, r3, #1
 8019526:	81f9      	strh	r1, [r7, #14]
 8019528:	4413      	add	r3, r2
 801952a:	781b      	ldrb	r3, [r3, #0]
 801952c:	061a      	lsls	r2, r3, #24
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019532:	431a      	orrs	r2, r3
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8019538:	2300      	movs	r3, #0
}
 801953a:	4618      	mov	r0, r3
 801953c:	3710      	adds	r7, #16
 801953e:	46bd      	mov	sp, r7
 8019540:	bd80      	pop	{r7, pc}

08019542 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8019542:	b580      	push	{r7, lr}
 8019544:	b084      	sub	sp, #16
 8019546:	af00      	add	r7, sp, #0
 8019548:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	2b00      	cmp	r3, #0
 801954e:	d003      	beq.n	8019558 <LoRaMacParserData+0x16>
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	2b00      	cmp	r3, #0
 8019556:	d101      	bne.n	801955c <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8019558:	2302      	movs	r3, #2
 801955a:	e0e2      	b.n	8019722 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 801955c:	2300      	movs	r3, #0
 801955e:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	681a      	ldr	r2, [r3, #0]
 8019564:	89fb      	ldrh	r3, [r7, #14]
 8019566:	1c59      	adds	r1, r3, #1
 8019568:	81f9      	strh	r1, [r7, #14]
 801956a:	4413      	add	r3, r2
 801956c:	781a      	ldrb	r2, [r3, #0]
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	681a      	ldr	r2, [r3, #0]
 8019576:	89fb      	ldrh	r3, [r7, #14]
 8019578:	1c59      	adds	r1, r3, #1
 801957a:	81f9      	strh	r1, [r7, #14]
 801957c:	4413      	add	r3, r2
 801957e:	781b      	ldrb	r3, [r3, #0]
 8019580:	461a      	mov	r2, r3
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	681a      	ldr	r2, [r3, #0]
 801958a:	89fb      	ldrh	r3, [r7, #14]
 801958c:	1c59      	adds	r1, r3, #1
 801958e:	81f9      	strh	r1, [r7, #14]
 8019590:	4413      	add	r3, r2
 8019592:	781b      	ldrb	r3, [r3, #0]
 8019594:	021a      	lsls	r2, r3, #8
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	689b      	ldr	r3, [r3, #8]
 801959a:	431a      	orrs	r2, r3
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	681a      	ldr	r2, [r3, #0]
 80195a4:	89fb      	ldrh	r3, [r7, #14]
 80195a6:	1c59      	adds	r1, r3, #1
 80195a8:	81f9      	strh	r1, [r7, #14]
 80195aa:	4413      	add	r3, r2
 80195ac:	781b      	ldrb	r3, [r3, #0]
 80195ae:	041a      	lsls	r2, r3, #16
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	689b      	ldr	r3, [r3, #8]
 80195b4:	431a      	orrs	r2, r3
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	681a      	ldr	r2, [r3, #0]
 80195be:	89fb      	ldrh	r3, [r7, #14]
 80195c0:	1c59      	adds	r1, r3, #1
 80195c2:	81f9      	strh	r1, [r7, #14]
 80195c4:	4413      	add	r3, r2
 80195c6:	781b      	ldrb	r3, [r3, #0]
 80195c8:	061a      	lsls	r2, r3, #24
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	689b      	ldr	r3, [r3, #8]
 80195ce:	431a      	orrs	r2, r3
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	681a      	ldr	r2, [r3, #0]
 80195d8:	89fb      	ldrh	r3, [r7, #14]
 80195da:	1c59      	adds	r1, r3, #1
 80195dc:	81f9      	strh	r1, [r7, #14]
 80195de:	4413      	add	r3, r2
 80195e0:	781a      	ldrb	r2, [r3, #0]
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	681a      	ldr	r2, [r3, #0]
 80195ea:	89fb      	ldrh	r3, [r7, #14]
 80195ec:	1c59      	adds	r1, r3, #1
 80195ee:	81f9      	strh	r1, [r7, #14]
 80195f0:	4413      	add	r3, r2
 80195f2:	781b      	ldrb	r3, [r3, #0]
 80195f4:	b29a      	uxth	r2, r3
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	681a      	ldr	r2, [r3, #0]
 80195fe:	89fb      	ldrh	r3, [r7, #14]
 8019600:	1c59      	adds	r1, r3, #1
 8019602:	81f9      	strh	r1, [r7, #14]
 8019604:	4413      	add	r3, r2
 8019606:	781b      	ldrb	r3, [r3, #0]
 8019608:	0219      	lsls	r1, r3, #8
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	89db      	ldrh	r3, [r3, #14]
 801960e:	b21a      	sxth	r2, r3
 8019610:	b20b      	sxth	r3, r1
 8019612:	4313      	orrs	r3, r2
 8019614:	b21b      	sxth	r3, r3
 8019616:	b29a      	uxth	r2, r3
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	f103 0010 	add.w	r0, r3, #16
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	681a      	ldr	r2, [r3, #0]
 8019626:	89fb      	ldrh	r3, [r7, #14]
 8019628:	18d1      	adds	r1, r2, r3
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	7b1b      	ldrb	r3, [r3, #12]
 801962e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8019632:	b2db      	uxtb	r3, r3
 8019634:	b29b      	uxth	r3, r3
 8019636:	461a      	mov	r2, r3
 8019638:	f002 fdab 	bl	801c192 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	7b1b      	ldrb	r3, [r3, #12]
 8019640:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8019644:	b2db      	uxtb	r3, r3
 8019646:	b29a      	uxth	r2, r3
 8019648:	89fb      	ldrh	r3, [r7, #14]
 801964a:	4413      	add	r3, r2
 801964c:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	2200      	movs	r2, #0
 8019652:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	2200      	movs	r2, #0
 801965a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	791b      	ldrb	r3, [r3, #4]
 8019662:	461a      	mov	r2, r3
 8019664:	89fb      	ldrh	r3, [r7, #14]
 8019666:	1ad3      	subs	r3, r2, r3
 8019668:	2b04      	cmp	r3, #4
 801966a:	dd28      	ble.n	80196be <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	681a      	ldr	r2, [r3, #0]
 8019670:	89fb      	ldrh	r3, [r7, #14]
 8019672:	1c59      	adds	r1, r3, #1
 8019674:	81f9      	strh	r1, [r7, #14]
 8019676:	4413      	add	r3, r2
 8019678:	781a      	ldrb	r2, [r3, #0]
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	791a      	ldrb	r2, [r3, #4]
 8019684:	89fb      	ldrh	r3, [r7, #14]
 8019686:	b2db      	uxtb	r3, r3
 8019688:	1ad3      	subs	r3, r2, r3
 801968a:	b2db      	uxtb	r3, r3
 801968c:	3b04      	subs	r3, #4
 801968e:	b2da      	uxtb	r2, r3
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	681a      	ldr	r2, [r3, #0]
 801969e:	89fb      	ldrh	r3, [r7, #14]
 80196a0:	18d1      	adds	r1, r2, r3
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80196a8:	b29b      	uxth	r3, r3
 80196aa:	461a      	mov	r2, r3
 80196ac:	f002 fd71 	bl	801c192 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80196b6:	b29a      	uxth	r2, r3
 80196b8:	89fb      	ldrh	r3, [r7, #14]
 80196ba:	4413      	add	r3, r2
 80196bc:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	681a      	ldr	r2, [r3, #0]
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	791b      	ldrb	r3, [r3, #4]
 80196c6:	3b04      	subs	r3, #4
 80196c8:	4413      	add	r3, r2
 80196ca:	781b      	ldrb	r3, [r3, #0]
 80196cc:	461a      	mov	r2, r3
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	6819      	ldr	r1, [r3, #0]
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	791b      	ldrb	r3, [r3, #4]
 80196de:	3b03      	subs	r3, #3
 80196e0:	440b      	add	r3, r1
 80196e2:	781b      	ldrb	r3, [r3, #0]
 80196e4:	021b      	lsls	r3, r3, #8
 80196e6:	431a      	orrs	r2, r3
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	6819      	ldr	r1, [r3, #0]
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	791b      	ldrb	r3, [r3, #4]
 80196f8:	3b02      	subs	r3, #2
 80196fa:	440b      	add	r3, r1
 80196fc:	781b      	ldrb	r3, [r3, #0]
 80196fe:	041b      	lsls	r3, r3, #16
 8019700:	431a      	orrs	r2, r3
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	6819      	ldr	r1, [r3, #0]
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	791b      	ldrb	r3, [r3, #4]
 8019712:	3b01      	subs	r3, #1
 8019714:	440b      	add	r3, r1
 8019716:	781b      	ldrb	r3, [r3, #0]
 8019718:	061b      	lsls	r3, r3, #24
 801971a:	431a      	orrs	r2, r3
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8019720:	2300      	movs	r3, #0
}
 8019722:	4618      	mov	r0, r3
 8019724:	3710      	adds	r7, #16
 8019726:	46bd      	mov	sp, r7
 8019728:	bd80      	pop	{r7, pc}

0801972a <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801972a:	b580      	push	{r7, lr}
 801972c:	b084      	sub	sp, #16
 801972e:	af00      	add	r7, sp, #0
 8019730:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	2b00      	cmp	r3, #0
 8019736:	d003      	beq.n	8019740 <LoRaMacSerializerJoinRequest+0x16>
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	2b00      	cmp	r3, #0
 801973e:	d101      	bne.n	8019744 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8019740:	2301      	movs	r3, #1
 8019742:	e070      	b.n	8019826 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8019744:	2300      	movs	r3, #0
 8019746:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	791b      	ldrb	r3, [r3, #4]
 801974c:	2b16      	cmp	r3, #22
 801974e:	d801      	bhi.n	8019754 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8019750:	2302      	movs	r3, #2
 8019752:	e068      	b.n	8019826 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	681a      	ldr	r2, [r3, #0]
 8019758:	89fb      	ldrh	r3, [r7, #14]
 801975a:	1c59      	adds	r1, r3, #1
 801975c:	81f9      	strh	r1, [r7, #14]
 801975e:	4413      	add	r3, r2
 8019760:	687a      	ldr	r2, [r7, #4]
 8019762:	7952      	ldrb	r2, [r2, #5]
 8019764:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	681a      	ldr	r2, [r3, #0]
 801976a:	89fb      	ldrh	r3, [r7, #14]
 801976c:	18d0      	adds	r0, r2, r3
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	3306      	adds	r3, #6
 8019772:	2208      	movs	r2, #8
 8019774:	4619      	mov	r1, r3
 8019776:	f002 fd27 	bl	801c1c8 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801977a:	89fb      	ldrh	r3, [r7, #14]
 801977c:	3308      	adds	r3, #8
 801977e:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	681a      	ldr	r2, [r3, #0]
 8019784:	89fb      	ldrh	r3, [r7, #14]
 8019786:	18d0      	adds	r0, r2, r3
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	330e      	adds	r3, #14
 801978c:	2208      	movs	r2, #8
 801978e:	4619      	mov	r1, r3
 8019790:	f002 fd1a 	bl	801c1c8 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8019794:	89fb      	ldrh	r3, [r7, #14]
 8019796:	3308      	adds	r3, #8
 8019798:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	8ad9      	ldrh	r1, [r3, #22]
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	681a      	ldr	r2, [r3, #0]
 80197a2:	89fb      	ldrh	r3, [r7, #14]
 80197a4:	1c58      	adds	r0, r3, #1
 80197a6:	81f8      	strh	r0, [r7, #14]
 80197a8:	4413      	add	r3, r2
 80197aa:	b2ca      	uxtb	r2, r1
 80197ac:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	8adb      	ldrh	r3, [r3, #22]
 80197b2:	0a1b      	lsrs	r3, r3, #8
 80197b4:	b299      	uxth	r1, r3
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	681a      	ldr	r2, [r3, #0]
 80197ba:	89fb      	ldrh	r3, [r7, #14]
 80197bc:	1c58      	adds	r0, r3, #1
 80197be:	81f8      	strh	r0, [r7, #14]
 80197c0:	4413      	add	r3, r2
 80197c2:	b2ca      	uxtb	r2, r1
 80197c4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	6999      	ldr	r1, [r3, #24]
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	681a      	ldr	r2, [r3, #0]
 80197ce:	89fb      	ldrh	r3, [r7, #14]
 80197d0:	1c58      	adds	r0, r3, #1
 80197d2:	81f8      	strh	r0, [r7, #14]
 80197d4:	4413      	add	r3, r2
 80197d6:	b2ca      	uxtb	r2, r1
 80197d8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	699b      	ldr	r3, [r3, #24]
 80197de:	0a19      	lsrs	r1, r3, #8
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	681a      	ldr	r2, [r3, #0]
 80197e4:	89fb      	ldrh	r3, [r7, #14]
 80197e6:	1c58      	adds	r0, r3, #1
 80197e8:	81f8      	strh	r0, [r7, #14]
 80197ea:	4413      	add	r3, r2
 80197ec:	b2ca      	uxtb	r2, r1
 80197ee:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	699b      	ldr	r3, [r3, #24]
 80197f4:	0c19      	lsrs	r1, r3, #16
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	681a      	ldr	r2, [r3, #0]
 80197fa:	89fb      	ldrh	r3, [r7, #14]
 80197fc:	1c58      	adds	r0, r3, #1
 80197fe:	81f8      	strh	r0, [r7, #14]
 8019800:	4413      	add	r3, r2
 8019802:	b2ca      	uxtb	r2, r1
 8019804:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	699b      	ldr	r3, [r3, #24]
 801980a:	0e19      	lsrs	r1, r3, #24
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	681a      	ldr	r2, [r3, #0]
 8019810:	89fb      	ldrh	r3, [r7, #14]
 8019812:	1c58      	adds	r0, r3, #1
 8019814:	81f8      	strh	r0, [r7, #14]
 8019816:	4413      	add	r3, r2
 8019818:	b2ca      	uxtb	r2, r1
 801981a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801981c:	89fb      	ldrh	r3, [r7, #14]
 801981e:	b2da      	uxtb	r2, r3
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8019824:	2300      	movs	r3, #0
}
 8019826:	4618      	mov	r0, r3
 8019828:	3710      	adds	r7, #16
 801982a:	46bd      	mov	sp, r7
 801982c:	bd80      	pop	{r7, pc}

0801982e <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 801982e:	b580      	push	{r7, lr}
 8019830:	b084      	sub	sp, #16
 8019832:	af00      	add	r7, sp, #0
 8019834:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	2b00      	cmp	r3, #0
 801983a:	d003      	beq.n	8019844 <LoRaMacSerializerData+0x16>
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	681b      	ldr	r3, [r3, #0]
 8019840:	2b00      	cmp	r3, #0
 8019842:	d101      	bne.n	8019848 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8019844:	2301      	movs	r3, #1
 8019846:	e0e5      	b.n	8019a14 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8019848:	2300      	movs	r3, #0
 801984a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 801984c:	2308      	movs	r3, #8
 801984e:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	7b1b      	ldrb	r3, [r3, #12]
 8019854:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8019858:	b2db      	uxtb	r3, r3
 801985a:	b29a      	uxth	r2, r3
 801985c:	89bb      	ldrh	r3, [r7, #12]
 801985e:	4413      	add	r3, r2
 8019860:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019868:	2b00      	cmp	r3, #0
 801986a:	d002      	beq.n	8019872 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801986c:	89bb      	ldrh	r3, [r7, #12]
 801986e:	3301      	adds	r3, #1
 8019870:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019878:	b29a      	uxth	r2, r3
 801987a:	89bb      	ldrh	r3, [r7, #12]
 801987c:	4413      	add	r3, r2
 801987e:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8019880:	89bb      	ldrh	r3, [r7, #12]
 8019882:	3304      	adds	r3, #4
 8019884:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	791b      	ldrb	r3, [r3, #4]
 801988a:	b29b      	uxth	r3, r3
 801988c:	89ba      	ldrh	r2, [r7, #12]
 801988e:	429a      	cmp	r2, r3
 8019890:	d901      	bls.n	8019896 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8019892:	2302      	movs	r3, #2
 8019894:	e0be      	b.n	8019a14 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	681a      	ldr	r2, [r3, #0]
 801989a:	89fb      	ldrh	r3, [r7, #14]
 801989c:	1c59      	adds	r1, r3, #1
 801989e:	81f9      	strh	r1, [r7, #14]
 80198a0:	4413      	add	r3, r2
 80198a2:	687a      	ldr	r2, [r7, #4]
 80198a4:	7952      	ldrb	r2, [r2, #5]
 80198a6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	6899      	ldr	r1, [r3, #8]
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	681a      	ldr	r2, [r3, #0]
 80198b0:	89fb      	ldrh	r3, [r7, #14]
 80198b2:	1c58      	adds	r0, r3, #1
 80198b4:	81f8      	strh	r0, [r7, #14]
 80198b6:	4413      	add	r3, r2
 80198b8:	b2ca      	uxtb	r2, r1
 80198ba:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	689b      	ldr	r3, [r3, #8]
 80198c0:	0a19      	lsrs	r1, r3, #8
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	681a      	ldr	r2, [r3, #0]
 80198c6:	89fb      	ldrh	r3, [r7, #14]
 80198c8:	1c58      	adds	r0, r3, #1
 80198ca:	81f8      	strh	r0, [r7, #14]
 80198cc:	4413      	add	r3, r2
 80198ce:	b2ca      	uxtb	r2, r1
 80198d0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	689b      	ldr	r3, [r3, #8]
 80198d6:	0c19      	lsrs	r1, r3, #16
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	681a      	ldr	r2, [r3, #0]
 80198dc:	89fb      	ldrh	r3, [r7, #14]
 80198de:	1c58      	adds	r0, r3, #1
 80198e0:	81f8      	strh	r0, [r7, #14]
 80198e2:	4413      	add	r3, r2
 80198e4:	b2ca      	uxtb	r2, r1
 80198e6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	689b      	ldr	r3, [r3, #8]
 80198ec:	0e19      	lsrs	r1, r3, #24
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	681a      	ldr	r2, [r3, #0]
 80198f2:	89fb      	ldrh	r3, [r7, #14]
 80198f4:	1c58      	adds	r0, r3, #1
 80198f6:	81f8      	strh	r0, [r7, #14]
 80198f8:	4413      	add	r3, r2
 80198fa:	b2ca      	uxtb	r2, r1
 80198fc:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	681a      	ldr	r2, [r3, #0]
 8019902:	89fb      	ldrh	r3, [r7, #14]
 8019904:	1c59      	adds	r1, r3, #1
 8019906:	81f9      	strh	r1, [r7, #14]
 8019908:	4413      	add	r3, r2
 801990a:	687a      	ldr	r2, [r7, #4]
 801990c:	7b12      	ldrb	r2, [r2, #12]
 801990e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	89d9      	ldrh	r1, [r3, #14]
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	681a      	ldr	r2, [r3, #0]
 8019918:	89fb      	ldrh	r3, [r7, #14]
 801991a:	1c58      	adds	r0, r3, #1
 801991c:	81f8      	strh	r0, [r7, #14]
 801991e:	4413      	add	r3, r2
 8019920:	b2ca      	uxtb	r2, r1
 8019922:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	89db      	ldrh	r3, [r3, #14]
 8019928:	0a1b      	lsrs	r3, r3, #8
 801992a:	b299      	uxth	r1, r3
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	681a      	ldr	r2, [r3, #0]
 8019930:	89fb      	ldrh	r3, [r7, #14]
 8019932:	1c58      	adds	r0, r3, #1
 8019934:	81f8      	strh	r0, [r7, #14]
 8019936:	4413      	add	r3, r2
 8019938:	b2ca      	uxtb	r2, r1
 801993a:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	681a      	ldr	r2, [r3, #0]
 8019940:	89fb      	ldrh	r3, [r7, #14]
 8019942:	18d0      	adds	r0, r2, r3
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	f103 0110 	add.w	r1, r3, #16
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	7b1b      	ldrb	r3, [r3, #12]
 801994e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8019952:	b2db      	uxtb	r3, r3
 8019954:	b29b      	uxth	r3, r3
 8019956:	461a      	mov	r2, r3
 8019958:	f002 fc1b 	bl	801c192 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	7b1b      	ldrb	r3, [r3, #12]
 8019960:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8019964:	b2db      	uxtb	r3, r3
 8019966:	b29a      	uxth	r2, r3
 8019968:	89fb      	ldrh	r3, [r7, #14]
 801996a:	4413      	add	r3, r2
 801996c:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019974:	2b00      	cmp	r3, #0
 8019976:	d009      	beq.n	801998c <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	681a      	ldr	r2, [r3, #0]
 801997c:	89fb      	ldrh	r3, [r7, #14]
 801997e:	1c59      	adds	r1, r3, #1
 8019980:	81f9      	strh	r1, [r7, #14]
 8019982:	4413      	add	r3, r2
 8019984:	687a      	ldr	r2, [r7, #4]
 8019986:	f892 2020 	ldrb.w	r2, [r2, #32]
 801998a:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	681a      	ldr	r2, [r3, #0]
 8019990:	89fb      	ldrh	r3, [r7, #14]
 8019992:	18d0      	adds	r0, r2, r3
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801999e:	b29b      	uxth	r3, r3
 80199a0:	461a      	mov	r2, r3
 80199a2:	f002 fbf6 	bl	801c192 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80199ac:	b29a      	uxth	r2, r3
 80199ae:	89fb      	ldrh	r3, [r7, #14]
 80199b0:	4413      	add	r3, r2
 80199b2:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	681a      	ldr	r2, [r3, #0]
 80199bc:	89fb      	ldrh	r3, [r7, #14]
 80199be:	1c58      	adds	r0, r3, #1
 80199c0:	81f8      	strh	r0, [r7, #14]
 80199c2:	4413      	add	r3, r2
 80199c4:	b2ca      	uxtb	r2, r1
 80199c6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199cc:	0a19      	lsrs	r1, r3, #8
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	681a      	ldr	r2, [r3, #0]
 80199d2:	89fb      	ldrh	r3, [r7, #14]
 80199d4:	1c58      	adds	r0, r3, #1
 80199d6:	81f8      	strh	r0, [r7, #14]
 80199d8:	4413      	add	r3, r2
 80199da:	b2ca      	uxtb	r2, r1
 80199dc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199e2:	0c19      	lsrs	r1, r3, #16
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	681a      	ldr	r2, [r3, #0]
 80199e8:	89fb      	ldrh	r3, [r7, #14]
 80199ea:	1c58      	adds	r0, r3, #1
 80199ec:	81f8      	strh	r0, [r7, #14]
 80199ee:	4413      	add	r3, r2
 80199f0:	b2ca      	uxtb	r2, r1
 80199f2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199f8:	0e19      	lsrs	r1, r3, #24
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	681a      	ldr	r2, [r3, #0]
 80199fe:	89fb      	ldrh	r3, [r7, #14]
 8019a00:	1c58      	adds	r0, r3, #1
 8019a02:	81f8      	strh	r0, [r7, #14]
 8019a04:	4413      	add	r3, r2
 8019a06:	b2ca      	uxtb	r2, r1
 8019a08:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8019a0a:	89fb      	ldrh	r3, [r7, #14]
 8019a0c:	b2da      	uxtb	r2, r3
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8019a12:	2300      	movs	r3, #0
}
 8019a14:	4618      	mov	r0, r3
 8019a16:	3710      	adds	r7, #16
 8019a18:	46bd      	mov	sp, r7
 8019a1a:	bd80      	pop	{r7, pc}

08019a1c <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8019a1c:	b480      	push	{r7}
 8019a1e:	b083      	sub	sp, #12
 8019a20:	af00      	add	r7, sp, #0
 8019a22:	4603      	mov	r3, r0
 8019a24:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019a26:	79fb      	ldrb	r3, [r7, #7]
 8019a28:	2b05      	cmp	r3, #5
 8019a2a:	d101      	bne.n	8019a30 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8019a2c:	2301      	movs	r3, #1
 8019a2e:	e000      	b.n	8019a32 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8019a30:	2300      	movs	r3, #0
        }
    }
}
 8019a32:	4618      	mov	r0, r3
 8019a34:	370c      	adds	r7, #12
 8019a36:	46bd      	mov	sp, r7
 8019a38:	bc80      	pop	{r7}
 8019a3a:	4770      	bx	lr

08019a3c <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8019a3c:	b580      	push	{r7, lr}
 8019a3e:	b084      	sub	sp, #16
 8019a40:	af00      	add	r7, sp, #0
 8019a42:	4603      	mov	r3, r0
 8019a44:	6039      	str	r1, [r7, #0]
 8019a46:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8019a48:	2300      	movs	r3, #0
 8019a4a:	60bb      	str	r3, [r7, #8]
    switch( region )
 8019a4c:	79fb      	ldrb	r3, [r7, #7]
 8019a4e:	2b05      	cmp	r3, #5
 8019a50:	d105      	bne.n	8019a5e <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8019a52:	6838      	ldr	r0, [r7, #0]
 8019a54:	f001 fa08 	bl	801ae68 <RegionEU868GetPhyParam>
 8019a58:	4603      	mov	r3, r0
 8019a5a:	60fb      	str	r3, [r7, #12]
 8019a5c:	e001      	b.n	8019a62 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8019a5e:	68bb      	ldr	r3, [r7, #8]
 8019a60:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8019a62:	68fb      	ldr	r3, [r7, #12]
 8019a64:	4618      	mov	r0, r3
 8019a66:	3710      	adds	r7, #16
 8019a68:	46bd      	mov	sp, r7
 8019a6a:	bd80      	pop	{r7, pc}

08019a6c <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8019a6c:	b580      	push	{r7, lr}
 8019a6e:	b082      	sub	sp, #8
 8019a70:	af00      	add	r7, sp, #0
 8019a72:	4603      	mov	r3, r0
 8019a74:	6039      	str	r1, [r7, #0]
 8019a76:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019a78:	79fb      	ldrb	r3, [r7, #7]
 8019a7a:	2b05      	cmp	r3, #5
 8019a7c:	d103      	bne.n	8019a86 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8019a7e:	6838      	ldr	r0, [r7, #0]
 8019a80:	f001 fb3e 	bl	801b100 <RegionEU868SetBandTxDone>
 8019a84:	e000      	b.n	8019a88 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8019a86:	bf00      	nop
        }
    }
}
 8019a88:	3708      	adds	r7, #8
 8019a8a:	46bd      	mov	sp, r7
 8019a8c:	bd80      	pop	{r7, pc}

08019a8e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8019a8e:	b580      	push	{r7, lr}
 8019a90:	b082      	sub	sp, #8
 8019a92:	af00      	add	r7, sp, #0
 8019a94:	4603      	mov	r3, r0
 8019a96:	6039      	str	r1, [r7, #0]
 8019a98:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019a9a:	79fb      	ldrb	r3, [r7, #7]
 8019a9c:	2b05      	cmp	r3, #5
 8019a9e:	d103      	bne.n	8019aa8 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8019aa0:	6838      	ldr	r0, [r7, #0]
 8019aa2:	f001 fb59 	bl	801b158 <RegionEU868InitDefaults>
 8019aa6:	e000      	b.n	8019aaa <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8019aa8:	bf00      	nop
        }
    }
}
 8019aaa:	bf00      	nop
 8019aac:	3708      	adds	r7, #8
 8019aae:	46bd      	mov	sp, r7
 8019ab0:	bd80      	pop	{r7, pc}

08019ab2 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8019ab2:	b580      	push	{r7, lr}
 8019ab4:	b082      	sub	sp, #8
 8019ab6:	af00      	add	r7, sp, #0
 8019ab8:	4603      	mov	r3, r0
 8019aba:	6039      	str	r1, [r7, #0]
 8019abc:	71fb      	strb	r3, [r7, #7]
 8019abe:	4613      	mov	r3, r2
 8019ac0:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8019ac2:	79fb      	ldrb	r3, [r7, #7]
 8019ac4:	2b05      	cmp	r3, #5
 8019ac6:	d106      	bne.n	8019ad6 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8019ac8:	79bb      	ldrb	r3, [r7, #6]
 8019aca:	4619      	mov	r1, r3
 8019acc:	6838      	ldr	r0, [r7, #0]
 8019ace:	f001 fbe1 	bl	801b294 <RegionEU868Verify>
 8019ad2:	4603      	mov	r3, r0
 8019ad4:	e000      	b.n	8019ad8 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8019ad6:	2300      	movs	r3, #0
        }
    }
}
 8019ad8:	4618      	mov	r0, r3
 8019ada:	3708      	adds	r7, #8
 8019adc:	46bd      	mov	sp, r7
 8019ade:	bd80      	pop	{r7, pc}

08019ae0 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8019ae0:	b580      	push	{r7, lr}
 8019ae2:	b082      	sub	sp, #8
 8019ae4:	af00      	add	r7, sp, #0
 8019ae6:	4603      	mov	r3, r0
 8019ae8:	6039      	str	r1, [r7, #0]
 8019aea:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019aec:	79fb      	ldrb	r3, [r7, #7]
 8019aee:	2b05      	cmp	r3, #5
 8019af0:	d103      	bne.n	8019afa <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8019af2:	6838      	ldr	r0, [r7, #0]
 8019af4:	f001 fc4a 	bl	801b38c <RegionEU868ApplyCFList>
 8019af8:	e000      	b.n	8019afc <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8019afa:	bf00      	nop
        }
    }
}
 8019afc:	bf00      	nop
 8019afe:	3708      	adds	r7, #8
 8019b00:	46bd      	mov	sp, r7
 8019b02:	bd80      	pop	{r7, pc}

08019b04 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8019b04:	b580      	push	{r7, lr}
 8019b06:	b082      	sub	sp, #8
 8019b08:	af00      	add	r7, sp, #0
 8019b0a:	4603      	mov	r3, r0
 8019b0c:	6039      	str	r1, [r7, #0]
 8019b0e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019b10:	79fb      	ldrb	r3, [r7, #7]
 8019b12:	2b05      	cmp	r3, #5
 8019b14:	d104      	bne.n	8019b20 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8019b16:	6838      	ldr	r0, [r7, #0]
 8019b18:	f001 fcac 	bl	801b474 <RegionEU868ChanMaskSet>
 8019b1c:	4603      	mov	r3, r0
 8019b1e:	e000      	b.n	8019b22 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8019b20:	2300      	movs	r3, #0
        }
    }
}
 8019b22:	4618      	mov	r0, r3
 8019b24:	3708      	adds	r7, #8
 8019b26:	46bd      	mov	sp, r7
 8019b28:	bd80      	pop	{r7, pc}

08019b2a <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019b2a:	b580      	push	{r7, lr}
 8019b2c:	b082      	sub	sp, #8
 8019b2e:	af00      	add	r7, sp, #0
 8019b30:	603b      	str	r3, [r7, #0]
 8019b32:	4603      	mov	r3, r0
 8019b34:	71fb      	strb	r3, [r7, #7]
 8019b36:	460b      	mov	r3, r1
 8019b38:	71bb      	strb	r3, [r7, #6]
 8019b3a:	4613      	mov	r3, r2
 8019b3c:	717b      	strb	r3, [r7, #5]
    switch( region )
 8019b3e:	79fb      	ldrb	r3, [r7, #7]
 8019b40:	2b05      	cmp	r3, #5
 8019b42:	d107      	bne.n	8019b54 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8019b44:	7979      	ldrb	r1, [r7, #5]
 8019b46:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8019b4a:	693b      	ldr	r3, [r7, #16]
 8019b4c:	683a      	ldr	r2, [r7, #0]
 8019b4e:	f001 fcbb 	bl	801b4c8 <RegionEU868ComputeRxWindowParameters>
 8019b52:	e000      	b.n	8019b56 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8019b54:	bf00      	nop
        }
    }
}
 8019b56:	bf00      	nop
 8019b58:	3708      	adds	r7, #8
 8019b5a:	46bd      	mov	sp, r7
 8019b5c:	bd80      	pop	{r7, pc}

08019b5e <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8019b5e:	b580      	push	{r7, lr}
 8019b60:	b084      	sub	sp, #16
 8019b62:	af00      	add	r7, sp, #0
 8019b64:	4603      	mov	r3, r0
 8019b66:	60b9      	str	r1, [r7, #8]
 8019b68:	607a      	str	r2, [r7, #4]
 8019b6a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8019b6c:	7bfb      	ldrb	r3, [r7, #15]
 8019b6e:	2b05      	cmp	r3, #5
 8019b70:	d105      	bne.n	8019b7e <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8019b72:	6879      	ldr	r1, [r7, #4]
 8019b74:	68b8      	ldr	r0, [r7, #8]
 8019b76:	f001 fd01 	bl	801b57c <RegionEU868RxConfig>
 8019b7a:	4603      	mov	r3, r0
 8019b7c:	e000      	b.n	8019b80 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8019b7e:	2300      	movs	r3, #0
        }
    }
}
 8019b80:	4618      	mov	r0, r3
 8019b82:	3710      	adds	r7, #16
 8019b84:	46bd      	mov	sp, r7
 8019b86:	bd80      	pop	{r7, pc}

08019b88 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8019b88:	b580      	push	{r7, lr}
 8019b8a:	b084      	sub	sp, #16
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	60b9      	str	r1, [r7, #8]
 8019b90:	607a      	str	r2, [r7, #4]
 8019b92:	603b      	str	r3, [r7, #0]
 8019b94:	4603      	mov	r3, r0
 8019b96:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8019b98:	7bfb      	ldrb	r3, [r7, #15]
 8019b9a:	2b05      	cmp	r3, #5
 8019b9c:	d106      	bne.n	8019bac <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8019b9e:	683a      	ldr	r2, [r7, #0]
 8019ba0:	6879      	ldr	r1, [r7, #4]
 8019ba2:	68b8      	ldr	r0, [r7, #8]
 8019ba4:	f001 fdba 	bl	801b71c <RegionEU868TxConfig>
 8019ba8:	4603      	mov	r3, r0
 8019baa:	e000      	b.n	8019bae <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8019bac:	2300      	movs	r3, #0
        }
    }
}
 8019bae:	4618      	mov	r0, r3
 8019bb0:	3710      	adds	r7, #16
 8019bb2:	46bd      	mov	sp, r7
 8019bb4:	bd80      	pop	{r7, pc}

08019bb6 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019bb6:	b580      	push	{r7, lr}
 8019bb8:	b086      	sub	sp, #24
 8019bba:	af02      	add	r7, sp, #8
 8019bbc:	60b9      	str	r1, [r7, #8]
 8019bbe:	607a      	str	r2, [r7, #4]
 8019bc0:	603b      	str	r3, [r7, #0]
 8019bc2:	4603      	mov	r3, r0
 8019bc4:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8019bc6:	7bfb      	ldrb	r3, [r7, #15]
 8019bc8:	2b05      	cmp	r3, #5
 8019bca:	d109      	bne.n	8019be0 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8019bcc:	69fb      	ldr	r3, [r7, #28]
 8019bce:	9300      	str	r3, [sp, #0]
 8019bd0:	69bb      	ldr	r3, [r7, #24]
 8019bd2:	683a      	ldr	r2, [r7, #0]
 8019bd4:	6879      	ldr	r1, [r7, #4]
 8019bd6:	68b8      	ldr	r0, [r7, #8]
 8019bd8:	f001 fe70 	bl	801b8bc <RegionEU868LinkAdrReq>
 8019bdc:	4603      	mov	r3, r0
 8019bde:	e000      	b.n	8019be2 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8019be0:	2300      	movs	r3, #0
        }
    }
}
 8019be2:	4618      	mov	r0, r3
 8019be4:	3710      	adds	r7, #16
 8019be6:	46bd      	mov	sp, r7
 8019be8:	bd80      	pop	{r7, pc}

08019bea <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019bea:	b580      	push	{r7, lr}
 8019bec:	b082      	sub	sp, #8
 8019bee:	af00      	add	r7, sp, #0
 8019bf0:	4603      	mov	r3, r0
 8019bf2:	6039      	str	r1, [r7, #0]
 8019bf4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019bf6:	79fb      	ldrb	r3, [r7, #7]
 8019bf8:	2b05      	cmp	r3, #5
 8019bfa:	d104      	bne.n	8019c06 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8019bfc:	6838      	ldr	r0, [r7, #0]
 8019bfe:	f001 ff7f 	bl	801bb00 <RegionEU868RxParamSetupReq>
 8019c02:	4603      	mov	r3, r0
 8019c04:	e000      	b.n	8019c08 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8019c06:	2300      	movs	r3, #0
        }
    }
}
 8019c08:	4618      	mov	r0, r3
 8019c0a:	3708      	adds	r7, #8
 8019c0c:	46bd      	mov	sp, r7
 8019c0e:	bd80      	pop	{r7, pc}

08019c10 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8019c10:	b580      	push	{r7, lr}
 8019c12:	b082      	sub	sp, #8
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	4603      	mov	r3, r0
 8019c18:	6039      	str	r1, [r7, #0]
 8019c1a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019c1c:	79fb      	ldrb	r3, [r7, #7]
 8019c1e:	2b05      	cmp	r3, #5
 8019c20:	d104      	bne.n	8019c2c <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8019c22:	6838      	ldr	r0, [r7, #0]
 8019c24:	f001 ffaa 	bl	801bb7c <RegionEU868NewChannelReq>
 8019c28:	4603      	mov	r3, r0
 8019c2a:	e000      	b.n	8019c2e <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8019c2c:	2300      	movs	r3, #0
        }
    }
}
 8019c2e:	4618      	mov	r0, r3
 8019c30:	3708      	adds	r7, #8
 8019c32:	46bd      	mov	sp, r7
 8019c34:	bd80      	pop	{r7, pc}

08019c36 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8019c36:	b580      	push	{r7, lr}
 8019c38:	b082      	sub	sp, #8
 8019c3a:	af00      	add	r7, sp, #0
 8019c3c:	4603      	mov	r3, r0
 8019c3e:	6039      	str	r1, [r7, #0]
 8019c40:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019c42:	79fb      	ldrb	r3, [r7, #7]
 8019c44:	2b05      	cmp	r3, #5
 8019c46:	d104      	bne.n	8019c52 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8019c48:	6838      	ldr	r0, [r7, #0]
 8019c4a:	f001 fff5 	bl	801bc38 <RegionEU868TxParamSetupReq>
 8019c4e:	4603      	mov	r3, r0
 8019c50:	e000      	b.n	8019c54 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8019c52:	2300      	movs	r3, #0
        }
    }
}
 8019c54:	4618      	mov	r0, r3
 8019c56:	3708      	adds	r7, #8
 8019c58:	46bd      	mov	sp, r7
 8019c5a:	bd80      	pop	{r7, pc}

08019c5c <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8019c5c:	b580      	push	{r7, lr}
 8019c5e:	b082      	sub	sp, #8
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	4603      	mov	r3, r0
 8019c64:	6039      	str	r1, [r7, #0]
 8019c66:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019c68:	79fb      	ldrb	r3, [r7, #7]
 8019c6a:	2b05      	cmp	r3, #5
 8019c6c:	d104      	bne.n	8019c78 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8019c6e:	6838      	ldr	r0, [r7, #0]
 8019c70:	f001 ffee 	bl	801bc50 <RegionEU868DlChannelReq>
 8019c74:	4603      	mov	r3, r0
 8019c76:	e000      	b.n	8019c7a <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8019c78:	2300      	movs	r3, #0
        }
    }
}
 8019c7a:	4618      	mov	r0, r3
 8019c7c:	3708      	adds	r7, #8
 8019c7e:	46bd      	mov	sp, r7
 8019c80:	bd80      	pop	{r7, pc}

08019c82 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8019c82:	b580      	push	{r7, lr}
 8019c84:	b082      	sub	sp, #8
 8019c86:	af00      	add	r7, sp, #0
 8019c88:	4603      	mov	r3, r0
 8019c8a:	71fb      	strb	r3, [r7, #7]
 8019c8c:	460b      	mov	r3, r1
 8019c8e:	71bb      	strb	r3, [r7, #6]
 8019c90:	4613      	mov	r3, r2
 8019c92:	717b      	strb	r3, [r7, #5]
    switch( region )
 8019c94:	79fb      	ldrb	r3, [r7, #7]
 8019c96:	2b05      	cmp	r3, #5
 8019c98:	d108      	bne.n	8019cac <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8019c9a:	797a      	ldrb	r2, [r7, #5]
 8019c9c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019ca0:	4611      	mov	r1, r2
 8019ca2:	4618      	mov	r0, r3
 8019ca4:	f002 f818 	bl	801bcd8 <RegionEU868AlternateDr>
 8019ca8:	4603      	mov	r3, r0
 8019caa:	e000      	b.n	8019cae <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8019cac:	2300      	movs	r3, #0
        }
    }
}
 8019cae:	4618      	mov	r0, r3
 8019cb0:	3708      	adds	r7, #8
 8019cb2:	46bd      	mov	sp, r7
 8019cb4:	bd80      	pop	{r7, pc}

08019cb6 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019cb6:	b580      	push	{r7, lr}
 8019cb8:	b084      	sub	sp, #16
 8019cba:	af00      	add	r7, sp, #0
 8019cbc:	60b9      	str	r1, [r7, #8]
 8019cbe:	607a      	str	r2, [r7, #4]
 8019cc0:	603b      	str	r3, [r7, #0]
 8019cc2:	4603      	mov	r3, r0
 8019cc4:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8019cc6:	7bfb      	ldrb	r3, [r7, #15]
 8019cc8:	2b05      	cmp	r3, #5
 8019cca:	d107      	bne.n	8019cdc <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8019ccc:	69bb      	ldr	r3, [r7, #24]
 8019cce:	683a      	ldr	r2, [r7, #0]
 8019cd0:	6879      	ldr	r1, [r7, #4]
 8019cd2:	68b8      	ldr	r0, [r7, #8]
 8019cd4:	f002 f810 	bl	801bcf8 <RegionEU868NextChannel>
 8019cd8:	4603      	mov	r3, r0
 8019cda:	e000      	b.n	8019cde <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8019cdc:	2309      	movs	r3, #9
        }
    }
}
 8019cde:	4618      	mov	r0, r3
 8019ce0:	3710      	adds	r7, #16
 8019ce2:	46bd      	mov	sp, r7
 8019ce4:	bd80      	pop	{r7, pc}

08019ce6 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8019ce6:	b580      	push	{r7, lr}
 8019ce8:	b082      	sub	sp, #8
 8019cea:	af00      	add	r7, sp, #0
 8019cec:	4603      	mov	r3, r0
 8019cee:	6039      	str	r1, [r7, #0]
 8019cf0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019cf2:	79fb      	ldrb	r3, [r7, #7]
 8019cf4:	2b05      	cmp	r3, #5
 8019cf6:	d103      	bne.n	8019d00 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8019cf8:	6838      	ldr	r0, [r7, #0]
 8019cfa:	f002 f977 	bl	801bfec <RegionEU868SetContinuousWave>
 8019cfe:	e000      	b.n	8019d02 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8019d00:	bf00      	nop
        }
    }
}
 8019d02:	bf00      	nop
 8019d04:	3708      	adds	r7, #8
 8019d06:	46bd      	mov	sp, r7
 8019d08:	bd80      	pop	{r7, pc}

08019d0a <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019d0a:	b590      	push	{r4, r7, lr}
 8019d0c:	b083      	sub	sp, #12
 8019d0e:	af00      	add	r7, sp, #0
 8019d10:	4604      	mov	r4, r0
 8019d12:	4608      	mov	r0, r1
 8019d14:	4611      	mov	r1, r2
 8019d16:	461a      	mov	r2, r3
 8019d18:	4623      	mov	r3, r4
 8019d1a:	71fb      	strb	r3, [r7, #7]
 8019d1c:	4603      	mov	r3, r0
 8019d1e:	71bb      	strb	r3, [r7, #6]
 8019d20:	460b      	mov	r3, r1
 8019d22:	717b      	strb	r3, [r7, #5]
 8019d24:	4613      	mov	r3, r2
 8019d26:	713b      	strb	r3, [r7, #4]
    switch( region )
 8019d28:	79fb      	ldrb	r3, [r7, #7]
 8019d2a:	2b05      	cmp	r3, #5
 8019d2c:	d109      	bne.n	8019d42 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8019d2e:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8019d32:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8019d36:	79bb      	ldrb	r3, [r7, #6]
 8019d38:	4618      	mov	r0, r3
 8019d3a:	f002 f9a5 	bl	801c088 <RegionEU868ApplyDrOffset>
 8019d3e:	4603      	mov	r3, r0
 8019d40:	e000      	b.n	8019d44 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8019d42:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8019d44:	4618      	mov	r0, r3
 8019d46:	370c      	adds	r7, #12
 8019d48:	46bd      	mov	sp, r7
 8019d4a:	bd90      	pop	{r4, r7, pc}

08019d4c <RegionRxBeaconSetup>:

void RegionRxBeaconSetup( LoRaMacRegion_t region, RxBeaconSetup_t* rxBeaconSetup, uint8_t* outDr )
{
 8019d4c:	b580      	push	{r7, lr}
 8019d4e:	b084      	sub	sp, #16
 8019d50:	af00      	add	r7, sp, #0
 8019d52:	4603      	mov	r3, r0
 8019d54:	60b9      	str	r1, [r7, #8]
 8019d56:	607a      	str	r2, [r7, #4]
 8019d58:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8019d5a:	7bfb      	ldrb	r3, [r7, #15]
 8019d5c:	2b05      	cmp	r3, #5
 8019d5e:	d104      	bne.n	8019d6a <RegionRxBeaconSetup+0x1e>
        AS923_RX_BEACON_SETUP( );
        AU915_RX_BEACON_SETUP( );
        CN470_RX_BEACON_SETUP( );
        CN779_RX_BEACON_SETUP( );
        EU433_RX_BEACON_SETUP( );
        EU868_RX_BEACON_SETUP( );
 8019d60:	6879      	ldr	r1, [r7, #4]
 8019d62:	68b8      	ldr	r0, [r7, #8]
 8019d64:	f002 f9aa 	bl	801c0bc <RegionEU868RxBeaconSetup>
 8019d68:	e000      	b.n	8019d6c <RegionRxBeaconSetup+0x20>
        IN865_RX_BEACON_SETUP( );
        US915_RX_BEACON_SETUP( );
        RU864_RX_BEACON_SETUP( );
        default:
        {
            break;
 8019d6a:	bf00      	nop
        }
    }
}
 8019d6c:	bf00      	nop
 8019d6e:	3710      	adds	r7, #16
 8019d70:	46bd      	mov	sp, r7
 8019d72:	bd80      	pop	{r7, pc}

08019d74 <RegionGetVersion>:

Version_t RegionGetVersion( void )
{
 8019d74:	b480      	push	{r7}
 8019d76:	b083      	sub	sp, #12
 8019d78:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8019d7a:	4b04      	ldr	r3, [pc, #16]	; (8019d8c <RegionGetVersion+0x18>)
 8019d7c:	607b      	str	r3, [r7, #4]

    return version;
 8019d7e:	687b      	ldr	r3, [r7, #4]
}
 8019d80:	4618      	mov	r0, r3
 8019d82:	370c      	adds	r7, #12
 8019d84:	46bd      	mov	sp, r7
 8019d86:	bc80      	pop	{r7}
 8019d88:	4770      	bx	lr
 8019d8a:	bf00      	nop
 8019d8c:	01010003 	.word	0x01010003

08019d90 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8019d90:	b480      	push	{r7}
 8019d92:	b087      	sub	sp, #28
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	60f8      	str	r0, [r7, #12]
 8019d98:	4608      	mov	r0, r1
 8019d9a:	4639      	mov	r1, r7
 8019d9c:	e881 000c 	stmia.w	r1, {r2, r3}
 8019da0:	4603      	mov	r3, r0
 8019da2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	881b      	ldrh	r3, [r3, #0]
 8019da8:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8019daa:	7afb      	ldrb	r3, [r7, #11]
 8019dac:	f083 0301 	eor.w	r3, r3, #1
 8019db0:	b2db      	uxtb	r3, r3
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d01b      	beq.n	8019dee <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8019db6:	f242 7310 	movw	r3, #10000	; 0x2710
 8019dba:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8019dbc:	683b      	ldr	r3, [r7, #0]
 8019dbe:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8019dc2:	d202      	bcs.n	8019dca <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8019dc4:	2364      	movs	r3, #100	; 0x64
 8019dc6:	82bb      	strh	r3, [r7, #20]
 8019dc8:	e00b      	b.n	8019de2 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8019dca:	683b      	ldr	r3, [r7, #0]
 8019dcc:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8019dd0:	4293      	cmp	r3, r2
 8019dd2:	d803      	bhi.n	8019ddc <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8019dd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019dd8:	82bb      	strh	r3, [r7, #20]
 8019dda:	e002      	b.n	8019de2 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8019ddc:	f242 7310 	movw	r3, #10000	; 0x2710
 8019de0:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8019de2:	8aba      	ldrh	r2, [r7, #20]
 8019de4:	8afb      	ldrh	r3, [r7, #22]
 8019de6:	4293      	cmp	r3, r2
 8019de8:	bf38      	it	cc
 8019dea:	4613      	movcc	r3, r2
 8019dec:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8019dee:	8afb      	ldrh	r3, [r7, #22]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d101      	bne.n	8019df8 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8019df4:	2301      	movs	r3, #1
 8019df6:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8019df8:	8afb      	ldrh	r3, [r7, #22]
}
 8019dfa:	4618      	mov	r0, r3
 8019dfc:	371c      	adds	r7, #28
 8019dfe:	46bd      	mov	sp, r7
 8019e00:	bc80      	pop	{r7}
 8019e02:	4770      	bx	lr

08019e04 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8019e04:	b580      	push	{r7, lr}
 8019e06:	b08e      	sub	sp, #56	; 0x38
 8019e08:	af02      	add	r7, sp, #8
 8019e0a:	60f8      	str	r0, [r7, #12]
 8019e0c:	4608      	mov	r0, r1
 8019e0e:	4639      	mov	r1, r7
 8019e10:	e881 000c 	stmia.w	r1, {r2, r3}
 8019e14:	4603      	mov	r3, r0
 8019e16:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	881b      	ldrh	r3, [r3, #0]
 8019e1c:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8019e1e:	4b4b      	ldr	r3, [pc, #300]	; (8019f4c <SetMaxTimeCredits+0x148>)
 8019e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8019e22:	463b      	mov	r3, r7
 8019e24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019e28:	f005 fdea 	bl	801fa00 <SysTimeToMs>
 8019e2c:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8019e2e:	f107 0314 	add.w	r3, r7, #20
 8019e32:	2200      	movs	r2, #0
 8019e34:	601a      	str	r2, [r3, #0]
 8019e36:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8019e38:	7af9      	ldrb	r1, [r7, #11]
 8019e3a:	463b      	mov	r3, r7
 8019e3c:	cb0c      	ldmia	r3, {r2, r3}
 8019e3e:	68f8      	ldr	r0, [r7, #12]
 8019e40:	f7ff ffa6 	bl	8019d90 <GetDutyCycle>
 8019e44:	4603      	mov	r3, r0
 8019e46:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8019e48:	7afb      	ldrb	r3, [r7, #11]
 8019e4a:	f083 0301 	eor.w	r3, r3, #1
 8019e4e:	b2db      	uxtb	r3, r3
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d062      	beq.n	8019f1a <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8019e54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019e56:	2b64      	cmp	r3, #100	; 0x64
 8019e58:	d105      	bne.n	8019e66 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8019e5a:	4b3c      	ldr	r3, [pc, #240]	; (8019f4c <SetMaxTimeCredits+0x148>)
 8019e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8019e5e:	68fb      	ldr	r3, [r7, #12]
 8019e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e62:	609a      	str	r2, [r3, #8]
 8019e64:	e00b      	b.n	8019e7e <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8019e66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019e68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019e6c:	d105      	bne.n	8019e7a <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8019e6e:	4b38      	ldr	r3, [pc, #224]	; (8019f50 <SetMaxTimeCredits+0x14c>)
 8019e70:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e76:	609a      	str	r2, [r3, #8]
 8019e78:	e001      	b.n	8019e7e <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8019e7a:	4b36      	ldr	r3, [pc, #216]	; (8019f54 <SetMaxTimeCredits+0x150>)
 8019e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8019e7e:	68fb      	ldr	r3, [r7, #12]
 8019e80:	689a      	ldr	r2, [r3, #8]
 8019e82:	f107 031c 	add.w	r3, r7, #28
 8019e86:	4611      	mov	r1, r2
 8019e88:	4618      	mov	r0, r3
 8019e8a:	f005 fde1 	bl	801fa50 <SysTimeFromMs>
 8019e8e:	f107 0014 	add.w	r0, r7, #20
 8019e92:	6a3b      	ldr	r3, [r7, #32]
 8019e94:	9300      	str	r3, [sp, #0]
 8019e96:	69fb      	ldr	r3, [r7, #28]
 8019e98:	463a      	mov	r2, r7
 8019e9a:	ca06      	ldmia	r2, {r1, r2}
 8019e9c:	f005 fcf1 	bl	801f882 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8019ea0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8019ea4:	f083 0301 	eor.w	r3, r3, #1
 8019ea8:	b2db      	uxtb	r3, r3
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d006      	beq.n	8019ebc <SetMaxTimeCredits+0xb8>
 8019eae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019eb2:	f083 0301 	eor.w	r3, r3, #1
 8019eb6:	b2db      	uxtb	r3, r3
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d108      	bne.n	8019ece <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8019ebc:	68fb      	ldr	r3, [r7, #12]
 8019ebe:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8019ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019ec2:	429a      	cmp	r2, r3
 8019ec4:	d103      	bne.n	8019ece <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8019ec6:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8019ec8:	4a23      	ldr	r2, [pc, #140]	; (8019f58 <SetMaxTimeCredits+0x154>)
 8019eca:	4293      	cmp	r3, r2
 8019ecc:	d92f      	bls.n	8019f2e <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8019ece:	68fb      	ldr	r3, [r7, #12]
 8019ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019ed2:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8019ed4:	683b      	ldr	r3, [r7, #0]
 8019ed6:	4a21      	ldr	r2, [pc, #132]	; (8019f5c <SetMaxTimeCredits+0x158>)
 8019ed8:	4293      	cmp	r3, r2
 8019eda:	d928      	bls.n	8019f2e <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8019edc:	683b      	ldr	r3, [r7, #0]
 8019ede:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8019ee2:	3b30      	subs	r3, #48	; 0x30
 8019ee4:	4a1e      	ldr	r2, [pc, #120]	; (8019f60 <SetMaxTimeCredits+0x15c>)
 8019ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8019eea:	0c1b      	lsrs	r3, r3, #16
 8019eec:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8019eee:	697b      	ldr	r3, [r7, #20]
 8019ef0:	4a1c      	ldr	r2, [pc, #112]	; (8019f64 <SetMaxTimeCredits+0x160>)
 8019ef2:	fb02 f303 	mul.w	r3, r2, r3
 8019ef6:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8019ef8:	697b      	ldr	r3, [r7, #20]
 8019efa:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8019efe:	3330      	adds	r3, #48	; 0x30
 8019f00:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8019f02:	2300      	movs	r3, #0
 8019f04:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8019f06:	f107 0314 	add.w	r3, r7, #20
 8019f0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019f0e:	f005 fd77 	bl	801fa00 <SysTimeToMs>
 8019f12:	4602      	mov	r2, r0
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	609a      	str	r2, [r3, #8]
 8019f18:	e009      	b.n	8019f2e <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8019f1a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8019f1e:	f083 0301 	eor.w	r3, r3, #1
 8019f22:	b2db      	uxtb	r3, r3
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d002      	beq.n	8019f2e <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f2c:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	685b      	ldr	r3, [r3, #4]
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d102      	bne.n	8019f3c <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f3a:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8019f3c:	68fb      	ldr	r3, [r7, #12]
 8019f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f40:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8019f42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8019f44:	4618      	mov	r0, r3
 8019f46:	3730      	adds	r7, #48	; 0x30
 8019f48:	46bd      	mov	sp, r7
 8019f4a:	bd80      	pop	{r7, pc}
 8019f4c:	001b7740 	.word	0x001b7740
 8019f50:	0112a880 	.word	0x0112a880
 8019f54:	02932e00 	.word	0x02932e00
 8019f58:	0001517f 	.word	0x0001517f
 8019f5c:	0001ec2f 	.word	0x0001ec2f
 8019f60:	c22e4507 	.word	0xc22e4507
 8019f64:	00015180 	.word	0x00015180

08019f68 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8019f68:	b580      	push	{r7, lr}
 8019f6a:	b086      	sub	sp, #24
 8019f6c:	af02      	add	r7, sp, #8
 8019f6e:	6078      	str	r0, [r7, #4]
 8019f70:	4608      	mov	r0, r1
 8019f72:	4611      	mov	r1, r2
 8019f74:	461a      	mov	r2, r3
 8019f76:	4603      	mov	r3, r0
 8019f78:	70fb      	strb	r3, [r7, #3]
 8019f7a:	460b      	mov	r3, r1
 8019f7c:	70bb      	strb	r3, [r7, #2]
 8019f7e:	4613      	mov	r3, r2
 8019f80:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8019f82:	78f9      	ldrb	r1, [r7, #3]
 8019f84:	787b      	ldrb	r3, [r7, #1]
 8019f86:	9301      	str	r3, [sp, #4]
 8019f88:	78bb      	ldrb	r3, [r7, #2]
 8019f8a:	9300      	str	r3, [sp, #0]
 8019f8c:	f107 0318 	add.w	r3, r7, #24
 8019f90:	cb0c      	ldmia	r3, {r2, r3}
 8019f92:	6878      	ldr	r0, [r7, #4]
 8019f94:	f7ff ff36 	bl	8019e04 <SetMaxTimeCredits>
 8019f98:	4603      	mov	r3, r0
 8019f9a:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8019f9c:	78fb      	ldrb	r3, [r7, #3]
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d00a      	beq.n	8019fb8 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	685b      	ldr	r3, [r3, #4]
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	f006 fb6a 	bl	8020680 <UTIL_TIMER_GetElapsedTime>
 8019fac:	4602      	mov	r2, r0
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	68db      	ldr	r3, [r3, #12]
 8019fb2:	441a      	add	r2, r3
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	68da      	ldr	r2, [r3, #12]
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	691b      	ldr	r3, [r3, #16]
 8019fc0:	429a      	cmp	r2, r3
 8019fc2:	d903      	bls.n	8019fcc <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	691a      	ldr	r2, [r3, #16]
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	6a3a      	ldr	r2, [r7, #32]
 8019fd0:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8019fd2:	89fb      	ldrh	r3, [r7, #14]
}
 8019fd4:	4618      	mov	r0, r3
 8019fd6:	3710      	adds	r7, #16
 8019fd8:	46bd      	mov	sp, r7
 8019fda:	bd80      	pop	{r7, pc}

08019fdc <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8019fdc:	b480      	push	{r7}
 8019fde:	b085      	sub	sp, #20
 8019fe0:	af00      	add	r7, sp, #0
 8019fe2:	4603      	mov	r3, r0
 8019fe4:	460a      	mov	r2, r1
 8019fe6:	80fb      	strh	r3, [r7, #6]
 8019fe8:	4613      	mov	r3, r2
 8019fea:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8019fec:	2300      	movs	r3, #0
 8019fee:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	73bb      	strb	r3, [r7, #14]
 8019ff4:	e011      	b.n	801a01a <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8019ff6:	88fa      	ldrh	r2, [r7, #6]
 8019ff8:	7bbb      	ldrb	r3, [r7, #14]
 8019ffa:	2101      	movs	r1, #1
 8019ffc:	fa01 f303 	lsl.w	r3, r1, r3
 801a000:	401a      	ands	r2, r3
 801a002:	7bbb      	ldrb	r3, [r7, #14]
 801a004:	2101      	movs	r1, #1
 801a006:	fa01 f303 	lsl.w	r3, r1, r3
 801a00a:	429a      	cmp	r2, r3
 801a00c:	d102      	bne.n	801a014 <CountChannels+0x38>
        {
            nbActiveBits++;
 801a00e:	7bfb      	ldrb	r3, [r7, #15]
 801a010:	3301      	adds	r3, #1
 801a012:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 801a014:	7bbb      	ldrb	r3, [r7, #14]
 801a016:	3301      	adds	r3, #1
 801a018:	73bb      	strb	r3, [r7, #14]
 801a01a:	7bba      	ldrb	r2, [r7, #14]
 801a01c:	797b      	ldrb	r3, [r7, #5]
 801a01e:	429a      	cmp	r2, r3
 801a020:	d3e9      	bcc.n	8019ff6 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801a022:	7bfb      	ldrb	r3, [r7, #15]
}
 801a024:	4618      	mov	r0, r3
 801a026:	3714      	adds	r7, #20
 801a028:	46bd      	mov	sp, r7
 801a02a:	bc80      	pop	{r7}
 801a02c:	4770      	bx	lr

0801a02e <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801a02e:	b580      	push	{r7, lr}
 801a030:	b084      	sub	sp, #16
 801a032:	af00      	add	r7, sp, #0
 801a034:	6039      	str	r1, [r7, #0]
 801a036:	4611      	mov	r1, r2
 801a038:	461a      	mov	r2, r3
 801a03a:	4603      	mov	r3, r0
 801a03c:	71fb      	strb	r3, [r7, #7]
 801a03e:	460b      	mov	r3, r1
 801a040:	71bb      	strb	r3, [r7, #6]
 801a042:	4613      	mov	r3, r2
 801a044:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801a046:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801a04a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801a04e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a052:	4618      	mov	r0, r3
 801a054:	f000 f85d 	bl	801a112 <RegionCommonValueInRange>
 801a058:	4603      	mov	r3, r0
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d101      	bne.n	801a062 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801a05e:	2300      	movs	r3, #0
 801a060:	e053      	b.n	801a10a <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801a062:	2300      	movs	r3, #0
 801a064:	73fb      	strb	r3, [r7, #15]
 801a066:	2300      	movs	r3, #0
 801a068:	73bb      	strb	r3, [r7, #14]
 801a06a:	e049      	b.n	801a100 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801a06c:	2300      	movs	r3, #0
 801a06e:	737b      	strb	r3, [r7, #13]
 801a070:	e03d      	b.n	801a0ee <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801a072:	7bbb      	ldrb	r3, [r7, #14]
 801a074:	005b      	lsls	r3, r3, #1
 801a076:	683a      	ldr	r2, [r7, #0]
 801a078:	4413      	add	r3, r2
 801a07a:	881b      	ldrh	r3, [r3, #0]
 801a07c:	461a      	mov	r2, r3
 801a07e:	7b7b      	ldrb	r3, [r7, #13]
 801a080:	fa42 f303 	asr.w	r3, r2, r3
 801a084:	f003 0301 	and.w	r3, r3, #1
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d02d      	beq.n	801a0e8 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801a08c:	7bfa      	ldrb	r2, [r7, #15]
 801a08e:	7b7b      	ldrb	r3, [r7, #13]
 801a090:	4413      	add	r3, r2
 801a092:	461a      	mov	r2, r3
 801a094:	4613      	mov	r3, r2
 801a096:	005b      	lsls	r3, r3, #1
 801a098:	4413      	add	r3, r2
 801a09a:	009b      	lsls	r3, r3, #2
 801a09c:	461a      	mov	r2, r3
 801a09e:	69fb      	ldr	r3, [r7, #28]
 801a0a0:	4413      	add	r3, r2
 801a0a2:	7a1b      	ldrb	r3, [r3, #8]
 801a0a4:	f343 0303 	sbfx	r3, r3, #0, #4
 801a0a8:	b25b      	sxtb	r3, r3
 801a0aa:	f003 030f 	and.w	r3, r3, #15
 801a0ae:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801a0b0:	7bfa      	ldrb	r2, [r7, #15]
 801a0b2:	7b7b      	ldrb	r3, [r7, #13]
 801a0b4:	4413      	add	r3, r2
 801a0b6:	461a      	mov	r2, r3
 801a0b8:	4613      	mov	r3, r2
 801a0ba:	005b      	lsls	r3, r3, #1
 801a0bc:	4413      	add	r3, r2
 801a0be:	009b      	lsls	r3, r3, #2
 801a0c0:	461a      	mov	r2, r3
 801a0c2:	69fb      	ldr	r3, [r7, #28]
 801a0c4:	4413      	add	r3, r2
 801a0c6:	7a1b      	ldrb	r3, [r3, #8]
 801a0c8:	f343 1303 	sbfx	r3, r3, #4, #4
 801a0cc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801a0ce:	f003 030f 	and.w	r3, r3, #15
 801a0d2:	b25a      	sxtb	r2, r3
 801a0d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a0d8:	4618      	mov	r0, r3
 801a0da:	f000 f81a 	bl	801a112 <RegionCommonValueInRange>
 801a0de:	4603      	mov	r3, r0
 801a0e0:	2b01      	cmp	r3, #1
 801a0e2:	d101      	bne.n	801a0e8 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 801a0e4:	2301      	movs	r3, #1
 801a0e6:	e010      	b.n	801a10a <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 801a0e8:	7b7b      	ldrb	r3, [r7, #13]
 801a0ea:	3301      	adds	r3, #1
 801a0ec:	737b      	strb	r3, [r7, #13]
 801a0ee:	7b7b      	ldrb	r3, [r7, #13]
 801a0f0:	2b0f      	cmp	r3, #15
 801a0f2:	d9be      	bls.n	801a072 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801a0f4:	7bfb      	ldrb	r3, [r7, #15]
 801a0f6:	3310      	adds	r3, #16
 801a0f8:	73fb      	strb	r3, [r7, #15]
 801a0fa:	7bbb      	ldrb	r3, [r7, #14]
 801a0fc:	3301      	adds	r3, #1
 801a0fe:	73bb      	strb	r3, [r7, #14]
 801a100:	7bfa      	ldrb	r2, [r7, #15]
 801a102:	79fb      	ldrb	r3, [r7, #7]
 801a104:	429a      	cmp	r2, r3
 801a106:	d3b1      	bcc.n	801a06c <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 801a108:	2300      	movs	r3, #0
}
 801a10a:	4618      	mov	r0, r3
 801a10c:	3710      	adds	r7, #16
 801a10e:	46bd      	mov	sp, r7
 801a110:	bd80      	pop	{r7, pc}

0801a112 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801a112:	b480      	push	{r7}
 801a114:	b083      	sub	sp, #12
 801a116:	af00      	add	r7, sp, #0
 801a118:	4603      	mov	r3, r0
 801a11a:	71fb      	strb	r3, [r7, #7]
 801a11c:	460b      	mov	r3, r1
 801a11e:	71bb      	strb	r3, [r7, #6]
 801a120:	4613      	mov	r3, r2
 801a122:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 801a124:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801a128:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a12c:	429a      	cmp	r2, r3
 801a12e:	db07      	blt.n	801a140 <RegionCommonValueInRange+0x2e>
 801a130:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801a134:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801a138:	429a      	cmp	r2, r3
 801a13a:	dc01      	bgt.n	801a140 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 801a13c:	2301      	movs	r3, #1
 801a13e:	e000      	b.n	801a142 <RegionCommonValueInRange+0x30>
    }
    return 0;
 801a140:	2300      	movs	r3, #0
}
 801a142:	4618      	mov	r0, r3
 801a144:	370c      	adds	r7, #12
 801a146:	46bd      	mov	sp, r7
 801a148:	bc80      	pop	{r7}
 801a14a:	4770      	bx	lr

0801a14c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 801a14c:	b480      	push	{r7}
 801a14e:	b085      	sub	sp, #20
 801a150:	af00      	add	r7, sp, #0
 801a152:	6078      	str	r0, [r7, #4]
 801a154:	460b      	mov	r3, r1
 801a156:	70fb      	strb	r3, [r7, #3]
 801a158:	4613      	mov	r3, r2
 801a15a:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 801a15c:	78fb      	ldrb	r3, [r7, #3]
 801a15e:	091b      	lsrs	r3, r3, #4
 801a160:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801a162:	78bb      	ldrb	r3, [r7, #2]
 801a164:	091b      	lsrs	r3, r3, #4
 801a166:	b2db      	uxtb	r3, r3
 801a168:	7bfa      	ldrb	r2, [r7, #15]
 801a16a:	429a      	cmp	r2, r3
 801a16c:	d803      	bhi.n	801a176 <RegionCommonChanDisable+0x2a>
 801a16e:	78fa      	ldrb	r2, [r7, #3]
 801a170:	78bb      	ldrb	r3, [r7, #2]
 801a172:	429a      	cmp	r2, r3
 801a174:	d301      	bcc.n	801a17a <RegionCommonChanDisable+0x2e>
    {
        return false;
 801a176:	2300      	movs	r3, #0
 801a178:	e017      	b.n	801a1aa <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801a17a:	7bfb      	ldrb	r3, [r7, #15]
 801a17c:	005b      	lsls	r3, r3, #1
 801a17e:	687a      	ldr	r2, [r7, #4]
 801a180:	4413      	add	r3, r2
 801a182:	881b      	ldrh	r3, [r3, #0]
 801a184:	b21a      	sxth	r2, r3
 801a186:	78fb      	ldrb	r3, [r7, #3]
 801a188:	f003 030f 	and.w	r3, r3, #15
 801a18c:	2101      	movs	r1, #1
 801a18e:	fa01 f303 	lsl.w	r3, r1, r3
 801a192:	b21b      	sxth	r3, r3
 801a194:	43db      	mvns	r3, r3
 801a196:	b21b      	sxth	r3, r3
 801a198:	4013      	ands	r3, r2
 801a19a:	b219      	sxth	r1, r3
 801a19c:	7bfb      	ldrb	r3, [r7, #15]
 801a19e:	005b      	lsls	r3, r3, #1
 801a1a0:	687a      	ldr	r2, [r7, #4]
 801a1a2:	4413      	add	r3, r2
 801a1a4:	b28a      	uxth	r2, r1
 801a1a6:	801a      	strh	r2, [r3, #0]

    return true;
 801a1a8:	2301      	movs	r3, #1
}
 801a1aa:	4618      	mov	r0, r3
 801a1ac:	3714      	adds	r7, #20
 801a1ae:	46bd      	mov	sp, r7
 801a1b0:	bc80      	pop	{r7}
 801a1b2:	4770      	bx	lr

0801a1b4 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 801a1b4:	b580      	push	{r7, lr}
 801a1b6:	b084      	sub	sp, #16
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	6078      	str	r0, [r7, #4]
 801a1bc:	460b      	mov	r3, r1
 801a1be:	70fb      	strb	r3, [r7, #3]
 801a1c0:	4613      	mov	r3, r2
 801a1c2:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 801a1c4:	2300      	movs	r3, #0
 801a1c6:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	d101      	bne.n	801a1d2 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801a1ce:	2300      	movs	r3, #0
 801a1d0:	e018      	b.n	801a204 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801a1d2:	78fb      	ldrb	r3, [r7, #3]
 801a1d4:	73bb      	strb	r3, [r7, #14]
 801a1d6:	e010      	b.n	801a1fa <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801a1d8:	7bbb      	ldrb	r3, [r7, #14]
 801a1da:	005b      	lsls	r3, r3, #1
 801a1dc:	687a      	ldr	r2, [r7, #4]
 801a1de:	4413      	add	r3, r2
 801a1e0:	881b      	ldrh	r3, [r3, #0]
 801a1e2:	2110      	movs	r1, #16
 801a1e4:	4618      	mov	r0, r3
 801a1e6:	f7ff fef9 	bl	8019fdc <CountChannels>
 801a1ea:	4603      	mov	r3, r0
 801a1ec:	461a      	mov	r2, r3
 801a1ee:	7bfb      	ldrb	r3, [r7, #15]
 801a1f0:	4413      	add	r3, r2
 801a1f2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801a1f4:	7bbb      	ldrb	r3, [r7, #14]
 801a1f6:	3301      	adds	r3, #1
 801a1f8:	73bb      	strb	r3, [r7, #14]
 801a1fa:	7bba      	ldrb	r2, [r7, #14]
 801a1fc:	78bb      	ldrb	r3, [r7, #2]
 801a1fe:	429a      	cmp	r2, r3
 801a200:	d3ea      	bcc.n	801a1d8 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801a202:	7bfb      	ldrb	r3, [r7, #15]
}
 801a204:	4618      	mov	r0, r3
 801a206:	3710      	adds	r7, #16
 801a208:	46bd      	mov	sp, r7
 801a20a:	bd80      	pop	{r7, pc}

0801a20c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 801a20c:	b480      	push	{r7}
 801a20e:	b087      	sub	sp, #28
 801a210:	af00      	add	r7, sp, #0
 801a212:	60f8      	str	r0, [r7, #12]
 801a214:	60b9      	str	r1, [r7, #8]
 801a216:	4613      	mov	r3, r2
 801a218:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	d016      	beq.n	801a24e <RegionCommonChanMaskCopy+0x42>
 801a220:	68bb      	ldr	r3, [r7, #8]
 801a222:	2b00      	cmp	r3, #0
 801a224:	d013      	beq.n	801a24e <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801a226:	2300      	movs	r3, #0
 801a228:	75fb      	strb	r3, [r7, #23]
 801a22a:	e00c      	b.n	801a246 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 801a22c:	7dfb      	ldrb	r3, [r7, #23]
 801a22e:	005b      	lsls	r3, r3, #1
 801a230:	68ba      	ldr	r2, [r7, #8]
 801a232:	441a      	add	r2, r3
 801a234:	7dfb      	ldrb	r3, [r7, #23]
 801a236:	005b      	lsls	r3, r3, #1
 801a238:	68f9      	ldr	r1, [r7, #12]
 801a23a:	440b      	add	r3, r1
 801a23c:	8812      	ldrh	r2, [r2, #0]
 801a23e:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 801a240:	7dfb      	ldrb	r3, [r7, #23]
 801a242:	3301      	adds	r3, #1
 801a244:	75fb      	strb	r3, [r7, #23]
 801a246:	7dfa      	ldrb	r2, [r7, #23]
 801a248:	79fb      	ldrb	r3, [r7, #7]
 801a24a:	429a      	cmp	r2, r3
 801a24c:	d3ee      	bcc.n	801a22c <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 801a24e:	bf00      	nop
 801a250:	371c      	adds	r7, #28
 801a252:	46bd      	mov	sp, r7
 801a254:	bc80      	pop	{r7}
 801a256:	4770      	bx	lr

0801a258 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801a258:	b082      	sub	sp, #8
 801a25a:	b580      	push	{r7, lr}
 801a25c:	b086      	sub	sp, #24
 801a25e:	af00      	add	r7, sp, #0
 801a260:	60f8      	str	r0, [r7, #12]
 801a262:	60b9      	str	r1, [r7, #8]
 801a264:	627b      	str	r3, [r7, #36]	; 0x24
 801a266:	4613      	mov	r3, r2
 801a268:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801a26a:	79f9      	ldrb	r1, [r7, #7]
 801a26c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a270:	cb0c      	ldmia	r3, {r2, r3}
 801a272:	68f8      	ldr	r0, [r7, #12]
 801a274:	f7ff fd8c 	bl	8019d90 <GetDutyCycle>
 801a278:	4603      	mov	r3, r0
 801a27a:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	68da      	ldr	r2, [r3, #12]
 801a280:	8afb      	ldrh	r3, [r7, #22]
 801a282:	68b9      	ldr	r1, [r7, #8]
 801a284:	fb01 f303 	mul.w	r3, r1, r3
 801a288:	429a      	cmp	r2, r3
 801a28a:	d909      	bls.n	801a2a0 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 801a28c:	68fb      	ldr	r3, [r7, #12]
 801a28e:	68da      	ldr	r2, [r3, #12]
 801a290:	8afb      	ldrh	r3, [r7, #22]
 801a292:	68b9      	ldr	r1, [r7, #8]
 801a294:	fb01 f303 	mul.w	r3, r1, r3
 801a298:	1ad2      	subs	r2, r2, r3
 801a29a:	68fb      	ldr	r3, [r7, #12]
 801a29c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801a29e:	e002      	b.n	801a2a6 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 801a2a0:	68fb      	ldr	r3, [r7, #12]
 801a2a2:	2200      	movs	r2, #0
 801a2a4:	60da      	str	r2, [r3, #12]
}
 801a2a6:	bf00      	nop
 801a2a8:	3718      	adds	r7, #24
 801a2aa:	46bd      	mov	sp, r7
 801a2ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a2b0:	b002      	add	sp, #8
 801a2b2:	4770      	bx	lr

0801a2b4 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801a2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2b6:	b08f      	sub	sp, #60	; 0x3c
 801a2b8:	af04      	add	r7, sp, #16
 801a2ba:	6039      	str	r1, [r7, #0]
 801a2bc:	4611      	mov	r1, r2
 801a2be:	461a      	mov	r2, r3
 801a2c0:	4603      	mov	r3, r0
 801a2c2:	71fb      	strb	r3, [r7, #7]
 801a2c4:	460b      	mov	r3, r1
 801a2c6:	71bb      	strb	r3, [r7, #6]
 801a2c8:	4613      	mov	r3, r2
 801a2ca:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 801a2cc:	f04f 33ff 	mov.w	r3, #4294967295
 801a2d0:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801a2d2:	f006 f9c3 	bl	802065c <UTIL_TIMER_GetCurrentTime>
 801a2d6:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 801a2d8:	2300      	movs	r3, #0
 801a2da:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 801a2dc:	2301      	movs	r3, #1
 801a2de:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 801a2e0:	2300      	movs	r3, #0
 801a2e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801a2ec:	e0ba      	b.n	801a464 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801a2ee:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a2f2:	4613      	mov	r3, r2
 801a2f4:	005b      	lsls	r3, r3, #1
 801a2f6:	4413      	add	r3, r2
 801a2f8:	00db      	lsls	r3, r3, #3
 801a2fa:	461a      	mov	r2, r3
 801a2fc:	683b      	ldr	r3, [r7, #0]
 801a2fe:	189c      	adds	r4, r3, r2
 801a300:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 801a304:	797a      	ldrb	r2, [r7, #5]
 801a306:	79fd      	ldrb	r5, [r7, #7]
 801a308:	69fb      	ldr	r3, [r7, #28]
 801a30a:	9302      	str	r3, [sp, #8]
 801a30c:	46ec      	mov	ip, sp
 801a30e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801a312:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a316:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a31a:	4633      	mov	r3, r6
 801a31c:	4629      	mov	r1, r5
 801a31e:	4620      	mov	r0, r4
 801a320:	f7ff fe22 	bl	8019f68 <UpdateTimeCredits>
 801a324:	4603      	mov	r3, r0
 801a326:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 801a328:	8afa      	ldrh	r2, [r7, #22]
 801a32a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a32c:	fb02 f303 	mul.w	r3, r2, r3
 801a330:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801a332:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a336:	4613      	mov	r3, r2
 801a338:	005b      	lsls	r3, r3, #1
 801a33a:	4413      	add	r3, r2
 801a33c:	00db      	lsls	r3, r3, #3
 801a33e:	461a      	mov	r2, r3
 801a340:	683b      	ldr	r3, [r7, #0]
 801a342:	4413      	add	r3, r2
 801a344:	68db      	ldr	r3, [r3, #12]
 801a346:	69ba      	ldr	r2, [r7, #24]
 801a348:	429a      	cmp	r2, r3
 801a34a:	d308      	bcc.n	801a35e <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801a34c:	797b      	ldrb	r3, [r7, #5]
 801a34e:	f083 0301 	eor.w	r3, r3, #1
 801a352:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801a354:	2b00      	cmp	r3, #0
 801a356:	d013      	beq.n	801a380 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801a358:	79fb      	ldrb	r3, [r7, #7]
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d010      	beq.n	801a380 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 801a35e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a362:	4613      	mov	r3, r2
 801a364:	005b      	lsls	r3, r3, #1
 801a366:	4413      	add	r3, r2
 801a368:	00db      	lsls	r3, r3, #3
 801a36a:	461a      	mov	r2, r3
 801a36c:	683b      	ldr	r3, [r7, #0]
 801a36e:	4413      	add	r3, r2
 801a370:	2201      	movs	r2, #1
 801a372:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 801a374:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a378:	3301      	adds	r3, #1
 801a37a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801a37e:	e06c      	b.n	801a45a <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 801a380:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a384:	4613      	mov	r3, r2
 801a386:	005b      	lsls	r3, r3, #1
 801a388:	4413      	add	r3, r2
 801a38a:	00db      	lsls	r3, r3, #3
 801a38c:	461a      	mov	r2, r3
 801a38e:	683b      	ldr	r3, [r7, #0]
 801a390:	4413      	add	r3, r2
 801a392:	2200      	movs	r2, #0
 801a394:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 801a396:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a39a:	4613      	mov	r3, r2
 801a39c:	005b      	lsls	r3, r3, #1
 801a39e:	4413      	add	r3, r2
 801a3a0:	00db      	lsls	r3, r3, #3
 801a3a2:	461a      	mov	r2, r3
 801a3a4:	683b      	ldr	r3, [r7, #0]
 801a3a6:	4413      	add	r3, r2
 801a3a8:	691b      	ldr	r3, [r3, #16]
 801a3aa:	69ba      	ldr	r2, [r7, #24]
 801a3ac:	429a      	cmp	r2, r3
 801a3ae:	d215      	bcs.n	801a3dc <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801a3b0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a3b4:	4613      	mov	r3, r2
 801a3b6:	005b      	lsls	r3, r3, #1
 801a3b8:	4413      	add	r3, r2
 801a3ba:	00db      	lsls	r3, r3, #3
 801a3bc:	461a      	mov	r2, r3
 801a3be:	683b      	ldr	r3, [r7, #0]
 801a3c0:	4413      	add	r3, r2
 801a3c2:	68db      	ldr	r3, [r3, #12]
 801a3c4:	69ba      	ldr	r2, [r7, #24]
 801a3c6:	1ad3      	subs	r3, r2, r3
 801a3c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3ca:	4293      	cmp	r3, r2
 801a3cc:	bf28      	it	cs
 801a3ce:	4613      	movcs	r3, r2
 801a3d0:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801a3d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a3d6:	3301      	adds	r3, #1
 801a3d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 801a3dc:	79fb      	ldrb	r3, [r7, #7]
 801a3de:	f083 0301 	eor.w	r3, r3, #1
 801a3e2:	b2db      	uxtb	r3, r3
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d038      	beq.n	801a45a <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 801a3e8:	2300      	movs	r3, #0
 801a3ea:	60fb      	str	r3, [r7, #12]
 801a3ec:	2300      	movs	r3, #0
 801a3ee:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 801a3f0:	8afb      	ldrh	r3, [r7, #22]
 801a3f2:	2b64      	cmp	r3, #100	; 0x64
 801a3f4:	d103      	bne.n	801a3fe <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801a3f6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801a3fa:	60fb      	str	r3, [r7, #12]
 801a3fc:	e009      	b.n	801a412 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801a3fe:	8afb      	ldrh	r3, [r7, #22]
 801a400:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a404:	d103      	bne.n	801a40e <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801a406:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 801a40a:	60fb      	str	r3, [r7, #12]
 801a40c:	e001      	b.n	801a412 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801a40e:	4b1e      	ldr	r3, [pc, #120]	; (801a488 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801a410:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801a412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a414:	4a1c      	ldr	r2, [pc, #112]	; (801a488 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801a416:	4293      	cmp	r3, r2
 801a418:	d90e      	bls.n	801a438 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801a41a:	68fa      	ldr	r2, [r7, #12]
 801a41c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a41e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801a422:	3b30      	subs	r3, #48	; 0x30
 801a424:	4919      	ldr	r1, [pc, #100]	; (801a48c <RegionCommonUpdateBandTimeOff+0x1d8>)
 801a426:	fba1 1303 	umull	r1, r3, r1, r3
 801a42a:	0c1b      	lsrs	r3, r3, #16
 801a42c:	3301      	adds	r3, #1
 801a42e:	4918      	ldr	r1, [pc, #96]	; (801a490 <RegionCommonUpdateBandTimeOff+0x1dc>)
 801a430:	fb01 f303 	mul.w	r3, r1, r3
 801a434:	4413      	add	r3, r2
 801a436:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801a438:	f107 000c 	add.w	r0, r7, #12
 801a43c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a43e:	9300      	str	r3, [sp, #0]
 801a440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a442:	f107 020c 	add.w	r2, r7, #12
 801a446:	ca06      	ldmia	r2, {r1, r2}
 801a448:	f005 fa1b 	bl	801f882 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 801a44c:	f107 030c 	add.w	r3, r7, #12
 801a450:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a454:	f005 fad4 	bl	801fa00 <SysTimeToMs>
 801a458:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801a45a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a45e:	3301      	adds	r3, #1
 801a460:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801a464:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a468:	79bb      	ldrb	r3, [r7, #6]
 801a46a:	429a      	cmp	r2, r3
 801a46c:	f4ff af3f 	bcc.w	801a2ee <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 801a470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a474:	2b00      	cmp	r3, #0
 801a476:	d102      	bne.n	801a47e <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 801a478:	f04f 33ff 	mov.w	r3, #4294967295
 801a47c:	e000      	b.n	801a480 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 801a47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a480:	4618      	mov	r0, r3
 801a482:	372c      	adds	r7, #44	; 0x2c
 801a484:	46bd      	mov	sp, r7
 801a486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a488:	0001ec30 	.word	0x0001ec30
 801a48c:	c22e4507 	.word	0xc22e4507
 801a490:	00015180 	.word	0x00015180

0801a494 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 801a494:	b480      	push	{r7}
 801a496:	b085      	sub	sp, #20
 801a498:	af00      	add	r7, sp, #0
 801a49a:	6078      	str	r0, [r7, #4]
 801a49c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801a49e:	2300      	movs	r3, #0
 801a4a0:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	781b      	ldrb	r3, [r3, #0]
 801a4a6:	2b03      	cmp	r3, #3
 801a4a8:	d13f      	bne.n	801a52a <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	3301      	adds	r3, #1
 801a4ae:	781b      	ldrb	r3, [r3, #0]
 801a4b0:	b25a      	sxtb	r2, r3
 801a4b2:	683b      	ldr	r3, [r7, #0]
 801a4b4:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801a4b6:	683b      	ldr	r3, [r7, #0]
 801a4b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a4bc:	f003 030f 	and.w	r3, r3, #15
 801a4c0:	b25a      	sxtb	r2, r3
 801a4c2:	683b      	ldr	r3, [r7, #0]
 801a4c4:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801a4c6:	683b      	ldr	r3, [r7, #0]
 801a4c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a4cc:	b2db      	uxtb	r3, r3
 801a4ce:	091b      	lsrs	r3, r3, #4
 801a4d0:	b2db      	uxtb	r3, r3
 801a4d2:	b25a      	sxtb	r2, r3
 801a4d4:	683b      	ldr	r3, [r7, #0]
 801a4d6:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	3302      	adds	r3, #2
 801a4dc:	781b      	ldrb	r3, [r3, #0]
 801a4de:	b29a      	uxth	r2, r3
 801a4e0:	683b      	ldr	r3, [r7, #0]
 801a4e2:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 801a4e4:	683b      	ldr	r3, [r7, #0]
 801a4e6:	889b      	ldrh	r3, [r3, #4]
 801a4e8:	b21a      	sxth	r2, r3
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	3303      	adds	r3, #3
 801a4ee:	781b      	ldrb	r3, [r3, #0]
 801a4f0:	021b      	lsls	r3, r3, #8
 801a4f2:	b21b      	sxth	r3, r3
 801a4f4:	4313      	orrs	r3, r2
 801a4f6:	b21b      	sxth	r3, r3
 801a4f8:	b29a      	uxth	r2, r3
 801a4fa:	683b      	ldr	r3, [r7, #0]
 801a4fc:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	791a      	ldrb	r2, [r3, #4]
 801a502:	683b      	ldr	r3, [r7, #0]
 801a504:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801a506:	683b      	ldr	r3, [r7, #0]
 801a508:	781b      	ldrb	r3, [r3, #0]
 801a50a:	091b      	lsrs	r3, r3, #4
 801a50c:	b2db      	uxtb	r3, r3
 801a50e:	f003 0307 	and.w	r3, r3, #7
 801a512:	b2da      	uxtb	r2, r3
 801a514:	683b      	ldr	r3, [r7, #0]
 801a516:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801a518:	683b      	ldr	r3, [r7, #0]
 801a51a:	781b      	ldrb	r3, [r3, #0]
 801a51c:	f003 030f 	and.w	r3, r3, #15
 801a520:	b2da      	uxtb	r2, r3
 801a522:	683b      	ldr	r3, [r7, #0]
 801a524:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801a526:	2305      	movs	r3, #5
 801a528:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801a52a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a52c:	4618      	mov	r0, r3
 801a52e:	3714      	adds	r7, #20
 801a530:	46bd      	mov	sp, r7
 801a532:	bc80      	pop	{r7}
 801a534:	4770      	bx	lr

0801a536 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801a536:	b5b0      	push	{r4, r5, r7, lr}
 801a538:	b088      	sub	sp, #32
 801a53a:	af02      	add	r7, sp, #8
 801a53c:	60f8      	str	r0, [r7, #12]
 801a53e:	60b9      	str	r1, [r7, #8]
 801a540:	607a      	str	r2, [r7, #4]
 801a542:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 801a544:	68fb      	ldr	r3, [r7, #12]
 801a546:	791b      	ldrb	r3, [r3, #4]
 801a548:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801a54a:	68fb      	ldr	r3, [r7, #12]
 801a54c:	799b      	ldrb	r3, [r3, #6]
 801a54e:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 801a550:	68fb      	ldr	r3, [r7, #12]
 801a552:	79db      	ldrb	r3, [r3, #7]
 801a554:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801a556:	68fb      	ldr	r3, [r7, #12]
 801a558:	7a1b      	ldrb	r3, [r3, #8]
 801a55a:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801a55c:	68fb      	ldr	r3, [r7, #12]
 801a55e:	795b      	ldrb	r3, [r3, #5]
 801a560:	f083 0301 	eor.w	r3, r3, #1
 801a564:	b2db      	uxtb	r3, r3
 801a566:	2b00      	cmp	r3, #0
 801a568:	d008      	beq.n	801a57c <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801a56a:	68fb      	ldr	r3, [r7, #12]
 801a56c:	7adb      	ldrb	r3, [r3, #11]
 801a56e:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	7a5b      	ldrb	r3, [r3, #9]
 801a574:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 801a576:	68fb      	ldr	r3, [r7, #12]
 801a578:	7a9b      	ldrb	r3, [r3, #10]
 801a57a:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 801a57c:	7dfb      	ldrb	r3, [r7, #23]
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d04a      	beq.n	801a618 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 801a582:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801a586:	2b0f      	cmp	r3, #15
 801a588:	d103      	bne.n	801a592 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 801a58a:	68fb      	ldr	r3, [r7, #12]
 801a58c:	7a5b      	ldrb	r3, [r3, #9]
 801a58e:	75bb      	strb	r3, [r7, #22]
 801a590:	e01d      	b.n	801a5ce <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801a592:	68fb      	ldr	r3, [r7, #12]
 801a594:	7b18      	ldrb	r0, [r3, #12]
 801a596:	68fb      	ldr	r3, [r7, #12]
 801a598:	6919      	ldr	r1, [r3, #16]
 801a59a:	68fb      	ldr	r3, [r7, #12]
 801a59c:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801a5a0:	68fb      	ldr	r3, [r7, #12]
 801a5a2:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801a5a6:	68fa      	ldr	r2, [r7, #12]
 801a5a8:	6992      	ldr	r2, [r2, #24]
 801a5aa:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801a5ae:	9201      	str	r2, [sp, #4]
 801a5b0:	9300      	str	r3, [sp, #0]
 801a5b2:	462b      	mov	r3, r5
 801a5b4:	4622      	mov	r2, r4
 801a5b6:	f7ff fd3a 	bl	801a02e <RegionCommonChanVerifyDr>
 801a5ba:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 801a5bc:	f083 0301 	eor.w	r3, r3, #1
 801a5c0:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d003      	beq.n	801a5ce <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 801a5c6:	7dfb      	ldrb	r3, [r7, #23]
 801a5c8:	f023 0302 	bic.w	r3, r3, #2
 801a5cc:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801a5ce:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801a5d2:	2b0f      	cmp	r3, #15
 801a5d4:	d103      	bne.n	801a5de <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 801a5d6:	68fb      	ldr	r3, [r7, #12]
 801a5d8:	7a9b      	ldrb	r3, [r3, #10]
 801a5da:	757b      	strb	r3, [r7, #21]
 801a5dc:	e01c      	b.n	801a618 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	f993 101d 	ldrsb.w	r1, [r3, #29]
 801a5e4:	68fb      	ldr	r3, [r7, #12]
 801a5e6:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801a5ea:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801a5ee:	4618      	mov	r0, r3
 801a5f0:	f7ff fd8f 	bl	801a112 <RegionCommonValueInRange>
 801a5f4:	4603      	mov	r3, r0
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d10e      	bne.n	801a618 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	f993 301d 	ldrsb.w	r3, [r3, #29]
 801a600:	f997 2015 	ldrsb.w	r2, [r7, #21]
 801a604:	429a      	cmp	r2, r3
 801a606:	da03      	bge.n	801a610 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801a608:	68fb      	ldr	r3, [r7, #12]
 801a60a:	7f5b      	ldrb	r3, [r3, #29]
 801a60c:	757b      	strb	r3, [r7, #21]
 801a60e:	e003      	b.n	801a618 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801a610:	7dfb      	ldrb	r3, [r7, #23]
 801a612:	f023 0304 	bic.w	r3, r3, #4
 801a616:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801a618:	7dfb      	ldrb	r3, [r7, #23]
 801a61a:	2b07      	cmp	r3, #7
 801a61c:	d105      	bne.n	801a62a <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801a61e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d101      	bne.n	801a62a <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 801a626:	2301      	movs	r3, #1
 801a628:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801a62a:	68bb      	ldr	r3, [r7, #8]
 801a62c:	7dba      	ldrb	r2, [r7, #22]
 801a62e:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	7d7a      	ldrb	r2, [r7, #21]
 801a634:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801a636:	7d3a      	ldrb	r2, [r7, #20]
 801a638:	683b      	ldr	r3, [r7, #0]
 801a63a:	701a      	strb	r2, [r3, #0]

    return status;
 801a63c:	7dfb      	ldrb	r3, [r7, #23]
}
 801a63e:	4618      	mov	r0, r3
 801a640:	3718      	adds	r7, #24
 801a642:	46bd      	mov	sp, r7
 801a644:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a648 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 801a648:	b480      	push	{r7}
 801a64a:	b083      	sub	sp, #12
 801a64c:	af00      	add	r7, sp, #0
 801a64e:	4603      	mov	r3, r0
 801a650:	6039      	str	r1, [r7, #0]
 801a652:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 801a654:	79fb      	ldrb	r3, [r7, #7]
 801a656:	4a06      	ldr	r2, [pc, #24]	; (801a670 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 801a658:	fa02 f303 	lsl.w	r3, r2, r3
 801a65c:	461a      	mov	r2, r3
 801a65e:	683b      	ldr	r3, [r7, #0]
 801a660:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801a664:	4618      	mov	r0, r3
 801a666:	370c      	adds	r7, #12
 801a668:	46bd      	mov	sp, r7
 801a66a:	bc80      	pop	{r7}
 801a66c:	4770      	bx	lr
 801a66e:	bf00      	nop
 801a670:	000f4240 	.word	0x000f4240

0801a674 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 801a674:	b480      	push	{r7}
 801a676:	b083      	sub	sp, #12
 801a678:	af00      	add	r7, sp, #0
 801a67a:	4603      	mov	r3, r0
 801a67c:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 801a67e:	79fb      	ldrb	r3, [r7, #7]
 801a680:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a684:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801a688:	4618      	mov	r0, r3
 801a68a:	370c      	adds	r7, #12
 801a68c:	46bd      	mov	sp, r7
 801a68e:	bc80      	pop	{r7}
 801a690:	4770      	bx	lr
	...

0801a694 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 801a694:	b480      	push	{r7}
 801a696:	b085      	sub	sp, #20
 801a698:	af00      	add	r7, sp, #0
 801a69a:	60f8      	str	r0, [r7, #12]
 801a69c:	607a      	str	r2, [r7, #4]
 801a69e:	603b      	str	r3, [r7, #0]
 801a6a0:	460b      	mov	r3, r1
 801a6a2:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 801a6a4:	7afa      	ldrb	r2, [r7, #11]
 801a6a6:	7afb      	ldrb	r3, [r7, #11]
 801a6a8:	3b04      	subs	r3, #4
 801a6aa:	4619      	mov	r1, r3
 801a6ac:	68fb      	ldr	r3, [r7, #12]
 801a6ae:	fb03 f101 	mul.w	r1, r3, r1
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a6b8:	fb00 f303 	mul.w	r3, r0, r3
 801a6bc:	440b      	add	r3, r1
 801a6be:	005b      	lsls	r3, r3, #1
 801a6c0:	2b00      	cmp	r3, #0
 801a6c2:	d013      	beq.n	801a6ec <RegionCommonComputeRxWindowParameters+0x58>
 801a6c4:	7afb      	ldrb	r3, [r7, #11]
 801a6c6:	3b04      	subs	r3, #4
 801a6c8:	4619      	mov	r1, r3
 801a6ca:	68fb      	ldr	r3, [r7, #12]
 801a6cc:	fb03 f101 	mul.w	r1, r3, r1
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a6d6:	fb00 f303 	mul.w	r3, r0, r3
 801a6da:	440b      	add	r3, r1
 801a6dc:	0059      	lsls	r1, r3, #1
 801a6de:	68fb      	ldr	r3, [r7, #12]
 801a6e0:	440b      	add	r3, r1
 801a6e2:	1e59      	subs	r1, r3, #1
 801a6e4:	68fb      	ldr	r3, [r7, #12]
 801a6e6:	fbb1 f3f3 	udiv	r3, r1, r3
 801a6ea:	e00f      	b.n	801a70c <RegionCommonComputeRxWindowParameters+0x78>
 801a6ec:	7afb      	ldrb	r3, [r7, #11]
 801a6ee:	3b04      	subs	r3, #4
 801a6f0:	4619      	mov	r1, r3
 801a6f2:	68fb      	ldr	r3, [r7, #12]
 801a6f4:	fb03 f101 	mul.w	r1, r3, r1
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a6fe:	fb00 f303 	mul.w	r3, r0, r3
 801a702:	440b      	add	r3, r1
 801a704:	0059      	lsls	r1, r3, #1
 801a706:	68fb      	ldr	r3, [r7, #12]
 801a708:	fbb1 f3f3 	udiv	r3, r1, r3
 801a70c:	429a      	cmp	r2, r3
 801a70e:	bf38      	it	cc
 801a710:	461a      	movcc	r2, r3
 801a712:	69bb      	ldr	r3, [r7, #24]
 801a714:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801a716:	68fb      	ldr	r3, [r7, #12]
 801a718:	009b      	lsls	r3, r3, #2
 801a71a:	4619      	mov	r1, r3
 801a71c:	69bb      	ldr	r3, [r7, #24]
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	68fa      	ldr	r2, [r7, #12]
 801a722:	fb02 f303 	mul.w	r3, r2, r3
 801a726:	2b00      	cmp	r3, #0
 801a728:	d007      	beq.n	801a73a <RegionCommonComputeRxWindowParameters+0xa6>
 801a72a:	69bb      	ldr	r3, [r7, #24]
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	68fa      	ldr	r2, [r7, #12]
 801a730:	fb02 f303 	mul.w	r3, r2, r3
 801a734:	3301      	adds	r3, #1
 801a736:	085b      	lsrs	r3, r3, #1
 801a738:	e005      	b.n	801a746 <RegionCommonComputeRxWindowParameters+0xb2>
 801a73a:	69bb      	ldr	r3, [r7, #24]
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	68fa      	ldr	r2, [r7, #12]
 801a740:	fb02 f303 	mul.w	r3, r2, r3
 801a744:	085b      	lsrs	r3, r3, #1
 801a746:	1acb      	subs	r3, r1, r3
 801a748:	683a      	ldr	r2, [r7, #0]
 801a74a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a74e:	fb01 f202 	mul.w	r2, r1, r2
 801a752:	1a9b      	subs	r3, r3, r2
 801a754:	2b00      	cmp	r3, #0
 801a756:	dd27      	ble.n	801a7a8 <RegionCommonComputeRxWindowParameters+0x114>
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	009b      	lsls	r3, r3, #2
 801a75c:	4619      	mov	r1, r3
 801a75e:	69bb      	ldr	r3, [r7, #24]
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	68fa      	ldr	r2, [r7, #12]
 801a764:	fb02 f303 	mul.w	r3, r2, r3
 801a768:	2b00      	cmp	r3, #0
 801a76a:	d007      	beq.n	801a77c <RegionCommonComputeRxWindowParameters+0xe8>
 801a76c:	69bb      	ldr	r3, [r7, #24]
 801a76e:	681b      	ldr	r3, [r3, #0]
 801a770:	68fa      	ldr	r2, [r7, #12]
 801a772:	fb02 f303 	mul.w	r3, r2, r3
 801a776:	3301      	adds	r3, #1
 801a778:	085b      	lsrs	r3, r3, #1
 801a77a:	e005      	b.n	801a788 <RegionCommonComputeRxWindowParameters+0xf4>
 801a77c:	69bb      	ldr	r3, [r7, #24]
 801a77e:	681b      	ldr	r3, [r3, #0]
 801a780:	68fa      	ldr	r2, [r7, #12]
 801a782:	fb02 f303 	mul.w	r3, r2, r3
 801a786:	085b      	lsrs	r3, r3, #1
 801a788:	1acb      	subs	r3, r1, r3
 801a78a:	683a      	ldr	r2, [r7, #0]
 801a78c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a790:	fb01 f202 	mul.w	r2, r1, r2
 801a794:	1a9b      	subs	r3, r3, r2
 801a796:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 801a79a:	4a19      	ldr	r2, [pc, #100]	; (801a800 <RegionCommonComputeRxWindowParameters+0x16c>)
 801a79c:	fb82 1203 	smull	r1, r2, r2, r3
 801a7a0:	1192      	asrs	r2, r2, #6
 801a7a2:	17db      	asrs	r3, r3, #31
 801a7a4:	1ad3      	subs	r3, r2, r3
 801a7a6:	e024      	b.n	801a7f2 <RegionCommonComputeRxWindowParameters+0x15e>
 801a7a8:	68fb      	ldr	r3, [r7, #12]
 801a7aa:	009b      	lsls	r3, r3, #2
 801a7ac:	4619      	mov	r1, r3
 801a7ae:	69bb      	ldr	r3, [r7, #24]
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	68fa      	ldr	r2, [r7, #12]
 801a7b4:	fb02 f303 	mul.w	r3, r2, r3
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d007      	beq.n	801a7cc <RegionCommonComputeRxWindowParameters+0x138>
 801a7bc:	69bb      	ldr	r3, [r7, #24]
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	68fa      	ldr	r2, [r7, #12]
 801a7c2:	fb02 f303 	mul.w	r3, r2, r3
 801a7c6:	3301      	adds	r3, #1
 801a7c8:	085b      	lsrs	r3, r3, #1
 801a7ca:	e005      	b.n	801a7d8 <RegionCommonComputeRxWindowParameters+0x144>
 801a7cc:	69bb      	ldr	r3, [r7, #24]
 801a7ce:	681b      	ldr	r3, [r3, #0]
 801a7d0:	68fa      	ldr	r2, [r7, #12]
 801a7d2:	fb02 f303 	mul.w	r3, r2, r3
 801a7d6:	085b      	lsrs	r3, r3, #1
 801a7d8:	1acb      	subs	r3, r1, r3
 801a7da:	683a      	ldr	r2, [r7, #0]
 801a7dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a7e0:	fb01 f202 	mul.w	r2, r1, r2
 801a7e4:	1a9b      	subs	r3, r3, r2
 801a7e6:	4a06      	ldr	r2, [pc, #24]	; (801a800 <RegionCommonComputeRxWindowParameters+0x16c>)
 801a7e8:	fb82 1203 	smull	r1, r2, r2, r3
 801a7ec:	1192      	asrs	r2, r2, #6
 801a7ee:	17db      	asrs	r3, r3, #31
 801a7f0:	1ad3      	subs	r3, r2, r3
 801a7f2:	69fa      	ldr	r2, [r7, #28]
 801a7f4:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801a7f6:	bf00      	nop
 801a7f8:	3714      	adds	r7, #20
 801a7fa:	46bd      	mov	sp, r7
 801a7fc:	bc80      	pop	{r7}
 801a7fe:	4770      	bx	lr
 801a800:	10624dd3 	.word	0x10624dd3

0801a804 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 801a804:	b580      	push	{r7, lr}
 801a806:	b086      	sub	sp, #24
 801a808:	af00      	add	r7, sp, #0
 801a80a:	4603      	mov	r3, r0
 801a80c:	60b9      	str	r1, [r7, #8]
 801a80e:	607a      	str	r2, [r7, #4]
 801a810:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801a812:	2300      	movs	r3, #0
 801a814:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801a816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a81a:	005b      	lsls	r3, r3, #1
 801a81c:	4618      	mov	r0, r3
 801a81e:	f7e6 fa37 	bl	8000c90 <__aeabi_ui2f>
 801a822:	4603      	mov	r3, r0
 801a824:	4619      	mov	r1, r3
 801a826:	68b8      	ldr	r0, [r7, #8]
 801a828:	f7e6 f980 	bl	8000b2c <__aeabi_fsub>
 801a82c:	4603      	mov	r3, r0
 801a82e:	6879      	ldr	r1, [r7, #4]
 801a830:	4618      	mov	r0, r3
 801a832:	f7e6 f97b 	bl	8000b2c <__aeabi_fsub>
 801a836:	4603      	mov	r3, r0
 801a838:	4618      	mov	r0, r3
 801a83a:	f7e5 fe09 	bl	8000450 <__aeabi_f2d>
 801a83e:	4602      	mov	r2, r0
 801a840:	460b      	mov	r3, r1
 801a842:	4610      	mov	r0, r2
 801a844:	4619      	mov	r1, r3
 801a846:	f006 fb07 	bl	8020e58 <floor>
 801a84a:	4602      	mov	r2, r0
 801a84c:	460b      	mov	r3, r1
 801a84e:	4610      	mov	r0, r2
 801a850:	4619      	mov	r1, r3
 801a852:	f7e6 f8ef 	bl	8000a34 <__aeabi_d2iz>
 801a856:	4603      	mov	r3, r0
 801a858:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801a85a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a85e:	4618      	mov	r0, r3
 801a860:	3718      	adds	r7, #24
 801a862:	46bd      	mov	sp, r7
 801a864:	bd80      	pop	{r7, pc}
	...

0801a868 <RegionCommonRxBeaconSetup>:

void RegionCommonRxBeaconSetup( RegionCommonRxBeaconSetupParams_t* rxBeaconSetupParams )
{
 801a868:	b5b0      	push	{r4, r5, r7, lr}
 801a86a:	b08e      	sub	sp, #56	; 0x38
 801a86c:	af0a      	add	r7, sp, #40	; 0x28
 801a86e:	6078      	str	r0, [r7, #4]
    bool rxContinuous = true;
 801a870:	2301      	movs	r3, #1
 801a872:	73fb      	strb	r3, [r7, #15]
    uint8_t datarate;

    // Set the radio into sleep mode
    Radio.Sleep( );
 801a874:	4b29      	ldr	r3, [pc, #164]	; (801a91c <RegionCommonRxBeaconSetup+0xb4>)
 801a876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a878:	4798      	blx	r3

    // Setup frequency and payload length
    Radio.SetChannel( rxBeaconSetupParams->Frequency );
 801a87a:	4b28      	ldr	r3, [pc, #160]	; (801a91c <RegionCommonRxBeaconSetup+0xb4>)
 801a87c:	68db      	ldr	r3, [r3, #12]
 801a87e:	687a      	ldr	r2, [r7, #4]
 801a880:	6852      	ldr	r2, [r2, #4]
 801a882:	4610      	mov	r0, r2
 801a884:	4798      	blx	r3
    Radio.SetMaxPayloadLength( MODEM_LORA, rxBeaconSetupParams->BeaconSize );
 801a886:	4b25      	ldr	r3, [pc, #148]	; (801a91c <RegionCommonRxBeaconSetup+0xb4>)
 801a888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a88a:	687a      	ldr	r2, [r7, #4]
 801a88c:	7a12      	ldrb	r2, [r2, #8]
 801a88e:	4611      	mov	r1, r2
 801a890:	2001      	movs	r0, #1
 801a892:	4798      	blx	r3

    // Check the RX continuous mode
    if( rxBeaconSetupParams->RxTime != 0 )
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	68db      	ldr	r3, [r3, #12]
 801a898:	2b00      	cmp	r3, #0
 801a89a:	d001      	beq.n	801a8a0 <RegionCommonRxBeaconSetup+0x38>
    {
        rxContinuous = false;
 801a89c:	2300      	movs	r3, #0
 801a89e:	73fb      	strb	r3, [r7, #15]
    }

    // Get region specific datarate
    datarate = rxBeaconSetupParams->Datarates[rxBeaconSetupParams->BeaconDatarate];
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	687a      	ldr	r2, [r7, #4]
 801a8a6:	7a52      	ldrb	r2, [r2, #9]
 801a8a8:	4413      	add	r3, r2
 801a8aa:	781b      	ldrb	r3, [r3, #0]
 801a8ac:	73bb      	strb	r3, [r7, #14]

    // Setup radio
    Radio.SetRxConfig( MODEM_LORA, rxBeaconSetupParams->BeaconChannelBW, datarate,
 801a8ae:	4b1b      	ldr	r3, [pc, #108]	; (801a91c <RegionCommonRxBeaconSetup+0xb4>)
 801a8b0:	699c      	ldr	r4, [r3, #24]
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	7a9b      	ldrb	r3, [r3, #10]
 801a8b6:	461d      	mov	r5, r3
 801a8b8:	7bb8      	ldrb	r0, [r7, #14]
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	8a1b      	ldrh	r3, [r3, #16]
 801a8be:	687a      	ldr	r2, [r7, #4]
 801a8c0:	7a12      	ldrb	r2, [r2, #8]
 801a8c2:	7bf9      	ldrb	r1, [r7, #15]
 801a8c4:	9109      	str	r1, [sp, #36]	; 0x24
 801a8c6:	2100      	movs	r1, #0
 801a8c8:	9108      	str	r1, [sp, #32]
 801a8ca:	2100      	movs	r1, #0
 801a8cc:	9107      	str	r1, [sp, #28]
 801a8ce:	2100      	movs	r1, #0
 801a8d0:	9106      	str	r1, [sp, #24]
 801a8d2:	2100      	movs	r1, #0
 801a8d4:	9105      	str	r1, [sp, #20]
 801a8d6:	9204      	str	r2, [sp, #16]
 801a8d8:	2201      	movs	r2, #1
 801a8da:	9203      	str	r2, [sp, #12]
 801a8dc:	9302      	str	r3, [sp, #8]
 801a8de:	230a      	movs	r3, #10
 801a8e0:	9301      	str	r3, [sp, #4]
 801a8e2:	2300      	movs	r3, #0
 801a8e4:	9300      	str	r3, [sp, #0]
 801a8e6:	2301      	movs	r3, #1
 801a8e8:	4602      	mov	r2, r0
 801a8ea:	4629      	mov	r1, r5
 801a8ec:	2001      	movs	r0, #1
 801a8ee:	47a0      	blx	r4
                       1, 0, 10, rxBeaconSetupParams->SymbolTimeout, true, rxBeaconSetupParams->BeaconSize, false, 0, 0, false, rxContinuous );

    Radio.Rx( rxBeaconSetupParams->RxTime );
 801a8f0:	4b0a      	ldr	r3, [pc, #40]	; (801a91c <RegionCommonRxBeaconSetup+0xb4>)
 801a8f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a8f4:	687a      	ldr	r2, [r7, #4]
 801a8f6:	68d2      	ldr	r2, [r2, #12]
 801a8f8:	4610      	mov	r0, r2
 801a8fa:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Beacon parameters */
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	685b      	ldr	r3, [r3, #4]
 801a900:	687a      	ldr	r2, [r7, #4]
 801a902:	7a52      	ldrb	r2, [r2, #9]
 801a904:	9201      	str	r2, [sp, #4]
 801a906:	9300      	str	r3, [sp, #0]
 801a908:	4b05      	ldr	r3, [pc, #20]	; (801a920 <RegionCommonRxBeaconSetup+0xb8>)
 801a90a:	2201      	movs	r2, #1
 801a90c:	2100      	movs	r1, #0
 801a90e:	2002      	movs	r0, #2
 801a910:	f005 ff94 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
    /* ST_WORKAROUND_END */
}
 801a914:	bf00      	nop
 801a916:	3710      	adds	r7, #16
 801a918:	46bd      	mov	sp, r7
 801a91a:	bdb0      	pop	{r4, r5, r7, pc}
 801a91c:	08021d00 	.word	0x08021d00
 801a920:	08021704 	.word	0x08021704

0801a924 <RegionCommonCountNbOfEnabledChannels>:

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801a924:	b590      	push	{r4, r7, lr}
 801a926:	b087      	sub	sp, #28
 801a928:	af00      	add	r7, sp, #0
 801a92a:	60f8      	str	r0, [r7, #12]
 801a92c:	60b9      	str	r1, [r7, #8]
 801a92e:	607a      	str	r2, [r7, #4]
 801a930:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 801a932:	2300      	movs	r3, #0
 801a934:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 801a936:	2300      	movs	r3, #0
 801a938:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801a93a:	2300      	movs	r3, #0
 801a93c:	757b      	strb	r3, [r7, #21]
 801a93e:	2300      	movs	r3, #0
 801a940:	753b      	strb	r3, [r7, #20]
 801a942:	e09c      	b.n	801aa7e <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801a944:	2300      	movs	r3, #0
 801a946:	74fb      	strb	r3, [r7, #19]
 801a948:	e08f      	b.n	801aa6a <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	685a      	ldr	r2, [r3, #4]
 801a94e:	7d3b      	ldrb	r3, [r7, #20]
 801a950:	005b      	lsls	r3, r3, #1
 801a952:	4413      	add	r3, r2
 801a954:	881b      	ldrh	r3, [r3, #0]
 801a956:	461a      	mov	r2, r3
 801a958:	7cfb      	ldrb	r3, [r7, #19]
 801a95a:	fa42 f303 	asr.w	r3, r2, r3
 801a95e:	f003 0301 	and.w	r3, r3, #1
 801a962:	2b00      	cmp	r3, #0
 801a964:	d07e      	beq.n	801aa64 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801a966:	68fb      	ldr	r3, [r7, #12]
 801a968:	689a      	ldr	r2, [r3, #8]
 801a96a:	7d79      	ldrb	r1, [r7, #21]
 801a96c:	7cfb      	ldrb	r3, [r7, #19]
 801a96e:	440b      	add	r3, r1
 801a970:	4619      	mov	r1, r3
 801a972:	460b      	mov	r3, r1
 801a974:	005b      	lsls	r3, r3, #1
 801a976:	440b      	add	r3, r1
 801a978:	009b      	lsls	r3, r3, #2
 801a97a:	4413      	add	r3, r2
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d06b      	beq.n	801aa5a <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801a982:	68fb      	ldr	r3, [r7, #12]
 801a984:	781b      	ldrb	r3, [r3, #0]
 801a986:	f083 0301 	eor.w	r3, r3, #1
 801a98a:	b2db      	uxtb	r3, r3
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	d011      	beq.n	801a9b4 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801a990:	68fb      	ldr	r3, [r7, #12]
 801a992:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801a994:	2b00      	cmp	r3, #0
 801a996:	d00d      	beq.n	801a9b4 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801a998:	68fb      	ldr	r3, [r7, #12]
 801a99a:	695a      	ldr	r2, [r3, #20]
 801a99c:	7d3b      	ldrb	r3, [r7, #20]
 801a99e:	005b      	lsls	r3, r3, #1
 801a9a0:	4413      	add	r3, r2
 801a9a2:	881b      	ldrh	r3, [r3, #0]
 801a9a4:	461a      	mov	r2, r3
 801a9a6:	7cfb      	ldrb	r3, [r7, #19]
 801a9a8:	fa42 f303 	asr.w	r3, r2, r3
 801a9ac:	f003 0301 	and.w	r3, r3, #1
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	d054      	beq.n	801aa5e <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801a9b4:	68fb      	ldr	r3, [r7, #12]
 801a9b6:	785b      	ldrb	r3, [r3, #1]
 801a9b8:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801a9ba:	68fb      	ldr	r3, [r7, #12]
 801a9bc:	689a      	ldr	r2, [r3, #8]
 801a9be:	7d79      	ldrb	r1, [r7, #21]
 801a9c0:	7cfb      	ldrb	r3, [r7, #19]
 801a9c2:	440b      	add	r3, r1
 801a9c4:	4619      	mov	r1, r3
 801a9c6:	460b      	mov	r3, r1
 801a9c8:	005b      	lsls	r3, r3, #1
 801a9ca:	440b      	add	r3, r1
 801a9cc:	009b      	lsls	r3, r3, #2
 801a9ce:	4413      	add	r3, r2
 801a9d0:	7a1b      	ldrb	r3, [r3, #8]
 801a9d2:	f343 0303 	sbfx	r3, r3, #0, #4
 801a9d6:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801a9d8:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	689a      	ldr	r2, [r3, #8]
 801a9de:	7d79      	ldrb	r1, [r7, #21]
 801a9e0:	7cfb      	ldrb	r3, [r7, #19]
 801a9e2:	440b      	add	r3, r1
 801a9e4:	4619      	mov	r1, r3
 801a9e6:	460b      	mov	r3, r1
 801a9e8:	005b      	lsls	r3, r3, #1
 801a9ea:	440b      	add	r3, r1
 801a9ec:	009b      	lsls	r3, r3, #2
 801a9ee:	4413      	add	r3, r2
 801a9f0:	7a1b      	ldrb	r3, [r3, #8]
 801a9f2:	f343 1303 	sbfx	r3, r3, #4, #4
 801a9f6:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801a9f8:	461a      	mov	r2, r3
 801a9fa:	4621      	mov	r1, r4
 801a9fc:	f7ff fb89 	bl	801a112 <RegionCommonValueInRange>
 801aa00:	4603      	mov	r3, r0
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d02d      	beq.n	801aa62 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	68da      	ldr	r2, [r3, #12]
 801aa0a:	68fb      	ldr	r3, [r7, #12]
 801aa0c:	6899      	ldr	r1, [r3, #8]
 801aa0e:	7d78      	ldrb	r0, [r7, #21]
 801aa10:	7cfb      	ldrb	r3, [r7, #19]
 801aa12:	4403      	add	r3, r0
 801aa14:	4618      	mov	r0, r3
 801aa16:	4603      	mov	r3, r0
 801aa18:	005b      	lsls	r3, r3, #1
 801aa1a:	4403      	add	r3, r0
 801aa1c:	009b      	lsls	r3, r3, #2
 801aa1e:	440b      	add	r3, r1
 801aa20:	7a5b      	ldrb	r3, [r3, #9]
 801aa22:	4619      	mov	r1, r3
 801aa24:	460b      	mov	r3, r1
 801aa26:	005b      	lsls	r3, r3, #1
 801aa28:	440b      	add	r3, r1
 801aa2a:	00db      	lsls	r3, r3, #3
 801aa2c:	4413      	add	r3, r2
 801aa2e:	7d1b      	ldrb	r3, [r3, #20]
 801aa30:	f083 0301 	eor.w	r3, r3, #1
 801aa34:	b2db      	uxtb	r3, r3
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d003      	beq.n	801aa42 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 801aa3a:	7dbb      	ldrb	r3, [r7, #22]
 801aa3c:	3301      	adds	r3, #1
 801aa3e:	75bb      	strb	r3, [r7, #22]
                    continue;
 801aa40:	e010      	b.n	801aa64 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 801aa42:	7dfb      	ldrb	r3, [r7, #23]
 801aa44:	1c5a      	adds	r2, r3, #1
 801aa46:	75fa      	strb	r2, [r7, #23]
 801aa48:	461a      	mov	r2, r3
 801aa4a:	68bb      	ldr	r3, [r7, #8]
 801aa4c:	4413      	add	r3, r2
 801aa4e:	7d79      	ldrb	r1, [r7, #21]
 801aa50:	7cfa      	ldrb	r2, [r7, #19]
 801aa52:	440a      	add	r2, r1
 801aa54:	b2d2      	uxtb	r2, r2
 801aa56:	701a      	strb	r2, [r3, #0]
 801aa58:	e004      	b.n	801aa64 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801aa5a:	bf00      	nop
 801aa5c:	e002      	b.n	801aa64 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 801aa5e:	bf00      	nop
 801aa60:	e000      	b.n	801aa64 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801aa62:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801aa64:	7cfb      	ldrb	r3, [r7, #19]
 801aa66:	3301      	adds	r3, #1
 801aa68:	74fb      	strb	r3, [r7, #19]
 801aa6a:	7cfb      	ldrb	r3, [r7, #19]
 801aa6c:	2b0f      	cmp	r3, #15
 801aa6e:	f67f af6c 	bls.w	801a94a <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801aa72:	7d7b      	ldrb	r3, [r7, #21]
 801aa74:	3310      	adds	r3, #16
 801aa76:	757b      	strb	r3, [r7, #21]
 801aa78:	7d3b      	ldrb	r3, [r7, #20]
 801aa7a:	3301      	adds	r3, #1
 801aa7c:	753b      	strb	r3, [r7, #20]
 801aa7e:	7d7b      	ldrb	r3, [r7, #21]
 801aa80:	b29a      	uxth	r2, r3
 801aa82:	68fb      	ldr	r3, [r7, #12]
 801aa84:	8a1b      	ldrh	r3, [r3, #16]
 801aa86:	429a      	cmp	r2, r3
 801aa88:	f4ff af5c 	bcc.w	801a944 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	7dfa      	ldrb	r2, [r7, #23]
 801aa90:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801aa92:	683b      	ldr	r3, [r7, #0]
 801aa94:	7dba      	ldrb	r2, [r7, #22]
 801aa96:	701a      	strb	r2, [r3, #0]
}
 801aa98:	bf00      	nop
 801aa9a:	371c      	adds	r7, #28
 801aa9c:	46bd      	mov	sp, r7
 801aa9e:	bd90      	pop	{r4, r7, pc}

0801aaa0 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801aaa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aaa2:	b08b      	sub	sp, #44	; 0x2c
 801aaa4:	af04      	add	r7, sp, #16
 801aaa6:	60f8      	str	r0, [r7, #12]
 801aaa8:	60b9      	str	r1, [r7, #8]
 801aaaa:	607a      	str	r2, [r7, #4]
 801aaac:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801aaae:	68fb      	ldr	r3, [r7, #12]
 801aab0:	685b      	ldr	r3, [r3, #4]
 801aab2:	4618      	mov	r0, r3
 801aab4:	f005 fde4 	bl	8020680 <UTIL_TIMER_GetElapsedTime>
 801aab8:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801aaba:	68fb      	ldr	r3, [r7, #12]
 801aabc:	681a      	ldr	r2, [r3, #0]
 801aabe:	697b      	ldr	r3, [r7, #20]
 801aac0:	1ad2      	subs	r2, r2, r3
 801aac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aac4:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 801aac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aac8:	2201      	movs	r2, #1
 801aaca:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801aacc:	683b      	ldr	r3, [r7, #0]
 801aace:	2200      	movs	r2, #0
 801aad0:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801aad2:	68fb      	ldr	r3, [r7, #12]
 801aad4:	685b      	ldr	r3, [r3, #4]
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d004      	beq.n	801aae4 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801aada:	68fb      	ldr	r3, [r7, #12]
 801aadc:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801aade:	697a      	ldr	r2, [r7, #20]
 801aae0:	429a      	cmp	r2, r3
 801aae2:	d32b      	bcc.n	801ab3c <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801aae4:	68bb      	ldr	r3, [r7, #8]
 801aae6:	2200      	movs	r2, #0
 801aae8:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801aaea:	68fb      	ldr	r3, [r7, #12]
 801aaec:	69db      	ldr	r3, [r3, #28]
 801aaee:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801aaf0:	68fb      	ldr	r3, [r7, #12]
 801aaf2:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801aaf4:	68dd      	ldr	r5, [r3, #12]
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	7a5e      	ldrb	r6, [r3, #9]
 801aafa:	68fb      	ldr	r3, [r7, #12]
 801aafc:	f893 c008 	ldrb.w	ip, [r3, #8]
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	7d1b      	ldrb	r3, [r3, #20]
 801ab04:	68fa      	ldr	r2, [r7, #12]
 801ab06:	6992      	ldr	r2, [r2, #24]
 801ab08:	9203      	str	r2, [sp, #12]
 801ab0a:	68fa      	ldr	r2, [r7, #12]
 801ab0c:	f10d 0e04 	add.w	lr, sp, #4
 801ab10:	320c      	adds	r2, #12
 801ab12:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ab16:	e88e 0003 	stmia.w	lr, {r0, r1}
 801ab1a:	9300      	str	r3, [sp, #0]
 801ab1c:	4663      	mov	r3, ip
 801ab1e:	4632      	mov	r2, r6
 801ab20:	4629      	mov	r1, r5
 801ab22:	4620      	mov	r0, r4
 801ab24:	f7ff fbc6 	bl	801a2b4 <RegionCommonUpdateBandTimeOff>
 801ab28:	4602      	mov	r2, r0
 801ab2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab2c:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 801ab2e:	68fb      	ldr	r3, [r7, #12]
 801ab30:	69d8      	ldr	r0, [r3, #28]
 801ab32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab34:	683a      	ldr	r2, [r7, #0]
 801ab36:	6879      	ldr	r1, [r7, #4]
 801ab38:	f7ff fef4 	bl	801a924 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801ab3c:	683b      	ldr	r3, [r7, #0]
 801ab3e:	781b      	ldrb	r3, [r3, #0]
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	d004      	beq.n	801ab4e <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801ab44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab46:	2200      	movs	r2, #0
 801ab48:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801ab4a:	2300      	movs	r3, #0
 801ab4c:	e006      	b.n	801ab5c <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 801ab4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab50:	781b      	ldrb	r3, [r3, #0]
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	d001      	beq.n	801ab5a <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801ab56:	230b      	movs	r3, #11
 801ab58:	e000      	b.n	801ab5c <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801ab5a:	230c      	movs	r3, #12
    }
}
 801ab5c:	4618      	mov	r0, r3
 801ab5e:	371c      	adds	r7, #28
 801ab60:	46bd      	mov	sp, r7
 801ab62:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ab64 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801ab64:	b5b0      	push	{r4, r5, r7, lr}
 801ab66:	b086      	sub	sp, #24
 801ab68:	af02      	add	r7, sp, #8
 801ab6a:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	781b      	ldrb	r3, [r3, #0]
 801ab70:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	f993 2000 	ldrsb.w	r2, [r3]
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801ab7e:	429a      	cmp	r2, r3
 801ab80:	d103      	bne.n	801ab8a <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801ab88:	e026      	b.n	801abd8 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 801ab8a:	7bfb      	ldrb	r3, [r7, #15]
 801ab8c:	3b01      	subs	r3, #1
 801ab8e:	b2db      	uxtb	r3, r3
 801ab90:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801ab98:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801ab9c:	429a      	cmp	r2, r3
 801ab9e:	d019      	beq.n	801abd4 <RegionCommonGetNextLowerTxDr+0x70>
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	78d8      	ldrb	r0, [r3, #3]
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	6859      	ldr	r1, [r3, #4]
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	f993 5002 	ldrsb.w	r5, [r3, #2]
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801abb4:	687a      	ldr	r2, [r7, #4]
 801abb6:	6892      	ldr	r2, [r2, #8]
 801abb8:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801abbc:	9201      	str	r2, [sp, #4]
 801abbe:	9300      	str	r3, [sp, #0]
 801abc0:	462b      	mov	r3, r5
 801abc2:	4622      	mov	r2, r4
 801abc4:	f7ff fa33 	bl	801a02e <RegionCommonChanVerifyDr>
 801abc8:	4603      	mov	r3, r0
 801abca:	f083 0301 	eor.w	r3, r3, #1
 801abce:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	d1da      	bne.n	801ab8a <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801abd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801abd8:	4618      	mov	r0, r3
 801abda:	3710      	adds	r7, #16
 801abdc:	46bd      	mov	sp, r7
 801abde:	bdb0      	pop	{r4, r5, r7, pc}

0801abe0 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801abe0:	b480      	push	{r7}
 801abe2:	b083      	sub	sp, #12
 801abe4:	af00      	add	r7, sp, #0
 801abe6:	4603      	mov	r3, r0
 801abe8:	460a      	mov	r2, r1
 801abea:	71fb      	strb	r3, [r7, #7]
 801abec:	4613      	mov	r3, r2
 801abee:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801abf0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801abf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801abf8:	4293      	cmp	r3, r2
 801abfa:	bfb8      	it	lt
 801abfc:	4613      	movlt	r3, r2
 801abfe:	b25b      	sxtb	r3, r3
}
 801ac00:	4618      	mov	r0, r3
 801ac02:	370c      	adds	r7, #12
 801ac04:	46bd      	mov	sp, r7
 801ac06:	bc80      	pop	{r7}
 801ac08:	4770      	bx	lr
	...

0801ac0c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801ac0c:	b480      	push	{r7}
 801ac0e:	b083      	sub	sp, #12
 801ac10:	af00      	add	r7, sp, #0
 801ac12:	6078      	str	r0, [r7, #4]
 801ac14:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	009b      	lsls	r3, r3, #2
 801ac1a:	683a      	ldr	r2, [r7, #0]
 801ac1c:	4413      	add	r3, r2
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	4a07      	ldr	r2, [pc, #28]	; (801ac40 <RegionCommonGetBandwidth+0x34>)
 801ac22:	4293      	cmp	r3, r2
 801ac24:	d004      	beq.n	801ac30 <RegionCommonGetBandwidth+0x24>
 801ac26:	4a07      	ldr	r2, [pc, #28]	; (801ac44 <RegionCommonGetBandwidth+0x38>)
 801ac28:	4293      	cmp	r3, r2
 801ac2a:	d003      	beq.n	801ac34 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 801ac2c:	2300      	movs	r3, #0
 801ac2e:	e002      	b.n	801ac36 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 801ac30:	2301      	movs	r3, #1
 801ac32:	e000      	b.n	801ac36 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 801ac34:	2302      	movs	r3, #2
    }
}
 801ac36:	4618      	mov	r0, r3
 801ac38:	370c      	adds	r7, #12
 801ac3a:	46bd      	mov	sp, r7
 801ac3c:	bc80      	pop	{r7}
 801ac3e:	4770      	bx	lr
 801ac40:	0003d090 	.word	0x0003d090
 801ac44:	0007a120 	.word	0x0007a120

0801ac48 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 801ac48:	b580      	push	{r7, lr}
 801ac4a:	b086      	sub	sp, #24
 801ac4c:	af04      	add	r7, sp, #16
 801ac4e:	4603      	mov	r3, r0
 801ac50:	6039      	str	r1, [r7, #0]
 801ac52:	71fb      	strb	r3, [r7, #7]
 801ac54:	4613      	mov	r3, r2
 801ac56:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 801ac58:	79fb      	ldrb	r3, [r7, #7]
 801ac5a:	2b05      	cmp	r3, #5
 801ac5c:	d810      	bhi.n	801ac80 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801ac5e:	79fb      	ldrb	r3, [r7, #7]
 801ac60:	4a0f      	ldr	r2, [pc, #60]	; (801aca0 <RegionCommonRxConfigPrint+0x58>)
 801ac62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ac66:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801ac6a:	9202      	str	r2, [sp, #8]
 801ac6c:	683a      	ldr	r2, [r7, #0]
 801ac6e:	9201      	str	r2, [sp, #4]
 801ac70:	9300      	str	r3, [sp, #0]
 801ac72:	4b0c      	ldr	r3, [pc, #48]	; (801aca4 <RegionCommonRxConfigPrint+0x5c>)
 801ac74:	2201      	movs	r2, #1
 801ac76:	2100      	movs	r1, #0
 801ac78:	2002      	movs	r0, #2
 801ac7a:	f005 fddf 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801ac7e:	e00a      	b.n	801ac96 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801ac80:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ac84:	9301      	str	r3, [sp, #4]
 801ac86:	683b      	ldr	r3, [r7, #0]
 801ac88:	9300      	str	r3, [sp, #0]
 801ac8a:	4b07      	ldr	r3, [pc, #28]	; (801aca8 <RegionCommonRxConfigPrint+0x60>)
 801ac8c:	2201      	movs	r2, #1
 801ac8e:	2100      	movs	r1, #0
 801ac90:	2002      	movs	r0, #2
 801ac92:	f005 fdd3 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
}
 801ac96:	bf00      	nop
 801ac98:	3708      	adds	r7, #8
 801ac9a:	46bd      	mov	sp, r7
 801ac9c:	bd80      	pop	{r7, pc}
 801ac9e:	bf00      	nop
 801aca0:	20000144 	.word	0x20000144
 801aca4:	08021724 	.word	0x08021724
 801aca8:	08021744 	.word	0x08021744

0801acac <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801acac:	b580      	push	{r7, lr}
 801acae:	b084      	sub	sp, #16
 801acb0:	af02      	add	r7, sp, #8
 801acb2:	6078      	str	r0, [r7, #4]
 801acb4:	460b      	mov	r3, r1
 801acb6:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801acb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801acbc:	9301      	str	r3, [sp, #4]
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	9300      	str	r3, [sp, #0]
 801acc2:	4b05      	ldr	r3, [pc, #20]	; (801acd8 <RegionCommonTxConfigPrint+0x2c>)
 801acc4:	2201      	movs	r2, #1
 801acc6:	2100      	movs	r1, #0
 801acc8:	2002      	movs	r0, #2
 801acca:	f005 fdb7 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
}
 801acce:	bf00      	nop
 801acd0:	3708      	adds	r7, #8
 801acd2:	46bd      	mov	sp, r7
 801acd4:	bd80      	pop	{r7, pc}
 801acd6:	bf00      	nop
 801acd8:	08021760 	.word	0x08021760

0801acdc <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801acdc:	b580      	push	{r7, lr}
 801acde:	b082      	sub	sp, #8
 801ace0:	af00      	add	r7, sp, #0
 801ace2:	6078      	str	r0, [r7, #4]
 801ace4:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801ace6:	4b2d      	ldr	r3, [pc, #180]	; (801ad9c <VerifyRfFreq+0xc0>)
 801ace8:	6a1b      	ldr	r3, [r3, #32]
 801acea:	6878      	ldr	r0, [r7, #4]
 801acec:	4798      	blx	r3
 801acee:	4603      	mov	r3, r0
 801acf0:	f083 0301 	eor.w	r3, r3, #1
 801acf4:	b2db      	uxtb	r3, r3
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d001      	beq.n	801acfe <VerifyRfFreq+0x22>
    {
        return false;
 801acfa:	2300      	movs	r3, #0
 801acfc:	e04a      	b.n	801ad94 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	4a27      	ldr	r2, [pc, #156]	; (801ada0 <VerifyRfFreq+0xc4>)
 801ad02:	4293      	cmp	r3, r2
 801ad04:	d307      	bcc.n	801ad16 <VerifyRfFreq+0x3a>
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	4a26      	ldr	r2, [pc, #152]	; (801ada4 <VerifyRfFreq+0xc8>)
 801ad0a:	4293      	cmp	r3, r2
 801ad0c:	d803      	bhi.n	801ad16 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801ad0e:	683b      	ldr	r3, [r7, #0]
 801ad10:	2202      	movs	r2, #2
 801ad12:	701a      	strb	r2, [r3, #0]
 801ad14:	e03d      	b.n	801ad92 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	4a22      	ldr	r2, [pc, #136]	; (801ada4 <VerifyRfFreq+0xc8>)
 801ad1a:	4293      	cmp	r3, r2
 801ad1c:	d907      	bls.n	801ad2e <VerifyRfFreq+0x52>
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	4a21      	ldr	r2, [pc, #132]	; (801ada8 <VerifyRfFreq+0xcc>)
 801ad22:	4293      	cmp	r3, r2
 801ad24:	d803      	bhi.n	801ad2e <VerifyRfFreq+0x52>
    {
        *band = 0;
 801ad26:	683b      	ldr	r3, [r7, #0]
 801ad28:	2200      	movs	r2, #0
 801ad2a:	701a      	strb	r2, [r3, #0]
 801ad2c:	e031      	b.n	801ad92 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	4a1d      	ldr	r2, [pc, #116]	; (801ada8 <VerifyRfFreq+0xcc>)
 801ad32:	4293      	cmp	r3, r2
 801ad34:	d907      	bls.n	801ad46 <VerifyRfFreq+0x6a>
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	4a1c      	ldr	r2, [pc, #112]	; (801adac <VerifyRfFreq+0xd0>)
 801ad3a:	4293      	cmp	r3, r2
 801ad3c:	d803      	bhi.n	801ad46 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801ad3e:	683b      	ldr	r3, [r7, #0]
 801ad40:	2201      	movs	r2, #1
 801ad42:	701a      	strb	r2, [r3, #0]
 801ad44:	e025      	b.n	801ad92 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	4a19      	ldr	r2, [pc, #100]	; (801adb0 <VerifyRfFreq+0xd4>)
 801ad4a:	4293      	cmp	r3, r2
 801ad4c:	d907      	bls.n	801ad5e <VerifyRfFreq+0x82>
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	4a18      	ldr	r2, [pc, #96]	; (801adb4 <VerifyRfFreq+0xd8>)
 801ad52:	4293      	cmp	r3, r2
 801ad54:	d803      	bhi.n	801ad5e <VerifyRfFreq+0x82>
    {
        *band = 5;
 801ad56:	683b      	ldr	r3, [r7, #0]
 801ad58:	2205      	movs	r2, #5
 801ad5a:	701a      	strb	r2, [r3, #0]
 801ad5c:	e019      	b.n	801ad92 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	4a15      	ldr	r2, [pc, #84]	; (801adb8 <VerifyRfFreq+0xdc>)
 801ad62:	4293      	cmp	r3, r2
 801ad64:	d907      	bls.n	801ad76 <VerifyRfFreq+0x9a>
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	4a14      	ldr	r2, [pc, #80]	; (801adbc <VerifyRfFreq+0xe0>)
 801ad6a:	4293      	cmp	r3, r2
 801ad6c:	d803      	bhi.n	801ad76 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801ad6e:	683b      	ldr	r3, [r7, #0]
 801ad70:	2203      	movs	r2, #3
 801ad72:	701a      	strb	r2, [r3, #0]
 801ad74:	e00d      	b.n	801ad92 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	4a11      	ldr	r2, [pc, #68]	; (801adc0 <VerifyRfFreq+0xe4>)
 801ad7a:	4293      	cmp	r3, r2
 801ad7c:	d307      	bcc.n	801ad8e <VerifyRfFreq+0xb2>
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	4a10      	ldr	r2, [pc, #64]	; (801adc4 <VerifyRfFreq+0xe8>)
 801ad82:	4293      	cmp	r3, r2
 801ad84:	d803      	bhi.n	801ad8e <VerifyRfFreq+0xb2>
    {
        *band = 4;
 801ad86:	683b      	ldr	r3, [r7, #0]
 801ad88:	2204      	movs	r2, #4
 801ad8a:	701a      	strb	r2, [r3, #0]
 801ad8c:	e001      	b.n	801ad92 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801ad8e:	2300      	movs	r3, #0
 801ad90:	e000      	b.n	801ad94 <VerifyRfFreq+0xb8>
    }
    return true;
 801ad92:	2301      	movs	r3, #1
}
 801ad94:	4618      	mov	r0, r3
 801ad96:	3708      	adds	r7, #8
 801ad98:	46bd      	mov	sp, r7
 801ad9a:	bd80      	pop	{r7, pc}
 801ad9c:	08021d00 	.word	0x08021d00
 801ada0:	337055c0 	.word	0x337055c0
 801ada4:	338eda3f 	.word	0x338eda3f
 801ada8:	33bca100 	.word	0x33bca100
 801adac:	33c5c8c0 	.word	0x33c5c8c0
 801adb0:	33c74f5f 	.word	0x33c74f5f
 801adb4:	33cef080 	.word	0x33cef080
 801adb8:	33d1fdbf 	.word	0x33d1fdbf
 801adbc:	33d5ce50 	.word	0x33d5ce50
 801adc0:	33d691a0 	.word	0x33d691a0
 801adc4:	33db2580 	.word	0x33db2580

0801adc8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801adc8:	b590      	push	{r4, r7, lr}
 801adca:	b08b      	sub	sp, #44	; 0x2c
 801adcc:	af04      	add	r7, sp, #16
 801adce:	4603      	mov	r3, r0
 801add0:	460a      	mov	r2, r1
 801add2:	71fb      	strb	r3, [r7, #7]
 801add4:	4613      	mov	r3, r2
 801add6:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 801add8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801addc:	4a1f      	ldr	r2, [pc, #124]	; (801ae5c <GetTimeOnAir+0x94>)
 801adde:	5cd3      	ldrb	r3, [r2, r3]
 801ade0:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801ade2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ade6:	491e      	ldr	r1, [pc, #120]	; (801ae60 <GetTimeOnAir+0x98>)
 801ade8:	4618      	mov	r0, r3
 801adea:	f7ff ff0f 	bl	801ac0c <RegionCommonGetBandwidth>
 801adee:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 801adf0:	2300      	movs	r3, #0
 801adf2:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 801adf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801adf8:	2b07      	cmp	r3, #7
 801adfa:	d118      	bne.n	801ae2e <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801adfc:	4b19      	ldr	r3, [pc, #100]	; (801ae64 <GetTimeOnAir+0x9c>)
 801adfe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801ae00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ae04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ae08:	fb02 f303 	mul.w	r3, r2, r3
 801ae0c:	4619      	mov	r1, r3
 801ae0e:	88bb      	ldrh	r3, [r7, #4]
 801ae10:	b2db      	uxtb	r3, r3
 801ae12:	2201      	movs	r2, #1
 801ae14:	9203      	str	r2, [sp, #12]
 801ae16:	9302      	str	r3, [sp, #8]
 801ae18:	2300      	movs	r3, #0
 801ae1a:	9301      	str	r3, [sp, #4]
 801ae1c:	2305      	movs	r3, #5
 801ae1e:	9300      	str	r3, [sp, #0]
 801ae20:	2300      	movs	r3, #0
 801ae22:	460a      	mov	r2, r1
 801ae24:	68f9      	ldr	r1, [r7, #12]
 801ae26:	2000      	movs	r0, #0
 801ae28:	47a0      	blx	r4
 801ae2a:	6178      	str	r0, [r7, #20]
 801ae2c:	e011      	b.n	801ae52 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801ae2e:	4b0d      	ldr	r3, [pc, #52]	; (801ae64 <GetTimeOnAir+0x9c>)
 801ae30:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801ae32:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801ae36:	88bb      	ldrh	r3, [r7, #4]
 801ae38:	b2db      	uxtb	r3, r3
 801ae3a:	2101      	movs	r1, #1
 801ae3c:	9103      	str	r1, [sp, #12]
 801ae3e:	9302      	str	r3, [sp, #8]
 801ae40:	2300      	movs	r3, #0
 801ae42:	9301      	str	r3, [sp, #4]
 801ae44:	2308      	movs	r3, #8
 801ae46:	9300      	str	r3, [sp, #0]
 801ae48:	2301      	movs	r3, #1
 801ae4a:	68f9      	ldr	r1, [r7, #12]
 801ae4c:	2001      	movs	r0, #1
 801ae4e:	47a0      	blx	r4
 801ae50:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 801ae52:	697b      	ldr	r3, [r7, #20]
}
 801ae54:	4618      	mov	r0, r3
 801ae56:	371c      	adds	r7, #28
 801ae58:	46bd      	mov	sp, r7
 801ae5a:	bd90      	pop	{r4, r7, pc}
 801ae5c:	08021cc8 	.word	0x08021cc8
 801ae60:	08021cd0 	.word	0x08021cd0
 801ae64:	08021d00 	.word	0x08021d00

0801ae68 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 801ae68:	b580      	push	{r7, lr}
 801ae6a:	b088      	sub	sp, #32
 801ae6c:	af00      	add	r7, sp, #0
 801ae6e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801ae70:	2300      	movs	r3, #0
 801ae72:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	781b      	ldrb	r3, [r3, #0]
 801ae78:	3b01      	subs	r3, #1
 801ae7a:	2b38      	cmp	r3, #56	; 0x38
 801ae7c:	f200 8128 	bhi.w	801b0d0 <RegionEU868GetPhyParam+0x268>
 801ae80:	a201      	add	r2, pc, #4	; (adr r2, 801ae88 <RegionEU868GetPhyParam+0x20>)
 801ae82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae86:	bf00      	nop
 801ae88:	0801af6d 	.word	0x0801af6d
 801ae8c:	0801af73 	.word	0x0801af73
 801ae90:	0801b0d1 	.word	0x0801b0d1
 801ae94:	0801b0d1 	.word	0x0801b0d1
 801ae98:	0801b0d1 	.word	0x0801b0d1
 801ae9c:	0801af79 	.word	0x0801af79
 801aea0:	0801b0d1 	.word	0x0801b0d1
 801aea4:	0801afb3 	.word	0x0801afb3
 801aea8:	0801b0d1 	.word	0x0801b0d1
 801aeac:	0801afb9 	.word	0x0801afb9
 801aeb0:	0801afbf 	.word	0x0801afbf
 801aeb4:	0801afc5 	.word	0x0801afc5
 801aeb8:	0801afcb 	.word	0x0801afcb
 801aebc:	0801afdb 	.word	0x0801afdb
 801aec0:	0801afeb 	.word	0x0801afeb
 801aec4:	0801aff1 	.word	0x0801aff1
 801aec8:	0801aff9 	.word	0x0801aff9
 801aecc:	0801b001 	.word	0x0801b001
 801aed0:	0801b009 	.word	0x0801b009
 801aed4:	0801b011 	.word	0x0801b011
 801aed8:	0801b019 	.word	0x0801b019
 801aedc:	0801b021 	.word	0x0801b021
 801aee0:	0801b035 	.word	0x0801b035
 801aee4:	0801b03b 	.word	0x0801b03b
 801aee8:	0801b041 	.word	0x0801b041
 801aeec:	0801b047 	.word	0x0801b047
 801aef0:	0801b053 	.word	0x0801b053
 801aef4:	0801b05f 	.word	0x0801b05f
 801aef8:	0801b065 	.word	0x0801b065
 801aefc:	0801b06d 	.word	0x0801b06d
 801af00:	0801b073 	.word	0x0801b073
 801af04:	0801b079 	.word	0x0801b079
 801af08:	0801b081 	.word	0x0801b081
 801af0c:	0801af7f 	.word	0x0801af7f
 801af10:	0801b0d1 	.word	0x0801b0d1
 801af14:	0801b0d1 	.word	0x0801b0d1
 801af18:	0801b0d1 	.word	0x0801b0d1
 801af1c:	0801b0d1 	.word	0x0801b0d1
 801af20:	0801b0d1 	.word	0x0801b0d1
 801af24:	0801b0d1 	.word	0x0801b0d1
 801af28:	0801b0d1 	.word	0x0801b0d1
 801af2c:	0801b0d1 	.word	0x0801b0d1
 801af30:	0801b0d1 	.word	0x0801b0d1
 801af34:	0801b0d1 	.word	0x0801b0d1
 801af38:	0801b0d1 	.word	0x0801b0d1
 801af3c:	0801b0d1 	.word	0x0801b0d1
 801af40:	0801b0d1 	.word	0x0801b0d1
 801af44:	0801b087 	.word	0x0801b087
 801af48:	0801b08d 	.word	0x0801b08d
 801af4c:	0801b09b 	.word	0x0801b09b
 801af50:	0801b0d1 	.word	0x0801b0d1
 801af54:	0801b0d1 	.word	0x0801b0d1
 801af58:	0801b0a1 	.word	0x0801b0a1
 801af5c:	0801b0a7 	.word	0x0801b0a7
 801af60:	0801b0d1 	.word	0x0801b0d1
 801af64:	0801b0ad 	.word	0x0801b0ad
 801af68:	0801b0bd 	.word	0x0801b0bd
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 801af6c:	2300      	movs	r3, #0
 801af6e:	61bb      	str	r3, [r7, #24]
            break;
 801af70:	e0af      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801af72:	2300      	movs	r3, #0
 801af74:	61bb      	str	r3, [r7, #24]
            break;
 801af76:	e0ac      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 801af78:	2300      	movs	r3, #0
 801af7a:	61bb      	str	r3, [r7, #24]
            break;
 801af7c:	e0a9      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801af84:	733b      	strb	r3, [r7, #12]
 801af86:	2307      	movs	r3, #7
 801af88:	737b      	strb	r3, [r7, #13]
 801af8a:	2300      	movs	r3, #0
 801af8c:	73bb      	strb	r3, [r7, #14]
 801af8e:	2310      	movs	r3, #16
 801af90:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801af92:	4b53      	ldr	r3, [pc, #332]	; (801b0e0 <RegionEU868GetPhyParam+0x278>)
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801af9a:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801af9c:	4b50      	ldr	r3, [pc, #320]	; (801b0e0 <RegionEU868GetPhyParam+0x278>)
 801af9e:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801afa0:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801afa2:	f107 030c 	add.w	r3, r7, #12
 801afa6:	4618      	mov	r0, r3
 801afa8:	f7ff fddc 	bl	801ab64 <RegionCommonGetNextLowerTxDr>
 801afac:	4603      	mov	r3, r0
 801afae:	61bb      	str	r3, [r7, #24]
            break;
 801afb0:	e08f      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801afb2:	2300      	movs	r3, #0
 801afb4:	61bb      	str	r3, [r7, #24]
            break;
 801afb6:	e08c      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 801afb8:	2300      	movs	r3, #0
 801afba:	61bb      	str	r3, [r7, #24]
            break;
 801afbc:	e089      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801afbe:	2340      	movs	r3, #64	; 0x40
 801afc0:	61bb      	str	r3, [r7, #24]
            break;
 801afc2:	e086      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801afc4:	2320      	movs	r3, #32
 801afc6:	61bb      	str	r3, [r7, #24]
            break;
 801afc8:	e083      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801afd0:	461a      	mov	r2, r3
 801afd2:	4b44      	ldr	r3, [pc, #272]	; (801b0e4 <RegionEU868GetPhyParam+0x27c>)
 801afd4:	5c9b      	ldrb	r3, [r3, r2]
 801afd6:	61bb      	str	r3, [r7, #24]
            break;
 801afd8:	e07b      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801afe0:	461a      	mov	r2, r3
 801afe2:	4b41      	ldr	r3, [pc, #260]	; (801b0e8 <RegionEU868GetPhyParam+0x280>)
 801afe4:	5c9b      	ldrb	r3, [r3, r2]
 801afe6:	61bb      	str	r3, [r7, #24]
            break;
 801afe8:	e073      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801afea:	2301      	movs	r3, #1
 801afec:	61bb      	str	r3, [r7, #24]
            break;
 801afee:	e070      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801aff0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801aff4:	61bb      	str	r3, [r7, #24]
            break;
 801aff6:	e06c      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801aff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801affc:	61bb      	str	r3, [r7, #24]
            break;
 801affe:	e068      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801b000:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801b004:	61bb      	str	r3, [r7, #24]
            break;
 801b006:	e064      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801b008:	f241 3388 	movw	r3, #5000	; 0x1388
 801b00c:	61bb      	str	r3, [r7, #24]
            break;
 801b00e:	e060      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801b010:	f241 7370 	movw	r3, #6000	; 0x1770
 801b014:	61bb      	str	r3, [r7, #24]
            break;
 801b016:	e05c      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801b018:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801b01c:	61bb      	str	r3, [r7, #24]
            break;
 801b01e:	e058      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801b020:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801b024:	4831      	ldr	r0, [pc, #196]	; (801b0ec <RegionEU868GetPhyParam+0x284>)
 801b026:	f001 f89d 	bl	801c164 <randr>
 801b02a:	4603      	mov	r3, r0
 801b02c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801b030:	61bb      	str	r3, [r7, #24]
            break;
 801b032:	e04e      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801b034:	2300      	movs	r3, #0
 801b036:	61bb      	str	r3, [r7, #24]
            break;
 801b038:	e04b      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801b03a:	4b2d      	ldr	r3, [pc, #180]	; (801b0f0 <RegionEU868GetPhyParam+0x288>)
 801b03c:	61bb      	str	r3, [r7, #24]
            break;
 801b03e:	e048      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 801b040:	2300      	movs	r3, #0
 801b042:	61bb      	str	r3, [r7, #24]
            break;
 801b044:	e045      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801b046:	4b26      	ldr	r3, [pc, #152]	; (801b0e0 <RegionEU868GetPhyParam+0x278>)
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801b04e:	61bb      	str	r3, [r7, #24]
            break;
 801b050:	e03f      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801b052:	4b23      	ldr	r3, [pc, #140]	; (801b0e0 <RegionEU868GetPhyParam+0x278>)
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801b05a:	61bb      	str	r3, [r7, #24]
            break;
 801b05c:	e039      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801b05e:	2310      	movs	r3, #16
 801b060:	61bb      	str	r3, [r7, #24]
            break;
 801b062:	e036      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801b064:	4b1e      	ldr	r3, [pc, #120]	; (801b0e0 <RegionEU868GetPhyParam+0x278>)
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	61bb      	str	r3, [r7, #24]
            break;
 801b06a:	e032      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 801b06c:	2300      	movs	r3, #0
 801b06e:	61bb      	str	r3, [r7, #24]
            break;
 801b070:	e02f      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801b072:	2300      	movs	r3, #0
 801b074:	61bb      	str	r3, [r7, #24]
            break;
 801b076:	e02c      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 801b078:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 801b07c:	61bb      	str	r3, [r7, #24]
            break;
 801b07e:	e028      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801b080:	4b1c      	ldr	r3, [pc, #112]	; (801b0f4 <RegionEU868GetPhyParam+0x28c>)
 801b082:	61bb      	str	r3, [r7, #24]
            break;
 801b084:	e025      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801b086:	4b1a      	ldr	r3, [pc, #104]	; (801b0f0 <RegionEU868GetPhyParam+0x288>)
 801b088:	61bb      	str	r3, [r7, #24]
            break;
 801b08a:	e022      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801b08c:	2311      	movs	r3, #17
 801b08e:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801b090:	2302      	movs	r3, #2
 801b092:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 801b094:	2300      	movs	r3, #0
 801b096:	76bb      	strb	r3, [r7, #26]
            break;
 801b098:	e01b      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801b09a:	2303      	movs	r3, #3
 801b09c:	61bb      	str	r3, [r7, #24]
            break;
 801b09e:	e018      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 801b0a0:	4b13      	ldr	r3, [pc, #76]	; (801b0f0 <RegionEU868GetPhyParam+0x288>)
 801b0a2:	61bb      	str	r3, [r7, #24]
            break;
 801b0a4:	e015      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801b0a6:	2303      	movs	r3, #3
 801b0a8:	61bb      	str	r3, [r7, #24]
            break;
 801b0aa:	e012      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b0b2:	461a      	mov	r2, r3
 801b0b4:	4b10      	ldr	r3, [pc, #64]	; (801b0f8 <RegionEU868GetPhyParam+0x290>)
 801b0b6:	5c9b      	ldrb	r3, [r3, r2]
 801b0b8:	61bb      	str	r3, [r7, #24]
            break;
 801b0ba:	e00a      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b0c2:	490e      	ldr	r1, [pc, #56]	; (801b0fc <RegionEU868GetPhyParam+0x294>)
 801b0c4:	4618      	mov	r0, r3
 801b0c6:	f7ff fda1 	bl	801ac0c <RegionCommonGetBandwidth>
 801b0ca:	4603      	mov	r3, r0
 801b0cc:	61bb      	str	r3, [r7, #24]
            break;
 801b0ce:	e000      	b.n	801b0d2 <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 801b0d0:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 801b0d2:	69bb      	ldr	r3, [r7, #24]
 801b0d4:	61fb      	str	r3, [r7, #28]
 801b0d6:	69fb      	ldr	r3, [r7, #28]
}
 801b0d8:	4618      	mov	r0, r3
 801b0da:	3720      	adds	r7, #32
 801b0dc:	46bd      	mov	sp, r7
 801b0de:	bd80      	pop	{r7, pc}
 801b0e0:	2000239c 	.word	0x2000239c
 801b0e4:	08021cf0 	.word	0x08021cf0
 801b0e8:	08021cf8 	.word	0x08021cf8
 801b0ec:	fffffc18 	.word	0xfffffc18
 801b0f0:	33d3e608 	.word	0x33d3e608
 801b0f4:	4009999a 	.word	0x4009999a
 801b0f8:	08021cc8 	.word	0x08021cc8
 801b0fc:	08021cd0 	.word	0x08021cd0

0801b100 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801b100:	b590      	push	{r4, r7, lr}
 801b102:	b085      	sub	sp, #20
 801b104:	af02      	add	r7, sp, #8
 801b106:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801b108:	4b11      	ldr	r3, [pc, #68]	; (801b150 <RegionEU868SetBandTxDone+0x50>)
 801b10a:	681a      	ldr	r2, [r3, #0]
 801b10c:	4b11      	ldr	r3, [pc, #68]	; (801b154 <RegionEU868SetBandTxDone+0x54>)
 801b10e:	6819      	ldr	r1, [r3, #0]
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	781b      	ldrb	r3, [r3, #0]
 801b114:	4618      	mov	r0, r3
 801b116:	4603      	mov	r3, r0
 801b118:	005b      	lsls	r3, r3, #1
 801b11a:	4403      	add	r3, r0
 801b11c:	009b      	lsls	r3, r3, #2
 801b11e:	440b      	add	r3, r1
 801b120:	3309      	adds	r3, #9
 801b122:	781b      	ldrb	r3, [r3, #0]
 801b124:	4619      	mov	r1, r3
 801b126:	460b      	mov	r3, r1
 801b128:	005b      	lsls	r3, r3, #1
 801b12a:	440b      	add	r3, r1
 801b12c:	00db      	lsls	r3, r3, #3
 801b12e:	18d0      	adds	r0, r2, r3
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	6899      	ldr	r1, [r3, #8]
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	785c      	ldrb	r4, [r3, #1]
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	691a      	ldr	r2, [r3, #16]
 801b13c:	9200      	str	r2, [sp, #0]
 801b13e:	68db      	ldr	r3, [r3, #12]
 801b140:	4622      	mov	r2, r4
 801b142:	f7ff f889 	bl	801a258 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 801b146:	bf00      	nop
 801b148:	370c      	adds	r7, #12
 801b14a:	46bd      	mov	sp, r7
 801b14c:	bd90      	pop	{r4, r7, pc}
 801b14e:	bf00      	nop
 801b150:	20002398 	.word	0x20002398
 801b154:	2000239c 	.word	0x2000239c

0801b158 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 801b158:	b580      	push	{r7, lr}
 801b15a:	b0b0      	sub	sp, #192	; 0xc0
 801b15c:	af00      	add	r7, sp, #0
 801b15e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 801b160:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b164:	2290      	movs	r2, #144	; 0x90
 801b166:	2100      	movs	r1, #0
 801b168:	4618      	mov	r0, r3
 801b16a:	f005 fe03 	bl	8020d74 <memset>
 801b16e:	2364      	movs	r3, #100	; 0x64
 801b170:	863b      	strh	r3, [r7, #48]	; 0x30
 801b172:	2364      	movs	r3, #100	; 0x64
 801b174:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801b17c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 801b180:	230a      	movs	r3, #10
 801b182:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 801b186:	2364      	movs	r3, #100	; 0x64
 801b188:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 801b18c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801b190:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	7a1b      	ldrb	r3, [r3, #8]
 801b198:	2b02      	cmp	r3, #2
 801b19a:	d05e      	beq.n	801b25a <RegionEU868InitDefaults+0x102>
 801b19c:	2b02      	cmp	r3, #2
 801b19e:	dc6b      	bgt.n	801b278 <RegionEU868InitDefaults+0x120>
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d002      	beq.n	801b1aa <RegionEU868InitDefaults+0x52>
 801b1a4:	2b01      	cmp	r3, #1
 801b1a6:	d03f      	beq.n	801b228 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 801b1a8:	e066      	b.n	801b278 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d063      	beq.n	801b27a <RegionEU868InitDefaults+0x122>
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	685b      	ldr	r3, [r3, #4]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d05f      	beq.n	801b27a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	4a30      	ldr	r2, [pc, #192]	; (801b280 <RegionEU868InitDefaults+0x128>)
 801b1c0:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	685b      	ldr	r3, [r3, #4]
 801b1c6:	4a2f      	ldr	r2, [pc, #188]	; (801b284 <RegionEU868InitDefaults+0x12c>)
 801b1c8:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801b1ca:	4b2d      	ldr	r3, [pc, #180]	; (801b280 <RegionEU868InitDefaults+0x128>)
 801b1cc:	681b      	ldr	r3, [r3, #0]
 801b1ce:	4618      	mov	r0, r3
 801b1d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b1d4:	2290      	movs	r2, #144	; 0x90
 801b1d6:	4619      	mov	r1, r3
 801b1d8:	f000 ffdb 	bl	801c192 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 801b1dc:	4b29      	ldr	r3, [pc, #164]	; (801b284 <RegionEU868InitDefaults+0x12c>)
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	4a29      	ldr	r2, [pc, #164]	; (801b288 <RegionEU868InitDefaults+0x130>)
 801b1e2:	ca07      	ldmia	r2, {r0, r1, r2}
 801b1e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 801b1e8:	4b26      	ldr	r3, [pc, #152]	; (801b284 <RegionEU868InitDefaults+0x12c>)
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	4a27      	ldr	r2, [pc, #156]	; (801b28c <RegionEU868InitDefaults+0x134>)
 801b1ee:	330c      	adds	r3, #12
 801b1f0:	ca07      	ldmia	r2, {r0, r1, r2}
 801b1f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 801b1f6:	4b23      	ldr	r3, [pc, #140]	; (801b284 <RegionEU868InitDefaults+0x12c>)
 801b1f8:	681b      	ldr	r3, [r3, #0]
 801b1fa:	4a25      	ldr	r2, [pc, #148]	; (801b290 <RegionEU868InitDefaults+0x138>)
 801b1fc:	3318      	adds	r3, #24
 801b1fe:	ca07      	ldmia	r2, {r0, r1, r2}
 801b200:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801b204:	4b1f      	ldr	r3, [pc, #124]	; (801b284 <RegionEU868InitDefaults+0x12c>)
 801b206:	681b      	ldr	r3, [r3, #0]
 801b208:	2207      	movs	r2, #7
 801b20a:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801b20e:	4b1d      	ldr	r3, [pc, #116]	; (801b284 <RegionEU868InitDefaults+0x12c>)
 801b210:	681b      	ldr	r3, [r3, #0]
 801b212:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801b216:	4b1b      	ldr	r3, [pc, #108]	; (801b284 <RegionEU868InitDefaults+0x12c>)
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801b21e:	2201      	movs	r2, #1
 801b220:	4619      	mov	r1, r3
 801b222:	f7fe fff3 	bl	801a20c <RegionCommonChanMaskCopy>
 801b226:	e028      	b.n	801b27a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801b228:	4b16      	ldr	r3, [pc, #88]	; (801b284 <RegionEU868InitDefaults+0x12c>)
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	2200      	movs	r2, #0
 801b22e:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801b230:	4b14      	ldr	r3, [pc, #80]	; (801b284 <RegionEU868InitDefaults+0x12c>)
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	2200      	movs	r2, #0
 801b236:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801b238:	4b12      	ldr	r3, [pc, #72]	; (801b284 <RegionEU868InitDefaults+0x12c>)
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	2200      	movs	r2, #0
 801b23e:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801b240:	4b10      	ldr	r3, [pc, #64]	; (801b284 <RegionEU868InitDefaults+0x12c>)
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801b248:	4b0e      	ldr	r3, [pc, #56]	; (801b284 <RegionEU868InitDefaults+0x12c>)
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801b250:	2201      	movs	r2, #1
 801b252:	4619      	mov	r1, r3
 801b254:	f7fe ffda 	bl	801a20c <RegionCommonChanMaskCopy>
            break;
 801b258:	e00f      	b.n	801b27a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801b25a:	4b0a      	ldr	r3, [pc, #40]	; (801b284 <RegionEU868InitDefaults+0x12c>)
 801b25c:	681b      	ldr	r3, [r3, #0]
 801b25e:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 801b262:	4b08      	ldr	r3, [pc, #32]	; (801b284 <RegionEU868InitDefaults+0x12c>)
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 801b26a:	4b06      	ldr	r3, [pc, #24]	; (801b284 <RegionEU868InitDefaults+0x12c>)
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	430a      	orrs	r2, r1
 801b270:	b292      	uxth	r2, r2
 801b272:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 801b276:	e000      	b.n	801b27a <RegionEU868InitDefaults+0x122>
            break;
 801b278:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801b27a:	37c0      	adds	r7, #192	; 0xc0
 801b27c:	46bd      	mov	sp, r7
 801b27e:	bd80      	pop	{r7, pc}
 801b280:	20002398 	.word	0x20002398
 801b284:	2000239c 	.word	0x2000239c
 801b288:	0802177c 	.word	0x0802177c
 801b28c:	08021788 	.word	0x08021788
 801b290:	08021794 	.word	0x08021794

0801b294 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801b294:	b580      	push	{r7, lr}
 801b296:	b084      	sub	sp, #16
 801b298:	af00      	add	r7, sp, #0
 801b29a:	6078      	str	r0, [r7, #4]
 801b29c:	460b      	mov	r3, r1
 801b29e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 801b2a0:	78fb      	ldrb	r3, [r7, #3]
 801b2a2:	2b0f      	cmp	r3, #15
 801b2a4:	d86c      	bhi.n	801b380 <RegionEU868Verify+0xec>
 801b2a6:	a201      	add	r2, pc, #4	; (adr r2, 801b2ac <RegionEU868Verify+0x18>)
 801b2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b2ac:	0801b2ed 	.word	0x0801b2ed
 801b2b0:	0801b381 	.word	0x0801b381
 801b2b4:	0801b381 	.word	0x0801b381
 801b2b8:	0801b381 	.word	0x0801b381
 801b2bc:	0801b381 	.word	0x0801b381
 801b2c0:	0801b305 	.word	0x0801b305
 801b2c4:	0801b323 	.word	0x0801b323
 801b2c8:	0801b341 	.word	0x0801b341
 801b2cc:	0801b381 	.word	0x0801b381
 801b2d0:	0801b35f 	.word	0x0801b35f
 801b2d4:	0801b35f 	.word	0x0801b35f
 801b2d8:	0801b381 	.word	0x0801b381
 801b2dc:	0801b381 	.word	0x0801b381
 801b2e0:	0801b381 	.word	0x0801b381
 801b2e4:	0801b381 	.word	0x0801b381
 801b2e8:	0801b37d 	.word	0x0801b37d
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 801b2ec:	2300      	movs	r3, #0
 801b2ee:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	681b      	ldr	r3, [r3, #0]
 801b2f4:	f107 020f 	add.w	r2, r7, #15
 801b2f8:	4611      	mov	r1, r2
 801b2fa:	4618      	mov	r0, r3
 801b2fc:	f7ff fcee 	bl	801acdc <VerifyRfFreq>
 801b300:	4603      	mov	r3, r0
 801b302:	e03e      	b.n	801b382 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	f993 3000 	ldrsb.w	r3, [r3]
 801b30a:	2207      	movs	r2, #7
 801b30c:	2100      	movs	r1, #0
 801b30e:	4618      	mov	r0, r3
 801b310:	f7fe feff 	bl	801a112 <RegionCommonValueInRange>
 801b314:	4603      	mov	r3, r0
 801b316:	2b00      	cmp	r3, #0
 801b318:	bf14      	ite	ne
 801b31a:	2301      	movne	r3, #1
 801b31c:	2300      	moveq	r3, #0
 801b31e:	b2db      	uxtb	r3, r3
 801b320:	e02f      	b.n	801b382 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	f993 3000 	ldrsb.w	r3, [r3]
 801b328:	2205      	movs	r2, #5
 801b32a:	2100      	movs	r1, #0
 801b32c:	4618      	mov	r0, r3
 801b32e:	f7fe fef0 	bl	801a112 <RegionCommonValueInRange>
 801b332:	4603      	mov	r3, r0
 801b334:	2b00      	cmp	r3, #0
 801b336:	bf14      	ite	ne
 801b338:	2301      	movne	r3, #1
 801b33a:	2300      	moveq	r3, #0
 801b33c:	b2db      	uxtb	r3, r3
 801b33e:	e020      	b.n	801b382 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	f993 3000 	ldrsb.w	r3, [r3]
 801b346:	2207      	movs	r2, #7
 801b348:	2100      	movs	r1, #0
 801b34a:	4618      	mov	r0, r3
 801b34c:	f7fe fee1 	bl	801a112 <RegionCommonValueInRange>
 801b350:	4603      	mov	r3, r0
 801b352:	2b00      	cmp	r3, #0
 801b354:	bf14      	ite	ne
 801b356:	2301      	movne	r3, #1
 801b358:	2300      	moveq	r3, #0
 801b35a:	b2db      	uxtb	r3, r3
 801b35c:	e011      	b.n	801b382 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	f993 3000 	ldrsb.w	r3, [r3]
 801b364:	2207      	movs	r2, #7
 801b366:	2100      	movs	r1, #0
 801b368:	4618      	mov	r0, r3
 801b36a:	f7fe fed2 	bl	801a112 <RegionCommonValueInRange>
 801b36e:	4603      	mov	r3, r0
 801b370:	2b00      	cmp	r3, #0
 801b372:	bf14      	ite	ne
 801b374:	2301      	movne	r3, #1
 801b376:	2300      	moveq	r3, #0
 801b378:	b2db      	uxtb	r3, r3
 801b37a:	e002      	b.n	801b382 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 801b37c:	2301      	movs	r3, #1
 801b37e:	e000      	b.n	801b382 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 801b380:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801b382:	4618      	mov	r0, r3
 801b384:	3710      	adds	r7, #16
 801b386:	46bd      	mov	sp, r7
 801b388:	bd80      	pop	{r7, pc}
 801b38a:	bf00      	nop

0801b38c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801b38c:	b580      	push	{r7, lr}
 801b38e:	b08a      	sub	sp, #40	; 0x28
 801b390:	af00      	add	r7, sp, #0
 801b392:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801b394:	2350      	movs	r3, #80	; 0x50
 801b396:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	791b      	ldrb	r3, [r3, #4]
 801b39e:	2b10      	cmp	r3, #16
 801b3a0:	d162      	bne.n	801b468 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	681b      	ldr	r3, [r3, #0]
 801b3a6:	330f      	adds	r3, #15
 801b3a8:	781b      	ldrb	r3, [r3, #0]
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d15e      	bne.n	801b46c <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801b3ae:	2300      	movs	r3, #0
 801b3b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b3b4:	2303      	movs	r3, #3
 801b3b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b3ba:	e050      	b.n	801b45e <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 801b3bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b3c0:	2b07      	cmp	r3, #7
 801b3c2:	d824      	bhi.n	801b40e <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	681a      	ldr	r2, [r3, #0]
 801b3c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b3cc:	4413      	add	r3, r2
 801b3ce:	781b      	ldrb	r3, [r3, #0]
 801b3d0:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801b3d2:	69ba      	ldr	r2, [r7, #24]
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	6819      	ldr	r1, [r3, #0]
 801b3d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b3dc:	3301      	adds	r3, #1
 801b3de:	440b      	add	r3, r1
 801b3e0:	781b      	ldrb	r3, [r3, #0]
 801b3e2:	021b      	lsls	r3, r3, #8
 801b3e4:	4313      	orrs	r3, r2
 801b3e6:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801b3e8:	69ba      	ldr	r2, [r7, #24]
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	6819      	ldr	r1, [r3, #0]
 801b3ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b3f2:	3302      	adds	r3, #2
 801b3f4:	440b      	add	r3, r1
 801b3f6:	781b      	ldrb	r3, [r3, #0]
 801b3f8:	041b      	lsls	r3, r3, #16
 801b3fa:	4313      	orrs	r3, r2
 801b3fc:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801b3fe:	69bb      	ldr	r3, [r7, #24]
 801b400:	2264      	movs	r2, #100	; 0x64
 801b402:	fb02 f303 	mul.w	r3, r2, r3
 801b406:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801b408:	2300      	movs	r3, #0
 801b40a:	61fb      	str	r3, [r7, #28]
 801b40c:	e006      	b.n	801b41c <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801b40e:	2300      	movs	r3, #0
 801b410:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801b412:	2300      	movs	r3, #0
 801b414:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 801b418:	2300      	movs	r3, #0
 801b41a:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 801b41c:	69bb      	ldr	r3, [r7, #24]
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d00b      	beq.n	801b43a <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 801b422:	f107 0318 	add.w	r3, r7, #24
 801b426:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 801b428:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b42c:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801b42e:	f107 0310 	add.w	r3, r7, #16
 801b432:	4618      	mov	r0, r3
 801b434:	f000 fd0e 	bl	801be54 <RegionEU868ChannelAdd>
 801b438:	e007      	b.n	801b44a <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801b43a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b43e:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 801b440:	f107 030c 	add.w	r3, r7, #12
 801b444:	4618      	mov	r0, r3
 801b446:	f000 fda7 	bl	801bf98 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801b44a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b44e:	3303      	adds	r3, #3
 801b450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b454:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b458:	3301      	adds	r3, #1
 801b45a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b45e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b462:	2b0f      	cmp	r3, #15
 801b464:	d9aa      	bls.n	801b3bc <RegionEU868ApplyCFList+0x30>
 801b466:	e002      	b.n	801b46e <RegionEU868ApplyCFList+0xe2>
        return;
 801b468:	bf00      	nop
 801b46a:	e000      	b.n	801b46e <RegionEU868ApplyCFList+0xe2>
        return;
 801b46c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801b46e:	3728      	adds	r7, #40	; 0x28
 801b470:	46bd      	mov	sp, r7
 801b472:	bd80      	pop	{r7, pc}

0801b474 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801b474:	b580      	push	{r7, lr}
 801b476:	b082      	sub	sp, #8
 801b478:	af00      	add	r7, sp, #0
 801b47a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	791b      	ldrb	r3, [r3, #4]
 801b480:	2b00      	cmp	r3, #0
 801b482:	d002      	beq.n	801b48a <RegionEU868ChanMaskSet+0x16>
 801b484:	2b01      	cmp	r3, #1
 801b486:	d00b      	beq.n	801b4a0 <RegionEU868ChanMaskSet+0x2c>
 801b488:	e015      	b.n	801b4b6 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801b48a:	4b0e      	ldr	r3, [pc, #56]	; (801b4c4 <RegionEU868ChanMaskSet+0x50>)
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	2201      	movs	r2, #1
 801b498:	4619      	mov	r1, r3
 801b49a:	f7fe feb7 	bl	801a20c <RegionCommonChanMaskCopy>
            break;
 801b49e:	e00c      	b.n	801b4ba <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801b4a0:	4b08      	ldr	r3, [pc, #32]	; (801b4c4 <RegionEU868ChanMaskSet+0x50>)
 801b4a2:	681b      	ldr	r3, [r3, #0]
 801b4a4:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	2201      	movs	r2, #1
 801b4ae:	4619      	mov	r1, r3
 801b4b0:	f7fe feac 	bl	801a20c <RegionCommonChanMaskCopy>
            break;
 801b4b4:	e001      	b.n	801b4ba <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 801b4b6:	2300      	movs	r3, #0
 801b4b8:	e000      	b.n	801b4bc <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 801b4ba:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801b4bc:	4618      	mov	r0, r3
 801b4be:	3708      	adds	r7, #8
 801b4c0:	46bd      	mov	sp, r7
 801b4c2:	bd80      	pop	{r7, pc}
 801b4c4:	2000239c 	.word	0x2000239c

0801b4c8 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801b4c8:	b580      	push	{r7, lr}
 801b4ca:	b088      	sub	sp, #32
 801b4cc:	af02      	add	r7, sp, #8
 801b4ce:	60ba      	str	r2, [r7, #8]
 801b4d0:	607b      	str	r3, [r7, #4]
 801b4d2:	4603      	mov	r3, r0
 801b4d4:	73fb      	strb	r3, [r7, #15]
 801b4d6:	460b      	mov	r3, r1
 801b4d8:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801b4da:	2300      	movs	r3, #0
 801b4dc:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801b4de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b4e2:	2b07      	cmp	r3, #7
 801b4e4:	bfa8      	it	ge
 801b4e6:	2307      	movge	r3, #7
 801b4e8:	b25a      	sxtb	r2, r3
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b4f4:	491e      	ldr	r1, [pc, #120]	; (801b570 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801b4f6:	4618      	mov	r0, r3
 801b4f8:	f7ff fb88 	bl	801ac0c <RegionCommonGetBandwidth>
 801b4fc:	4603      	mov	r3, r0
 801b4fe:	b2da      	uxtb	r2, r3
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b50a:	2b07      	cmp	r3, #7
 801b50c:	d10a      	bne.n	801b524 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b514:	461a      	mov	r2, r3
 801b516:	4b17      	ldr	r3, [pc, #92]	; (801b574 <RegionEU868ComputeRxWindowParameters+0xac>)
 801b518:	5c9b      	ldrb	r3, [r3, r2]
 801b51a:	4618      	mov	r0, r3
 801b51c:	f7ff f8aa 	bl	801a674 <RegionCommonComputeSymbolTimeFsk>
 801b520:	6178      	str	r0, [r7, #20]
 801b522:	e011      	b.n	801b548 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b52a:	461a      	mov	r2, r3
 801b52c:	4b11      	ldr	r3, [pc, #68]	; (801b574 <RegionEU868ComputeRxWindowParameters+0xac>)
 801b52e:	5c9a      	ldrb	r2, [r3, r2]
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b536:	4619      	mov	r1, r3
 801b538:	4b0d      	ldr	r3, [pc, #52]	; (801b570 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801b53a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b53e:	4619      	mov	r1, r3
 801b540:	4610      	mov	r0, r2
 801b542:	f7ff f881 	bl	801a648 <RegionCommonComputeSymbolTimeLoRa>
 801b546:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801b548:	4b0b      	ldr	r3, [pc, #44]	; (801b578 <RegionEU868ComputeRxWindowParameters+0xb0>)
 801b54a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b54c:	4798      	blx	r3
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	3308      	adds	r3, #8
 801b552:	687a      	ldr	r2, [r7, #4]
 801b554:	320c      	adds	r2, #12
 801b556:	7bb9      	ldrb	r1, [r7, #14]
 801b558:	9201      	str	r2, [sp, #4]
 801b55a:	9300      	str	r3, [sp, #0]
 801b55c:	4603      	mov	r3, r0
 801b55e:	68ba      	ldr	r2, [r7, #8]
 801b560:	6978      	ldr	r0, [r7, #20]
 801b562:	f7ff f897 	bl	801a694 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 801b566:	bf00      	nop
 801b568:	3718      	adds	r7, #24
 801b56a:	46bd      	mov	sp, r7
 801b56c:	bd80      	pop	{r7, pc}
 801b56e:	bf00      	nop
 801b570:	08021cd0 	.word	0x08021cd0
 801b574:	08021cc8 	.word	0x08021cc8
 801b578:	08021d00 	.word	0x08021d00

0801b57c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801b57c:	b5b0      	push	{r4, r5, r7, lr}
 801b57e:	b090      	sub	sp, #64	; 0x40
 801b580:	af0a      	add	r7, sp, #40	; 0x28
 801b582:	6078      	str	r0, [r7, #4]
 801b584:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	785b      	ldrb	r3, [r3, #1]
 801b58a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801b58c:	2300      	movs	r3, #0
 801b58e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 801b590:	2300      	movs	r3, #0
 801b592:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	685b      	ldr	r3, [r3, #4]
 801b598:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801b59a:	4b5a      	ldr	r3, [pc, #360]	; (801b704 <RegionEU868RxConfig+0x188>)
 801b59c:	685b      	ldr	r3, [r3, #4]
 801b59e:	4798      	blx	r3
 801b5a0:	4603      	mov	r3, r0
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	d001      	beq.n	801b5aa <RegionEU868RxConfig+0x2e>
    {
        return false;
 801b5a6:	2300      	movs	r3, #0
 801b5a8:	e0a8      	b.n	801b6fc <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	7cdb      	ldrb	r3, [r3, #19]
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d126      	bne.n	801b600 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801b5b2:	4b55      	ldr	r3, [pc, #340]	; (801b708 <RegionEU868RxConfig+0x18c>)
 801b5b4:	681a      	ldr	r2, [r3, #0]
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	781b      	ldrb	r3, [r3, #0]
 801b5ba:	4619      	mov	r1, r3
 801b5bc:	460b      	mov	r3, r1
 801b5be:	005b      	lsls	r3, r3, #1
 801b5c0:	440b      	add	r3, r1
 801b5c2:	009b      	lsls	r3, r3, #2
 801b5c4:	4413      	add	r3, r2
 801b5c6:	681b      	ldr	r3, [r3, #0]
 801b5c8:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801b5ca:	4b4f      	ldr	r3, [pc, #316]	; (801b708 <RegionEU868RxConfig+0x18c>)
 801b5cc:	681a      	ldr	r2, [r3, #0]
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	781b      	ldrb	r3, [r3, #0]
 801b5d2:	4619      	mov	r1, r3
 801b5d4:	460b      	mov	r3, r1
 801b5d6:	005b      	lsls	r3, r3, #1
 801b5d8:	440b      	add	r3, r1
 801b5da:	009b      	lsls	r3, r3, #2
 801b5dc:	4413      	add	r3, r2
 801b5de:	3304      	adds	r3, #4
 801b5e0:	681b      	ldr	r3, [r3, #0]
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d00c      	beq.n	801b600 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801b5e6:	4b48      	ldr	r3, [pc, #288]	; (801b708 <RegionEU868RxConfig+0x18c>)
 801b5e8:	681a      	ldr	r2, [r3, #0]
 801b5ea:	687b      	ldr	r3, [r7, #4]
 801b5ec:	781b      	ldrb	r3, [r3, #0]
 801b5ee:	4619      	mov	r1, r3
 801b5f0:	460b      	mov	r3, r1
 801b5f2:	005b      	lsls	r3, r3, #1
 801b5f4:	440b      	add	r3, r1
 801b5f6:	009b      	lsls	r3, r3, #2
 801b5f8:	4413      	add	r3, r2
 801b5fa:	3304      	adds	r3, #4
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 801b600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b604:	4a41      	ldr	r2, [pc, #260]	; (801b70c <RegionEU868RxConfig+0x190>)
 801b606:	5cd3      	ldrb	r3, [r2, r3]
 801b608:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801b60a:	4b3e      	ldr	r3, [pc, #248]	; (801b704 <RegionEU868RxConfig+0x188>)
 801b60c:	68db      	ldr	r3, [r3, #12]
 801b60e:	6938      	ldr	r0, [r7, #16]
 801b610:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801b612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b616:	2b07      	cmp	r3, #7
 801b618:	d128      	bne.n	801b66c <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801b61a:	2300      	movs	r3, #0
 801b61c:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801b61e:	4b39      	ldr	r3, [pc, #228]	; (801b704 <RegionEU868RxConfig+0x188>)
 801b620:	699c      	ldr	r4, [r3, #24]
 801b622:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b626:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b62a:	fb02 f303 	mul.w	r3, r2, r3
 801b62e:	4619      	mov	r1, r3
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	689b      	ldr	r3, [r3, #8]
 801b634:	b29b      	uxth	r3, r3
 801b636:	687a      	ldr	r2, [r7, #4]
 801b638:	7c92      	ldrb	r2, [r2, #18]
 801b63a:	7df8      	ldrb	r0, [r7, #23]
 801b63c:	9209      	str	r2, [sp, #36]	; 0x24
 801b63e:	2200      	movs	r2, #0
 801b640:	9208      	str	r2, [sp, #32]
 801b642:	2200      	movs	r2, #0
 801b644:	9207      	str	r2, [sp, #28]
 801b646:	2200      	movs	r2, #0
 801b648:	9206      	str	r2, [sp, #24]
 801b64a:	2201      	movs	r2, #1
 801b64c:	9205      	str	r2, [sp, #20]
 801b64e:	2200      	movs	r2, #0
 801b650:	9204      	str	r2, [sp, #16]
 801b652:	2200      	movs	r2, #0
 801b654:	9203      	str	r2, [sp, #12]
 801b656:	9302      	str	r3, [sp, #8]
 801b658:	2305      	movs	r3, #5
 801b65a:	9301      	str	r3, [sp, #4]
 801b65c:	4b2c      	ldr	r3, [pc, #176]	; (801b710 <RegionEU868RxConfig+0x194>)
 801b65e:	9300      	str	r3, [sp, #0]
 801b660:	2300      	movs	r3, #0
 801b662:	460a      	mov	r2, r1
 801b664:	f24c 3150 	movw	r1, #50000	; 0xc350
 801b668:	47a0      	blx	r4
 801b66a:	e024      	b.n	801b6b6 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 801b66c:	2301      	movs	r3, #1
 801b66e:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801b670:	4b24      	ldr	r3, [pc, #144]	; (801b704 <RegionEU868RxConfig+0x188>)
 801b672:	699c      	ldr	r4, [r3, #24]
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	789b      	ldrb	r3, [r3, #2]
 801b678:	461d      	mov	r5, r3
 801b67a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	689b      	ldr	r3, [r3, #8]
 801b682:	b29b      	uxth	r3, r3
 801b684:	687a      	ldr	r2, [r7, #4]
 801b686:	7c92      	ldrb	r2, [r2, #18]
 801b688:	7df8      	ldrb	r0, [r7, #23]
 801b68a:	9209      	str	r2, [sp, #36]	; 0x24
 801b68c:	2201      	movs	r2, #1
 801b68e:	9208      	str	r2, [sp, #32]
 801b690:	2200      	movs	r2, #0
 801b692:	9207      	str	r2, [sp, #28]
 801b694:	2200      	movs	r2, #0
 801b696:	9206      	str	r2, [sp, #24]
 801b698:	2200      	movs	r2, #0
 801b69a:	9205      	str	r2, [sp, #20]
 801b69c:	2200      	movs	r2, #0
 801b69e:	9204      	str	r2, [sp, #16]
 801b6a0:	2200      	movs	r2, #0
 801b6a2:	9203      	str	r2, [sp, #12]
 801b6a4:	9302      	str	r3, [sp, #8]
 801b6a6:	2308      	movs	r3, #8
 801b6a8:	9301      	str	r3, [sp, #4]
 801b6aa:	2300      	movs	r3, #0
 801b6ac:	9300      	str	r3, [sp, #0]
 801b6ae:	2301      	movs	r3, #1
 801b6b0:	460a      	mov	r2, r1
 801b6b2:	4629      	mov	r1, r5
 801b6b4:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	7c5b      	ldrb	r3, [r3, #17]
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d005      	beq.n	801b6ca <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801b6be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b6c2:	4a14      	ldr	r2, [pc, #80]	; (801b714 <RegionEU868RxConfig+0x198>)
 801b6c4:	5cd3      	ldrb	r3, [r2, r3]
 801b6c6:	75bb      	strb	r3, [r7, #22]
 801b6c8:	e004      	b.n	801b6d4 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801b6ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b6ce:	4a12      	ldr	r2, [pc, #72]	; (801b718 <RegionEU868RxConfig+0x19c>)
 801b6d0:	5cd3      	ldrb	r3, [r2, r3]
 801b6d2:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801b6d4:	4b0b      	ldr	r3, [pc, #44]	; (801b704 <RegionEU868RxConfig+0x188>)
 801b6d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b6d8:	7dba      	ldrb	r2, [r7, #22]
 801b6da:	320d      	adds	r2, #13
 801b6dc:	b2d1      	uxtb	r1, r2
 801b6de:	7dfa      	ldrb	r2, [r7, #23]
 801b6e0:	4610      	mov	r0, r2
 801b6e2:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	7cdb      	ldrb	r3, [r3, #19]
 801b6e8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801b6ec:	6939      	ldr	r1, [r7, #16]
 801b6ee:	4618      	mov	r0, r3
 801b6f0:	f7ff faaa 	bl	801ac48 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 801b6f4:	683b      	ldr	r3, [r7, #0]
 801b6f6:	7bfa      	ldrb	r2, [r7, #15]
 801b6f8:	701a      	strb	r2, [r3, #0]
    return true;
 801b6fa:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801b6fc:	4618      	mov	r0, r3
 801b6fe:	3718      	adds	r7, #24
 801b700:	46bd      	mov	sp, r7
 801b702:	bdb0      	pop	{r4, r5, r7, pc}
 801b704:	08021d00 	.word	0x08021d00
 801b708:	2000239c 	.word	0x2000239c
 801b70c:	08021cc8 	.word	0x08021cc8
 801b710:	00014585 	.word	0x00014585
 801b714:	08021cf8 	.word	0x08021cf8
 801b718:	08021cf0 	.word	0x08021cf0

0801b71c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801b71c:	b590      	push	{r4, r7, lr}
 801b71e:	b093      	sub	sp, #76	; 0x4c
 801b720:	af0a      	add	r7, sp, #40	; 0x28
 801b722:	60f8      	str	r0, [r7, #12]
 801b724:	60b9      	str	r1, [r7, #8]
 801b726:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801b728:	68fb      	ldr	r3, [r7, #12]
 801b72a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b72e:	461a      	mov	r2, r3
 801b730:	4b5d      	ldr	r3, [pc, #372]	; (801b8a8 <RegionEU868TxConfig+0x18c>)
 801b732:	5c9b      	ldrb	r3, [r3, r2]
 801b734:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801b736:	68fb      	ldr	r3, [r7, #12]
 801b738:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801b73c:	4b5b      	ldr	r3, [pc, #364]	; (801b8ac <RegionEU868TxConfig+0x190>)
 801b73e:	681a      	ldr	r2, [r3, #0]
 801b740:	4b5b      	ldr	r3, [pc, #364]	; (801b8b0 <RegionEU868TxConfig+0x194>)
 801b742:	6819      	ldr	r1, [r3, #0]
 801b744:	68fb      	ldr	r3, [r7, #12]
 801b746:	781b      	ldrb	r3, [r3, #0]
 801b748:	461c      	mov	r4, r3
 801b74a:	4623      	mov	r3, r4
 801b74c:	005b      	lsls	r3, r3, #1
 801b74e:	4423      	add	r3, r4
 801b750:	009b      	lsls	r3, r3, #2
 801b752:	440b      	add	r3, r1
 801b754:	3309      	adds	r3, #9
 801b756:	781b      	ldrb	r3, [r3, #0]
 801b758:	4619      	mov	r1, r3
 801b75a:	460b      	mov	r3, r1
 801b75c:	005b      	lsls	r3, r3, #1
 801b75e:	440b      	add	r3, r1
 801b760:	00db      	lsls	r3, r3, #3
 801b762:	4413      	add	r3, r2
 801b764:	3302      	adds	r3, #2
 801b766:	f993 3000 	ldrsb.w	r3, [r3]
 801b76a:	4619      	mov	r1, r3
 801b76c:	f7ff fa38 	bl	801abe0 <RegionCommonLimitTxPower>
 801b770:	4603      	mov	r3, r0
 801b772:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 801b774:	68fb      	ldr	r3, [r7, #12]
 801b776:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b77a:	494e      	ldr	r1, [pc, #312]	; (801b8b4 <RegionEU868TxConfig+0x198>)
 801b77c:	4618      	mov	r0, r3
 801b77e:	f7ff fa45 	bl	801ac0c <RegionCommonGetBandwidth>
 801b782:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801b784:	2300      	movs	r3, #0
 801b786:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801b788:	68fb      	ldr	r3, [r7, #12]
 801b78a:	6859      	ldr	r1, [r3, #4]
 801b78c:	68fb      	ldr	r3, [r7, #12]
 801b78e:	689a      	ldr	r2, [r3, #8]
 801b790:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801b794:	4618      	mov	r0, r3
 801b796:	f7ff f835 	bl	801a804 <RegionCommonComputeTxPower>
 801b79a:	4603      	mov	r3, r0
 801b79c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801b79e:	4b46      	ldr	r3, [pc, #280]	; (801b8b8 <RegionEU868TxConfig+0x19c>)
 801b7a0:	68da      	ldr	r2, [r3, #12]
 801b7a2:	4b43      	ldr	r3, [pc, #268]	; (801b8b0 <RegionEU868TxConfig+0x194>)
 801b7a4:	6819      	ldr	r1, [r3, #0]
 801b7a6:	68fb      	ldr	r3, [r7, #12]
 801b7a8:	781b      	ldrb	r3, [r3, #0]
 801b7aa:	4618      	mov	r0, r3
 801b7ac:	4603      	mov	r3, r0
 801b7ae:	005b      	lsls	r3, r3, #1
 801b7b0:	4403      	add	r3, r0
 801b7b2:	009b      	lsls	r3, r3, #2
 801b7b4:	440b      	add	r3, r1
 801b7b6:	681b      	ldr	r3, [r3, #0]
 801b7b8:	4618      	mov	r0, r3
 801b7ba:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b7c2:	2b07      	cmp	r3, #7
 801b7c4:	d124      	bne.n	801b810 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801b7c6:	2300      	movs	r3, #0
 801b7c8:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801b7ca:	4b3b      	ldr	r3, [pc, #236]	; (801b8b8 <RegionEU868TxConfig+0x19c>)
 801b7cc:	69dc      	ldr	r4, [r3, #28]
 801b7ce:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801b7d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b7d6:	fb02 f303 	mul.w	r3, r2, r3
 801b7da:	461a      	mov	r2, r3
 801b7dc:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801b7e0:	7ff8      	ldrb	r0, [r7, #31]
 801b7e2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801b7e6:	9308      	str	r3, [sp, #32]
 801b7e8:	2300      	movs	r3, #0
 801b7ea:	9307      	str	r3, [sp, #28]
 801b7ec:	2300      	movs	r3, #0
 801b7ee:	9306      	str	r3, [sp, #24]
 801b7f0:	2300      	movs	r3, #0
 801b7f2:	9305      	str	r3, [sp, #20]
 801b7f4:	2301      	movs	r3, #1
 801b7f6:	9304      	str	r3, [sp, #16]
 801b7f8:	2300      	movs	r3, #0
 801b7fa:	9303      	str	r3, [sp, #12]
 801b7fc:	2305      	movs	r3, #5
 801b7fe:	9302      	str	r3, [sp, #8]
 801b800:	2300      	movs	r3, #0
 801b802:	9301      	str	r3, [sp, #4]
 801b804:	9200      	str	r2, [sp, #0]
 801b806:	69bb      	ldr	r3, [r7, #24]
 801b808:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801b80c:	47a0      	blx	r4
 801b80e:	e01d      	b.n	801b84c <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 801b810:	2301      	movs	r3, #1
 801b812:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801b814:	4b28      	ldr	r3, [pc, #160]	; (801b8b8 <RegionEU868TxConfig+0x19c>)
 801b816:	69dc      	ldr	r4, [r3, #28]
 801b818:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801b81c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801b820:	7ff8      	ldrb	r0, [r7, #31]
 801b822:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801b826:	9208      	str	r2, [sp, #32]
 801b828:	2200      	movs	r2, #0
 801b82a:	9207      	str	r2, [sp, #28]
 801b82c:	2200      	movs	r2, #0
 801b82e:	9206      	str	r2, [sp, #24]
 801b830:	2200      	movs	r2, #0
 801b832:	9205      	str	r2, [sp, #20]
 801b834:	2201      	movs	r2, #1
 801b836:	9204      	str	r2, [sp, #16]
 801b838:	2200      	movs	r2, #0
 801b83a:	9203      	str	r2, [sp, #12]
 801b83c:	2208      	movs	r2, #8
 801b83e:	9202      	str	r2, [sp, #8]
 801b840:	2201      	movs	r2, #1
 801b842:	9201      	str	r2, [sp, #4]
 801b844:	9300      	str	r3, [sp, #0]
 801b846:	69bb      	ldr	r3, [r7, #24]
 801b848:	2200      	movs	r2, #0
 801b84a:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801b84c:	4b18      	ldr	r3, [pc, #96]	; (801b8b0 <RegionEU868TxConfig+0x194>)
 801b84e:	681a      	ldr	r2, [r3, #0]
 801b850:	68fb      	ldr	r3, [r7, #12]
 801b852:	781b      	ldrb	r3, [r3, #0]
 801b854:	4619      	mov	r1, r3
 801b856:	460b      	mov	r3, r1
 801b858:	005b      	lsls	r3, r3, #1
 801b85a:	440b      	add	r3, r1
 801b85c:	009b      	lsls	r3, r3, #2
 801b85e:	4413      	add	r3, r2
 801b860:	681a      	ldr	r2, [r3, #0]
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b868:	4619      	mov	r1, r3
 801b86a:	4610      	mov	r0, r2
 801b86c:	f7ff fa1e 	bl	801acac <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801b870:	68fb      	ldr	r3, [r7, #12]
 801b872:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801b876:	68fb      	ldr	r3, [r7, #12]
 801b878:	899b      	ldrh	r3, [r3, #12]
 801b87a:	4619      	mov	r1, r3
 801b87c:	4610      	mov	r0, r2
 801b87e:	f7ff faa3 	bl	801adc8 <GetTimeOnAir>
 801b882:	4602      	mov	r2, r0
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801b888:	4b0b      	ldr	r3, [pc, #44]	; (801b8b8 <RegionEU868TxConfig+0x19c>)
 801b88a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b88c:	68fa      	ldr	r2, [r7, #12]
 801b88e:	8992      	ldrh	r2, [r2, #12]
 801b890:	b2d1      	uxtb	r1, r2
 801b892:	7ffa      	ldrb	r2, [r7, #31]
 801b894:	4610      	mov	r0, r2
 801b896:	4798      	blx	r3

    *txPower = txPowerLimited;
 801b898:	68bb      	ldr	r3, [r7, #8]
 801b89a:	7f7a      	ldrb	r2, [r7, #29]
 801b89c:	701a      	strb	r2, [r3, #0]
    return true;
 801b89e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	3724      	adds	r7, #36	; 0x24
 801b8a4:	46bd      	mov	sp, r7
 801b8a6:	bd90      	pop	{r4, r7, pc}
 801b8a8:	08021cc8 	.word	0x08021cc8
 801b8ac:	20002398 	.word	0x20002398
 801b8b0:	2000239c 	.word	0x2000239c
 801b8b4:	08021cd0 	.word	0x08021cd0
 801b8b8:	08021d00 	.word	0x08021d00

0801b8bc <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801b8bc:	b590      	push	{r4, r7, lr}
 801b8be:	b093      	sub	sp, #76	; 0x4c
 801b8c0:	af00      	add	r7, sp, #0
 801b8c2:	60f8      	str	r0, [r7, #12]
 801b8c4:	60b9      	str	r1, [r7, #8]
 801b8c6:	607a      	str	r2, [r7, #4]
 801b8c8:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801b8ca:	2307      	movs	r3, #7
 801b8cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801b8d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b8d4:	2200      	movs	r2, #0
 801b8d6:	601a      	str	r2, [r3, #0]
 801b8d8:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801b8da:	2300      	movs	r3, #0
 801b8dc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 801b8e0:	2300      	movs	r3, #0
 801b8e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 801b8e6:	2300      	movs	r3, #0
 801b8e8:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801b8ea:	e085      	b.n	801b9f8 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801b8ec:	68fb      	ldr	r3, [r7, #12]
 801b8ee:	685a      	ldr	r2, [r3, #4]
 801b8f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801b8f4:	4413      	add	r3, r2
 801b8f6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801b8fa:	4611      	mov	r1, r2
 801b8fc:	4618      	mov	r0, r3
 801b8fe:	f7fe fdc9 	bl	801a494 <RegionCommonParseLinkAdrReq>
 801b902:	4603      	mov	r3, r0
 801b904:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 801b908:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d07b      	beq.n	801ba08 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801b910:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801b914:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801b918:	4413      	add	r3, r2
 801b91a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801b91e:	2307      	movs	r3, #7
 801b920:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 801b924:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b928:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801b92a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801b92e:	2b00      	cmp	r3, #0
 801b930:	d109      	bne.n	801b946 <RegionEU868LinkAdrReq+0x8a>
 801b932:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b934:	2b00      	cmp	r3, #0
 801b936:	d106      	bne.n	801b946 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 801b938:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801b93c:	f023 0301 	bic.w	r3, r3, #1
 801b940:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801b944:	e058      	b.n	801b9f8 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801b946:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	d003      	beq.n	801b956 <RegionEU868LinkAdrReq+0x9a>
 801b94e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801b952:	2b05      	cmp	r3, #5
 801b954:	d903      	bls.n	801b95e <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801b956:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801b95a:	2b06      	cmp	r3, #6
 801b95c:	d906      	bls.n	801b96c <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801b95e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801b962:	f023 0301 	bic.w	r3, r3, #1
 801b966:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801b96a:	e045      	b.n	801b9f8 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801b96c:	2300      	movs	r3, #0
 801b96e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801b972:	e03d      	b.n	801b9f0 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801b974:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801b978:	2b06      	cmp	r3, #6
 801b97a:	d118      	bne.n	801b9ae <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801b97c:	4b5f      	ldr	r3, [pc, #380]	; (801bafc <RegionEU868LinkAdrReq+0x240>)
 801b97e:	6819      	ldr	r1, [r3, #0]
 801b980:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801b984:	4613      	mov	r3, r2
 801b986:	005b      	lsls	r3, r3, #1
 801b988:	4413      	add	r3, r2
 801b98a:	009b      	lsls	r3, r3, #2
 801b98c:	440b      	add	r3, r1
 801b98e:	681b      	ldr	r3, [r3, #0]
 801b990:	2b00      	cmp	r3, #0
 801b992:	d028      	beq.n	801b9e6 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 801b994:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801b998:	2201      	movs	r2, #1
 801b99a:	fa02 f303 	lsl.w	r3, r2, r3
 801b99e:	b21a      	sxth	r2, r3
 801b9a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b9a2:	b21b      	sxth	r3, r3
 801b9a4:	4313      	orrs	r3, r2
 801b9a6:	b21b      	sxth	r3, r3
 801b9a8:	b29b      	uxth	r3, r3
 801b9aa:	877b      	strh	r3, [r7, #58]	; 0x3a
 801b9ac:	e01b      	b.n	801b9e6 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801b9ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b9b0:	461a      	mov	r2, r3
 801b9b2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801b9b6:	fa42 f303 	asr.w	r3, r2, r3
 801b9ba:	f003 0301 	and.w	r3, r3, #1
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d011      	beq.n	801b9e6 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801b9c2:	4b4e      	ldr	r3, [pc, #312]	; (801bafc <RegionEU868LinkAdrReq+0x240>)
 801b9c4:	6819      	ldr	r1, [r3, #0]
 801b9c6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801b9ca:	4613      	mov	r3, r2
 801b9cc:	005b      	lsls	r3, r3, #1
 801b9ce:	4413      	add	r3, r2
 801b9d0:	009b      	lsls	r3, r3, #2
 801b9d2:	440b      	add	r3, r1
 801b9d4:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801b9d6:	2b00      	cmp	r3, #0
 801b9d8:	d105      	bne.n	801b9e6 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801b9da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801b9de:	f023 0301 	bic.w	r3, r3, #1
 801b9e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801b9e6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801b9ea:	3301      	adds	r3, #1
 801b9ec:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801b9f0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801b9f4:	2b0f      	cmp	r3, #15
 801b9f6:	d9bd      	bls.n	801b974 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801b9f8:	68fb      	ldr	r3, [r7, #12]
 801b9fa:	7a1b      	ldrb	r3, [r3, #8]
 801b9fc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801ba00:	429a      	cmp	r2, r3
 801ba02:	f4ff af73 	bcc.w	801b8ec <RegionEU868LinkAdrReq+0x30>
 801ba06:	e000      	b.n	801ba0a <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 801ba08:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801ba0a:	2302      	movs	r3, #2
 801ba0c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801ba10:	68fb      	ldr	r3, [r7, #12]
 801ba12:	7a5b      	ldrb	r3, [r3, #9]
 801ba14:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 801ba18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801ba1c:	4618      	mov	r0, r3
 801ba1e:	f7ff fa23 	bl	801ae68 <RegionEU868GetPhyParam>
 801ba22:	4603      	mov	r3, r0
 801ba24:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 801ba26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801ba2a:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801ba2c:	68fb      	ldr	r3, [r7, #12]
 801ba2e:	7a9b      	ldrb	r3, [r3, #10]
 801ba30:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801ba32:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 801ba36:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801ba38:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 801ba3c:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801ba3e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801ba42:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801ba44:	68fb      	ldr	r3, [r7, #12]
 801ba46:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801ba4a:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801ba4c:	68fb      	ldr	r3, [r7, #12]
 801ba4e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801ba52:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801ba54:	68fb      	ldr	r3, [r7, #12]
 801ba56:	7b5b      	ldrb	r3, [r3, #13]
 801ba58:	b25b      	sxtb	r3, r3
 801ba5a:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 801ba5c:	2310      	movs	r3, #16
 801ba5e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801ba60:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 801ba64:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801ba66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba68:	b25b      	sxtb	r3, r3
 801ba6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801ba6e:	2307      	movs	r3, #7
 801ba70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801ba74:	4b21      	ldr	r3, [pc, #132]	; (801bafc <RegionEU868LinkAdrReq+0x240>)
 801ba76:	681b      	ldr	r3, [r3, #0]
 801ba78:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801ba7a:	2307      	movs	r3, #7
 801ba7c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801ba80:	2300      	movs	r3, #0
 801ba82:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801ba86:	68fb      	ldr	r3, [r7, #12]
 801ba88:	681b      	ldr	r3, [r3, #0]
 801ba8a:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801ba8c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801ba90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801ba94:	1c9a      	adds	r2, r3, #2
 801ba96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801ba9a:	1c59      	adds	r1, r3, #1
 801ba9c:	f107 0010 	add.w	r0, r7, #16
 801baa0:	4623      	mov	r3, r4
 801baa2:	f7fe fd48 	bl	801a536 <RegionCommonLinkAdrReqVerifyParams>
 801baa6:	4603      	mov	r3, r0
 801baa8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801baac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801bab0:	2b07      	cmp	r3, #7
 801bab2:	d10d      	bne.n	801bad0 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801bab4:	4b11      	ldr	r3, [pc, #68]	; (801bafc <RegionEU868LinkAdrReq+0x240>)
 801bab6:	681b      	ldr	r3, [r3, #0]
 801bab8:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801babc:	220c      	movs	r2, #12
 801babe:	2100      	movs	r1, #0
 801bac0:	4618      	mov	r0, r3
 801bac2:	f000 fba1 	bl	801c208 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801bac6:	4b0d      	ldr	r3, [pc, #52]	; (801bafc <RegionEU868LinkAdrReq+0x240>)
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801bacc:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801bad0:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 801bad4:	68bb      	ldr	r3, [r7, #8]
 801bad6:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801bad8:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801bae0:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801bae4:	683b      	ldr	r3, [r7, #0]
 801bae6:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801bae8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801baea:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801baee:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 801baf0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801baf4:	4618      	mov	r0, r3
 801baf6:	374c      	adds	r7, #76	; 0x4c
 801baf8:	46bd      	mov	sp, r7
 801bafa:	bd90      	pop	{r4, r7, pc}
 801bafc:	2000239c 	.word	0x2000239c

0801bb00 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801bb00:	b580      	push	{r7, lr}
 801bb02:	b084      	sub	sp, #16
 801bb04:	af00      	add	r7, sp, #0
 801bb06:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801bb08:	2307      	movs	r3, #7
 801bb0a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801bb0c:	2300      	movs	r3, #0
 801bb0e:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	685b      	ldr	r3, [r3, #4]
 801bb14:	f107 020e 	add.w	r2, r7, #14
 801bb18:	4611      	mov	r1, r2
 801bb1a:	4618      	mov	r0, r3
 801bb1c:	f7ff f8de 	bl	801acdc <VerifyRfFreq>
 801bb20:	4603      	mov	r3, r0
 801bb22:	f083 0301 	eor.w	r3, r3, #1
 801bb26:	b2db      	uxtb	r3, r3
 801bb28:	2b00      	cmp	r3, #0
 801bb2a:	d003      	beq.n	801bb34 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 801bb2c:	7bfb      	ldrb	r3, [r7, #15]
 801bb2e:	f023 0301 	bic.w	r3, r3, #1
 801bb32:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	f993 3000 	ldrsb.w	r3, [r3]
 801bb3a:	2207      	movs	r2, #7
 801bb3c:	2100      	movs	r1, #0
 801bb3e:	4618      	mov	r0, r3
 801bb40:	f7fe fae7 	bl	801a112 <RegionCommonValueInRange>
 801bb44:	4603      	mov	r3, r0
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d103      	bne.n	801bb52 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 801bb4a:	7bfb      	ldrb	r3, [r7, #15]
 801bb4c:	f023 0302 	bic.w	r3, r3, #2
 801bb50:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801bb52:	687b      	ldr	r3, [r7, #4]
 801bb54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801bb58:	2205      	movs	r2, #5
 801bb5a:	2100      	movs	r1, #0
 801bb5c:	4618      	mov	r0, r3
 801bb5e:	f7fe fad8 	bl	801a112 <RegionCommonValueInRange>
 801bb62:	4603      	mov	r3, r0
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d103      	bne.n	801bb70 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801bb68:	7bfb      	ldrb	r3, [r7, #15]
 801bb6a:	f023 0304 	bic.w	r3, r3, #4
 801bb6e:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 801bb70:	7bfb      	ldrb	r3, [r7, #15]
}
 801bb72:	4618      	mov	r0, r3
 801bb74:	3710      	adds	r7, #16
 801bb76:	46bd      	mov	sp, r7
 801bb78:	bd80      	pop	{r7, pc}
	...

0801bb7c <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801bb7c:	b580      	push	{r7, lr}
 801bb7e:	b086      	sub	sp, #24
 801bb80:	af00      	add	r7, sp, #0
 801bb82:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801bb84:	2303      	movs	r3, #3
 801bb86:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	681b      	ldr	r3, [r3, #0]
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d114      	bne.n	801bbbc <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801bb98:	b2db      	uxtb	r3, r3
 801bb9a:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 801bb9c:	f107 0308 	add.w	r3, r7, #8
 801bba0:	4618      	mov	r0, r3
 801bba2:	f000 f9f9 	bl	801bf98 <RegionEU868ChannelsRemove>
 801bba6:	4603      	mov	r3, r0
 801bba8:	f083 0301 	eor.w	r3, r3, #1
 801bbac:	b2db      	uxtb	r3, r3
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d03b      	beq.n	801bc2a <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801bbb2:	7dfb      	ldrb	r3, [r7, #23]
 801bbb4:	f023 0303 	bic.w	r3, r3, #3
 801bbb8:	75fb      	strb	r3, [r7, #23]
 801bbba:	e036      	b.n	801bc2a <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	681b      	ldr	r3, [r3, #0]
 801bbc0:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801bbc8:	b2db      	uxtb	r3, r3
 801bbca:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 801bbcc:	f107 030c 	add.w	r3, r7, #12
 801bbd0:	4618      	mov	r0, r3
 801bbd2:	f000 f93f 	bl	801be54 <RegionEU868ChannelAdd>
 801bbd6:	4603      	mov	r3, r0
 801bbd8:	2b06      	cmp	r3, #6
 801bbda:	d820      	bhi.n	801bc1e <RegionEU868NewChannelReq+0xa2>
 801bbdc:	a201      	add	r2, pc, #4	; (adr r2, 801bbe4 <RegionEU868NewChannelReq+0x68>)
 801bbde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bbe2:	bf00      	nop
 801bbe4:	0801bc29 	.word	0x0801bc29
 801bbe8:	0801bc1f 	.word	0x0801bc1f
 801bbec:	0801bc1f 	.word	0x0801bc1f
 801bbf0:	0801bc1f 	.word	0x0801bc1f
 801bbf4:	0801bc01 	.word	0x0801bc01
 801bbf8:	0801bc0b 	.word	0x0801bc0b
 801bbfc:	0801bc15 	.word	0x0801bc15
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 801bc00:	7dfb      	ldrb	r3, [r7, #23]
 801bc02:	f023 0301 	bic.w	r3, r3, #1
 801bc06:	75fb      	strb	r3, [r7, #23]
                break;
 801bc08:	e00f      	b.n	801bc2a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801bc0a:	7dfb      	ldrb	r3, [r7, #23]
 801bc0c:	f023 0302 	bic.w	r3, r3, #2
 801bc10:	75fb      	strb	r3, [r7, #23]
                break;
 801bc12:	e00a      	b.n	801bc2a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 801bc14:	7dfb      	ldrb	r3, [r7, #23]
 801bc16:	f023 0303 	bic.w	r3, r3, #3
 801bc1a:	75fb      	strb	r3, [r7, #23]
                break;
 801bc1c:	e005      	b.n	801bc2a <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801bc1e:	7dfb      	ldrb	r3, [r7, #23]
 801bc20:	f023 0303 	bic.w	r3, r3, #3
 801bc24:	75fb      	strb	r3, [r7, #23]
                break;
 801bc26:	e000      	b.n	801bc2a <RegionEU868NewChannelReq+0xae>
                break;
 801bc28:	bf00      	nop
            }
        }
    }

    return status;
 801bc2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bc2e:	4618      	mov	r0, r3
 801bc30:	3718      	adds	r7, #24
 801bc32:	46bd      	mov	sp, r7
 801bc34:	bd80      	pop	{r7, pc}
 801bc36:	bf00      	nop

0801bc38 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801bc38:	b480      	push	{r7}
 801bc3a:	b083      	sub	sp, #12
 801bc3c:	af00      	add	r7, sp, #0
 801bc3e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801bc40:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bc44:	4618      	mov	r0, r3
 801bc46:	370c      	adds	r7, #12
 801bc48:	46bd      	mov	sp, r7
 801bc4a:	bc80      	pop	{r7}
 801bc4c:	4770      	bx	lr
	...

0801bc50 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801bc50:	b580      	push	{r7, lr}
 801bc52:	b084      	sub	sp, #16
 801bc54:	af00      	add	r7, sp, #0
 801bc56:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801bc58:	2303      	movs	r3, #3
 801bc5a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801bc5c:	2300      	movs	r3, #0
 801bc5e:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	685b      	ldr	r3, [r3, #4]
 801bc64:	f107 020e 	add.w	r2, r7, #14
 801bc68:	4611      	mov	r1, r2
 801bc6a:	4618      	mov	r0, r3
 801bc6c:	f7ff f836 	bl	801acdc <VerifyRfFreq>
 801bc70:	4603      	mov	r3, r0
 801bc72:	f083 0301 	eor.w	r3, r3, #1
 801bc76:	b2db      	uxtb	r3, r3
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d003      	beq.n	801bc84 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 801bc7c:	7bfb      	ldrb	r3, [r7, #15]
 801bc7e:	f023 0301 	bic.w	r3, r3, #1
 801bc82:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801bc84:	4b13      	ldr	r3, [pc, #76]	; (801bcd4 <RegionEU868DlChannelReq+0x84>)
 801bc86:	681a      	ldr	r2, [r3, #0]
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	781b      	ldrb	r3, [r3, #0]
 801bc8c:	4619      	mov	r1, r3
 801bc8e:	460b      	mov	r3, r1
 801bc90:	005b      	lsls	r3, r3, #1
 801bc92:	440b      	add	r3, r1
 801bc94:	009b      	lsls	r3, r3, #2
 801bc96:	4413      	add	r3, r2
 801bc98:	681b      	ldr	r3, [r3, #0]
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d103      	bne.n	801bca6 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 801bc9e:	7bfb      	ldrb	r3, [r7, #15]
 801bca0:	f023 0302 	bic.w	r3, r3, #2
 801bca4:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801bca6:	7bfb      	ldrb	r3, [r7, #15]
 801bca8:	2b03      	cmp	r3, #3
 801bcaa:	d10d      	bne.n	801bcc8 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801bcac:	4b09      	ldr	r3, [pc, #36]	; (801bcd4 <RegionEU868DlChannelReq+0x84>)
 801bcae:	6819      	ldr	r1, [r3, #0]
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	781b      	ldrb	r3, [r3, #0]
 801bcb4:	4618      	mov	r0, r3
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	685a      	ldr	r2, [r3, #4]
 801bcba:	4603      	mov	r3, r0
 801bcbc:	005b      	lsls	r3, r3, #1
 801bcbe:	4403      	add	r3, r0
 801bcc0:	009b      	lsls	r3, r3, #2
 801bcc2:	440b      	add	r3, r1
 801bcc4:	3304      	adds	r3, #4
 801bcc6:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 801bcc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bccc:	4618      	mov	r0, r3
 801bcce:	3710      	adds	r7, #16
 801bcd0:	46bd      	mov	sp, r7
 801bcd2:	bd80      	pop	{r7, pc}
 801bcd4:	2000239c 	.word	0x2000239c

0801bcd8 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801bcd8:	b480      	push	{r7}
 801bcda:	b083      	sub	sp, #12
 801bcdc:	af00      	add	r7, sp, #0
 801bcde:	4603      	mov	r3, r0
 801bce0:	460a      	mov	r2, r1
 801bce2:	71fb      	strb	r3, [r7, #7]
 801bce4:	4613      	mov	r3, r2
 801bce6:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 801bce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 801bcec:	4618      	mov	r0, r3
 801bcee:	370c      	adds	r7, #12
 801bcf0:	46bd      	mov	sp, r7
 801bcf2:	bc80      	pop	{r7}
 801bcf4:	4770      	bx	lr
	...

0801bcf8 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801bcf8:	b580      	push	{r7, lr}
 801bcfa:	b09a      	sub	sp, #104	; 0x68
 801bcfc:	af02      	add	r7, sp, #8
 801bcfe:	60f8      	str	r0, [r7, #12]
 801bd00:	60b9      	str	r1, [r7, #8]
 801bd02:	607a      	str	r2, [r7, #4]
 801bd04:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 801bd06:	2300      	movs	r3, #0
 801bd08:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 801bd0c:	2300      	movs	r3, #0
 801bd0e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801bd12:	2300      	movs	r3, #0
 801bd14:	64fb      	str	r3, [r7, #76]	; 0x4c
 801bd16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bd1a:	2200      	movs	r2, #0
 801bd1c:	601a      	str	r2, [r3, #0]
 801bd1e:	605a      	str	r2, [r3, #4]
 801bd20:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801bd22:	230c      	movs	r3, #12
 801bd24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 801bd28:	2307      	movs	r3, #7
 801bd2a:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801bd2c:	4b47      	ldr	r3, [pc, #284]	; (801be4c <RegionEU868NextChannel+0x154>)
 801bd2e:	681b      	ldr	r3, [r3, #0]
 801bd30:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801bd34:	2201      	movs	r2, #1
 801bd36:	2100      	movs	r1, #0
 801bd38:	4618      	mov	r0, r3
 801bd3a:	f7fe fa3b 	bl	801a1b4 <RegionCommonCountChannels>
 801bd3e:	4603      	mov	r3, r0
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d10a      	bne.n	801bd5a <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801bd44:	4b41      	ldr	r3, [pc, #260]	; (801be4c <RegionEU868NextChannel+0x154>)
 801bd46:	681b      	ldr	r3, [r3, #0]
 801bd48:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 801bd4c:	4b3f      	ldr	r3, [pc, #252]	; (801be4c <RegionEU868NextChannel+0x154>)
 801bd4e:	681b      	ldr	r3, [r3, #0]
 801bd50:	f042 0207 	orr.w	r2, r2, #7
 801bd54:	b292      	uxth	r2, r2
 801bd56:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801bd5a:	68fb      	ldr	r3, [r7, #12]
 801bd5c:	7a5b      	ldrb	r3, [r3, #9]
 801bd5e:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801bd60:	68fb      	ldr	r3, [r7, #12]
 801bd62:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801bd66:	b2db      	uxtb	r3, r3
 801bd68:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801bd6a:	4b38      	ldr	r3, [pc, #224]	; (801be4c <RegionEU868NextChannel+0x154>)
 801bd6c:	681b      	ldr	r3, [r3, #0]
 801bd6e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801bd72:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801bd74:	4b35      	ldr	r3, [pc, #212]	; (801be4c <RegionEU868NextChannel+0x154>)
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801bd7a:	4b35      	ldr	r3, [pc, #212]	; (801be50 <RegionEU868NextChannel+0x158>)
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801bd80:	2310      	movs	r3, #16
 801bd82:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 801bd84:	f107 0312 	add.w	r3, r7, #18
 801bd88:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801bd8a:	68fb      	ldr	r3, [r7, #12]
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801bd90:	68fb      	ldr	r3, [r7, #12]
 801bd92:	685b      	ldr	r3, [r3, #4]
 801bd94:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801bd96:	68fb      	ldr	r3, [r7, #12]
 801bd98:	7a9b      	ldrb	r3, [r3, #10]
 801bd9a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801bd9e:	2306      	movs	r3, #6
 801bda0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801bda4:	68fa      	ldr	r2, [r7, #12]
 801bda6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bdaa:	320c      	adds	r2, #12
 801bdac:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bdb0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801bdb4:	68fb      	ldr	r3, [r7, #12]
 801bdb6:	7d1b      	ldrb	r3, [r3, #20]
 801bdb8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801bdbc:	68fb      	ldr	r3, [r7, #12]
 801bdbe:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801bdc2:	68fb      	ldr	r3, [r7, #12]
 801bdc4:	8adb      	ldrh	r3, [r3, #22]
 801bdc6:	4619      	mov	r1, r3
 801bdc8:	4610      	mov	r0, r2
 801bdca:	f7fe fffd 	bl	801adc8 <GetTimeOnAir>
 801bdce:	4603      	mov	r3, r0
 801bdd0:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801bdd2:	f107 0314 	add.w	r3, r7, #20
 801bdd6:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801bdd8:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 801bddc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801bde0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	9301      	str	r3, [sp, #4]
 801bde8:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 801bdec:	9300      	str	r3, [sp, #0]
 801bdee:	460b      	mov	r3, r1
 801bdf0:	6839      	ldr	r1, [r7, #0]
 801bdf2:	f7fe fe55 	bl	801aaa0 <RegionCommonIdentifyChannels>
 801bdf6:	4603      	mov	r3, r0
 801bdf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801bdfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801be00:	2b00      	cmp	r3, #0
 801be02:	d10e      	bne.n	801be22 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801be04:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801be08:	3b01      	subs	r3, #1
 801be0a:	4619      	mov	r1, r3
 801be0c:	2000      	movs	r0, #0
 801be0e:	f000 f9a9 	bl	801c164 <randr>
 801be12:	4603      	mov	r3, r0
 801be14:	3360      	adds	r3, #96	; 0x60
 801be16:	443b      	add	r3, r7
 801be18:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801be1c:	68bb      	ldr	r3, [r7, #8]
 801be1e:	701a      	strb	r2, [r3, #0]
 801be20:	e00e      	b.n	801be40 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801be22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801be26:	2b0c      	cmp	r3, #12
 801be28:	d10a      	bne.n	801be40 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801be2a:	4b08      	ldr	r3, [pc, #32]	; (801be4c <RegionEU868NextChannel+0x154>)
 801be2c:	681b      	ldr	r3, [r3, #0]
 801be2e:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 801be32:	4b06      	ldr	r3, [pc, #24]	; (801be4c <RegionEU868NextChannel+0x154>)
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	f042 0207 	orr.w	r2, r2, #7
 801be3a:	b292      	uxth	r2, r2
 801be3c:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 801be40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801be44:	4618      	mov	r0, r3
 801be46:	3760      	adds	r7, #96	; 0x60
 801be48:	46bd      	mov	sp, r7
 801be4a:	bd80      	pop	{r7, pc}
 801be4c:	2000239c 	.word	0x2000239c
 801be50:	20002398 	.word	0x20002398

0801be54 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801be54:	b580      	push	{r7, lr}
 801be56:	b084      	sub	sp, #16
 801be58:	af00      	add	r7, sp, #0
 801be5a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801be5c:	2300      	movs	r3, #0
 801be5e:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 801be60:	2300      	movs	r3, #0
 801be62:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 801be64:	2300      	movs	r3, #0
 801be66:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	791b      	ldrb	r3, [r3, #4]
 801be6c:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801be6e:	7b7b      	ldrb	r3, [r7, #13]
 801be70:	2b02      	cmp	r3, #2
 801be72:	d801      	bhi.n	801be78 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801be74:	2306      	movs	r3, #6
 801be76:	e089      	b.n	801bf8c <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 801be78:	7b7b      	ldrb	r3, [r7, #13]
 801be7a:	2b0f      	cmp	r3, #15
 801be7c:	d901      	bls.n	801be82 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801be7e:	2303      	movs	r3, #3
 801be80:	e084      	b.n	801bf8c <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	681b      	ldr	r3, [r3, #0]
 801be86:	7a1b      	ldrb	r3, [r3, #8]
 801be88:	f343 0303 	sbfx	r3, r3, #0, #4
 801be8c:	b25b      	sxtb	r3, r3
 801be8e:	2207      	movs	r2, #7
 801be90:	2100      	movs	r1, #0
 801be92:	4618      	mov	r0, r3
 801be94:	f7fe f93d 	bl	801a112 <RegionCommonValueInRange>
 801be98:	4603      	mov	r3, r0
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d101      	bne.n	801bea2 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801be9e:	2301      	movs	r3, #1
 801bea0:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	7a1b      	ldrb	r3, [r3, #8]
 801bea8:	f343 1303 	sbfx	r3, r3, #4, #4
 801beac:	b25b      	sxtb	r3, r3
 801beae:	2207      	movs	r2, #7
 801beb0:	2100      	movs	r1, #0
 801beb2:	4618      	mov	r0, r3
 801beb4:	f7fe f92d 	bl	801a112 <RegionCommonValueInRange>
 801beb8:	4603      	mov	r3, r0
 801beba:	2b00      	cmp	r3, #0
 801bebc:	d101      	bne.n	801bec2 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801bebe:	2301      	movs	r3, #1
 801bec0:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	681b      	ldr	r3, [r3, #0]
 801bec6:	7a1b      	ldrb	r3, [r3, #8]
 801bec8:	f343 0303 	sbfx	r3, r3, #0, #4
 801becc:	b25a      	sxtb	r2, r3
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	681b      	ldr	r3, [r3, #0]
 801bed2:	7a1b      	ldrb	r3, [r3, #8]
 801bed4:	f343 1303 	sbfx	r3, r3, #4, #4
 801bed8:	b25b      	sxtb	r3, r3
 801beda:	429a      	cmp	r2, r3
 801bedc:	dd01      	ble.n	801bee2 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801bede:	2301      	movs	r3, #1
 801bee0:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801bee2:	7bbb      	ldrb	r3, [r7, #14]
 801bee4:	f083 0301 	eor.w	r3, r3, #1
 801bee8:	b2db      	uxtb	r3, r3
 801beea:	2b00      	cmp	r3, #0
 801beec:	d010      	beq.n	801bf10 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	681b      	ldr	r3, [r3, #0]
 801bef2:	681b      	ldr	r3, [r3, #0]
 801bef4:	f107 020c 	add.w	r2, r7, #12
 801bef8:	4611      	mov	r1, r2
 801befa:	4618      	mov	r0, r3
 801befc:	f7fe feee 	bl	801acdc <VerifyRfFreq>
 801bf00:	4603      	mov	r3, r0
 801bf02:	f083 0301 	eor.w	r3, r3, #1
 801bf06:	b2db      	uxtb	r3, r3
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	d001      	beq.n	801bf10 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801bf0c:	2301      	movs	r3, #1
 801bf0e:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801bf10:	7bfb      	ldrb	r3, [r7, #15]
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	d004      	beq.n	801bf20 <RegionEU868ChannelAdd+0xcc>
 801bf16:	7bbb      	ldrb	r3, [r7, #14]
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	d001      	beq.n	801bf20 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801bf1c:	2306      	movs	r3, #6
 801bf1e:	e035      	b.n	801bf8c <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 801bf20:	7bfb      	ldrb	r3, [r7, #15]
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d001      	beq.n	801bf2a <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801bf26:	2305      	movs	r3, #5
 801bf28:	e030      	b.n	801bf8c <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801bf2a:	7bbb      	ldrb	r3, [r7, #14]
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	d001      	beq.n	801bf34 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801bf30:	2304      	movs	r3, #4
 801bf32:	e02b      	b.n	801bf8c <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 801bf34:	4b17      	ldr	r3, [pc, #92]	; (801bf94 <RegionEU868ChannelAdd+0x140>)
 801bf36:	6819      	ldr	r1, [r3, #0]
 801bf38:	7b7a      	ldrb	r2, [r7, #13]
 801bf3a:	4613      	mov	r3, r2
 801bf3c:	005b      	lsls	r3, r3, #1
 801bf3e:	4413      	add	r3, r2
 801bf40:	009b      	lsls	r3, r3, #2
 801bf42:	18c8      	adds	r0, r1, r3
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	220c      	movs	r2, #12
 801bf4a:	4619      	mov	r1, r3
 801bf4c:	f000 f921 	bl	801c192 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801bf50:	4b10      	ldr	r3, [pc, #64]	; (801bf94 <RegionEU868ChannelAdd+0x140>)
 801bf52:	6819      	ldr	r1, [r3, #0]
 801bf54:	7b7a      	ldrb	r2, [r7, #13]
 801bf56:	7b38      	ldrb	r0, [r7, #12]
 801bf58:	4613      	mov	r3, r2
 801bf5a:	005b      	lsls	r3, r3, #1
 801bf5c:	4413      	add	r3, r2
 801bf5e:	009b      	lsls	r3, r3, #2
 801bf60:	440b      	add	r3, r1
 801bf62:	3309      	adds	r3, #9
 801bf64:	4602      	mov	r2, r0
 801bf66:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 801bf68:	4b0a      	ldr	r3, [pc, #40]	; (801bf94 <RegionEU868ChannelAdd+0x140>)
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 801bf70:	b21a      	sxth	r2, r3
 801bf72:	7b7b      	ldrb	r3, [r7, #13]
 801bf74:	2101      	movs	r1, #1
 801bf76:	fa01 f303 	lsl.w	r3, r1, r3
 801bf7a:	b21b      	sxth	r3, r3
 801bf7c:	4313      	orrs	r3, r2
 801bf7e:	b21a      	sxth	r2, r3
 801bf80:	4b04      	ldr	r3, [pc, #16]	; (801bf94 <RegionEU868ChannelAdd+0x140>)
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	b292      	uxth	r2, r2
 801bf86:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 801bf8a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801bf8c:	4618      	mov	r0, r3
 801bf8e:	3710      	adds	r7, #16
 801bf90:	46bd      	mov	sp, r7
 801bf92:	bd80      	pop	{r7, pc}
 801bf94:	2000239c 	.word	0x2000239c

0801bf98 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 801bf98:	b580      	push	{r7, lr}
 801bf9a:	b086      	sub	sp, #24
 801bf9c:	af00      	add	r7, sp, #0
 801bf9e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	781b      	ldrb	r3, [r3, #0]
 801bfa4:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801bfa6:	7dfb      	ldrb	r3, [r7, #23]
 801bfa8:	2b02      	cmp	r3, #2
 801bfaa:	d801      	bhi.n	801bfb0 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 801bfac:	2300      	movs	r3, #0
 801bfae:	e016      	b.n	801bfde <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801bfb0:	4b0d      	ldr	r3, [pc, #52]	; (801bfe8 <RegionEU868ChannelsRemove+0x50>)
 801bfb2:	6819      	ldr	r1, [r3, #0]
 801bfb4:	7dfa      	ldrb	r2, [r7, #23]
 801bfb6:	4613      	mov	r3, r2
 801bfb8:	005b      	lsls	r3, r3, #1
 801bfba:	4413      	add	r3, r2
 801bfbc:	009b      	lsls	r3, r3, #2
 801bfbe:	440b      	add	r3, r1
 801bfc0:	461a      	mov	r2, r3
 801bfc2:	2300      	movs	r3, #0
 801bfc4:	6013      	str	r3, [r2, #0]
 801bfc6:	6053      	str	r3, [r2, #4]
 801bfc8:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801bfca:	4b07      	ldr	r3, [pc, #28]	; (801bfe8 <RegionEU868ChannelsRemove+0x50>)
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801bfd2:	7df9      	ldrb	r1, [r7, #23]
 801bfd4:	2210      	movs	r2, #16
 801bfd6:	4618      	mov	r0, r3
 801bfd8:	f7fe f8b8 	bl	801a14c <RegionCommonChanDisable>
 801bfdc:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801bfde:	4618      	mov	r0, r3
 801bfe0:	3718      	adds	r7, #24
 801bfe2:	46bd      	mov	sp, r7
 801bfe4:	bd80      	pop	{r7, pc}
 801bfe6:	bf00      	nop
 801bfe8:	2000239c 	.word	0x2000239c

0801bfec <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801bfec:	b590      	push	{r4, r7, lr}
 801bfee:	b085      	sub	sp, #20
 801bff0:	af00      	add	r7, sp, #0
 801bff2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801bffa:	4b20      	ldr	r3, [pc, #128]	; (801c07c <RegionEU868SetContinuousWave+0x90>)
 801bffc:	681a      	ldr	r2, [r3, #0]
 801bffe:	4b20      	ldr	r3, [pc, #128]	; (801c080 <RegionEU868SetContinuousWave+0x94>)
 801c000:	6819      	ldr	r1, [r3, #0]
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	781b      	ldrb	r3, [r3, #0]
 801c006:	461c      	mov	r4, r3
 801c008:	4623      	mov	r3, r4
 801c00a:	005b      	lsls	r3, r3, #1
 801c00c:	4423      	add	r3, r4
 801c00e:	009b      	lsls	r3, r3, #2
 801c010:	440b      	add	r3, r1
 801c012:	3309      	adds	r3, #9
 801c014:	781b      	ldrb	r3, [r3, #0]
 801c016:	4619      	mov	r1, r3
 801c018:	460b      	mov	r3, r1
 801c01a:	005b      	lsls	r3, r3, #1
 801c01c:	440b      	add	r3, r1
 801c01e:	00db      	lsls	r3, r3, #3
 801c020:	4413      	add	r3, r2
 801c022:	3302      	adds	r3, #2
 801c024:	f993 3000 	ldrsb.w	r3, [r3]
 801c028:	4619      	mov	r1, r3
 801c02a:	f7fe fdd9 	bl	801abe0 <RegionCommonLimitTxPower>
 801c02e:	4603      	mov	r3, r0
 801c030:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801c032:	2300      	movs	r3, #0
 801c034:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801c036:	4b12      	ldr	r3, [pc, #72]	; (801c080 <RegionEU868SetContinuousWave+0x94>)
 801c038:	681a      	ldr	r2, [r3, #0]
 801c03a:	687b      	ldr	r3, [r7, #4]
 801c03c:	781b      	ldrb	r3, [r3, #0]
 801c03e:	4619      	mov	r1, r3
 801c040:	460b      	mov	r3, r1
 801c042:	005b      	lsls	r3, r3, #1
 801c044:	440b      	add	r3, r1
 801c046:	009b      	lsls	r3, r3, #2
 801c048:	4413      	add	r3, r2
 801c04a:	681b      	ldr	r3, [r3, #0]
 801c04c:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	6859      	ldr	r1, [r3, #4]
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	689a      	ldr	r2, [r3, #8]
 801c056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c05a:	4618      	mov	r0, r3
 801c05c:	f7fe fbd2 	bl	801a804 <RegionCommonComputeTxPower>
 801c060:	4603      	mov	r3, r0
 801c062:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801c064:	4b07      	ldr	r3, [pc, #28]	; (801c084 <RegionEU868SetContinuousWave+0x98>)
 801c066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c068:	687a      	ldr	r2, [r7, #4]
 801c06a:	8992      	ldrh	r2, [r2, #12]
 801c06c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801c070:	68b8      	ldr	r0, [r7, #8]
 801c072:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 801c074:	bf00      	nop
 801c076:	3714      	adds	r7, #20
 801c078:	46bd      	mov	sp, r7
 801c07a:	bd90      	pop	{r4, r7, pc}
 801c07c:	20002398 	.word	0x20002398
 801c080:	2000239c 	.word	0x2000239c
 801c084:	08021d00 	.word	0x08021d00

0801c088 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801c088:	b480      	push	{r7}
 801c08a:	b085      	sub	sp, #20
 801c08c:	af00      	add	r7, sp, #0
 801c08e:	4603      	mov	r3, r0
 801c090:	71fb      	strb	r3, [r7, #7]
 801c092:	460b      	mov	r3, r1
 801c094:	71bb      	strb	r3, [r7, #6]
 801c096:	4613      	mov	r3, r2
 801c098:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801c09a:	79ba      	ldrb	r2, [r7, #6]
 801c09c:	797b      	ldrb	r3, [r7, #5]
 801c09e:	1ad3      	subs	r3, r2, r3
 801c0a0:	b2db      	uxtb	r3, r3
 801c0a2:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801c0a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	da01      	bge.n	801c0b0 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 801c0ac:	2300      	movs	r3, #0
 801c0ae:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801c0b0:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801c0b2:	4618      	mov	r0, r3
 801c0b4:	3714      	adds	r7, #20
 801c0b6:	46bd      	mov	sp, r7
 801c0b8:	bc80      	pop	{r7}
 801c0ba:	4770      	bx	lr

0801c0bc <RegionEU868RxBeaconSetup>:

void RegionEU868RxBeaconSetup( RxBeaconSetup_t* rxBeaconSetup, uint8_t* outDr )
{
 801c0bc:	b580      	push	{r7, lr}
 801c0be:	b088      	sub	sp, #32
 801c0c0:	af00      	add	r7, sp, #0
 801c0c2:	6078      	str	r0, [r7, #4]
 801c0c4:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RegionCommonRxBeaconSetupParams_t regionCommonRxBeaconSetup;

    regionCommonRxBeaconSetup.Datarates = DataratesEU868;
 801c0c6:	4b0e      	ldr	r3, [pc, #56]	; (801c100 <RegionEU868RxBeaconSetup+0x44>)
 801c0c8:	60fb      	str	r3, [r7, #12]
    regionCommonRxBeaconSetup.Frequency = rxBeaconSetup->Frequency;
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	689b      	ldr	r3, [r3, #8]
 801c0ce:	613b      	str	r3, [r7, #16]
    regionCommonRxBeaconSetup.BeaconSize = EU868_BEACON_SIZE;
 801c0d0:	2311      	movs	r3, #17
 801c0d2:	753b      	strb	r3, [r7, #20]
    regionCommonRxBeaconSetup.BeaconDatarate = EU868_BEACON_CHANNEL_DR;
 801c0d4:	2303      	movs	r3, #3
 801c0d6:	757b      	strb	r3, [r7, #21]
    regionCommonRxBeaconSetup.BeaconChannelBW = EU868_BEACON_CHANNEL_BW;
 801c0d8:	2300      	movs	r3, #0
 801c0da:	75bb      	strb	r3, [r7, #22]
    regionCommonRxBeaconSetup.RxTime = rxBeaconSetup->RxTime;
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	685b      	ldr	r3, [r3, #4]
 801c0e0:	61bb      	str	r3, [r7, #24]
    regionCommonRxBeaconSetup.SymbolTimeout = rxBeaconSetup->SymbolTimeout;
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	881b      	ldrh	r3, [r3, #0]
 801c0e6:	83bb      	strh	r3, [r7, #28]

    RegionCommonRxBeaconSetup( &regionCommonRxBeaconSetup );
 801c0e8:	f107 030c 	add.w	r3, r7, #12
 801c0ec:	4618      	mov	r0, r3
 801c0ee:	f7fe fbbb 	bl	801a868 <RegionCommonRxBeaconSetup>

    // Store downlink datarate
    *outDr = EU868_BEACON_CHANNEL_DR;
 801c0f2:	683b      	ldr	r3, [r7, #0]
 801c0f4:	2203      	movs	r2, #3
 801c0f6:	701a      	strb	r2, [r3, #0]
#endif /* REGION_EU868 */
}
 801c0f8:	bf00      	nop
 801c0fa:	3720      	adds	r7, #32
 801c0fc:	46bd      	mov	sp, r7
 801c0fe:	bd80      	pop	{r7, pc}
 801c100:	08021cc8 	.word	0x08021cc8

0801c104 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801c104:	b480      	push	{r7}
 801c106:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801c108:	4b0d      	ldr	r3, [pc, #52]	; (801c140 <rand1+0x3c>)
 801c10a:	681b      	ldr	r3, [r3, #0]
 801c10c:	4a0d      	ldr	r2, [pc, #52]	; (801c144 <rand1+0x40>)
 801c10e:	fb02 f303 	mul.w	r3, r2, r3
 801c112:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c116:	3339      	adds	r3, #57	; 0x39
 801c118:	4a09      	ldr	r2, [pc, #36]	; (801c140 <rand1+0x3c>)
 801c11a:	6013      	str	r3, [r2, #0]
 801c11c:	4b08      	ldr	r3, [pc, #32]	; (801c140 <rand1+0x3c>)
 801c11e:	681a      	ldr	r2, [r3, #0]
 801c120:	2303      	movs	r3, #3
 801c122:	fba3 1302 	umull	r1, r3, r3, r2
 801c126:	1ad1      	subs	r1, r2, r3
 801c128:	0849      	lsrs	r1, r1, #1
 801c12a:	440b      	add	r3, r1
 801c12c:	0f99      	lsrs	r1, r3, #30
 801c12e:	460b      	mov	r3, r1
 801c130:	07db      	lsls	r3, r3, #31
 801c132:	1a5b      	subs	r3, r3, r1
 801c134:	1ad1      	subs	r1, r2, r3
 801c136:	460b      	mov	r3, r1
}
 801c138:	4618      	mov	r0, r3
 801c13a:	46bd      	mov	sp, r7
 801c13c:	bc80      	pop	{r7}
 801c13e:	4770      	bx	lr
 801c140:	2000015c 	.word	0x2000015c
 801c144:	41c64e6d 	.word	0x41c64e6d

0801c148 <srand1>:

void srand1( uint32_t seed )
{
 801c148:	b480      	push	{r7}
 801c14a:	b083      	sub	sp, #12
 801c14c:	af00      	add	r7, sp, #0
 801c14e:	6078      	str	r0, [r7, #4]
    next = seed;
 801c150:	4a03      	ldr	r2, [pc, #12]	; (801c160 <srand1+0x18>)
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	6013      	str	r3, [r2, #0]
}
 801c156:	bf00      	nop
 801c158:	370c      	adds	r7, #12
 801c15a:	46bd      	mov	sp, r7
 801c15c:	bc80      	pop	{r7}
 801c15e:	4770      	bx	lr
 801c160:	2000015c 	.word	0x2000015c

0801c164 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801c164:	b580      	push	{r7, lr}
 801c166:	b082      	sub	sp, #8
 801c168:	af00      	add	r7, sp, #0
 801c16a:	6078      	str	r0, [r7, #4]
 801c16c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801c16e:	f7ff ffc9 	bl	801c104 <rand1>
 801c172:	4602      	mov	r2, r0
 801c174:	6839      	ldr	r1, [r7, #0]
 801c176:	687b      	ldr	r3, [r7, #4]
 801c178:	1acb      	subs	r3, r1, r3
 801c17a:	3301      	adds	r3, #1
 801c17c:	fb92 f1f3 	sdiv	r1, r2, r3
 801c180:	fb01 f303 	mul.w	r3, r1, r3
 801c184:	1ad2      	subs	r2, r2, r3
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	4413      	add	r3, r2
}
 801c18a:	4618      	mov	r0, r3
 801c18c:	3708      	adds	r7, #8
 801c18e:	46bd      	mov	sp, r7
 801c190:	bd80      	pop	{r7, pc}

0801c192 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801c192:	b480      	push	{r7}
 801c194:	b085      	sub	sp, #20
 801c196:	af00      	add	r7, sp, #0
 801c198:	60f8      	str	r0, [r7, #12]
 801c19a:	60b9      	str	r1, [r7, #8]
 801c19c:	4613      	mov	r3, r2
 801c19e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801c1a0:	e007      	b.n	801c1b2 <memcpy1+0x20>
    {
        *dst++ = *src++;
 801c1a2:	68ba      	ldr	r2, [r7, #8]
 801c1a4:	1c53      	adds	r3, r2, #1
 801c1a6:	60bb      	str	r3, [r7, #8]
 801c1a8:	68fb      	ldr	r3, [r7, #12]
 801c1aa:	1c59      	adds	r1, r3, #1
 801c1ac:	60f9      	str	r1, [r7, #12]
 801c1ae:	7812      	ldrb	r2, [r2, #0]
 801c1b0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801c1b2:	88fb      	ldrh	r3, [r7, #6]
 801c1b4:	1e5a      	subs	r2, r3, #1
 801c1b6:	80fa      	strh	r2, [r7, #6]
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	d1f2      	bne.n	801c1a2 <memcpy1+0x10>
    }
}
 801c1bc:	bf00      	nop
 801c1be:	bf00      	nop
 801c1c0:	3714      	adds	r7, #20
 801c1c2:	46bd      	mov	sp, r7
 801c1c4:	bc80      	pop	{r7}
 801c1c6:	4770      	bx	lr

0801c1c8 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801c1c8:	b480      	push	{r7}
 801c1ca:	b085      	sub	sp, #20
 801c1cc:	af00      	add	r7, sp, #0
 801c1ce:	60f8      	str	r0, [r7, #12]
 801c1d0:	60b9      	str	r1, [r7, #8]
 801c1d2:	4613      	mov	r3, r2
 801c1d4:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801c1d6:	88fb      	ldrh	r3, [r7, #6]
 801c1d8:	3b01      	subs	r3, #1
 801c1da:	68fa      	ldr	r2, [r7, #12]
 801c1dc:	4413      	add	r3, r2
 801c1de:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801c1e0:	e007      	b.n	801c1f2 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801c1e2:	68ba      	ldr	r2, [r7, #8]
 801c1e4:	1c53      	adds	r3, r2, #1
 801c1e6:	60bb      	str	r3, [r7, #8]
 801c1e8:	68fb      	ldr	r3, [r7, #12]
 801c1ea:	1e59      	subs	r1, r3, #1
 801c1ec:	60f9      	str	r1, [r7, #12]
 801c1ee:	7812      	ldrb	r2, [r2, #0]
 801c1f0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801c1f2:	88fb      	ldrh	r3, [r7, #6]
 801c1f4:	1e5a      	subs	r2, r3, #1
 801c1f6:	80fa      	strh	r2, [r7, #6]
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d1f2      	bne.n	801c1e2 <memcpyr+0x1a>
    }
}
 801c1fc:	bf00      	nop
 801c1fe:	bf00      	nop
 801c200:	3714      	adds	r7, #20
 801c202:	46bd      	mov	sp, r7
 801c204:	bc80      	pop	{r7}
 801c206:	4770      	bx	lr

0801c208 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801c208:	b480      	push	{r7}
 801c20a:	b083      	sub	sp, #12
 801c20c:	af00      	add	r7, sp, #0
 801c20e:	6078      	str	r0, [r7, #4]
 801c210:	460b      	mov	r3, r1
 801c212:	70fb      	strb	r3, [r7, #3]
 801c214:	4613      	mov	r3, r2
 801c216:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801c218:	e004      	b.n	801c224 <memset1+0x1c>
    {
        *dst++ = value;
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	1c5a      	adds	r2, r3, #1
 801c21e:	607a      	str	r2, [r7, #4]
 801c220:	78fa      	ldrb	r2, [r7, #3]
 801c222:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801c224:	883b      	ldrh	r3, [r7, #0]
 801c226:	1e5a      	subs	r2, r3, #1
 801c228:	803a      	strh	r2, [r7, #0]
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d1f5      	bne.n	801c21a <memset1+0x12>
    }
}
 801c22e:	bf00      	nop
 801c230:	bf00      	nop
 801c232:	370c      	adds	r7, #12
 801c234:	46bd      	mov	sp, r7
 801c236:	bc80      	pop	{r7}
 801c238:	4770      	bx	lr
	...

0801c23c <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801c23c:	b480      	push	{r7}
 801c23e:	b085      	sub	sp, #20
 801c240:	af00      	add	r7, sp, #0
 801c242:	6078      	str	r0, [r7, #4]
 801c244:	460b      	mov	r3, r1
 801c246:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801c248:	f04f 33ff 	mov.w	r3, #4294967295
 801c24c:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	2b00      	cmp	r3, #0
 801c252:	d101      	bne.n	801c258 <Crc32+0x1c>
    {
        return 0;
 801c254:	2300      	movs	r3, #0
 801c256:	e026      	b.n	801c2a6 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801c258:	2300      	movs	r3, #0
 801c25a:	817b      	strh	r3, [r7, #10]
 801c25c:	e01d      	b.n	801c29a <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801c25e:	897b      	ldrh	r3, [r7, #10]
 801c260:	687a      	ldr	r2, [r7, #4]
 801c262:	4413      	add	r3, r2
 801c264:	781b      	ldrb	r3, [r3, #0]
 801c266:	461a      	mov	r2, r3
 801c268:	68fb      	ldr	r3, [r7, #12]
 801c26a:	4053      	eors	r3, r2
 801c26c:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801c26e:	2300      	movs	r3, #0
 801c270:	813b      	strh	r3, [r7, #8]
 801c272:	e00c      	b.n	801c28e <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801c274:	68fb      	ldr	r3, [r7, #12]
 801c276:	085a      	lsrs	r2, r3, #1
 801c278:	68fb      	ldr	r3, [r7, #12]
 801c27a:	f003 0301 	and.w	r3, r3, #1
 801c27e:	425b      	negs	r3, r3
 801c280:	490b      	ldr	r1, [pc, #44]	; (801c2b0 <Crc32+0x74>)
 801c282:	400b      	ands	r3, r1
 801c284:	4053      	eors	r3, r2
 801c286:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801c288:	893b      	ldrh	r3, [r7, #8]
 801c28a:	3301      	adds	r3, #1
 801c28c:	813b      	strh	r3, [r7, #8]
 801c28e:	893b      	ldrh	r3, [r7, #8]
 801c290:	2b07      	cmp	r3, #7
 801c292:	d9ef      	bls.n	801c274 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801c294:	897b      	ldrh	r3, [r7, #10]
 801c296:	3301      	adds	r3, #1
 801c298:	817b      	strh	r3, [r7, #10]
 801c29a:	897a      	ldrh	r2, [r7, #10]
 801c29c:	887b      	ldrh	r3, [r7, #2]
 801c29e:	429a      	cmp	r2, r3
 801c2a0:	d3dd      	bcc.n	801c25e <Crc32+0x22>
        }
    }

    return ~crc;
 801c2a2:	68fb      	ldr	r3, [r7, #12]
 801c2a4:	43db      	mvns	r3, r3
}
 801c2a6:	4618      	mov	r0, r3
 801c2a8:	3714      	adds	r7, #20
 801c2aa:	46bd      	mov	sp, r7
 801c2ac:	bc80      	pop	{r7}
 801c2ae:	4770      	bx	lr
 801c2b0:	edb88320 	.word	0xedb88320

0801c2b4 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801c2b4:	b580      	push	{r7, lr}
 801c2b6:	b084      	sub	sp, #16
 801c2b8:	af02      	add	r7, sp, #8
 801c2ba:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801c2bc:	4a24      	ldr	r2, [pc, #144]	; (801c350 <RadioInit+0x9c>)
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801c2c2:	4b24      	ldr	r3, [pc, #144]	; (801c354 <RadioInit+0xa0>)
 801c2c4:	2200      	movs	r2, #0
 801c2c6:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801c2c8:	4b22      	ldr	r3, [pc, #136]	; (801c354 <RadioInit+0xa0>)
 801c2ca:	2200      	movs	r2, #0
 801c2cc:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801c2ce:	4b21      	ldr	r3, [pc, #132]	; (801c354 <RadioInit+0xa0>)
 801c2d0:	2200      	movs	r2, #0
 801c2d2:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801c2d4:	4b1f      	ldr	r3, [pc, #124]	; (801c354 <RadioInit+0xa0>)
 801c2d6:	2200      	movs	r2, #0
 801c2d8:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 801c2da:	481f      	ldr	r0, [pc, #124]	; (801c358 <RadioInit+0xa4>)
 801c2dc:	f001 ff88 	bl	801e1f0 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801c2e0:	4b1c      	ldr	r3, [pc, #112]	; (801c354 <RadioInit+0xa0>)
 801c2e2:	2200      	movs	r2, #0
 801c2e4:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801c2e6:	4b1b      	ldr	r3, [pc, #108]	; (801c354 <RadioInit+0xa0>)
 801c2e8:	2200      	movs	r2, #0
 801c2ea:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 801c2ec:	f002 fa16 	bl	801e71c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801c2f0:	2100      	movs	r1, #0
 801c2f2:	2000      	movs	r0, #0
 801c2f4:	f002 fdde 	bl	801eeb4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801c2f8:	2204      	movs	r2, #4
 801c2fa:	2100      	movs	r1, #0
 801c2fc:	2001      	movs	r0, #1
 801c2fe:	f002 fb9b 	bl	801ea38 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801c302:	2300      	movs	r3, #0
 801c304:	2200      	movs	r2, #0
 801c306:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c30a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801c30e:	f002 facb 	bl	801e8a8 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801c312:	f000 fe83 	bl	801d01c <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801c316:	2300      	movs	r3, #0
 801c318:	9300      	str	r3, [sp, #0]
 801c31a:	4b10      	ldr	r3, [pc, #64]	; (801c35c <RadioInit+0xa8>)
 801c31c:	2200      	movs	r2, #0
 801c31e:	f04f 31ff 	mov.w	r1, #4294967295
 801c322:	480f      	ldr	r0, [pc, #60]	; (801c360 <RadioInit+0xac>)
 801c324:	f003 ffdc 	bl	80202e0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801c328:	2300      	movs	r3, #0
 801c32a:	9300      	str	r3, [sp, #0]
 801c32c:	4b0d      	ldr	r3, [pc, #52]	; (801c364 <RadioInit+0xb0>)
 801c32e:	2200      	movs	r2, #0
 801c330:	f04f 31ff 	mov.w	r1, #4294967295
 801c334:	480c      	ldr	r0, [pc, #48]	; (801c368 <RadioInit+0xb4>)
 801c336:	f003 ffd3 	bl	80202e0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801c33a:	4809      	ldr	r0, [pc, #36]	; (801c360 <RadioInit+0xac>)
 801c33c:	f004 f874 	bl	8020428 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801c340:	4809      	ldr	r0, [pc, #36]	; (801c368 <RadioInit+0xb4>)
 801c342:	f004 f871 	bl	8020428 <UTIL_TIMER_Stop>
}
 801c346:	bf00      	nop
 801c348:	3708      	adds	r7, #8
 801c34a:	46bd      	mov	sp, r7
 801c34c:	bd80      	pop	{r7, pc}
 801c34e:	bf00      	nop
 801c350:	200024a0 	.word	0x200024a0
 801c354:	200024a4 	.word	0x200024a4
 801c358:	0801d409 	.word	0x0801d409
 801c35c:	0801d391 	.word	0x0801d391
 801c360:	20002500 	.word	0x20002500
 801c364:	0801d3a5 	.word	0x0801d3a5
 801c368:	20002518 	.word	0x20002518

0801c36c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801c36c:	b580      	push	{r7, lr}
 801c36e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801c370:	f001 ff80 	bl	801e274 <SUBGRF_GetOperatingMode>
 801c374:	4603      	mov	r3, r0
 801c376:	2b07      	cmp	r3, #7
 801c378:	d00a      	beq.n	801c390 <RadioGetStatus+0x24>
 801c37a:	2b07      	cmp	r3, #7
 801c37c:	dc0a      	bgt.n	801c394 <RadioGetStatus+0x28>
 801c37e:	2b04      	cmp	r3, #4
 801c380:	d002      	beq.n	801c388 <RadioGetStatus+0x1c>
 801c382:	2b05      	cmp	r3, #5
 801c384:	d002      	beq.n	801c38c <RadioGetStatus+0x20>
 801c386:	e005      	b.n	801c394 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801c388:	2302      	movs	r3, #2
 801c38a:	e004      	b.n	801c396 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801c38c:	2301      	movs	r3, #1
 801c38e:	e002      	b.n	801c396 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801c390:	2303      	movs	r3, #3
 801c392:	e000      	b.n	801c396 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801c394:	2300      	movs	r3, #0
    }
}
 801c396:	4618      	mov	r0, r3
 801c398:	bd80      	pop	{r7, pc}
	...

0801c39c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801c39c:	b580      	push	{r7, lr}
 801c39e:	b082      	sub	sp, #8
 801c3a0:	af00      	add	r7, sp, #0
 801c3a2:	4603      	mov	r3, r0
 801c3a4:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801c3a6:	4a2a      	ldr	r2, [pc, #168]	; (801c450 <RadioSetModem+0xb4>)
 801c3a8:	79fb      	ldrb	r3, [r7, #7]
 801c3aa:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801c3ac:	79fb      	ldrb	r3, [r7, #7]
 801c3ae:	4618      	mov	r0, r3
 801c3b0:	f003 f943 	bl	801f63a <RFW_SetRadioModem>
    switch( modem )
 801c3b4:	79fb      	ldrb	r3, [r7, #7]
 801c3b6:	2b05      	cmp	r3, #5
 801c3b8:	d80e      	bhi.n	801c3d8 <RadioSetModem+0x3c>
 801c3ba:	a201      	add	r2, pc, #4	; (adr r2, 801c3c0 <RadioSetModem+0x24>)
 801c3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c3c0:	0801c3e7 	.word	0x0801c3e7
 801c3c4:	0801c3f5 	.word	0x0801c3f5
 801c3c8:	0801c3d9 	.word	0x0801c3d9
 801c3cc:	0801c41b 	.word	0x0801c41b
 801c3d0:	0801c429 	.word	0x0801c429
 801c3d4:	0801c437 	.word	0x0801c437
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801c3d8:	2003      	movs	r0, #3
 801c3da:	f002 fb07 	bl	801e9ec <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801c3de:	4b1c      	ldr	r3, [pc, #112]	; (801c450 <RadioSetModem+0xb4>)
 801c3e0:	2200      	movs	r2, #0
 801c3e2:	735a      	strb	r2, [r3, #13]
        break;
 801c3e4:	e02f      	b.n	801c446 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801c3e6:	2000      	movs	r0, #0
 801c3e8:	f002 fb00 	bl	801e9ec <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801c3ec:	4b18      	ldr	r3, [pc, #96]	; (801c450 <RadioSetModem+0xb4>)
 801c3ee:	2200      	movs	r2, #0
 801c3f0:	735a      	strb	r2, [r3, #13]
        break;
 801c3f2:	e028      	b.n	801c446 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801c3f4:	2001      	movs	r0, #1
 801c3f6:	f002 faf9 	bl	801e9ec <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801c3fa:	4b15      	ldr	r3, [pc, #84]	; (801c450 <RadioSetModem+0xb4>)
 801c3fc:	7b5a      	ldrb	r2, [r3, #13]
 801c3fe:	4b14      	ldr	r3, [pc, #80]	; (801c450 <RadioSetModem+0xb4>)
 801c400:	7b1b      	ldrb	r3, [r3, #12]
 801c402:	429a      	cmp	r2, r3
 801c404:	d01e      	beq.n	801c444 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801c406:	4b12      	ldr	r3, [pc, #72]	; (801c450 <RadioSetModem+0xb4>)
 801c408:	7b1a      	ldrb	r2, [r3, #12]
 801c40a:	4b11      	ldr	r3, [pc, #68]	; (801c450 <RadioSetModem+0xb4>)
 801c40c:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801c40e:	4b10      	ldr	r3, [pc, #64]	; (801c450 <RadioSetModem+0xb4>)
 801c410:	7b5b      	ldrb	r3, [r3, #13]
 801c412:	4618      	mov	r0, r3
 801c414:	f000 ff86 	bl	801d324 <RadioSetPublicNetwork>
        }
        break;
 801c418:	e014      	b.n	801c444 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801c41a:	2002      	movs	r0, #2
 801c41c:	f002 fae6 	bl	801e9ec <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801c420:	4b0b      	ldr	r3, [pc, #44]	; (801c450 <RadioSetModem+0xb4>)
 801c422:	2200      	movs	r2, #0
 801c424:	735a      	strb	r2, [r3, #13]
        break;
 801c426:	e00e      	b.n	801c446 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801c428:	2002      	movs	r0, #2
 801c42a:	f002 fadf 	bl	801e9ec <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801c42e:	4b08      	ldr	r3, [pc, #32]	; (801c450 <RadioSetModem+0xb4>)
 801c430:	2200      	movs	r2, #0
 801c432:	735a      	strb	r2, [r3, #13]
        break;
 801c434:	e007      	b.n	801c446 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801c436:	2000      	movs	r0, #0
 801c438:	f002 fad8 	bl	801e9ec <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801c43c:	4b04      	ldr	r3, [pc, #16]	; (801c450 <RadioSetModem+0xb4>)
 801c43e:	2200      	movs	r2, #0
 801c440:	735a      	strb	r2, [r3, #13]
        break;
 801c442:	e000      	b.n	801c446 <RadioSetModem+0xaa>
        break;
 801c444:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801c446:	bf00      	nop
 801c448:	3708      	adds	r7, #8
 801c44a:	46bd      	mov	sp, r7
 801c44c:	bd80      	pop	{r7, pc}
 801c44e:	bf00      	nop
 801c450:	200024a4 	.word	0x200024a4

0801c454 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801c454:	b580      	push	{r7, lr}
 801c456:	b082      	sub	sp, #8
 801c458:	af00      	add	r7, sp, #0
 801c45a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801c45c:	6878      	ldr	r0, [r7, #4]
 801c45e:	f002 fa7f 	bl	801e960 <SUBGRF_SetRfFrequency>
}
 801c462:	bf00      	nop
 801c464:	3708      	adds	r7, #8
 801c466:	46bd      	mov	sp, r7
 801c468:	bd80      	pop	{r7, pc}

0801c46a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801c46a:	b580      	push	{r7, lr}
 801c46c:	b090      	sub	sp, #64	; 0x40
 801c46e:	af0a      	add	r7, sp, #40	; 0x28
 801c470:	60f8      	str	r0, [r7, #12]
 801c472:	60b9      	str	r1, [r7, #8]
 801c474:	603b      	str	r3, [r7, #0]
 801c476:	4613      	mov	r3, r2
 801c478:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801c47a:	2301      	movs	r3, #1
 801c47c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801c47e:	2300      	movs	r3, #0
 801c480:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801c482:	2300      	movs	r3, #0
 801c484:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801c486:	f000 fddc 	bl	801d042 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801c48a:	2000      	movs	r0, #0
 801c48c:	f7ff ff86 	bl	801c39c <RadioSetModem>

    RadioSetChannel( freq );
 801c490:	68f8      	ldr	r0, [r7, #12]
 801c492:	f7ff ffdf 	bl	801c454 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801c496:	2301      	movs	r3, #1
 801c498:	9309      	str	r3, [sp, #36]	; 0x24
 801c49a:	2300      	movs	r3, #0
 801c49c:	9308      	str	r3, [sp, #32]
 801c49e:	2300      	movs	r3, #0
 801c4a0:	9307      	str	r3, [sp, #28]
 801c4a2:	2300      	movs	r3, #0
 801c4a4:	9306      	str	r3, [sp, #24]
 801c4a6:	2300      	movs	r3, #0
 801c4a8:	9305      	str	r3, [sp, #20]
 801c4aa:	2300      	movs	r3, #0
 801c4ac:	9304      	str	r3, [sp, #16]
 801c4ae:	2300      	movs	r3, #0
 801c4b0:	9303      	str	r3, [sp, #12]
 801c4b2:	2300      	movs	r3, #0
 801c4b4:	9302      	str	r3, [sp, #8]
 801c4b6:	2303      	movs	r3, #3
 801c4b8:	9301      	str	r3, [sp, #4]
 801c4ba:	68bb      	ldr	r3, [r7, #8]
 801c4bc:	9300      	str	r3, [sp, #0]
 801c4be:	2300      	movs	r3, #0
 801c4c0:	f44f 7216 	mov.w	r2, #600	; 0x258
 801c4c4:	68b9      	ldr	r1, [r7, #8]
 801c4c6:	2000      	movs	r0, #0
 801c4c8:	f000 f83c 	bl	801c544 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801c4cc:	2000      	movs	r0, #0
 801c4ce:	f000 fdbf 	bl	801d050 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801c4d2:	f000 ff55 	bl	801d380 <RadioGetWakeupTime>
 801c4d6:	4603      	mov	r3, r0
 801c4d8:	4618      	mov	r0, r3
 801c4da:	f7e6 fda3 	bl	8003024 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801c4de:	f004 f8bd 	bl	802065c <UTIL_TIMER_GetCurrentTime>
 801c4e2:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801c4e4:	e00d      	b.n	801c502 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801c4e6:	2000      	movs	r0, #0
 801c4e8:	f000 fe9a 	bl	801d220 <RadioRssi>
 801c4ec:	4603      	mov	r3, r0
 801c4ee:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801c4f0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801c4f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c4f8:	429a      	cmp	r2, r3
 801c4fa:	dd02      	ble.n	801c502 <RadioIsChannelFree+0x98>
        {
            status = false;
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	75fb      	strb	r3, [r7, #23]
            break;
 801c500:	e006      	b.n	801c510 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801c502:	6938      	ldr	r0, [r7, #16]
 801c504:	f004 f8bc 	bl	8020680 <UTIL_TIMER_GetElapsedTime>
 801c508:	4602      	mov	r2, r0
 801c50a:	683b      	ldr	r3, [r7, #0]
 801c50c:	4293      	cmp	r3, r2
 801c50e:	d8ea      	bhi.n	801c4e6 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801c510:	f000 fd97 	bl	801d042 <RadioStandby>

    return status;
 801c514:	7dfb      	ldrb	r3, [r7, #23]
}
 801c516:	4618      	mov	r0, r3
 801c518:	3718      	adds	r7, #24
 801c51a:	46bd      	mov	sp, r7
 801c51c:	bd80      	pop	{r7, pc}

0801c51e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801c51e:	b580      	push	{r7, lr}
 801c520:	b082      	sub	sp, #8
 801c522:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801c524:	2300      	movs	r3, #0
 801c526:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801c528:	2300      	movs	r3, #0
 801c52a:	2200      	movs	r2, #0
 801c52c:	2100      	movs	r1, #0
 801c52e:	2000      	movs	r0, #0
 801c530:	f002 f9ba 	bl	801e8a8 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801c534:	f001 ff6f 	bl	801e416 <SUBGRF_GetRandom>
 801c538:	6078      	str	r0, [r7, #4]

    return rnd;
 801c53a:	687b      	ldr	r3, [r7, #4]
}
 801c53c:	4618      	mov	r0, r3
 801c53e:	3708      	adds	r7, #8
 801c540:	46bd      	mov	sp, r7
 801c542:	bd80      	pop	{r7, pc}

0801c544 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801c544:	b580      	push	{r7, lr}
 801c546:	b08a      	sub	sp, #40	; 0x28
 801c548:	af00      	add	r7, sp, #0
 801c54a:	60b9      	str	r1, [r7, #8]
 801c54c:	607a      	str	r2, [r7, #4]
 801c54e:	461a      	mov	r2, r3
 801c550:	4603      	mov	r3, r0
 801c552:	73fb      	strb	r3, [r7, #15]
 801c554:	4613      	mov	r3, r2
 801c556:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801c558:	4ab9      	ldr	r2, [pc, #740]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c55a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801c55e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801c560:	f003 f829 	bl	801f5b6 <RFW_DeInit>
    if( rxContinuous == true )
 801c564:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801c568:	2b00      	cmp	r3, #0
 801c56a:	d001      	beq.n	801c570 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801c56c:	2300      	movs	r3, #0
 801c56e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801c570:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801c574:	2b00      	cmp	r3, #0
 801c576:	d004      	beq.n	801c582 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801c578:	4ab2      	ldr	r2, [pc, #712]	; (801c844 <RadioSetRxConfig+0x300>)
 801c57a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801c57e:	7013      	strb	r3, [r2, #0]
 801c580:	e002      	b.n	801c588 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801c582:	4bb0      	ldr	r3, [pc, #704]	; (801c844 <RadioSetRxConfig+0x300>)
 801c584:	22ff      	movs	r2, #255	; 0xff
 801c586:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801c588:	7bfb      	ldrb	r3, [r7, #15]
 801c58a:	2b05      	cmp	r3, #5
 801c58c:	d009      	beq.n	801c5a2 <RadioSetRxConfig+0x5e>
 801c58e:	2b05      	cmp	r3, #5
 801c590:	f300 81ca 	bgt.w	801c928 <RadioSetRxConfig+0x3e4>
 801c594:	2b00      	cmp	r3, #0
 801c596:	f000 80bf 	beq.w	801c718 <RadioSetRxConfig+0x1d4>
 801c59a:	2b01      	cmp	r3, #1
 801c59c:	f000 8124 	beq.w	801c7e8 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801c5a0:	e1c2      	b.n	801c928 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801c5a2:	2001      	movs	r0, #1
 801c5a4:	f002 f87c 	bl	801e6a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801c5a8:	4ba5      	ldr	r3, [pc, #660]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c5aa:	2200      	movs	r2, #0
 801c5ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801c5b0:	4aa3      	ldr	r2, [pc, #652]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801c5b6:	4ba2      	ldr	r3, [pc, #648]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c5b8:	2209      	movs	r2, #9
 801c5ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801c5be:	4ba0      	ldr	r3, [pc, #640]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c5c0:	f44f 7248 	mov.w	r2, #800	; 0x320
 801c5c4:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801c5c6:	68b8      	ldr	r0, [r7, #8]
 801c5c8:	f002 ff28 	bl	801f41c <SUBGRF_GetFskBandwidthRegValue>
 801c5cc:	4603      	mov	r3, r0
 801c5ce:	461a      	mov	r2, r3
 801c5d0:	4b9b      	ldr	r3, [pc, #620]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c5d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801c5d6:	4b9a      	ldr	r3, [pc, #616]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c5d8:	2200      	movs	r2, #0
 801c5da:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801c5dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c5de:	00db      	lsls	r3, r3, #3
 801c5e0:	b29a      	uxth	r2, r3
 801c5e2:	4b97      	ldr	r3, [pc, #604]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c5e4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801c5e6:	4b96      	ldr	r3, [pc, #600]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c5e8:	2200      	movs	r2, #0
 801c5ea:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801c5ec:	4b94      	ldr	r3, [pc, #592]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c5ee:	2210      	movs	r2, #16
 801c5f0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801c5f2:	4b93      	ldr	r3, [pc, #588]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c5f4:	2200      	movs	r2, #0
 801c5f6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801c5f8:	4b91      	ldr	r3, [pc, #580]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c5fa:	2200      	movs	r2, #0
 801c5fc:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801c5fe:	4b91      	ldr	r3, [pc, #580]	; (801c844 <RadioSetRxConfig+0x300>)
 801c600:	781a      	ldrb	r2, [r3, #0]
 801c602:	4b8f      	ldr	r3, [pc, #572]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c604:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801c606:	4b8e      	ldr	r3, [pc, #568]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c608:	2201      	movs	r2, #1
 801c60a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801c60c:	4b8c      	ldr	r3, [pc, #560]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c60e:	2200      	movs	r2, #0
 801c610:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801c612:	2005      	movs	r0, #5
 801c614:	f7ff fec2 	bl	801c39c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c618:	488b      	ldr	r0, [pc, #556]	; (801c848 <RadioSetRxConfig+0x304>)
 801c61a:	f002 fadb 	bl	801ebd4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c61e:	488b      	ldr	r0, [pc, #556]	; (801c84c <RadioSetRxConfig+0x308>)
 801c620:	f002 fbaa 	bl	801ed78 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801c624:	4a8a      	ldr	r2, [pc, #552]	; (801c850 <RadioSetRxConfig+0x30c>)
 801c626:	f107 031c 	add.w	r3, r7, #28
 801c62a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c62e:	e883 0003 	stmia.w	r3, {r0, r1}
 801c632:	f107 031c 	add.w	r3, r7, #28
 801c636:	4618      	mov	r0, r3
 801c638:	f001 fe6b 	bl	801e312 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801c63c:	f240 10ff 	movw	r0, #511	; 0x1ff
 801c640:	f001 feb6 	bl	801e3b0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801c644:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801c648:	f000 fe09 	bl	801d25e <RadioRead>
 801c64c:	4603      	mov	r3, r0
 801c64e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801c652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c656:	f023 0310 	bic.w	r3, r3, #16
 801c65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801c65e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c662:	4619      	mov	r1, r3
 801c664:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801c668:	f000 fde7 	bl	801d23a <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801c66c:	2104      	movs	r1, #4
 801c66e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801c672:	f000 fde2 	bl	801d23a <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801c676:	f640 009b 	movw	r0, #2203	; 0x89b
 801c67a:	f000 fdf0 	bl	801d25e <RadioRead>
 801c67e:	4603      	mov	r3, r0
 801c680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801c684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c688:	f023 031c 	bic.w	r3, r3, #28
 801c68c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801c690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c694:	f043 0308 	orr.w	r3, r3, #8
 801c698:	b2db      	uxtb	r3, r3
 801c69a:	4619      	mov	r1, r3
 801c69c:	f640 009b 	movw	r0, #2203	; 0x89b
 801c6a0:	f000 fdcb 	bl	801d23a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801c6a4:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801c6a8:	f000 fdd9 	bl	801d25e <RadioRead>
 801c6ac:	4603      	mov	r3, r0
 801c6ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801c6b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c6b6:	f023 0318 	bic.w	r3, r3, #24
 801c6ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801c6be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c6c2:	f043 0318 	orr.w	r3, r3, #24
 801c6c6:	b2db      	uxtb	r3, r3
 801c6c8:	4619      	mov	r1, r3
 801c6ca:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801c6ce:	f000 fdb4 	bl	801d23a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801c6d2:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801c6d6:	f000 fdc2 	bl	801d25e <RadioRead>
 801c6da:	4603      	mov	r3, r0
 801c6dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801c6e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c6e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c6e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801c6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c6f0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801c6f4:	b2db      	uxtb	r3, r3
 801c6f6:	4619      	mov	r1, r3
 801c6f8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801c6fc:	f000 fd9d 	bl	801d23a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801c700:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801c702:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801c706:	fb02 f303 	mul.w	r3, r2, r3
 801c70a:	461a      	mov	r2, r3
 801c70c:	687b      	ldr	r3, [r7, #4]
 801c70e:	fbb2 f3f3 	udiv	r3, r2, r3
 801c712:	4a4b      	ldr	r2, [pc, #300]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c714:	6093      	str	r3, [r2, #8]
            break;
 801c716:	e108      	b.n	801c92a <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801c718:	2000      	movs	r0, #0
 801c71a:	f001 ffc1 	bl	801e6a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801c71e:	4b48      	ldr	r3, [pc, #288]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c720:	2200      	movs	r2, #0
 801c722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801c726:	4a46      	ldr	r2, [pc, #280]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c728:	687b      	ldr	r3, [r7, #4]
 801c72a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801c72c:	4b44      	ldr	r3, [pc, #272]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c72e:	220b      	movs	r2, #11
 801c730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801c734:	68b8      	ldr	r0, [r7, #8]
 801c736:	f002 fe71 	bl	801f41c <SUBGRF_GetFskBandwidthRegValue>
 801c73a:	4603      	mov	r3, r0
 801c73c:	461a      	mov	r2, r3
 801c73e:	4b40      	ldr	r3, [pc, #256]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801c744:	4b3e      	ldr	r3, [pc, #248]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c746:	2200      	movs	r2, #0
 801c748:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801c74a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c74c:	00db      	lsls	r3, r3, #3
 801c74e:	b29a      	uxth	r2, r3
 801c750:	4b3b      	ldr	r3, [pc, #236]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c752:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801c754:	4b3a      	ldr	r3, [pc, #232]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c756:	2204      	movs	r2, #4
 801c758:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801c75a:	4b39      	ldr	r3, [pc, #228]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c75c:	2218      	movs	r2, #24
 801c75e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801c760:	4b37      	ldr	r3, [pc, #220]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c762:	2200      	movs	r2, #0
 801c764:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801c766:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801c76a:	f083 0301 	eor.w	r3, r3, #1
 801c76e:	b2db      	uxtb	r3, r3
 801c770:	461a      	mov	r2, r3
 801c772:	4b33      	ldr	r3, [pc, #204]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c774:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801c776:	4b33      	ldr	r3, [pc, #204]	; (801c844 <RadioSetRxConfig+0x300>)
 801c778:	781a      	ldrb	r2, [r3, #0]
 801c77a:	4b31      	ldr	r3, [pc, #196]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c77c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801c77e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801c782:	2b00      	cmp	r3, #0
 801c784:	d003      	beq.n	801c78e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801c786:	4b2e      	ldr	r3, [pc, #184]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c788:	22f2      	movs	r2, #242	; 0xf2
 801c78a:	75da      	strb	r2, [r3, #23]
 801c78c:	e002      	b.n	801c794 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801c78e:	4b2c      	ldr	r3, [pc, #176]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c790:	2201      	movs	r2, #1
 801c792:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801c794:	4b2a      	ldr	r3, [pc, #168]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c796:	2201      	movs	r2, #1
 801c798:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801c79a:	f000 fc52 	bl	801d042 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801c79e:	2000      	movs	r0, #0
 801c7a0:	f7ff fdfc 	bl	801c39c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c7a4:	4828      	ldr	r0, [pc, #160]	; (801c848 <RadioSetRxConfig+0x304>)
 801c7a6:	f002 fa15 	bl	801ebd4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c7aa:	4828      	ldr	r0, [pc, #160]	; (801c84c <RadioSetRxConfig+0x308>)
 801c7ac:	f002 fae4 	bl	801ed78 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801c7b0:	4a28      	ldr	r2, [pc, #160]	; (801c854 <RadioSetRxConfig+0x310>)
 801c7b2:	f107 0314 	add.w	r3, r7, #20
 801c7b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c7ba:	e883 0003 	stmia.w	r3, {r0, r1}
 801c7be:	f107 0314 	add.w	r3, r7, #20
 801c7c2:	4618      	mov	r0, r3
 801c7c4:	f001 fda5 	bl	801e312 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801c7c8:	f240 10ff 	movw	r0, #511	; 0x1ff
 801c7cc:	f001 fdf0 	bl	801e3b0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801c7d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801c7d2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801c7d6:	fb02 f303 	mul.w	r3, r2, r3
 801c7da:	461a      	mov	r2, r3
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	fbb2 f3f3 	udiv	r3, r2, r3
 801c7e2:	4a17      	ldr	r2, [pc, #92]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c7e4:	6093      	str	r3, [r2, #8]
            break;
 801c7e6:	e0a0      	b.n	801c92a <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801c7e8:	2000      	movs	r0, #0
 801c7ea:	f001 ff59 	bl	801e6a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801c7ee:	4b14      	ldr	r3, [pc, #80]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c7f0:	2201      	movs	r2, #1
 801c7f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	b2da      	uxtb	r2, r3
 801c7fa:	4b11      	ldr	r3, [pc, #68]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c7fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801c800:	4a15      	ldr	r2, [pc, #84]	; (801c858 <RadioSetRxConfig+0x314>)
 801c802:	68bb      	ldr	r3, [r7, #8]
 801c804:	4413      	add	r3, r2
 801c806:	781a      	ldrb	r2, [r3, #0]
 801c808:	4b0d      	ldr	r3, [pc, #52]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c80a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801c80e:	4a0c      	ldr	r2, [pc, #48]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c810:	7bbb      	ldrb	r3, [r7, #14]
 801c812:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801c816:	68bb      	ldr	r3, [r7, #8]
 801c818:	2b00      	cmp	r3, #0
 801c81a:	d105      	bne.n	801c828 <RadioSetRxConfig+0x2e4>
 801c81c:	687b      	ldr	r3, [r7, #4]
 801c81e:	2b0b      	cmp	r3, #11
 801c820:	d008      	beq.n	801c834 <RadioSetRxConfig+0x2f0>
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	2b0c      	cmp	r3, #12
 801c826:	d005      	beq.n	801c834 <RadioSetRxConfig+0x2f0>
 801c828:	68bb      	ldr	r3, [r7, #8]
 801c82a:	2b01      	cmp	r3, #1
 801c82c:	d116      	bne.n	801c85c <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801c82e:	687b      	ldr	r3, [r7, #4]
 801c830:	2b0c      	cmp	r3, #12
 801c832:	d113      	bne.n	801c85c <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801c834:	4b02      	ldr	r3, [pc, #8]	; (801c840 <RadioSetRxConfig+0x2fc>)
 801c836:	2201      	movs	r2, #1
 801c838:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801c83c:	e012      	b.n	801c864 <RadioSetRxConfig+0x320>
 801c83e:	bf00      	nop
 801c840:	200024a4 	.word	0x200024a4
 801c844:	20000160 	.word	0x20000160
 801c848:	200024dc 	.word	0x200024dc
 801c84c:	200024b2 	.word	0x200024b2
 801c850:	080217a0 	.word	0x080217a0
 801c854:	080217a8 	.word	0x080217a8
 801c858:	08021d84 	.word	0x08021d84
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801c85c:	4b35      	ldr	r3, [pc, #212]	; (801c934 <RadioSetRxConfig+0x3f0>)
 801c85e:	2200      	movs	r2, #0
 801c860:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801c864:	4b33      	ldr	r3, [pc, #204]	; (801c934 <RadioSetRxConfig+0x3f0>)
 801c866:	2201      	movs	r2, #1
 801c868:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801c86a:	4b32      	ldr	r3, [pc, #200]	; (801c934 <RadioSetRxConfig+0x3f0>)
 801c86c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c870:	2b05      	cmp	r3, #5
 801c872:	d004      	beq.n	801c87e <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801c874:	4b2f      	ldr	r3, [pc, #188]	; (801c934 <RadioSetRxConfig+0x3f0>)
 801c876:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801c87a:	2b06      	cmp	r3, #6
 801c87c:	d10a      	bne.n	801c894 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801c87e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c880:	2b0b      	cmp	r3, #11
 801c882:	d803      	bhi.n	801c88c <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801c884:	4b2b      	ldr	r3, [pc, #172]	; (801c934 <RadioSetRxConfig+0x3f0>)
 801c886:	220c      	movs	r2, #12
 801c888:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801c88a:	e006      	b.n	801c89a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801c88c:	4a29      	ldr	r2, [pc, #164]	; (801c934 <RadioSetRxConfig+0x3f0>)
 801c88e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c890:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801c892:	e002      	b.n	801c89a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801c894:	4a27      	ldr	r2, [pc, #156]	; (801c934 <RadioSetRxConfig+0x3f0>)
 801c896:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c898:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801c89a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801c89e:	4b25      	ldr	r3, [pc, #148]	; (801c934 <RadioSetRxConfig+0x3f0>)
 801c8a0:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801c8a2:	4b25      	ldr	r3, [pc, #148]	; (801c938 <RadioSetRxConfig+0x3f4>)
 801c8a4:	781a      	ldrb	r2, [r3, #0]
 801c8a6:	4b23      	ldr	r3, [pc, #140]	; (801c934 <RadioSetRxConfig+0x3f0>)
 801c8a8:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801c8aa:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801c8ae:	4b21      	ldr	r3, [pc, #132]	; (801c934 <RadioSetRxConfig+0x3f0>)
 801c8b0:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801c8b4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801c8b8:	4b1e      	ldr	r3, [pc, #120]	; (801c934 <RadioSetRxConfig+0x3f0>)
 801c8ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801c8be:	f000 fbc0 	bl	801d042 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801c8c2:	2001      	movs	r0, #1
 801c8c4:	f7ff fd6a 	bl	801c39c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c8c8:	481c      	ldr	r0, [pc, #112]	; (801c93c <RadioSetRxConfig+0x3f8>)
 801c8ca:	f002 f983 	bl	801ebd4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c8ce:	481c      	ldr	r0, [pc, #112]	; (801c940 <RadioSetRxConfig+0x3fc>)
 801c8d0:	f002 fa52 	bl	801ed78 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801c8d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801c8d6:	b2db      	uxtb	r3, r3
 801c8d8:	4618      	mov	r0, r3
 801c8da:	f001 fef0 	bl	801e6be <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801c8de:	4b15      	ldr	r3, [pc, #84]	; (801c934 <RadioSetRxConfig+0x3f0>)
 801c8e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801c8e4:	2b01      	cmp	r3, #1
 801c8e6:	d10d      	bne.n	801c904 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801c8e8:	f240 7036 	movw	r0, #1846	; 0x736
 801c8ec:	f002 fba0 	bl	801f030 <SUBGRF_ReadRegister>
 801c8f0:	4603      	mov	r3, r0
 801c8f2:	f023 0304 	bic.w	r3, r3, #4
 801c8f6:	b2db      	uxtb	r3, r3
 801c8f8:	4619      	mov	r1, r3
 801c8fa:	f240 7036 	movw	r0, #1846	; 0x736
 801c8fe:	f002 fb83 	bl	801f008 <SUBGRF_WriteRegister>
 801c902:	e00c      	b.n	801c91e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801c904:	f240 7036 	movw	r0, #1846	; 0x736
 801c908:	f002 fb92 	bl	801f030 <SUBGRF_ReadRegister>
 801c90c:	4603      	mov	r3, r0
 801c90e:	f043 0304 	orr.w	r3, r3, #4
 801c912:	b2db      	uxtb	r3, r3
 801c914:	4619      	mov	r1, r3
 801c916:	f240 7036 	movw	r0, #1846	; 0x736
 801c91a:	f002 fb75 	bl	801f008 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801c91e:	4b05      	ldr	r3, [pc, #20]	; (801c934 <RadioSetRxConfig+0x3f0>)
 801c920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c924:	609a      	str	r2, [r3, #8]
            break;
 801c926:	e000      	b.n	801c92a <RadioSetRxConfig+0x3e6>
            break;
 801c928:	bf00      	nop
    }
}
 801c92a:	bf00      	nop
 801c92c:	3728      	adds	r7, #40	; 0x28
 801c92e:	46bd      	mov	sp, r7
 801c930:	bd80      	pop	{r7, pc}
 801c932:	bf00      	nop
 801c934:	200024a4 	.word	0x200024a4
 801c938:	20000160 	.word	0x20000160
 801c93c:	200024dc 	.word	0x200024dc
 801c940:	200024b2 	.word	0x200024b2

0801c944 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801c944:	b580      	push	{r7, lr}
 801c946:	b086      	sub	sp, #24
 801c948:	af00      	add	r7, sp, #0
 801c94a:	60ba      	str	r2, [r7, #8]
 801c94c:	607b      	str	r3, [r7, #4]
 801c94e:	4603      	mov	r3, r0
 801c950:	73fb      	strb	r3, [r7, #15]
 801c952:	460b      	mov	r3, r1
 801c954:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801c956:	f002 fe2e 	bl	801f5b6 <RFW_DeInit>
    switch( modem )
 801c95a:	7bfb      	ldrb	r3, [r7, #15]
 801c95c:	2b04      	cmp	r3, #4
 801c95e:	f000 80c7 	beq.w	801caf0 <RadioSetTxConfig+0x1ac>
 801c962:	2b04      	cmp	r3, #4
 801c964:	f300 80d6 	bgt.w	801cb14 <RadioSetTxConfig+0x1d0>
 801c968:	2b00      	cmp	r3, #0
 801c96a:	d002      	beq.n	801c972 <RadioSetTxConfig+0x2e>
 801c96c:	2b01      	cmp	r3, #1
 801c96e:	d059      	beq.n	801ca24 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801c970:	e0d0      	b.n	801cb14 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801c972:	4b74      	ldr	r3, [pc, #464]	; (801cb44 <RadioSetTxConfig+0x200>)
 801c974:	2200      	movs	r2, #0
 801c976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801c97a:	4a72      	ldr	r2, [pc, #456]	; (801cb44 <RadioSetTxConfig+0x200>)
 801c97c:	6a3b      	ldr	r3, [r7, #32]
 801c97e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801c980:	4b70      	ldr	r3, [pc, #448]	; (801cb44 <RadioSetTxConfig+0x200>)
 801c982:	220b      	movs	r2, #11
 801c984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801c988:	6878      	ldr	r0, [r7, #4]
 801c98a:	f002 fd47 	bl	801f41c <SUBGRF_GetFskBandwidthRegValue>
 801c98e:	4603      	mov	r3, r0
 801c990:	461a      	mov	r2, r3
 801c992:	4b6c      	ldr	r3, [pc, #432]	; (801cb44 <RadioSetTxConfig+0x200>)
 801c994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801c998:	4a6a      	ldr	r2, [pc, #424]	; (801cb44 <RadioSetTxConfig+0x200>)
 801c99a:	68bb      	ldr	r3, [r7, #8]
 801c99c:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801c99e:	4b69      	ldr	r3, [pc, #420]	; (801cb44 <RadioSetTxConfig+0x200>)
 801c9a0:	2200      	movs	r2, #0
 801c9a2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801c9a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c9a6:	00db      	lsls	r3, r3, #3
 801c9a8:	b29a      	uxth	r2, r3
 801c9aa:	4b66      	ldr	r3, [pc, #408]	; (801cb44 <RadioSetTxConfig+0x200>)
 801c9ac:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801c9ae:	4b65      	ldr	r3, [pc, #404]	; (801cb44 <RadioSetTxConfig+0x200>)
 801c9b0:	2204      	movs	r2, #4
 801c9b2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801c9b4:	4b63      	ldr	r3, [pc, #396]	; (801cb44 <RadioSetTxConfig+0x200>)
 801c9b6:	2218      	movs	r2, #24
 801c9b8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801c9ba:	4b62      	ldr	r3, [pc, #392]	; (801cb44 <RadioSetTxConfig+0x200>)
 801c9bc:	2200      	movs	r2, #0
 801c9be:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801c9c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c9c4:	f083 0301 	eor.w	r3, r3, #1
 801c9c8:	b2db      	uxtb	r3, r3
 801c9ca:	461a      	mov	r2, r3
 801c9cc:	4b5d      	ldr	r3, [pc, #372]	; (801cb44 <RadioSetTxConfig+0x200>)
 801c9ce:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801c9d0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801c9d4:	2b00      	cmp	r3, #0
 801c9d6:	d003      	beq.n	801c9e0 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801c9d8:	4b5a      	ldr	r3, [pc, #360]	; (801cb44 <RadioSetTxConfig+0x200>)
 801c9da:	22f2      	movs	r2, #242	; 0xf2
 801c9dc:	75da      	strb	r2, [r3, #23]
 801c9de:	e002      	b.n	801c9e6 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801c9e0:	4b58      	ldr	r3, [pc, #352]	; (801cb44 <RadioSetTxConfig+0x200>)
 801c9e2:	2201      	movs	r2, #1
 801c9e4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801c9e6:	4b57      	ldr	r3, [pc, #348]	; (801cb44 <RadioSetTxConfig+0x200>)
 801c9e8:	2201      	movs	r2, #1
 801c9ea:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801c9ec:	f000 fb29 	bl	801d042 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801c9f0:	2000      	movs	r0, #0
 801c9f2:	f7ff fcd3 	bl	801c39c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c9f6:	4854      	ldr	r0, [pc, #336]	; (801cb48 <RadioSetTxConfig+0x204>)
 801c9f8:	f002 f8ec 	bl	801ebd4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c9fc:	4853      	ldr	r0, [pc, #332]	; (801cb4c <RadioSetTxConfig+0x208>)
 801c9fe:	f002 f9bb 	bl	801ed78 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801ca02:	4a53      	ldr	r2, [pc, #332]	; (801cb50 <RadioSetTxConfig+0x20c>)
 801ca04:	f107 0310 	add.w	r3, r7, #16
 801ca08:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ca0c:	e883 0003 	stmia.w	r3, {r0, r1}
 801ca10:	f107 0310 	add.w	r3, r7, #16
 801ca14:	4618      	mov	r0, r3
 801ca16:	f001 fc7c 	bl	801e312 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801ca1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801ca1e:	f001 fcc7 	bl	801e3b0 <SUBGRF_SetWhiteningSeed>
            break;
 801ca22:	e078      	b.n	801cb16 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801ca24:	4b47      	ldr	r3, [pc, #284]	; (801cb44 <RadioSetTxConfig+0x200>)
 801ca26:	2201      	movs	r2, #1
 801ca28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801ca2c:	6a3b      	ldr	r3, [r7, #32]
 801ca2e:	b2da      	uxtb	r2, r3
 801ca30:	4b44      	ldr	r3, [pc, #272]	; (801cb44 <RadioSetTxConfig+0x200>)
 801ca32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801ca36:	4a47      	ldr	r2, [pc, #284]	; (801cb54 <RadioSetTxConfig+0x210>)
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	4413      	add	r3, r2
 801ca3c:	781a      	ldrb	r2, [r3, #0]
 801ca3e:	4b41      	ldr	r3, [pc, #260]	; (801cb44 <RadioSetTxConfig+0x200>)
 801ca40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801ca44:	4a3f      	ldr	r2, [pc, #252]	; (801cb44 <RadioSetTxConfig+0x200>)
 801ca46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ca4a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	d105      	bne.n	801ca60 <RadioSetTxConfig+0x11c>
 801ca54:	6a3b      	ldr	r3, [r7, #32]
 801ca56:	2b0b      	cmp	r3, #11
 801ca58:	d008      	beq.n	801ca6c <RadioSetTxConfig+0x128>
 801ca5a:	6a3b      	ldr	r3, [r7, #32]
 801ca5c:	2b0c      	cmp	r3, #12
 801ca5e:	d005      	beq.n	801ca6c <RadioSetTxConfig+0x128>
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	2b01      	cmp	r3, #1
 801ca64:	d107      	bne.n	801ca76 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801ca66:	6a3b      	ldr	r3, [r7, #32]
 801ca68:	2b0c      	cmp	r3, #12
 801ca6a:	d104      	bne.n	801ca76 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801ca6c:	4b35      	ldr	r3, [pc, #212]	; (801cb44 <RadioSetTxConfig+0x200>)
 801ca6e:	2201      	movs	r2, #1
 801ca70:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801ca74:	e003      	b.n	801ca7e <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801ca76:	4b33      	ldr	r3, [pc, #204]	; (801cb44 <RadioSetTxConfig+0x200>)
 801ca78:	2200      	movs	r2, #0
 801ca7a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801ca7e:	4b31      	ldr	r3, [pc, #196]	; (801cb44 <RadioSetTxConfig+0x200>)
 801ca80:	2201      	movs	r2, #1
 801ca82:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801ca84:	4b2f      	ldr	r3, [pc, #188]	; (801cb44 <RadioSetTxConfig+0x200>)
 801ca86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801ca8a:	2b05      	cmp	r3, #5
 801ca8c:	d004      	beq.n	801ca98 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801ca8e:	4b2d      	ldr	r3, [pc, #180]	; (801cb44 <RadioSetTxConfig+0x200>)
 801ca90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801ca94:	2b06      	cmp	r3, #6
 801ca96:	d10a      	bne.n	801caae <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801ca98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801ca9a:	2b0b      	cmp	r3, #11
 801ca9c:	d803      	bhi.n	801caa6 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801ca9e:	4b29      	ldr	r3, [pc, #164]	; (801cb44 <RadioSetTxConfig+0x200>)
 801caa0:	220c      	movs	r2, #12
 801caa2:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801caa4:	e006      	b.n	801cab4 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801caa6:	4a27      	ldr	r2, [pc, #156]	; (801cb44 <RadioSetTxConfig+0x200>)
 801caa8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801caaa:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801caac:	e002      	b.n	801cab4 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801caae:	4a25      	ldr	r2, [pc, #148]	; (801cb44 <RadioSetTxConfig+0x200>)
 801cab0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801cab2:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801cab4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801cab8:	4b22      	ldr	r3, [pc, #136]	; (801cb44 <RadioSetTxConfig+0x200>)
 801caba:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801cabc:	4b26      	ldr	r3, [pc, #152]	; (801cb58 <RadioSetTxConfig+0x214>)
 801cabe:	781a      	ldrb	r2, [r3, #0]
 801cac0:	4b20      	ldr	r3, [pc, #128]	; (801cb44 <RadioSetTxConfig+0x200>)
 801cac2:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801cac4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801cac8:	4b1e      	ldr	r3, [pc, #120]	; (801cb44 <RadioSetTxConfig+0x200>)
 801caca:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801cace:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801cad2:	4b1c      	ldr	r3, [pc, #112]	; (801cb44 <RadioSetTxConfig+0x200>)
 801cad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801cad8:	f000 fab3 	bl	801d042 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801cadc:	2001      	movs	r0, #1
 801cade:	f7ff fc5d 	bl	801c39c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801cae2:	4819      	ldr	r0, [pc, #100]	; (801cb48 <RadioSetTxConfig+0x204>)
 801cae4:	f002 f876 	bl	801ebd4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801cae8:	4818      	ldr	r0, [pc, #96]	; (801cb4c <RadioSetTxConfig+0x208>)
 801caea:	f002 f945 	bl	801ed78 <SUBGRF_SetPacketParams>
            break;
 801caee:	e012      	b.n	801cb16 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801caf0:	2004      	movs	r0, #4
 801caf2:	f7ff fc53 	bl	801c39c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801caf6:	4b13      	ldr	r3, [pc, #76]	; (801cb44 <RadioSetTxConfig+0x200>)
 801caf8:	2202      	movs	r2, #2
 801cafa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801cafe:	4a11      	ldr	r2, [pc, #68]	; (801cb44 <RadioSetTxConfig+0x200>)
 801cb00:	6a3b      	ldr	r3, [r7, #32]
 801cb02:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801cb04:	4b0f      	ldr	r3, [pc, #60]	; (801cb44 <RadioSetTxConfig+0x200>)
 801cb06:	2216      	movs	r2, #22
 801cb08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801cb0c:	480e      	ldr	r0, [pc, #56]	; (801cb48 <RadioSetTxConfig+0x204>)
 801cb0e:	f002 f861 	bl	801ebd4 <SUBGRF_SetModulationParams>
            break;
 801cb12:	e000      	b.n	801cb16 <RadioSetTxConfig+0x1d2>
            break;
 801cb14:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801cb16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801cb1a:	4618      	mov	r0, r3
 801cb1c:	f002 fb90 	bl	801f240 <SUBGRF_SetRfTxPower>
 801cb20:	4603      	mov	r3, r0
 801cb22:	461a      	mov	r2, r3
 801cb24:	4b07      	ldr	r3, [pc, #28]	; (801cb44 <RadioSetTxConfig+0x200>)
 801cb26:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 801cb2a:	4b06      	ldr	r3, [pc, #24]	; (801cb44 <RadioSetTxConfig+0x200>)
 801cb2c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801cb30:	4618      	mov	r0, r3
 801cb32:	f002 fd54 	bl	801f5de <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801cb36:	4a03      	ldr	r2, [pc, #12]	; (801cb44 <RadioSetTxConfig+0x200>)
 801cb38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cb3a:	6053      	str	r3, [r2, #4]
}
 801cb3c:	bf00      	nop
 801cb3e:	3718      	adds	r7, #24
 801cb40:	46bd      	mov	sp, r7
 801cb42:	bd80      	pop	{r7, pc}
 801cb44:	200024a4 	.word	0x200024a4
 801cb48:	200024dc 	.word	0x200024dc
 801cb4c:	200024b2 	.word	0x200024b2
 801cb50:	080217a8 	.word	0x080217a8
 801cb54:	08021d84 	.word	0x08021d84
 801cb58:	20000160 	.word	0x20000160

0801cb5c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801cb5c:	b480      	push	{r7}
 801cb5e:	b083      	sub	sp, #12
 801cb60:	af00      	add	r7, sp, #0
 801cb62:	6078      	str	r0, [r7, #4]
    return true;
 801cb64:	2301      	movs	r3, #1
}
 801cb66:	4618      	mov	r0, r3
 801cb68:	370c      	adds	r7, #12
 801cb6a:	46bd      	mov	sp, r7
 801cb6c:	bc80      	pop	{r7}
 801cb6e:	4770      	bx	lr

0801cb70 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801cb70:	b480      	push	{r7}
 801cb72:	b085      	sub	sp, #20
 801cb74:	af00      	add	r7, sp, #0
 801cb76:	4603      	mov	r3, r0
 801cb78:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801cb7a:	2300      	movs	r3, #0
 801cb7c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801cb7e:	79fb      	ldrb	r3, [r7, #7]
 801cb80:	2b0a      	cmp	r3, #10
 801cb82:	d83e      	bhi.n	801cc02 <RadioGetLoRaBandwidthInHz+0x92>
 801cb84:	a201      	add	r2, pc, #4	; (adr r2, 801cb8c <RadioGetLoRaBandwidthInHz+0x1c>)
 801cb86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb8a:	bf00      	nop
 801cb8c:	0801cbb9 	.word	0x0801cbb9
 801cb90:	0801cbc9 	.word	0x0801cbc9
 801cb94:	0801cbd9 	.word	0x0801cbd9
 801cb98:	0801cbe9 	.word	0x0801cbe9
 801cb9c:	0801cbf1 	.word	0x0801cbf1
 801cba0:	0801cbf7 	.word	0x0801cbf7
 801cba4:	0801cbfd 	.word	0x0801cbfd
 801cba8:	0801cc03 	.word	0x0801cc03
 801cbac:	0801cbc1 	.word	0x0801cbc1
 801cbb0:	0801cbd1 	.word	0x0801cbd1
 801cbb4:	0801cbe1 	.word	0x0801cbe1
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801cbb8:	f641 6384 	movw	r3, #7812	; 0x1e84
 801cbbc:	60fb      	str	r3, [r7, #12]
        break;
 801cbbe:	e020      	b.n	801cc02 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801cbc0:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801cbc4:	60fb      	str	r3, [r7, #12]
        break;
 801cbc6:	e01c      	b.n	801cc02 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801cbc8:	f643 5309 	movw	r3, #15625	; 0x3d09
 801cbcc:	60fb      	str	r3, [r7, #12]
        break;
 801cbce:	e018      	b.n	801cc02 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801cbd0:	f245 1361 	movw	r3, #20833	; 0x5161
 801cbd4:	60fb      	str	r3, [r7, #12]
        break;
 801cbd6:	e014      	b.n	801cc02 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801cbd8:	f647 2312 	movw	r3, #31250	; 0x7a12
 801cbdc:	60fb      	str	r3, [r7, #12]
        break;
 801cbde:	e010      	b.n	801cc02 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801cbe0:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801cbe4:	60fb      	str	r3, [r7, #12]
        break;
 801cbe6:	e00c      	b.n	801cc02 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801cbe8:	f24f 4324 	movw	r3, #62500	; 0xf424
 801cbec:	60fb      	str	r3, [r7, #12]
        break;
 801cbee:	e008      	b.n	801cc02 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801cbf0:	4b07      	ldr	r3, [pc, #28]	; (801cc10 <RadioGetLoRaBandwidthInHz+0xa0>)
 801cbf2:	60fb      	str	r3, [r7, #12]
        break;
 801cbf4:	e005      	b.n	801cc02 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801cbf6:	4b07      	ldr	r3, [pc, #28]	; (801cc14 <RadioGetLoRaBandwidthInHz+0xa4>)
 801cbf8:	60fb      	str	r3, [r7, #12]
        break;
 801cbfa:	e002      	b.n	801cc02 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801cbfc:	4b06      	ldr	r3, [pc, #24]	; (801cc18 <RadioGetLoRaBandwidthInHz+0xa8>)
 801cbfe:	60fb      	str	r3, [r7, #12]
        break;
 801cc00:	bf00      	nop
    }

    return bandwidthInHz;
 801cc02:	68fb      	ldr	r3, [r7, #12]
}
 801cc04:	4618      	mov	r0, r3
 801cc06:	3714      	adds	r7, #20
 801cc08:	46bd      	mov	sp, r7
 801cc0a:	bc80      	pop	{r7}
 801cc0c:	4770      	bx	lr
 801cc0e:	bf00      	nop
 801cc10:	0001e848 	.word	0x0001e848
 801cc14:	0003d090 	.word	0x0003d090
 801cc18:	0007a120 	.word	0x0007a120

0801cc1c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801cc1c:	b480      	push	{r7}
 801cc1e:	b083      	sub	sp, #12
 801cc20:	af00      	add	r7, sp, #0
 801cc22:	6078      	str	r0, [r7, #4]
 801cc24:	4608      	mov	r0, r1
 801cc26:	4611      	mov	r1, r2
 801cc28:	461a      	mov	r2, r3
 801cc2a:	4603      	mov	r3, r0
 801cc2c:	70fb      	strb	r3, [r7, #3]
 801cc2e:	460b      	mov	r3, r1
 801cc30:	803b      	strh	r3, [r7, #0]
 801cc32:	4613      	mov	r3, r2
 801cc34:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 801cc36:	883b      	ldrh	r3, [r7, #0]
 801cc38:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801cc3a:	78ba      	ldrb	r2, [r7, #2]
 801cc3c:	f082 0201 	eor.w	r2, r2, #1
 801cc40:	b2d2      	uxtb	r2, r2
 801cc42:	2a00      	cmp	r2, #0
 801cc44:	d001      	beq.n	801cc4a <RadioGetGfskTimeOnAirNumerator+0x2e>
 801cc46:	2208      	movs	r2, #8
 801cc48:	e000      	b.n	801cc4c <RadioGetGfskTimeOnAirNumerator+0x30>
 801cc4a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801cc4c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801cc4e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801cc52:	7c3b      	ldrb	r3, [r7, #16]
 801cc54:	7d39      	ldrb	r1, [r7, #20]
 801cc56:	2900      	cmp	r1, #0
 801cc58:	d001      	beq.n	801cc5e <RadioGetGfskTimeOnAirNumerator+0x42>
 801cc5a:	2102      	movs	r1, #2
 801cc5c:	e000      	b.n	801cc60 <RadioGetGfskTimeOnAirNumerator+0x44>
 801cc5e:	2100      	movs	r1, #0
 801cc60:	440b      	add	r3, r1
 801cc62:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801cc64:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 801cc66:	4618      	mov	r0, r3
 801cc68:	370c      	adds	r7, #12
 801cc6a:	46bd      	mov	sp, r7
 801cc6c:	bc80      	pop	{r7}
 801cc6e:	4770      	bx	lr

0801cc70 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801cc70:	b480      	push	{r7}
 801cc72:	b08b      	sub	sp, #44	; 0x2c
 801cc74:	af00      	add	r7, sp, #0
 801cc76:	60f8      	str	r0, [r7, #12]
 801cc78:	60b9      	str	r1, [r7, #8]
 801cc7a:	4611      	mov	r1, r2
 801cc7c:	461a      	mov	r2, r3
 801cc7e:	460b      	mov	r3, r1
 801cc80:	71fb      	strb	r3, [r7, #7]
 801cc82:	4613      	mov	r3, r2
 801cc84:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801cc86:	79fb      	ldrb	r3, [r7, #7]
 801cc88:	3304      	adds	r3, #4
 801cc8a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801cc8c:	2300      	movs	r3, #0
 801cc8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801cc92:	68bb      	ldr	r3, [r7, #8]
 801cc94:	2b05      	cmp	r3, #5
 801cc96:	d002      	beq.n	801cc9e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801cc98:	68bb      	ldr	r3, [r7, #8]
 801cc9a:	2b06      	cmp	r3, #6
 801cc9c:	d104      	bne.n	801cca8 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801cc9e:	88bb      	ldrh	r3, [r7, #4]
 801cca0:	2b0b      	cmp	r3, #11
 801cca2:	d801      	bhi.n	801cca8 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801cca4:	230c      	movs	r3, #12
 801cca6:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801cca8:	68fb      	ldr	r3, [r7, #12]
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d105      	bne.n	801ccba <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801ccae:	68bb      	ldr	r3, [r7, #8]
 801ccb0:	2b0b      	cmp	r3, #11
 801ccb2:	d008      	beq.n	801ccc6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801ccb4:	68bb      	ldr	r3, [r7, #8]
 801ccb6:	2b0c      	cmp	r3, #12
 801ccb8:	d005      	beq.n	801ccc6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801ccba:	68fb      	ldr	r3, [r7, #12]
 801ccbc:	2b01      	cmp	r3, #1
 801ccbe:	d105      	bne.n	801cccc <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801ccc0:	68bb      	ldr	r3, [r7, #8]
 801ccc2:	2b0c      	cmp	r3, #12
 801ccc4:	d102      	bne.n	801cccc <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801ccc6:	2301      	movs	r3, #1
 801ccc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801cccc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801ccd0:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801ccd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801ccd6:	2a00      	cmp	r2, #0
 801ccd8:	d001      	beq.n	801ccde <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801ccda:	2210      	movs	r2, #16
 801ccdc:	e000      	b.n	801cce0 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801ccde:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801cce0:	4413      	add	r3, r2
 801cce2:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801cce4:	68bb      	ldr	r3, [r7, #8]
 801cce6:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801cce8:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801ccea:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801ccee:	2a00      	cmp	r2, #0
 801ccf0:	d001      	beq.n	801ccf6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801ccf2:	2200      	movs	r2, #0
 801ccf4:	e000      	b.n	801ccf8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801ccf6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801ccf8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801ccfa:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801ccfc:	68bb      	ldr	r3, [r7, #8]
 801ccfe:	2b06      	cmp	r3, #6
 801cd00:	d803      	bhi.n	801cd0a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801cd02:	68bb      	ldr	r3, [r7, #8]
 801cd04:	009b      	lsls	r3, r3, #2
 801cd06:	623b      	str	r3, [r7, #32]
 801cd08:	e00e      	b.n	801cd28 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801cd0a:	69fb      	ldr	r3, [r7, #28]
 801cd0c:	3308      	adds	r3, #8
 801cd0e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801cd10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d004      	beq.n	801cd22 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801cd18:	68bb      	ldr	r3, [r7, #8]
 801cd1a:	3b02      	subs	r3, #2
 801cd1c:	009b      	lsls	r3, r3, #2
 801cd1e:	623b      	str	r3, [r7, #32]
 801cd20:	e002      	b.n	801cd28 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801cd22:	68bb      	ldr	r3, [r7, #8]
 801cd24:	009b      	lsls	r3, r3, #2
 801cd26:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801cd28:	69fb      	ldr	r3, [r7, #28]
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	da01      	bge.n	801cd32 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801cd2e:	2300      	movs	r3, #0
 801cd30:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801cd32:	69fa      	ldr	r2, [r7, #28]
 801cd34:	6a3b      	ldr	r3, [r7, #32]
 801cd36:	4413      	add	r3, r2
 801cd38:	1e5a      	subs	r2, r3, #1
 801cd3a:	6a3b      	ldr	r3, [r7, #32]
 801cd3c:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd40:	697a      	ldr	r2, [r7, #20]
 801cd42:	fb03 f202 	mul.w	r2, r3, r2
 801cd46:	88bb      	ldrh	r3, [r7, #4]
 801cd48:	4413      	add	r3, r2
    int32_t intermediate =
 801cd4a:	330c      	adds	r3, #12
 801cd4c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801cd4e:	68bb      	ldr	r3, [r7, #8]
 801cd50:	2b06      	cmp	r3, #6
 801cd52:	d802      	bhi.n	801cd5a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801cd54:	69bb      	ldr	r3, [r7, #24]
 801cd56:	3302      	adds	r3, #2
 801cd58:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801cd5a:	69bb      	ldr	r3, [r7, #24]
 801cd5c:	009b      	lsls	r3, r3, #2
 801cd5e:	1c5a      	adds	r2, r3, #1
 801cd60:	68bb      	ldr	r3, [r7, #8]
 801cd62:	3b02      	subs	r3, #2
 801cd64:	fa02 f303 	lsl.w	r3, r2, r3
}
 801cd68:	4618      	mov	r0, r3
 801cd6a:	372c      	adds	r7, #44	; 0x2c
 801cd6c:	46bd      	mov	sp, r7
 801cd6e:	bc80      	pop	{r7}
 801cd70:	4770      	bx	lr
	...

0801cd74 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801cd74:	b580      	push	{r7, lr}
 801cd76:	b08a      	sub	sp, #40	; 0x28
 801cd78:	af04      	add	r7, sp, #16
 801cd7a:	60b9      	str	r1, [r7, #8]
 801cd7c:	607a      	str	r2, [r7, #4]
 801cd7e:	461a      	mov	r2, r3
 801cd80:	4603      	mov	r3, r0
 801cd82:	73fb      	strb	r3, [r7, #15]
 801cd84:	4613      	mov	r3, r2
 801cd86:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801cd88:	2300      	movs	r3, #0
 801cd8a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801cd8c:	2301      	movs	r3, #1
 801cd8e:	613b      	str	r3, [r7, #16]

    switch( modem )
 801cd90:	7bfb      	ldrb	r3, [r7, #15]
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d002      	beq.n	801cd9c <RadioTimeOnAir+0x28>
 801cd96:	2b01      	cmp	r3, #1
 801cd98:	d017      	beq.n	801cdca <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801cd9a:	e035      	b.n	801ce08 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801cd9c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801cda0:	8c3a      	ldrh	r2, [r7, #32]
 801cda2:	7bb9      	ldrb	r1, [r7, #14]
 801cda4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801cda8:	9301      	str	r3, [sp, #4]
 801cdaa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801cdae:	9300      	str	r3, [sp, #0]
 801cdb0:	4603      	mov	r3, r0
 801cdb2:	6878      	ldr	r0, [r7, #4]
 801cdb4:	f7ff ff32 	bl	801cc1c <RadioGetGfskTimeOnAirNumerator>
 801cdb8:	4603      	mov	r3, r0
 801cdba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cdbe:	fb02 f303 	mul.w	r3, r2, r3
 801cdc2:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	613b      	str	r3, [r7, #16]
        break;
 801cdc8:	e01e      	b.n	801ce08 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801cdca:	8c39      	ldrh	r1, [r7, #32]
 801cdcc:	7bba      	ldrb	r2, [r7, #14]
 801cdce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801cdd2:	9302      	str	r3, [sp, #8]
 801cdd4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801cdd8:	9301      	str	r3, [sp, #4]
 801cdda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801cdde:	9300      	str	r3, [sp, #0]
 801cde0:	460b      	mov	r3, r1
 801cde2:	6879      	ldr	r1, [r7, #4]
 801cde4:	68b8      	ldr	r0, [r7, #8]
 801cde6:	f7ff ff43 	bl	801cc70 <RadioGetLoRaTimeOnAirNumerator>
 801cdea:	4603      	mov	r3, r0
 801cdec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cdf0:	fb02 f303 	mul.w	r3, r2, r3
 801cdf4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801cdf6:	4a0a      	ldr	r2, [pc, #40]	; (801ce20 <RadioTimeOnAir+0xac>)
 801cdf8:	68bb      	ldr	r3, [r7, #8]
 801cdfa:	4413      	add	r3, r2
 801cdfc:	781b      	ldrb	r3, [r3, #0]
 801cdfe:	4618      	mov	r0, r3
 801ce00:	f7ff feb6 	bl	801cb70 <RadioGetLoRaBandwidthInHz>
 801ce04:	6138      	str	r0, [r7, #16]
        break;
 801ce06:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 801ce08:	697a      	ldr	r2, [r7, #20]
 801ce0a:	693b      	ldr	r3, [r7, #16]
 801ce0c:	4413      	add	r3, r2
 801ce0e:	1e5a      	subs	r2, r3, #1
 801ce10:	693b      	ldr	r3, [r7, #16]
 801ce12:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801ce16:	4618      	mov	r0, r3
 801ce18:	3718      	adds	r7, #24
 801ce1a:	46bd      	mov	sp, r7
 801ce1c:	bd80      	pop	{r7, pc}
 801ce1e:	bf00      	nop
 801ce20:	08021d84 	.word	0x08021d84

0801ce24 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 801ce24:	b580      	push	{r7, lr}
 801ce26:	b084      	sub	sp, #16
 801ce28:	af00      	add	r7, sp, #0
 801ce2a:	6078      	str	r0, [r7, #4]
 801ce2c:	460b      	mov	r3, r1
 801ce2e:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801ce30:	2300      	movs	r3, #0
 801ce32:	2200      	movs	r2, #0
 801ce34:	f240 2101 	movw	r1, #513	; 0x201
 801ce38:	f240 2001 	movw	r0, #513	; 0x201
 801ce3c:	f001 fd34 	bl	801e8a8 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801ce40:	4b71      	ldr	r3, [pc, #452]	; (801d008 <RadioSend+0x1e4>)
 801ce42:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ce46:	2101      	movs	r1, #1
 801ce48:	4618      	mov	r0, r3
 801ce4a:	f002 f9d1 	bl	801f1f0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801ce4e:	4b6e      	ldr	r3, [pc, #440]	; (801d008 <RadioSend+0x1e4>)
 801ce50:	781b      	ldrb	r3, [r3, #0]
 801ce52:	2b01      	cmp	r3, #1
 801ce54:	d112      	bne.n	801ce7c <RadioSend+0x58>
 801ce56:	4b6c      	ldr	r3, [pc, #432]	; (801d008 <RadioSend+0x1e4>)
 801ce58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ce5c:	2b06      	cmp	r3, #6
 801ce5e:	d10d      	bne.n	801ce7c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801ce60:	f640 0089 	movw	r0, #2185	; 0x889
 801ce64:	f002 f8e4 	bl	801f030 <SUBGRF_ReadRegister>
 801ce68:	4603      	mov	r3, r0
 801ce6a:	f023 0304 	bic.w	r3, r3, #4
 801ce6e:	b2db      	uxtb	r3, r3
 801ce70:	4619      	mov	r1, r3
 801ce72:	f640 0089 	movw	r0, #2185	; 0x889
 801ce76:	f002 f8c7 	bl	801f008 <SUBGRF_WriteRegister>
 801ce7a:	e00c      	b.n	801ce96 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801ce7c:	f640 0089 	movw	r0, #2185	; 0x889
 801ce80:	f002 f8d6 	bl	801f030 <SUBGRF_ReadRegister>
 801ce84:	4603      	mov	r3, r0
 801ce86:	f043 0304 	orr.w	r3, r3, #4
 801ce8a:	b2db      	uxtb	r3, r3
 801ce8c:	4619      	mov	r1, r3
 801ce8e:	f640 0089 	movw	r0, #2185	; 0x889
 801ce92:	f002 f8b9 	bl	801f008 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 801ce96:	4b5c      	ldr	r3, [pc, #368]	; (801d008 <RadioSend+0x1e4>)
 801ce98:	781b      	ldrb	r3, [r3, #0]
 801ce9a:	2b04      	cmp	r3, #4
 801ce9c:	f200 80a7 	bhi.w	801cfee <RadioSend+0x1ca>
 801cea0:	a201      	add	r2, pc, #4	; (adr r2, 801cea8 <RadioSend+0x84>)
 801cea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cea6:	bf00      	nop
 801cea8:	0801ced7 	.word	0x0801ced7
 801ceac:	0801cebd 	.word	0x0801cebd
 801ceb0:	0801ced7 	.word	0x0801ced7
 801ceb4:	0801cf37 	.word	0x0801cf37
 801ceb8:	0801cf57 	.word	0x0801cf57
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801cebc:	4a52      	ldr	r2, [pc, #328]	; (801d008 <RadioSend+0x1e4>)
 801cebe:	78fb      	ldrb	r3, [r7, #3]
 801cec0:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801cec2:	4852      	ldr	r0, [pc, #328]	; (801d00c <RadioSend+0x1e8>)
 801cec4:	f001 ff58 	bl	801ed78 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801cec8:	78fb      	ldrb	r3, [r7, #3]
 801ceca:	2200      	movs	r2, #0
 801cecc:	4619      	mov	r1, r3
 801cece:	6878      	ldr	r0, [r7, #4]
 801ced0:	f001 fa0c 	bl	801e2ec <SUBGRF_SendPayload>
            break;
 801ced4:	e08c      	b.n	801cff0 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801ced6:	f002 fb74 	bl	801f5c2 <RFW_Is_Init>
 801ceda:	4603      	mov	r3, r0
 801cedc:	2b01      	cmp	r3, #1
 801cede:	d11d      	bne.n	801cf1c <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801cee0:	f107 020d 	add.w	r2, r7, #13
 801cee4:	78fb      	ldrb	r3, [r7, #3]
 801cee6:	4619      	mov	r1, r3
 801cee8:	6878      	ldr	r0, [r7, #4]
 801ceea:	f002 fb82 	bl	801f5f2 <RFW_TransmitInit>
 801ceee:	4603      	mov	r3, r0
 801cef0:	2b00      	cmp	r3, #0
 801cef2:	d10c      	bne.n	801cf0e <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801cef4:	7b7a      	ldrb	r2, [r7, #13]
 801cef6:	4b44      	ldr	r3, [pc, #272]	; (801d008 <RadioSend+0x1e4>)
 801cef8:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801cefa:	4844      	ldr	r0, [pc, #272]	; (801d00c <RadioSend+0x1e8>)
 801cefc:	f001 ff3c 	bl	801ed78 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 801cf00:	7b7b      	ldrb	r3, [r7, #13]
 801cf02:	2200      	movs	r2, #0
 801cf04:	4619      	mov	r1, r3
 801cf06:	6878      	ldr	r0, [r7, #4]
 801cf08:	f001 f9f0 	bl	801e2ec <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801cf0c:	e070      	b.n	801cff0 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801cf0e:	4b40      	ldr	r3, [pc, #256]	; (801d010 <RadioSend+0x1ec>)
 801cf10:	2201      	movs	r2, #1
 801cf12:	2100      	movs	r1, #0
 801cf14:	2002      	movs	r0, #2
 801cf16:	f003 fc91 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
 801cf1a:	e072      	b.n	801d002 <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801cf1c:	4a3a      	ldr	r2, [pc, #232]	; (801d008 <RadioSend+0x1e4>)
 801cf1e:	78fb      	ldrb	r3, [r7, #3]
 801cf20:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801cf22:	483a      	ldr	r0, [pc, #232]	; (801d00c <RadioSend+0x1e8>)
 801cf24:	f001 ff28 	bl	801ed78 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 801cf28:	78fb      	ldrb	r3, [r7, #3]
 801cf2a:	2200      	movs	r2, #0
 801cf2c:	4619      	mov	r1, r3
 801cf2e:	6878      	ldr	r0, [r7, #4]
 801cf30:	f001 f9dc 	bl	801e2ec <SUBGRF_SendPayload>
            break;
 801cf34:	e05c      	b.n	801cff0 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801cf36:	4b34      	ldr	r3, [pc, #208]	; (801d008 <RadioSend+0x1e4>)
 801cf38:	2202      	movs	r2, #2
 801cf3a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801cf3c:	4a32      	ldr	r2, [pc, #200]	; (801d008 <RadioSend+0x1e4>)
 801cf3e:	78fb      	ldrb	r3, [r7, #3]
 801cf40:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801cf42:	4832      	ldr	r0, [pc, #200]	; (801d00c <RadioSend+0x1e8>)
 801cf44:	f001 ff18 	bl	801ed78 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801cf48:	78fb      	ldrb	r3, [r7, #3]
 801cf4a:	2200      	movs	r2, #0
 801cf4c:	4619      	mov	r1, r3
 801cf4e:	6878      	ldr	r0, [r7, #4]
 801cf50:	f001 f9cc 	bl	801e2ec <SUBGRF_SendPayload>
            break;
 801cf54:	e04c      	b.n	801cff0 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801cf56:	78fb      	ldrb	r3, [r7, #3]
 801cf58:	461a      	mov	r2, r3
 801cf5a:	6879      	ldr	r1, [r7, #4]
 801cf5c:	482d      	ldr	r0, [pc, #180]	; (801d014 <RadioSend+0x1f0>)
 801cf5e:	f000 fcbc 	bl	801d8da <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801cf62:	4b29      	ldr	r3, [pc, #164]	; (801d008 <RadioSend+0x1e4>)
 801cf64:	2202      	movs	r2, #2
 801cf66:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801cf68:	78fb      	ldrb	r3, [r7, #3]
 801cf6a:	3301      	adds	r3, #1
 801cf6c:	b2da      	uxtb	r2, r3
 801cf6e:	4b26      	ldr	r3, [pc, #152]	; (801d008 <RadioSend+0x1e4>)
 801cf70:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801cf72:	4826      	ldr	r0, [pc, #152]	; (801d00c <RadioSend+0x1e8>)
 801cf74:	f001 ff00 	bl	801ed78 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801cf78:	2100      	movs	r1, #0
 801cf7a:	20f1      	movs	r0, #241	; 0xf1
 801cf7c:	f000 f95d 	bl	801d23a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801cf80:	2100      	movs	r1, #0
 801cf82:	20f0      	movs	r0, #240	; 0xf0
 801cf84:	f000 f959 	bl	801d23a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801cf88:	4b1f      	ldr	r3, [pc, #124]	; (801d008 <RadioSend+0x1e4>)
 801cf8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cf8c:	2b64      	cmp	r3, #100	; 0x64
 801cf8e:	d108      	bne.n	801cfa2 <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801cf90:	2170      	movs	r1, #112	; 0x70
 801cf92:	20f3      	movs	r0, #243	; 0xf3
 801cf94:	f000 f951 	bl	801d23a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801cf98:	211d      	movs	r1, #29
 801cf9a:	20f2      	movs	r0, #242	; 0xf2
 801cf9c:	f000 f94d 	bl	801d23a <RadioWrite>
 801cfa0:	e007      	b.n	801cfb2 <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801cfa2:	21e1      	movs	r1, #225	; 0xe1
 801cfa4:	20f3      	movs	r0, #243	; 0xf3
 801cfa6:	f000 f948 	bl	801d23a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801cfaa:	2104      	movs	r1, #4
 801cfac:	20f2      	movs	r0, #242	; 0xf2
 801cfae:	f000 f944 	bl	801d23a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801cfb2:	78fb      	ldrb	r3, [r7, #3]
 801cfb4:	b29b      	uxth	r3, r3
 801cfb6:	00db      	lsls	r3, r3, #3
 801cfb8:	b29b      	uxth	r3, r3
 801cfba:	3302      	adds	r3, #2
 801cfbc:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801cfbe:	89fb      	ldrh	r3, [r7, #14]
 801cfc0:	0a1b      	lsrs	r3, r3, #8
 801cfc2:	b29b      	uxth	r3, r3
 801cfc4:	b2db      	uxtb	r3, r3
 801cfc6:	4619      	mov	r1, r3
 801cfc8:	20f4      	movs	r0, #244	; 0xf4
 801cfca:	f000 f936 	bl	801d23a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801cfce:	89fb      	ldrh	r3, [r7, #14]
 801cfd0:	b2db      	uxtb	r3, r3
 801cfd2:	4619      	mov	r1, r3
 801cfd4:	20f5      	movs	r0, #245	; 0xf5
 801cfd6:	f000 f930 	bl	801d23a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 801cfda:	78fb      	ldrb	r3, [r7, #3]
 801cfdc:	3301      	adds	r3, #1
 801cfde:	b2db      	uxtb	r3, r3
 801cfe0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801cfe4:	4619      	mov	r1, r3
 801cfe6:	480b      	ldr	r0, [pc, #44]	; (801d014 <RadioSend+0x1f0>)
 801cfe8:	f001 f980 	bl	801e2ec <SUBGRF_SendPayload>
            break;
 801cfec:	e000      	b.n	801cff0 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801cfee:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801cff0:	4b05      	ldr	r3, [pc, #20]	; (801d008 <RadioSend+0x1e4>)
 801cff2:	685b      	ldr	r3, [r3, #4]
 801cff4:	4619      	mov	r1, r3
 801cff6:	4808      	ldr	r0, [pc, #32]	; (801d018 <RadioSend+0x1f4>)
 801cff8:	f003 fa86 	bl	8020508 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801cffc:	4806      	ldr	r0, [pc, #24]	; (801d018 <RadioSend+0x1f4>)
 801cffe:	f003 f9a5 	bl	802034c <UTIL_TIMER_Start>
}
 801d002:	3710      	adds	r7, #16
 801d004:	46bd      	mov	sp, r7
 801d006:	bd80      	pop	{r7, pc}
 801d008:	200024a4 	.word	0x200024a4
 801d00c:	200024b2 	.word	0x200024b2
 801d010:	080217b0 	.word	0x080217b0
 801d014:	200023a0 	.word	0x200023a0
 801d018:	20002500 	.word	0x20002500

0801d01c <RadioSleep>:

static void RadioSleep( void )
{
 801d01c:	b580      	push	{r7, lr}
 801d01e:	b082      	sub	sp, #8
 801d020:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801d022:	2300      	movs	r3, #0
 801d024:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801d026:	793b      	ldrb	r3, [r7, #4]
 801d028:	f043 0304 	orr.w	r3, r3, #4
 801d02c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801d02e:	7938      	ldrb	r0, [r7, #4]
 801d030:	f001 fa38 	bl	801e4a4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801d034:	2002      	movs	r0, #2
 801d036:	f7e5 fff5 	bl	8003024 <HAL_Delay>
}
 801d03a:	bf00      	nop
 801d03c:	3708      	adds	r7, #8
 801d03e:	46bd      	mov	sp, r7
 801d040:	bd80      	pop	{r7, pc}

0801d042 <RadioStandby>:

static void RadioStandby( void )
{
 801d042:	b580      	push	{r7, lr}
 801d044:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801d046:	2000      	movs	r0, #0
 801d048:	f001 fa5e 	bl	801e508 <SUBGRF_SetStandby>
}
 801d04c:	bf00      	nop
 801d04e:	bd80      	pop	{r7, pc}

0801d050 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801d050:	b580      	push	{r7, lr}
 801d052:	b082      	sub	sp, #8
 801d054:	af00      	add	r7, sp, #0
 801d056:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 801d058:	f002 fab3 	bl	801f5c2 <RFW_Is_Init>
 801d05c:	4603      	mov	r3, r0
 801d05e:	2b01      	cmp	r3, #1
 801d060:	d102      	bne.n	801d068 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801d062:	f002 fad6 	bl	801f612 <RFW_ReceiveInit>
 801d066:	e007      	b.n	801d078 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801d068:	2300      	movs	r3, #0
 801d06a:	2200      	movs	r2, #0
 801d06c:	f240 2162 	movw	r1, #610	; 0x262
 801d070:	f240 2062 	movw	r0, #610	; 0x262
 801d074:	f001 fc18 	bl	801e8a8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	d006      	beq.n	801d08c <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801d07e:	6879      	ldr	r1, [r7, #4]
 801d080:	4811      	ldr	r0, [pc, #68]	; (801d0c8 <RadioRx+0x78>)
 801d082:	f003 fa41 	bl	8020508 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801d086:	4810      	ldr	r0, [pc, #64]	; (801d0c8 <RadioRx+0x78>)
 801d088:	f003 f960 	bl	802034c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801d08c:	4b0f      	ldr	r3, [pc, #60]	; (801d0cc <RadioRx+0x7c>)
 801d08e:	2200      	movs	r2, #0
 801d090:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801d092:	4b0e      	ldr	r3, [pc, #56]	; (801d0cc <RadioRx+0x7c>)
 801d094:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d098:	2100      	movs	r1, #0
 801d09a:	4618      	mov	r0, r3
 801d09c:	f002 f8a8 	bl	801f1f0 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801d0a0:	4b0a      	ldr	r3, [pc, #40]	; (801d0cc <RadioRx+0x7c>)
 801d0a2:	785b      	ldrb	r3, [r3, #1]
 801d0a4:	2b00      	cmp	r3, #0
 801d0a6:	d004      	beq.n	801d0b2 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801d0a8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801d0ac:	f001 fa68 	bl	801e580 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801d0b0:	e005      	b.n	801d0be <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801d0b2:	4b06      	ldr	r3, [pc, #24]	; (801d0cc <RadioRx+0x7c>)
 801d0b4:	689b      	ldr	r3, [r3, #8]
 801d0b6:	019b      	lsls	r3, r3, #6
 801d0b8:	4618      	mov	r0, r3
 801d0ba:	f001 fa61 	bl	801e580 <SUBGRF_SetRx>
}
 801d0be:	bf00      	nop
 801d0c0:	3708      	adds	r7, #8
 801d0c2:	46bd      	mov	sp, r7
 801d0c4:	bd80      	pop	{r7, pc}
 801d0c6:	bf00      	nop
 801d0c8:	20002518 	.word	0x20002518
 801d0cc:	200024a4 	.word	0x200024a4

0801d0d0 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801d0d0:	b580      	push	{r7, lr}
 801d0d2:	b082      	sub	sp, #8
 801d0d4:	af00      	add	r7, sp, #0
 801d0d6:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 801d0d8:	f002 fa73 	bl	801f5c2 <RFW_Is_Init>
 801d0dc:	4603      	mov	r3, r0
 801d0de:	2b01      	cmp	r3, #1
 801d0e0:	d102      	bne.n	801d0e8 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801d0e2:	f002 fa96 	bl	801f612 <RFW_ReceiveInit>
 801d0e6:	e007      	b.n	801d0f8 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801d0e8:	2300      	movs	r3, #0
 801d0ea:	2200      	movs	r2, #0
 801d0ec:	f240 2162 	movw	r1, #610	; 0x262
 801d0f0:	f240 2062 	movw	r0, #610	; 0x262
 801d0f4:	f001 fbd8 	bl	801e8a8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801d0f8:	687b      	ldr	r3, [r7, #4]
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	d006      	beq.n	801d10c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801d0fe:	6879      	ldr	r1, [r7, #4]
 801d100:	4811      	ldr	r0, [pc, #68]	; (801d148 <RadioRxBoosted+0x78>)
 801d102:	f003 fa01 	bl	8020508 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801d106:	4810      	ldr	r0, [pc, #64]	; (801d148 <RadioRxBoosted+0x78>)
 801d108:	f003 f920 	bl	802034c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801d10c:	4b0f      	ldr	r3, [pc, #60]	; (801d14c <RadioRxBoosted+0x7c>)
 801d10e:	2200      	movs	r2, #0
 801d110:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801d112:	4b0e      	ldr	r3, [pc, #56]	; (801d14c <RadioRxBoosted+0x7c>)
 801d114:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d118:	2100      	movs	r1, #0
 801d11a:	4618      	mov	r0, r3
 801d11c:	f002 f868 	bl	801f1f0 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801d120:	4b0a      	ldr	r3, [pc, #40]	; (801d14c <RadioRxBoosted+0x7c>)
 801d122:	785b      	ldrb	r3, [r3, #1]
 801d124:	2b00      	cmp	r3, #0
 801d126:	d004      	beq.n	801d132 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801d128:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801d12c:	f001 fa48 	bl	801e5c0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801d130:	e005      	b.n	801d13e <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801d132:	4b06      	ldr	r3, [pc, #24]	; (801d14c <RadioRxBoosted+0x7c>)
 801d134:	689b      	ldr	r3, [r3, #8]
 801d136:	019b      	lsls	r3, r3, #6
 801d138:	4618      	mov	r0, r3
 801d13a:	f001 fa41 	bl	801e5c0 <SUBGRF_SetRxBoosted>
}
 801d13e:	bf00      	nop
 801d140:	3708      	adds	r7, #8
 801d142:	46bd      	mov	sp, r7
 801d144:	bd80      	pop	{r7, pc}
 801d146:	bf00      	nop
 801d148:	20002518 	.word	0x20002518
 801d14c:	200024a4 	.word	0x200024a4

0801d150 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801d150:	b580      	push	{r7, lr}
 801d152:	b082      	sub	sp, #8
 801d154:	af00      	add	r7, sp, #0
 801d156:	6078      	str	r0, [r7, #4]
 801d158:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	005a      	lsls	r2, r3, #1
 801d15e:	683b      	ldr	r3, [r7, #0]
 801d160:	4413      	add	r3, r2
 801d162:	4a0c      	ldr	r2, [pc, #48]	; (801d194 <RadioSetRxDutyCycle+0x44>)
 801d164:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801d166:	2300      	movs	r3, #0
 801d168:	2200      	movs	r2, #0
 801d16a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d16e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801d172:	f001 fb99 	bl	801e8a8 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801d176:	4b07      	ldr	r3, [pc, #28]	; (801d194 <RadioSetRxDutyCycle+0x44>)
 801d178:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d17c:	2100      	movs	r1, #0
 801d17e:	4618      	mov	r0, r3
 801d180:	f002 f836 	bl	801f1f0 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801d184:	6839      	ldr	r1, [r7, #0]
 801d186:	6878      	ldr	r0, [r7, #4]
 801d188:	f001 fa3e 	bl	801e608 <SUBGRF_SetRxDutyCycle>
}
 801d18c:	bf00      	nop
 801d18e:	3708      	adds	r7, #8
 801d190:	46bd      	mov	sp, r7
 801d192:	bd80      	pop	{r7, pc}
 801d194:	200024a4 	.word	0x200024a4

0801d198 <RadioStartCad>:

static void RadioStartCad( void )
{
 801d198:	b580      	push	{r7, lr}
 801d19a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801d19c:	4b09      	ldr	r3, [pc, #36]	; (801d1c4 <RadioStartCad+0x2c>)
 801d19e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d1a2:	2100      	movs	r1, #0
 801d1a4:	4618      	mov	r0, r3
 801d1a6:	f002 f823 	bl	801f1f0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801d1aa:	2300      	movs	r3, #0
 801d1ac:	2200      	movs	r2, #0
 801d1ae:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801d1b2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801d1b6:	f001 fb77 	bl	801e8a8 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801d1ba:	f001 fa51 	bl	801e660 <SUBGRF_SetCad>
}
 801d1be:	bf00      	nop
 801d1c0:	bd80      	pop	{r7, pc}
 801d1c2:	bf00      	nop
 801d1c4:	200024a4 	.word	0x200024a4

0801d1c8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801d1c8:	b580      	push	{r7, lr}
 801d1ca:	b084      	sub	sp, #16
 801d1cc:	af00      	add	r7, sp, #0
 801d1ce:	6078      	str	r0, [r7, #4]
 801d1d0:	460b      	mov	r3, r1
 801d1d2:	70fb      	strb	r3, [r7, #3]
 801d1d4:	4613      	mov	r3, r2
 801d1d6:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801d1d8:	883b      	ldrh	r3, [r7, #0]
 801d1da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d1de:	fb02 f303 	mul.w	r3, r2, r3
 801d1e2:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801d1e4:	6878      	ldr	r0, [r7, #4]
 801d1e6:	f001 fbbb 	bl	801e960 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801d1ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d1ee:	4618      	mov	r0, r3
 801d1f0:	f002 f826 	bl	801f240 <SUBGRF_SetRfTxPower>
 801d1f4:	4603      	mov	r3, r0
 801d1f6:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801d1f8:	7afb      	ldrb	r3, [r7, #11]
 801d1fa:	2101      	movs	r1, #1
 801d1fc:	4618      	mov	r0, r3
 801d1fe:	f001 fff7 	bl	801f1f0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801d202:	f001 fa3b 	bl	801e67c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801d206:	68f9      	ldr	r1, [r7, #12]
 801d208:	4804      	ldr	r0, [pc, #16]	; (801d21c <RadioSetTxContinuousWave+0x54>)
 801d20a:	f003 f97d 	bl	8020508 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801d20e:	4803      	ldr	r0, [pc, #12]	; (801d21c <RadioSetTxContinuousWave+0x54>)
 801d210:	f003 f89c 	bl	802034c <UTIL_TIMER_Start>
}
 801d214:	bf00      	nop
 801d216:	3710      	adds	r7, #16
 801d218:	46bd      	mov	sp, r7
 801d21a:	bd80      	pop	{r7, pc}
 801d21c:	20002500 	.word	0x20002500

0801d220 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801d220:	b580      	push	{r7, lr}
 801d222:	b082      	sub	sp, #8
 801d224:	af00      	add	r7, sp, #0
 801d226:	4603      	mov	r3, r0
 801d228:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801d22a:	f001 fe5a 	bl	801eee2 <SUBGRF_GetRssiInst>
 801d22e:	4603      	mov	r3, r0
 801d230:	b21b      	sxth	r3, r3
}
 801d232:	4618      	mov	r0, r3
 801d234:	3708      	adds	r7, #8
 801d236:	46bd      	mov	sp, r7
 801d238:	bd80      	pop	{r7, pc}

0801d23a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801d23a:	b580      	push	{r7, lr}
 801d23c:	b082      	sub	sp, #8
 801d23e:	af00      	add	r7, sp, #0
 801d240:	4603      	mov	r3, r0
 801d242:	460a      	mov	r2, r1
 801d244:	80fb      	strh	r3, [r7, #6]
 801d246:	4613      	mov	r3, r2
 801d248:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801d24a:	797a      	ldrb	r2, [r7, #5]
 801d24c:	88fb      	ldrh	r3, [r7, #6]
 801d24e:	4611      	mov	r1, r2
 801d250:	4618      	mov	r0, r3
 801d252:	f001 fed9 	bl	801f008 <SUBGRF_WriteRegister>
}
 801d256:	bf00      	nop
 801d258:	3708      	adds	r7, #8
 801d25a:	46bd      	mov	sp, r7
 801d25c:	bd80      	pop	{r7, pc}

0801d25e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801d25e:	b580      	push	{r7, lr}
 801d260:	b082      	sub	sp, #8
 801d262:	af00      	add	r7, sp, #0
 801d264:	4603      	mov	r3, r0
 801d266:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801d268:	88fb      	ldrh	r3, [r7, #6]
 801d26a:	4618      	mov	r0, r3
 801d26c:	f001 fee0 	bl	801f030 <SUBGRF_ReadRegister>
 801d270:	4603      	mov	r3, r0
}
 801d272:	4618      	mov	r0, r3
 801d274:	3708      	adds	r7, #8
 801d276:	46bd      	mov	sp, r7
 801d278:	bd80      	pop	{r7, pc}

0801d27a <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801d27a:	b580      	push	{r7, lr}
 801d27c:	b082      	sub	sp, #8
 801d27e:	af00      	add	r7, sp, #0
 801d280:	4603      	mov	r3, r0
 801d282:	6039      	str	r1, [r7, #0]
 801d284:	80fb      	strh	r3, [r7, #6]
 801d286:	4613      	mov	r3, r2
 801d288:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801d28a:	797b      	ldrb	r3, [r7, #5]
 801d28c:	b29a      	uxth	r2, r3
 801d28e:	88fb      	ldrh	r3, [r7, #6]
 801d290:	6839      	ldr	r1, [r7, #0]
 801d292:	4618      	mov	r0, r3
 801d294:	f001 fee0 	bl	801f058 <SUBGRF_WriteRegisters>
}
 801d298:	bf00      	nop
 801d29a:	3708      	adds	r7, #8
 801d29c:	46bd      	mov	sp, r7
 801d29e:	bd80      	pop	{r7, pc}

0801d2a0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801d2a0:	b580      	push	{r7, lr}
 801d2a2:	b082      	sub	sp, #8
 801d2a4:	af00      	add	r7, sp, #0
 801d2a6:	4603      	mov	r3, r0
 801d2a8:	6039      	str	r1, [r7, #0]
 801d2aa:	80fb      	strh	r3, [r7, #6]
 801d2ac:	4613      	mov	r3, r2
 801d2ae:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801d2b0:	797b      	ldrb	r3, [r7, #5]
 801d2b2:	b29a      	uxth	r2, r3
 801d2b4:	88fb      	ldrh	r3, [r7, #6]
 801d2b6:	6839      	ldr	r1, [r7, #0]
 801d2b8:	4618      	mov	r0, r3
 801d2ba:	f001 feef 	bl	801f09c <SUBGRF_ReadRegisters>
}
 801d2be:	bf00      	nop
 801d2c0:	3708      	adds	r7, #8
 801d2c2:	46bd      	mov	sp, r7
 801d2c4:	bd80      	pop	{r7, pc}
	...

0801d2c8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801d2c8:	b580      	push	{r7, lr}
 801d2ca:	b082      	sub	sp, #8
 801d2cc:	af00      	add	r7, sp, #0
 801d2ce:	4603      	mov	r3, r0
 801d2d0:	460a      	mov	r2, r1
 801d2d2:	71fb      	strb	r3, [r7, #7]
 801d2d4:	4613      	mov	r3, r2
 801d2d6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801d2d8:	79fb      	ldrb	r3, [r7, #7]
 801d2da:	2b01      	cmp	r3, #1
 801d2dc:	d10a      	bne.n	801d2f4 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801d2de:	4a0e      	ldr	r2, [pc, #56]	; (801d318 <RadioSetMaxPayloadLength+0x50>)
 801d2e0:	79bb      	ldrb	r3, [r7, #6]
 801d2e2:	7013      	strb	r3, [r2, #0]
 801d2e4:	4b0c      	ldr	r3, [pc, #48]	; (801d318 <RadioSetMaxPayloadLength+0x50>)
 801d2e6:	781a      	ldrb	r2, [r3, #0]
 801d2e8:	4b0c      	ldr	r3, [pc, #48]	; (801d31c <RadioSetMaxPayloadLength+0x54>)
 801d2ea:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d2ec:	480c      	ldr	r0, [pc, #48]	; (801d320 <RadioSetMaxPayloadLength+0x58>)
 801d2ee:	f001 fd43 	bl	801ed78 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801d2f2:	e00d      	b.n	801d310 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801d2f4:	4b09      	ldr	r3, [pc, #36]	; (801d31c <RadioSetMaxPayloadLength+0x54>)
 801d2f6:	7d5b      	ldrb	r3, [r3, #21]
 801d2f8:	2b01      	cmp	r3, #1
 801d2fa:	d109      	bne.n	801d310 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801d2fc:	4a06      	ldr	r2, [pc, #24]	; (801d318 <RadioSetMaxPayloadLength+0x50>)
 801d2fe:	79bb      	ldrb	r3, [r7, #6]
 801d300:	7013      	strb	r3, [r2, #0]
 801d302:	4b05      	ldr	r3, [pc, #20]	; (801d318 <RadioSetMaxPayloadLength+0x50>)
 801d304:	781a      	ldrb	r2, [r3, #0]
 801d306:	4b05      	ldr	r3, [pc, #20]	; (801d31c <RadioSetMaxPayloadLength+0x54>)
 801d308:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d30a:	4805      	ldr	r0, [pc, #20]	; (801d320 <RadioSetMaxPayloadLength+0x58>)
 801d30c:	f001 fd34 	bl	801ed78 <SUBGRF_SetPacketParams>
}
 801d310:	bf00      	nop
 801d312:	3708      	adds	r7, #8
 801d314:	46bd      	mov	sp, r7
 801d316:	bd80      	pop	{r7, pc}
 801d318:	20000160 	.word	0x20000160
 801d31c:	200024a4 	.word	0x200024a4
 801d320:	200024b2 	.word	0x200024b2

0801d324 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801d324:	b580      	push	{r7, lr}
 801d326:	b082      	sub	sp, #8
 801d328:	af00      	add	r7, sp, #0
 801d32a:	4603      	mov	r3, r0
 801d32c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801d32e:	4a13      	ldr	r2, [pc, #76]	; (801d37c <RadioSetPublicNetwork+0x58>)
 801d330:	79fb      	ldrb	r3, [r7, #7]
 801d332:	7313      	strb	r3, [r2, #12]
 801d334:	4b11      	ldr	r3, [pc, #68]	; (801d37c <RadioSetPublicNetwork+0x58>)
 801d336:	7b1a      	ldrb	r2, [r3, #12]
 801d338:	4b10      	ldr	r3, [pc, #64]	; (801d37c <RadioSetPublicNetwork+0x58>)
 801d33a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801d33c:	2001      	movs	r0, #1
 801d33e:	f7ff f82d 	bl	801c39c <RadioSetModem>
    if( enable == true )
 801d342:	79fb      	ldrb	r3, [r7, #7]
 801d344:	2b00      	cmp	r3, #0
 801d346:	d00a      	beq.n	801d35e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801d348:	2134      	movs	r1, #52	; 0x34
 801d34a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801d34e:	f001 fe5b 	bl	801f008 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801d352:	2144      	movs	r1, #68	; 0x44
 801d354:	f240 7041 	movw	r0, #1857	; 0x741
 801d358:	f001 fe56 	bl	801f008 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801d35c:	e009      	b.n	801d372 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801d35e:	2114      	movs	r1, #20
 801d360:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801d364:	f001 fe50 	bl	801f008 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801d368:	2124      	movs	r1, #36	; 0x24
 801d36a:	f240 7041 	movw	r0, #1857	; 0x741
 801d36e:	f001 fe4b 	bl	801f008 <SUBGRF_WriteRegister>
}
 801d372:	bf00      	nop
 801d374:	3708      	adds	r7, #8
 801d376:	46bd      	mov	sp, r7
 801d378:	bd80      	pop	{r7, pc}
 801d37a:	bf00      	nop
 801d37c:	200024a4 	.word	0x200024a4

0801d380 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801d380:	b580      	push	{r7, lr}
 801d382:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801d384:	f001 ff90 	bl	801f2a8 <SUBGRF_GetRadioWakeUpTime>
 801d388:	4603      	mov	r3, r0
 801d38a:	3303      	adds	r3, #3
}
 801d38c:	4618      	mov	r0, r3
 801d38e:	bd80      	pop	{r7, pc}

0801d390 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801d390:	b580      	push	{r7, lr}
 801d392:	b082      	sub	sp, #8
 801d394:	af00      	add	r7, sp, #0
 801d396:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801d398:	f000 f80e 	bl	801d3b8 <RadioOnTxTimeoutProcess>
}
 801d39c:	bf00      	nop
 801d39e:	3708      	adds	r7, #8
 801d3a0:	46bd      	mov	sp, r7
 801d3a2:	bd80      	pop	{r7, pc}

0801d3a4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801d3a4:	b580      	push	{r7, lr}
 801d3a6:	b082      	sub	sp, #8
 801d3a8:	af00      	add	r7, sp, #0
 801d3aa:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801d3ac:	f000 f818 	bl	801d3e0 <RadioOnRxTimeoutProcess>
}
 801d3b0:	bf00      	nop
 801d3b2:	3708      	adds	r7, #8
 801d3b4:	46bd      	mov	sp, r7
 801d3b6:	bd80      	pop	{r7, pc}

0801d3b8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801d3b8:	b580      	push	{r7, lr}
 801d3ba:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801d3bc:	4b07      	ldr	r3, [pc, #28]	; (801d3dc <RadioOnTxTimeoutProcess+0x24>)
 801d3be:	681b      	ldr	r3, [r3, #0]
 801d3c0:	2b00      	cmp	r3, #0
 801d3c2:	d008      	beq.n	801d3d6 <RadioOnTxTimeoutProcess+0x1e>
 801d3c4:	4b05      	ldr	r3, [pc, #20]	; (801d3dc <RadioOnTxTimeoutProcess+0x24>)
 801d3c6:	681b      	ldr	r3, [r3, #0]
 801d3c8:	685b      	ldr	r3, [r3, #4]
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	d003      	beq.n	801d3d6 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801d3ce:	4b03      	ldr	r3, [pc, #12]	; (801d3dc <RadioOnTxTimeoutProcess+0x24>)
 801d3d0:	681b      	ldr	r3, [r3, #0]
 801d3d2:	685b      	ldr	r3, [r3, #4]
 801d3d4:	4798      	blx	r3
    }
}
 801d3d6:	bf00      	nop
 801d3d8:	bd80      	pop	{r7, pc}
 801d3da:	bf00      	nop
 801d3dc:	200024a0 	.word	0x200024a0

0801d3e0 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801d3e0:	b580      	push	{r7, lr}
 801d3e2:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801d3e4:	4b07      	ldr	r3, [pc, #28]	; (801d404 <RadioOnRxTimeoutProcess+0x24>)
 801d3e6:	681b      	ldr	r3, [r3, #0]
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	d008      	beq.n	801d3fe <RadioOnRxTimeoutProcess+0x1e>
 801d3ec:	4b05      	ldr	r3, [pc, #20]	; (801d404 <RadioOnRxTimeoutProcess+0x24>)
 801d3ee:	681b      	ldr	r3, [r3, #0]
 801d3f0:	68db      	ldr	r3, [r3, #12]
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	d003      	beq.n	801d3fe <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801d3f6:	4b03      	ldr	r3, [pc, #12]	; (801d404 <RadioOnRxTimeoutProcess+0x24>)
 801d3f8:	681b      	ldr	r3, [r3, #0]
 801d3fa:	68db      	ldr	r3, [r3, #12]
 801d3fc:	4798      	blx	r3
    }
}
 801d3fe:	bf00      	nop
 801d400:	bd80      	pop	{r7, pc}
 801d402:	bf00      	nop
 801d404:	200024a0 	.word	0x200024a0

0801d408 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801d408:	b580      	push	{r7, lr}
 801d40a:	b082      	sub	sp, #8
 801d40c:	af00      	add	r7, sp, #0
 801d40e:	4603      	mov	r3, r0
 801d410:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801d412:	4a05      	ldr	r2, [pc, #20]	; (801d428 <RadioOnDioIrq+0x20>)
 801d414:	88fb      	ldrh	r3, [r7, #6]
 801d416:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801d41a:	f000 f807 	bl	801d42c <RadioIrqProcess>
}
 801d41e:	bf00      	nop
 801d420:	3708      	adds	r7, #8
 801d422:	46bd      	mov	sp, r7
 801d424:	bd80      	pop	{r7, pc}
 801d426:	bf00      	nop
 801d428:	200024a4 	.word	0x200024a4

0801d42c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801d42c:	b590      	push	{r4, r7, lr}
 801d42e:	b083      	sub	sp, #12
 801d430:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801d432:	2300      	movs	r3, #0
 801d434:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801d436:	2300      	movs	r3, #0
 801d438:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801d43a:	4ba8      	ldr	r3, [pc, #672]	; (801d6dc <RadioIrqProcess+0x2b0>)
 801d43c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801d440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d444:	f000 810c 	beq.w	801d660 <RadioIrqProcess+0x234>
 801d448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d44c:	f300 81e8 	bgt.w	801d820 <RadioIrqProcess+0x3f4>
 801d450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d454:	f000 80f0 	beq.w	801d638 <RadioIrqProcess+0x20c>
 801d458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d45c:	f300 81e0 	bgt.w	801d820 <RadioIrqProcess+0x3f4>
 801d460:	2b80      	cmp	r3, #128	; 0x80
 801d462:	f000 80d5 	beq.w	801d610 <RadioIrqProcess+0x1e4>
 801d466:	2b80      	cmp	r3, #128	; 0x80
 801d468:	f300 81da 	bgt.w	801d820 <RadioIrqProcess+0x3f4>
 801d46c:	2b20      	cmp	r3, #32
 801d46e:	dc49      	bgt.n	801d504 <RadioIrqProcess+0xd8>
 801d470:	2b00      	cmp	r3, #0
 801d472:	f340 81d5 	ble.w	801d820 <RadioIrqProcess+0x3f4>
 801d476:	3b01      	subs	r3, #1
 801d478:	2b1f      	cmp	r3, #31
 801d47a:	f200 81d1 	bhi.w	801d820 <RadioIrqProcess+0x3f4>
 801d47e:	a201      	add	r2, pc, #4	; (adr r2, 801d484 <RadioIrqProcess+0x58>)
 801d480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d484:	0801d50d 	.word	0x0801d50d
 801d488:	0801d547 	.word	0x0801d547
 801d48c:	0801d821 	.word	0x0801d821
 801d490:	0801d6fd 	.word	0x0801d6fd
 801d494:	0801d821 	.word	0x0801d821
 801d498:	0801d821 	.word	0x0801d821
 801d49c:	0801d821 	.word	0x0801d821
 801d4a0:	0801d779 	.word	0x0801d779
 801d4a4:	0801d821 	.word	0x0801d821
 801d4a8:	0801d821 	.word	0x0801d821
 801d4ac:	0801d821 	.word	0x0801d821
 801d4b0:	0801d821 	.word	0x0801d821
 801d4b4:	0801d821 	.word	0x0801d821
 801d4b8:	0801d821 	.word	0x0801d821
 801d4bc:	0801d821 	.word	0x0801d821
 801d4c0:	0801d795 	.word	0x0801d795
 801d4c4:	0801d821 	.word	0x0801d821
 801d4c8:	0801d821 	.word	0x0801d821
 801d4cc:	0801d821 	.word	0x0801d821
 801d4d0:	0801d821 	.word	0x0801d821
 801d4d4:	0801d821 	.word	0x0801d821
 801d4d8:	0801d821 	.word	0x0801d821
 801d4dc:	0801d821 	.word	0x0801d821
 801d4e0:	0801d821 	.word	0x0801d821
 801d4e4:	0801d821 	.word	0x0801d821
 801d4e8:	0801d821 	.word	0x0801d821
 801d4ec:	0801d821 	.word	0x0801d821
 801d4f0:	0801d821 	.word	0x0801d821
 801d4f4:	0801d821 	.word	0x0801d821
 801d4f8:	0801d821 	.word	0x0801d821
 801d4fc:	0801d821 	.word	0x0801d821
 801d500:	0801d7a3 	.word	0x0801d7a3
 801d504:	2b40      	cmp	r3, #64	; 0x40
 801d506:	f000 816d 	beq.w	801d7e4 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801d50a:	e189      	b.n	801d820 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801d50c:	4874      	ldr	r0, [pc, #464]	; (801d6e0 <RadioIrqProcess+0x2b4>)
 801d50e:	f002 ff8b 	bl	8020428 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801d512:	2000      	movs	r0, #0
 801d514:	f000 fff8 	bl	801e508 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801d518:	f002 f85a 	bl	801f5d0 <RFW_Is_LongPacketModeEnabled>
 801d51c:	4603      	mov	r3, r0
 801d51e:	2b01      	cmp	r3, #1
 801d520:	d101      	bne.n	801d526 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801d522:	f002 f87e 	bl	801f622 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801d526:	4b6f      	ldr	r3, [pc, #444]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d528:	681b      	ldr	r3, [r3, #0]
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	f000 817a 	beq.w	801d824 <RadioIrqProcess+0x3f8>
 801d530:	4b6c      	ldr	r3, [pc, #432]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d532:	681b      	ldr	r3, [r3, #0]
 801d534:	681b      	ldr	r3, [r3, #0]
 801d536:	2b00      	cmp	r3, #0
 801d538:	f000 8174 	beq.w	801d824 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801d53c:	4b69      	ldr	r3, [pc, #420]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d53e:	681b      	ldr	r3, [r3, #0]
 801d540:	681b      	ldr	r3, [r3, #0]
 801d542:	4798      	blx	r3
        break;
 801d544:	e16e      	b.n	801d824 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801d546:	4868      	ldr	r0, [pc, #416]	; (801d6e8 <RadioIrqProcess+0x2bc>)
 801d548:	f002 ff6e 	bl	8020428 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801d54c:	4b63      	ldr	r3, [pc, #396]	; (801d6dc <RadioIrqProcess+0x2b0>)
 801d54e:	785b      	ldrb	r3, [r3, #1]
 801d550:	f083 0301 	eor.w	r3, r3, #1
 801d554:	b2db      	uxtb	r3, r3
 801d556:	2b00      	cmp	r3, #0
 801d558:	d014      	beq.n	801d584 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801d55a:	2000      	movs	r0, #0
 801d55c:	f000 ffd4 	bl	801e508 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801d560:	2100      	movs	r1, #0
 801d562:	f640 1002 	movw	r0, #2306	; 0x902
 801d566:	f001 fd4f 	bl	801f008 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801d56a:	f640 1044 	movw	r0, #2372	; 0x944
 801d56e:	f001 fd5f 	bl	801f030 <SUBGRF_ReadRegister>
 801d572:	4603      	mov	r3, r0
 801d574:	f043 0302 	orr.w	r3, r3, #2
 801d578:	b2db      	uxtb	r3, r3
 801d57a:	4619      	mov	r1, r3
 801d57c:	f640 1044 	movw	r0, #2372	; 0x944
 801d580:	f001 fd42 	bl	801f008 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801d584:	1dfb      	adds	r3, r7, #7
 801d586:	22ff      	movs	r2, #255	; 0xff
 801d588:	4619      	mov	r1, r3
 801d58a:	4858      	ldr	r0, [pc, #352]	; (801d6ec <RadioIrqProcess+0x2c0>)
 801d58c:	f000 fe8c 	bl	801e2a8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801d590:	4857      	ldr	r0, [pc, #348]	; (801d6f0 <RadioIrqProcess+0x2c4>)
 801d592:	f001 fce7 	bl	801ef64 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801d596:	4b53      	ldr	r3, [pc, #332]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d598:	681b      	ldr	r3, [r3, #0]
 801d59a:	2b00      	cmp	r3, #0
 801d59c:	d036      	beq.n	801d60c <RadioIrqProcess+0x1e0>
 801d59e:	4b51      	ldr	r3, [pc, #324]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d5a0:	681b      	ldr	r3, [r3, #0]
 801d5a2:	689b      	ldr	r3, [r3, #8]
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	d031      	beq.n	801d60c <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 801d5a8:	4b4c      	ldr	r3, [pc, #304]	; (801d6dc <RadioIrqProcess+0x2b0>)
 801d5aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801d5ae:	2b01      	cmp	r3, #1
 801d5b0:	d10e      	bne.n	801d5d0 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801d5b2:	4b4c      	ldr	r3, [pc, #304]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d5b4:	681b      	ldr	r3, [r3, #0]
 801d5b6:	689c      	ldr	r4, [r3, #8]
 801d5b8:	79fb      	ldrb	r3, [r7, #7]
 801d5ba:	b299      	uxth	r1, r3
 801d5bc:	4b47      	ldr	r3, [pc, #284]	; (801d6dc <RadioIrqProcess+0x2b0>)
 801d5be:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801d5c2:	b21a      	sxth	r2, r3
 801d5c4:	4b45      	ldr	r3, [pc, #276]	; (801d6dc <RadioIrqProcess+0x2b0>)
 801d5c6:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801d5ca:	4848      	ldr	r0, [pc, #288]	; (801d6ec <RadioIrqProcess+0x2c0>)
 801d5cc:	47a0      	blx	r4
                break;
 801d5ce:	e01e      	b.n	801d60e <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801d5d0:	4b42      	ldr	r3, [pc, #264]	; (801d6dc <RadioIrqProcess+0x2b0>)
 801d5d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d5d4:	463a      	mov	r2, r7
 801d5d6:	4611      	mov	r1, r2
 801d5d8:	4618      	mov	r0, r3
 801d5da:	f001 ff47 	bl	801f46c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801d5de:	4b41      	ldr	r3, [pc, #260]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d5e0:	681b      	ldr	r3, [r3, #0]
 801d5e2:	689c      	ldr	r4, [r3, #8]
 801d5e4:	79fb      	ldrb	r3, [r7, #7]
 801d5e6:	b299      	uxth	r1, r3
 801d5e8:	4b3c      	ldr	r3, [pc, #240]	; (801d6dc <RadioIrqProcess+0x2b0>)
 801d5ea:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801d5ee:	b218      	sxth	r0, r3
 801d5f0:	683b      	ldr	r3, [r7, #0]
 801d5f2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801d5f6:	4a3f      	ldr	r2, [pc, #252]	; (801d6f4 <RadioIrqProcess+0x2c8>)
 801d5f8:	fb82 c203 	smull	ip, r2, r2, r3
 801d5fc:	1192      	asrs	r2, r2, #6
 801d5fe:	17db      	asrs	r3, r3, #31
 801d600:	1ad3      	subs	r3, r2, r3
 801d602:	b25b      	sxtb	r3, r3
 801d604:	4602      	mov	r2, r0
 801d606:	4839      	ldr	r0, [pc, #228]	; (801d6ec <RadioIrqProcess+0x2c0>)
 801d608:	47a0      	blx	r4
                break;
 801d60a:	e000      	b.n	801d60e <RadioIrqProcess+0x1e2>
        }
 801d60c:	bf00      	nop
        break;
 801d60e:	e118      	b.n	801d842 <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 801d610:	2000      	movs	r0, #0
 801d612:	f000 ff79 	bl	801e508 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801d616:	4b33      	ldr	r3, [pc, #204]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d618:	681b      	ldr	r3, [r3, #0]
 801d61a:	2b00      	cmp	r3, #0
 801d61c:	f000 8104 	beq.w	801d828 <RadioIrqProcess+0x3fc>
 801d620:	4b30      	ldr	r3, [pc, #192]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d622:	681b      	ldr	r3, [r3, #0]
 801d624:	699b      	ldr	r3, [r3, #24]
 801d626:	2b00      	cmp	r3, #0
 801d628:	f000 80fe 	beq.w	801d828 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 801d62c:	4b2d      	ldr	r3, [pc, #180]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d62e:	681b      	ldr	r3, [r3, #0]
 801d630:	699b      	ldr	r3, [r3, #24]
 801d632:	2000      	movs	r0, #0
 801d634:	4798      	blx	r3
        break;
 801d636:	e0f7      	b.n	801d828 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801d638:	2000      	movs	r0, #0
 801d63a:	f000 ff65 	bl	801e508 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801d63e:	4b29      	ldr	r3, [pc, #164]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d640:	681b      	ldr	r3, [r3, #0]
 801d642:	2b00      	cmp	r3, #0
 801d644:	f000 80f2 	beq.w	801d82c <RadioIrqProcess+0x400>
 801d648:	4b26      	ldr	r3, [pc, #152]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d64a:	681b      	ldr	r3, [r3, #0]
 801d64c:	699b      	ldr	r3, [r3, #24]
 801d64e:	2b00      	cmp	r3, #0
 801d650:	f000 80ec 	beq.w	801d82c <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 801d654:	4b23      	ldr	r3, [pc, #140]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d656:	681b      	ldr	r3, [r3, #0]
 801d658:	699b      	ldr	r3, [r3, #24]
 801d65a:	2001      	movs	r0, #1
 801d65c:	4798      	blx	r3
        break;
 801d65e:	e0e5      	b.n	801d82c <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801d660:	4b25      	ldr	r3, [pc, #148]	; (801d6f8 <RadioIrqProcess+0x2cc>)
 801d662:	2201      	movs	r2, #1
 801d664:	2100      	movs	r1, #0
 801d666:	2002      	movs	r0, #2
 801d668:	f003 f8e8 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801d66c:	f000 fe02 	bl	801e274 <SUBGRF_GetOperatingMode>
 801d670:	4603      	mov	r3, r0
 801d672:	2b04      	cmp	r3, #4
 801d674:	d115      	bne.n	801d6a2 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 801d676:	481a      	ldr	r0, [pc, #104]	; (801d6e0 <RadioIrqProcess+0x2b4>)
 801d678:	f002 fed6 	bl	8020428 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801d67c:	2000      	movs	r0, #0
 801d67e:	f000 ff43 	bl	801e508 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801d682:	4b18      	ldr	r3, [pc, #96]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d684:	681b      	ldr	r3, [r3, #0]
 801d686:	2b00      	cmp	r3, #0
 801d688:	f000 80d2 	beq.w	801d830 <RadioIrqProcess+0x404>
 801d68c:	4b15      	ldr	r3, [pc, #84]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d68e:	681b      	ldr	r3, [r3, #0]
 801d690:	685b      	ldr	r3, [r3, #4]
 801d692:	2b00      	cmp	r3, #0
 801d694:	f000 80cc 	beq.w	801d830 <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 801d698:	4b12      	ldr	r3, [pc, #72]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d69a:	681b      	ldr	r3, [r3, #0]
 801d69c:	685b      	ldr	r3, [r3, #4]
 801d69e:	4798      	blx	r3
        break;
 801d6a0:	e0c6      	b.n	801d830 <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801d6a2:	f000 fde7 	bl	801e274 <SUBGRF_GetOperatingMode>
 801d6a6:	4603      	mov	r3, r0
 801d6a8:	2b05      	cmp	r3, #5
 801d6aa:	f040 80c1 	bne.w	801d830 <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 801d6ae:	480e      	ldr	r0, [pc, #56]	; (801d6e8 <RadioIrqProcess+0x2bc>)
 801d6b0:	f002 feba 	bl	8020428 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801d6b4:	2000      	movs	r0, #0
 801d6b6:	f000 ff27 	bl	801e508 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801d6ba:	4b0a      	ldr	r3, [pc, #40]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d6bc:	681b      	ldr	r3, [r3, #0]
 801d6be:	2b00      	cmp	r3, #0
 801d6c0:	f000 80b6 	beq.w	801d830 <RadioIrqProcess+0x404>
 801d6c4:	4b07      	ldr	r3, [pc, #28]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d6c6:	681b      	ldr	r3, [r3, #0]
 801d6c8:	68db      	ldr	r3, [r3, #12]
 801d6ca:	2b00      	cmp	r3, #0
 801d6cc:	f000 80b0 	beq.w	801d830 <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 801d6d0:	4b04      	ldr	r3, [pc, #16]	; (801d6e4 <RadioIrqProcess+0x2b8>)
 801d6d2:	681b      	ldr	r3, [r3, #0]
 801d6d4:	68db      	ldr	r3, [r3, #12]
 801d6d6:	4798      	blx	r3
        break;
 801d6d8:	e0aa      	b.n	801d830 <RadioIrqProcess+0x404>
 801d6da:	bf00      	nop
 801d6dc:	200024a4 	.word	0x200024a4
 801d6e0:	20002500 	.word	0x20002500
 801d6e4:	200024a0 	.word	0x200024a0
 801d6e8:	20002518 	.word	0x20002518
 801d6ec:	200023a0 	.word	0x200023a0
 801d6f0:	200024c8 	.word	0x200024c8
 801d6f4:	10624dd3 	.word	0x10624dd3
 801d6f8:	080217c8 	.word	0x080217c8
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801d6fc:	4b53      	ldr	r3, [pc, #332]	; (801d84c <RadioIrqProcess+0x420>)
 801d6fe:	2201      	movs	r2, #1
 801d700:	2100      	movs	r1, #0
 801d702:	2002      	movs	r0, #2
 801d704:	f003 f89a 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801d708:	4b51      	ldr	r3, [pc, #324]	; (801d850 <RadioIrqProcess+0x424>)
 801d70a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	f000 8091 	beq.w	801d834 <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 801d712:	4a50      	ldr	r2, [pc, #320]	; (801d854 <RadioIrqProcess+0x428>)
 801d714:	4b4e      	ldr	r3, [pc, #312]	; (801d850 <RadioIrqProcess+0x424>)
 801d716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d718:	0c1b      	lsrs	r3, r3, #16
 801d71a:	b2db      	uxtb	r3, r3
 801d71c:	4619      	mov	r1, r3
 801d71e:	f640 1003 	movw	r0, #2307	; 0x903
 801d722:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 801d724:	4a4b      	ldr	r2, [pc, #300]	; (801d854 <RadioIrqProcess+0x428>)
 801d726:	4b4a      	ldr	r3, [pc, #296]	; (801d850 <RadioIrqProcess+0x424>)
 801d728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d72a:	0a1b      	lsrs	r3, r3, #8
 801d72c:	b2db      	uxtb	r3, r3
 801d72e:	4619      	mov	r1, r3
 801d730:	f640 1004 	movw	r0, #2308	; 0x904
 801d734:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 801d736:	4a47      	ldr	r2, [pc, #284]	; (801d854 <RadioIrqProcess+0x428>)
 801d738:	4b45      	ldr	r3, [pc, #276]	; (801d850 <RadioIrqProcess+0x424>)
 801d73a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d73c:	b2db      	uxtb	r3, r3
 801d73e:	4619      	mov	r1, r3
 801d740:	f640 1005 	movw	r0, #2309	; 0x905
 801d744:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 801d746:	4c43      	ldr	r4, [pc, #268]	; (801d854 <RadioIrqProcess+0x428>)
 801d748:	4b43      	ldr	r3, [pc, #268]	; (801d858 <RadioIrqProcess+0x42c>)
 801d74a:	f640 1002 	movw	r0, #2306	; 0x902
 801d74e:	4798      	blx	r3
 801d750:	4603      	mov	r3, r0
 801d752:	f043 0301 	orr.w	r3, r3, #1
 801d756:	b2db      	uxtb	r3, r3
 801d758:	4619      	mov	r1, r3
 801d75a:	f640 1002 	movw	r0, #2306	; 0x902
 801d75e:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 801d760:	4b3b      	ldr	r3, [pc, #236]	; (801d850 <RadioIrqProcess+0x424>)
 801d762:	2200      	movs	r2, #0
 801d764:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801d766:	2300      	movs	r3, #0
 801d768:	2200      	movs	r2, #0
 801d76a:	f240 2162 	movw	r1, #610	; 0x262
 801d76e:	f240 2062 	movw	r0, #610	; 0x262
 801d772:	f001 f899 	bl	801e8a8 <SUBGRF_SetDioIrqParams>
        break;
 801d776:	e05d      	b.n	801d834 <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801d778:	4b38      	ldr	r3, [pc, #224]	; (801d85c <RadioIrqProcess+0x430>)
 801d77a:	2201      	movs	r2, #1
 801d77c:	2100      	movs	r1, #0
 801d77e:	2002      	movs	r0, #2
 801d780:	f003 f85c 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801d784:	f001 ff1d 	bl	801f5c2 <RFW_Is_Init>
 801d788:	4603      	mov	r3, r0
 801d78a:	2b01      	cmp	r3, #1
 801d78c:	d154      	bne.n	801d838 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 801d78e:	f001 ff4e 	bl	801f62e <RFW_ReceivePayload>
        break;
 801d792:	e051      	b.n	801d838 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801d794:	4b32      	ldr	r3, [pc, #200]	; (801d860 <RadioIrqProcess+0x434>)
 801d796:	2201      	movs	r2, #1
 801d798:	2100      	movs	r1, #0
 801d79a:	2002      	movs	r0, #2
 801d79c:	f003 f84e 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801d7a0:	e04f      	b.n	801d842 <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 801d7a2:	4830      	ldr	r0, [pc, #192]	; (801d864 <RadioIrqProcess+0x438>)
 801d7a4:	f002 fe40 	bl	8020428 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801d7a8:	4b29      	ldr	r3, [pc, #164]	; (801d850 <RadioIrqProcess+0x424>)
 801d7aa:	785b      	ldrb	r3, [r3, #1]
 801d7ac:	f083 0301 	eor.w	r3, r3, #1
 801d7b0:	b2db      	uxtb	r3, r3
 801d7b2:	2b00      	cmp	r3, #0
 801d7b4:	d002      	beq.n	801d7bc <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801d7b6:	2000      	movs	r0, #0
 801d7b8:	f000 fea6 	bl	801e508 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801d7bc:	4b2a      	ldr	r3, [pc, #168]	; (801d868 <RadioIrqProcess+0x43c>)
 801d7be:	681b      	ldr	r3, [r3, #0]
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	d03b      	beq.n	801d83c <RadioIrqProcess+0x410>
 801d7c4:	4b28      	ldr	r3, [pc, #160]	; (801d868 <RadioIrqProcess+0x43c>)
 801d7c6:	681b      	ldr	r3, [r3, #0]
 801d7c8:	68db      	ldr	r3, [r3, #12]
 801d7ca:	2b00      	cmp	r3, #0
 801d7cc:	d036      	beq.n	801d83c <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 801d7ce:	4b26      	ldr	r3, [pc, #152]	; (801d868 <RadioIrqProcess+0x43c>)
 801d7d0:	681b      	ldr	r3, [r3, #0]
 801d7d2:	68db      	ldr	r3, [r3, #12]
 801d7d4:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801d7d6:	4b25      	ldr	r3, [pc, #148]	; (801d86c <RadioIrqProcess+0x440>)
 801d7d8:	2201      	movs	r2, #1
 801d7da:	2100      	movs	r1, #0
 801d7dc:	2002      	movs	r0, #2
 801d7de:	f003 f82d 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801d7e2:	e02b      	b.n	801d83c <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801d7e4:	4b22      	ldr	r3, [pc, #136]	; (801d870 <RadioIrqProcess+0x444>)
 801d7e6:	2201      	movs	r2, #1
 801d7e8:	2100      	movs	r1, #0
 801d7ea:	2002      	movs	r0, #2
 801d7ec:	f003 f826 	bl	802083c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801d7f0:	4b17      	ldr	r3, [pc, #92]	; (801d850 <RadioIrqProcess+0x424>)
 801d7f2:	785b      	ldrb	r3, [r3, #1]
 801d7f4:	f083 0301 	eor.w	r3, r3, #1
 801d7f8:	b2db      	uxtb	r3, r3
 801d7fa:	2b00      	cmp	r3, #0
 801d7fc:	d002      	beq.n	801d804 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801d7fe:	2000      	movs	r0, #0
 801d800:	f000 fe82 	bl	801e508 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801d804:	4b18      	ldr	r3, [pc, #96]	; (801d868 <RadioIrqProcess+0x43c>)
 801d806:	681b      	ldr	r3, [r3, #0]
 801d808:	2b00      	cmp	r3, #0
 801d80a:	d019      	beq.n	801d840 <RadioIrqProcess+0x414>
 801d80c:	4b16      	ldr	r3, [pc, #88]	; (801d868 <RadioIrqProcess+0x43c>)
 801d80e:	681b      	ldr	r3, [r3, #0]
 801d810:	691b      	ldr	r3, [r3, #16]
 801d812:	2b00      	cmp	r3, #0
 801d814:	d014      	beq.n	801d840 <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 801d816:	4b14      	ldr	r3, [pc, #80]	; (801d868 <RadioIrqProcess+0x43c>)
 801d818:	681b      	ldr	r3, [r3, #0]
 801d81a:	691b      	ldr	r3, [r3, #16]
 801d81c:	4798      	blx	r3
        break;
 801d81e:	e00f      	b.n	801d840 <RadioIrqProcess+0x414>
        break;
 801d820:	bf00      	nop
 801d822:	e00e      	b.n	801d842 <RadioIrqProcess+0x416>
        break;
 801d824:	bf00      	nop
 801d826:	e00c      	b.n	801d842 <RadioIrqProcess+0x416>
        break;
 801d828:	bf00      	nop
 801d82a:	e00a      	b.n	801d842 <RadioIrqProcess+0x416>
        break;
 801d82c:	bf00      	nop
 801d82e:	e008      	b.n	801d842 <RadioIrqProcess+0x416>
        break;
 801d830:	bf00      	nop
 801d832:	e006      	b.n	801d842 <RadioIrqProcess+0x416>
        break;
 801d834:	bf00      	nop
 801d836:	e004      	b.n	801d842 <RadioIrqProcess+0x416>
        break;
 801d838:	bf00      	nop
 801d83a:	e002      	b.n	801d842 <RadioIrqProcess+0x416>
        break;
 801d83c:	bf00      	nop
 801d83e:	e000      	b.n	801d842 <RadioIrqProcess+0x416>
        break;
 801d840:	bf00      	nop
    }
}
 801d842:	bf00      	nop
 801d844:	370c      	adds	r7, #12
 801d846:	46bd      	mov	sp, r7
 801d848:	bd90      	pop	{r4, r7, pc}
 801d84a:	bf00      	nop
 801d84c:	080217dc 	.word	0x080217dc
 801d850:	200024a4 	.word	0x200024a4
 801d854:	0801d23b 	.word	0x0801d23b
 801d858:	0801d25f 	.word	0x0801d25f
 801d85c:	080217e8 	.word	0x080217e8
 801d860:	080217f4 	.word	0x080217f4
 801d864:	20002518 	.word	0x20002518
 801d868:	200024a0 	.word	0x200024a0
 801d86c:	08021800 	.word	0x08021800
 801d870:	0802180c 	.word	0x0802180c

0801d874 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801d874:	b580      	push	{r7, lr}
 801d876:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801d878:	4b09      	ldr	r3, [pc, #36]	; (801d8a0 <RadioTxPrbs+0x2c>)
 801d87a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d87e:	2101      	movs	r1, #1
 801d880:	4618      	mov	r0, r3
 801d882:	f001 fcb5 	bl	801f1f0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801d886:	4b07      	ldr	r3, [pc, #28]	; (801d8a4 <RadioTxPrbs+0x30>)
 801d888:	212d      	movs	r1, #45	; 0x2d
 801d88a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801d88e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801d890:	f000 fefd 	bl	801e68e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801d894:	4804      	ldr	r0, [pc, #16]	; (801d8a8 <RadioTxPrbs+0x34>)
 801d896:	f000 fe53 	bl	801e540 <SUBGRF_SetTx>
}
 801d89a:	bf00      	nop
 801d89c:	bd80      	pop	{r7, pc}
 801d89e:	bf00      	nop
 801d8a0:	200024a4 	.word	0x200024a4
 801d8a4:	0801d23b 	.word	0x0801d23b
 801d8a8:	000fffff 	.word	0x000fffff

0801d8ac <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801d8ac:	b580      	push	{r7, lr}
 801d8ae:	b084      	sub	sp, #16
 801d8b0:	af00      	add	r7, sp, #0
 801d8b2:	4603      	mov	r3, r0
 801d8b4:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801d8b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d8ba:	4618      	mov	r0, r3
 801d8bc:	f001 fcc0 	bl	801f240 <SUBGRF_SetRfTxPower>
 801d8c0:	4603      	mov	r3, r0
 801d8c2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801d8c4:	7bfb      	ldrb	r3, [r7, #15]
 801d8c6:	2101      	movs	r1, #1
 801d8c8:	4618      	mov	r0, r3
 801d8ca:	f001 fc91 	bl	801f1f0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801d8ce:	f000 fed5 	bl	801e67c <SUBGRF_SetTxContinuousWave>
}
 801d8d2:	bf00      	nop
 801d8d4:	3710      	adds	r7, #16
 801d8d6:	46bd      	mov	sp, r7
 801d8d8:	bd80      	pop	{r7, pc}

0801d8da <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801d8da:	b480      	push	{r7}
 801d8dc:	b089      	sub	sp, #36	; 0x24
 801d8de:	af00      	add	r7, sp, #0
 801d8e0:	60f8      	str	r0, [r7, #12]
 801d8e2:	60b9      	str	r1, [r7, #8]
 801d8e4:	4613      	mov	r3, r2
 801d8e6:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801d8e8:	2300      	movs	r3, #0
 801d8ea:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801d8ec:	2300      	movs	r3, #0
 801d8ee:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801d8f0:	2300      	movs	r3, #0
 801d8f2:	61bb      	str	r3, [r7, #24]
 801d8f4:	e011      	b.n	801d91a <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801d8f6:	69bb      	ldr	r3, [r7, #24]
 801d8f8:	68ba      	ldr	r2, [r7, #8]
 801d8fa:	4413      	add	r3, r2
 801d8fc:	781a      	ldrb	r2, [r3, #0]
 801d8fe:	69bb      	ldr	r3, [r7, #24]
 801d900:	68b9      	ldr	r1, [r7, #8]
 801d902:	440b      	add	r3, r1
 801d904:	43d2      	mvns	r2, r2
 801d906:	b2d2      	uxtb	r2, r2
 801d908:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801d90a:	69bb      	ldr	r3, [r7, #24]
 801d90c:	68fa      	ldr	r2, [r7, #12]
 801d90e:	4413      	add	r3, r2
 801d910:	2200      	movs	r2, #0
 801d912:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801d914:	69bb      	ldr	r3, [r7, #24]
 801d916:	3301      	adds	r3, #1
 801d918:	61bb      	str	r3, [r7, #24]
 801d91a:	79fb      	ldrb	r3, [r7, #7]
 801d91c:	69ba      	ldr	r2, [r7, #24]
 801d91e:	429a      	cmp	r2, r3
 801d920:	dbe9      	blt.n	801d8f6 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801d922:	2300      	movs	r3, #0
 801d924:	61bb      	str	r3, [r7, #24]
 801d926:	e049      	b.n	801d9bc <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801d928:	69bb      	ldr	r3, [r7, #24]
 801d92a:	425a      	negs	r2, r3
 801d92c:	f003 0307 	and.w	r3, r3, #7
 801d930:	f002 0207 	and.w	r2, r2, #7
 801d934:	bf58      	it	pl
 801d936:	4253      	negpl	r3, r2
 801d938:	b2db      	uxtb	r3, r3
 801d93a:	f1c3 0307 	rsb	r3, r3, #7
 801d93e:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801d940:	69bb      	ldr	r3, [r7, #24]
 801d942:	2b00      	cmp	r3, #0
 801d944:	da00      	bge.n	801d948 <payload_integration+0x6e>
 801d946:	3307      	adds	r3, #7
 801d948:	10db      	asrs	r3, r3, #3
 801d94a:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801d94c:	69bb      	ldr	r3, [r7, #24]
 801d94e:	3301      	adds	r3, #1
 801d950:	425a      	negs	r2, r3
 801d952:	f003 0307 	and.w	r3, r3, #7
 801d956:	f002 0207 	and.w	r2, r2, #7
 801d95a:	bf58      	it	pl
 801d95c:	4253      	negpl	r3, r2
 801d95e:	b2db      	uxtb	r3, r3
 801d960:	f1c3 0307 	rsb	r3, r3, #7
 801d964:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801d966:	69bb      	ldr	r3, [r7, #24]
 801d968:	3301      	adds	r3, #1
 801d96a:	2b00      	cmp	r3, #0
 801d96c:	da00      	bge.n	801d970 <payload_integration+0x96>
 801d96e:	3307      	adds	r3, #7
 801d970:	10db      	asrs	r3, r3, #3
 801d972:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801d974:	7dbb      	ldrb	r3, [r7, #22]
 801d976:	68ba      	ldr	r2, [r7, #8]
 801d978:	4413      	add	r3, r2
 801d97a:	781b      	ldrb	r3, [r3, #0]
 801d97c:	461a      	mov	r2, r3
 801d97e:	7dfb      	ldrb	r3, [r7, #23]
 801d980:	fa42 f303 	asr.w	r3, r2, r3
 801d984:	b2db      	uxtb	r3, r3
 801d986:	f003 0301 	and.w	r3, r3, #1
 801d98a:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801d98c:	7ffa      	ldrb	r2, [r7, #31]
 801d98e:	7cfb      	ldrb	r3, [r7, #19]
 801d990:	4053      	eors	r3, r2
 801d992:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801d994:	7d3b      	ldrb	r3, [r7, #20]
 801d996:	68fa      	ldr	r2, [r7, #12]
 801d998:	4413      	add	r3, r2
 801d99a:	781b      	ldrb	r3, [r3, #0]
 801d99c:	b25a      	sxtb	r2, r3
 801d99e:	7ff9      	ldrb	r1, [r7, #31]
 801d9a0:	7d7b      	ldrb	r3, [r7, #21]
 801d9a2:	fa01 f303 	lsl.w	r3, r1, r3
 801d9a6:	b25b      	sxtb	r3, r3
 801d9a8:	4313      	orrs	r3, r2
 801d9aa:	b259      	sxtb	r1, r3
 801d9ac:	7d3b      	ldrb	r3, [r7, #20]
 801d9ae:	68fa      	ldr	r2, [r7, #12]
 801d9b0:	4413      	add	r3, r2
 801d9b2:	b2ca      	uxtb	r2, r1
 801d9b4:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801d9b6:	69bb      	ldr	r3, [r7, #24]
 801d9b8:	3301      	adds	r3, #1
 801d9ba:	61bb      	str	r3, [r7, #24]
 801d9bc:	79fb      	ldrb	r3, [r7, #7]
 801d9be:	00db      	lsls	r3, r3, #3
 801d9c0:	69ba      	ldr	r2, [r7, #24]
 801d9c2:	429a      	cmp	r2, r3
 801d9c4:	dbb0      	blt.n	801d928 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801d9c6:	7ffb      	ldrb	r3, [r7, #31]
 801d9c8:	01db      	lsls	r3, r3, #7
 801d9ca:	b25a      	sxtb	r2, r3
 801d9cc:	7ffb      	ldrb	r3, [r7, #31]
 801d9ce:	019b      	lsls	r3, r3, #6
 801d9d0:	b25b      	sxtb	r3, r3
 801d9d2:	4313      	orrs	r3, r2
 801d9d4:	b25b      	sxtb	r3, r3
 801d9d6:	7ffa      	ldrb	r2, [r7, #31]
 801d9d8:	2a00      	cmp	r2, #0
 801d9da:	d101      	bne.n	801d9e0 <payload_integration+0x106>
 801d9dc:	2220      	movs	r2, #32
 801d9de:	e000      	b.n	801d9e2 <payload_integration+0x108>
 801d9e0:	2200      	movs	r2, #0
 801d9e2:	4313      	orrs	r3, r2
 801d9e4:	b259      	sxtb	r1, r3
 801d9e6:	79fb      	ldrb	r3, [r7, #7]
 801d9e8:	68fa      	ldr	r2, [r7, #12]
 801d9ea:	4413      	add	r3, r2
 801d9ec:	b2ca      	uxtb	r2, r1
 801d9ee:	701a      	strb	r2, [r3, #0]
}
 801d9f0:	bf00      	nop
 801d9f2:	3724      	adds	r7, #36	; 0x24
 801d9f4:	46bd      	mov	sp, r7
 801d9f6:	bc80      	pop	{r7}
 801d9f8:	4770      	bx	lr
	...

0801d9fc <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 801d9fc:	b580      	push	{r7, lr}
 801d9fe:	b08c      	sub	sp, #48	; 0x30
 801da00:	af00      	add	r7, sp, #0
 801da02:	60b9      	str	r1, [r7, #8]
 801da04:	607a      	str	r2, [r7, #4]
 801da06:	603b      	str	r3, [r7, #0]
 801da08:	4603      	mov	r3, r0
 801da0a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801da0c:	2300      	movs	r3, #0
 801da0e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801da10:	2300      	movs	r3, #0
 801da12:	623b      	str	r3, [r7, #32]
 801da14:	2300      	movs	r3, #0
 801da16:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801da18:	f001 fdcd 	bl	801f5b6 <RFW_DeInit>

    if( rxContinuous != 0 )
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	2b00      	cmp	r3, #0
 801da20:	d001      	beq.n	801da26 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801da22:	2300      	movs	r3, #0
 801da24:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	2b00      	cmp	r3, #0
 801da2a:	bf14      	ite	ne
 801da2c:	2301      	movne	r3, #1
 801da2e:	2300      	moveq	r3, #0
 801da30:	b2da      	uxtb	r2, r3
 801da32:	4ba3      	ldr	r3, [pc, #652]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801da34:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801da36:	7bfb      	ldrb	r3, [r7, #15]
 801da38:	2b00      	cmp	r3, #0
 801da3a:	d003      	beq.n	801da44 <RadioSetRxGenericConfig+0x48>
 801da3c:	2b01      	cmp	r3, #1
 801da3e:	f000 80dc 	beq.w	801dbfa <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801da42:	e194      	b.n	801dd6e <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801da44:	68bb      	ldr	r3, [r7, #8]
 801da46:	689b      	ldr	r3, [r3, #8]
 801da48:	2b00      	cmp	r3, #0
 801da4a:	d003      	beq.n	801da54 <RadioSetRxGenericConfig+0x58>
 801da4c:	68bb      	ldr	r3, [r7, #8]
 801da4e:	68db      	ldr	r3, [r3, #12]
 801da50:	2b00      	cmp	r3, #0
 801da52:	d102      	bne.n	801da5a <RadioSetRxGenericConfig+0x5e>
            return -1;
 801da54:	f04f 33ff 	mov.w	r3, #4294967295
 801da58:	e18a      	b.n	801dd70 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801da5a:	68bb      	ldr	r3, [r7, #8]
 801da5c:	7f9b      	ldrb	r3, [r3, #30]
 801da5e:	2b08      	cmp	r3, #8
 801da60:	d902      	bls.n	801da68 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801da62:	f04f 33ff 	mov.w	r3, #4294967295
 801da66:	e183      	b.n	801dd70 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801da68:	68bb      	ldr	r3, [r7, #8]
 801da6a:	6919      	ldr	r1, [r3, #16]
 801da6c:	68bb      	ldr	r3, [r7, #8]
 801da6e:	7f9b      	ldrb	r3, [r3, #30]
 801da70:	b29a      	uxth	r2, r3
 801da72:	f107 0320 	add.w	r3, r7, #32
 801da76:	4618      	mov	r0, r3
 801da78:	f001 fe90 	bl	801f79c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801da7c:	68bb      	ldr	r3, [r7, #8]
 801da7e:	681b      	ldr	r3, [r3, #0]
 801da80:	2b00      	cmp	r3, #0
 801da82:	bf14      	ite	ne
 801da84:	2301      	movne	r3, #1
 801da86:	2300      	moveq	r3, #0
 801da88:	b2db      	uxtb	r3, r3
 801da8a:	4618      	mov	r0, r3
 801da8c:	f000 fe08 	bl	801e6a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801da90:	4b8b      	ldr	r3, [pc, #556]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801da92:	2200      	movs	r2, #0
 801da94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801da98:	68bb      	ldr	r3, [r7, #8]
 801da9a:	689b      	ldr	r3, [r3, #8]
 801da9c:	4a88      	ldr	r2, [pc, #544]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801da9e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801daa0:	68bb      	ldr	r3, [r7, #8]
 801daa2:	f893 2020 	ldrb.w	r2, [r3, #32]
 801daa6:	4b86      	ldr	r3, [pc, #536]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801daa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801daac:	68bb      	ldr	r3, [r7, #8]
 801daae:	685b      	ldr	r3, [r3, #4]
 801dab0:	4618      	mov	r0, r3
 801dab2:	f001 fcb3 	bl	801f41c <SUBGRF_GetFskBandwidthRegValue>
 801dab6:	4603      	mov	r3, r0
 801dab8:	461a      	mov	r2, r3
 801daba:	4b81      	ldr	r3, [pc, #516]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801dabc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801dac0:	4b7f      	ldr	r3, [pc, #508]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801dac2:	2200      	movs	r2, #0
 801dac4:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801dac6:	68bb      	ldr	r3, [r7, #8]
 801dac8:	68db      	ldr	r3, [r3, #12]
 801daca:	b29b      	uxth	r3, r3
 801dacc:	00db      	lsls	r3, r3, #3
 801dace:	b29a      	uxth	r2, r3
 801dad0:	4b7b      	ldr	r3, [pc, #492]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801dad2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801dad4:	68bb      	ldr	r3, [r7, #8]
 801dad6:	7fda      	ldrb	r2, [r3, #31]
 801dad8:	4b79      	ldr	r3, [pc, #484]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801dada:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801dadc:	68bb      	ldr	r3, [r7, #8]
 801dade:	7f9b      	ldrb	r3, [r3, #30]
 801dae0:	00db      	lsls	r3, r3, #3
 801dae2:	b2da      	uxtb	r2, r3
 801dae4:	4b76      	ldr	r3, [pc, #472]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801dae6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801dae8:	68bb      	ldr	r3, [r7, #8]
 801daea:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801daee:	4b74      	ldr	r3, [pc, #464]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801daf0:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801daf2:	68bb      	ldr	r3, [r7, #8]
 801daf4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801daf8:	2b00      	cmp	r3, #0
 801dafa:	d105      	bne.n	801db08 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801dafc:	68bb      	ldr	r3, [r7, #8]
 801dafe:	695b      	ldr	r3, [r3, #20]
 801db00:	b2da      	uxtb	r2, r3
 801db02:	4b6f      	ldr	r3, [pc, #444]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801db04:	759a      	strb	r2, [r3, #22]
 801db06:	e00b      	b.n	801db20 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801db08:	68bb      	ldr	r3, [r7, #8]
 801db0a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801db0e:	2b02      	cmp	r3, #2
 801db10:	d103      	bne.n	801db1a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801db12:	4b6b      	ldr	r3, [pc, #428]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801db14:	22ff      	movs	r2, #255	; 0xff
 801db16:	759a      	strb	r2, [r3, #22]
 801db18:	e002      	b.n	801db20 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801db1a:	4b69      	ldr	r3, [pc, #420]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801db1c:	22ff      	movs	r2, #255	; 0xff
 801db1e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801db20:	68bb      	ldr	r3, [r7, #8]
 801db22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801db26:	2b02      	cmp	r3, #2
 801db28:	d004      	beq.n	801db34 <RadioSetRxGenericConfig+0x138>
 801db2a:	68bb      	ldr	r3, [r7, #8]
 801db2c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801db30:	2b02      	cmp	r3, #2
 801db32:	d12d      	bne.n	801db90 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801db34:	68bb      	ldr	r3, [r7, #8]
 801db36:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801db3a:	2bf1      	cmp	r3, #241	; 0xf1
 801db3c:	d00c      	beq.n	801db58 <RadioSetRxGenericConfig+0x15c>
 801db3e:	68bb      	ldr	r3, [r7, #8]
 801db40:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801db44:	2bf2      	cmp	r3, #242	; 0xf2
 801db46:	d007      	beq.n	801db58 <RadioSetRxGenericConfig+0x15c>
 801db48:	68bb      	ldr	r3, [r7, #8]
 801db4a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801db4e:	2b01      	cmp	r3, #1
 801db50:	d002      	beq.n	801db58 <RadioSetRxGenericConfig+0x15c>
            return -1;
 801db52:	f04f 33ff 	mov.w	r3, #4294967295
 801db56:	e10b      	b.n	801dd70 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 801db58:	2300      	movs	r3, #0
 801db5a:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 801db5c:	68bb      	ldr	r3, [r7, #8]
 801db5e:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801db60:	4b58      	ldr	r3, [pc, #352]	; (801dcc4 <RadioSetRxGenericConfig+0x2c8>)
 801db62:	6819      	ldr	r1, [r3, #0]
 801db64:	f107 0314 	add.w	r3, r7, #20
 801db68:	4a57      	ldr	r2, [pc, #348]	; (801dcc8 <RadioSetRxGenericConfig+0x2cc>)
 801db6a:	4618      	mov	r0, r3
 801db6c:	f001 fd16 	bl	801f59c <RFW_Init>
 801db70:	4603      	mov	r3, r0
 801db72:	2b00      	cmp	r3, #0
 801db74:	d002      	beq.n	801db7c <RadioSetRxGenericConfig+0x180>
            return -1;
 801db76:	f04f 33ff 	mov.w	r3, #4294967295
 801db7a:	e0f9      	b.n	801dd70 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801db7c:	4b50      	ldr	r3, [pc, #320]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801db7e:	2200      	movs	r2, #0
 801db80:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801db82:	4b4f      	ldr	r3, [pc, #316]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801db84:	2201      	movs	r2, #1
 801db86:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801db88:	4b4d      	ldr	r3, [pc, #308]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801db8a:	2200      	movs	r2, #0
 801db8c:	755a      	strb	r2, [r3, #21]
        {
 801db8e:	e00e      	b.n	801dbae <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801db90:	68bb      	ldr	r3, [r7, #8]
 801db92:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801db96:	4b4a      	ldr	r3, [pc, #296]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801db98:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801db9a:	68bb      	ldr	r3, [r7, #8]
 801db9c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801dba0:	4b47      	ldr	r3, [pc, #284]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801dba2:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801dba4:	68bb      	ldr	r3, [r7, #8]
 801dba6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801dbaa:	4b45      	ldr	r3, [pc, #276]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801dbac:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801dbae:	f7ff fa48 	bl	801d042 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801dbb2:	2000      	movs	r0, #0
 801dbb4:	f7fe fbf2 	bl	801c39c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801dbb8:	4844      	ldr	r0, [pc, #272]	; (801dccc <RadioSetRxGenericConfig+0x2d0>)
 801dbba:	f001 f80b 	bl	801ebd4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801dbbe:	4844      	ldr	r0, [pc, #272]	; (801dcd0 <RadioSetRxGenericConfig+0x2d4>)
 801dbc0:	f001 f8da 	bl	801ed78 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801dbc4:	f107 0320 	add.w	r3, r7, #32
 801dbc8:	4618      	mov	r0, r3
 801dbca:	f000 fba2 	bl	801e312 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801dbce:	68bb      	ldr	r3, [r7, #8]
 801dbd0:	8b9b      	ldrh	r3, [r3, #28]
 801dbd2:	4618      	mov	r0, r3
 801dbd4:	f000 fbec 	bl	801e3b0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801dbd8:	68bb      	ldr	r3, [r7, #8]
 801dbda:	8b1b      	ldrh	r3, [r3, #24]
 801dbdc:	4618      	mov	r0, r3
 801dbde:	f000 fbc7 	bl	801e370 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801dbe2:	683b      	ldr	r3, [r7, #0]
 801dbe4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801dbe8:	fb03 f202 	mul.w	r2, r3, r2
 801dbec:	68bb      	ldr	r3, [r7, #8]
 801dbee:	689b      	ldr	r3, [r3, #8]
 801dbf0:	fbb2 f3f3 	udiv	r3, r2, r3
 801dbf4:	4a32      	ldr	r2, [pc, #200]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801dbf6:	6093      	str	r3, [r2, #8]
        break;
 801dbf8:	e0b9      	b.n	801dd6e <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801dbfa:	68bb      	ldr	r3, [r7, #8]
 801dbfc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	d102      	bne.n	801dc08 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801dc02:	f04f 33ff 	mov.w	r3, #4294967295
 801dc06:	e0b3      	b.n	801dd70 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801dc08:	68bb      	ldr	r3, [r7, #8]
 801dc0a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801dc0e:	2b01      	cmp	r3, #1
 801dc10:	d104      	bne.n	801dc1c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801dc12:	68bb      	ldr	r3, [r7, #8]
 801dc14:	695b      	ldr	r3, [r3, #20]
 801dc16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801dc1a:	e002      	b.n	801dc22 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801dc1c:	23ff      	movs	r3, #255	; 0xff
 801dc1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801dc22:	68bb      	ldr	r3, [r7, #8]
 801dc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc26:	2b00      	cmp	r3, #0
 801dc28:	bf14      	ite	ne
 801dc2a:	2301      	movne	r3, #1
 801dc2c:	2300      	moveq	r3, #0
 801dc2e:	b2db      	uxtb	r3, r3
 801dc30:	4618      	mov	r0, r3
 801dc32:	f000 fd35 	bl	801e6a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801dc36:	683b      	ldr	r3, [r7, #0]
 801dc38:	b2db      	uxtb	r3, r3
 801dc3a:	4618      	mov	r0, r3
 801dc3c:	f000 fd3f 	bl	801e6be <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801dc40:	4b1f      	ldr	r3, [pc, #124]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801dc42:	2201      	movs	r2, #1
 801dc44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801dc48:	68bb      	ldr	r3, [r7, #8]
 801dc4a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801dc4e:	4b1c      	ldr	r3, [pc, #112]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801dc50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801dc54:	68bb      	ldr	r3, [r7, #8]
 801dc56:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801dc5a:	4b19      	ldr	r3, [pc, #100]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801dc5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801dc60:	68bb      	ldr	r3, [r7, #8]
 801dc62:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801dc66:	4b16      	ldr	r3, [pc, #88]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801dc68:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801dc6c:	68bb      	ldr	r3, [r7, #8]
 801dc6e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801dc72:	2b02      	cmp	r3, #2
 801dc74:	d010      	beq.n	801dc98 <RadioSetRxGenericConfig+0x29c>
 801dc76:	2b02      	cmp	r3, #2
 801dc78:	dc2c      	bgt.n	801dcd4 <RadioSetRxGenericConfig+0x2d8>
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	d002      	beq.n	801dc84 <RadioSetRxGenericConfig+0x288>
 801dc7e:	2b01      	cmp	r3, #1
 801dc80:	d005      	beq.n	801dc8e <RadioSetRxGenericConfig+0x292>
            break;
 801dc82:	e027      	b.n	801dcd4 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801dc84:	4b0e      	ldr	r3, [pc, #56]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801dc86:	2200      	movs	r2, #0
 801dc88:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801dc8c:	e023      	b.n	801dcd6 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801dc8e:	4b0c      	ldr	r3, [pc, #48]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801dc90:	2201      	movs	r2, #1
 801dc92:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801dc96:	e01e      	b.n	801dcd6 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801dc98:	68bb      	ldr	r3, [r7, #8]
 801dc9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801dc9e:	2b0b      	cmp	r3, #11
 801dca0:	d004      	beq.n	801dcac <RadioSetRxGenericConfig+0x2b0>
 801dca2:	68bb      	ldr	r3, [r7, #8]
 801dca4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801dca8:	2b0c      	cmp	r3, #12
 801dcaa:	d104      	bne.n	801dcb6 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801dcac:	4b04      	ldr	r3, [pc, #16]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801dcae:	2201      	movs	r2, #1
 801dcb0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801dcb4:	e00f      	b.n	801dcd6 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801dcb6:	4b02      	ldr	r3, [pc, #8]	; (801dcc0 <RadioSetRxGenericConfig+0x2c4>)
 801dcb8:	2200      	movs	r2, #0
 801dcba:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801dcbe:	e00a      	b.n	801dcd6 <RadioSetRxGenericConfig+0x2da>
 801dcc0:	200024a4 	.word	0x200024a4
 801dcc4:	200024a0 	.word	0x200024a0
 801dcc8:	20002518 	.word	0x20002518
 801dccc:	200024dc 	.word	0x200024dc
 801dcd0:	200024b2 	.word	0x200024b2
            break;
 801dcd4:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801dcd6:	4b28      	ldr	r3, [pc, #160]	; (801dd78 <RadioSetRxGenericConfig+0x37c>)
 801dcd8:	2201      	movs	r2, #1
 801dcda:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801dcdc:	68bb      	ldr	r3, [r7, #8]
 801dcde:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801dce0:	4b25      	ldr	r3, [pc, #148]	; (801dd78 <RadioSetRxGenericConfig+0x37c>)
 801dce2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801dce4:	68bb      	ldr	r3, [r7, #8]
 801dce6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801dcea:	4b23      	ldr	r3, [pc, #140]	; (801dd78 <RadioSetRxGenericConfig+0x37c>)
 801dcec:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801dcee:	4a22      	ldr	r2, [pc, #136]	; (801dd78 <RadioSetRxGenericConfig+0x37c>)
 801dcf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801dcf4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801dcf6:	68bb      	ldr	r3, [r7, #8]
 801dcf8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801dcfc:	4b1e      	ldr	r3, [pc, #120]	; (801dd78 <RadioSetRxGenericConfig+0x37c>)
 801dcfe:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801dd02:	68bb      	ldr	r3, [r7, #8]
 801dd04:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801dd08:	4b1b      	ldr	r3, [pc, #108]	; (801dd78 <RadioSetRxGenericConfig+0x37c>)
 801dd0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801dd0e:	f7ff f998 	bl	801d042 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801dd12:	2001      	movs	r0, #1
 801dd14:	f7fe fb42 	bl	801c39c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801dd18:	4818      	ldr	r0, [pc, #96]	; (801dd7c <RadioSetRxGenericConfig+0x380>)
 801dd1a:	f000 ff5b 	bl	801ebd4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801dd1e:	4818      	ldr	r0, [pc, #96]	; (801dd80 <RadioSetRxGenericConfig+0x384>)
 801dd20:	f001 f82a 	bl	801ed78 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801dd24:	4b14      	ldr	r3, [pc, #80]	; (801dd78 <RadioSetRxGenericConfig+0x37c>)
 801dd26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801dd2a:	2b01      	cmp	r3, #1
 801dd2c:	d10d      	bne.n	801dd4a <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801dd2e:	f240 7036 	movw	r0, #1846	; 0x736
 801dd32:	f001 f97d 	bl	801f030 <SUBGRF_ReadRegister>
 801dd36:	4603      	mov	r3, r0
 801dd38:	f023 0304 	bic.w	r3, r3, #4
 801dd3c:	b2db      	uxtb	r3, r3
 801dd3e:	4619      	mov	r1, r3
 801dd40:	f240 7036 	movw	r0, #1846	; 0x736
 801dd44:	f001 f960 	bl	801f008 <SUBGRF_WriteRegister>
 801dd48:	e00c      	b.n	801dd64 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801dd4a:	f240 7036 	movw	r0, #1846	; 0x736
 801dd4e:	f001 f96f 	bl	801f030 <SUBGRF_ReadRegister>
 801dd52:	4603      	mov	r3, r0
 801dd54:	f043 0304 	orr.w	r3, r3, #4
 801dd58:	b2db      	uxtb	r3, r3
 801dd5a:	4619      	mov	r1, r3
 801dd5c:	f240 7036 	movw	r0, #1846	; 0x736
 801dd60:	f001 f952 	bl	801f008 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801dd64:	4b04      	ldr	r3, [pc, #16]	; (801dd78 <RadioSetRxGenericConfig+0x37c>)
 801dd66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dd6a:	609a      	str	r2, [r3, #8]
        break;
 801dd6c:	bf00      	nop
    }
    return status;
 801dd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801dd70:	4618      	mov	r0, r3
 801dd72:	3730      	adds	r7, #48	; 0x30
 801dd74:	46bd      	mov	sp, r7
 801dd76:	bd80      	pop	{r7, pc}
 801dd78:	200024a4 	.word	0x200024a4
 801dd7c:	200024dc 	.word	0x200024dc
 801dd80:	200024b2 	.word	0x200024b2

0801dd84 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801dd84:	b580      	push	{r7, lr}
 801dd86:	b08e      	sub	sp, #56	; 0x38
 801dd88:	af00      	add	r7, sp, #0
 801dd8a:	60b9      	str	r1, [r7, #8]
 801dd8c:	607b      	str	r3, [r7, #4]
 801dd8e:	4603      	mov	r3, r0
 801dd90:	73fb      	strb	r3, [r7, #15]
 801dd92:	4613      	mov	r3, r2
 801dd94:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801dd96:	2300      	movs	r3, #0
 801dd98:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dd9a:	2300      	movs	r3, #0
 801dd9c:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801dd9e:	f001 fc0a 	bl	801f5b6 <RFW_DeInit>
    switch( modem )
 801dda2:	7bfb      	ldrb	r3, [r7, #15]
 801dda4:	2b03      	cmp	r3, #3
 801dda6:	f200 8204 	bhi.w	801e1b2 <RadioSetTxGenericConfig+0x42e>
 801ddaa:	a201      	add	r2, pc, #4	; (adr r2, 801ddb0 <RadioSetTxGenericConfig+0x2c>)
 801ddac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ddb0:	0801df35 	.word	0x0801df35
 801ddb4:	0801e07d 	.word	0x0801e07d
 801ddb8:	0801e175 	.word	0x0801e175
 801ddbc:	0801ddc1 	.word	0x0801ddc1
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801ddc0:	68bb      	ldr	r3, [r7, #8]
 801ddc2:	7c9b      	ldrb	r3, [r3, #18]
 801ddc4:	2b08      	cmp	r3, #8
 801ddc6:	d902      	bls.n	801ddce <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801ddc8:	f04f 33ff 	mov.w	r3, #4294967295
 801ddcc:	e206      	b.n	801e1dc <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 801ddce:	68bb      	ldr	r3, [r7, #8]
 801ddd0:	6899      	ldr	r1, [r3, #8]
 801ddd2:	68bb      	ldr	r3, [r7, #8]
 801ddd4:	7c9b      	ldrb	r3, [r3, #18]
 801ddd6:	b29a      	uxth	r2, r3
 801ddd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801dddc:	4618      	mov	r0, r3
 801ddde:	f001 fcdd 	bl	801f79c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801dde2:	68bb      	ldr	r3, [r7, #8]
 801dde4:	681b      	ldr	r3, [r3, #0]
 801dde6:	2b00      	cmp	r3, #0
 801dde8:	d102      	bne.n	801ddf0 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801ddea:	f04f 33ff 	mov.w	r3, #4294967295
 801ddee:	e1f5      	b.n	801e1dc <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 801ddf0:	68bb      	ldr	r3, [r7, #8]
 801ddf2:	681b      	ldr	r3, [r3, #0]
 801ddf4:	f242 7210 	movw	r2, #10000	; 0x2710
 801ddf8:	4293      	cmp	r3, r2
 801ddfa:	d813      	bhi.n	801de24 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 801ddfc:	2302      	movs	r3, #2
 801ddfe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801de02:	4b99      	ldr	r3, [pc, #612]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801de04:	2203      	movs	r2, #3
 801de06:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801de08:	4b97      	ldr	r3, [pc, #604]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801de0a:	2203      	movs	r2, #3
 801de0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801de10:	68bb      	ldr	r3, [r7, #8]
 801de12:	681b      	ldr	r3, [r3, #0]
 801de14:	4a94      	ldr	r2, [pc, #592]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801de16:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801de18:	68bb      	ldr	r3, [r7, #8]
 801de1a:	7cda      	ldrb	r2, [r3, #19]
 801de1c:	4b92      	ldr	r3, [pc, #584]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801de1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801de22:	e017      	b.n	801de54 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 801de24:	2300      	movs	r3, #0
 801de26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801de2a:	4b8f      	ldr	r3, [pc, #572]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801de2c:	2200      	movs	r2, #0
 801de2e:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801de30:	4b8d      	ldr	r3, [pc, #564]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801de32:	2200      	movs	r2, #0
 801de34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801de38:	68bb      	ldr	r3, [r7, #8]
 801de3a:	681b      	ldr	r3, [r3, #0]
 801de3c:	4a8a      	ldr	r2, [pc, #552]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801de3e:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801de40:	68bb      	ldr	r3, [r7, #8]
 801de42:	7cda      	ldrb	r2, [r3, #19]
 801de44:	4b88      	ldr	r3, [pc, #544]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801de46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 801de4a:	68bb      	ldr	r3, [r7, #8]
 801de4c:	681b      	ldr	r3, [r3, #0]
 801de4e:	089b      	lsrs	r3, r3, #2
 801de50:	4a85      	ldr	r2, [pc, #532]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801de52:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801de54:	68bb      	ldr	r3, [r7, #8]
 801de56:	685b      	ldr	r3, [r3, #4]
 801de58:	b29b      	uxth	r3, r3
 801de5a:	00db      	lsls	r3, r3, #3
 801de5c:	b29a      	uxth	r2, r3
 801de5e:	4b82      	ldr	r3, [pc, #520]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801de60:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801de62:	4b81      	ldr	r3, [pc, #516]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801de64:	2204      	movs	r2, #4
 801de66:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801de68:	68bb      	ldr	r3, [r7, #8]
 801de6a:	7c9b      	ldrb	r3, [r3, #18]
 801de6c:	00db      	lsls	r3, r3, #3
 801de6e:	b2da      	uxtb	r2, r3
 801de70:	4b7d      	ldr	r3, [pc, #500]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801de72:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801de74:	4b7c      	ldr	r3, [pc, #496]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801de76:	2200      	movs	r2, #0
 801de78:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801de7a:	68bb      	ldr	r3, [r7, #8]
 801de7c:	7d9b      	ldrb	r3, [r3, #22]
 801de7e:	2b02      	cmp	r3, #2
 801de80:	d003      	beq.n	801de8a <RadioSetTxGenericConfig+0x106>
 801de82:	68bb      	ldr	r3, [r7, #8]
 801de84:	7d1b      	ldrb	r3, [r3, #20]
 801de86:	2b02      	cmp	r3, #2
 801de88:	d12b      	bne.n	801dee2 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801de8a:	68bb      	ldr	r3, [r7, #8]
 801de8c:	7d5b      	ldrb	r3, [r3, #21]
 801de8e:	2bf1      	cmp	r3, #241	; 0xf1
 801de90:	d00a      	beq.n	801dea8 <RadioSetTxGenericConfig+0x124>
 801de92:	68bb      	ldr	r3, [r7, #8]
 801de94:	7d5b      	ldrb	r3, [r3, #21]
 801de96:	2bf2      	cmp	r3, #242	; 0xf2
 801de98:	d006      	beq.n	801dea8 <RadioSetTxGenericConfig+0x124>
 801de9a:	68bb      	ldr	r3, [r7, #8]
 801de9c:	7d5b      	ldrb	r3, [r3, #21]
 801de9e:	2b01      	cmp	r3, #1
 801dea0:	d002      	beq.n	801dea8 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801dea2:	f04f 33ff 	mov.w	r3, #4294967295
 801dea6:	e199      	b.n	801e1dc <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 801dea8:	68bb      	ldr	r3, [r7, #8]
 801deaa:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801deac:	2301      	movs	r3, #1
 801deae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801deb2:	4b6e      	ldr	r3, [pc, #440]	; (801e06c <RadioSetTxGenericConfig+0x2e8>)
 801deb4:	6819      	ldr	r1, [r3, #0]
 801deb6:	f107 0320 	add.w	r3, r7, #32
 801deba:	4a6d      	ldr	r2, [pc, #436]	; (801e070 <RadioSetTxGenericConfig+0x2ec>)
 801debc:	4618      	mov	r0, r3
 801debe:	f001 fb6d 	bl	801f59c <RFW_Init>
 801dec2:	4603      	mov	r3, r0
 801dec4:	2b00      	cmp	r3, #0
 801dec6:	d002      	beq.n	801dece <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 801dec8:	f04f 33ff 	mov.w	r3, #4294967295
 801decc:	e186      	b.n	801e1dc <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801dece:	4b66      	ldr	r3, [pc, #408]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801ded0:	2200      	movs	r2, #0
 801ded2:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801ded4:	4b64      	ldr	r3, [pc, #400]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801ded6:	2201      	movs	r2, #1
 801ded8:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801deda:	4b63      	ldr	r3, [pc, #396]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801dedc:	2200      	movs	r2, #0
 801dede:	755a      	strb	r2, [r3, #21]
        {
 801dee0:	e00b      	b.n	801defa <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801dee2:	68bb      	ldr	r3, [r7, #8]
 801dee4:	7d5a      	ldrb	r2, [r3, #21]
 801dee6:	4b60      	ldr	r3, [pc, #384]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801dee8:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801deea:	68bb      	ldr	r3, [r7, #8]
 801deec:	7d9a      	ldrb	r2, [r3, #22]
 801deee:	4b5e      	ldr	r3, [pc, #376]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801def0:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801def2:	68bb      	ldr	r3, [r7, #8]
 801def4:	7d1a      	ldrb	r2, [r3, #20]
 801def6:	4b5c      	ldr	r3, [pc, #368]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801def8:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801defa:	f7ff f8a2 	bl	801d042 <RadioStandby>
        RadioSetModem( radio_modem );
 801defe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801df02:	4618      	mov	r0, r3
 801df04:	f7fe fa4a 	bl	801c39c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801df08:	485a      	ldr	r0, [pc, #360]	; (801e074 <RadioSetTxGenericConfig+0x2f0>)
 801df0a:	f000 fe63 	bl	801ebd4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801df0e:	485a      	ldr	r0, [pc, #360]	; (801e078 <RadioSetTxGenericConfig+0x2f4>)
 801df10:	f000 ff32 	bl	801ed78 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801df14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801df18:	4618      	mov	r0, r3
 801df1a:	f000 f9fa 	bl	801e312 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801df1e:	68bb      	ldr	r3, [r7, #8]
 801df20:	8a1b      	ldrh	r3, [r3, #16]
 801df22:	4618      	mov	r0, r3
 801df24:	f000 fa44 	bl	801e3b0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 801df28:	68bb      	ldr	r3, [r7, #8]
 801df2a:	899b      	ldrh	r3, [r3, #12]
 801df2c:	4618      	mov	r0, r3
 801df2e:	f000 fa1f 	bl	801e370 <SUBGRF_SetCrcPolynomial>
        break;
 801df32:	e13f      	b.n	801e1b4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801df34:	68bb      	ldr	r3, [r7, #8]
 801df36:	681b      	ldr	r3, [r3, #0]
 801df38:	2b00      	cmp	r3, #0
 801df3a:	d102      	bne.n	801df42 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801df3c:	f04f 33ff 	mov.w	r3, #4294967295
 801df40:	e14c      	b.n	801e1dc <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801df42:	68bb      	ldr	r3, [r7, #8]
 801df44:	7c9b      	ldrb	r3, [r3, #18]
 801df46:	2b08      	cmp	r3, #8
 801df48:	d902      	bls.n	801df50 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801df4a:	f04f 33ff 	mov.w	r3, #4294967295
 801df4e:	e145      	b.n	801e1dc <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 801df50:	68bb      	ldr	r3, [r7, #8]
 801df52:	6899      	ldr	r1, [r3, #8]
 801df54:	68bb      	ldr	r3, [r7, #8]
 801df56:	7c9b      	ldrb	r3, [r3, #18]
 801df58:	b29a      	uxth	r2, r3
 801df5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801df5e:	4618      	mov	r0, r3
 801df60:	f001 fc1c 	bl	801f79c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801df64:	4b40      	ldr	r3, [pc, #256]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801df66:	2200      	movs	r2, #0
 801df68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801df6c:	68bb      	ldr	r3, [r7, #8]
 801df6e:	681b      	ldr	r3, [r3, #0]
 801df70:	4a3d      	ldr	r2, [pc, #244]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801df72:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801df74:	68bb      	ldr	r3, [r7, #8]
 801df76:	7cda      	ldrb	r2, [r3, #19]
 801df78:	4b3b      	ldr	r3, [pc, #236]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801df7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801df7e:	68bb      	ldr	r3, [r7, #8]
 801df80:	699b      	ldr	r3, [r3, #24]
 801df82:	4a39      	ldr	r2, [pc, #228]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801df84:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801df86:	4b38      	ldr	r3, [pc, #224]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801df88:	2200      	movs	r2, #0
 801df8a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801df8c:	68bb      	ldr	r3, [r7, #8]
 801df8e:	685b      	ldr	r3, [r3, #4]
 801df90:	b29b      	uxth	r3, r3
 801df92:	00db      	lsls	r3, r3, #3
 801df94:	b29a      	uxth	r2, r3
 801df96:	4b34      	ldr	r3, [pc, #208]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801df98:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801df9a:	4b33      	ldr	r3, [pc, #204]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801df9c:	2204      	movs	r2, #4
 801df9e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801dfa0:	68bb      	ldr	r3, [r7, #8]
 801dfa2:	7c9b      	ldrb	r3, [r3, #18]
 801dfa4:	00db      	lsls	r3, r3, #3
 801dfa6:	b2da      	uxtb	r2, r3
 801dfa8:	4b2f      	ldr	r3, [pc, #188]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801dfaa:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801dfac:	4b2e      	ldr	r3, [pc, #184]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801dfae:	2200      	movs	r2, #0
 801dfb0:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801dfb2:	68bb      	ldr	r3, [r7, #8]
 801dfb4:	7d9b      	ldrb	r3, [r3, #22]
 801dfb6:	2b02      	cmp	r3, #2
 801dfb8:	d003      	beq.n	801dfc2 <RadioSetTxGenericConfig+0x23e>
 801dfba:	68bb      	ldr	r3, [r7, #8]
 801dfbc:	7d1b      	ldrb	r3, [r3, #20]
 801dfbe:	2b02      	cmp	r3, #2
 801dfc0:	d12a      	bne.n	801e018 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801dfc2:	68bb      	ldr	r3, [r7, #8]
 801dfc4:	7d5b      	ldrb	r3, [r3, #21]
 801dfc6:	2bf1      	cmp	r3, #241	; 0xf1
 801dfc8:	d00a      	beq.n	801dfe0 <RadioSetTxGenericConfig+0x25c>
 801dfca:	68bb      	ldr	r3, [r7, #8]
 801dfcc:	7d5b      	ldrb	r3, [r3, #21]
 801dfce:	2bf2      	cmp	r3, #242	; 0xf2
 801dfd0:	d006      	beq.n	801dfe0 <RadioSetTxGenericConfig+0x25c>
 801dfd2:	68bb      	ldr	r3, [r7, #8]
 801dfd4:	7d5b      	ldrb	r3, [r3, #21]
 801dfd6:	2b01      	cmp	r3, #1
 801dfd8:	d002      	beq.n	801dfe0 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801dfda:	f04f 33ff 	mov.w	r3, #4294967295
 801dfde:	e0fd      	b.n	801e1dc <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801dfe0:	2301      	movs	r3, #1
 801dfe2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801dfe4:	68bb      	ldr	r3, [r7, #8]
 801dfe6:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801dfe8:	4b20      	ldr	r3, [pc, #128]	; (801e06c <RadioSetTxGenericConfig+0x2e8>)
 801dfea:	6819      	ldr	r1, [r3, #0]
 801dfec:	f107 0314 	add.w	r3, r7, #20
 801dff0:	4a1f      	ldr	r2, [pc, #124]	; (801e070 <RadioSetTxGenericConfig+0x2ec>)
 801dff2:	4618      	mov	r0, r3
 801dff4:	f001 fad2 	bl	801f59c <RFW_Init>
 801dff8:	4603      	mov	r3, r0
 801dffa:	2b00      	cmp	r3, #0
 801dffc:	d002      	beq.n	801e004 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 801dffe:	f04f 33ff 	mov.w	r3, #4294967295
 801e002:	e0eb      	b.n	801e1dc <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801e004:	4b18      	ldr	r3, [pc, #96]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801e006:	2200      	movs	r2, #0
 801e008:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801e00a:	4b17      	ldr	r3, [pc, #92]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801e00c:	2201      	movs	r2, #1
 801e00e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801e010:	4b15      	ldr	r3, [pc, #84]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801e012:	2200      	movs	r2, #0
 801e014:	755a      	strb	r2, [r3, #21]
        {
 801e016:	e00b      	b.n	801e030 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801e018:	68bb      	ldr	r3, [r7, #8]
 801e01a:	7d5a      	ldrb	r2, [r3, #21]
 801e01c:	4b12      	ldr	r3, [pc, #72]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801e01e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801e020:	68bb      	ldr	r3, [r7, #8]
 801e022:	7d9a      	ldrb	r2, [r3, #22]
 801e024:	4b10      	ldr	r3, [pc, #64]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801e026:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801e028:	68bb      	ldr	r3, [r7, #8]
 801e02a:	7d1a      	ldrb	r2, [r3, #20]
 801e02c:	4b0e      	ldr	r3, [pc, #56]	; (801e068 <RadioSetTxGenericConfig+0x2e4>)
 801e02e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801e030:	f7ff f807 	bl	801d042 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801e034:	2000      	movs	r0, #0
 801e036:	f7fe f9b1 	bl	801c39c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801e03a:	480e      	ldr	r0, [pc, #56]	; (801e074 <RadioSetTxGenericConfig+0x2f0>)
 801e03c:	f000 fdca 	bl	801ebd4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801e040:	480d      	ldr	r0, [pc, #52]	; (801e078 <RadioSetTxGenericConfig+0x2f4>)
 801e042:	f000 fe99 	bl	801ed78 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801e046:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e04a:	4618      	mov	r0, r3
 801e04c:	f000 f961 	bl	801e312 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801e050:	68bb      	ldr	r3, [r7, #8]
 801e052:	8a1b      	ldrh	r3, [r3, #16]
 801e054:	4618      	mov	r0, r3
 801e056:	f000 f9ab 	bl	801e3b0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801e05a:	68bb      	ldr	r3, [r7, #8]
 801e05c:	899b      	ldrh	r3, [r3, #12]
 801e05e:	4618      	mov	r0, r3
 801e060:	f000 f986 	bl	801e370 <SUBGRF_SetCrcPolynomial>
        break;
 801e064:	e0a6      	b.n	801e1b4 <RadioSetTxGenericConfig+0x430>
 801e066:	bf00      	nop
 801e068:	200024a4 	.word	0x200024a4
 801e06c:	200024a0 	.word	0x200024a0
 801e070:	20002500 	.word	0x20002500
 801e074:	200024dc 	.word	0x200024dc
 801e078:	200024b2 	.word	0x200024b2
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801e07c:	4b59      	ldr	r3, [pc, #356]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e07e:	2201      	movs	r2, #1
 801e080:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801e084:	68bb      	ldr	r3, [r7, #8]
 801e086:	781a      	ldrb	r2, [r3, #0]
 801e088:	4b56      	ldr	r3, [pc, #344]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e08a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801e08e:	68bb      	ldr	r3, [r7, #8]
 801e090:	785a      	ldrb	r2, [r3, #1]
 801e092:	4b54      	ldr	r3, [pc, #336]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801e098:	68bb      	ldr	r3, [r7, #8]
 801e09a:	789a      	ldrb	r2, [r3, #2]
 801e09c:	4b51      	ldr	r3, [pc, #324]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e09e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801e0a2:	68bb      	ldr	r3, [r7, #8]
 801e0a4:	78db      	ldrb	r3, [r3, #3]
 801e0a6:	2b02      	cmp	r3, #2
 801e0a8:	d010      	beq.n	801e0cc <RadioSetTxGenericConfig+0x348>
 801e0aa:	2b02      	cmp	r3, #2
 801e0ac:	dc20      	bgt.n	801e0f0 <RadioSetTxGenericConfig+0x36c>
 801e0ae:	2b00      	cmp	r3, #0
 801e0b0:	d002      	beq.n	801e0b8 <RadioSetTxGenericConfig+0x334>
 801e0b2:	2b01      	cmp	r3, #1
 801e0b4:	d005      	beq.n	801e0c2 <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 801e0b6:	e01b      	b.n	801e0f0 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801e0b8:	4b4a      	ldr	r3, [pc, #296]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e0ba:	2200      	movs	r2, #0
 801e0bc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801e0c0:	e017      	b.n	801e0f2 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801e0c2:	4b48      	ldr	r3, [pc, #288]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e0c4:	2201      	movs	r2, #1
 801e0c6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801e0ca:	e012      	b.n	801e0f2 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801e0cc:	68bb      	ldr	r3, [r7, #8]
 801e0ce:	781b      	ldrb	r3, [r3, #0]
 801e0d0:	2b0b      	cmp	r3, #11
 801e0d2:	d003      	beq.n	801e0dc <RadioSetTxGenericConfig+0x358>
 801e0d4:	68bb      	ldr	r3, [r7, #8]
 801e0d6:	781b      	ldrb	r3, [r3, #0]
 801e0d8:	2b0c      	cmp	r3, #12
 801e0da:	d104      	bne.n	801e0e6 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801e0dc:	4b41      	ldr	r3, [pc, #260]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e0de:	2201      	movs	r2, #1
 801e0e0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801e0e4:	e005      	b.n	801e0f2 <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801e0e6:	4b3f      	ldr	r3, [pc, #252]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e0e8:	2200      	movs	r2, #0
 801e0ea:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801e0ee:	e000      	b.n	801e0f2 <RadioSetTxGenericConfig+0x36e>
            break;
 801e0f0:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801e0f2:	4b3c      	ldr	r3, [pc, #240]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e0f4:	2201      	movs	r2, #1
 801e0f6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801e0f8:	68bb      	ldr	r3, [r7, #8]
 801e0fa:	889a      	ldrh	r2, [r3, #4]
 801e0fc:	4b39      	ldr	r3, [pc, #228]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e0fe:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801e100:	68bb      	ldr	r3, [r7, #8]
 801e102:	799a      	ldrb	r2, [r3, #6]
 801e104:	4b37      	ldr	r3, [pc, #220]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e106:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801e108:	68bb      	ldr	r3, [r7, #8]
 801e10a:	79da      	ldrb	r2, [r3, #7]
 801e10c:	4b35      	ldr	r3, [pc, #212]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e10e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801e112:	68bb      	ldr	r3, [r7, #8]
 801e114:	7a1a      	ldrb	r2, [r3, #8]
 801e116:	4b33      	ldr	r3, [pc, #204]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e118:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801e11c:	f7fe ff91 	bl	801d042 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801e120:	2001      	movs	r0, #1
 801e122:	f7fe f93b 	bl	801c39c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801e126:	4830      	ldr	r0, [pc, #192]	; (801e1e8 <RadioSetTxGenericConfig+0x464>)
 801e128:	f000 fd54 	bl	801ebd4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801e12c:	482f      	ldr	r0, [pc, #188]	; (801e1ec <RadioSetTxGenericConfig+0x468>)
 801e12e:	f000 fe23 	bl	801ed78 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801e132:	4b2c      	ldr	r3, [pc, #176]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801e138:	2b06      	cmp	r3, #6
 801e13a:	d10d      	bne.n	801e158 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801e13c:	f640 0089 	movw	r0, #2185	; 0x889
 801e140:	f000 ff76 	bl	801f030 <SUBGRF_ReadRegister>
 801e144:	4603      	mov	r3, r0
 801e146:	f023 0304 	bic.w	r3, r3, #4
 801e14a:	b2db      	uxtb	r3, r3
 801e14c:	4619      	mov	r1, r3
 801e14e:	f640 0089 	movw	r0, #2185	; 0x889
 801e152:	f000 ff59 	bl	801f008 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 801e156:	e02d      	b.n	801e1b4 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801e158:	f640 0089 	movw	r0, #2185	; 0x889
 801e15c:	f000 ff68 	bl	801f030 <SUBGRF_ReadRegister>
 801e160:	4603      	mov	r3, r0
 801e162:	f043 0304 	orr.w	r3, r3, #4
 801e166:	b2db      	uxtb	r3, r3
 801e168:	4619      	mov	r1, r3
 801e16a:	f640 0089 	movw	r0, #2185	; 0x889
 801e16e:	f000 ff4b 	bl	801f008 <SUBGRF_WriteRegister>
        break;
 801e172:	e01f      	b.n	801e1b4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801e174:	68bb      	ldr	r3, [r7, #8]
 801e176:	681b      	ldr	r3, [r3, #0]
 801e178:	2b00      	cmp	r3, #0
 801e17a:	d004      	beq.n	801e186 <RadioSetTxGenericConfig+0x402>
 801e17c:	68bb      	ldr	r3, [r7, #8]
 801e17e:	681b      	ldr	r3, [r3, #0]
 801e180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801e184:	d902      	bls.n	801e18c <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801e186:	f04f 33ff 	mov.w	r3, #4294967295
 801e18a:	e027      	b.n	801e1dc <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801e18c:	2003      	movs	r0, #3
 801e18e:	f7fe f905 	bl	801c39c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801e192:	4b14      	ldr	r3, [pc, #80]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e194:	2202      	movs	r2, #2
 801e196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801e19a:	68bb      	ldr	r3, [r7, #8]
 801e19c:	681b      	ldr	r3, [r3, #0]
 801e19e:	4a11      	ldr	r2, [pc, #68]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e1a0:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801e1a2:	4b10      	ldr	r3, [pc, #64]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e1a4:	2216      	movs	r2, #22
 801e1a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801e1aa:	480f      	ldr	r0, [pc, #60]	; (801e1e8 <RadioSetTxGenericConfig+0x464>)
 801e1ac:	f000 fd12 	bl	801ebd4 <SUBGRF_SetModulationParams>
        break;
 801e1b0:	e000      	b.n	801e1b4 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801e1b2:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801e1b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801e1b8:	4618      	mov	r0, r3
 801e1ba:	f001 f841 	bl	801f240 <SUBGRF_SetRfTxPower>
 801e1be:	4603      	mov	r3, r0
 801e1c0:	461a      	mov	r2, r3
 801e1c2:	4b08      	ldr	r3, [pc, #32]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e1c4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801e1c8:	4b06      	ldr	r3, [pc, #24]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e1ca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801e1ce:	4618      	mov	r0, r3
 801e1d0:	f001 fa05 	bl	801f5de <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801e1d4:	4a03      	ldr	r2, [pc, #12]	; (801e1e4 <RadioSetTxGenericConfig+0x460>)
 801e1d6:	687b      	ldr	r3, [r7, #4]
 801e1d8:	6053      	str	r3, [r2, #4]
    return 0;
 801e1da:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801e1dc:	4618      	mov	r0, r3
 801e1de:	3738      	adds	r7, #56	; 0x38
 801e1e0:	46bd      	mov	sp, r7
 801e1e2:	bd80      	pop	{r7, pc}
 801e1e4:	200024a4 	.word	0x200024a4
 801e1e8:	200024dc 	.word	0x200024dc
 801e1ec:	200024b2 	.word	0x200024b2

0801e1f0 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801e1f0:	b580      	push	{r7, lr}
 801e1f2:	b084      	sub	sp, #16
 801e1f4:	af00      	add	r7, sp, #0
 801e1f6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801e1f8:	687b      	ldr	r3, [r7, #4]
 801e1fa:	2b00      	cmp	r3, #0
 801e1fc:	d002      	beq.n	801e204 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801e1fe:	4a1a      	ldr	r2, [pc, #104]	; (801e268 <SUBGRF_Init+0x78>)
 801e200:	687b      	ldr	r3, [r7, #4]
 801e202:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801e204:	f7e4 fd40 	bl	8002c88 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801e208:	2002      	movs	r0, #2
 801e20a:	f001 f8e5 	bl	801f3d8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801e20e:	4b17      	ldr	r3, [pc, #92]	; (801e26c <SUBGRF_Init+0x7c>)
 801e210:	2200      	movs	r2, #0
 801e212:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801e214:	2000      	movs	r0, #0
 801e216:	f000 f977 	bl	801e508 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801e21a:	f7f0 f8d9 	bl	800e3d0 <RBI_IsTCXO>
 801e21e:	4603      	mov	r3, r0
 801e220:	2b01      	cmp	r3, #1
 801e222:	d10e      	bne.n	801e242 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801e224:	2140      	movs	r1, #64	; 0x40
 801e226:	2001      	movs	r0, #1
 801e228:	f000 fb78 	bl	801e91c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801e22c:	2100      	movs	r1, #0
 801e22e:	f640 1011 	movw	r0, #2321	; 0x911
 801e232:	f000 fee9 	bl	801f008 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801e236:	237f      	movs	r3, #127	; 0x7f
 801e238:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801e23a:	7b38      	ldrb	r0, [r7, #12]
 801e23c:	f000 fa85 	bl	801e74a <SUBGRF_Calibrate>
 801e240:	e009      	b.n	801e256 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801e242:	2120      	movs	r1, #32
 801e244:	f640 1011 	movw	r0, #2321	; 0x911
 801e248:	f000 fede 	bl	801f008 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801e24c:	2120      	movs	r1, #32
 801e24e:	f640 1012 	movw	r0, #2322	; 0x912
 801e252:	f000 fed9 	bl	801f008 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801e256:	f7f0 f89f 	bl	800e398 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801e25a:	4b05      	ldr	r3, [pc, #20]	; (801e270 <SUBGRF_Init+0x80>)
 801e25c:	2201      	movs	r2, #1
 801e25e:	701a      	strb	r2, [r3, #0]
}
 801e260:	bf00      	nop
 801e262:	3710      	adds	r7, #16
 801e264:	46bd      	mov	sp, r7
 801e266:	bd80      	pop	{r7, pc}
 801e268:	2000253c 	.word	0x2000253c
 801e26c:	20002538 	.word	0x20002538
 801e270:	20002530 	.word	0x20002530

0801e274 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801e274:	b480      	push	{r7}
 801e276:	af00      	add	r7, sp, #0
    return OperatingMode;
 801e278:	4b02      	ldr	r3, [pc, #8]	; (801e284 <SUBGRF_GetOperatingMode+0x10>)
 801e27a:	781b      	ldrb	r3, [r3, #0]
}
 801e27c:	4618      	mov	r0, r3
 801e27e:	46bd      	mov	sp, r7
 801e280:	bc80      	pop	{r7}
 801e282:	4770      	bx	lr
 801e284:	20002530 	.word	0x20002530

0801e288 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801e288:	b580      	push	{r7, lr}
 801e28a:	b082      	sub	sp, #8
 801e28c:	af00      	add	r7, sp, #0
 801e28e:	6078      	str	r0, [r7, #4]
 801e290:	460b      	mov	r3, r1
 801e292:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801e294:	78fb      	ldrb	r3, [r7, #3]
 801e296:	461a      	mov	r2, r3
 801e298:	6879      	ldr	r1, [r7, #4]
 801e29a:	2000      	movs	r0, #0
 801e29c:	f000 ff20 	bl	801f0e0 <SUBGRF_WriteBuffer>
}
 801e2a0:	bf00      	nop
 801e2a2:	3708      	adds	r7, #8
 801e2a4:	46bd      	mov	sp, r7
 801e2a6:	bd80      	pop	{r7, pc}

0801e2a8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801e2a8:	b580      	push	{r7, lr}
 801e2aa:	b086      	sub	sp, #24
 801e2ac:	af00      	add	r7, sp, #0
 801e2ae:	60f8      	str	r0, [r7, #12]
 801e2b0:	60b9      	str	r1, [r7, #8]
 801e2b2:	4613      	mov	r3, r2
 801e2b4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801e2b6:	2300      	movs	r3, #0
 801e2b8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801e2ba:	f107 0317 	add.w	r3, r7, #23
 801e2be:	4619      	mov	r1, r3
 801e2c0:	68b8      	ldr	r0, [r7, #8]
 801e2c2:	f000 fe23 	bl	801ef0c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801e2c6:	68bb      	ldr	r3, [r7, #8]
 801e2c8:	781b      	ldrb	r3, [r3, #0]
 801e2ca:	79fa      	ldrb	r2, [r7, #7]
 801e2cc:	429a      	cmp	r2, r3
 801e2ce:	d201      	bcs.n	801e2d4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801e2d0:	2301      	movs	r3, #1
 801e2d2:	e007      	b.n	801e2e4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801e2d4:	7df8      	ldrb	r0, [r7, #23]
 801e2d6:	68bb      	ldr	r3, [r7, #8]
 801e2d8:	781b      	ldrb	r3, [r3, #0]
 801e2da:	461a      	mov	r2, r3
 801e2dc:	68f9      	ldr	r1, [r7, #12]
 801e2de:	f000 ff21 	bl	801f124 <SUBGRF_ReadBuffer>

    return 0;
 801e2e2:	2300      	movs	r3, #0
}
 801e2e4:	4618      	mov	r0, r3
 801e2e6:	3718      	adds	r7, #24
 801e2e8:	46bd      	mov	sp, r7
 801e2ea:	bd80      	pop	{r7, pc}

0801e2ec <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801e2ec:	b580      	push	{r7, lr}
 801e2ee:	b084      	sub	sp, #16
 801e2f0:	af00      	add	r7, sp, #0
 801e2f2:	60f8      	str	r0, [r7, #12]
 801e2f4:	460b      	mov	r3, r1
 801e2f6:	607a      	str	r2, [r7, #4]
 801e2f8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801e2fa:	7afb      	ldrb	r3, [r7, #11]
 801e2fc:	4619      	mov	r1, r3
 801e2fe:	68f8      	ldr	r0, [r7, #12]
 801e300:	f7ff ffc2 	bl	801e288 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801e304:	6878      	ldr	r0, [r7, #4]
 801e306:	f000 f91b 	bl	801e540 <SUBGRF_SetTx>
}
 801e30a:	bf00      	nop
 801e30c:	3710      	adds	r7, #16
 801e30e:	46bd      	mov	sp, r7
 801e310:	bd80      	pop	{r7, pc}

0801e312 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801e312:	b580      	push	{r7, lr}
 801e314:	b082      	sub	sp, #8
 801e316:	af00      	add	r7, sp, #0
 801e318:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801e31a:	2208      	movs	r2, #8
 801e31c:	6879      	ldr	r1, [r7, #4]
 801e31e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801e322:	f000 fe99 	bl	801f058 <SUBGRF_WriteRegisters>
    return 0;
 801e326:	2300      	movs	r3, #0
}
 801e328:	4618      	mov	r0, r3
 801e32a:	3708      	adds	r7, #8
 801e32c:	46bd      	mov	sp, r7
 801e32e:	bd80      	pop	{r7, pc}

0801e330 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801e330:	b580      	push	{r7, lr}
 801e332:	b084      	sub	sp, #16
 801e334:	af00      	add	r7, sp, #0
 801e336:	4603      	mov	r3, r0
 801e338:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801e33a:	88fb      	ldrh	r3, [r7, #6]
 801e33c:	0a1b      	lsrs	r3, r3, #8
 801e33e:	b29b      	uxth	r3, r3
 801e340:	b2db      	uxtb	r3, r3
 801e342:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801e344:	88fb      	ldrh	r3, [r7, #6]
 801e346:	b2db      	uxtb	r3, r3
 801e348:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801e34a:	f000 fb6b 	bl	801ea24 <SUBGRF_GetPacketType>
 801e34e:	4603      	mov	r3, r0
 801e350:	2b00      	cmp	r3, #0
 801e352:	d108      	bne.n	801e366 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801e354:	f107 030c 	add.w	r3, r7, #12
 801e358:	2202      	movs	r2, #2
 801e35a:	4619      	mov	r1, r3
 801e35c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801e360:	f000 fe7a 	bl	801f058 <SUBGRF_WriteRegisters>
            break;
 801e364:	e000      	b.n	801e368 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801e366:	bf00      	nop
    }
}
 801e368:	bf00      	nop
 801e36a:	3710      	adds	r7, #16
 801e36c:	46bd      	mov	sp, r7
 801e36e:	bd80      	pop	{r7, pc}

0801e370 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801e370:	b580      	push	{r7, lr}
 801e372:	b084      	sub	sp, #16
 801e374:	af00      	add	r7, sp, #0
 801e376:	4603      	mov	r3, r0
 801e378:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801e37a:	88fb      	ldrh	r3, [r7, #6]
 801e37c:	0a1b      	lsrs	r3, r3, #8
 801e37e:	b29b      	uxth	r3, r3
 801e380:	b2db      	uxtb	r3, r3
 801e382:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801e384:	88fb      	ldrh	r3, [r7, #6]
 801e386:	b2db      	uxtb	r3, r3
 801e388:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801e38a:	f000 fb4b 	bl	801ea24 <SUBGRF_GetPacketType>
 801e38e:	4603      	mov	r3, r0
 801e390:	2b00      	cmp	r3, #0
 801e392:	d108      	bne.n	801e3a6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801e394:	f107 030c 	add.w	r3, r7, #12
 801e398:	2202      	movs	r2, #2
 801e39a:	4619      	mov	r1, r3
 801e39c:	f240 60be 	movw	r0, #1726	; 0x6be
 801e3a0:	f000 fe5a 	bl	801f058 <SUBGRF_WriteRegisters>
            break;
 801e3a4:	e000      	b.n	801e3a8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801e3a6:	bf00      	nop
    }
}
 801e3a8:	bf00      	nop
 801e3aa:	3710      	adds	r7, #16
 801e3ac:	46bd      	mov	sp, r7
 801e3ae:	bd80      	pop	{r7, pc}

0801e3b0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801e3b0:	b580      	push	{r7, lr}
 801e3b2:	b084      	sub	sp, #16
 801e3b4:	af00      	add	r7, sp, #0
 801e3b6:	4603      	mov	r3, r0
 801e3b8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801e3ba:	2300      	movs	r3, #0
 801e3bc:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801e3be:	f000 fb31 	bl	801ea24 <SUBGRF_GetPacketType>
 801e3c2:	4603      	mov	r3, r0
 801e3c4:	2b00      	cmp	r3, #0
 801e3c6:	d121      	bne.n	801e40c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801e3c8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801e3cc:	f000 fe30 	bl	801f030 <SUBGRF_ReadRegister>
 801e3d0:	4603      	mov	r3, r0
 801e3d2:	f023 0301 	bic.w	r3, r3, #1
 801e3d6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801e3d8:	88fb      	ldrh	r3, [r7, #6]
 801e3da:	0a1b      	lsrs	r3, r3, #8
 801e3dc:	b29b      	uxth	r3, r3
 801e3de:	b25b      	sxtb	r3, r3
 801e3e0:	f003 0301 	and.w	r3, r3, #1
 801e3e4:	b25a      	sxtb	r2, r3
 801e3e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e3ea:	4313      	orrs	r3, r2
 801e3ec:	b25b      	sxtb	r3, r3
 801e3ee:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801e3f0:	7bfb      	ldrb	r3, [r7, #15]
 801e3f2:	4619      	mov	r1, r3
 801e3f4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801e3f8:	f000 fe06 	bl	801f008 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801e3fc:	88fb      	ldrh	r3, [r7, #6]
 801e3fe:	b2db      	uxtb	r3, r3
 801e400:	4619      	mov	r1, r3
 801e402:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801e406:	f000 fdff 	bl	801f008 <SUBGRF_WriteRegister>
            break;
 801e40a:	e000      	b.n	801e40e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801e40c:	bf00      	nop
    }
}
 801e40e:	bf00      	nop
 801e410:	3710      	adds	r7, #16
 801e412:	46bd      	mov	sp, r7
 801e414:	bd80      	pop	{r7, pc}

0801e416 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801e416:	b580      	push	{r7, lr}
 801e418:	b082      	sub	sp, #8
 801e41a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801e41c:	2300      	movs	r3, #0
 801e41e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801e420:	2300      	movs	r3, #0
 801e422:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801e424:	2300      	movs	r3, #0
 801e426:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801e428:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801e42c:	f000 fe00 	bl	801f030 <SUBGRF_ReadRegister>
 801e430:	4603      	mov	r3, r0
 801e432:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801e434:	79fb      	ldrb	r3, [r7, #7]
 801e436:	f023 0301 	bic.w	r3, r3, #1
 801e43a:	b2db      	uxtb	r3, r3
 801e43c:	4619      	mov	r1, r3
 801e43e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801e442:	f000 fde1 	bl	801f008 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801e446:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801e44a:	f000 fdf1 	bl	801f030 <SUBGRF_ReadRegister>
 801e44e:	4603      	mov	r3, r0
 801e450:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801e452:	79bb      	ldrb	r3, [r7, #6]
 801e454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e458:	b2db      	uxtb	r3, r3
 801e45a:	4619      	mov	r1, r3
 801e45c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801e460:	f000 fdd2 	bl	801f008 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801e464:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801e468:	f000 f88a 	bl	801e580 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801e46c:	463b      	mov	r3, r7
 801e46e:	2204      	movs	r2, #4
 801e470:	4619      	mov	r1, r3
 801e472:	f640 0019 	movw	r0, #2073	; 0x819
 801e476:	f000 fe11 	bl	801f09c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801e47a:	2000      	movs	r0, #0
 801e47c:	f000 f844 	bl	801e508 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801e480:	79fb      	ldrb	r3, [r7, #7]
 801e482:	4619      	mov	r1, r3
 801e484:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801e488:	f000 fdbe 	bl	801f008 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801e48c:	79bb      	ldrb	r3, [r7, #6]
 801e48e:	4619      	mov	r1, r3
 801e490:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801e494:	f000 fdb8 	bl	801f008 <SUBGRF_WriteRegister>

    return number;
 801e498:	683b      	ldr	r3, [r7, #0]
}
 801e49a:	4618      	mov	r0, r3
 801e49c:	3708      	adds	r7, #8
 801e49e:	46bd      	mov	sp, r7
 801e4a0:	bd80      	pop	{r7, pc}
	...

0801e4a4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801e4a4:	b580      	push	{r7, lr}
 801e4a6:	b084      	sub	sp, #16
 801e4a8:	af00      	add	r7, sp, #0
 801e4aa:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801e4ac:	2000      	movs	r0, #0
 801e4ae:	f7ef ff7a 	bl	800e3a6 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801e4b2:	2002      	movs	r0, #2
 801e4b4:	f000 ff90 	bl	801f3d8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801e4b8:	793b      	ldrb	r3, [r7, #4]
 801e4ba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801e4be:	b2db      	uxtb	r3, r3
 801e4c0:	009b      	lsls	r3, r3, #2
 801e4c2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801e4c4:	793b      	ldrb	r3, [r7, #4]
 801e4c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801e4ca:	b2db      	uxtb	r3, r3
 801e4cc:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801e4ce:	b25b      	sxtb	r3, r3
 801e4d0:	4313      	orrs	r3, r2
 801e4d2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801e4d4:	793b      	ldrb	r3, [r7, #4]
 801e4d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801e4da:	b2db      	uxtb	r3, r3
 801e4dc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801e4de:	4313      	orrs	r3, r2
 801e4e0:	b25b      	sxtb	r3, r3
 801e4e2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801e4e4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801e4e6:	f107 030f 	add.w	r3, r7, #15
 801e4ea:	2201      	movs	r2, #1
 801e4ec:	4619      	mov	r1, r3
 801e4ee:	2084      	movs	r0, #132	; 0x84
 801e4f0:	f000 fe3a 	bl	801f168 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801e4f4:	4b03      	ldr	r3, [pc, #12]	; (801e504 <SUBGRF_SetSleep+0x60>)
 801e4f6:	2200      	movs	r2, #0
 801e4f8:	701a      	strb	r2, [r3, #0]
}
 801e4fa:	bf00      	nop
 801e4fc:	3710      	adds	r7, #16
 801e4fe:	46bd      	mov	sp, r7
 801e500:	bd80      	pop	{r7, pc}
 801e502:	bf00      	nop
 801e504:	20002530 	.word	0x20002530

0801e508 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801e508:	b580      	push	{r7, lr}
 801e50a:	b082      	sub	sp, #8
 801e50c:	af00      	add	r7, sp, #0
 801e50e:	4603      	mov	r3, r0
 801e510:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801e512:	1dfb      	adds	r3, r7, #7
 801e514:	2201      	movs	r2, #1
 801e516:	4619      	mov	r1, r3
 801e518:	2080      	movs	r0, #128	; 0x80
 801e51a:	f000 fe25 	bl	801f168 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801e51e:	79fb      	ldrb	r3, [r7, #7]
 801e520:	2b00      	cmp	r3, #0
 801e522:	d103      	bne.n	801e52c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801e524:	4b05      	ldr	r3, [pc, #20]	; (801e53c <SUBGRF_SetStandby+0x34>)
 801e526:	2201      	movs	r2, #1
 801e528:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801e52a:	e002      	b.n	801e532 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801e52c:	4b03      	ldr	r3, [pc, #12]	; (801e53c <SUBGRF_SetStandby+0x34>)
 801e52e:	2202      	movs	r2, #2
 801e530:	701a      	strb	r2, [r3, #0]
}
 801e532:	bf00      	nop
 801e534:	3708      	adds	r7, #8
 801e536:	46bd      	mov	sp, r7
 801e538:	bd80      	pop	{r7, pc}
 801e53a:	bf00      	nop
 801e53c:	20002530 	.word	0x20002530

0801e540 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801e540:	b580      	push	{r7, lr}
 801e542:	b084      	sub	sp, #16
 801e544:	af00      	add	r7, sp, #0
 801e546:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801e548:	4b0c      	ldr	r3, [pc, #48]	; (801e57c <SUBGRF_SetTx+0x3c>)
 801e54a:	2204      	movs	r2, #4
 801e54c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801e54e:	687b      	ldr	r3, [r7, #4]
 801e550:	0c1b      	lsrs	r3, r3, #16
 801e552:	b2db      	uxtb	r3, r3
 801e554:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801e556:	687b      	ldr	r3, [r7, #4]
 801e558:	0a1b      	lsrs	r3, r3, #8
 801e55a:	b2db      	uxtb	r3, r3
 801e55c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801e55e:	687b      	ldr	r3, [r7, #4]
 801e560:	b2db      	uxtb	r3, r3
 801e562:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801e564:	f107 030c 	add.w	r3, r7, #12
 801e568:	2203      	movs	r2, #3
 801e56a:	4619      	mov	r1, r3
 801e56c:	2083      	movs	r0, #131	; 0x83
 801e56e:	f000 fdfb 	bl	801f168 <SUBGRF_WriteCommand>
}
 801e572:	bf00      	nop
 801e574:	3710      	adds	r7, #16
 801e576:	46bd      	mov	sp, r7
 801e578:	bd80      	pop	{r7, pc}
 801e57a:	bf00      	nop
 801e57c:	20002530 	.word	0x20002530

0801e580 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801e580:	b580      	push	{r7, lr}
 801e582:	b084      	sub	sp, #16
 801e584:	af00      	add	r7, sp, #0
 801e586:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801e588:	4b0c      	ldr	r3, [pc, #48]	; (801e5bc <SUBGRF_SetRx+0x3c>)
 801e58a:	2205      	movs	r2, #5
 801e58c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801e58e:	687b      	ldr	r3, [r7, #4]
 801e590:	0c1b      	lsrs	r3, r3, #16
 801e592:	b2db      	uxtb	r3, r3
 801e594:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801e596:	687b      	ldr	r3, [r7, #4]
 801e598:	0a1b      	lsrs	r3, r3, #8
 801e59a:	b2db      	uxtb	r3, r3
 801e59c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801e59e:	687b      	ldr	r3, [r7, #4]
 801e5a0:	b2db      	uxtb	r3, r3
 801e5a2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801e5a4:	f107 030c 	add.w	r3, r7, #12
 801e5a8:	2203      	movs	r2, #3
 801e5aa:	4619      	mov	r1, r3
 801e5ac:	2082      	movs	r0, #130	; 0x82
 801e5ae:	f000 fddb 	bl	801f168 <SUBGRF_WriteCommand>
}
 801e5b2:	bf00      	nop
 801e5b4:	3710      	adds	r7, #16
 801e5b6:	46bd      	mov	sp, r7
 801e5b8:	bd80      	pop	{r7, pc}
 801e5ba:	bf00      	nop
 801e5bc:	20002530 	.word	0x20002530

0801e5c0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801e5c0:	b580      	push	{r7, lr}
 801e5c2:	b084      	sub	sp, #16
 801e5c4:	af00      	add	r7, sp, #0
 801e5c6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801e5c8:	4b0e      	ldr	r3, [pc, #56]	; (801e604 <SUBGRF_SetRxBoosted+0x44>)
 801e5ca:	2205      	movs	r2, #5
 801e5cc:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801e5ce:	2197      	movs	r1, #151	; 0x97
 801e5d0:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801e5d4:	f000 fd18 	bl	801f008 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801e5d8:	687b      	ldr	r3, [r7, #4]
 801e5da:	0c1b      	lsrs	r3, r3, #16
 801e5dc:	b2db      	uxtb	r3, r3
 801e5de:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801e5e0:	687b      	ldr	r3, [r7, #4]
 801e5e2:	0a1b      	lsrs	r3, r3, #8
 801e5e4:	b2db      	uxtb	r3, r3
 801e5e6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801e5e8:	687b      	ldr	r3, [r7, #4]
 801e5ea:	b2db      	uxtb	r3, r3
 801e5ec:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801e5ee:	f107 030c 	add.w	r3, r7, #12
 801e5f2:	2203      	movs	r2, #3
 801e5f4:	4619      	mov	r1, r3
 801e5f6:	2082      	movs	r0, #130	; 0x82
 801e5f8:	f000 fdb6 	bl	801f168 <SUBGRF_WriteCommand>
}
 801e5fc:	bf00      	nop
 801e5fe:	3710      	adds	r7, #16
 801e600:	46bd      	mov	sp, r7
 801e602:	bd80      	pop	{r7, pc}
 801e604:	20002530 	.word	0x20002530

0801e608 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801e608:	b580      	push	{r7, lr}
 801e60a:	b084      	sub	sp, #16
 801e60c:	af00      	add	r7, sp, #0
 801e60e:	6078      	str	r0, [r7, #4]
 801e610:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	0c1b      	lsrs	r3, r3, #16
 801e616:	b2db      	uxtb	r3, r3
 801e618:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801e61a:	687b      	ldr	r3, [r7, #4]
 801e61c:	0a1b      	lsrs	r3, r3, #8
 801e61e:	b2db      	uxtb	r3, r3
 801e620:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801e622:	687b      	ldr	r3, [r7, #4]
 801e624:	b2db      	uxtb	r3, r3
 801e626:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801e628:	683b      	ldr	r3, [r7, #0]
 801e62a:	0c1b      	lsrs	r3, r3, #16
 801e62c:	b2db      	uxtb	r3, r3
 801e62e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801e630:	683b      	ldr	r3, [r7, #0]
 801e632:	0a1b      	lsrs	r3, r3, #8
 801e634:	b2db      	uxtb	r3, r3
 801e636:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801e638:	683b      	ldr	r3, [r7, #0]
 801e63a:	b2db      	uxtb	r3, r3
 801e63c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801e63e:	f107 0308 	add.w	r3, r7, #8
 801e642:	2206      	movs	r2, #6
 801e644:	4619      	mov	r1, r3
 801e646:	2094      	movs	r0, #148	; 0x94
 801e648:	f000 fd8e 	bl	801f168 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801e64c:	4b03      	ldr	r3, [pc, #12]	; (801e65c <SUBGRF_SetRxDutyCycle+0x54>)
 801e64e:	2206      	movs	r2, #6
 801e650:	701a      	strb	r2, [r3, #0]
}
 801e652:	bf00      	nop
 801e654:	3710      	adds	r7, #16
 801e656:	46bd      	mov	sp, r7
 801e658:	bd80      	pop	{r7, pc}
 801e65a:	bf00      	nop
 801e65c:	20002530 	.word	0x20002530

0801e660 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801e660:	b580      	push	{r7, lr}
 801e662:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801e664:	2200      	movs	r2, #0
 801e666:	2100      	movs	r1, #0
 801e668:	20c5      	movs	r0, #197	; 0xc5
 801e66a:	f000 fd7d 	bl	801f168 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801e66e:	4b02      	ldr	r3, [pc, #8]	; (801e678 <SUBGRF_SetCad+0x18>)
 801e670:	2207      	movs	r2, #7
 801e672:	701a      	strb	r2, [r3, #0]
}
 801e674:	bf00      	nop
 801e676:	bd80      	pop	{r7, pc}
 801e678:	20002530 	.word	0x20002530

0801e67c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801e67c:	b580      	push	{r7, lr}
 801e67e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801e680:	2200      	movs	r2, #0
 801e682:	2100      	movs	r1, #0
 801e684:	20d1      	movs	r0, #209	; 0xd1
 801e686:	f000 fd6f 	bl	801f168 <SUBGRF_WriteCommand>
}
 801e68a:	bf00      	nop
 801e68c:	bd80      	pop	{r7, pc}

0801e68e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801e68e:	b580      	push	{r7, lr}
 801e690:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801e692:	2200      	movs	r2, #0
 801e694:	2100      	movs	r1, #0
 801e696:	20d2      	movs	r0, #210	; 0xd2
 801e698:	f000 fd66 	bl	801f168 <SUBGRF_WriteCommand>
}
 801e69c:	bf00      	nop
 801e69e:	bd80      	pop	{r7, pc}

0801e6a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801e6a0:	b580      	push	{r7, lr}
 801e6a2:	b082      	sub	sp, #8
 801e6a4:	af00      	add	r7, sp, #0
 801e6a6:	4603      	mov	r3, r0
 801e6a8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801e6aa:	1dfb      	adds	r3, r7, #7
 801e6ac:	2201      	movs	r2, #1
 801e6ae:	4619      	mov	r1, r3
 801e6b0:	209f      	movs	r0, #159	; 0x9f
 801e6b2:	f000 fd59 	bl	801f168 <SUBGRF_WriteCommand>
}
 801e6b6:	bf00      	nop
 801e6b8:	3708      	adds	r7, #8
 801e6ba:	46bd      	mov	sp, r7
 801e6bc:	bd80      	pop	{r7, pc}

0801e6be <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801e6be:	b580      	push	{r7, lr}
 801e6c0:	b084      	sub	sp, #16
 801e6c2:	af00      	add	r7, sp, #0
 801e6c4:	4603      	mov	r3, r0
 801e6c6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801e6c8:	1dfb      	adds	r3, r7, #7
 801e6ca:	2201      	movs	r2, #1
 801e6cc:	4619      	mov	r1, r3
 801e6ce:	20a0      	movs	r0, #160	; 0xa0
 801e6d0:	f000 fd4a 	bl	801f168 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801e6d4:	79fb      	ldrb	r3, [r7, #7]
 801e6d6:	2b3f      	cmp	r3, #63	; 0x3f
 801e6d8:	d91c      	bls.n	801e714 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801e6da:	79fb      	ldrb	r3, [r7, #7]
 801e6dc:	085b      	lsrs	r3, r3, #1
 801e6de:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801e6e0:	2300      	movs	r3, #0
 801e6e2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801e6e4:	2300      	movs	r3, #0
 801e6e6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801e6e8:	e005      	b.n	801e6f6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801e6ea:	7bfb      	ldrb	r3, [r7, #15]
 801e6ec:	089b      	lsrs	r3, r3, #2
 801e6ee:	73fb      	strb	r3, [r7, #15]
            exp++;
 801e6f0:	7bbb      	ldrb	r3, [r7, #14]
 801e6f2:	3301      	adds	r3, #1
 801e6f4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801e6f6:	7bfb      	ldrb	r3, [r7, #15]
 801e6f8:	2b1f      	cmp	r3, #31
 801e6fa:	d8f6      	bhi.n	801e6ea <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801e6fc:	7bfb      	ldrb	r3, [r7, #15]
 801e6fe:	00db      	lsls	r3, r3, #3
 801e700:	b2da      	uxtb	r2, r3
 801e702:	7bbb      	ldrb	r3, [r7, #14]
 801e704:	4413      	add	r3, r2
 801e706:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801e708:	7b7b      	ldrb	r3, [r7, #13]
 801e70a:	4619      	mov	r1, r3
 801e70c:	f240 7006 	movw	r0, #1798	; 0x706
 801e710:	f000 fc7a 	bl	801f008 <SUBGRF_WriteRegister>
    }
}
 801e714:	bf00      	nop
 801e716:	3710      	adds	r7, #16
 801e718:	46bd      	mov	sp, r7
 801e71a:	bd80      	pop	{r7, pc}

0801e71c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801e71c:	b580      	push	{r7, lr}
 801e71e:	b082      	sub	sp, #8
 801e720:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801e722:	f7ef fe5c 	bl	800e3de <RBI_IsDCDC>
 801e726:	4603      	mov	r3, r0
 801e728:	2b01      	cmp	r3, #1
 801e72a:	d102      	bne.n	801e732 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801e72c:	2301      	movs	r3, #1
 801e72e:	71fb      	strb	r3, [r7, #7]
 801e730:	e001      	b.n	801e736 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801e732:	2300      	movs	r3, #0
 801e734:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801e736:	1dfb      	adds	r3, r7, #7
 801e738:	2201      	movs	r2, #1
 801e73a:	4619      	mov	r1, r3
 801e73c:	2096      	movs	r0, #150	; 0x96
 801e73e:	f000 fd13 	bl	801f168 <SUBGRF_WriteCommand>
}
 801e742:	bf00      	nop
 801e744:	3708      	adds	r7, #8
 801e746:	46bd      	mov	sp, r7
 801e748:	bd80      	pop	{r7, pc}

0801e74a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801e74a:	b580      	push	{r7, lr}
 801e74c:	b084      	sub	sp, #16
 801e74e:	af00      	add	r7, sp, #0
 801e750:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801e752:	793b      	ldrb	r3, [r7, #4]
 801e754:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801e758:	b2db      	uxtb	r3, r3
 801e75a:	019b      	lsls	r3, r3, #6
 801e75c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801e75e:	793b      	ldrb	r3, [r7, #4]
 801e760:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801e764:	b2db      	uxtb	r3, r3
 801e766:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801e768:	b25b      	sxtb	r3, r3
 801e76a:	4313      	orrs	r3, r2
 801e76c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801e76e:	793b      	ldrb	r3, [r7, #4]
 801e770:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801e774:	b2db      	uxtb	r3, r3
 801e776:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801e778:	b25b      	sxtb	r3, r3
 801e77a:	4313      	orrs	r3, r2
 801e77c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801e77e:	793b      	ldrb	r3, [r7, #4]
 801e780:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801e784:	b2db      	uxtb	r3, r3
 801e786:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801e788:	b25b      	sxtb	r3, r3
 801e78a:	4313      	orrs	r3, r2
 801e78c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801e78e:	793b      	ldrb	r3, [r7, #4]
 801e790:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801e794:	b2db      	uxtb	r3, r3
 801e796:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801e798:	b25b      	sxtb	r3, r3
 801e79a:	4313      	orrs	r3, r2
 801e79c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801e79e:	793b      	ldrb	r3, [r7, #4]
 801e7a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801e7a4:	b2db      	uxtb	r3, r3
 801e7a6:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801e7a8:	b25b      	sxtb	r3, r3
 801e7aa:	4313      	orrs	r3, r2
 801e7ac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801e7ae:	793b      	ldrb	r3, [r7, #4]
 801e7b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801e7b4:	b2db      	uxtb	r3, r3
 801e7b6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801e7b8:	4313      	orrs	r3, r2
 801e7ba:	b25b      	sxtb	r3, r3
 801e7bc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801e7be:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801e7c0:	f107 030f 	add.w	r3, r7, #15
 801e7c4:	2201      	movs	r2, #1
 801e7c6:	4619      	mov	r1, r3
 801e7c8:	2089      	movs	r0, #137	; 0x89
 801e7ca:	f000 fccd 	bl	801f168 <SUBGRF_WriteCommand>
}
 801e7ce:	bf00      	nop
 801e7d0:	3710      	adds	r7, #16
 801e7d2:	46bd      	mov	sp, r7
 801e7d4:	bd80      	pop	{r7, pc}
	...

0801e7d8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801e7d8:	b580      	push	{r7, lr}
 801e7da:	b084      	sub	sp, #16
 801e7dc:	af00      	add	r7, sp, #0
 801e7de:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801e7e0:	687b      	ldr	r3, [r7, #4]
 801e7e2:	4a1b      	ldr	r2, [pc, #108]	; (801e850 <SUBGRF_CalibrateImage+0x78>)
 801e7e4:	4293      	cmp	r3, r2
 801e7e6:	d904      	bls.n	801e7f2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801e7e8:	23e1      	movs	r3, #225	; 0xe1
 801e7ea:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801e7ec:	23e9      	movs	r3, #233	; 0xe9
 801e7ee:	737b      	strb	r3, [r7, #13]
 801e7f0:	e022      	b.n	801e838 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801e7f2:	687b      	ldr	r3, [r7, #4]
 801e7f4:	4a17      	ldr	r2, [pc, #92]	; (801e854 <SUBGRF_CalibrateImage+0x7c>)
 801e7f6:	4293      	cmp	r3, r2
 801e7f8:	d904      	bls.n	801e804 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801e7fa:	23d7      	movs	r3, #215	; 0xd7
 801e7fc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801e7fe:	23db      	movs	r3, #219	; 0xdb
 801e800:	737b      	strb	r3, [r7, #13]
 801e802:	e019      	b.n	801e838 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801e804:	687b      	ldr	r3, [r7, #4]
 801e806:	4a14      	ldr	r2, [pc, #80]	; (801e858 <SUBGRF_CalibrateImage+0x80>)
 801e808:	4293      	cmp	r3, r2
 801e80a:	d904      	bls.n	801e816 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801e80c:	23c1      	movs	r3, #193	; 0xc1
 801e80e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801e810:	23c5      	movs	r3, #197	; 0xc5
 801e812:	737b      	strb	r3, [r7, #13]
 801e814:	e010      	b.n	801e838 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801e816:	687b      	ldr	r3, [r7, #4]
 801e818:	4a10      	ldr	r2, [pc, #64]	; (801e85c <SUBGRF_CalibrateImage+0x84>)
 801e81a:	4293      	cmp	r3, r2
 801e81c:	d904      	bls.n	801e828 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801e81e:	2375      	movs	r3, #117	; 0x75
 801e820:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801e822:	2381      	movs	r3, #129	; 0x81
 801e824:	737b      	strb	r3, [r7, #13]
 801e826:	e007      	b.n	801e838 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	4a0d      	ldr	r2, [pc, #52]	; (801e860 <SUBGRF_CalibrateImage+0x88>)
 801e82c:	4293      	cmp	r3, r2
 801e82e:	d903      	bls.n	801e838 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801e830:	236b      	movs	r3, #107	; 0x6b
 801e832:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801e834:	236f      	movs	r3, #111	; 0x6f
 801e836:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801e838:	f107 030c 	add.w	r3, r7, #12
 801e83c:	2202      	movs	r2, #2
 801e83e:	4619      	mov	r1, r3
 801e840:	2098      	movs	r0, #152	; 0x98
 801e842:	f000 fc91 	bl	801f168 <SUBGRF_WriteCommand>
}
 801e846:	bf00      	nop
 801e848:	3710      	adds	r7, #16
 801e84a:	46bd      	mov	sp, r7
 801e84c:	bd80      	pop	{r7, pc}
 801e84e:	bf00      	nop
 801e850:	35a4e900 	.word	0x35a4e900
 801e854:	32a9f880 	.word	0x32a9f880
 801e858:	2de54480 	.word	0x2de54480
 801e85c:	1b6b0b00 	.word	0x1b6b0b00
 801e860:	1954fc40 	.word	0x1954fc40

0801e864 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801e864:	b590      	push	{r4, r7, lr}
 801e866:	b085      	sub	sp, #20
 801e868:	af00      	add	r7, sp, #0
 801e86a:	4604      	mov	r4, r0
 801e86c:	4608      	mov	r0, r1
 801e86e:	4611      	mov	r1, r2
 801e870:	461a      	mov	r2, r3
 801e872:	4623      	mov	r3, r4
 801e874:	71fb      	strb	r3, [r7, #7]
 801e876:	4603      	mov	r3, r0
 801e878:	71bb      	strb	r3, [r7, #6]
 801e87a:	460b      	mov	r3, r1
 801e87c:	717b      	strb	r3, [r7, #5]
 801e87e:	4613      	mov	r3, r2
 801e880:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801e882:	79fb      	ldrb	r3, [r7, #7]
 801e884:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801e886:	79bb      	ldrb	r3, [r7, #6]
 801e888:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801e88a:	797b      	ldrb	r3, [r7, #5]
 801e88c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801e88e:	793b      	ldrb	r3, [r7, #4]
 801e890:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801e892:	f107 030c 	add.w	r3, r7, #12
 801e896:	2204      	movs	r2, #4
 801e898:	4619      	mov	r1, r3
 801e89a:	2095      	movs	r0, #149	; 0x95
 801e89c:	f000 fc64 	bl	801f168 <SUBGRF_WriteCommand>
}
 801e8a0:	bf00      	nop
 801e8a2:	3714      	adds	r7, #20
 801e8a4:	46bd      	mov	sp, r7
 801e8a6:	bd90      	pop	{r4, r7, pc}

0801e8a8 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801e8a8:	b590      	push	{r4, r7, lr}
 801e8aa:	b085      	sub	sp, #20
 801e8ac:	af00      	add	r7, sp, #0
 801e8ae:	4604      	mov	r4, r0
 801e8b0:	4608      	mov	r0, r1
 801e8b2:	4611      	mov	r1, r2
 801e8b4:	461a      	mov	r2, r3
 801e8b6:	4623      	mov	r3, r4
 801e8b8:	80fb      	strh	r3, [r7, #6]
 801e8ba:	4603      	mov	r3, r0
 801e8bc:	80bb      	strh	r3, [r7, #4]
 801e8be:	460b      	mov	r3, r1
 801e8c0:	807b      	strh	r3, [r7, #2]
 801e8c2:	4613      	mov	r3, r2
 801e8c4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801e8c6:	88fb      	ldrh	r3, [r7, #6]
 801e8c8:	0a1b      	lsrs	r3, r3, #8
 801e8ca:	b29b      	uxth	r3, r3
 801e8cc:	b2db      	uxtb	r3, r3
 801e8ce:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801e8d0:	88fb      	ldrh	r3, [r7, #6]
 801e8d2:	b2db      	uxtb	r3, r3
 801e8d4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801e8d6:	88bb      	ldrh	r3, [r7, #4]
 801e8d8:	0a1b      	lsrs	r3, r3, #8
 801e8da:	b29b      	uxth	r3, r3
 801e8dc:	b2db      	uxtb	r3, r3
 801e8de:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801e8e0:	88bb      	ldrh	r3, [r7, #4]
 801e8e2:	b2db      	uxtb	r3, r3
 801e8e4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801e8e6:	887b      	ldrh	r3, [r7, #2]
 801e8e8:	0a1b      	lsrs	r3, r3, #8
 801e8ea:	b29b      	uxth	r3, r3
 801e8ec:	b2db      	uxtb	r3, r3
 801e8ee:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801e8f0:	887b      	ldrh	r3, [r7, #2]
 801e8f2:	b2db      	uxtb	r3, r3
 801e8f4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801e8f6:	883b      	ldrh	r3, [r7, #0]
 801e8f8:	0a1b      	lsrs	r3, r3, #8
 801e8fa:	b29b      	uxth	r3, r3
 801e8fc:	b2db      	uxtb	r3, r3
 801e8fe:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801e900:	883b      	ldrh	r3, [r7, #0]
 801e902:	b2db      	uxtb	r3, r3
 801e904:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801e906:	f107 0308 	add.w	r3, r7, #8
 801e90a:	2208      	movs	r2, #8
 801e90c:	4619      	mov	r1, r3
 801e90e:	2008      	movs	r0, #8
 801e910:	f000 fc2a 	bl	801f168 <SUBGRF_WriteCommand>
}
 801e914:	bf00      	nop
 801e916:	3714      	adds	r7, #20
 801e918:	46bd      	mov	sp, r7
 801e91a:	bd90      	pop	{r4, r7, pc}

0801e91c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801e91c:	b580      	push	{r7, lr}
 801e91e:	b084      	sub	sp, #16
 801e920:	af00      	add	r7, sp, #0
 801e922:	4603      	mov	r3, r0
 801e924:	6039      	str	r1, [r7, #0]
 801e926:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801e928:	79fb      	ldrb	r3, [r7, #7]
 801e92a:	f003 0307 	and.w	r3, r3, #7
 801e92e:	b2db      	uxtb	r3, r3
 801e930:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801e932:	683b      	ldr	r3, [r7, #0]
 801e934:	0c1b      	lsrs	r3, r3, #16
 801e936:	b2db      	uxtb	r3, r3
 801e938:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801e93a:	683b      	ldr	r3, [r7, #0]
 801e93c:	0a1b      	lsrs	r3, r3, #8
 801e93e:	b2db      	uxtb	r3, r3
 801e940:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801e942:	683b      	ldr	r3, [r7, #0]
 801e944:	b2db      	uxtb	r3, r3
 801e946:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801e948:	f107 030c 	add.w	r3, r7, #12
 801e94c:	2204      	movs	r2, #4
 801e94e:	4619      	mov	r1, r3
 801e950:	2097      	movs	r0, #151	; 0x97
 801e952:	f000 fc09 	bl	801f168 <SUBGRF_WriteCommand>
}
 801e956:	bf00      	nop
 801e958:	3710      	adds	r7, #16
 801e95a:	46bd      	mov	sp, r7
 801e95c:	bd80      	pop	{r7, pc}
	...

0801e960 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801e960:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801e964:	b084      	sub	sp, #16
 801e966:	af00      	add	r7, sp, #0
 801e968:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801e96a:	2300      	movs	r3, #0
 801e96c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801e96e:	4b1d      	ldr	r3, [pc, #116]	; (801e9e4 <SUBGRF_SetRfFrequency+0x84>)
 801e970:	781b      	ldrb	r3, [r3, #0]
 801e972:	f083 0301 	eor.w	r3, r3, #1
 801e976:	b2db      	uxtb	r3, r3
 801e978:	2b00      	cmp	r3, #0
 801e97a:	d005      	beq.n	801e988 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801e97c:	6878      	ldr	r0, [r7, #4]
 801e97e:	f7ff ff2b 	bl	801e7d8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801e982:	4b18      	ldr	r3, [pc, #96]	; (801e9e4 <SUBGRF_SetRfFrequency+0x84>)
 801e984:	2201      	movs	r2, #1
 801e986:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801e988:	687b      	ldr	r3, [r7, #4]
 801e98a:	2200      	movs	r2, #0
 801e98c:	461c      	mov	r4, r3
 801e98e:	4615      	mov	r5, r2
 801e990:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801e994:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801e998:	4a13      	ldr	r2, [pc, #76]	; (801e9e8 <SUBGRF_SetRfFrequency+0x88>)
 801e99a:	f04f 0300 	mov.w	r3, #0
 801e99e:	4640      	mov	r0, r8
 801e9a0:	4649      	mov	r1, r9
 801e9a2:	f7e2 fbd9 	bl	8001158 <__aeabi_uldivmod>
 801e9a6:	4602      	mov	r2, r0
 801e9a8:	460b      	mov	r3, r1
 801e9aa:	4613      	mov	r3, r2
 801e9ac:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801e9ae:	68fb      	ldr	r3, [r7, #12]
 801e9b0:	0e1b      	lsrs	r3, r3, #24
 801e9b2:	b2db      	uxtb	r3, r3
 801e9b4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801e9b6:	68fb      	ldr	r3, [r7, #12]
 801e9b8:	0c1b      	lsrs	r3, r3, #16
 801e9ba:	b2db      	uxtb	r3, r3
 801e9bc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801e9be:	68fb      	ldr	r3, [r7, #12]
 801e9c0:	0a1b      	lsrs	r3, r3, #8
 801e9c2:	b2db      	uxtb	r3, r3
 801e9c4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801e9c6:	68fb      	ldr	r3, [r7, #12]
 801e9c8:	b2db      	uxtb	r3, r3
 801e9ca:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801e9cc:	f107 0308 	add.w	r3, r7, #8
 801e9d0:	2204      	movs	r2, #4
 801e9d2:	4619      	mov	r1, r3
 801e9d4:	2086      	movs	r0, #134	; 0x86
 801e9d6:	f000 fbc7 	bl	801f168 <SUBGRF_WriteCommand>
}
 801e9da:	bf00      	nop
 801e9dc:	3710      	adds	r7, #16
 801e9de:	46bd      	mov	sp, r7
 801e9e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801e9e4:	20002538 	.word	0x20002538
 801e9e8:	01e84800 	.word	0x01e84800

0801e9ec <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801e9ec:	b580      	push	{r7, lr}
 801e9ee:	b082      	sub	sp, #8
 801e9f0:	af00      	add	r7, sp, #0
 801e9f2:	4603      	mov	r3, r0
 801e9f4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801e9f6:	79fa      	ldrb	r2, [r7, #7]
 801e9f8:	4b09      	ldr	r3, [pc, #36]	; (801ea20 <SUBGRF_SetPacketType+0x34>)
 801e9fa:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801e9fc:	79fb      	ldrb	r3, [r7, #7]
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	d104      	bne.n	801ea0c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801ea02:	2100      	movs	r1, #0
 801ea04:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801ea08:	f000 fafe 	bl	801f008 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801ea0c:	1dfb      	adds	r3, r7, #7
 801ea0e:	2201      	movs	r2, #1
 801ea10:	4619      	mov	r1, r3
 801ea12:	208a      	movs	r0, #138	; 0x8a
 801ea14:	f000 fba8 	bl	801f168 <SUBGRF_WriteCommand>
}
 801ea18:	bf00      	nop
 801ea1a:	3708      	adds	r7, #8
 801ea1c:	46bd      	mov	sp, r7
 801ea1e:	bd80      	pop	{r7, pc}
 801ea20:	20002531 	.word	0x20002531

0801ea24 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801ea24:	b480      	push	{r7}
 801ea26:	af00      	add	r7, sp, #0
    return PacketType;
 801ea28:	4b02      	ldr	r3, [pc, #8]	; (801ea34 <SUBGRF_GetPacketType+0x10>)
 801ea2a:	781b      	ldrb	r3, [r3, #0]
}
 801ea2c:	4618      	mov	r0, r3
 801ea2e:	46bd      	mov	sp, r7
 801ea30:	bc80      	pop	{r7}
 801ea32:	4770      	bx	lr
 801ea34:	20002531 	.word	0x20002531

0801ea38 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801ea38:	b580      	push	{r7, lr}
 801ea3a:	b084      	sub	sp, #16
 801ea3c:	af00      	add	r7, sp, #0
 801ea3e:	4603      	mov	r3, r0
 801ea40:	71fb      	strb	r3, [r7, #7]
 801ea42:	460b      	mov	r3, r1
 801ea44:	71bb      	strb	r3, [r7, #6]
 801ea46:	4613      	mov	r3, r2
 801ea48:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801ea4a:	79fb      	ldrb	r3, [r7, #7]
 801ea4c:	2b01      	cmp	r3, #1
 801ea4e:	d149      	bne.n	801eae4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801ea50:	2000      	movs	r0, #0
 801ea52:	f7ef fccb 	bl	800e3ec <RBI_GetRFOMaxPowerConfig>
 801ea56:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801ea58:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ea5c:	68fa      	ldr	r2, [r7, #12]
 801ea5e:	429a      	cmp	r2, r3
 801ea60:	da01      	bge.n	801ea66 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801ea62:	68fb      	ldr	r3, [r7, #12]
 801ea64:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801ea66:	68fb      	ldr	r3, [r7, #12]
 801ea68:	2b0e      	cmp	r3, #14
 801ea6a:	d10e      	bne.n	801ea8a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801ea6c:	2301      	movs	r3, #1
 801ea6e:	2201      	movs	r2, #1
 801ea70:	2100      	movs	r1, #0
 801ea72:	2004      	movs	r0, #4
 801ea74:	f7ff fef6 	bl	801e864 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ea78:	79ba      	ldrb	r2, [r7, #6]
 801ea7a:	68fb      	ldr	r3, [r7, #12]
 801ea7c:	b2db      	uxtb	r3, r3
 801ea7e:	1ad3      	subs	r3, r2, r3
 801ea80:	b2db      	uxtb	r3, r3
 801ea82:	330e      	adds	r3, #14
 801ea84:	b2db      	uxtb	r3, r3
 801ea86:	71bb      	strb	r3, [r7, #6]
 801ea88:	e01f      	b.n	801eaca <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801ea8a:	68fb      	ldr	r3, [r7, #12]
 801ea8c:	2b0a      	cmp	r3, #10
 801ea8e:	d10e      	bne.n	801eaae <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801ea90:	2301      	movs	r3, #1
 801ea92:	2201      	movs	r2, #1
 801ea94:	2100      	movs	r1, #0
 801ea96:	2001      	movs	r0, #1
 801ea98:	f7ff fee4 	bl	801e864 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801ea9c:	79ba      	ldrb	r2, [r7, #6]
 801ea9e:	68fb      	ldr	r3, [r7, #12]
 801eaa0:	b2db      	uxtb	r3, r3
 801eaa2:	1ad3      	subs	r3, r2, r3
 801eaa4:	b2db      	uxtb	r3, r3
 801eaa6:	330d      	adds	r3, #13
 801eaa8:	b2db      	uxtb	r3, r3
 801eaaa:	71bb      	strb	r3, [r7, #6]
 801eaac:	e00d      	b.n	801eaca <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801eaae:	2301      	movs	r3, #1
 801eab0:	2201      	movs	r2, #1
 801eab2:	2100      	movs	r1, #0
 801eab4:	2006      	movs	r0, #6
 801eab6:	f7ff fed5 	bl	801e864 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801eaba:	79ba      	ldrb	r2, [r7, #6]
 801eabc:	68fb      	ldr	r3, [r7, #12]
 801eabe:	b2db      	uxtb	r3, r3
 801eac0:	1ad3      	subs	r3, r2, r3
 801eac2:	b2db      	uxtb	r3, r3
 801eac4:	330e      	adds	r3, #14
 801eac6:	b2db      	uxtb	r3, r3
 801eac8:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801eaca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801eace:	f113 0f11 	cmn.w	r3, #17
 801ead2:	da01      	bge.n	801ead8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801ead4:	23ef      	movs	r3, #239	; 0xef
 801ead6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801ead8:	2118      	movs	r1, #24
 801eada:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801eade:	f000 fa93 	bl	801f008 <SUBGRF_WriteRegister>
 801eae2:	e067      	b.n	801ebb4 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801eae4:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801eae8:	f000 faa2 	bl	801f030 <SUBGRF_ReadRegister>
 801eaec:	4603      	mov	r3, r0
 801eaee:	f043 031e 	orr.w	r3, r3, #30
 801eaf2:	b2db      	uxtb	r3, r3
 801eaf4:	4619      	mov	r1, r3
 801eaf6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801eafa:	f000 fa85 	bl	801f008 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801eafe:	2001      	movs	r0, #1
 801eb00:	f7ef fc74 	bl	800e3ec <RBI_GetRFOMaxPowerConfig>
 801eb04:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801eb06:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801eb0a:	68fa      	ldr	r2, [r7, #12]
 801eb0c:	429a      	cmp	r2, r3
 801eb0e:	da01      	bge.n	801eb14 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801eb10:	68fb      	ldr	r3, [r7, #12]
 801eb12:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801eb14:	68fb      	ldr	r3, [r7, #12]
 801eb16:	2b14      	cmp	r3, #20
 801eb18:	d10e      	bne.n	801eb38 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801eb1a:	2301      	movs	r3, #1
 801eb1c:	2200      	movs	r2, #0
 801eb1e:	2105      	movs	r1, #5
 801eb20:	2003      	movs	r0, #3
 801eb22:	f7ff fe9f 	bl	801e864 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801eb26:	79ba      	ldrb	r2, [r7, #6]
 801eb28:	68fb      	ldr	r3, [r7, #12]
 801eb2a:	b2db      	uxtb	r3, r3
 801eb2c:	1ad3      	subs	r3, r2, r3
 801eb2e:	b2db      	uxtb	r3, r3
 801eb30:	3316      	adds	r3, #22
 801eb32:	b2db      	uxtb	r3, r3
 801eb34:	71bb      	strb	r3, [r7, #6]
 801eb36:	e031      	b.n	801eb9c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801eb38:	68fb      	ldr	r3, [r7, #12]
 801eb3a:	2b11      	cmp	r3, #17
 801eb3c:	d10e      	bne.n	801eb5c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801eb3e:	2301      	movs	r3, #1
 801eb40:	2200      	movs	r2, #0
 801eb42:	2103      	movs	r1, #3
 801eb44:	2002      	movs	r0, #2
 801eb46:	f7ff fe8d 	bl	801e864 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801eb4a:	79ba      	ldrb	r2, [r7, #6]
 801eb4c:	68fb      	ldr	r3, [r7, #12]
 801eb4e:	b2db      	uxtb	r3, r3
 801eb50:	1ad3      	subs	r3, r2, r3
 801eb52:	b2db      	uxtb	r3, r3
 801eb54:	3316      	adds	r3, #22
 801eb56:	b2db      	uxtb	r3, r3
 801eb58:	71bb      	strb	r3, [r7, #6]
 801eb5a:	e01f      	b.n	801eb9c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801eb5c:	68fb      	ldr	r3, [r7, #12]
 801eb5e:	2b0e      	cmp	r3, #14
 801eb60:	d10e      	bne.n	801eb80 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801eb62:	2301      	movs	r3, #1
 801eb64:	2200      	movs	r2, #0
 801eb66:	2102      	movs	r1, #2
 801eb68:	2002      	movs	r0, #2
 801eb6a:	f7ff fe7b 	bl	801e864 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801eb6e:	79ba      	ldrb	r2, [r7, #6]
 801eb70:	68fb      	ldr	r3, [r7, #12]
 801eb72:	b2db      	uxtb	r3, r3
 801eb74:	1ad3      	subs	r3, r2, r3
 801eb76:	b2db      	uxtb	r3, r3
 801eb78:	330e      	adds	r3, #14
 801eb7a:	b2db      	uxtb	r3, r3
 801eb7c:	71bb      	strb	r3, [r7, #6]
 801eb7e:	e00d      	b.n	801eb9c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801eb80:	2301      	movs	r3, #1
 801eb82:	2200      	movs	r2, #0
 801eb84:	2107      	movs	r1, #7
 801eb86:	2004      	movs	r0, #4
 801eb88:	f7ff fe6c 	bl	801e864 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801eb8c:	79ba      	ldrb	r2, [r7, #6]
 801eb8e:	68fb      	ldr	r3, [r7, #12]
 801eb90:	b2db      	uxtb	r3, r3
 801eb92:	1ad3      	subs	r3, r2, r3
 801eb94:	b2db      	uxtb	r3, r3
 801eb96:	3316      	adds	r3, #22
 801eb98:	b2db      	uxtb	r3, r3
 801eb9a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801eb9c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801eba0:	f113 0f09 	cmn.w	r3, #9
 801eba4:	da01      	bge.n	801ebaa <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801eba6:	23f7      	movs	r3, #247	; 0xf7
 801eba8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801ebaa:	2138      	movs	r1, #56	; 0x38
 801ebac:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ebb0:	f000 fa2a 	bl	801f008 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801ebb4:	79bb      	ldrb	r3, [r7, #6]
 801ebb6:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801ebb8:	797b      	ldrb	r3, [r7, #5]
 801ebba:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801ebbc:	f107 0308 	add.w	r3, r7, #8
 801ebc0:	2202      	movs	r2, #2
 801ebc2:	4619      	mov	r1, r3
 801ebc4:	208e      	movs	r0, #142	; 0x8e
 801ebc6:	f000 facf 	bl	801f168 <SUBGRF_WriteCommand>
}
 801ebca:	bf00      	nop
 801ebcc:	3710      	adds	r7, #16
 801ebce:	46bd      	mov	sp, r7
 801ebd0:	bd80      	pop	{r7, pc}
	...

0801ebd4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801ebd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801ebd8:	b086      	sub	sp, #24
 801ebda:	af00      	add	r7, sp, #0
 801ebdc:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801ebde:	2300      	movs	r3, #0
 801ebe0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801ebe2:	4a61      	ldr	r2, [pc, #388]	; (801ed68 <SUBGRF_SetModulationParams+0x194>)
 801ebe4:	f107 0308 	add.w	r3, r7, #8
 801ebe8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ebec:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801ebf0:	687b      	ldr	r3, [r7, #4]
 801ebf2:	781a      	ldrb	r2, [r3, #0]
 801ebf4:	4b5d      	ldr	r3, [pc, #372]	; (801ed6c <SUBGRF_SetModulationParams+0x198>)
 801ebf6:	781b      	ldrb	r3, [r3, #0]
 801ebf8:	429a      	cmp	r2, r3
 801ebfa:	d004      	beq.n	801ec06 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801ebfc:	687b      	ldr	r3, [r7, #4]
 801ebfe:	781b      	ldrb	r3, [r3, #0]
 801ec00:	4618      	mov	r0, r3
 801ec02:	f7ff fef3 	bl	801e9ec <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801ec06:	687b      	ldr	r3, [r7, #4]
 801ec08:	781b      	ldrb	r3, [r3, #0]
 801ec0a:	2b03      	cmp	r3, #3
 801ec0c:	f200 80a5 	bhi.w	801ed5a <SUBGRF_SetModulationParams+0x186>
 801ec10:	a201      	add	r2, pc, #4	; (adr r2, 801ec18 <SUBGRF_SetModulationParams+0x44>)
 801ec12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ec16:	bf00      	nop
 801ec18:	0801ec29 	.word	0x0801ec29
 801ec1c:	0801ece9 	.word	0x0801ece9
 801ec20:	0801ecab 	.word	0x0801ecab
 801ec24:	0801ed17 	.word	0x0801ed17
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801ec28:	2308      	movs	r3, #8
 801ec2a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801ec2c:	687b      	ldr	r3, [r7, #4]
 801ec2e:	685b      	ldr	r3, [r3, #4]
 801ec30:	4a4f      	ldr	r2, [pc, #316]	; (801ed70 <SUBGRF_SetModulationParams+0x19c>)
 801ec32:	fbb2 f3f3 	udiv	r3, r2, r3
 801ec36:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ec38:	697b      	ldr	r3, [r7, #20]
 801ec3a:	0c1b      	lsrs	r3, r3, #16
 801ec3c:	b2db      	uxtb	r3, r3
 801ec3e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ec40:	697b      	ldr	r3, [r7, #20]
 801ec42:	0a1b      	lsrs	r3, r3, #8
 801ec44:	b2db      	uxtb	r3, r3
 801ec46:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ec48:	697b      	ldr	r3, [r7, #20]
 801ec4a:	b2db      	uxtb	r3, r3
 801ec4c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ec4e:	687b      	ldr	r3, [r7, #4]
 801ec50:	7b1b      	ldrb	r3, [r3, #12]
 801ec52:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ec54:	687b      	ldr	r3, [r7, #4]
 801ec56:	7b5b      	ldrb	r3, [r3, #13]
 801ec58:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801ec5a:	687b      	ldr	r3, [r7, #4]
 801ec5c:	689b      	ldr	r3, [r3, #8]
 801ec5e:	2200      	movs	r2, #0
 801ec60:	461c      	mov	r4, r3
 801ec62:	4615      	mov	r5, r2
 801ec64:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801ec68:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801ec6c:	4a41      	ldr	r2, [pc, #260]	; (801ed74 <SUBGRF_SetModulationParams+0x1a0>)
 801ec6e:	f04f 0300 	mov.w	r3, #0
 801ec72:	4640      	mov	r0, r8
 801ec74:	4649      	mov	r1, r9
 801ec76:	f7e2 fa6f 	bl	8001158 <__aeabi_uldivmod>
 801ec7a:	4602      	mov	r2, r0
 801ec7c:	460b      	mov	r3, r1
 801ec7e:	4613      	mov	r3, r2
 801ec80:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801ec82:	697b      	ldr	r3, [r7, #20]
 801ec84:	0c1b      	lsrs	r3, r3, #16
 801ec86:	b2db      	uxtb	r3, r3
 801ec88:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801ec8a:	697b      	ldr	r3, [r7, #20]
 801ec8c:	0a1b      	lsrs	r3, r3, #8
 801ec8e:	b2db      	uxtb	r3, r3
 801ec90:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801ec92:	697b      	ldr	r3, [r7, #20]
 801ec94:	b2db      	uxtb	r3, r3
 801ec96:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ec98:	7cfb      	ldrb	r3, [r7, #19]
 801ec9a:	b29a      	uxth	r2, r3
 801ec9c:	f107 0308 	add.w	r3, r7, #8
 801eca0:	4619      	mov	r1, r3
 801eca2:	208b      	movs	r0, #139	; 0x8b
 801eca4:	f000 fa60 	bl	801f168 <SUBGRF_WriteCommand>
        break;
 801eca8:	e058      	b.n	801ed5c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801ecaa:	2304      	movs	r3, #4
 801ecac:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801ecae:	687b      	ldr	r3, [r7, #4]
 801ecb0:	691b      	ldr	r3, [r3, #16]
 801ecb2:	4a2f      	ldr	r2, [pc, #188]	; (801ed70 <SUBGRF_SetModulationParams+0x19c>)
 801ecb4:	fbb2 f3f3 	udiv	r3, r2, r3
 801ecb8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ecba:	697b      	ldr	r3, [r7, #20]
 801ecbc:	0c1b      	lsrs	r3, r3, #16
 801ecbe:	b2db      	uxtb	r3, r3
 801ecc0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ecc2:	697b      	ldr	r3, [r7, #20]
 801ecc4:	0a1b      	lsrs	r3, r3, #8
 801ecc6:	b2db      	uxtb	r3, r3
 801ecc8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ecca:	697b      	ldr	r3, [r7, #20]
 801eccc:	b2db      	uxtb	r3, r3
 801ecce:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801ecd0:	687b      	ldr	r3, [r7, #4]
 801ecd2:	7d1b      	ldrb	r3, [r3, #20]
 801ecd4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ecd6:	7cfb      	ldrb	r3, [r7, #19]
 801ecd8:	b29a      	uxth	r2, r3
 801ecda:	f107 0308 	add.w	r3, r7, #8
 801ecde:	4619      	mov	r1, r3
 801ece0:	208b      	movs	r0, #139	; 0x8b
 801ece2:	f000 fa41 	bl	801f168 <SUBGRF_WriteCommand>
        break;
 801ece6:	e039      	b.n	801ed5c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801ece8:	2304      	movs	r3, #4
 801ecea:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801ecec:	687b      	ldr	r3, [r7, #4]
 801ecee:	7e1b      	ldrb	r3, [r3, #24]
 801ecf0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801ecf2:	687b      	ldr	r3, [r7, #4]
 801ecf4:	7e5b      	ldrb	r3, [r3, #25]
 801ecf6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801ecf8:	687b      	ldr	r3, [r7, #4]
 801ecfa:	7e9b      	ldrb	r3, [r3, #26]
 801ecfc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801ecfe:	687b      	ldr	r3, [r7, #4]
 801ed00:	7edb      	ldrb	r3, [r3, #27]
 801ed02:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ed04:	7cfb      	ldrb	r3, [r7, #19]
 801ed06:	b29a      	uxth	r2, r3
 801ed08:	f107 0308 	add.w	r3, r7, #8
 801ed0c:	4619      	mov	r1, r3
 801ed0e:	208b      	movs	r0, #139	; 0x8b
 801ed10:	f000 fa2a 	bl	801f168 <SUBGRF_WriteCommand>

        break;
 801ed14:	e022      	b.n	801ed5c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801ed16:	2305      	movs	r3, #5
 801ed18:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801ed1a:	687b      	ldr	r3, [r7, #4]
 801ed1c:	685b      	ldr	r3, [r3, #4]
 801ed1e:	4a14      	ldr	r2, [pc, #80]	; (801ed70 <SUBGRF_SetModulationParams+0x19c>)
 801ed20:	fbb2 f3f3 	udiv	r3, r2, r3
 801ed24:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ed26:	697b      	ldr	r3, [r7, #20]
 801ed28:	0c1b      	lsrs	r3, r3, #16
 801ed2a:	b2db      	uxtb	r3, r3
 801ed2c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ed2e:	697b      	ldr	r3, [r7, #20]
 801ed30:	0a1b      	lsrs	r3, r3, #8
 801ed32:	b2db      	uxtb	r3, r3
 801ed34:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ed36:	697b      	ldr	r3, [r7, #20]
 801ed38:	b2db      	uxtb	r3, r3
 801ed3a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ed3c:	687b      	ldr	r3, [r7, #4]
 801ed3e:	7b1b      	ldrb	r3, [r3, #12]
 801ed40:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ed42:	687b      	ldr	r3, [r7, #4]
 801ed44:	7b5b      	ldrb	r3, [r3, #13]
 801ed46:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ed48:	7cfb      	ldrb	r3, [r7, #19]
 801ed4a:	b29a      	uxth	r2, r3
 801ed4c:	f107 0308 	add.w	r3, r7, #8
 801ed50:	4619      	mov	r1, r3
 801ed52:	208b      	movs	r0, #139	; 0x8b
 801ed54:	f000 fa08 	bl	801f168 <SUBGRF_WriteCommand>
        break;
 801ed58:	e000      	b.n	801ed5c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801ed5a:	bf00      	nop
    }
}
 801ed5c:	bf00      	nop
 801ed5e:	3718      	adds	r7, #24
 801ed60:	46bd      	mov	sp, r7
 801ed62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801ed66:	bf00      	nop
 801ed68:	0802181c 	.word	0x0802181c
 801ed6c:	20002531 	.word	0x20002531
 801ed70:	3d090000 	.word	0x3d090000
 801ed74:	01e84800 	.word	0x01e84800

0801ed78 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801ed78:	b580      	push	{r7, lr}
 801ed7a:	b086      	sub	sp, #24
 801ed7c:	af00      	add	r7, sp, #0
 801ed7e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801ed80:	2300      	movs	r3, #0
 801ed82:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801ed84:	4a48      	ldr	r2, [pc, #288]	; (801eea8 <SUBGRF_SetPacketParams+0x130>)
 801ed86:	f107 030c 	add.w	r3, r7, #12
 801ed8a:	ca07      	ldmia	r2, {r0, r1, r2}
 801ed8c:	c303      	stmia	r3!, {r0, r1}
 801ed8e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	781a      	ldrb	r2, [r3, #0]
 801ed94:	4b45      	ldr	r3, [pc, #276]	; (801eeac <SUBGRF_SetPacketParams+0x134>)
 801ed96:	781b      	ldrb	r3, [r3, #0]
 801ed98:	429a      	cmp	r2, r3
 801ed9a:	d004      	beq.n	801eda6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801ed9c:	687b      	ldr	r3, [r7, #4]
 801ed9e:	781b      	ldrb	r3, [r3, #0]
 801eda0:	4618      	mov	r0, r3
 801eda2:	f7ff fe23 	bl	801e9ec <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801eda6:	687b      	ldr	r3, [r7, #4]
 801eda8:	781b      	ldrb	r3, [r3, #0]
 801edaa:	2b03      	cmp	r3, #3
 801edac:	d878      	bhi.n	801eea0 <SUBGRF_SetPacketParams+0x128>
 801edae:	a201      	add	r2, pc, #4	; (adr r2, 801edb4 <SUBGRF_SetPacketParams+0x3c>)
 801edb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801edb4:	0801edc5 	.word	0x0801edc5
 801edb8:	0801ee55 	.word	0x0801ee55
 801edbc:	0801ee49 	.word	0x0801ee49
 801edc0:	0801edc5 	.word	0x0801edc5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801edc4:	687b      	ldr	r3, [r7, #4]
 801edc6:	7a5b      	ldrb	r3, [r3, #9]
 801edc8:	2bf1      	cmp	r3, #241	; 0xf1
 801edca:	d10a      	bne.n	801ede2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801edcc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801edd0:	f7ff faae 	bl	801e330 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801edd4:	f248 0005 	movw	r0, #32773	; 0x8005
 801edd8:	f7ff faca 	bl	801e370 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801eddc:	2302      	movs	r3, #2
 801edde:	75bb      	strb	r3, [r7, #22]
 801ede0:	e011      	b.n	801ee06 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801ede2:	687b      	ldr	r3, [r7, #4]
 801ede4:	7a5b      	ldrb	r3, [r3, #9]
 801ede6:	2bf2      	cmp	r3, #242	; 0xf2
 801ede8:	d10a      	bne.n	801ee00 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801edea:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801edee:	f7ff fa9f 	bl	801e330 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801edf2:	f241 0021 	movw	r0, #4129	; 0x1021
 801edf6:	f7ff fabb 	bl	801e370 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801edfa:	2306      	movs	r3, #6
 801edfc:	75bb      	strb	r3, [r7, #22]
 801edfe:	e002      	b.n	801ee06 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801ee00:	687b      	ldr	r3, [r7, #4]
 801ee02:	7a5b      	ldrb	r3, [r3, #9]
 801ee04:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801ee06:	2309      	movs	r3, #9
 801ee08:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801ee0a:	687b      	ldr	r3, [r7, #4]
 801ee0c:	885b      	ldrh	r3, [r3, #2]
 801ee0e:	0a1b      	lsrs	r3, r3, #8
 801ee10:	b29b      	uxth	r3, r3
 801ee12:	b2db      	uxtb	r3, r3
 801ee14:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801ee16:	687b      	ldr	r3, [r7, #4]
 801ee18:	885b      	ldrh	r3, [r3, #2]
 801ee1a:	b2db      	uxtb	r3, r3
 801ee1c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801ee1e:	687b      	ldr	r3, [r7, #4]
 801ee20:	791b      	ldrb	r3, [r3, #4]
 801ee22:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801ee24:	687b      	ldr	r3, [r7, #4]
 801ee26:	795b      	ldrb	r3, [r3, #5]
 801ee28:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801ee2a:	687b      	ldr	r3, [r7, #4]
 801ee2c:	799b      	ldrb	r3, [r3, #6]
 801ee2e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801ee30:	687b      	ldr	r3, [r7, #4]
 801ee32:	79db      	ldrb	r3, [r3, #7]
 801ee34:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	7a1b      	ldrb	r3, [r3, #8]
 801ee3a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801ee3c:	7dbb      	ldrb	r3, [r7, #22]
 801ee3e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801ee40:	687b      	ldr	r3, [r7, #4]
 801ee42:	7a9b      	ldrb	r3, [r3, #10]
 801ee44:	753b      	strb	r3, [r7, #20]
        break;
 801ee46:	e022      	b.n	801ee8e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801ee48:	2301      	movs	r3, #1
 801ee4a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801ee4c:	687b      	ldr	r3, [r7, #4]
 801ee4e:	7b1b      	ldrb	r3, [r3, #12]
 801ee50:	733b      	strb	r3, [r7, #12]
        break;
 801ee52:	e01c      	b.n	801ee8e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801ee54:	2306      	movs	r3, #6
 801ee56:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801ee58:	687b      	ldr	r3, [r7, #4]
 801ee5a:	89db      	ldrh	r3, [r3, #14]
 801ee5c:	0a1b      	lsrs	r3, r3, #8
 801ee5e:	b29b      	uxth	r3, r3
 801ee60:	b2db      	uxtb	r3, r3
 801ee62:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801ee64:	687b      	ldr	r3, [r7, #4]
 801ee66:	89db      	ldrh	r3, [r3, #14]
 801ee68:	b2db      	uxtb	r3, r3
 801ee6a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801ee6c:	687b      	ldr	r3, [r7, #4]
 801ee6e:	7c1a      	ldrb	r2, [r3, #16]
 801ee70:	4b0f      	ldr	r3, [pc, #60]	; (801eeb0 <SUBGRF_SetPacketParams+0x138>)
 801ee72:	4611      	mov	r1, r2
 801ee74:	7019      	strb	r1, [r3, #0]
 801ee76:	4613      	mov	r3, r2
 801ee78:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801ee7a:	687b      	ldr	r3, [r7, #4]
 801ee7c:	7c5b      	ldrb	r3, [r3, #17]
 801ee7e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	7c9b      	ldrb	r3, [r3, #18]
 801ee84:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801ee86:	687b      	ldr	r3, [r7, #4]
 801ee88:	7cdb      	ldrb	r3, [r3, #19]
 801ee8a:	747b      	strb	r3, [r7, #17]
        break;
 801ee8c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801ee8e:	7dfb      	ldrb	r3, [r7, #23]
 801ee90:	b29a      	uxth	r2, r3
 801ee92:	f107 030c 	add.w	r3, r7, #12
 801ee96:	4619      	mov	r1, r3
 801ee98:	208c      	movs	r0, #140	; 0x8c
 801ee9a:	f000 f965 	bl	801f168 <SUBGRF_WriteCommand>
 801ee9e:	e000      	b.n	801eea2 <SUBGRF_SetPacketParams+0x12a>
        return;
 801eea0:	bf00      	nop
}
 801eea2:	3718      	adds	r7, #24
 801eea4:	46bd      	mov	sp, r7
 801eea6:	bd80      	pop	{r7, pc}
 801eea8:	08021824 	.word	0x08021824
 801eeac:	20002531 	.word	0x20002531
 801eeb0:	20002532 	.word	0x20002532

0801eeb4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801eeb4:	b580      	push	{r7, lr}
 801eeb6:	b084      	sub	sp, #16
 801eeb8:	af00      	add	r7, sp, #0
 801eeba:	4603      	mov	r3, r0
 801eebc:	460a      	mov	r2, r1
 801eebe:	71fb      	strb	r3, [r7, #7]
 801eec0:	4613      	mov	r3, r2
 801eec2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801eec4:	79fb      	ldrb	r3, [r7, #7]
 801eec6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801eec8:	79bb      	ldrb	r3, [r7, #6]
 801eeca:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801eecc:	f107 030c 	add.w	r3, r7, #12
 801eed0:	2202      	movs	r2, #2
 801eed2:	4619      	mov	r1, r3
 801eed4:	208f      	movs	r0, #143	; 0x8f
 801eed6:	f000 f947 	bl	801f168 <SUBGRF_WriteCommand>
}
 801eeda:	bf00      	nop
 801eedc:	3710      	adds	r7, #16
 801eede:	46bd      	mov	sp, r7
 801eee0:	bd80      	pop	{r7, pc}

0801eee2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801eee2:	b580      	push	{r7, lr}
 801eee4:	b082      	sub	sp, #8
 801eee6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801eee8:	2300      	movs	r3, #0
 801eeea:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801eeec:	1d3b      	adds	r3, r7, #4
 801eeee:	2201      	movs	r2, #1
 801eef0:	4619      	mov	r1, r3
 801eef2:	2015      	movs	r0, #21
 801eef4:	f000 f95a 	bl	801f1ac <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801eef8:	793b      	ldrb	r3, [r7, #4]
 801eefa:	425b      	negs	r3, r3
 801eefc:	105b      	asrs	r3, r3, #1
 801eefe:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801ef00:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801ef04:	4618      	mov	r0, r3
 801ef06:	3708      	adds	r7, #8
 801ef08:	46bd      	mov	sp, r7
 801ef0a:	bd80      	pop	{r7, pc}

0801ef0c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801ef0c:	b580      	push	{r7, lr}
 801ef0e:	b084      	sub	sp, #16
 801ef10:	af00      	add	r7, sp, #0
 801ef12:	6078      	str	r0, [r7, #4]
 801ef14:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801ef16:	f107 030c 	add.w	r3, r7, #12
 801ef1a:	2202      	movs	r2, #2
 801ef1c:	4619      	mov	r1, r3
 801ef1e:	2013      	movs	r0, #19
 801ef20:	f000 f944 	bl	801f1ac <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801ef24:	f7ff fd7e 	bl	801ea24 <SUBGRF_GetPacketType>
 801ef28:	4603      	mov	r3, r0
 801ef2a:	2b01      	cmp	r3, #1
 801ef2c:	d10d      	bne.n	801ef4a <SUBGRF_GetRxBufferStatus+0x3e>
 801ef2e:	4b0c      	ldr	r3, [pc, #48]	; (801ef60 <SUBGRF_GetRxBufferStatus+0x54>)
 801ef30:	781b      	ldrb	r3, [r3, #0]
 801ef32:	b2db      	uxtb	r3, r3
 801ef34:	2b01      	cmp	r3, #1
 801ef36:	d108      	bne.n	801ef4a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801ef38:	f240 7002 	movw	r0, #1794	; 0x702
 801ef3c:	f000 f878 	bl	801f030 <SUBGRF_ReadRegister>
 801ef40:	4603      	mov	r3, r0
 801ef42:	461a      	mov	r2, r3
 801ef44:	687b      	ldr	r3, [r7, #4]
 801ef46:	701a      	strb	r2, [r3, #0]
 801ef48:	e002      	b.n	801ef50 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801ef4a:	7b3a      	ldrb	r2, [r7, #12]
 801ef4c:	687b      	ldr	r3, [r7, #4]
 801ef4e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801ef50:	7b7a      	ldrb	r2, [r7, #13]
 801ef52:	683b      	ldr	r3, [r7, #0]
 801ef54:	701a      	strb	r2, [r3, #0]
}
 801ef56:	bf00      	nop
 801ef58:	3710      	adds	r7, #16
 801ef5a:	46bd      	mov	sp, r7
 801ef5c:	bd80      	pop	{r7, pc}
 801ef5e:	bf00      	nop
 801ef60:	20002532 	.word	0x20002532

0801ef64 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801ef64:	b580      	push	{r7, lr}
 801ef66:	b084      	sub	sp, #16
 801ef68:	af00      	add	r7, sp, #0
 801ef6a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801ef6c:	f107 030c 	add.w	r3, r7, #12
 801ef70:	2203      	movs	r2, #3
 801ef72:	4619      	mov	r1, r3
 801ef74:	2014      	movs	r0, #20
 801ef76:	f000 f919 	bl	801f1ac <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801ef7a:	f7ff fd53 	bl	801ea24 <SUBGRF_GetPacketType>
 801ef7e:	4603      	mov	r3, r0
 801ef80:	461a      	mov	r2, r3
 801ef82:	687b      	ldr	r3, [r7, #4]
 801ef84:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801ef86:	687b      	ldr	r3, [r7, #4]
 801ef88:	781b      	ldrb	r3, [r3, #0]
 801ef8a:	2b00      	cmp	r3, #0
 801ef8c:	d002      	beq.n	801ef94 <SUBGRF_GetPacketStatus+0x30>
 801ef8e:	2b01      	cmp	r3, #1
 801ef90:	d013      	beq.n	801efba <SUBGRF_GetPacketStatus+0x56>
 801ef92:	e02a      	b.n	801efea <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801ef94:	7b3a      	ldrb	r2, [r7, #12]
 801ef96:	687b      	ldr	r3, [r7, #4]
 801ef98:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801ef9a:	7b7b      	ldrb	r3, [r7, #13]
 801ef9c:	425b      	negs	r3, r3
 801ef9e:	105b      	asrs	r3, r3, #1
 801efa0:	b25a      	sxtb	r2, r3
 801efa2:	687b      	ldr	r3, [r7, #4]
 801efa4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801efa6:	7bbb      	ldrb	r3, [r7, #14]
 801efa8:	425b      	negs	r3, r3
 801efaa:	105b      	asrs	r3, r3, #1
 801efac:	b25a      	sxtb	r2, r3
 801efae:	687b      	ldr	r3, [r7, #4]
 801efb0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801efb2:	687b      	ldr	r3, [r7, #4]
 801efb4:	2200      	movs	r2, #0
 801efb6:	609a      	str	r2, [r3, #8]
            break;
 801efb8:	e020      	b.n	801effc <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801efba:	7b3b      	ldrb	r3, [r7, #12]
 801efbc:	425b      	negs	r3, r3
 801efbe:	105b      	asrs	r3, r3, #1
 801efc0:	b25a      	sxtb	r2, r3
 801efc2:	687b      	ldr	r3, [r7, #4]
 801efc4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801efc6:	7b7b      	ldrb	r3, [r7, #13]
 801efc8:	b25b      	sxtb	r3, r3
 801efca:	3302      	adds	r3, #2
 801efcc:	109b      	asrs	r3, r3, #2
 801efce:	b25a      	sxtb	r2, r3
 801efd0:	687b      	ldr	r3, [r7, #4]
 801efd2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801efd4:	7bbb      	ldrb	r3, [r7, #14]
 801efd6:	425b      	negs	r3, r3
 801efd8:	105b      	asrs	r3, r3, #1
 801efda:	b25a      	sxtb	r2, r3
 801efdc:	687b      	ldr	r3, [r7, #4]
 801efde:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801efe0:	4b08      	ldr	r3, [pc, #32]	; (801f004 <SUBGRF_GetPacketStatus+0xa0>)
 801efe2:	681a      	ldr	r2, [r3, #0]
 801efe4:	687b      	ldr	r3, [r7, #4]
 801efe6:	611a      	str	r2, [r3, #16]
            break;
 801efe8:	e008      	b.n	801effc <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801efea:	2214      	movs	r2, #20
 801efec:	2100      	movs	r1, #0
 801efee:	6878      	ldr	r0, [r7, #4]
 801eff0:	f000 fbf3 	bl	801f7da <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	220f      	movs	r2, #15
 801eff8:	701a      	strb	r2, [r3, #0]
            break;
 801effa:	bf00      	nop
    }
}
 801effc:	bf00      	nop
 801effe:	3710      	adds	r7, #16
 801f000:	46bd      	mov	sp, r7
 801f002:	bd80      	pop	{r7, pc}
 801f004:	20002534 	.word	0x20002534

0801f008 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801f008:	b580      	push	{r7, lr}
 801f00a:	b082      	sub	sp, #8
 801f00c:	af00      	add	r7, sp, #0
 801f00e:	4603      	mov	r3, r0
 801f010:	460a      	mov	r2, r1
 801f012:	80fb      	strh	r3, [r7, #6]
 801f014:	4613      	mov	r3, r2
 801f016:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801f018:	1d7a      	adds	r2, r7, #5
 801f01a:	88f9      	ldrh	r1, [r7, #6]
 801f01c:	2301      	movs	r3, #1
 801f01e:	4803      	ldr	r0, [pc, #12]	; (801f02c <SUBGRF_WriteRegister+0x24>)
 801f020:	f7eb f9ce 	bl	800a3c0 <HAL_SUBGHZ_WriteRegisters>
}
 801f024:	bf00      	nop
 801f026:	3708      	adds	r7, #8
 801f028:	46bd      	mov	sp, r7
 801f02a:	bd80      	pop	{r7, pc}
 801f02c:	200007ec 	.word	0x200007ec

0801f030 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801f030:	b580      	push	{r7, lr}
 801f032:	b084      	sub	sp, #16
 801f034:	af00      	add	r7, sp, #0
 801f036:	4603      	mov	r3, r0
 801f038:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801f03a:	f107 020f 	add.w	r2, r7, #15
 801f03e:	88f9      	ldrh	r1, [r7, #6]
 801f040:	2301      	movs	r3, #1
 801f042:	4804      	ldr	r0, [pc, #16]	; (801f054 <SUBGRF_ReadRegister+0x24>)
 801f044:	f7eb fa1b 	bl	800a47e <HAL_SUBGHZ_ReadRegisters>
    return data;
 801f048:	7bfb      	ldrb	r3, [r7, #15]
}
 801f04a:	4618      	mov	r0, r3
 801f04c:	3710      	adds	r7, #16
 801f04e:	46bd      	mov	sp, r7
 801f050:	bd80      	pop	{r7, pc}
 801f052:	bf00      	nop
 801f054:	200007ec 	.word	0x200007ec

0801f058 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801f058:	b580      	push	{r7, lr}
 801f05a:	b086      	sub	sp, #24
 801f05c:	af00      	add	r7, sp, #0
 801f05e:	4603      	mov	r3, r0
 801f060:	6039      	str	r1, [r7, #0]
 801f062:	80fb      	strh	r3, [r7, #6]
 801f064:	4613      	mov	r3, r2
 801f066:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f068:	f3ef 8310 	mrs	r3, PRIMASK
 801f06c:	60fb      	str	r3, [r7, #12]
  return(result);
 801f06e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801f070:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f072:	b672      	cpsid	i
}
 801f074:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801f076:	88bb      	ldrh	r3, [r7, #4]
 801f078:	88f9      	ldrh	r1, [r7, #6]
 801f07a:	683a      	ldr	r2, [r7, #0]
 801f07c:	4806      	ldr	r0, [pc, #24]	; (801f098 <SUBGRF_WriteRegisters+0x40>)
 801f07e:	f7eb f99f 	bl	800a3c0 <HAL_SUBGHZ_WriteRegisters>
 801f082:	697b      	ldr	r3, [r7, #20]
 801f084:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f086:	693b      	ldr	r3, [r7, #16]
 801f088:	f383 8810 	msr	PRIMASK, r3
}
 801f08c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801f08e:	bf00      	nop
 801f090:	3718      	adds	r7, #24
 801f092:	46bd      	mov	sp, r7
 801f094:	bd80      	pop	{r7, pc}
 801f096:	bf00      	nop
 801f098:	200007ec 	.word	0x200007ec

0801f09c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801f09c:	b580      	push	{r7, lr}
 801f09e:	b086      	sub	sp, #24
 801f0a0:	af00      	add	r7, sp, #0
 801f0a2:	4603      	mov	r3, r0
 801f0a4:	6039      	str	r1, [r7, #0]
 801f0a6:	80fb      	strh	r3, [r7, #6]
 801f0a8:	4613      	mov	r3, r2
 801f0aa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f0ac:	f3ef 8310 	mrs	r3, PRIMASK
 801f0b0:	60fb      	str	r3, [r7, #12]
  return(result);
 801f0b2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801f0b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f0b6:	b672      	cpsid	i
}
 801f0b8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801f0ba:	88bb      	ldrh	r3, [r7, #4]
 801f0bc:	88f9      	ldrh	r1, [r7, #6]
 801f0be:	683a      	ldr	r2, [r7, #0]
 801f0c0:	4806      	ldr	r0, [pc, #24]	; (801f0dc <SUBGRF_ReadRegisters+0x40>)
 801f0c2:	f7eb f9dc 	bl	800a47e <HAL_SUBGHZ_ReadRegisters>
 801f0c6:	697b      	ldr	r3, [r7, #20]
 801f0c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f0ca:	693b      	ldr	r3, [r7, #16]
 801f0cc:	f383 8810 	msr	PRIMASK, r3
}
 801f0d0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801f0d2:	bf00      	nop
 801f0d4:	3718      	adds	r7, #24
 801f0d6:	46bd      	mov	sp, r7
 801f0d8:	bd80      	pop	{r7, pc}
 801f0da:	bf00      	nop
 801f0dc:	200007ec 	.word	0x200007ec

0801f0e0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801f0e0:	b580      	push	{r7, lr}
 801f0e2:	b086      	sub	sp, #24
 801f0e4:	af00      	add	r7, sp, #0
 801f0e6:	4603      	mov	r3, r0
 801f0e8:	6039      	str	r1, [r7, #0]
 801f0ea:	71fb      	strb	r3, [r7, #7]
 801f0ec:	4613      	mov	r3, r2
 801f0ee:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f0f0:	f3ef 8310 	mrs	r3, PRIMASK
 801f0f4:	60fb      	str	r3, [r7, #12]
  return(result);
 801f0f6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801f0f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f0fa:	b672      	cpsid	i
}
 801f0fc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801f0fe:	79bb      	ldrb	r3, [r7, #6]
 801f100:	b29b      	uxth	r3, r3
 801f102:	79f9      	ldrb	r1, [r7, #7]
 801f104:	683a      	ldr	r2, [r7, #0]
 801f106:	4806      	ldr	r0, [pc, #24]	; (801f120 <SUBGRF_WriteBuffer+0x40>)
 801f108:	f7eb facd 	bl	800a6a6 <HAL_SUBGHZ_WriteBuffer>
 801f10c:	697b      	ldr	r3, [r7, #20]
 801f10e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f110:	693b      	ldr	r3, [r7, #16]
 801f112:	f383 8810 	msr	PRIMASK, r3
}
 801f116:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801f118:	bf00      	nop
 801f11a:	3718      	adds	r7, #24
 801f11c:	46bd      	mov	sp, r7
 801f11e:	bd80      	pop	{r7, pc}
 801f120:	200007ec 	.word	0x200007ec

0801f124 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801f124:	b580      	push	{r7, lr}
 801f126:	b086      	sub	sp, #24
 801f128:	af00      	add	r7, sp, #0
 801f12a:	4603      	mov	r3, r0
 801f12c:	6039      	str	r1, [r7, #0]
 801f12e:	71fb      	strb	r3, [r7, #7]
 801f130:	4613      	mov	r3, r2
 801f132:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f134:	f3ef 8310 	mrs	r3, PRIMASK
 801f138:	60fb      	str	r3, [r7, #12]
  return(result);
 801f13a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801f13c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f13e:	b672      	cpsid	i
}
 801f140:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801f142:	79bb      	ldrb	r3, [r7, #6]
 801f144:	b29b      	uxth	r3, r3
 801f146:	79f9      	ldrb	r1, [r7, #7]
 801f148:	683a      	ldr	r2, [r7, #0]
 801f14a:	4806      	ldr	r0, [pc, #24]	; (801f164 <SUBGRF_ReadBuffer+0x40>)
 801f14c:	f7eb fafe 	bl	800a74c <HAL_SUBGHZ_ReadBuffer>
 801f150:	697b      	ldr	r3, [r7, #20]
 801f152:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f154:	693b      	ldr	r3, [r7, #16]
 801f156:	f383 8810 	msr	PRIMASK, r3
}
 801f15a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801f15c:	bf00      	nop
 801f15e:	3718      	adds	r7, #24
 801f160:	46bd      	mov	sp, r7
 801f162:	bd80      	pop	{r7, pc}
 801f164:	200007ec 	.word	0x200007ec

0801f168 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801f168:	b580      	push	{r7, lr}
 801f16a:	b086      	sub	sp, #24
 801f16c:	af00      	add	r7, sp, #0
 801f16e:	4603      	mov	r3, r0
 801f170:	6039      	str	r1, [r7, #0]
 801f172:	71fb      	strb	r3, [r7, #7]
 801f174:	4613      	mov	r3, r2
 801f176:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f178:	f3ef 8310 	mrs	r3, PRIMASK
 801f17c:	60fb      	str	r3, [r7, #12]
  return(result);
 801f17e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801f180:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f182:	b672      	cpsid	i
}
 801f184:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801f186:	88bb      	ldrh	r3, [r7, #4]
 801f188:	79f9      	ldrb	r1, [r7, #7]
 801f18a:	683a      	ldr	r2, [r7, #0]
 801f18c:	4806      	ldr	r0, [pc, #24]	; (801f1a8 <SUBGRF_WriteCommand+0x40>)
 801f18e:	f7eb f9d7 	bl	800a540 <HAL_SUBGHZ_ExecSetCmd>
 801f192:	697b      	ldr	r3, [r7, #20]
 801f194:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f196:	693b      	ldr	r3, [r7, #16]
 801f198:	f383 8810 	msr	PRIMASK, r3
}
 801f19c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801f19e:	bf00      	nop
 801f1a0:	3718      	adds	r7, #24
 801f1a2:	46bd      	mov	sp, r7
 801f1a4:	bd80      	pop	{r7, pc}
 801f1a6:	bf00      	nop
 801f1a8:	200007ec 	.word	0x200007ec

0801f1ac <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801f1ac:	b580      	push	{r7, lr}
 801f1ae:	b086      	sub	sp, #24
 801f1b0:	af00      	add	r7, sp, #0
 801f1b2:	4603      	mov	r3, r0
 801f1b4:	6039      	str	r1, [r7, #0]
 801f1b6:	71fb      	strb	r3, [r7, #7]
 801f1b8:	4613      	mov	r3, r2
 801f1ba:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f1bc:	f3ef 8310 	mrs	r3, PRIMASK
 801f1c0:	60fb      	str	r3, [r7, #12]
  return(result);
 801f1c2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801f1c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f1c6:	b672      	cpsid	i
}
 801f1c8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801f1ca:	88bb      	ldrh	r3, [r7, #4]
 801f1cc:	79f9      	ldrb	r1, [r7, #7]
 801f1ce:	683a      	ldr	r2, [r7, #0]
 801f1d0:	4806      	ldr	r0, [pc, #24]	; (801f1ec <SUBGRF_ReadCommand+0x40>)
 801f1d2:	f7eb fa14 	bl	800a5fe <HAL_SUBGHZ_ExecGetCmd>
 801f1d6:	697b      	ldr	r3, [r7, #20]
 801f1d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1da:	693b      	ldr	r3, [r7, #16]
 801f1dc:	f383 8810 	msr	PRIMASK, r3
}
 801f1e0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801f1e2:	bf00      	nop
 801f1e4:	3718      	adds	r7, #24
 801f1e6:	46bd      	mov	sp, r7
 801f1e8:	bd80      	pop	{r7, pc}
 801f1ea:	bf00      	nop
 801f1ec:	200007ec 	.word	0x200007ec

0801f1f0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801f1f0:	b580      	push	{r7, lr}
 801f1f2:	b084      	sub	sp, #16
 801f1f4:	af00      	add	r7, sp, #0
 801f1f6:	4603      	mov	r3, r0
 801f1f8:	460a      	mov	r2, r1
 801f1fa:	71fb      	strb	r3, [r7, #7]
 801f1fc:	4613      	mov	r3, r2
 801f1fe:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801f200:	2301      	movs	r3, #1
 801f202:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801f204:	79bb      	ldrb	r3, [r7, #6]
 801f206:	2b01      	cmp	r3, #1
 801f208:	d10d      	bne.n	801f226 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801f20a:	79fb      	ldrb	r3, [r7, #7]
 801f20c:	2b01      	cmp	r3, #1
 801f20e:	d104      	bne.n	801f21a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801f210:	2302      	movs	r3, #2
 801f212:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801f214:	2004      	movs	r0, #4
 801f216:	f000 f8df 	bl	801f3d8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801f21a:	79fb      	ldrb	r3, [r7, #7]
 801f21c:	2b02      	cmp	r3, #2
 801f21e:	d107      	bne.n	801f230 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801f220:	2303      	movs	r3, #3
 801f222:	73fb      	strb	r3, [r7, #15]
 801f224:	e004      	b.n	801f230 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801f226:	79bb      	ldrb	r3, [r7, #6]
 801f228:	2b00      	cmp	r3, #0
 801f22a:	d101      	bne.n	801f230 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801f22c:	2301      	movs	r3, #1
 801f22e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801f230:	7bfb      	ldrb	r3, [r7, #15]
 801f232:	4618      	mov	r0, r3
 801f234:	f7ef f8b7 	bl	800e3a6 <RBI_ConfigRFSwitch>
}
 801f238:	bf00      	nop
 801f23a:	3710      	adds	r7, #16
 801f23c:	46bd      	mov	sp, r7
 801f23e:	bd80      	pop	{r7, pc}

0801f240 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801f240:	b580      	push	{r7, lr}
 801f242:	b084      	sub	sp, #16
 801f244:	af00      	add	r7, sp, #0
 801f246:	4603      	mov	r3, r0
 801f248:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801f24a:	2301      	movs	r3, #1
 801f24c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801f24e:	f7ef f8b8 	bl	800e3c2 <RBI_GetTxConfig>
 801f252:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801f254:	68bb      	ldr	r3, [r7, #8]
 801f256:	2b02      	cmp	r3, #2
 801f258:	d016      	beq.n	801f288 <SUBGRF_SetRfTxPower+0x48>
 801f25a:	68bb      	ldr	r3, [r7, #8]
 801f25c:	2b02      	cmp	r3, #2
 801f25e:	dc16      	bgt.n	801f28e <SUBGRF_SetRfTxPower+0x4e>
 801f260:	68bb      	ldr	r3, [r7, #8]
 801f262:	2b00      	cmp	r3, #0
 801f264:	d003      	beq.n	801f26e <SUBGRF_SetRfTxPower+0x2e>
 801f266:	68bb      	ldr	r3, [r7, #8]
 801f268:	2b01      	cmp	r3, #1
 801f26a:	d00a      	beq.n	801f282 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801f26c:	e00f      	b.n	801f28e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801f26e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f272:	2b0f      	cmp	r3, #15
 801f274:	dd02      	ble.n	801f27c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801f276:	2302      	movs	r3, #2
 801f278:	73fb      	strb	r3, [r7, #15]
            break;
 801f27a:	e009      	b.n	801f290 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801f27c:	2301      	movs	r3, #1
 801f27e:	73fb      	strb	r3, [r7, #15]
            break;
 801f280:	e006      	b.n	801f290 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801f282:	2301      	movs	r3, #1
 801f284:	73fb      	strb	r3, [r7, #15]
            break;
 801f286:	e003      	b.n	801f290 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801f288:	2302      	movs	r3, #2
 801f28a:	73fb      	strb	r3, [r7, #15]
            break;
 801f28c:	e000      	b.n	801f290 <SUBGRF_SetRfTxPower+0x50>
            break;
 801f28e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801f290:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801f294:	7bfb      	ldrb	r3, [r7, #15]
 801f296:	2202      	movs	r2, #2
 801f298:	4618      	mov	r0, r3
 801f29a:	f7ff fbcd 	bl	801ea38 <SUBGRF_SetTxParams>

    return paSelect;
 801f29e:	7bfb      	ldrb	r3, [r7, #15]
}
 801f2a0:	4618      	mov	r0, r3
 801f2a2:	3710      	adds	r7, #16
 801f2a4:	46bd      	mov	sp, r7
 801f2a6:	bd80      	pop	{r7, pc}

0801f2a8 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801f2a8:	b480      	push	{r7}
 801f2aa:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801f2ac:	2301      	movs	r3, #1
}
 801f2ae:	4618      	mov	r0, r3
 801f2b0:	46bd      	mov	sp, r7
 801f2b2:	bc80      	pop	{r7}
 801f2b4:	4770      	bx	lr
	...

0801f2b8 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801f2b8:	b580      	push	{r7, lr}
 801f2ba:	b082      	sub	sp, #8
 801f2bc:	af00      	add	r7, sp, #0
 801f2be:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801f2c0:	4b03      	ldr	r3, [pc, #12]	; (801f2d0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801f2c2:	681b      	ldr	r3, [r3, #0]
 801f2c4:	2001      	movs	r0, #1
 801f2c6:	4798      	blx	r3
}
 801f2c8:	bf00      	nop
 801f2ca:	3708      	adds	r7, #8
 801f2cc:	46bd      	mov	sp, r7
 801f2ce:	bd80      	pop	{r7, pc}
 801f2d0:	2000253c 	.word	0x2000253c

0801f2d4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801f2d4:	b580      	push	{r7, lr}
 801f2d6:	b082      	sub	sp, #8
 801f2d8:	af00      	add	r7, sp, #0
 801f2da:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801f2dc:	4b03      	ldr	r3, [pc, #12]	; (801f2ec <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801f2de:	681b      	ldr	r3, [r3, #0]
 801f2e0:	2002      	movs	r0, #2
 801f2e2:	4798      	blx	r3
}
 801f2e4:	bf00      	nop
 801f2e6:	3708      	adds	r7, #8
 801f2e8:	46bd      	mov	sp, r7
 801f2ea:	bd80      	pop	{r7, pc}
 801f2ec:	2000253c 	.word	0x2000253c

0801f2f0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801f2f0:	b580      	push	{r7, lr}
 801f2f2:	b082      	sub	sp, #8
 801f2f4:	af00      	add	r7, sp, #0
 801f2f6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801f2f8:	4b03      	ldr	r3, [pc, #12]	; (801f308 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801f2fa:	681b      	ldr	r3, [r3, #0]
 801f2fc:	2040      	movs	r0, #64	; 0x40
 801f2fe:	4798      	blx	r3
}
 801f300:	bf00      	nop
 801f302:	3708      	adds	r7, #8
 801f304:	46bd      	mov	sp, r7
 801f306:	bd80      	pop	{r7, pc}
 801f308:	2000253c 	.word	0x2000253c

0801f30c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801f30c:	b580      	push	{r7, lr}
 801f30e:	b082      	sub	sp, #8
 801f310:	af00      	add	r7, sp, #0
 801f312:	6078      	str	r0, [r7, #4]
 801f314:	460b      	mov	r3, r1
 801f316:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801f318:	78fb      	ldrb	r3, [r7, #3]
 801f31a:	2b00      	cmp	r3, #0
 801f31c:	d002      	beq.n	801f324 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801f31e:	2b01      	cmp	r3, #1
 801f320:	d005      	beq.n	801f32e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801f322:	e00a      	b.n	801f33a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801f324:	4b07      	ldr	r3, [pc, #28]	; (801f344 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801f326:	681b      	ldr	r3, [r3, #0]
 801f328:	2080      	movs	r0, #128	; 0x80
 801f32a:	4798      	blx	r3
            break;
 801f32c:	e005      	b.n	801f33a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801f32e:	4b05      	ldr	r3, [pc, #20]	; (801f344 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801f330:	681b      	ldr	r3, [r3, #0]
 801f332:	f44f 7080 	mov.w	r0, #256	; 0x100
 801f336:	4798      	blx	r3
            break;
 801f338:	bf00      	nop
    }
}
 801f33a:	bf00      	nop
 801f33c:	3708      	adds	r7, #8
 801f33e:	46bd      	mov	sp, r7
 801f340:	bd80      	pop	{r7, pc}
 801f342:	bf00      	nop
 801f344:	2000253c 	.word	0x2000253c

0801f348 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801f348:	b580      	push	{r7, lr}
 801f34a:	b082      	sub	sp, #8
 801f34c:	af00      	add	r7, sp, #0
 801f34e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801f350:	4b04      	ldr	r3, [pc, #16]	; (801f364 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801f352:	681b      	ldr	r3, [r3, #0]
 801f354:	f44f 7000 	mov.w	r0, #512	; 0x200
 801f358:	4798      	blx	r3
}
 801f35a:	bf00      	nop
 801f35c:	3708      	adds	r7, #8
 801f35e:	46bd      	mov	sp, r7
 801f360:	bd80      	pop	{r7, pc}
 801f362:	bf00      	nop
 801f364:	2000253c 	.word	0x2000253c

0801f368 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801f368:	b580      	push	{r7, lr}
 801f36a:	b082      	sub	sp, #8
 801f36c:	af00      	add	r7, sp, #0
 801f36e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801f370:	4b03      	ldr	r3, [pc, #12]	; (801f380 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801f372:	681b      	ldr	r3, [r3, #0]
 801f374:	2020      	movs	r0, #32
 801f376:	4798      	blx	r3
}
 801f378:	bf00      	nop
 801f37a:	3708      	adds	r7, #8
 801f37c:	46bd      	mov	sp, r7
 801f37e:	bd80      	pop	{r7, pc}
 801f380:	2000253c 	.word	0x2000253c

0801f384 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801f384:	b580      	push	{r7, lr}
 801f386:	b082      	sub	sp, #8
 801f388:	af00      	add	r7, sp, #0
 801f38a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801f38c:	4b03      	ldr	r3, [pc, #12]	; (801f39c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801f38e:	681b      	ldr	r3, [r3, #0]
 801f390:	2004      	movs	r0, #4
 801f392:	4798      	blx	r3
}
 801f394:	bf00      	nop
 801f396:	3708      	adds	r7, #8
 801f398:	46bd      	mov	sp, r7
 801f39a:	bd80      	pop	{r7, pc}
 801f39c:	2000253c 	.word	0x2000253c

0801f3a0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801f3a0:	b580      	push	{r7, lr}
 801f3a2:	b082      	sub	sp, #8
 801f3a4:	af00      	add	r7, sp, #0
 801f3a6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801f3a8:	4b03      	ldr	r3, [pc, #12]	; (801f3b8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801f3aa:	681b      	ldr	r3, [r3, #0]
 801f3ac:	2008      	movs	r0, #8
 801f3ae:	4798      	blx	r3
}
 801f3b0:	bf00      	nop
 801f3b2:	3708      	adds	r7, #8
 801f3b4:	46bd      	mov	sp, r7
 801f3b6:	bd80      	pop	{r7, pc}
 801f3b8:	2000253c 	.word	0x2000253c

0801f3bc <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801f3bc:	b580      	push	{r7, lr}
 801f3be:	b082      	sub	sp, #8
 801f3c0:	af00      	add	r7, sp, #0
 801f3c2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801f3c4:	4b03      	ldr	r3, [pc, #12]	; (801f3d4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801f3c6:	681b      	ldr	r3, [r3, #0]
 801f3c8:	2010      	movs	r0, #16
 801f3ca:	4798      	blx	r3
}
 801f3cc:	bf00      	nop
 801f3ce:	3708      	adds	r7, #8
 801f3d0:	46bd      	mov	sp, r7
 801f3d2:	bd80      	pop	{r7, pc}
 801f3d4:	2000253c 	.word	0x2000253c

0801f3d8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801f3d8:	b580      	push	{r7, lr}
 801f3da:	b084      	sub	sp, #16
 801f3dc:	af00      	add	r7, sp, #0
 801f3de:	4603      	mov	r3, r0
 801f3e0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801f3e2:	f7ee fffc 	bl	800e3de <RBI_IsDCDC>
 801f3e6:	4603      	mov	r3, r0
 801f3e8:	2b01      	cmp	r3, #1
 801f3ea:	d112      	bne.n	801f412 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801f3ec:	f640 1023 	movw	r0, #2339	; 0x923
 801f3f0:	f7ff fe1e 	bl	801f030 <SUBGRF_ReadRegister>
 801f3f4:	4603      	mov	r3, r0
 801f3f6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801f3f8:	7bfb      	ldrb	r3, [r7, #15]
 801f3fa:	f023 0306 	bic.w	r3, r3, #6
 801f3fe:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801f400:	7bfa      	ldrb	r2, [r7, #15]
 801f402:	79fb      	ldrb	r3, [r7, #7]
 801f404:	4313      	orrs	r3, r2
 801f406:	b2db      	uxtb	r3, r3
 801f408:	4619      	mov	r1, r3
 801f40a:	f640 1023 	movw	r0, #2339	; 0x923
 801f40e:	f7ff fdfb 	bl	801f008 <SUBGRF_WriteRegister>
  }
}
 801f412:	bf00      	nop
 801f414:	3710      	adds	r7, #16
 801f416:	46bd      	mov	sp, r7
 801f418:	bd80      	pop	{r7, pc}
	...

0801f41c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801f41c:	b480      	push	{r7}
 801f41e:	b085      	sub	sp, #20
 801f420:	af00      	add	r7, sp, #0
 801f422:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801f424:	687b      	ldr	r3, [r7, #4]
 801f426:	2b00      	cmp	r3, #0
 801f428:	d101      	bne.n	801f42e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801f42a:	231f      	movs	r3, #31
 801f42c:	e016      	b.n	801f45c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801f42e:	2300      	movs	r3, #0
 801f430:	73fb      	strb	r3, [r7, #15]
 801f432:	e00f      	b.n	801f454 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801f434:	7bfb      	ldrb	r3, [r7, #15]
 801f436:	4a0c      	ldr	r2, [pc, #48]	; (801f468 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801f438:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801f43c:	687a      	ldr	r2, [r7, #4]
 801f43e:	429a      	cmp	r2, r3
 801f440:	d205      	bcs.n	801f44e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801f442:	7bfb      	ldrb	r3, [r7, #15]
 801f444:	4a08      	ldr	r2, [pc, #32]	; (801f468 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801f446:	00db      	lsls	r3, r3, #3
 801f448:	4413      	add	r3, r2
 801f44a:	791b      	ldrb	r3, [r3, #4]
 801f44c:	e006      	b.n	801f45c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801f44e:	7bfb      	ldrb	r3, [r7, #15]
 801f450:	3301      	adds	r3, #1
 801f452:	73fb      	strb	r3, [r7, #15]
 801f454:	7bfb      	ldrb	r3, [r7, #15]
 801f456:	2b15      	cmp	r3, #21
 801f458:	d9ec      	bls.n	801f434 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801f45a:	e7fe      	b.n	801f45a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801f45c:	4618      	mov	r0, r3
 801f45e:	3714      	adds	r7, #20
 801f460:	46bd      	mov	sp, r7
 801f462:	bc80      	pop	{r7}
 801f464:	4770      	bx	lr
 801f466:	bf00      	nop
 801f468:	08021d88 	.word	0x08021d88

0801f46c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801f46c:	b580      	push	{r7, lr}
 801f46e:	b08a      	sub	sp, #40	; 0x28
 801f470:	af00      	add	r7, sp, #0
 801f472:	6078      	str	r0, [r7, #4]
 801f474:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801f476:	4b35      	ldr	r3, [pc, #212]	; (801f54c <SUBGRF_GetCFO+0xe0>)
 801f478:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801f47a:	f640 0007 	movw	r0, #2055	; 0x807
 801f47e:	f7ff fdd7 	bl	801f030 <SUBGRF_ReadRegister>
 801f482:	4603      	mov	r3, r0
 801f484:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801f486:	7ffb      	ldrb	r3, [r7, #31]
 801f488:	08db      	lsrs	r3, r3, #3
 801f48a:	b2db      	uxtb	r3, r3
 801f48c:	f003 0303 	and.w	r3, r3, #3
 801f490:	3328      	adds	r3, #40	; 0x28
 801f492:	443b      	add	r3, r7
 801f494:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801f498:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801f49a:	7ffb      	ldrb	r3, [r7, #31]
 801f49c:	f003 0307 	and.w	r3, r3, #7
 801f4a0:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801f4a2:	7fba      	ldrb	r2, [r7, #30]
 801f4a4:	7f7b      	ldrb	r3, [r7, #29]
 801f4a6:	3b01      	subs	r3, #1
 801f4a8:	fa02 f303 	lsl.w	r3, r2, r3
 801f4ac:	461a      	mov	r2, r3
 801f4ae:	4b28      	ldr	r3, [pc, #160]	; (801f550 <SUBGRF_GetCFO+0xe4>)
 801f4b0:	fbb3 f3f2 	udiv	r3, r3, r2
 801f4b4:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801f4b6:	69ba      	ldr	r2, [r7, #24]
 801f4b8:	687b      	ldr	r3, [r7, #4]
 801f4ba:	fbb2 f3f3 	udiv	r3, r2, r3
 801f4be:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801f4c0:	2301      	movs	r3, #1
 801f4c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801f4c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f4ca:	697a      	ldr	r2, [r7, #20]
 801f4cc:	fb02 f303 	mul.w	r3, r2, r3
 801f4d0:	2b07      	cmp	r3, #7
 801f4d2:	d802      	bhi.n	801f4da <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801f4d4:	2302      	movs	r3, #2
 801f4d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801f4da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f4de:	697a      	ldr	r2, [r7, #20]
 801f4e0:	fb02 f303 	mul.w	r3, r2, r3
 801f4e4:	2b03      	cmp	r3, #3
 801f4e6:	d802      	bhi.n	801f4ee <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801f4e8:	2304      	movs	r3, #4
 801f4ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801f4ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801f4f2:	69bb      	ldr	r3, [r7, #24]
 801f4f4:	fb02 f303 	mul.w	r3, r2, r3
 801f4f8:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801f4fa:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801f4fe:	f7ff fd97 	bl	801f030 <SUBGRF_ReadRegister>
 801f502:	4603      	mov	r3, r0
 801f504:	021b      	lsls	r3, r3, #8
 801f506:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801f50a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801f50c:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801f510:	f7ff fd8e 	bl	801f030 <SUBGRF_ReadRegister>
 801f514:	4603      	mov	r3, r0
 801f516:	461a      	mov	r2, r3
 801f518:	6a3b      	ldr	r3, [r7, #32]
 801f51a:	4313      	orrs	r3, r2
 801f51c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801f51e:	6a3b      	ldr	r3, [r7, #32]
 801f520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f524:	2b00      	cmp	r3, #0
 801f526:	d005      	beq.n	801f534 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801f528:	6a3b      	ldr	r3, [r7, #32]
 801f52a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801f52e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801f532:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801f534:	693b      	ldr	r3, [r7, #16]
 801f536:	095b      	lsrs	r3, r3, #5
 801f538:	6a3a      	ldr	r2, [r7, #32]
 801f53a:	fb02 f303 	mul.w	r3, r2, r3
 801f53e:	11da      	asrs	r2, r3, #7
 801f540:	683b      	ldr	r3, [r7, #0]
 801f542:	601a      	str	r2, [r3, #0]
}
 801f544:	bf00      	nop
 801f546:	3728      	adds	r7, #40	; 0x28
 801f548:	46bd      	mov	sp, r7
 801f54a:	bd80      	pop	{r7, pc}
 801f54c:	0c0a0804 	.word	0x0c0a0804
 801f550:	01e84800 	.word	0x01e84800

0801f554 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801f554:	b480      	push	{r7}
 801f556:	b087      	sub	sp, #28
 801f558:	af00      	add	r7, sp, #0
 801f55a:	4603      	mov	r3, r0
 801f55c:	60b9      	str	r1, [r7, #8]
 801f55e:	607a      	str	r2, [r7, #4]
 801f560:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801f562:	2300      	movs	r3, #0
 801f564:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801f566:	f04f 33ff 	mov.w	r3, #4294967295
 801f56a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801f56c:	697b      	ldr	r3, [r7, #20]
}
 801f56e:	4618      	mov	r0, r3
 801f570:	371c      	adds	r7, #28
 801f572:	46bd      	mov	sp, r7
 801f574:	bc80      	pop	{r7}
 801f576:	4770      	bx	lr

0801f578 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801f578:	b480      	push	{r7}
 801f57a:	b087      	sub	sp, #28
 801f57c:	af00      	add	r7, sp, #0
 801f57e:	4603      	mov	r3, r0
 801f580:	60b9      	str	r1, [r7, #8]
 801f582:	607a      	str	r2, [r7, #4]
 801f584:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801f586:	2300      	movs	r3, #0
 801f588:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801f58a:	f04f 33ff 	mov.w	r3, #4294967295
 801f58e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801f590:	697b      	ldr	r3, [r7, #20]
}
 801f592:	4618      	mov	r0, r3
 801f594:	371c      	adds	r7, #28
 801f596:	46bd      	mov	sp, r7
 801f598:	bc80      	pop	{r7}
 801f59a:	4770      	bx	lr

0801f59c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801f59c:	b480      	push	{r7}
 801f59e:	b085      	sub	sp, #20
 801f5a0:	af00      	add	r7, sp, #0
 801f5a2:	60f8      	str	r0, [r7, #12]
 801f5a4:	60b9      	str	r1, [r7, #8]
 801f5a6:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801f5a8:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801f5ac:	4618      	mov	r0, r3
 801f5ae:	3714      	adds	r7, #20
 801f5b0:	46bd      	mov	sp, r7
 801f5b2:	bc80      	pop	{r7}
 801f5b4:	4770      	bx	lr

0801f5b6 <RFW_DeInit>:

void RFW_DeInit( void)
{
 801f5b6:	b480      	push	{r7}
 801f5b8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801f5ba:	bf00      	nop
 801f5bc:	46bd      	mov	sp, r7
 801f5be:	bc80      	pop	{r7}
 801f5c0:	4770      	bx	lr

0801f5c2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801f5c2:	b480      	push	{r7}
 801f5c4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801f5c6:	2300      	movs	r3, #0
#endif
}
 801f5c8:	4618      	mov	r0, r3
 801f5ca:	46bd      	mov	sp, r7
 801f5cc:	bc80      	pop	{r7}
 801f5ce:	4770      	bx	lr

0801f5d0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801f5d0:	b480      	push	{r7}
 801f5d2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801f5d4:	2300      	movs	r3, #0
#endif
}
 801f5d6:	4618      	mov	r0, r3
 801f5d8:	46bd      	mov	sp, r7
 801f5da:	bc80      	pop	{r7}
 801f5dc:	4770      	bx	lr

0801f5de <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801f5de:	b480      	push	{r7}
 801f5e0:	b083      	sub	sp, #12
 801f5e2:	af00      	add	r7, sp, #0
 801f5e4:	4603      	mov	r3, r0
 801f5e6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801f5e8:	bf00      	nop
 801f5ea:	370c      	adds	r7, #12
 801f5ec:	46bd      	mov	sp, r7
 801f5ee:	bc80      	pop	{r7}
 801f5f0:	4770      	bx	lr

0801f5f2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801f5f2:	b480      	push	{r7}
 801f5f4:	b087      	sub	sp, #28
 801f5f6:	af00      	add	r7, sp, #0
 801f5f8:	60f8      	str	r0, [r7, #12]
 801f5fa:	460b      	mov	r3, r1
 801f5fc:	607a      	str	r2, [r7, #4]
 801f5fe:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801f600:	f04f 33ff 	mov.w	r3, #4294967295
 801f604:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801f606:	697b      	ldr	r3, [r7, #20]
}
 801f608:	4618      	mov	r0, r3
 801f60a:	371c      	adds	r7, #28
 801f60c:	46bd      	mov	sp, r7
 801f60e:	bc80      	pop	{r7}
 801f610:	4770      	bx	lr

0801f612 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801f612:	b480      	push	{r7}
 801f614:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801f616:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801f61a:	4618      	mov	r0, r3
 801f61c:	46bd      	mov	sp, r7
 801f61e:	bc80      	pop	{r7}
 801f620:	4770      	bx	lr

0801f622 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801f622:	b480      	push	{r7}
 801f624:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801f626:	bf00      	nop
 801f628:	46bd      	mov	sp, r7
 801f62a:	bc80      	pop	{r7}
 801f62c:	4770      	bx	lr

0801f62e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801f62e:	b480      	push	{r7}
 801f630:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801f632:	bf00      	nop
 801f634:	46bd      	mov	sp, r7
 801f636:	bc80      	pop	{r7}
 801f638:	4770      	bx	lr

0801f63a <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801f63a:	b480      	push	{r7}
 801f63c:	b083      	sub	sp, #12
 801f63e:	af00      	add	r7, sp, #0
 801f640:	4603      	mov	r3, r0
 801f642:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801f644:	bf00      	nop
 801f646:	370c      	adds	r7, #12
 801f648:	46bd      	mov	sp, r7
 801f64a:	bc80      	pop	{r7}
 801f64c:	4770      	bx	lr
	...

0801f650 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801f650:	b480      	push	{r7}
 801f652:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801f654:	4b04      	ldr	r3, [pc, #16]	; (801f668 <UTIL_LPM_Init+0x18>)
 801f656:	2200      	movs	r2, #0
 801f658:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801f65a:	4b04      	ldr	r3, [pc, #16]	; (801f66c <UTIL_LPM_Init+0x1c>)
 801f65c:	2200      	movs	r2, #0
 801f65e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801f660:	bf00      	nop
 801f662:	46bd      	mov	sp, r7
 801f664:	bc80      	pop	{r7}
 801f666:	4770      	bx	lr
 801f668:	20002540 	.word	0x20002540
 801f66c:	20002544 	.word	0x20002544

0801f670 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801f670:	b480      	push	{r7}
 801f672:	b087      	sub	sp, #28
 801f674:	af00      	add	r7, sp, #0
 801f676:	6078      	str	r0, [r7, #4]
 801f678:	460b      	mov	r3, r1
 801f67a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f67c:	f3ef 8310 	mrs	r3, PRIMASK
 801f680:	613b      	str	r3, [r7, #16]
  return(result);
 801f682:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801f684:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f686:	b672      	cpsid	i
}
 801f688:	bf00      	nop
  
  switch( state )
 801f68a:	78fb      	ldrb	r3, [r7, #3]
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	d008      	beq.n	801f6a2 <UTIL_LPM_SetStopMode+0x32>
 801f690:	2b01      	cmp	r3, #1
 801f692:	d10e      	bne.n	801f6b2 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801f694:	4b0d      	ldr	r3, [pc, #52]	; (801f6cc <UTIL_LPM_SetStopMode+0x5c>)
 801f696:	681a      	ldr	r2, [r3, #0]
 801f698:	687b      	ldr	r3, [r7, #4]
 801f69a:	4313      	orrs	r3, r2
 801f69c:	4a0b      	ldr	r2, [pc, #44]	; (801f6cc <UTIL_LPM_SetStopMode+0x5c>)
 801f69e:	6013      	str	r3, [r2, #0]
      break;
 801f6a0:	e008      	b.n	801f6b4 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801f6a2:	687b      	ldr	r3, [r7, #4]
 801f6a4:	43da      	mvns	r2, r3
 801f6a6:	4b09      	ldr	r3, [pc, #36]	; (801f6cc <UTIL_LPM_SetStopMode+0x5c>)
 801f6a8:	681b      	ldr	r3, [r3, #0]
 801f6aa:	4013      	ands	r3, r2
 801f6ac:	4a07      	ldr	r2, [pc, #28]	; (801f6cc <UTIL_LPM_SetStopMode+0x5c>)
 801f6ae:	6013      	str	r3, [r2, #0]
      break;
 801f6b0:	e000      	b.n	801f6b4 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801f6b2:	bf00      	nop
 801f6b4:	697b      	ldr	r3, [r7, #20]
 801f6b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f6b8:	68fb      	ldr	r3, [r7, #12]
 801f6ba:	f383 8810 	msr	PRIMASK, r3
}
 801f6be:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801f6c0:	bf00      	nop
 801f6c2:	371c      	adds	r7, #28
 801f6c4:	46bd      	mov	sp, r7
 801f6c6:	bc80      	pop	{r7}
 801f6c8:	4770      	bx	lr
 801f6ca:	bf00      	nop
 801f6cc:	20002540 	.word	0x20002540

0801f6d0 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801f6d0:	b480      	push	{r7}
 801f6d2:	b087      	sub	sp, #28
 801f6d4:	af00      	add	r7, sp, #0
 801f6d6:	6078      	str	r0, [r7, #4]
 801f6d8:	460b      	mov	r3, r1
 801f6da:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f6dc:	f3ef 8310 	mrs	r3, PRIMASK
 801f6e0:	613b      	str	r3, [r7, #16]
  return(result);
 801f6e2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801f6e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f6e6:	b672      	cpsid	i
}
 801f6e8:	bf00      	nop
  
  switch(state)
 801f6ea:	78fb      	ldrb	r3, [r7, #3]
 801f6ec:	2b00      	cmp	r3, #0
 801f6ee:	d008      	beq.n	801f702 <UTIL_LPM_SetOffMode+0x32>
 801f6f0:	2b01      	cmp	r3, #1
 801f6f2:	d10e      	bne.n	801f712 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801f6f4:	4b0d      	ldr	r3, [pc, #52]	; (801f72c <UTIL_LPM_SetOffMode+0x5c>)
 801f6f6:	681a      	ldr	r2, [r3, #0]
 801f6f8:	687b      	ldr	r3, [r7, #4]
 801f6fa:	4313      	orrs	r3, r2
 801f6fc:	4a0b      	ldr	r2, [pc, #44]	; (801f72c <UTIL_LPM_SetOffMode+0x5c>)
 801f6fe:	6013      	str	r3, [r2, #0]
      break;
 801f700:	e008      	b.n	801f714 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801f702:	687b      	ldr	r3, [r7, #4]
 801f704:	43da      	mvns	r2, r3
 801f706:	4b09      	ldr	r3, [pc, #36]	; (801f72c <UTIL_LPM_SetOffMode+0x5c>)
 801f708:	681b      	ldr	r3, [r3, #0]
 801f70a:	4013      	ands	r3, r2
 801f70c:	4a07      	ldr	r2, [pc, #28]	; (801f72c <UTIL_LPM_SetOffMode+0x5c>)
 801f70e:	6013      	str	r3, [r2, #0]
      break;
 801f710:	e000      	b.n	801f714 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801f712:	bf00      	nop
 801f714:	697b      	ldr	r3, [r7, #20]
 801f716:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f718:	68fb      	ldr	r3, [r7, #12]
 801f71a:	f383 8810 	msr	PRIMASK, r3
}
 801f71e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801f720:	bf00      	nop
 801f722:	371c      	adds	r7, #28
 801f724:	46bd      	mov	sp, r7
 801f726:	bc80      	pop	{r7}
 801f728:	4770      	bx	lr
 801f72a:	bf00      	nop
 801f72c:	20002544 	.word	0x20002544

0801f730 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801f730:	b580      	push	{r7, lr}
 801f732:	b084      	sub	sp, #16
 801f734:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f736:	f3ef 8310 	mrs	r3, PRIMASK
 801f73a:	60bb      	str	r3, [r7, #8]
  return(result);
 801f73c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801f73e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801f740:	b672      	cpsid	i
}
 801f742:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801f744:	4b12      	ldr	r3, [pc, #72]	; (801f790 <UTIL_LPM_EnterLowPower+0x60>)
 801f746:	681b      	ldr	r3, [r3, #0]
 801f748:	2b00      	cmp	r3, #0
 801f74a:	d006      	beq.n	801f75a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801f74c:	4b11      	ldr	r3, [pc, #68]	; (801f794 <UTIL_LPM_EnterLowPower+0x64>)
 801f74e:	681b      	ldr	r3, [r3, #0]
 801f750:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801f752:	4b10      	ldr	r3, [pc, #64]	; (801f794 <UTIL_LPM_EnterLowPower+0x64>)
 801f754:	685b      	ldr	r3, [r3, #4]
 801f756:	4798      	blx	r3
 801f758:	e010      	b.n	801f77c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801f75a:	4b0f      	ldr	r3, [pc, #60]	; (801f798 <UTIL_LPM_EnterLowPower+0x68>)
 801f75c:	681b      	ldr	r3, [r3, #0]
 801f75e:	2b00      	cmp	r3, #0
 801f760:	d006      	beq.n	801f770 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801f762:	4b0c      	ldr	r3, [pc, #48]	; (801f794 <UTIL_LPM_EnterLowPower+0x64>)
 801f764:	689b      	ldr	r3, [r3, #8]
 801f766:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801f768:	4b0a      	ldr	r3, [pc, #40]	; (801f794 <UTIL_LPM_EnterLowPower+0x64>)
 801f76a:	68db      	ldr	r3, [r3, #12]
 801f76c:	4798      	blx	r3
 801f76e:	e005      	b.n	801f77c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801f770:	4b08      	ldr	r3, [pc, #32]	; (801f794 <UTIL_LPM_EnterLowPower+0x64>)
 801f772:	691b      	ldr	r3, [r3, #16]
 801f774:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801f776:	4b07      	ldr	r3, [pc, #28]	; (801f794 <UTIL_LPM_EnterLowPower+0x64>)
 801f778:	695b      	ldr	r3, [r3, #20]
 801f77a:	4798      	blx	r3
 801f77c:	68fb      	ldr	r3, [r7, #12]
 801f77e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f780:	687b      	ldr	r3, [r7, #4]
 801f782:	f383 8810 	msr	PRIMASK, r3
}
 801f786:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801f788:	bf00      	nop
 801f78a:	3710      	adds	r7, #16
 801f78c:	46bd      	mov	sp, r7
 801f78e:	bd80      	pop	{r7, pc}
 801f790:	20002540 	.word	0x20002540
 801f794:	08021888 	.word	0x08021888
 801f798:	20002544 	.word	0x20002544

0801f79c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801f79c:	b480      	push	{r7}
 801f79e:	b087      	sub	sp, #28
 801f7a0:	af00      	add	r7, sp, #0
 801f7a2:	60f8      	str	r0, [r7, #12]
 801f7a4:	60b9      	str	r1, [r7, #8]
 801f7a6:	4613      	mov	r3, r2
 801f7a8:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801f7aa:	68fb      	ldr	r3, [r7, #12]
 801f7ac:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801f7ae:	68bb      	ldr	r3, [r7, #8]
 801f7b0:	613b      	str	r3, [r7, #16]

  while( size-- )
 801f7b2:	e007      	b.n	801f7c4 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801f7b4:	693a      	ldr	r2, [r7, #16]
 801f7b6:	1c53      	adds	r3, r2, #1
 801f7b8:	613b      	str	r3, [r7, #16]
 801f7ba:	697b      	ldr	r3, [r7, #20]
 801f7bc:	1c59      	adds	r1, r3, #1
 801f7be:	6179      	str	r1, [r7, #20]
 801f7c0:	7812      	ldrb	r2, [r2, #0]
 801f7c2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801f7c4:	88fb      	ldrh	r3, [r7, #6]
 801f7c6:	1e5a      	subs	r2, r3, #1
 801f7c8:	80fa      	strh	r2, [r7, #6]
 801f7ca:	2b00      	cmp	r3, #0
 801f7cc:	d1f2      	bne.n	801f7b4 <UTIL_MEM_cpy_8+0x18>
    }
}
 801f7ce:	bf00      	nop
 801f7d0:	bf00      	nop
 801f7d2:	371c      	adds	r7, #28
 801f7d4:	46bd      	mov	sp, r7
 801f7d6:	bc80      	pop	{r7}
 801f7d8:	4770      	bx	lr

0801f7da <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801f7da:	b480      	push	{r7}
 801f7dc:	b085      	sub	sp, #20
 801f7de:	af00      	add	r7, sp, #0
 801f7e0:	6078      	str	r0, [r7, #4]
 801f7e2:	460b      	mov	r3, r1
 801f7e4:	70fb      	strb	r3, [r7, #3]
 801f7e6:	4613      	mov	r3, r2
 801f7e8:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801f7ea:	687b      	ldr	r3, [r7, #4]
 801f7ec:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801f7ee:	e004      	b.n	801f7fa <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801f7f0:	68fb      	ldr	r3, [r7, #12]
 801f7f2:	1c5a      	adds	r2, r3, #1
 801f7f4:	60fa      	str	r2, [r7, #12]
 801f7f6:	78fa      	ldrb	r2, [r7, #3]
 801f7f8:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801f7fa:	883b      	ldrh	r3, [r7, #0]
 801f7fc:	1e5a      	subs	r2, r3, #1
 801f7fe:	803a      	strh	r2, [r7, #0]
 801f800:	2b00      	cmp	r3, #0
 801f802:	d1f5      	bne.n	801f7f0 <UTIL_MEM_set_8+0x16>
  }
}
 801f804:	bf00      	nop
 801f806:	bf00      	nop
 801f808:	3714      	adds	r7, #20
 801f80a:	46bd      	mov	sp, r7
 801f80c:	bc80      	pop	{r7}
 801f80e:	4770      	bx	lr

0801f810 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801f810:	b082      	sub	sp, #8
 801f812:	b480      	push	{r7}
 801f814:	b087      	sub	sp, #28
 801f816:	af00      	add	r7, sp, #0
 801f818:	60f8      	str	r0, [r7, #12]
 801f81a:	1d38      	adds	r0, r7, #4
 801f81c:	e880 0006 	stmia.w	r0, {r1, r2}
 801f820:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801f822:	2300      	movs	r3, #0
 801f824:	613b      	str	r3, [r7, #16]
 801f826:	2300      	movs	r3, #0
 801f828:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801f82a:	687a      	ldr	r2, [r7, #4]
 801f82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f82e:	4413      	add	r3, r2
 801f830:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801f832:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801f836:	b29a      	uxth	r2, r3
 801f838:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801f83c:	b29b      	uxth	r3, r3
 801f83e:	4413      	add	r3, r2
 801f840:	b29b      	uxth	r3, r3
 801f842:	b21b      	sxth	r3, r3
 801f844:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801f846:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f84a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801f84e:	db0a      	blt.n	801f866 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801f850:	693b      	ldr	r3, [r7, #16]
 801f852:	3301      	adds	r3, #1
 801f854:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801f856:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f85a:	b29b      	uxth	r3, r3
 801f85c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801f860:	b29b      	uxth	r3, r3
 801f862:	b21b      	sxth	r3, r3
 801f864:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801f866:	68fb      	ldr	r3, [r7, #12]
 801f868:	461a      	mov	r2, r3
 801f86a:	f107 0310 	add.w	r3, r7, #16
 801f86e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f872:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f876:	68f8      	ldr	r0, [r7, #12]
 801f878:	371c      	adds	r7, #28
 801f87a:	46bd      	mov	sp, r7
 801f87c:	bc80      	pop	{r7}
 801f87e:	b002      	add	sp, #8
 801f880:	4770      	bx	lr

0801f882 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801f882:	b082      	sub	sp, #8
 801f884:	b480      	push	{r7}
 801f886:	b087      	sub	sp, #28
 801f888:	af00      	add	r7, sp, #0
 801f88a:	60f8      	str	r0, [r7, #12]
 801f88c:	1d38      	adds	r0, r7, #4
 801f88e:	e880 0006 	stmia.w	r0, {r1, r2}
 801f892:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801f894:	2300      	movs	r3, #0
 801f896:	613b      	str	r3, [r7, #16]
 801f898:	2300      	movs	r3, #0
 801f89a:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801f89c:	687a      	ldr	r2, [r7, #4]
 801f89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8a0:	1ad3      	subs	r3, r2, r3
 801f8a2:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801f8a4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801f8a8:	b29a      	uxth	r2, r3
 801f8aa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801f8ae:	b29b      	uxth	r3, r3
 801f8b0:	1ad3      	subs	r3, r2, r3
 801f8b2:	b29b      	uxth	r3, r3
 801f8b4:	b21b      	sxth	r3, r3
 801f8b6:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801f8b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f8bc:	2b00      	cmp	r3, #0
 801f8be:	da0a      	bge.n	801f8d6 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801f8c0:	693b      	ldr	r3, [r7, #16]
 801f8c2:	3b01      	subs	r3, #1
 801f8c4:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801f8c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f8ca:	b29b      	uxth	r3, r3
 801f8cc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801f8d0:	b29b      	uxth	r3, r3
 801f8d2:	b21b      	sxth	r3, r3
 801f8d4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801f8d6:	68fb      	ldr	r3, [r7, #12]
 801f8d8:	461a      	mov	r2, r3
 801f8da:	f107 0310 	add.w	r3, r7, #16
 801f8de:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f8e2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f8e6:	68f8      	ldr	r0, [r7, #12]
 801f8e8:	371c      	adds	r7, #28
 801f8ea:	46bd      	mov	sp, r7
 801f8ec:	bc80      	pop	{r7}
 801f8ee:	b002      	add	sp, #8
 801f8f0:	4770      	bx	lr
	...

0801f8f4 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801f8f4:	b580      	push	{r7, lr}
 801f8f6:	b088      	sub	sp, #32
 801f8f8:	af02      	add	r7, sp, #8
 801f8fa:	463b      	mov	r3, r7
 801f8fc:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f900:	2300      	movs	r3, #0
 801f902:	60bb      	str	r3, [r7, #8]
 801f904:	2300      	movs	r3, #0
 801f906:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f908:	4b10      	ldr	r3, [pc, #64]	; (801f94c <SysTimeSet+0x58>)
 801f90a:	691b      	ldr	r3, [r3, #16]
 801f90c:	f107 0208 	add.w	r2, r7, #8
 801f910:	3204      	adds	r2, #4
 801f912:	4610      	mov	r0, r2
 801f914:	4798      	blx	r3
 801f916:	4603      	mov	r3, r0
 801f918:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801f91a:	f107 0010 	add.w	r0, r7, #16
 801f91e:	68fb      	ldr	r3, [r7, #12]
 801f920:	9300      	str	r3, [sp, #0]
 801f922:	68bb      	ldr	r3, [r7, #8]
 801f924:	463a      	mov	r2, r7
 801f926:	ca06      	ldmia	r2, {r1, r2}
 801f928:	f7ff ffab 	bl	801f882 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801f92c:	4b07      	ldr	r3, [pc, #28]	; (801f94c <SysTimeSet+0x58>)
 801f92e:	681b      	ldr	r3, [r3, #0]
 801f930:	693a      	ldr	r2, [r7, #16]
 801f932:	4610      	mov	r0, r2
 801f934:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801f936:	4b05      	ldr	r3, [pc, #20]	; (801f94c <SysTimeSet+0x58>)
 801f938:	689b      	ldr	r3, [r3, #8]
 801f93a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801f93e:	4610      	mov	r0, r2
 801f940:	4798      	blx	r3
}
 801f942:	bf00      	nop
 801f944:	3718      	adds	r7, #24
 801f946:	46bd      	mov	sp, r7
 801f948:	bd80      	pop	{r7, pc}
 801f94a:	bf00      	nop
 801f94c:	0802196c 	.word	0x0802196c

0801f950 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801f950:	b580      	push	{r7, lr}
 801f952:	b08a      	sub	sp, #40	; 0x28
 801f954:	af02      	add	r7, sp, #8
 801f956:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f958:	2300      	movs	r3, #0
 801f95a:	61bb      	str	r3, [r7, #24]
 801f95c:	2300      	movs	r3, #0
 801f95e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801f960:	2300      	movs	r3, #0
 801f962:	613b      	str	r3, [r7, #16]
 801f964:	2300      	movs	r3, #0
 801f966:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f968:	4b14      	ldr	r3, [pc, #80]	; (801f9bc <SysTimeGet+0x6c>)
 801f96a:	691b      	ldr	r3, [r3, #16]
 801f96c:	f107 0218 	add.w	r2, r7, #24
 801f970:	3204      	adds	r2, #4
 801f972:	4610      	mov	r0, r2
 801f974:	4798      	blx	r3
 801f976:	4603      	mov	r3, r0
 801f978:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f97a:	4b10      	ldr	r3, [pc, #64]	; (801f9bc <SysTimeGet+0x6c>)
 801f97c:	68db      	ldr	r3, [r3, #12]
 801f97e:	4798      	blx	r3
 801f980:	4603      	mov	r3, r0
 801f982:	b21b      	sxth	r3, r3
 801f984:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f986:	4b0d      	ldr	r3, [pc, #52]	; (801f9bc <SysTimeGet+0x6c>)
 801f988:	685b      	ldr	r3, [r3, #4]
 801f98a:	4798      	blx	r3
 801f98c:	4603      	mov	r3, r0
 801f98e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801f990:	f107 0010 	add.w	r0, r7, #16
 801f994:	69fb      	ldr	r3, [r7, #28]
 801f996:	9300      	str	r3, [sp, #0]
 801f998:	69bb      	ldr	r3, [r7, #24]
 801f99a:	f107 0208 	add.w	r2, r7, #8
 801f99e:	ca06      	ldmia	r2, {r1, r2}
 801f9a0:	f7ff ff36 	bl	801f810 <SysTimeAdd>

  return sysTime;
 801f9a4:	687b      	ldr	r3, [r7, #4]
 801f9a6:	461a      	mov	r2, r3
 801f9a8:	f107 0310 	add.w	r3, r7, #16
 801f9ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f9b0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f9b4:	6878      	ldr	r0, [r7, #4]
 801f9b6:	3720      	adds	r7, #32
 801f9b8:	46bd      	mov	sp, r7
 801f9ba:	bd80      	pop	{r7, pc}
 801f9bc:	0802196c 	.word	0x0802196c

0801f9c0 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801f9c0:	b580      	push	{r7, lr}
 801f9c2:	b084      	sub	sp, #16
 801f9c4:	af00      	add	r7, sp, #0
 801f9c6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f9c8:	2300      	movs	r3, #0
 801f9ca:	60bb      	str	r3, [r7, #8]
 801f9cc:	2300      	movs	r3, #0
 801f9ce:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f9d0:	4b0a      	ldr	r3, [pc, #40]	; (801f9fc <SysTimeGetMcuTime+0x3c>)
 801f9d2:	691b      	ldr	r3, [r3, #16]
 801f9d4:	f107 0208 	add.w	r2, r7, #8
 801f9d8:	3204      	adds	r2, #4
 801f9da:	4610      	mov	r0, r2
 801f9dc:	4798      	blx	r3
 801f9de:	4603      	mov	r3, r0
 801f9e0:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801f9e2:	687b      	ldr	r3, [r7, #4]
 801f9e4:	461a      	mov	r2, r3
 801f9e6:	f107 0308 	add.w	r3, r7, #8
 801f9ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f9ee:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f9f2:	6878      	ldr	r0, [r7, #4]
 801f9f4:	3710      	adds	r7, #16
 801f9f6:	46bd      	mov	sp, r7
 801f9f8:	bd80      	pop	{r7, pc}
 801f9fa:	bf00      	nop
 801f9fc:	0802196c 	.word	0x0802196c

0801fa00 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801fa00:	b580      	push	{r7, lr}
 801fa02:	b088      	sub	sp, #32
 801fa04:	af02      	add	r7, sp, #8
 801fa06:	463b      	mov	r3, r7
 801fa08:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801fa0c:	4b0f      	ldr	r3, [pc, #60]	; (801fa4c <SysTimeToMs+0x4c>)
 801fa0e:	68db      	ldr	r3, [r3, #12]
 801fa10:	4798      	blx	r3
 801fa12:	4603      	mov	r3, r0
 801fa14:	b21b      	sxth	r3, r3
 801fa16:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801fa18:	4b0c      	ldr	r3, [pc, #48]	; (801fa4c <SysTimeToMs+0x4c>)
 801fa1a:	685b      	ldr	r3, [r3, #4]
 801fa1c:	4798      	blx	r3
 801fa1e:	4603      	mov	r3, r0
 801fa20:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801fa22:	f107 0008 	add.w	r0, r7, #8
 801fa26:	697b      	ldr	r3, [r7, #20]
 801fa28:	9300      	str	r3, [sp, #0]
 801fa2a:	693b      	ldr	r3, [r7, #16]
 801fa2c:	463a      	mov	r2, r7
 801fa2e:	ca06      	ldmia	r2, {r1, r2}
 801fa30:	f7ff ff27 	bl	801f882 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801fa34:	68bb      	ldr	r3, [r7, #8]
 801fa36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801fa3a:	fb02 f303 	mul.w	r3, r2, r3
 801fa3e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801fa42:	4413      	add	r3, r2
}
 801fa44:	4618      	mov	r0, r3
 801fa46:	3718      	adds	r7, #24
 801fa48:	46bd      	mov	sp, r7
 801fa4a:	bd80      	pop	{r7, pc}
 801fa4c:	0802196c 	.word	0x0802196c

0801fa50 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801fa50:	b580      	push	{r7, lr}
 801fa52:	b08a      	sub	sp, #40	; 0x28
 801fa54:	af02      	add	r7, sp, #8
 801fa56:	6078      	str	r0, [r7, #4]
 801fa58:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801fa5a:	683b      	ldr	r3, [r7, #0]
 801fa5c:	4a19      	ldr	r2, [pc, #100]	; (801fac4 <SysTimeFromMs+0x74>)
 801fa5e:	fba2 2303 	umull	r2, r3, r2, r3
 801fa62:	099b      	lsrs	r3, r3, #6
 801fa64:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801fa66:	69fb      	ldr	r3, [r7, #28]
 801fa68:	617b      	str	r3, [r7, #20]
 801fa6a:	683b      	ldr	r3, [r7, #0]
 801fa6c:	b29a      	uxth	r2, r3
 801fa6e:	69fb      	ldr	r3, [r7, #28]
 801fa70:	b29b      	uxth	r3, r3
 801fa72:	4619      	mov	r1, r3
 801fa74:	0149      	lsls	r1, r1, #5
 801fa76:	1ac9      	subs	r1, r1, r3
 801fa78:	0089      	lsls	r1, r1, #2
 801fa7a:	440b      	add	r3, r1
 801fa7c:	00db      	lsls	r3, r3, #3
 801fa7e:	b29b      	uxth	r3, r3
 801fa80:	1ad3      	subs	r3, r2, r3
 801fa82:	b29b      	uxth	r3, r3
 801fa84:	b21b      	sxth	r3, r3
 801fa86:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801fa88:	f107 030c 	add.w	r3, r7, #12
 801fa8c:	2200      	movs	r2, #0
 801fa8e:	601a      	str	r2, [r3, #0]
 801fa90:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801fa92:	4b0d      	ldr	r3, [pc, #52]	; (801fac8 <SysTimeFromMs+0x78>)
 801fa94:	68db      	ldr	r3, [r3, #12]
 801fa96:	4798      	blx	r3
 801fa98:	4603      	mov	r3, r0
 801fa9a:	b21b      	sxth	r3, r3
 801fa9c:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801fa9e:	4b0a      	ldr	r3, [pc, #40]	; (801fac8 <SysTimeFromMs+0x78>)
 801faa0:	685b      	ldr	r3, [r3, #4]
 801faa2:	4798      	blx	r3
 801faa4:	4603      	mov	r3, r0
 801faa6:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801faa8:	6878      	ldr	r0, [r7, #4]
 801faaa:	693b      	ldr	r3, [r7, #16]
 801faac:	9300      	str	r3, [sp, #0]
 801faae:	68fb      	ldr	r3, [r7, #12]
 801fab0:	f107 0214 	add.w	r2, r7, #20
 801fab4:	ca06      	ldmia	r2, {r1, r2}
 801fab6:	f7ff feab 	bl	801f810 <SysTimeAdd>
}
 801faba:	6878      	ldr	r0, [r7, #4]
 801fabc:	3720      	adds	r7, #32
 801fabe:	46bd      	mov	sp, r7
 801fac0:	bd80      	pop	{r7, pc}
 801fac2:	bf00      	nop
 801fac4:	10624dd3 	.word	0x10624dd3
 801fac8:	0802196c 	.word	0x0802196c

0801facc <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801facc:	b480      	push	{r7}
 801face:	b085      	sub	sp, #20
 801fad0:	af00      	add	r7, sp, #0
 801fad2:	6078      	str	r0, [r7, #4]
  int i = 0;
 801fad4:	2300      	movs	r3, #0
 801fad6:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801fad8:	e00e      	b.n	801faf8 <ee_skip_atoi+0x2c>
 801fada:	68fa      	ldr	r2, [r7, #12]
 801fadc:	4613      	mov	r3, r2
 801fade:	009b      	lsls	r3, r3, #2
 801fae0:	4413      	add	r3, r2
 801fae2:	005b      	lsls	r3, r3, #1
 801fae4:	4618      	mov	r0, r3
 801fae6:	687b      	ldr	r3, [r7, #4]
 801fae8:	681b      	ldr	r3, [r3, #0]
 801faea:	1c59      	adds	r1, r3, #1
 801faec:	687a      	ldr	r2, [r7, #4]
 801faee:	6011      	str	r1, [r2, #0]
 801faf0:	781b      	ldrb	r3, [r3, #0]
 801faf2:	4403      	add	r3, r0
 801faf4:	3b30      	subs	r3, #48	; 0x30
 801faf6:	60fb      	str	r3, [r7, #12]
 801faf8:	687b      	ldr	r3, [r7, #4]
 801fafa:	681b      	ldr	r3, [r3, #0]
 801fafc:	781b      	ldrb	r3, [r3, #0]
 801fafe:	2b2f      	cmp	r3, #47	; 0x2f
 801fb00:	d904      	bls.n	801fb0c <ee_skip_atoi+0x40>
 801fb02:	687b      	ldr	r3, [r7, #4]
 801fb04:	681b      	ldr	r3, [r3, #0]
 801fb06:	781b      	ldrb	r3, [r3, #0]
 801fb08:	2b39      	cmp	r3, #57	; 0x39
 801fb0a:	d9e6      	bls.n	801fada <ee_skip_atoi+0xe>
  return i;
 801fb0c:	68fb      	ldr	r3, [r7, #12]
}
 801fb0e:	4618      	mov	r0, r3
 801fb10:	3714      	adds	r7, #20
 801fb12:	46bd      	mov	sp, r7
 801fb14:	bc80      	pop	{r7}
 801fb16:	4770      	bx	lr

0801fb18 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801fb18:	b480      	push	{r7}
 801fb1a:	b099      	sub	sp, #100	; 0x64
 801fb1c:	af00      	add	r7, sp, #0
 801fb1e:	60f8      	str	r0, [r7, #12]
 801fb20:	60b9      	str	r1, [r7, #8]
 801fb22:	607a      	str	r2, [r7, #4]
 801fb24:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801fb26:	4b71      	ldr	r3, [pc, #452]	; (801fcec <ee_number+0x1d4>)
 801fb28:	681b      	ldr	r3, [r3, #0]
 801fb2a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801fb2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801fb2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fb32:	2b00      	cmp	r3, #0
 801fb34:	d002      	beq.n	801fb3c <ee_number+0x24>
 801fb36:	4b6e      	ldr	r3, [pc, #440]	; (801fcf0 <ee_number+0x1d8>)
 801fb38:	681b      	ldr	r3, [r3, #0]
 801fb3a:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801fb3c:	683b      	ldr	r3, [r7, #0]
 801fb3e:	2b01      	cmp	r3, #1
 801fb40:	dd02      	ble.n	801fb48 <ee_number+0x30>
 801fb42:	683b      	ldr	r3, [r7, #0]
 801fb44:	2b24      	cmp	r3, #36	; 0x24
 801fb46:	dd01      	ble.n	801fb4c <ee_number+0x34>
 801fb48:	2300      	movs	r3, #0
 801fb4a:	e0ca      	b.n	801fce2 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801fb4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801fb4e:	f003 0301 	and.w	r3, r3, #1
 801fb52:	2b00      	cmp	r3, #0
 801fb54:	d001      	beq.n	801fb5a <ee_number+0x42>
 801fb56:	2330      	movs	r3, #48	; 0x30
 801fb58:	e000      	b.n	801fb5c <ee_number+0x44>
 801fb5a:	2320      	movs	r3, #32
 801fb5c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801fb60:	2300      	movs	r3, #0
 801fb62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801fb66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801fb68:	f003 0302 	and.w	r3, r3, #2
 801fb6c:	2b00      	cmp	r3, #0
 801fb6e:	d00b      	beq.n	801fb88 <ee_number+0x70>
  {
    if (num < 0)
 801fb70:	687b      	ldr	r3, [r7, #4]
 801fb72:	2b00      	cmp	r3, #0
 801fb74:	da08      	bge.n	801fb88 <ee_number+0x70>
    {
      sign = '-';
 801fb76:	232d      	movs	r3, #45	; 0x2d
 801fb78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801fb7c:	687b      	ldr	r3, [r7, #4]
 801fb7e:	425b      	negs	r3, r3
 801fb80:	607b      	str	r3, [r7, #4]
      size--;
 801fb82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801fb84:	3b01      	subs	r3, #1
 801fb86:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801fb88:	2300      	movs	r3, #0
 801fb8a:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801fb8c:	687b      	ldr	r3, [r7, #4]
 801fb8e:	2b00      	cmp	r3, #0
 801fb90:	d11e      	bne.n	801fbd0 <ee_number+0xb8>
    tmp[i++] = '0';
 801fb92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fb94:	1c5a      	adds	r2, r3, #1
 801fb96:	657a      	str	r2, [r7, #84]	; 0x54
 801fb98:	3360      	adds	r3, #96	; 0x60
 801fb9a:	443b      	add	r3, r7
 801fb9c:	2230      	movs	r2, #48	; 0x30
 801fb9e:	f803 2c50 	strb.w	r2, [r3, #-80]
 801fba2:	e018      	b.n	801fbd6 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801fba4:	687b      	ldr	r3, [r7, #4]
 801fba6:	683a      	ldr	r2, [r7, #0]
 801fba8:	fbb3 f1f2 	udiv	r1, r3, r2
 801fbac:	fb01 f202 	mul.w	r2, r1, r2
 801fbb0:	1a9b      	subs	r3, r3, r2
 801fbb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801fbb4:	441a      	add	r2, r3
 801fbb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fbb8:	1c59      	adds	r1, r3, #1
 801fbba:	6579      	str	r1, [r7, #84]	; 0x54
 801fbbc:	7812      	ldrb	r2, [r2, #0]
 801fbbe:	3360      	adds	r3, #96	; 0x60
 801fbc0:	443b      	add	r3, r7
 801fbc2:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801fbc6:	687a      	ldr	r2, [r7, #4]
 801fbc8:	683b      	ldr	r3, [r7, #0]
 801fbca:	fbb2 f3f3 	udiv	r3, r2, r3
 801fbce:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801fbd0:	687b      	ldr	r3, [r7, #4]
 801fbd2:	2b00      	cmp	r3, #0
 801fbd4:	d1e6      	bne.n	801fba4 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801fbd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801fbd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fbda:	429a      	cmp	r2, r3
 801fbdc:	dd01      	ble.n	801fbe2 <ee_number+0xca>
 801fbde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fbe0:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801fbe2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801fbe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fbe6:	1ad3      	subs	r3, r2, r3
 801fbe8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801fbea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801fbec:	f003 0301 	and.w	r3, r3, #1
 801fbf0:	2b00      	cmp	r3, #0
 801fbf2:	d112      	bne.n	801fc1a <ee_number+0x102>
 801fbf4:	e00c      	b.n	801fc10 <ee_number+0xf8>
 801fbf6:	68fb      	ldr	r3, [r7, #12]
 801fbf8:	1c5a      	adds	r2, r3, #1
 801fbfa:	60fa      	str	r2, [r7, #12]
 801fbfc:	2220      	movs	r2, #32
 801fbfe:	701a      	strb	r2, [r3, #0]
 801fc00:	68bb      	ldr	r3, [r7, #8]
 801fc02:	3b01      	subs	r3, #1
 801fc04:	60bb      	str	r3, [r7, #8]
 801fc06:	68bb      	ldr	r3, [r7, #8]
 801fc08:	2b00      	cmp	r3, #0
 801fc0a:	d101      	bne.n	801fc10 <ee_number+0xf8>
 801fc0c:	68fb      	ldr	r3, [r7, #12]
 801fc0e:	e068      	b.n	801fce2 <ee_number+0x1ca>
 801fc10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801fc12:	1e5a      	subs	r2, r3, #1
 801fc14:	66ba      	str	r2, [r7, #104]	; 0x68
 801fc16:	2b00      	cmp	r3, #0
 801fc18:	dced      	bgt.n	801fbf6 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801fc1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801fc1e:	2b00      	cmp	r3, #0
 801fc20:	d01b      	beq.n	801fc5a <ee_number+0x142>
 801fc22:	68fb      	ldr	r3, [r7, #12]
 801fc24:	1c5a      	adds	r2, r3, #1
 801fc26:	60fa      	str	r2, [r7, #12]
 801fc28:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801fc2c:	701a      	strb	r2, [r3, #0]
 801fc2e:	68bb      	ldr	r3, [r7, #8]
 801fc30:	3b01      	subs	r3, #1
 801fc32:	60bb      	str	r3, [r7, #8]
 801fc34:	68bb      	ldr	r3, [r7, #8]
 801fc36:	2b00      	cmp	r3, #0
 801fc38:	d10f      	bne.n	801fc5a <ee_number+0x142>
 801fc3a:	68fb      	ldr	r3, [r7, #12]
 801fc3c:	e051      	b.n	801fce2 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801fc3e:	68fb      	ldr	r3, [r7, #12]
 801fc40:	1c5a      	adds	r2, r3, #1
 801fc42:	60fa      	str	r2, [r7, #12]
 801fc44:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801fc48:	701a      	strb	r2, [r3, #0]
 801fc4a:	68bb      	ldr	r3, [r7, #8]
 801fc4c:	3b01      	subs	r3, #1
 801fc4e:	60bb      	str	r3, [r7, #8]
 801fc50:	68bb      	ldr	r3, [r7, #8]
 801fc52:	2b00      	cmp	r3, #0
 801fc54:	d101      	bne.n	801fc5a <ee_number+0x142>
 801fc56:	68fb      	ldr	r3, [r7, #12]
 801fc58:	e043      	b.n	801fce2 <ee_number+0x1ca>
 801fc5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801fc5c:	1e5a      	subs	r2, r3, #1
 801fc5e:	66ba      	str	r2, [r7, #104]	; 0x68
 801fc60:	2b00      	cmp	r3, #0
 801fc62:	dcec      	bgt.n	801fc3e <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801fc64:	e00c      	b.n	801fc80 <ee_number+0x168>
 801fc66:	68fb      	ldr	r3, [r7, #12]
 801fc68:	1c5a      	adds	r2, r3, #1
 801fc6a:	60fa      	str	r2, [r7, #12]
 801fc6c:	2230      	movs	r2, #48	; 0x30
 801fc6e:	701a      	strb	r2, [r3, #0]
 801fc70:	68bb      	ldr	r3, [r7, #8]
 801fc72:	3b01      	subs	r3, #1
 801fc74:	60bb      	str	r3, [r7, #8]
 801fc76:	68bb      	ldr	r3, [r7, #8]
 801fc78:	2b00      	cmp	r3, #0
 801fc7a:	d101      	bne.n	801fc80 <ee_number+0x168>
 801fc7c:	68fb      	ldr	r3, [r7, #12]
 801fc7e:	e030      	b.n	801fce2 <ee_number+0x1ca>
 801fc80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fc82:	1e5a      	subs	r2, r3, #1
 801fc84:	66fa      	str	r2, [r7, #108]	; 0x6c
 801fc86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801fc88:	429a      	cmp	r2, r3
 801fc8a:	dbec      	blt.n	801fc66 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801fc8c:	e010      	b.n	801fcb0 <ee_number+0x198>
 801fc8e:	68fb      	ldr	r3, [r7, #12]
 801fc90:	1c5a      	adds	r2, r3, #1
 801fc92:	60fa      	str	r2, [r7, #12]
 801fc94:	f107 0110 	add.w	r1, r7, #16
 801fc98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801fc9a:	440a      	add	r2, r1
 801fc9c:	7812      	ldrb	r2, [r2, #0]
 801fc9e:	701a      	strb	r2, [r3, #0]
 801fca0:	68bb      	ldr	r3, [r7, #8]
 801fca2:	3b01      	subs	r3, #1
 801fca4:	60bb      	str	r3, [r7, #8]
 801fca6:	68bb      	ldr	r3, [r7, #8]
 801fca8:	2b00      	cmp	r3, #0
 801fcaa:	d101      	bne.n	801fcb0 <ee_number+0x198>
 801fcac:	68fb      	ldr	r3, [r7, #12]
 801fcae:	e018      	b.n	801fce2 <ee_number+0x1ca>
 801fcb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fcb2:	1e5a      	subs	r2, r3, #1
 801fcb4:	657a      	str	r2, [r7, #84]	; 0x54
 801fcb6:	2b00      	cmp	r3, #0
 801fcb8:	dce9      	bgt.n	801fc8e <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801fcba:	e00c      	b.n	801fcd6 <ee_number+0x1be>
 801fcbc:	68fb      	ldr	r3, [r7, #12]
 801fcbe:	1c5a      	adds	r2, r3, #1
 801fcc0:	60fa      	str	r2, [r7, #12]
 801fcc2:	2220      	movs	r2, #32
 801fcc4:	701a      	strb	r2, [r3, #0]
 801fcc6:	68bb      	ldr	r3, [r7, #8]
 801fcc8:	3b01      	subs	r3, #1
 801fcca:	60bb      	str	r3, [r7, #8]
 801fccc:	68bb      	ldr	r3, [r7, #8]
 801fcce:	2b00      	cmp	r3, #0
 801fcd0:	d101      	bne.n	801fcd6 <ee_number+0x1be>
 801fcd2:	68fb      	ldr	r3, [r7, #12]
 801fcd4:	e005      	b.n	801fce2 <ee_number+0x1ca>
 801fcd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801fcd8:	1e5a      	subs	r2, r3, #1
 801fcda:	66ba      	str	r2, [r7, #104]	; 0x68
 801fcdc:	2b00      	cmp	r3, #0
 801fcde:	dced      	bgt.n	801fcbc <ee_number+0x1a4>

  return str;
 801fce0:	68fb      	ldr	r3, [r7, #12]
}
 801fce2:	4618      	mov	r0, r3
 801fce4:	3764      	adds	r7, #100	; 0x64
 801fce6:	46bd      	mov	sp, r7
 801fce8:	bc80      	pop	{r7}
 801fcea:	4770      	bx	lr
 801fcec:	20000164 	.word	0x20000164
 801fcf0:	20000168 	.word	0x20000168

0801fcf4 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801fcf4:	b580      	push	{r7, lr}
 801fcf6:	b092      	sub	sp, #72	; 0x48
 801fcf8:	af04      	add	r7, sp, #16
 801fcfa:	60f8      	str	r0, [r7, #12]
 801fcfc:	60b9      	str	r1, [r7, #8]
 801fcfe:	607a      	str	r2, [r7, #4]
 801fd00:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801fd02:	68bb      	ldr	r3, [r7, #8]
 801fd04:	2b00      	cmp	r3, #0
 801fd06:	dc01      	bgt.n	801fd0c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801fd08:	2300      	movs	r3, #0
 801fd0a:	e142      	b.n	801ff92 <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801fd0c:	68fb      	ldr	r3, [r7, #12]
 801fd0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801fd10:	e12a      	b.n	801ff68 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801fd12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fd14:	68fb      	ldr	r3, [r7, #12]
 801fd16:	1ad2      	subs	r2, r2, r3
 801fd18:	68bb      	ldr	r3, [r7, #8]
 801fd1a:	3b01      	subs	r3, #1
 801fd1c:	429a      	cmp	r2, r3
 801fd1e:	f280 8131 	bge.w	801ff84 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801fd22:	687b      	ldr	r3, [r7, #4]
 801fd24:	781b      	ldrb	r3, [r3, #0]
 801fd26:	2b25      	cmp	r3, #37	; 0x25
 801fd28:	d006      	beq.n	801fd38 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801fd2a:	687a      	ldr	r2, [r7, #4]
 801fd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd2e:	1c59      	adds	r1, r3, #1
 801fd30:	62f9      	str	r1, [r7, #44]	; 0x2c
 801fd32:	7812      	ldrb	r2, [r2, #0]
 801fd34:	701a      	strb	r2, [r3, #0]
      continue;
 801fd36:	e114      	b.n	801ff62 <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 801fd38:	2300      	movs	r3, #0
 801fd3a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801fd3c:	687b      	ldr	r3, [r7, #4]
 801fd3e:	3301      	adds	r3, #1
 801fd40:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801fd42:	687b      	ldr	r3, [r7, #4]
 801fd44:	781b      	ldrb	r3, [r3, #0]
 801fd46:	2b30      	cmp	r3, #48	; 0x30
 801fd48:	d103      	bne.n	801fd52 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801fd4a:	6a3b      	ldr	r3, [r7, #32]
 801fd4c:	f043 0301 	orr.w	r3, r3, #1
 801fd50:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801fd52:	f04f 33ff 	mov.w	r3, #4294967295
 801fd56:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801fd58:	687b      	ldr	r3, [r7, #4]
 801fd5a:	781b      	ldrb	r3, [r3, #0]
 801fd5c:	2b2f      	cmp	r3, #47	; 0x2f
 801fd5e:	d908      	bls.n	801fd72 <tiny_vsnprintf_like+0x7e>
 801fd60:	687b      	ldr	r3, [r7, #4]
 801fd62:	781b      	ldrb	r3, [r3, #0]
 801fd64:	2b39      	cmp	r3, #57	; 0x39
 801fd66:	d804      	bhi.n	801fd72 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801fd68:	1d3b      	adds	r3, r7, #4
 801fd6a:	4618      	mov	r0, r3
 801fd6c:	f7ff feae 	bl	801facc <ee_skip_atoi>
 801fd70:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801fd72:	f04f 33ff 	mov.w	r3, #4294967295
 801fd76:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801fd78:	f04f 33ff 	mov.w	r3, #4294967295
 801fd7c:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801fd7e:	230a      	movs	r3, #10
 801fd80:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801fd82:	687b      	ldr	r3, [r7, #4]
 801fd84:	781b      	ldrb	r3, [r3, #0]
 801fd86:	3b58      	subs	r3, #88	; 0x58
 801fd88:	2b20      	cmp	r3, #32
 801fd8a:	f200 8094 	bhi.w	801feb6 <tiny_vsnprintf_like+0x1c2>
 801fd8e:	a201      	add	r2, pc, #4	; (adr r2, 801fd94 <tiny_vsnprintf_like+0xa0>)
 801fd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fd94:	0801fe9f 	.word	0x0801fe9f
 801fd98:	0801feb7 	.word	0x0801feb7
 801fd9c:	0801feb7 	.word	0x0801feb7
 801fda0:	0801feb7 	.word	0x0801feb7
 801fda4:	0801feb7 	.word	0x0801feb7
 801fda8:	0801feb7 	.word	0x0801feb7
 801fdac:	0801feb7 	.word	0x0801feb7
 801fdb0:	0801feb7 	.word	0x0801feb7
 801fdb4:	0801feb7 	.word	0x0801feb7
 801fdb8:	0801feb7 	.word	0x0801feb7
 801fdbc:	0801feb7 	.word	0x0801feb7
 801fdc0:	0801fe23 	.word	0x0801fe23
 801fdc4:	0801fead 	.word	0x0801fead
 801fdc8:	0801feb7 	.word	0x0801feb7
 801fdcc:	0801feb7 	.word	0x0801feb7
 801fdd0:	0801feb7 	.word	0x0801feb7
 801fdd4:	0801feb7 	.word	0x0801feb7
 801fdd8:	0801fead 	.word	0x0801fead
 801fddc:	0801feb7 	.word	0x0801feb7
 801fde0:	0801feb7 	.word	0x0801feb7
 801fde4:	0801feb7 	.word	0x0801feb7
 801fde8:	0801feb7 	.word	0x0801feb7
 801fdec:	0801feb7 	.word	0x0801feb7
 801fdf0:	0801feb7 	.word	0x0801feb7
 801fdf4:	0801feb7 	.word	0x0801feb7
 801fdf8:	0801feb7 	.word	0x0801feb7
 801fdfc:	0801feb7 	.word	0x0801feb7
 801fe00:	0801fe43 	.word	0x0801fe43
 801fe04:	0801feb7 	.word	0x0801feb7
 801fe08:	0801ff03 	.word	0x0801ff03
 801fe0c:	0801feb7 	.word	0x0801feb7
 801fe10:	0801feb7 	.word	0x0801feb7
 801fe14:	0801fea7 	.word	0x0801fea7
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801fe18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe1a:	1c5a      	adds	r2, r3, #1
 801fe1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801fe1e:	2220      	movs	r2, #32
 801fe20:	701a      	strb	r2, [r3, #0]
 801fe22:	69fb      	ldr	r3, [r7, #28]
 801fe24:	3b01      	subs	r3, #1
 801fe26:	61fb      	str	r3, [r7, #28]
 801fe28:	69fb      	ldr	r3, [r7, #28]
 801fe2a:	2b00      	cmp	r3, #0
 801fe2c:	dcf4      	bgt.n	801fe18 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801fe2e:	683b      	ldr	r3, [r7, #0]
 801fe30:	1d1a      	adds	r2, r3, #4
 801fe32:	603a      	str	r2, [r7, #0]
 801fe34:	6819      	ldr	r1, [r3, #0]
 801fe36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe38:	1c5a      	adds	r2, r3, #1
 801fe3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801fe3c:	b2ca      	uxtb	r2, r1
 801fe3e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801fe40:	e08f      	b.n	801ff62 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801fe42:	683b      	ldr	r3, [r7, #0]
 801fe44:	1d1a      	adds	r2, r3, #4
 801fe46:	603a      	str	r2, [r7, #0]
 801fe48:	681b      	ldr	r3, [r3, #0]
 801fe4a:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801fe4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe4e:	2b00      	cmp	r3, #0
 801fe50:	d101      	bne.n	801fe56 <tiny_vsnprintf_like+0x162>
 801fe52:	4b52      	ldr	r3, [pc, #328]	; (801ff9c <tiny_vsnprintf_like+0x2a8>)
 801fe54:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801fe56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fe58:	f7e0 f98e 	bl	8000178 <strlen>
 801fe5c:	4603      	mov	r3, r0
 801fe5e:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801fe60:	e004      	b.n	801fe6c <tiny_vsnprintf_like+0x178>
 801fe62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe64:	1c5a      	adds	r2, r3, #1
 801fe66:	62fa      	str	r2, [r7, #44]	; 0x2c
 801fe68:	2220      	movs	r2, #32
 801fe6a:	701a      	strb	r2, [r3, #0]
 801fe6c:	69fb      	ldr	r3, [r7, #28]
 801fe6e:	1e5a      	subs	r2, r3, #1
 801fe70:	61fa      	str	r2, [r7, #28]
 801fe72:	693a      	ldr	r2, [r7, #16]
 801fe74:	429a      	cmp	r2, r3
 801fe76:	dbf4      	blt.n	801fe62 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801fe78:	2300      	movs	r3, #0
 801fe7a:	62bb      	str	r3, [r7, #40]	; 0x28
 801fe7c:	e00a      	b.n	801fe94 <tiny_vsnprintf_like+0x1a0>
 801fe7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fe80:	1c53      	adds	r3, r2, #1
 801fe82:	627b      	str	r3, [r7, #36]	; 0x24
 801fe84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe86:	1c59      	adds	r1, r3, #1
 801fe88:	62f9      	str	r1, [r7, #44]	; 0x2c
 801fe8a:	7812      	ldrb	r2, [r2, #0]
 801fe8c:	701a      	strb	r2, [r3, #0]
 801fe8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe90:	3301      	adds	r3, #1
 801fe92:	62bb      	str	r3, [r7, #40]	; 0x28
 801fe94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fe96:	693b      	ldr	r3, [r7, #16]
 801fe98:	429a      	cmp	r2, r3
 801fe9a:	dbf0      	blt.n	801fe7e <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801fe9c:	e061      	b.n	801ff62 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801fe9e:	6a3b      	ldr	r3, [r7, #32]
 801fea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fea4:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801fea6:	2310      	movs	r3, #16
 801fea8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801feaa:	e02d      	b.n	801ff08 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801feac:	6a3b      	ldr	r3, [r7, #32]
 801feae:	f043 0302 	orr.w	r3, r3, #2
 801feb2:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801feb4:	e025      	b.n	801ff02 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801feb6:	687b      	ldr	r3, [r7, #4]
 801feb8:	781b      	ldrb	r3, [r3, #0]
 801feba:	2b25      	cmp	r3, #37	; 0x25
 801febc:	d004      	beq.n	801fec8 <tiny_vsnprintf_like+0x1d4>
 801febe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fec0:	1c5a      	adds	r2, r3, #1
 801fec2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801fec4:	2225      	movs	r2, #37	; 0x25
 801fec6:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801fec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801feca:	68fb      	ldr	r3, [r7, #12]
 801fecc:	1ad2      	subs	r2, r2, r3
 801fece:	68bb      	ldr	r3, [r7, #8]
 801fed0:	3b01      	subs	r3, #1
 801fed2:	429a      	cmp	r2, r3
 801fed4:	da17      	bge.n	801ff06 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801fed6:	687b      	ldr	r3, [r7, #4]
 801fed8:	781b      	ldrb	r3, [r3, #0]
 801feda:	2b00      	cmp	r3, #0
 801fedc:	d006      	beq.n	801feec <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801fede:	687a      	ldr	r2, [r7, #4]
 801fee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fee2:	1c59      	adds	r1, r3, #1
 801fee4:	62f9      	str	r1, [r7, #44]	; 0x2c
 801fee6:	7812      	ldrb	r2, [r2, #0]
 801fee8:	701a      	strb	r2, [r3, #0]
 801feea:	e002      	b.n	801fef2 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801feec:	687b      	ldr	r3, [r7, #4]
 801feee:	3b01      	subs	r3, #1
 801fef0:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801fef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fef4:	68fb      	ldr	r3, [r7, #12]
 801fef6:	1ad2      	subs	r2, r2, r3
 801fef8:	68bb      	ldr	r3, [r7, #8]
 801fefa:	3b01      	subs	r3, #1
 801fefc:	429a      	cmp	r2, r3
 801fefe:	db2f      	blt.n	801ff60 <tiny_vsnprintf_like+0x26c>
 801ff00:	e002      	b.n	801ff08 <tiny_vsnprintf_like+0x214>
        break;
 801ff02:	bf00      	nop
 801ff04:	e000      	b.n	801ff08 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801ff06:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801ff08:	697b      	ldr	r3, [r7, #20]
 801ff0a:	2b6c      	cmp	r3, #108	; 0x6c
 801ff0c:	d105      	bne.n	801ff1a <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801ff0e:	683b      	ldr	r3, [r7, #0]
 801ff10:	1d1a      	adds	r2, r3, #4
 801ff12:	603a      	str	r2, [r7, #0]
 801ff14:	681b      	ldr	r3, [r3, #0]
 801ff16:	637b      	str	r3, [r7, #52]	; 0x34
 801ff18:	e00f      	b.n	801ff3a <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801ff1a:	6a3b      	ldr	r3, [r7, #32]
 801ff1c:	f003 0302 	and.w	r3, r3, #2
 801ff20:	2b00      	cmp	r3, #0
 801ff22:	d005      	beq.n	801ff30 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801ff24:	683b      	ldr	r3, [r7, #0]
 801ff26:	1d1a      	adds	r2, r3, #4
 801ff28:	603a      	str	r2, [r7, #0]
 801ff2a:	681b      	ldr	r3, [r3, #0]
 801ff2c:	637b      	str	r3, [r7, #52]	; 0x34
 801ff2e:	e004      	b.n	801ff3a <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801ff30:	683b      	ldr	r3, [r7, #0]
 801ff32:	1d1a      	adds	r2, r3, #4
 801ff34:	603a      	str	r2, [r7, #0]
 801ff36:	681b      	ldr	r3, [r3, #0]
 801ff38:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801ff3a:	68bb      	ldr	r3, [r7, #8]
 801ff3c:	1e5a      	subs	r2, r3, #1
 801ff3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ff40:	68fb      	ldr	r3, [r7, #12]
 801ff42:	1acb      	subs	r3, r1, r3
 801ff44:	1ad1      	subs	r1, r2, r3
 801ff46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ff48:	6a3b      	ldr	r3, [r7, #32]
 801ff4a:	9302      	str	r3, [sp, #8]
 801ff4c:	69bb      	ldr	r3, [r7, #24]
 801ff4e:	9301      	str	r3, [sp, #4]
 801ff50:	69fb      	ldr	r3, [r7, #28]
 801ff52:	9300      	str	r3, [sp, #0]
 801ff54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ff56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ff58:	f7ff fdde 	bl	801fb18 <ee_number>
 801ff5c:	62f8      	str	r0, [r7, #44]	; 0x2c
 801ff5e:	e000      	b.n	801ff62 <tiny_vsnprintf_like+0x26e>
        continue;
 801ff60:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801ff62:	687b      	ldr	r3, [r7, #4]
 801ff64:	3301      	adds	r3, #1
 801ff66:	607b      	str	r3, [r7, #4]
 801ff68:	687b      	ldr	r3, [r7, #4]
 801ff6a:	781b      	ldrb	r3, [r3, #0]
 801ff6c:	2b00      	cmp	r3, #0
 801ff6e:	f47f aed0 	bne.w	801fd12 <tiny_vsnprintf_like+0x1e>
 801ff72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ff74:	68fb      	ldr	r3, [r7, #12]
 801ff76:	1ad2      	subs	r2, r2, r3
 801ff78:	68bb      	ldr	r3, [r7, #8]
 801ff7a:	3b01      	subs	r3, #1
 801ff7c:	429a      	cmp	r2, r3
 801ff7e:	f6bf aec8 	bge.w	801fd12 <tiny_vsnprintf_like+0x1e>
 801ff82:	e000      	b.n	801ff86 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801ff84:	bf00      	nop
  }

  *str = '\0';
 801ff86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff88:	2200      	movs	r2, #0
 801ff8a:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801ff8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ff8e:	68fb      	ldr	r3, [r7, #12]
 801ff90:	1ad3      	subs	r3, r2, r3
}
 801ff92:	4618      	mov	r0, r3
 801ff94:	3738      	adds	r7, #56	; 0x38
 801ff96:	46bd      	mov	sp, r7
 801ff98:	bd80      	pop	{r7, pc}
 801ff9a:	bf00      	nop
 801ff9c:	08021880 	.word	0x08021880

0801ffa0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801ffa0:	b580      	push	{r7, lr}
 801ffa2:	b090      	sub	sp, #64	; 0x40
 801ffa4:	af00      	add	r7, sp, #0
 801ffa6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801ffa8:	4b73      	ldr	r3, [pc, #460]	; (8020178 <UTIL_SEQ_Run+0x1d8>)
 801ffaa:	681b      	ldr	r3, [r3, #0]
 801ffac:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801ffae:	4b72      	ldr	r3, [pc, #456]	; (8020178 <UTIL_SEQ_Run+0x1d8>)
 801ffb0:	681a      	ldr	r2, [r3, #0]
 801ffb2:	687b      	ldr	r3, [r7, #4]
 801ffb4:	4013      	ands	r3, r2
 801ffb6:	4a70      	ldr	r2, [pc, #448]	; (8020178 <UTIL_SEQ_Run+0x1d8>)
 801ffb8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801ffba:	4b70      	ldr	r3, [pc, #448]	; (802017c <UTIL_SEQ_Run+0x1dc>)
 801ffbc:	681b      	ldr	r3, [r3, #0]
 801ffbe:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801ffc0:	4b6f      	ldr	r3, [pc, #444]	; (8020180 <UTIL_SEQ_Run+0x1e0>)
 801ffc2:	681b      	ldr	r3, [r3, #0]
 801ffc4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801ffc6:	4b6f      	ldr	r3, [pc, #444]	; (8020184 <UTIL_SEQ_Run+0x1e4>)
 801ffc8:	681b      	ldr	r3, [r3, #0]
 801ffca:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801ffcc:	4b6e      	ldr	r3, [pc, #440]	; (8020188 <UTIL_SEQ_Run+0x1e8>)
 801ffce:	681b      	ldr	r3, [r3, #0]
 801ffd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801ffd2:	e08d      	b.n	80200f0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801ffd4:	2300      	movs	r3, #0
 801ffd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801ffd8:	e002      	b.n	801ffe0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801ffda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ffdc:	3301      	adds	r3, #1
 801ffde:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801ffe0:	4a6a      	ldr	r2, [pc, #424]	; (802018c <UTIL_SEQ_Run+0x1ec>)
 801ffe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ffe4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ffe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ffea:	401a      	ands	r2, r3
 801ffec:	4b62      	ldr	r3, [pc, #392]	; (8020178 <UTIL_SEQ_Run+0x1d8>)
 801ffee:	681b      	ldr	r3, [r3, #0]
 801fff0:	4013      	ands	r3, r2
 801fff2:	2b00      	cmp	r3, #0
 801fff4:	d0f1      	beq.n	801ffda <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801fff6:	4a65      	ldr	r2, [pc, #404]	; (802018c <UTIL_SEQ_Run+0x1ec>)
 801fff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fffa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801fffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020000:	401a      	ands	r2, r3
 8020002:	4b5d      	ldr	r3, [pc, #372]	; (8020178 <UTIL_SEQ_Run+0x1d8>)
 8020004:	681b      	ldr	r3, [r3, #0]
 8020006:	4013      	ands	r3, r2
 8020008:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 802000a:	4a60      	ldr	r2, [pc, #384]	; (802018c <UTIL_SEQ_Run+0x1ec>)
 802000c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802000e:	00db      	lsls	r3, r3, #3
 8020010:	4413      	add	r3, r2
 8020012:	685a      	ldr	r2, [r3, #4]
 8020014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020016:	4013      	ands	r3, r2
 8020018:	2b00      	cmp	r3, #0
 802001a:	d106      	bne.n	802002a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 802001c:	4a5b      	ldr	r2, [pc, #364]	; (802018c <UTIL_SEQ_Run+0x1ec>)
 802001e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020020:	00db      	lsls	r3, r3, #3
 8020022:	4413      	add	r3, r2
 8020024:	f04f 32ff 	mov.w	r2, #4294967295
 8020028:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 802002a:	4a58      	ldr	r2, [pc, #352]	; (802018c <UTIL_SEQ_Run+0x1ec>)
 802002c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802002e:	00db      	lsls	r3, r3, #3
 8020030:	4413      	add	r3, r2
 8020032:	685a      	ldr	r2, [r3, #4]
 8020034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020036:	4013      	ands	r3, r2
 8020038:	4618      	mov	r0, r3
 802003a:	f000 f907 	bl	802024c <SEQ_BitPosition>
 802003e:	4603      	mov	r3, r0
 8020040:	461a      	mov	r2, r3
 8020042:	4b53      	ldr	r3, [pc, #332]	; (8020190 <UTIL_SEQ_Run+0x1f0>)
 8020044:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8020046:	4a51      	ldr	r2, [pc, #324]	; (802018c <UTIL_SEQ_Run+0x1ec>)
 8020048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802004a:	00db      	lsls	r3, r3, #3
 802004c:	4413      	add	r3, r2
 802004e:	685a      	ldr	r2, [r3, #4]
 8020050:	4b4f      	ldr	r3, [pc, #316]	; (8020190 <UTIL_SEQ_Run+0x1f0>)
 8020052:	681b      	ldr	r3, [r3, #0]
 8020054:	2101      	movs	r1, #1
 8020056:	fa01 f303 	lsl.w	r3, r1, r3
 802005a:	43db      	mvns	r3, r3
 802005c:	401a      	ands	r2, r3
 802005e:	494b      	ldr	r1, [pc, #300]	; (802018c <UTIL_SEQ_Run+0x1ec>)
 8020060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020062:	00db      	lsls	r3, r3, #3
 8020064:	440b      	add	r3, r1
 8020066:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020068:	f3ef 8310 	mrs	r3, PRIMASK
 802006c:	61bb      	str	r3, [r7, #24]
  return(result);
 802006e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8020070:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8020072:	b672      	cpsid	i
}
 8020074:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8020076:	4b46      	ldr	r3, [pc, #280]	; (8020190 <UTIL_SEQ_Run+0x1f0>)
 8020078:	681b      	ldr	r3, [r3, #0]
 802007a:	2201      	movs	r2, #1
 802007c:	fa02 f303 	lsl.w	r3, r2, r3
 8020080:	43da      	mvns	r2, r3
 8020082:	4b3e      	ldr	r3, [pc, #248]	; (802017c <UTIL_SEQ_Run+0x1dc>)
 8020084:	681b      	ldr	r3, [r3, #0]
 8020086:	4013      	ands	r3, r2
 8020088:	4a3c      	ldr	r2, [pc, #240]	; (802017c <UTIL_SEQ_Run+0x1dc>)
 802008a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 802008c:	2301      	movs	r3, #1
 802008e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020090:	e013      	b.n	80200ba <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8020092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020094:	3b01      	subs	r3, #1
 8020096:	4a3d      	ldr	r2, [pc, #244]	; (802018c <UTIL_SEQ_Run+0x1ec>)
 8020098:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 802009c:	4b3c      	ldr	r3, [pc, #240]	; (8020190 <UTIL_SEQ_Run+0x1f0>)
 802009e:	681b      	ldr	r3, [r3, #0]
 80200a0:	2201      	movs	r2, #1
 80200a2:	fa02 f303 	lsl.w	r3, r2, r3
 80200a6:	43da      	mvns	r2, r3
 80200a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80200aa:	3b01      	subs	r3, #1
 80200ac:	400a      	ands	r2, r1
 80200ae:	4937      	ldr	r1, [pc, #220]	; (802018c <UTIL_SEQ_Run+0x1ec>)
 80200b0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80200b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80200b6:	3b01      	subs	r3, #1
 80200b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80200ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80200bc:	2b00      	cmp	r3, #0
 80200be:	d1e8      	bne.n	8020092 <UTIL_SEQ_Run+0xf2>
 80200c0:	6a3b      	ldr	r3, [r7, #32]
 80200c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80200c4:	697b      	ldr	r3, [r7, #20]
 80200c6:	f383 8810 	msr	PRIMASK, r3
}
 80200ca:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80200cc:	4b30      	ldr	r3, [pc, #192]	; (8020190 <UTIL_SEQ_Run+0x1f0>)
 80200ce:	681b      	ldr	r3, [r3, #0]
 80200d0:	4a30      	ldr	r2, [pc, #192]	; (8020194 <UTIL_SEQ_Run+0x1f4>)
 80200d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80200d6:	4798      	blx	r3

    local_taskset = TaskSet;
 80200d8:	4b28      	ldr	r3, [pc, #160]	; (802017c <UTIL_SEQ_Run+0x1dc>)
 80200da:	681b      	ldr	r3, [r3, #0]
 80200dc:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 80200de:	4b28      	ldr	r3, [pc, #160]	; (8020180 <UTIL_SEQ_Run+0x1e0>)
 80200e0:	681b      	ldr	r3, [r3, #0]
 80200e2:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 80200e4:	4b27      	ldr	r3, [pc, #156]	; (8020184 <UTIL_SEQ_Run+0x1e4>)
 80200e6:	681b      	ldr	r3, [r3, #0]
 80200e8:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 80200ea:	4b27      	ldr	r3, [pc, #156]	; (8020188 <UTIL_SEQ_Run+0x1e8>)
 80200ec:	681b      	ldr	r3, [r3, #0]
 80200ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80200f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80200f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200f4:	401a      	ands	r2, r3
 80200f6:	4b20      	ldr	r3, [pc, #128]	; (8020178 <UTIL_SEQ_Run+0x1d8>)
 80200f8:	681b      	ldr	r3, [r3, #0]
 80200fa:	4013      	ands	r3, r2
 80200fc:	2b00      	cmp	r3, #0
 80200fe:	d005      	beq.n	802010c <UTIL_SEQ_Run+0x16c>
 8020100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020104:	4013      	ands	r3, r2
 8020106:	2b00      	cmp	r3, #0
 8020108:	f43f af64 	beq.w	801ffd4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 802010c:	4b20      	ldr	r3, [pc, #128]	; (8020190 <UTIL_SEQ_Run+0x1f0>)
 802010e:	f04f 32ff 	mov.w	r2, #4294967295
 8020112:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8020114:	f000 f88e 	bl	8020234 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020118:	f3ef 8310 	mrs	r3, PRIMASK
 802011c:	613b      	str	r3, [r7, #16]
  return(result);
 802011e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8020120:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8020122:	b672      	cpsid	i
}
 8020124:	bf00      	nop
  local_taskset = TaskSet;
 8020126:	4b15      	ldr	r3, [pc, #84]	; (802017c <UTIL_SEQ_Run+0x1dc>)
 8020128:	681b      	ldr	r3, [r3, #0]
 802012a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 802012c:	4b14      	ldr	r3, [pc, #80]	; (8020180 <UTIL_SEQ_Run+0x1e0>)
 802012e:	681b      	ldr	r3, [r3, #0]
 8020130:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8020132:	4b14      	ldr	r3, [pc, #80]	; (8020184 <UTIL_SEQ_Run+0x1e4>)
 8020134:	681b      	ldr	r3, [r3, #0]
 8020136:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8020138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802013a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802013c:	401a      	ands	r2, r3
 802013e:	4b0e      	ldr	r3, [pc, #56]	; (8020178 <UTIL_SEQ_Run+0x1d8>)
 8020140:	681b      	ldr	r3, [r3, #0]
 8020142:	4013      	ands	r3, r2
 8020144:	2b00      	cmp	r3, #0
 8020146:	d107      	bne.n	8020158 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8020148:	4b0f      	ldr	r3, [pc, #60]	; (8020188 <UTIL_SEQ_Run+0x1e8>)
 802014a:	681a      	ldr	r2, [r3, #0]
 802014c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802014e:	4013      	ands	r3, r2
 8020150:	2b00      	cmp	r3, #0
 8020152:	d101      	bne.n	8020158 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8020154:	f7e2 fe20 	bl	8002d98 <UTIL_SEQ_Idle>
 8020158:	69fb      	ldr	r3, [r7, #28]
 802015a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802015c:	68fb      	ldr	r3, [r7, #12]
 802015e:	f383 8810 	msr	PRIMASK, r3
}
 8020162:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8020164:	f000 f86c 	bl	8020240 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8020168:	4a03      	ldr	r2, [pc, #12]	; (8020178 <UTIL_SEQ_Run+0x1d8>)
 802016a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802016c:	6013      	str	r3, [r2, #0]

  return;
 802016e:	bf00      	nop
}
 8020170:	3740      	adds	r7, #64	; 0x40
 8020172:	46bd      	mov	sp, r7
 8020174:	bd80      	pop	{r7, pc}
 8020176:	bf00      	nop
 8020178:	20000170 	.word	0x20000170
 802017c:	20002548 	.word	0x20002548
 8020180:	2000254c 	.word	0x2000254c
 8020184:	2000016c 	.word	0x2000016c
 8020188:	20002550 	.word	0x20002550
 802018c:	20002568 	.word	0x20002568
 8020190:	20002554 	.word	0x20002554
 8020194:	20002558 	.word	0x20002558

08020198 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8020198:	b580      	push	{r7, lr}
 802019a:	b088      	sub	sp, #32
 802019c:	af00      	add	r7, sp, #0
 802019e:	60f8      	str	r0, [r7, #12]
 80201a0:	60b9      	str	r1, [r7, #8]
 80201a2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80201a4:	f3ef 8310 	mrs	r3, PRIMASK
 80201a8:	617b      	str	r3, [r7, #20]
  return(result);
 80201aa:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80201ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80201ae:	b672      	cpsid	i
}
 80201b0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80201b2:	68f8      	ldr	r0, [r7, #12]
 80201b4:	f000 f84a 	bl	802024c <SEQ_BitPosition>
 80201b8:	4603      	mov	r3, r0
 80201ba:	4619      	mov	r1, r3
 80201bc:	4a06      	ldr	r2, [pc, #24]	; (80201d8 <UTIL_SEQ_RegTask+0x40>)
 80201be:	687b      	ldr	r3, [r7, #4]
 80201c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80201c4:	69fb      	ldr	r3, [r7, #28]
 80201c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80201c8:	69bb      	ldr	r3, [r7, #24]
 80201ca:	f383 8810 	msr	PRIMASK, r3
}
 80201ce:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80201d0:	bf00      	nop
}
 80201d2:	3720      	adds	r7, #32
 80201d4:	46bd      	mov	sp, r7
 80201d6:	bd80      	pop	{r7, pc}
 80201d8:	20002558 	.word	0x20002558

080201dc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80201dc:	b480      	push	{r7}
 80201de:	b087      	sub	sp, #28
 80201e0:	af00      	add	r7, sp, #0
 80201e2:	6078      	str	r0, [r7, #4]
 80201e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80201e6:	f3ef 8310 	mrs	r3, PRIMASK
 80201ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80201ec:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80201ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80201f0:	b672      	cpsid	i
}
 80201f2:	bf00      	nop

  TaskSet |= TaskId_bm;
 80201f4:	4b0d      	ldr	r3, [pc, #52]	; (802022c <UTIL_SEQ_SetTask+0x50>)
 80201f6:	681a      	ldr	r2, [r3, #0]
 80201f8:	687b      	ldr	r3, [r7, #4]
 80201fa:	4313      	orrs	r3, r2
 80201fc:	4a0b      	ldr	r2, [pc, #44]	; (802022c <UTIL_SEQ_SetTask+0x50>)
 80201fe:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8020200:	4a0b      	ldr	r2, [pc, #44]	; (8020230 <UTIL_SEQ_SetTask+0x54>)
 8020202:	683b      	ldr	r3, [r7, #0]
 8020204:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8020208:	687b      	ldr	r3, [r7, #4]
 802020a:	431a      	orrs	r2, r3
 802020c:	4908      	ldr	r1, [pc, #32]	; (8020230 <UTIL_SEQ_SetTask+0x54>)
 802020e:	683b      	ldr	r3, [r7, #0]
 8020210:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8020214:	697b      	ldr	r3, [r7, #20]
 8020216:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020218:	693b      	ldr	r3, [r7, #16]
 802021a:	f383 8810 	msr	PRIMASK, r3
}
 802021e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8020220:	bf00      	nop
}
 8020222:	371c      	adds	r7, #28
 8020224:	46bd      	mov	sp, r7
 8020226:	bc80      	pop	{r7}
 8020228:	4770      	bx	lr
 802022a:	bf00      	nop
 802022c:	20002548 	.word	0x20002548
 8020230:	20002568 	.word	0x20002568

08020234 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8020234:	b480      	push	{r7}
 8020236:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8020238:	bf00      	nop
}
 802023a:	46bd      	mov	sp, r7
 802023c:	bc80      	pop	{r7}
 802023e:	4770      	bx	lr

08020240 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8020240:	b480      	push	{r7}
 8020242:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8020244:	bf00      	nop
}
 8020246:	46bd      	mov	sp, r7
 8020248:	bc80      	pop	{r7}
 802024a:	4770      	bx	lr

0802024c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 802024c:	b480      	push	{r7}
 802024e:	b085      	sub	sp, #20
 8020250:	af00      	add	r7, sp, #0
 8020252:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8020254:	2300      	movs	r3, #0
 8020256:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8020258:	687b      	ldr	r3, [r7, #4]
 802025a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 802025c:	68bb      	ldr	r3, [r7, #8]
 802025e:	0c1b      	lsrs	r3, r3, #16
 8020260:	041b      	lsls	r3, r3, #16
 8020262:	2b00      	cmp	r3, #0
 8020264:	d104      	bne.n	8020270 <SEQ_BitPosition+0x24>
 8020266:	2310      	movs	r3, #16
 8020268:	73fb      	strb	r3, [r7, #15]
 802026a:	68bb      	ldr	r3, [r7, #8]
 802026c:	041b      	lsls	r3, r3, #16
 802026e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8020270:	68bb      	ldr	r3, [r7, #8]
 8020272:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8020276:	2b00      	cmp	r3, #0
 8020278:	d105      	bne.n	8020286 <SEQ_BitPosition+0x3a>
 802027a:	7bfb      	ldrb	r3, [r7, #15]
 802027c:	3308      	adds	r3, #8
 802027e:	73fb      	strb	r3, [r7, #15]
 8020280:	68bb      	ldr	r3, [r7, #8]
 8020282:	021b      	lsls	r3, r3, #8
 8020284:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8020286:	68bb      	ldr	r3, [r7, #8]
 8020288:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 802028c:	2b00      	cmp	r3, #0
 802028e:	d105      	bne.n	802029c <SEQ_BitPosition+0x50>
 8020290:	7bfb      	ldrb	r3, [r7, #15]
 8020292:	3304      	adds	r3, #4
 8020294:	73fb      	strb	r3, [r7, #15]
 8020296:	68bb      	ldr	r3, [r7, #8]
 8020298:	011b      	lsls	r3, r3, #4
 802029a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 802029c:	68bb      	ldr	r3, [r7, #8]
 802029e:	0f1b      	lsrs	r3, r3, #28
 80202a0:	4a06      	ldr	r2, [pc, #24]	; (80202bc <SEQ_BitPosition+0x70>)
 80202a2:	5cd2      	ldrb	r2, [r2, r3]
 80202a4:	7bfb      	ldrb	r3, [r7, #15]
 80202a6:	4413      	add	r3, r2
 80202a8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80202aa:	7bfb      	ldrb	r3, [r7, #15]
 80202ac:	f1c3 031f 	rsb	r3, r3, #31
 80202b0:	b2db      	uxtb	r3, r3
}
 80202b2:	4618      	mov	r0, r3
 80202b4:	3714      	adds	r7, #20
 80202b6:	46bd      	mov	sp, r7
 80202b8:	bc80      	pop	{r7}
 80202ba:	4770      	bx	lr
 80202bc:	08021e38 	.word	0x08021e38

080202c0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80202c0:	b580      	push	{r7, lr}
 80202c2:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80202c4:	4b04      	ldr	r3, [pc, #16]	; (80202d8 <UTIL_TIMER_Init+0x18>)
 80202c6:	2200      	movs	r2, #0
 80202c8:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80202ca:	4b04      	ldr	r3, [pc, #16]	; (80202dc <UTIL_TIMER_Init+0x1c>)
 80202cc:	681b      	ldr	r3, [r3, #0]
 80202ce:	4798      	blx	r3
 80202d0:	4603      	mov	r3, r0
}
 80202d2:	4618      	mov	r0, r3
 80202d4:	bd80      	pop	{r7, pc}
 80202d6:	bf00      	nop
 80202d8:	20002570 	.word	0x20002570
 80202dc:	08021940 	.word	0x08021940

080202e0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 80202e0:	b580      	push	{r7, lr}
 80202e2:	b084      	sub	sp, #16
 80202e4:	af00      	add	r7, sp, #0
 80202e6:	60f8      	str	r0, [r7, #12]
 80202e8:	60b9      	str	r1, [r7, #8]
 80202ea:	603b      	str	r3, [r7, #0]
 80202ec:	4613      	mov	r3, r2
 80202ee:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 80202f0:	68fb      	ldr	r3, [r7, #12]
 80202f2:	2b00      	cmp	r3, #0
 80202f4:	d023      	beq.n	802033e <UTIL_TIMER_Create+0x5e>
 80202f6:	683b      	ldr	r3, [r7, #0]
 80202f8:	2b00      	cmp	r3, #0
 80202fa:	d020      	beq.n	802033e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 80202fc:	68fb      	ldr	r3, [r7, #12]
 80202fe:	2200      	movs	r2, #0
 8020300:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8020302:	4b11      	ldr	r3, [pc, #68]	; (8020348 <UTIL_TIMER_Create+0x68>)
 8020304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020306:	68b8      	ldr	r0, [r7, #8]
 8020308:	4798      	blx	r3
 802030a:	4602      	mov	r2, r0
 802030c:	68fb      	ldr	r3, [r7, #12]
 802030e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8020310:	68fb      	ldr	r3, [r7, #12]
 8020312:	2200      	movs	r2, #0
 8020314:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8020316:	68fb      	ldr	r3, [r7, #12]
 8020318:	2200      	movs	r2, #0
 802031a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 802031c:	68fb      	ldr	r3, [r7, #12]
 802031e:	2200      	movs	r2, #0
 8020320:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8020322:	68fb      	ldr	r3, [r7, #12]
 8020324:	683a      	ldr	r2, [r7, #0]
 8020326:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8020328:	68fb      	ldr	r3, [r7, #12]
 802032a:	69ba      	ldr	r2, [r7, #24]
 802032c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 802032e:	68fb      	ldr	r3, [r7, #12]
 8020330:	79fa      	ldrb	r2, [r7, #7]
 8020332:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8020334:	68fb      	ldr	r3, [r7, #12]
 8020336:	2200      	movs	r2, #0
 8020338:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 802033a:	2300      	movs	r3, #0
 802033c:	e000      	b.n	8020340 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 802033e:	2301      	movs	r3, #1
  }
}
 8020340:	4618      	mov	r0, r3
 8020342:	3710      	adds	r7, #16
 8020344:	46bd      	mov	sp, r7
 8020346:	bd80      	pop	{r7, pc}
 8020348:	08021940 	.word	0x08021940

0802034c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 802034c:	b580      	push	{r7, lr}
 802034e:	b08a      	sub	sp, #40	; 0x28
 8020350:	af00      	add	r7, sp, #0
 8020352:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8020354:	2300      	movs	r3, #0
 8020356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 802035a:	687b      	ldr	r3, [r7, #4]
 802035c:	2b00      	cmp	r3, #0
 802035e:	d056      	beq.n	802040e <UTIL_TIMER_Start+0xc2>
 8020360:	6878      	ldr	r0, [r7, #4]
 8020362:	f000 f9a9 	bl	80206b8 <TimerExists>
 8020366:	4603      	mov	r3, r0
 8020368:	f083 0301 	eor.w	r3, r3, #1
 802036c:	b2db      	uxtb	r3, r3
 802036e:	2b00      	cmp	r3, #0
 8020370:	d04d      	beq.n	802040e <UTIL_TIMER_Start+0xc2>
 8020372:	687b      	ldr	r3, [r7, #4]
 8020374:	7a5b      	ldrb	r3, [r3, #9]
 8020376:	2b00      	cmp	r3, #0
 8020378:	d149      	bne.n	802040e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802037a:	f3ef 8310 	mrs	r3, PRIMASK
 802037e:	613b      	str	r3, [r7, #16]
  return(result);
 8020380:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8020382:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8020384:	b672      	cpsid	i
}
 8020386:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8020388:	687b      	ldr	r3, [r7, #4]
 802038a:	685b      	ldr	r3, [r3, #4]
 802038c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 802038e:	4b24      	ldr	r3, [pc, #144]	; (8020420 <UTIL_TIMER_Start+0xd4>)
 8020390:	6a1b      	ldr	r3, [r3, #32]
 8020392:	4798      	blx	r3
 8020394:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 8020396:	6a3a      	ldr	r2, [r7, #32]
 8020398:	69bb      	ldr	r3, [r7, #24]
 802039a:	429a      	cmp	r2, r3
 802039c:	d201      	bcs.n	80203a2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 802039e:	69bb      	ldr	r3, [r7, #24]
 80203a0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 80203a2:	687b      	ldr	r3, [r7, #4]
 80203a4:	6a3a      	ldr	r2, [r7, #32]
 80203a6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 80203a8:	687b      	ldr	r3, [r7, #4]
 80203aa:	2200      	movs	r2, #0
 80203ac:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 80203ae:	687b      	ldr	r3, [r7, #4]
 80203b0:	2201      	movs	r2, #1
 80203b2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 80203b4:	687b      	ldr	r3, [r7, #4]
 80203b6:	2200      	movs	r2, #0
 80203b8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 80203ba:	4b1a      	ldr	r3, [pc, #104]	; (8020424 <UTIL_TIMER_Start+0xd8>)
 80203bc:	681b      	ldr	r3, [r3, #0]
 80203be:	2b00      	cmp	r3, #0
 80203c0:	d106      	bne.n	80203d0 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 80203c2:	4b17      	ldr	r3, [pc, #92]	; (8020420 <UTIL_TIMER_Start+0xd4>)
 80203c4:	691b      	ldr	r3, [r3, #16]
 80203c6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80203c8:	6878      	ldr	r0, [r7, #4]
 80203ca:	f000 f9eb 	bl	80207a4 <TimerInsertNewHeadTimer>
 80203ce:	e017      	b.n	8020400 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80203d0:	4b13      	ldr	r3, [pc, #76]	; (8020420 <UTIL_TIMER_Start+0xd4>)
 80203d2:	699b      	ldr	r3, [r3, #24]
 80203d4:	4798      	blx	r3
 80203d6:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 80203d8:	687b      	ldr	r3, [r7, #4]
 80203da:	681a      	ldr	r2, [r3, #0]
 80203dc:	697b      	ldr	r3, [r7, #20]
 80203de:	441a      	add	r2, r3
 80203e0:	687b      	ldr	r3, [r7, #4]
 80203e2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80203e4:	687b      	ldr	r3, [r7, #4]
 80203e6:	681a      	ldr	r2, [r3, #0]
 80203e8:	4b0e      	ldr	r3, [pc, #56]	; (8020424 <UTIL_TIMER_Start+0xd8>)
 80203ea:	681b      	ldr	r3, [r3, #0]
 80203ec:	681b      	ldr	r3, [r3, #0]
 80203ee:	429a      	cmp	r2, r3
 80203f0:	d203      	bcs.n	80203fa <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 80203f2:	6878      	ldr	r0, [r7, #4]
 80203f4:	f000 f9d6 	bl	80207a4 <TimerInsertNewHeadTimer>
 80203f8:	e002      	b.n	8020400 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 80203fa:	6878      	ldr	r0, [r7, #4]
 80203fc:	f000 f9a2 	bl	8020744 <TimerInsertTimer>
 8020400:	69fb      	ldr	r3, [r7, #28]
 8020402:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020404:	68fb      	ldr	r3, [r7, #12]
 8020406:	f383 8810 	msr	PRIMASK, r3
}
 802040a:	bf00      	nop
  {
 802040c:	e002      	b.n	8020414 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 802040e:	2301      	movs	r3, #1
 8020410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8020414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8020418:	4618      	mov	r0, r3
 802041a:	3728      	adds	r7, #40	; 0x28
 802041c:	46bd      	mov	sp, r7
 802041e:	bd80      	pop	{r7, pc}
 8020420:	08021940 	.word	0x08021940
 8020424:	20002570 	.word	0x20002570

08020428 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8020428:	b580      	push	{r7, lr}
 802042a:	b088      	sub	sp, #32
 802042c:	af00      	add	r7, sp, #0
 802042e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8020430:	2300      	movs	r3, #0
 8020432:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8020434:	687b      	ldr	r3, [r7, #4]
 8020436:	2b00      	cmp	r3, #0
 8020438:	d05b      	beq.n	80204f2 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802043a:	f3ef 8310 	mrs	r3, PRIMASK
 802043e:	60fb      	str	r3, [r7, #12]
  return(result);
 8020440:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8020442:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8020444:	b672      	cpsid	i
}
 8020446:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8020448:	4b2d      	ldr	r3, [pc, #180]	; (8020500 <UTIL_TIMER_Stop+0xd8>)
 802044a:	681b      	ldr	r3, [r3, #0]
 802044c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 802044e:	4b2c      	ldr	r3, [pc, #176]	; (8020500 <UTIL_TIMER_Stop+0xd8>)
 8020450:	681b      	ldr	r3, [r3, #0]
 8020452:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8020454:	687b      	ldr	r3, [r7, #4]
 8020456:	2201      	movs	r2, #1
 8020458:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 802045a:	4b29      	ldr	r3, [pc, #164]	; (8020500 <UTIL_TIMER_Stop+0xd8>)
 802045c:	681b      	ldr	r3, [r3, #0]
 802045e:	2b00      	cmp	r3, #0
 8020460:	d041      	beq.n	80204e6 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8020462:	687b      	ldr	r3, [r7, #4]
 8020464:	2200      	movs	r2, #0
 8020466:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8020468:	4b25      	ldr	r3, [pc, #148]	; (8020500 <UTIL_TIMER_Stop+0xd8>)
 802046a:	681b      	ldr	r3, [r3, #0]
 802046c:	687a      	ldr	r2, [r7, #4]
 802046e:	429a      	cmp	r2, r3
 8020470:	d134      	bne.n	80204dc <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 8020472:	4b23      	ldr	r3, [pc, #140]	; (8020500 <UTIL_TIMER_Stop+0xd8>)
 8020474:	681b      	ldr	r3, [r3, #0]
 8020476:	2200      	movs	r2, #0
 8020478:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 802047a:	4b21      	ldr	r3, [pc, #132]	; (8020500 <UTIL_TIMER_Stop+0xd8>)
 802047c:	681b      	ldr	r3, [r3, #0]
 802047e:	695b      	ldr	r3, [r3, #20]
 8020480:	2b00      	cmp	r3, #0
 8020482:	d00a      	beq.n	802049a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8020484:	4b1e      	ldr	r3, [pc, #120]	; (8020500 <UTIL_TIMER_Stop+0xd8>)
 8020486:	681b      	ldr	r3, [r3, #0]
 8020488:	695b      	ldr	r3, [r3, #20]
 802048a:	4a1d      	ldr	r2, [pc, #116]	; (8020500 <UTIL_TIMER_Stop+0xd8>)
 802048c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 802048e:	4b1c      	ldr	r3, [pc, #112]	; (8020500 <UTIL_TIMER_Stop+0xd8>)
 8020490:	681b      	ldr	r3, [r3, #0]
 8020492:	4618      	mov	r0, r3
 8020494:	f000 f92c 	bl	80206f0 <TimerSetTimeout>
 8020498:	e023      	b.n	80204e2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 802049a:	4b1a      	ldr	r3, [pc, #104]	; (8020504 <UTIL_TIMER_Stop+0xdc>)
 802049c:	68db      	ldr	r3, [r3, #12]
 802049e:	4798      	blx	r3
            TimerListHead = NULL;
 80204a0:	4b17      	ldr	r3, [pc, #92]	; (8020500 <UTIL_TIMER_Stop+0xd8>)
 80204a2:	2200      	movs	r2, #0
 80204a4:	601a      	str	r2, [r3, #0]
 80204a6:	e01c      	b.n	80204e2 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 80204a8:	697a      	ldr	r2, [r7, #20]
 80204aa:	687b      	ldr	r3, [r7, #4]
 80204ac:	429a      	cmp	r2, r3
 80204ae:	d110      	bne.n	80204d2 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 80204b0:	697b      	ldr	r3, [r7, #20]
 80204b2:	695b      	ldr	r3, [r3, #20]
 80204b4:	2b00      	cmp	r3, #0
 80204b6:	d006      	beq.n	80204c6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 80204b8:	697b      	ldr	r3, [r7, #20]
 80204ba:	695b      	ldr	r3, [r3, #20]
 80204bc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80204be:	69bb      	ldr	r3, [r7, #24]
 80204c0:	697a      	ldr	r2, [r7, #20]
 80204c2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 80204c4:	e00d      	b.n	80204e2 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 80204c6:	2300      	movs	r3, #0
 80204c8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80204ca:	69bb      	ldr	r3, [r7, #24]
 80204cc:	697a      	ldr	r2, [r7, #20]
 80204ce:	615a      	str	r2, [r3, #20]
            break;
 80204d0:	e007      	b.n	80204e2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 80204d2:	697b      	ldr	r3, [r7, #20]
 80204d4:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 80204d6:	697b      	ldr	r3, [r7, #20]
 80204d8:	695b      	ldr	r3, [r3, #20]
 80204da:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 80204dc:	697b      	ldr	r3, [r7, #20]
 80204de:	2b00      	cmp	r3, #0
 80204e0:	d1e2      	bne.n	80204a8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 80204e2:	2300      	movs	r3, #0
 80204e4:	77fb      	strb	r3, [r7, #31]
 80204e6:	693b      	ldr	r3, [r7, #16]
 80204e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80204ea:	68bb      	ldr	r3, [r7, #8]
 80204ec:	f383 8810 	msr	PRIMASK, r3
}
 80204f0:	e001      	b.n	80204f6 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 80204f2:	2301      	movs	r3, #1
 80204f4:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 80204f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80204f8:	4618      	mov	r0, r3
 80204fa:	3720      	adds	r7, #32
 80204fc:	46bd      	mov	sp, r7
 80204fe:	bd80      	pop	{r7, pc}
 8020500:	20002570 	.word	0x20002570
 8020504:	08021940 	.word	0x08021940

08020508 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8020508:	b580      	push	{r7, lr}
 802050a:	b084      	sub	sp, #16
 802050c:	af00      	add	r7, sp, #0
 802050e:	6078      	str	r0, [r7, #4]
 8020510:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8020512:	2300      	movs	r3, #0
 8020514:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 8020516:	687b      	ldr	r3, [r7, #4]
 8020518:	2b00      	cmp	r3, #0
 802051a:	d102      	bne.n	8020522 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 802051c:	2301      	movs	r3, #1
 802051e:	73fb      	strb	r3, [r7, #15]
 8020520:	e014      	b.n	802054c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8020522:	4b0d      	ldr	r3, [pc, #52]	; (8020558 <UTIL_TIMER_SetPeriod+0x50>)
 8020524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020526:	6838      	ldr	r0, [r7, #0]
 8020528:	4798      	blx	r3
 802052a:	4602      	mov	r2, r0
 802052c:	687b      	ldr	r3, [r7, #4]
 802052e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8020530:	6878      	ldr	r0, [r7, #4]
 8020532:	f000 f8c1 	bl	80206b8 <TimerExists>
 8020536:	4603      	mov	r3, r0
 8020538:	2b00      	cmp	r3, #0
 802053a:	d007      	beq.n	802054c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 802053c:	6878      	ldr	r0, [r7, #4]
 802053e:	f7ff ff73 	bl	8020428 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8020542:	6878      	ldr	r0, [r7, #4]
 8020544:	f7ff ff02 	bl	802034c <UTIL_TIMER_Start>
 8020548:	4603      	mov	r3, r0
 802054a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 802054c:	7bfb      	ldrb	r3, [r7, #15]
}
 802054e:	4618      	mov	r0, r3
 8020550:	3710      	adds	r7, #16
 8020552:	46bd      	mov	sp, r7
 8020554:	bd80      	pop	{r7, pc}
 8020556:	bf00      	nop
 8020558:	08021940 	.word	0x08021940

0802055c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 802055c:	b590      	push	{r4, r7, lr}
 802055e:	b089      	sub	sp, #36	; 0x24
 8020560:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020562:	f3ef 8310 	mrs	r3, PRIMASK
 8020566:	60bb      	str	r3, [r7, #8]
  return(result);
 8020568:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 802056a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 802056c:	b672      	cpsid	i
}
 802056e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 8020570:	4b38      	ldr	r3, [pc, #224]	; (8020654 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8020572:	695b      	ldr	r3, [r3, #20]
 8020574:	4798      	blx	r3
 8020576:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8020578:	4b36      	ldr	r3, [pc, #216]	; (8020654 <UTIL_TIMER_IRQ_Handler+0xf8>)
 802057a:	691b      	ldr	r3, [r3, #16]
 802057c:	4798      	blx	r3
 802057e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 8020580:	693a      	ldr	r2, [r7, #16]
 8020582:	697b      	ldr	r3, [r7, #20]
 8020584:	1ad3      	subs	r3, r2, r3
 8020586:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 8020588:	4b33      	ldr	r3, [pc, #204]	; (8020658 <UTIL_TIMER_IRQ_Handler+0xfc>)
 802058a:	681b      	ldr	r3, [r3, #0]
 802058c:	2b00      	cmp	r3, #0
 802058e:	d037      	beq.n	8020600 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 8020590:	4b31      	ldr	r3, [pc, #196]	; (8020658 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8020592:	681b      	ldr	r3, [r3, #0]
 8020594:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 8020596:	69fb      	ldr	r3, [r7, #28]
 8020598:	681b      	ldr	r3, [r3, #0]
 802059a:	68fa      	ldr	r2, [r7, #12]
 802059c:	429a      	cmp	r2, r3
 802059e:	d206      	bcs.n	80205ae <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 80205a0:	69fb      	ldr	r3, [r7, #28]
 80205a2:	681a      	ldr	r2, [r3, #0]
 80205a4:	68fb      	ldr	r3, [r7, #12]
 80205a6:	1ad2      	subs	r2, r2, r3
 80205a8:	69fb      	ldr	r3, [r7, #28]
 80205aa:	601a      	str	r2, [r3, #0]
 80205ac:	e002      	b.n	80205b4 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 80205ae:	69fb      	ldr	r3, [r7, #28]
 80205b0:	2200      	movs	r2, #0
 80205b2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 80205b4:	69fb      	ldr	r3, [r7, #28]
 80205b6:	695b      	ldr	r3, [r3, #20]
 80205b8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 80205ba:	69fb      	ldr	r3, [r7, #28]
 80205bc:	2b00      	cmp	r3, #0
 80205be:	d1ea      	bne.n	8020596 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80205c0:	e01e      	b.n	8020600 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 80205c2:	4b25      	ldr	r3, [pc, #148]	; (8020658 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80205c4:	681b      	ldr	r3, [r3, #0]
 80205c6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 80205c8:	4b23      	ldr	r3, [pc, #140]	; (8020658 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80205ca:	681b      	ldr	r3, [r3, #0]
 80205cc:	695b      	ldr	r3, [r3, #20]
 80205ce:	4a22      	ldr	r2, [pc, #136]	; (8020658 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80205d0:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 80205d2:	69fb      	ldr	r3, [r7, #28]
 80205d4:	2200      	movs	r2, #0
 80205d6:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 80205d8:	69fb      	ldr	r3, [r7, #28]
 80205da:	2200      	movs	r2, #0
 80205dc:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 80205de:	69fb      	ldr	r3, [r7, #28]
 80205e0:	68db      	ldr	r3, [r3, #12]
 80205e2:	69fa      	ldr	r2, [r7, #28]
 80205e4:	6912      	ldr	r2, [r2, #16]
 80205e6:	4610      	mov	r0, r2
 80205e8:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80205ea:	69fb      	ldr	r3, [r7, #28]
 80205ec:	7adb      	ldrb	r3, [r3, #11]
 80205ee:	2b01      	cmp	r3, #1
 80205f0:	d106      	bne.n	8020600 <UTIL_TIMER_IRQ_Handler+0xa4>
 80205f2:	69fb      	ldr	r3, [r7, #28]
 80205f4:	7a9b      	ldrb	r3, [r3, #10]
 80205f6:	2b00      	cmp	r3, #0
 80205f8:	d102      	bne.n	8020600 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 80205fa:	69f8      	ldr	r0, [r7, #28]
 80205fc:	f7ff fea6 	bl	802034c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8020600:	4b15      	ldr	r3, [pc, #84]	; (8020658 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8020602:	681b      	ldr	r3, [r3, #0]
 8020604:	2b00      	cmp	r3, #0
 8020606:	d00d      	beq.n	8020624 <UTIL_TIMER_IRQ_Handler+0xc8>
 8020608:	4b13      	ldr	r3, [pc, #76]	; (8020658 <UTIL_TIMER_IRQ_Handler+0xfc>)
 802060a:	681b      	ldr	r3, [r3, #0]
 802060c:	681b      	ldr	r3, [r3, #0]
 802060e:	2b00      	cmp	r3, #0
 8020610:	d0d7      	beq.n	80205c2 <UTIL_TIMER_IRQ_Handler+0x66>
 8020612:	4b11      	ldr	r3, [pc, #68]	; (8020658 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8020614:	681b      	ldr	r3, [r3, #0]
 8020616:	681c      	ldr	r4, [r3, #0]
 8020618:	4b0e      	ldr	r3, [pc, #56]	; (8020654 <UTIL_TIMER_IRQ_Handler+0xf8>)
 802061a:	699b      	ldr	r3, [r3, #24]
 802061c:	4798      	blx	r3
 802061e:	4603      	mov	r3, r0
 8020620:	429c      	cmp	r4, r3
 8020622:	d3ce      	bcc.n	80205c2 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8020624:	4b0c      	ldr	r3, [pc, #48]	; (8020658 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8020626:	681b      	ldr	r3, [r3, #0]
 8020628:	2b00      	cmp	r3, #0
 802062a:	d009      	beq.n	8020640 <UTIL_TIMER_IRQ_Handler+0xe4>
 802062c:	4b0a      	ldr	r3, [pc, #40]	; (8020658 <UTIL_TIMER_IRQ_Handler+0xfc>)
 802062e:	681b      	ldr	r3, [r3, #0]
 8020630:	7a1b      	ldrb	r3, [r3, #8]
 8020632:	2b00      	cmp	r3, #0
 8020634:	d104      	bne.n	8020640 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 8020636:	4b08      	ldr	r3, [pc, #32]	; (8020658 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8020638:	681b      	ldr	r3, [r3, #0]
 802063a:	4618      	mov	r0, r3
 802063c:	f000 f858 	bl	80206f0 <TimerSetTimeout>
 8020640:	69bb      	ldr	r3, [r7, #24]
 8020642:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020644:	687b      	ldr	r3, [r7, #4]
 8020646:	f383 8810 	msr	PRIMASK, r3
}
 802064a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 802064c:	bf00      	nop
 802064e:	3724      	adds	r7, #36	; 0x24
 8020650:	46bd      	mov	sp, r7
 8020652:	bd90      	pop	{r4, r7, pc}
 8020654:	08021940 	.word	0x08021940
 8020658:	20002570 	.word	0x20002570

0802065c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 802065c:	b580      	push	{r7, lr}
 802065e:	b082      	sub	sp, #8
 8020660:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8020662:	4b06      	ldr	r3, [pc, #24]	; (802067c <UTIL_TIMER_GetCurrentTime+0x20>)
 8020664:	69db      	ldr	r3, [r3, #28]
 8020666:	4798      	blx	r3
 8020668:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 802066a:	4b04      	ldr	r3, [pc, #16]	; (802067c <UTIL_TIMER_GetCurrentTime+0x20>)
 802066c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802066e:	6878      	ldr	r0, [r7, #4]
 8020670:	4798      	blx	r3
 8020672:	4603      	mov	r3, r0
}
 8020674:	4618      	mov	r0, r3
 8020676:	3708      	adds	r7, #8
 8020678:	46bd      	mov	sp, r7
 802067a:	bd80      	pop	{r7, pc}
 802067c:	08021940 	.word	0x08021940

08020680 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8020680:	b580      	push	{r7, lr}
 8020682:	b084      	sub	sp, #16
 8020684:	af00      	add	r7, sp, #0
 8020686:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8020688:	4b0a      	ldr	r3, [pc, #40]	; (80206b4 <UTIL_TIMER_GetElapsedTime+0x34>)
 802068a:	69db      	ldr	r3, [r3, #28]
 802068c:	4798      	blx	r3
 802068e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8020690:	4b08      	ldr	r3, [pc, #32]	; (80206b4 <UTIL_TIMER_GetElapsedTime+0x34>)
 8020692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020694:	6878      	ldr	r0, [r7, #4]
 8020696:	4798      	blx	r3
 8020698:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 802069a:	4b06      	ldr	r3, [pc, #24]	; (80206b4 <UTIL_TIMER_GetElapsedTime+0x34>)
 802069c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802069e:	68f9      	ldr	r1, [r7, #12]
 80206a0:	68ba      	ldr	r2, [r7, #8]
 80206a2:	1a8a      	subs	r2, r1, r2
 80206a4:	4610      	mov	r0, r2
 80206a6:	4798      	blx	r3
 80206a8:	4603      	mov	r3, r0
}
 80206aa:	4618      	mov	r0, r3
 80206ac:	3710      	adds	r7, #16
 80206ae:	46bd      	mov	sp, r7
 80206b0:	bd80      	pop	{r7, pc}
 80206b2:	bf00      	nop
 80206b4:	08021940 	.word	0x08021940

080206b8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 80206b8:	b480      	push	{r7}
 80206ba:	b085      	sub	sp, #20
 80206bc:	af00      	add	r7, sp, #0
 80206be:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80206c0:	4b0a      	ldr	r3, [pc, #40]	; (80206ec <TimerExists+0x34>)
 80206c2:	681b      	ldr	r3, [r3, #0]
 80206c4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 80206c6:	e008      	b.n	80206da <TimerExists+0x22>
  {
    if( cur == TimerObject )
 80206c8:	68fa      	ldr	r2, [r7, #12]
 80206ca:	687b      	ldr	r3, [r7, #4]
 80206cc:	429a      	cmp	r2, r3
 80206ce:	d101      	bne.n	80206d4 <TimerExists+0x1c>
    {
      return true;
 80206d0:	2301      	movs	r3, #1
 80206d2:	e006      	b.n	80206e2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 80206d4:	68fb      	ldr	r3, [r7, #12]
 80206d6:	695b      	ldr	r3, [r3, #20]
 80206d8:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 80206da:	68fb      	ldr	r3, [r7, #12]
 80206dc:	2b00      	cmp	r3, #0
 80206de:	d1f3      	bne.n	80206c8 <TimerExists+0x10>
  }
  return false;
 80206e0:	2300      	movs	r3, #0
}
 80206e2:	4618      	mov	r0, r3
 80206e4:	3714      	adds	r7, #20
 80206e6:	46bd      	mov	sp, r7
 80206e8:	bc80      	pop	{r7}
 80206ea:	4770      	bx	lr
 80206ec:	20002570 	.word	0x20002570

080206f0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80206f0:	b590      	push	{r4, r7, lr}
 80206f2:	b085      	sub	sp, #20
 80206f4:	af00      	add	r7, sp, #0
 80206f6:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80206f8:	4b11      	ldr	r3, [pc, #68]	; (8020740 <TimerSetTimeout+0x50>)
 80206fa:	6a1b      	ldr	r3, [r3, #32]
 80206fc:	4798      	blx	r3
 80206fe:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 8020700:	687b      	ldr	r3, [r7, #4]
 8020702:	2201      	movs	r2, #1
 8020704:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8020706:	687b      	ldr	r3, [r7, #4]
 8020708:	681c      	ldr	r4, [r3, #0]
 802070a:	4b0d      	ldr	r3, [pc, #52]	; (8020740 <TimerSetTimeout+0x50>)
 802070c:	699b      	ldr	r3, [r3, #24]
 802070e:	4798      	blx	r3
 8020710:	4602      	mov	r2, r0
 8020712:	68fb      	ldr	r3, [r7, #12]
 8020714:	4413      	add	r3, r2
 8020716:	429c      	cmp	r4, r3
 8020718:	d207      	bcs.n	802072a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 802071a:	4b09      	ldr	r3, [pc, #36]	; (8020740 <TimerSetTimeout+0x50>)
 802071c:	699b      	ldr	r3, [r3, #24]
 802071e:	4798      	blx	r3
 8020720:	4602      	mov	r2, r0
 8020722:	68fb      	ldr	r3, [r7, #12]
 8020724:	441a      	add	r2, r3
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 802072a:	4b05      	ldr	r3, [pc, #20]	; (8020740 <TimerSetTimeout+0x50>)
 802072c:	689b      	ldr	r3, [r3, #8]
 802072e:	687a      	ldr	r2, [r7, #4]
 8020730:	6812      	ldr	r2, [r2, #0]
 8020732:	4610      	mov	r0, r2
 8020734:	4798      	blx	r3
}
 8020736:	bf00      	nop
 8020738:	3714      	adds	r7, #20
 802073a:	46bd      	mov	sp, r7
 802073c:	bd90      	pop	{r4, r7, pc}
 802073e:	bf00      	nop
 8020740:	08021940 	.word	0x08021940

08020744 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8020744:	b480      	push	{r7}
 8020746:	b085      	sub	sp, #20
 8020748:	af00      	add	r7, sp, #0
 802074a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 802074c:	4b14      	ldr	r3, [pc, #80]	; (80207a0 <TimerInsertTimer+0x5c>)
 802074e:	681b      	ldr	r3, [r3, #0]
 8020750:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8020752:	4b13      	ldr	r3, [pc, #76]	; (80207a0 <TimerInsertTimer+0x5c>)
 8020754:	681b      	ldr	r3, [r3, #0]
 8020756:	695b      	ldr	r3, [r3, #20]
 8020758:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 802075a:	e012      	b.n	8020782 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 802075c:	687b      	ldr	r3, [r7, #4]
 802075e:	681a      	ldr	r2, [r3, #0]
 8020760:	68bb      	ldr	r3, [r7, #8]
 8020762:	681b      	ldr	r3, [r3, #0]
 8020764:	429a      	cmp	r2, r3
 8020766:	d905      	bls.n	8020774 <TimerInsertTimer+0x30>
    {
        cur = next;
 8020768:	68bb      	ldr	r3, [r7, #8]
 802076a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 802076c:	68bb      	ldr	r3, [r7, #8]
 802076e:	695b      	ldr	r3, [r3, #20]
 8020770:	60bb      	str	r3, [r7, #8]
 8020772:	e006      	b.n	8020782 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8020774:	68fb      	ldr	r3, [r7, #12]
 8020776:	687a      	ldr	r2, [r7, #4]
 8020778:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 802077a:	687b      	ldr	r3, [r7, #4]
 802077c:	68ba      	ldr	r2, [r7, #8]
 802077e:	615a      	str	r2, [r3, #20]
        return;
 8020780:	e009      	b.n	8020796 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8020782:	68fb      	ldr	r3, [r7, #12]
 8020784:	695b      	ldr	r3, [r3, #20]
 8020786:	2b00      	cmp	r3, #0
 8020788:	d1e8      	bne.n	802075c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 802078a:	68fb      	ldr	r3, [r7, #12]
 802078c:	687a      	ldr	r2, [r7, #4]
 802078e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8020790:	687b      	ldr	r3, [r7, #4]
 8020792:	2200      	movs	r2, #0
 8020794:	615a      	str	r2, [r3, #20]
}
 8020796:	3714      	adds	r7, #20
 8020798:	46bd      	mov	sp, r7
 802079a:	bc80      	pop	{r7}
 802079c:	4770      	bx	lr
 802079e:	bf00      	nop
 80207a0:	20002570 	.word	0x20002570

080207a4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80207a4:	b580      	push	{r7, lr}
 80207a6:	b084      	sub	sp, #16
 80207a8:	af00      	add	r7, sp, #0
 80207aa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80207ac:	4b0b      	ldr	r3, [pc, #44]	; (80207dc <TimerInsertNewHeadTimer+0x38>)
 80207ae:	681b      	ldr	r3, [r3, #0]
 80207b0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 80207b2:	68fb      	ldr	r3, [r7, #12]
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	d002      	beq.n	80207be <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 80207b8:	68fb      	ldr	r3, [r7, #12]
 80207ba:	2200      	movs	r2, #0
 80207bc:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80207be:	687b      	ldr	r3, [r7, #4]
 80207c0:	68fa      	ldr	r2, [r7, #12]
 80207c2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 80207c4:	4a05      	ldr	r2, [pc, #20]	; (80207dc <TimerInsertNewHeadTimer+0x38>)
 80207c6:	687b      	ldr	r3, [r7, #4]
 80207c8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 80207ca:	4b04      	ldr	r3, [pc, #16]	; (80207dc <TimerInsertNewHeadTimer+0x38>)
 80207cc:	681b      	ldr	r3, [r3, #0]
 80207ce:	4618      	mov	r0, r3
 80207d0:	f7ff ff8e 	bl	80206f0 <TimerSetTimeout>
}
 80207d4:	bf00      	nop
 80207d6:	3710      	adds	r7, #16
 80207d8:	46bd      	mov	sp, r7
 80207da:	bd80      	pop	{r7, pc}
 80207dc:	20002570 	.word	0x20002570

080207e0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 80207e0:	b580      	push	{r7, lr}
 80207e2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 80207e4:	2218      	movs	r2, #24
 80207e6:	2100      	movs	r1, #0
 80207e8:	4807      	ldr	r0, [pc, #28]	; (8020808 <UTIL_ADV_TRACE_Init+0x28>)
 80207ea:	f7fe fff6 	bl	801f7da <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 80207ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80207f2:	2100      	movs	r1, #0
 80207f4:	4805      	ldr	r0, [pc, #20]	; (802080c <UTIL_ADV_TRACE_Init+0x2c>)
 80207f6:	f7fe fff0 	bl	801f7da <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 80207fa:	4b05      	ldr	r3, [pc, #20]	; (8020810 <UTIL_ADV_TRACE_Init+0x30>)
 80207fc:	681b      	ldr	r3, [r3, #0]
 80207fe:	4805      	ldr	r0, [pc, #20]	; (8020814 <UTIL_ADV_TRACE_Init+0x34>)
 8020800:	4798      	blx	r3
 8020802:	4603      	mov	r3, r0
}
 8020804:	4618      	mov	r0, r3
 8020806:	bd80      	pop	{r7, pc}
 8020808:	20002574 	.word	0x20002574
 802080c:	2000258c 	.word	0x2000258c
 8020810:	08021980 	.word	0x08021980
 8020814:	08020a81 	.word	0x08020a81

08020818 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 8020818:	b480      	push	{r7}
 802081a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 802081c:	4b06      	ldr	r3, [pc, #24]	; (8020838 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 802081e:	8a5a      	ldrh	r2, [r3, #18]
 8020820:	4b05      	ldr	r3, [pc, #20]	; (8020838 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 8020822:	8a1b      	ldrh	r3, [r3, #16]
 8020824:	429a      	cmp	r2, r3
 8020826:	d101      	bne.n	802082c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 8020828:	2301      	movs	r3, #1
 802082a:	e000      	b.n	802082e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 802082c:	2300      	movs	r3, #0
}
 802082e:	4618      	mov	r0, r3
 8020830:	46bd      	mov	sp, r7
 8020832:	bc80      	pop	{r7}
 8020834:	4770      	bx	lr
 8020836:	bf00      	nop
 8020838:	20002574 	.word	0x20002574

0802083c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 802083c:	b408      	push	{r3}
 802083e:	b580      	push	{r7, lr}
 8020840:	b08d      	sub	sp, #52	; 0x34
 8020842:	af00      	add	r7, sp, #0
 8020844:	60f8      	str	r0, [r7, #12]
 8020846:	60b9      	str	r1, [r7, #8]
 8020848:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 802084a:	2300      	movs	r3, #0
 802084c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 802084e:	2300      	movs	r3, #0
 8020850:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8020852:	4b37      	ldr	r3, [pc, #220]	; (8020930 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8020854:	7a1b      	ldrb	r3, [r3, #8]
 8020856:	461a      	mov	r2, r3
 8020858:	68fb      	ldr	r3, [r7, #12]
 802085a:	4293      	cmp	r3, r2
 802085c:	d902      	bls.n	8020864 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 802085e:	f06f 0304 	mvn.w	r3, #4
 8020862:	e05e      	b.n	8020922 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8020864:	4b32      	ldr	r3, [pc, #200]	; (8020930 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8020866:	68da      	ldr	r2, [r3, #12]
 8020868:	68bb      	ldr	r3, [r7, #8]
 802086a:	4013      	ands	r3, r2
 802086c:	68ba      	ldr	r2, [r7, #8]
 802086e:	429a      	cmp	r2, r3
 8020870:	d002      	beq.n	8020878 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 8020872:	f06f 0305 	mvn.w	r3, #5
 8020876:	e054      	b.n	8020922 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8020878:	4b2d      	ldr	r3, [pc, #180]	; (8020930 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 802087a:	685b      	ldr	r3, [r3, #4]
 802087c:	2b00      	cmp	r3, #0
 802087e:	d00a      	beq.n	8020896 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 8020880:	687b      	ldr	r3, [r7, #4]
 8020882:	2b00      	cmp	r3, #0
 8020884:	d007      	beq.n	8020896 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8020886:	4b2a      	ldr	r3, [pc, #168]	; (8020930 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8020888:	685b      	ldr	r3, [r3, #4]
 802088a:	f107 0116 	add.w	r1, r7, #22
 802088e:	f107 0218 	add.w	r2, r7, #24
 8020892:	4610      	mov	r0, r2
 8020894:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 8020896:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802089a:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 802089c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802089e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80208a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80208a4:	4823      	ldr	r0, [pc, #140]	; (8020934 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 80208a6:	f7ff fa25 	bl	801fcf4 <tiny_vsnprintf_like>
 80208aa:	4603      	mov	r3, r0
 80208ac:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 80208ae:	f000 f9f1 	bl	8020c94 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 80208b2:	8afa      	ldrh	r2, [r7, #22]
 80208b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80208b6:	4413      	add	r3, r2
 80208b8:	b29b      	uxth	r3, r3
 80208ba:	f107 0214 	add.w	r2, r7, #20
 80208be:	4611      	mov	r1, r2
 80208c0:	4618      	mov	r0, r3
 80208c2:	f000 f969 	bl	8020b98 <TRACE_AllocateBufer>
 80208c6:	4603      	mov	r3, r0
 80208c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80208cc:	d025      	beq.n	802091a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 80208ce:	2300      	movs	r3, #0
 80208d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80208d2:	e00e      	b.n	80208f2 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 80208d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80208d6:	8aba      	ldrh	r2, [r7, #20]
 80208d8:	3330      	adds	r3, #48	; 0x30
 80208da:	443b      	add	r3, r7
 80208dc:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 80208e0:	4b15      	ldr	r3, [pc, #84]	; (8020938 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 80208e2:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 80208e4:	8abb      	ldrh	r3, [r7, #20]
 80208e6:	3301      	adds	r3, #1
 80208e8:	b29b      	uxth	r3, r3
 80208ea:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 80208ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80208ee:	3301      	adds	r3, #1
 80208f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80208f2:	8afb      	ldrh	r3, [r7, #22]
 80208f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80208f6:	429a      	cmp	r2, r3
 80208f8:	d3ec      	bcc.n	80208d4 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80208fa:	8abb      	ldrh	r3, [r7, #20]
 80208fc:	461a      	mov	r2, r3
 80208fe:	4b0e      	ldr	r3, [pc, #56]	; (8020938 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 8020900:	18d0      	adds	r0, r2, r3
 8020902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020904:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020906:	f44f 7100 	mov.w	r1, #512	; 0x200
 802090a:	f7ff f9f3 	bl	801fcf4 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 802090e:	f000 f9df 	bl	8020cd0 <TRACE_UnLock>

    return TRACE_Send();
 8020912:	f000 f831 	bl	8020978 <TRACE_Send>
 8020916:	4603      	mov	r3, r0
 8020918:	e003      	b.n	8020922 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 802091a:	f000 f9d9 	bl	8020cd0 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 802091e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 8020922:	4618      	mov	r0, r3
 8020924:	3734      	adds	r7, #52	; 0x34
 8020926:	46bd      	mov	sp, r7
 8020928:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802092c:	b001      	add	sp, #4
 802092e:	4770      	bx	lr
 8020930:	20002574 	.word	0x20002574
 8020934:	2000298c 	.word	0x2000298c
 8020938:	2000258c 	.word	0x2000258c

0802093c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 802093c:	b480      	push	{r7}
 802093e:	b083      	sub	sp, #12
 8020940:	af00      	add	r7, sp, #0
 8020942:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8020944:	4a03      	ldr	r2, [pc, #12]	; (8020954 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 8020946:	687b      	ldr	r3, [r7, #4]
 8020948:	6053      	str	r3, [r2, #4]
}
 802094a:	bf00      	nop
 802094c:	370c      	adds	r7, #12
 802094e:	46bd      	mov	sp, r7
 8020950:	bc80      	pop	{r7}
 8020952:	4770      	bx	lr
 8020954:	20002574 	.word	0x20002574

08020958 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 8020958:	b480      	push	{r7}
 802095a:	b083      	sub	sp, #12
 802095c:	af00      	add	r7, sp, #0
 802095e:	4603      	mov	r3, r0
 8020960:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8020962:	4a04      	ldr	r2, [pc, #16]	; (8020974 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 8020964:	79fb      	ldrb	r3, [r7, #7]
 8020966:	7213      	strb	r3, [r2, #8]
}
 8020968:	bf00      	nop
 802096a:	370c      	adds	r7, #12
 802096c:	46bd      	mov	sp, r7
 802096e:	bc80      	pop	{r7}
 8020970:	4770      	bx	lr
 8020972:	bf00      	nop
 8020974:	20002574 	.word	0x20002574

08020978 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 8020978:	b580      	push	{r7, lr}
 802097a:	b088      	sub	sp, #32
 802097c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 802097e:	2300      	movs	r3, #0
 8020980:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 8020982:	2300      	movs	r3, #0
 8020984:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020986:	f3ef 8310 	mrs	r3, PRIMASK
 802098a:	613b      	str	r3, [r7, #16]
  return(result);
 802098c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 802098e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8020990:	b672      	cpsid	i
}
 8020992:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 8020994:	f000 f9ba 	bl	8020d0c <TRACE_IsLocked>
 8020998:	4603      	mov	r3, r0
 802099a:	2b00      	cmp	r3, #0
 802099c:	d15d      	bne.n	8020a5a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 802099e:	f000 f979 	bl	8020c94 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 80209a2:	4b34      	ldr	r3, [pc, #208]	; (8020a74 <TRACE_Send+0xfc>)
 80209a4:	8a1a      	ldrh	r2, [r3, #16]
 80209a6:	4b33      	ldr	r3, [pc, #204]	; (8020a74 <TRACE_Send+0xfc>)
 80209a8:	8a5b      	ldrh	r3, [r3, #18]
 80209aa:	429a      	cmp	r2, r3
 80209ac:	d04d      	beq.n	8020a4a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80209ae:	4b31      	ldr	r3, [pc, #196]	; (8020a74 <TRACE_Send+0xfc>)
 80209b0:	789b      	ldrb	r3, [r3, #2]
 80209b2:	2b01      	cmp	r3, #1
 80209b4:	d117      	bne.n	80209e6 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80209b6:	4b2f      	ldr	r3, [pc, #188]	; (8020a74 <TRACE_Send+0xfc>)
 80209b8:	881a      	ldrh	r2, [r3, #0]
 80209ba:	4b2e      	ldr	r3, [pc, #184]	; (8020a74 <TRACE_Send+0xfc>)
 80209bc:	8a1b      	ldrh	r3, [r3, #16]
 80209be:	1ad3      	subs	r3, r2, r3
 80209c0:	b29a      	uxth	r2, r3
 80209c2:	4b2c      	ldr	r3, [pc, #176]	; (8020a74 <TRACE_Send+0xfc>)
 80209c4:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80209c6:	4b2b      	ldr	r3, [pc, #172]	; (8020a74 <TRACE_Send+0xfc>)
 80209c8:	2202      	movs	r2, #2
 80209ca:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 80209cc:	4b29      	ldr	r3, [pc, #164]	; (8020a74 <TRACE_Send+0xfc>)
 80209ce:	2200      	movs	r2, #0
 80209d0:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80209d2:	4b28      	ldr	r3, [pc, #160]	; (8020a74 <TRACE_Send+0xfc>)
 80209d4:	8a9b      	ldrh	r3, [r3, #20]
 80209d6:	2b00      	cmp	r3, #0
 80209d8:	d105      	bne.n	80209e6 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80209da:	4b26      	ldr	r3, [pc, #152]	; (8020a74 <TRACE_Send+0xfc>)
 80209dc:	2200      	movs	r2, #0
 80209de:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 80209e0:	4b24      	ldr	r3, [pc, #144]	; (8020a74 <TRACE_Send+0xfc>)
 80209e2:	2200      	movs	r2, #0
 80209e4:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80209e6:	4b23      	ldr	r3, [pc, #140]	; (8020a74 <TRACE_Send+0xfc>)
 80209e8:	789b      	ldrb	r3, [r3, #2]
 80209ea:	2b00      	cmp	r3, #0
 80209ec:	d115      	bne.n	8020a1a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80209ee:	4b21      	ldr	r3, [pc, #132]	; (8020a74 <TRACE_Send+0xfc>)
 80209f0:	8a5a      	ldrh	r2, [r3, #18]
 80209f2:	4b20      	ldr	r3, [pc, #128]	; (8020a74 <TRACE_Send+0xfc>)
 80209f4:	8a1b      	ldrh	r3, [r3, #16]
 80209f6:	429a      	cmp	r2, r3
 80209f8:	d908      	bls.n	8020a0c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80209fa:	4b1e      	ldr	r3, [pc, #120]	; (8020a74 <TRACE_Send+0xfc>)
 80209fc:	8a5a      	ldrh	r2, [r3, #18]
 80209fe:	4b1d      	ldr	r3, [pc, #116]	; (8020a74 <TRACE_Send+0xfc>)
 8020a00:	8a1b      	ldrh	r3, [r3, #16]
 8020a02:	1ad3      	subs	r3, r2, r3
 8020a04:	b29a      	uxth	r2, r3
 8020a06:	4b1b      	ldr	r3, [pc, #108]	; (8020a74 <TRACE_Send+0xfc>)
 8020a08:	829a      	strh	r2, [r3, #20]
 8020a0a:	e006      	b.n	8020a1a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8020a0c:	4b19      	ldr	r3, [pc, #100]	; (8020a74 <TRACE_Send+0xfc>)
 8020a0e:	8a1b      	ldrh	r3, [r3, #16]
 8020a10:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8020a14:	b29a      	uxth	r2, r3
 8020a16:	4b17      	ldr	r3, [pc, #92]	; (8020a74 <TRACE_Send+0xfc>)
 8020a18:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8020a1a:	4b16      	ldr	r3, [pc, #88]	; (8020a74 <TRACE_Send+0xfc>)
 8020a1c:	8a1b      	ldrh	r3, [r3, #16]
 8020a1e:	461a      	mov	r2, r3
 8020a20:	4b15      	ldr	r3, [pc, #84]	; (8020a78 <TRACE_Send+0x100>)
 8020a22:	4413      	add	r3, r2
 8020a24:	61bb      	str	r3, [r7, #24]
 8020a26:	697b      	ldr	r3, [r7, #20]
 8020a28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020a2a:	68fb      	ldr	r3, [r7, #12]
 8020a2c:	f383 8810 	msr	PRIMASK, r3
}
 8020a30:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 8020a32:	f7e2 fab3 	bl	8002f9c <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8020a36:	4b11      	ldr	r3, [pc, #68]	; (8020a7c <TRACE_Send+0x104>)
 8020a38:	68db      	ldr	r3, [r3, #12]
 8020a3a:	4a0e      	ldr	r2, [pc, #56]	; (8020a74 <TRACE_Send+0xfc>)
 8020a3c:	8a92      	ldrh	r2, [r2, #20]
 8020a3e:	4611      	mov	r1, r2
 8020a40:	69b8      	ldr	r0, [r7, #24]
 8020a42:	4798      	blx	r3
 8020a44:	4603      	mov	r3, r0
 8020a46:	77fb      	strb	r3, [r7, #31]
 8020a48:	e00d      	b.n	8020a66 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 8020a4a:	f000 f941 	bl	8020cd0 <TRACE_UnLock>
 8020a4e:	697b      	ldr	r3, [r7, #20]
 8020a50:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020a52:	68bb      	ldr	r3, [r7, #8]
 8020a54:	f383 8810 	msr	PRIMASK, r3
}
 8020a58:	e005      	b.n	8020a66 <TRACE_Send+0xee>
 8020a5a:	697b      	ldr	r3, [r7, #20]
 8020a5c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020a5e:	687b      	ldr	r3, [r7, #4]
 8020a60:	f383 8810 	msr	PRIMASK, r3
}
 8020a64:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 8020a66:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020a6a:	4618      	mov	r0, r3
 8020a6c:	3720      	adds	r7, #32
 8020a6e:	46bd      	mov	sp, r7
 8020a70:	bd80      	pop	{r7, pc}
 8020a72:	bf00      	nop
 8020a74:	20002574 	.word	0x20002574
 8020a78:	2000258c 	.word	0x2000258c
 8020a7c:	08021980 	.word	0x08021980

08020a80 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 8020a80:	b580      	push	{r7, lr}
 8020a82:	b088      	sub	sp, #32
 8020a84:	af00      	add	r7, sp, #0
 8020a86:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 8020a88:	2300      	movs	r3, #0
 8020a8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8020a90:	617b      	str	r3, [r7, #20]
  return(result);
 8020a92:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8020a94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8020a96:	b672      	cpsid	i
}
 8020a98:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8020a9a:	4b3c      	ldr	r3, [pc, #240]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020a9c:	789b      	ldrb	r3, [r3, #2]
 8020a9e:	2b02      	cmp	r3, #2
 8020aa0:	d106      	bne.n	8020ab0 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8020aa2:	4b3a      	ldr	r3, [pc, #232]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020aa4:	2200      	movs	r2, #0
 8020aa6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8020aa8:	4b38      	ldr	r3, [pc, #224]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020aaa:	2200      	movs	r2, #0
 8020aac:	821a      	strh	r2, [r3, #16]
 8020aae:	e00a      	b.n	8020ac6 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8020ab0:	4b36      	ldr	r3, [pc, #216]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020ab2:	8a1a      	ldrh	r2, [r3, #16]
 8020ab4:	4b35      	ldr	r3, [pc, #212]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020ab6:	8a9b      	ldrh	r3, [r3, #20]
 8020ab8:	4413      	add	r3, r2
 8020aba:	b29b      	uxth	r3, r3
 8020abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8020ac0:	b29a      	uxth	r2, r3
 8020ac2:	4b32      	ldr	r3, [pc, #200]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020ac4:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8020ac6:	4b31      	ldr	r3, [pc, #196]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020ac8:	8a1a      	ldrh	r2, [r3, #16]
 8020aca:	4b30      	ldr	r3, [pc, #192]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020acc:	8a5b      	ldrh	r3, [r3, #18]
 8020ace:	429a      	cmp	r2, r3
 8020ad0:	d04d      	beq.n	8020b6e <TRACE_TxCpltCallback+0xee>
 8020ad2:	4b2e      	ldr	r3, [pc, #184]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020ad4:	8adb      	ldrh	r3, [r3, #22]
 8020ad6:	2b01      	cmp	r3, #1
 8020ad8:	d149      	bne.n	8020b6e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8020ada:	4b2c      	ldr	r3, [pc, #176]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020adc:	789b      	ldrb	r3, [r3, #2]
 8020ade:	2b01      	cmp	r3, #1
 8020ae0:	d117      	bne.n	8020b12 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8020ae2:	4b2a      	ldr	r3, [pc, #168]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020ae4:	881a      	ldrh	r2, [r3, #0]
 8020ae6:	4b29      	ldr	r3, [pc, #164]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020ae8:	8a1b      	ldrh	r3, [r3, #16]
 8020aea:	1ad3      	subs	r3, r2, r3
 8020aec:	b29a      	uxth	r2, r3
 8020aee:	4b27      	ldr	r3, [pc, #156]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020af0:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8020af2:	4b26      	ldr	r3, [pc, #152]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020af4:	2202      	movs	r2, #2
 8020af6:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8020af8:	4b24      	ldr	r3, [pc, #144]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020afa:	2200      	movs	r2, #0
 8020afc:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8020afe:	4b23      	ldr	r3, [pc, #140]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020b00:	8a9b      	ldrh	r3, [r3, #20]
 8020b02:	2b00      	cmp	r3, #0
 8020b04:	d105      	bne.n	8020b12 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8020b06:	4b21      	ldr	r3, [pc, #132]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020b08:	2200      	movs	r2, #0
 8020b0a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8020b0c:	4b1f      	ldr	r3, [pc, #124]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020b0e:	2200      	movs	r2, #0
 8020b10:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8020b12:	4b1e      	ldr	r3, [pc, #120]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020b14:	789b      	ldrb	r3, [r3, #2]
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	d115      	bne.n	8020b46 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8020b1a:	4b1c      	ldr	r3, [pc, #112]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020b1c:	8a5a      	ldrh	r2, [r3, #18]
 8020b1e:	4b1b      	ldr	r3, [pc, #108]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020b20:	8a1b      	ldrh	r3, [r3, #16]
 8020b22:	429a      	cmp	r2, r3
 8020b24:	d908      	bls.n	8020b38 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8020b26:	4b19      	ldr	r3, [pc, #100]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020b28:	8a5a      	ldrh	r2, [r3, #18]
 8020b2a:	4b18      	ldr	r3, [pc, #96]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020b2c:	8a1b      	ldrh	r3, [r3, #16]
 8020b2e:	1ad3      	subs	r3, r2, r3
 8020b30:	b29a      	uxth	r2, r3
 8020b32:	4b16      	ldr	r3, [pc, #88]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020b34:	829a      	strh	r2, [r3, #20]
 8020b36:	e006      	b.n	8020b46 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8020b38:	4b14      	ldr	r3, [pc, #80]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020b3a:	8a1b      	ldrh	r3, [r3, #16]
 8020b3c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8020b40:	b29a      	uxth	r2, r3
 8020b42:	4b12      	ldr	r3, [pc, #72]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020b44:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8020b46:	4b11      	ldr	r3, [pc, #68]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020b48:	8a1b      	ldrh	r3, [r3, #16]
 8020b4a:	461a      	mov	r2, r3
 8020b4c:	4b10      	ldr	r3, [pc, #64]	; (8020b90 <TRACE_TxCpltCallback+0x110>)
 8020b4e:	4413      	add	r3, r2
 8020b50:	61fb      	str	r3, [r7, #28]
 8020b52:	69bb      	ldr	r3, [r7, #24]
 8020b54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020b56:	693b      	ldr	r3, [r7, #16]
 8020b58:	f383 8810 	msr	PRIMASK, r3
}
 8020b5c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8020b5e:	4b0d      	ldr	r3, [pc, #52]	; (8020b94 <TRACE_TxCpltCallback+0x114>)
 8020b60:	68db      	ldr	r3, [r3, #12]
 8020b62:	4a0a      	ldr	r2, [pc, #40]	; (8020b8c <TRACE_TxCpltCallback+0x10c>)
 8020b64:	8a92      	ldrh	r2, [r2, #20]
 8020b66:	4611      	mov	r1, r2
 8020b68:	69f8      	ldr	r0, [r7, #28]
 8020b6a:	4798      	blx	r3
 8020b6c:	e00a      	b.n	8020b84 <TRACE_TxCpltCallback+0x104>
 8020b6e:	69bb      	ldr	r3, [r7, #24]
 8020b70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020b72:	68fb      	ldr	r3, [r7, #12]
 8020b74:	f383 8810 	msr	PRIMASK, r3
}
 8020b78:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 8020b7a:	f7e2 fa17 	bl	8002fac <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8020b7e:	f000 f8a7 	bl	8020cd0 <TRACE_UnLock>
  }
}
 8020b82:	bf00      	nop
 8020b84:	bf00      	nop
 8020b86:	3720      	adds	r7, #32
 8020b88:	46bd      	mov	sp, r7
 8020b8a:	bd80      	pop	{r7, pc}
 8020b8c:	20002574 	.word	0x20002574
 8020b90:	2000258c 	.word	0x2000258c
 8020b94:	08021980 	.word	0x08021980

08020b98 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8020b98:	b480      	push	{r7}
 8020b9a:	b087      	sub	sp, #28
 8020b9c:	af00      	add	r7, sp, #0
 8020b9e:	4603      	mov	r3, r0
 8020ba0:	6039      	str	r1, [r7, #0]
 8020ba2:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 8020ba4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020ba8:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020baa:	f3ef 8310 	mrs	r3, PRIMASK
 8020bae:	60fb      	str	r3, [r7, #12]
  return(result);
 8020bb0:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8020bb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8020bb4:	b672      	cpsid	i
}
 8020bb6:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8020bb8:	4b35      	ldr	r3, [pc, #212]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020bba:	8a5a      	ldrh	r2, [r3, #18]
 8020bbc:	4b34      	ldr	r3, [pc, #208]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020bbe:	8a1b      	ldrh	r3, [r3, #16]
 8020bc0:	429a      	cmp	r2, r3
 8020bc2:	d11b      	bne.n	8020bfc <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8020bc4:	4b32      	ldr	r3, [pc, #200]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020bc6:	8a5b      	ldrh	r3, [r3, #18]
 8020bc8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8020bcc:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8020bce:	88fa      	ldrh	r2, [r7, #6]
 8020bd0:	8afb      	ldrh	r3, [r7, #22]
 8020bd2:	429a      	cmp	r2, r3
 8020bd4:	d33a      	bcc.n	8020c4c <TRACE_AllocateBufer+0xb4>
 8020bd6:	4b2e      	ldr	r3, [pc, #184]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020bd8:	8a1b      	ldrh	r3, [r3, #16]
 8020bda:	88fa      	ldrh	r2, [r7, #6]
 8020bdc:	429a      	cmp	r2, r3
 8020bde:	d235      	bcs.n	8020c4c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8020be0:	4b2b      	ldr	r3, [pc, #172]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020be2:	2201      	movs	r2, #1
 8020be4:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8020be6:	4b2a      	ldr	r3, [pc, #168]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020be8:	8a5a      	ldrh	r2, [r3, #18]
 8020bea:	4b29      	ldr	r3, [pc, #164]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020bec:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8020bee:	4b28      	ldr	r3, [pc, #160]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020bf0:	8a1b      	ldrh	r3, [r3, #16]
 8020bf2:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8020bf4:	4b26      	ldr	r3, [pc, #152]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020bf6:	2200      	movs	r2, #0
 8020bf8:	825a      	strh	r2, [r3, #18]
 8020bfa:	e027      	b.n	8020c4c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8020bfc:	4b24      	ldr	r3, [pc, #144]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020bfe:	8a5a      	ldrh	r2, [r3, #18]
 8020c00:	4b23      	ldr	r3, [pc, #140]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020c02:	8a1b      	ldrh	r3, [r3, #16]
 8020c04:	429a      	cmp	r2, r3
 8020c06:	d91b      	bls.n	8020c40 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8020c08:	4b21      	ldr	r3, [pc, #132]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020c0a:	8a5b      	ldrh	r3, [r3, #18]
 8020c0c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8020c10:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8020c12:	88fa      	ldrh	r2, [r7, #6]
 8020c14:	8afb      	ldrh	r3, [r7, #22]
 8020c16:	429a      	cmp	r2, r3
 8020c18:	d318      	bcc.n	8020c4c <TRACE_AllocateBufer+0xb4>
 8020c1a:	4b1d      	ldr	r3, [pc, #116]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020c1c:	8a1b      	ldrh	r3, [r3, #16]
 8020c1e:	88fa      	ldrh	r2, [r7, #6]
 8020c20:	429a      	cmp	r2, r3
 8020c22:	d213      	bcs.n	8020c4c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8020c24:	4b1a      	ldr	r3, [pc, #104]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020c26:	2201      	movs	r2, #1
 8020c28:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8020c2a:	4b19      	ldr	r3, [pc, #100]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020c2c:	8a5a      	ldrh	r2, [r3, #18]
 8020c2e:	4b18      	ldr	r3, [pc, #96]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020c30:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8020c32:	4b17      	ldr	r3, [pc, #92]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020c34:	8a1b      	ldrh	r3, [r3, #16]
 8020c36:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8020c38:	4b15      	ldr	r3, [pc, #84]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020c3a:	2200      	movs	r2, #0
 8020c3c:	825a      	strh	r2, [r3, #18]
 8020c3e:	e005      	b.n	8020c4c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8020c40:	4b13      	ldr	r3, [pc, #76]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020c42:	8a1a      	ldrh	r2, [r3, #16]
 8020c44:	4b12      	ldr	r3, [pc, #72]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020c46:	8a5b      	ldrh	r3, [r3, #18]
 8020c48:	1ad3      	subs	r3, r2, r3
 8020c4a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8020c4c:	8afa      	ldrh	r2, [r7, #22]
 8020c4e:	88fb      	ldrh	r3, [r7, #6]
 8020c50:	429a      	cmp	r2, r3
 8020c52:	d90f      	bls.n	8020c74 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8020c54:	4b0e      	ldr	r3, [pc, #56]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020c56:	8a5a      	ldrh	r2, [r3, #18]
 8020c58:	683b      	ldr	r3, [r7, #0]
 8020c5a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8020c5c:	4b0c      	ldr	r3, [pc, #48]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020c5e:	8a5a      	ldrh	r2, [r3, #18]
 8020c60:	88fb      	ldrh	r3, [r7, #6]
 8020c62:	4413      	add	r3, r2
 8020c64:	b29b      	uxth	r3, r3
 8020c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8020c6a:	b29a      	uxth	r2, r3
 8020c6c:	4b08      	ldr	r3, [pc, #32]	; (8020c90 <TRACE_AllocateBufer+0xf8>)
 8020c6e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 8020c70:	2300      	movs	r3, #0
 8020c72:	82bb      	strh	r3, [r7, #20]
 8020c74:	693b      	ldr	r3, [r7, #16]
 8020c76:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020c78:	68bb      	ldr	r3, [r7, #8]
 8020c7a:	f383 8810 	msr	PRIMASK, r3
}
 8020c7e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 8020c80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8020c84:	4618      	mov	r0, r3
 8020c86:	371c      	adds	r7, #28
 8020c88:	46bd      	mov	sp, r7
 8020c8a:	bc80      	pop	{r7}
 8020c8c:	4770      	bx	lr
 8020c8e:	bf00      	nop
 8020c90:	20002574 	.word	0x20002574

08020c94 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 8020c94:	b480      	push	{r7}
 8020c96:	b085      	sub	sp, #20
 8020c98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8020c9e:	607b      	str	r3, [r7, #4]
  return(result);
 8020ca0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8020ca2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8020ca4:	b672      	cpsid	i
}
 8020ca6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 8020ca8:	4b08      	ldr	r3, [pc, #32]	; (8020ccc <TRACE_Lock+0x38>)
 8020caa:	8adb      	ldrh	r3, [r3, #22]
 8020cac:	3301      	adds	r3, #1
 8020cae:	b29a      	uxth	r2, r3
 8020cb0:	4b06      	ldr	r3, [pc, #24]	; (8020ccc <TRACE_Lock+0x38>)
 8020cb2:	82da      	strh	r2, [r3, #22]
 8020cb4:	68fb      	ldr	r3, [r7, #12]
 8020cb6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020cb8:	68bb      	ldr	r3, [r7, #8]
 8020cba:	f383 8810 	msr	PRIMASK, r3
}
 8020cbe:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8020cc0:	bf00      	nop
 8020cc2:	3714      	adds	r7, #20
 8020cc4:	46bd      	mov	sp, r7
 8020cc6:	bc80      	pop	{r7}
 8020cc8:	4770      	bx	lr
 8020cca:	bf00      	nop
 8020ccc:	20002574 	.word	0x20002574

08020cd0 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 8020cd0:	b480      	push	{r7}
 8020cd2:	b085      	sub	sp, #20
 8020cd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8020cda:	607b      	str	r3, [r7, #4]
  return(result);
 8020cdc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8020cde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8020ce0:	b672      	cpsid	i
}
 8020ce2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 8020ce4:	4b08      	ldr	r3, [pc, #32]	; (8020d08 <TRACE_UnLock+0x38>)
 8020ce6:	8adb      	ldrh	r3, [r3, #22]
 8020ce8:	3b01      	subs	r3, #1
 8020cea:	b29a      	uxth	r2, r3
 8020cec:	4b06      	ldr	r3, [pc, #24]	; (8020d08 <TRACE_UnLock+0x38>)
 8020cee:	82da      	strh	r2, [r3, #22]
 8020cf0:	68fb      	ldr	r3, [r7, #12]
 8020cf2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020cf4:	68bb      	ldr	r3, [r7, #8]
 8020cf6:	f383 8810 	msr	PRIMASK, r3
}
 8020cfa:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8020cfc:	bf00      	nop
 8020cfe:	3714      	adds	r7, #20
 8020d00:	46bd      	mov	sp, r7
 8020d02:	bc80      	pop	{r7}
 8020d04:	4770      	bx	lr
 8020d06:	bf00      	nop
 8020d08:	20002574 	.word	0x20002574

08020d0c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 8020d0c:	b480      	push	{r7}
 8020d0e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8020d10:	4b05      	ldr	r3, [pc, #20]	; (8020d28 <TRACE_IsLocked+0x1c>)
 8020d12:	8adb      	ldrh	r3, [r3, #22]
 8020d14:	2b00      	cmp	r3, #0
 8020d16:	bf14      	ite	ne
 8020d18:	2301      	movne	r3, #1
 8020d1a:	2300      	moveq	r3, #0
 8020d1c:	b2db      	uxtb	r3, r3
}
 8020d1e:	4618      	mov	r0, r3
 8020d20:	46bd      	mov	sp, r7
 8020d22:	bc80      	pop	{r7}
 8020d24:	4770      	bx	lr
 8020d26:	bf00      	nop
 8020d28:	20002574 	.word	0x20002574

08020d2c <__libc_init_array>:
 8020d2c:	b570      	push	{r4, r5, r6, lr}
 8020d2e:	4d0d      	ldr	r5, [pc, #52]	; (8020d64 <__libc_init_array+0x38>)
 8020d30:	4c0d      	ldr	r4, [pc, #52]	; (8020d68 <__libc_init_array+0x3c>)
 8020d32:	1b64      	subs	r4, r4, r5
 8020d34:	10a4      	asrs	r4, r4, #2
 8020d36:	2600      	movs	r6, #0
 8020d38:	42a6      	cmp	r6, r4
 8020d3a:	d109      	bne.n	8020d50 <__libc_init_array+0x24>
 8020d3c:	4d0b      	ldr	r5, [pc, #44]	; (8020d6c <__libc_init_array+0x40>)
 8020d3e:	4c0c      	ldr	r4, [pc, #48]	; (8020d70 <__libc_init_array+0x44>)
 8020d40:	f000 f90a 	bl	8020f58 <_init>
 8020d44:	1b64      	subs	r4, r4, r5
 8020d46:	10a4      	asrs	r4, r4, #2
 8020d48:	2600      	movs	r6, #0
 8020d4a:	42a6      	cmp	r6, r4
 8020d4c:	d105      	bne.n	8020d5a <__libc_init_array+0x2e>
 8020d4e:	bd70      	pop	{r4, r5, r6, pc}
 8020d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8020d54:	4798      	blx	r3
 8020d56:	3601      	adds	r6, #1
 8020d58:	e7ee      	b.n	8020d38 <__libc_init_array+0xc>
 8020d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8020d5e:	4798      	blx	r3
 8020d60:	3601      	adds	r6, #1
 8020d62:	e7f2      	b.n	8020d4a <__libc_init_array+0x1e>
 8020d64:	08021f14 	.word	0x08021f14
 8020d68:	08021f14 	.word	0x08021f14
 8020d6c:	08021f14 	.word	0x08021f14
 8020d70:	08021f1c 	.word	0x08021f1c

08020d74 <memset>:
 8020d74:	4402      	add	r2, r0
 8020d76:	4603      	mov	r3, r0
 8020d78:	4293      	cmp	r3, r2
 8020d7a:	d100      	bne.n	8020d7e <memset+0xa>
 8020d7c:	4770      	bx	lr
 8020d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8020d82:	e7f9      	b.n	8020d78 <memset+0x4>

08020d84 <register_fini>:
 8020d84:	4b02      	ldr	r3, [pc, #8]	; (8020d90 <register_fini+0xc>)
 8020d86:	b113      	cbz	r3, 8020d8e <register_fini+0xa>
 8020d88:	4802      	ldr	r0, [pc, #8]	; (8020d94 <register_fini+0x10>)
 8020d8a:	f000 b805 	b.w	8020d98 <atexit>
 8020d8e:	4770      	bx	lr
 8020d90:	00000000 	.word	0x00000000
 8020d94:	08020da5 	.word	0x08020da5

08020d98 <atexit>:
 8020d98:	2300      	movs	r3, #0
 8020d9a:	4601      	mov	r1, r0
 8020d9c:	461a      	mov	r2, r3
 8020d9e:	4618      	mov	r0, r3
 8020da0:	f000 b816 	b.w	8020dd0 <__register_exitproc>

08020da4 <__libc_fini_array>:
 8020da4:	b538      	push	{r3, r4, r5, lr}
 8020da6:	4d07      	ldr	r5, [pc, #28]	; (8020dc4 <__libc_fini_array+0x20>)
 8020da8:	4c07      	ldr	r4, [pc, #28]	; (8020dc8 <__libc_fini_array+0x24>)
 8020daa:	1b64      	subs	r4, r4, r5
 8020dac:	10a4      	asrs	r4, r4, #2
 8020dae:	b91c      	cbnz	r4, 8020db8 <__libc_fini_array+0x14>
 8020db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020db4:	f000 b8d6 	b.w	8020f64 <_fini>
 8020db8:	3c01      	subs	r4, #1
 8020dba:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8020dbe:	4798      	blx	r3
 8020dc0:	e7f5      	b.n	8020dae <__libc_fini_array+0xa>
 8020dc2:	bf00      	nop
 8020dc4:	08021f1c 	.word	0x08021f1c
 8020dc8:	08021f20 	.word	0x08021f20

08020dcc <__retarget_lock_acquire_recursive>:
 8020dcc:	4770      	bx	lr

08020dce <__retarget_lock_release_recursive>:
 8020dce:	4770      	bx	lr

08020dd0 <__register_exitproc>:
 8020dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020dd4:	f8df a074 	ldr.w	sl, [pc, #116]	; 8020e4c <__register_exitproc+0x7c>
 8020dd8:	4606      	mov	r6, r0
 8020dda:	f8da 0000 	ldr.w	r0, [sl]
 8020dde:	4698      	mov	r8, r3
 8020de0:	460f      	mov	r7, r1
 8020de2:	4691      	mov	r9, r2
 8020de4:	f7ff fff2 	bl	8020dcc <__retarget_lock_acquire_recursive>
 8020de8:	4b19      	ldr	r3, [pc, #100]	; (8020e50 <__register_exitproc+0x80>)
 8020dea:	681b      	ldr	r3, [r3, #0]
 8020dec:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8020df0:	b91c      	cbnz	r4, 8020dfa <__register_exitproc+0x2a>
 8020df2:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8020df6:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8020dfa:	6865      	ldr	r5, [r4, #4]
 8020dfc:	f8da 0000 	ldr.w	r0, [sl]
 8020e00:	2d1f      	cmp	r5, #31
 8020e02:	dd05      	ble.n	8020e10 <__register_exitproc+0x40>
 8020e04:	f7ff ffe3 	bl	8020dce <__retarget_lock_release_recursive>
 8020e08:	f04f 30ff 	mov.w	r0, #4294967295
 8020e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e10:	b19e      	cbz	r6, 8020e3a <__register_exitproc+0x6a>
 8020e12:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8020e16:	2201      	movs	r2, #1
 8020e18:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8020e1c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8020e20:	40aa      	lsls	r2, r5
 8020e22:	4313      	orrs	r3, r2
 8020e24:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8020e28:	2e02      	cmp	r6, #2
 8020e2a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8020e2e:	bf02      	ittt	eq
 8020e30:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8020e34:	4313      	orreq	r3, r2
 8020e36:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8020e3a:	1c6b      	adds	r3, r5, #1
 8020e3c:	3502      	adds	r5, #2
 8020e3e:	6063      	str	r3, [r4, #4]
 8020e40:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8020e44:	f7ff ffc3 	bl	8020dce <__retarget_lock_release_recursive>
 8020e48:	2000      	movs	r0, #0
 8020e4a:	e7df      	b.n	8020e0c <__register_exitproc+0x3c>
 8020e4c:	200005a0 	.word	0x200005a0
 8020e50:	08021e48 	.word	0x08021e48
 8020e54:	00000000 	.word	0x00000000

08020e58 <floor>:
 8020e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020e5c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8020e60:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8020e64:	2e13      	cmp	r6, #19
 8020e66:	4602      	mov	r2, r0
 8020e68:	460b      	mov	r3, r1
 8020e6a:	4607      	mov	r7, r0
 8020e6c:	460c      	mov	r4, r1
 8020e6e:	4605      	mov	r5, r0
 8020e70:	dc33      	bgt.n	8020eda <floor+0x82>
 8020e72:	2e00      	cmp	r6, #0
 8020e74:	da14      	bge.n	8020ea0 <floor+0x48>
 8020e76:	a334      	add	r3, pc, #208	; (adr r3, 8020f48 <floor+0xf0>)
 8020e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e7c:	f7df f98a 	bl	8000194 <__adddf3>
 8020e80:	2200      	movs	r2, #0
 8020e82:	2300      	movs	r3, #0
 8020e84:	f7df fdcc 	bl	8000a20 <__aeabi_dcmpgt>
 8020e88:	b138      	cbz	r0, 8020e9a <floor+0x42>
 8020e8a:	2c00      	cmp	r4, #0
 8020e8c:	da58      	bge.n	8020f40 <floor+0xe8>
 8020e8e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8020e92:	431d      	orrs	r5, r3
 8020e94:	d001      	beq.n	8020e9a <floor+0x42>
 8020e96:	4c2e      	ldr	r4, [pc, #184]	; (8020f50 <floor+0xf8>)
 8020e98:	2500      	movs	r5, #0
 8020e9a:	4623      	mov	r3, r4
 8020e9c:	462f      	mov	r7, r5
 8020e9e:	e025      	b.n	8020eec <floor+0x94>
 8020ea0:	4a2c      	ldr	r2, [pc, #176]	; (8020f54 <floor+0xfc>)
 8020ea2:	fa42 f806 	asr.w	r8, r2, r6
 8020ea6:	ea01 0208 	and.w	r2, r1, r8
 8020eaa:	4302      	orrs	r2, r0
 8020eac:	d01e      	beq.n	8020eec <floor+0x94>
 8020eae:	a326      	add	r3, pc, #152	; (adr r3, 8020f48 <floor+0xf0>)
 8020eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020eb4:	f7df f96e 	bl	8000194 <__adddf3>
 8020eb8:	2200      	movs	r2, #0
 8020eba:	2300      	movs	r3, #0
 8020ebc:	f7df fdb0 	bl	8000a20 <__aeabi_dcmpgt>
 8020ec0:	2800      	cmp	r0, #0
 8020ec2:	d0ea      	beq.n	8020e9a <floor+0x42>
 8020ec4:	2c00      	cmp	r4, #0
 8020ec6:	bfbe      	ittt	lt
 8020ec8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8020ecc:	fa43 f606 	asrlt.w	r6, r3, r6
 8020ed0:	19a4      	addlt	r4, r4, r6
 8020ed2:	ea24 0408 	bic.w	r4, r4, r8
 8020ed6:	2500      	movs	r5, #0
 8020ed8:	e7df      	b.n	8020e9a <floor+0x42>
 8020eda:	2e33      	cmp	r6, #51	; 0x33
 8020edc:	dd0a      	ble.n	8020ef4 <floor+0x9c>
 8020ede:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8020ee2:	d103      	bne.n	8020eec <floor+0x94>
 8020ee4:	f7df f956 	bl	8000194 <__adddf3>
 8020ee8:	4607      	mov	r7, r0
 8020eea:	460b      	mov	r3, r1
 8020eec:	4638      	mov	r0, r7
 8020eee:	4619      	mov	r1, r3
 8020ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020ef4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8020ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8020efc:	fa22 f808 	lsr.w	r8, r2, r8
 8020f00:	ea18 0f00 	tst.w	r8, r0
 8020f04:	d0f2      	beq.n	8020eec <floor+0x94>
 8020f06:	a310      	add	r3, pc, #64	; (adr r3, 8020f48 <floor+0xf0>)
 8020f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f0c:	f7df f942 	bl	8000194 <__adddf3>
 8020f10:	2200      	movs	r2, #0
 8020f12:	2300      	movs	r3, #0
 8020f14:	f7df fd84 	bl	8000a20 <__aeabi_dcmpgt>
 8020f18:	2800      	cmp	r0, #0
 8020f1a:	d0be      	beq.n	8020e9a <floor+0x42>
 8020f1c:	2c00      	cmp	r4, #0
 8020f1e:	da02      	bge.n	8020f26 <floor+0xce>
 8020f20:	2e14      	cmp	r6, #20
 8020f22:	d103      	bne.n	8020f2c <floor+0xd4>
 8020f24:	3401      	adds	r4, #1
 8020f26:	ea25 0508 	bic.w	r5, r5, r8
 8020f2a:	e7b6      	b.n	8020e9a <floor+0x42>
 8020f2c:	2301      	movs	r3, #1
 8020f2e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8020f32:	fa03 f606 	lsl.w	r6, r3, r6
 8020f36:	4435      	add	r5, r6
 8020f38:	42bd      	cmp	r5, r7
 8020f3a:	bf38      	it	cc
 8020f3c:	18e4      	addcc	r4, r4, r3
 8020f3e:	e7f2      	b.n	8020f26 <floor+0xce>
 8020f40:	2500      	movs	r5, #0
 8020f42:	462c      	mov	r4, r5
 8020f44:	e7a9      	b.n	8020e9a <floor+0x42>
 8020f46:	bf00      	nop
 8020f48:	8800759c 	.word	0x8800759c
 8020f4c:	7e37e43c 	.word	0x7e37e43c
 8020f50:	bff00000 	.word	0xbff00000
 8020f54:	000fffff 	.word	0x000fffff

08020f58 <_init>:
 8020f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020f5a:	bf00      	nop
 8020f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020f5e:	bc08      	pop	{r3}
 8020f60:	469e      	mov	lr, r3
 8020f62:	4770      	bx	lr

08020f64 <_fini>:
 8020f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020f66:	bf00      	nop
 8020f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020f6a:	bc08      	pop	{r3}
 8020f6c:	469e      	mov	lr, r3
 8020f6e:	4770      	bx	lr
