
LoRa-E5_weather_and_pollution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c638  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a8c  0801c770  0801c770  0002c770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801d1fc  0801d1fc  0002d1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801d2bc  0801d2bc  0003057c  2**0
                  CONTENTS
  5 .ARM          00000008  0801d2bc  0801d2bc  0002d2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801d2c4  0801d2c4  0003057c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801d2c4  0801d2c4  0002d2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801d2cc  0801d2cc  0002d2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000057c  20000000  0801d2d0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000233c  2000057c  0801d84c  0003057c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200028b8  0801d84c  000328b8  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0003057c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000462e7  00000000  00000000  000305a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a5fd  00000000  00000000  0007688d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003570  00000000  00000000  00080e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003148  00000000  00000000  00084400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000289cf  00000000  00000000  00087548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003ebdb  00000000  00000000  000aff17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc188  00000000  00000000  000eeaf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001bac7a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000de08  00000000  00000000  001baccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000057c 	.word	0x2000057c
 8000154:	00000000 	.word	0x00000000
 8000158:	0801c758 	.word	0x0801c758

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000580 	.word	0x20000580
 8000174:	0801c758 	.word	0x0801c758

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2iz>:
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30f      	bcc.n	8000d6a <__aeabi_f2iz+0x2a>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d90d      	bls.n	8000d70 <__aeabi_f2iz+0x30>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	bf18      	it	ne
 8000d66:	4240      	negne	r0, r0
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr
 8000d70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d74:	d101      	bne.n	8000d7a <__aeabi_f2iz+0x3a>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	d105      	bne.n	8000d86 <__aeabi_f2iz+0x46>
 8000d7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	bf08      	it	eq
 8000d80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_uldivmod>:
 8000d8c:	b953      	cbnz	r3, 8000da4 <__aeabi_uldivmod+0x18>
 8000d8e:	b94a      	cbnz	r2, 8000da4 <__aeabi_uldivmod+0x18>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	bf08      	it	eq
 8000d94:	2800      	cmpeq	r0, #0
 8000d96:	bf1c      	itt	ne
 8000d98:	f04f 31ff 	movne.w	r1, #4294967295
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000da0:	f000 b974 	b.w	800108c <__aeabi_idiv0>
 8000da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dac:	f000 f806 	bl	8000dbc <__udivmoddi4>
 8000db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <__udivmoddi4>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	9e08      	ldr	r6, [sp, #32]
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	4688      	mov	r8, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14d      	bne.n	8000e68 <__udivmoddi4+0xac>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	4694      	mov	ip, r2
 8000dd0:	d968      	bls.n	8000ea4 <__udivmoddi4+0xe8>
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	b152      	cbz	r2, 8000dee <__udivmoddi4+0x32>
 8000dd8:	fa01 f302 	lsl.w	r3, r1, r2
 8000ddc:	f1c2 0120 	rsb	r1, r2, #32
 8000de0:	fa20 f101 	lsr.w	r1, r0, r1
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	ea41 0803 	orr.w	r8, r1, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000df2:	0c21      	lsrs	r1, r4, #16
 8000df4:	fbb8 fef5 	udiv	lr, r8, r5
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fb05 831e 	mls	r3, r5, lr, r8
 8000e00:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e04:	fb0e f107 	mul.w	r1, lr, r7
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d90b      	bls.n	8000e24 <__udivmoddi4+0x68>
 8000e0c:	eb1c 0303 	adds.w	r3, ip, r3
 8000e10:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000e14:	f080 811e 	bcs.w	8001054 <__udivmoddi4+0x298>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	f240 811b 	bls.w	8001054 <__udivmoddi4+0x298>
 8000e1e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f0f5 	udiv	r0, r3, r5
 8000e2c:	fb05 3310 	mls	r3, r5, r0, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb00 f707 	mul.w	r7, r0, r7
 8000e38:	42a7      	cmp	r7, r4
 8000e3a:	d90a      	bls.n	8000e52 <__udivmoddi4+0x96>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e44:	f080 8108 	bcs.w	8001058 <__udivmoddi4+0x29c>
 8000e48:	42a7      	cmp	r7, r4
 8000e4a:	f240 8105 	bls.w	8001058 <__udivmoddi4+0x29c>
 8000e4e:	4464      	add	r4, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	1be4      	subs	r4, r4, r7
 8000e54:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000e58:	2100      	movs	r1, #0
 8000e5a:	b11e      	cbz	r6, 8000e64 <__udivmoddi4+0xa8>
 8000e5c:	40d4      	lsrs	r4, r2
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e9c6 4300 	strd	r4, r3, [r6]
 8000e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0xc2>
 8000e6c:	2e00      	cmp	r6, #0
 8000e6e:	f000 80ee 	beq.w	800104e <__udivmoddi4+0x292>
 8000e72:	2100      	movs	r1, #0
 8000e74:	e9c6 0500 	strd	r0, r5, [r6]
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	fab3 f183 	clz	r1, r3
 8000e82:	2900      	cmp	r1, #0
 8000e84:	d14a      	bne.n	8000f1c <__udivmoddi4+0x160>
 8000e86:	42ab      	cmp	r3, r5
 8000e88:	d302      	bcc.n	8000e90 <__udivmoddi4+0xd4>
 8000e8a:	4282      	cmp	r2, r0
 8000e8c:	f200 80f9 	bhi.w	8001082 <__udivmoddi4+0x2c6>
 8000e90:	1a84      	subs	r4, r0, r2
 8000e92:	eb65 0303 	sbc.w	r3, r5, r3
 8000e96:	2001      	movs	r0, #1
 8000e98:	4698      	mov	r8, r3
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d0e2      	beq.n	8000e64 <__udivmoddi4+0xa8>
 8000e9e:	e9c6 4800 	strd	r4, r8, [r6]
 8000ea2:	e7df      	b.n	8000e64 <__udivmoddi4+0xa8>
 8000ea4:	b902      	cbnz	r2, 8000ea8 <__udivmoddi4+0xec>
 8000ea6:	deff      	udf	#255	; 0xff
 8000ea8:	fab2 f282 	clz	r2, r2
 8000eac:	2a00      	cmp	r2, #0
 8000eae:	f040 8091 	bne.w	8000fd4 <__udivmoddi4+0x218>
 8000eb2:	eba1 050c 	sub.w	r5, r1, ip
 8000eb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eba:	fa1f fe8c 	uxth.w	lr, ip
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	fbb5 f3f7 	udiv	r3, r5, r7
 8000ec4:	fb07 5013 	mls	r0, r7, r3, r5
 8000ec8:	0c25      	lsrs	r5, r4, #16
 8000eca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ece:	fb0e f003 	mul.w	r0, lr, r3
 8000ed2:	42a8      	cmp	r0, r5
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x12c>
 8000ed6:	eb1c 0505 	adds.w	r5, ip, r5
 8000eda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x12a>
 8000ee0:	42a8      	cmp	r0, r5
 8000ee2:	f200 80cb 	bhi.w	800107c <__udivmoddi4+0x2c0>
 8000ee6:	4643      	mov	r3, r8
 8000ee8:	1a2d      	subs	r5, r5, r0
 8000eea:	b2a4      	uxth	r4, r4
 8000eec:	fbb5 f0f7 	udiv	r0, r5, r7
 8000ef0:	fb07 5510 	mls	r5, r7, r0, r5
 8000ef4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ef8:	fb0e fe00 	mul.w	lr, lr, r0
 8000efc:	45a6      	cmp	lr, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x156>
 8000f00:	eb1c 0404 	adds.w	r4, ip, r4
 8000f04:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f08:	d202      	bcs.n	8000f10 <__udivmoddi4+0x154>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f200 80bb 	bhi.w	8001086 <__udivmoddi4+0x2ca>
 8000f10:	4628      	mov	r0, r5
 8000f12:	eba4 040e 	sub.w	r4, r4, lr
 8000f16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f1a:	e79e      	b.n	8000e5a <__udivmoddi4+0x9e>
 8000f1c:	f1c1 0720 	rsb	r7, r1, #32
 8000f20:	408b      	lsls	r3, r1
 8000f22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f2e:	fa05 f301 	lsl.w	r3, r5, r1
 8000f32:	431c      	orrs	r4, r3
 8000f34:	40fd      	lsrs	r5, r7
 8000f36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f3a:	fa00 f301 	lsl.w	r3, r0, r1
 8000f3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f42:	0c20      	lsrs	r0, r4, #16
 8000f44:	fa1f fe8c 	uxth.w	lr, ip
 8000f48:	fb09 5518 	mls	r5, r9, r8, r5
 8000f4c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000f50:	fb08 f00e 	mul.w	r0, r8, lr
 8000f54:	42a8      	cmp	r0, r5
 8000f56:	fa02 f201 	lsl.w	r2, r2, r1
 8000f5a:	d90b      	bls.n	8000f74 <__udivmoddi4+0x1b8>
 8000f5c:	eb1c 0505 	adds.w	r5, ip, r5
 8000f60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f64:	f080 8088 	bcs.w	8001078 <__udivmoddi4+0x2bc>
 8000f68:	42a8      	cmp	r0, r5
 8000f6a:	f240 8085 	bls.w	8001078 <__udivmoddi4+0x2bc>
 8000f6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f72:	4465      	add	r5, ip
 8000f74:	1a2d      	subs	r5, r5, r0
 8000f76:	b2a4      	uxth	r4, r4
 8000f78:	fbb5 f0f9 	udiv	r0, r5, r9
 8000f7c:	fb09 5510 	mls	r5, r9, r0, r5
 8000f80:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f88:	45ae      	cmp	lr, r5
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x1e2>
 8000f8c:	eb1c 0505 	adds.w	r5, ip, r5
 8000f90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f94:	d26c      	bcs.n	8001070 <__udivmoddi4+0x2b4>
 8000f96:	45ae      	cmp	lr, r5
 8000f98:	d96a      	bls.n	8001070 <__udivmoddi4+0x2b4>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4465      	add	r5, ip
 8000f9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fa2:	fba0 9402 	umull	r9, r4, r0, r2
 8000fa6:	eba5 050e 	sub.w	r5, r5, lr
 8000faa:	42a5      	cmp	r5, r4
 8000fac:	46c8      	mov	r8, r9
 8000fae:	46a6      	mov	lr, r4
 8000fb0:	d356      	bcc.n	8001060 <__udivmoddi4+0x2a4>
 8000fb2:	d053      	beq.n	800105c <__udivmoddi4+0x2a0>
 8000fb4:	b15e      	cbz	r6, 8000fce <__udivmoddi4+0x212>
 8000fb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000fba:	eb65 050e 	sbc.w	r5, r5, lr
 8000fbe:	fa05 f707 	lsl.w	r7, r5, r7
 8000fc2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fc6:	40cd      	lsrs	r5, r1
 8000fc8:	431f      	orrs	r7, r3
 8000fca:	e9c6 7500 	strd	r7, r5, [r6]
 8000fce:	2100      	movs	r1, #0
 8000fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd4:	f1c2 0320 	rsb	r3, r2, #32
 8000fd8:	fa20 f103 	lsr.w	r1, r0, r3
 8000fdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe0:	fa25 f303 	lsr.w	r3, r5, r3
 8000fe4:	4095      	lsls	r5, r2
 8000fe6:	430d      	orrs	r5, r1
 8000fe8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fec:	fa1f fe8c 	uxth.w	lr, ip
 8000ff0:	fbb3 f1f7 	udiv	r1, r3, r7
 8000ff4:	fb07 3011 	mls	r0, r7, r1, r3
 8000ff8:	0c2b      	lsrs	r3, r5, #16
 8000ffa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000ffe:	fb01 f00e 	mul.w	r0, r1, lr
 8001002:	4298      	cmp	r0, r3
 8001004:	fa04 f402 	lsl.w	r4, r4, r2
 8001008:	d908      	bls.n	800101c <__udivmoddi4+0x260>
 800100a:	eb1c 0303 	adds.w	r3, ip, r3
 800100e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001012:	d22f      	bcs.n	8001074 <__udivmoddi4+0x2b8>
 8001014:	4298      	cmp	r0, r3
 8001016:	d92d      	bls.n	8001074 <__udivmoddi4+0x2b8>
 8001018:	3902      	subs	r1, #2
 800101a:	4463      	add	r3, ip
 800101c:	1a1b      	subs	r3, r3, r0
 800101e:	b2ad      	uxth	r5, r5
 8001020:	fbb3 f0f7 	udiv	r0, r3, r7
 8001024:	fb07 3310 	mls	r3, r7, r0, r3
 8001028:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800102c:	fb00 f30e 	mul.w	r3, r0, lr
 8001030:	42ab      	cmp	r3, r5
 8001032:	d908      	bls.n	8001046 <__udivmoddi4+0x28a>
 8001034:	eb1c 0505 	adds.w	r5, ip, r5
 8001038:	f100 38ff 	add.w	r8, r0, #4294967295
 800103c:	d216      	bcs.n	800106c <__udivmoddi4+0x2b0>
 800103e:	42ab      	cmp	r3, r5
 8001040:	d914      	bls.n	800106c <__udivmoddi4+0x2b0>
 8001042:	3802      	subs	r0, #2
 8001044:	4465      	add	r5, ip
 8001046:	1aed      	subs	r5, r5, r3
 8001048:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800104c:	e738      	b.n	8000ec0 <__udivmoddi4+0x104>
 800104e:	4631      	mov	r1, r6
 8001050:	4630      	mov	r0, r6
 8001052:	e707      	b.n	8000e64 <__udivmoddi4+0xa8>
 8001054:	4686      	mov	lr, r0
 8001056:	e6e5      	b.n	8000e24 <__udivmoddi4+0x68>
 8001058:	4618      	mov	r0, r3
 800105a:	e6fa      	b.n	8000e52 <__udivmoddi4+0x96>
 800105c:	454b      	cmp	r3, r9
 800105e:	d2a9      	bcs.n	8000fb4 <__udivmoddi4+0x1f8>
 8001060:	ebb9 0802 	subs.w	r8, r9, r2
 8001064:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001068:	3801      	subs	r0, #1
 800106a:	e7a3      	b.n	8000fb4 <__udivmoddi4+0x1f8>
 800106c:	4640      	mov	r0, r8
 800106e:	e7ea      	b.n	8001046 <__udivmoddi4+0x28a>
 8001070:	4620      	mov	r0, r4
 8001072:	e794      	b.n	8000f9e <__udivmoddi4+0x1e2>
 8001074:	4641      	mov	r1, r8
 8001076:	e7d1      	b.n	800101c <__udivmoddi4+0x260>
 8001078:	46d0      	mov	r8, sl
 800107a:	e77b      	b.n	8000f74 <__udivmoddi4+0x1b8>
 800107c:	3b02      	subs	r3, #2
 800107e:	4465      	add	r5, ip
 8001080:	e732      	b.n	8000ee8 <__udivmoddi4+0x12c>
 8001082:	4608      	mov	r0, r1
 8001084:	e709      	b.n	8000e9a <__udivmoddi4+0xde>
 8001086:	4464      	add	r4, ip
 8001088:	3802      	subs	r0, #2
 800108a:	e742      	b.n	8000f12 <__udivmoddi4+0x156>

0800108c <__aeabi_idiv0>:
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800109c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800109e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010b4:	68fb      	ldr	r3, [r7, #12]
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80010c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010d6:	4013      	ands	r3, r2
 80010d8:	660b      	str	r3, [r1, #96]	; 0x60
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <MX_ADC_Init+0x94>)
 80010ea:	4a24      	ldr	r2, [pc, #144]	; (800117c <MX_ADC_Init+0x98>)
 80010ec:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <MX_ADC_Init+0x94>)
 80010f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010f4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <MX_ADC_Init+0x94>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <MX_ADC_Init+0x94>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_ADC_Init+0x94>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <MX_ADC_Init+0x94>)
 800110a:	2204      	movs	r2, #4
 800110c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_ADC_Init+0x94>)
 8001110:	2200      	movs	r2, #0
 8001112:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MX_ADC_Init+0x94>)
 8001116:	2200      	movs	r2, #0
 8001118:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_ADC_Init+0x94>)
 800111c:	2200      	movs	r2, #0
 800111e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_ADC_Init+0x94>)
 8001122:	2201      	movs	r2, #1
 8001124:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_ADC_Init+0x94>)
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_ADC_Init+0x94>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_ADC_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_ADC_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <MX_ADC_Init+0x94>)
 8001144:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001148:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MX_ADC_Init+0x94>)
 800114c:	2207      	movs	r2, #7
 800114e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_ADC_Init+0x94>)
 8001152:	2207      	movs	r2, #7
 8001154:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_ADC_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_ADC_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_ADC_Init+0x94>)
 8001166:	f002 fa73 	bl	8003650 <HAL_ADC_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001170:	f000 fd56 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000598 	.word	0x20000598
 800117c:	40012400 	.word	0x40012400

08001180 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <HAL_ADC_MspInit+0x24>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d103      	bne.n	800119a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001192:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001196:	f7ff ff7b 	bl	8001090 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40012400 	.word	0x40012400

080011a8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a05      	ldr	r2, [pc, #20]	; (80011cc <HAL_ADC_MspDeInit+0x24>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d103      	bne.n	80011c2 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80011ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011be:	f7ff ff7f 	bl	80010c0 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40012400 	.word	0x40012400

080011d0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <SYS_InitMeasurement+0x14>)
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <SYS_InitMeasurement+0x18>)
 80011d8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000598 	.word	0x20000598
 80011e8:	40012400 	.word	0x40012400

080011ec <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80011fa:	4813      	ldr	r0, [pc, #76]	; (8001248 <SYS_GetBatteryLevel+0x5c>)
 80011fc:	f000 f82a 	bl	8001254 <ADC_ReadChannels>
 8001200:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	80fb      	strh	r3, [r7, #6]
 800120c:	e016      	b.n	800123c <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <SYS_GetBatteryLevel+0x60>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001216:	4293      	cmp	r3, r2
 8001218:	d00b      	beq.n	8001232 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <SYS_GetBatteryLevel+0x60>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001224:	fb03 f202 	mul.w	r2, r3, r2
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	80fb      	strh	r3, [r7, #6]
 8001230:	e004      	b.n	800123c <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001232:	4a07      	ldr	r2, [pc, #28]	; (8001250 <SYS_GetBatteryLevel+0x64>)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	fbb2 f3f3 	udiv	r3, r2, r3
 800123a:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 800123c:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	b4002000 	.word	0xb4002000
 800124c:	1fff75aa 	.word	0x1fff75aa
 8001250:	004c08d8 	.word	0x004c08d8

08001254 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001260:	f107 0308 	add.w	r3, r7, #8
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 800126c:	f7ff ff3a 	bl	80010e4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001270:	481a      	ldr	r0, [pc, #104]	; (80012dc <ADC_ReadChannels+0x88>)
 8001272:	f003 f81c 	bl	80042ae <HAL_ADCEx_Calibration_Start>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 800127c:	f000 fcd0 	bl	8001c20 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4619      	mov	r1, r3
 8001292:	4812      	ldr	r0, [pc, #72]	; (80012dc <ADC_ReadChannels+0x88>)
 8001294:	f002 fd28 	bl	8003ce8 <HAL_ADC_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800129e:	f000 fcbf 	bl	8001c20 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80012a2:	480e      	ldr	r0, [pc, #56]	; (80012dc <ADC_ReadChannels+0x88>)
 80012a4:	f002 fc04 	bl	8003ab0 <HAL_ADC_Start>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80012ae:	f000 fcb7 	bl	8001c20 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80012b2:	f04f 31ff 	mov.w	r1, #4294967295
 80012b6:	4809      	ldr	r0, [pc, #36]	; (80012dc <ADC_ReadChannels+0x88>)
 80012b8:	f002 fc72 	bl	8003ba0 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80012bc:	4807      	ldr	r0, [pc, #28]	; (80012dc <ADC_ReadChannels+0x88>)
 80012be:	f002 fc3d 	bl	8003b3c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <ADC_ReadChannels+0x88>)
 80012c4:	f002 fd03 	bl	8003cce <HAL_ADC_GetValue>
 80012c8:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80012ca:	4804      	ldr	r0, [pc, #16]	; (80012dc <ADC_ReadChannels+0x88>)
 80012cc:	f002 fb74 	bl	80039b8 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80012d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000598 	.word	0x20000598

080012e0 <LL_AHB1_GRP1_EnableClock>:
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4013      	ands	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001314:	2004      	movs	r0, #4
 8001316:	f7ff ffe3 	bl	80012e0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800131a:	2001      	movs	r0, #1
 800131c:	f7ff ffe0 	bl	80012e0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2102      	movs	r1, #2
 8001324:	200b      	movs	r0, #11
 8001326:	f003 f968 	bl	80045fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800132a:	200b      	movs	r0, #11
 800132c:	f003 f97f 	bl	800462e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	200c      	movs	r0, #12
 8001336:	f003 f960 	bl	80045fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800133a:	200c      	movs	r0, #12
 800133c:	f003 f977 	bl	800462e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	200d      	movs	r0, #13
 8001346:	f003 f958 	bl	80045fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800134a:	200d      	movs	r0, #13
 800134c:	f003 f96f 	bl	800462e <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	203d      	movs	r0, #61	; 0x3d
 8001356:	f003 f950 	bl	80045fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800135a:	203d      	movs	r0, #61	; 0x3d
 800135c:	f003 f967 	bl	800462e <HAL_NVIC_EnableIRQ>

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001370:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001374:	d101      	bne.n	800137a <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 800137a:	2300      	movs	r3, #0
#endif
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	58004000 	.word	0x58004000

08001388 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80013a0:	4b56      	ldr	r3, [pc, #344]	; (80014fc <FLASH_IF_Write+0x174>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0299      	lsls	r1, r3, #10
 80013a6:	4b56      	ldr	r3, [pc, #344]	; (8001500 <FLASH_IF_Write+0x178>)
 80013a8:	400b      	ands	r3, r1
 80013aa:	fbb2 f1f3 	udiv	r1, r2, r3
 80013ae:	fb01 f303 	mul.w	r3, r1, r3
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	0adb      	lsrs	r3, r3, #11
 80013b6:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80013c2:	3b01      	subs	r3, #1
 80013c4:	4a4d      	ldr	r2, [pc, #308]	; (80014fc <FLASH_IF_Write+0x174>)
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	0291      	lsls	r1, r2, #10
 80013ca:	4a4d      	ldr	r2, [pc, #308]	; (8001500 <FLASH_IF_Write+0x178>)
 80013cc:	400a      	ands	r2, r1
 80013ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80013d2:	fb01 f202 	mul.w	r2, r1, r2
 80013d6:	1a9b      	subs	r3, r3, r2
 80013d8:	0adb      	lsrs	r3, r3, #11
 80013da:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d009      	beq.n	8001402 <FLASH_IF_Write+0x7a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d104      	bne.n	8001402 <FLASH_IF_Write+0x7a>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 8001402:	f06f 0304 	mvn.w	r3, #4
 8001406:	e074      	b.n	80014f2 <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001408:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <FLASH_IF_Write+0x17c>)
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	2b00      	cmp	r3, #0
 800140e:	da02      	bge.n	8001416 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 8001410:	f06f 0303 	mvn.w	r3, #3
 8001414:	e06d      	b.n	80014f2 <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	429a      	cmp	r2, r3
 800141c:	d005      	beq.n	800142a <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001424:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	e05b      	b.n	80014e8 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001434:	4618      	mov	r0, r3
 8001436:	f000 f8f8 	bl	800162a <FLASH_IF_IsEmpty>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d037      	beq.n	80014b0 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001446:	f06f 0304 	mvn.w	r3, #4
 800144a:	e052      	b.n	80014f2 <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001452:	02db      	lsls	r3, r3, #11
 8001454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001458:	4619      	mov	r1, r3
 800145a:	6838      	ldr	r0, [r7, #0]
 800145c:	f019 fd92 	bl	801af84 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	4413      	add	r3, r2
 800146a:	6a39      	ldr	r1, [r7, #32]
 800146c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800146e:	b292      	uxth	r2, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f019 fd87 	bl	801af84 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8001476:	2200      	movs	r2, #0
 8001478:	2101      	movs	r1, #1
 800147a:	69f8      	ldr	r0, [r7, #28]
 800147c:	f000 f865 	bl	800154a <FLASH_IF_EraseByPages>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 8001486:	f06f 0301 	mvn.w	r3, #1
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 800148c:	e030      	b.n	80014f0 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001494:	02db      	lsls	r3, r3, #11
 8001496:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800149a:	6839      	ldr	r1, [r7, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f88a 	bl	80015b6 <FLASH_IF_Write_Buffer>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d010      	beq.n	80014ca <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 80014a8:	f06f 0302 	mvn.w	r3, #2
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 80014ae:	e01f      	b.n	80014f0 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014b4:	4619      	mov	r1, r3
 80014b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014b8:	f000 f87d 	bl	80015b6 <FLASH_IF_Write_Buffer>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 80014c2:	f06f 0302 	mvn.w	r3, #2
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 80014c8:	e012      	b.n	80014f0 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 80014ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ce:	4413      	add	r3, r2
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 80014d2:	6a3a      	ldr	r2, [r7, #32]
 80014d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d6:	4413      	add	r3, r2
 80014d8:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3301      	adds	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d99f      	bls.n	8001430 <FLASH_IF_Write+0xa8>
  }

  return status;
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3730      	adds	r7, #48	; 0x30
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	1fff75e0 	.word	0x1fff75e0
 8001500:	03fffc00 	.word	0x03fffc00
 8001504:	58004000 	.word	0x58004000

08001508 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8001514:	e00b      	b.n	800152e <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 8001516:	bf00      	nop
 8001518:	f7ff ff24 	bl	8001364 <LL_FLASH_IsActiveFlag_OperationSuspended>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1fa      	bne.n	8001518 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8001522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001526:	68f9      	ldr	r1, [r7, #12]
 8001528:	2001      	movs	r0, #1
 800152a:	f003 fd19 	bl	8004f60 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001534:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001538:	4299      	cmp	r1, r3
 800153a:	bf08      	it	eq
 800153c:	4290      	cmpeq	r0, r2
 800153e:	d1ea      	bne.n	8001516 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 8001540:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b08a      	sub	sp, #40	; 0x28
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	460b      	mov	r3, r1
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001558:	2302      	movs	r3, #2
 800155a:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 8001560:	897b      	ldrh	r3, [r7, #10]
 8001562:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d008      	beq.n	800157c <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 800156a:	f107 0318 	add.w	r3, r7, #24
 800156e:	4618      	mov	r0, r3
 8001570:	f003 fe94 	bl	800529c <HAL_FLASHEx_Erase_IT>
 8001574:	4603      	mov	r3, r0
 8001576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800157a:	e00a      	b.n	8001592 <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 800157c:	f107 0214 	add.w	r2, r7, #20
 8001580:	f107 0318 	add.w	r3, r7, #24
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f003 fe30 	bl	80051ec <HAL_FLASHEx_Erase>
 800158c:	4603      	mov	r3, r0
 800158e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001596:	2b00      	cmp	r3, #0
 8001598:	d008      	beq.n	80015ac <FLASH_IF_EraseByPages+0x62>
 800159a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d101      	bne.n	80015a6 <FLASH_IF_EraseByPages+0x5c>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e003      	b.n	80015ae <FLASH_IF_EraseByPages+0x64>
 80015a6:	f06f 0301 	mvn.w	r3, #1
 80015aa:	e000      	b.n	80015ae <FLASH_IF_EraseByPages+0x64>
 80015ac:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3728      	adds	r7, #40	; 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b08a      	sub	sp, #40	; 0x28
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	60f8      	str	r0, [r7, #12]
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	e020      	b.n	8001612 <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	2208      	movs	r2, #8
 80015d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d8:	4618      	mov	r0, r3
 80015da:	f019 fcd3 	bl	801af84 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 80015de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e6:	bf08      	it	eq
 80015e8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80015ec:	d005      	beq.n	80015fa <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 80015ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7ff ff88 	bl	8001508 <FLASH_IF_Write64>
 80015f8:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3308      	adds	r3, #8
 80015fe:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	3308      	adds	r3, #8
 8001604:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 8001606:	6a3b      	ldr	r3, [r7, #32]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d108      	bne.n	800161e <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	3301      	adds	r3, #1
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	08db      	lsrs	r3, r3, #3
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	429a      	cmp	r2, r3
 800161a:	d3d9      	bcc.n	80015d0 <FLASH_IF_Write_Buffer+0x1a>
 800161c:	e000      	b.n	8001620 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 800161e:	bf00      	nop
    }
  }

  return status;
 8001620:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 8001622:	4618      	mov	r0, r3
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 800162a:	b480      	push	{r7}
 800162c:	b085      	sub	sp, #20
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001634:	e00a      	b.n	800164c <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2bff      	cmp	r3, #255	; 0xff
 8001640:	d001      	beq.n	8001646 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 8001642:	2301      	movs	r3, #1
 8001644:	e039      	b.n	80016ba <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	3b01      	subs	r3, #1
 800164a:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1ef      	bne.n	8001636 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	e010      	b.n	8001682 <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f103 0208 	add.w	r2, r3, #8
 8001666:	60fa      	str	r2, [r7, #12]
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001670:	bf08      	it	eq
 8001672:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001676:	d001      	beq.n	800167c <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001678:	2301      	movs	r3, #1
 800167a:	e01e      	b.n	80016ba <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	3301      	adds	r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	08db      	lsrs	r3, r3, #3
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	429a      	cmp	r2, r3
 800168a:	d3e9      	bcc.n	8001660 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	607b      	str	r3, [r7, #4]
  while (size != 0)
 800169a:	e00a      	b.n	80016b2 <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2bff      	cmp	r3, #255	; 0xff
 80016a6:	d001      	beq.n	80016ac <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e006      	b.n	80016ba <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	603b      	str	r3, [r7, #0]
  while (size != 0)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f1      	bne.n	800169c <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 80016b8:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <LL_AHB2_GRP1_EnableClock>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4313      	orrs	r3, r2
 80016da:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016e8:	68fb      	ldr	r3, [r7, #12]
}
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	2001      	movs	r0, #1
 800170a:	f7ff ffdb 	bl	80016c4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	2002      	movs	r0, #2
 8001710:	f7ff ffd8 	bl	80016c4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001714:	2004      	movs	r0, #4
 8001716:	f7ff ffd5 	bl	80016c4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001720:	4821      	ldr	r0, [pc, #132]	; (80017a8 <MX_GPIO_Init+0xb4>)
 8001722:	f004 f8ad 	bl	8005880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001726:	2201      	movs	r2, #1
 8001728:	2120      	movs	r1, #32
 800172a:	481f      	ldr	r0, [pc, #124]	; (80017a8 <MX_GPIO_Init+0xb4>)
 800172c:	f004 f8a8 	bl	8005880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	2131      	movs	r1, #49	; 0x31
 8001734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001738:	f004 f8a2 	bl	8005880 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 800173c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001740:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	4619      	mov	r1, r3
 8001752:	4815      	ldr	r0, [pc, #84]	; (80017a8 <MX_GPIO_Init+0xb4>)
 8001754:	f003 fe66 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001758:	2331      	movs	r3, #49	; 0x31
 800175a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	2301      	movs	r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4619      	mov	r1, r3
 800176c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001770:	f003 fe58 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001778:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800177a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800177e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001780:	2301      	movs	r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	4619      	mov	r1, r3
 8001788:	4807      	ldr	r0, [pc, #28]	; (80017a8 <MX_GPIO_Init+0xb4>)
 800178a:	f003 fe4b 	bl	8005424 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	2029      	movs	r0, #41	; 0x29
 8001794:	f002 ff31 	bl	80045fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001798:	2029      	movs	r0, #41	; 0x29
 800179a:	f002 ff48 	bl	800462e <HAL_NVIC_EnableIRQ>

}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	48000400 	.word	0x48000400

080017ac <LL_AHB2_GRP1_EnableClock>:
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4013      	ands	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017d0:	68fb      	ldr	r3, [r7, #12]
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <LL_APB1_GRP1_EnableClock>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4013      	ands	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001800:	68fb      	ldr	r3, [r7, #12]
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <MX_I2C2_Init+0x74>)
 8001812:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <MX_I2C2_Init+0x78>)
 8001814:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_I2C2_Init+0x74>)
 8001818:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <MX_I2C2_Init+0x7c>)
 800181a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_I2C2_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <MX_I2C2_Init+0x74>)
 8001824:	2201      	movs	r2, #1
 8001826:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <MX_I2C2_Init+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MX_I2C2_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <MX_I2C2_Init+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_I2C2_Init+0x74>)
 800183c:	2200      	movs	r2, #0
 800183e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_I2C2_Init+0x74>)
 8001842:	2200      	movs	r2, #0
 8001844:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001846:	480e      	ldr	r0, [pc, #56]	; (8001880 <MX_I2C2_Init+0x74>)
 8001848:	f004 f84a 	bl	80058e0 <HAL_I2C_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001852:	f000 f9e5 	bl	8001c20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001856:	2100      	movs	r1, #0
 8001858:	4809      	ldr	r0, [pc, #36]	; (8001880 <MX_I2C2_Init+0x74>)
 800185a:	f004 fd31 	bl	80062c0 <HAL_I2CEx_ConfigAnalogFilter>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001864:	f000 f9dc 	bl	8001c20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001868:	2100      	movs	r1, #0
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_I2C2_Init+0x74>)
 800186c:	f004 fd72 	bl	8006354 <HAL_I2CEx_ConfigDigitalFilter>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001876:	f000 f9d3 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200005fc 	.word	0x200005fc
 8001884:	40005800 	.word	0x40005800
 8001888:	00707cbb 	.word	0x00707cbb

0800188c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b096      	sub	sp, #88	; 0x58
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	2238      	movs	r2, #56	; 0x38
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f01a fe63 	bl	801c578 <memset>
  if(i2cHandle->Instance==I2C2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a21      	ldr	r2, [pc, #132]	; (800193c <HAL_I2C_MspInit+0xb0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d13b      	bne.n	8001934 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80018c0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	4618      	mov	r0, r3
 80018cc:	f006 f818 	bl	8007900 <HAL_RCCEx_PeriphCLKConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80018d6:	f000 f9a3 	bl	8001c20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	2001      	movs	r0, #1
 80018dc:	f7ff ff66 	bl	80017ac <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e0:	2002      	movs	r0, #2
 80018e2:	f7ff ff63 	bl	80017ac <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018ea:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ec:	2312      	movs	r3, #18
 80018ee:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018f4:	2301      	movs	r3, #1
 80018f6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018f8:	2304      	movs	r3, #4
 80018fa:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001900:	4619      	mov	r1, r3
 8001902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001906:	f003 fd8d 	bl	8005424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800190a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800190e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001910:	2312      	movs	r3, #18
 8001912:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001914:	2301      	movs	r3, #1
 8001916:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001918:	2301      	movs	r3, #1
 800191a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800191c:	2304      	movs	r3, #4
 800191e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001924:	4619      	mov	r1, r3
 8001926:	4806      	ldr	r0, [pc, #24]	; (8001940 <HAL_I2C_MspInit+0xb4>)
 8001928:	f003 fd7c 	bl	8005424 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800192c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001930:	f7ff ff54 	bl	80017dc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001934:	bf00      	nop
 8001936:	3758      	adds	r7, #88	; 0x58
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40005800 	.word	0x40005800
 8001940:	48000400 	.word	0x48000400

08001944 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800194c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001954:	f023 0218 	bic.w	r2, r3, #24
 8001958:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4313      	orrs	r3, r2
 8001960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
	...

08001970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001976:	f001 fc7d 	bl	8003274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800197a:	f000 f8d1 	bl	8001b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800197e:	f7ff feb9 	bl	80016f4 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001982:	f009 fc83 	bl	800b28c <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001986:	f001 f899 	bl	8002abc <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800198a:	f7ff ff3f 	bl	800180c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  UART2_SET =0;
 800198e:	4b58      	ldr	r3, [pc, #352]	; (8001af0 <main+0x180>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]

  uint8_t SHT40_cmd = 0xFD;
 8001994:	23fd      	movs	r3, #253	; 0xfd
 8001996:	72fb      	strb	r3, [r7, #11]
  uint8_t SHT40_dataRX[6];
  uint16_t temp_hword; // teporarly temperature half word
  uint16_t th_hword;   // teporarly humidy half  word


  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 8001998:	2214      	movs	r2, #20
 800199a:	4956      	ldr	r1, [pc, #344]	; (8001af4 <main+0x184>)
 800199c:	4856      	ldr	r0, [pc, #344]	; (8001af8 <main+0x188>)
 800199e:	f009 fbaa 	bl	800b0f6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80019a2:	4b56      	ldr	r3, [pc, #344]	; (8001afc <main+0x18c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b54      	ldr	r3, [pc, #336]	; (8001afc <main+0x18c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0204 	bic.w	r2, r2, #4
 80019b0:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 80019b2:	f107 020b 	add.w	r2, r7, #11
 80019b6:	2364      	movs	r3, #100	; 0x64
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	2188      	movs	r1, #136	; 0x88
 80019be:	4850      	ldr	r0, [pc, #320]	; (8001b00 <main+0x190>)
 80019c0:	f004 f81e 	bl	8005a00 <HAL_I2C_Master_Transmit>
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80019c4:	f009 fc6a 	bl	800b29c <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */
    if(UART2_SET){
 80019c8:	4b49      	ldr	r3, [pc, #292]	; (8001af0 <main+0x180>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01b      	beq.n	8001a08 <main+0x98>
    	UART2_SET = 0;
 80019d0:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <main+0x180>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
    	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 80019d6:	2214      	movs	r2, #20
 80019d8:	4946      	ldr	r1, [pc, #280]	; (8001af4 <main+0x184>)
 80019da:	4847      	ldr	r0, [pc, #284]	; (8001af8 <main+0x188>)
 80019dc:	f009 fb8b 	bl	800b0f6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80019e0:	4b46      	ldr	r3, [pc, #280]	; (8001afc <main+0x18c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b45      	ldr	r3, [pc, #276]	; (8001afc <main+0x18c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0204 	bic.w	r2, r2, #4
 80019ee:	601a      	str	r2, [r3, #0]
	PM2_5 = mainBuffer[6]*256+mainBuffer[7];
 80019f0:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <main+0x194>)
 80019f2:	799b      	ldrb	r3, [r3, #6]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	4b42      	ldr	r3, [pc, #264]	; (8001b04 <main+0x194>)
 80019fc:	79db      	ldrb	r3, [r3, #7]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b40      	ldr	r3, [pc, #256]	; (8001b08 <main+0x198>)
 8001a06:	801a      	strh	r2, [r3, #0]
    }
    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(0x44 << 1),SHT40_dataRX, 6, 100);
 8001a08:	1d3a      	adds	r2, r7, #4
 8001a0a:	2364      	movs	r3, #100	; 0x64
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2306      	movs	r3, #6
 8001a10:	2188      	movs	r1, #136	; 0x88
 8001a12:	483b      	ldr	r0, [pc, #236]	; (8001b00 <main+0x190>)
 8001a14:	f004 f8e8 	bl	8005be8 <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 8001a18:	793b      	ldrb	r3, [r7, #4]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	797b      	ldrb	r3, [r7, #5]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	81fb      	strh	r3, [r7, #14]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	7a3b      	ldrb	r3, [r7, #8]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	81bb      	strh	r3, [r7, #12]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 8001a38:	89fb      	ldrh	r3, [r7, #14]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f928 	bl	8000c90 <__aeabi_ui2f>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fd04 	bl	8000450 <__aeabi_f2d>
 8001a48:	a325      	add	r3, pc, #148	; (adr r3, 8001ae0 <main+0x170>)
 8001a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4e:	f7fe fd57 	bl	8000500 <__aeabi_dmul>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	a323      	add	r3, pc, #140	; (adr r3, 8001ae8 <main+0x178>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	f7fe fe78 	bl	8000754 <__aeabi_ddiv>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <main+0x19c>)
 8001a72:	f7fe fb8d 	bl	8000190 <__aeabi_dsub>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f7ff f801 	bl	8000a84 <__aeabi_d2f>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4a22      	ldr	r2, [pc, #136]	; (8001b10 <main+0x1a0>)
 8001a86:	6013      	str	r3, [r2, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 8001a88:	89bb      	ldrh	r3, [r7, #12]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f900 	bl	8000c90 <__aeabi_ui2f>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fcdc 	bl	8000450 <__aeabi_f2d>
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <main+0x1a4>)
 8001a9e:	f7fe fd2f 	bl	8000500 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	a30f      	add	r3, pc, #60	; (adr r3, 8001ae8 <main+0x178>)
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	f7fe fe50 	bl	8000754 <__aeabi_ddiv>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <main+0x1a8>)
 8001ac2:	f7fe fb65 	bl	8000190 <__aeabi_dsub>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7fe ffd9 	bl	8000a84 <__aeabi_d2f>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a11      	ldr	r2, [pc, #68]	; (8001b1c <main+0x1ac>)
 8001ad6:	6013      	str	r3, [r2, #0]
	  HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8001ad8:	e76b      	b.n	80019b2 <main+0x42>
 8001ada:	bf00      	nop
 8001adc:	f3af 8000 	nop.w
 8001ae0:	00000000 	.word	0x00000000
 8001ae4:	4065e000 	.word	0x4065e000
 8001ae8:	00000000 	.word	0x00000000
 8001aec:	40efffe0 	.word	0x40efffe0
 8001af0:	20000004 	.word	0x20000004
 8001af4:	20000648 	.word	0x20000648
 8001af8:	20000758 	.word	0x20000758
 8001afc:	200008a8 	.word	0x200008a8
 8001b00:	200005fc 	.word	0x200005fc
 8001b04:	2000065c 	.word	0x2000065c
 8001b08:	20000670 	.word	0x20000670
 8001b0c:	40468000 	.word	0x40468000
 8001b10:	20000674 	.word	0x20000674
 8001b14:	405f4000 	.word	0x405f4000
 8001b18:	40180000 	.word	0x40180000
 8001b1c:	20000678 	.word	0x20000678

08001b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b09a      	sub	sp, #104	; 0x68
 8001b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b26:	f107 0320 	add.w	r3, r7, #32
 8001b2a:	2248      	movs	r2, #72	; 0x48
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f01a fd22 	bl	801c578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b34:	f107 0308 	add.w	r3, r7, #8
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
 8001b44:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b46:	f004 fc51 	bl	80063ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff fefa 	bl	8001944 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <SystemClock_Config+0xac>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b58:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <SystemClock_Config+0xac>)
 8001b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <SystemClock_Config+0xac>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001b6c:	2305      	movs	r3, #5
 8001b6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8001b70:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b76:	2381      	movs	r3, #129	; 0x81
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b82:	f107 0320 	add.w	r3, r7, #32
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 ff7c 	bl	8006a84 <HAL_RCC_OscConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001b92:	f000 f845 	bl	8001c20 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001b96:	234f      	movs	r3, #79	; 0x4f
 8001b98:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bae:	f107 0308 	add.w	r3, r7, #8
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f005 fb01 	bl	80071bc <HAL_RCC_ClockConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001bc0:	f000 f82e 	bl	8001c20 <Error_Handler>
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3768      	adds	r7, #104	; 0x68
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	58000400 	.word	0x58000400

08001bd0 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <HAL_UARTEx_RxEventCallback+0x40>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d110      	bne.n	8001c08 <HAL_UARTEx_RxEventCallback+0x38>
	{
		if(aRXBufferUser[0]=='B'&& aRXBufferUser[1]=='M'){
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_UARTEx_RxEventCallback+0x44>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b42      	cmp	r3, #66	; 0x42
 8001bec:	d109      	bne.n	8001c02 <HAL_UARTEx_RxEventCallback+0x32>
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_UARTEx_RxEventCallback+0x44>)
 8001bf0:	785b      	ldrb	r3, [r3, #1]
 8001bf2:	2b4d      	cmp	r3, #77	; 0x4d
 8001bf4:	d105      	bne.n	8001c02 <HAL_UARTEx_RxEventCallback+0x32>
		memcpy(mainBuffer,aRXBufferUser,Size);
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4906      	ldr	r1, [pc, #24]	; (8001c14 <HAL_UARTEx_RxEventCallback+0x44>)
 8001bfc:	4806      	ldr	r0, [pc, #24]	; (8001c18 <HAL_UARTEx_RxEventCallback+0x48>)
 8001bfe:	f01a fcad 	bl	801c55c <memcpy>


		}
		UART2_SET =1;
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_UARTEx_RxEventCallback+0x4c>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]

	}
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40004400 	.word	0x40004400
 8001c14:	20000648 	.word	0x20000648
 8001c18:	2000065c 	.word	0x2000065c
 8001c1c:	20000004 	.word	0x20000004

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <Error_Handler+0x8>

08001c2a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <LL_APB1_GRP1_EnableClock>:
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b085      	sub	sp, #20
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
	...

08001c7c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08c      	sub	sp, #48	; 0x30
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	222c      	movs	r2, #44	; 0x2c
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f01a fc75 	bl	801c578 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c8e:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <MX_RTC_Init+0x9c>)
 8001c90:	4a22      	ldr	r2, [pc, #136]	; (8001d1c <MX_RTC_Init+0xa0>)
 8001c92:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001c94:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <MX_RTC_Init+0x9c>)
 8001c96:	221f      	movs	r2, #31
 8001c98:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c9a:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <MX_RTC_Init+0x9c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <MX_RTC_Init+0x9c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <MX_RTC_Init+0x9c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cac:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <MX_RTC_Init+0x9c>)
 8001cae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cb2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <MX_RTC_Init+0x9c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <MX_RTC_Init+0x9c>)
 8001cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cc2:	4815      	ldr	r0, [pc, #84]	; (8001d18 <MX_RTC_Init+0x9c>)
 8001cc4:	f005 ff36 	bl	8007b34 <HAL_RTC_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001cce:	f7ff ffa7 	bl	8001c20 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001cd2:	4811      	ldr	r0, [pc, #68]	; (8001d18 <MX_RTC_Init+0x9c>)
 8001cd4:	f006 fa24 	bl	8008120 <HAL_RTCEx_SetSSRU_IT>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001cde:	f7ff ff9f 	bl	8001c20 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001cee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001cf2:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4805      	ldr	r0, [pc, #20]	; (8001d18 <MX_RTC_Init+0x9c>)
 8001d02:	f005 ff91 	bl	8007c28 <HAL_RTC_SetAlarm_IT>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001d0c:	f7ff ff88 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	3730      	adds	r7, #48	; 0x30
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	2000067c 	.word	0x2000067c
 8001d1c:	40002800 	.word	0x40002800

08001d20 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b090      	sub	sp, #64	; 0x40
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d28:	f107 0308 	add.w	r3, r7, #8
 8001d2c:	2238      	movs	r2, #56	; 0x38
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f01a fc21 	bl	801c578 <memset>
  if(rtcHandle->Instance==RTC)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a16      	ldr	r2, [pc, #88]	; (8001d94 <HAL_RTC_MspInit+0x74>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d125      	bne.n	8001d8c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d44:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d4a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d4c:	f107 0308 	add.w	r3, r7, #8
 8001d50:	4618      	mov	r0, r3
 8001d52:	f005 fdd5 	bl	8007900 <HAL_RCCEx_PeriphCLKConfig>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001d5c:	f7ff ff60 	bl	8001c20 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d60:	f7ff ff63 	bl	8001c2a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001d64:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d68:	f7ff ff6f 	bl	8001c4a <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2100      	movs	r1, #0
 8001d70:	2002      	movs	r0, #2
 8001d72:	f002 fc42 	bl	80045fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001d76:	2002      	movs	r0, #2
 8001d78:	f002 fc59 	bl	800462e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2100      	movs	r1, #0
 8001d80:	202a      	movs	r0, #42	; 0x2a
 8001d82:	f002 fc3a 	bl	80045fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001d86:	202a      	movs	r0, #42	; 0x2a
 8001d88:	f002 fc51 	bl	800462e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	3740      	adds	r7, #64	; 0x40
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40002800 	.word	0x40002800

08001d98 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	58000400 	.word	0x58000400

08001db0 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001dcc:	f001 fa72 	bl	80032b4 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001dd0:	f7ff ffe2 	bl	8001d98 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f004 fb9b 	bl	8006510 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001de2:	f001 fa75 	bl	80032d0 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001de6:	f001 f8e3 	bl	8002fb0 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}

08001dee <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001df2:	f001 fa5f 	bl	80032b4 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001df6:	2101      	movs	r1, #1
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f004 fb05 	bl	8006408 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001e06:	f001 fa63 	bl	80032d0 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <NMI_Handler+0x4>

08001e20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <HardFault_Handler+0x4>

08001e26 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <MemManage_Handler+0x4>

08001e2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <BusFault_Handler+0x4>

08001e32 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <UsageFault_Handler+0x4>

08001e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001e6e:	f006 f993 	bl	8008198 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000067c 	.word	0x2000067c

08001e7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <DMA1_Channel1_IRQHandler+0x10>)
 8001e82:	f002 fe6b 	bl	8004b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200007e8 	.word	0x200007e8

08001e90 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <DMA1_Channel2_IRQHandler+0x10>)
 8001e96:	f002 fe61 	bl	8004b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000848 	.word	0x20000848

08001ea4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ea8:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <DMA1_Channel3_IRQHandler+0x10>)
 8001eaa:	f002 fe57 	bl	8004b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200008a8 	.word	0x200008a8

08001eb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <USART1_IRQHandler+0x10>)
 8001ebe:	f006 ffcb 	bl	8008e58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200006c8 	.word	0x200006c8

08001ecc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <USART2_IRQHandler+0x10>)
 8001ed2:	f006 ffc1 	bl	8008e58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000758 	.word	0x20000758

08001ee0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001ee4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ee8:	f003 fce2 	bl	80058b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <RTC_Alarm_IRQHandler+0x10>)
 8001ef6:	f005 ffff 	bl	8007ef8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2000067c 	.word	0x2000067c

08001f04 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001f0a:	f006 fcad 	bl	8008868 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200006b4 	.word	0x200006b4

08001f18 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <DMAMUX1_OVR_IRQHandler+0x10>)
 8001f1e:	f002 ffcd 	bl	8004ebc <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000848 	.word	0x20000848

08001f2c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f48:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f50:	68fb      	ldr	r3, [r7, #12]
}
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <MX_SUBGHZ_Init+0x20>)
 8001f62:	2208      	movs	r2, #8
 8001f64:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_SUBGHZ_Init+0x20>)
 8001f68:	f006 fa02 	bl	8008370 <HAL_SUBGHZ_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001f72:	f7ff fe55 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200006b4 	.word	0x200006b4

08001f80 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f7ff ffcf 	bl	8001f2c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	2032      	movs	r0, #50	; 0x32
 8001f94:	f002 fb31 	bl	80045fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001f98:	2032      	movs	r0, #50	; 0x32
 8001f9a:	f002 fb48 	bl	800462e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001fb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001fd0:	4b02      	ldr	r3, [pc, #8]	; (8001fdc <LL_FLASH_GetUDN+0x10>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr
 8001fdc:	1fff7580 	.word	0x1fff7580

08001fe0 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <LL_FLASH_GetDeviceID+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	b2db      	uxtb	r3, r3
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	1fff7584 	.word	0x1fff7584

08001ff8 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <LL_FLASH_GetSTCompanyID+0x14>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0a1b      	lsrs	r3, r3, #8
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	1fff7584 	.word	0x1fff7584

08002010 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002014:	2000      	movs	r0, #0
 8002016:	f7ff ffc6 	bl	8001fa6 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800201a:	f019 fd45 	bl	801baa8 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <SystemApp_Init+0x50>)
 8002020:	2201      	movs	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002024:	f000 f9a0 	bl	8002368 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002028:	f019 ffce 	bl	801bfc8 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800202c:	480d      	ldr	r0, [pc, #52]	; (8002064 <SystemApp_Init+0x54>)
 800202e:	f01a f879 	bl	801c124 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <SystemApp_Init+0x58>)
 8002034:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002038:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800203a:	2002      	movs	r0, #2
 800203c:	f01a f880 	bl	801c140 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002040:	f7ff f8c6 	bl	80011d0 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002044:	f000 fa1a 	bl	800247c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002048:	f018 fef6 	bl	801ae38 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800204c:	2101      	movs	r1, #1
 800204e:	2001      	movs	r0, #1
 8002050:	f018 ff32 	bl	801aeb8 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002054:	2101      	movs	r1, #1
 8002056:	2001      	movs	r0, #1
 8002058:	f018 fefe 	bl	801ae58 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	200006c0 	.word	0x200006c0
 8002064:	08002231 	.word	0x08002231
 8002068:	58004000 	.word	0x58004000

0800206c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002070:	f018 ff52 	bl	801af18 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}

08002078 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002082:	f7ff f8b3 	bl	80011ec <SYS_GetBatteryLevel>
 8002086:	4603      	mov	r3, r0
 8002088:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800208a:	88bb      	ldrh	r3, [r7, #4]
 800208c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002090:	4293      	cmp	r3, r2
 8002092:	d902      	bls.n	800209a <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002094:	23fe      	movs	r3, #254	; 0xfe
 8002096:	71fb      	strb	r3, [r7, #7]
 8002098:	e014      	b.n	80020c4 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 800209a:	88bb      	ldrh	r3, [r7, #4]
 800209c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80020a0:	d202      	bcs.n	80020a8 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	71fb      	strb	r3, [r7, #7]
 80020a6:	e00d      	b.n	80020c4 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80020a8:	88bb      	ldrh	r3, [r7, #4]
 80020aa:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80020ae:	461a      	mov	r2, r3
 80020b0:	4613      	mov	r3, r2
 80020b2:	01db      	lsls	r3, r3, #7
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <GetBatteryLevel+0x58>)
 80020bc:	fba3 2302 	umull	r2, r3, r3, r2
 80020c0:	09db      	lsrs	r3, r3, #7
 80020c2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80020c4:	79fb      	ldrb	r3, [r7, #7]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	1b4e81b5 	.word	0x1b4e81b5

080020d4 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 f9a1 	bl	8002428 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fe29 	bl	8000d40 <__aeabi_f2iz>
 80020ee:	4603      	mov	r3, r0
 80020f0:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80020f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3720      	adds	r7, #32
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80020fe:	b590      	push	{r4, r7, lr}
 8002100:	b087      	sub	sp, #28
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 800210a:	f7ff ff5f 	bl	8001fcc <LL_FLASH_GetUDN>
 800210e:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002116:	d138      	bne.n	800218a <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002118:	f001 f8e8 	bl	80032ec <HAL_GetUIDw0>
 800211c:	4604      	mov	r4, r0
 800211e:	f001 f8f9 	bl	8003314 <HAL_GetUIDw2>
 8002122:	4603      	mov	r3, r0
 8002124:	4423      	add	r3, r4
 8002126:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002128:	f001 f8ea 	bl	8003300 <HAL_GetUIDw1>
 800212c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	0e1a      	lsrs	r2, r3, #24
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3307      	adds	r3, #7
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	0c1a      	lsrs	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3306      	adds	r3, #6
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	0a1a      	lsrs	r2, r3, #8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3305      	adds	r3, #5
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3304      	adds	r3, #4
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	0e1a      	lsrs	r2, r3, #24
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3303      	adds	r3, #3
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	0c1a      	lsrs	r2, r3, #16
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3302      	adds	r3, #2
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	0a1a      	lsrs	r2, r3, #8
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3301      	adds	r3, #1
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	b2da      	uxtb	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002188:	e031      	b.n	80021ee <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3307      	adds	r3, #7
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	0a1a      	lsrs	r2, r3, #8
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3306      	adds	r3, #6
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	0c1a      	lsrs	r2, r3, #16
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3305      	adds	r3, #5
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	0e1a      	lsrs	r2, r3, #24
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3304      	adds	r3, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80021b8:	f7ff ff12 	bl	8001fe0 <LL_FLASH_GetDeviceID>
 80021bc:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3303      	adds	r3, #3
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80021c8:	f7ff ff16 	bl	8001ff8 <LL_FLASH_GetSTCompanyID>
 80021cc:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3302      	adds	r3, #2
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	0a1a      	lsrs	r2, r3, #8
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3301      	adds	r3, #1
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	0c1b      	lsrs	r3, r3, #16
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	701a      	strb	r2, [r3, #0]
}
 80021ee:	bf00      	nop
 80021f0:	371c      	adds	r7, #28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd90      	pop	{r4, r7, pc}

080021f6 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 80021f6:	b590      	push	{r4, r7, lr}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8002200:	f7ff fee4 	bl	8001fcc <LL_FLASH_GetUDN>
 8002204:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d10b      	bne.n	8002226 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800220e:	f001 f86d 	bl	80032ec <HAL_GetUIDw0>
 8002212:	4604      	mov	r4, r0
 8002214:	f001 f874 	bl	8003300 <HAL_GetUIDw1>
 8002218:	4603      	mov	r3, r0
 800221a:	405c      	eors	r4, r3
 800221c:	f001 f87a 	bl	8003314 <HAL_GetUIDw2>
 8002220:	4603      	mov	r3, r0
 8002222:	4063      	eors	r3, r4
 8002224:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8002226:	687b      	ldr	r3, [r7, #4]

}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	bd90      	pop	{r4, r7, pc}

08002230 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af02      	add	r7, sp, #8
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800223a:	f107 0308 	add.w	r3, r7, #8
 800223e:	4618      	mov	r0, r3
 8002240:	f018 ff7a 	bl	801b138 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800224a:	9200      	str	r2, [sp, #0]
 800224c:	4a07      	ldr	r2, [pc, #28]	; (800226c <TimestampNow+0x3c>)
 800224e:	2110      	movs	r1, #16
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f81d 	bl	8002290 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7fd ff8e 	bl	8000178 <strlen>
 800225c:	4603      	mov	r3, r0
 800225e:	b29a      	uxth	r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	0801c770 	.word	0x0801c770

08002270 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002274:	2101      	movs	r1, #1
 8002276:	2002      	movs	r0, #2
 8002278:	f018 fdee 	bl	801ae58 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}

08002280 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002284:	2100      	movs	r1, #0
 8002286:	2002      	movs	r0, #2
 8002288:	f018 fde6 	bl	801ae58 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}

08002290 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002290:	b40c      	push	{r2, r3}
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80022a2:	6839      	ldr	r1, [r7, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f019 f917 	bl	801b4dc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022b8:	b002      	add	sp, #8
 80022ba:	4770      	bx	lr

080022bc <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_GetTick+0x24>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80022e2:	f000 f997 	bl	8002614 <TIMER_IF_GetTimerValue>
 80022e6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80022e8:	687b      	ldr	r3, [r7, #4]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200006c0 	.word	0x200006c0

080022f8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fa0d 	bl	8002722 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <LL_AHB2_GRP1_EnableClock>:
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800231e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4313      	orrs	r3, r2
 8002326:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4013      	ands	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002334:	68fb      	ldr	r3, [r7, #12]
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <LL_EXTI_EnableIT_32_63+0x24>)
 800234a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800234e:	4905      	ldr	r1, [pc, #20]	; (8002364 <LL_EXTI_EnableIT_32_63+0x24>)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	58000800 	.word	0x58000800

08002368 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 800236e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002372:	f7ff ffe5 	bl	8002340 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002376:	f000 ffd7 	bl	8003328 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800237a:	f000 ffdb 	bl	8003334 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 800237e:	f000 ffdf 	bl	8003340 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002390:	2301      	movs	r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 800239c:	2001      	movs	r0, #1
 800239e:	f7ff ffb7 	bl	8002310 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 80023a2:	2002      	movs	r0, #2
 80023a4:	f7ff ffb4 	bl	8002310 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 80023a8:	2002      	movs	r0, #2
 80023aa:	f7ff ffb1 	bl	8002310 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 80023ae:	2002      	movs	r0, #2
 80023b0:	f7ff ffae 	bl	8002310 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80023b4:	2301      	movs	r3, #1
 80023b6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c0:	f003 f830 	bl	8005424 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80023c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023c8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	4619      	mov	r1, r3
 80023ce:	4815      	ldr	r0, [pc, #84]	; (8002424 <DBG_Init+0xbc>)
 80023d0:	f003 f828 	bl	8005424 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 80023d4:	2308      	movs	r3, #8
 80023d6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 80023d8:	1d3b      	adds	r3, r7, #4
 80023da:	4619      	mov	r1, r3
 80023dc:	4811      	ldr	r0, [pc, #68]	; (8002424 <DBG_Init+0xbc>)
 80023de:	f003 f821 	bl	8005424 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 80023e2:	2310      	movs	r3, #16
 80023e4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	4619      	mov	r1, r3
 80023ea:	480e      	ldr	r0, [pc, #56]	; (8002424 <DBG_Init+0xbc>)
 80023ec:	f003 f81a 	bl	8005424 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80023f0:	2200      	movs	r2, #0
 80023f2:	2101      	movs	r1, #1
 80023f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f8:	f003 fa42 	bl	8005880 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80023fc:	2200      	movs	r2, #0
 80023fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002402:	4808      	ldr	r0, [pc, #32]	; (8002424 <DBG_Init+0xbc>)
 8002404:	f003 fa3c 	bl	8005880 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8002408:	2200      	movs	r2, #0
 800240a:	2108      	movs	r1, #8
 800240c:	4805      	ldr	r0, [pc, #20]	; (8002424 <DBG_Init+0xbc>)
 800240e:	f003 fa37 	bl	8005880 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8002412:	2200      	movs	r2, #0
 8002414:	2110      	movs	r1, #16
 8002416:	4803      	ldr	r0, [pc, #12]	; (8002424 <DBG_Init+0xbc>)
 8002418:	f003 fa32 	bl	8005880 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 800241c:	bf00      	nop
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	48000400 	.word	0x48000400

08002428 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002430:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <EnvSensors_Read+0x40>)
 8002432:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002434:	4b0d      	ldr	r3, [pc, #52]	; (800246c <EnvSensors_Read+0x44>)
 8002436:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002438:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <EnvSensors_Read+0x48>)
 800243a:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a08      	ldr	r2, [pc, #32]	; (8002474 <EnvSensors_Read+0x4c>)
 8002452:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a08      	ldr	r2, [pc, #32]	; (8002478 <EnvSensors_Read+0x50>)
 8002458:	611a      	str	r2, [r3, #16]

  return 0;
 800245a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 800245c:	4618      	mov	r0, r3
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	42480000 	.word	0x42480000
 800246c:	41900000 	.word	0x41900000
 8002470:	447a0000 	.word	0x447a0000
 8002474:	003e090d 	.word	0x003e090d
 8002478:	000503ab 	.word	0x000503ab

0800247c <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002486:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <TIMER_IF_Init+0x5c>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	f083 0301 	eor.w	r3, r3, #1
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01b      	beq.n	8002504 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <TIMER_IF_Init+0x60>)
 80024ce:	f04f 32ff 	mov.w	r2, #4294967295
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 80024d4:	f7ff fbd2 	bl	8001c7c <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 80024d8:	f000 f856 	bl	8002588 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80024dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024e0:	480c      	ldr	r0, [pc, #48]	; (8002514 <TIMER_IF_Init+0x60>)
 80024e2:	f005 fcad 	bl	8007e40 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <TIMER_IF_Init+0x60>)
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80024ee:	4809      	ldr	r0, [pc, #36]	; (8002514 <TIMER_IF_Init+0x60>)
 80024f0:	f005 fde4 	bl	80080bc <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80024f4:	2000      	movs	r0, #0
 80024f6:	f000 f9d3 	bl	80028a0 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80024fa:	f000 f85f 	bl	80025bc <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80024fe:	4b04      	ldr	r3, [pc, #16]	; (8002510 <TIMER_IF_Init+0x5c>)
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002504:	79fb      	ldrb	r3, [r7, #7]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200006c1 	.word	0x200006c1
 8002514:	2000067c 	.word	0x2000067c

08002518 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08e      	sub	sp, #56	; 0x38
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002526:	f107 0308 	add.w	r3, r7, #8
 800252a:	222c      	movs	r2, #44	; 0x2c
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f01a f822 	bl	801c578 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002534:	f000 f828 	bl	8002588 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <TIMER_IF_StartTimer+0x68>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	4413      	add	r3, r2
 8002540:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	43db      	mvns	r3, r3
 800254a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800254c:	2300      	movs	r3, #0
 800254e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002550:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002554:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800255a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800255c:	f107 0308 	add.w	r3, r7, #8
 8002560:	2201      	movs	r2, #1
 8002562:	4619      	mov	r1, r3
 8002564:	4807      	ldr	r0, [pc, #28]	; (8002584 <TIMER_IF_StartTimer+0x6c>)
 8002566:	f005 fb5f 	bl	8007c28 <HAL_RTC_SetAlarm_IT>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002570:	f7ff fb56 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002574:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002578:	4618      	mov	r0, r3
 800257a:	3738      	adds	r7, #56	; 0x38
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	200006c4 	.word	0x200006c4
 8002584:	2000067c 	.word	0x2000067c

08002588 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002592:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <TIMER_IF_StopTimer+0x2c>)
 8002594:	2201      	movs	r2, #1
 8002596:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002598:	f44f 7180 	mov.w	r1, #256	; 0x100
 800259c:	4806      	ldr	r0, [pc, #24]	; (80025b8 <TIMER_IF_StopTimer+0x30>)
 800259e:	f005 fc4f 	bl	8007e40 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <TIMER_IF_StopTimer+0x30>)
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80025aa:	79fb      	ldrb	r3, [r7, #7]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40002800 	.word	0x40002800
 80025b8:	2000067c 	.word	0x2000067c

080025bc <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 80025c0:	f000 f98e 	bl	80028e0 <GetTimerTicks>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4a03      	ldr	r2, [pc, #12]	; (80025d4 <TIMER_IF_SetTimerContext+0x18>)
 80025c8:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80025ca:	4b02      	ldr	r3, [pc, #8]	; (80025d4 <TIMER_IF_SetTimerContext+0x18>)
 80025cc:	681b      	ldr	r3, [r3, #0]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200006c4 	.word	0x200006c4

080025d8 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80025dc:	4b02      	ldr	r3, [pc, #8]	; (80025e8 <TIMER_IF_GetTimerContext+0x10>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	200006c4 	.word	0x200006c4

080025ec <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80025f6:	f000 f973 	bl	80028e0 <GetTimerTicks>
 80025fa:	4602      	mov	r2, r0
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002604:	687b      	ldr	r3, [r7, #4]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200006c4 	.word	0x200006c4

08002614 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <TIMER_IF_GetTimerValue+0x24>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002626:	f000 f95b 	bl	80028e0 <GetTimerTicks>
 800262a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 800262c:	687b      	ldr	r3, [r7, #4]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200006c1 	.word	0x200006c1

0800263c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002646:	2303      	movs	r3, #3
 8002648:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 800264a:	687b      	ldr	r3, [r7, #4]
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002656:	b5b0      	push	{r4, r5, r7, lr}
 8002658:	b084      	sub	sp, #16
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800265e:	2100      	movs	r1, #0
 8002660:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	2000      	movs	r0, #0
 8002666:	460a      	mov	r2, r1
 8002668:	4603      	mov	r3, r0
 800266a:	0d95      	lsrs	r5, r2, #22
 800266c:	0294      	lsls	r4, r2, #10
 800266e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	4620      	mov	r0, r4
 8002678:	4629      	mov	r1, r5
 800267a:	f7fe fb87 	bl	8000d8c <__aeabi_uldivmod>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4613      	mov	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bdb0      	pop	{r4, r5, r7, pc}

08002690 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002690:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002694:	b085      	sub	sp, #20
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800269a:	2100      	movs	r1, #0
 800269c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	2000      	movs	r0, #0
 80026a2:	460c      	mov	r4, r1
 80026a4:	4605      	mov	r5, r0
 80026a6:	4620      	mov	r0, r4
 80026a8:	4629      	mov	r1, r5
 80026aa:	f04f 0a00 	mov.w	sl, #0
 80026ae:	f04f 0b00 	mov.w	fp, #0
 80026b2:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80026b6:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80026ba:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80026be:	4650      	mov	r0, sl
 80026c0:	4659      	mov	r1, fp
 80026c2:	1b02      	subs	r2, r0, r4
 80026c4:	eb61 0305 	sbc.w	r3, r1, r5
 80026c8:	f04f 0000 	mov.w	r0, #0
 80026cc:	f04f 0100 	mov.w	r1, #0
 80026d0:	0099      	lsls	r1, r3, #2
 80026d2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80026d6:	0090      	lsls	r0, r2, #2
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	eb12 0804 	adds.w	r8, r2, r4
 80026e0:	eb43 0905 	adc.w	r9, r3, r5
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026f8:	4690      	mov	r8, r2
 80026fa:	4699      	mov	r9, r3
 80026fc:	4640      	mov	r0, r8
 80026fe:	4649      	mov	r1, r9
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	0a82      	lsrs	r2, r0, #10
 800270a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800270e:	0a8b      	lsrs	r3, r1, #10
 8002710:	4613      	mov	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002714:	68fb      	ldr	r3, [r7, #12]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002720:	4770      	bx	lr

08002722 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ff93 	bl	8002656 <TIMER_IF_Convert_ms2Tick>
 8002730:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002732:	f000 f8d5 	bl	80028e0 <GetTimerTicks>
 8002736:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002738:	e000      	b.n	800273c <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 800273a:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800273c:	f000 f8d0 	bl	80028e0 <GetTimerTicks>
 8002740:	4602      	mov	r2, r0
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	429a      	cmp	r2, r3
 800274a:	d8f6      	bhi.n	800273a <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800275e:	f019 faf1 	bl	801bd44 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002772:	f000 f8a5 	bl	80028c0 <TIMER_IF_BkUp_Read_MSBticks>
 8002776:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3301      	adds	r3, #1
 800277c:	4618      	mov	r0, r3
 800277e:	f000 f88f 	bl	80028a0 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 800278a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800278e:	b08c      	sub	sp, #48	; 0x30
 8002790:	af00      	add	r7, sp, #0
 8002792:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002798:	f000 f8a2 	bl	80028e0 <GetTimerTicks>
 800279c:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800279e:	f000 f88f 	bl	80028c0 <TIMER_IF_BkUp_Read_MSBticks>
 80027a2:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	2200      	movs	r2, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	60fa      	str	r2, [r7, #12]
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	000b      	movs	r3, r1
 80027b8:	2200      	movs	r2, #0
 80027ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027bc:	2000      	movs	r0, #0
 80027be:	460c      	mov	r4, r1
 80027c0:	4605      	mov	r5, r0
 80027c2:	eb12 0804 	adds.w	r8, r2, r4
 80027c6:	eb43 0905 	adc.w	r9, r3, r5
 80027ca:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80027ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	0a82      	lsrs	r2, r0, #10
 80027dc:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80027e0:	0a8b      	lsrs	r3, r1, #10
 80027e2:	4613      	mov	r3, r2
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2200      	movs	r2, #0
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80027f4:	f04f 0b00 	mov.w	fp, #0
 80027f8:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ff46 	bl	8002690 <TIMER_IF_Convert_Tick2ms>
 8002804:	4603      	mov	r3, r0
 8002806:	b29a      	uxth	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 800280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800280e:	4618      	mov	r0, r3
 8002810:	3730      	adds	r7, #48	; 0x30
 8002812:	46bd      	mov	sp, r7
 8002814:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002818 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	2100      	movs	r1, #0
 8002824:	4803      	ldr	r0, [pc, #12]	; (8002834 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002826:	f005 fcdb 	bl	80081e0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	2000067c 	.word	0x2000067c

08002838 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	2101      	movs	r1, #1
 8002844:	4803      	ldr	r0, [pc, #12]	; (8002854 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002846:	f005 fccb 	bl	80081e0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2000067c 	.word	0x2000067c

08002858 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002862:	2100      	movs	r1, #0
 8002864:	4804      	ldr	r0, [pc, #16]	; (8002878 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002866:	f005 fcd3 	bl	8008210 <HAL_RTCEx_BKUPRead>
 800286a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 800286c:	687b      	ldr	r3, [r7, #4]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	2000067c 	.word	0x2000067c

0800287c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002886:	2101      	movs	r1, #1
 8002888:	4804      	ldr	r0, [pc, #16]	; (800289c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800288a:	f005 fcc1 	bl	8008210 <HAL_RTCEx_BKUPRead>
 800288e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002890:	687b      	ldr	r3, [r7, #4]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	2000067c 	.word	0x2000067c

080028a0 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	2102      	movs	r1, #2
 80028ac:	4803      	ldr	r0, [pc, #12]	; (80028bc <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80028ae:	f005 fc97 	bl	80081e0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	2000067c 	.word	0x2000067c

080028c0 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80028c6:	2102      	movs	r1, #2
 80028c8:	4804      	ldr	r0, [pc, #16]	; (80028dc <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80028ca:	f005 fca1 	bl	8008210 <HAL_RTCEx_BKUPRead>
 80028ce:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80028d0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	2000067c 	.word	0x2000067c

080028e0 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80028e6:	480b      	ldr	r0, [pc, #44]	; (8002914 <GetTimerTicks+0x34>)
 80028e8:	f7ff fdd9 	bl	800249e <LL_RTC_TIME_GetSubSecond>
 80028ec:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80028ee:	e003      	b.n	80028f8 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80028f0:	4808      	ldr	r0, [pc, #32]	; (8002914 <GetTimerTicks+0x34>)
 80028f2:	f7ff fdd4 	bl	800249e <LL_RTC_TIME_GetSubSecond>
 80028f6:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80028f8:	4806      	ldr	r0, [pc, #24]	; (8002914 <GetTimerTicks+0x34>)
 80028fa:	f7ff fdd0 	bl	800249e <LL_RTC_TIME_GetSubSecond>
 80028fe:	4602      	mov	r2, r0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4293      	cmp	r3, r2
 8002904:	d1f4      	bne.n	80028f0 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40002800 	.word	0x40002800

08002918 <LL_AHB2_GRP1_EnableClock>:
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002924:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4313      	orrs	r3, r2
 800292e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4013      	ands	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800293c:	68fb      	ldr	r3, [r7, #12]
}
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <LL_APB1_GRP1_EnableClock>:
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002954:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4313      	orrs	r3, r2
 800295e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002964:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4013      	ands	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800296c:	68fb      	ldr	r3, [r7, #12]
}
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <LL_APB1_GRP1_DisableClock>:
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002984:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	43db      	mvns	r3, r3
 800298a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800298e:	4013      	ands	r3, r2
 8002990:	658b      	str	r3, [r1, #88]	; 0x58
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <LL_APB2_GRP1_EnableClock>:
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80029a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80029b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4013      	ands	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029c0:	68fb      	ldr	r3, [r7, #12]
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <LL_APB2_GRP1_DisableClock>:
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	43db      	mvns	r3, r3
 80029de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029e2:	4013      	ands	r3, r2
 80029e4:	660b      	str	r3, [r1, #96]	; 0x60
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <LL_SYSCFG_EnableFastModePlus>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <LL_SYSCFG_EnableFastModePlus+0x20>)
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	4904      	ldr	r1, [pc, #16]	; (8002a10 <LL_SYSCFG_EnableFastModePlus+0x20>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40010000 	.word	0x40010000

08002a14 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a18:	4b26      	ldr	r3, [pc, #152]	; (8002ab4 <MX_USART1_UART_Init+0xa0>)
 8002a1a:	4a27      	ldr	r2, [pc, #156]	; (8002ab8 <MX_USART1_UART_Init+0xa4>)
 8002a1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a1e:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <MX_USART1_UART_Init+0xa0>)
 8002a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a26:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <MX_USART1_UART_Init+0xa0>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a2c:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <MX_USART1_UART_Init+0xa0>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a32:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <MX_USART1_UART_Init+0xa0>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a38:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <MX_USART1_UART_Init+0xa0>)
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3e:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <MX_USART1_UART_Init+0xa0>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a44:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <MX_USART1_UART_Init+0xa0>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <MX_USART1_UART_Init+0xa0>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a50:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <MX_USART1_UART_Init+0xa0>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8002a56:	4b17      	ldr	r3, [pc, #92]	; (8002ab4 <MX_USART1_UART_Init+0xa0>)
 8002a58:	2240      	movs	r2, #64	; 0x40
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8002a5c:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <MX_USART1_UART_Init+0xa0>)
 8002a5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a62:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8002a64:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <MX_USART1_UART_Init+0xa0>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a6a:	4812      	ldr	r0, [pc, #72]	; (8002ab4 <MX_USART1_UART_Init+0xa0>)
 8002a6c:	f006 f8bb 	bl	8008be6 <HAL_UART_Init>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8002a76:	f7ff f8d3 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	480d      	ldr	r0, [pc, #52]	; (8002ab4 <MX_USART1_UART_Init+0xa0>)
 8002a7e:	f008 fabe 	bl	800affe <HAL_UARTEx_SetTxFifoThreshold>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8002a88:	f7ff f8ca 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4809      	ldr	r0, [pc, #36]	; (8002ab4 <MX_USART1_UART_Init+0xa0>)
 8002a90:	f008 faf3 	bl	800b07a <HAL_UARTEx_SetRxFifoThreshold>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002a9a:	f7ff f8c1 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002a9e:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <MX_USART1_UART_Init+0xa0>)
 8002aa0:	f008 fa3a 	bl	800af18 <HAL_UARTEx_EnableFifoMode>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8002aaa:	f7ff f8b9 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200006c8 	.word	0x200006c8
 8002ab8:	40013800 	.word	0x40013800

08002abc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ac0:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <MX_USART2_UART_Init+0x94>)
 8002ac2:	4a24      	ldr	r2, [pc, #144]	; (8002b54 <MX_USART2_UART_Init+0x98>)
 8002ac4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002ac6:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <MX_USART2_UART_Init+0x94>)
 8002ac8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002acc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ace:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <MX_USART2_UART_Init+0x94>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ad4:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <MX_USART2_UART_Init+0x94>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ada:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <MX_USART2_UART_Init+0x94>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <MX_USART2_UART_Init+0x94>)
 8002ae2:	220c      	movs	r2, #12
 8002ae4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <MX_USART2_UART_Init+0x94>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8002aec:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <MX_USART2_UART_Init+0x94>)
 8002aee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002af2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002af4:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <MX_USART2_UART_Init+0x94>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <MX_USART2_UART_Init+0x94>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <MX_USART2_UART_Init+0x94>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b06:	4812      	ldr	r0, [pc, #72]	; (8002b50 <MX_USART2_UART_Init+0x94>)
 8002b08:	f006 f86d 	bl	8008be6 <HAL_UART_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002b12:	f7ff f885 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b16:	2100      	movs	r1, #0
 8002b18:	480d      	ldr	r0, [pc, #52]	; (8002b50 <MX_USART2_UART_Init+0x94>)
 8002b1a:	f008 fa70 	bl	800affe <HAL_UARTEx_SetTxFifoThreshold>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002b24:	f7ff f87c 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4809      	ldr	r0, [pc, #36]	; (8002b50 <MX_USART2_UART_Init+0x94>)
 8002b2c:	f008 faa5 	bl	800b07a <HAL_UARTEx_SetRxFifoThreshold>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8002b36:	f7ff f873 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002b3a:	4805      	ldr	r0, [pc, #20]	; (8002b50 <MX_USART2_UART_Init+0x94>)
 8002b3c:	f008 fa27 	bl	800af8e <HAL_UARTEx_DisableFifoMode>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8002b46:	f7ff f86b 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000758 	.word	0x20000758
 8002b54:	40004400 	.word	0x40004400

08002b58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b09a      	sub	sp, #104	; 0x68
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8002b70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b7e:	f107 030c 	add.w	r3, r7, #12
 8002b82:	2238      	movs	r2, #56	; 0x38
 8002b84:	2100      	movs	r1, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f019 fcf6 	bl	801c578 <memset>
  if(uartHandle->Instance==USART1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a83      	ldr	r2, [pc, #524]	; (8002da0 <HAL_UART_MspInit+0x248>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	f040 80a3 	bne.w	8002cde <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b9c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002ba0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ba2:	f107 030c 	add.w	r3, r7, #12
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f004 feaa 	bl	8007900 <HAL_RCCEx_PeriphCLKConfig>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 8002bb2:	f7ff f835 	bl	8001c20 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bb6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002bba:	f7ff feef 	bl	800299c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bbe:	2002      	movs	r0, #2
 8002bc0:	f7ff feaa 	bl	8002918 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002bc4:	23c0      	movs	r3, #192	; 0xc0
 8002bc6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bd4:	2307      	movs	r3, #7
 8002bd6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4871      	ldr	r0, [pc, #452]	; (8002da4 <HAL_UART_MspInit+0x24c>)
 8002be0:	f002 fc20 	bl	8005424 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8002be4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002be8:	f7ff ff02 	bl	80029f0 <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8002bec:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002bf0:	f7ff fefe 	bl	80029f0 <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002bf4:	4b6c      	ldr	r3, [pc, #432]	; (8002da8 <HAL_UART_MspInit+0x250>)
 8002bf6:	4a6d      	ldr	r2, [pc, #436]	; (8002dac <HAL_UART_MspInit+0x254>)
 8002bf8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002bfa:	4b6b      	ldr	r3, [pc, #428]	; (8002da8 <HAL_UART_MspInit+0x250>)
 8002bfc:	2212      	movs	r2, #18
 8002bfe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c00:	4b69      	ldr	r3, [pc, #420]	; (8002da8 <HAL_UART_MspInit+0x250>)
 8002c02:	2210      	movs	r2, #16
 8002c04:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c06:	4b68      	ldr	r3, [pc, #416]	; (8002da8 <HAL_UART_MspInit+0x250>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c0c:	4b66      	ldr	r3, [pc, #408]	; (8002da8 <HAL_UART_MspInit+0x250>)
 8002c0e:	2280      	movs	r2, #128	; 0x80
 8002c10:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c12:	4b65      	ldr	r3, [pc, #404]	; (8002da8 <HAL_UART_MspInit+0x250>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c18:	4b63      	ldr	r3, [pc, #396]	; (8002da8 <HAL_UART_MspInit+0x250>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c1e:	4b62      	ldr	r3, [pc, #392]	; (8002da8 <HAL_UART_MspInit+0x250>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c24:	4b60      	ldr	r3, [pc, #384]	; (8002da8 <HAL_UART_MspInit+0x250>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c2a:	485f      	ldr	r0, [pc, #380]	; (8002da8 <HAL_UART_MspInit+0x250>)
 8002c2c:	f001 fd1c 	bl	8004668 <HAL_DMA_Init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8002c36:	f7fe fff3 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a5a      	ldr	r2, [pc, #360]	; (8002da8 <HAL_UART_MspInit+0x250>)
 8002c3e:	679a      	str	r2, [r3, #120]	; 0x78
 8002c40:	4a59      	ldr	r2, [pc, #356]	; (8002da8 <HAL_UART_MspInit+0x250>)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8002c46:	4b5a      	ldr	r3, [pc, #360]	; (8002db0 <HAL_UART_MspInit+0x258>)
 8002c48:	4a5a      	ldr	r2, [pc, #360]	; (8002db4 <HAL_UART_MspInit+0x25c>)
 8002c4a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002c4c:	4b58      	ldr	r3, [pc, #352]	; (8002db0 <HAL_UART_MspInit+0x258>)
 8002c4e:	2211      	movs	r2, #17
 8002c50:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c52:	4b57      	ldr	r3, [pc, #348]	; (8002db0 <HAL_UART_MspInit+0x258>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c58:	4b55      	ldr	r3, [pc, #340]	; (8002db0 <HAL_UART_MspInit+0x258>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c5e:	4b54      	ldr	r3, [pc, #336]	; (8002db0 <HAL_UART_MspInit+0x258>)
 8002c60:	2280      	movs	r2, #128	; 0x80
 8002c62:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c64:	4b52      	ldr	r3, [pc, #328]	; (8002db0 <HAL_UART_MspInit+0x258>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c6a:	4b51      	ldr	r3, [pc, #324]	; (8002db0 <HAL_UART_MspInit+0x258>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c70:	4b4f      	ldr	r3, [pc, #316]	; (8002db0 <HAL_UART_MspInit+0x258>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c76:	4b4e      	ldr	r3, [pc, #312]	; (8002db0 <HAL_UART_MspInit+0x258>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c7c:	484c      	ldr	r0, [pc, #304]	; (8002db0 <HAL_UART_MspInit+0x258>)
 8002c7e:	f001 fcf3 	bl	8004668 <HAL_DMA_Init>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8002c88:	f7fe ffca 	bl	8001c20 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002c90:	2300      	movs	r3, #0
 8002c92:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 8002c94:	2300      	movs	r3, #0
 8002c96:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 8002ca4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4841      	ldr	r0, [pc, #260]	; (8002db0 <HAL_UART_MspInit+0x258>)
 8002cac:	f002 f8c6 	bl	8004e3c <HAL_DMAEx_ConfigMuxSync>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8002cb6:	f7fe ffb3 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a3c      	ldr	r2, [pc, #240]	; (8002db0 <HAL_UART_MspInit+0x258>)
 8002cbe:	67da      	str	r2, [r3, #124]	; 0x7c
 8002cc0:	4a3b      	ldr	r2, [pc, #236]	; (8002db0 <HAL_UART_MspInit+0x258>)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2102      	movs	r1, #2
 8002cca:	2024      	movs	r0, #36	; 0x24
 8002ccc:	f001 fc95 	bl	80045fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cd0:	2024      	movs	r0, #36	; 0x24
 8002cd2:	f001 fcac 	bl	800462e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002cd6:	200c      	movs	r0, #12
 8002cd8:	f001 fca9 	bl	800462e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002cdc:	e05c      	b.n	8002d98 <HAL_UART_MspInit+0x240>
  else if(uartHandle->Instance==USART2)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a35      	ldr	r2, [pc, #212]	; (8002db8 <HAL_UART_MspInit+0x260>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d157      	bne.n	8002d98 <HAL_UART_MspInit+0x240>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002cec:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8002cf0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cf2:	f107 030c 	add.w	r3, r7, #12
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f004 fe02 	bl	8007900 <HAL_RCCEx_PeriphCLKConfig>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 8002d02:	f7fe ff8d 	bl	8001c20 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d06:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002d0a:	f7ff fe1d 	bl	8002948 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0e:	2001      	movs	r0, #1
 8002d10:	f7ff fe02 	bl	8002918 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002d14:	230c      	movs	r3, #12
 8002d16:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002d20:	2301      	movs	r3, #1
 8002d22:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d24:	2307      	movs	r3, #7
 8002d26:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d32:	f002 fb77 	bl	8005424 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8002d36:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <HAL_UART_MspInit+0x264>)
 8002d38:	4a21      	ldr	r2, [pc, #132]	; (8002dc0 <HAL_UART_MspInit+0x268>)
 8002d3a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002d3c:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <HAL_UART_MspInit+0x264>)
 8002d3e:	2213      	movs	r2, #19
 8002d40:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d42:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <HAL_UART_MspInit+0x264>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d48:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <HAL_UART_MspInit+0x264>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <HAL_UART_MspInit+0x264>)
 8002d50:	2280      	movs	r2, #128	; 0x80
 8002d52:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d54:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <HAL_UART_MspInit+0x264>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d5a:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <HAL_UART_MspInit+0x264>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002d60:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <HAL_UART_MspInit+0x264>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d66:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <HAL_UART_MspInit+0x264>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d6c:	4813      	ldr	r0, [pc, #76]	; (8002dbc <HAL_UART_MspInit+0x264>)
 8002d6e:	f001 fc7b 	bl	8004668 <HAL_DMA_Init>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_UART_MspInit+0x224>
      Error_Handler();
 8002d78:	f7fe ff52 	bl	8001c20 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <HAL_UART_MspInit+0x264>)
 8002d80:	67da      	str	r2, [r3, #124]	; 0x7c
 8002d82:	4a0e      	ldr	r2, [pc, #56]	; (8002dbc <HAL_UART_MspInit+0x264>)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	2025      	movs	r0, #37	; 0x25
 8002d8e:	f001 fc34 	bl	80045fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d92:	2025      	movs	r0, #37	; 0x25
 8002d94:	f001 fc4b 	bl	800462e <HAL_NVIC_EnableIRQ>
}
 8002d98:	bf00      	nop
 8002d9a:	3768      	adds	r7, #104	; 0x68
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40013800 	.word	0x40013800
 8002da4:	48000400 	.word	0x48000400
 8002da8:	200007e8 	.word	0x200007e8
 8002dac:	40020008 	.word	0x40020008
 8002db0:	20000848 	.word	0x20000848
 8002db4:	4002001c 	.word	0x4002001c
 8002db8:	40004400 	.word	0x40004400
 8002dbc:	200008a8 	.word	0x200008a8
 8002dc0:	40020030 	.word	0x40020030

08002dc4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a19      	ldr	r2, [pc, #100]	; (8002e38 <HAL_UART_MspDeInit+0x74>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d115      	bne.n	8002e02 <HAL_UART_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002dd6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002dda:	f7ff fdf7 	bl	80029cc <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002dde:	21c0      	movs	r1, #192	; 0xc0
 8002de0:	4816      	ldr	r0, [pc, #88]	; (8002e3c <HAL_UART_MspDeInit+0x78>)
 8002de2:	f002 fc7f 	bl	80056e4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dea:	4618      	mov	r0, r3
 8002dec:	f001 fce4 	bl	80047b8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df4:	4618      	mov	r0, r3
 8002df6:	f001 fcdf 	bl	80047b8 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002dfa:	2024      	movs	r0, #36	; 0x24
 8002dfc:	f001 fc25 	bl	800464a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002e00:	e015      	b.n	8002e2e <HAL_UART_MspDeInit+0x6a>
  else if(uartHandle->Instance==USART2)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a0e      	ldr	r2, [pc, #56]	; (8002e40 <HAL_UART_MspDeInit+0x7c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d110      	bne.n	8002e2e <HAL_UART_MspDeInit+0x6a>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002e0c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e10:	f7ff fdb2 	bl	8002978 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8002e14:	210c      	movs	r1, #12
 8002e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e1a:	f002 fc63 	bl	80056e4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e22:	4618      	mov	r0, r3
 8002e24:	f001 fcc8 	bl	80047b8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002e28:	2025      	movs	r0, #37	; 0x25
 8002e2a:	f001 fc0e 	bl	800464a <HAL_NVIC_DisableIRQ>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40013800 	.word	0x40013800
 8002e3c:	48000400 	.word	0x48000400
 8002e40:	40004400 	.word	0x40004400

08002e44 <LL_APB2_GRP1_ForceReset>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <LL_APB2_GRP1_ReleaseReset>:
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
	...

08002e8c <LL_EXTI_EnableIT_0_31>:
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <LL_EXTI_EnableIT_0_31+0x24>)
 8002e96:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002e9a:	4905      	ldr	r1, [pc, #20]	; (8002eb0 <LL_EXTI_EnableIT_0_31+0x24>)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	58000800 	.word	0x58000800

08002eb4 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002ebc:	4a07      	ldr	r2, [pc, #28]	; (8002edc <vcom_Init+0x28>)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002ec2:	f7fe fa25 	bl	8001310 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002ec6:	f7ff fda5 	bl	8002a14 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002eca:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002ece:	f7ff ffdd 	bl	8002e8c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002ed2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	2000090c 	.word	0x2000090c

08002ee0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002ee4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ee8:	f7ff ffac 	bl	8002e44 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002eec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ef0:	f7ff ffb9 	bl	8002e66 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002ef4:	4804      	ldr	r0, [pc, #16]	; (8002f08 <vcom_DeInit+0x28>)
 8002ef6:	f7ff ff65 	bl	8002dc4 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002efa:	200f      	movs	r0, #15
 8002efc:	f001 fba5 	bl	800464a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002f00:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	200006c8 	.word	0x200006c8

08002f0c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002f18:	887b      	ldrh	r3, [r7, #2]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4804      	ldr	r0, [pc, #16]	; (8002f30 <vcom_Trace_DMA+0x24>)
 8002f20:	f005 ff08 	bl	8008d34 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002f24:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200006c8 	.word	0x200006c8

08002f34 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002f3c:	4a19      	ldr	r2, [pc, #100]	; (8002fa4 <vcom_ReceiveInit+0x70>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002f42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f46:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002f48:	f107 0308 	add.w	r3, r7, #8
 8002f4c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002f50:	4815      	ldr	r0, [pc, #84]	; (8002fa8 <vcom_ReceiveInit+0x74>)
 8002f52:	f007 ff54 	bl	800adfe <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002f56:	bf00      	nop
 8002f58:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <vcom_ReceiveInit+0x74>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f66:	d0f7      	beq.n	8002f58 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002f68:	bf00      	nop
 8002f6a:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <vcom_ReceiveInit+0x74>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f78:	d1f7      	bne.n	8002f6a <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <vcom_ReceiveInit+0x74>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <vcom_ReceiveInit+0x74>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002f88:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002f8a:	4807      	ldr	r0, [pc, #28]	; (8002fa8 <vcom_ReceiveInit+0x74>)
 8002f8c:	f007 ff92 	bl	800aeb4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002f90:	2201      	movs	r2, #1
 8002f92:	4906      	ldr	r1, [pc, #24]	; (8002fac <vcom_ReceiveInit+0x78>)
 8002f94:	4804      	ldr	r0, [pc, #16]	; (8002fa8 <vcom_ReceiveInit+0x74>)
 8002f96:	f005 fe77 	bl	8008c88 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002f9a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000910 	.word	0x20000910
 8002fa8:	200006c8 	.word	0x200006c8
 8002fac:	20000908 	.word	0x20000908

08002fb0 <vcom_Resume>:

void vcom_Resume(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fb4:	4808      	ldr	r0, [pc, #32]	; (8002fd8 <vcom_Resume+0x28>)
 8002fb6:	f005 fe16 	bl	8008be6 <HAL_UART_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002fc0:	f7fe fe2e 	bl	8001c20 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002fc4:	4805      	ldr	r0, [pc, #20]	; (8002fdc <vcom_Resume+0x2c>)
 8002fc6:	f001 fb4f 	bl	8004668 <HAL_DMA_Init>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002fd0:	f7fe fe26 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002fd4:	bf00      	nop
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	200006c8 	.word	0x200006c8
 8002fdc:	200007e8 	.word	0x200007e8

08002fe0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a05      	ldr	r2, [pc, #20]	; (8003004 <HAL_UART_TxCpltCallback+0x24>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d103      	bne.n	8002ffa <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002ff2:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_UART_TxCpltCallback+0x28>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40013800 	.word	0x40013800
 8003008:	2000090c 	.word	0x2000090c

0800300c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a13      	ldr	r2, [pc, #76]	; (8003068 <HAL_UART_RxCpltCallback+0x5c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d113      	bne.n	8003046 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <HAL_UART_RxCpltCallback+0x60>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_UART_RxCpltCallback+0x30>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003030:	4b0e      	ldr	r3, [pc, #56]	; (800306c <HAL_UART_RxCpltCallback+0x60>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2200      	movs	r2, #0
 8003036:	2101      	movs	r1, #1
 8003038:	480d      	ldr	r0, [pc, #52]	; (8003070 <HAL_UART_RxCpltCallback+0x64>)
 800303a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 800303c:	2201      	movs	r2, #1
 800303e:	490c      	ldr	r1, [pc, #48]	; (8003070 <HAL_UART_RxCpltCallback+0x64>)
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f005 fe21 	bl	8008c88 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <HAL_UART_RxCpltCallback+0x68>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d106      	bne.n	800305e <HAL_UART_RxCpltCallback+0x52>
    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <HAL_UART_RxCpltCallback+0x6c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2210      	movs	r2, #16
 8003056:	621a      	str	r2, [r3, #32]
    	  UART2_SET = 1;
 8003058:	4b08      	ldr	r3, [pc, #32]	; (800307c <HAL_UART_RxCpltCallback+0x70>)
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40013800 	.word	0x40013800
 800306c:	20000910 	.word	0x20000910
 8003070:	20000908 	.word	0x20000908
 8003074:	40004400 	.word	0x40004400
 8003078:	20000758 	.word	0x20000758
 800307c:	20000004 	.word	0x20000004

08003080 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003080:	480d      	ldr	r0, [pc, #52]	; (80030b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003082:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003084:	f7ff fa05 	bl	8002492 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003088:	480c      	ldr	r0, [pc, #48]	; (80030bc <LoopForever+0x6>)
  ldr r1, =_edata
 800308a:	490d      	ldr	r1, [pc, #52]	; (80030c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800308c:	4a0d      	ldr	r2, [pc, #52]	; (80030c4 <LoopForever+0xe>)
  movs r3, #0
 800308e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003090:	e002      	b.n	8003098 <LoopCopyDataInit>

08003092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003096:	3304      	adds	r3, #4

08003098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800309a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800309c:	d3f9      	bcc.n	8003092 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800309e:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030a0:	4c0a      	ldr	r4, [pc, #40]	; (80030cc <LoopForever+0x16>)
  movs r3, #0
 80030a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030a4:	e001      	b.n	80030aa <LoopFillZerobss>

080030a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030a8:	3204      	adds	r2, #4

080030aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030ac:	d3fb      	bcc.n	80030a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80030ae:	f019 fa31 	bl	801c514 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030b2:	f7fe fc5d 	bl	8001970 <main>

080030b6 <LoopForever>:

LoopForever:
    b LoopForever
 80030b6:	e7fe      	b.n	80030b6 <LoopForever>
  ldr   r0, =_estack
 80030b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80030bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030c0:	2000057c 	.word	0x2000057c
  ldr r2, =_sidata
 80030c4:	0801d2d0 	.word	0x0801d2d0
  ldr r2, =_sbss
 80030c8:	2000057c 	.word	0x2000057c
  ldr r4, =_ebss
 80030cc:	200028b8 	.word	0x200028b8

080030d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030d0:	e7fe      	b.n	80030d0 <ADC_IRQHandler>

080030d2 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b086      	sub	sp, #24
 80030d6:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80030d8:	1d3b      	adds	r3, r7, #4
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	605a      	str	r2, [r3, #4]
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	60da      	str	r2, [r3, #12]
 80030e4:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80030e6:	2310      	movs	r3, #16
 80030e8:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80030ea:	2301      	movs	r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f2:	2303      	movs	r3, #3
 80030f4:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80030f6:	1d3b      	adds	r3, r7, #4
 80030f8:	4619      	mov	r1, r3
 80030fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030fe:	f002 f991 	bl	8005424 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003102:	2320      	movs	r3, #32
 8003104:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003106:	1d3b      	adds	r3, r7, #4
 8003108:	4619      	mov	r1, r3
 800310a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800310e:	f002 f989 	bl	8005424 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003112:	2200      	movs	r2, #0
 8003114:	2120      	movs	r1, #32
 8003116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800311a:	f002 fbb1 	bl	8005880 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800311e:	2200      	movs	r2, #0
 8003120:	2110      	movs	r1, #16
 8003122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003126:	f002 fbab 	bl	8005880 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	2b03      	cmp	r3, #3
 8003142:	d83f      	bhi.n	80031c4 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003144:	a201      	add	r2, pc, #4	; (adr r2, 800314c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8003146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314a:	bf00      	nop
 800314c:	0800315d 	.word	0x0800315d
 8003150:	08003177 	.word	0x08003177
 8003154:	08003191 	.word	0x08003191
 8003158:	080031ab 	.word	0x080031ab
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800315c:	2200      	movs	r2, #0
 800315e:	2110      	movs	r1, #16
 8003160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003164:	f002 fb8c 	bl	8005880 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003168:	2200      	movs	r2, #0
 800316a:	2120      	movs	r1, #32
 800316c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003170:	f002 fb86 	bl	8005880 <HAL_GPIO_WritePin>
      break;      
 8003174:	e027      	b.n	80031c6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003176:	2201      	movs	r2, #1
 8003178:	2110      	movs	r1, #16
 800317a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800317e:	f002 fb7f 	bl	8005880 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003182:	2200      	movs	r2, #0
 8003184:	2120      	movs	r1, #32
 8003186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800318a:	f002 fb79 	bl	8005880 <HAL_GPIO_WritePin>
      break;
 800318e:	e01a      	b.n	80031c6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003190:	2201      	movs	r2, #1
 8003192:	2110      	movs	r1, #16
 8003194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003198:	f002 fb72 	bl	8005880 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800319c:	2201      	movs	r2, #1
 800319e:	2120      	movs	r1, #32
 80031a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031a4:	f002 fb6c 	bl	8005880 <HAL_GPIO_WritePin>
      break;
 80031a8:	e00d      	b.n	80031c6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80031aa:	2200      	movs	r2, #0
 80031ac:	2110      	movs	r1, #16
 80031ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031b2:	f002 fb65 	bl	8005880 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80031b6:	2201      	movs	r2, #1
 80031b8:	2120      	movs	r1, #32
 80031ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031be:	f002 fb5f 	bl	8005880 <HAL_GPIO_WritePin>
      break;
 80031c2:	e000      	b.n	80031c6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80031c4:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80031d4:	2302      	movs	r3, #2
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80031de:	b480      	push	{r7}
 80031e0:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80031e2:	2301      	movs	r3, #1
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80031f0:	2301      	movs	r3, #1
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b085      	sub	sp, #20
 80031fe:	af00      	add	r7, sp, #0
 8003200:	4603      	mov	r3, r0
 8003202:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800320a:	230f      	movs	r3, #15
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	e001      	b.n	8003214 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003210:	2316      	movs	r3, #22
 8003212:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003214:	68fb      	ldr	r3, [r7, #12]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4a03      	ldr	r2, [pc, #12]	; (8003238 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	6053      	str	r3, [r2, #4]
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr
 8003238:	e0042000 	.word	0xe0042000

0800323c <LL_DBGMCU_EnableDBGStopMode>:
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003240:	4b04      	ldr	r3, [pc, #16]	; (8003254 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4a03      	ldr	r2, [pc, #12]	; (8003254 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003246:	f043 0302 	orr.w	r3, r3, #2
 800324a:	6053      	str	r3, [r2, #4]
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	e0042000 	.word	0xe0042000

08003258 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4a03      	ldr	r2, [pc, #12]	; (8003270 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003262:	f043 0304 	orr.w	r3, r3, #4
 8003266:	6053      	str	r3, [r2, #4]
}
 8003268:	bf00      	nop
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr
 8003270:	e0042000 	.word	0xe0042000

08003274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800327e:	2003      	movs	r0, #3
 8003280:	f001 f9b0 	bl	80045e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003284:	f004 f95e 	bl	8007544 <HAL_RCC_GetHCLKFreq>
 8003288:	4603      	mov	r3, r0
 800328a:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <HAL_Init+0x3c>)
 800328c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800328e:	200f      	movs	r0, #15
 8003290:	f7ff f814 	bl	80022bc <HAL_InitTick>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	71fb      	strb	r3, [r7, #7]
 800329e:	e001      	b.n	80032a4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032a0:	f7fe fdb5 	bl	8001e0e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032a4:	79fb      	ldrb	r3, [r7, #7]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000000 	.word	0x20000000

080032b4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80032b8:	4b04      	ldr	r3, [pc, #16]	; (80032cc <HAL_SuspendTick+0x18>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a03      	ldr	r2, [pc, #12]	; (80032cc <HAL_SuspendTick+0x18>)
 80032be:	f023 0302 	bic.w	r3, r3, #2
 80032c2:	6013      	str	r3, [r2, #0]
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr
 80032cc:	e000e010 	.word	0xe000e010

080032d0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <HAL_ResumeTick+0x18>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a03      	ldr	r2, [pc, #12]	; (80032e8 <HAL_ResumeTick+0x18>)
 80032da:	f043 0302 	orr.w	r3, r3, #2
 80032de:	6013      	str	r3, [r2, #0]
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	e000e010 	.word	0xe000e010

080032ec <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80032f0:	4b02      	ldr	r3, [pc, #8]	; (80032fc <HAL_GetUIDw0+0x10>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr
 80032fc:	1fff7590 	.word	0x1fff7590

08003300 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003304:	4b02      	ldr	r3, [pc, #8]	; (8003310 <HAL_GetUIDw1+0x10>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr
 8003310:	1fff7594 	.word	0x1fff7594

08003314 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003318:	4b02      	ldr	r3, [pc, #8]	; (8003324 <HAL_GetUIDw2+0x10>)
 800331a:	681b      	ldr	r3, [r3, #0]
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	1fff7598 	.word	0x1fff7598

08003328 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800332c:	f7ff ff78 	bl	8003220 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003330:	bf00      	nop
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003338:	f7ff ff80 	bl	800323c <LL_DBGMCU_EnableDBGStopMode>
}
 800333c:	bf00      	nop
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003344:	f7ff ff88 	bl	8003258 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003348:	bf00      	nop
 800334a:	bd80      	pop	{r7, pc}

0800334c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	601a      	str	r2, [r3, #0]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr

0800338a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800338a:	b480      	push	{r7}
 800338c:	b085      	sub	sp, #20
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2107      	movs	r1, #7
 80033a2:	fa01 f303 	lsl.w	r3, r1, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	401a      	ands	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	fa01 f303 	lsl.w	r3, r1, r3
 80033b6:	431a      	orrs	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2107      	movs	r1, #7
 80033dc:	fa01 f303 	lsl.w	r3, r1, r3
 80033e0:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr

0800341a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	210f      	movs	r1, #15
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	401a      	ands	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	0e9b      	lsrs	r3, r3, #26
 800343e:	f003 010f 	and.w	r1, r3, #15
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	431a      	orrs	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003452:	bf00      	nop
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003494:	43db      	mvns	r3, r3
 8003496:	401a      	ands	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr

080034a6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b085      	sub	sp, #20
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	43db      	mvns	r3, r3
 80034bc:	401a      	ands	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	0219      	lsls	r1, r3, #8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	400b      	ands	r3, r1
 80034c6:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80034ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034ce:	431a      	orrs	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80034d4:	bf00      	nop
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr

080034de <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80034ee:	f023 0317 	bic.w	r3, r3, #23
 80034f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003514:	f023 0317 	bic.w	r3, r3, #23
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6093      	str	r3, [r2, #8]
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr

08003526 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003536:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800353a:	d101      	bne.n	8003540 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800355c:	f023 0317 	bic.w	r3, r3, #23
 8003560:	f043 0201 	orr.w	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr

08003572 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003582:	f023 0317 	bic.w	r3, r3, #23
 8003586:	f043 0202 	orr.w	r2, r3, #2
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <LL_ADC_IsEnabled+0x18>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <LL_ADC_IsEnabled+0x1a>
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d101      	bne.n	80035d4 <LL_ADC_IsDisableOngoing+0x18>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <LL_ADC_IsDisableOngoing+0x1a>
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035f0:	f023 0317 	bic.w	r3, r3, #23
 80035f4:	f043 0204 	orr.w	r2, r3, #4
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr

08003606 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003616:	f023 0317 	bic.w	r3, r3, #23
 800361a:	f043 0210 	orr.w	r2, r3, #16
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr

0800362c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b04      	cmp	r3, #4
 800363e:	d101      	bne.n	8003644 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 800365c:	2300      	movs	r3, #0
 800365e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003664:	2300      	movs	r3, #0
 8003666:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e19e      	b.n	80039b0 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	2b00      	cmp	r3, #0
 800367e:	d109      	bne.n	8003694 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7fd fd7d 	bl	8001180 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff44 	bl	8003526 <LL_ADC_IsInternalRegulatorEnabled>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d115      	bne.n	80036d0 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff ff18 	bl	80034de <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036ae:	4b99      	ldr	r3, [pc, #612]	; (8003914 <HAL_ADC_Init+0x2c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	099b      	lsrs	r3, r3, #6
 80036b4:	4a98      	ldr	r2, [pc, #608]	; (8003918 <HAL_ADC_Init+0x2c8>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	099b      	lsrs	r3, r3, #6
 80036bc:	3301      	adds	r3, #1
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036c2:	e002      	b.n	80036ca <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f9      	bne.n	80036c4 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff26 	bl	8003526 <LL_ADC_IsInternalRegulatorEnabled>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10d      	bne.n	80036fc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	f043 0210 	orr.w	r2, r3, #16
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f0:	f043 0201 	orr.w	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ff93 	bl	800362c <LL_ADC_REG_IsConversionOngoing>
 8003706:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	f040 8144 	bne.w	800399e <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f040 8140 	bne.w	800399e <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003726:	f043 0202 	orr.w	r2, r3, #2
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff ff30 	bl	8003598 <LL_ADC_IsEnabled>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	f040 80a7 	bne.w	800388e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	7e1b      	ldrb	r3, [r3, #24]
 8003748:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800374a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	7e5b      	ldrb	r3, [r3, #25]
 8003750:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003752:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	7e9b      	ldrb	r3, [r3, #26]
 8003758:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800375a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003760:	2a00      	cmp	r2, #0
 8003762:	d002      	beq.n	800376a <HAL_ADC_Init+0x11a>
 8003764:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003768:	e000      	b.n	800376c <HAL_ADC_Init+0x11c>
 800376a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800376c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003772:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	da04      	bge.n	8003786 <HAL_ADC_Init+0x136>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003784:	e001      	b.n	800378a <HAL_ADC_Init+0x13a>
 8003786:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800378a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003792:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003794:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4313      	orrs	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d114      	bne.n	80037d0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	7e9b      	ldrb	r3, [r3, #26]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d104      	bne.n	80037b8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	e00b      	b.n	80037d0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	f043 0220 	orr.w	r2, r3, #32
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d009      	beq.n	80037ec <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80037e4:	4313      	orrs	r3, r2
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80037f6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6812      	ldr	r2, [r2, #0]
 80037fe:	69b9      	ldr	r1, [r7, #24]
 8003800:	430b      	orrs	r3, r1
 8003802:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003810:	4313      	orrs	r3, r2
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800381e:	2b01      	cmp	r3, #1
 8003820:	d111      	bne.n	8003846 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800382e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003834:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800383a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	4b33      	ldr	r3, [pc, #204]	; (800391c <HAL_ADC_Init+0x2cc>)
 800384e:	4013      	ands	r3, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	6979      	ldr	r1, [r7, #20]
 8003856:	430b      	orrs	r3, r1
 8003858:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003862:	d014      	beq.n	800388e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386c:	d00f      	beq.n	800388e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003876:	d00a      	beq.n	800388e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003878:	4b29      	ldr	r3, [pc, #164]	; (8003920 <HAL_ADC_Init+0x2d0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003888:	4925      	ldr	r1, [pc, #148]	; (8003920 <HAL_ADC_Init+0x2d0>)
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003896:	461a      	mov	r2, r3
 8003898:	2100      	movs	r1, #0
 800389a:	f7ff fd76 	bl	800338a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	461a      	mov	r2, r3
 80038a8:	491e      	ldr	r1, [pc, #120]	; (8003924 <HAL_ADC_Init+0x2d4>)
 80038aa:	f7ff fd6e 	bl	800338a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d108      	bne.n	80038c8 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f062 020f 	orn	r2, r2, #15
 80038c4:	629a      	str	r2, [r3, #40]	; 0x28
 80038c6:	e042      	b.n	800394e <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038d0:	d13d      	bne.n	800394e <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80038d2:	2300      	movs	r3, #0
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	e00c      	b.n	80038f2 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	2b0f      	cmp	r3, #15
 80038ea:	d006      	beq.n	80038fa <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	3301      	adds	r3, #1
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b07      	cmp	r3, #7
 80038f6:	d9ef      	bls.n	80038d8 <HAL_ADC_Init+0x288>
 80038f8:	e000      	b.n	80038fc <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 80038fa:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d112      	bne.n	8003928 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f062 020f 	orn	r2, r2, #15
 8003910:	629a      	str	r2, [r3, #40]	; 0x28
 8003912:	e01c      	b.n	800394e <HAL_ADC_Init+0x2fe>
 8003914:	20000000 	.word	0x20000000
 8003918:	053e2d63 	.word	0x053e2d63
 800391c:	1ffffc02 	.word	0x1ffffc02
 8003920:	40012708 	.word	0x40012708
 8003924:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	3b01      	subs	r3, #1
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	f003 031c 	and.w	r3, r3, #28
 800393a:	f06f 020f 	mvn.w	r2, #15
 800393e:	fa02 f103 	lsl.w	r1, r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fd36 	bl	80033c6 <LL_ADC_GetSamplingTimeCommonChannels>
 800395a:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003960:	429a      	cmp	r2, r3
 8003962:	d10b      	bne.n	800397c <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	f023 0303 	bic.w	r3, r3, #3
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800397a:	e018      	b.n	80039ae <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	f023 0312 	bic.w	r3, r3, #18
 8003984:	f043 0210 	orr.w	r2, r3, #16
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003990:	f043 0201 	orr.w	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800399c:	e007      	b.n	80039ae <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a2:	f043 0210 	orr.w	r2, r3, #16
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80039ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3720      	adds	r7, #32
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e06a      	b.n	8003aa0 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ce:	f043 0202 	orr.w	r2, r3, #2
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fabe 	bl	8003f58 <ADC_ConversionStop>
 80039dc:	4603      	mov	r3, r0
 80039de:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10f      	bne.n	8003a06 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fb82 	bl	80040f0 <ADC_Disable>
 80039ec:	4603      	mov	r3, r0
 80039ee:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d102      	bne.n	80039fc <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fd7f 	bl	8003504 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003a14:	f023 0303 	bic.w	r3, r3, #3
 8003a18:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f240 329f 	movw	r2, #927	; 0x39f
 8003a22:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68d9      	ldr	r1, [r3, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	4b1e      	ldr	r3, [pc, #120]	; (8003aa8 <HAL_ADC_DeInit+0xf0>)
 8003a30:	400b      	ands	r3, r1
 8003a32:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003a42:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0207 	bic.w	r2, r2, #7
 8003a52:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6a1a      	ldr	r2, [r3, #32]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003a62:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003a72:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <HAL_ADC_DeInit+0xf4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a0d      	ldr	r2, [pc, #52]	; (8003aac <HAL_ADC_DeInit+0xf4>)
 8003a78:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003a7c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fd fb92 	bl	80011a8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	833e0200 	.word	0x833e0200
 8003aac:	40012708 	.word	0x40012708

08003ab0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff fdb5 	bl	800362c <LL_ADC_REG_IsConversionOngoing>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d132      	bne.n	8003b2e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_ADC_Start+0x26>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e02e      	b.n	8003b34 <HAL_ADC_Start+0x84>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fa80 	bl	8003fe4 <ADC_Enable>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d11a      	bne.n	8003b24 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	221c      	movs	r2, #28
 8003b0e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff fd5f 	bl	80035e0 <LL_ADC_REG_StartConversion>
 8003b22:	e006      	b.n	8003b32 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003b2c:	e001      	b.n	8003b32 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_ADC_Stop+0x16>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e022      	b.n	8003b98 <HAL_ADC_Stop+0x5c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f9fc 	bl	8003f58 <ADC_ConversionStop>
 8003b60:	4603      	mov	r3, r0
 8003b62:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d111      	bne.n	8003b8e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fac0 	bl	80040f0 <ADC_Disable>
 8003b70:	4603      	mov	r3, r0
 8003b72:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	f043 0201 	orr.w	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d102      	bne.n	8003bb8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003bb2:	2308      	movs	r3, #8
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e010      	b.n	8003bda <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d007      	beq.n	8003bd6 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bca:	f043 0220 	orr.w	r2, r3, #32
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e077      	b.n	8003cc6 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003bd6:	2304      	movs	r3, #4
 8003bd8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003bda:	f7fe fb79 	bl	80022d0 <HAL_GetTick>
 8003bde:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003be0:	e021      	b.n	8003c26 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d01d      	beq.n	8003c26 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003bea:	f7fe fb71 	bl	80022d0 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d302      	bcc.n	8003c00 <HAL_ADC_PollForConversion+0x60>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d112      	bne.n	8003c26 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10b      	bne.n	8003c26 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c12:	f043 0204 	orr.w	r2, r3, #4
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e04f      	b.n	8003cc6 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0d6      	beq.n	8003be2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fbd6 	bl	80033f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d031      	beq.n	8003cb4 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	7e9b      	ldrb	r3, [r3, #26]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d12d      	bne.n	8003cb4 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d126      	bne.n	8003cb4 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fcde 	bl	800362c <LL_ADC_REG_IsConversionOngoing>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d112      	bne.n	8003c9c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 020c 	bic.w	r2, r2, #12
 8003c84:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c8e:	f023 0301 	bic.w	r3, r3, #1
 8003c92:	f043 0201 	orr.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	659a      	str	r2, [r3, #88]	; 0x58
 8003c9a:	e00b      	b.n	8003cb4 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cac:	f043 0201 	orr.w	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	7e1b      	ldrb	r3, [r3, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d103      	bne.n	8003cc4 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	220c      	movs	r2, #12
 8003cc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
	...

08003ce8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x28>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e110      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x24a>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fc85 	bl	800362c <LL_ADC_REG_IsConversionOngoing>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f040 80f7 	bne.w	8003f18 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	f000 80b1 	beq.w	8003e96 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d3c:	d004      	beq.n	8003d48 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d42:	4a7e      	ldr	r2, [pc, #504]	; (8003f3c <HAL_ADC_ConfigChannel+0x254>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d108      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4619      	mov	r1, r3
 8003d52:	4610      	mov	r0, r2
 8003d54:	f7ff fb82 	bl	800345c <LL_ADC_REG_SetSequencerChAdd>
 8003d58:	e041      	b.n	8003dde <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	210f      	movs	r1, #15
 8003d68:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	401a      	ands	r2, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d105      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0xa0>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	0e9b      	lsrs	r3, r3, #26
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	e011      	b.n	8003dac <HAL_ADC_ConfigChannel+0xc4>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	fa93 f3a3 	rbit	r3, r3
 8003d94:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003da0:	2320      	movs	r3, #32
 8003da2:	e003      	b.n	8003dac <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	fab3 f383 	clz	r3, r3
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	6839      	ldr	r1, [r7, #0]
 8003dae:	6849      	ldr	r1, [r1, #4]
 8003db0:	f001 011f 	and.w	r1, r1, #31
 8003db4:	408b      	lsls	r3, r1
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	089b      	lsrs	r3, r3, #2
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d808      	bhi.n	8003dde <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	6859      	ldr	r1, [r3, #4]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f7ff fb1e 	bl	800341a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6819      	ldr	r1, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	461a      	mov	r2, r3
 8003dec:	f7ff fb5b 	bl	80034a6 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f280 8097 	bge.w	8003f28 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dfa:	4851      	ldr	r0, [pc, #324]	; (8003f40 <HAL_ADC_ConfigChannel+0x258>)
 8003dfc:	f7ff fab8 	bl	8003370 <LL_ADC_GetCommonPathInternalCh>
 8003e00:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a4f      	ldr	r2, [pc, #316]	; (8003f44 <HAL_ADC_ConfigChannel+0x25c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d120      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d11b      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4848      	ldr	r0, [pc, #288]	; (8003f40 <HAL_ADC_ConfigChannel+0x258>)
 8003e20:	f7ff fa94 	bl	800334c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e24:	4b48      	ldr	r3, [pc, #288]	; (8003f48 <HAL_ADC_ConfigChannel+0x260>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	099b      	lsrs	r3, r3, #6
 8003e2a:	4a48      	ldr	r2, [pc, #288]	; (8003f4c <HAL_ADC_ConfigChannel+0x264>)
 8003e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e30:	099b      	lsrs	r3, r3, #6
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	4613      	mov	r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003e3e:	e002      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1f9      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e4c:	e06c      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a3f      	ldr	r2, [pc, #252]	; (8003f50 <HAL_ADC_ConfigChannel+0x268>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d10c      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x18a>
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d107      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4835      	ldr	r0, [pc, #212]	; (8003f40 <HAL_ADC_ConfigChannel+0x258>)
 8003e6c:	f7ff fa6e 	bl	800334c <LL_ADC_SetCommonPathInternalCh>
 8003e70:	e05a      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a37      	ldr	r2, [pc, #220]	; (8003f54 <HAL_ADC_ConfigChannel+0x26c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d155      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d150      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	482c      	ldr	r0, [pc, #176]	; (8003f40 <HAL_ADC_ConfigChannel+0x258>)
 8003e90:	f7ff fa5c 	bl	800334c <LL_ADC_SetCommonPathInternalCh>
 8003e94:	e048      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e9e:	d004      	beq.n	8003eaa <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ea4:	4a25      	ldr	r2, [pc, #148]	; (8003f3c <HAL_ADC_ConfigChannel+0x254>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d107      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	f7ff fae3 	bl	8003480 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	da32      	bge.n	8003f28 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ec2:	481f      	ldr	r0, [pc, #124]	; (8003f40 <HAL_ADC_ConfigChannel+0x258>)
 8003ec4:	f7ff fa54 	bl	8003370 <LL_ADC_GetCommonPathInternalCh>
 8003ec8:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <HAL_ADC_ConfigChannel+0x25c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d107      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003eda:	4619      	mov	r1, r3
 8003edc:	4818      	ldr	r0, [pc, #96]	; (8003f40 <HAL_ADC_ConfigChannel+0x258>)
 8003ede:	f7ff fa35 	bl	800334c <LL_ADC_SetCommonPathInternalCh>
 8003ee2:	e021      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <HAL_ADC_ConfigChannel+0x268>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d107      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4812      	ldr	r0, [pc, #72]	; (8003f40 <HAL_ADC_ConfigChannel+0x258>)
 8003ef8:	f7ff fa28 	bl	800334c <LL_ADC_SetCommonPathInternalCh>
 8003efc:	e014      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a14      	ldr	r2, [pc, #80]	; (8003f54 <HAL_ADC_ConfigChannel+0x26c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d10f      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003f0e:	4619      	mov	r1, r3
 8003f10:	480b      	ldr	r0, [pc, #44]	; (8003f40 <HAL_ADC_ConfigChannel+0x258>)
 8003f12:	f7ff fa1b 	bl	800334c <LL_ADC_SetCommonPathInternalCh>
 8003f16:	e007      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	f043 0220 	orr.w	r2, r3, #32
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003f30:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3720      	adds	r7, #32
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	80000004 	.word	0x80000004
 8003f40:	40012708 	.word	0x40012708
 8003f44:	b0001000 	.word	0xb0001000
 8003f48:	20000000 	.word	0x20000000
 8003f4c:	053e2d63 	.word	0x053e2d63
 8003f50:	b8004000 	.word	0xb8004000
 8003f54:	b4002000 	.word	0xb4002000

08003f58 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff fb61 	bl	800362c <LL_ADC_REG_IsConversionOngoing>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d033      	beq.n	8003fd8 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fb21 	bl	80035bc <LL_ADC_IsDisableOngoing>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d104      	bne.n	8003f8a <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fb3e 	bl	8003606 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f8a:	f7fe f9a1 	bl	80022d0 <HAL_GetTick>
 8003f8e:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003f90:	e01b      	b.n	8003fca <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003f92:	f7fe f99d 	bl	80022d0 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d914      	bls.n	8003fca <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00d      	beq.n	8003fca <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb2:	f043 0210 	orr.w	r2, r3, #16
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbe:	f043 0201 	orr.w	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e007      	b.n	8003fda <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1dc      	bne.n	8003f92 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff facf 	bl	8003598 <LL_ADC_IsEnabled>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d169      	bne.n	80040d4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	4b36      	ldr	r3, [pc, #216]	; (80040e0 <ADC_Enable+0xfc>)
 8004008:	4013      	ands	r3, r2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00d      	beq.n	800402a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004012:	f043 0210 	orr.w	r2, r3, #16
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401e:	f043 0201 	orr.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e055      	b.n	80040d6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff fa8c 	bl	800354c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004034:	482b      	ldr	r0, [pc, #172]	; (80040e4 <ADC_Enable+0x100>)
 8004036:	f7ff f99b 	bl	8003370 <LL_ADC_GetCommonPathInternalCh>
 800403a:	4603      	mov	r3, r0
 800403c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00f      	beq.n	8004064 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004044:	4b28      	ldr	r3, [pc, #160]	; (80040e8 <ADC_Enable+0x104>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	099b      	lsrs	r3, r3, #6
 800404a:	4a28      	ldr	r2, [pc, #160]	; (80040ec <ADC_Enable+0x108>)
 800404c:	fba2 2303 	umull	r2, r3, r2, r3
 8004050:	099b      	lsrs	r3, r3, #6
 8004052:	3301      	adds	r3, #1
 8004054:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004056:	e002      	b.n	800405e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	3b01      	subs	r3, #1
 800405c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f9      	bne.n	8004058 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	7e5b      	ldrb	r3, [r3, #25]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d033      	beq.n	80040d4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800406c:	f7fe f930 	bl	80022d0 <HAL_GetTick>
 8004070:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004072:	e028      	b.n	80040c6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff fa8d 	bl	8003598 <LL_ADC_IsEnabled>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d104      	bne.n	800408e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff fa5f 	bl	800354c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800408e:	f7fe f91f 	bl	80022d0 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d914      	bls.n	80040c6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d00d      	beq.n	80040c6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	f043 0210 	orr.w	r2, r3, #16
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ba:	f043 0201 	orr.w	r2, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e007      	b.n	80040d6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d1cf      	bne.n	8004074 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	80000017 	.word	0x80000017
 80040e4:	40012708 	.word	0x40012708
 80040e8:	20000000 	.word	0x20000000
 80040ec:	053e2d63 	.word	0x053e2d63

080040f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff fa5d 	bl	80035bc <LL_ADC_IsDisableOngoing>
 8004102:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fa45 	bl	8003598 <LL_ADC_IsEnabled>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d047      	beq.n	80041a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d144      	bne.n	80041a4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 0305 	and.w	r3, r3, #5
 8004124:	2b01      	cmp	r3, #1
 8004126:	d10c      	bne.n	8004142 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff fa20 	bl	8003572 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2203      	movs	r2, #3
 8004138:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800413a:	f7fe f8c9 	bl	80022d0 <HAL_GetTick>
 800413e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004140:	e029      	b.n	8004196 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	f043 0210 	orr.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004152:	f043 0201 	orr.w	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e023      	b.n	80041a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800415e:	f7fe f8b7 	bl	80022d0 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d914      	bls.n	8004196 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00d      	beq.n	8004196 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	f043 0210 	orr.w	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418a:	f043 0201 	orr.w	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e007      	b.n	80041a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1dc      	bne.n	800415e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <LL_ADC_SetCalibrationFactor>:
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041be:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr

080041d6 <LL_ADC_GetCalibrationFactor>:
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr

080041f2 <LL_ADC_Enable>:
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004202:	f023 0317 	bic.w	r3, r3, #23
 8004206:	f043 0201 	orr.w	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	609a      	str	r2, [r3, #8]
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <LL_ADC_Disable>:
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004228:	f023 0317 	bic.w	r3, r3, #23
 800422c:	f043 0202 	orr.w	r2, r3, #2
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr

0800423e <LL_ADC_IsEnabled>:
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <LL_ADC_IsEnabled+0x18>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <LL_ADC_IsEnabled+0x1a>
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr

08004262 <LL_ADC_StartCalibration>:
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004272:	f023 0317 	bic.w	r3, r3, #23
 8004276:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	609a      	str	r2, [r3, #8]
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <LL_ADC_IsCalibrationOnGoing>:
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800429c:	d101      	bne.n	80042a2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr

080042ae <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b088      	sub	sp, #32
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_ADCEx_Calibration_Start+0x1e>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e0b9      	b.n	8004440 <HAL_ADCEx_Calibration_Start+0x192>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff ff0b 	bl	80040f0 <ADC_Disable>
 80042da:	4603      	mov	r3, r0
 80042dc:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff ffab 	bl	800423e <LL_ADC_IsEnabled>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f040 809d 	bne.w	800442a <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80042f8:	f043 0202 	orr.w	r2, r3, #2
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	f248 0303 	movw	r3, #32771	; 0x8003
 800430a:	4013      	ands	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6812      	ldr	r2, [r2, #0]
 8004318:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800431c:	f023 0303 	bic.w	r3, r3, #3
 8004320:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]
 8004326:	e02e      	b.n	8004386 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ff98 	bl	8004262 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004332:	e014      	b.n	800435e <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	3301      	adds	r3, #1
 8004338:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004340:	d30d      	bcc.n	800435e <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004346:	f023 0312 	bic.w	r3, r3, #18
 800434a:	f043 0210 	orr.w	r2, r3, #16
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e070      	b.n	8004440 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff ff90 	bl	8004288 <LL_ADC_IsCalibrationOnGoing>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e2      	bne.n	8004334 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff ff2f 	bl	80041d6 <LL_ADC_GetCalibrationFactor>
 8004378:	4602      	mov	r2, r0
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	4413      	add	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	3301      	adds	r3, #1
 8004384:	61fb      	str	r3, [r7, #28]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	2b07      	cmp	r3, #7
 800438a:	d9cd      	bls.n	8004328 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	fbb2 f3f3 	udiv	r3, r2, r3
 8004394:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff ff29 	bl	80041f2 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69b9      	ldr	r1, [r7, #24]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff ff01 	bl	80041ae <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff ff31 	bl	8004218 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80043b6:	f7fd ff8b 	bl	80022d0 <HAL_GetTick>
 80043ba:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043bc:	e01c      	b.n	80043f8 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80043be:	f7fd ff87 	bl	80022d0 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d915      	bls.n	80043f8 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff ff34 	bl	800423e <LL_ADC_IsEnabled>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00d      	beq.n	80043f8 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e0:	f043 0210 	orr.w	r2, r3, #16
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ec:	f043 0201 	orr.w	r2, r3, #1
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e023      	b.n	8004440 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff ff1e 	bl	800423e <LL_ADC_IsEnabled>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1da      	bne.n	80043be <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68d9      	ldr	r1, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	430a      	orrs	r2, r1
 8004416:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441c:	f023 0303 	bic.w	r3, r3, #3
 8004420:	f043 0201 	orr.w	r2, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	659a      	str	r2, [r3, #88]	; 0x58
 8004428:	e005      	b.n	8004436 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442e:	f043 0210 	orr.w	r2, r3, #16
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800443e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3720      	adds	r7, #32
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004458:	4b0c      	ldr	r3, [pc, #48]	; (800448c <__NVIC_SetPriorityGrouping+0x44>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004464:	4013      	ands	r3, r2
 8004466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800447a:	4a04      	ldr	r2, [pc, #16]	; (800448c <__NVIC_SetPriorityGrouping+0x44>)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	60d3      	str	r3, [r2, #12]
}
 8004480:	bf00      	nop
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	e000ed00 	.word	0xe000ed00

08004490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004494:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	0a1b      	lsrs	r3, r3, #8
 800449a:	f003 0307 	and.w	r3, r3, #7
}
 800449e:	4618      	mov	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	e000ed00 	.word	0xe000ed00

080044ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	db0b      	blt.n	80044d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	f003 021f 	and.w	r2, r3, #31
 80044c4:	4906      	ldr	r1, [pc, #24]	; (80044e0 <__NVIC_EnableIRQ+0x34>)
 80044c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	2001      	movs	r0, #1
 80044ce:	fa00 f202 	lsl.w	r2, r0, r2
 80044d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr
 80044e0:	e000e100 	.word	0xe000e100

080044e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4603      	mov	r3, r0
 80044ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	db12      	blt.n	800451c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	f003 021f 	and.w	r2, r3, #31
 80044fc:	490a      	ldr	r1, [pc, #40]	; (8004528 <__NVIC_DisableIRQ+0x44>)
 80044fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	2001      	movs	r0, #1
 8004506:	fa00 f202 	lsl.w	r2, r0, r2
 800450a:	3320      	adds	r3, #32
 800450c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004510:	f3bf 8f4f 	dsb	sy
}
 8004514:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004516:	f3bf 8f6f 	isb	sy
}
 800451a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	e000e100 	.word	0xe000e100

0800452c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	6039      	str	r1, [r7, #0]
 8004536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453c:	2b00      	cmp	r3, #0
 800453e:	db0a      	blt.n	8004556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	490c      	ldr	r1, [pc, #48]	; (8004578 <__NVIC_SetPriority+0x4c>)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	440b      	add	r3, r1
 8004550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004554:	e00a      	b.n	800456c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4908      	ldr	r1, [pc, #32]	; (800457c <__NVIC_SetPriority+0x50>)
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	3b04      	subs	r3, #4
 8004564:	0112      	lsls	r2, r2, #4
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	440b      	add	r3, r1
 800456a:	761a      	strb	r2, [r3, #24]
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	e000e100 	.word	0xe000e100
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004580:	b480      	push	{r7}
 8004582:	b089      	sub	sp, #36	; 0x24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f1c3 0307 	rsb	r3, r3, #7
 800459a:	2b04      	cmp	r3, #4
 800459c:	bf28      	it	cs
 800459e:	2304      	movcs	r3, #4
 80045a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2b06      	cmp	r3, #6
 80045a8:	d902      	bls.n	80045b0 <NVIC_EncodePriority+0x30>
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3b03      	subs	r3, #3
 80045ae:	e000      	b.n	80045b2 <NVIC_EncodePriority+0x32>
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43da      	mvns	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	401a      	ands	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c8:	f04f 31ff 	mov.w	r1, #4294967295
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	fa01 f303 	lsl.w	r3, r1, r3
 80045d2:	43d9      	mvns	r1, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d8:	4313      	orrs	r3, r2
         );
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3724      	adds	r7, #36	; 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7ff ff2b 	bl	8004448 <__NVIC_SetPriorityGrouping>
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b086      	sub	sp, #24
 80045fe:	af00      	add	r7, sp, #0
 8004600:	4603      	mov	r3, r0
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004608:	f7ff ff42 	bl	8004490 <__NVIC_GetPriorityGrouping>
 800460c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	6978      	ldr	r0, [r7, #20]
 8004614:	f7ff ffb4 	bl	8004580 <NVIC_EncodePriority>
 8004618:	4602      	mov	r2, r0
 800461a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800461e:	4611      	mov	r1, r2
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff ff83 	bl	800452c <__NVIC_SetPriority>
}
 8004626:	bf00      	nop
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	4603      	mov	r3, r0
 8004636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff ff35 	bl	80044ac <__NVIC_EnableIRQ>
}
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
 8004650:	4603      	mov	r3, r0
 8004652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff ff43 	bl	80044e4 <__NVIC_DisableIRQ>
}
 800465e:	bf00      	nop
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e08e      	b.n	8004798 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <HAL_DMA_Init+0x138>)
 8004682:	429a      	cmp	r2, r3
 8004684:	d80f      	bhi.n	80046a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	4b45      	ldr	r3, [pc, #276]	; (80047a4 <HAL_DMA_Init+0x13c>)
 800468e:	4413      	add	r3, r2
 8004690:	4a45      	ldr	r2, [pc, #276]	; (80047a8 <HAL_DMA_Init+0x140>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	091b      	lsrs	r3, r3, #4
 8004698:	009a      	lsls	r2, r3, #2
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a42      	ldr	r2, [pc, #264]	; (80047ac <HAL_DMA_Init+0x144>)
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40
 80046a4:	e00e      	b.n	80046c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	4b40      	ldr	r3, [pc, #256]	; (80047b0 <HAL_DMA_Init+0x148>)
 80046ae:	4413      	add	r3, r2
 80046b0:	4a3d      	ldr	r2, [pc, #244]	; (80047a8 <HAL_DMA_Init+0x140>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	091b      	lsrs	r3, r3, #4
 80046b8:	009a      	lsls	r2, r3, #2
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a3c      	ldr	r2, [pc, #240]	; (80047b4 <HAL_DMA_Init+0x14c>)
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6819      	ldr	r1, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fb24 	bl	8004d64 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004724:	d102      	bne.n	800472c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004734:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004738:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004742:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d010      	beq.n	800476e <HAL_DMA_Init+0x106>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d80c      	bhi.n	800476e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fb4d 	bl	8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800476a:	605a      	str	r2, [r3, #4]
 800476c:	e008      	b.n	8004780 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40020407 	.word	0x40020407
 80047a4:	bffdfff8 	.word	0xbffdfff8
 80047a8:	cccccccd 	.word	0xcccccccd
 80047ac:	40020000 	.word	0x40020000
 80047b0:	bffdfbf8 	.word	0xbffdfbf8
 80047b4:	40020400 	.word	0x40020400

080047b8 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e07b      	b.n	80048c2 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0201 	bic.w	r2, r2, #1
 80047d8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	4b3a      	ldr	r3, [pc, #232]	; (80048cc <HAL_DMA_DeInit+0x114>)
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d80f      	bhi.n	8004806 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	461a      	mov	r2, r3
 80047ec:	4b38      	ldr	r3, [pc, #224]	; (80048d0 <HAL_DMA_DeInit+0x118>)
 80047ee:	4413      	add	r3, r2
 80047f0:	4a38      	ldr	r2, [pc, #224]	; (80048d4 <HAL_DMA_DeInit+0x11c>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	091b      	lsrs	r3, r3, #4
 80047f8:	009a      	lsls	r2, r3, #2
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a35      	ldr	r2, [pc, #212]	; (80048d8 <HAL_DMA_DeInit+0x120>)
 8004802:	641a      	str	r2, [r3, #64]	; 0x40
 8004804:	e00e      	b.n	8004824 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	4b33      	ldr	r3, [pc, #204]	; (80048dc <HAL_DMA_DeInit+0x124>)
 800480e:	4413      	add	r3, r2
 8004810:	4a30      	ldr	r2, [pc, #192]	; (80048d4 <HAL_DMA_DeInit+0x11c>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	091b      	lsrs	r3, r3, #4
 8004818:	009a      	lsls	r2, r3, #2
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a2f      	ldr	r2, [pc, #188]	; (80048e0 <HAL_DMA_DeInit+0x128>)
 8004822:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004830:	f003 021c 	and.w	r2, r3, #28
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	2101      	movs	r1, #1
 800483a:	fa01 f202 	lsl.w	r2, r1, r2
 800483e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fa8f 	bl	8004d64 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004856:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00f      	beq.n	8004880 <HAL_DMA_DeInit+0xc8>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2b04      	cmp	r3, #4
 8004866:	d80b      	bhi.n	8004880 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fac3 	bl	8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800487e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40020407 	.word	0x40020407
 80048d0:	bffdfff8 	.word	0xbffdfff8
 80048d4:	cccccccd 	.word	0xcccccccd
 80048d8:	40020000 	.word	0x40020000
 80048dc:	bffdfbf8 	.word	0xbffdfbf8
 80048e0:	40020400 	.word	0x40020400

080048e4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_DMA_Start_IT+0x20>
 8004900:	2302      	movs	r3, #2
 8004902:	e069      	b.n	80049d8 <HAL_DMA_Start_IT+0xf4>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	d155      	bne.n	80049c4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0201 	bic.w	r2, r2, #1
 8004934:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f9d3 	bl	8004ce8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	2b00      	cmp	r3, #0
 8004948:	d008      	beq.n	800495c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 020e 	orr.w	r2, r2, #14
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	e00f      	b.n	800497c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0204 	bic.w	r2, r2, #4
 800496a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 020a 	orr.w	r2, r2, #10
 800497a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004998:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d007      	beq.n	80049b2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e008      	b.n	80049d6 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2280      	movs	r2, #128	; 0x80
 80049c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e04f      	b.n	8004a92 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d008      	beq.n	8004a10 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2204      	movs	r2, #4
 8004a02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e040      	b.n	8004a92 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 020e 	bic.w	r2, r2, #14
 8004a1e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0201 	bic.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a44:	f003 021c 	and.w	r2, r3, #28
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a52:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a5c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00c      	beq.n	8004a80 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a74:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a7e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d005      	beq.n	8004ac0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2204      	movs	r2, #4
 8004ab8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
 8004abe:	e047      	b.n	8004b50 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 020e 	bic.w	r2, r2, #14
 8004ace:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0201 	bic.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af4:	f003 021c 	and.w	r2, r3, #28
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	2101      	movs	r1, #1
 8004afe:	fa01 f202 	lsl.w	r2, r1, r2
 8004b02:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b0c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00c      	beq.n	8004b30 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b24:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b2e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	4798      	blx	r3
    }
  }
  return status;
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b78:	f003 031c 	and.w	r3, r3, #28
 8004b7c:	2204      	movs	r2, #4
 8004b7e:	409a      	lsls	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4013      	ands	r3, r2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d027      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x7c>
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d022      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d107      	bne.n	8004bb0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0204 	bic.w	r2, r2, #4
 8004bae:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb4:	f003 021c 	and.w	r2, r3, #28
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	2104      	movs	r1, #4
 8004bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 8081 	beq.w	8004cd0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004bd6:	e07b      	b.n	8004cd0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bdc:	f003 031c 	and.w	r3, r3, #28
 8004be0:	2202      	movs	r2, #2
 8004be2:	409a      	lsls	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d03d      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x10c>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d038      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10b      	bne.n	8004c1c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 020a 	bic.w	r2, r2, #10
 8004c12:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	4b2e      	ldr	r3, [pc, #184]	; (8004cdc <HAL_DMA_IRQHandler+0x180>)
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d909      	bls.n	8004c3c <HAL_DMA_IRQHandler+0xe0>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2c:	f003 031c 	and.w	r3, r3, #28
 8004c30:	4a2b      	ldr	r2, [pc, #172]	; (8004ce0 <HAL_DMA_IRQHandler+0x184>)
 8004c32:	2102      	movs	r1, #2
 8004c34:	fa01 f303 	lsl.w	r3, r1, r3
 8004c38:	6053      	str	r3, [r2, #4]
 8004c3a:	e008      	b.n	8004c4e <HAL_DMA_IRQHandler+0xf2>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c40:	f003 031c 	and.w	r3, r3, #28
 8004c44:	4a27      	ldr	r2, [pc, #156]	; (8004ce4 <HAL_DMA_IRQHandler+0x188>)
 8004c46:	2102      	movs	r1, #2
 8004c48:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d038      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004c66:	e033      	b.n	8004cd0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6c:	f003 031c 	and.w	r3, r3, #28
 8004c70:	2208      	movs	r2, #8
 8004c72:	409a      	lsls	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d02a      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0x176>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d025      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 020e 	bic.w	r2, r2, #14
 8004c94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	f003 021c 	and.w	r2, r3, #28
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ca8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d004      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004cd0:	bf00      	nop
 8004cd2:	bf00      	nop
}
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40020080 	.word	0x40020080
 8004ce0:	40020400 	.word	0x40020400
 8004ce4:	40020000 	.word	0x40020000

08004ce8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004cfe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d004      	beq.n	8004d12 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d10:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d16:	f003 021c 	and.w	r2, r3, #28
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	2101      	movs	r1, #1
 8004d20:	fa01 f202 	lsl.w	r2, r1, r2
 8004d24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b10      	cmp	r3, #16
 8004d34:	d108      	bne.n	8004d48 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d46:	e007      	b.n	8004d58 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	60da      	str	r2, [r3, #12]
}
 8004d58:	bf00      	nop
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bc80      	pop	{r7}
 8004d60:	4770      	bx	lr
	...

08004d64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	4b1c      	ldr	r3, [pc, #112]	; (8004de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d813      	bhi.n	8004da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7c:	089b      	lsrs	r3, r3, #2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d84:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	3b08      	subs	r3, #8
 8004d94:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	e011      	b.n	8004dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da4:	089b      	lsrs	r3, r3, #2
 8004da6:	009a      	lsls	r2, r3, #2
 8004da8:	4b10      	ldr	r3, [pc, #64]	; (8004dec <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004daa:	4413      	add	r3, r2
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	3b08      	subs	r3, #8
 8004db8:	4a0b      	ldr	r2, [pc, #44]	; (8004de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	091b      	lsrs	r3, r3, #4
 8004dc0:	3307      	adds	r3, #7
 8004dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a0a      	ldr	r2, [pc, #40]	; (8004df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004dc8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f003 031f 	and.w	r3, r3, #31
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	409a      	lsls	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004dd8:	bf00      	nop
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc80      	pop	{r7}
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40020407 	.word	0x40020407
 8004de8:	cccccccd 	.word	0xcccccccd
 8004dec:	4002081c 	.word	0x4002081c
 8004df0:	40020880 	.word	0x40020880

08004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e04:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004e0a:	4413      	add	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	461a      	mov	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004e18:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	2201      	movs	r2, #1
 8004e24:	409a      	lsls	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr
 8004e34:	1000823f 	.word	0x1000823f
 8004e38:	40020940 	.word	0x40020940

08004e3c <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d12b      	bne.n	8004eaa <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_DMAEx_ConfigMuxSync+0x24>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e028      	b.n	8004eb2 <HAL_DMAEx_ConfigMuxSync+0x76>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	04db      	lsls	r3, r3, #19
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	431a      	orrs	r2, r3
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	7a1b      	ldrb	r3, [r3, #8]
 8004e8a:	041b      	lsls	r3, r3, #16
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	7a5b      	ldrb	r3, [r3, #9]
 8004e92:	025b      	lsls	r3, r3, #9
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e003      	b.n	8004eb2 <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2280      	movs	r2, #128	; 0x80
 8004eae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
  }
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr

08004ebc <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01a      	beq.n	8004f0a <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ede:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ee2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004eec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d022      	beq.n	8004f58 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d01a      	beq.n	8004f58 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f3a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4798      	blx	r3
      }
    }
  }
}
 8004f58:	bf00      	nop
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004f6e:	4b1c      	ldr	r3, [pc, #112]	; (8004fe0 <HAL_FLASH_Program+0x80>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_FLASH_Program+0x1a>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e02d      	b.n	8004fd6 <HAL_FLASH_Program+0x76>
 8004f7a:	4b19      	ldr	r3, [pc, #100]	; (8004fe0 <HAL_FLASH_Program+0x80>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f80:	4b17      	ldr	r3, [pc, #92]	; (8004fe0 <HAL_FLASH_Program+0x80>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f8a:	f000 f869 	bl	8005060 <FLASH_WaitForLastOperation>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004f92:	7dfb      	ldrb	r3, [r7, #23]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d11a      	bne.n	8004fce <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d105      	bne.n	8004faa <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004f9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fa2:	68b8      	ldr	r0, [r7, #8]
 8004fa4:	f000 f8be 	bl	8005124 <FLASH_Program_DoubleWord>
 8004fa8:	e004      	b.n	8004fb4 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	4619      	mov	r1, r3
 8004fae:	68b8      	ldr	r0, [r7, #8]
 8004fb0:	f000 f8de 	bl	8005170 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fb8:	f000 f852 	bl	8005060 <FLASH_WaitForLastOperation>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004fc0:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <HAL_FLASH_Program+0x84>)
 8004fc2:	695a      	ldr	r2, [r3, #20]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	4906      	ldr	r1, [pc, #24]	; (8004fe4 <HAL_FLASH_Program+0x84>)
 8004fca:	4013      	ands	r3, r2
 8004fcc:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004fce:	4b04      	ldr	r3, [pc, #16]	; (8004fe0 <HAL_FLASH_Program+0x80>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000914 	.word	0x20000914
 8004fe4:	58004000 	.word	0x58004000

08004fe8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004ff2:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <HAL_FLASH_Unlock+0x38>)
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	da0b      	bge.n	8005012 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004ffa:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_FLASH_Unlock+0x38>)
 8004ffc:	4a09      	ldr	r2, [pc, #36]	; (8005024 <HAL_FLASH_Unlock+0x3c>)
 8004ffe:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005000:	4b07      	ldr	r3, [pc, #28]	; (8005020 <HAL_FLASH_Unlock+0x38>)
 8005002:	4a09      	ldr	r2, [pc, #36]	; (8005028 <HAL_FLASH_Unlock+0x40>)
 8005004:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005006:	4b06      	ldr	r3, [pc, #24]	; (8005020 <HAL_FLASH_Unlock+0x38>)
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	2b00      	cmp	r3, #0
 800500c:	da01      	bge.n	8005012 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005012:	79fb      	ldrb	r3, [r7, #7]
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	58004000 	.word	0x58004000
 8005024:	45670123 	.word	0x45670123
 8005028:	cdef89ab 	.word	0xcdef89ab

0800502c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005036:	4b09      	ldr	r3, [pc, #36]	; (800505c <HAL_FLASH_Lock+0x30>)
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	4a08      	ldr	r2, [pc, #32]	; (800505c <HAL_FLASH_Lock+0x30>)
 800503c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005040:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8005042:	4b06      	ldr	r3, [pc, #24]	; (800505c <HAL_FLASH_Lock+0x30>)
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	db01      	blt.n	800504e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800504e:	79fb      	ldrb	r3, [r7, #7]
}
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	58004000 	.word	0x58004000

08005060 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005068:	f7fd f932 	bl	80022d0 <HAL_GetTick>
 800506c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800506e:	e009      	b.n	8005084 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005070:	f7fd f92e 	bl	80022d0 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	429a      	cmp	r2, r3
 800507e:	d801      	bhi.n	8005084 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e047      	b.n	8005114 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005084:	4b25      	ldr	r3, [pc, #148]	; (800511c <FLASH_WaitForLastOperation+0xbc>)
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800508c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005090:	d0ee      	beq.n	8005070 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005092:	4b22      	ldr	r3, [pc, #136]	; (800511c <FLASH_WaitForLastOperation+0xbc>)
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80050a2:	4b1e      	ldr	r3, [pc, #120]	; (800511c <FLASH_WaitForLastOperation+0xbc>)
 80050a4:	2201      	movs	r2, #1
 80050a6:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80050ae:	4013      	ands	r3, r2
 80050b0:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d007      	beq.n	80050cc <FLASH_WaitForLastOperation+0x6c>
 80050bc:	4b17      	ldr	r3, [pc, #92]	; (800511c <FLASH_WaitForLastOperation+0xbc>)
 80050be:	699a      	ldr	r2, [r3, #24]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80050c6:	4915      	ldr	r1, [pc, #84]	; (800511c <FLASH_WaitForLastOperation+0xbc>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	618b      	str	r3, [r1, #24]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d004      	beq.n	80050e0 <FLASH_WaitForLastOperation+0x80>
 80050d6:	4a11      	ldr	r2, [pc, #68]	; (800511c <FLASH_WaitForLastOperation+0xbc>)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80050de:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00e      	beq.n	8005104 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80050e6:	4a0e      	ldr	r2, [pc, #56]	; (8005120 <FLASH_WaitForLastOperation+0xc0>)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e011      	b.n	8005114 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80050f0:	f7fd f8ee 	bl	80022d0 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d801      	bhi.n	8005104 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e007      	b.n	8005114 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005104:	4b05      	ldr	r3, [pc, #20]	; (800511c <FLASH_WaitForLastOperation+0xbc>)
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800510c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005110:	d0ee      	beq.n	80050f0 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	58004000 	.word	0x58004000
 8005120:	20000914 	.word	0x20000914

08005124 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005130:	4b0e      	ldr	r3, [pc, #56]	; (800516c <FLASH_Program_DoubleWord+0x48>)
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	4a0d      	ldr	r2, [pc, #52]	; (800516c <FLASH_Program_DoubleWord+0x48>)
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005142:	f3bf 8f6f 	isb	sy
}
 8005146:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005148:	e9d7 0100 	ldrd	r0, r1, [r7]
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	000a      	movs	r2, r1
 8005156:	2300      	movs	r3, #0
 8005158:	68f9      	ldr	r1, [r7, #12]
 800515a:	3104      	adds	r1, #4
 800515c:	4613      	mov	r3, r2
 800515e:	600b      	str	r3, [r1, #0]
}
 8005160:	bf00      	nop
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	bc80      	pop	{r7}
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	58004000 	.word	0x58004000

08005170 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005170:	b480      	push	{r7}
 8005172:	b089      	sub	sp, #36	; 0x24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800517a:	2340      	movs	r3, #64	; 0x40
 800517c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005186:	4b18      	ldr	r3, [pc, #96]	; (80051e8 <FLASH_Program_Fast+0x78>)
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	4a17      	ldr	r2, [pc, #92]	; (80051e8 <FLASH_Program_Fast+0x78>)
 800518c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005190:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005192:	f3ef 8310 	mrs	r3, PRIMASK
 8005196:	60fb      	str	r3, [r7, #12]
  return(result);
 8005198:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800519a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800519c:	b672      	cpsid	i
}
 800519e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	3304      	adds	r3, #4
 80051ac:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	3304      	adds	r3, #4
 80051b2:	617b      	str	r3, [r7, #20]
    row_index--;
 80051b4:	7ffb      	ldrb	r3, [r7, #31]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80051ba:	7ffb      	ldrb	r3, [r7, #31]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1ef      	bne.n	80051a0 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80051c0:	bf00      	nop
 80051c2:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <FLASH_Program_Fast+0x78>)
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ce:	d0f8      	beq.n	80051c2 <FLASH_Program_Fast+0x52>
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f383 8810 	msr	PRIMASK, r3
}
 80051da:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80051dc:	bf00      	nop
 80051de:	3724      	adds	r7, #36	; 0x24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bc80      	pop	{r7}
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	58004000 	.word	0x58004000

080051ec <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80051f6:	4b28      	ldr	r3, [pc, #160]	; (8005298 <HAL_FLASHEx_Erase+0xac>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d101      	bne.n	8005202 <HAL_FLASHEx_Erase+0x16>
 80051fe:	2302      	movs	r3, #2
 8005200:	e046      	b.n	8005290 <HAL_FLASHEx_Erase+0xa4>
 8005202:	4b25      	ldr	r3, [pc, #148]	; (8005298 <HAL_FLASHEx_Erase+0xac>)
 8005204:	2201      	movs	r2, #1
 8005206:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005208:	4b23      	ldr	r3, [pc, #140]	; (8005298 <HAL_FLASHEx_Erase+0xac>)
 800520a:	2200      	movs	r2, #0
 800520c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800520e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005212:	f7ff ff25 	bl	8005060 <FLASH_WaitForLastOperation>
 8005216:	4603      	mov	r3, r0
 8005218:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800521a:	7bfb      	ldrb	r3, [r7, #15]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d133      	bne.n	8005288 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b04      	cmp	r3, #4
 8005226:	d108      	bne.n	800523a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005228:	f000 f880 	bl	800532c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800522c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005230:	f7ff ff16 	bl	8005060 <FLASH_WaitForLastOperation>
 8005234:	4603      	mov	r3, r0
 8005236:	73fb      	strb	r3, [r7, #15]
 8005238:	e024      	b.n	8005284 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	f04f 32ff 	mov.w	r2, #4294967295
 8005240:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	60bb      	str	r3, [r7, #8]
 8005248:	e012      	b.n	8005270 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800524a:	68b8      	ldr	r0, [r7, #8]
 800524c:	f000 f87e 	bl	800534c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005254:	f7ff ff04 	bl	8005060 <FLASH_WaitForLastOperation>
 8005258:	4603      	mov	r3, r0
 800525a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	601a      	str	r2, [r3, #0]
          break;
 8005268:	e00a      	b.n	8005280 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	3301      	adds	r3, #1
 800526e:	60bb      	str	r3, [r7, #8]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	4413      	add	r3, r2
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	429a      	cmp	r2, r3
 800527e:	d3e4      	bcc.n	800524a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005280:	f000 f8c0 	bl	8005404 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005284:	f000 f87a 	bl	800537c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005288:	4b03      	ldr	r3, [pc, #12]	; (8005298 <HAL_FLASHEx_Erase+0xac>)
 800528a:	2200      	movs	r2, #0
 800528c:	701a      	strb	r2, [r3, #0]

  return status;
 800528e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20000914 	.word	0x20000914

0800529c <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80052a4:	4b1f      	ldr	r3, [pc, #124]	; (8005324 <HAL_FLASHEx_Erase_IT+0x88>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_FLASHEx_Erase_IT+0x14>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e034      	b.n	800531a <HAL_FLASHEx_Erase_IT+0x7e>
 80052b0:	4b1c      	ldr	r3, [pc, #112]	; (8005324 <HAL_FLASHEx_Erase_IT+0x88>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80052b6:	4b1b      	ldr	r3, [pc, #108]	; (8005324 <HAL_FLASHEx_Erase_IT+0x88>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a18      	ldr	r2, [pc, #96]	; (8005324 <HAL_FLASHEx_Erase_IT+0x88>)
 80052c2:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80052c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052c8:	f7ff feca 	bl	8005060 <FLASH_WaitForLastOperation>
 80052cc:	4603      	mov	r3, r0
 80052ce:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80052d6:	4b13      	ldr	r3, [pc, #76]	; (8005324 <HAL_FLASHEx_Erase_IT+0x88>)
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
 80052dc:	e01c      	b.n	8005318 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80052de:	4b12      	ldr	r3, [pc, #72]	; (8005328 <HAL_FLASHEx_Erase_IT+0x8c>)
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	4a11      	ldr	r2, [pc, #68]	; (8005328 <HAL_FLASHEx_Erase_IT+0x8c>)
 80052e4:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80052e8:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d105      	bne.n	80052fe <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 80052f2:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <HAL_FLASHEx_Erase_IT+0x88>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 80052f8:	f000 f818 	bl	800532c <FLASH_MassErase>
 80052fc:	e00c      	b.n	8005318 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	4a08      	ldr	r2, [pc, #32]	; (8005324 <HAL_FLASHEx_Erase_IT+0x88>)
 8005304:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	4a06      	ldr	r2, [pc, #24]	; (8005324 <HAL_FLASHEx_Erase_IT+0x88>)
 800530c:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	4618      	mov	r0, r3
 8005314:	f000 f81a 	bl	800534c <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 8005318:	7bfb      	ldrb	r3, [r7, #15]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20000914 	.word	0x20000914
 8005328:	58004000 	.word	0x58004000

0800532c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005330:	4b05      	ldr	r3, [pc, #20]	; (8005348 <FLASH_MassErase+0x1c>)
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	4a04      	ldr	r2, [pc, #16]	; (8005348 <FLASH_MassErase+0x1c>)
 8005336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800533a:	f043 0304 	orr.w	r3, r3, #4
 800533e:	6153      	str	r3, [r2, #20]
#endif
}
 8005340:	bf00      	nop
 8005342:	46bd      	mov	sp, r7
 8005344:	bc80      	pop	{r7}
 8005346:	4770      	bx	lr
 8005348:	58004000 	.word	0x58004000

0800534c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005354:	4b08      	ldr	r3, [pc, #32]	; (8005378 <FLASH_PageErase+0x2c>)
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	4313      	orrs	r3, r2
 8005362:	4a05      	ldr	r2, [pc, #20]	; (8005378 <FLASH_PageErase+0x2c>)
 8005364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005368:	f043 0302 	orr.w	r3, r3, #2
 800536c:	6153      	str	r3, [r2, #20]
#endif
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr
 8005378:	58004000 	.word	0x58004000

0800537c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005380:	4b1f      	ldr	r3, [pc, #124]	; (8005400 <FLASH_FlushCaches+0x84>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005388:	2b01      	cmp	r3, #1
 800538a:	d117      	bne.n	80053bc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800538c:	4b1c      	ldr	r3, [pc, #112]	; (8005400 <FLASH_FlushCaches+0x84>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1b      	ldr	r2, [pc, #108]	; (8005400 <FLASH_FlushCaches+0x84>)
 8005392:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005396:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005398:	4b19      	ldr	r3, [pc, #100]	; (8005400 <FLASH_FlushCaches+0x84>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a18      	ldr	r2, [pc, #96]	; (8005400 <FLASH_FlushCaches+0x84>)
 800539e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	4b16      	ldr	r3, [pc, #88]	; (8005400 <FLASH_FlushCaches+0x84>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a15      	ldr	r2, [pc, #84]	; (8005400 <FLASH_FlushCaches+0x84>)
 80053aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053ae:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053b0:	4b13      	ldr	r3, [pc, #76]	; (8005400 <FLASH_FlushCaches+0x84>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a12      	ldr	r2, [pc, #72]	; (8005400 <FLASH_FlushCaches+0x84>)
 80053b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053ba:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80053bc:	4b10      	ldr	r3, [pc, #64]	; (8005400 <FLASH_FlushCaches+0x84>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d117      	bne.n	80053f8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80053c8:	4b0d      	ldr	r3, [pc, #52]	; (8005400 <FLASH_FlushCaches+0x84>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a0c      	ldr	r2, [pc, #48]	; (8005400 <FLASH_FlushCaches+0x84>)
 80053ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053d2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80053d4:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <FLASH_FlushCaches+0x84>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a09      	ldr	r2, [pc, #36]	; (8005400 <FLASH_FlushCaches+0x84>)
 80053da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	4b07      	ldr	r3, [pc, #28]	; (8005400 <FLASH_FlushCaches+0x84>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a06      	ldr	r2, [pc, #24]	; (8005400 <FLASH_FlushCaches+0x84>)
 80053e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053ea:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80053ec:	4b04      	ldr	r3, [pc, #16]	; (8005400 <FLASH_FlushCaches+0x84>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a03      	ldr	r2, [pc, #12]	; (8005400 <FLASH_FlushCaches+0x84>)
 80053f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053f6:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80053f8:	bf00      	nop
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr
 8005400:	58004000 	.word	0x58004000

08005404 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005408:	4b05      	ldr	r3, [pc, #20]	; (8005420 <FLASH_AcknowledgePageErase+0x1c>)
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	4a04      	ldr	r2, [pc, #16]	; (8005420 <FLASH_AcknowledgePageErase+0x1c>)
 800540e:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005412:	f023 0302 	bic.w	r3, r3, #2
 8005416:	6153      	str	r3, [r2, #20]
#endif
}
 8005418:	bf00      	nop
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr
 8005420:	58004000 	.word	0x58004000

08005424 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005432:	e140      	b.n	80056b6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	2101      	movs	r1, #1
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	fa01 f303 	lsl.w	r3, r1, r3
 8005440:	4013      	ands	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 8132 	beq.w	80056b0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	2b01      	cmp	r3, #1
 8005456:	d005      	beq.n	8005464 <HAL_GPIO_Init+0x40>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d130      	bne.n	80054c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	2203      	movs	r2, #3
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	43db      	mvns	r3, r3
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	4013      	ands	r3, r2
 800547a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	fa02 f303 	lsl.w	r3, r2, r3
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800549a:	2201      	movs	r2, #1
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	fa02 f303 	lsl.w	r3, r2, r3
 80054a2:	43db      	mvns	r3, r3
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4013      	ands	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	091b      	lsrs	r3, r3, #4
 80054b0:	f003 0201 	and.w	r2, r3, #1
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d017      	beq.n	8005502 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	2203      	movs	r2, #3
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	43db      	mvns	r3, r3
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4013      	ands	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d123      	bne.n	8005556 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	08da      	lsrs	r2, r3, #3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3208      	adds	r2, #8
 8005516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800551a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	220f      	movs	r2, #15
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	43db      	mvns	r3, r3
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4013      	ands	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	08da      	lsrs	r2, r3, #3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3208      	adds	r2, #8
 8005550:	6939      	ldr	r1, [r7, #16]
 8005552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	2203      	movs	r2, #3
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	43db      	mvns	r3, r3
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4013      	ands	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f003 0203 	and.w	r2, r3, #3
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 808c 	beq.w	80056b0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005598:	4a4e      	ldr	r2, [pc, #312]	; (80056d4 <HAL_GPIO_Init+0x2b0>)
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	089b      	lsrs	r3, r3, #2
 800559e:	3302      	adds	r3, #2
 80055a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f003 0303 	and.w	r3, r3, #3
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	2207      	movs	r2, #7
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	43db      	mvns	r3, r3
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4013      	ands	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80055c2:	d00d      	beq.n	80055e0 <HAL_GPIO_Init+0x1bc>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a44      	ldr	r2, [pc, #272]	; (80056d8 <HAL_GPIO_Init+0x2b4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d007      	beq.n	80055dc <HAL_GPIO_Init+0x1b8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a43      	ldr	r2, [pc, #268]	; (80056dc <HAL_GPIO_Init+0x2b8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d101      	bne.n	80055d8 <HAL_GPIO_Init+0x1b4>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e004      	b.n	80055e2 <HAL_GPIO_Init+0x1be>
 80055d8:	2307      	movs	r3, #7
 80055da:	e002      	b.n	80055e2 <HAL_GPIO_Init+0x1be>
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <HAL_GPIO_Init+0x1be>
 80055e0:	2300      	movs	r3, #0
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	f002 0203 	and.w	r2, r2, #3
 80055e8:	0092      	lsls	r2, r2, #2
 80055ea:	4093      	lsls	r3, r2
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80055f2:	4938      	ldr	r1, [pc, #224]	; (80056d4 <HAL_GPIO_Init+0x2b0>)
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	089b      	lsrs	r3, r3, #2
 80055f8:	3302      	adds	r3, #2
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005600:	4b37      	ldr	r3, [pc, #220]	; (80056e0 <HAL_GPIO_Init+0x2bc>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	43db      	mvns	r3, r3
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4013      	ands	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4313      	orrs	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005624:	4a2e      	ldr	r2, [pc, #184]	; (80056e0 <HAL_GPIO_Init+0x2bc>)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800562a:	4b2d      	ldr	r3, [pc, #180]	; (80056e0 <HAL_GPIO_Init+0x2bc>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	43db      	mvns	r3, r3
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4013      	ands	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800564e:	4a24      	ldr	r2, [pc, #144]	; (80056e0 <HAL_GPIO_Init+0x2bc>)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005654:	4b22      	ldr	r3, [pc, #136]	; (80056e0 <HAL_GPIO_Init+0x2bc>)
 8005656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800565a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	43db      	mvns	r3, r3
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4013      	ands	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800567a:	4a19      	ldr	r2, [pc, #100]	; (80056e0 <HAL_GPIO_Init+0x2bc>)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005682:	4b17      	ldr	r3, [pc, #92]	; (80056e0 <HAL_GPIO_Init+0x2bc>)
 8005684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005688:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	43db      	mvns	r3, r3
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4013      	ands	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80056a8:	4a0d      	ldr	r2, [pc, #52]	; (80056e0 <HAL_GPIO_Init+0x2bc>)
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	3301      	adds	r3, #1
 80056b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f47f aeb7 	bne.w	8005434 <HAL_GPIO_Init+0x10>
  }
}
 80056c6:	bf00      	nop
 80056c8:	bf00      	nop
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40010000 	.word	0x40010000
 80056d8:	48000400 	.word	0x48000400
 80056dc:	48000800 	.word	0x48000800
 80056e0:	58000800 	.word	0x58000800

080056e4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80056f2:	e0af      	b.n	8005854 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80056f4:	2201      	movs	r2, #1
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	4013      	ands	r3, r2
 8005700:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 80a2 	beq.w	800584e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800570a:	4a59      	ldr	r2, [pc, #356]	; (8005870 <HAL_GPIO_DeInit+0x18c>)
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	089b      	lsrs	r3, r3, #2
 8005710:	3302      	adds	r3, #2
 8005712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005716:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	2207      	movs	r2, #7
 8005722:	fa02 f303 	lsl.w	r3, r2, r3
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4013      	ands	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005732:	d00d      	beq.n	8005750 <HAL_GPIO_DeInit+0x6c>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a4f      	ldr	r2, [pc, #316]	; (8005874 <HAL_GPIO_DeInit+0x190>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d007      	beq.n	800574c <HAL_GPIO_DeInit+0x68>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a4e      	ldr	r2, [pc, #312]	; (8005878 <HAL_GPIO_DeInit+0x194>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d101      	bne.n	8005748 <HAL_GPIO_DeInit+0x64>
 8005744:	2302      	movs	r3, #2
 8005746:	e004      	b.n	8005752 <HAL_GPIO_DeInit+0x6e>
 8005748:	2307      	movs	r3, #7
 800574a:	e002      	b.n	8005752 <HAL_GPIO_DeInit+0x6e>
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <HAL_GPIO_DeInit+0x6e>
 8005750:	2300      	movs	r3, #0
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	f002 0203 	and.w	r2, r2, #3
 8005758:	0092      	lsls	r2, r2, #2
 800575a:	4093      	lsls	r3, r2
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	429a      	cmp	r2, r3
 8005760:	d136      	bne.n	80057d0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005762:	4b46      	ldr	r3, [pc, #280]	; (800587c <HAL_GPIO_DeInit+0x198>)
 8005764:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	43db      	mvns	r3, r3
 800576c:	4943      	ldr	r1, [pc, #268]	; (800587c <HAL_GPIO_DeInit+0x198>)
 800576e:	4013      	ands	r3, r2
 8005770:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005774:	4b41      	ldr	r3, [pc, #260]	; (800587c <HAL_GPIO_DeInit+0x198>)
 8005776:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	43db      	mvns	r3, r3
 800577e:	493f      	ldr	r1, [pc, #252]	; (800587c <HAL_GPIO_DeInit+0x198>)
 8005780:	4013      	ands	r3, r2
 8005782:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005786:	4b3d      	ldr	r3, [pc, #244]	; (800587c <HAL_GPIO_DeInit+0x198>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	43db      	mvns	r3, r3
 800578e:	493b      	ldr	r1, [pc, #236]	; (800587c <HAL_GPIO_DeInit+0x198>)
 8005790:	4013      	ands	r3, r2
 8005792:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005794:	4b39      	ldr	r3, [pc, #228]	; (800587c <HAL_GPIO_DeInit+0x198>)
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	43db      	mvns	r3, r3
 800579c:	4937      	ldr	r1, [pc, #220]	; (800587c <HAL_GPIO_DeInit+0x198>)
 800579e:	4013      	ands	r3, r2
 80057a0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f003 0303 	and.w	r3, r3, #3
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	2207      	movs	r2, #7
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80057b2:	4a2f      	ldr	r2, [pc, #188]	; (8005870 <HAL_GPIO_DeInit+0x18c>)
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	089b      	lsrs	r3, r3, #2
 80057b8:	3302      	adds	r3, #2
 80057ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	43da      	mvns	r2, r3
 80057c2:	482b      	ldr	r0, [pc, #172]	; (8005870 <HAL_GPIO_DeInit+0x18c>)
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	089b      	lsrs	r3, r3, #2
 80057c8:	400a      	ands	r2, r1
 80057ca:	3302      	adds	r3, #2
 80057cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	2103      	movs	r1, #3
 80057da:	fa01 f303 	lsl.w	r3, r1, r3
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	08da      	lsrs	r2, r3, #3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3208      	adds	r2, #8
 80057ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	220f      	movs	r2, #15
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	43db      	mvns	r3, r3
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	08d2      	lsrs	r2, r2, #3
 8005804:	4019      	ands	r1, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3208      	adds	r2, #8
 800580a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	2103      	movs	r1, #3
 8005818:	fa01 f303 	lsl.w	r3, r1, r3
 800581c:	43db      	mvns	r3, r3
 800581e:	401a      	ands	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	2101      	movs	r1, #1
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	fa01 f303 	lsl.w	r3, r1, r3
 8005830:	43db      	mvns	r3, r3
 8005832:	401a      	ands	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	2103      	movs	r1, #3
 8005842:	fa01 f303 	lsl.w	r3, r1, r3
 8005846:	43db      	mvns	r3, r3
 8005848:	401a      	ands	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	3301      	adds	r3, #1
 8005852:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	f47f af49 	bne.w	80056f4 <HAL_GPIO_DeInit+0x10>
  }
}
 8005862:	bf00      	nop
 8005864:	bf00      	nop
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	bc80      	pop	{r7}
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	40010000 	.word	0x40010000
 8005874:	48000400 	.word	0x48000400
 8005878:	48000800 	.word	0x48000800
 800587c:	58000800 	.word	0x58000800

08005880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	807b      	strh	r3, [r7, #2]
 800588c:	4613      	mov	r3, r2
 800588e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005890:	787b      	ldrb	r3, [r7, #1]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005896:	887a      	ldrh	r2, [r7, #2]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800589c:	e002      	b.n	80058a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800589e:	887a      	ldrh	r2, [r7, #2]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bc80      	pop	{r7}
 80058ac:	4770      	bx	lr
	...

080058b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80058ba:	4b08      	ldr	r3, [pc, #32]	; (80058dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	4013      	ands	r3, r2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d006      	beq.n	80058d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058c6:	4a05      	ldr	r2, [pc, #20]	; (80058dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058c8:	88fb      	ldrh	r3, [r7, #6]
 80058ca:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058cc:	88fb      	ldrh	r3, [r7, #6]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f005 fd9a 	bl	800b408 <HAL_GPIO_EXTI_Callback>
  }
}
 80058d4:	bf00      	nop
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	58000800 	.word	0x58000800

080058e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e081      	b.n	80059f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fb ffc0 	bl	800188c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2224      	movs	r2, #36	; 0x24
 8005910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0201 	bic.w	r2, r2, #1
 8005922:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005930:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005940:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d107      	bne.n	800595a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005956:	609a      	str	r2, [r3, #8]
 8005958:	e006      	b.n	8005968 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005966:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	2b02      	cmp	r3, #2
 800596e:	d104      	bne.n	800597a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005978:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6812      	ldr	r2, [r2, #0]
 8005984:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800598c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800599c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691a      	ldr	r2, [r3, #16]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	430a      	orrs	r2, r1
 80059b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69d9      	ldr	r1, [r3, #28]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1a      	ldr	r2, [r3, #32]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0201 	orr.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af02      	add	r7, sp, #8
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	607a      	str	r2, [r7, #4]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	817b      	strh	r3, [r7, #10]
 8005a10:	4613      	mov	r3, r2
 8005a12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b20      	cmp	r3, #32
 8005a1e:	f040 80da 	bne.w	8005bd6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d101      	bne.n	8005a30 <HAL_I2C_Master_Transmit+0x30>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e0d3      	b.n	8005bd8 <HAL_I2C_Master_Transmit+0x1d8>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a38:	f7fc fc4a 	bl	80022d0 <HAL_GetTick>
 8005a3c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	2319      	movs	r3, #25
 8005a44:	2201      	movs	r2, #1
 8005a46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 f9e5 	bl	8005e1a <I2C_WaitOnFlagUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e0be      	b.n	8005bd8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2221      	movs	r2, #33	; 0x21
 8005a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2210      	movs	r2, #16
 8005a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	893a      	ldrh	r2, [r7, #8]
 8005a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2bff      	cmp	r3, #255	; 0xff
 8005a8a:	d90e      	bls.n	8005aaa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	22ff      	movs	r2, #255	; 0xff
 8005a90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	8979      	ldrh	r1, [r7, #10]
 8005a9a:	4b51      	ldr	r3, [pc, #324]	; (8005be0 <HAL_I2C_Master_Transmit+0x1e0>)
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 fbdc 	bl	8006260 <I2C_TransferConfig>
 8005aa8:	e06c      	b.n	8005b84 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	8979      	ldrh	r1, [r7, #10]
 8005abc:	4b48      	ldr	r3, [pc, #288]	; (8005be0 <HAL_I2C_Master_Transmit+0x1e0>)
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 fbcb 	bl	8006260 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005aca:	e05b      	b.n	8005b84 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	6a39      	ldr	r1, [r7, #32]
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 f9e2 	bl	8005e9a <I2C_WaitOnTXISFlagUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e07b      	b.n	8005bd8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	781a      	ldrb	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d034      	beq.n	8005b84 <HAL_I2C_Master_Transmit+0x184>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d130      	bne.n	8005b84 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2180      	movs	r1, #128	; 0x80
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f974 	bl	8005e1a <I2C_WaitOnFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e04d      	b.n	8005bd8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2bff      	cmp	r3, #255	; 0xff
 8005b44:	d90e      	bls.n	8005b64 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	22ff      	movs	r2, #255	; 0xff
 8005b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	8979      	ldrh	r1, [r7, #10]
 8005b54:	2300      	movs	r3, #0
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 fb7f 	bl	8006260 <I2C_TransferConfig>
 8005b62:	e00f      	b.n	8005b84 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	8979      	ldrh	r1, [r7, #10]
 8005b76:	2300      	movs	r3, #0
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 fb6e 	bl	8006260 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d19e      	bne.n	8005acc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	6a39      	ldr	r1, [r7, #32]
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f9c1 	bl	8005f1a <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e01a      	b.n	8005bd8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6859      	ldr	r1, [r3, #4]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <HAL_I2C_Master_Transmit+0x1e4>)
 8005bb6:	400b      	ands	r3, r1
 8005bb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e000      	b.n	8005bd8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005bd6:	2302      	movs	r3, #2
  }
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	80002000 	.word	0x80002000
 8005be4:	fe00e800 	.word	0xfe00e800

08005be8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af02      	add	r7, sp, #8
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	607a      	str	r2, [r7, #4]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	817b      	strh	r3, [r7, #10]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	f040 80db 	bne.w	8005dc0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_I2C_Master_Receive+0x30>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e0d4      	b.n	8005dc2 <HAL_I2C_Master_Receive+0x1da>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c20:	f7fc fb56 	bl	80022d0 <HAL_GetTick>
 8005c24:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	2319      	movs	r3, #25
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 f8f1 	bl	8005e1a <I2C_WaitOnFlagUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e0bf      	b.n	8005dc2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2222      	movs	r2, #34	; 0x22
 8005c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2210      	movs	r2, #16
 8005c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	893a      	ldrh	r2, [r7, #8]
 8005c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2bff      	cmp	r3, #255	; 0xff
 8005c72:	d90e      	bls.n	8005c92 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	22ff      	movs	r2, #255	; 0xff
 8005c78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	8979      	ldrh	r1, [r7, #10]
 8005c82:	4b52      	ldr	r3, [pc, #328]	; (8005dcc <HAL_I2C_Master_Receive+0x1e4>)
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 fae8 	bl	8006260 <I2C_TransferConfig>
 8005c90:	e06d      	b.n	8005d6e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	8979      	ldrh	r1, [r7, #10]
 8005ca4:	4b49      	ldr	r3, [pc, #292]	; (8005dcc <HAL_I2C_Master_Receive+0x1e4>)
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 fad7 	bl	8006260 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005cb2:	e05c      	b.n	8005d6e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	6a39      	ldr	r1, [r7, #32]
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 f96b 	bl	8005f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e07c      	b.n	8005dc2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d034      	beq.n	8005d6e <HAL_I2C_Master_Receive+0x186>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d130      	bne.n	8005d6e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	2200      	movs	r2, #0
 8005d14:	2180      	movs	r1, #128	; 0x80
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 f87f 	bl	8005e1a <I2C_WaitOnFlagUntilTimeout>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e04d      	b.n	8005dc2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	2bff      	cmp	r3, #255	; 0xff
 8005d2e:	d90e      	bls.n	8005d4e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	22ff      	movs	r2, #255	; 0xff
 8005d34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	8979      	ldrh	r1, [r7, #10]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fa8a 	bl	8006260 <I2C_TransferConfig>
 8005d4c:	e00f      	b.n	8005d6e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	8979      	ldrh	r1, [r7, #10]
 8005d60:	2300      	movs	r3, #0
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 fa79 	bl	8006260 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d19d      	bne.n	8005cb4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	6a39      	ldr	r1, [r7, #32]
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f8cc 	bl	8005f1a <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e01a      	b.n	8005dc2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2220      	movs	r2, #32
 8005d92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6859      	ldr	r1, [r3, #4]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4b0c      	ldr	r3, [pc, #48]	; (8005dd0 <HAL_I2C_Master_Receive+0x1e8>)
 8005da0:	400b      	ands	r3, r1
 8005da2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	e000      	b.n	8005dc2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005dc0:	2302      	movs	r3, #2
  }
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	80002400 	.word	0x80002400
 8005dd0:	fe00e800 	.word	0xfe00e800

08005dd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d103      	bne.n	8005df2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2200      	movs	r2, #0
 8005df0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d007      	beq.n	8005e10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	619a      	str	r2, [r3, #24]
  }
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bc80      	pop	{r7}
 8005e18:	4770      	bx	lr

08005e1a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b084      	sub	sp, #16
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	603b      	str	r3, [r7, #0]
 8005e26:	4613      	mov	r3, r2
 8005e28:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e2a:	e022      	b.n	8005e72 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e32:	d01e      	beq.n	8005e72 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e34:	f7fc fa4c 	bl	80022d0 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d302      	bcc.n	8005e4a <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d113      	bne.n	8005e72 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4e:	f043 0220 	orr.w	r2, r3, #32
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e00f      	b.n	8005e92 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	699a      	ldr	r2, [r3, #24]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	bf0c      	ite	eq
 8005e82:	2301      	moveq	r3, #1
 8005e84:	2300      	movne	r3, #0
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d0cd      	beq.n	8005e2c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ea6:	e02c      	b.n	8005f02 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f8eb 	bl	8006088 <I2C_IsErrorOccurred>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e02a      	b.n	8005f12 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec2:	d01e      	beq.n	8005f02 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec4:	f7fc fa04 	bl	80022d0 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d302      	bcc.n	8005eda <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d113      	bne.n	8005f02 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ede:	f043 0220 	orr.w	r2, r3, #32
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e007      	b.n	8005f12 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d1cb      	bne.n	8005ea8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	60b9      	str	r1, [r7, #8]
 8005f24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f26:	e028      	b.n	8005f7a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 f8ab 	bl	8006088 <I2C_IsErrorOccurred>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e026      	b.n	8005f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3c:	f7fc f9c8 	bl	80022d0 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d302      	bcc.n	8005f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d113      	bne.n	8005f7a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f56:	f043 0220 	orr.w	r2, r3, #32
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e007      	b.n	8005f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d1cf      	bne.n	8005f28 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fa0:	e064      	b.n	800606c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 f86e 	bl	8006088 <I2C_IsErrorOccurred>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e062      	b.n	800607c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	f003 0320 	and.w	r3, r3, #32
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d138      	bne.n	8006036 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d105      	bne.n	8005fde <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e04e      	b.n	800607c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f003 0310 	and.w	r3, r3, #16
 8005fe8:	2b10      	cmp	r3, #16
 8005fea:	d107      	bne.n	8005ffc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2210      	movs	r2, #16
 8005ff2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2204      	movs	r2, #4
 8005ff8:	645a      	str	r2, [r3, #68]	; 0x44
 8005ffa:	e002      	b.n	8006002 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2220      	movs	r2, #32
 8006008:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6859      	ldr	r1, [r3, #4]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	4b1b      	ldr	r3, [pc, #108]	; (8006084 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006016:	400b      	ands	r3, r1
 8006018:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2220      	movs	r2, #32
 800601e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e022      	b.n	800607c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006036:	f7fc f94b 	bl	80022d0 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	429a      	cmp	r2, r3
 8006044:	d302      	bcc.n	800604c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10f      	bne.n	800606c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006050:	f043 0220 	orr.w	r2, r3, #32
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e007      	b.n	800607c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b04      	cmp	r3, #4
 8006078:	d193      	bne.n	8005fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	fe00e800 	.word	0xfe00e800

08006088 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08a      	sub	sp, #40	; 0x28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006094:	2300      	movs	r3, #0
 8006096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80060a2:	2300      	movs	r3, #0
 80060a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d075      	beq.n	80061a0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2210      	movs	r2, #16
 80060ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060bc:	e056      	b.n	800616c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c4:	d052      	beq.n	800616c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80060c6:	f7fc f903 	bl	80022d0 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d302      	bcc.n	80060dc <I2C_IsErrorOccurred+0x54>
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d147      	bne.n	800616c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060fe:	d12e      	bne.n	800615e <I2C_IsErrorOccurred+0xd6>
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006106:	d02a      	beq.n	800615e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006108:	7cfb      	ldrb	r3, [r7, #19]
 800610a:	2b20      	cmp	r3, #32
 800610c:	d027      	beq.n	800615e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800611c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800611e:	f7fc f8d7 	bl	80022d0 <HAL_GetTick>
 8006122:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006124:	e01b      	b.n	800615e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006126:	f7fc f8d3 	bl	80022d0 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	2b19      	cmp	r3, #25
 8006132:	d914      	bls.n	800615e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006138:	f043 0220 	orr.w	r2, r3, #32
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2220      	movs	r2, #32
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	f003 0320 	and.w	r3, r3, #32
 8006168:	2b20      	cmp	r3, #32
 800616a:	d1dc      	bne.n	8006126 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b20      	cmp	r3, #32
 8006178:	d003      	beq.n	8006182 <I2C_IsErrorOccurred+0xfa>
 800617a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800617e:	2b00      	cmp	r3, #0
 8006180:	d09d      	beq.n	80060be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006186:	2b00      	cmp	r3, #0
 8006188:	d103      	bne.n	8006192 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2220      	movs	r2, #32
 8006190:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	f043 0304 	orr.w	r3, r3, #4
 8006198:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00b      	beq.n	80061ca <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	f043 0301 	orr.w	r3, r3, #1
 80061b8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00b      	beq.n	80061ec <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	f043 0308 	orr.w	r3, r3, #8
 80061da:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00b      	beq.n	800620e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	f043 0302 	orr.w	r3, r3, #2
 80061fc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006206:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800620e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006212:	2b00      	cmp	r3, #0
 8006214:	d01c      	beq.n	8006250 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f7ff fddc 	bl	8005dd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6859      	ldr	r1, [r3, #4]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	4b0d      	ldr	r3, [pc, #52]	; (800625c <I2C_IsErrorOccurred+0x1d4>)
 8006228:	400b      	ands	r3, r1
 800622a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	431a      	orrs	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006254:	4618      	mov	r0, r3
 8006256:	3728      	adds	r7, #40	; 0x28
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	fe00e800 	.word	0xfe00e800

08006260 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	607b      	str	r3, [r7, #4]
 800626a:	460b      	mov	r3, r1
 800626c:	817b      	strh	r3, [r7, #10]
 800626e:	4613      	mov	r3, r2
 8006270:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006272:	897b      	ldrh	r3, [r7, #10]
 8006274:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006278:	7a7b      	ldrb	r3, [r7, #9]
 800627a:	041b      	lsls	r3, r3, #16
 800627c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006280:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	4313      	orrs	r3, r2
 800628a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800628e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	0d5b      	lsrs	r3, r3, #21
 800629a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800629e:	4b07      	ldr	r3, [pc, #28]	; (80062bc <I2C_TransferConfig+0x5c>)
 80062a0:	430b      	orrs	r3, r1
 80062a2:	43db      	mvns	r3, r3
 80062a4:	ea02 0103 	and.w	r1, r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bc80      	pop	{r7}
 80062ba:	4770      	bx	lr
 80062bc:	03ff63ff 	.word	0x03ff63ff

080062c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	d138      	bne.n	8006348 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e032      	b.n	800634a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2224      	movs	r2, #36	; 0x24
 80062f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0201 	bic.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006312:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6819      	ldr	r1, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0201 	orr.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	e000      	b.n	800634a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006348:	2302      	movs	r3, #2
  }
}
 800634a:	4618      	mov	r0, r3
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr

08006354 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b20      	cmp	r3, #32
 8006368:	d139      	bne.n	80063de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006374:	2302      	movs	r3, #2
 8006376:	e033      	b.n	80063e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2224      	movs	r2, #36	; 0x24
 8006384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0201 	bic.w	r2, r2, #1
 8006396:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	021b      	lsls	r3, r3, #8
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0201 	orr.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	e000      	b.n	80063e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80063de:	2302      	movs	r3, #2
  }
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bc80      	pop	{r7}
 80063e8:	4770      	bx	lr
	...

080063ec <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063f0:	4b04      	ldr	r3, [pc, #16]	; (8006404 <HAL_PWR_EnableBkUpAccess+0x18>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a03      	ldr	r2, [pc, #12]	; (8006404 <HAL_PWR_EnableBkUpAccess+0x18>)
 80063f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063fa:	6013      	str	r3, [r2, #0]
}
 80063fc:	bf00      	nop
 80063fe:	46bd      	mov	sp, r7
 8006400:	bc80      	pop	{r7}
 8006402:	4770      	bx	lr
 8006404:	58000400 	.word	0x58000400

08006408 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10c      	bne.n	8006434 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800641a:	4b13      	ldr	r3, [pc, #76]	; (8006468 <HAL_PWR_EnterSLEEPMode+0x60>)
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006426:	d10d      	bne.n	8006444 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006428:	f000 f83c 	bl	80064a4 <HAL_PWREx_DisableLowPowerRunMode>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d008      	beq.n	8006444 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8006432:	e015      	b.n	8006460 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8006434:	4b0c      	ldr	r3, [pc, #48]	; (8006468 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8006440:	f000 f822 	bl	8006488 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006444:	4b09      	ldr	r3, [pc, #36]	; (800646c <HAL_PWR_EnterSLEEPMode+0x64>)
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	4a08      	ldr	r2, [pc, #32]	; (800646c <HAL_PWR_EnterSLEEPMode+0x64>)
 800644a:	f023 0304 	bic.w	r3, r3, #4
 800644e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006450:	78fb      	ldrb	r3, [r7, #3]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d101      	bne.n	800645a <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006456:	bf30      	wfi
 8006458:	e002      	b.n	8006460 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800645a:	bf40      	sev
    __WFE();
 800645c:	bf20      	wfe
    __WFE();
 800645e:	bf20      	wfe
  }
}
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	58000400 	.word	0x58000400
 800646c:	e000ed00 	.word	0xe000ed00

08006470 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006474:	4b03      	ldr	r3, [pc, #12]	; (8006484 <HAL_PWREx_GetVoltageRange+0x14>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800647c:	4618      	mov	r0, r3
 800647e:	46bd      	mov	sp, r7
 8006480:	bc80      	pop	{r7}
 8006482:	4770      	bx	lr
 8006484:	58000400 	.word	0x58000400

08006488 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006488:	b480      	push	{r7}
 800648a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800648c:	4b04      	ldr	r3, [pc, #16]	; (80064a0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a03      	ldr	r2, [pc, #12]	; (80064a0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006496:	6013      	str	r3, [r2, #0]
}
 8006498:	bf00      	nop
 800649a:	46bd      	mov	sp, r7
 800649c:	bc80      	pop	{r7}
 800649e:	4770      	bx	lr
 80064a0:	58000400 	.word	0x58000400

080064a4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80064aa:	4b16      	ldr	r3, [pc, #88]	; (8006504 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a15      	ldr	r2, [pc, #84]	; (8006504 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80064b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064b4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80064b6:	4b14      	ldr	r3, [pc, #80]	; (8006508 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2232      	movs	r2, #50	; 0x32
 80064bc:	fb02 f303 	mul.w	r3, r2, r3
 80064c0:	4a12      	ldr	r2, [pc, #72]	; (800650c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80064c2:	fba2 2303 	umull	r2, r3, r2, r3
 80064c6:	0c9b      	lsrs	r3, r3, #18
 80064c8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80064ca:	e002      	b.n	80064d2 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3b01      	subs	r3, #1
 80064d0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80064d2:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064de:	d102      	bne.n	80064e6 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1f2      	bne.n	80064cc <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80064e6:	4b07      	ldr	r3, [pc, #28]	; (8006504 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f2:	d101      	bne.n	80064f8 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e000      	b.n	80064fa <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	bc80      	pop	{r7}
 8006502:	4770      	bx	lr
 8006504:	58000400 	.word	0x58000400
 8006508:	20000000 	.word	0x20000000
 800650c:	431bde83 	.word	0x431bde83

08006510 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800651a:	4b10      	ldr	r3, [pc, #64]	; (800655c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f023 0307 	bic.w	r3, r3, #7
 8006522:	4a0e      	ldr	r2, [pc, #56]	; (800655c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006524:	f043 0302 	orr.w	r3, r3, #2
 8006528:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800652a:	4b0d      	ldr	r3, [pc, #52]	; (8006560 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	4a0c      	ldr	r2, [pc, #48]	; (8006560 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006530:	f043 0304 	orr.w	r3, r3, #4
 8006534:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8006536:	79fb      	ldrb	r3, [r7, #7]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800653c:	bf30      	wfi
 800653e:	e002      	b.n	8006546 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006540:	bf40      	sev
    __WFE();
 8006542:	bf20      	wfe
    __WFE();
 8006544:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006546:	4b06      	ldr	r3, [pc, #24]	; (8006560 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	4a05      	ldr	r2, [pc, #20]	; (8006560 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800654c:	f023 0304 	bic.w	r3, r3, #4
 8006550:	6113      	str	r3, [r2, #16]
}
 8006552:	bf00      	nop
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	bc80      	pop	{r7}
 800655a:	4770      	bx	lr
 800655c:	58000400 	.word	0x58000400
 8006560:	e000ed00 	.word	0xe000ed00

08006564 <LL_PWR_IsEnabledBkUpAccess>:
{
 8006564:	b480      	push	{r7}
 8006566:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006568:	4b06      	ldr	r3, [pc, #24]	; (8006584 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006574:	d101      	bne.n	800657a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	46bd      	mov	sp, r7
 8006580:	bc80      	pop	{r7}
 8006582:	4770      	bx	lr
 8006584:	58000400 	.word	0x58000400

08006588 <LL_RCC_HSE_EnableTcxo>:
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800658c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006596:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800659a:	6013      	str	r3, [r2, #0]
}
 800659c:	bf00      	nop
 800659e:	46bd      	mov	sp, r7
 80065a0:	bc80      	pop	{r7}
 80065a2:	4770      	bx	lr

080065a4 <LL_RCC_HSE_DisableTcxo>:
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80065a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065b6:	6013      	str	r3, [r2, #0]
}
 80065b8:	bf00      	nop
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bc80      	pop	{r7}
 80065be:	4770      	bx	lr

080065c0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80065c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065d2:	d101      	bne.n	80065d8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80065d4:	2301      	movs	r3, #1
 80065d6:	e000      	b.n	80065da <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	46bd      	mov	sp, r7
 80065de:	bc80      	pop	{r7}
 80065e0:	4770      	bx	lr

080065e2 <LL_RCC_HSE_Enable>:
{
 80065e2:	b480      	push	{r7}
 80065e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80065e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065f4:	6013      	str	r3, [r2, #0]
}
 80065f6:	bf00      	nop
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bc80      	pop	{r7}
 80065fc:	4770      	bx	lr

080065fe <LL_RCC_HSE_Disable>:
{
 80065fe:	b480      	push	{r7}
 8006600:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800660c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006610:	6013      	str	r3, [r2, #0]
}
 8006612:	bf00      	nop
 8006614:	46bd      	mov	sp, r7
 8006616:	bc80      	pop	{r7}
 8006618:	4770      	bx	lr

0800661a <LL_RCC_HSE_IsReady>:
{
 800661a:	b480      	push	{r7}
 800661c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800661e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800662c:	d101      	bne.n	8006632 <LL_RCC_HSE_IsReady+0x18>
 800662e:	2301      	movs	r3, #1
 8006630:	e000      	b.n	8006634 <LL_RCC_HSE_IsReady+0x1a>
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr

0800663c <LL_RCC_HSI_Enable>:
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800664a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800664e:	6013      	str	r3, [r2, #0]
}
 8006650:	bf00      	nop
 8006652:	46bd      	mov	sp, r7
 8006654:	bc80      	pop	{r7}
 8006656:	4770      	bx	lr

08006658 <LL_RCC_HSI_Disable>:
{
 8006658:	b480      	push	{r7}
 800665a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800665c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006666:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800666a:	6013      	str	r3, [r2, #0]
}
 800666c:	bf00      	nop
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr

08006674 <LL_RCC_HSI_IsReady>:
{
 8006674:	b480      	push	{r7}
 8006676:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006686:	d101      	bne.n	800668c <LL_RCC_HSI_IsReady+0x18>
 8006688:	2301      	movs	r3, #1
 800668a:	e000      	b.n	800668e <LL_RCC_HSI_IsReady+0x1a>
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	46bd      	mov	sp, r7
 8006692:	bc80      	pop	{r7}
 8006694:	4770      	bx	lr

08006696 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800669e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	061b      	lsls	r3, r3, #24
 80066ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066b0:	4313      	orrs	r3, r2
 80066b2:	604b      	str	r3, [r1, #4]
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bc80      	pop	{r7}
 80066bc:	4770      	bx	lr

080066be <LL_RCC_LSE_IsReady>:
{
 80066be:	b480      	push	{r7}
 80066c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80066c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d101      	bne.n	80066d6 <LL_RCC_LSE_IsReady+0x18>
 80066d2:	2301      	movs	r3, #1
 80066d4:	e000      	b.n	80066d8 <LL_RCC_LSE_IsReady+0x1a>
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	46bd      	mov	sp, r7
 80066dc:	bc80      	pop	{r7}
 80066de:	4770      	bx	lr

080066e0 <LL_RCC_LSI_Enable>:
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80066e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066f0:	f043 0301 	orr.w	r3, r3, #1
 80066f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80066f8:	bf00      	nop
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bc80      	pop	{r7}
 80066fe:	4770      	bx	lr

08006700 <LL_RCC_LSI_Disable>:
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800670c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006710:	f023 0301 	bic.w	r3, r3, #1
 8006714:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006718:	bf00      	nop
 800671a:	46bd      	mov	sp, r7
 800671c:	bc80      	pop	{r7}
 800671e:	4770      	bx	lr

08006720 <LL_RCC_LSI_IsReady>:
{
 8006720:	b480      	push	{r7}
 8006722:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b02      	cmp	r3, #2
 8006732:	d101      	bne.n	8006738 <LL_RCC_LSI_IsReady+0x18>
 8006734:	2301      	movs	r3, #1
 8006736:	e000      	b.n	800673a <LL_RCC_LSI_IsReady+0x1a>
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	46bd      	mov	sp, r7
 800673e:	bc80      	pop	{r7}
 8006740:	4770      	bx	lr

08006742 <LL_RCC_MSI_Enable>:
{
 8006742:	b480      	push	{r7}
 8006744:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006750:	f043 0301 	orr.w	r3, r3, #1
 8006754:	6013      	str	r3, [r2, #0]
}
 8006756:	bf00      	nop
 8006758:	46bd      	mov	sp, r7
 800675a:	bc80      	pop	{r7}
 800675c:	4770      	bx	lr

0800675e <LL_RCC_MSI_Disable>:
{
 800675e:	b480      	push	{r7}
 8006760:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800676c:	f023 0301 	bic.w	r3, r3, #1
 8006770:	6013      	str	r3, [r2, #0]
}
 8006772:	bf00      	nop
 8006774:	46bd      	mov	sp, r7
 8006776:	bc80      	pop	{r7}
 8006778:	4770      	bx	lr

0800677a <LL_RCC_MSI_IsReady>:
{
 800677a:	b480      	push	{r7}
 800677c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800677e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b02      	cmp	r3, #2
 800678a:	d101      	bne.n	8006790 <LL_RCC_MSI_IsReady+0x16>
 800678c:	2301      	movs	r3, #1
 800678e:	e000      	b.n	8006792 <LL_RCC_MSI_IsReady+0x18>
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	46bd      	mov	sp, r7
 8006796:	bc80      	pop	{r7}
 8006798:	4770      	bx	lr

0800679a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800679a:	b480      	push	{r7}
 800679c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800679e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d101      	bne.n	80067b0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80067ac:	2301      	movs	r3, #1
 80067ae:	e000      	b.n	80067b2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr

080067ba <LL_RCC_MSI_GetRange>:
{
 80067ba:	b480      	push	{r7}
 80067bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80067be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr

080067d0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80067d0:	b480      	push	{r7}
 80067d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80067d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr

080067e8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80067f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	021b      	lsls	r3, r3, #8
 80067fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006802:	4313      	orrs	r3, r2
 8006804:	604b      	str	r3, [r1, #4]
}
 8006806:	bf00      	nop
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	bc80      	pop	{r7}
 800680e:	4770      	bx	lr

08006810 <LL_RCC_SetSysClkSource>:
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f023 0203 	bic.w	r2, r3, #3
 8006822:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4313      	orrs	r3, r2
 800682a:	608b      	str	r3, [r1, #8]
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	4770      	bx	lr

08006836 <LL_RCC_GetSysClkSource>:
{
 8006836:	b480      	push	{r7}
 8006838:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800683a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 030c 	and.w	r3, r3, #12
}
 8006844:	4618      	mov	r0, r3
 8006846:	46bd      	mov	sp, r7
 8006848:	bc80      	pop	{r7}
 800684a:	4770      	bx	lr

0800684c <LL_RCC_SetAHBPrescaler>:
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800685e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4313      	orrs	r3, r2
 8006866:	608b      	str	r3, [r1, #8]
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	bc80      	pop	{r7}
 8006870:	4770      	bx	lr

08006872 <LL_RCC_SetAHB3Prescaler>:
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800687a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800687e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006882:	f023 020f 	bic.w	r2, r3, #15
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	091b      	lsrs	r3, r3, #4
 800688a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800688e:	4313      	orrs	r3, r2
 8006890:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr

0800689e <LL_RCC_SetAPB1Prescaler>:
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80068a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	608b      	str	r3, [r1, #8]
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	bc80      	pop	{r7}
 80068c2:	4770      	bx	lr

080068c4 <LL_RCC_SetAPB2Prescaler>:
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80068cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80068d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4313      	orrs	r3, r2
 80068de:	608b      	str	r3, [r1, #8]
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bc80      	pop	{r7}
 80068e8:	4770      	bx	lr

080068ea <LL_RCC_GetAHBPrescaler>:
{
 80068ea:	b480      	push	{r7}
 80068ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80068ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bc80      	pop	{r7}
 80068fe:	4770      	bx	lr

08006900 <LL_RCC_GetAHB3Prescaler>:
{
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006908:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006912:	4618      	mov	r0, r3
 8006914:	46bd      	mov	sp, r7
 8006916:	bc80      	pop	{r7}
 8006918:	4770      	bx	lr

0800691a <LL_RCC_GetAPB1Prescaler>:
{
 800691a:	b480      	push	{r7}
 800691c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800691e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006928:	4618      	mov	r0, r3
 800692a:	46bd      	mov	sp, r7
 800692c:	bc80      	pop	{r7}
 800692e:	4770      	bx	lr

08006930 <LL_RCC_GetAPB2Prescaler>:
{
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800693e:	4618      	mov	r0, r3
 8006940:	46bd      	mov	sp, r7
 8006942:	bc80      	pop	{r7}
 8006944:	4770      	bx	lr

08006946 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006946:	b480      	push	{r7}
 8006948:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800694a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006954:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006958:	6013      	str	r3, [r2, #0]
}
 800695a:	bf00      	nop
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr

08006962 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006962:	b480      	push	{r7}
 8006964:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006970:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006974:	6013      	str	r3, [r2, #0]
}
 8006976:	bf00      	nop
 8006978:	46bd      	mov	sp, r7
 800697a:	bc80      	pop	{r7}
 800697c:	4770      	bx	lr

0800697e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800697e:	b480      	push	{r7}
 8006980:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800698c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006990:	d101      	bne.n	8006996 <LL_RCC_PLL_IsReady+0x18>
 8006992:	2301      	movs	r3, #1
 8006994:	e000      	b.n	8006998 <LL_RCC_PLL_IsReady+0x1a>
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr

080069a0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80069a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	0a1b      	lsrs	r3, r3, #8
 80069ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr

080069b8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80069bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bc80      	pop	{r7}
 80069cc:	4770      	bx	lr

080069ce <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80069ce:	b480      	push	{r7}
 80069d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80069d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80069dc:	4618      	mov	r0, r3
 80069de:	46bd      	mov	sp, r7
 80069e0:	bc80      	pop	{r7}
 80069e2:	4770      	bx	lr

080069e4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80069e4:	b480      	push	{r7}
 80069e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80069e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f003 0303 	and.w	r3, r3, #3
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bc80      	pop	{r7}
 80069f8:	4770      	bx	lr

080069fa <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80069fa:	b480      	push	{r7}
 80069fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80069fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a0c:	d101      	bne.n	8006a12 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e000      	b.n	8006a14 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bc80      	pop	{r7}
 8006a1a:	4770      	bx	lr

08006a1c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a24:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a30:	d101      	bne.n	8006a36 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e000      	b.n	8006a38 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bc80      	pop	{r7}
 8006a3e:	4770      	bx	lr

08006a40 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006a40:	b480      	push	{r7}
 8006a42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a52:	d101      	bne.n	8006a58 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006a54:	2301      	movs	r3, #1
 8006a56:	e000      	b.n	8006a5a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bc80      	pop	{r7}
 8006a60:	4770      	bx	lr

08006a62 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006a62:	b480      	push	{r7}
 8006a64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a74:	d101      	bne.n	8006a7a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr

08006a84 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e38b      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a96:	f7ff fece 	bl	8006836 <LL_RCC_GetSysClkSource>
 8006a9a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a9c:	f7ff ffa2 	bl	80069e4 <LL_RCC_PLL_GetMainSource>
 8006aa0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0320 	and.w	r3, r3, #32
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 80c9 	beq.w	8006c42 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x3e>
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	2b0c      	cmp	r3, #12
 8006aba:	d17b      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d178      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006ac2:	f7ff fe5a 	bl	800677a <LL_RCC_MSI_IsReady>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x54>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e36a      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0308 	and.w	r3, r3, #8
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <HAL_RCC_OscConfig+0x72>
 8006aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006af4:	e006      	b.n	8006b04 <HAL_RCC_OscConfig+0x80>
 8006af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006afe:	091b      	lsrs	r3, r3, #4
 8006b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d222      	bcs.n	8006b4e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fd51 	bl	80075b4 <RCC_SetFlashLatencyFromMSIRange>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e348      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b26:	f043 0308 	orr.w	r3, r3, #8
 8006b2a:	6013      	str	r3, [r2, #0]
 8006b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff fe4e 	bl	80067e8 <LL_RCC_MSI_SetCalibTrimming>
 8006b4c:	e021      	b.n	8006b92 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b58:	f043 0308 	orr.w	r3, r3, #8
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b70:	4313      	orrs	r3, r2
 8006b72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff fe35 	bl	80067e8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 fd16 	bl	80075b4 <RCC_SetFlashLatencyFromMSIRange>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e30d      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006b92:	f000 fcd7 	bl	8007544 <HAL_RCC_GetHCLKFreq>
 8006b96:	4603      	mov	r3, r0
 8006b98:	4aa1      	ldr	r2, [pc, #644]	; (8006e20 <HAL_RCC_OscConfig+0x39c>)
 8006b9a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006b9c:	4ba1      	ldr	r3, [pc, #644]	; (8006e24 <HAL_RCC_OscConfig+0x3a0>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7fb fb8b 	bl	80022bc <HAL_InitTick>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8006baa:	7cfb      	ldrb	r3, [r7, #19]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d047      	beq.n	8006c40 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8006bb0:	7cfb      	ldrb	r3, [r7, #19]
 8006bb2:	e2fc      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d02c      	beq.n	8006c16 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006bbc:	f7ff fdc1 	bl	8006742 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006bc0:	f7fb fb86 	bl	80022d0 <HAL_GetTick>
 8006bc4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006bc8:	f7fb fb82 	bl	80022d0 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e2e9      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006bda:	f7ff fdce 	bl	800677a <LL_RCC_MSI_IsReady>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0f1      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bee:	f043 0308 	orr.w	r3, r3, #8
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c06:	4313      	orrs	r3, r2
 8006c08:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff fdea 	bl	80067e8 <LL_RCC_MSI_SetCalibTrimming>
 8006c14:	e015      	b.n	8006c42 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006c16:	f7ff fda2 	bl	800675e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c1a:	f7fb fb59 	bl	80022d0 <HAL_GetTick>
 8006c1e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006c20:	e008      	b.n	8006c34 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c22:	f7fb fb55 	bl	80022d0 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d901      	bls.n	8006c34 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e2bc      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006c34:	f7ff fda1 	bl	800677a <LL_RCC_MSI_IsReady>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1f1      	bne.n	8006c22 <HAL_RCC_OscConfig+0x19e>
 8006c3e:	e000      	b.n	8006c42 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c40:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d05f      	beq.n	8006d0e <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	2b08      	cmp	r3, #8
 8006c52:	d005      	beq.n	8006c60 <HAL_RCC_OscConfig+0x1dc>
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	2b0c      	cmp	r3, #12
 8006c58:	d10d      	bne.n	8006c76 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d10a      	bne.n	8006c76 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c60:	f7ff fcdb 	bl	800661a <LL_RCC_HSE_IsReady>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d050      	beq.n	8006d0c <HAL_RCC_OscConfig+0x288>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d14c      	bne.n	8006d0c <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e29b      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8006c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c94:	d102      	bne.n	8006c9c <HAL_RCC_OscConfig+0x218>
 8006c96:	f7ff fca4 	bl	80065e2 <LL_RCC_HSE_Enable>
 8006c9a:	e00d      	b.n	8006cb8 <HAL_RCC_OscConfig+0x234>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8006ca4:	d104      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x22c>
 8006ca6:	f7ff fc6f 	bl	8006588 <LL_RCC_HSE_EnableTcxo>
 8006caa:	f7ff fc9a 	bl	80065e2 <LL_RCC_HSE_Enable>
 8006cae:	e003      	b.n	8006cb8 <HAL_RCC_OscConfig+0x234>
 8006cb0:	f7ff fca5 	bl	80065fe <LL_RCC_HSE_Disable>
 8006cb4:	f7ff fc76 	bl	80065a4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d012      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc0:	f7fb fb06 	bl	80022d0 <HAL_GetTick>
 8006cc4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006cc6:	e008      	b.n	8006cda <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cc8:	f7fb fb02 	bl	80022d0 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b64      	cmp	r3, #100	; 0x64
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e269      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006cda:	f7ff fc9e 	bl	800661a <LL_RCC_HSE_IsReady>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d0f1      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x244>
 8006ce4:	e013      	b.n	8006d0e <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce6:	f7fb faf3 	bl	80022d0 <HAL_GetTick>
 8006cea:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006cec:	e008      	b.n	8006d00 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cee:	f7fb faef 	bl	80022d0 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	2b64      	cmp	r3, #100	; 0x64
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e256      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006d00:	f7ff fc8b 	bl	800661a <LL_RCC_HSE_IsReady>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1f1      	bne.n	8006cee <HAL_RCC_OscConfig+0x26a>
 8006d0a:	e000      	b.n	8006d0e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d0c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d04b      	beq.n	8006db2 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	2b04      	cmp	r3, #4
 8006d1e:	d005      	beq.n	8006d2c <HAL_RCC_OscConfig+0x2a8>
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	2b0c      	cmp	r3, #12
 8006d24:	d113      	bne.n	8006d4e <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d110      	bne.n	8006d4e <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d2c:	f7ff fca2 	bl	8006674 <LL_RCC_HSI_IsReady>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d005      	beq.n	8006d42 <HAL_RCC_OscConfig+0x2be>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e235      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7ff fca5 	bl	8006696 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d4c:	e031      	b.n	8006db2 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d019      	beq.n	8006d8a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d56:	f7ff fc71 	bl	800663c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d5a:	f7fb fab9 	bl	80022d0 <HAL_GetTick>
 8006d5e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006d60:	e008      	b.n	8006d74 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d62:	f7fb fab5 	bl	80022d0 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d901      	bls.n	8006d74 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e21c      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006d74:	f7ff fc7e 	bl	8006674 <LL_RCC_HSI_IsReady>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0f1      	beq.n	8006d62 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7ff fc87 	bl	8006696 <LL_RCC_HSI_SetCalibTrimming>
 8006d88:	e013      	b.n	8006db2 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d8a:	f7ff fc65 	bl	8006658 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d8e:	f7fb fa9f 	bl	80022d0 <HAL_GetTick>
 8006d92:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006d94:	e008      	b.n	8006da8 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d96:	f7fb fa9b 	bl	80022d0 <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d901      	bls.n	8006da8 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e202      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006da8:	f7ff fc64 	bl	8006674 <LL_RCC_HSI_IsReady>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1f1      	bne.n	8006d96 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0308 	and.w	r3, r3, #8
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d06f      	beq.n	8006e9e <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d057      	beq.n	8006e76 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8006dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dce:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	69da      	ldr	r2, [r3, #28]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f003 0310 	and.w	r3, r3, #16
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d036      	beq.n	8006e4c <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d006      	beq.n	8006df6 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e1db      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d018      	beq.n	8006e32 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8006e00:	f7ff fc7e 	bl	8006700 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e04:	f7fb fa64 	bl	80022d0 <HAL_GetTick>
 8006e08:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8006e0a:	e00d      	b.n	8006e28 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e0c:	f7fb fa60 	bl	80022d0 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	2b11      	cmp	r3, #17
 8006e18:	d906      	bls.n	8006e28 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e1c7      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
 8006e1e:	bf00      	nop
 8006e20:	20000000 	.word	0x20000000
 8006e24:	20000008 	.word	0x20000008
          while (LL_RCC_LSI_IsReady() != 0U)
 8006e28:	f7ff fc7a 	bl	8006720 <LL_RCC_LSI_IsReady>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1ec      	bne.n	8006e0c <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e3a:	f023 0210 	bic.w	r2, r3, #16
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e46:	4313      	orrs	r3, r2
 8006e48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e4c:	f7ff fc48 	bl	80066e0 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e50:	f7fb fa3e 	bl	80022d0 <HAL_GetTick>
 8006e54:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8006e56:	e008      	b.n	8006e6a <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e58:	f7fb fa3a 	bl	80022d0 <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2b11      	cmp	r3, #17
 8006e64:	d901      	bls.n	8006e6a <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e1a1      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8006e6a:	f7ff fc59 	bl	8006720 <LL_RCC_LSI_IsReady>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d0f1      	beq.n	8006e58 <HAL_RCC_OscConfig+0x3d4>
 8006e74:	e013      	b.n	8006e9e <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e76:	f7ff fc43 	bl	8006700 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e7a:	f7fb fa29 	bl	80022d0 <HAL_GetTick>
 8006e7e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006e80:	e008      	b.n	8006e94 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e82:	f7fb fa25 	bl	80022d0 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	2b11      	cmp	r3, #17
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e18c      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006e94:	f7ff fc44 	bl	8006720 <LL_RCC_LSI_IsReady>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1f1      	bne.n	8006e82 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0304 	and.w	r3, r3, #4
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 80d8 	beq.w	800705c <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006eac:	f7ff fb5a 	bl	8006564 <LL_PWR_IsEnabledBkUpAccess>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d113      	bne.n	8006ede <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006eb6:	f7ff fa99 	bl	80063ec <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006eba:	f7fb fa09 	bl	80022d0 <HAL_GetTick>
 8006ebe:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006ec0:	e008      	b.n	8006ed4 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ec2:	f7fb fa05 	bl	80022d0 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e16c      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006ed4:	f7ff fb46 	bl	8006564 <LL_PWR_IsEnabledBkUpAccess>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d0f1      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d07b      	beq.n	8006fde <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	2b85      	cmp	r3, #133	; 0x85
 8006eec:	d003      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	2b05      	cmp	r3, #5
 8006ef4:	d109      	bne.n	8006f0a <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006efe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f02:	f043 0304 	orr.w	r3, r3, #4
 8006f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f0a:	f7fb f9e1 	bl	80022d0 <HAL_GetTick>
 8006f0e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f1c:	f043 0301 	orr.w	r3, r3, #1
 8006f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006f24:	e00a      	b.n	8006f3c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f26:	f7fb f9d3 	bl	80022d0 <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d901      	bls.n	8006f3c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e138      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006f3c:	f7ff fbbf 	bl	80066be <LL_RCC_LSE_IsReady>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0ef      	beq.n	8006f26 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	2b81      	cmp	r3, #129	; 0x81
 8006f4c:	d003      	beq.n	8006f56 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	2b85      	cmp	r3, #133	; 0x85
 8006f54:	d121      	bne.n	8006f9a <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f56:	f7fb f9bb 	bl	80022d0 <HAL_GetTick>
 8006f5a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006f70:	e00a      	b.n	8006f88 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f72:	f7fb f9ad 	bl	80022d0 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d901      	bls.n	8006f88 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e112      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d0ec      	beq.n	8006f72 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006f98:	e060      	b.n	800705c <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f9a:	f7fb f999 	bl	80022d0 <HAL_GetTick>
 8006f9e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006fb4:	e00a      	b.n	8006fcc <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fb6:	f7fb f98b 	bl	80022d0 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e0f0      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1ec      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x532>
 8006fdc:	e03e      	b.n	800705c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fde:	f7fb f977 	bl	80022d0 <HAL_GetTick>
 8006fe2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006ff8:	e00a      	b.n	8007010 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ffa:	f7fb f969 	bl	80022d0 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	f241 3288 	movw	r2, #5000	; 0x1388
 8007008:	4293      	cmp	r3, r2
 800700a:	d901      	bls.n	8007010 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e0ce      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1ec      	bne.n	8006ffa <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007020:	f7fb f956 	bl	80022d0 <HAL_GetTick>
 8007024:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800702a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800702e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007032:	f023 0301 	bic.w	r3, r3, #1
 8007036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800703a:	e00a      	b.n	8007052 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800703c:	f7fb f948 	bl	80022d0 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	f241 3288 	movw	r2, #5000	; 0x1388
 800704a:	4293      	cmp	r3, r2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e0ad      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007052:	f7ff fb34 	bl	80066be <LL_RCC_LSE_IsReady>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1ef      	bne.n	800703c <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	2b00      	cmp	r3, #0
 8007062:	f000 80a3 	beq.w	80071ac <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	2b0c      	cmp	r3, #12
 800706a:	d076      	beq.n	800715a <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007070:	2b02      	cmp	r3, #2
 8007072:	d14b      	bne.n	800710c <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007074:	f7ff fc75 	bl	8006962 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007078:	f7fb f92a 	bl	80022d0 <HAL_GetTick>
 800707c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800707e:	e008      	b.n	8007092 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007080:	f7fb f926 	bl	80022d0 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	2b0a      	cmp	r3, #10
 800708c:	d901      	bls.n	8007092 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e08d      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007092:	f7ff fc74 	bl	800697e <LL_RCC_PLL_IsReady>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1f1      	bne.n	8007080 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800709c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	4b45      	ldr	r3, [pc, #276]	; (80071b8 <HAL_RCC_OscConfig+0x734>)
 80070a4:	4013      	ands	r3, r2
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80070ae:	4311      	orrs	r1, r2
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070b4:	0212      	lsls	r2, r2, #8
 80070b6:	4311      	orrs	r1, r2
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80070bc:	4311      	orrs	r1, r2
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80070c2:	4311      	orrs	r1, r2
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80070c8:	430a      	orrs	r2, r1
 80070ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070d2:	f7ff fc38 	bl	8006946 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80070d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070e4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e6:	f7fb f8f3 	bl	80022d0 <HAL_GetTick>
 80070ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80070ec:	e008      	b.n	8007100 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ee:	f7fb f8ef 	bl	80022d0 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	2b0a      	cmp	r3, #10
 80070fa:	d901      	bls.n	8007100 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e056      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8007100:	f7ff fc3d 	bl	800697e <LL_RCC_PLL_IsReady>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0f1      	beq.n	80070ee <HAL_RCC_OscConfig+0x66a>
 800710a:	e04f      	b.n	80071ac <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800710c:	f7ff fc29 	bl	8006962 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8007110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800711a:	f023 0303 	bic.w	r3, r3, #3
 800711e:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8007120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800712a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800712e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007132:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007134:	f7fb f8cc 	bl	80022d0 <HAL_GetTick>
 8007138:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800713a:	e008      	b.n	800714e <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800713c:	f7fb f8c8 	bl	80022d0 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b0a      	cmp	r3, #10
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e02f      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800714e:	f7ff fc16 	bl	800697e <LL_RCC_PLL_IsReady>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1f1      	bne.n	800713c <HAL_RCC_OscConfig+0x6b8>
 8007158:	e028      	b.n	80071ac <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	2b01      	cmp	r3, #1
 8007160:	d101      	bne.n	8007166 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e023      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	f003 0203 	and.w	r2, r3, #3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007178:	429a      	cmp	r2, r3
 800717a:	d115      	bne.n	80071a8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007186:	429a      	cmp	r2, r3
 8007188:	d10e      	bne.n	80071a8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	021b      	lsls	r3, r3, #8
 8007196:	429a      	cmp	r2, r3
 8007198:	d106      	bne.n	80071a8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d001      	beq.n	80071ac <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e000      	b.n	80071ae <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3720      	adds	r7, #32
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	11c1808c 	.word	0x11c1808c

080071bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e10f      	b.n	80073f0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071d0:	4b89      	ldr	r3, [pc, #548]	; (80073f8 <HAL_RCC_ClockConfig+0x23c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d91b      	bls.n	8007216 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071de:	4b86      	ldr	r3, [pc, #536]	; (80073f8 <HAL_RCC_ClockConfig+0x23c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f023 0207 	bic.w	r2, r3, #7
 80071e6:	4984      	ldr	r1, [pc, #528]	; (80073f8 <HAL_RCC_ClockConfig+0x23c>)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071ee:	f7fb f86f 	bl	80022d0 <HAL_GetTick>
 80071f2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071f4:	e008      	b.n	8007208 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80071f6:	f7fb f86b 	bl	80022d0 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d901      	bls.n	8007208 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e0f3      	b.n	80073f0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007208:	4b7b      	ldr	r3, [pc, #492]	; (80073f8 <HAL_RCC_ClockConfig+0x23c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d1ef      	bne.n	80071f6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d016      	beq.n	8007250 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	4618      	mov	r0, r3
 8007228:	f7ff fb10 	bl	800684c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800722c:	f7fb f850 	bl	80022d0 <HAL_GetTick>
 8007230:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007232:	e008      	b.n	8007246 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007234:	f7fb f84c 	bl	80022d0 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	2b02      	cmp	r3, #2
 8007240:	d901      	bls.n	8007246 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e0d4      	b.n	80073f0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007246:	f7ff fbd8 	bl	80069fa <LL_RCC_IsActiveFlag_HPRE>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d0f1      	beq.n	8007234 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007258:	2b00      	cmp	r3, #0
 800725a:	d016      	beq.n	800728a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	4618      	mov	r0, r3
 8007262:	f7ff fb06 	bl	8006872 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007266:	f7fb f833 	bl	80022d0 <HAL_GetTick>
 800726a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800726c:	e008      	b.n	8007280 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800726e:	f7fb f82f 	bl	80022d0 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d901      	bls.n	8007280 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e0b7      	b.n	80073f0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007280:	f7ff fbcc 	bl	8006a1c <LL_RCC_IsActiveFlag_SHDHPRE>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0f1      	beq.n	800726e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	2b00      	cmp	r3, #0
 8007294:	d016      	beq.n	80072c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff faff 	bl	800689e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80072a0:	f7fb f816 	bl	80022d0 <HAL_GetTick>
 80072a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80072a6:	e008      	b.n	80072ba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80072a8:	f7fb f812 	bl	80022d0 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d901      	bls.n	80072ba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e09a      	b.n	80073f0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80072ba:	f7ff fbc1 	bl	8006a40 <LL_RCC_IsActiveFlag_PPRE1>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0f1      	beq.n	80072a8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0308 	and.w	r3, r3, #8
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d017      	beq.n	8007300 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	00db      	lsls	r3, r3, #3
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7ff faf4 	bl	80068c4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80072dc:	f7fa fff8 	bl	80022d0 <HAL_GetTick>
 80072e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80072e2:	e008      	b.n	80072f6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80072e4:	f7fa fff4 	bl	80022d0 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e07c      	b.n	80073f0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80072f6:	f7ff fbb4 	bl	8006a62 <LL_RCC_IsActiveFlag_PPRE2>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d0f1      	beq.n	80072e4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0301 	and.w	r3, r3, #1
 8007308:	2b00      	cmp	r3, #0
 800730a:	d043      	beq.n	8007394 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	2b02      	cmp	r3, #2
 8007312:	d106      	bne.n	8007322 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007314:	f7ff f981 	bl	800661a <LL_RCC_HSE_IsReady>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d11e      	bne.n	800735c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e066      	b.n	80073f0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	2b03      	cmp	r3, #3
 8007328:	d106      	bne.n	8007338 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800732a:	f7ff fb28 	bl	800697e <LL_RCC_PLL_IsReady>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d113      	bne.n	800735c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e05b      	b.n	80073f0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d106      	bne.n	800734e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007340:	f7ff fa1b 	bl	800677a <LL_RCC_MSI_IsReady>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d108      	bne.n	800735c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e050      	b.n	80073f0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800734e:	f7ff f991 	bl	8006674 <LL_RCC_HSI_IsReady>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e049      	b.n	80073f0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	4618      	mov	r0, r3
 8007362:	f7ff fa55 	bl	8006810 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007366:	f7fa ffb3 	bl	80022d0 <HAL_GetTick>
 800736a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800736c:	e00a      	b.n	8007384 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800736e:	f7fa ffaf 	bl	80022d0 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	f241 3288 	movw	r2, #5000	; 0x1388
 800737c:	4293      	cmp	r3, r2
 800737e:	d901      	bls.n	8007384 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e035      	b.n	80073f0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007384:	f7ff fa57 	bl	8006836 <LL_RCC_GetSysClkSource>
 8007388:	4602      	mov	r2, r0
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	429a      	cmp	r2, r3
 8007392:	d1ec      	bne.n	800736e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007394:	4b18      	ldr	r3, [pc, #96]	; (80073f8 <HAL_RCC_ClockConfig+0x23c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0307 	and.w	r3, r3, #7
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d21b      	bcs.n	80073da <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073a2:	4b15      	ldr	r3, [pc, #84]	; (80073f8 <HAL_RCC_ClockConfig+0x23c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f023 0207 	bic.w	r2, r3, #7
 80073aa:	4913      	ldr	r1, [pc, #76]	; (80073f8 <HAL_RCC_ClockConfig+0x23c>)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073b2:	f7fa ff8d 	bl	80022d0 <HAL_GetTick>
 80073b6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073b8:	e008      	b.n	80073cc <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80073ba:	f7fa ff89 	bl	80022d0 <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d901      	bls.n	80073cc <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e011      	b.n	80073f0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073cc:	4b0a      	ldr	r3, [pc, #40]	; (80073f8 <HAL_RCC_ClockConfig+0x23c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0307 	and.w	r3, r3, #7
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d1ef      	bne.n	80073ba <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80073da:	f000 f8b3 	bl	8007544 <HAL_RCC_GetHCLKFreq>
 80073de:	4603      	mov	r3, r0
 80073e0:	4a06      	ldr	r2, [pc, #24]	; (80073fc <HAL_RCC_ClockConfig+0x240>)
 80073e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80073e4:	4b06      	ldr	r3, [pc, #24]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fa ff67 	bl	80022bc <HAL_InitTick>
 80073ee:	4603      	mov	r3, r0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	58004000 	.word	0x58004000
 80073fc:	20000000 	.word	0x20000000
 8007400:	20000008 	.word	0x20000008

08007404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007404:	b590      	push	{r4, r7, lr}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007412:	f7ff fa10 	bl	8006836 <LL_RCC_GetSysClkSource>
 8007416:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007418:	f7ff fae4 	bl	80069e4 <LL_RCC_PLL_GetMainSource>
 800741c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d005      	beq.n	8007430 <HAL_RCC_GetSysClockFreq+0x2c>
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2b0c      	cmp	r3, #12
 8007428:	d139      	bne.n	800749e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d136      	bne.n	800749e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007430:	f7ff f9b3 	bl	800679a <LL_RCC_MSI_IsEnabledRangeSelect>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d115      	bne.n	8007466 <HAL_RCC_GetSysClockFreq+0x62>
 800743a:	f7ff f9ae 	bl	800679a <LL_RCC_MSI_IsEnabledRangeSelect>
 800743e:	4603      	mov	r3, r0
 8007440:	2b01      	cmp	r3, #1
 8007442:	d106      	bne.n	8007452 <HAL_RCC_GetSysClockFreq+0x4e>
 8007444:	f7ff f9b9 	bl	80067ba <LL_RCC_MSI_GetRange>
 8007448:	4603      	mov	r3, r0
 800744a:	0a1b      	lsrs	r3, r3, #8
 800744c:	f003 030f 	and.w	r3, r3, #15
 8007450:	e005      	b.n	800745e <HAL_RCC_GetSysClockFreq+0x5a>
 8007452:	f7ff f9bd 	bl	80067d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8007456:	4603      	mov	r3, r0
 8007458:	0a1b      	lsrs	r3, r3, #8
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	4a36      	ldr	r2, [pc, #216]	; (8007538 <HAL_RCC_GetSysClockFreq+0x134>)
 8007460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007464:	e014      	b.n	8007490 <HAL_RCC_GetSysClockFreq+0x8c>
 8007466:	f7ff f998 	bl	800679a <LL_RCC_MSI_IsEnabledRangeSelect>
 800746a:	4603      	mov	r3, r0
 800746c:	2b01      	cmp	r3, #1
 800746e:	d106      	bne.n	800747e <HAL_RCC_GetSysClockFreq+0x7a>
 8007470:	f7ff f9a3 	bl	80067ba <LL_RCC_MSI_GetRange>
 8007474:	4603      	mov	r3, r0
 8007476:	091b      	lsrs	r3, r3, #4
 8007478:	f003 030f 	and.w	r3, r3, #15
 800747c:	e005      	b.n	800748a <HAL_RCC_GetSysClockFreq+0x86>
 800747e:	f7ff f9a7 	bl	80067d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8007482:	4603      	mov	r3, r0
 8007484:	091b      	lsrs	r3, r3, #4
 8007486:	f003 030f 	and.w	r3, r3, #15
 800748a:	4a2b      	ldr	r2, [pc, #172]	; (8007538 <HAL_RCC_GetSysClockFreq+0x134>)
 800748c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007490:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d115      	bne.n	80074c4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800749c:	e012      	b.n	80074c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d102      	bne.n	80074aa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80074a4:	4b25      	ldr	r3, [pc, #148]	; (800753c <HAL_RCC_GetSysClockFreq+0x138>)
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	e00c      	b.n	80074c4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2b08      	cmp	r3, #8
 80074ae:	d109      	bne.n	80074c4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80074b0:	f7ff f886 	bl	80065c0 <LL_RCC_HSE_IsEnabledDiv2>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d102      	bne.n	80074c0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80074ba:	4b20      	ldr	r3, [pc, #128]	; (800753c <HAL_RCC_GetSysClockFreq+0x138>)
 80074bc:	617b      	str	r3, [r7, #20]
 80074be:	e001      	b.n	80074c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80074c0:	4b1f      	ldr	r3, [pc, #124]	; (8007540 <HAL_RCC_GetSysClockFreq+0x13c>)
 80074c2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074c4:	f7ff f9b7 	bl	8006836 <LL_RCC_GetSysClkSource>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b0c      	cmp	r3, #12
 80074cc:	d12f      	bne.n	800752e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80074ce:	f7ff fa89 	bl	80069e4 <LL_RCC_PLL_GetMainSource>
 80074d2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d003      	beq.n	80074e2 <HAL_RCC_GetSysClockFreq+0xde>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d003      	beq.n	80074e8 <HAL_RCC_GetSysClockFreq+0xe4>
 80074e0:	e00d      	b.n	80074fe <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80074e2:	4b16      	ldr	r3, [pc, #88]	; (800753c <HAL_RCC_GetSysClockFreq+0x138>)
 80074e4:	60fb      	str	r3, [r7, #12]
        break;
 80074e6:	e00d      	b.n	8007504 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80074e8:	f7ff f86a 	bl	80065c0 <LL_RCC_HSE_IsEnabledDiv2>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d102      	bne.n	80074f8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80074f2:	4b12      	ldr	r3, [pc, #72]	; (800753c <HAL_RCC_GetSysClockFreq+0x138>)
 80074f4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80074f6:	e005      	b.n	8007504 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80074f8:	4b11      	ldr	r3, [pc, #68]	; (8007540 <HAL_RCC_GetSysClockFreq+0x13c>)
 80074fa:	60fb      	str	r3, [r7, #12]
        break;
 80074fc:	e002      	b.n	8007504 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	60fb      	str	r3, [r7, #12]
        break;
 8007502:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007504:	f7ff fa4c 	bl	80069a0 <LL_RCC_PLL_GetN>
 8007508:	4602      	mov	r2, r0
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	fb03 f402 	mul.w	r4, r3, r2
 8007510:	f7ff fa5d 	bl	80069ce <LL_RCC_PLL_GetDivider>
 8007514:	4603      	mov	r3, r0
 8007516:	091b      	lsrs	r3, r3, #4
 8007518:	3301      	adds	r3, #1
 800751a:	fbb4 f4f3 	udiv	r4, r4, r3
 800751e:	f7ff fa4b 	bl	80069b8 <LL_RCC_PLL_GetR>
 8007522:	4603      	mov	r3, r0
 8007524:	0f5b      	lsrs	r3, r3, #29
 8007526:	3301      	adds	r3, #1
 8007528:	fbb4 f3f3 	udiv	r3, r4, r3
 800752c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800752e:	697b      	ldr	r3, [r7, #20]
}
 8007530:	4618      	mov	r0, r3
 8007532:	371c      	adds	r7, #28
 8007534:	46bd      	mov	sp, r7
 8007536:	bd90      	pop	{r4, r7, pc}
 8007538:	0801ccb0 	.word	0x0801ccb0
 800753c:	00f42400 	.word	0x00f42400
 8007540:	01e84800 	.word	0x01e84800

08007544 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007544:	b598      	push	{r3, r4, r7, lr}
 8007546:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007548:	f7ff ff5c 	bl	8007404 <HAL_RCC_GetSysClockFreq>
 800754c:	4604      	mov	r4, r0
 800754e:	f7ff f9cc 	bl	80068ea <LL_RCC_GetAHBPrescaler>
 8007552:	4603      	mov	r3, r0
 8007554:	091b      	lsrs	r3, r3, #4
 8007556:	f003 030f 	and.w	r3, r3, #15
 800755a:	4a03      	ldr	r2, [pc, #12]	; (8007568 <HAL_RCC_GetHCLKFreq+0x24>)
 800755c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007560:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007564:	4618      	mov	r0, r3
 8007566:	bd98      	pop	{r3, r4, r7, pc}
 8007568:	0801cc50 	.word	0x0801cc50

0800756c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800756c:	b598      	push	{r3, r4, r7, lr}
 800756e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007570:	f7ff ffe8 	bl	8007544 <HAL_RCC_GetHCLKFreq>
 8007574:	4604      	mov	r4, r0
 8007576:	f7ff f9d0 	bl	800691a <LL_RCC_GetAPB1Prescaler>
 800757a:	4603      	mov	r3, r0
 800757c:	0a1b      	lsrs	r3, r3, #8
 800757e:	4a03      	ldr	r2, [pc, #12]	; (800758c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007584:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007588:	4618      	mov	r0, r3
 800758a:	bd98      	pop	{r3, r4, r7, pc}
 800758c:	0801cc90 	.word	0x0801cc90

08007590 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007590:	b598      	push	{r3, r4, r7, lr}
 8007592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007594:	f7ff ffd6 	bl	8007544 <HAL_RCC_GetHCLKFreq>
 8007598:	4604      	mov	r4, r0
 800759a:	f7ff f9c9 	bl	8006930 <LL_RCC_GetAPB2Prescaler>
 800759e:	4603      	mov	r3, r0
 80075a0:	0adb      	lsrs	r3, r3, #11
 80075a2:	4a03      	ldr	r2, [pc, #12]	; (80075b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075a8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	bd98      	pop	{r3, r4, r7, pc}
 80075b0:	0801cc90 	.word	0x0801cc90

080075b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80075b4:	b590      	push	{r4, r7, lr}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	091b      	lsrs	r3, r3, #4
 80075c0:	f003 030f 	and.w	r3, r3, #15
 80075c4:	4a10      	ldr	r2, [pc, #64]	; (8007608 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80075c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ca:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80075cc:	f7ff f998 	bl	8006900 <LL_RCC_GetAHB3Prescaler>
 80075d0:	4603      	mov	r3, r0
 80075d2:	091b      	lsrs	r3, r3, #4
 80075d4:	f003 030f 	and.w	r3, r3, #15
 80075d8:	4a0c      	ldr	r2, [pc, #48]	; (800760c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80075da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	4a09      	ldr	r2, [pc, #36]	; (8007610 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80075ea:	fba2 2303 	umull	r2, r3, r2, r3
 80075ee:	0c9c      	lsrs	r4, r3, #18
 80075f0:	f7fe ff3e 	bl	8006470 <HAL_PWREx_GetVoltageRange>
 80075f4:	4603      	mov	r3, r0
 80075f6:	4619      	mov	r1, r3
 80075f8:	4620      	mov	r0, r4
 80075fa:	f000 f80b 	bl	8007614 <RCC_SetFlashLatency>
 80075fe:	4603      	mov	r3, r0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	bd90      	pop	{r4, r7, pc}
 8007608:	0801ccb0 	.word	0x0801ccb0
 800760c:	0801cc50 	.word	0x0801cc50
 8007610:	431bde83 	.word	0x431bde83

08007614 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08e      	sub	sp, #56	; 0x38
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800761e:	4a3a      	ldr	r2, [pc, #232]	; (8007708 <RCC_SetFlashLatency+0xf4>)
 8007620:	f107 0320 	add.w	r3, r7, #32
 8007624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007628:	6018      	str	r0, [r3, #0]
 800762a:	3304      	adds	r3, #4
 800762c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800762e:	4a37      	ldr	r2, [pc, #220]	; (800770c <RCC_SetFlashLatency+0xf8>)
 8007630:	f107 0318 	add.w	r3, r7, #24
 8007634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007638:	6018      	str	r0, [r3, #0]
 800763a:	3304      	adds	r3, #4
 800763c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800763e:	4a34      	ldr	r2, [pc, #208]	; (8007710 <RCC_SetFlashLatency+0xfc>)
 8007640:	f107 030c 	add.w	r3, r7, #12
 8007644:	ca07      	ldmia	r2, {r0, r1, r2}
 8007646:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800764a:	2300      	movs	r3, #0
 800764c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007654:	d11b      	bne.n	800768e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007656:	2300      	movs	r3, #0
 8007658:	633b      	str	r3, [r7, #48]	; 0x30
 800765a:	e014      	b.n	8007686 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	3338      	adds	r3, #56	; 0x38
 8007662:	443b      	add	r3, r7
 8007664:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007668:	461a      	mov	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4293      	cmp	r3, r2
 800766e:	d807      	bhi.n	8007680 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	3338      	adds	r3, #56	; 0x38
 8007676:	443b      	add	r3, r7
 8007678:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800767c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800767e:	e021      	b.n	80076c4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	3301      	adds	r3, #1
 8007684:	633b      	str	r3, [r7, #48]	; 0x30
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	2b02      	cmp	r3, #2
 800768a:	d9e7      	bls.n	800765c <RCC_SetFlashLatency+0x48>
 800768c:	e01a      	b.n	80076c4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800768e:	2300      	movs	r3, #0
 8007690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007692:	e014      	b.n	80076be <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	3338      	adds	r3, #56	; 0x38
 800769a:	443b      	add	r3, r7
 800769c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80076a0:	461a      	mov	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d807      	bhi.n	80076b8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80076a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	3338      	adds	r3, #56	; 0x38
 80076ae:	443b      	add	r3, r7
 80076b0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80076b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076b6:	e005      	b.n	80076c4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80076b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ba:	3301      	adds	r3, #1
 80076bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d9e7      	bls.n	8007694 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80076c4:	4b13      	ldr	r3, [pc, #76]	; (8007714 <RCC_SetFlashLatency+0x100>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f023 0207 	bic.w	r2, r3, #7
 80076cc:	4911      	ldr	r1, [pc, #68]	; (8007714 <RCC_SetFlashLatency+0x100>)
 80076ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d0:	4313      	orrs	r3, r2
 80076d2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80076d4:	f7fa fdfc 	bl	80022d0 <HAL_GetTick>
 80076d8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80076da:	e008      	b.n	80076ee <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80076dc:	f7fa fdf8 	bl	80022d0 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d901      	bls.n	80076ee <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e007      	b.n	80076fe <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80076ee:	4b09      	ldr	r3, [pc, #36]	; (8007714 <RCC_SetFlashLatency+0x100>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0307 	and.w	r3, r3, #7
 80076f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d1ef      	bne.n	80076dc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3738      	adds	r7, #56	; 0x38
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	0801c77c 	.word	0x0801c77c
 800770c:	0801c784 	.word	0x0801c784
 8007710:	0801c78c 	.word	0x0801c78c
 8007714:	58004000 	.word	0x58004000

08007718 <LL_RCC_LSE_IsReady>:
{
 8007718:	b480      	push	{r7}
 800771a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800771c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b02      	cmp	r3, #2
 800772a:	d101      	bne.n	8007730 <LL_RCC_LSE_IsReady+0x18>
 800772c:	2301      	movs	r3, #1
 800772e:	e000      	b.n	8007732 <LL_RCC_LSE_IsReady+0x1a>
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	46bd      	mov	sp, r7
 8007736:	bc80      	pop	{r7}
 8007738:	4770      	bx	lr

0800773a <LL_RCC_SetUSARTClockSource>:
{
 800773a:	b480      	push	{r7}
 800773c:	b083      	sub	sp, #12
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007746:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	0c1b      	lsrs	r3, r3, #16
 800774e:	43db      	mvns	r3, r3
 8007750:	401a      	ands	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	b29b      	uxth	r3, r3
 8007756:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800775a:	4313      	orrs	r3, r2
 800775c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	bc80      	pop	{r7}
 8007768:	4770      	bx	lr

0800776a <LL_RCC_SetI2SClockSource>:
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800777a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800777e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4313      	orrs	r3, r2
 8007786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800778a:	bf00      	nop
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	bc80      	pop	{r7}
 8007792:	4770      	bx	lr

08007794 <LL_RCC_SetLPUARTClockSource>:
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800779c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80077a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bc80      	pop	{r7}
 80077bc:	4770      	bx	lr

080077be <LL_RCC_SetI2CClockSource>:
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80077c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	091b      	lsrs	r3, r3, #4
 80077d2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80077d6:	43db      	mvns	r3, r3
 80077d8:	401a      	ands	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	011b      	lsls	r3, r3, #4
 80077de:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80077e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077e6:	4313      	orrs	r3, r2
 80077e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bc80      	pop	{r7}
 80077f4:	4770      	bx	lr

080077f6 <LL_RCC_SetLPTIMClockSource>:
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80077fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007802:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	0c1b      	lsrs	r3, r3, #16
 800780a:	041b      	lsls	r3, r3, #16
 800780c:	43db      	mvns	r3, r3
 800780e:	401a      	ands	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	041b      	lsls	r3, r3, #16
 8007814:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007818:	4313      	orrs	r3, r2
 800781a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800781e:	bf00      	nop
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	bc80      	pop	{r7}
 8007826:	4770      	bx	lr

08007828 <LL_RCC_SetRNGClockSource>:
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007838:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800783c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4313      	orrs	r3, r2
 8007844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	bc80      	pop	{r7}
 8007850:	4770      	bx	lr

08007852 <LL_RCC_SetADCClockSource>:
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800785a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800785e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007862:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007866:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4313      	orrs	r3, r2
 800786e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	bc80      	pop	{r7}
 800787a:	4770      	bx	lr

0800787c <LL_RCC_SetRTCClockSource>:
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800788c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4313      	orrs	r3, r2
 8007898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bc80      	pop	{r7}
 80078a4:	4770      	bx	lr

080078a6 <LL_RCC_GetRTCClockSource>:
{
 80078a6:	b480      	push	{r7}
 80078a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80078aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr

080078be <LL_RCC_ForceBackupDomainReset>:
{
 80078be:	b480      	push	{r7}
 80078c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80078c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80078d6:	bf00      	nop
 80078d8:	46bd      	mov	sp, r7
 80078da:	bc80      	pop	{r7}
 80078dc:	4770      	bx	lr

080078de <LL_RCC_ReleaseBackupDomainReset>:
{
 80078de:	b480      	push	{r7}
 80078e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80078e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80078f6:	bf00      	nop
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bc80      	pop	{r7}
 80078fc:	4770      	bx	lr
	...

08007900 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8007908:	2300      	movs	r3, #0
 800790a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800790c:	2300      	movs	r3, #0
 800790e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007910:	2300      	movs	r3, #0
 8007912:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d058      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8007920:	f7fe fd64 	bl	80063ec <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007924:	f7fa fcd4 	bl	80022d0 <HAL_GetTick>
 8007928:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800792a:	e009      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800792c:	f7fa fcd0 	bl	80022d0 <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b02      	cmp	r3, #2
 8007938:	d902      	bls.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	74fb      	strb	r3, [r7, #19]
        break;
 800793e:	e006      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007940:	4b7b      	ldr	r3, [pc, #492]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800794c:	d1ee      	bne.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800794e:	7cfb      	ldrb	r3, [r7, #19]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d13c      	bne.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007954:	f7ff ffa7 	bl	80078a6 <LL_RCC_GetRTCClockSource>
 8007958:	4602      	mov	r2, r0
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795e:	429a      	cmp	r2, r3
 8007960:	d00f      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800796a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800796e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007970:	f7ff ffa5 	bl	80078be <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007974:	f7ff ffb3 	bl	80078de <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007978:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f003 0302 	and.w	r3, r3, #2
 8007988:	2b00      	cmp	r3, #0
 800798a:	d014      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800798c:	f7fa fca0 	bl	80022d0 <HAL_GetTick>
 8007990:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8007992:	e00b      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007994:	f7fa fc9c 	bl	80022d0 <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	f241 3288 	movw	r2, #5000	; 0x1388
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d902      	bls.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	74fb      	strb	r3, [r7, #19]
            break;
 80079aa:	e004      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80079ac:	f7ff feb4 	bl	8007718 <LL_RCC_LSE_IsReady>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d1ee      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80079b6:	7cfb      	ldrb	r3, [r7, #19]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d105      	bne.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7ff ff5b 	bl	800787c <LL_RCC_SetRTCClockSource>
 80079c6:	e004      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079c8:	7cfb      	ldrb	r3, [r7, #19]
 80079ca:	74bb      	strb	r3, [r7, #18]
 80079cc:	e001      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ce:	7cfb      	ldrb	r3, [r7, #19]
 80079d0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d004      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7ff fea9 	bl	800773a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d004      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7ff fe9e 	bl	800773a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0320 	and.w	r3, r3, #32
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d004      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7ff fec0 	bl	8007794 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d004      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a1b      	ldr	r3, [r3, #32]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff fee6 	bl	80077f6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d004      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7ff fedb 	bl	80077f6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff fed0 	bl	80077f6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d004      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff fea9 	bl	80077be <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d004      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7ff fe9e 	bl	80077be <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d004      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff fe93 	bl	80077be <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d011      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7ff fe5e 	bl	800776a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ab6:	d107      	bne.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ac6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d010      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7ff fea5 	bl	8007828 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d107      	bne.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007af0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007af4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d011      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7ff fea3 	bl	8007852 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b14:	d107      	bne.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b24:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007b26:	7cbb      	ldrb	r3, [r7, #18]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	58000400 	.word	0x58000400

08007b34 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d068      	beq.n	8007c18 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d106      	bne.n	8007b60 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7fa f8e0 	bl	8001d20 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b68:	4b2e      	ldr	r3, [pc, #184]	; (8007c24 <HAL_RTC_Init+0xf0>)
 8007b6a:	22ca      	movs	r2, #202	; 0xca
 8007b6c:	625a      	str	r2, [r3, #36]	; 0x24
 8007b6e:	4b2d      	ldr	r3, [pc, #180]	; (8007c24 <HAL_RTC_Init+0xf0>)
 8007b70:	2253      	movs	r2, #83	; 0x53
 8007b72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fa0f 	bl	8007f98 <RTC_EnterInitMode>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d13f      	bne.n	8007c04 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007b84:	4b27      	ldr	r3, [pc, #156]	; (8007c24 <HAL_RTC_Init+0xf0>)
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	4a26      	ldr	r2, [pc, #152]	; (8007c24 <HAL_RTC_Init+0xf0>)
 8007b8a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8007b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b92:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007b94:	4b23      	ldr	r3, [pc, #140]	; (8007c24 <HAL_RTC_Init+0xf0>)
 8007b96:	699a      	ldr	r2, [r3, #24]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6859      	ldr	r1, [r3, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	4319      	orrs	r1, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	430b      	orrs	r3, r1
 8007ba8:	491e      	ldr	r1, [pc, #120]	; (8007c24 <HAL_RTC_Init+0xf0>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68da      	ldr	r2, [r3, #12]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	041b      	lsls	r3, r3, #16
 8007bb8:	491a      	ldr	r1, [pc, #104]	; (8007c24 <HAL_RTC_Init+0xf0>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8007bbe:	4b19      	ldr	r3, [pc, #100]	; (8007c24 <HAL_RTC_Init+0xf0>)
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bce:	430b      	orrs	r3, r1
 8007bd0:	4914      	ldr	r1, [pc, #80]	; (8007c24 <HAL_RTC_Init+0xf0>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fa12 	bl	8008000 <RTC_ExitInitMode>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10e      	bne.n	8007c04 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8007be6:	4b0f      	ldr	r3, [pc, #60]	; (8007c24 <HAL_RTC_Init+0xf0>)
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a19      	ldr	r1, [r3, #32]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	4319      	orrs	r1, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	430b      	orrs	r3, r1
 8007bfe:	4909      	ldr	r1, [pc, #36]	; (8007c24 <HAL_RTC_Init+0xf0>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c04:	4b07      	ldr	r3, [pc, #28]	; (8007c24 <HAL_RTC_Init+0xf0>)
 8007c06:	22ff      	movs	r2, #255	; 0xff
 8007c08:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d103      	bne.n	8007c18 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	40002800 	.word	0x40002800

08007c28 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007c28:	b590      	push	{r4, r7, lr}
 8007c2a:	b087      	sub	sp, #28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d101      	bne.n	8007c46 <HAL_RTC_SetAlarm_IT+0x1e>
 8007c42:	2302      	movs	r3, #2
 8007c44:	e0f3      	b.n	8007e2e <HAL_RTC_SetAlarm_IT+0x206>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2202      	movs	r2, #2
 8007c52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8007c56:	4b78      	ldr	r3, [pc, #480]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c5e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c66:	d06a      	beq.n	8007d3e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d13a      	bne.n	8007ce4 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007c6e:	4b72      	ldr	r3, [pc, #456]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d102      	bne.n	8007c80 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 f9f5 	bl	800807c <RTC_ByteToBcd2>
 8007c92:	4603      	mov	r3, r0
 8007c94:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	785b      	ldrb	r3, [r3, #1]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 f9ee 	bl	800807c <RTC_ByteToBcd2>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007ca4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	789b      	ldrb	r3, [r3, #2]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f000 f9e6 	bl	800807c <RTC_ByteToBcd2>
 8007cb0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007cb2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	78db      	ldrb	r3, [r3, #3]
 8007cba:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007cbc:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 f9d8 	bl	800807c <RTC_ByteToBcd2>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007cd0:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007cd8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	617b      	str	r3, [r7, #20]
 8007ce2:	e02c      	b.n	8007d3e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8007cec:	d00d      	beq.n	8007d0a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cf6:	d008      	beq.n	8007d0a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007cf8:	4b4f      	ldr	r3, [pc, #316]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d102      	bne.n	8007d0a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2200      	movs	r2, #0
 8007d08:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	785b      	ldrb	r3, [r3, #1]
 8007d14:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007d16:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007d1c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	78db      	ldrb	r3, [r3, #3]
 8007d22:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007d24:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d2c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007d2e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007d34:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d3e:	4b3e      	ldr	r3, [pc, #248]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007d40:	22ca      	movs	r2, #202	; 0xca
 8007d42:	625a      	str	r2, [r3, #36]	; 0x24
 8007d44:	4b3c      	ldr	r3, [pc, #240]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007d46:	2253      	movs	r2, #83	; 0x53
 8007d48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d52:	d12c      	bne.n	8007dae <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007d54:	4b38      	ldr	r3, [pc, #224]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	4a37      	ldr	r2, [pc, #220]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007d5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007d5e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007d60:	4b35      	ldr	r3, [pc, #212]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007d62:	2201      	movs	r2, #1
 8007d64:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d6c:	d107      	bne.n	8007d7e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	699a      	ldr	r2, [r3, #24]
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	69db      	ldr	r3, [r3, #28]
 8007d76:	4930      	ldr	r1, [pc, #192]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	644b      	str	r3, [r1, #68]	; 0x44
 8007d7c:	e006      	b.n	8007d8c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8007d7e:	4a2e      	ldr	r2, [pc, #184]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007d84:	4a2c      	ldr	r2, [pc, #176]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007d8c:	4a2a      	ldr	r2, [pc, #168]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d98:	f043 0201 	orr.w	r2, r3, #1
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007da0:	4b25      	ldr	r3, [pc, #148]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	4a24      	ldr	r2, [pc, #144]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007da6:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8007daa:	6193      	str	r3, [r2, #24]
 8007dac:	e02b      	b.n	8007e06 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007dae:	4b22      	ldr	r3, [pc, #136]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	4a21      	ldr	r2, [pc, #132]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007db4:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8007db8:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007dba:	4b1f      	ldr	r3, [pc, #124]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dc6:	d107      	bne.n	8007dd8 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	699a      	ldr	r2, [r3, #24]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	69db      	ldr	r3, [r3, #28]
 8007dd0:	4919      	ldr	r1, [pc, #100]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007dd6:	e006      	b.n	8007de6 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8007dd8:	4a17      	ldr	r2, [pc, #92]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8007dde:	4a16      	ldr	r2, [pc, #88]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8007de6:	4a14      	ldr	r2, [pc, #80]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df2:	f043 0202 	orr.w	r2, r3, #2
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007dfa:	4b0f      	ldr	r3, [pc, #60]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	4a0e      	ldr	r2, [pc, #56]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e00:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8007e04:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007e06:	4b0d      	ldr	r3, [pc, #52]	; (8007e3c <HAL_RTC_SetAlarm_IT+0x214>)
 8007e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e0c:	4a0b      	ldr	r2, [pc, #44]	; (8007e3c <HAL_RTC_SetAlarm_IT+0x214>)
 8007e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e12:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e16:	4b08      	ldr	r3, [pc, #32]	; (8007e38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e18:	22ff      	movs	r2, #255	; 0xff
 8007e1a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	371c      	adds	r7, #28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd90      	pop	{r4, r7, pc}
 8007e36:	bf00      	nop
 8007e38:	40002800 	.word	0x40002800
 8007e3c:	58000800 	.word	0x58000800

08007e40 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d101      	bne.n	8007e58 <HAL_RTC_DeactivateAlarm+0x18>
 8007e54:	2302      	movs	r3, #2
 8007e56:	e048      	b.n	8007eea <HAL_RTC_DeactivateAlarm+0xaa>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e68:	4b22      	ldr	r3, [pc, #136]	; (8007ef4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007e6a:	22ca      	movs	r2, #202	; 0xca
 8007e6c:	625a      	str	r2, [r3, #36]	; 0x24
 8007e6e:	4b21      	ldr	r3, [pc, #132]	; (8007ef4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007e70:	2253      	movs	r2, #83	; 0x53
 8007e72:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e7a:	d115      	bne.n	8007ea8 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007e7c:	4b1d      	ldr	r3, [pc, #116]	; (8007ef4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	4a1c      	ldr	r2, [pc, #112]	; (8007ef4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007e82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007e86:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007e88:	4b1a      	ldr	r3, [pc, #104]	; (8007ef4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8c:	4a19      	ldr	r2, [pc, #100]	; (8007ef4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007e8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e92:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e98:	f023 0201 	bic.w	r2, r3, #1
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007ea0:	4b14      	ldr	r3, [pc, #80]	; (8007ef4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ea6:	e014      	b.n	8007ed2 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007ea8:	4b12      	ldr	r3, [pc, #72]	; (8007ef4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	4a11      	ldr	r2, [pc, #68]	; (8007ef4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007eae:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8007eb2:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007eb4:	4b0f      	ldr	r3, [pc, #60]	; (8007ef4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb8:	4a0e      	ldr	r2, [pc, #56]	; (8007ef4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007eba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ebe:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec4:	f023 0202 	bic.w	r2, r3, #2
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007ecc:	4b09      	ldr	r3, [pc, #36]	; (8007ef4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007ece:	2202      	movs	r2, #2
 8007ed0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ed2:	4b08      	ldr	r3, [pc, #32]	; (8007ef4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007ed4:	22ff      	movs	r2, #255	; 0xff
 8007ed6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bc80      	pop	{r7}
 8007ef2:	4770      	bx	lr
 8007ef4:	40002800 	.word	0x40002800

08007ef8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8007f00:	4b11      	ldr	r3, [pc, #68]	; (8007f48 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007f02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f08:	4013      	ands	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007f16:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007f18:	2201      	movs	r2, #1
 8007f1a:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7fa fc1a 	bl	8002756 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d005      	beq.n	8007f38 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007f2c:	4b06      	ldr	r3, [pc, #24]	; (8007f48 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007f2e:	2202      	movs	r2, #2
 8007f30:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f94a 	bl	80081cc <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007f40:	bf00      	nop
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	40002800 	.word	0x40002800

08007f4c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007f54:	4b0f      	ldr	r3, [pc, #60]	; (8007f94 <HAL_RTC_WaitForSynchro+0x48>)
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	4a0e      	ldr	r2, [pc, #56]	; (8007f94 <HAL_RTC_WaitForSynchro+0x48>)
 8007f5a:	f023 0320 	bic.w	r3, r3, #32
 8007f5e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007f60:	f7fa f9b6 	bl	80022d0 <HAL_GetTick>
 8007f64:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007f66:	e009      	b.n	8007f7c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f68:	f7fa f9b2 	bl	80022d0 <HAL_GetTick>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f76:	d901      	bls.n	8007f7c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e006      	b.n	8007f8a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007f7c:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <HAL_RTC_WaitForSynchro+0x48>)
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	f003 0320 	and.w	r3, r3, #32
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d0ef      	beq.n	8007f68 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	40002800 	.word	0x40002800

08007f98 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007fa4:	4b15      	ldr	r3, [pc, #84]	; (8007ffc <RTC_EnterInitMode+0x64>)
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d120      	bne.n	8007ff2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007fb0:	4b12      	ldr	r3, [pc, #72]	; (8007ffc <RTC_EnterInitMode+0x64>)
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	4a11      	ldr	r2, [pc, #68]	; (8007ffc <RTC_EnterInitMode+0x64>)
 8007fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fba:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007fbc:	f7fa f988 	bl	80022d0 <HAL_GetTick>
 8007fc0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007fc2:	e00d      	b.n	8007fe0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007fc4:	f7fa f984 	bl	80022d0 <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fd2:	d905      	bls.n	8007fe0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2203      	movs	r2, #3
 8007fdc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007fe0:	4b06      	ldr	r3, [pc, #24]	; (8007ffc <RTC_EnterInitMode+0x64>)
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d102      	bne.n	8007ff2 <RTC_EnterInitMode+0x5a>
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d1e8      	bne.n	8007fc4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	40002800 	.word	0x40002800

08008000 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800800c:	4b1a      	ldr	r3, [pc, #104]	; (8008078 <RTC_ExitInitMode+0x78>)
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	4a19      	ldr	r2, [pc, #100]	; (8008078 <RTC_ExitInitMode+0x78>)
 8008012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008016:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008018:	4b17      	ldr	r3, [pc, #92]	; (8008078 <RTC_ExitInitMode+0x78>)
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	f003 0320 	and.w	r3, r3, #32
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10c      	bne.n	800803e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7ff ff91 	bl	8007f4c <HAL_RTC_WaitForSynchro>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01e      	beq.n	800806e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2203      	movs	r2, #3
 8008034:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008038:	2303      	movs	r3, #3
 800803a:	73fb      	strb	r3, [r7, #15]
 800803c:	e017      	b.n	800806e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800803e:	4b0e      	ldr	r3, [pc, #56]	; (8008078 <RTC_ExitInitMode+0x78>)
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	4a0d      	ldr	r2, [pc, #52]	; (8008078 <RTC_ExitInitMode+0x78>)
 8008044:	f023 0320 	bic.w	r3, r3, #32
 8008048:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7ff ff7e 	bl	8007f4c <HAL_RTC_WaitForSynchro>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d005      	beq.n	8008062 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2203      	movs	r2, #3
 800805a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008062:	4b05      	ldr	r3, [pc, #20]	; (8008078 <RTC_ExitInitMode+0x78>)
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	4a04      	ldr	r2, [pc, #16]	; (8008078 <RTC_ExitInitMode+0x78>)
 8008068:	f043 0320 	orr.w	r3, r3, #32
 800806c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800806e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	40002800 	.word	0x40002800

0800807c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008086:	2300      	movs	r3, #0
 8008088:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800808a:	79fb      	ldrb	r3, [r7, #7]
 800808c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800808e:	e005      	b.n	800809c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	3301      	adds	r3, #1
 8008094:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8008096:	7afb      	ldrb	r3, [r7, #11]
 8008098:	3b0a      	subs	r3, #10
 800809a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800809c:	7afb      	ldrb	r3, [r7, #11]
 800809e:	2b09      	cmp	r3, #9
 80080a0:	d8f6      	bhi.n	8008090 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	011b      	lsls	r3, r3, #4
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	7afb      	ldrb	r3, [r7, #11]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	b2db      	uxtb	r3, r3
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bc80      	pop	{r7}
 80080b8:	4770      	bx	lr
	...

080080bc <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d101      	bne.n	80080d2 <HAL_RTCEx_EnableBypassShadow+0x16>
 80080ce:	2302      	movs	r3, #2
 80080d0:	e01f      	b.n	8008112 <HAL_RTCEx_EnableBypassShadow+0x56>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2202      	movs	r2, #2
 80080de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080e2:	4b0e      	ldr	r3, [pc, #56]	; (800811c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80080e4:	22ca      	movs	r2, #202	; 0xca
 80080e6:	625a      	str	r2, [r3, #36]	; 0x24
 80080e8:	4b0c      	ldr	r3, [pc, #48]	; (800811c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80080ea:	2253      	movs	r2, #83	; 0x53
 80080ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80080ee:	4b0b      	ldr	r3, [pc, #44]	; (800811c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	4a0a      	ldr	r2, [pc, #40]	; (800811c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80080f4:	f043 0320 	orr.w	r3, r3, #32
 80080f8:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080fa:	4b08      	ldr	r3, [pc, #32]	; (800811c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80080fc:	22ff      	movs	r2, #255	; 0xff
 80080fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	bc80      	pop	{r7}
 800811a:	4770      	bx	lr
 800811c:	40002800 	.word	0x40002800

08008120 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800812e:	2b01      	cmp	r3, #1
 8008130:	d101      	bne.n	8008136 <HAL_RTCEx_SetSSRU_IT+0x16>
 8008132:	2302      	movs	r3, #2
 8008134:	e027      	b.n	8008186 <HAL_RTCEx_SetSSRU_IT+0x66>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2202      	movs	r2, #2
 8008142:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008146:	4b12      	ldr	r3, [pc, #72]	; (8008190 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008148:	22ca      	movs	r2, #202	; 0xca
 800814a:	625a      	str	r2, [r3, #36]	; 0x24
 800814c:	4b10      	ldr	r3, [pc, #64]	; (8008190 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800814e:	2253      	movs	r2, #83	; 0x53
 8008150:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8008152:	4b0f      	ldr	r3, [pc, #60]	; (8008190 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	4a0e      	ldr	r2, [pc, #56]	; (8008190 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800815c:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800815e:	4b0d      	ldr	r3, [pc, #52]	; (8008194 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008164:	4a0b      	ldr	r2, [pc, #44]	; (8008194 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008166:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800816a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800816e:	4b08      	ldr	r3, [pc, #32]	; (8008190 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008170:	22ff      	movs	r2, #255	; 0xff
 8008172:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	bc80      	pop	{r7}
 800818e:	4770      	bx	lr
 8008190:	40002800 	.word	0x40002800
 8008194:	58000800 	.word	0x58000800

08008198 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80081a0:	4b09      	ldr	r3, [pc, #36]	; (80081c8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80081a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d005      	beq.n	80081b8 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80081ac:	4b06      	ldr	r3, [pc, #24]	; (80081c8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80081ae:	2240      	movs	r2, #64	; 0x40
 80081b0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7fa fad9 	bl	800276a <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	40002800 	.word	0x40002800

080081cc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr
	...

080081e0 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b087      	sub	sp, #28
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80081ec:	4b07      	ldr	r3, [pc, #28]	; (800820c <HAL_RTCEx_BKUPWrite+0x2c>)
 80081ee:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	4413      	add	r3, r2
 80081f8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	601a      	str	r2, [r3, #0]
}
 8008200:	bf00      	nop
 8008202:	371c      	adds	r7, #28
 8008204:	46bd      	mov	sp, r7
 8008206:	bc80      	pop	{r7}
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	4000b100 	.word	0x4000b100

08008210 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800821a:	4b07      	ldr	r3, [pc, #28]	; (8008238 <HAL_RTCEx_BKUPRead+0x28>)
 800821c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	4413      	add	r3, r2
 8008226:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	bc80      	pop	{r7}
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	4000b100 	.word	0x4000b100

0800823c <LL_PWR_SetRadioBusyTrigger>:
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8008244:	4b06      	ldr	r3, [pc, #24]	; (8008260 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800824c:	4904      	ldr	r1, [pc, #16]	; (8008260 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4313      	orrs	r3, r2
 8008252:	608b      	str	r3, [r1, #8]
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	bc80      	pop	{r7}
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	58000400 	.word	0x58000400

08008264 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8008264:	b480      	push	{r7}
 8008266:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008268:	4b05      	ldr	r3, [pc, #20]	; (8008280 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800826a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800826e:	4a04      	ldr	r2, [pc, #16]	; (8008280 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008278:	bf00      	nop
 800827a:	46bd      	mov	sp, r7
 800827c:	bc80      	pop	{r7}
 800827e:	4770      	bx	lr
 8008280:	58000400 	.word	0x58000400

08008284 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8008284:	b480      	push	{r7}
 8008286:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008288:	4b05      	ldr	r3, [pc, #20]	; (80082a0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800828a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800828e:	4a04      	ldr	r2, [pc, #16]	; (80082a0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008290:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008298:	bf00      	nop
 800829a:	46bd      	mov	sp, r7
 800829c:	bc80      	pop	{r7}
 800829e:	4770      	bx	lr
 80082a0:	58000400 	.word	0x58000400

080082a4 <LL_PWR_ClearFlag_RFBUSY>:
{
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80082a8:	4b03      	ldr	r3, [pc, #12]	; (80082b8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80082aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082ae:	619a      	str	r2, [r3, #24]
}
 80082b0:	bf00      	nop
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bc80      	pop	{r7}
 80082b6:	4770      	bx	lr
 80082b8:	58000400 	.word	0x58000400

080082bc <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80082bc:	b480      	push	{r7}
 80082be:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80082c0:	4b06      	ldr	r3, [pc, #24]	; (80082dc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80082c2:	695b      	ldr	r3, [r3, #20]
 80082c4:	f003 0302 	and.w	r3, r3, #2
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d101      	bne.n	80082d0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80082cc:	2301      	movs	r3, #1
 80082ce:	e000      	b.n	80082d2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bc80      	pop	{r7}
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	58000400 	.word	0x58000400

080082e0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80082e4:	4b06      	ldr	r3, [pc, #24]	; (8008300 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	f003 0304 	and.w	r3, r3, #4
 80082ec:	2b04      	cmp	r3, #4
 80082ee:	d101      	bne.n	80082f4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80082f0:	2301      	movs	r3, #1
 80082f2:	e000      	b.n	80082f6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bc80      	pop	{r7}
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	58000400 	.word	0x58000400

08008304 <LL_RCC_RF_DisableReset>:
{
 8008304:	b480      	push	{r7}
 8008306:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8008308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800830c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008314:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008318:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800831c:	bf00      	nop
 800831e:	46bd      	mov	sp, r7
 8008320:	bc80      	pop	{r7}
 8008322:	4770      	bx	lr

08008324 <LL_RCC_IsRFUnderReset>:
{
 8008324:	b480      	push	{r7}
 8008326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8008328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800832c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008334:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008338:	d101      	bne.n	800833e <LL_RCC_IsRFUnderReset+0x1a>
 800833a:	2301      	movs	r3, #1
 800833c:	e000      	b.n	8008340 <LL_RCC_IsRFUnderReset+0x1c>
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	46bd      	mov	sp, r7
 8008344:	bc80      	pop	{r7}
 8008346:	4770      	bx	lr

08008348 <LL_EXTI_EnableIT_32_63>:
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008350:	4b06      	ldr	r3, [pc, #24]	; (800836c <LL_EXTI_EnableIT_32_63+0x24>)
 8008352:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008356:	4905      	ldr	r1, [pc, #20]	; (800836c <LL_EXTI_EnableIT_32_63+0x24>)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4313      	orrs	r3, r2
 800835c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	bc80      	pop	{r7}
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	58000800 	.word	0x58000800

08008370 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d103      	bne.n	8008386 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	73fb      	strb	r3, [r7, #15]
    return status;
 8008382:	7bfb      	ldrb	r3, [r7, #15]
 8008384:	e04b      	b.n	800841e <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	799b      	ldrb	r3, [r3, #6]
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	d105      	bne.n	80083a0 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7f9 fdf0 	bl	8001f80 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2202      	movs	r2, #2
 80083a4:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80083a6:	f7ff ffad 	bl	8008304 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80083aa:	4b1f      	ldr	r3, [pc, #124]	; (8008428 <HAL_SUBGHZ_Init+0xb8>)
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	4613      	mov	r3, r2
 80083b0:	00db      	lsls	r3, r3, #3
 80083b2:	1a9b      	subs	r3, r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	0cdb      	lsrs	r3, r3, #19
 80083b8:	2264      	movs	r2, #100	; 0x64
 80083ba:	fb02 f303 	mul.w	r3, r2, r3
 80083be:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d105      	bne.n	80083d2 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2201      	movs	r2, #1
 80083ce:	609a      	str	r2, [r3, #8]
      break;
 80083d0:	e007      	b.n	80083e2 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	3b01      	subs	r3, #1
 80083d6:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 80083d8:	f7ff ffa4 	bl	8008324 <LL_RCC_IsRFUnderReset>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1ee      	bne.n	80083c0 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 80083e2:	f7ff ff3f 	bl	8008264 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80083e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80083ea:	f7ff ffad 	bl	8008348 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80083ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80083f2:	f7ff ff23 	bl	800823c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80083f6:	f7ff ff55 	bl	80082a4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10a      	bne.n	8008416 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4618      	mov	r0, r3
 8008406:	f000 faad 	bl	8008964 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2201      	movs	r2, #1
 800841a:	719a      	strb	r2, [r3, #6]

  return status;
 800841c:	7bfb      	ldrb	r3, [r7, #15]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20000000 	.word	0x20000000

0800842c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	607a      	str	r2, [r7, #4]
 8008436:	461a      	mov	r2, r3
 8008438:	460b      	mov	r3, r1
 800843a:	817b      	strh	r3, [r7, #10]
 800843c:	4613      	mov	r3, r2
 800843e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	799b      	ldrb	r3, [r3, #6]
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b01      	cmp	r3, #1
 8008448:	d14a      	bne.n	80084e0 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	795b      	ldrb	r3, [r3, #5]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d101      	bne.n	8008456 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8008452:	2302      	movs	r3, #2
 8008454:	e045      	b.n	80084e2 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2201      	movs	r2, #1
 800845a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2202      	movs	r2, #2
 8008460:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f000 fb4c 	bl	8008b00 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008468:	f7ff ff0c 	bl	8008284 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800846c:	210d      	movs	r1, #13
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 fa98 	bl	80089a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008474:	897b      	ldrh	r3, [r7, #10]
 8008476:	0a1b      	lsrs	r3, r3, #8
 8008478:	b29b      	uxth	r3, r3
 800847a:	b2db      	uxtb	r3, r3
 800847c:	4619      	mov	r1, r3
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f000 fa90 	bl	80089a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008484:	897b      	ldrh	r3, [r7, #10]
 8008486:	b2db      	uxtb	r3, r3
 8008488:	4619      	mov	r1, r3
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f000 fa8a 	bl	80089a4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008490:	2300      	movs	r3, #0
 8008492:	82bb      	strh	r3, [r7, #20]
 8008494:	e00a      	b.n	80084ac <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008496:	8abb      	ldrh	r3, [r7, #20]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	4413      	add	r3, r2
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	4619      	mov	r1, r3
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f000 fa7f 	bl	80089a4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80084a6:	8abb      	ldrh	r3, [r7, #20]
 80084a8:	3301      	adds	r3, #1
 80084aa:	82bb      	strh	r3, [r7, #20]
 80084ac:	8aba      	ldrh	r2, [r7, #20]
 80084ae:	893b      	ldrh	r3, [r7, #8]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d3f0      	bcc.n	8008496 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80084b4:	f7ff fed6 	bl	8008264 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 fb45 	bl	8008b48 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	75fb      	strb	r3, [r7, #23]
 80084ca:	e001      	b.n	80084d0 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	715a      	strb	r2, [r3, #5]

    return status;
 80084dc:	7dfb      	ldrb	r3, [r7, #23]
 80084de:	e000      	b.n	80084e2 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80084e0:	2302      	movs	r3, #2
  }
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3718      	adds	r7, #24
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b088      	sub	sp, #32
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	60f8      	str	r0, [r7, #12]
 80084f2:	607a      	str	r2, [r7, #4]
 80084f4:	461a      	mov	r2, r3
 80084f6:	460b      	mov	r3, r1
 80084f8:	817b      	strh	r3, [r7, #10]
 80084fa:	4613      	mov	r3, r2
 80084fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	799b      	ldrb	r3, [r3, #6]
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b01      	cmp	r3, #1
 800850a:	d14a      	bne.n	80085a2 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	795b      	ldrb	r3, [r3, #5]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d101      	bne.n	8008518 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8008514:	2302      	movs	r3, #2
 8008516:	e045      	b.n	80085a4 <HAL_SUBGHZ_ReadRegisters+0xba>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2201      	movs	r2, #1
 800851c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f000 faee 	bl	8008b00 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008524:	f7ff feae 	bl	8008284 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8008528:	211d      	movs	r1, #29
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 fa3a 	bl	80089a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008530:	897b      	ldrh	r3, [r7, #10]
 8008532:	0a1b      	lsrs	r3, r3, #8
 8008534:	b29b      	uxth	r3, r3
 8008536:	b2db      	uxtb	r3, r3
 8008538:	4619      	mov	r1, r3
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f000 fa32 	bl	80089a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008540:	897b      	ldrh	r3, [r7, #10]
 8008542:	b2db      	uxtb	r3, r3
 8008544:	4619      	mov	r1, r3
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f000 fa2c 	bl	80089a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800854c:	2100      	movs	r1, #0
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f000 fa28 	bl	80089a4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008554:	2300      	movs	r3, #0
 8008556:	82fb      	strh	r3, [r7, #22]
 8008558:	e009      	b.n	800856e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800855a:	69b9      	ldr	r1, [r7, #24]
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f000 fa77 	bl	8008a50 <SUBGHZSPI_Receive>
      pData++;
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	3301      	adds	r3, #1
 8008566:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008568:	8afb      	ldrh	r3, [r7, #22]
 800856a:	3301      	adds	r3, #1
 800856c:	82fb      	strh	r3, [r7, #22]
 800856e:	8afa      	ldrh	r2, [r7, #22]
 8008570:	893b      	ldrh	r3, [r7, #8]
 8008572:	429a      	cmp	r2, r3
 8008574:	d3f1      	bcc.n	800855a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008576:	f7ff fe75 	bl	8008264 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f000 fae4 	bl	8008b48 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	77fb      	strb	r3, [r7, #31]
 800858c:	e001      	b.n	8008592 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2201      	movs	r2, #1
 8008596:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	715a      	strb	r2, [r3, #5]

    return status;
 800859e:	7ffb      	ldrb	r3, [r7, #31]
 80085a0:	e000      	b.n	80085a4 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80085a2:	2302      	movs	r3, #2
  }
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3720      	adds	r7, #32
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	607a      	str	r2, [r7, #4]
 80085b6:	461a      	mov	r2, r3
 80085b8:	460b      	mov	r3, r1
 80085ba:	72fb      	strb	r3, [r7, #11]
 80085bc:	4613      	mov	r3, r2
 80085be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	799b      	ldrb	r3, [r3, #6]
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d14a      	bne.n	8008660 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	795b      	ldrb	r3, [r3, #5]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d101      	bne.n	80085d6 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80085d2:	2302      	movs	r3, #2
 80085d4:	e045      	b.n	8008662 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2201      	movs	r2, #1
 80085da:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f000 fa8f 	bl	8008b00 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80085e2:	7afb      	ldrb	r3, [r7, #11]
 80085e4:	2b84      	cmp	r3, #132	; 0x84
 80085e6:	d002      	beq.n	80085ee <HAL_SUBGHZ_ExecSetCmd+0x42>
 80085e8:	7afb      	ldrb	r3, [r7, #11]
 80085ea:	2b94      	cmp	r3, #148	; 0x94
 80085ec:	d103      	bne.n	80085f6 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2201      	movs	r2, #1
 80085f2:	711a      	strb	r2, [r3, #4]
 80085f4:	e002      	b.n	80085fc <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80085fc:	f7ff fe42 	bl	8008284 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008600:	7afb      	ldrb	r3, [r7, #11]
 8008602:	4619      	mov	r1, r3
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 f9cd 	bl	80089a4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800860a:	2300      	movs	r3, #0
 800860c:	82bb      	strh	r3, [r7, #20]
 800860e:	e00a      	b.n	8008626 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008610:	8abb      	ldrh	r3, [r7, #20]
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	4413      	add	r3, r2
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	4619      	mov	r1, r3
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 f9c2 	bl	80089a4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008620:	8abb      	ldrh	r3, [r7, #20]
 8008622:	3301      	adds	r3, #1
 8008624:	82bb      	strh	r3, [r7, #20]
 8008626:	8aba      	ldrh	r2, [r7, #20]
 8008628:	893b      	ldrh	r3, [r7, #8]
 800862a:	429a      	cmp	r2, r3
 800862c:	d3f0      	bcc.n	8008610 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800862e:	f7ff fe19 	bl	8008264 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8008632:	7afb      	ldrb	r3, [r7, #11]
 8008634:	2b84      	cmp	r3, #132	; 0x84
 8008636:	d002      	beq.n	800863e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 fa85 	bl	8008b48 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d002      	beq.n	800864c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	75fb      	strb	r3, [r7, #23]
 800864a:	e001      	b.n	8008650 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2201      	movs	r2, #1
 8008654:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	715a      	strb	r2, [r3, #5]

    return status;
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	e000      	b.n	8008662 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008660:	2302      	movs	r3, #2
  }
}
 8008662:	4618      	mov	r0, r3
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b088      	sub	sp, #32
 800866e:	af00      	add	r7, sp, #0
 8008670:	60f8      	str	r0, [r7, #12]
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	461a      	mov	r2, r3
 8008676:	460b      	mov	r3, r1
 8008678:	72fb      	strb	r3, [r7, #11]
 800867a:	4613      	mov	r3, r2
 800867c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	799b      	ldrb	r3, [r3, #6]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	2b01      	cmp	r3, #1
 800868a:	d13d      	bne.n	8008708 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	795b      	ldrb	r3, [r3, #5]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d101      	bne.n	8008698 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8008694:	2302      	movs	r3, #2
 8008696:	e038      	b.n	800870a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2201      	movs	r2, #1
 800869c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f000 fa2e 	bl	8008b00 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80086a4:	f7ff fdee 	bl	8008284 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80086a8:	7afb      	ldrb	r3, [r7, #11]
 80086aa:	4619      	mov	r1, r3
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 f979 	bl	80089a4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80086b2:	2100      	movs	r1, #0
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f000 f975 	bl	80089a4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80086ba:	2300      	movs	r3, #0
 80086bc:	82fb      	strh	r3, [r7, #22]
 80086be:	e009      	b.n	80086d4 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80086c0:	69b9      	ldr	r1, [r7, #24]
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f000 f9c4 	bl	8008a50 <SUBGHZSPI_Receive>
      pData++;
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	3301      	adds	r3, #1
 80086cc:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80086ce:	8afb      	ldrh	r3, [r7, #22]
 80086d0:	3301      	adds	r3, #1
 80086d2:	82fb      	strh	r3, [r7, #22]
 80086d4:	8afa      	ldrh	r2, [r7, #22]
 80086d6:	893b      	ldrh	r3, [r7, #8]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d3f1      	bcc.n	80086c0 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80086dc:	f7ff fdc2 	bl	8008264 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 fa31 	bl	8008b48 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d002      	beq.n	80086f4 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	77fb      	strb	r3, [r7, #31]
 80086f2:	e001      	b.n	80086f8 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2201      	movs	r2, #1
 80086fc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	715a      	strb	r2, [r3, #5]

    return status;
 8008704:	7ffb      	ldrb	r3, [r7, #31]
 8008706:	e000      	b.n	800870a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008708:	2302      	movs	r3, #2
  }
}
 800870a:	4618      	mov	r0, r3
 800870c:	3720      	adds	r7, #32
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b086      	sub	sp, #24
 8008716:	af00      	add	r7, sp, #0
 8008718:	60f8      	str	r0, [r7, #12]
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	461a      	mov	r2, r3
 800871e:	460b      	mov	r3, r1
 8008720:	72fb      	strb	r3, [r7, #11]
 8008722:	4613      	mov	r3, r2
 8008724:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	799b      	ldrb	r3, [r3, #6]
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b01      	cmp	r3, #1
 800872e:	d13e      	bne.n	80087ae <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	795b      	ldrb	r3, [r3, #5]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d101      	bne.n	800873c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8008738:	2302      	movs	r3, #2
 800873a:	e039      	b.n	80087b0 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2201      	movs	r2, #1
 8008740:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 f9dc 	bl	8008b00 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008748:	f7ff fd9c 	bl	8008284 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800874c:	210e      	movs	r1, #14
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 f928 	bl	80089a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008754:	7afb      	ldrb	r3, [r7, #11]
 8008756:	4619      	mov	r1, r3
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 f923 	bl	80089a4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800875e:	2300      	movs	r3, #0
 8008760:	82bb      	strh	r3, [r7, #20]
 8008762:	e00a      	b.n	800877a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008764:	8abb      	ldrh	r3, [r7, #20]
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	4413      	add	r3, r2
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	4619      	mov	r1, r3
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 f918 	bl	80089a4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008774:	8abb      	ldrh	r3, [r7, #20]
 8008776:	3301      	adds	r3, #1
 8008778:	82bb      	strh	r3, [r7, #20]
 800877a:	8aba      	ldrh	r2, [r7, #20]
 800877c:	893b      	ldrh	r3, [r7, #8]
 800877e:	429a      	cmp	r2, r3
 8008780:	d3f0      	bcc.n	8008764 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008782:	f7ff fd6f 	bl	8008264 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 f9de 	bl	8008b48 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	75fb      	strb	r3, [r7, #23]
 8008798:	e001      	b.n	800879e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2201      	movs	r2, #1
 80087a2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	715a      	strb	r2, [r3, #5]

    return status;
 80087aa:	7dfb      	ldrb	r3, [r7, #23]
 80087ac:	e000      	b.n	80087b0 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80087ae:	2302      	movs	r3, #2
  }
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3718      	adds	r7, #24
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b088      	sub	sp, #32
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	607a      	str	r2, [r7, #4]
 80087c2:	461a      	mov	r2, r3
 80087c4:	460b      	mov	r3, r1
 80087c6:	72fb      	strb	r3, [r7, #11]
 80087c8:	4613      	mov	r3, r2
 80087ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	799b      	ldrb	r3, [r3, #6]
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d141      	bne.n	800885e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	795b      	ldrb	r3, [r3, #5]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d101      	bne.n	80087e6 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80087e2:	2302      	movs	r3, #2
 80087e4:	e03c      	b.n	8008860 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2201      	movs	r2, #1
 80087ea:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 f987 	bl	8008b00 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80087f2:	f7ff fd47 	bl	8008284 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80087f6:	211e      	movs	r1, #30
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f000 f8d3 	bl	80089a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80087fe:	7afb      	ldrb	r3, [r7, #11]
 8008800:	4619      	mov	r1, r3
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f000 f8ce 	bl	80089a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008808:	2100      	movs	r1, #0
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f000 f8ca 	bl	80089a4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008810:	2300      	movs	r3, #0
 8008812:	82fb      	strh	r3, [r7, #22]
 8008814:	e009      	b.n	800882a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008816:	69b9      	ldr	r1, [r7, #24]
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 f919 	bl	8008a50 <SUBGHZSPI_Receive>
      pData++;
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	3301      	adds	r3, #1
 8008822:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008824:	8afb      	ldrh	r3, [r7, #22]
 8008826:	3301      	adds	r3, #1
 8008828:	82fb      	strh	r3, [r7, #22]
 800882a:	8afa      	ldrh	r2, [r7, #22]
 800882c:	893b      	ldrh	r3, [r7, #8]
 800882e:	429a      	cmp	r2, r3
 8008830:	d3f1      	bcc.n	8008816 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008832:	f7ff fd17 	bl	8008264 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f000 f986 	bl	8008b48 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d002      	beq.n	800884a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	77fb      	strb	r3, [r7, #31]
 8008848:	e001      	b.n	800884e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2201      	movs	r2, #1
 8008852:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	715a      	strb	r2, [r3, #5]

    return status;
 800885a:	7ffb      	ldrb	r3, [r7, #31]
 800885c:	e000      	b.n	8008860 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800885e:	2302      	movs	r3, #2
  }
}
 8008860:	4618      	mov	r0, r3
 8008862:	3720      	adds	r7, #32
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8008870:	2300      	movs	r3, #0
 8008872:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8008874:	f107 020c 	add.w	r2, r7, #12
 8008878:	2302      	movs	r3, #2
 800887a:	2112      	movs	r1, #18
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff fef4 	bl	800866a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8008882:	7b3b      	ldrb	r3, [r7, #12]
 8008884:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8008886:	89fb      	ldrh	r3, [r7, #14]
 8008888:	021b      	lsls	r3, r3, #8
 800888a:	b21a      	sxth	r2, r3
 800888c:	7b7b      	ldrb	r3, [r7, #13]
 800888e:	b21b      	sxth	r3, r3
 8008890:	4313      	orrs	r3, r2
 8008892:	b21b      	sxth	r3, r3
 8008894:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8008896:	89fb      	ldrh	r3, [r7, #14]
 8008898:	f003 0301 	and.w	r3, r3, #1
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f012 f8fd 	bl	801aaa0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80088a6:	89fb      	ldrh	r3, [r7, #14]
 80088a8:	085b      	lsrs	r3, r3, #1
 80088aa:	f003 0301 	and.w	r3, r3, #1
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d002      	beq.n	80088b8 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f012 f902 	bl	801aabc <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80088b8:	89fb      	ldrh	r3, [r7, #14]
 80088ba:	089b      	lsrs	r3, r3, #2
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f012 f951 	bl	801ab6c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80088ca:	89fb      	ldrh	r3, [r7, #14]
 80088cc:	08db      	lsrs	r3, r3, #3
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d002      	beq.n	80088dc <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f012 f956 	bl	801ab88 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80088dc:	89fb      	ldrh	r3, [r7, #14]
 80088de:	091b      	lsrs	r3, r3, #4
 80088e0:	f003 0301 	and.w	r3, r3, #1
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d002      	beq.n	80088ee <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f012 f95b 	bl	801aba4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80088ee:	89fb      	ldrh	r3, [r7, #14]
 80088f0:	095b      	lsrs	r3, r3, #5
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f012 f928 	bl	801ab50 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008900:	89fb      	ldrh	r3, [r7, #14]
 8008902:	099b      	lsrs	r3, r3, #6
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f012 f8e3 	bl	801aad8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8008912:	89fb      	ldrh	r3, [r7, #14]
 8008914:	09db      	lsrs	r3, r3, #7
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00e      	beq.n	800893c <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800891e:	89fb      	ldrh	r3, [r7, #14]
 8008920:	0a1b      	lsrs	r3, r3, #8
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	2b00      	cmp	r3, #0
 8008928:	d004      	beq.n	8008934 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800892a:	2101      	movs	r1, #1
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f012 f8e1 	bl	801aaf4 <HAL_SUBGHZ_CADStatusCallback>
 8008932:	e003      	b.n	800893c <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8008934:	2100      	movs	r1, #0
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f012 f8dc 	bl	801aaf4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800893c:	89fb      	ldrh	r3, [r7, #14]
 800893e:	0a5b      	lsrs	r3, r3, #9
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f012 f8f1 	bl	801ab30 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 800894e:	f107 020c 	add.w	r2, r7, #12
 8008952:	2302      	movs	r3, #2
 8008954:	2102      	movs	r1, #2
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7ff fe28 	bl	80085ac <HAL_SUBGHZ_ExecSetCmd>
}
 800895c:	bf00      	nop
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800896c:	4b0c      	ldr	r3, [pc, #48]	; (80089a0 <SUBGHZSPI_Init+0x3c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a0b      	ldr	r2, [pc, #44]	; (80089a0 <SUBGHZSPI_Init+0x3c>)
 8008972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008976:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008978:	4a09      	ldr	r2, [pc, #36]	; (80089a0 <SUBGHZSPI_Init+0x3c>)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8008980:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8008982:	4b07      	ldr	r3, [pc, #28]	; (80089a0 <SUBGHZSPI_Init+0x3c>)
 8008984:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8008988:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800898a:	4b05      	ldr	r3, [pc, #20]	; (80089a0 <SUBGHZSPI_Init+0x3c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a04      	ldr	r2, [pc, #16]	; (80089a0 <SUBGHZSPI_Init+0x3c>)
 8008990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008994:	6013      	str	r3, [r2, #0]
}
 8008996:	bf00      	nop
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	bc80      	pop	{r7}
 800899e:	4770      	bx	lr
 80089a0:	58010000 	.word	0x58010000

080089a4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b087      	sub	sp, #28
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	460b      	mov	r3, r1
 80089ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80089b4:	4b23      	ldr	r3, [pc, #140]	; (8008a44 <SUBGHZSPI_Transmit+0xa0>)
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	4613      	mov	r3, r2
 80089ba:	00db      	lsls	r3, r3, #3
 80089bc:	1a9b      	subs	r3, r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	0cdb      	lsrs	r3, r3, #19
 80089c2:	2264      	movs	r2, #100	; 0x64
 80089c4:	fb02 f303 	mul.w	r3, r2, r3
 80089c8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d105      	bne.n	80089dc <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	609a      	str	r2, [r3, #8]
      break;
 80089da:	e008      	b.n	80089ee <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3b01      	subs	r3, #1
 80089e0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80089e2:	4b19      	ldr	r3, [pc, #100]	; (8008a48 <SUBGHZSPI_Transmit+0xa4>)
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d1ed      	bne.n	80089ca <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80089ee:	4b17      	ldr	r3, [pc, #92]	; (8008a4c <SUBGHZSPI_Transmit+0xa8>)
 80089f0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	78fa      	ldrb	r2, [r7, #3]
 80089f6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80089f8:	4b12      	ldr	r3, [pc, #72]	; (8008a44 <SUBGHZSPI_Transmit+0xa0>)
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	4613      	mov	r3, r2
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	1a9b      	subs	r3, r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	0cdb      	lsrs	r3, r3, #19
 8008a06:	2264      	movs	r2, #100	; 0x64
 8008a08:	fb02 f303 	mul.w	r3, r2, r3
 8008a0c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d105      	bne.n	8008a20 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	609a      	str	r2, [r3, #8]
      break;
 8008a1e:	e008      	b.n	8008a32 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008a26:	4b08      	ldr	r3, [pc, #32]	; (8008a48 <SUBGHZSPI_Transmit+0xa4>)
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d1ed      	bne.n	8008a0e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8008a32:	4b05      	ldr	r3, [pc, #20]	; (8008a48 <SUBGHZSPI_Transmit+0xa4>)
 8008a34:	68db      	ldr	r3, [r3, #12]

  return status;
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	371c      	adds	r7, #28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bc80      	pop	{r7}
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	20000000 	.word	0x20000000
 8008a48:	58010000 	.word	0x58010000
 8008a4c:	5801000c 	.word	0x5801000c

08008a50 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008a5e:	4b25      	ldr	r3, [pc, #148]	; (8008af4 <SUBGHZSPI_Receive+0xa4>)
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	4613      	mov	r3, r2
 8008a64:	00db      	lsls	r3, r3, #3
 8008a66:	1a9b      	subs	r3, r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	0cdb      	lsrs	r3, r3, #19
 8008a6c:	2264      	movs	r2, #100	; 0x64
 8008a6e:	fb02 f303 	mul.w	r3, r2, r3
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d105      	bne.n	8008a86 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2201      	movs	r2, #1
 8008a82:	609a      	str	r2, [r3, #8]
      break;
 8008a84:	e008      	b.n	8008a98 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008a8c:	4b1a      	ldr	r3, [pc, #104]	; (8008af8 <SUBGHZSPI_Receive+0xa8>)
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d1ed      	bne.n	8008a74 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008a98:	4b18      	ldr	r3, [pc, #96]	; (8008afc <SUBGHZSPI_Receive+0xac>)
 8008a9a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	22ff      	movs	r2, #255	; 0xff
 8008aa0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008aa2:	4b14      	ldr	r3, [pc, #80]	; (8008af4 <SUBGHZSPI_Receive+0xa4>)
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	00db      	lsls	r3, r3, #3
 8008aaa:	1a9b      	subs	r3, r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	0cdb      	lsrs	r3, r3, #19
 8008ab0:	2264      	movs	r2, #100	; 0x64
 8008ab2:	fb02 f303 	mul.w	r3, r2, r3
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d105      	bne.n	8008aca <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	609a      	str	r2, [r3, #8]
      break;
 8008ac8:	e008      	b.n	8008adc <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3b01      	subs	r3, #1
 8008ace:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008ad0:	4b09      	ldr	r3, [pc, #36]	; (8008af8 <SUBGHZSPI_Receive+0xa8>)
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d1ed      	bne.n	8008ab8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8008adc:	4b06      	ldr	r3, [pc, #24]	; (8008af8 <SUBGHZSPI_Receive+0xa8>)
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	701a      	strb	r2, [r3, #0]

  return status;
 8008ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	371c      	adds	r7, #28
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bc80      	pop	{r7}
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	20000000 	.word	0x20000000
 8008af8:	58010000 	.word	0x58010000
 8008afc:	5801000c 	.word	0x5801000c

08008b00 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	791b      	ldrb	r3, [r3, #4]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d111      	bne.n	8008b34 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8008b10:	4b0c      	ldr	r3, [pc, #48]	; (8008b44 <SUBGHZ_CheckDeviceReady+0x44>)
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	4613      	mov	r3, r2
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	4413      	add	r3, r2
 8008b1a:	00db      	lsls	r3, r3, #3
 8008b1c:	0c1b      	lsrs	r3, r3, #16
 8008b1e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008b20:	f7ff fbb0 	bl	8008284 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1f9      	bne.n	8008b24 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008b30:	f7ff fb98 	bl	8008264 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 f807 	bl	8008b48 <SUBGHZ_WaitOnBusy>
 8008b3a:	4603      	mov	r3, r0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	20000000 	.word	0x20000000

08008b48 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8008b54:	4b12      	ldr	r3, [pc, #72]	; (8008ba0 <SUBGHZ_WaitOnBusy+0x58>)
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	005b      	lsls	r3, r3, #1
 8008b5c:	4413      	add	r3, r2
 8008b5e:	00db      	lsls	r3, r3, #3
 8008b60:	0d1b      	lsrs	r3, r3, #20
 8008b62:	2264      	movs	r2, #100	; 0x64
 8008b64:	fb02 f303 	mul.w	r3, r2, r3
 8008b68:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8008b6a:	f7ff fbb9 	bl	80082e0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8008b6e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d105      	bne.n	8008b82 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	609a      	str	r2, [r3, #8]
      break;
 8008b80:	e009      	b.n	8008b96 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8008b88:	f7ff fb98 	bl	80082bc <LL_PWR_IsActiveFlag_RFBUSYS>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	4013      	ands	r3, r2
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d0e9      	beq.n	8008b6a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3718      	adds	r7, #24
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	20000000 	.word	0x20000000

08008ba4 <LL_RCC_GetUSARTClockSource>:
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	401a      	ands	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	041b      	lsls	r3, r3, #16
 8008bbc:	4313      	orrs	r3, r2
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	370c      	adds	r7, #12
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bc80      	pop	{r7}
 8008bc6:	4770      	bx	lr

08008bc8 <LL_RCC_GetLPUARTClockSource>:
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4013      	ands	r3, r2
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bc80      	pop	{r7}
 8008be4:	4770      	bx	lr

08008be6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e042      	b.n	8008c7e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d106      	bne.n	8008c10 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7f9 ffa4 	bl	8002b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2224      	movs	r2, #36	; 0x24
 8008c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f022 0201 	bic.w	r2, r2, #1
 8008c26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fc49 	bl	80094c0 <UART_SetConfig>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d101      	bne.n	8008c38 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e022      	b.n	8008c7e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 feb1 	bl	80099a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f042 0201 	orr.w	r2, r2, #1
 8008c74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 ff37 	bl	8009aea <UART_CheckIdleState>
 8008c7c:	4603      	mov	r3, r0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
	...

08008c88 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b08a      	sub	sp, #40	; 0x28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	4613      	mov	r3, r2
 8008c94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c9c:	2b20      	cmp	r3, #32
 8008c9e:	d142      	bne.n	8008d26 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d002      	beq.n	8008cac <HAL_UART_Receive_IT+0x24>
 8008ca6:	88fb      	ldrh	r3, [r7, #6]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d101      	bne.n	8008cb0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e03b      	b.n	8008d28 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d101      	bne.n	8008cbe <HAL_UART_Receive_IT+0x36>
 8008cba:	2302      	movs	r3, #2
 8008cbc:	e034      	b.n	8008d28 <HAL_UART_Receive_IT+0xa0>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a17      	ldr	r2, [pc, #92]	; (8008d30 <HAL_UART_Receive_IT+0xa8>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d01f      	beq.n	8008d16 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d018      	beq.n	8008d16 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d02:	623b      	str	r3, [r7, #32]
 8008d04:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d06:	69f9      	ldr	r1, [r7, #28]
 8008d08:	6a3a      	ldr	r2, [r7, #32]
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e6      	bne.n	8008ce4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008d16:	88fb      	ldrh	r3, [r7, #6]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	68b9      	ldr	r1, [r7, #8]
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f000 fff7 	bl	8009d10 <UART_Start_Receive_IT>
 8008d22:	4603      	mov	r3, r0
 8008d24:	e000      	b.n	8008d28 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008d26:	2302      	movs	r3, #2
  }
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3728      	adds	r7, #40	; 0x28
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	40008000 	.word	0x40008000

08008d34 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b08a      	sub	sp, #40	; 0x28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d48:	2b20      	cmp	r3, #32
 8008d4a:	d17a      	bne.n	8008e42 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d002      	beq.n	8008d58 <HAL_UART_Transmit_DMA+0x24>
 8008d52:	88fb      	ldrh	r3, [r7, #6]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e073      	b.n	8008e44 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d101      	bne.n	8008d6a <HAL_UART_Transmit_DMA+0x36>
 8008d66:	2302      	movs	r3, #2
 8008d68:	e06c      	b.n	8008e44 <HAL_UART_Transmit_DMA+0x110>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	88fa      	ldrh	r2, [r7, #6]
 8008d7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	88fa      	ldrh	r2, [r7, #6]
 8008d84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2221      	movs	r2, #33	; 0x21
 8008d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d02c      	beq.n	8008dfa <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008da4:	4a29      	ldr	r2, [pc, #164]	; (8008e4c <HAL_UART_Transmit_DMA+0x118>)
 8008da6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dac:	4a28      	ldr	r2, [pc, #160]	; (8008e50 <HAL_UART_Transmit_DMA+0x11c>)
 8008dae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008db4:	4a27      	ldr	r2, [pc, #156]	; (8008e54 <HAL_UART_Transmit_DMA+0x120>)
 8008db6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dc8:	4619      	mov	r1, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3328      	adds	r3, #40	; 0x28
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	88fb      	ldrh	r3, [r7, #6]
 8008dd4:	f7fb fd86 	bl	80048e4 <HAL_DMA_Start_IT>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00d      	beq.n	8008dfa <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2210      	movs	r2, #16
 8008de2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2220      	movs	r2, #32
 8008df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e024      	b.n	8008e44 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2240      	movs	r2, #64	; 0x40
 8008e00:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	3308      	adds	r3, #8
 8008e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	e853 3f00 	ldrex	r3, [r3]
 8008e18:	613b      	str	r3, [r7, #16]
   return(result);
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e20:	627b      	str	r3, [r7, #36]	; 0x24
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3308      	adds	r3, #8
 8008e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e2a:	623a      	str	r2, [r7, #32]
 8008e2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2e:	69f9      	ldr	r1, [r7, #28]
 8008e30:	6a3a      	ldr	r2, [r7, #32]
 8008e32:	e841 2300 	strex	r3, r2, [r1]
 8008e36:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1e5      	bne.n	8008e0a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	e000      	b.n	8008e44 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8008e42:	2302      	movs	r3, #2
  }
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3728      	adds	r7, #40	; 0x28
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	0800a1fb 	.word	0x0800a1fb
 8008e50:	0800a295 	.word	0x0800a295
 8008e54:	0800a40f 	.word	0x0800a40f

08008e58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b0ba      	sub	sp, #232	; 0xe8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008e82:	f640 030f 	movw	r3, #2063	; 0x80f
 8008e86:	4013      	ands	r3, r2
 8008e88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008e8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d11b      	bne.n	8008ecc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e98:	f003 0320 	and.w	r3, r3, #32
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d015      	beq.n	8008ecc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ea4:	f003 0320 	and.w	r3, r3, #32
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d105      	bne.n	8008eb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d009      	beq.n	8008ecc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 82d6 	beq.w	800946e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	4798      	blx	r3
      }
      return;
 8008eca:	e2d0      	b.n	800946e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ecc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f000 811f 	beq.w	8009114 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ed6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008eda:	4b8b      	ldr	r3, [pc, #556]	; (8009108 <HAL_UART_IRQHandler+0x2b0>)
 8008edc:	4013      	ands	r3, r2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d106      	bne.n	8008ef0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008ee2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008ee6:	4b89      	ldr	r3, [pc, #548]	; (800910c <HAL_UART_IRQHandler+0x2b4>)
 8008ee8:	4013      	ands	r3, r2
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f000 8112 	beq.w	8009114 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ef4:	f003 0301 	and.w	r3, r3, #1
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d011      	beq.n	8008f20 <HAL_UART_IRQHandler+0xc8>
 8008efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00b      	beq.n	8008f20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f16:	f043 0201 	orr.w	r2, r3, #1
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f24:	f003 0302 	and.w	r3, r3, #2
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d011      	beq.n	8008f50 <HAL_UART_IRQHandler+0xf8>
 8008f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f30:	f003 0301 	and.w	r3, r3, #1
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00b      	beq.n	8008f50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f46:	f043 0204 	orr.w	r2, r3, #4
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d011      	beq.n	8008f80 <HAL_UART_IRQHandler+0x128>
 8008f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00b      	beq.n	8008f80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2204      	movs	r2, #4
 8008f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f76:	f043 0202 	orr.w	r2, r3, #2
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f84:	f003 0308 	and.w	r3, r3, #8
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d017      	beq.n	8008fbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f90:	f003 0320 	and.w	r3, r3, #32
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d105      	bne.n	8008fa4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008f98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008f9c:	4b5a      	ldr	r3, [pc, #360]	; (8009108 <HAL_UART_IRQHandler+0x2b0>)
 8008f9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00b      	beq.n	8008fbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2208      	movs	r2, #8
 8008faa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fb2:	f043 0208 	orr.w	r2, r3, #8
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d012      	beq.n	8008fee <HAL_UART_IRQHandler+0x196>
 8008fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00c      	beq.n	8008fee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fe4:	f043 0220 	orr.w	r2, r3, #32
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f000 823c 	beq.w	8009472 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ffe:	f003 0320 	and.w	r3, r3, #32
 8009002:	2b00      	cmp	r3, #0
 8009004:	d013      	beq.n	800902e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800900a:	f003 0320 	and.w	r3, r3, #32
 800900e:	2b00      	cmp	r3, #0
 8009010:	d105      	bne.n	800901e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d007      	beq.n	800902e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009022:	2b00      	cmp	r3, #0
 8009024:	d003      	beq.n	800902e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009034:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009042:	2b40      	cmp	r3, #64	; 0x40
 8009044:	d005      	beq.n	8009052 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800904a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800904e:	2b00      	cmp	r3, #0
 8009050:	d04f      	beq.n	80090f2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f001 f86c 	bl	800a130 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009062:	2b40      	cmp	r3, #64	; 0x40
 8009064:	d141      	bne.n	80090ea <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3308      	adds	r3, #8
 800906c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800907c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	3308      	adds	r3, #8
 800908e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009092:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800909e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80090aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1d9      	bne.n	8009066 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d013      	beq.n	80090e2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090be:	4a14      	ldr	r2, [pc, #80]	; (8009110 <HAL_UART_IRQHandler+0x2b8>)
 80090c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fb fce8 	bl	8004a9c <HAL_DMA_Abort_IT>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d017      	beq.n	8009102 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80090dc:	4610      	mov	r0, r2
 80090de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e0:	e00f      	b.n	8009102 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f9e2 	bl	80094ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e8:	e00b      	b.n	8009102 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f9de 	bl	80094ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f0:	e007      	b.n	8009102 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f9da 	bl	80094ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009100:	e1b7      	b.n	8009472 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009102:	bf00      	nop
    return;
 8009104:	e1b5      	b.n	8009472 <HAL_UART_IRQHandler+0x61a>
 8009106:	bf00      	nop
 8009108:	10000001 	.word	0x10000001
 800910c:	04000120 	.word	0x04000120
 8009110:	0800a48f 	.word	0x0800a48f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009118:	2b01      	cmp	r3, #1
 800911a:	f040 814a 	bne.w	80093b2 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800911e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009122:	f003 0310 	and.w	r3, r3, #16
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 8143 	beq.w	80093b2 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800912c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009130:	f003 0310 	and.w	r3, r3, #16
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 813c 	beq.w	80093b2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2210      	movs	r2, #16
 8009140:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914c:	2b40      	cmp	r3, #64	; 0x40
 800914e:	f040 80b5 	bne.w	80092bc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800915e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009162:	2b00      	cmp	r3, #0
 8009164:	f000 8187 	beq.w	8009476 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800916e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009172:	429a      	cmp	r2, r3
 8009174:	f080 817f 	bcs.w	8009476 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800917e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f003 0320 	and.w	r3, r3, #32
 800918e:	2b00      	cmp	r3, #0
 8009190:	f040 8086 	bne.w	80092a0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091a0:	e853 3f00 	ldrex	r3, [r3]
 80091a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	461a      	mov	r2, r3
 80091ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80091c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80091ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80091d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1da      	bne.n	8009194 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	3308      	adds	r3, #8
 80091e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091e8:	e853 3f00 	ldrex	r3, [r3]
 80091ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80091ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091f0:	f023 0301 	bic.w	r3, r3, #1
 80091f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3308      	adds	r3, #8
 80091fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009202:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009206:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009208:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800920a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800920e:	e841 2300 	strex	r3, r2, [r1]
 8009212:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1e1      	bne.n	80091de <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	3308      	adds	r3, #8
 8009220:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009224:	e853 3f00 	ldrex	r3, [r3]
 8009228:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800922a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800922c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009230:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3308      	adds	r3, #8
 800923a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800923e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009240:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009242:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009244:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009246:	e841 2300 	strex	r3, r2, [r1]
 800924a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800924c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1e3      	bne.n	800921a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2220      	movs	r2, #32
 8009256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009268:	e853 3f00 	ldrex	r3, [r3]
 800926c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800926e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009270:	f023 0310 	bic.w	r3, r3, #16
 8009274:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	461a      	mov	r2, r3
 800927e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009282:	65bb      	str	r3, [r7, #88]	; 0x58
 8009284:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009286:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800928a:	e841 2300 	strex	r3, r2, [r1]
 800928e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1e4      	bne.n	8009260 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800929a:	4618      	mov	r0, r3
 800929c:	f7fb fba0 	bl	80049e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	4619      	mov	r1, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f7f8 fc8b 	bl	8001bd0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80092ba:	e0dc      	b.n	8009476 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 80ce 	beq.w	800947a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 80092de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 80c9 	beq.w	800947a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	461a      	mov	r2, r3
 8009306:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800930a:	647b      	str	r3, [r7, #68]	; 0x44
 800930c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009310:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009312:	e841 2300 	strex	r3, r2, [r1]
 8009316:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1e4      	bne.n	80092e8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3308      	adds	r3, #8
 8009324:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009328:	e853 3f00 	ldrex	r3, [r3]
 800932c:	623b      	str	r3, [r7, #32]
   return(result);
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009334:	f023 0301 	bic.w	r3, r3, #1
 8009338:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3308      	adds	r3, #8
 8009342:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009346:	633a      	str	r2, [r7, #48]	; 0x30
 8009348:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800934c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800934e:	e841 2300 	strex	r3, r2, [r1]
 8009352:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1e1      	bne.n	800931e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2220      	movs	r2, #32
 800935e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	e853 3f00 	ldrex	r3, [r3]
 800937a:	60fb      	str	r3, [r7, #12]
   return(result);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f023 0310 	bic.w	r3, r3, #16
 8009382:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009390:	61fb      	str	r3, [r7, #28]
 8009392:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009394:	69b9      	ldr	r1, [r7, #24]
 8009396:	69fa      	ldr	r2, [r7, #28]
 8009398:	e841 2300 	strex	r3, r2, [r1]
 800939c:	617b      	str	r3, [r7, #20]
   return(result);
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e4      	bne.n	800936e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093a8:	4619      	mov	r1, r3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7f8 fc10 	bl	8001bd0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80093b0:	e063      	b.n	800947a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80093b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00e      	beq.n	80093dc <HAL_UART_IRQHandler+0x584>
 80093be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d008      	beq.n	80093dc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80093d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f001 fcf7 	bl	800adc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093da:	e051      	b.n	8009480 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80093dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d014      	beq.n	8009412 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80093e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d105      	bne.n	8009400 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80093f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d008      	beq.n	8009412 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009404:	2b00      	cmp	r3, #0
 8009406:	d03a      	beq.n	800947e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	4798      	blx	r3
    }
    return;
 8009410:	e035      	b.n	800947e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941a:	2b00      	cmp	r3, #0
 800941c:	d009      	beq.n	8009432 <HAL_UART_IRQHandler+0x5da>
 800941e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f001 f845 	bl	800a4ba <UART_EndTransmit_IT>
    return;
 8009430:	e026      	b.n	8009480 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009436:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d009      	beq.n	8009452 <HAL_UART_IRQHandler+0x5fa>
 800943e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009442:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d003      	beq.n	8009452 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f001 fcce 	bl	800adec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009450:	e016      	b.n	8009480 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009456:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800945a:	2b00      	cmp	r3, #0
 800945c:	d010      	beq.n	8009480 <HAL_UART_IRQHandler+0x628>
 800945e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009462:	2b00      	cmp	r3, #0
 8009464:	da0c      	bge.n	8009480 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f001 fcb7 	bl	800adda <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800946c:	e008      	b.n	8009480 <HAL_UART_IRQHandler+0x628>
      return;
 800946e:	bf00      	nop
 8009470:	e006      	b.n	8009480 <HAL_UART_IRQHandler+0x628>
    return;
 8009472:	bf00      	nop
 8009474:	e004      	b.n	8009480 <HAL_UART_IRQHandler+0x628>
      return;
 8009476:	bf00      	nop
 8009478:	e002      	b.n	8009480 <HAL_UART_IRQHandler+0x628>
      return;
 800947a:	bf00      	nop
 800947c:	e000      	b.n	8009480 <HAL_UART_IRQHandler+0x628>
    return;
 800947e:	bf00      	nop
  }
}
 8009480:	37e8      	adds	r7, #232	; 0xe8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop

08009488 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	bc80      	pop	{r7}
 8009498:	4770      	bx	lr

0800949a <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800949a:	b480      	push	{r7}
 800949c:	b083      	sub	sp, #12
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80094a2:	bf00      	nop
 80094a4:	370c      	adds	r7, #12
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bc80      	pop	{r7}
 80094aa:	4770      	bx	lr

080094ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80094b4:	bf00      	nop
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bc80      	pop	{r7}
 80094bc:	4770      	bx	lr
	...

080094c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094c4:	b08c      	sub	sp, #48	; 0x30
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80094ca:	2300      	movs	r3, #0
 80094cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	689a      	ldr	r2, [r3, #8]
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	431a      	orrs	r2, r3
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	431a      	orrs	r2, r3
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	4b94      	ldr	r3, [pc, #592]	; (8009740 <UART_SetConfig+0x280>)
 80094f0:	4013      	ands	r3, r2
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	6812      	ldr	r2, [r2, #0]
 80094f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094f8:	430b      	orrs	r3, r1
 80094fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	68da      	ldr	r2, [r3, #12]
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	430a      	orrs	r2, r1
 8009510:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a89      	ldr	r2, [pc, #548]	; (8009744 <UART_SetConfig+0x284>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d004      	beq.n	800952c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009528:	4313      	orrs	r3, r2
 800952a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009536:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	6812      	ldr	r2, [r2, #0]
 800953e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009540:	430b      	orrs	r3, r1
 8009542:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954a:	f023 010f 	bic.w	r1, r3, #15
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	430a      	orrs	r2, r1
 8009558:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a7a      	ldr	r2, [pc, #488]	; (8009748 <UART_SetConfig+0x288>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d127      	bne.n	80095b4 <UART_SetConfig+0xf4>
 8009564:	2003      	movs	r0, #3
 8009566:	f7ff fb1d 	bl	8008ba4 <LL_RCC_GetUSARTClockSource>
 800956a:	4603      	mov	r3, r0
 800956c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8009570:	2b03      	cmp	r3, #3
 8009572:	d81b      	bhi.n	80095ac <UART_SetConfig+0xec>
 8009574:	a201      	add	r2, pc, #4	; (adr r2, 800957c <UART_SetConfig+0xbc>)
 8009576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957a:	bf00      	nop
 800957c:	0800958d 	.word	0x0800958d
 8009580:	0800959d 	.word	0x0800959d
 8009584:	08009595 	.word	0x08009595
 8009588:	080095a5 	.word	0x080095a5
 800958c:	2301      	movs	r3, #1
 800958e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009592:	e080      	b.n	8009696 <UART_SetConfig+0x1d6>
 8009594:	2302      	movs	r3, #2
 8009596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800959a:	e07c      	b.n	8009696 <UART_SetConfig+0x1d6>
 800959c:	2304      	movs	r3, #4
 800959e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095a2:	e078      	b.n	8009696 <UART_SetConfig+0x1d6>
 80095a4:	2308      	movs	r3, #8
 80095a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095aa:	e074      	b.n	8009696 <UART_SetConfig+0x1d6>
 80095ac:	2310      	movs	r3, #16
 80095ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095b2:	e070      	b.n	8009696 <UART_SetConfig+0x1d6>
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a64      	ldr	r2, [pc, #400]	; (800974c <UART_SetConfig+0x28c>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d138      	bne.n	8009630 <UART_SetConfig+0x170>
 80095be:	200c      	movs	r0, #12
 80095c0:	f7ff faf0 	bl	8008ba4 <LL_RCC_GetUSARTClockSource>
 80095c4:	4603      	mov	r3, r0
 80095c6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80095ca:	2b0c      	cmp	r3, #12
 80095cc:	d82c      	bhi.n	8009628 <UART_SetConfig+0x168>
 80095ce:	a201      	add	r2, pc, #4	; (adr r2, 80095d4 <UART_SetConfig+0x114>)
 80095d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d4:	08009609 	.word	0x08009609
 80095d8:	08009629 	.word	0x08009629
 80095dc:	08009629 	.word	0x08009629
 80095e0:	08009629 	.word	0x08009629
 80095e4:	08009619 	.word	0x08009619
 80095e8:	08009629 	.word	0x08009629
 80095ec:	08009629 	.word	0x08009629
 80095f0:	08009629 	.word	0x08009629
 80095f4:	08009611 	.word	0x08009611
 80095f8:	08009629 	.word	0x08009629
 80095fc:	08009629 	.word	0x08009629
 8009600:	08009629 	.word	0x08009629
 8009604:	08009621 	.word	0x08009621
 8009608:	2300      	movs	r3, #0
 800960a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800960e:	e042      	b.n	8009696 <UART_SetConfig+0x1d6>
 8009610:	2302      	movs	r3, #2
 8009612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009616:	e03e      	b.n	8009696 <UART_SetConfig+0x1d6>
 8009618:	2304      	movs	r3, #4
 800961a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800961e:	e03a      	b.n	8009696 <UART_SetConfig+0x1d6>
 8009620:	2308      	movs	r3, #8
 8009622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009626:	e036      	b.n	8009696 <UART_SetConfig+0x1d6>
 8009628:	2310      	movs	r3, #16
 800962a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800962e:	e032      	b.n	8009696 <UART_SetConfig+0x1d6>
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a43      	ldr	r2, [pc, #268]	; (8009744 <UART_SetConfig+0x284>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d12a      	bne.n	8009690 <UART_SetConfig+0x1d0>
 800963a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800963e:	f7ff fac3 	bl	8008bc8 <LL_RCC_GetLPUARTClockSource>
 8009642:	4603      	mov	r3, r0
 8009644:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009648:	d01a      	beq.n	8009680 <UART_SetConfig+0x1c0>
 800964a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800964e:	d81b      	bhi.n	8009688 <UART_SetConfig+0x1c8>
 8009650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009654:	d00c      	beq.n	8009670 <UART_SetConfig+0x1b0>
 8009656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800965a:	d815      	bhi.n	8009688 <UART_SetConfig+0x1c8>
 800965c:	2b00      	cmp	r3, #0
 800965e:	d003      	beq.n	8009668 <UART_SetConfig+0x1a8>
 8009660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009664:	d008      	beq.n	8009678 <UART_SetConfig+0x1b8>
 8009666:	e00f      	b.n	8009688 <UART_SetConfig+0x1c8>
 8009668:	2300      	movs	r3, #0
 800966a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800966e:	e012      	b.n	8009696 <UART_SetConfig+0x1d6>
 8009670:	2302      	movs	r3, #2
 8009672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009676:	e00e      	b.n	8009696 <UART_SetConfig+0x1d6>
 8009678:	2304      	movs	r3, #4
 800967a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800967e:	e00a      	b.n	8009696 <UART_SetConfig+0x1d6>
 8009680:	2308      	movs	r3, #8
 8009682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009686:	e006      	b.n	8009696 <UART_SetConfig+0x1d6>
 8009688:	2310      	movs	r3, #16
 800968a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800968e:	e002      	b.n	8009696 <UART_SetConfig+0x1d6>
 8009690:	2310      	movs	r3, #16
 8009692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a2a      	ldr	r2, [pc, #168]	; (8009744 <UART_SetConfig+0x284>)
 800969c:	4293      	cmp	r3, r2
 800969e:	f040 80a4 	bne.w	80097ea <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80096a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80096a6:	2b08      	cmp	r3, #8
 80096a8:	d823      	bhi.n	80096f2 <UART_SetConfig+0x232>
 80096aa:	a201      	add	r2, pc, #4	; (adr r2, 80096b0 <UART_SetConfig+0x1f0>)
 80096ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b0:	080096d5 	.word	0x080096d5
 80096b4:	080096f3 	.word	0x080096f3
 80096b8:	080096dd 	.word	0x080096dd
 80096bc:	080096f3 	.word	0x080096f3
 80096c0:	080096e3 	.word	0x080096e3
 80096c4:	080096f3 	.word	0x080096f3
 80096c8:	080096f3 	.word	0x080096f3
 80096cc:	080096f3 	.word	0x080096f3
 80096d0:	080096eb 	.word	0x080096eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096d4:	f7fd ff4a 	bl	800756c <HAL_RCC_GetPCLK1Freq>
 80096d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80096da:	e010      	b.n	80096fe <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096dc:	4b1c      	ldr	r3, [pc, #112]	; (8009750 <UART_SetConfig+0x290>)
 80096de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80096e0:	e00d      	b.n	80096fe <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096e2:	f7fd fe8f 	bl	8007404 <HAL_RCC_GetSysClockFreq>
 80096e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80096e8:	e009      	b.n	80096fe <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80096f0:	e005      	b.n	80096fe <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80096fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80096fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 8137 	beq.w	8009974 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970a:	4a12      	ldr	r2, [pc, #72]	; (8009754 <UART_SetConfig+0x294>)
 800970c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009710:	461a      	mov	r2, r3
 8009712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009714:	fbb3 f3f2 	udiv	r3, r3, r2
 8009718:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	4613      	mov	r3, r2
 8009720:	005b      	lsls	r3, r3, #1
 8009722:	4413      	add	r3, r2
 8009724:	69ba      	ldr	r2, [r7, #24]
 8009726:	429a      	cmp	r2, r3
 8009728:	d305      	bcc.n	8009736 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009730:	69ba      	ldr	r2, [r7, #24]
 8009732:	429a      	cmp	r2, r3
 8009734:	d910      	bls.n	8009758 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800973c:	e11a      	b.n	8009974 <UART_SetConfig+0x4b4>
 800973e:	bf00      	nop
 8009740:	cfff69f3 	.word	0xcfff69f3
 8009744:	40008000 	.word	0x40008000
 8009748:	40013800 	.word	0x40013800
 800974c:	40004400 	.word	0x40004400
 8009750:	00f42400 	.word	0x00f42400
 8009754:	0801cd40 	.word	0x0801cd40
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975a:	2200      	movs	r2, #0
 800975c:	60bb      	str	r3, [r7, #8]
 800975e:	60fa      	str	r2, [r7, #12]
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009764:	4a8e      	ldr	r2, [pc, #568]	; (80099a0 <UART_SetConfig+0x4e0>)
 8009766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800976a:	b29b      	uxth	r3, r3
 800976c:	2200      	movs	r2, #0
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	607a      	str	r2, [r7, #4]
 8009772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009776:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800977a:	f7f7 fb07 	bl	8000d8c <__aeabi_uldivmod>
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	4610      	mov	r0, r2
 8009784:	4619      	mov	r1, r3
 8009786:	f04f 0200 	mov.w	r2, #0
 800978a:	f04f 0300 	mov.w	r3, #0
 800978e:	020b      	lsls	r3, r1, #8
 8009790:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009794:	0202      	lsls	r2, r0, #8
 8009796:	6979      	ldr	r1, [r7, #20]
 8009798:	6849      	ldr	r1, [r1, #4]
 800979a:	0849      	lsrs	r1, r1, #1
 800979c:	2000      	movs	r0, #0
 800979e:	460c      	mov	r4, r1
 80097a0:	4605      	mov	r5, r0
 80097a2:	eb12 0804 	adds.w	r8, r2, r4
 80097a6:	eb43 0905 	adc.w	r9, r3, r5
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	469a      	mov	sl, r3
 80097b2:	4693      	mov	fp, r2
 80097b4:	4652      	mov	r2, sl
 80097b6:	465b      	mov	r3, fp
 80097b8:	4640      	mov	r0, r8
 80097ba:	4649      	mov	r1, r9
 80097bc:	f7f7 fae6 	bl	8000d8c <__aeabi_uldivmod>
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	4613      	mov	r3, r2
 80097c6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80097c8:	6a3b      	ldr	r3, [r7, #32]
 80097ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097ce:	d308      	bcc.n	80097e2 <UART_SetConfig+0x322>
 80097d0:	6a3b      	ldr	r3, [r7, #32]
 80097d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097d6:	d204      	bcs.n	80097e2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	6a3a      	ldr	r2, [r7, #32]
 80097de:	60da      	str	r2, [r3, #12]
 80097e0:	e0c8      	b.n	8009974 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80097e8:	e0c4      	b.n	8009974 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	69db      	ldr	r3, [r3, #28]
 80097ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097f2:	d168      	bne.n	80098c6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80097f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80097f8:	2b08      	cmp	r3, #8
 80097fa:	d828      	bhi.n	800984e <UART_SetConfig+0x38e>
 80097fc:	a201      	add	r2, pc, #4	; (adr r2, 8009804 <UART_SetConfig+0x344>)
 80097fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009802:	bf00      	nop
 8009804:	08009829 	.word	0x08009829
 8009808:	08009831 	.word	0x08009831
 800980c:	08009839 	.word	0x08009839
 8009810:	0800984f 	.word	0x0800984f
 8009814:	0800983f 	.word	0x0800983f
 8009818:	0800984f 	.word	0x0800984f
 800981c:	0800984f 	.word	0x0800984f
 8009820:	0800984f 	.word	0x0800984f
 8009824:	08009847 	.word	0x08009847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009828:	f7fd fea0 	bl	800756c <HAL_RCC_GetPCLK1Freq>
 800982c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800982e:	e014      	b.n	800985a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009830:	f7fd feae 	bl	8007590 <HAL_RCC_GetPCLK2Freq>
 8009834:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009836:	e010      	b.n	800985a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009838:	4b5a      	ldr	r3, [pc, #360]	; (80099a4 <UART_SetConfig+0x4e4>)
 800983a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800983c:	e00d      	b.n	800985a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800983e:	f7fd fde1 	bl	8007404 <HAL_RCC_GetSysClockFreq>
 8009842:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009844:	e009      	b.n	800985a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800984a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800984c:	e005      	b.n	800985a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009858:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 8089 	beq.w	8009974 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	4a4e      	ldr	r2, [pc, #312]	; (80099a0 <UART_SetConfig+0x4e0>)
 8009868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800986c:	461a      	mov	r2, r3
 800986e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009870:	fbb3 f3f2 	udiv	r3, r3, r2
 8009874:	005a      	lsls	r2, r3, #1
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	085b      	lsrs	r3, r3, #1
 800987c:	441a      	add	r2, r3
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	fbb2 f3f3 	udiv	r3, r2, r3
 8009886:	b29b      	uxth	r3, r3
 8009888:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	2b0f      	cmp	r3, #15
 800988e:	d916      	bls.n	80098be <UART_SetConfig+0x3fe>
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009896:	d212      	bcs.n	80098be <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009898:	6a3b      	ldr	r3, [r7, #32]
 800989a:	b29b      	uxth	r3, r3
 800989c:	f023 030f 	bic.w	r3, r3, #15
 80098a0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098a2:	6a3b      	ldr	r3, [r7, #32]
 80098a4:	085b      	lsrs	r3, r3, #1
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	f003 0307 	and.w	r3, r3, #7
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	8bfb      	ldrh	r3, [r7, #30]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	8bfa      	ldrh	r2, [r7, #30]
 80098ba:	60da      	str	r2, [r3, #12]
 80098bc:	e05a      	b.n	8009974 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80098c4:	e056      	b.n	8009974 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80098c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80098ca:	2b08      	cmp	r3, #8
 80098cc:	d827      	bhi.n	800991e <UART_SetConfig+0x45e>
 80098ce:	a201      	add	r2, pc, #4	; (adr r2, 80098d4 <UART_SetConfig+0x414>)
 80098d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d4:	080098f9 	.word	0x080098f9
 80098d8:	08009901 	.word	0x08009901
 80098dc:	08009909 	.word	0x08009909
 80098e0:	0800991f 	.word	0x0800991f
 80098e4:	0800990f 	.word	0x0800990f
 80098e8:	0800991f 	.word	0x0800991f
 80098ec:	0800991f 	.word	0x0800991f
 80098f0:	0800991f 	.word	0x0800991f
 80098f4:	08009917 	.word	0x08009917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098f8:	f7fd fe38 	bl	800756c <HAL_RCC_GetPCLK1Freq>
 80098fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80098fe:	e014      	b.n	800992a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009900:	f7fd fe46 	bl	8007590 <HAL_RCC_GetPCLK2Freq>
 8009904:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009906:	e010      	b.n	800992a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009908:	4b26      	ldr	r3, [pc, #152]	; (80099a4 <UART_SetConfig+0x4e4>)
 800990a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800990c:	e00d      	b.n	800992a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800990e:	f7fd fd79 	bl	8007404 <HAL_RCC_GetSysClockFreq>
 8009912:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009914:	e009      	b.n	800992a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800991a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800991c:	e005      	b.n	800992a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800991e:	2300      	movs	r3, #0
 8009920:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009928:	bf00      	nop
    }

    if (pclk != 0U)
 800992a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992c:	2b00      	cmp	r3, #0
 800992e:	d021      	beq.n	8009974 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009934:	4a1a      	ldr	r2, [pc, #104]	; (80099a0 <UART_SetConfig+0x4e0>)
 8009936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800993a:	461a      	mov	r2, r3
 800993c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	085b      	lsrs	r3, r3, #1
 8009948:	441a      	add	r2, r3
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009952:	b29b      	uxth	r3, r3
 8009954:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	2b0f      	cmp	r3, #15
 800995a:	d908      	bls.n	800996e <UART_SetConfig+0x4ae>
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009962:	d204      	bcs.n	800996e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6a3a      	ldr	r2, [r7, #32]
 800996a:	60da      	str	r2, [r3, #12]
 800996c:	e002      	b.n	8009974 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	2201      	movs	r2, #1
 8009978:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	2201      	movs	r2, #1
 8009980:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	2200      	movs	r2, #0
 8009988:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	2200      	movs	r2, #0
 800998e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009990:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009994:	4618      	mov	r0, r3
 8009996:	3730      	adds	r7, #48	; 0x30
 8009998:	46bd      	mov	sp, r7
 800999a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800999e:	bf00      	nop
 80099a0:	0801cd40 	.word	0x0801cd40
 80099a4:	00f42400 	.word	0x00f42400

080099a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00a      	beq.n	80099d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	430a      	orrs	r2, r1
 80099d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d6:	f003 0302 	and.w	r3, r3, #2
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00a      	beq.n	80099f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	430a      	orrs	r2, r1
 80099f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f8:	f003 0304 	and.w	r3, r3, #4
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00a      	beq.n	8009a16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	430a      	orrs	r2, r1
 8009a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a1a:	f003 0308 	and.w	r3, r3, #8
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00a      	beq.n	8009a38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	430a      	orrs	r2, r1
 8009a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3c:	f003 0310 	and.w	r3, r3, #16
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00a      	beq.n	8009a5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	430a      	orrs	r2, r1
 8009a58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a5e:	f003 0320 	and.w	r3, r3, #32
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00a      	beq.n	8009a7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	430a      	orrs	r2, r1
 8009a7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d01a      	beq.n	8009abe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	430a      	orrs	r2, r1
 8009a9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aa6:	d10a      	bne.n	8009abe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	430a      	orrs	r2, r1
 8009abc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00a      	beq.n	8009ae0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	430a      	orrs	r2, r1
 8009ade:	605a      	str	r2, [r3, #4]
  }
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bc80      	pop	{r7}
 8009ae8:	4770      	bx	lr

08009aea <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b086      	sub	sp, #24
 8009aee:	af02      	add	r7, sp, #8
 8009af0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009afa:	f7f8 fbe9 	bl	80022d0 <HAL_GetTick>
 8009afe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 0308 	and.w	r3, r3, #8
 8009b0a:	2b08      	cmp	r3, #8
 8009b0c:	d10e      	bne.n	8009b2c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f82f 	bl	8009b80 <UART_WaitOnFlagUntilTimeout>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d001      	beq.n	8009b2c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b28:	2303      	movs	r3, #3
 8009b2a:	e025      	b.n	8009b78 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f003 0304 	and.w	r3, r3, #4
 8009b36:	2b04      	cmp	r3, #4
 8009b38:	d10e      	bne.n	8009b58 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f819 	bl	8009b80 <UART_WaitOnFlagUntilTimeout>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b54:	2303      	movs	r3, #3
 8009b56:	e00f      	b.n	8009b78 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2220      	movs	r2, #32
 8009b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2220      	movs	r2, #32
 8009b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b09c      	sub	sp, #112	; 0x70
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b90:	e0a9      	b.n	8009ce6 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b98:	f000 80a5 	beq.w	8009ce6 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b9c:	f7f8 fb98 	bl	80022d0 <HAL_GetTick>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d302      	bcc.n	8009bb2 <UART_WaitOnFlagUntilTimeout+0x32>
 8009bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d140      	bne.n	8009c34 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bba:	e853 3f00 	ldrex	r3, [r3]
 8009bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009bc6:	667b      	str	r3, [r7, #100]	; 0x64
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	461a      	mov	r2, r3
 8009bce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bd2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bd6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009bd8:	e841 2300 	strex	r3, r2, [r1]
 8009bdc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d1e6      	bne.n	8009bb2 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	3308      	adds	r3, #8
 8009bea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bee:	e853 3f00 	ldrex	r3, [r3]
 8009bf2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf6:	f023 0301 	bic.w	r3, r3, #1
 8009bfa:	663b      	str	r3, [r7, #96]	; 0x60
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	3308      	adds	r3, #8
 8009c02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c04:	64ba      	str	r2, [r7, #72]	; 0x48
 8009c06:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c0c:	e841 2300 	strex	r3, r2, [r1]
 8009c10:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1e5      	bne.n	8009be4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2220      	movs	r2, #32
 8009c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2220      	movs	r2, #32
 8009c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009c30:	2303      	movs	r3, #3
 8009c32:	e069      	b.n	8009d08 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f003 0304 	and.w	r3, r3, #4
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d051      	beq.n	8009ce6 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c50:	d149      	bne.n	8009ce6 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c5a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c64:	e853 3f00 	ldrex	r3, [r3]
 8009c68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	461a      	mov	r2, r3
 8009c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c7c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c82:	e841 2300 	strex	r3, r2, [r1]
 8009c86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1e6      	bne.n	8009c5c <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3308      	adds	r3, #8
 8009c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	e853 3f00 	ldrex	r3, [r3]
 8009c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	f023 0301 	bic.w	r3, r3, #1
 8009ca4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3308      	adds	r3, #8
 8009cac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009cae:	623a      	str	r2, [r7, #32]
 8009cb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb2:	69f9      	ldr	r1, [r7, #28]
 8009cb4:	6a3a      	ldr	r2, [r7, #32]
 8009cb6:	e841 2300 	strex	r3, r2, [r1]
 8009cba:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1e5      	bne.n	8009c8e <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2220      	movs	r2, #32
 8009cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2220      	movs	r2, #32
 8009cce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2220      	movs	r2, #32
 8009cd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	e010      	b.n	8009d08 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	69da      	ldr	r2, [r3, #28]
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	4013      	ands	r3, r2
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	bf0c      	ite	eq
 8009cf6:	2301      	moveq	r3, #1
 8009cf8:	2300      	movne	r3, #0
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	79fb      	ldrb	r3, [r7, #7]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	f43f af46 	beq.w	8009b92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3770      	adds	r7, #112	; 0x70
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b0a3      	sub	sp, #140	; 0x8c
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	88fa      	ldrh	r2, [r7, #6]
 8009d28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	88fa      	ldrh	r2, [r7, #6]
 8009d30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d42:	d10e      	bne.n	8009d62 <UART_Start_Receive_IT+0x52>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d105      	bne.n	8009d58 <UART_Start_Receive_IT+0x48>
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009d52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009d56:	e02d      	b.n	8009db4 <UART_Start_Receive_IT+0xa4>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	22ff      	movs	r2, #255	; 0xff
 8009d5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009d60:	e028      	b.n	8009db4 <UART_Start_Receive_IT+0xa4>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10d      	bne.n	8009d86 <UART_Start_Receive_IT+0x76>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d104      	bne.n	8009d7c <UART_Start_Receive_IT+0x6c>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	22ff      	movs	r2, #255	; 0xff
 8009d76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009d7a:	e01b      	b.n	8009db4 <UART_Start_Receive_IT+0xa4>
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	227f      	movs	r2, #127	; 0x7f
 8009d80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009d84:	e016      	b.n	8009db4 <UART_Start_Receive_IT+0xa4>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d8e:	d10d      	bne.n	8009dac <UART_Start_Receive_IT+0x9c>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d104      	bne.n	8009da2 <UART_Start_Receive_IT+0x92>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	227f      	movs	r2, #127	; 0x7f
 8009d9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009da0:	e008      	b.n	8009db4 <UART_Start_Receive_IT+0xa4>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	223f      	movs	r2, #63	; 0x3f
 8009da6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009daa:	e003      	b.n	8009db4 <UART_Start_Receive_IT+0xa4>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2222      	movs	r2, #34	; 0x22
 8009dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	3308      	adds	r3, #8
 8009dca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dce:	e853 3f00 	ldrex	r3, [r3]
 8009dd2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009dd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dd6:	f043 0301 	orr.w	r3, r3, #1
 8009dda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3308      	adds	r3, #8
 8009de4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009de8:	673a      	str	r2, [r7, #112]	; 0x70
 8009dea:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009dee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009df0:	e841 2300 	strex	r3, r2, [r1]
 8009df4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009df6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1e3      	bne.n	8009dc4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e04:	d153      	bne.n	8009eae <UART_Start_Receive_IT+0x19e>
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009e0c:	88fa      	ldrh	r2, [r7, #6]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d34d      	bcc.n	8009eae <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e1a:	d107      	bne.n	8009e2c <UART_Start_Receive_IT+0x11c>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d103      	bne.n	8009e2c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	4a4a      	ldr	r2, [pc, #296]	; (8009f50 <UART_Start_Receive_IT+0x240>)
 8009e28:	671a      	str	r2, [r3, #112]	; 0x70
 8009e2a:	e002      	b.n	8009e32 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	4a49      	ldr	r2, [pc, #292]	; (8009f54 <UART_Start_Receive_IT+0x244>)
 8009e30:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d01a      	beq.n	8009e78 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e4a:	e853 3f00 	ldrex	r3, [r3]
 8009e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009e64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e66:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e6c:	e841 2300 	strex	r3, r2, [r1]
 8009e70:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1e4      	bne.n	8009e42 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3308      	adds	r3, #8
 8009e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e82:	e853 3f00 	ldrex	r3, [r3]
 8009e86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3308      	adds	r3, #8
 8009e96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009e98:	64ba      	str	r2, [r7, #72]	; 0x48
 8009e9a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009e9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ea0:	e841 2300 	strex	r3, r2, [r1]
 8009ea4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1e5      	bne.n	8009e78 <UART_Start_Receive_IT+0x168>
 8009eac:	e04a      	b.n	8009f44 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eb6:	d107      	bne.n	8009ec8 <UART_Start_Receive_IT+0x1b8>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d103      	bne.n	8009ec8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	4a25      	ldr	r2, [pc, #148]	; (8009f58 <UART_Start_Receive_IT+0x248>)
 8009ec4:	671a      	str	r2, [r3, #112]	; 0x70
 8009ec6:	e002      	b.n	8009ece <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	4a24      	ldr	r2, [pc, #144]	; (8009f5c <UART_Start_Receive_IT+0x24c>)
 8009ecc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d019      	beq.n	8009f12 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	e853 3f00 	ldrex	r3, [r3]
 8009eea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009ef2:	677b      	str	r3, [r7, #116]	; 0x74
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	461a      	mov	r2, r3
 8009efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009efc:	637b      	str	r3, [r7, #52]	; 0x34
 8009efe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f04:	e841 2300 	strex	r3, r2, [r1]
 8009f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1e6      	bne.n	8009ede <UART_Start_Receive_IT+0x1ce>
 8009f10:	e018      	b.n	8009f44 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	e853 3f00 	ldrex	r3, [r3]
 8009f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	f043 0320 	orr.w	r3, r3, #32
 8009f26:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f30:	623b      	str	r3, [r7, #32]
 8009f32:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f34:	69f9      	ldr	r1, [r7, #28]
 8009f36:	6a3a      	ldr	r2, [r7, #32]
 8009f38:	e841 2300 	strex	r3, r2, [r1]
 8009f3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1e6      	bne.n	8009f12 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	378c      	adds	r7, #140	; 0x8c
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bc80      	pop	{r7}
 8009f4e:	4770      	bx	lr
 8009f50:	0800aac9 	.word	0x0800aac9
 8009f54:	0800a7d1 	.word	0x0800a7d1
 8009f58:	0800a671 	.word	0x0800a671
 8009f5c:	0800a511 	.word	0x0800a511

08009f60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b096      	sub	sp, #88	; 0x58
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	88fa      	ldrh	r2, [r7, #6]
 8009f78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2222      	movs	r2, #34	; 0x22
 8009f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d02c      	beq.n	8009fee <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f98:	4a42      	ldr	r2, [pc, #264]	; (800a0a4 <UART_Start_Receive_DMA+0x144>)
 8009f9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fa0:	4a41      	ldr	r2, [pc, #260]	; (800a0a8 <UART_Start_Receive_DMA+0x148>)
 8009fa2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fa8:	4a40      	ldr	r2, [pc, #256]	; (800a0ac <UART_Start_Receive_DMA+0x14c>)
 8009faa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3324      	adds	r3, #36	; 0x24
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	88fb      	ldrh	r3, [r7, #6]
 8009fc8:	f7fa fc8c 	bl	80048e4 <HAL_DMA_Start_IT>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00d      	beq.n	8009fee <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2210      	movs	r2, #16
 8009fd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2220      	movs	r2, #32
 8009fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e055      	b.n	800a09a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d018      	beq.n	800a030 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a006:	e853 3f00 	ldrex	r3, [r3]
 800a00a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a012:	657b      	str	r3, [r7, #84]	; 0x54
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	461a      	mov	r2, r3
 800a01a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a01c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a01e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a020:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a024:	e841 2300 	strex	r3, r2, [r1]
 800a028:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a02a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e6      	bne.n	8009ffe <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3308      	adds	r3, #8
 800a036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03a:	e853 3f00 	ldrex	r3, [r3]
 800a03e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a042:	f043 0301 	orr.w	r3, r3, #1
 800a046:	653b      	str	r3, [r7, #80]	; 0x50
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3308      	adds	r3, #8
 800a04e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a050:	637a      	str	r2, [r7, #52]	; 0x34
 800a052:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a054:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a058:	e841 2300 	strex	r3, r2, [r1]
 800a05c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1e5      	bne.n	800a030 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	3308      	adds	r3, #8
 800a06a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	e853 3f00 	ldrex	r3, [r3]
 800a072:	613b      	str	r3, [r7, #16]
   return(result);
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a07a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3308      	adds	r3, #8
 800a082:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a084:	623a      	str	r2, [r7, #32]
 800a086:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a088:	69f9      	ldr	r1, [r7, #28]
 800a08a:	6a3a      	ldr	r2, [r7, #32]
 800a08c:	e841 2300 	strex	r3, r2, [r1]
 800a090:	61bb      	str	r3, [r7, #24]
   return(result);
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1e5      	bne.n	800a064 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3758      	adds	r7, #88	; 0x58
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	0800a2b1 	.word	0x0800a2b1
 800a0a8:	0800a3d7 	.word	0x0800a3d7
 800a0ac:	0800a40f 	.word	0x0800a40f

0800a0b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b08f      	sub	sp, #60	; 0x3c
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0be:	6a3b      	ldr	r3, [r7, #32]
 800a0c0:	e853 3f00 	ldrex	r3, [r3]
 800a0c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a0cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0d8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0de:	e841 2300 	strex	r3, r2, [r1]
 800a0e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d1e6      	bne.n	800a0b8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	3308      	adds	r3, #8
 800a0f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	e853 3f00 	ldrex	r3, [r3]
 800a0f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a100:	633b      	str	r3, [r7, #48]	; 0x30
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	3308      	adds	r3, #8
 800a108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a10a:	61ba      	str	r2, [r7, #24]
 800a10c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10e:	6979      	ldr	r1, [r7, #20]
 800a110:	69ba      	ldr	r2, [r7, #24]
 800a112:	e841 2300 	strex	r3, r2, [r1]
 800a116:	613b      	str	r3, [r7, #16]
   return(result);
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1e5      	bne.n	800a0ea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2220      	movs	r2, #32
 800a122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a126:	bf00      	nop
 800a128:	373c      	adds	r7, #60	; 0x3c
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bc80      	pop	{r7}
 800a12e:	4770      	bx	lr

0800a130 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a130:	b480      	push	{r7}
 800a132:	b095      	sub	sp, #84	; 0x54
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a140:	e853 3f00 	ldrex	r3, [r3]
 800a144:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a148:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a14c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	461a      	mov	r2, r3
 800a154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a156:	643b      	str	r3, [r7, #64]	; 0x40
 800a158:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a15c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a15e:	e841 2300 	strex	r3, r2, [r1]
 800a162:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1e6      	bne.n	800a138 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3308      	adds	r3, #8
 800a170:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	e853 3f00 	ldrex	r3, [r3]
 800a178:	61fb      	str	r3, [r7, #28]
   return(result);
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a180:	f023 0301 	bic.w	r3, r3, #1
 800a184:	64bb      	str	r3, [r7, #72]	; 0x48
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	3308      	adds	r3, #8
 800a18c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a18e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a190:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a196:	e841 2300 	strex	r3, r2, [r1]
 800a19a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1e3      	bne.n	800a16a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d118      	bne.n	800a1dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	e853 3f00 	ldrex	r3, [r3]
 800a1b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	f023 0310 	bic.w	r3, r3, #16
 800a1be:	647b      	str	r3, [r7, #68]	; 0x44
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1c8:	61bb      	str	r3, [r7, #24]
 800a1ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1cc:	6979      	ldr	r1, [r7, #20]
 800a1ce:	69ba      	ldr	r2, [r7, #24]
 800a1d0:	e841 2300 	strex	r3, r2, [r1]
 800a1d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1e6      	bne.n	800a1aa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2220      	movs	r2, #32
 800a1e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a1f0:	bf00      	nop
 800a1f2:	3754      	adds	r7, #84	; 0x54
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bc80      	pop	{r7}
 800a1f8:	4770      	bx	lr

0800a1fa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b090      	sub	sp, #64	; 0x40
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a206:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 0320 	and.w	r3, r3, #32
 800a212:	2b00      	cmp	r3, #0
 800a214:	d137      	bne.n	800a286 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a218:	2200      	movs	r2, #0
 800a21a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	3308      	adds	r3, #8
 800a224:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a228:	e853 3f00 	ldrex	r3, [r3]
 800a22c:	623b      	str	r3, [r7, #32]
   return(result);
 800a22e:	6a3b      	ldr	r3, [r7, #32]
 800a230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a234:	63bb      	str	r3, [r7, #56]	; 0x38
 800a236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	3308      	adds	r3, #8
 800a23c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a23e:	633a      	str	r2, [r7, #48]	; 0x30
 800a240:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a242:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a246:	e841 2300 	strex	r3, r2, [r1]
 800a24a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1e5      	bne.n	800a21e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	e853 3f00 	ldrex	r3, [r3]
 800a25e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a266:	637b      	str	r3, [r7, #52]	; 0x34
 800a268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	461a      	mov	r2, r3
 800a26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a270:	61fb      	str	r3, [r7, #28]
 800a272:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a274:	69b9      	ldr	r1, [r7, #24]
 800a276:	69fa      	ldr	r2, [r7, #28]
 800a278:	e841 2300 	strex	r3, r2, [r1]
 800a27c:	617b      	str	r3, [r7, #20]
   return(result);
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1e6      	bne.n	800a252 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a284:	e002      	b.n	800a28c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a286:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a288:	f7f8 feaa 	bl	8002fe0 <HAL_UART_TxCpltCallback>
}
 800a28c:	bf00      	nop
 800a28e:	3740      	adds	r7, #64	; 0x40
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f7ff f8f0 	bl	8009488 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2a8:	bf00      	nop
 800a2aa:	3710      	adds	r7, #16
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b09c      	sub	sp, #112	; 0x70
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2bc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 0320 	and.w	r3, r3, #32
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d171      	bne.n	800a3b0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a2cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2dc:	e853 3f00 	ldrex	r3, [r3]
 800a2e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a2e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2e8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2f2:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2fa:	e841 2300 	strex	r3, r2, [r1]
 800a2fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1e6      	bne.n	800a2d4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	3308      	adds	r3, #8
 800a30c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a310:	e853 3f00 	ldrex	r3, [r3]
 800a314:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a318:	f023 0301 	bic.w	r3, r3, #1
 800a31c:	667b      	str	r3, [r7, #100]	; 0x64
 800a31e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	3308      	adds	r3, #8
 800a324:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a326:	647a      	str	r2, [r7, #68]	; 0x44
 800a328:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a32c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a32e:	e841 2300 	strex	r3, r2, [r1]
 800a332:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1e5      	bne.n	800a306 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a33a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	3308      	adds	r3, #8
 800a340:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a344:	e853 3f00 	ldrex	r3, [r3]
 800a348:	623b      	str	r3, [r7, #32]
   return(result);
 800a34a:	6a3b      	ldr	r3, [r7, #32]
 800a34c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a350:	663b      	str	r3, [r7, #96]	; 0x60
 800a352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3308      	adds	r3, #8
 800a358:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a35a:	633a      	str	r2, [r7, #48]	; 0x30
 800a35c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a362:	e841 2300 	strex	r3, r2, [r1]
 800a366:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1e5      	bne.n	800a33a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a36e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a370:	2220      	movs	r2, #32
 800a372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d118      	bne.n	800a3b0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a37e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	e853 3f00 	ldrex	r3, [r3]
 800a38a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f023 0310 	bic.w	r3, r3, #16
 800a392:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	461a      	mov	r2, r3
 800a39a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a39c:	61fb      	str	r3, [r7, #28]
 800a39e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a0:	69b9      	ldr	r1, [r7, #24]
 800a3a2:	69fa      	ldr	r2, [r7, #28]
 800a3a4:	e841 2300 	strex	r3, r2, [r1]
 800a3a8:	617b      	str	r3, [r7, #20]
   return(result);
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1e6      	bne.n	800a37e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d107      	bne.n	800a3c8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a3be:	4619      	mov	r1, r3
 800a3c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3c2:	f7f7 fc05 	bl	8001bd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3c6:	e002      	b.n	800a3ce <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a3c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3ca:	f7f8 fe1f 	bl	800300c <HAL_UART_RxCpltCallback>
}
 800a3ce:	bf00      	nop
 800a3d0:	3770      	adds	r7, #112	; 0x70
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b084      	sub	sp, #16
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d109      	bne.n	800a400 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a3f2:	085b      	lsrs	r3, r3, #1
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f7f7 fbe9 	bl	8001bd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3fe:	e002      	b.n	800a406 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f7ff f84a 	bl	800949a <HAL_UART_RxHalfCpltCallback>
}
 800a406:	bf00      	nop
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b086      	sub	sp, #24
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a422:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a42a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a436:	2b80      	cmp	r3, #128	; 0x80
 800a438:	d109      	bne.n	800a44e <UART_DMAError+0x40>
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	2b21      	cmp	r3, #33	; 0x21
 800a43e:	d106      	bne.n	800a44e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	2200      	movs	r2, #0
 800a444:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a448:	6978      	ldr	r0, [r7, #20]
 800a44a:	f7ff fe31 	bl	800a0b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a458:	2b40      	cmp	r3, #64	; 0x40
 800a45a:	d109      	bne.n	800a470 <UART_DMAError+0x62>
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2b22      	cmp	r3, #34	; 0x22
 800a460:	d106      	bne.n	800a470 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	2200      	movs	r2, #0
 800a466:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a46a:	6978      	ldr	r0, [r7, #20]
 800a46c:	f7ff fe60 	bl	800a130 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a476:	f043 0210 	orr.w	r2, r3, #16
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a480:	6978      	ldr	r0, [r7, #20]
 800a482:	f7ff f813 	bl	80094ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a486:	bf00      	nop
 800a488:	3718      	adds	r7, #24
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b084      	sub	sp, #16
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	f7fe fffd 	bl	80094ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4b2:	bf00      	nop
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b088      	sub	sp, #32
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	e853 3f00 	ldrex	r3, [r3]
 800a4ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4d6:	61fb      	str	r3, [r7, #28]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	61bb      	str	r3, [r7, #24]
 800a4e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e4:	6979      	ldr	r1, [r7, #20]
 800a4e6:	69ba      	ldr	r2, [r7, #24]
 800a4e8:	e841 2300 	strex	r3, r2, [r1]
 800a4ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1e6      	bne.n	800a4c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7f8 fd6c 	bl	8002fe0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a508:	bf00      	nop
 800a50a:	3720      	adds	r7, #32
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b096      	sub	sp, #88	; 0x58
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a51e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a528:	2b22      	cmp	r3, #34	; 0x22
 800a52a:	f040 8095 	bne.w	800a658 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a534:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a538:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a53c:	b2d9      	uxtb	r1, r3
 800a53e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a542:	b2da      	uxtb	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a548:	400a      	ands	r2, r1
 800a54a:	b2d2      	uxtb	r2, r2
 800a54c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a552:	1c5a      	adds	r2, r3, #1
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a55e:	b29b      	uxth	r3, r3
 800a560:	3b01      	subs	r3, #1
 800a562:	b29a      	uxth	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a570:	b29b      	uxth	r3, r3
 800a572:	2b00      	cmp	r3, #0
 800a574:	d178      	bne.n	800a668 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57e:	e853 3f00 	ldrex	r3, [r3]
 800a582:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a586:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a58a:	653b      	str	r3, [r7, #80]	; 0x50
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	461a      	mov	r2, r3
 800a592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a594:	647b      	str	r3, [r7, #68]	; 0x44
 800a596:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a598:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a59a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a59c:	e841 2300 	strex	r3, r2, [r1]
 800a5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1e6      	bne.n	800a576 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b2:	e853 3f00 	ldrex	r3, [r3]
 800a5b6:	623b      	str	r3, [r7, #32]
   return(result);
 800a5b8:	6a3b      	ldr	r3, [r7, #32]
 800a5ba:	f023 0301 	bic.w	r3, r3, #1
 800a5be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3308      	adds	r3, #8
 800a5c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a5c8:	633a      	str	r2, [r7, #48]	; 0x30
 800a5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5d0:	e841 2300 	strex	r3, r2, [r1]
 800a5d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1e5      	bne.n	800a5a8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2220      	movs	r2, #32
 800a5e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d12e      	bne.n	800a650 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	e853 3f00 	ldrex	r3, [r3]
 800a604:	60fb      	str	r3, [r7, #12]
   return(result);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f023 0310 	bic.w	r3, r3, #16
 800a60c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	461a      	mov	r2, r3
 800a614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a616:	61fb      	str	r3, [r7, #28]
 800a618:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61a:	69b9      	ldr	r1, [r7, #24]
 800a61c:	69fa      	ldr	r2, [r7, #28]
 800a61e:	e841 2300 	strex	r3, r2, [r1]
 800a622:	617b      	str	r3, [r7, #20]
   return(result);
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1e6      	bne.n	800a5f8 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	69db      	ldr	r3, [r3, #28]
 800a630:	f003 0310 	and.w	r3, r3, #16
 800a634:	2b10      	cmp	r3, #16
 800a636:	d103      	bne.n	800a640 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2210      	movs	r2, #16
 800a63e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f7f7 fac1 	bl	8001bd0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a64e:	e00b      	b.n	800a668 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f7f8 fcdb 	bl	800300c <HAL_UART_RxCpltCallback>
}
 800a656:	e007      	b.n	800a668 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	699a      	ldr	r2, [r3, #24]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f042 0208 	orr.w	r2, r2, #8
 800a666:	619a      	str	r2, [r3, #24]
}
 800a668:	bf00      	nop
 800a66a:	3758      	adds	r7, #88	; 0x58
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b096      	sub	sp, #88	; 0x58
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a67e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a688:	2b22      	cmp	r3, #34	; 0x22
 800a68a:	f040 8095 	bne.w	800a7b8 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a69c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a69e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a6a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6b2:	1c9a      	adds	r2, r3, #2
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d178      	bne.n	800a7c8 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6de:	e853 3f00 	ldrex	r3, [r3]
 800a6e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6f4:	643b      	str	r3, [r7, #64]	; 0x40
 800a6f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a6fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6fc:	e841 2300 	strex	r3, r2, [r1]
 800a700:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1e6      	bne.n	800a6d6 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	3308      	adds	r3, #8
 800a70e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	e853 3f00 	ldrex	r3, [r3]
 800a716:	61fb      	str	r3, [r7, #28]
   return(result);
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	f023 0301 	bic.w	r3, r3, #1
 800a71e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	3308      	adds	r3, #8
 800a726:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a728:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a72a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a72c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a72e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a730:	e841 2300 	strex	r3, r2, [r1]
 800a734:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d1e5      	bne.n	800a708 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2220      	movs	r2, #32
 800a740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d12e      	bne.n	800a7b0 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	e853 3f00 	ldrex	r3, [r3]
 800a764:	60bb      	str	r3, [r7, #8]
   return(result);
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	f023 0310 	bic.w	r3, r3, #16
 800a76c:	647b      	str	r3, [r7, #68]	; 0x44
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	461a      	mov	r2, r3
 800a774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a776:	61bb      	str	r3, [r7, #24]
 800a778:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77a:	6979      	ldr	r1, [r7, #20]
 800a77c:	69ba      	ldr	r2, [r7, #24]
 800a77e:	e841 2300 	strex	r3, r2, [r1]
 800a782:	613b      	str	r3, [r7, #16]
   return(result);
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1e6      	bne.n	800a758 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	69db      	ldr	r3, [r3, #28]
 800a790:	f003 0310 	and.w	r3, r3, #16
 800a794:	2b10      	cmp	r3, #16
 800a796:	d103      	bne.n	800a7a0 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2210      	movs	r2, #16
 800a79e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f7f7 fa11 	bl	8001bd0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a7ae:	e00b      	b.n	800a7c8 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7f8 fc2b 	bl	800300c <HAL_UART_RxCpltCallback>
}
 800a7b6:	e007      	b.n	800a7c8 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	699a      	ldr	r2, [r3, #24]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f042 0208 	orr.w	r2, r2, #8
 800a7c6:	619a      	str	r2, [r3, #24]
}
 800a7c8:	bf00      	nop
 800a7ca:	3758      	adds	r7, #88	; 0x58
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b0a6      	sub	sp, #152	; 0x98
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a7de:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	69db      	ldr	r3, [r3, #28]
 800a7e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a806:	2b22      	cmp	r3, #34	; 0x22
 800a808:	f040 814f 	bne.w	800aaaa <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a812:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a816:	e0f6      	b.n	800aa06 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a822:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800a826:	b2d9      	uxtb	r1, r3
 800a828:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800a82c:	b2da      	uxtb	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a832:	400a      	ands	r2, r1
 800a834:	b2d2      	uxtb	r2, r2
 800a836:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a83c:	1c5a      	adds	r2, r3, #1
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a848:	b29b      	uxth	r3, r3
 800a84a:	3b01      	subs	r3, #1
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	69db      	ldr	r3, [r3, #28]
 800a85a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a85e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a862:	f003 0307 	and.w	r3, r3, #7
 800a866:	2b00      	cmp	r3, #0
 800a868:	d053      	beq.n	800a912 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a86a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	2b00      	cmp	r3, #0
 800a874:	d011      	beq.n	800a89a <UART_RxISR_8BIT_FIFOEN+0xca>
 800a876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a87a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00b      	beq.n	800a89a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2201      	movs	r2, #1
 800a888:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a890:	f043 0201 	orr.w	r2, r3, #1
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a89a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a89e:	f003 0302 	and.w	r3, r3, #2
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d011      	beq.n	800a8ca <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a8a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8aa:	f003 0301 	and.w	r3, r3, #1
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00b      	beq.n	800a8ca <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8c0:	f043 0204 	orr.w	r2, r3, #4
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a8ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a8ce:	f003 0304 	and.w	r3, r3, #4
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d011      	beq.n	800a8fa <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a8d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8da:	f003 0301 	and.w	r3, r3, #1
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00b      	beq.n	800a8fa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2204      	movs	r2, #4
 800a8e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8f0:	f043 0202 	orr.w	r2, r3, #2
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a900:	2b00      	cmp	r3, #0
 800a902:	d006      	beq.n	800a912 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7fe fdd1 	bl	80094ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a918:	b29b      	uxth	r3, r3
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d173      	bne.n	800aa06 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a926:	e853 3f00 	ldrex	r3, [r3]
 800a92a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a92c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a92e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a932:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	461a      	mov	r2, r3
 800a93c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a940:	66bb      	str	r3, [r7, #104]	; 0x68
 800a942:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a944:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a946:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a948:	e841 2300 	strex	r3, r2, [r1]
 800a94c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a94e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1e4      	bne.n	800a91e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3308      	adds	r3, #8
 800a95a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a95e:	e853 3f00 	ldrex	r3, [r3]
 800a962:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a96a:	f023 0301 	bic.w	r3, r3, #1
 800a96e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	3308      	adds	r3, #8
 800a976:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a978:	657a      	str	r2, [r7, #84]	; 0x54
 800a97a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a97e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a980:	e841 2300 	strex	r3, r2, [r1]
 800a984:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1e3      	bne.n	800a954 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2220      	movs	r2, #32
 800a990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d12e      	bne.n	800aa00 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b0:	e853 3f00 	ldrex	r3, [r3]
 800a9b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b8:	f023 0310 	bic.w	r3, r3, #16
 800a9bc:	67bb      	str	r3, [r7, #120]	; 0x78
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9c6:	643b      	str	r3, [r7, #64]	; 0x40
 800a9c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9ce:	e841 2300 	strex	r3, r2, [r1]
 800a9d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1e6      	bne.n	800a9a8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	69db      	ldr	r3, [r3, #28]
 800a9e0:	f003 0310 	and.w	r3, r3, #16
 800a9e4:	2b10      	cmp	r3, #16
 800a9e6:	d103      	bne.n	800a9f0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2210      	movs	r2, #16
 800a9ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f7f7 f8e9 	bl	8001bd0 <HAL_UARTEx_RxEventCallback>
 800a9fe:	e002      	b.n	800aa06 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f7f8 fb03 	bl	800300c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aa06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d006      	beq.n	800aa1c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800aa0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aa12:	f003 0320 	and.w	r3, r3, #32
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	f47f aefe 	bne.w	800a818 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa22:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aa26:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d045      	beq.n	800aaba <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aa34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d23e      	bcs.n	800aaba <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	3308      	adds	r3, #8
 800aa42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa44:	6a3b      	ldr	r3, [r7, #32]
 800aa46:	e853 3f00 	ldrex	r3, [r3]
 800aa4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa52:	673b      	str	r3, [r7, #112]	; 0x70
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	3308      	adds	r3, #8
 800aa5a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800aa5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa64:	e841 2300 	strex	r3, r2, [r1]
 800aa68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1e5      	bne.n	800aa3c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4a14      	ldr	r2, [pc, #80]	; (800aac4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800aa74:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	e853 3f00 	ldrex	r3, [r3]
 800aa82:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	f043 0320 	orr.w	r3, r3, #32
 800aa8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	461a      	mov	r2, r3
 800aa92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa94:	61bb      	str	r3, [r7, #24]
 800aa96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa98:	6979      	ldr	r1, [r7, #20]
 800aa9a:	69ba      	ldr	r2, [r7, #24]
 800aa9c:	e841 2300 	strex	r3, r2, [r1]
 800aaa0:	613b      	str	r3, [r7, #16]
   return(result);
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1e6      	bne.n	800aa76 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aaa8:	e007      	b.n	800aaba <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	699a      	ldr	r2, [r3, #24]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f042 0208 	orr.w	r2, r2, #8
 800aab8:	619a      	str	r2, [r3, #24]
}
 800aaba:	bf00      	nop
 800aabc:	3798      	adds	r7, #152	; 0x98
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	0800a511 	.word	0x0800a511

0800aac8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b0a8      	sub	sp, #160	; 0xa0
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aad6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	69db      	ldr	r3, [r3, #28]
 800aae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aafe:	2b22      	cmp	r3, #34	; 0x22
 800ab00:	f040 8153 	bne.w	800adaa <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ab0a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ab0e:	e0fa      	b.n	800ad06 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab16:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800ab22:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800ab26:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	b29a      	uxth	r2, r3
 800ab2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ab32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab38:	1c9a      	adds	r2, r3, #2
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	3b01      	subs	r3, #1
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	69db      	ldr	r3, [r3, #28]
 800ab56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ab5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab5e:	f003 0307 	and.w	r3, r3, #7
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d053      	beq.n	800ac0e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab6a:	f003 0301 	and.w	r3, r3, #1
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d011      	beq.n	800ab96 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ab72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ab76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00b      	beq.n	800ab96 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2201      	movs	r2, #1
 800ab84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab8c:	f043 0201 	orr.w	r2, r3, #1
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab9a:	f003 0302 	and.w	r3, r3, #2
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d011      	beq.n	800abc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800aba2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aba6:	f003 0301 	and.w	r3, r3, #1
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00b      	beq.n	800abc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2202      	movs	r2, #2
 800abb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abbc:	f043 0204 	orr.w	r2, r3, #4
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800abca:	f003 0304 	and.w	r3, r3, #4
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d011      	beq.n	800abf6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800abd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800abd6:	f003 0301 	and.w	r3, r3, #1
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00b      	beq.n	800abf6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2204      	movs	r2, #4
 800abe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abec:	f043 0202 	orr.w	r2, r3, #2
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d006      	beq.n	800ac0e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7fe fc53 	bl	80094ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d175      	bne.n	800ad06 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac22:	e853 3f00 	ldrex	r3, [r3]
 800ac26:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ac28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	461a      	mov	r2, r3
 800ac38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac3e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac40:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ac42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac44:	e841 2300 	strex	r3, r2, [r1]
 800ac48:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ac4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d1e4      	bne.n	800ac1a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	3308      	adds	r3, #8
 800ac56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac5a:	e853 3f00 	ldrex	r3, [r3]
 800ac5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac66:	f023 0301 	bic.w	r3, r3, #1
 800ac6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	3308      	adds	r3, #8
 800ac74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ac78:	65ba      	str	r2, [r7, #88]	; 0x58
 800ac7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac80:	e841 2300 	strex	r3, r2, [r1]
 800ac84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d1e1      	bne.n	800ac50 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2220      	movs	r2, #32
 800ac90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d12e      	bne.n	800ad00 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb0:	e853 3f00 	ldrex	r3, [r3]
 800acb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800acb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb8:	f023 0310 	bic.w	r3, r3, #16
 800acbc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	461a      	mov	r2, r3
 800acc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acc6:	647b      	str	r3, [r7, #68]	; 0x44
 800acc8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800accc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acce:	e841 2300 	strex	r3, r2, [r1]
 800acd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800acd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1e6      	bne.n	800aca8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	69db      	ldr	r3, [r3, #28]
 800ace0:	f003 0310 	and.w	r3, r3, #16
 800ace4:	2b10      	cmp	r3, #16
 800ace6:	d103      	bne.n	800acf0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2210      	movs	r2, #16
 800acee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800acf6:	4619      	mov	r1, r3
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f7f6 ff69 	bl	8001bd0 <HAL_UARTEx_RxEventCallback>
 800acfe:	e002      	b.n	800ad06 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f7f8 f983 	bl	800300c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad06:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d006      	beq.n	800ad1c <UART_RxISR_16BIT_FIFOEN+0x254>
 800ad0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad12:	f003 0320 	and.w	r3, r3, #32
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	f47f aefa 	bne.w	800ab10 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad22:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ad26:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d045      	beq.n	800adba <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ad34:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d23e      	bcs.n	800adba <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3308      	adds	r3, #8
 800ad42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad46:	e853 3f00 	ldrex	r3, [r3]
 800ad4a:	623b      	str	r3, [r7, #32]
   return(result);
 800ad4c:	6a3b      	ldr	r3, [r7, #32]
 800ad4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad52:	677b      	str	r3, [r7, #116]	; 0x74
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	3308      	adds	r3, #8
 800ad5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ad5c:	633a      	str	r2, [r7, #48]	; 0x30
 800ad5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad64:	e841 2300 	strex	r3, r2, [r1]
 800ad68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d1e5      	bne.n	800ad3c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a14      	ldr	r2, [pc, #80]	; (800adc4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800ad74:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	e853 3f00 	ldrex	r3, [r3]
 800ad82:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f043 0320 	orr.w	r3, r3, #32
 800ad8a:	673b      	str	r3, [r7, #112]	; 0x70
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	461a      	mov	r2, r3
 800ad92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad94:	61fb      	str	r3, [r7, #28]
 800ad96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad98:	69b9      	ldr	r1, [r7, #24]
 800ad9a:	69fa      	ldr	r2, [r7, #28]
 800ad9c:	e841 2300 	strex	r3, r2, [r1]
 800ada0:	617b      	str	r3, [r7, #20]
   return(result);
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1e6      	bne.n	800ad76 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ada8:	e007      	b.n	800adba <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	699a      	ldr	r2, [r3, #24]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f042 0208 	orr.w	r2, r2, #8
 800adb8:	619a      	str	r2, [r3, #24]
}
 800adba:	bf00      	nop
 800adbc:	37a0      	adds	r7, #160	; 0xa0
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	0800a671 	.word	0x0800a671

0800adc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800add0:	bf00      	nop
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	bc80      	pop	{r7}
 800add8:	4770      	bx	lr

0800adda <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800adda:	b480      	push	{r7}
 800addc:	b083      	sub	sp, #12
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ade2:	bf00      	nop
 800ade4:	370c      	adds	r7, #12
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bc80      	pop	{r7}
 800adea:	4770      	bx	lr

0800adec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800adf4:	bf00      	nop
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bc80      	pop	{r7}
 800adfc:	4770      	bx	lr

0800adfe <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b088      	sub	sp, #32
 800ae02:	af02      	add	r7, sp, #8
 800ae04:	60f8      	str	r0, [r7, #12]
 800ae06:	1d3b      	adds	r3, r7, #4
 800ae08:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d101      	bne.n	800ae1e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800ae1a:	2302      	movs	r3, #2
 800ae1c:	e046      	b.n	800aeac <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2201      	movs	r2, #1
 800ae22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2224      	movs	r2, #36	; 0x24
 800ae2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f022 0201 	bic.w	r2, r2, #1
 800ae3c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	430a      	orrs	r2, r1
 800ae50:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d105      	bne.n	800ae64 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800ae58:	1d3b      	adds	r3, r7, #4
 800ae5a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ae5e:	68f8      	ldr	r0, [r7, #12]
 800ae60:	f000 f9a5 	bl	800b1ae <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f042 0201 	orr.w	r2, r2, #1
 800ae72:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae74:	f7f7 fa2c 	bl	80022d0 <HAL_GetTick>
 800ae78:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f7fe fe79 	bl	8009b80 <UART_WaitOnFlagUntilTimeout>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d002      	beq.n	800ae9a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800ae94:	2303      	movs	r3, #3
 800ae96:	75fb      	strb	r3, [r7, #23]
 800ae98:	e003      	b.n	800aea2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2220      	movs	r2, #32
 800ae9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800aeaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3718      	adds	r7, #24
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b089      	sub	sp, #36	; 0x24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d101      	bne.n	800aeca <HAL_UARTEx_EnableStopMode+0x16>
 800aec6:	2302      	movs	r3, #2
 800aec8:	e021      	b.n	800af0e <HAL_UARTEx_EnableStopMode+0x5a>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	e853 3f00 	ldrex	r3, [r3]
 800aede:	60bb      	str	r3, [r7, #8]
   return(result);
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	f043 0302 	orr.w	r3, r3, #2
 800aee6:	61fb      	str	r3, [r7, #28]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	461a      	mov	r2, r3
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	61bb      	str	r3, [r7, #24]
 800aef2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef4:	6979      	ldr	r1, [r7, #20]
 800aef6:	69ba      	ldr	r2, [r7, #24]
 800aef8:	e841 2300 	strex	r3, r2, [r1]
 800aefc:	613b      	str	r3, [r7, #16]
   return(result);
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1e6      	bne.n	800aed2 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3724      	adds	r7, #36	; 0x24
 800af12:	46bd      	mov	sp, r7
 800af14:	bc80      	pop	{r7}
 800af16:	4770      	bx	lr

0800af18 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af26:	2b01      	cmp	r3, #1
 800af28:	d101      	bne.n	800af2e <HAL_UARTEx_EnableFifoMode+0x16>
 800af2a:	2302      	movs	r3, #2
 800af2c:	e02b      	b.n	800af86 <HAL_UARTEx_EnableFifoMode+0x6e>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2201      	movs	r2, #1
 800af32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2224      	movs	r2, #36	; 0x24
 800af3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f022 0201 	bic.w	r2, r2, #1
 800af54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800af64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f940 	bl	800b1f4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2220      	movs	r2, #32
 800af78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800af8e:	b480      	push	{r7}
 800af90:	b085      	sub	sp, #20
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d101      	bne.n	800afa4 <HAL_UARTEx_DisableFifoMode+0x16>
 800afa0:	2302      	movs	r3, #2
 800afa2:	e027      	b.n	800aff4 <HAL_UARTEx_DisableFifoMode+0x66>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2224      	movs	r2, #36	; 0x24
 800afb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f022 0201 	bic.w	r2, r2, #1
 800afca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800afd2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2220      	movs	r2, #32
 800afe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aff2:	2300      	movs	r3, #0
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3714      	adds	r7, #20
 800aff8:	46bd      	mov	sp, r7
 800affa:	bc80      	pop	{r7}
 800affc:	4770      	bx	lr

0800affe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b084      	sub	sp, #16
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
 800b006:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d101      	bne.n	800b016 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b012:	2302      	movs	r3, #2
 800b014:	e02d      	b.n	800b072 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2201      	movs	r2, #1
 800b01a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2224      	movs	r2, #36	; 0x24
 800b022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f022 0201 	bic.w	r2, r2, #1
 800b03c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	683a      	ldr	r2, [r7, #0]
 800b04e:	430a      	orrs	r2, r1
 800b050:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 f8ce 	bl	800b1f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2220      	movs	r2, #32
 800b064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b084      	sub	sp, #16
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d101      	bne.n	800b092 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b08e:	2302      	movs	r3, #2
 800b090:	e02d      	b.n	800b0ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2201      	movs	r2, #1
 800b096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2224      	movs	r2, #36	; 0x24
 800b09e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f022 0201 	bic.w	r2, r2, #1
 800b0b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	683a      	ldr	r2, [r7, #0]
 800b0ca:	430a      	orrs	r2, r1
 800b0cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f890 	bl	800b1f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2220      	movs	r2, #32
 800b0e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b08c      	sub	sp, #48	; 0x30
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	60f8      	str	r0, [r7, #12]
 800b0fe:	60b9      	str	r1, [r7, #8]
 800b100:	4613      	mov	r3, r2
 800b102:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b10a:	2b20      	cmp	r3, #32
 800b10c:	d14a      	bne.n	800b1a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d002      	beq.n	800b11a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b114:	88fb      	ldrh	r3, [r7, #6]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d101      	bne.n	800b11e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	e043      	b.n	800b1a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b124:	2b01      	cmp	r3, #1
 800b126:	d101      	bne.n	800b12c <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800b128:	2302      	movs	r3, #2
 800b12a:	e03c      	b.n	800b1a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2201      	movs	r2, #1
 800b138:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b13a:	88fb      	ldrh	r3, [r7, #6]
 800b13c:	461a      	mov	r2, r3
 800b13e:	68b9      	ldr	r1, [r7, #8]
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f7fe ff0d 	bl	8009f60 <UART_Start_Receive_DMA>
 800b146:	4603      	mov	r3, r0
 800b148:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b14c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b150:	2b00      	cmp	r3, #0
 800b152:	d124      	bne.n	800b19e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d11d      	bne.n	800b198 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2210      	movs	r2, #16
 800b162:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	e853 3f00 	ldrex	r3, [r3]
 800b170:	617b      	str	r3, [r7, #20]
   return(result);
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	f043 0310 	orr.w	r3, r3, #16
 800b178:	62bb      	str	r3, [r7, #40]	; 0x28
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	461a      	mov	r2, r3
 800b180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b182:	627b      	str	r3, [r7, #36]	; 0x24
 800b184:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b186:	6a39      	ldr	r1, [r7, #32]
 800b188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b18a:	e841 2300 	strex	r3, r2, [r1]
 800b18e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1e6      	bne.n	800b164 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800b196:	e002      	b.n	800b19e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800b19e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1a2:	e000      	b.n	800b1a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800b1a4:	2302      	movs	r3, #2
  }
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3730      	adds	r7, #48	; 0x30
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b085      	sub	sp, #20
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	60f8      	str	r0, [r7, #12]
 800b1b6:	1d3b      	adds	r3, r7, #4
 800b1b8:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	f023 0210 	bic.w	r2, r3, #16
 800b1c6:	893b      	ldrh	r3, [r7, #8]
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	430a      	orrs	r2, r1
 800b1d0:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800b1dc:	7abb      	ldrb	r3, [r7, #10]
 800b1de:	061a      	lsls	r2, r3, #24
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	430a      	orrs	r2, r1
 800b1e6:	605a      	str	r2, [r3, #4]
}
 800b1e8:	bf00      	nop
 800b1ea:	3714      	adds	r7, #20
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bc80      	pop	{r7}
 800b1f0:	4770      	bx	lr
	...

0800b1f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b200:	2b00      	cmp	r3, #0
 800b202:	d108      	bne.n	800b216 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b214:	e031      	b.n	800b27a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b216:	2308      	movs	r3, #8
 800b218:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b21a:	2308      	movs	r3, #8
 800b21c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	0e5b      	lsrs	r3, r3, #25
 800b226:	b2db      	uxtb	r3, r3
 800b228:	f003 0307 	and.w	r3, r3, #7
 800b22c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	0f5b      	lsrs	r3, r3, #29
 800b236:	b2db      	uxtb	r3, r3
 800b238:	f003 0307 	and.w	r3, r3, #7
 800b23c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b23e:	7bbb      	ldrb	r3, [r7, #14]
 800b240:	7b3a      	ldrb	r2, [r7, #12]
 800b242:	4910      	ldr	r1, [pc, #64]	; (800b284 <UARTEx_SetNbDataToProcess+0x90>)
 800b244:	5c8a      	ldrb	r2, [r1, r2]
 800b246:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b24a:	7b3a      	ldrb	r2, [r7, #12]
 800b24c:	490e      	ldr	r1, [pc, #56]	; (800b288 <UARTEx_SetNbDataToProcess+0x94>)
 800b24e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b250:	fb93 f3f2 	sdiv	r3, r3, r2
 800b254:	b29a      	uxth	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
 800b25e:	7b7a      	ldrb	r2, [r7, #13]
 800b260:	4908      	ldr	r1, [pc, #32]	; (800b284 <UARTEx_SetNbDataToProcess+0x90>)
 800b262:	5c8a      	ldrb	r2, [r1, r2]
 800b264:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b268:	7b7a      	ldrb	r2, [r7, #13]
 800b26a:	4907      	ldr	r1, [pc, #28]	; (800b288 <UARTEx_SetNbDataToProcess+0x94>)
 800b26c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b26e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b272:	b29a      	uxth	r2, r3
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b27a:	bf00      	nop
 800b27c:	3714      	adds	r7, #20
 800b27e:	46bd      	mov	sp, r7
 800b280:	bc80      	pop	{r7}
 800b282:	4770      	bx	lr
 800b284:	0801cd58 	.word	0x0801cd58
 800b288:	0801cd60 	.word	0x0801cd60

0800b28c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800b290:	f7f6 febe 	bl	8002010 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800b294:	f000 f820 	bl	800b2d8 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800b298:	bf00      	nop
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800b2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a4:	f010 fa70 	bl	801b788 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800b2a8:	bf00      	nop
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b2b0:	f3bf 8f4f 	dsb	sy
}
 800b2b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b2b6:	4b06      	ldr	r3, [pc, #24]	; (800b2d0 <__NVIC_SystemReset+0x24>)
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b2be:	4904      	ldr	r1, [pc, #16]	; (800b2d0 <__NVIC_SystemReset+0x24>)
 800b2c0:	4b04      	ldr	r3, [pc, #16]	; (800b2d4 <__NVIC_SystemReset+0x28>)
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b2c6:	f3bf 8f4f 	dsb	sy
}
 800b2ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b2cc:	bf00      	nop
 800b2ce:	e7fd      	b.n	800b2cc <__NVIC_SystemReset+0x20>
 800b2d0:	e000ed00 	.word	0xe000ed00
 800b2d4:	05fa0004 	.word	0x05fa0004

0800b2d8 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	607b      	str	r3, [r7, #4]
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800b2e2:	1d3b      	adds	r3, r7, #4
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	2000      	movs	r0, #0
 800b2e8:	f002 ff42 	bl	800e170 <LmHandlerGetVersion>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800b2ec:	1d3b      	adds	r3, r7, #4
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	2001      	movs	r0, #1
 800b2f2:	f002 ff3d 	bl	800e170 <LmHandlerGetVersion>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	4b2f      	ldr	r3, [pc, #188]	; (800b3b8 <LoRaWAN_Init+0xe0>)
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b302:	482e      	ldr	r0, [pc, #184]	; (800b3bc <LoRaWAN_Init+0xe4>)
 800b304:	f010 fbe0 	bl	801bac8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800b308:	2300      	movs	r3, #0
 800b30a:	9300      	str	r3, [sp, #0]
 800b30c:	4b2c      	ldr	r3, [pc, #176]	; (800b3c0 <LoRaWAN_Init+0xe8>)
 800b30e:	2200      	movs	r2, #0
 800b310:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b314:	482b      	ldr	r0, [pc, #172]	; (800b3c4 <LoRaWAN_Init+0xec>)
 800b316:	f010 fbd7 	bl	801bac8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800b31a:	2300      	movs	r3, #0
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	4b2a      	ldr	r3, [pc, #168]	; (800b3c8 <LoRaWAN_Init+0xf0>)
 800b320:	2201      	movs	r2, #1
 800b322:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b326:	4829      	ldr	r0, [pc, #164]	; (800b3cc <LoRaWAN_Init+0xf4>)
 800b328:	f010 fbce 	bl	801bac8 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800b32c:	2300      	movs	r3, #0
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	4b27      	ldr	r3, [pc, #156]	; (800b3d0 <LoRaWAN_Init+0xf8>)
 800b332:	2200      	movs	r2, #0
 800b334:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b338:	4826      	ldr	r0, [pc, #152]	; (800b3d4 <LoRaWAN_Init+0xfc>)
 800b33a:	f010 fbc5 	bl	801bac8 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800b33e:	4a26      	ldr	r2, [pc, #152]	; (800b3d8 <LoRaWAN_Init+0x100>)
 800b340:	2100      	movs	r1, #0
 800b342:	2001      	movs	r0, #1
 800b344:	f010 fb1c 	bl	801b980 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800b348:	4a24      	ldr	r2, [pc, #144]	; (800b3dc <LoRaWAN_Init+0x104>)
 800b34a:	2100      	movs	r1, #0
 800b34c:	2002      	movs	r0, #2
 800b34e:	f010 fb17 	bl	801b980 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800b352:	4a23      	ldr	r2, [pc, #140]	; (800b3e0 <LoRaWAN_Init+0x108>)
 800b354:	2100      	movs	r1, #0
 800b356:	2004      	movs	r0, #4
 800b358:	f010 fb12 	bl	801b980 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800b35c:	4a21      	ldr	r2, [pc, #132]	; (800b3e4 <LoRaWAN_Init+0x10c>)
 800b35e:	2100      	movs	r1, #0
 800b360:	2008      	movs	r0, #8
 800b362:	f010 fb0d 	bl	801b980 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800b366:	f000 fb3d 	bl	800b9e4 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800b36a:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 800b36e:	481e      	ldr	r0, [pc, #120]	; (800b3e8 <LoRaWAN_Init+0x110>)
 800b370:	f002 f808 	bl	800d384 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800b374:	481d      	ldr	r0, [pc, #116]	; (800b3ec <LoRaWAN_Init+0x114>)
 800b376:	f002 f851 	bl	800d41c <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800b37a:	4814      	ldr	r0, [pc, #80]	; (800b3cc <LoRaWAN_Init+0xf4>)
 800b37c:	f010 fbda 	bl	801bb34 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800b380:	4b1b      	ldr	r3, [pc, #108]	; (800b3f0 <LoRaWAN_Init+0x118>)
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	4a1b      	ldr	r2, [pc, #108]	; (800b3f4 <LoRaWAN_Init+0x11c>)
 800b386:	7812      	ldrb	r2, [r2, #0]
 800b388:	4611      	mov	r1, r2
 800b38a:	4618      	mov	r0, r3
 800b38c:	f002 f998 	bl	800d6c0 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800b390:	4b19      	ldr	r3, [pc, #100]	; (800b3f8 <LoRaWAN_Init+0x120>)
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d10b      	bne.n	800b3b0 <LoRaWAN_Init+0xd8>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800b398:	4b18      	ldr	r3, [pc, #96]	; (800b3fc <LoRaWAN_Init+0x124>)
 800b39a:	6819      	ldr	r1, [r3, #0]
 800b39c:	2300      	movs	r3, #0
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	4b17      	ldr	r3, [pc, #92]	; (800b400 <LoRaWAN_Init+0x128>)
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	4817      	ldr	r0, [pc, #92]	; (800b404 <LoRaWAN_Init+0x12c>)
 800b3a6:	f010 fb8f 	bl	801bac8 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800b3aa:	4816      	ldr	r0, [pc, #88]	; (800b404 <LoRaWAN_Init+0x12c>)
 800b3ac:	f010 fbc2 	bl	801bb34 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800b3b0:	bf00      	nop
 800b3b2:	3708      	adds	r7, #8
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	0800b721 	.word	0x0800b721
 800b3bc:	20000a54 	.word	0x20000a54
 800b3c0:	0800b733 	.word	0x0800b733
 800b3c4:	20000a6c 	.word	0x20000a6c
 800b3c8:	0800b745 	.word	0x0800b745
 800b3cc:	20000a84 	.word	0x20000a84
 800b3d0:	0800b909 	.word	0x0800b909
 800b3d4:	20000948 	.word	0x20000948
 800b3d8:	0800d69d 	.word	0x0800d69d
 800b3dc:	0800b509 	.word	0x0800b509
 800b3e0:	0800b92d 	.word	0x0800b92d
 800b3e4:	0800b8bd 	.word	0x0800b8bd
 800b3e8:	20000010 	.word	0x20000010
 800b3ec:	2000005c 	.word	0x2000005c
 800b3f0:	2000000c 	.word	0x2000000c
 800b3f4:	2000000d 	.word	0x2000000d
 800b3f8:	2000092c 	.word	0x2000092c
 800b3fc:	20000070 	.word	0x20000070
 800b400:	0800b6fd 	.word	0x0800b6fd
 800b404:	20000930 	.word	0x20000930

0800b408 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	4603      	mov	r3, r0
 800b410:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800b412:	88fb      	ldrh	r3, [r7, #6]
 800b414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b418:	d104      	bne.n	800b424 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800b41a:	2100      	movs	r1, #0
 800b41c:	2002      	movs	r0, #2
 800b41e:	f010 fad1 	bl	801b9c4 <UTIL_SEQ_SetTask>
      }
      break;
 800b422:	e000      	b.n	800b426 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800b424:	bf00      	nop
  }
}
 800b426:	bf00      	nop
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
	...

0800b430 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d057      	beq.n	800b4f4 <OnRxData+0xc4>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800b444:	482d      	ldr	r0, [pc, #180]	; (800b4fc <OnRxData+0xcc>)
 800b446:	f010 fb75 	bl	801bb34 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d04b      	beq.n	800b4ea <OnRxData+0xba>
    {
      if (appData != NULL)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d048      	beq.n	800b4ea <OnRxData+0xba>
      {
        RxPort = appData->Port;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d041      	beq.n	800b4ea <OnRxData+0xba>
        {
    switch (appData->Port)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	d021      	beq.n	800b4b2 <OnRxData+0x82>
 800b46e:	2b03      	cmp	r3, #3
 800b470:	d13d      	bne.n	800b4ee <OnRxData+0xbe>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	785b      	ldrb	r3, [r3, #1]
 800b476:	2b01      	cmp	r3, #1
 800b478:	d117      	bne.n	800b4aa <OnRxData+0x7a>
        {
          switch (appData->Buffer[0])
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	2b02      	cmp	r3, #2
 800b482:	d00e      	beq.n	800b4a2 <OnRxData+0x72>
 800b484:	2b02      	cmp	r3, #2
 800b486:	dc12      	bgt.n	800b4ae <OnRxData+0x7e>
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <OnRxData+0x62>
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d004      	beq.n	800b49a <OnRxData+0x6a>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800b490:	e00d      	b.n	800b4ae <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_A);
 800b492:	2000      	movs	r0, #0
 800b494:	f002 fab0 	bl	800d9f8 <LmHandlerRequestClass>
              break;
 800b498:	e00a      	b.n	800b4b0 <OnRxData+0x80>
              LmHandlerRequestClass(CLASS_B);
 800b49a:	2001      	movs	r0, #1
 800b49c:	f002 faac 	bl	800d9f8 <LmHandlerRequestClass>
              break;
 800b4a0:	e006      	b.n	800b4b0 <OnRxData+0x80>
              LmHandlerRequestClass(CLASS_C);
 800b4a2:	2002      	movs	r0, #2
 800b4a4:	f002 faa8 	bl	800d9f8 <LmHandlerRequestClass>
              break;
 800b4a8:	e002      	b.n	800b4b0 <OnRxData+0x80>
          }
        }
 800b4aa:	bf00      	nop
 800b4ac:	e022      	b.n	800b4f4 <OnRxData+0xc4>
              break;
 800b4ae:	bf00      	nop
        break;
 800b4b0:	e020      	b.n	800b4f4 <OnRxData+0xc4>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	785b      	ldrb	r3, [r3, #1]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d11b      	bne.n	800b4f2 <OnRxData+0xc2>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	f003 0301 	and.w	r3, r3, #1
 800b4c4:	b2da      	uxtb	r2, r3
 800b4c6:	4b0e      	ldr	r3, [pc, #56]	; (800b500 <OnRxData+0xd0>)
 800b4c8:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800b4ca:	4b0d      	ldr	r3, [pc, #52]	; (800b500 <OnRxData+0xd0>)
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d105      	bne.n	800b4de <OnRxData+0xae>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	2120      	movs	r1, #32
 800b4d6:	480b      	ldr	r0, [pc, #44]	; (800b504 <OnRxData+0xd4>)
 800b4d8:	f7fa f9d2 	bl	8005880 <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800b4dc:	e009      	b.n	800b4f2 <OnRxData+0xc2>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800b4de:	2200      	movs	r2, #0
 800b4e0:	2120      	movs	r1, #32
 800b4e2:	4808      	ldr	r0, [pc, #32]	; (800b504 <OnRxData+0xd4>)
 800b4e4:	f7fa f9cc 	bl	8005880 <HAL_GPIO_WritePin>
        break;
 800b4e8:	e003      	b.n	800b4f2 <OnRxData+0xc2>

      default:

        break;
    }
  }
 800b4ea:	bf00      	nop
 800b4ec:	e002      	b.n	800b4f4 <OnRxData+0xc4>
        break;
 800b4ee:	bf00      	nop
 800b4f0:	e000      	b.n	800b4f4 <OnRxData+0xc4>
        break;
 800b4f2:	bf00      	nop
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800b4f4:	bf00      	nop
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	20000a6c 	.word	0x20000a6c
 800b500:	20000a52 	.word	0x20000a52
 800b504:	48000400 	.word	0x48000400

0800b508 <SendTxData>:

static void SendTxData(void)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b08a      	sub	sp, #40	; 0x28
 800b50c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800b50e:	23ff      	movs	r3, #255	; 0xff
 800b510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t batteryLevel = GetBatteryLevel();
 800b514:	f7f6 fdb0 	bl	8002078 <GetBatteryLevel>
 800b518:	4603      	mov	r3, r0
 800b51a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	627b      	str	r3, [r7, #36]	; 0x24


  uint16_t pressure = 0;
 800b522:	2300      	movs	r3, #0
 800b524:	843b      	strh	r3, [r7, #32]

  uint32_t i = 0;
 800b526:	2300      	movs	r3, #0
 800b528:	61fb      	str	r3, [r7, #28]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));

  AppData.Port = LORAWAN_USER_APP_PORT;
 800b52a:	4b69      	ldr	r3, [pc, #420]	; (800b6d0 <SendTxData+0x1c8>)
 800b52c:	2202      	movs	r2, #2
 800b52e:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = PM2_5/100;
 800b530:	4b68      	ldr	r3, [pc, #416]	; (800b6d4 <SendTxData+0x1cc>)
 800b532:	881b      	ldrh	r3, [r3, #0]
 800b534:	4a68      	ldr	r2, [pc, #416]	; (800b6d8 <SendTxData+0x1d0>)
 800b536:	fba2 2303 	umull	r2, r3, r2, r3
 800b53a:	095b      	lsrs	r3, r3, #5
 800b53c:	b298      	uxth	r0, r3
 800b53e:	4b64      	ldr	r3, [pc, #400]	; (800b6d0 <SendTxData+0x1c8>)
 800b540:	685a      	ldr	r2, [r3, #4]
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	1c59      	adds	r1, r3, #1
 800b546:	61f9      	str	r1, [r7, #28]
 800b548:	4413      	add	r3, r2
 800b54a:	b2c2      	uxtb	r2, r0
 800b54c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM2_5%100;
 800b54e:	4b61      	ldr	r3, [pc, #388]	; (800b6d4 <SendTxData+0x1cc>)
 800b550:	881b      	ldrh	r3, [r3, #0]
 800b552:	4a61      	ldr	r2, [pc, #388]	; (800b6d8 <SendTxData+0x1d0>)
 800b554:	fba2 1203 	umull	r1, r2, r2, r3
 800b558:	0952      	lsrs	r2, r2, #5
 800b55a:	2164      	movs	r1, #100	; 0x64
 800b55c:	fb01 f202 	mul.w	r2, r1, r2
 800b560:	1a9b      	subs	r3, r3, r2
 800b562:	b298      	uxth	r0, r3
 800b564:	4b5a      	ldr	r3, [pc, #360]	; (800b6d0 <SendTxData+0x1c8>)
 800b566:	685a      	ldr	r2, [r3, #4]
 800b568:	69fb      	ldr	r3, [r7, #28]
 800b56a:	1c59      	adds	r1, r3, #1
 800b56c:	61f9      	str	r1, [r7, #28]
 800b56e:	4413      	add	r3, r2
 800b570:	b2c2      	uxtb	r2, r0
 800b572:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temp*100.0));
 800b574:	4b59      	ldr	r3, [pc, #356]	; (800b6dc <SendTxData+0x1d4>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4618      	mov	r0, r3
 800b57a:	f7f4 ff69 	bl	8000450 <__aeabi_f2d>
 800b57e:	f04f 0200 	mov.w	r2, #0
 800b582:	4b57      	ldr	r3, [pc, #348]	; (800b6e0 <SendTxData+0x1d8>)
 800b584:	f7f4 ffbc 	bl	8000500 <__aeabi_dmul>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	4610      	mov	r0, r2
 800b58e:	4619      	mov	r1, r3
 800b590:	f7f5 fa50 	bl	8000a34 <__aeabi_d2iz>
 800b594:	4603      	mov	r3, r0
 800b596:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800b598:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b59c:	4a4e      	ldr	r2, [pc, #312]	; (800b6d8 <SendTxData+0x1d0>)
 800b59e:	fb82 1203 	smull	r1, r2, r2, r3
 800b5a2:	1152      	asrs	r2, r2, #5
 800b5a4:	17db      	asrs	r3, r3, #31
 800b5a6:	1ad3      	subs	r3, r2, r3
 800b5a8:	b218      	sxth	r0, r3
 800b5aa:	4b49      	ldr	r3, [pc, #292]	; (800b6d0 <SendTxData+0x1c8>)
 800b5ac:	685a      	ldr	r2, [r3, #4]
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	1c59      	adds	r1, r3, #1
 800b5b2:	61f9      	str	r1, [r7, #28]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	b2c2      	uxtb	r2, r0
 800b5b8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800b5ba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b5be:	4a46      	ldr	r2, [pc, #280]	; (800b6d8 <SendTxData+0x1d0>)
 800b5c0:	fb82 1203 	smull	r1, r2, r2, r3
 800b5c4:	1151      	asrs	r1, r2, #5
 800b5c6:	17da      	asrs	r2, r3, #31
 800b5c8:	1a8a      	subs	r2, r1, r2
 800b5ca:	2164      	movs	r1, #100	; 0x64
 800b5cc:	fb01 f202 	mul.w	r2, r1, r2
 800b5d0:	1a9b      	subs	r3, r3, r2
 800b5d2:	b218      	sxth	r0, r3
 800b5d4:	4b3e      	ldr	r3, [pc, #248]	; (800b6d0 <SendTxData+0x1c8>)
 800b5d6:	685a      	ldr	r2, [r3, #4]
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	1c59      	adds	r1, r3, #1
 800b5dc:	61f9      	str	r1, [r7, #28]
 800b5de:	4413      	add	r3, r2
 800b5e0:	b2c2      	uxtb	r2, r0
 800b5e2:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800b5e4:	4b3f      	ldr	r3, [pc, #252]	; (800b6e4 <SendTxData+0x1dc>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7f4 ff31 	bl	8000450 <__aeabi_f2d>
 800b5ee:	f04f 0200 	mov.w	r2, #0
 800b5f2:	4b3b      	ldr	r3, [pc, #236]	; (800b6e0 <SendTxData+0x1d8>)
 800b5f4:	f7f4 ff84 	bl	8000500 <__aeabi_dmul>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	4610      	mov	r0, r2
 800b5fe:	4619      	mov	r1, r3
 800b600:	f7f5 fa18 	bl	8000a34 <__aeabi_d2iz>
 800b604:	4603      	mov	r3, r0
 800b606:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800b608:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b60c:	4a32      	ldr	r2, [pc, #200]	; (800b6d8 <SendTxData+0x1d0>)
 800b60e:	fb82 1203 	smull	r1, r2, r2, r3
 800b612:	1152      	asrs	r2, r2, #5
 800b614:	17db      	asrs	r3, r3, #31
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	b218      	sxth	r0, r3
 800b61a:	4b2d      	ldr	r3, [pc, #180]	; (800b6d0 <SendTxData+0x1c8>)
 800b61c:	685a      	ldr	r2, [r3, #4]
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	1c59      	adds	r1, r3, #1
 800b622:	61f9      	str	r1, [r7, #28]
 800b624:	4413      	add	r3, r2
 800b626:	b2c2      	uxtb	r2, r0
 800b628:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800b62a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b62e:	4a2a      	ldr	r2, [pc, #168]	; (800b6d8 <SendTxData+0x1d0>)
 800b630:	fb82 1203 	smull	r1, r2, r2, r3
 800b634:	1151      	asrs	r1, r2, #5
 800b636:	17da      	asrs	r2, r3, #31
 800b638:	1a8a      	subs	r2, r1, r2
 800b63a:	2164      	movs	r1, #100	; 0x64
 800b63c:	fb01 f202 	mul.w	r2, r1, r2
 800b640:	1a9b      	subs	r3, r3, r2
 800b642:	b218      	sxth	r0, r3
 800b644:	4b22      	ldr	r3, [pc, #136]	; (800b6d0 <SendTxData+0x1c8>)
 800b646:	685a      	ldr	r2, [r3, #4]
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	1c59      	adds	r1, r3, #1
 800b64c:	61f9      	str	r1, [r7, #28]
 800b64e:	4413      	add	r3, r2
 800b650:	b2c2      	uxtb	r2, r0
 800b652:	701a      	strb	r2, [r3, #0]


  AppData.BufferSize = i;
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	b2da      	uxtb	r2, r3
 800b658:	4b1d      	ldr	r3, [pc, #116]	; (800b6d0 <SendTxData+0x1c8>)
 800b65a:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800b65c:	4b22      	ldr	r3, [pc, #136]	; (800b6e8 <SendTxData+0x1e0>)
 800b65e:	7a5b      	ldrb	r3, [r3, #9]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d007      	beq.n	800b674 <SendTxData+0x16c>
 800b664:	f002 f8ac 	bl	800d7c0 <LmHandlerJoinStatus>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d102      	bne.n	800b674 <SendTxData+0x16c>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800b66e:	481e      	ldr	r0, [pc, #120]	; (800b6e8 <SendTxData+0x1e0>)
 800b670:	f010 face 	bl	801bc10 <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800b674:	4b1d      	ldr	r3, [pc, #116]	; (800b6ec <SendTxData+0x1e4>)
 800b676:	78db      	ldrb	r3, [r3, #3]
 800b678:	2200      	movs	r2, #0
 800b67a:	4619      	mov	r1, r3
 800b67c:	4814      	ldr	r0, [pc, #80]	; (800b6d0 <SendTxData+0x1c8>)
 800b67e:	f002 f8bb 	bl	800d7f8 <LmHandlerSend>
 800b682:	4603      	mov	r3, r0
 800b684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (LORAMAC_HANDLER_SUCCESS == status)
 800b688:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d007      	beq.n	800b6a0 <SendTxData+0x198>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800b690:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b694:	f113 0f06 	cmn.w	r3, #6
 800b698:	d102      	bne.n	800b6a0 <SendTxData+0x198>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800b69a:	f002 f807 	bl	800d6ac <LmHandlerGetDutyCycleWaitTime>
 800b69e:	6278      	str	r0, [r7, #36]	; 0x24
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }
  }

  if (EventType == TX_ON_TIMER)
 800b6a0:	4b13      	ldr	r3, [pc, #76]	; (800b6f0 <SendTxData+0x1e8>)
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d10f      	bne.n	800b6c8 <SendTxData+0x1c0>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800b6a8:	4812      	ldr	r0, [pc, #72]	; (800b6f4 <SendTxData+0x1ec>)
 800b6aa:	f010 fab1 	bl	801bc10 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800b6ae:	4b12      	ldr	r3, [pc, #72]	; (800b6f8 <SendTxData+0x1f0>)
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	bf38      	it	cc
 800b6b8:	4613      	movcc	r3, r2
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	480d      	ldr	r0, [pc, #52]	; (800b6f4 <SendTxData+0x1ec>)
 800b6be:	f010 fb17 	bl	801bcf0 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800b6c2:	480c      	ldr	r0, [pc, #48]	; (800b6f4 <SendTxData+0x1ec>)
 800b6c4:	f010 fa36 	bl	801bb34 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800b6c8:	bf00      	nop
 800b6ca:	3728      	adds	r7, #40	; 0x28
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	20000074 	.word	0x20000074
 800b6d4:	20000670 	.word	0x20000670
 800b6d8:	51eb851f 	.word	0x51eb851f
 800b6dc:	20000674 	.word	0x20000674
 800b6e0:	40590000 	.word	0x40590000
 800b6e4:	20000678 	.word	0x20000678
 800b6e8:	20000a84 	.word	0x20000a84
 800b6ec:	2000005c 	.word	0x2000005c
 800b6f0:	2000092c 	.word	0x2000092c
 800b6f4:	20000930 	.word	0x20000930
 800b6f8:	20000070 	.word	0x20000070

0800b6fc <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800b704:	2100      	movs	r1, #0
 800b706:	2002      	movs	r0, #2
 800b708:	f010 f95c 	bl	801b9c4 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800b70c:	4803      	ldr	r0, [pc, #12]	; (800b71c <OnTxTimerEvent+0x20>)
 800b70e:	f010 fa11 	bl	801bb34 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800b712:	bf00      	nop
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	20000930 	.word	0x20000930

0800b720 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800b728:	bf00      	nop
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bc80      	pop	{r7}
 800b730:	4770      	bx	lr

0800b732 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800b732:	b480      	push	{r7}
 800b734:	b083      	sub	sp, #12
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800b73a:	bf00      	nop
 800b73c:	370c      	adds	r7, #12
 800b73e:	46bd      	mov	sp, r7
 800b740:	bc80      	pop	{r7}
 800b742:	4770      	bx	lr

0800b744 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	bc80      	pop	{r7}
 800b754:	4770      	bx	lr
	...

0800b758 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d006      	beq.n	800b774 <OnTxData+0x1c>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d002      	beq.n	800b774 <OnTxData+0x1c>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800b76e:	4803      	ldr	r0, [pc, #12]	; (800b77c <OnTxData+0x24>)
 800b770:	f010 f9e0 	bl	801bb34 <UTIL_TIMER_Start>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800b774:	bf00      	nop
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	20000a54 	.word	0x20000a54

0800b780 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d012      	beq.n	800b7b4 <OnJoinRequest+0x34>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d103      	bne.n	800b7a0 <OnJoinRequest+0x20>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800b798:	4808      	ldr	r0, [pc, #32]	; (800b7bc <OnJoinRequest+0x3c>)
 800b79a:	f010 fa39 	bl	801bc10 <UTIL_TIMER_Stop>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800b79e:	e009      	b.n	800b7b4 <OnJoinRequest+0x34>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	799b      	ldrb	r3, [r3, #6]
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	d105      	bne.n	800b7b4 <OnJoinRequest+0x34>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800b7a8:	4b05      	ldr	r3, [pc, #20]	; (800b7c0 <OnJoinRequest+0x40>)
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	2101      	movs	r1, #1
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f001 ff86 	bl	800d6c0 <LmHandlerJoin>
}
 800b7b4:	bf00      	nop
 800b7b6:	3708      	adds	r7, #8
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	20000a84 	.word	0x20000a84
 800b7c0:	2000000c 	.word	0x2000000c

0800b7c4 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b083      	sub	sp, #12
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d005      	beq.n	800b7de <OnBeaconStatusChange+0x1a>
  {
    switch (params->State)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	785b      	ldrb	r3, [r3, #1]
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d003      	beq.n	800b7e2 <OnBeaconStatusChange+0x1e>
 800b7da:	2b03      	cmp	r3, #3
        break;
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
        break;
 800b7dc:	e002      	b.n	800b7e4 <OnBeaconStatusChange+0x20>
      }
    }
  }
 800b7de:	bf00      	nop
 800b7e0:	e000      	b.n	800b7e4 <OnBeaconStatusChange+0x20>
        break;
 800b7e2:	bf00      	nop
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800b7e4:	bf00      	nop
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bc80      	pop	{r7}
 800b7ec:	4770      	bx	lr

0800b7ee <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800b7ee:	b480      	push	{r7}
 800b7f0:	b083      	sub	sp, #12
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
  /* USER CODE END OnClassChange_1 */
}
 800b7f8:	bf00      	nop
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bc80      	pop	{r7}
 800b800:	4770      	bx	lr

0800b802 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800b806:	2100      	movs	r1, #0
 800b808:	2001      	movs	r0, #1
 800b80a:	f010 f8db 	bl	801b9c4 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800b80e:	bf00      	nop
 800b810:	bd80      	pop	{r7, pc}
	...

0800b814 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800b81c:	4a0d      	ldr	r2, [pc, #52]	; (800b854 <OnTxPeriodicityChanged+0x40>)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800b822:	4b0c      	ldr	r3, [pc, #48]	; (800b854 <OnTxPeriodicityChanged+0x40>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d103      	bne.n	800b832 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800b82a:	4b0a      	ldr	r3, [pc, #40]	; (800b854 <OnTxPeriodicityChanged+0x40>)
 800b82c:	f242 7210 	movw	r2, #10000	; 0x2710
 800b830:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800b832:	4809      	ldr	r0, [pc, #36]	; (800b858 <OnTxPeriodicityChanged+0x44>)
 800b834:	f010 f9ec 	bl	801bc10 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800b838:	4b06      	ldr	r3, [pc, #24]	; (800b854 <OnTxPeriodicityChanged+0x40>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4619      	mov	r1, r3
 800b83e:	4806      	ldr	r0, [pc, #24]	; (800b858 <OnTxPeriodicityChanged+0x44>)
 800b840:	f010 fa56 	bl	801bcf0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800b844:	4804      	ldr	r0, [pc, #16]	; (800b858 <OnTxPeriodicityChanged+0x44>)
 800b846:	f010 f975 	bl	801bb34 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800b84a:	bf00      	nop
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	20000070 	.word	0x20000070
 800b858:	20000930 	.word	0x20000930

0800b85c <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	4603      	mov	r3, r0
 800b864:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800b866:	4a04      	ldr	r2, [pc, #16]	; (800b878 <OnTxFrameCtrlChanged+0x1c>)
 800b868:	79fb      	ldrb	r3, [r7, #7]
 800b86a:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800b86c:	bf00      	nop
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	bc80      	pop	{r7}
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	2000005c 	.word	0x2000005c

0800b87c <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	4603      	mov	r3, r0
 800b884:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800b886:	4a04      	ldr	r2, [pc, #16]	; (800b898 <OnPingSlotPeriodicityChanged+0x1c>)
 800b888:	79fb      	ldrb	r3, [r7, #7]
 800b88a:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800b88c:	bf00      	nop
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	bc80      	pop	{r7}
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	2000005c 	.word	0x2000005c

0800b89c <OnSystemReset>:

static void OnSystemReset(void)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800b8a0:	f002 fc97 	bl	800e1d2 <LmHandlerHalt>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d106      	bne.n	800b8b8 <OnSystemReset+0x1c>
 800b8aa:	f001 ff89 	bl	800d7c0 <LmHandlerJoinStatus>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d101      	bne.n	800b8b8 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800b8b4:	f7ff fcfa 	bl	800b2ac <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800b8b8:	bf00      	nop
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <StopJoin>:

static void StopJoin(void)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800b8c0:	480d      	ldr	r0, [pc, #52]	; (800b8f8 <StopJoin+0x3c>)
 800b8c2:	f010 f9a5 	bl	801bc10 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800b8c6:	f002 fc77 	bl	800e1b8 <LmHandlerStop>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d10e      	bne.n	800b8ee <StopJoin+0x32>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800b8d0:	4b0a      	ldr	r3, [pc, #40]	; (800b8fc <StopJoin+0x40>)
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
    }
    LmHandlerConfigure(&LmHandlerParams);
 800b8d6:	480a      	ldr	r0, [pc, #40]	; (800b900 <StopJoin+0x44>)
 800b8d8:	f001 fda0 	bl	800d41c <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800b8dc:	4b07      	ldr	r3, [pc, #28]	; (800b8fc <StopJoin+0x40>)
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	2101      	movs	r1, #1
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f001 feec 	bl	800d6c0 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800b8e8:	4803      	ldr	r0, [pc, #12]	; (800b8f8 <StopJoin+0x3c>)
 800b8ea:	f010 f923 	bl	801bb34 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800b8ee:	4805      	ldr	r0, [pc, #20]	; (800b904 <StopJoin+0x48>)
 800b8f0:	f010 f920 	bl	801bb34 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800b8f4:	bf00      	nop
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	20000930 	.word	0x20000930
 800b8fc:	2000000c 	.word	0x2000000c
 800b900:	2000005c 	.word	0x2000005c
 800b904:	20000948 	.word	0x20000948

0800b908 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800b910:	4b05      	ldr	r3, [pc, #20]	; (800b928 <OnStopJoinTimerEvent+0x20>)
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	2b02      	cmp	r3, #2
 800b916:	d103      	bne.n	800b920 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800b918:	2100      	movs	r1, #0
 800b91a:	2008      	movs	r0, #8
 800b91c:	f010 f852 	bl	801b9c4 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800b920:	bf00      	nop
 800b922:	3708      	adds	r7, #8
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	2000000c 	.word	0x2000000c

0800b92c <StoreContext>:

static void StoreContext(void)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800b932:	23ff      	movs	r3, #255	; 0xff
 800b934:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800b936:	f002 fc59 	bl	800e1ec <LmHandlerNvmDataStore>
 800b93a:	4603      	mov	r3, r0
 800b93c:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800b93e:	bf00      	nop
 800b940:	3708      	adds	r7, #8
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800b946:	b480      	push	{r7}
 800b948:	b083      	sub	sp, #12
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	4603      	mov	r3, r0
 800b94e:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	bc80      	pop	{r7}
 800b958:	4770      	bx	lr
	...

0800b95c <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800b966:	f7f9 fb3f 	bl	8004fe8 <HAL_FLASH_Unlock>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d11c      	bne.n	800b9aa <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800b970:	4b10      	ldr	r3, [pc, #64]	; (800b9b4 <OnStoreContextRequest+0x58>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	029a      	lsls	r2, r3, #10
 800b976:	4b10      	ldr	r3, [pc, #64]	; (800b9b8 <OnStoreContextRequest+0x5c>)
 800b978:	4013      	ands	r3, r2
 800b97a:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800b97e:	fbb2 f1f3 	udiv	r1, r2, r3
 800b982:	fb01 f303 	mul.w	r3, r1, r3
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	0adb      	lsrs	r3, r3, #11
 800b98a:	2200      	movs	r2, #0
 800b98c:	2101      	movs	r1, #1
 800b98e:	4618      	mov	r0, r3
 800b990:	f7f5 fddb 	bl	800154a <FLASH_IF_EraseByPages>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d105      	bne.n	800b9a6 <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800b99a:	2300      	movs	r3, #0
 800b99c:	683a      	ldr	r2, [r7, #0]
 800b99e:	6879      	ldr	r1, [r7, #4]
 800b9a0:	4806      	ldr	r0, [pc, #24]	; (800b9bc <OnStoreContextRequest+0x60>)
 800b9a2:	f7f5 fcf1 	bl	8001388 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800b9a6:	f7f9 fb41 	bl	800502c <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800b9aa:	bf00      	nop
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	1fff75e0 	.word	0x1fff75e0
 800b9b8:	03fffc00 	.word	0x03fffc00
 800b9bc:	0803f000 	.word	0x0803f000

0800b9c0 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	4903      	ldr	r1, [pc, #12]	; (800b9e0 <OnRestoreContextRequest+0x20>)
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f00f fad6 	bl	801af84 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800b9d8:	bf00      	nop
 800b9da:	3708      	adds	r7, #8
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	0803f000 	.word	0x0803f000

0800b9e4 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800b9e8:	4b15      	ldr	r3, [pc, #84]	; (800ba40 <LoraInfo_Init+0x5c>)
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800b9ee:	4b14      	ldr	r3, [pc, #80]	; (800ba40 <LoraInfo_Init+0x5c>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800b9f4:	4b12      	ldr	r3, [pc, #72]	; (800ba40 <LoraInfo_Init+0x5c>)
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800b9fa:	4b11      	ldr	r3, [pc, #68]	; (800ba40 <LoraInfo_Init+0x5c>)
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800ba00:	4b0f      	ldr	r3, [pc, #60]	; (800ba40 <LoraInfo_Init+0x5c>)
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	f043 0320 	orr.w	r3, r3, #32
 800ba08:	4a0d      	ldr	r2, [pc, #52]	; (800ba40 <LoraInfo_Init+0x5c>)
 800ba0a:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800ba0c:	4b0c      	ldr	r3, [pc, #48]	; (800ba40 <LoraInfo_Init+0x5c>)
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d10c      	bne.n	800ba2e <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800ba14:	4b0b      	ldr	r3, [pc, #44]	; (800ba44 <LoraInfo_Init+0x60>)
 800ba16:	2200      	movs	r2, #0
 800ba18:	2100      	movs	r1, #0
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	f010 fb02 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800ba20:	bf00      	nop
 800ba22:	f010 faed 	bl	801c000 <UTIL_ADV_TRACE_IsBufferEmpty>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d1fa      	bne.n	800ba22 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800ba2c:	e7fe      	b.n	800ba2c <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800ba2e:	4b04      	ldr	r3, [pc, #16]	; (800ba40 <LoraInfo_Init+0x5c>)
 800ba30:	2200      	movs	r2, #0
 800ba32:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800ba34:	4b02      	ldr	r3, [pc, #8]	; (800ba40 <LoraInfo_Init+0x5c>)
 800ba36:	2203      	movs	r2, #3
 800ba38:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800ba3a:	bf00      	nop
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	20000a9c 	.word	0x20000a9c
 800ba44:	0801c798 	.word	0x0801c798

0800ba48 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800ba4c:	4b02      	ldr	r3, [pc, #8]	; (800ba58 <LoraInfo_GetPtr+0x10>)
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bc80      	pop	{r7}
 800ba54:	4770      	bx	lr
 800ba56:	bf00      	nop
 800ba58:	20000a9c 	.word	0x20000a9c

0800ba5c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800ba60:	f7f7 fb37 	bl	80030d2 <BSP_RADIO_Init>
 800ba64:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b082      	sub	sp, #8
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	4603      	mov	r3, r0
 800ba72:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800ba74:	79fb      	ldrb	r3, [r7, #7]
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7f7 fb5c 	bl	8003134 <BSP_RADIO_ConfigRFSwitch>
 800ba7c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3708      	adds	r7, #8
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800ba8a:	f7f7 fba1 	bl	80031d0 <BSP_RADIO_GetTxConfig>
 800ba8e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800ba98:	f7f7 fba1 	bl	80031de <BSP_RADIO_IsTCXO>
 800ba9c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800baa6:	f7f7 fba1 	bl	80031ec <BSP_RADIO_IsDCDC>
 800baaa:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800baac:	4618      	mov	r0, r3
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	4603      	mov	r3, r0
 800bab8:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800baba:	79fb      	ldrb	r3, [r7, #7]
 800babc:	4618      	mov	r0, r3
 800babe:	f7f7 fb9c 	bl	80031fa <BSP_RADIO_GetRFOMaxPowerConfig>
 800bac2:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	33f1      	adds	r3, #241	; 0xf1
 800bad8:	2210      	movs	r2, #16
 800bada:	2100      	movs	r1, #0
 800badc:	4618      	mov	r0, r3
 800bade:	f00b ff87 	bl	80179f0 <memset1>
    ctx->M_n = 0;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	22f0      	movs	r2, #240	; 0xf0
 800baee:	2100      	movs	r1, #0
 800baf0:	4618      	mov	r0, r3
 800baf2:	f00b ff7d 	bl	80179f0 <memset1>
}
 800baf6:	bf00      	nop
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b082      	sub	sp, #8
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	2110      	movs	r1, #16
 800bb0e:	6838      	ldr	r0, [r7, #0]
 800bb10:	f000 fe5c 	bl	800c7cc <lorawan_aes_set_key>
}
 800bb14:	bf00      	nop
 800bb16:	3708      	adds	r7, #8
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b08c      	sub	sp, #48	; 0x30
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	f000 80a1 	beq.w	800bc76 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bb3a:	f1c3 0310 	rsb	r3, r3, #16
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	4293      	cmp	r3, r2
 800bb42:	bf28      	it	cs
 800bb44:	4613      	movcs	r3, r2
 800bb46:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f203 1201 	addw	r2, r3, #257	; 0x101
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bb54:	4413      	add	r3, r2
 800bb56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb58:	b292      	uxth	r2, r2
 800bb5a:	68b9      	ldr	r1, [r7, #8]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f00b ff0c 	bl	801797a <memcpy1>
        ctx->M_n += mlen;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800bb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6a:	441a      	add	r2, r3
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bb78:	2b0f      	cmp	r3, #15
 800bb7a:	f240 808d 	bls.w	800bc98 <AES_CMAC_Update+0x17c>
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb82:	429a      	cmp	r2, r3
 800bb84:	f000 8088 	beq.w	800bc98 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800bb88:	2300      	movs	r3, #0
 800bb8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb8c:	e015      	b.n	800bbba <AES_CMAC_Update+0x9e>
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb92:	4413      	add	r3, r2
 800bb94:	33f1      	adds	r3, #241	; 0xf1
 800bb96:	781a      	ldrb	r2, [r3, #0]
 800bb98:	68f9      	ldr	r1, [r7, #12]
 800bb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9c:	440b      	add	r3, r1
 800bb9e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	4053      	eors	r3, r2
 800bba6:	b2d9      	uxtb	r1, r3
 800bba8:	68fa      	ldr	r2, [r7, #12]
 800bbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbac:	4413      	add	r3, r2
 800bbae:	33f1      	adds	r3, #241	; 0xf1
 800bbb0:	460a      	mov	r2, r1
 800bbb2:	701a      	strb	r2, [r3, #0]
 800bbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbbc:	2b0f      	cmp	r3, #15
 800bbbe:	dde6      	ble.n	800bb8e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800bbc6:	f107 0314 	add.w	r3, r7, #20
 800bbca:	2210      	movs	r2, #16
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f00b fed4 	bl	801797a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	f107 0114 	add.w	r1, r7, #20
 800bbd8:	f107 0314 	add.w	r3, r7, #20
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f000 fed3 	bl	800c988 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	33f1      	adds	r3, #241	; 0xf1
 800bbe6:	f107 0114 	add.w	r1, r7, #20
 800bbea:	2210      	movs	r2, #16
 800bbec:	4618      	mov	r0, r3
 800bbee:	f00b fec4 	bl	801797a <memcpy1>

        data += mlen;
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf6:	4413      	add	r3, r2
 800bbf8:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800bc02:	e038      	b.n	800bc76 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800bc04:	2300      	movs	r3, #0
 800bc06:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc08:	e013      	b.n	800bc32 <AES_CMAC_Update+0x116>
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0e:	4413      	add	r3, r2
 800bc10:	33f1      	adds	r3, #241	; 0xf1
 800bc12:	781a      	ldrb	r2, [r3, #0]
 800bc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc16:	68b9      	ldr	r1, [r7, #8]
 800bc18:	440b      	add	r3, r1
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	4053      	eors	r3, r2
 800bc1e:	b2d9      	uxtb	r1, r3
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc24:	4413      	add	r3, r2
 800bc26:	33f1      	adds	r3, #241	; 0xf1
 800bc28:	460a      	mov	r2, r1
 800bc2a:	701a      	strb	r2, [r3, #0]
 800bc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2e:	3301      	adds	r3, #1
 800bc30:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc34:	2b0f      	cmp	r3, #15
 800bc36:	dde8      	ble.n	800bc0a <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800bc3e:	f107 0314 	add.w	r3, r7, #20
 800bc42:	2210      	movs	r2, #16
 800bc44:	4618      	mov	r0, r3
 800bc46:	f00b fe98 	bl	801797a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	f107 0114 	add.w	r1, r7, #20
 800bc50:	f107 0314 	add.w	r3, r7, #20
 800bc54:	4618      	mov	r0, r3
 800bc56:	f000 fe97 	bl	800c988 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	33f1      	adds	r3, #241	; 0xf1
 800bc5e:	f107 0114 	add.w	r1, r7, #20
 800bc62:	2210      	movs	r2, #16
 800bc64:	4618      	mov	r0, r3
 800bc66:	f00b fe88 	bl	801797a <memcpy1>

        data += 16;
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	3310      	adds	r3, #16
 800bc6e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	3b10      	subs	r3, #16
 800bc74:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2b10      	cmp	r3, #16
 800bc7a:	d8c3      	bhi.n	800bc04 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	b292      	uxth	r2, r2
 800bc86:	68b9      	ldr	r1, [r7, #8]
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f00b fe76 	bl	801797a <memcpy1>
    ctx->M_n = len;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800bc96:	e000      	b.n	800bc9a <AES_CMAC_Update+0x17e>
            return;
 800bc98:	bf00      	nop
}
 800bc9a:	3730      	adds	r7, #48	; 0x30
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b092      	sub	sp, #72	; 0x48
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800bcaa:	f107 031c 	add.w	r3, r7, #28
 800bcae:	2210      	movs	r2, #16
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f00b fe9c 	bl	80179f0 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800bcb8:	683a      	ldr	r2, [r7, #0]
 800bcba:	f107 011c 	add.w	r1, r7, #28
 800bcbe:	f107 031c 	add.w	r3, r7, #28
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f000 fe60 	bl	800c988 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800bcc8:	7f3b      	ldrb	r3, [r7, #28]
 800bcca:	b25b      	sxtb	r3, r3
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	da30      	bge.n	800bd32 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	647b      	str	r3, [r7, #68]	; 0x44
 800bcd4:	e01b      	b.n	800bd0e <AES_CMAC_Final+0x6e>
 800bcd6:	f107 021c 	add.w	r2, r7, #28
 800bcda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcdc:	4413      	add	r3, r2
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	005b      	lsls	r3, r3, #1
 800bce2:	b25a      	sxtb	r2, r3
 800bce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bce6:	3301      	adds	r3, #1
 800bce8:	3348      	adds	r3, #72	; 0x48
 800bcea:	443b      	add	r3, r7
 800bcec:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bcf0:	09db      	lsrs	r3, r3, #7
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	b25b      	sxtb	r3, r3
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	b25b      	sxtb	r3, r3
 800bcfa:	b2d9      	uxtb	r1, r3
 800bcfc:	f107 021c 	add.w	r2, r7, #28
 800bd00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd02:	4413      	add	r3, r2
 800bd04:	460a      	mov	r2, r1
 800bd06:	701a      	strb	r2, [r3, #0]
 800bd08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	647b      	str	r3, [r7, #68]	; 0x44
 800bd0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd10:	2b0e      	cmp	r3, #14
 800bd12:	dde0      	ble.n	800bcd6 <AES_CMAC_Final+0x36>
 800bd14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd18:	005b      	lsls	r3, r3, #1
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800bd20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd24:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800bd28:	43db      	mvns	r3, r3
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd30:	e027      	b.n	800bd82 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800bd32:	2300      	movs	r3, #0
 800bd34:	643b      	str	r3, [r7, #64]	; 0x40
 800bd36:	e01b      	b.n	800bd70 <AES_CMAC_Final+0xd0>
 800bd38:	f107 021c 	add.w	r2, r7, #28
 800bd3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd3e:	4413      	add	r3, r2
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	005b      	lsls	r3, r3, #1
 800bd44:	b25a      	sxtb	r2, r3
 800bd46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd48:	3301      	adds	r3, #1
 800bd4a:	3348      	adds	r3, #72	; 0x48
 800bd4c:	443b      	add	r3, r7
 800bd4e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bd52:	09db      	lsrs	r3, r3, #7
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	b25b      	sxtb	r3, r3
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	b25b      	sxtb	r3, r3
 800bd5c:	b2d9      	uxtb	r1, r3
 800bd5e:	f107 021c 	add.w	r2, r7, #28
 800bd62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd64:	4413      	add	r3, r2
 800bd66:	460a      	mov	r2, r1
 800bd68:	701a      	strb	r2, [r3, #0]
 800bd6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	643b      	str	r3, [r7, #64]	; 0x40
 800bd70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd72:	2b0e      	cmp	r3, #14
 800bd74:	dde0      	ble.n	800bd38 <AES_CMAC_Final+0x98>
 800bd76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd7a:	005b      	lsls	r3, r3, #1
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bd88:	2b10      	cmp	r3, #16
 800bd8a:	d11d      	bne.n	800bdc8 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd90:	e016      	b.n	800bdc0 <AES_CMAC_Final+0x120>
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd96:	4413      	add	r3, r2
 800bd98:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bd9c:	781a      	ldrb	r2, [r3, #0]
 800bd9e:	f107 011c 	add.w	r1, r7, #28
 800bda2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bda4:	440b      	add	r3, r1
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	4053      	eors	r3, r2
 800bdaa:	b2d9      	uxtb	r1, r3
 800bdac:	683a      	ldr	r2, [r7, #0]
 800bdae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdb0:	4413      	add	r3, r2
 800bdb2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bdb6:	460a      	mov	r2, r1
 800bdb8:	701a      	strb	r2, [r3, #0]
 800bdba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdc2:	2b0f      	cmp	r3, #15
 800bdc4:	dde5      	ble.n	800bd92 <AES_CMAC_Final+0xf2>
 800bdc6:	e096      	b.n	800bef6 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800bdc8:	7f3b      	ldrb	r3, [r7, #28]
 800bdca:	b25b      	sxtb	r3, r3
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	da30      	bge.n	800be32 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdd4:	e01b      	b.n	800be0e <AES_CMAC_Final+0x16e>
 800bdd6:	f107 021c 	add.w	r2, r7, #28
 800bdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bddc:	4413      	add	r3, r2
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	005b      	lsls	r3, r3, #1
 800bde2:	b25a      	sxtb	r2, r3
 800bde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde6:	3301      	adds	r3, #1
 800bde8:	3348      	adds	r3, #72	; 0x48
 800bdea:	443b      	add	r3, r7
 800bdec:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bdf0:	09db      	lsrs	r3, r3, #7
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	b25b      	sxtb	r3, r3
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	b25b      	sxtb	r3, r3
 800bdfa:	b2d9      	uxtb	r1, r3
 800bdfc:	f107 021c 	add.w	r2, r7, #28
 800be00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be02:	4413      	add	r3, r2
 800be04:	460a      	mov	r2, r1
 800be06:	701a      	strb	r2, [r3, #0]
 800be08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0a:	3301      	adds	r3, #1
 800be0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800be0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be10:	2b0e      	cmp	r3, #14
 800be12:	dde0      	ble.n	800bdd6 <AES_CMAC_Final+0x136>
 800be14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be18:	005b      	lsls	r3, r3, #1
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800be20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be24:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800be28:	43db      	mvns	r3, r3
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be30:	e027      	b.n	800be82 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800be32:	2300      	movs	r3, #0
 800be34:	637b      	str	r3, [r7, #52]	; 0x34
 800be36:	e01b      	b.n	800be70 <AES_CMAC_Final+0x1d0>
 800be38:	f107 021c 	add.w	r2, r7, #28
 800be3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be3e:	4413      	add	r3, r2
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	005b      	lsls	r3, r3, #1
 800be44:	b25a      	sxtb	r2, r3
 800be46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be48:	3301      	adds	r3, #1
 800be4a:	3348      	adds	r3, #72	; 0x48
 800be4c:	443b      	add	r3, r7
 800be4e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800be52:	09db      	lsrs	r3, r3, #7
 800be54:	b2db      	uxtb	r3, r3
 800be56:	b25b      	sxtb	r3, r3
 800be58:	4313      	orrs	r3, r2
 800be5a:	b25b      	sxtb	r3, r3
 800be5c:	b2d9      	uxtb	r1, r3
 800be5e:	f107 021c 	add.w	r2, r7, #28
 800be62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be64:	4413      	add	r3, r2
 800be66:	460a      	mov	r2, r1
 800be68:	701a      	strb	r2, [r3, #0]
 800be6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be6c:	3301      	adds	r3, #1
 800be6e:	637b      	str	r3, [r7, #52]	; 0x34
 800be70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be72:	2b0e      	cmp	r3, #14
 800be74:	dde0      	ble.n	800be38 <AES_CMAC_Final+0x198>
 800be76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be7a:	005b      	lsls	r3, r3, #1
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800be88:	683a      	ldr	r2, [r7, #0]
 800be8a:	4413      	add	r3, r2
 800be8c:	2280      	movs	r2, #128	; 0x80
 800be8e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800be92:	e007      	b.n	800bea4 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800be9a:	683a      	ldr	r2, [r7, #0]
 800be9c:	4413      	add	r3, r2
 800be9e:	2200      	movs	r2, #0
 800bea0:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800beaa:	1c5a      	adds	r2, r3, #1
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800beb8:	2b0f      	cmp	r3, #15
 800beba:	d9eb      	bls.n	800be94 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800bebc:	2300      	movs	r3, #0
 800bebe:	633b      	str	r3, [r7, #48]	; 0x30
 800bec0:	e016      	b.n	800bef0 <AES_CMAC_Final+0x250>
 800bec2:	683a      	ldr	r2, [r7, #0]
 800bec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec6:	4413      	add	r3, r2
 800bec8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800becc:	781a      	ldrb	r2, [r3, #0]
 800bece:	f107 011c 	add.w	r1, r7, #28
 800bed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed4:	440b      	add	r3, r1
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	4053      	eors	r3, r2
 800beda:	b2d9      	uxtb	r1, r3
 800bedc:	683a      	ldr	r2, [r7, #0]
 800bede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee0:	4413      	add	r3, r2
 800bee2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bee6:	460a      	mov	r2, r1
 800bee8:	701a      	strb	r2, [r3, #0]
 800beea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beec:	3301      	adds	r3, #1
 800beee:	633b      	str	r3, [r7, #48]	; 0x30
 800bef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef2:	2b0f      	cmp	r3, #15
 800bef4:	dde5      	ble.n	800bec2 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800bef6:	2300      	movs	r3, #0
 800bef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800befa:	e015      	b.n	800bf28 <AES_CMAC_Final+0x288>
 800befc:	683a      	ldr	r2, [r7, #0]
 800befe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf00:	4413      	add	r3, r2
 800bf02:	33f1      	adds	r3, #241	; 0xf1
 800bf04:	781a      	ldrb	r2, [r3, #0]
 800bf06:	6839      	ldr	r1, [r7, #0]
 800bf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0a:	440b      	add	r3, r1
 800bf0c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	4053      	eors	r3, r2
 800bf14:	b2d9      	uxtb	r1, r3
 800bf16:	683a      	ldr	r2, [r7, #0]
 800bf18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1a:	4413      	add	r3, r2
 800bf1c:	33f1      	adds	r3, #241	; 0xf1
 800bf1e:	460a      	mov	r2, r1
 800bf20:	701a      	strb	r2, [r3, #0]
 800bf22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf24:	3301      	adds	r3, #1
 800bf26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2a:	2b0f      	cmp	r3, #15
 800bf2c:	dde6      	ble.n	800befc <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800bf34:	f107 030c 	add.w	r3, r7, #12
 800bf38:	2210      	movs	r2, #16
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f00b fd1d 	bl	801797a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800bf40:	683a      	ldr	r2, [r7, #0]
 800bf42:	f107 030c 	add.w	r3, r7, #12
 800bf46:	6879      	ldr	r1, [r7, #4]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f000 fd1d 	bl	800c988 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800bf4e:	f107 031c 	add.w	r3, r7, #28
 800bf52:	2210      	movs	r2, #16
 800bf54:	2100      	movs	r1, #0
 800bf56:	4618      	mov	r0, r3
 800bf58:	f00b fd4a 	bl	80179f0 <memset1>
}
 800bf5c:	bf00      	nop
 800bf5e:	3748      	adds	r7, #72	; 0x48
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800bf64:	b480      	push	{r7}
 800bf66:	b083      	sub	sp, #12
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	781a      	ldrb	r2, [r3, #0]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	683a      	ldr	r2, [r7, #0]
 800bf7c:	7852      	ldrb	r2, [r2, #1]
 800bf7e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	3302      	adds	r3, #2
 800bf84:	683a      	ldr	r2, [r7, #0]
 800bf86:	7892      	ldrb	r2, [r2, #2]
 800bf88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	3303      	adds	r3, #3
 800bf8e:	683a      	ldr	r2, [r7, #0]
 800bf90:	78d2      	ldrb	r2, [r2, #3]
 800bf92:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	3304      	adds	r3, #4
 800bf98:	683a      	ldr	r2, [r7, #0]
 800bf9a:	7912      	ldrb	r2, [r2, #4]
 800bf9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	3305      	adds	r3, #5
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	7952      	ldrb	r2, [r2, #5]
 800bfa6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	3306      	adds	r3, #6
 800bfac:	683a      	ldr	r2, [r7, #0]
 800bfae:	7992      	ldrb	r2, [r2, #6]
 800bfb0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	3307      	adds	r3, #7
 800bfb6:	683a      	ldr	r2, [r7, #0]
 800bfb8:	79d2      	ldrb	r2, [r2, #7]
 800bfba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	3308      	adds	r3, #8
 800bfc0:	683a      	ldr	r2, [r7, #0]
 800bfc2:	7a12      	ldrb	r2, [r2, #8]
 800bfc4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	3309      	adds	r3, #9
 800bfca:	683a      	ldr	r2, [r7, #0]
 800bfcc:	7a52      	ldrb	r2, [r2, #9]
 800bfce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	330a      	adds	r3, #10
 800bfd4:	683a      	ldr	r2, [r7, #0]
 800bfd6:	7a92      	ldrb	r2, [r2, #10]
 800bfd8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	330b      	adds	r3, #11
 800bfde:	683a      	ldr	r2, [r7, #0]
 800bfe0:	7ad2      	ldrb	r2, [r2, #11]
 800bfe2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	330c      	adds	r3, #12
 800bfe8:	683a      	ldr	r2, [r7, #0]
 800bfea:	7b12      	ldrb	r2, [r2, #12]
 800bfec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	330d      	adds	r3, #13
 800bff2:	683a      	ldr	r2, [r7, #0]
 800bff4:	7b52      	ldrb	r2, [r2, #13]
 800bff6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	330e      	adds	r3, #14
 800bffc:	683a      	ldr	r2, [r7, #0]
 800bffe:	7b92      	ldrb	r2, [r2, #14]
 800c000:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	330f      	adds	r3, #15
 800c006:	683a      	ldr	r2, [r7, #0]
 800c008:	7bd2      	ldrb	r2, [r2, #15]
 800c00a:	701a      	strb	r2, [r3, #0]
#endif
}
 800c00c:	bf00      	nop
 800c00e:	370c      	adds	r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	bc80      	pop	{r7}
 800c014:	4770      	bx	lr

0800c016 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c016:	b480      	push	{r7}
 800c018:	b085      	sub	sp, #20
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	60f8      	str	r0, [r7, #12]
 800c01e:	60b9      	str	r1, [r7, #8]
 800c020:	4613      	mov	r3, r2
 800c022:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800c024:	e007      	b.n	800c036 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	1c53      	adds	r3, r2, #1
 800c02a:	60bb      	str	r3, [r7, #8]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	1c59      	adds	r1, r3, #1
 800c030:	60f9      	str	r1, [r7, #12]
 800c032:	7812      	ldrb	r2, [r2, #0]
 800c034:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c036:	79fb      	ldrb	r3, [r7, #7]
 800c038:	1e5a      	subs	r2, r3, #1
 800c03a:	71fa      	strb	r2, [r7, #7]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d1f2      	bne.n	800c026 <copy_block_nn+0x10>
}
 800c040:	bf00      	nop
 800c042:	bf00      	nop
 800c044:	3714      	adds	r7, #20
 800c046:	46bd      	mov	sp, r7
 800c048:	bc80      	pop	{r7}
 800c04a:	4770      	bx	lr

0800c04c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	781a      	ldrb	r2, [r3, #0]
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	4053      	eors	r3, r2
 800c060:	b2da      	uxtb	r2, r3
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	3301      	adds	r3, #1
 800c06a:	7819      	ldrb	r1, [r3, #0]
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	3301      	adds	r3, #1
 800c070:	781a      	ldrb	r2, [r3, #0]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	3301      	adds	r3, #1
 800c076:	404a      	eors	r2, r1
 800c078:	b2d2      	uxtb	r2, r2
 800c07a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	3302      	adds	r3, #2
 800c080:	7819      	ldrb	r1, [r3, #0]
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	3302      	adds	r3, #2
 800c086:	781a      	ldrb	r2, [r3, #0]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	3302      	adds	r3, #2
 800c08c:	404a      	eors	r2, r1
 800c08e:	b2d2      	uxtb	r2, r2
 800c090:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	3303      	adds	r3, #3
 800c096:	7819      	ldrb	r1, [r3, #0]
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	3303      	adds	r3, #3
 800c09c:	781a      	ldrb	r2, [r3, #0]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	3303      	adds	r3, #3
 800c0a2:	404a      	eors	r2, r1
 800c0a4:	b2d2      	uxtb	r2, r2
 800c0a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3304      	adds	r3, #4
 800c0ac:	7819      	ldrb	r1, [r3, #0]
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	3304      	adds	r3, #4
 800c0b2:	781a      	ldrb	r2, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	3304      	adds	r3, #4
 800c0b8:	404a      	eors	r2, r1
 800c0ba:	b2d2      	uxtb	r2, r2
 800c0bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	3305      	adds	r3, #5
 800c0c2:	7819      	ldrb	r1, [r3, #0]
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	3305      	adds	r3, #5
 800c0c8:	781a      	ldrb	r2, [r3, #0]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	3305      	adds	r3, #5
 800c0ce:	404a      	eors	r2, r1
 800c0d0:	b2d2      	uxtb	r2, r2
 800c0d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	3306      	adds	r3, #6
 800c0d8:	7819      	ldrb	r1, [r3, #0]
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	3306      	adds	r3, #6
 800c0de:	781a      	ldrb	r2, [r3, #0]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	3306      	adds	r3, #6
 800c0e4:	404a      	eors	r2, r1
 800c0e6:	b2d2      	uxtb	r2, r2
 800c0e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	3307      	adds	r3, #7
 800c0ee:	7819      	ldrb	r1, [r3, #0]
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	3307      	adds	r3, #7
 800c0f4:	781a      	ldrb	r2, [r3, #0]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	3307      	adds	r3, #7
 800c0fa:	404a      	eors	r2, r1
 800c0fc:	b2d2      	uxtb	r2, r2
 800c0fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	3308      	adds	r3, #8
 800c104:	7819      	ldrb	r1, [r3, #0]
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	3308      	adds	r3, #8
 800c10a:	781a      	ldrb	r2, [r3, #0]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	3308      	adds	r3, #8
 800c110:	404a      	eors	r2, r1
 800c112:	b2d2      	uxtb	r2, r2
 800c114:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	3309      	adds	r3, #9
 800c11a:	7819      	ldrb	r1, [r3, #0]
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	3309      	adds	r3, #9
 800c120:	781a      	ldrb	r2, [r3, #0]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	3309      	adds	r3, #9
 800c126:	404a      	eors	r2, r1
 800c128:	b2d2      	uxtb	r2, r2
 800c12a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	330a      	adds	r3, #10
 800c130:	7819      	ldrb	r1, [r3, #0]
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	330a      	adds	r3, #10
 800c136:	781a      	ldrb	r2, [r3, #0]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	330a      	adds	r3, #10
 800c13c:	404a      	eors	r2, r1
 800c13e:	b2d2      	uxtb	r2, r2
 800c140:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	330b      	adds	r3, #11
 800c146:	7819      	ldrb	r1, [r3, #0]
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	330b      	adds	r3, #11
 800c14c:	781a      	ldrb	r2, [r3, #0]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	330b      	adds	r3, #11
 800c152:	404a      	eors	r2, r1
 800c154:	b2d2      	uxtb	r2, r2
 800c156:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	330c      	adds	r3, #12
 800c15c:	7819      	ldrb	r1, [r3, #0]
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	330c      	adds	r3, #12
 800c162:	781a      	ldrb	r2, [r3, #0]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	330c      	adds	r3, #12
 800c168:	404a      	eors	r2, r1
 800c16a:	b2d2      	uxtb	r2, r2
 800c16c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	330d      	adds	r3, #13
 800c172:	7819      	ldrb	r1, [r3, #0]
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	330d      	adds	r3, #13
 800c178:	781a      	ldrb	r2, [r3, #0]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	330d      	adds	r3, #13
 800c17e:	404a      	eors	r2, r1
 800c180:	b2d2      	uxtb	r2, r2
 800c182:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	330e      	adds	r3, #14
 800c188:	7819      	ldrb	r1, [r3, #0]
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	330e      	adds	r3, #14
 800c18e:	781a      	ldrb	r2, [r3, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	330e      	adds	r3, #14
 800c194:	404a      	eors	r2, r1
 800c196:	b2d2      	uxtb	r2, r2
 800c198:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	330f      	adds	r3, #15
 800c19e:	7819      	ldrb	r1, [r3, #0]
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	330f      	adds	r3, #15
 800c1a4:	781a      	ldrb	r2, [r3, #0]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	330f      	adds	r3, #15
 800c1aa:	404a      	eors	r2, r1
 800c1ac:	b2d2      	uxtb	r2, r2
 800c1ae:	701a      	strb	r2, [r3, #0]
#endif
}
 800c1b0:	bf00      	nop
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bc80      	pop	{r7}
 800c1b8:	4770      	bx	lr

0800c1ba <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c1ba:	b480      	push	{r7}
 800c1bc:	b085      	sub	sp, #20
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	60f8      	str	r0, [r7, #12]
 800c1c2:	60b9      	str	r1, [r7, #8]
 800c1c4:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	781a      	ldrb	r2, [r3, #0]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	4053      	eors	r3, r2
 800c1d0:	b2da      	uxtb	r2, r3
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	7819      	ldrb	r1, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	781a      	ldrb	r2, [r3, #0]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	404a      	eors	r2, r1
 800c1e8:	b2d2      	uxtb	r2, r2
 800c1ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	3302      	adds	r3, #2
 800c1f0:	7819      	ldrb	r1, [r3, #0]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	3302      	adds	r3, #2
 800c1f6:	781a      	ldrb	r2, [r3, #0]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	3302      	adds	r3, #2
 800c1fc:	404a      	eors	r2, r1
 800c1fe:	b2d2      	uxtb	r2, r2
 800c200:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	3303      	adds	r3, #3
 800c206:	7819      	ldrb	r1, [r3, #0]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	3303      	adds	r3, #3
 800c20c:	781a      	ldrb	r2, [r3, #0]
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	3303      	adds	r3, #3
 800c212:	404a      	eors	r2, r1
 800c214:	b2d2      	uxtb	r2, r2
 800c216:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	3304      	adds	r3, #4
 800c21c:	7819      	ldrb	r1, [r3, #0]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	3304      	adds	r3, #4
 800c222:	781a      	ldrb	r2, [r3, #0]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	3304      	adds	r3, #4
 800c228:	404a      	eors	r2, r1
 800c22a:	b2d2      	uxtb	r2, r2
 800c22c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	3305      	adds	r3, #5
 800c232:	7819      	ldrb	r1, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	3305      	adds	r3, #5
 800c238:	781a      	ldrb	r2, [r3, #0]
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	3305      	adds	r3, #5
 800c23e:	404a      	eors	r2, r1
 800c240:	b2d2      	uxtb	r2, r2
 800c242:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	3306      	adds	r3, #6
 800c248:	7819      	ldrb	r1, [r3, #0]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	3306      	adds	r3, #6
 800c24e:	781a      	ldrb	r2, [r3, #0]
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	3306      	adds	r3, #6
 800c254:	404a      	eors	r2, r1
 800c256:	b2d2      	uxtb	r2, r2
 800c258:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	3307      	adds	r3, #7
 800c25e:	7819      	ldrb	r1, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	3307      	adds	r3, #7
 800c264:	781a      	ldrb	r2, [r3, #0]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	3307      	adds	r3, #7
 800c26a:	404a      	eors	r2, r1
 800c26c:	b2d2      	uxtb	r2, r2
 800c26e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	3308      	adds	r3, #8
 800c274:	7819      	ldrb	r1, [r3, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	3308      	adds	r3, #8
 800c27a:	781a      	ldrb	r2, [r3, #0]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	3308      	adds	r3, #8
 800c280:	404a      	eors	r2, r1
 800c282:	b2d2      	uxtb	r2, r2
 800c284:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	3309      	adds	r3, #9
 800c28a:	7819      	ldrb	r1, [r3, #0]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	3309      	adds	r3, #9
 800c290:	781a      	ldrb	r2, [r3, #0]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	3309      	adds	r3, #9
 800c296:	404a      	eors	r2, r1
 800c298:	b2d2      	uxtb	r2, r2
 800c29a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	330a      	adds	r3, #10
 800c2a0:	7819      	ldrb	r1, [r3, #0]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	330a      	adds	r3, #10
 800c2a6:	781a      	ldrb	r2, [r3, #0]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	330a      	adds	r3, #10
 800c2ac:	404a      	eors	r2, r1
 800c2ae:	b2d2      	uxtb	r2, r2
 800c2b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	330b      	adds	r3, #11
 800c2b6:	7819      	ldrb	r1, [r3, #0]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	330b      	adds	r3, #11
 800c2bc:	781a      	ldrb	r2, [r3, #0]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	330b      	adds	r3, #11
 800c2c2:	404a      	eors	r2, r1
 800c2c4:	b2d2      	uxtb	r2, r2
 800c2c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	330c      	adds	r3, #12
 800c2cc:	7819      	ldrb	r1, [r3, #0]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	330c      	adds	r3, #12
 800c2d2:	781a      	ldrb	r2, [r3, #0]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	330c      	adds	r3, #12
 800c2d8:	404a      	eors	r2, r1
 800c2da:	b2d2      	uxtb	r2, r2
 800c2dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	330d      	adds	r3, #13
 800c2e2:	7819      	ldrb	r1, [r3, #0]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	330d      	adds	r3, #13
 800c2e8:	781a      	ldrb	r2, [r3, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	330d      	adds	r3, #13
 800c2ee:	404a      	eors	r2, r1
 800c2f0:	b2d2      	uxtb	r2, r2
 800c2f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	330e      	adds	r3, #14
 800c2f8:	7819      	ldrb	r1, [r3, #0]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	330e      	adds	r3, #14
 800c2fe:	781a      	ldrb	r2, [r3, #0]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	330e      	adds	r3, #14
 800c304:	404a      	eors	r2, r1
 800c306:	b2d2      	uxtb	r2, r2
 800c308:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	330f      	adds	r3, #15
 800c30e:	7819      	ldrb	r1, [r3, #0]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	330f      	adds	r3, #15
 800c314:	781a      	ldrb	r2, [r3, #0]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	330f      	adds	r3, #15
 800c31a:	404a      	eors	r2, r1
 800c31c:	b2d2      	uxtb	r2, r2
 800c31e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800c320:	bf00      	nop
 800c322:	3714      	adds	r7, #20
 800c324:	46bd      	mov	sp, r7
 800c326:	bc80      	pop	{r7}
 800c328:	4770      	bx	lr

0800c32a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b082      	sub	sp, #8
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
 800c332:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800c334:	6839      	ldr	r1, [r7, #0]
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f7ff fe88 	bl	800c04c <xor_block>
}
 800c33c:	bf00      	nop
 800c33e:	3708      	adds	r7, #8
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	461a      	mov	r2, r3
 800c352:	4b48      	ldr	r3, [pc, #288]	; (800c474 <shift_sub_rows+0x130>)
 800c354:	5c9a      	ldrb	r2, [r3, r2]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	701a      	strb	r2, [r3, #0]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	3304      	adds	r3, #4
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	4619      	mov	r1, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	3304      	adds	r3, #4
 800c366:	4a43      	ldr	r2, [pc, #268]	; (800c474 <shift_sub_rows+0x130>)
 800c368:	5c52      	ldrb	r2, [r2, r1]
 800c36a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	3308      	adds	r3, #8
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	4619      	mov	r1, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	3308      	adds	r3, #8
 800c378:	4a3e      	ldr	r2, [pc, #248]	; (800c474 <shift_sub_rows+0x130>)
 800c37a:	5c52      	ldrb	r2, [r2, r1]
 800c37c:	701a      	strb	r2, [r3, #0]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	330c      	adds	r3, #12
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	4619      	mov	r1, r3
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	330c      	adds	r3, #12
 800c38a:	4a3a      	ldr	r2, [pc, #232]	; (800c474 <shift_sub_rows+0x130>)
 800c38c:	5c52      	ldrb	r2, [r2, r1]
 800c38e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	785b      	ldrb	r3, [r3, #1]
 800c394:	73fb      	strb	r3, [r7, #15]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	3305      	adds	r3, #5
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	4619      	mov	r1, r3
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	4a34      	ldr	r2, [pc, #208]	; (800c474 <shift_sub_rows+0x130>)
 800c3a4:	5c52      	ldrb	r2, [r2, r1]
 800c3a6:	701a      	strb	r2, [r3, #0]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	3309      	adds	r3, #9
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	3305      	adds	r3, #5
 800c3b4:	4a2f      	ldr	r2, [pc, #188]	; (800c474 <shift_sub_rows+0x130>)
 800c3b6:	5c52      	ldrb	r2, [r2, r1]
 800c3b8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	330d      	adds	r3, #13
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	3309      	adds	r3, #9
 800c3c6:	4a2b      	ldr	r2, [pc, #172]	; (800c474 <shift_sub_rows+0x130>)
 800c3c8:	5c52      	ldrb	r2, [r2, r1]
 800c3ca:	701a      	strb	r2, [r3, #0]
 800c3cc:	7bfa      	ldrb	r2, [r7, #15]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	330d      	adds	r3, #13
 800c3d2:	4928      	ldr	r1, [pc, #160]	; (800c474 <shift_sub_rows+0x130>)
 800c3d4:	5c8a      	ldrb	r2, [r1, r2]
 800c3d6:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	789b      	ldrb	r3, [r3, #2]
 800c3dc:	73fb      	strb	r3, [r7, #15]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	330a      	adds	r3, #10
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	3302      	adds	r3, #2
 800c3ea:	4a22      	ldr	r2, [pc, #136]	; (800c474 <shift_sub_rows+0x130>)
 800c3ec:	5c52      	ldrb	r2, [r2, r1]
 800c3ee:	701a      	strb	r2, [r3, #0]
 800c3f0:	7bfa      	ldrb	r2, [r7, #15]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	330a      	adds	r3, #10
 800c3f6:	491f      	ldr	r1, [pc, #124]	; (800c474 <shift_sub_rows+0x130>)
 800c3f8:	5c8a      	ldrb	r2, [r1, r2]
 800c3fa:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	799b      	ldrb	r3, [r3, #6]
 800c400:	73fb      	strb	r3, [r7, #15]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	330e      	adds	r3, #14
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	4619      	mov	r1, r3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	3306      	adds	r3, #6
 800c40e:	4a19      	ldr	r2, [pc, #100]	; (800c474 <shift_sub_rows+0x130>)
 800c410:	5c52      	ldrb	r2, [r2, r1]
 800c412:	701a      	strb	r2, [r3, #0]
 800c414:	7bfa      	ldrb	r2, [r7, #15]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	330e      	adds	r3, #14
 800c41a:	4916      	ldr	r1, [pc, #88]	; (800c474 <shift_sub_rows+0x130>)
 800c41c:	5c8a      	ldrb	r2, [r1, r2]
 800c41e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	7bdb      	ldrb	r3, [r3, #15]
 800c424:	73fb      	strb	r3, [r7, #15]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	330b      	adds	r3, #11
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	4619      	mov	r1, r3
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	330f      	adds	r3, #15
 800c432:	4a10      	ldr	r2, [pc, #64]	; (800c474 <shift_sub_rows+0x130>)
 800c434:	5c52      	ldrb	r2, [r2, r1]
 800c436:	701a      	strb	r2, [r3, #0]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	3307      	adds	r3, #7
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	4619      	mov	r1, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	330b      	adds	r3, #11
 800c444:	4a0b      	ldr	r2, [pc, #44]	; (800c474 <shift_sub_rows+0x130>)
 800c446:	5c52      	ldrb	r2, [r2, r1]
 800c448:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	3303      	adds	r3, #3
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	4619      	mov	r1, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	3307      	adds	r3, #7
 800c456:	4a07      	ldr	r2, [pc, #28]	; (800c474 <shift_sub_rows+0x130>)
 800c458:	5c52      	ldrb	r2, [r2, r1]
 800c45a:	701a      	strb	r2, [r3, #0]
 800c45c:	7bfa      	ldrb	r2, [r7, #15]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	3303      	adds	r3, #3
 800c462:	4904      	ldr	r1, [pc, #16]	; (800c474 <shift_sub_rows+0x130>)
 800c464:	5c8a      	ldrb	r2, [r1, r2]
 800c466:	701a      	strb	r2, [r3, #0]
}
 800c468:	bf00      	nop
 800c46a:	3714      	adds	r7, #20
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bc80      	pop	{r7}
 800c470:	4770      	bx	lr
 800c472:	bf00      	nop
 800c474:	0801cd68 	.word	0x0801cd68

0800c478 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800c480:	f107 0308 	add.w	r3, r7, #8
 800c484:	6879      	ldr	r1, [r7, #4]
 800c486:	4618      	mov	r0, r3
 800c488:	f7ff fd6c 	bl	800bf64 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800c48c:	7a3b      	ldrb	r3, [r7, #8]
 800c48e:	461a      	mov	r2, r3
 800c490:	4b9a      	ldr	r3, [pc, #616]	; (800c6fc <mix_sub_columns+0x284>)
 800c492:	5c9a      	ldrb	r2, [r3, r2]
 800c494:	7b7b      	ldrb	r3, [r7, #13]
 800c496:	4619      	mov	r1, r3
 800c498:	4b99      	ldr	r3, [pc, #612]	; (800c700 <mix_sub_columns+0x288>)
 800c49a:	5c5b      	ldrb	r3, [r3, r1]
 800c49c:	4053      	eors	r3, r2
 800c49e:	b2da      	uxtb	r2, r3
 800c4a0:	7cbb      	ldrb	r3, [r7, #18]
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	4b97      	ldr	r3, [pc, #604]	; (800c704 <mix_sub_columns+0x28c>)
 800c4a6:	5c5b      	ldrb	r3, [r3, r1]
 800c4a8:	4053      	eors	r3, r2
 800c4aa:	b2da      	uxtb	r2, r3
 800c4ac:	7dfb      	ldrb	r3, [r7, #23]
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	4b94      	ldr	r3, [pc, #592]	; (800c704 <mix_sub_columns+0x28c>)
 800c4b2:	5c5b      	ldrb	r3, [r3, r1]
 800c4b4:	4053      	eors	r3, r2
 800c4b6:	b2da      	uxtb	r2, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800c4bc:	7a3b      	ldrb	r3, [r7, #8]
 800c4be:	461a      	mov	r2, r3
 800c4c0:	4b90      	ldr	r3, [pc, #576]	; (800c704 <mix_sub_columns+0x28c>)
 800c4c2:	5c9a      	ldrb	r2, [r3, r2]
 800c4c4:	7b7b      	ldrb	r3, [r7, #13]
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	4b8c      	ldr	r3, [pc, #560]	; (800c6fc <mix_sub_columns+0x284>)
 800c4ca:	5c5b      	ldrb	r3, [r3, r1]
 800c4cc:	4053      	eors	r3, r2
 800c4ce:	b2da      	uxtb	r2, r3
 800c4d0:	7cbb      	ldrb	r3, [r7, #18]
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	4b8a      	ldr	r3, [pc, #552]	; (800c700 <mix_sub_columns+0x288>)
 800c4d6:	5c5b      	ldrb	r3, [r3, r1]
 800c4d8:	4053      	eors	r3, r2
 800c4da:	b2d9      	uxtb	r1, r3
 800c4dc:	7dfb      	ldrb	r3, [r7, #23]
 800c4de:	461a      	mov	r2, r3
 800c4e0:	4b88      	ldr	r3, [pc, #544]	; (800c704 <mix_sub_columns+0x28c>)
 800c4e2:	5c9a      	ldrb	r2, [r3, r2]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	404a      	eors	r2, r1
 800c4ea:	b2d2      	uxtb	r2, r2
 800c4ec:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800c4ee:	7a3b      	ldrb	r3, [r7, #8]
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	4b84      	ldr	r3, [pc, #528]	; (800c704 <mix_sub_columns+0x28c>)
 800c4f4:	5c9a      	ldrb	r2, [r3, r2]
 800c4f6:	7b7b      	ldrb	r3, [r7, #13]
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	4b82      	ldr	r3, [pc, #520]	; (800c704 <mix_sub_columns+0x28c>)
 800c4fc:	5c5b      	ldrb	r3, [r3, r1]
 800c4fe:	4053      	eors	r3, r2
 800c500:	b2da      	uxtb	r2, r3
 800c502:	7cbb      	ldrb	r3, [r7, #18]
 800c504:	4619      	mov	r1, r3
 800c506:	4b7d      	ldr	r3, [pc, #500]	; (800c6fc <mix_sub_columns+0x284>)
 800c508:	5c5b      	ldrb	r3, [r3, r1]
 800c50a:	4053      	eors	r3, r2
 800c50c:	b2d9      	uxtb	r1, r3
 800c50e:	7dfb      	ldrb	r3, [r7, #23]
 800c510:	461a      	mov	r2, r3
 800c512:	4b7b      	ldr	r3, [pc, #492]	; (800c700 <mix_sub_columns+0x288>)
 800c514:	5c9a      	ldrb	r2, [r3, r2]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	3302      	adds	r3, #2
 800c51a:	404a      	eors	r2, r1
 800c51c:	b2d2      	uxtb	r2, r2
 800c51e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800c520:	7a3b      	ldrb	r3, [r7, #8]
 800c522:	461a      	mov	r2, r3
 800c524:	4b76      	ldr	r3, [pc, #472]	; (800c700 <mix_sub_columns+0x288>)
 800c526:	5c9a      	ldrb	r2, [r3, r2]
 800c528:	7b7b      	ldrb	r3, [r7, #13]
 800c52a:	4619      	mov	r1, r3
 800c52c:	4b75      	ldr	r3, [pc, #468]	; (800c704 <mix_sub_columns+0x28c>)
 800c52e:	5c5b      	ldrb	r3, [r3, r1]
 800c530:	4053      	eors	r3, r2
 800c532:	b2da      	uxtb	r2, r3
 800c534:	7cbb      	ldrb	r3, [r7, #18]
 800c536:	4619      	mov	r1, r3
 800c538:	4b72      	ldr	r3, [pc, #456]	; (800c704 <mix_sub_columns+0x28c>)
 800c53a:	5c5b      	ldrb	r3, [r3, r1]
 800c53c:	4053      	eors	r3, r2
 800c53e:	b2d9      	uxtb	r1, r3
 800c540:	7dfb      	ldrb	r3, [r7, #23]
 800c542:	461a      	mov	r2, r3
 800c544:	4b6d      	ldr	r3, [pc, #436]	; (800c6fc <mix_sub_columns+0x284>)
 800c546:	5c9a      	ldrb	r2, [r3, r2]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	3303      	adds	r3, #3
 800c54c:	404a      	eors	r2, r1
 800c54e:	b2d2      	uxtb	r2, r2
 800c550:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c552:	7b3b      	ldrb	r3, [r7, #12]
 800c554:	461a      	mov	r2, r3
 800c556:	4b69      	ldr	r3, [pc, #420]	; (800c6fc <mix_sub_columns+0x284>)
 800c558:	5c9a      	ldrb	r2, [r3, r2]
 800c55a:	7c7b      	ldrb	r3, [r7, #17]
 800c55c:	4619      	mov	r1, r3
 800c55e:	4b68      	ldr	r3, [pc, #416]	; (800c700 <mix_sub_columns+0x288>)
 800c560:	5c5b      	ldrb	r3, [r3, r1]
 800c562:	4053      	eors	r3, r2
 800c564:	b2da      	uxtb	r2, r3
 800c566:	7dbb      	ldrb	r3, [r7, #22]
 800c568:	4619      	mov	r1, r3
 800c56a:	4b66      	ldr	r3, [pc, #408]	; (800c704 <mix_sub_columns+0x28c>)
 800c56c:	5c5b      	ldrb	r3, [r3, r1]
 800c56e:	4053      	eors	r3, r2
 800c570:	b2d9      	uxtb	r1, r3
 800c572:	7afb      	ldrb	r3, [r7, #11]
 800c574:	461a      	mov	r2, r3
 800c576:	4b63      	ldr	r3, [pc, #396]	; (800c704 <mix_sub_columns+0x28c>)
 800c578:	5c9a      	ldrb	r2, [r3, r2]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	3304      	adds	r3, #4
 800c57e:	404a      	eors	r2, r1
 800c580:	b2d2      	uxtb	r2, r2
 800c582:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c584:	7b3b      	ldrb	r3, [r7, #12]
 800c586:	461a      	mov	r2, r3
 800c588:	4b5e      	ldr	r3, [pc, #376]	; (800c704 <mix_sub_columns+0x28c>)
 800c58a:	5c9a      	ldrb	r2, [r3, r2]
 800c58c:	7c7b      	ldrb	r3, [r7, #17]
 800c58e:	4619      	mov	r1, r3
 800c590:	4b5a      	ldr	r3, [pc, #360]	; (800c6fc <mix_sub_columns+0x284>)
 800c592:	5c5b      	ldrb	r3, [r3, r1]
 800c594:	4053      	eors	r3, r2
 800c596:	b2da      	uxtb	r2, r3
 800c598:	7dbb      	ldrb	r3, [r7, #22]
 800c59a:	4619      	mov	r1, r3
 800c59c:	4b58      	ldr	r3, [pc, #352]	; (800c700 <mix_sub_columns+0x288>)
 800c59e:	5c5b      	ldrb	r3, [r3, r1]
 800c5a0:	4053      	eors	r3, r2
 800c5a2:	b2d9      	uxtb	r1, r3
 800c5a4:	7afb      	ldrb	r3, [r7, #11]
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	4b56      	ldr	r3, [pc, #344]	; (800c704 <mix_sub_columns+0x28c>)
 800c5aa:	5c9a      	ldrb	r2, [r3, r2]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	3305      	adds	r3, #5
 800c5b0:	404a      	eors	r2, r1
 800c5b2:	b2d2      	uxtb	r2, r2
 800c5b4:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c5b6:	7b3b      	ldrb	r3, [r7, #12]
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	4b52      	ldr	r3, [pc, #328]	; (800c704 <mix_sub_columns+0x28c>)
 800c5bc:	5c9a      	ldrb	r2, [r3, r2]
 800c5be:	7c7b      	ldrb	r3, [r7, #17]
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	4b50      	ldr	r3, [pc, #320]	; (800c704 <mix_sub_columns+0x28c>)
 800c5c4:	5c5b      	ldrb	r3, [r3, r1]
 800c5c6:	4053      	eors	r3, r2
 800c5c8:	b2da      	uxtb	r2, r3
 800c5ca:	7dbb      	ldrb	r3, [r7, #22]
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	4b4b      	ldr	r3, [pc, #300]	; (800c6fc <mix_sub_columns+0x284>)
 800c5d0:	5c5b      	ldrb	r3, [r3, r1]
 800c5d2:	4053      	eors	r3, r2
 800c5d4:	b2d9      	uxtb	r1, r3
 800c5d6:	7afb      	ldrb	r3, [r7, #11]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	4b49      	ldr	r3, [pc, #292]	; (800c700 <mix_sub_columns+0x288>)
 800c5dc:	5c9a      	ldrb	r2, [r3, r2]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	3306      	adds	r3, #6
 800c5e2:	404a      	eors	r2, r1
 800c5e4:	b2d2      	uxtb	r2, r2
 800c5e6:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800c5e8:	7b3b      	ldrb	r3, [r7, #12]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	4b44      	ldr	r3, [pc, #272]	; (800c700 <mix_sub_columns+0x288>)
 800c5ee:	5c9a      	ldrb	r2, [r3, r2]
 800c5f0:	7c7b      	ldrb	r3, [r7, #17]
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	4b43      	ldr	r3, [pc, #268]	; (800c704 <mix_sub_columns+0x28c>)
 800c5f6:	5c5b      	ldrb	r3, [r3, r1]
 800c5f8:	4053      	eors	r3, r2
 800c5fa:	b2da      	uxtb	r2, r3
 800c5fc:	7dbb      	ldrb	r3, [r7, #22]
 800c5fe:	4619      	mov	r1, r3
 800c600:	4b40      	ldr	r3, [pc, #256]	; (800c704 <mix_sub_columns+0x28c>)
 800c602:	5c5b      	ldrb	r3, [r3, r1]
 800c604:	4053      	eors	r3, r2
 800c606:	b2d9      	uxtb	r1, r3
 800c608:	7afb      	ldrb	r3, [r7, #11]
 800c60a:	461a      	mov	r2, r3
 800c60c:	4b3b      	ldr	r3, [pc, #236]	; (800c6fc <mix_sub_columns+0x284>)
 800c60e:	5c9a      	ldrb	r2, [r3, r2]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	3307      	adds	r3, #7
 800c614:	404a      	eors	r2, r1
 800c616:	b2d2      	uxtb	r2, r2
 800c618:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800c61a:	7c3b      	ldrb	r3, [r7, #16]
 800c61c:	461a      	mov	r2, r3
 800c61e:	4b37      	ldr	r3, [pc, #220]	; (800c6fc <mix_sub_columns+0x284>)
 800c620:	5c9a      	ldrb	r2, [r3, r2]
 800c622:	7d7b      	ldrb	r3, [r7, #21]
 800c624:	4619      	mov	r1, r3
 800c626:	4b36      	ldr	r3, [pc, #216]	; (800c700 <mix_sub_columns+0x288>)
 800c628:	5c5b      	ldrb	r3, [r3, r1]
 800c62a:	4053      	eors	r3, r2
 800c62c:	b2da      	uxtb	r2, r3
 800c62e:	7abb      	ldrb	r3, [r7, #10]
 800c630:	4619      	mov	r1, r3
 800c632:	4b34      	ldr	r3, [pc, #208]	; (800c704 <mix_sub_columns+0x28c>)
 800c634:	5c5b      	ldrb	r3, [r3, r1]
 800c636:	4053      	eors	r3, r2
 800c638:	b2d9      	uxtb	r1, r3
 800c63a:	7bfb      	ldrb	r3, [r7, #15]
 800c63c:	461a      	mov	r2, r3
 800c63e:	4b31      	ldr	r3, [pc, #196]	; (800c704 <mix_sub_columns+0x28c>)
 800c640:	5c9a      	ldrb	r2, [r3, r2]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	3308      	adds	r3, #8
 800c646:	404a      	eors	r2, r1
 800c648:	b2d2      	uxtb	r2, r2
 800c64a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800c64c:	7c3b      	ldrb	r3, [r7, #16]
 800c64e:	461a      	mov	r2, r3
 800c650:	4b2c      	ldr	r3, [pc, #176]	; (800c704 <mix_sub_columns+0x28c>)
 800c652:	5c9a      	ldrb	r2, [r3, r2]
 800c654:	7d7b      	ldrb	r3, [r7, #21]
 800c656:	4619      	mov	r1, r3
 800c658:	4b28      	ldr	r3, [pc, #160]	; (800c6fc <mix_sub_columns+0x284>)
 800c65a:	5c5b      	ldrb	r3, [r3, r1]
 800c65c:	4053      	eors	r3, r2
 800c65e:	b2da      	uxtb	r2, r3
 800c660:	7abb      	ldrb	r3, [r7, #10]
 800c662:	4619      	mov	r1, r3
 800c664:	4b26      	ldr	r3, [pc, #152]	; (800c700 <mix_sub_columns+0x288>)
 800c666:	5c5b      	ldrb	r3, [r3, r1]
 800c668:	4053      	eors	r3, r2
 800c66a:	b2d9      	uxtb	r1, r3
 800c66c:	7bfb      	ldrb	r3, [r7, #15]
 800c66e:	461a      	mov	r2, r3
 800c670:	4b24      	ldr	r3, [pc, #144]	; (800c704 <mix_sub_columns+0x28c>)
 800c672:	5c9a      	ldrb	r2, [r3, r2]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	3309      	adds	r3, #9
 800c678:	404a      	eors	r2, r1
 800c67a:	b2d2      	uxtb	r2, r2
 800c67c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800c67e:	7c3b      	ldrb	r3, [r7, #16]
 800c680:	461a      	mov	r2, r3
 800c682:	4b20      	ldr	r3, [pc, #128]	; (800c704 <mix_sub_columns+0x28c>)
 800c684:	5c9a      	ldrb	r2, [r3, r2]
 800c686:	7d7b      	ldrb	r3, [r7, #21]
 800c688:	4619      	mov	r1, r3
 800c68a:	4b1e      	ldr	r3, [pc, #120]	; (800c704 <mix_sub_columns+0x28c>)
 800c68c:	5c5b      	ldrb	r3, [r3, r1]
 800c68e:	4053      	eors	r3, r2
 800c690:	b2da      	uxtb	r2, r3
 800c692:	7abb      	ldrb	r3, [r7, #10]
 800c694:	4619      	mov	r1, r3
 800c696:	4b19      	ldr	r3, [pc, #100]	; (800c6fc <mix_sub_columns+0x284>)
 800c698:	5c5b      	ldrb	r3, [r3, r1]
 800c69a:	4053      	eors	r3, r2
 800c69c:	b2d9      	uxtb	r1, r3
 800c69e:	7bfb      	ldrb	r3, [r7, #15]
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	4b17      	ldr	r3, [pc, #92]	; (800c700 <mix_sub_columns+0x288>)
 800c6a4:	5c9a      	ldrb	r2, [r3, r2]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	330a      	adds	r3, #10
 800c6aa:	404a      	eors	r2, r1
 800c6ac:	b2d2      	uxtb	r2, r2
 800c6ae:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800c6b0:	7c3b      	ldrb	r3, [r7, #16]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	4b12      	ldr	r3, [pc, #72]	; (800c700 <mix_sub_columns+0x288>)
 800c6b6:	5c9a      	ldrb	r2, [r3, r2]
 800c6b8:	7d7b      	ldrb	r3, [r7, #21]
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	4b11      	ldr	r3, [pc, #68]	; (800c704 <mix_sub_columns+0x28c>)
 800c6be:	5c5b      	ldrb	r3, [r3, r1]
 800c6c0:	4053      	eors	r3, r2
 800c6c2:	b2da      	uxtb	r2, r3
 800c6c4:	7abb      	ldrb	r3, [r7, #10]
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	4b0e      	ldr	r3, [pc, #56]	; (800c704 <mix_sub_columns+0x28c>)
 800c6ca:	5c5b      	ldrb	r3, [r3, r1]
 800c6cc:	4053      	eors	r3, r2
 800c6ce:	b2d9      	uxtb	r1, r3
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	4b09      	ldr	r3, [pc, #36]	; (800c6fc <mix_sub_columns+0x284>)
 800c6d6:	5c9a      	ldrb	r2, [r3, r2]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	330b      	adds	r3, #11
 800c6dc:	404a      	eors	r2, r1
 800c6de:	b2d2      	uxtb	r2, r2
 800c6e0:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800c6e2:	7d3b      	ldrb	r3, [r7, #20]
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	4b05      	ldr	r3, [pc, #20]	; (800c6fc <mix_sub_columns+0x284>)
 800c6e8:	5c9a      	ldrb	r2, [r3, r2]
 800c6ea:	7a7b      	ldrb	r3, [r7, #9]
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	4b04      	ldr	r3, [pc, #16]	; (800c700 <mix_sub_columns+0x288>)
 800c6f0:	5c5b      	ldrb	r3, [r3, r1]
 800c6f2:	4053      	eors	r3, r2
 800c6f4:	b2da      	uxtb	r2, r3
 800c6f6:	7bbb      	ldrb	r3, [r7, #14]
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	e005      	b.n	800c708 <mix_sub_columns+0x290>
 800c6fc:	0801ce68 	.word	0x0801ce68
 800c700:	0801cf68 	.word	0x0801cf68
 800c704:	0801cd68 	.word	0x0801cd68
 800c708:	4b2d      	ldr	r3, [pc, #180]	; (800c7c0 <mix_sub_columns+0x348>)
 800c70a:	5c5b      	ldrb	r3, [r3, r1]
 800c70c:	4053      	eors	r3, r2
 800c70e:	b2d9      	uxtb	r1, r3
 800c710:	7cfb      	ldrb	r3, [r7, #19]
 800c712:	461a      	mov	r2, r3
 800c714:	4b2a      	ldr	r3, [pc, #168]	; (800c7c0 <mix_sub_columns+0x348>)
 800c716:	5c9a      	ldrb	r2, [r3, r2]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	330c      	adds	r3, #12
 800c71c:	404a      	eors	r2, r1
 800c71e:	b2d2      	uxtb	r2, r2
 800c720:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800c722:	7d3b      	ldrb	r3, [r7, #20]
 800c724:	461a      	mov	r2, r3
 800c726:	4b26      	ldr	r3, [pc, #152]	; (800c7c0 <mix_sub_columns+0x348>)
 800c728:	5c9a      	ldrb	r2, [r3, r2]
 800c72a:	7a7b      	ldrb	r3, [r7, #9]
 800c72c:	4619      	mov	r1, r3
 800c72e:	4b25      	ldr	r3, [pc, #148]	; (800c7c4 <mix_sub_columns+0x34c>)
 800c730:	5c5b      	ldrb	r3, [r3, r1]
 800c732:	4053      	eors	r3, r2
 800c734:	b2da      	uxtb	r2, r3
 800c736:	7bbb      	ldrb	r3, [r7, #14]
 800c738:	4619      	mov	r1, r3
 800c73a:	4b23      	ldr	r3, [pc, #140]	; (800c7c8 <mix_sub_columns+0x350>)
 800c73c:	5c5b      	ldrb	r3, [r3, r1]
 800c73e:	4053      	eors	r3, r2
 800c740:	b2d9      	uxtb	r1, r3
 800c742:	7cfb      	ldrb	r3, [r7, #19]
 800c744:	461a      	mov	r2, r3
 800c746:	4b1e      	ldr	r3, [pc, #120]	; (800c7c0 <mix_sub_columns+0x348>)
 800c748:	5c9a      	ldrb	r2, [r3, r2]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	330d      	adds	r3, #13
 800c74e:	404a      	eors	r2, r1
 800c750:	b2d2      	uxtb	r2, r2
 800c752:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800c754:	7d3b      	ldrb	r3, [r7, #20]
 800c756:	461a      	mov	r2, r3
 800c758:	4b19      	ldr	r3, [pc, #100]	; (800c7c0 <mix_sub_columns+0x348>)
 800c75a:	5c9a      	ldrb	r2, [r3, r2]
 800c75c:	7a7b      	ldrb	r3, [r7, #9]
 800c75e:	4619      	mov	r1, r3
 800c760:	4b17      	ldr	r3, [pc, #92]	; (800c7c0 <mix_sub_columns+0x348>)
 800c762:	5c5b      	ldrb	r3, [r3, r1]
 800c764:	4053      	eors	r3, r2
 800c766:	b2da      	uxtb	r2, r3
 800c768:	7bbb      	ldrb	r3, [r7, #14]
 800c76a:	4619      	mov	r1, r3
 800c76c:	4b15      	ldr	r3, [pc, #84]	; (800c7c4 <mix_sub_columns+0x34c>)
 800c76e:	5c5b      	ldrb	r3, [r3, r1]
 800c770:	4053      	eors	r3, r2
 800c772:	b2d9      	uxtb	r1, r3
 800c774:	7cfb      	ldrb	r3, [r7, #19]
 800c776:	461a      	mov	r2, r3
 800c778:	4b13      	ldr	r3, [pc, #76]	; (800c7c8 <mix_sub_columns+0x350>)
 800c77a:	5c9a      	ldrb	r2, [r3, r2]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	330e      	adds	r3, #14
 800c780:	404a      	eors	r2, r1
 800c782:	b2d2      	uxtb	r2, r2
 800c784:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800c786:	7d3b      	ldrb	r3, [r7, #20]
 800c788:	461a      	mov	r2, r3
 800c78a:	4b0f      	ldr	r3, [pc, #60]	; (800c7c8 <mix_sub_columns+0x350>)
 800c78c:	5c9a      	ldrb	r2, [r3, r2]
 800c78e:	7a7b      	ldrb	r3, [r7, #9]
 800c790:	4619      	mov	r1, r3
 800c792:	4b0b      	ldr	r3, [pc, #44]	; (800c7c0 <mix_sub_columns+0x348>)
 800c794:	5c5b      	ldrb	r3, [r3, r1]
 800c796:	4053      	eors	r3, r2
 800c798:	b2da      	uxtb	r2, r3
 800c79a:	7bbb      	ldrb	r3, [r7, #14]
 800c79c:	4619      	mov	r1, r3
 800c79e:	4b08      	ldr	r3, [pc, #32]	; (800c7c0 <mix_sub_columns+0x348>)
 800c7a0:	5c5b      	ldrb	r3, [r3, r1]
 800c7a2:	4053      	eors	r3, r2
 800c7a4:	b2d9      	uxtb	r1, r3
 800c7a6:	7cfb      	ldrb	r3, [r7, #19]
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	4b06      	ldr	r3, [pc, #24]	; (800c7c4 <mix_sub_columns+0x34c>)
 800c7ac:	5c9a      	ldrb	r2, [r3, r2]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	330f      	adds	r3, #15
 800c7b2:	404a      	eors	r2, r1
 800c7b4:	b2d2      	uxtb	r2, r2
 800c7b6:	701a      	strb	r2, [r3, #0]
  }
 800c7b8:	bf00      	nop
 800c7ba:	3718      	adds	r7, #24
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	0801cd68 	.word	0x0801cd68
 800c7c4:	0801ce68 	.word	0x0801ce68
 800c7c8:	0801cf68 	.word	0x0801cf68

0800c7cc <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b086      	sub	sp, #24
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	607a      	str	r2, [r7, #4]
 800c7d8:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800c7da:	7afb      	ldrb	r3, [r7, #11]
 800c7dc:	3b10      	subs	r3, #16
 800c7de:	2b10      	cmp	r3, #16
 800c7e0:	bf8c      	ite	hi
 800c7e2:	2201      	movhi	r2, #1
 800c7e4:	2200      	movls	r2, #0
 800c7e6:	b2d2      	uxtb	r2, r2
 800c7e8:	2a00      	cmp	r2, #0
 800c7ea:	d10d      	bne.n	800c808 <lorawan_aes_set_key+0x3c>
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f2:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c7f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	bf14      	ite	ne
 800c7fe:	2301      	movne	r3, #1
 800c800:	2300      	moveq	r3, #0
 800c802:	b2db      	uxtb	r3, r3
 800c804:	2b00      	cmp	r3, #0
 800c806:	d105      	bne.n	800c814 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800c810:	23ff      	movs	r3, #255	; 0xff
 800c812:	e0b2      	b.n	800c97a <lorawan_aes_set_key+0x1ae>
        break;
 800c814:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	7afa      	ldrb	r2, [r7, #11]
 800c81a:	68f9      	ldr	r1, [r7, #12]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7ff fbfa 	bl	800c016 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800c822:	7afb      	ldrb	r3, [r7, #11]
 800c824:	331c      	adds	r3, #28
 800c826:	b2db      	uxtb	r3, r3
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800c82c:	7c7b      	ldrb	r3, [r7, #17]
 800c82e:	091b      	lsrs	r3, r3, #4
 800c830:	b2db      	uxtb	r3, r3
 800c832:	3b01      	subs	r3, #1
 800c834:	b2da      	uxtb	r2, r3
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c83c:	7afb      	ldrb	r3, [r7, #11]
 800c83e:	75fb      	strb	r3, [r7, #23]
 800c840:	2301      	movs	r3, #1
 800c842:	75bb      	strb	r3, [r7, #22]
 800c844:	e093      	b.n	800c96e <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800c846:	7dfb      	ldrb	r3, [r7, #23]
 800c848:	3b04      	subs	r3, #4
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	5cd3      	ldrb	r3, [r2, r3]
 800c84e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800c850:	7dfb      	ldrb	r3, [r7, #23]
 800c852:	3b03      	subs	r3, #3
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	5cd3      	ldrb	r3, [r2, r3]
 800c858:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800c85a:	7dfb      	ldrb	r3, [r7, #23]
 800c85c:	3b02      	subs	r3, #2
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	5cd3      	ldrb	r3, [r2, r3]
 800c862:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800c864:	7dfb      	ldrb	r3, [r7, #23]
 800c866:	3b01      	subs	r3, #1
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	5cd3      	ldrb	r3, [r2, r3]
 800c86c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800c86e:	7dfb      	ldrb	r3, [r7, #23]
 800c870:	7afa      	ldrb	r2, [r7, #11]
 800c872:	fbb3 f1f2 	udiv	r1, r3, r2
 800c876:	fb01 f202 	mul.w	r2, r1, r2
 800c87a:	1a9b      	subs	r3, r3, r2
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d127      	bne.n	800c8d2 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800c882:	7d7b      	ldrb	r3, [r7, #21]
 800c884:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800c886:	7d3b      	ldrb	r3, [r7, #20]
 800c888:	4a3e      	ldr	r2, [pc, #248]	; (800c984 <lorawan_aes_set_key+0x1b8>)
 800c88a:	5cd2      	ldrb	r2, [r2, r3]
 800c88c:	7dbb      	ldrb	r3, [r7, #22]
 800c88e:	4053      	eors	r3, r2
 800c890:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800c892:	7cfb      	ldrb	r3, [r7, #19]
 800c894:	4a3b      	ldr	r2, [pc, #236]	; (800c984 <lorawan_aes_set_key+0x1b8>)
 800c896:	5cd3      	ldrb	r3, [r2, r3]
 800c898:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800c89a:	7cbb      	ldrb	r3, [r7, #18]
 800c89c:	4a39      	ldr	r2, [pc, #228]	; (800c984 <lorawan_aes_set_key+0x1b8>)
 800c89e:	5cd3      	ldrb	r3, [r2, r3]
 800c8a0:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800c8a2:	7c3b      	ldrb	r3, [r7, #16]
 800c8a4:	4a37      	ldr	r2, [pc, #220]	; (800c984 <lorawan_aes_set_key+0x1b8>)
 800c8a6:	5cd3      	ldrb	r3, [r2, r3]
 800c8a8:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800c8aa:	7dbb      	ldrb	r3, [r7, #22]
 800c8ac:	005b      	lsls	r3, r3, #1
 800c8ae:	b25a      	sxtb	r2, r3
 800c8b0:	7dbb      	ldrb	r3, [r7, #22]
 800c8b2:	09db      	lsrs	r3, r3, #7
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	0049      	lsls	r1, r1, #1
 800c8ba:	440b      	add	r3, r1
 800c8bc:	4619      	mov	r1, r3
 800c8be:	00c8      	lsls	r0, r1, #3
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	440b      	add	r3, r1
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	b25b      	sxtb	r3, r3
 800c8ca:	4053      	eors	r3, r2
 800c8cc:	b25b      	sxtb	r3, r3
 800c8ce:	75bb      	strb	r3, [r7, #22]
 800c8d0:	e01c      	b.n	800c90c <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800c8d2:	7afb      	ldrb	r3, [r7, #11]
 800c8d4:	2b18      	cmp	r3, #24
 800c8d6:	d919      	bls.n	800c90c <lorawan_aes_set_key+0x140>
 800c8d8:	7dfb      	ldrb	r3, [r7, #23]
 800c8da:	7afa      	ldrb	r2, [r7, #11]
 800c8dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800c8e0:	fb01 f202 	mul.w	r2, r1, r2
 800c8e4:	1a9b      	subs	r3, r3, r2
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	2b10      	cmp	r3, #16
 800c8ea:	d10f      	bne.n	800c90c <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800c8ec:	7d7b      	ldrb	r3, [r7, #21]
 800c8ee:	4a25      	ldr	r2, [pc, #148]	; (800c984 <lorawan_aes_set_key+0x1b8>)
 800c8f0:	5cd3      	ldrb	r3, [r2, r3]
 800c8f2:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800c8f4:	7d3b      	ldrb	r3, [r7, #20]
 800c8f6:	4a23      	ldr	r2, [pc, #140]	; (800c984 <lorawan_aes_set_key+0x1b8>)
 800c8f8:	5cd3      	ldrb	r3, [r2, r3]
 800c8fa:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800c8fc:	7cfb      	ldrb	r3, [r7, #19]
 800c8fe:	4a21      	ldr	r2, [pc, #132]	; (800c984 <lorawan_aes_set_key+0x1b8>)
 800c900:	5cd3      	ldrb	r3, [r2, r3]
 800c902:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800c904:	7cbb      	ldrb	r3, [r7, #18]
 800c906:	4a1f      	ldr	r2, [pc, #124]	; (800c984 <lorawan_aes_set_key+0x1b8>)
 800c908:	5cd3      	ldrb	r3, [r2, r3]
 800c90a:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800c90c:	7dfa      	ldrb	r2, [r7, #23]
 800c90e:	7afb      	ldrb	r3, [r7, #11]
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800c914:	7c3b      	ldrb	r3, [r7, #16]
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	5cd1      	ldrb	r1, [r2, r3]
 800c91a:	7dfb      	ldrb	r3, [r7, #23]
 800c91c:	7d7a      	ldrb	r2, [r7, #21]
 800c91e:	404a      	eors	r2, r1
 800c920:	b2d1      	uxtb	r1, r2
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800c926:	7c3b      	ldrb	r3, [r7, #16]
 800c928:	3301      	adds	r3, #1
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	5cd1      	ldrb	r1, [r2, r3]
 800c92e:	7dfb      	ldrb	r3, [r7, #23]
 800c930:	3301      	adds	r3, #1
 800c932:	7d3a      	ldrb	r2, [r7, #20]
 800c934:	404a      	eors	r2, r1
 800c936:	b2d1      	uxtb	r1, r2
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800c93c:	7c3b      	ldrb	r3, [r7, #16]
 800c93e:	3302      	adds	r3, #2
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	5cd1      	ldrb	r1, [r2, r3]
 800c944:	7dfb      	ldrb	r3, [r7, #23]
 800c946:	3302      	adds	r3, #2
 800c948:	7cfa      	ldrb	r2, [r7, #19]
 800c94a:	404a      	eors	r2, r1
 800c94c:	b2d1      	uxtb	r1, r2
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800c952:	7c3b      	ldrb	r3, [r7, #16]
 800c954:	3303      	adds	r3, #3
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	5cd1      	ldrb	r1, [r2, r3]
 800c95a:	7dfb      	ldrb	r3, [r7, #23]
 800c95c:	3303      	adds	r3, #3
 800c95e:	7cba      	ldrb	r2, [r7, #18]
 800c960:	404a      	eors	r2, r1
 800c962:	b2d1      	uxtb	r1, r2
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c968:	7dfb      	ldrb	r3, [r7, #23]
 800c96a:	3304      	adds	r3, #4
 800c96c:	75fb      	strb	r3, [r7, #23]
 800c96e:	7dfa      	ldrb	r2, [r7, #23]
 800c970:	7c7b      	ldrb	r3, [r7, #17]
 800c972:	429a      	cmp	r2, r3
 800c974:	f4ff af67 	bcc.w	800c846 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800c978:	2300      	movs	r3, #0
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3718      	adds	r7, #24
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	0801cd68 	.word	0x0801cd68

0800c988 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b08a      	sub	sp, #40	; 0x28
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d038      	beq.n	800ca10 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	f107 0314 	add.w	r3, r7, #20
 800c9a4:	68f9      	ldr	r1, [r7, #12]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7ff fc07 	bl	800c1ba <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9b2:	e014      	b.n	800c9de <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800c9b4:	f107 0314 	add.w	r3, r7, #20
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7ff fd5d 	bl	800c478 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c9c4:	0112      	lsls	r2, r2, #4
 800c9c6:	441a      	add	r2, r3
 800c9c8:	f107 0314 	add.w	r3, r7, #20
 800c9cc:	4611      	mov	r1, r2
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7ff fcab 	bl	800c32a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800c9d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9d8:	3301      	adds	r3, #1
 800c9da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800c9e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d3e3      	bcc.n	800c9b4 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800c9ec:	f107 0314 	add.w	r3, r7, #20
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7ff fca7 	bl	800c344 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c9fc:	0112      	lsls	r2, r2, #4
 800c9fe:	441a      	add	r2, r3
 800ca00:	f107 0314 	add.w	r3, r7, #20
 800ca04:	4619      	mov	r1, r3
 800ca06:	68b8      	ldr	r0, [r7, #8]
 800ca08:	f7ff fbd7 	bl	800c1ba <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	e000      	b.n	800ca12 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800ca10:	23ff      	movs	r3, #255	; 0xff
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3728      	adds	r7, #40	; 0x28
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
	...

0800ca1c <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800ca1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca1e:	b09d      	sub	sp, #116	; 0x74
 800ca20:	af10      	add	r7, sp, #64	; 0x40
 800ca22:	4603      	mov	r3, r0
 800ca24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800ca28:	2306      	movs	r3, #6
 800ca2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800ca2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ca32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca36:	4611      	mov	r1, r2
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f000 f9a7 	bl	800cd8c <SecureElementGetKeyByID>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800ca44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	f040 80b0 	bne.w	800cbae <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800ca4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d106      	bne.n	800ca64 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800ca56:	4b58      	ldr	r3, [pc, #352]	; (800cbb8 <PrintKey+0x19c>)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	2002      	movs	r0, #2
 800ca5e:	f00f fae1 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
 800ca62:	e056      	b.n	800cb12 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800ca64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d106      	bne.n	800ca7a <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800ca6c:	4b53      	ldr	r3, [pc, #332]	; (800cbbc <PrintKey+0x1a0>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	2100      	movs	r1, #0
 800ca72:	2002      	movs	r0, #2
 800ca74:	f00f fad6 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
 800ca78:	e04b      	b.n	800cb12 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800ca7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca7e:	2b03      	cmp	r3, #3
 800ca80:	d106      	bne.n	800ca90 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800ca82:	4b4f      	ldr	r3, [pc, #316]	; (800cbc0 <PrintKey+0x1a4>)
 800ca84:	2200      	movs	r2, #0
 800ca86:	2100      	movs	r1, #0
 800ca88:	2002      	movs	r0, #2
 800ca8a:	f00f facb 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
 800ca8e:	e040      	b.n	800cb12 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800ca90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca94:	2b02      	cmp	r3, #2
 800ca96:	d106      	bne.n	800caa6 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800ca98:	4b4a      	ldr	r3, [pc, #296]	; (800cbc4 <PrintKey+0x1a8>)
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	2100      	movs	r1, #0
 800ca9e:	2002      	movs	r0, #2
 800caa0:	f00f fac0 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
 800caa4:	e035      	b.n	800cb12 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800caa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caaa:	2b04      	cmp	r3, #4
 800caac:	d106      	bne.n	800cabc <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800caae:	4b46      	ldr	r3, [pc, #280]	; (800cbc8 <PrintKey+0x1ac>)
 800cab0:	2200      	movs	r2, #0
 800cab2:	2100      	movs	r1, #0
 800cab4:	2002      	movs	r0, #2
 800cab6:	f00f fab5 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
 800caba:	e02a      	b.n	800cb12 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800cabc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cac0:	2b7f      	cmp	r3, #127	; 0x7f
 800cac2:	d106      	bne.n	800cad2 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800cac4:	4b41      	ldr	r3, [pc, #260]	; (800cbcc <PrintKey+0x1b0>)
 800cac6:	2200      	movs	r2, #0
 800cac8:	2100      	movs	r1, #0
 800caca:	2002      	movs	r0, #2
 800cacc:	f00f faaa 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
 800cad0:	e01f      	b.n	800cb12 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800cad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cad6:	2b80      	cmp	r3, #128	; 0x80
 800cad8:	d106      	bne.n	800cae8 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800cada:	4b3d      	ldr	r3, [pc, #244]	; (800cbd0 <PrintKey+0x1b4>)
 800cadc:	2200      	movs	r2, #0
 800cade:	2100      	movs	r1, #0
 800cae0:	2002      	movs	r0, #2
 800cae2:	f00f fa9f 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
 800cae6:	e014      	b.n	800cb12 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800cae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caec:	2b81      	cmp	r3, #129	; 0x81
 800caee:	d106      	bne.n	800cafe <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800caf0:	4b38      	ldr	r3, [pc, #224]	; (800cbd4 <PrintKey+0x1b8>)
 800caf2:	2200      	movs	r2, #0
 800caf4:	2100      	movs	r1, #0
 800caf6:	2002      	movs	r0, #2
 800caf8:	f00f fa94 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
 800cafc:	e009      	b.n	800cb12 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800cafe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb02:	2b82      	cmp	r3, #130	; 0x82
 800cb04:	d105      	bne.n	800cb12 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800cb06:	4b34      	ldr	r3, [pc, #208]	; (800cbd8 <PrintKey+0x1bc>)
 800cb08:	2200      	movs	r2, #0
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	2002      	movs	r0, #2
 800cb0e:	f00f fa89 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800cb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb14:	785b      	ldrb	r3, [r3, #1]
 800cb16:	4618      	mov	r0, r3
 800cb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1a:	789b      	ldrb	r3, [r3, #2]
 800cb1c:	461c      	mov	r4, r3
 800cb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb20:	78db      	ldrb	r3, [r3, #3]
 800cb22:	461d      	mov	r5, r3
 800cb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb26:	791b      	ldrb	r3, [r3, #4]
 800cb28:	461e      	mov	r6, r3
 800cb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2c:	795b      	ldrb	r3, [r3, #5]
 800cb2e:	623b      	str	r3, [r7, #32]
 800cb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb32:	799b      	ldrb	r3, [r3, #6]
 800cb34:	61fb      	str	r3, [r7, #28]
 800cb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb38:	79db      	ldrb	r3, [r3, #7]
 800cb3a:	61bb      	str	r3, [r7, #24]
 800cb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3e:	7a1b      	ldrb	r3, [r3, #8]
 800cb40:	617b      	str	r3, [r7, #20]
 800cb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb44:	7a5b      	ldrb	r3, [r3, #9]
 800cb46:	613b      	str	r3, [r7, #16]
 800cb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4a:	7a9b      	ldrb	r3, [r3, #10]
 800cb4c:	60fb      	str	r3, [r7, #12]
 800cb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb50:	7adb      	ldrb	r3, [r3, #11]
 800cb52:	60bb      	str	r3, [r7, #8]
 800cb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb56:	7b1b      	ldrb	r3, [r3, #12]
 800cb58:	607b      	str	r3, [r7, #4]
 800cb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5c:	7b5b      	ldrb	r3, [r3, #13]
 800cb5e:	603b      	str	r3, [r7, #0]
 800cb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb62:	7b9b      	ldrb	r3, [r3, #14]
 800cb64:	4619      	mov	r1, r3
 800cb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb68:	7bdb      	ldrb	r3, [r3, #15]
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6e:	7c1b      	ldrb	r3, [r3, #16]
 800cb70:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb72:	920e      	str	r2, [sp, #56]	; 0x38
 800cb74:	910d      	str	r1, [sp, #52]	; 0x34
 800cb76:	683a      	ldr	r2, [r7, #0]
 800cb78:	920c      	str	r2, [sp, #48]	; 0x30
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	920b      	str	r2, [sp, #44]	; 0x2c
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	920a      	str	r2, [sp, #40]	; 0x28
 800cb82:	68fa      	ldr	r2, [r7, #12]
 800cb84:	9209      	str	r2, [sp, #36]	; 0x24
 800cb86:	693a      	ldr	r2, [r7, #16]
 800cb88:	9208      	str	r2, [sp, #32]
 800cb8a:	697a      	ldr	r2, [r7, #20]
 800cb8c:	9207      	str	r2, [sp, #28]
 800cb8e:	69ba      	ldr	r2, [r7, #24]
 800cb90:	9206      	str	r2, [sp, #24]
 800cb92:	69fa      	ldr	r2, [r7, #28]
 800cb94:	9205      	str	r2, [sp, #20]
 800cb96:	6a3b      	ldr	r3, [r7, #32]
 800cb98:	9304      	str	r3, [sp, #16]
 800cb9a:	9603      	str	r6, [sp, #12]
 800cb9c:	9502      	str	r5, [sp, #8]
 800cb9e:	9401      	str	r4, [sp, #4]
 800cba0:	9000      	str	r0, [sp, #0]
 800cba2:	4b0e      	ldr	r3, [pc, #56]	; (800cbdc <PrintKey+0x1c0>)
 800cba4:	2200      	movs	r2, #0
 800cba6:	2100      	movs	r1, #0
 800cba8:	2002      	movs	r0, #2
 800cbaa:	f00f fa3b 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800cbae:	bf00      	nop
 800cbb0:	3734      	adds	r7, #52	; 0x34
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	0801c7e8 	.word	0x0801c7e8
 800cbbc:	0801c800 	.word	0x0801c800
 800cbc0:	0801c818 	.word	0x0801c818
 800cbc4:	0801c830 	.word	0x0801c830
 800cbc8:	0801c848 	.word	0x0801c848
 800cbcc:	0801c860 	.word	0x0801c860
 800cbd0:	0801c878 	.word	0x0801c878
 800cbd4:	0801c890 	.word	0x0801c890
 800cbd8:	0801c8a8 	.word	0x0801c8a8
 800cbdc:	0801c8c0 	.word	0x0801c8c0

0800cbe0 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	6039      	str	r1, [r7, #0]
 800cbea:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cbec:	2300      	movs	r3, #0
 800cbee:	73fb      	strb	r3, [r7, #15]
 800cbf0:	e01a      	b.n	800cc28 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800cbf2:	4b12      	ldr	r3, [pc, #72]	; (800cc3c <GetKeyByID+0x5c>)
 800cbf4:	6819      	ldr	r1, [r3, #0]
 800cbf6:	7bfa      	ldrb	r2, [r7, #15]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	011b      	lsls	r3, r3, #4
 800cbfc:	4413      	add	r3, r2
 800cbfe:	440b      	add	r3, r1
 800cc00:	3310      	adds	r3, #16
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	79fa      	ldrb	r2, [r7, #7]
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d10b      	bne.n	800cc22 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800cc0a:	4b0c      	ldr	r3, [pc, #48]	; (800cc3c <GetKeyByID+0x5c>)
 800cc0c:	6819      	ldr	r1, [r3, #0]
 800cc0e:	7bfa      	ldrb	r2, [r7, #15]
 800cc10:	4613      	mov	r3, r2
 800cc12:	011b      	lsls	r3, r3, #4
 800cc14:	4413      	add	r3, r2
 800cc16:	3310      	adds	r3, #16
 800cc18:	18ca      	adds	r2, r1, r3
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	e006      	b.n	800cc30 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cc22:	7bfb      	ldrb	r3, [r7, #15]
 800cc24:	3301      	adds	r3, #1
 800cc26:	73fb      	strb	r3, [r7, #15]
 800cc28:	7bfb      	ldrb	r3, [r7, #15]
 800cc2a:	2b09      	cmp	r3, #9
 800cc2c:	d9e1      	bls.n	800cbf2 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cc2e:	2303      	movs	r3, #3
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3714      	adds	r7, #20
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bc80      	pop	{r7}
 800cc38:	4770      	bx	lr
 800cc3a:	bf00      	nop
 800cc3c:	20000aac 	.word	0x20000aac

0800cc40 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800cc40:	b590      	push	{r4, r7, lr}
 800cc42:	b0d1      	sub	sp, #324	; 0x144
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800cc4a:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800cc4e:	6020      	str	r0, [r4, #0]
 800cc50:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800cc54:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800cc58:	6001      	str	r1, [r0, #0]
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cc60:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800cc64:	801a      	strh	r2, [r3, #0]
 800cc66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cc6a:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800cc6e:	460a      	mov	r2, r1
 800cc70:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800cc72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cc76:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d003      	beq.n	800cc88 <ComputeCmac+0x48>
 800cc80:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d101      	bne.n	800cc8c <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cc88:	2302      	movs	r3, #2
 800cc8a:	e05c      	b.n	800cd46 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800cc8c:	f107 0314 	add.w	r3, r7, #20
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7fe ff1b 	bl	800bacc <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800cc96:	f107 0210 	add.w	r2, r7, #16
 800cc9a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cc9e:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	4611      	mov	r1, r2
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7ff ff9a 	bl	800cbe0 <GetKeyByID>
 800ccac:	4603      	mov	r3, r0
 800ccae:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ccb2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d143      	bne.n	800cd42 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ccba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ccbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	1c5a      	adds	r2, r3, #1
 800ccc6:	f107 0314 	add.w	r3, r7, #20
 800ccca:	4611      	mov	r1, r2
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7fe ff16 	bl	800bafe <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ccd2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ccd6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d009      	beq.n	800ccf4 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800cce0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cce4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800cce8:	f107 0014 	add.w	r0, r7, #20
 800ccec:	2210      	movs	r2, #16
 800ccee:	6819      	ldr	r1, [r3, #0]
 800ccf0:	f7fe ff14 	bl	800bb1c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ccf4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ccf8:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800ccfc:	881a      	ldrh	r2, [r3, #0]
 800ccfe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cd02:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800cd06:	f107 0014 	add.w	r0, r7, #20
 800cd0a:	6819      	ldr	r1, [r3, #0]
 800cd0c:	f7fe ff06 	bl	800bb1c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800cd10:	f107 0214 	add.w	r2, r7, #20
 800cd14:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800cd18:	4611      	mov	r1, r2
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7fe ffc0 	bl	800bca0 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800cd20:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800cd24:	061a      	lsls	r2, r3, #24
 800cd26:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800cd2a:	041b      	lsls	r3, r3, #16
 800cd2c:	431a      	orrs	r2, r3
 800cd2e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800cd32:	021b      	lsls	r3, r3, #8
 800cd34:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800cd36:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800cd3a:	431a      	orrs	r2, r3
 800cd3c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800cd40:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800cd42:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd90      	pop	{r4, r7, pc}

0800cd50 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d101      	bne.n	800cd64 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cd60:	2302      	movs	r3, #2
 800cd62:	e00a      	b.n	800cd7a <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800cd64:	4a07      	ldr	r2, [pc, #28]	; (800cd84 <SecureElementInit+0x34>)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800cd6a:	4b06      	ldr	r3, [pc, #24]	; (800cd84 <SecureElementInit+0x34>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	22c0      	movs	r2, #192	; 0xc0
 800cd70:	4905      	ldr	r1, [pc, #20]	; (800cd88 <SecureElementInit+0x38>)
 800cd72:	4618      	mov	r0, r3
 800cd74:	f00a fe01 	bl	801797a <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3708      	adds	r7, #8
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	20000aac 	.word	0x20000aac
 800cd88:	0801d1fc 	.word	0x0801d1fc

0800cd8c <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b085      	sub	sp, #20
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	4603      	mov	r3, r0
 800cd94:	6039      	str	r1, [r7, #0]
 800cd96:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800cd98:	2300      	movs	r3, #0
 800cd9a:	73fb      	strb	r3, [r7, #15]
 800cd9c:	e01a      	b.n	800cdd4 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800cd9e:	4b12      	ldr	r3, [pc, #72]	; (800cde8 <SecureElementGetKeyByID+0x5c>)
 800cda0:	6819      	ldr	r1, [r3, #0]
 800cda2:	7bfa      	ldrb	r2, [r7, #15]
 800cda4:	4613      	mov	r3, r2
 800cda6:	011b      	lsls	r3, r3, #4
 800cda8:	4413      	add	r3, r2
 800cdaa:	440b      	add	r3, r1
 800cdac:	3310      	adds	r3, #16
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	79fa      	ldrb	r2, [r7, #7]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d10b      	bne.n	800cdce <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800cdb6:	4b0c      	ldr	r3, [pc, #48]	; (800cde8 <SecureElementGetKeyByID+0x5c>)
 800cdb8:	6819      	ldr	r1, [r3, #0]
 800cdba:	7bfa      	ldrb	r2, [r7, #15]
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	011b      	lsls	r3, r3, #4
 800cdc0:	4413      	add	r3, r2
 800cdc2:	3310      	adds	r3, #16
 800cdc4:	18ca      	adds	r2, r1, r3
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	e006      	b.n	800cddc <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800cdce:	7bfb      	ldrb	r3, [r7, #15]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	73fb      	strb	r3, [r7, #15]
 800cdd4:	7bfb      	ldrb	r3, [r7, #15]
 800cdd6:	2b09      	cmp	r3, #9
 800cdd8:	d9e1      	bls.n	800cd9e <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cdda:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3714      	adds	r7, #20
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bc80      	pop	{r7}
 800cde4:	4770      	bx	lr
 800cde6:	bf00      	nop
 800cde8:	20000aac 	.word	0x20000aac

0800cdec <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800cdec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdee:	b08b      	sub	sp, #44	; 0x2c
 800cdf0:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800cdf2:	4b3f      	ldr	r3, [pc, #252]	; (800cef0 <SecureElementPrintKeys+0x104>)
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	2002      	movs	r0, #2
 800cdfa:	f00f f913 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800cdfe:	2000      	movs	r0, #0
 800ce00:	f7ff fe0c 	bl	800ca1c <PrintKey>
    PrintKey(NWK_KEY);
 800ce04:	2001      	movs	r0, #1
 800ce06:	f7ff fe09 	bl	800ca1c <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800ce0a:	4b3a      	ldr	r3, [pc, #232]	; (800cef4 <SecureElementPrintKeys+0x108>)
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	2100      	movs	r1, #0
 800ce10:	2002      	movs	r0, #2
 800ce12:	f00f f907 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800ce16:	2003      	movs	r0, #3
 800ce18:	f7ff fe00 	bl	800ca1c <PrintKey>
    PrintKey(NWK_S_KEY);
 800ce1c:	2002      	movs	r0, #2
 800ce1e:	f7ff fdfd 	bl	800ca1c <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800ce22:	4b35      	ldr	r3, [pc, #212]	; (800cef8 <SecureElementPrintKeys+0x10c>)
 800ce24:	2200      	movs	r2, #0
 800ce26:	2100      	movs	r1, #0
 800ce28:	2002      	movs	r0, #2
 800ce2a:	f00f f8fb 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ce2e:	4b33      	ldr	r3, [pc, #204]	; (800cefc <SecureElementPrintKeys+0x110>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	461a      	mov	r2, r3
 800ce36:	4b31      	ldr	r3, [pc, #196]	; (800cefc <SecureElementPrintKeys+0x110>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	785b      	ldrb	r3, [r3, #1]
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	4b2f      	ldr	r3, [pc, #188]	; (800cefc <SecureElementPrintKeys+0x110>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	789b      	ldrb	r3, [r3, #2]
 800ce44:	4618      	mov	r0, r3
 800ce46:	4b2d      	ldr	r3, [pc, #180]	; (800cefc <SecureElementPrintKeys+0x110>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	78db      	ldrb	r3, [r3, #3]
 800ce4c:	461c      	mov	r4, r3
 800ce4e:	4b2b      	ldr	r3, [pc, #172]	; (800cefc <SecureElementPrintKeys+0x110>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	791b      	ldrb	r3, [r3, #4]
 800ce54:	461d      	mov	r5, r3
 800ce56:	4b29      	ldr	r3, [pc, #164]	; (800cefc <SecureElementPrintKeys+0x110>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	795b      	ldrb	r3, [r3, #5]
 800ce5c:	461e      	mov	r6, r3
 800ce5e:	4b27      	ldr	r3, [pc, #156]	; (800cefc <SecureElementPrintKeys+0x110>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	799b      	ldrb	r3, [r3, #6]
 800ce64:	607b      	str	r3, [r7, #4]
 800ce66:	4b25      	ldr	r3, [pc, #148]	; (800cefc <SecureElementPrintKeys+0x110>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	79db      	ldrb	r3, [r3, #7]
 800ce6c:	9307      	str	r3, [sp, #28]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	9306      	str	r3, [sp, #24]
 800ce72:	9605      	str	r6, [sp, #20]
 800ce74:	9504      	str	r5, [sp, #16]
 800ce76:	9403      	str	r4, [sp, #12]
 800ce78:	9002      	str	r0, [sp, #8]
 800ce7a:	9101      	str	r1, [sp, #4]
 800ce7c:	9200      	str	r2, [sp, #0]
 800ce7e:	4b20      	ldr	r3, [pc, #128]	; (800cf00 <SecureElementPrintKeys+0x114>)
 800ce80:	2200      	movs	r2, #0
 800ce82:	2100      	movs	r1, #0
 800ce84:	2002      	movs	r0, #2
 800ce86:	f00f f8cd 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ce8a:	4b1c      	ldr	r3, [pc, #112]	; (800cefc <SecureElementPrintKeys+0x110>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	7a1b      	ldrb	r3, [r3, #8]
 800ce90:	461a      	mov	r2, r3
 800ce92:	4b1a      	ldr	r3, [pc, #104]	; (800cefc <SecureElementPrintKeys+0x110>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	7a5b      	ldrb	r3, [r3, #9]
 800ce98:	4619      	mov	r1, r3
 800ce9a:	4b18      	ldr	r3, [pc, #96]	; (800cefc <SecureElementPrintKeys+0x110>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	7a9b      	ldrb	r3, [r3, #10]
 800cea0:	4618      	mov	r0, r3
 800cea2:	4b16      	ldr	r3, [pc, #88]	; (800cefc <SecureElementPrintKeys+0x110>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	7adb      	ldrb	r3, [r3, #11]
 800cea8:	461c      	mov	r4, r3
 800ceaa:	4b14      	ldr	r3, [pc, #80]	; (800cefc <SecureElementPrintKeys+0x110>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	7b1b      	ldrb	r3, [r3, #12]
 800ceb0:	461d      	mov	r5, r3
 800ceb2:	4b12      	ldr	r3, [pc, #72]	; (800cefc <SecureElementPrintKeys+0x110>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	7b5b      	ldrb	r3, [r3, #13]
 800ceb8:	461e      	mov	r6, r3
 800ceba:	4b10      	ldr	r3, [pc, #64]	; (800cefc <SecureElementPrintKeys+0x110>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	7b9b      	ldrb	r3, [r3, #14]
 800cec0:	607b      	str	r3, [r7, #4]
 800cec2:	4b0e      	ldr	r3, [pc, #56]	; (800cefc <SecureElementPrintKeys+0x110>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	7bdb      	ldrb	r3, [r3, #15]
 800cec8:	9307      	str	r3, [sp, #28]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	9306      	str	r3, [sp, #24]
 800cece:	9605      	str	r6, [sp, #20]
 800ced0:	9504      	str	r5, [sp, #16]
 800ced2:	9403      	str	r4, [sp, #12]
 800ced4:	9002      	str	r0, [sp, #8]
 800ced6:	9101      	str	r1, [sp, #4]
 800ced8:	9200      	str	r2, [sp, #0]
 800ceda:	4b0a      	ldr	r3, [pc, #40]	; (800cf04 <SecureElementPrintKeys+0x118>)
 800cedc:	2200      	movs	r2, #0
 800cede:	2100      	movs	r1, #0
 800cee0:	2002      	movs	r0, #2
 800cee2:	f00f f89f 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800cee6:	2300      	movs	r3, #0
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	370c      	adds	r7, #12
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cef0:	0801c914 	.word	0x0801c914
 800cef4:	0801c92c 	.word	0x0801c92c
 800cef8:	0801c944 	.word	0x0801c944
 800cefc:	20000aac 	.word	0x20000aac
 800cf00:	0801c95c 	.word	0x0801c95c
 800cf04:	0801c99c 	.word	0x0801c99c

0800cf08 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800cf0c:	2004      	movs	r0, #4
 800cf0e:	f7ff fd85 	bl	800ca1c <PrintKey>
    PrintKey(MC_KE_KEY);
 800cf12:	207f      	movs	r0, #127	; 0x7f
 800cf14:	f7ff fd82 	bl	800ca1c <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800cf18:	2002      	movs	r0, #2
 800cf1a:	f7ff fd7f 	bl	800ca1c <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800cf1e:	2003      	movs	r0, #3
 800cf20:	f7ff fd7c 	bl	800ca1c <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800cf24:	2300      	movs	r3, #0
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	bd80      	pop	{r7, pc}
	...

0800cf2c <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b088      	sub	sp, #32
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	4603      	mov	r3, r0
 800cf34:	6039      	str	r1, [r7, #0]
 800cf36:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d101      	bne.n	800cf42 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cf3e:	2302      	movs	r3, #2
 800cf40:	e04c      	b.n	800cfdc <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cf42:	2300      	movs	r3, #0
 800cf44:	77fb      	strb	r3, [r7, #31]
 800cf46:	e045      	b.n	800cfd4 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800cf48:	4b26      	ldr	r3, [pc, #152]	; (800cfe4 <SecureElementSetKey+0xb8>)
 800cf4a:	6819      	ldr	r1, [r3, #0]
 800cf4c:	7ffa      	ldrb	r2, [r7, #31]
 800cf4e:	4613      	mov	r3, r2
 800cf50:	011b      	lsls	r3, r3, #4
 800cf52:	4413      	add	r3, r2
 800cf54:	440b      	add	r3, r1
 800cf56:	3310      	adds	r3, #16
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	79fa      	ldrb	r2, [r7, #7]
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d136      	bne.n	800cfce <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800cf60:	79fb      	ldrb	r3, [r7, #7]
 800cf62:	2b80      	cmp	r3, #128	; 0x80
 800cf64:	d123      	bne.n	800cfae <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800cf66:	2306      	movs	r3, #6
 800cf68:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	60fb      	str	r3, [r7, #12]
 800cf6e:	f107 0310 	add.w	r3, r7, #16
 800cf72:	2200      	movs	r2, #0
 800cf74:	601a      	str	r2, [r3, #0]
 800cf76:	605a      	str	r2, [r3, #4]
 800cf78:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800cf7a:	f107 030c 	add.w	r3, r7, #12
 800cf7e:	227f      	movs	r2, #127	; 0x7f
 800cf80:	2110      	movs	r1, #16
 800cf82:	6838      	ldr	r0, [r7, #0]
 800cf84:	f000 f87d 	bl	800d082 <SecureElementAesEncrypt>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800cf8c:	4b15      	ldr	r3, [pc, #84]	; (800cfe4 <SecureElementSetKey+0xb8>)
 800cf8e:	6819      	ldr	r1, [r3, #0]
 800cf90:	7ffa      	ldrb	r2, [r7, #31]
 800cf92:	4613      	mov	r3, r2
 800cf94:	011b      	lsls	r3, r3, #4
 800cf96:	4413      	add	r3, r2
 800cf98:	3310      	adds	r3, #16
 800cf9a:	440b      	add	r3, r1
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	f107 010c 	add.w	r1, r7, #12
 800cfa2:	2210      	movs	r2, #16
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f00a fce8 	bl	801797a <memcpy1>
                return retval;
 800cfaa:	7fbb      	ldrb	r3, [r7, #30]
 800cfac:	e016      	b.n	800cfdc <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800cfae:	4b0d      	ldr	r3, [pc, #52]	; (800cfe4 <SecureElementSetKey+0xb8>)
 800cfb0:	6819      	ldr	r1, [r3, #0]
 800cfb2:	7ffa      	ldrb	r2, [r7, #31]
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	011b      	lsls	r3, r3, #4
 800cfb8:	4413      	add	r3, r2
 800cfba:	3310      	adds	r3, #16
 800cfbc:	440b      	add	r3, r1
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	2210      	movs	r2, #16
 800cfc2:	6839      	ldr	r1, [r7, #0]
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f00a fcd8 	bl	801797a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	e006      	b.n	800cfdc <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cfce:	7ffb      	ldrb	r3, [r7, #31]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	77fb      	strb	r3, [r7, #31]
 800cfd4:	7ffb      	ldrb	r3, [r7, #31]
 800cfd6:	2b09      	cmp	r3, #9
 800cfd8:	d9b6      	bls.n	800cf48 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cfda:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3720      	adds	r7, #32
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}
 800cfe4:	20000aac 	.word	0x20000aac

0800cfe8 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b086      	sub	sp, #24
 800cfec:	af02      	add	r7, sp, #8
 800cfee:	60f8      	str	r0, [r7, #12]
 800cff0:	60b9      	str	r1, [r7, #8]
 800cff2:	4611      	mov	r1, r2
 800cff4:	461a      	mov	r2, r3
 800cff6:	460b      	mov	r3, r1
 800cff8:	80fb      	strh	r3, [r7, #6]
 800cffa:	4613      	mov	r3, r2
 800cffc:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800cffe:	797b      	ldrb	r3, [r7, #5]
 800d000:	2b7e      	cmp	r3, #126	; 0x7e
 800d002:	d901      	bls.n	800d008 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d004:	2303      	movs	r3, #3
 800d006:	e009      	b.n	800d01c <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800d008:	7979      	ldrb	r1, [r7, #5]
 800d00a:	88fa      	ldrh	r2, [r7, #6]
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	9300      	str	r3, [sp, #0]
 800d010:	460b      	mov	r3, r1
 800d012:	68b9      	ldr	r1, [r7, #8]
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f7ff fe13 	bl	800cc40 <ComputeCmac>
 800d01a:	4603      	mov	r3, r0
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b088      	sub	sp, #32
 800d028:	af02      	add	r7, sp, #8
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	607a      	str	r2, [r7, #4]
 800d02e:	461a      	mov	r2, r3
 800d030:	460b      	mov	r3, r1
 800d032:	817b      	strh	r3, [r7, #10]
 800d034:	4613      	mov	r3, r2
 800d036:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d101      	bne.n	800d042 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d03e:	2302      	movs	r3, #2
 800d040:	e01b      	b.n	800d07a <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800d042:	2306      	movs	r3, #6
 800d044:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800d046:	2300      	movs	r3, #0
 800d048:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800d04a:	7a79      	ldrb	r1, [r7, #9]
 800d04c:	897a      	ldrh	r2, [r7, #10]
 800d04e:	f107 0310 	add.w	r3, r7, #16
 800d052:	9300      	str	r3, [sp, #0]
 800d054:	460b      	mov	r3, r1
 800d056:	68f9      	ldr	r1, [r7, #12]
 800d058:	2000      	movs	r0, #0
 800d05a:	f7ff fdf1 	bl	800cc40 <ComputeCmac>
 800d05e:	4603      	mov	r3, r0
 800d060:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d062:	7dfb      	ldrb	r3, [r7, #23]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d001      	beq.n	800d06c <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800d068:	7dfb      	ldrb	r3, [r7, #23]
 800d06a:	e006      	b.n	800d07a <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	429a      	cmp	r2, r3
 800d072:	d001      	beq.n	800d078 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800d074:	2301      	movs	r3, #1
 800d076:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800d078:	7dfb      	ldrb	r3, [r7, #23]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3718      	adds	r7, #24
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b0c2      	sub	sp, #264	; 0x108
 800d086:	af00      	add	r7, sp, #0
 800d088:	60f8      	str	r0, [r7, #12]
 800d08a:	4608      	mov	r0, r1
 800d08c:	4611      	mov	r1, r2
 800d08e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800d092:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800d096:	6013      	str	r3, [r2, #0]
 800d098:	4603      	mov	r3, r0
 800d09a:	817b      	strh	r3, [r7, #10]
 800d09c:	460b      	mov	r3, r1
 800d09e:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d006      	beq.n	800d0b4 <SecureElementAesEncrypt+0x32>
 800d0a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d101      	bne.n	800d0b8 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d0b4:	2302      	movs	r3, #2
 800d0b6:	e046      	b.n	800d146 <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800d0b8:	897b      	ldrh	r3, [r7, #10]
 800d0ba:	f003 030f 	and.w	r3, r3, #15
 800d0be:	b29b      	uxth	r3, r3
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d001      	beq.n	800d0c8 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d0c4:	2305      	movs	r3, #5
 800d0c6:	e03e      	b.n	800d146 <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800d0c8:	f107 0314 	add.w	r3, r7, #20
 800d0cc:	22f0      	movs	r2, #240	; 0xf0
 800d0ce:	2100      	movs	r1, #0
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f00a fc8d 	bl	80179f0 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800d0d6:	f107 0210 	add.w	r2, r7, #16
 800d0da:	7a7b      	ldrb	r3, [r7, #9]
 800d0dc:	4611      	mov	r1, r2
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7ff fd7e 	bl	800cbe0 <GetKeyByID>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d0ea:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d127      	bne.n	800d142 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	f107 0214 	add.w	r2, r7, #20
 800d0fa:	2110      	movs	r1, #16
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7ff fb65 	bl	800c7cc <lorawan_aes_set_key>

        uint8_t block = 0;
 800d102:	2300      	movs	r3, #0
 800d104:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800d108:	e018      	b.n	800d13c <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800d10a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	18d0      	adds	r0, r2, r3
 800d112:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d116:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800d11a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800d11e:	6812      	ldr	r2, [r2, #0]
 800d120:	4413      	add	r3, r2
 800d122:	f107 0214 	add.w	r2, r7, #20
 800d126:	4619      	mov	r1, r3
 800d128:	f7ff fc2e 	bl	800c988 <lorawan_aes_encrypt>
            block = block + 16;
 800d12c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d130:	3310      	adds	r3, #16
 800d132:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800d136:	897b      	ldrh	r3, [r7, #10]
 800d138:	3b10      	subs	r3, #16
 800d13a:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800d13c:	897b      	ldrh	r3, [r7, #10]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d1e3      	bne.n	800d10a <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800d142:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800d146:	4618      	mov	r0, r3
 800d148:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b088      	sub	sp, #32
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	460b      	mov	r3, r1
 800d15a:	70fb      	strb	r3, [r7, #3]
 800d15c:	4613      	mov	r3, r2
 800d15e:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d101      	bne.n	800d16a <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d166:	2302      	movs	r3, #2
 800d168:	e02e      	b.n	800d1c8 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800d16a:	2306      	movs	r3, #6
 800d16c:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800d16e:	78bb      	ldrb	r3, [r7, #2]
 800d170:	2b7f      	cmp	r3, #127	; 0x7f
 800d172:	d104      	bne.n	800d17e <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800d174:	78fb      	ldrb	r3, [r7, #3]
 800d176:	2b04      	cmp	r3, #4
 800d178:	d001      	beq.n	800d17e <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d17a:	2303      	movs	r3, #3
 800d17c:	e024      	b.n	800d1c8 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800d17e:	2300      	movs	r3, #0
 800d180:	60fb      	str	r3, [r7, #12]
 800d182:	f107 0310 	add.w	r3, r7, #16
 800d186:	2200      	movs	r2, #0
 800d188:	601a      	str	r2, [r3, #0]
 800d18a:	605a      	str	r2, [r3, #4]
 800d18c:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800d18e:	f107 030c 	add.w	r3, r7, #12
 800d192:	78fa      	ldrb	r2, [r7, #3]
 800d194:	2110      	movs	r1, #16
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f7ff ff73 	bl	800d082 <SecureElementAesEncrypt>
 800d19c:	4603      	mov	r3, r0
 800d19e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d1a0:	7ffb      	ldrb	r3, [r7, #31]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800d1a6:	7ffb      	ldrb	r3, [r7, #31]
 800d1a8:	e00e      	b.n	800d1c8 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800d1aa:	f107 020c 	add.w	r2, r7, #12
 800d1ae:	78bb      	ldrb	r3, [r7, #2]
 800d1b0:	4611      	mov	r1, r2
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7ff feba 	bl	800cf2c <SecureElementSetKey>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d1bc:	7ffb      	ldrb	r3, [r7, #31]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d001      	beq.n	800d1c6 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800d1c2:	7ffb      	ldrb	r3, [r7, #31]
 800d1c4:	e000      	b.n	800d1c8 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d1c6:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3720      	adds	r7, #32
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b086      	sub	sp, #24
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60b9      	str	r1, [r7, #8]
 800d1d8:	607b      	str	r3, [r7, #4]
 800d1da:	4603      	mov	r3, r0
 800d1dc:	73fb      	strb	r3, [r7, #15]
 800d1de:	4613      	mov	r3, r2
 800d1e0:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d005      	beq.n	800d1f4 <SecureElementProcessJoinAccept+0x24>
 800d1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d002      	beq.n	800d1f4 <SecureElementProcessJoinAccept+0x24>
 800d1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d101      	bne.n	800d1f8 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d1f4:	2302      	movs	r3, #2
 800d1f6:	e064      	b.n	800d2c2 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800d1f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d1fc:	2b21      	cmp	r3, #33	; 0x21
 800d1fe:	d901      	bls.n	800d204 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d200:	2305      	movs	r3, #5
 800d202:	e05e      	b.n	800d2c2 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800d204:	2301      	movs	r3, #1
 800d206:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800d208:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	461a      	mov	r2, r3
 800d210:	6879      	ldr	r1, [r7, #4]
 800d212:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d214:	f00a fbb1 	bl	801797a <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	1c58      	adds	r0, r3, #1
 800d21c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d220:	b29b      	uxth	r3, r3
 800d222:	3b01      	subs	r3, #1
 800d224:	b299      	uxth	r1, r3
 800d226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d228:	3301      	adds	r3, #1
 800d22a:	7dfa      	ldrb	r2, [r7, #23]
 800d22c:	f7ff ff29 	bl	800d082 <SecureElementAesEncrypt>
 800d230:	4603      	mov	r3, r0
 800d232:	2b00      	cmp	r3, #0
 800d234:	d001      	beq.n	800d23a <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800d236:	2307      	movs	r3, #7
 800d238:	e043      	b.n	800d2c2 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800d23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23c:	330b      	adds	r3, #11
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	09db      	lsrs	r3, r3, #7
 800d242:	b2da      	uxtb	r2, r3
 800d244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d246:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800d248:	2300      	movs	r3, #0
 800d24a:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800d24c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d250:	3b04      	subs	r3, #4
 800d252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d254:	4413      	add	r3, r2
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800d25a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d25e:	3b03      	subs	r3, #3
 800d260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d262:	4413      	add	r3, r2
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	021b      	lsls	r3, r3, #8
 800d268:	693a      	ldr	r2, [r7, #16]
 800d26a:	4313      	orrs	r3, r2
 800d26c:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800d26e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d272:	3b02      	subs	r3, #2
 800d274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d276:	4413      	add	r3, r2
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	041b      	lsls	r3, r3, #16
 800d27c:	693a      	ldr	r2, [r7, #16]
 800d27e:	4313      	orrs	r3, r2
 800d280:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800d282:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d286:	3b01      	subs	r3, #1
 800d288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d28a:	4413      	add	r3, r2
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	061b      	lsls	r3, r3, #24
 800d290:	693a      	ldr	r2, [r7, #16]
 800d292:	4313      	orrs	r3, r2
 800d294:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800d296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d10e      	bne.n	800d2bc <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800d29e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	3b04      	subs	r3, #4
 800d2a6:	b299      	uxth	r1, r3
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	693a      	ldr	r2, [r7, #16]
 800d2ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2ae:	f7ff feb9 	bl	800d024 <SecureElementVerifyAesCmac>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d003      	beq.n	800d2c0 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e002      	b.n	800d2c2 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800d2bc:	2304      	movs	r3, #4
 800d2be:	e000      	b.n	800d2c2 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d2c0:	2300      	movs	r3, #0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3718      	adds	r7, #24
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
	...

0800d2cc <SecureElementRandomNumber>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d101      	bne.n	800d2de <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d2da:	2302      	movs	r3, #2
 800d2dc:	e006      	b.n	800d2ec <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800d2de:	4b05      	ldr	r3, [pc, #20]	; (800d2f4 <SecureElementRandomNumber+0x28>)
 800d2e0:	695b      	ldr	r3, [r3, #20]
 800d2e2:	4798      	blx	r3
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800d2ea:	2300      	movs	r3, #0
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	0801d0b0 	.word	0x0801d0b0

0800d2f8 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d101      	bne.n	800d30a <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d306:	2302      	movs	r3, #2
 800d308:	e007      	b.n	800d31a <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800d30a:	4b06      	ldr	r3, [pc, #24]	; (800d324 <SecureElementSetDevEui+0x2c>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2208      	movs	r2, #8
 800d310:	6879      	ldr	r1, [r7, #4]
 800d312:	4618      	mov	r0, r3
 800d314:	f00a fb31 	bl	801797a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d318:	2300      	movs	r3, #0
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3708      	adds	r7, #8
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	20000aac 	.word	0x20000aac

0800d328 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800d328:	b480      	push	{r7}
 800d32a:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800d32c:	4b02      	ldr	r3, [pc, #8]	; (800d338 <SecureElementGetDevEui+0x10>)
 800d32e:	681b      	ldr	r3, [r3, #0]
}
 800d330:	4618      	mov	r0, r3
 800d332:	46bd      	mov	sp, r7
 800d334:	bc80      	pop	{r7}
 800d336:	4770      	bx	lr
 800d338:	20000aac 	.word	0x20000aac

0800d33c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d101      	bne.n	800d34e <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d34a:	2302      	movs	r3, #2
 800d34c:	e008      	b.n	800d360 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800d34e:	4b06      	ldr	r3, [pc, #24]	; (800d368 <SecureElementSetJoinEui+0x2c>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	3308      	adds	r3, #8
 800d354:	2208      	movs	r2, #8
 800d356:	6879      	ldr	r1, [r7, #4]
 800d358:	4618      	mov	r0, r3
 800d35a:	f00a fb0e 	bl	801797a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d35e:	2300      	movs	r3, #0
}
 800d360:	4618      	mov	r0, r3
 800d362:	3708      	adds	r7, #8
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	20000aac 	.word	0x20000aac

0800d36c <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800d36c:	b480      	push	{r7}
 800d36e:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800d370:	4b03      	ldr	r3, [pc, #12]	; (800d380 <SecureElementGetJoinEui+0x14>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	3308      	adds	r3, #8
}
 800d376:	4618      	mov	r0, r3
 800d378:	46bd      	mov	sp, r7
 800d37a:	bc80      	pop	{r7}
 800d37c:	4770      	bx	lr
 800d37e:	bf00      	nop
 800d380:	20000aac 	.word	0x20000aac

0800d384 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800d38e:	4a1a      	ldr	r2, [pc, #104]	; (800d3f8 <LmHandlerInit+0x74>)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d394:	4b19      	ldr	r3, [pc, #100]	; (800d3fc <LmHandlerInit+0x78>)
 800d396:	4a1a      	ldr	r2, [pc, #104]	; (800d400 <LmHandlerInit+0x7c>)
 800d398:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d39a:	4b18      	ldr	r3, [pc, #96]	; (800d3fc <LmHandlerInit+0x78>)
 800d39c:	4a19      	ldr	r2, [pc, #100]	; (800d404 <LmHandlerInit+0x80>)
 800d39e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d3a0:	4b16      	ldr	r3, [pc, #88]	; (800d3fc <LmHandlerInit+0x78>)
 800d3a2:	4a19      	ldr	r2, [pc, #100]	; (800d408 <LmHandlerInit+0x84>)
 800d3a4:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800d3a6:	4b15      	ldr	r3, [pc, #84]	; (800d3fc <LmHandlerInit+0x78>)
 800d3a8:	4a18      	ldr	r2, [pc, #96]	; (800d40c <LmHandlerInit+0x88>)
 800d3aa:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800d3ac:	4b12      	ldr	r3, [pc, #72]	; (800d3f8 <LmHandlerInit+0x74>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4a17      	ldr	r2, [pc, #92]	; (800d410 <LmHandlerInit+0x8c>)
 800d3b4:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800d3b6:	4b10      	ldr	r3, [pc, #64]	; (800d3f8 <LmHandlerInit+0x74>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	4a14      	ldr	r2, [pc, #80]	; (800d410 <LmHandlerInit+0x8c>)
 800d3be:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800d3c0:	4b0d      	ldr	r3, [pc, #52]	; (800d3f8 <LmHandlerInit+0x74>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	689b      	ldr	r3, [r3, #8]
 800d3c6:	4a12      	ldr	r2, [pc, #72]	; (800d410 <LmHandlerInit+0x8c>)
 800d3c8:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800d3ca:	4b11      	ldr	r3, [pc, #68]	; (800d410 <LmHandlerInit+0x8c>)
 800d3cc:	4a11      	ldr	r2, [pc, #68]	; (800d414 <LmHandlerInit+0x90>)
 800d3ce:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800d3d0:	4b09      	ldr	r3, [pc, #36]	; (800d3f8 <LmHandlerInit+0x74>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	699b      	ldr	r3, [r3, #24]
 800d3d6:	4a0e      	ldr	r2, [pc, #56]	; (800d410 <LmHandlerInit+0x8c>)
 800d3d8:	6113      	str	r3, [r2, #16]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800d3da:	490f      	ldr	r1, [pc, #60]	; (800d418 <LmHandlerInit+0x94>)
 800d3dc:	2000      	movs	r0, #0
 800d3de:	f000 fd8f 	bl	800df00 <LmHandlerPackageRegister>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d002      	beq.n	800d3ee <LmHandlerInit+0x6a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d3ec:	e000      	b.n	800d3f0 <LmHandlerInit+0x6c>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800d3ee:	2300      	movs	r3, #0
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3708      	adds	r7, #8
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	20000ad8 	.word	0x20000ad8
 800d3fc:	20000adc 	.word	0x20000adc
 800d400:	0800dbcd 	.word	0x0800dbcd
 800d404:	0800dc35 	.word	0x0800dc35
 800d408:	0800dd11 	.word	0x0800dd11
 800d40c:	0800de2d 	.word	0x0800de2d
 800d410:	20000aec 	.word	0x20000aec
 800d414:	0800e29d 	.word	0x0800e29d
 800d418:	20000094 	.word	0x20000094

0800d41c <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b094      	sub	sp, #80	; 0x50
 800d420:	af04      	add	r7, sp, #16
 800d422:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800d424:	2214      	movs	r2, #20
 800d426:	6879      	ldr	r1, [r7, #4]
 800d428:	488f      	ldr	r0, [pc, #572]	; (800d668 <LmHandlerConfigure+0x24c>)
 800d42a:	f00d fdab 	bl	801af84 <UTIL_MEM_cpy_8>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800d42e:	f7fe fb0b 	bl	800ba48 <LoraInfo_GetPtr>
 800d432:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800d434:	4b8c      	ldr	r3, [pc, #560]	; (800d668 <LmHandlerConfigure+0x24c>)
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	461a      	mov	r2, r3
 800d43a:	2301      	movs	r3, #1
 800d43c:	4093      	lsls	r3, r2
 800d43e:	461a      	mov	r2, r3
 800d440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	4013      	ands	r3, r2
 800d446:	2b00      	cmp	r3, #0
 800d448:	d106      	bne.n	800d458 <LmHandlerConfigure+0x3c>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800d44a:	4b88      	ldr	r3, [pc, #544]	; (800d66c <LmHandlerConfigure+0x250>)
 800d44c:	2201      	movs	r2, #1
 800d44e:	2100      	movs	r1, #0
 800d450:	2000      	movs	r0, #0
 800d452:	f00e fde7 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800d456:	e7fe      	b.n	800d456 <LmHandlerConfigure+0x3a>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800d458:	4b83      	ldr	r3, [pc, #524]	; (800d668 <LmHandlerConfigure+0x24c>)
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	461a      	mov	r2, r3
 800d45e:	4984      	ldr	r1, [pc, #528]	; (800d670 <LmHandlerConfigure+0x254>)
 800d460:	4884      	ldr	r0, [pc, #528]	; (800d674 <LmHandlerConfigure+0x258>)
 800d462:	f004 fc01 	bl	8011c68 <LoRaMacInitialization>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d002      	beq.n	800d472 <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800d46c:	f04f 33ff 	mov.w	r3, #4294967295
 800d470:	e0f5      	b.n	800d65e <LmHandlerConfigure+0x242>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800d472:	2326      	movs	r3, #38	; 0x26
 800d474:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800d476:	f107 0318 	add.w	r3, r7, #24
 800d47a:	4618      	mov	r0, r3
 800d47c:	f005 f918 	bl	80126b0 <LoRaMacMibSetRequestConfirm>
 800d480:	4603      	mov	r3, r0
 800d482:	2b00      	cmp	r3, #0
 800d484:	d103      	bne.n	800d48e <LmHandlerConfigure+0x72>
    {
        CtxRestoreDone = true;
 800d486:	4b7c      	ldr	r3, [pc, #496]	; (800d678 <LmHandlerConfigure+0x25c>)
 800d488:	2201      	movs	r2, #1
 800d48a:	701a      	strb	r2, [r3, #0]
 800d48c:	e02a      	b.n	800d4e4 <LmHandlerConfigure+0xc8>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800d48e:	2327      	movs	r3, #39	; 0x27
 800d490:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800d492:	4b7a      	ldr	r3, [pc, #488]	; (800d67c <LmHandlerConfigure+0x260>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	691b      	ldr	r3, [r3, #16]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d00c      	beq.n	800d4b6 <LmHandlerConfigure+0x9a>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d49c:	f107 0318 	add.w	r3, r7, #24
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f004 ff7f 	bl	80123a4 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800d4a6:	4b75      	ldr	r3, [pc, #468]	; (800d67c <LmHandlerConfigure+0x260>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	691b      	ldr	r3, [r3, #16]
 800d4ac:	69fa      	ldr	r2, [r7, #28]
 800d4ae:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 800d4b2:	4610      	mov	r0, r2
 800d4b4:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800d4b6:	2326      	movs	r3, #38	; 0x26
 800d4b8:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800d4ba:	f107 0318 	add.w	r3, r7, #24
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f005 f8f6 	bl	80126b0 <LoRaMacMibSetRequestConfirm>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d10c      	bne.n	800d4e4 <LmHandlerConfigure+0xc8>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d4ce:	f107 0318 	add.w	r3, r7, #24
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f004 ff66 	bl	80123a4 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800d4d8:	7f3b      	ldrb	r3, [r7, #28]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d002      	beq.n	800d4e4 <LmHandlerConfigure+0xc8>
            {
                CtxRestoreDone = true;
 800d4de:	4b66      	ldr	r3, [pc, #408]	; (800d678 <LmHandlerConfigure+0x25c>)
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800d4e4:	4b64      	ldr	r3, [pc, #400]	; (800d678 <LmHandlerConfigure+0x25c>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d02a      	beq.n	800d542 <LmHandlerConfigure+0x126>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800d4ec:	4b63      	ldr	r3, [pc, #396]	; (800d67c <LmHandlerConfigure+0x260>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	69db      	ldr	r3, [r3, #28]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d004      	beq.n	800d500 <LmHandlerConfigure+0xe4>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800d4f6:	4b61      	ldr	r3, [pc, #388]	; (800d67c <LmHandlerConfigure+0x260>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	69db      	ldr	r3, [r3, #28]
 800d4fc:	2000      	movs	r0, #0
 800d4fe:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800d500:	2306      	movs	r3, #6
 800d502:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800d504:	f107 0318 	add.w	r3, r7, #24
 800d508:	4618      	mov	r0, r3
 800d50a:	f004 ff4b 	bl	80123a4 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	4a5b      	ldr	r2, [pc, #364]	; (800d680 <LmHandlerConfigure+0x264>)
 800d512:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800d514:	2326      	movs	r3, #38	; 0x26
 800d516:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800d518:	f107 0318 	add.w	r3, r7, #24
 800d51c:	4618      	mov	r0, r3
 800d51e:	f004 ff41 	bl	80123a4 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800d522:	69fb      	ldr	r3, [r7, #28]
 800d524:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d528:	4b4f      	ldr	r3, [pc, #316]	; (800d668 <LmHandlerConfigure+0x24c>)
 800d52a:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800d532:	4b4d      	ldr	r3, [pc, #308]	; (800d668 <LmHandlerConfigure+0x24c>)
 800d534:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800d536:	69fb      	ldr	r3, [r7, #28]
 800d538:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800d53c:	4b4a      	ldr	r3, [pc, #296]	; (800d668 <LmHandlerConfigure+0x24c>)
 800d53e:	709a      	strb	r2, [r3, #2]
 800d540:	e019      	b.n	800d576 <LmHandlerConfigure+0x15a>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800d542:	2305      	movs	r3, #5
 800d544:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800d546:	2300      	movs	r3, #0
 800d548:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800d54a:	f107 0318 	add.w	r3, r7, #24
 800d54e:	4618      	mov	r0, r3
 800d550:	f005 f8ae 	bl	80126b0 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800d554:	4b49      	ldr	r3, [pc, #292]	; (800d67c <LmHandlerConfigure+0x260>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	4798      	blx	r3
 800d55c:	4603      	mov	r3, r0
 800d55e:	4a48      	ldr	r2, [pc, #288]	; (800d680 <LmHandlerConfigure+0x264>)
 800d560:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800d562:	2306      	movs	r3, #6
 800d564:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800d566:	4b46      	ldr	r3, [pc, #280]	; (800d680 <LmHandlerConfigure+0x264>)
 800d568:	695b      	ldr	r3, [r3, #20]
 800d56a:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800d56c:	f107 0318 	add.w	r3, r7, #24
 800d570:	4618      	mov	r0, r3
 800d572:	f005 f89d 	bl	80126b0 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800d576:	2302      	movs	r3, #2
 800d578:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d57a:	f107 0318 	add.w	r3, r7, #24
 800d57e:	4618      	mov	r0, r3
 800d580:	f004 ff10 	bl	80123a4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800d584:	69fb      	ldr	r3, [r7, #28]
 800d586:	2208      	movs	r2, #8
 800d588:	4619      	mov	r1, r3
 800d58a:	483d      	ldr	r0, [pc, #244]	; (800d680 <LmHandlerConfigure+0x264>)
 800d58c:	f00a f9f5 	bl	801797a <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800d590:	2303      	movs	r3, #3
 800d592:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d594:	f107 0318 	add.w	r3, r7, #24
 800d598:	4618      	mov	r0, r3
 800d59a:	f004 ff03 	bl	80123a4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800d59e:	69fb      	ldr	r3, [r7, #28]
 800d5a0:	2208      	movs	r2, #8
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	4837      	ldr	r0, [pc, #220]	; (800d684 <LmHandlerConfigure+0x268>)
 800d5a6:	f00a f9e8 	bl	801797a <memcpy1>

    SecureElementPrintKeys();
 800d5aa:	f7ff fc1f 	bl	800cdec <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800d5ae:	4b36      	ldr	r3, [pc, #216]	; (800d688 <LmHandlerConfigure+0x26c>)
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	4b35      	ldr	r3, [pc, #212]	; (800d68c <LmHandlerConfigure+0x270>)
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	4b35      	ldr	r3, [pc, #212]	; (800d690 <LmHandlerConfigure+0x274>)
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	4618      	mov	r0, r3
 800d5c0:	4b34      	ldr	r3, [pc, #208]	; (800d694 <LmHandlerConfigure+0x278>)
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	9303      	str	r3, [sp, #12]
 800d5c6:	9002      	str	r0, [sp, #8]
 800d5c8:	9101      	str	r1, [sp, #4]
 800d5ca:	9200      	str	r2, [sp, #0]
 800d5cc:	4b32      	ldr	r3, [pc, #200]	; (800d698 <LmHandlerConfigure+0x27c>)
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	2002      	movs	r0, #2
 800d5d4:	f00e fd26 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800d5d8:	230f      	movs	r3, #15
 800d5da:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d5e0:	f107 0318 	add.w	r3, r7, #24
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f005 f863 	bl	80126b0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800d5ea:	2310      	movs	r3, #16
 800d5ec:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d5f2:	f107 0318 	add.w	r3, r7, #24
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f005 f85a 	bl	80126b0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800d5fc:	2304      	movs	r3, #4
 800d5fe:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d600:	4b19      	ldr	r3, [pc, #100]	; (800d668 <LmHandlerConfigure+0x24c>)
 800d602:	789b      	ldrb	r3, [r3, #2]
 800d604:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d606:	f107 0318 	add.w	r3, r7, #24
 800d60a:	4618      	mov	r0, r3
 800d60c:	f005 f850 	bl	80126b0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800d610:	2337      	movs	r3, #55	; 0x37
 800d612:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800d614:	4b14      	ldr	r3, [pc, #80]	; (800d668 <LmHandlerConfigure+0x24c>)
 800d616:	691b      	ldr	r3, [r3, #16]
 800d618:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d61a:	f107 0318 	add.w	r3, r7, #24
 800d61e:	4618      	mov	r0, r3
 800d620:	f005 f846 	bl	80126b0 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d624:	230f      	movs	r3, #15
 800d626:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800d628:	4b0f      	ldr	r3, [pc, #60]	; (800d668 <LmHandlerConfigure+0x24c>)
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	f107 0210 	add.w	r2, r7, #16
 800d630:	4611      	mov	r1, r2
 800d632:	4618      	mov	r0, r3
 800d634:	f007 fe8e 	bl	8015354 <RegionGetPhyParam>
 800d638:	4603      	mov	r3, r0
 800d63a:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	bf14      	ite	ne
 800d642:	2301      	movne	r3, #1
 800d644:	2300      	moveq	r3, #0
 800d646:	b2da      	uxtb	r2, r3
 800d648:	4b07      	ldr	r3, [pc, #28]	; (800d668 <LmHandlerConfigure+0x24c>)
 800d64a:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800d64c:	2014      	movs	r0, #20
 800d64e:	f000 faa5 	bl	800db9c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800d652:	4b05      	ldr	r3, [pc, #20]	; (800d668 <LmHandlerConfigure+0x24c>)
 800d654:	799b      	ldrb	r3, [r3, #6]
 800d656:	4618      	mov	r0, r3
 800d658:	f005 fdba 	bl	80131d0 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800d65c:	2300      	movs	r3, #0
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3740      	adds	r7, #64	; 0x40
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	20000ac4 	.word	0x20000ac4
 800d66c:	0801c9dc 	.word	0x0801c9dc
 800d670:	20000aec 	.word	0x20000aec
 800d674:	20000adc 	.word	0x20000adc
 800d678:	20000bf6 	.word	0x20000bf6
 800d67c:	20000ad8 	.word	0x20000ad8
 800d680:	2000007c 	.word	0x2000007c
 800d684:	20000084 	.word	0x20000084
 800d688:	20000093 	.word	0x20000093
 800d68c:	20000092 	.word	0x20000092
 800d690:	20000091 	.word	0x20000091
 800d694:	20000090 	.word	0x20000090
 800d698:	0801ca28 	.word	0x0801ca28

0800d69c <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800d6a0:	f002 fab4 	bl	800fc0c <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800d6a4:	f000 fd30 	bl	800e108 <LmHandlerPackagesProcess>
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800d6a8:	bf00      	nop
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800d6b0:	4b02      	ldr	r3, [pc, #8]	; (800d6bc <LmHandlerGetDutyCycleWaitTime+0x10>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bc80      	pop	{r7}
 800d6ba:	4770      	bx	lr
 800d6bc:	20000b00 	.word	0x20000b00

0800d6c0 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b090      	sub	sp, #64	; 0x40
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	460a      	mov	r2, r1
 800d6ca:	71fb      	strb	r3, [r7, #7]
 800d6cc:	4613      	mov	r3, r2
 800d6ce:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800d6d6:	4b35      	ldr	r3, [pc, #212]	; (800d7ac <LmHandlerJoin+0xec>)
 800d6d8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800d6e2:	79fb      	ldrb	r3, [r7, #7]
 800d6e4:	2b02      	cmp	r3, #2
 800d6e6:	d110      	bne.n	800d70a <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800d6e8:	2302      	movs	r3, #2
 800d6ea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800d6ee:	4b30      	ldr	r3, [pc, #192]	; (800d7b0 <LmHandlerJoin+0xf0>)
 800d6f0:	2202      	movs	r2, #2
 800d6f2:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800d6f4:	4a2e      	ldr	r2, [pc, #184]	; (800d7b0 <LmHandlerJoin+0xf0>)
 800d6f6:	79bb      	ldrb	r3, [r7, #6]
 800d6f8:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800d6fa:	f004 fd69 	bl	80121d0 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800d6fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d702:	4618      	mov	r0, r3
 800d704:	f005 fb2e 	bl	8012d64 <LoRaMacMlmeRequest>
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800d708:	e04b      	b.n	800d7a2 <LmHandlerJoin+0xe2>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d70a:	2301      	movs	r3, #1
 800d70c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800d710:	4b27      	ldr	r3, [pc, #156]	; (800d7b0 <LmHandlerJoin+0xf0>)
 800d712:	2201      	movs	r2, #1
 800d714:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800d716:	4b25      	ldr	r3, [pc, #148]	; (800d7ac <LmHandlerJoin+0xec>)
 800d718:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800d71c:	4b24      	ldr	r3, [pc, #144]	; (800d7b0 <LmHandlerJoin+0xf0>)
 800d71e:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d720:	4b23      	ldr	r3, [pc, #140]	; (800d7b0 <LmHandlerJoin+0xf0>)
 800d722:	2200      	movs	r2, #0
 800d724:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800d726:	4a22      	ldr	r2, [pc, #136]	; (800d7b0 <LmHandlerJoin+0xf0>)
 800d728:	79bb      	ldrb	r3, [r7, #6]
 800d72a:	71d3      	strb	r3, [r2, #7]
        if (CtxRestoreDone == false)
 800d72c:	4b21      	ldr	r3, [pc, #132]	; (800d7b4 <LmHandlerJoin+0xf4>)
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	f083 0301 	eor.w	r3, r3, #1
 800d734:	b2db      	uxtb	r3, r3
 800d736:	2b00      	cmp	r3, #0
 800d738:	d01e      	beq.n	800d778 <LmHandlerJoin+0xb8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800d73a:	231e      	movs	r3, #30
 800d73c:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800d73e:	4b1b      	ldr	r3, [pc, #108]	; (800d7ac <LmHandlerJoin+0xec>)
 800d740:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d744:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d746:	f107 0308 	add.w	r3, r7, #8
 800d74a:	4618      	mov	r0, r3
 800d74c:	f004 ffb0 	bl	80126b0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800d750:	231f      	movs	r3, #31
 800d752:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800d754:	4b15      	ldr	r3, [pc, #84]	; (800d7ac <LmHandlerJoin+0xec>)
 800d756:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d75a:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d75c:	f107 0308 	add.w	r3, r7, #8
 800d760:	4618      	mov	r0, r3
 800d762:	f004 ffa5 	bl	80126b0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800d766:	2328      	movs	r3, #40	; 0x28
 800d768:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800d76a:	4b13      	ldr	r3, [pc, #76]	; (800d7b8 <LmHandlerJoin+0xf8>)
 800d76c:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800d76e:	f107 0308 	add.w	r3, r7, #8
 800d772:	4618      	mov	r0, r3
 800d774:	f004 ff9c 	bl	80126b0 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800d778:	f004 fd2a 	bl	80121d0 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d77c:	2301      	movs	r3, #1
 800d77e:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d780:	2301      	movs	r3, #1
 800d782:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d784:	f107 0308 	add.w	r3, r7, #8
 800d788:	4618      	mov	r0, r3
 800d78a:	f004 ff91 	bl	80126b0 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d78e:	4b0b      	ldr	r3, [pc, #44]	; (800d7bc <LmHandlerJoin+0xfc>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d794:	4806      	ldr	r0, [pc, #24]	; (800d7b0 <LmHandlerJoin+0xf0>)
 800d796:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800d798:	4b04      	ldr	r3, [pc, #16]	; (800d7ac <LmHandlerJoin+0xec>)
 800d79a:	785b      	ldrb	r3, [r3, #1]
 800d79c:	4618      	mov	r0, r3
 800d79e:	f000 f92b 	bl	800d9f8 <LmHandlerRequestClass>
}
 800d7a2:	bf00      	nop
 800d7a4:	3740      	adds	r7, #64	; 0x40
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	20000ac4 	.word	0x20000ac4
 800d7b0:	200000a0 	.word	0x200000a0
 800d7b4:	20000bf6 	.word	0x20000bf6
 800d7b8:	01000300 	.word	0x01000300
 800d7bc:	20000ad8 	.word	0x20000ad8

0800d7c0 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b08a      	sub	sp, #40	; 0x28
 800d7c4:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800d7ca:	463b      	mov	r3, r7
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f004 fde9 	bl	80123a4 <LoRaMacMibGetRequestConfirm>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800d7d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d106      	bne.n	800d7ee <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d7e0:	793b      	ldrb	r3, [r7, #4]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d101      	bne.n	800d7ea <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	e002      	b.n	800d7f0 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	e000      	b.n	800d7f0 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800d7ee:	2300      	movs	r3, #0
    }
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3728      	adds	r7, #40	; 0x28
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b08a      	sub	sp, #40	; 0x28
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	460b      	mov	r3, r1
 800d802:	70fb      	strb	r3, [r7, #3]
 800d804:	4613      	mov	r3, r2
 800d806:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d808:	23ff      	movs	r3, #255	; 0xff
 800d80a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800d80e:	f001 ff8b 	bl	800f728 <LoRaMacIsBusy>
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d002      	beq.n	800d81e <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d818:	f06f 0301 	mvn.w	r3, #1
 800d81c:	e0b6      	b.n	800d98c <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800d81e:	f7ff ffcf 	bl	800d7c0 <LmHandlerJoinStatus>
 800d822:	4603      	mov	r3, r0
 800d824:	2b01      	cmp	r3, #1
 800d826:	d00a      	beq.n	800d83e <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800d828:	4b5a      	ldr	r3, [pc, #360]	; (800d994 <LmHandlerSend+0x19c>)
 800d82a:	799b      	ldrb	r3, [r3, #6]
 800d82c:	4a59      	ldr	r2, [pc, #356]	; (800d994 <LmHandlerSend+0x19c>)
 800d82e:	79d2      	ldrb	r2, [r2, #7]
 800d830:	4611      	mov	r1, r2
 800d832:	4618      	mov	r0, r3
 800d834:	f7ff ff44 	bl	800d6c0 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d838:	f06f 0302 	mvn.w	r3, #2
 800d83c:	e0a6      	b.n	800d98c <LmHandlerSend+0x194>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800d83e:	4b56      	ldr	r3, [pc, #344]	; (800d998 <LmHandlerSend+0x1a0>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	4798      	blx	r3
 800d846:	4603      	mov	r3, r0
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00d      	beq.n	800d868 <LmHandlerSend+0x70>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	781a      	ldrb	r2, [r3, #0]
 800d850:	4b51      	ldr	r3, [pc, #324]	; (800d998 <LmHandlerSend+0x1a0>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	429a      	cmp	r2, r3
 800d858:	d006      	beq.n	800d868 <LmHandlerSend+0x70>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d002      	beq.n	800d868 <LmHandlerSend+0x70>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800d862:	f06f 0303 	mvn.w	r3, #3
 800d866:	e091      	b.n	800d98c <LmHandlerSend+0x194>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800d868:	4a4c      	ldr	r2, [pc, #304]	; (800d99c <LmHandlerSend+0x1a4>)
 800d86a:	78fb      	ldrb	r3, [r7, #3]
 800d86c:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800d86e:	78fb      	ldrb	r3, [r7, #3]
 800d870:	2b00      	cmp	r3, #0
 800d872:	bf14      	ite	ne
 800d874:	2301      	movne	r3, #1
 800d876:	2300      	moveq	r3, #0
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800d87c:	4b48      	ldr	r3, [pc, #288]	; (800d9a0 <LmHandlerSend+0x1a8>)
 800d87e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d882:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	785b      	ldrb	r3, [r3, #1]
 800d888:	f107 020c 	add.w	r2, r7, #12
 800d88c:	4611      	mov	r1, r2
 800d88e:	4618      	mov	r0, r3
 800d890:	f004 fd00 	bl	8012294 <LoRaMacQueryTxPossible>
 800d894:	4603      	mov	r3, r0
 800d896:	2b00      	cmp	r3, #0
 800d898:	d009      	beq.n	800d8ae <LmHandlerSend+0xb6>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800d89a:	2300      	movs	r3, #0
 800d89c:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800d8a6:	23f9      	movs	r3, #249	; 0xf9
 800d8a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d8ac:	e009      	b.n	800d8c2 <LmHandlerSend+0xca>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	785b      	ldrb	r3, [r3, #1]
 800d8b8:	b29b      	uxth	r3, r3
 800d8ba:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800d8c2:	4b36      	ldr	r3, [pc, #216]	; (800d99c <LmHandlerSend+0x1a4>)
 800d8c4:	687a      	ldr	r2, [r7, #4]
 800d8c6:	3310      	adds	r3, #16
 800d8c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d8cc:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800d8d0:	4b33      	ldr	r3, [pc, #204]	; (800d9a0 <LmHandlerSend+0x1a8>)
 800d8d2:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800d8d6:	4b31      	ldr	r3, [pc, #196]	; (800d99c <LmHandlerSend+0x1a4>)
 800d8d8:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800d8da:	78ba      	ldrb	r2, [r7, #2]
 800d8dc:	f107 0310 	add.w	r3, r7, #16
 800d8e0:	4611      	mov	r1, r2
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f005 fb7e 	bl	8012fe4 <LoRaMacMcpsRequest>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800d8ee:	6a3b      	ldr	r3, [r7, #32]
 800d8f0:	4a2c      	ldr	r2, [pc, #176]	; (800d9a4 <LmHandlerSend+0x1ac>)
 800d8f2:	6013      	str	r3, [r2, #0]

    switch (status)
 800d8f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d8f8:	2b11      	cmp	r3, #17
 800d8fa:	d840      	bhi.n	800d97e <LmHandlerSend+0x186>
 800d8fc:	a201      	add	r2, pc, #4	; (adr r2, 800d904 <LmHandlerSend+0x10c>)
 800d8fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d902:	bf00      	nop
 800d904:	0800d94d 	.word	0x0800d94d
 800d908:	0800d95f 	.word	0x0800d95f
 800d90c:	0800d97f 	.word	0x0800d97f
 800d910:	0800d97f 	.word	0x0800d97f
 800d914:	0800d97f 	.word	0x0800d97f
 800d918:	0800d97f 	.word	0x0800d97f
 800d91c:	0800d97f 	.word	0x0800d97f
 800d920:	0800d967 	.word	0x0800d967
 800d924:	0800d97f 	.word	0x0800d97f
 800d928:	0800d97f 	.word	0x0800d97f
 800d92c:	0800d97f 	.word	0x0800d97f
 800d930:	0800d977 	.word	0x0800d977
 800d934:	0800d97f 	.word	0x0800d97f
 800d938:	0800d97f 	.word	0x0800d97f
 800d93c:	0800d95f 	.word	0x0800d95f
 800d940:	0800d95f 	.word	0x0800d95f
 800d944:	0800d95f 	.word	0x0800d95f
 800d948:	0800d96f 	.word	0x0800d96f
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800d94c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d950:	f113 0f07 	cmn.w	r3, #7
 800d954:	d017      	beq.n	800d986 <LmHandlerSend+0x18e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d956:	2300      	movs	r3, #0
 800d958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800d95c:	e013      	b.n	800d986 <LmHandlerSend+0x18e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800d95e:	23fe      	movs	r3, #254	; 0xfe
 800d960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d964:	e010      	b.n	800d988 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d966:	23fd      	movs	r3, #253	; 0xfd
 800d968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d96c:	e00c      	b.n	800d988 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800d96e:	23fb      	movs	r3, #251	; 0xfb
 800d970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d974:	e008      	b.n	800d988 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800d976:	23fa      	movs	r3, #250	; 0xfa
 800d978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d97c:	e004      	b.n	800d988 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d97e:	23ff      	movs	r3, #255	; 0xff
 800d980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d984:	e000      	b.n	800d988 <LmHandlerSend+0x190>
            break;
 800d986:	bf00      	nop
    }

    return lmhStatus;
 800d988:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3728      	adds	r7, #40	; 0x28
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}
 800d994:	200000a0 	.word	0x200000a0
 800d998:	20000ab0 	.word	0x20000ab0
 800d99c:	200000a8 	.word	0x200000a8
 800d9a0:	20000ac4 	.word	0x20000ac4
 800d9a4:	20000b00 	.word	0x20000b00

0800d9a8 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b086      	sub	sp, #24
 800d9ac:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800d9ae:	230a      	movs	r3, #10
 800d9b0:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800d9b2:	463b      	mov	r3, r7
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f005 f9d5 	bl	8012d64 <LoRaMacMlmeRequest>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	4a06      	ldr	r2, [pc, #24]	; (800d9dc <LmHandlerDeviceTimeReq+0x34>)
 800d9c2:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800d9c4:	7dfb      	ldrb	r3, [r7, #23]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d101      	bne.n	800d9ce <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	e001      	b.n	800d9d2 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d9ce:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3718      	adds	r7, #24
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	20000b00 	.word	0x20000b00

0800d9e0 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800d9ea:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	370c      	adds	r7, #12
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bc80      	pop	{r7}
 800d9f6:	4770      	bx	lr

0800d9f8 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b08c      	sub	sp, #48	; 0x30
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	4603      	mov	r3, r0
 800da00:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800da02:	2300      	movs	r3, #0
 800da04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800da08:	f001 fe8e 	bl	800f728 <LoRaMacIsBusy>
 800da0c:	4603      	mov	r3, r0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d002      	beq.n	800da18 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800da12:	f06f 0301 	mvn.w	r3, #1
 800da16:	e073      	b.n	800db00 <LmHandlerRequestClass+0x108>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800da18:	f7ff fed2 	bl	800d7c0 <LmHandlerJoinStatus>
 800da1c:	4603      	mov	r3, r0
 800da1e:	2b01      	cmp	r3, #1
 800da20:	d002      	beq.n	800da28 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800da22:	f06f 0302 	mvn.w	r3, #2
 800da26:	e06b      	b.n	800db00 <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800da28:	2300      	movs	r3, #0
 800da2a:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800da2c:	f107 0308 	add.w	r3, r7, #8
 800da30:	4618      	mov	r0, r3
 800da32:	f004 fcb7 	bl	80123a4 <LoRaMacMibGetRequestConfirm>
 800da36:	4603      	mov	r3, r0
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d002      	beq.n	800da42 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800da3c:	f04f 33ff 	mov.w	r3, #4294967295
 800da40:	e05e      	b.n	800db00 <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 800da42:	7b3b      	ldrb	r3, [r7, #12]
 800da44:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800da48:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800da4c:	79fb      	ldrb	r3, [r7, #7]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d04d      	beq.n	800daee <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 800da52:	79fb      	ldrb	r3, [r7, #7]
 800da54:	2b02      	cmp	r3, #2
 800da56:	d028      	beq.n	800daaa <LmHandlerRequestClass+0xb2>
 800da58:	2b02      	cmp	r3, #2
 800da5a:	dc4a      	bgt.n	800daf2 <LmHandlerRequestClass+0xfa>
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d002      	beq.n	800da66 <LmHandlerRequestClass+0x6e>
 800da60:	2b01      	cmp	r3, #1
 800da62:	d01e      	beq.n	800daa2 <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800da64:	e045      	b.n	800daf2 <LmHandlerRequestClass+0xfa>
                if( currentClass != CLASS_A )
 800da66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d043      	beq.n	800daf6 <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800da6e:	79fb      	ldrb	r3, [r7, #7]
 800da70:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800da72:	f107 0308 	add.w	r3, r7, #8
 800da76:	4618      	mov	r0, r3
 800da78:	f004 fe1a 	bl	80126b0 <LoRaMacMibSetRequestConfirm>
 800da7c:	4603      	mov	r3, r0
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d10b      	bne.n	800da9a <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800da82:	4b21      	ldr	r3, [pc, #132]	; (800db08 <LmHandlerRequestClass+0x110>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d034      	beq.n	800daf6 <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800da8c:	4b1e      	ldr	r3, [pc, #120]	; (800db08 <LmHandlerRequestClass+0x110>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da92:	79fa      	ldrb	r2, [r7, #7]
 800da94:	4610      	mov	r0, r2
 800da96:	4798      	blx	r3
            break;
 800da98:	e02d      	b.n	800daf6 <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800da9a:	23ff      	movs	r3, #255	; 0xff
 800da9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800daa0:	e029      	b.n	800daf6 <LmHandlerRequestClass+0xfe>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800daa2:	23ff      	movs	r3, #255	; 0xff
 800daa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800daa8:	e028      	b.n	800dafc <LmHandlerRequestClass+0x104>
                if( currentClass != CLASS_A )
 800daaa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d003      	beq.n	800daba <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800dab2:	23ff      	movs	r3, #255	; 0xff
 800dab4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800dab8:	e01f      	b.n	800dafa <LmHandlerRequestClass+0x102>
                    mibReq.Param.Class = newClass;
 800daba:	79fb      	ldrb	r3, [r7, #7]
 800dabc:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800dabe:	f107 0308 	add.w	r3, r7, #8
 800dac2:	4618      	mov	r0, r3
 800dac4:	f004 fdf4 	bl	80126b0 <LoRaMacMibSetRequestConfirm>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d10b      	bne.n	800dae6 <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800dace:	4b0e      	ldr	r3, [pc, #56]	; (800db08 <LmHandlerRequestClass+0x110>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d010      	beq.n	800dafa <LmHandlerRequestClass+0x102>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800dad8:	4b0b      	ldr	r3, [pc, #44]	; (800db08 <LmHandlerRequestClass+0x110>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dade:	79fa      	ldrb	r2, [r7, #7]
 800dae0:	4610      	mov	r0, r2
 800dae2:	4798      	blx	r3
            break;
 800dae4:	e009      	b.n	800dafa <LmHandlerRequestClass+0x102>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800dae6:	23ff      	movs	r3, #255	; 0xff
 800dae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800daec:	e005      	b.n	800dafa <LmHandlerRequestClass+0x102>
        }
    }
 800daee:	bf00      	nop
 800daf0:	e004      	b.n	800dafc <LmHandlerRequestClass+0x104>
            break;
 800daf2:	bf00      	nop
 800daf4:	e002      	b.n	800dafc <LmHandlerRequestClass+0x104>
            break;
 800daf6:	bf00      	nop
 800daf8:	e000      	b.n	800dafc <LmHandlerRequestClass+0x104>
            break;
 800dafa:	bf00      	nop
    return errorStatus;
 800dafc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800db00:	4618      	mov	r0, r3
 800db02:	3730      	adds	r7, #48	; 0x30
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	20000ad8 	.word	0x20000ad8

0800db0c <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b08c      	sub	sp, #48	; 0x30
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d102      	bne.n	800db20 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800db1a:	f04f 33ff 	mov.w	r3, #4294967295
 800db1e:	e010      	b.n	800db42 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800db20:	2300      	movs	r3, #0
 800db22:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800db24:	f107 030c 	add.w	r3, r7, #12
 800db28:	4618      	mov	r0, r3
 800db2a:	f004 fc3b 	bl	80123a4 <LoRaMacMibGetRequestConfirm>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d002      	beq.n	800db3a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800db34:	f04f 33ff 	mov.w	r3, #4294967295
 800db38:	e003      	b.n	800db42 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800db3a:	7c3a      	ldrb	r2, [r7, #16]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800db40:	2300      	movs	r3, #0
}
 800db42:	4618      	mov	r0, r3
 800db44:	3730      	adds	r7, #48	; 0x30
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
	...

0800db4c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b08c      	sub	sp, #48	; 0x30
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d102      	bne.n	800db60 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800db5a:	f04f 33ff 	mov.w	r3, #4294967295
 800db5e:	e016      	b.n	800db8e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800db60:	231f      	movs	r3, #31
 800db62:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800db64:	f107 030c 	add.w	r3, r7, #12
 800db68:	4618      	mov	r0, r3
 800db6a:	f004 fc1b 	bl	80123a4 <LoRaMacMibGetRequestConfirm>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d002      	beq.n	800db7a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800db74:	f04f 33ff 	mov.w	r3, #4294967295
 800db78:	e009      	b.n	800db8e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800db7a:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f993 2000 	ldrsb.w	r2, [r3]
 800db88:	4b03      	ldr	r3, [pc, #12]	; (800db98 <LmHandlerGetTxDatarate+0x4c>)
 800db8a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800db8c:	2300      	movs	r3, #0
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3730      	adds	r7, #48	; 0x30
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	20000ac4 	.word	0x20000ac4

0800db9c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b08c      	sub	sp, #48	; 0x30
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800dba4:	2322      	movs	r3, #34	; 0x22
 800dba6:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800dbac:	f107 030c 	add.w	r3, r7, #12
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f004 fd7d 	bl	80126b0 <LoRaMacMibSetRequestConfirm>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d002      	beq.n	800dbc2 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800dbbc:	f04f 33ff 	mov.w	r3, #4294967295
 800dbc0:	e000      	b.n	800dbc4 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800dbc2:	2300      	movs	r3, #0
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3730      	adds	r7, #48	; 0x30
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800dbd4:	4b15      	ldr	r3, [pc, #84]	; (800dc2c <McpsConfirm+0x60>)
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	785a      	ldrb	r2, [r3, #1]
 800dbde:	4b13      	ldr	r3, [pc, #76]	; (800dc2c <McpsConfirm+0x60>)
 800dbe0:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	789b      	ldrb	r3, [r3, #2]
 800dbe6:	b25a      	sxtb	r2, r3
 800dbe8:	4b10      	ldr	r3, [pc, #64]	; (800dc2c <McpsConfirm+0x60>)
 800dbea:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	68db      	ldr	r3, [r3, #12]
 800dbf0:	4a0e      	ldr	r2, [pc, #56]	; (800dc2c <McpsConfirm+0x60>)
 800dbf2:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800dbfa:	4b0c      	ldr	r3, [pc, #48]	; (800dc2c <McpsConfirm+0x60>)
 800dbfc:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	691b      	ldr	r3, [r3, #16]
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	4b09      	ldr	r3, [pc, #36]	; (800dc2c <McpsConfirm+0x60>)
 800dc06:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	791b      	ldrb	r3, [r3, #4]
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	4b07      	ldr	r3, [pc, #28]	; (800dc2c <McpsConfirm+0x60>)
 800dc10:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800dc12:	4b07      	ldr	r3, [pc, #28]	; (800dc30 <McpsConfirm+0x64>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc18:	4804      	ldr	r0, [pc, #16]	; (800dc2c <McpsConfirm+0x60>)
 800dc1a:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800dc1c:	6879      	ldr	r1, [r7, #4]
 800dc1e:	2000      	movs	r0, #0
 800dc20:	f000 f9de 	bl	800dfe0 <LmHandlerPackagesNotify>
}
 800dc24:	bf00      	nop
 800dc26:	3708      	adds	r7, #8
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}
 800dc2c:	200000a8 	.word	0x200000a8
 800dc30:	20000ad8 	.word	0x20000ad8

0800dc34 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b088      	sub	sp, #32
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800dc42:	4b31      	ldr	r3, [pc, #196]	; (800dd08 <McpsIndication+0xd4>)
 800dc44:	2201      	movs	r2, #1
 800dc46:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	785a      	ldrb	r2, [r3, #1]
 800dc4c:	4b2e      	ldr	r3, [pc, #184]	; (800dd08 <McpsIndication+0xd4>)
 800dc4e:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800dc50:	4b2d      	ldr	r3, [pc, #180]	; (800dd08 <McpsIndication+0xd4>)
 800dc52:	785b      	ldrb	r3, [r3, #1]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d153      	bne.n	800dd00 <McpsIndication+0xcc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	791b      	ldrb	r3, [r3, #4]
 800dc5c:	b25a      	sxtb	r2, r3
 800dc5e:	4b2a      	ldr	r3, [pc, #168]	; (800dd08 <McpsIndication+0xd4>)
 800dc60:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc68:	b25a      	sxtb	r2, r3
 800dc6a:	4b27      	ldr	r3, [pc, #156]	; (800dd08 <McpsIndication+0xd4>)
 800dc6c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800dc74:	4b24      	ldr	r3, [pc, #144]	; (800dd08 <McpsIndication+0xd4>)
 800dc76:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	78da      	ldrb	r2, [r3, #3]
 800dc7c:	4b22      	ldr	r3, [pc, #136]	; (800dd08 <McpsIndication+0xd4>)
 800dc7e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	691b      	ldr	r3, [r3, #16]
 800dc84:	4a20      	ldr	r2, [pc, #128]	; (800dd08 <McpsIndication+0xd4>)
 800dc86:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	78db      	ldrb	r3, [r3, #3]
 800dc8c:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	7b1b      	ldrb	r3, [r3, #12]
 800dc92:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	689b      	ldr	r3, [r3, #8]
 800dc98:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800dc9a:	4b1c      	ldr	r3, [pc, #112]	; (800dd0c <McpsIndication+0xd8>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca0:	f107 0218 	add.w	r2, r7, #24
 800dca4:	4918      	ldr	r1, [pc, #96]	; (800dd08 <McpsIndication+0xd4>)
 800dca6:	4610      	mov	r0, r2
 800dca8:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800dcaa:	4b18      	ldr	r3, [pc, #96]	; (800dd0c <McpsIndication+0xd8>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d007      	beq.n	800dcc4 <McpsIndication+0x90>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	7e1b      	ldrb	r3, [r3, #24]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d003      	beq.n	800dcc4 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800dcbc:	4b13      	ldr	r3, [pc, #76]	; (800dd0c <McpsIndication+0xd8>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc2:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800dcc4:	6879      	ldr	r1, [r7, #4]
 800dcc6:	2001      	movs	r0, #1
 800dcc8:	f000 f98a 	bl	800dfe0 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800dccc:	f107 0317 	add.w	r3, r7, #23
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7ff ff1b 	bl	800db0c <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	795b      	ldrb	r3, [r3, #5]
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	d111      	bne.n	800dd02 <McpsIndication+0xce>
 800dcde:	7dfb      	ldrb	r3, [r7, #23]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10e      	bne.n	800dd02 <McpsIndication+0xce>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800dce4:	2300      	movs	r3, #0
 800dce6:	733b      	strb	r3, [r7, #12]
 800dce8:	2300      	movs	r3, #0
 800dcea:	737b      	strb	r3, [r7, #13]
 800dcec:	2300      	movs	r3, #0
 800dcee:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 800dcf0:	f107 030c 	add.w	r3, r7, #12
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	2100      	movs	r1, #0
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7ff fd7d 	bl	800d7f8 <LmHandlerSend>
 800dcfe:	e000      	b.n	800dd02 <McpsIndication+0xce>
        return;
 800dd00:	bf00      	nop
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800dd02:	3720      	adds	r7, #32
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}
 800dd08:	200000c4 	.word	0x200000c4
 800dd0c:	20000ad8 	.word	0x20000ad8

0800dd10 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b08c      	sub	sp, #48	; 0x30
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800dd18:	4b3d      	ldr	r3, [pc, #244]	; (800de10 <MlmeConfirm+0x100>)
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	785a      	ldrb	r2, [r3, #1]
 800dd22:	4b3b      	ldr	r3, [pc, #236]	; (800de10 <MlmeConfirm+0x100>)
 800dd24:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800dd26:	4b3b      	ldr	r3, [pc, #236]	; (800de14 <MlmeConfirm+0x104>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd2c:	4838      	ldr	r0, [pc, #224]	; (800de10 <MlmeConfirm+0x100>)
 800dd2e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800dd30:	6879      	ldr	r1, [r7, #4]
 800dd32:	2002      	movs	r0, #2
 800dd34:	f000 f954 	bl	800dfe0 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	3b01      	subs	r3, #1
 800dd3e:	2b0c      	cmp	r3, #12
 800dd40:	d85e      	bhi.n	800de00 <MlmeConfirm+0xf0>
 800dd42:	a201      	add	r2, pc, #4	; (adr r2, 800dd48 <MlmeConfirm+0x38>)
 800dd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd48:	0800dd7d 	.word	0x0800dd7d
 800dd4c:	0800de01 	.word	0x0800de01
 800dd50:	0800de01 	.word	0x0800de01
 800dd54:	0800ddcf 	.word	0x0800ddcf
 800dd58:	0800de01 	.word	0x0800de01
 800dd5c:	0800de01 	.word	0x0800de01
 800dd60:	0800de01 	.word	0x0800de01
 800dd64:	0800de01 	.word	0x0800de01
 800dd68:	0800de01 	.word	0x0800de01
 800dd6c:	0800de01 	.word	0x0800de01
 800dd70:	0800de01 	.word	0x0800de01
 800dd74:	0800dde7 	.word	0x0800dde7
 800dd78:	0800de01 	.word	0x0800de01
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800dd7c:	2306      	movs	r3, #6
 800dd7e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800dd80:	f107 030c 	add.w	r3, r7, #12
 800dd84:	4618      	mov	r0, r3
 800dd86:	f004 fb0d 	bl	80123a4 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	4a22      	ldr	r2, [pc, #136]	; (800de18 <MlmeConfirm+0x108>)
 800dd8e:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800dd90:	4822      	ldr	r0, [pc, #136]	; (800de1c <MlmeConfirm+0x10c>)
 800dd92:	f7ff fedb 	bl	800db4c <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	785b      	ldrb	r3, [r3, #1]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d108      	bne.n	800ddb0 <MlmeConfirm+0xa0>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800dd9e:	4b20      	ldr	r3, [pc, #128]	; (800de20 <MlmeConfirm+0x110>)
 800dda0:	2200      	movs	r2, #0
 800dda2:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800dda4:	4b1f      	ldr	r3, [pc, #124]	; (800de24 <MlmeConfirm+0x114>)
 800dda6:	785b      	ldrb	r3, [r3, #1]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7ff fe25 	bl	800d9f8 <LmHandlerRequestClass>
 800ddae:	e002      	b.n	800ddb6 <MlmeConfirm+0xa6>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800ddb0:	4b1b      	ldr	r3, [pc, #108]	; (800de20 <MlmeConfirm+0x110>)
 800ddb2:	22ff      	movs	r2, #255	; 0xff
 800ddb4:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800ddb6:	4b17      	ldr	r3, [pc, #92]	; (800de14 <MlmeConfirm+0x104>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddbc:	4818      	ldr	r0, [pc, #96]	; (800de20 <MlmeConfirm+0x110>)
 800ddbe:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	785b      	ldrb	r3, [r3, #1]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d11d      	bne.n	800de04 <MlmeConfirm+0xf4>
            {
                SecureElementPrintSessionKeys();
 800ddc8:	f7ff f89e 	bl	800cf08 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800ddcc:	e01a      	b.n	800de04 <MlmeConfirm+0xf4>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800ddce:	4b16      	ldr	r3, [pc, #88]	; (800de28 <MlmeConfirm+0x118>)
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	7a1a      	ldrb	r2, [r3, #8]
 800ddd8:	4b13      	ldr	r3, [pc, #76]	; (800de28 <MlmeConfirm+0x118>)
 800ddda:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	7a5a      	ldrb	r2, [r3, #9]
 800dde0:	4b11      	ldr	r3, [pc, #68]	; (800de28 <MlmeConfirm+0x118>)
 800dde2:	74da      	strb	r2, [r3, #19]
        }
        break;
 800dde4:	e00f      	b.n	800de06 <MlmeConfirm+0xf6>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	785b      	ldrb	r3, [r3, #1]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d105      	bne.n	800ddfa <MlmeConfirm+0xea>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800ddee:	4b0d      	ldr	r3, [pc, #52]	; (800de24 <MlmeConfirm+0x114>)
 800ddf0:	7b1b      	ldrb	r3, [r3, #12]
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7ff fdf4 	bl	800d9e0 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800ddf8:	e005      	b.n	800de06 <MlmeConfirm+0xf6>
                LmHandlerDeviceTimeReq( );
 800ddfa:	f7ff fdd5 	bl	800d9a8 <LmHandlerDeviceTimeReq>
        break;
 800ddfe:	e002      	b.n	800de06 <MlmeConfirm+0xf6>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800de00:	bf00      	nop
 800de02:	e000      	b.n	800de06 <MlmeConfirm+0xf6>
        break;
 800de04:	bf00      	nop
    }
}
 800de06:	bf00      	nop
 800de08:	3730      	adds	r7, #48	; 0x30
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	200000a8 	.word	0x200000a8
 800de14:	20000ad8 	.word	0x20000ad8
 800de18:	2000007c 	.word	0x2000007c
 800de1c:	200000a4 	.word	0x200000a4
 800de20:	200000a0 	.word	0x200000a0
 800de24:	20000ac4 	.word	0x20000ac4
 800de28:	200000c4 	.word	0x200000c4

0800de2c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800de36:	4b2f      	ldr	r3, [pc, #188]	; (800def4 <MlmeIndication+0xc8>)
 800de38:	2200      	movs	r2, #0
 800de3a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	785a      	ldrb	r2, [r3, #1]
 800de40:	4b2c      	ldr	r3, [pc, #176]	; (800def4 <MlmeIndication+0xc8>)
 800de42:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	789b      	ldrb	r3, [r3, #2]
 800de48:	b25a      	sxtb	r2, r3
 800de4a:	4b2a      	ldr	r3, [pc, #168]	; (800def4 <MlmeIndication+0xc8>)
 800de4c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de54:	b25a      	sxtb	r2, r3
 800de56:	4b27      	ldr	r3, [pc, #156]	; (800def4 <MlmeIndication+0xc8>)
 800de58:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800de60:	4b24      	ldr	r3, [pc, #144]	; (800def4 <MlmeIndication+0xc8>)
 800de62:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	78da      	ldrb	r2, [r3, #3]
 800de68:	4b22      	ldr	r3, [pc, #136]	; (800def4 <MlmeIndication+0xc8>)
 800de6a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	4a20      	ldr	r2, [pc, #128]	; (800def4 <MlmeIndication+0xc8>)
 800de72:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	2b0b      	cmp	r3, #11
 800de7a:	d009      	beq.n	800de90 <MlmeIndication+0x64>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	2b0f      	cmp	r3, #15
 800de82:	d005      	beq.n	800de90 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800de84:	4b1c      	ldr	r3, [pc, #112]	; (800def8 <MlmeIndication+0xcc>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de8a:	491a      	ldr	r1, [pc, #104]	; (800def4 <MlmeIndication+0xc8>)
 800de8c:	2000      	movs	r0, #0
 800de8e:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800de90:	6879      	ldr	r1, [r7, #4]
 800de92:	2003      	movs	r0, #3
 800de94:	f000 f8a4 	bl	800dfe0 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	2b0f      	cmp	r3, #15
 800de9e:	d01e      	beq.n	800dede <MlmeIndication+0xb2>
 800dea0:	2b0f      	cmp	r3, #15
 800dea2:	dc1e      	bgt.n	800dee2 <MlmeIndication+0xb6>
 800dea4:	2b07      	cmp	r3, #7
 800dea6:	d002      	beq.n	800deae <MlmeIndication+0x82>
 800dea8:	2b0b      	cmp	r3, #11
 800deaa:	d01c      	beq.n	800dee6 <MlmeIndication+0xba>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800deac:	e019      	b.n	800dee2 <MlmeIndication+0xb6>
            LmHandlerAppData_t appData =
 800deae:	2300      	movs	r3, #0
 800deb0:	723b      	strb	r3, [r7, #8]
 800deb2:	2300      	movs	r3, #0
 800deb4:	727b      	strb	r3, [r7, #9]
 800deb6:	2300      	movs	r3, #0
 800deb8:	60fb      	str	r3, [r7, #12]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800deba:	4b10      	ldr	r3, [pc, #64]	; (800defc <MlmeIndication+0xd0>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	4798      	blx	r3
 800dec2:	4603      	mov	r3, r0
 800dec4:	f083 0301 	eor.w	r3, r3, #1
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	2b00      	cmp	r3, #0
 800decc:	d00d      	beq.n	800deea <MlmeIndication+0xbe>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800dece:	f107 0308 	add.w	r3, r7, #8
 800ded2:	2201      	movs	r2, #1
 800ded4:	2100      	movs	r1, #0
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7ff fc8e 	bl	800d7f8 <LmHandlerSend>
        break;
 800dedc:	e005      	b.n	800deea <MlmeIndication+0xbe>
        break;
 800dede:	bf00      	nop
 800dee0:	e004      	b.n	800deec <MlmeIndication+0xc0>
        break;
 800dee2:	bf00      	nop
 800dee4:	e002      	b.n	800deec <MlmeIndication+0xc0>
        break;
 800dee6:	bf00      	nop
 800dee8:	e000      	b.n	800deec <MlmeIndication+0xc0>
        break;
 800deea:	bf00      	nop
    }
}
 800deec:	bf00      	nop
 800deee:	3710      	adds	r7, #16
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	200000c4 	.word	0x200000c4
 800def8:	20000ad8 	.word	0x20000ad8
 800defc:	20000ab0 	.word	0x20000ab0

0800df00 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	4603      	mov	r3, r0
 800df08:	6039      	str	r1, [r7, #0]
 800df0a:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800df0c:	2300      	movs	r3, #0
 800df0e:	60fb      	str	r3, [r7, #12]
    switch( id )
 800df10:	79fb      	ldrb	r3, [r7, #7]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d103      	bne.n	800df1e <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800df16:	f000 f9db 	bl	800e2d0 <LmhpCompliancePackageFactory>
 800df1a:	60f8      	str	r0, [r7, #12]
            break;
 800df1c:	e000      	b.n	800df20 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800df1e:	bf00      	nop
        }
    }
    if( package != NULL )
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d02b      	beq.n	800df7e <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800df26:	79fb      	ldrb	r3, [r7, #7]
 800df28:	4918      	ldr	r1, [pc, #96]	; (800df8c <LmHandlerPackageRegister+0x8c>)
 800df2a:	68fa      	ldr	r2, [r7, #12]
 800df2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800df30:	79fb      	ldrb	r3, [r7, #7]
 800df32:	4a16      	ldr	r2, [pc, #88]	; (800df8c <LmHandlerPackageRegister+0x8c>)
 800df34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df38:	4a15      	ldr	r2, [pc, #84]	; (800df90 <LmHandlerPackageRegister+0x90>)
 800df3a:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800df3c:	79fb      	ldrb	r3, [r7, #7]
 800df3e:	4a13      	ldr	r2, [pc, #76]	; (800df8c <LmHandlerPackageRegister+0x8c>)
 800df40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df44:	4a13      	ldr	r2, [pc, #76]	; (800df94 <LmHandlerPackageRegister+0x94>)
 800df46:	62da      	str	r2, [r3, #44]	; 0x2c
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800df48:	79fb      	ldrb	r3, [r7, #7]
 800df4a:	4a10      	ldr	r2, [pc, #64]	; (800df8c <LmHandlerPackageRegister+0x8c>)
 800df4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df50:	4a11      	ldr	r2, [pc, #68]	; (800df98 <LmHandlerPackageRegister+0x98>)
 800df52:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800df54:	4b11      	ldr	r3, [pc, #68]	; (800df9c <LmHandlerPackageRegister+0x9c>)
 800df56:	681a      	ldr	r2, [r3, #0]
 800df58:	79fb      	ldrb	r3, [r7, #7]
 800df5a:	490c      	ldr	r1, [pc, #48]	; (800df8c <LmHandlerPackageRegister+0x8c>)
 800df5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800df60:	6992      	ldr	r2, [r2, #24]
 800df62:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800df64:	79fb      	ldrb	r3, [r7, #7]
 800df66:	4a09      	ldr	r2, [pc, #36]	; (800df8c <LmHandlerPackageRegister+0x8c>)
 800df68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	4a0c      	ldr	r2, [pc, #48]	; (800dfa0 <LmHandlerPackageRegister+0xa0>)
 800df70:	6851      	ldr	r1, [r2, #4]
 800df72:	4a0b      	ldr	r2, [pc, #44]	; (800dfa0 <LmHandlerPackageRegister+0xa0>)
 800df74:	7852      	ldrb	r2, [r2, #1]
 800df76:	6838      	ldr	r0, [r7, #0]
 800df78:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800df7a:	2300      	movs	r3, #0
 800df7c:	e001      	b.n	800df82 <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800df7e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800df82:	4618      	mov	r0, r3
 800df84:	3710      	adds	r7, #16
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	20000ab0 	.word	0x20000ab0
 800df90:	0800d6c1 	.word	0x0800d6c1
 800df94:	0800d7f9 	.word	0x0800d7f9
 800df98:	0800d9a9 	.word	0x0800d9a9
 800df9c:	20000ad8 	.word	0x20000ad8
 800dfa0:	200000d8 	.word	0x200000d8

0800dfa4 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	4603      	mov	r3, r0
 800dfac:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800dfae:	79fb      	ldrb	r3, [r7, #7]
 800dfb0:	2b04      	cmp	r3, #4
 800dfb2:	d80e      	bhi.n	800dfd2 <LmHandlerPackageIsInitialized+0x2e>
 800dfb4:	79fb      	ldrb	r3, [r7, #7]
 800dfb6:	4a09      	ldr	r2, [pc, #36]	; (800dfdc <LmHandlerPackageIsInitialized+0x38>)
 800dfb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfbc:	689b      	ldr	r3, [r3, #8]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d007      	beq.n	800dfd2 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800dfc2:	79fb      	ldrb	r3, [r7, #7]
 800dfc4:	4a05      	ldr	r2, [pc, #20]	; (800dfdc <LmHandlerPackageIsInitialized+0x38>)
 800dfc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfca:	689b      	ldr	r3, [r3, #8]
 800dfcc:	4798      	blx	r3
 800dfce:	4603      	mov	r3, r0
 800dfd0:	e000      	b.n	800dfd4 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800dfd2:	2300      	movs	r3, #0
    }
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3708      	adds	r7, #8
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	20000ab0 	.word	0x20000ab0

0800dfe0 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	6039      	str	r1, [r7, #0]
 800dfea:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800dfec:	2300      	movs	r3, #0
 800dfee:	73fb      	strb	r3, [r7, #15]
 800dff0:	e07e      	b.n	800e0f0 <LmHandlerPackagesNotify+0x110>
    {
        if( LmHandlerPackages[i] != NULL )
 800dff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dff6:	4a43      	ldr	r2, [pc, #268]	; (800e104 <LmHandlerPackagesNotify+0x124>)
 800dff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d066      	beq.n	800e0ce <LmHandlerPackagesNotify+0xee>
        {
            switch( notifyType )
 800e000:	79fb      	ldrb	r3, [r7, #7]
 800e002:	2b03      	cmp	r3, #3
 800e004:	d865      	bhi.n	800e0d2 <LmHandlerPackagesNotify+0xf2>
 800e006:	a201      	add	r2, pc, #4	; (adr r2, 800e00c <LmHandlerPackagesNotify+0x2c>)
 800e008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e00c:	0800e01d 	.word	0x0800e01d
 800e010:	0800e03f 	.word	0x0800e03f
 800e014:	0800e08b 	.word	0x0800e08b
 800e018:	0800e0ad 	.word	0x0800e0ad
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800e01c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e020:	4a38      	ldr	r2, [pc, #224]	; (800e104 <LmHandlerPackagesNotify+0x124>)
 800e022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e026:	699b      	ldr	r3, [r3, #24]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d054      	beq.n	800e0d6 <LmHandlerPackagesNotify+0xf6>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800e02c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e030:	4a34      	ldr	r2, [pc, #208]	; (800e104 <LmHandlerPackagesNotify+0x124>)
 800e032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e036:	699b      	ldr	r3, [r3, #24]
 800e038:	6838      	ldr	r0, [r7, #0]
 800e03a:	4798      	blx	r3
                    }
                    break;
 800e03c:	e04b      	b.n	800e0d6 <LmHandlerPackagesNotify+0xf6>
                }
                case PACKAGE_MCPS_INDICATION:
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800e03e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e042:	4a30      	ldr	r2, [pc, #192]	; (800e104 <LmHandlerPackagesNotify+0x124>)
 800e044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e048:	69db      	ldr	r3, [r3, #28]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d045      	beq.n	800e0da <LmHandlerPackagesNotify+0xfa>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800e04e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e052:	4a2c      	ldr	r2, [pc, #176]	; (800e104 <LmHandlerPackagesNotify+0x124>)
 800e054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e058:	781a      	ldrb	r2, [r3, #0]
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800e05e:	429a      	cmp	r2, r3
 800e060:	d00a      	beq.n	800e078 <LmHandlerPackagesNotify+0x98>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800e062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d137      	bne.n	800e0da <LmHandlerPackagesNotify+0xfa>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800e06a:	4b26      	ldr	r3, [pc, #152]	; (800e104 <LmHandlerPackagesNotify+0x124>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	68db      	ldr	r3, [r3, #12]
 800e070:	4798      	blx	r3
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d030      	beq.n	800e0da <LmHandlerPackagesNotify+0xfa>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800e078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e07c:	4a21      	ldr	r2, [pc, #132]	; (800e104 <LmHandlerPackagesNotify+0x124>)
 800e07e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e082:	69db      	ldr	r3, [r3, #28]
 800e084:	6838      	ldr	r0, [r7, #0]
 800e086:	4798      	blx	r3
                    }
                    break;
 800e088:	e027      	b.n	800e0da <LmHandlerPackagesNotify+0xfa>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800e08a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e08e:	4a1d      	ldr	r2, [pc, #116]	; (800e104 <LmHandlerPackagesNotify+0x124>)
 800e090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e094:	6a1b      	ldr	r3, [r3, #32]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d021      	beq.n	800e0de <LmHandlerPackagesNotify+0xfe>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800e09a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e09e:	4a19      	ldr	r2, [pc, #100]	; (800e104 <LmHandlerPackagesNotify+0x124>)
 800e0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0a4:	6a1b      	ldr	r3, [r3, #32]
 800e0a6:	6838      	ldr	r0, [r7, #0]
 800e0a8:	4798      	blx	r3
                    }
                    break;
 800e0aa:	e018      	b.n	800e0de <LmHandlerPackagesNotify+0xfe>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800e0ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0b0:	4a14      	ldr	r2, [pc, #80]	; (800e104 <LmHandlerPackagesNotify+0x124>)
 800e0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d012      	beq.n	800e0e2 <LmHandlerPackagesNotify+0x102>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800e0bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0c0:	4a10      	ldr	r2, [pc, #64]	; (800e104 <LmHandlerPackagesNotify+0x124>)
 800e0c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c8:	6838      	ldr	r0, [r7, #0]
 800e0ca:	4798      	blx	r3
                    }
                    break;
 800e0cc:	e009      	b.n	800e0e2 <LmHandlerPackagesNotify+0x102>
                default:
                {
                    break;
                }
            }
        }
 800e0ce:	bf00      	nop
 800e0d0:	e008      	b.n	800e0e4 <LmHandlerPackagesNotify+0x104>
                    break;
 800e0d2:	bf00      	nop
 800e0d4:	e006      	b.n	800e0e4 <LmHandlerPackagesNotify+0x104>
                    break;
 800e0d6:	bf00      	nop
 800e0d8:	e004      	b.n	800e0e4 <LmHandlerPackagesNotify+0x104>
                    break;
 800e0da:	bf00      	nop
 800e0dc:	e002      	b.n	800e0e4 <LmHandlerPackagesNotify+0x104>
                    break;
 800e0de:	bf00      	nop
 800e0e0:	e000      	b.n	800e0e4 <LmHandlerPackagesNotify+0x104>
                    break;
 800e0e2:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e0e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0e8:	b2db      	uxtb	r3, r3
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	73fb      	strb	r3, [r7, #15]
 800e0f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0f4:	2b04      	cmp	r3, #4
 800e0f6:	f77f af7c 	ble.w	800dff2 <LmHandlerPackagesNotify+0x12>
    }
}
 800e0fa:	bf00      	nop
 800e0fc:	bf00      	nop
 800e0fe:	3710      	adds	r7, #16
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}
 800e104:	20000ab0 	.word	0x20000ab0

0800e108 <LmHandlerPackagesProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e10e:	2300      	movs	r3, #0
 800e110:	71fb      	strb	r3, [r7, #7]
 800e112:	e022      	b.n	800e15a <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e118:	4a14      	ldr	r2, [pc, #80]	; (800e16c <LmHandlerPackagesProcess+0x64>)
 800e11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d015      	beq.n	800e14e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e126:	4a11      	ldr	r2, [pc, #68]	; (800e16c <LmHandlerPackagesProcess+0x64>)
 800e128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e12c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00d      	beq.n	800e14e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800e132:	79fb      	ldrb	r3, [r7, #7]
 800e134:	4618      	mov	r0, r3
 800e136:	f7ff ff35 	bl	800dfa4 <LmHandlerPackageIsInitialized>
 800e13a:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d006      	beq.n	800e14e <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800e140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e144:	4a09      	ldr	r2, [pc, #36]	; (800e16c <LmHandlerPackagesProcess+0x64>)
 800e146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e14a:	691b      	ldr	r3, [r3, #16]
 800e14c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e14e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e152:	b2db      	uxtb	r3, r3
 800e154:	3301      	adds	r3, #1
 800e156:	b2db      	uxtb	r3, r3
 800e158:	71fb      	strb	r3, [r7, #7]
 800e15a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e15e:	2b04      	cmp	r3, #4
 800e160:	ddd8      	ble.n	800e114 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800e162:	bf00      	nop
 800e164:	bf00      	nop
 800e166:	3708      	adds	r7, #8
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	20000ab0 	.word	0x20000ab0

0800e170 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800e170:	b480      	push	{r7}
 800e172:	b083      	sub	sp, #12
 800e174:	af00      	add	r7, sp, #0
 800e176:	4603      	mov	r3, r0
 800e178:	6039      	str	r1, [r7, #0]
 800e17a:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d102      	bne.n	800e188 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800e182:	f04f 33ff 	mov.w	r3, #4294967295
 800e186:	e00e      	b.n	800e1a6 <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800e188:	79fb      	ldrb	r3, [r7, #7]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d002      	beq.n	800e194 <LmHandlerGetVersion+0x24>
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d004      	beq.n	800e19c <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800e192:	e007      	b.n	800e1a4 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	4a06      	ldr	r2, [pc, #24]	; (800e1b0 <LmHandlerGetVersion+0x40>)
 800e198:	601a      	str	r2, [r3, #0]
            break;
 800e19a:	e003      	b.n	800e1a4 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	4a05      	ldr	r2, [pc, #20]	; (800e1b4 <LmHandlerGetVersion+0x44>)
 800e1a0:	601a      	str	r2, [r3, #0]
            break;
 800e1a2:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800e1a4:	2300      	movs	r3, #0
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	370c      	adds	r7, #12
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bc80      	pop	{r7}
 800e1ae:	4770      	bx	lr
 800e1b0:	01000300 	.word	0x01000300
 800e1b4:	01010003 	.word	0x01010003

0800e1b8 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800e1bc:	f005 f826 	bl	801320c <LoRaMacDeInitialization>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d101      	bne.n	800e1ca <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	e001      	b.n	800e1ce <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e1ca:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800e1d2:	b580      	push	{r7, lr}
 800e1d4:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800e1d6:	f004 f825 	bl	8012224 <LoRaMacHalt>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d101      	bne.n	800e1e4 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	e001      	b.n	800e1e8 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e1e4:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b08e      	sub	sp, #56	; 0x38
 800e1f0:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800e1fc:	f7ff ffe9 	bl	800e1d2 <LmHandlerHalt>
 800e200:	4603      	mov	r3, r0
 800e202:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800e206:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d12f      	bne.n	800e26e <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800e20e:	f000 f84f 	bl	800e2b0 <NvmDataMgmtStoreBegin>
 800e212:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800e214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e216:	f113 0f02 	cmn.w	r3, #2
 800e21a:	d103      	bne.n	800e224 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800e21c:	23f8      	movs	r3, #248	; 0xf8
 800e21e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e222:	e01c      	b.n	800e25e <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800e224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e226:	2b00      	cmp	r3, #0
 800e228:	d104      	bne.n	800e234 <LmHandlerNvmDataStore+0x48>
 800e22a:	4b1b      	ldr	r3, [pc, #108]	; (800e298 <LmHandlerNvmDataStore+0xac>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	695b      	ldr	r3, [r3, #20]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d103      	bne.n	800e23c <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e234:	23ff      	movs	r3, #255	; 0xff
 800e236:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e23a:	e010      	b.n	800e25e <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800e23c:	2326      	movs	r3, #38	; 0x26
 800e23e:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800e240:	1d3b      	adds	r3, r7, #4
 800e242:	4618      	mov	r0, r3
 800e244:	f004 f8ae 	bl	80123a4 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800e24c:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 800e250:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800e252:	4b11      	ldr	r3, [pc, #68]	; (800e298 <LmHandlerNvmDataStore+0xac>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	695b      	ldr	r3, [r3, #20]
 800e258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e25a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e25c:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800e25e:	f000 f82f 	bl	800e2c0 <NvmDataMgmtStoreEnd>
 800e262:	4603      	mov	r3, r0
 800e264:	2b00      	cmp	r3, #0
 800e266:	d002      	beq.n	800e26e <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e268:	23ff      	movs	r3, #255	; 0xff
 800e26a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800e26e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e272:	2b00      	cmp	r3, #0
 800e274:	d109      	bne.n	800e28a <LmHandlerNvmDataStore+0x9e>
 800e276:	4b08      	ldr	r3, [pc, #32]	; (800e298 <LmHandlerNvmDataStore+0xac>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	69db      	ldr	r3, [r3, #28]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d004      	beq.n	800e28a <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800e280:	4b05      	ldr	r3, [pc, #20]	; (800e298 <LmHandlerNvmDataStore+0xac>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	69db      	ldr	r3, [r3, #28]
 800e286:	2001      	movs	r0, #1
 800e288:	4798      	blx	r3
    }

    return lmhStatus;
 800e28a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3738      	adds	r7, #56	; 0x38
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	20000ad8 	.word	0x20000ad8

0800e29c <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800e29c:	b480      	push	{r7}
 800e29e:	b083      	sub	sp, #12
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800e2a6:	bf00      	nop
 800e2a8:	370c      	adds	r7, #12
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bc80      	pop	{r7}
 800e2ae:	4770      	bx	lr

0800e2b0 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	af00      	add	r7, sp, #0
    {
        return NVM_DATA_NOT_AVAILABLE;
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800e2b4:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bc80      	pop	{r7}
 800e2be:	4770      	bx	lr

0800e2c0 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800e2c4:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bc80      	pop	{r7}
 800e2ce:	4770      	bx	lr

0800e2d0 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800e2d4:	4b02      	ldr	r3, [pc, #8]	; (800e2e0 <LmhpCompliancePackageFactory+0x10>)
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bc80      	pop	{r7}
 800e2dc:	4770      	bx	lr
 800e2de:	bf00      	nop
 800e2e0:	200000e0 	.word	0x200000e0

0800e2e4 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b085      	sub	sp, #20
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	60f8      	str	r0, [r7, #12]
 800e2ec:	60b9      	str	r1, [r7, #8]
 800e2ee:	4613      	mov	r3, r2
 800e2f0:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d00f      	beq.n	800e318 <LmhpComplianceInit+0x34>
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d00c      	beq.n	800e318 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800e2fe:	4a0c      	ldr	r2, [pc, #48]	; (800e330 <LmhpComplianceInit+0x4c>)
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800e304:	4a0b      	ldr	r2, [pc, #44]	; (800e334 <LmhpComplianceInit+0x50>)
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800e30a:	4a0a      	ldr	r2, [pc, #40]	; (800e334 <LmhpComplianceInit+0x50>)
 800e30c:	79fb      	ldrb	r3, [r7, #7]
 800e30e:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800e310:	4b08      	ldr	r3, [pc, #32]	; (800e334 <LmhpComplianceInit+0x50>)
 800e312:	2201      	movs	r2, #1
 800e314:	701a      	strb	r2, [r3, #0]
 800e316:	e006      	b.n	800e326 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800e318:	4b05      	ldr	r3, [pc, #20]	; (800e330 <LmhpComplianceInit+0x4c>)
 800e31a:	2200      	movs	r2, #0
 800e31c:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800e31e:	4b05      	ldr	r3, [pc, #20]	; (800e334 <LmhpComplianceInit+0x50>)
 800e320:	2200      	movs	r2, #0
 800e322:	701a      	strb	r2, [r3, #0]
    }
}
 800e324:	bf00      	nop
 800e326:	bf00      	nop
 800e328:	3714      	adds	r7, #20
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bc80      	pop	{r7}
 800e32e:	4770      	bx	lr
 800e330:	20000c24 	.word	0x20000c24
 800e334:	20000c10 	.word	0x20000c10

0800e338 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800e338:	b480      	push	{r7}
 800e33a:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800e33c:	4b02      	ldr	r3, [pc, #8]	; (800e348 <LmhpComplianceIsInitialized+0x10>)
 800e33e:	781b      	ldrb	r3, [r3, #0]
}
 800e340:	4618      	mov	r0, r3
 800e342:	46bd      	mov	sp, r7
 800e344:	bc80      	pop	{r7}
 800e346:	4770      	bx	lr
 800e348:	20000c10 	.word	0x20000c10

0800e34c <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800e34c:	b480      	push	{r7}
 800e34e:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800e350:	4b07      	ldr	r3, [pc, #28]	; (800e370 <LmhpComplianceIsRunning+0x24>)
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	f083 0301 	eor.w	r3, r3, #1
 800e358:	b2db      	uxtb	r3, r3
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d001      	beq.n	800e362 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800e35e:	2300      	movs	r3, #0
 800e360:	e001      	b.n	800e366 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800e362:	4b03      	ldr	r3, [pc, #12]	; (800e370 <LmhpComplianceIsRunning+0x24>)
 800e364:	785b      	ldrb	r3, [r3, #1]
}
 800e366:	4618      	mov	r0, r3
 800e368:	46bd      	mov	sp, r7
 800e36a:	bc80      	pop	{r7}
 800e36c:	4770      	bx	lr
 800e36e:	bf00      	nop
 800e370:	20000c10 	.word	0x20000c10

0800e374 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800e37c:	4b0f      	ldr	r3, [pc, #60]	; (800e3bc <LmhpComplianceOnMcpsConfirm+0x48>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	f083 0301 	eor.w	r3, r3, #1
 800e384:	b2db      	uxtb	r3, r3
 800e386:	2b00      	cmp	r3, #0
 800e388:	d112      	bne.n	800e3b0 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800e38a:	4b0c      	ldr	r3, [pc, #48]	; (800e3bc <LmhpComplianceOnMcpsConfirm+0x48>)
 800e38c:	785b      	ldrb	r3, [r3, #1]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d00f      	beq.n	800e3b2 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800e396:	2b01      	cmp	r3, #1
 800e398:	d10b      	bne.n	800e3b2 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d007      	beq.n	800e3b2 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800e3a2:	4b06      	ldr	r3, [pc, #24]	; (800e3bc <LmhpComplianceOnMcpsConfirm+0x48>)
 800e3a4:	899b      	ldrh	r3, [r3, #12]
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	b29a      	uxth	r2, r3
 800e3aa:	4b04      	ldr	r3, [pc, #16]	; (800e3bc <LmhpComplianceOnMcpsConfirm+0x48>)
 800e3ac:	819a      	strh	r2, [r3, #12]
 800e3ae:	e000      	b.n	800e3b2 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800e3b0:	bf00      	nop
    }
}
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bc80      	pop	{r7}
 800e3b8:	4770      	bx	lr
 800e3ba:	bf00      	nop
 800e3bc:	20000c10 	.word	0x20000c10

0800e3c0 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e3c8:	4b12      	ldr	r3, [pc, #72]	; (800e414 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	f083 0301 	eor.w	r3, r3, #1
 800e3d0:	b2db      	uxtb	r3, r3
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d116      	bne.n	800e404 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800e3d6:	4b0f      	ldr	r3, [pc, #60]	; (800e414 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e3d8:	785b      	ldrb	r3, [r3, #1]
 800e3da:	f083 0301 	eor.w	r3, r3, #1
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d111      	bne.n	800e408 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	2b04      	cmp	r3, #4
 800e3ea:	d10e      	bne.n	800e40a <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800e3ec:	4b09      	ldr	r3, [pc, #36]	; (800e414 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	7a1a      	ldrb	r2, [r3, #8]
 800e3f6:	4b07      	ldr	r3, [pc, #28]	; (800e414 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e3f8:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	7a5a      	ldrb	r2, [r3, #9]
 800e3fe:	4b05      	ldr	r3, [pc, #20]	; (800e414 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e400:	741a      	strb	r2, [r3, #16]
 800e402:	e002      	b.n	800e40a <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800e404:	bf00      	nop
 800e406:	e000      	b.n	800e40a <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800e408:	bf00      	nop
    }
}
 800e40a:	370c      	adds	r7, #12
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bc80      	pop	{r7}
 800e410:	4770      	bx	lr
 800e412:	bf00      	nop
 800e414:	20000c10 	.word	0x20000c10

0800e418 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800e41e:	4b33      	ldr	r3, [pc, #204]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	f083 0301 	eor.w	r3, r3, #1
 800e426:	b2db      	uxtb	r3, r3
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d002      	beq.n	800e432 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e42c:	f04f 33ff 	mov.w	r3, #4294967295
 800e430:	e057      	b.n	800e4e2 <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.IsRunning == false )
 800e432:	4b2e      	ldr	r3, [pc, #184]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e434:	785b      	ldrb	r3, [r3, #1]
 800e436:	f083 0301 	eor.w	r3, r3, #1
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d001      	beq.n	800e444 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e440:	2300      	movs	r3, #0
 800e442:	e04e      	b.n	800e4e2 <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.LinkCheck == true )
 800e444:	4b29      	ldr	r3, [pc, #164]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e446:	7b9b      	ldrb	r3, [r3, #14]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d019      	beq.n	800e480 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800e44c:	4b27      	ldr	r3, [pc, #156]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e44e:	2200      	movs	r2, #0
 800e450:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800e452:	4b26      	ldr	r3, [pc, #152]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e454:	2203      	movs	r2, #3
 800e456:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800e458:	4b24      	ldr	r3, [pc, #144]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e45a:	689b      	ldr	r3, [r3, #8]
 800e45c:	2205      	movs	r2, #5
 800e45e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800e460:	4b22      	ldr	r3, [pc, #136]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e462:	689b      	ldr	r3, [r3, #8]
 800e464:	3301      	adds	r3, #1
 800e466:	4a21      	ldr	r2, [pc, #132]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e468:	7bd2      	ldrb	r2, [r2, #15]
 800e46a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800e46c:	4b1f      	ldr	r3, [pc, #124]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e46e:	689b      	ldr	r3, [r3, #8]
 800e470:	3302      	adds	r3, #2
 800e472:	4a1e      	ldr	r2, [pc, #120]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e474:	7c12      	ldrb	r2, [r2, #16]
 800e476:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800e478:	4b1c      	ldr	r3, [pc, #112]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e47a:	2201      	movs	r2, #1
 800e47c:	709a      	strb	r2, [r3, #2]
 800e47e:	e01c      	b.n	800e4ba <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800e480:	4b1a      	ldr	r3, [pc, #104]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e482:	789b      	ldrb	r3, [r3, #2]
 800e484:	2b01      	cmp	r3, #1
 800e486:	d005      	beq.n	800e494 <LmhpComplianceTxProcess+0x7c>
 800e488:	2b04      	cmp	r3, #4
 800e48a:	d116      	bne.n	800e4ba <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800e48c:	4b17      	ldr	r3, [pc, #92]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e48e:	2201      	movs	r2, #1
 800e490:	709a      	strb	r2, [r3, #2]
            break;
 800e492:	e012      	b.n	800e4ba <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800e494:	4b15      	ldr	r3, [pc, #84]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e496:	2202      	movs	r2, #2
 800e498:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800e49a:	4b14      	ldr	r3, [pc, #80]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e49c:	899b      	ldrh	r3, [r3, #12]
 800e49e:	0a1b      	lsrs	r3, r3, #8
 800e4a0:	b29a      	uxth	r2, r3
 800e4a2:	4b12      	ldr	r3, [pc, #72]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e4a4:	689b      	ldr	r3, [r3, #8]
 800e4a6:	b2d2      	uxtb	r2, r2
 800e4a8:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800e4aa:	4b10      	ldr	r3, [pc, #64]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e4ac:	899a      	ldrh	r2, [r3, #12]
 800e4ae:	4b0f      	ldr	r3, [pc, #60]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e4b0:	689b      	ldr	r3, [r3, #8]
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	b2d2      	uxtb	r2, r2
 800e4b6:	701a      	strb	r2, [r3, #0]
            break;
 800e4b8:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800e4ba:	23e0      	movs	r3, #224	; 0xe0
 800e4bc:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800e4be:	4b0b      	ldr	r3, [pc, #44]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e4c0:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800e4c2:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800e4c4:	4b09      	ldr	r3, [pc, #36]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e4c6:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800e4c8:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800e4ca:	4809      	ldr	r0, [pc, #36]	; (800e4f0 <LmhpComplianceTxProcess+0xd8>)
 800e4cc:	f00d fb32 	bl	801bb34 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800e4d0:	4b08      	ldr	r3, [pc, #32]	; (800e4f4 <LmhpComplianceTxProcess+0xdc>)
 800e4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4d4:	4a05      	ldr	r2, [pc, #20]	; (800e4ec <LmhpComplianceTxProcess+0xd4>)
 800e4d6:	78d2      	ldrb	r2, [r2, #3]
 800e4d8:	4611      	mov	r1, r2
 800e4da:	4638      	mov	r0, r7
 800e4dc:	2201      	movs	r2, #1
 800e4de:	4798      	blx	r3
 800e4e0:	4603      	mov	r3, r0
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3708      	adds	r7, #8
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
 800e4ea:	bf00      	nop
 800e4ec:	20000c10 	.word	0x20000c10
 800e4f0:	20000bf8 	.word	0x20000bf8
 800e4f4:	200000e0 	.word	0x200000e0

0800e4f8 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b0a2      	sub	sp, #136	; 0x88
 800e4fc:	af02      	add	r7, sp, #8
 800e4fe:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e500:	4ba3      	ldr	r3, [pc, #652]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	f083 0301 	eor.w	r3, r3, #1
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f040 81c2 	bne.w	800e894 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	7b5b      	ldrb	r3, [r3, #13]
 800e514:	f083 0301 	eor.w	r3, r3, #1
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	f040 81bc 	bne.w	800e898 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800e520:	4b9b      	ldr	r3, [pc, #620]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e522:	785b      	ldrb	r3, [r3, #1]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d00c      	beq.n	800e542 <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	7b9b      	ldrb	r3, [r3, #14]
 800e52c:	f083 0301 	eor.w	r3, r3, #1
 800e530:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800e532:	2b00      	cmp	r3, #0
 800e534:	d005      	beq.n	800e542 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800e536:	4b96      	ldr	r3, [pc, #600]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e538:	899b      	ldrh	r3, [r3, #12]
 800e53a:	3301      	adds	r3, #1
 800e53c:	b29a      	uxth	r2, r3
 800e53e:	4b94      	ldr	r3, [pc, #592]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e540:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	78db      	ldrb	r3, [r3, #3]
 800e546:	2be0      	cmp	r3, #224	; 0xe0
 800e548:	f040 81a8 	bne.w	800e89c <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800e54c:	4b90      	ldr	r3, [pc, #576]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e54e:	785b      	ldrb	r3, [r3, #1]
 800e550:	f083 0301 	eor.w	r3, r3, #1
 800e554:	b2db      	uxtb	r3, r3
 800e556:	2b00      	cmp	r3, #0
 800e558:	d060      	beq.n	800e61c <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	7b1b      	ldrb	r3, [r3, #12]
 800e55e:	2b04      	cmp	r3, #4
 800e560:	f040 81a1 	bne.w	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	689b      	ldr	r3, [r3, #8]
 800e568:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	f040 819b 	bne.w	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	689b      	ldr	r3, [r3, #8]
 800e574:	3301      	adds	r3, #1
 800e576:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800e578:	2b01      	cmp	r3, #1
 800e57a:	f040 8194 	bne.w	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	689b      	ldr	r3, [r3, #8]
 800e582:	3302      	adds	r3, #2
 800e584:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800e586:	2b01      	cmp	r3, #1
 800e588:	f040 818d 	bne.w	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	689b      	ldr	r3, [r3, #8]
 800e590:	3303      	adds	r3, #3
 800e592:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800e594:	2b01      	cmp	r3, #1
 800e596:	f040 8186 	bne.w	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800e59a:	4b7d      	ldr	r3, [pc, #500]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e59c:	2200      	movs	r2, #0
 800e59e:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800e5a0:	4b7b      	ldr	r3, [pc, #492]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e5a2:	22e0      	movs	r2, #224	; 0xe0
 800e5a4:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800e5a6:	4b7a      	ldr	r3, [pc, #488]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e5a8:	2202      	movs	r2, #2
 800e5aa:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800e5ac:	4b78      	ldr	r3, [pc, #480]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800e5b2:	4b77      	ldr	r3, [pc, #476]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800e5b8:	4b75      	ldr	r3, [pc, #468]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800e5be:	4b74      	ldr	r3, [pc, #464]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800e5c4:	4b72      	ldr	r3, [pc, #456]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800e5ca:	4b71      	ldr	r3, [pc, #452]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800e5d0:	2304      	movs	r3, #4
 800e5d2:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e5d8:	f107 0308 	add.w	r3, r7, #8
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f004 f867 	bl	80126b0 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800e5e2:	2000      	movs	r0, #0
 800e5e4:	f004 fdf4 	bl	80131d0 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800e5e8:	4b6a      	ldr	r3, [pc, #424]	; (800e794 <LmhpComplianceOnMcpsIndication+0x29c>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d003      	beq.n	800e5fa <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800e5f2:	4b68      	ldr	r3, [pc, #416]	; (800e794 <LmhpComplianceOnMcpsIndication+0x29c>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	685b      	ldr	r3, [r3, #4]
 800e5f8:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	9300      	str	r3, [sp, #0]
 800e5fe:	4b66      	ldr	r3, [pc, #408]	; (800e798 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800e600:	2200      	movs	r2, #0
 800e602:	f04f 31ff 	mov.w	r1, #4294967295
 800e606:	4865      	ldr	r0, [pc, #404]	; (800e79c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800e608:	f00d fa5e 	bl	801bac8 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800e60c:	f241 3188 	movw	r1, #5000	; 0x1388
 800e610:	4862      	ldr	r0, [pc, #392]	; (800e79c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800e612:	f00d fb6d 	bl	801bcf0 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800e616:	f7ff feff 	bl	800e418 <LmhpComplianceTxProcess>
 800e61a:	e144      	b.n	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	689b      	ldr	r3, [r3, #8]
 800e620:	781a      	ldrb	r2, [r3, #0]
 800e622:	4b5b      	ldr	r3, [pc, #364]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e624:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800e626:	4b5a      	ldr	r3, [pc, #360]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e628:	789b      	ldrb	r3, [r3, #2]
 800e62a:	2b0a      	cmp	r3, #10
 800e62c:	f200 8138 	bhi.w	800e8a0 <LmhpComplianceOnMcpsIndication+0x3a8>
 800e630:	a201      	add	r2, pc, #4	; (adr r2, 800e638 <LmhpComplianceOnMcpsIndication+0x140>)
 800e632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e636:	bf00      	nop
 800e638:	0800e665 	.word	0x0800e665
 800e63c:	0800e6af 	.word	0x0800e6af
 800e640:	0800e6b7 	.word	0x0800e6b7
 800e644:	0800e6c5 	.word	0x0800e6c5
 800e648:	0800e6d3 	.word	0x0800e6d3
 800e64c:	0800e72b 	.word	0x0800e72b
 800e650:	0800e73d 	.word	0x0800e73d
 800e654:	0800e7a5 	.word	0x0800e7a5
 800e658:	0800e84d 	.word	0x0800e84d
 800e65c:	0800e85f 	.word	0x0800e85f
 800e660:	0800e879 	.word	0x0800e879
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800e664:	484d      	ldr	r0, [pc, #308]	; (800e79c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800e666:	f00d fad3 	bl	801bc10 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800e66a:	4b49      	ldr	r3, [pc, #292]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e66c:	2200      	movs	r2, #0
 800e66e:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800e670:	4b47      	ldr	r3, [pc, #284]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e672:	2200      	movs	r2, #0
 800e674:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 800e676:	2304      	movs	r3, #4
 800e678:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e67a:	4b46      	ldr	r3, [pc, #280]	; (800e794 <LmhpComplianceOnMcpsIndication+0x29c>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e682:	f107 0308 	add.w	r3, r7, #8
 800e686:	4618      	mov	r0, r3
 800e688:	f004 f812 	bl	80126b0 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800e68c:	4b41      	ldr	r3, [pc, #260]	; (800e794 <LmhpComplianceOnMcpsIndication+0x29c>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	785b      	ldrb	r3, [r3, #1]
 800e692:	4618      	mov	r0, r3
 800e694:	f004 fd9c 	bl	80131d0 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800e698:	4b3e      	ldr	r3, [pc, #248]	; (800e794 <LmhpComplianceOnMcpsIndication+0x29c>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	689b      	ldr	r3, [r3, #8]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	f000 8100 	beq.w	800e8a4 <LmhpComplianceOnMcpsIndication+0x3ac>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800e6a4:	4b3b      	ldr	r3, [pc, #236]	; (800e794 <LmhpComplianceOnMcpsIndication+0x29c>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	689b      	ldr	r3, [r3, #8]
 800e6aa:	4798      	blx	r3
                }
            }
            break;
 800e6ac:	e0fa      	b.n	800e8a4 <LmhpComplianceOnMcpsIndication+0x3ac>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800e6ae:	4b38      	ldr	r3, [pc, #224]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e6b0:	2202      	movs	r2, #2
 800e6b2:	719a      	strb	r2, [r3, #6]
            break;
 800e6b4:	e0f7      	b.n	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800e6b6:	4b36      	ldr	r3, [pc, #216]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800e6bc:	4b34      	ldr	r3, [pc, #208]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e6be:	2201      	movs	r2, #1
 800e6c0:	709a      	strb	r2, [r3, #2]
            break;
 800e6c2:	e0f0      	b.n	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800e6c4:	4b32      	ldr	r3, [pc, #200]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800e6ca:	4b31      	ldr	r3, [pc, #196]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	709a      	strb	r2, [r3, #2]
            break;
 800e6d0:	e0e9      	b.n	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	7b1a      	ldrb	r2, [r3, #12]
 800e6d6:	4b2e      	ldr	r3, [pc, #184]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e6d8:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800e6da:	4b2d      	ldr	r3, [pc, #180]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e6dc:	689b      	ldr	r3, [r3, #8]
 800e6de:	2204      	movs	r2, #4
 800e6e0:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800e6e8:	e012      	b.n	800e710 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	689a      	ldr	r2, [r3, #8]
 800e6ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e6f2:	4413      	add	r3, r2
 800e6f4:	781a      	ldrb	r2, [r3, #0]
 800e6f6:	4b26      	ldr	r3, [pc, #152]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e6f8:	6899      	ldr	r1, [r3, #8]
 800e6fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e6fe:	440b      	add	r3, r1
 800e700:	3201      	adds	r2, #1
 800e702:	b2d2      	uxtb	r2, r2
 800e704:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800e706:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e70a:	3301      	adds	r3, #1
 800e70c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800e710:	4b1f      	ldr	r3, [pc, #124]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e712:	795a      	ldrb	r2, [r3, #5]
 800e714:	4b1e      	ldr	r3, [pc, #120]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e716:	799b      	ldrb	r3, [r3, #6]
 800e718:	4293      	cmp	r3, r2
 800e71a:	bf28      	it	cs
 800e71c:	4613      	movcs	r3, r2
 800e71e:	b2db      	uxtb	r3, r3
 800e720:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800e724:	429a      	cmp	r2, r3
 800e726:	d3e0      	bcc.n	800e6ea <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800e728:	e0bd      	b.n	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800e72a:	2304      	movs	r3, #4
 800e72c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800e730:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e734:	4618      	mov	r0, r3
 800e736:	f004 fb15 	bl	8012d64 <LoRaMacMlmeRequest>
            }
            break;
 800e73a:	e0b4      	b.n	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800e73c:	4817      	ldr	r0, [pc, #92]	; (800e79c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800e73e:	f00d fa67 	bl	801bc10 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800e742:	4b13      	ldr	r3, [pc, #76]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e744:	2200      	movs	r2, #0
 800e746:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800e748:	4b11      	ldr	r3, [pc, #68]	; (800e790 <LmhpComplianceOnMcpsIndication+0x298>)
 800e74a:	2200      	movs	r2, #0
 800e74c:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 800e74e:	2304      	movs	r3, #4
 800e750:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e752:	4b10      	ldr	r3, [pc, #64]	; (800e794 <LmhpComplianceOnMcpsIndication+0x29c>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e75a:	f107 0308 	add.w	r3, r7, #8
 800e75e:	4618      	mov	r0, r3
 800e760:	f003 ffa6 	bl	80126b0 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800e764:	4b0b      	ldr	r3, [pc, #44]	; (800e794 <LmhpComplianceOnMcpsIndication+0x29c>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	785b      	ldrb	r3, [r3, #1]
 800e76a:	4618      	mov	r0, r3
 800e76c:	f004 fd30 	bl	80131d0 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800e770:	4b08      	ldr	r3, [pc, #32]	; (800e794 <LmhpComplianceOnMcpsIndication+0x29c>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	689b      	ldr	r3, [r3, #8]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d003      	beq.n	800e782 <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800e77a:	4b06      	ldr	r3, [pc, #24]	; (800e794 <LmhpComplianceOnMcpsIndication+0x29c>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	689b      	ldr	r3, [r3, #8]
 800e780:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800e782:	4b07      	ldr	r3, [pc, #28]	; (800e7a0 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800e784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e786:	2101      	movs	r1, #1
 800e788:	2002      	movs	r0, #2
 800e78a:	4798      	blx	r3
            }
            break;
 800e78c:	e08b      	b.n	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
 800e78e:	bf00      	nop
 800e790:	20000c10 	.word	0x20000c10
 800e794:	20000c24 	.word	0x20000c24
 800e798:	0800e8bd 	.word	0x0800e8bd
 800e79c:	20000bf8 	.word	0x20000bf8
 800e7a0:	200000e0 	.word	0x200000e0
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	7b1b      	ldrb	r3, [r3, #12]
 800e7a8:	2b03      	cmp	r3, #3
 800e7aa:	d113      	bne.n	800e7d4 <LmhpComplianceOnMcpsIndication+0x2dc>
                {
                    mlmeReq.Type = MLME_TXCW;
 800e7ac:	2305      	movs	r3, #5
 800e7ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	689b      	ldr	r3, [r3, #8]
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	021b      	lsls	r3, r3, #8
 800e7bc:	b21a      	sxth	r2, r3
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	689b      	ldr	r3, [r3, #8]
 800e7c2:	3302      	adds	r3, #2
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	b21b      	sxth	r3, r3
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	b21b      	sxth	r3, r3
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800e7d2:	e032      	b.n	800e83a <LmhpComplianceOnMcpsIndication+0x342>
                }
                else if( mcpsIndication->BufferSize == 7 )
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	7b1b      	ldrb	r3, [r3, #12]
 800e7d8:	2b07      	cmp	r3, #7
 800e7da:	d12e      	bne.n	800e83a <LmhpComplianceOnMcpsIndication+0x342>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800e7dc:	2306      	movs	r3, #6
 800e7de:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	689b      	ldr	r3, [r3, #8]
 800e7e6:	3301      	adds	r3, #1
 800e7e8:	781b      	ldrb	r3, [r3, #0]
 800e7ea:	021b      	lsls	r3, r3, #8
 800e7ec:	b21a      	sxth	r2, r3
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	689b      	ldr	r3, [r3, #8]
 800e7f2:	3302      	adds	r3, #2
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	b21b      	sxth	r3, r3
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	b21b      	sxth	r3, r3
 800e7fc:	b29b      	uxth	r3, r3
 800e7fe:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	689b      	ldr	r3, [r3, #8]
 800e806:	3303      	adds	r3, #3
 800e808:	781b      	ldrb	r3, [r3, #0]
 800e80a:	041a      	lsls	r2, r3, #16
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	3304      	adds	r3, #4
 800e812:	781b      	ldrb	r3, [r3, #0]
 800e814:	021b      	lsls	r3, r3, #8
 800e816:	4313      	orrs	r3, r2
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	6892      	ldr	r2, [r2, #8]
 800e81c:	3205      	adds	r2, #5
 800e81e:	7812      	ldrb	r2, [r2, #0]
 800e820:	4313      	orrs	r3, r2
 800e822:	461a      	mov	r2, r3
 800e824:	2364      	movs	r3, #100	; 0x64
 800e826:	fb02 f303 	mul.w	r3, r2, r3
 800e82a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	689b      	ldr	r3, [r3, #8]
 800e830:	3306      	adds	r3, #6
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	b25b      	sxtb	r3, r3
 800e836:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800e83a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e83e:	4618      	mov	r0, r3
 800e840:	f004 fa90 	bl	8012d64 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800e844:	4b19      	ldr	r3, [pc, #100]	; (800e8ac <LmhpComplianceOnMcpsIndication+0x3b4>)
 800e846:	2201      	movs	r2, #1
 800e848:	709a      	strb	r2, [r3, #2]
            }
            break;
 800e84a:	e02c      	b.n	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800e84c:	230a      	movs	r3, #10
 800e84e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800e852:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e856:	4618      	mov	r0, r3
 800e858:	f004 fa84 	bl	8012d64 <LoRaMacMlmeRequest>
            }
            break;
 800e85c:	e023      	b.n	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800e85e:	2300      	movs	r3, #0
 800e860:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	689b      	ldr	r3, [r3, #8]
 800e866:	3301      	adds	r3, #1
 800e868:	781b      	ldrb	r3, [r3, #0]
 800e86a:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e86c:	f107 0308 	add.w	r3, r7, #8
 800e870:	4618      	mov	r0, r3
 800e872:	f003 ff1d 	bl	80126b0 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800e876:	e016      	b.n	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800e878:	230d      	movs	r3, #13
 800e87a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	689b      	ldr	r3, [r3, #8]
 800e882:	785b      	ldrb	r3, [r3, #1]
 800e884:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800e888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e88c:	4618      	mov	r0, r3
 800e88e:	f004 fa69 	bl	8012d64 <LoRaMacMlmeRequest>
            }
            break;
 800e892:	e008      	b.n	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800e894:	bf00      	nop
 800e896:	e006      	b.n	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800e898:	bf00      	nop
 800e89a:	e004      	b.n	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800e89c:	bf00      	nop
 800e89e:	e002      	b.n	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
        default:
            break;
 800e8a0:	bf00      	nop
 800e8a2:	e000      	b.n	800e8a6 <LmhpComplianceOnMcpsIndication+0x3ae>
            break;
 800e8a4:	bf00      	nop
        }
    }
}
 800e8a6:	3780      	adds	r7, #128	; 0x80
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	20000c10 	.word	0x20000c10

0800e8b0 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800e8b4:	bf00      	nop
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bc80      	pop	{r7}
 800e8ba:	4770      	bx	lr

0800e8bc <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b082      	sub	sp, #8
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800e8c4:	f7ff fda8 	bl	800e418 <LmhpComplianceTxProcess>
}
 800e8c8:	bf00      	nop
 800e8ca:	3708      	adds	r7, #8
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800e8d0:	b590      	push	{r4, r7, lr}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e8d6:	f00d fab5 	bl	801be44 <UTIL_TIMER_GetCurrentTime>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	4a16      	ldr	r2, [pc, #88]	; (800e938 <OnRadioTxDone+0x68>)
 800e8de:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e8e0:	4c16      	ldr	r4, [pc, #88]	; (800e93c <OnRadioTxDone+0x6c>)
 800e8e2:	463b      	mov	r3, r7
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f00c fc27 	bl	801b138 <SysTimeGet>
 800e8ea:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800e8ee:	463a      	mov	r2, r7
 800e8f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8f4:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e8f8:	4a11      	ldr	r2, [pc, #68]	; (800e940 <OnRadioTxDone+0x70>)
 800e8fa:	7813      	ldrb	r3, [r2, #0]
 800e8fc:	f043 0310 	orr.w	r3, r3, #16
 800e900:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e902:	4b0e      	ldr	r3, [pc, #56]	; (800e93c <OnRadioTxDone+0x6c>)
 800e904:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d00a      	beq.n	800e922 <OnRadioTxDone+0x52>
 800e90c:	4b0b      	ldr	r3, [pc, #44]	; (800e93c <OnRadioTxDone+0x6c>)
 800e90e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e912:	691b      	ldr	r3, [r3, #16]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d004      	beq.n	800e922 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e918:	4b08      	ldr	r3, [pc, #32]	; (800e93c <OnRadioTxDone+0x6c>)
 800e91a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e91e:	691b      	ldr	r3, [r3, #16]
 800e920:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800e922:	4b08      	ldr	r3, [pc, #32]	; (800e944 <OnRadioTxDone+0x74>)
 800e924:	2201      	movs	r2, #1
 800e926:	2100      	movs	r1, #0
 800e928:	2002      	movs	r0, #2
 800e92a:	f00d fb7b 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
}
 800e92e:	bf00      	nop
 800e930:	370c      	adds	r7, #12
 800e932:	46bd      	mov	sp, r7
 800e934:	bd90      	pop	{r4, r7, pc}
 800e936:	bf00      	nop
 800e938:	20001f88 	.word	0x20001f88
 800e93c:	20000c28 	.word	0x20000c28
 800e940:	20001f84 	.word	0x20001f84
 800e944:	0801ca54 	.word	0x0801ca54

0800e948 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b084      	sub	sp, #16
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	60f8      	str	r0, [r7, #12]
 800e950:	4608      	mov	r0, r1
 800e952:	4611      	mov	r1, r2
 800e954:	461a      	mov	r2, r3
 800e956:	4603      	mov	r3, r0
 800e958:	817b      	strh	r3, [r7, #10]
 800e95a:	460b      	mov	r3, r1
 800e95c:	813b      	strh	r3, [r7, #8]
 800e95e:	4613      	mov	r3, r2
 800e960:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e962:	f00d fa6f 	bl	801be44 <UTIL_TIMER_GetCurrentTime>
 800e966:	4603      	mov	r3, r0
 800e968:	4a16      	ldr	r2, [pc, #88]	; (800e9c4 <OnRadioRxDone+0x7c>)
 800e96a:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800e96c:	4a15      	ldr	r2, [pc, #84]	; (800e9c4 <OnRadioRxDone+0x7c>)
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800e972:	4a14      	ldr	r2, [pc, #80]	; (800e9c4 <OnRadioRxDone+0x7c>)
 800e974:	897b      	ldrh	r3, [r7, #10]
 800e976:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800e978:	4a12      	ldr	r2, [pc, #72]	; (800e9c4 <OnRadioRxDone+0x7c>)
 800e97a:	893b      	ldrh	r3, [r7, #8]
 800e97c:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800e97e:	4a11      	ldr	r2, [pc, #68]	; (800e9c4 <OnRadioRxDone+0x7c>)
 800e980:	79fb      	ldrb	r3, [r7, #7]
 800e982:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800e984:	4a10      	ldr	r2, [pc, #64]	; (800e9c8 <OnRadioRxDone+0x80>)
 800e986:	7813      	ldrb	r3, [r2, #0]
 800e988:	f043 0308 	orr.w	r3, r3, #8
 800e98c:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e98e:	4b0f      	ldr	r3, [pc, #60]	; (800e9cc <OnRadioRxDone+0x84>)
 800e990:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e994:	2b00      	cmp	r3, #0
 800e996:	d00a      	beq.n	800e9ae <OnRadioRxDone+0x66>
 800e998:	4b0c      	ldr	r3, [pc, #48]	; (800e9cc <OnRadioRxDone+0x84>)
 800e99a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e99e:	691b      	ldr	r3, [r3, #16]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d004      	beq.n	800e9ae <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e9a4:	4b09      	ldr	r3, [pc, #36]	; (800e9cc <OnRadioRxDone+0x84>)
 800e9a6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e9aa:	691b      	ldr	r3, [r3, #16]
 800e9ac:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800e9ae:	4b08      	ldr	r3, [pc, #32]	; (800e9d0 <OnRadioRxDone+0x88>)
 800e9b0:	2201      	movs	r2, #1
 800e9b2:	2100      	movs	r1, #0
 800e9b4:	2002      	movs	r0, #2
 800e9b6:	f00d fb35 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
}
 800e9ba:	bf00      	nop
 800e9bc:	3710      	adds	r7, #16
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	bf00      	nop
 800e9c4:	20001f8c 	.word	0x20001f8c
 800e9c8:	20001f84 	.word	0x20001f84
 800e9cc:	20000c28 	.word	0x20000c28
 800e9d0:	0801ca64 	.word	0x0801ca64

0800e9d4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800e9d8:	4a0e      	ldr	r2, [pc, #56]	; (800ea14 <OnRadioTxTimeout+0x40>)
 800e9da:	7813      	ldrb	r3, [r2, #0]
 800e9dc:	f043 0304 	orr.w	r3, r3, #4
 800e9e0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e9e2:	4b0d      	ldr	r3, [pc, #52]	; (800ea18 <OnRadioTxTimeout+0x44>)
 800e9e4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d00a      	beq.n	800ea02 <OnRadioTxTimeout+0x2e>
 800e9ec:	4b0a      	ldr	r3, [pc, #40]	; (800ea18 <OnRadioTxTimeout+0x44>)
 800e9ee:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e9f2:	691b      	ldr	r3, [r3, #16]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d004      	beq.n	800ea02 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e9f8:	4b07      	ldr	r3, [pc, #28]	; (800ea18 <OnRadioTxTimeout+0x44>)
 800e9fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e9fe:	691b      	ldr	r3, [r3, #16]
 800ea00:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800ea02:	4b06      	ldr	r3, [pc, #24]	; (800ea1c <OnRadioTxTimeout+0x48>)
 800ea04:	2201      	movs	r2, #1
 800ea06:	2100      	movs	r1, #0
 800ea08:	2002      	movs	r0, #2
 800ea0a:	f00d fb0b 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
}
 800ea0e:	bf00      	nop
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	20001f84 	.word	0x20001f84
 800ea18:	20000c28 	.word	0x20000c28
 800ea1c:	0801ca74 	.word	0x0801ca74

0800ea20 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800ea24:	4a0b      	ldr	r2, [pc, #44]	; (800ea54 <OnRadioRxError+0x34>)
 800ea26:	7813      	ldrb	r3, [r2, #0]
 800ea28:	f043 0302 	orr.w	r3, r3, #2
 800ea2c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ea2e:	4b0a      	ldr	r3, [pc, #40]	; (800ea58 <OnRadioRxError+0x38>)
 800ea30:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d00a      	beq.n	800ea4e <OnRadioRxError+0x2e>
 800ea38:	4b07      	ldr	r3, [pc, #28]	; (800ea58 <OnRadioRxError+0x38>)
 800ea3a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea3e:	691b      	ldr	r3, [r3, #16]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d004      	beq.n	800ea4e <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ea44:	4b04      	ldr	r3, [pc, #16]	; (800ea58 <OnRadioRxError+0x38>)
 800ea46:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea4a:	691b      	ldr	r3, [r3, #16]
 800ea4c:	4798      	blx	r3
    }
}
 800ea4e:	bf00      	nop
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	20001f84 	.word	0x20001f84
 800ea58:	20000c28 	.word	0x20000c28

0800ea5c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800ea60:	4a0e      	ldr	r2, [pc, #56]	; (800ea9c <OnRadioRxTimeout+0x40>)
 800ea62:	7813      	ldrb	r3, [r2, #0]
 800ea64:	f043 0301 	orr.w	r3, r3, #1
 800ea68:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ea6a:	4b0d      	ldr	r3, [pc, #52]	; (800eaa0 <OnRadioRxTimeout+0x44>)
 800ea6c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d00a      	beq.n	800ea8a <OnRadioRxTimeout+0x2e>
 800ea74:	4b0a      	ldr	r3, [pc, #40]	; (800eaa0 <OnRadioRxTimeout+0x44>)
 800ea76:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea7a:	691b      	ldr	r3, [r3, #16]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d004      	beq.n	800ea8a <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ea80:	4b07      	ldr	r3, [pc, #28]	; (800eaa0 <OnRadioRxTimeout+0x44>)
 800ea82:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea86:	691b      	ldr	r3, [r3, #16]
 800ea88:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800ea8a:	4b06      	ldr	r3, [pc, #24]	; (800eaa4 <OnRadioRxTimeout+0x48>)
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	2100      	movs	r1, #0
 800ea90:	2002      	movs	r0, #2
 800ea92:	f00d fac7 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
}
 800ea96:	bf00      	nop
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	20001f84 	.word	0x20001f84
 800eaa0:	20000c28 	.word	0x20000c28
 800eaa4:	0801ca84 	.word	0x0801ca84

0800eaa8 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800eaac:	4b08      	ldr	r3, [pc, #32]	; (800ead0 <UpdateRxSlotIdleState+0x28>)
 800eaae:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800eab2:	2b02      	cmp	r3, #2
 800eab4:	d004      	beq.n	800eac0 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800eab6:	4b07      	ldr	r3, [pc, #28]	; (800ead4 <UpdateRxSlotIdleState+0x2c>)
 800eab8:	2206      	movs	r2, #6
 800eaba:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800eabe:	e003      	b.n	800eac8 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800eac0:	4b04      	ldr	r3, [pc, #16]	; (800ead4 <UpdateRxSlotIdleState+0x2c>)
 800eac2:	2202      	movs	r2, #2
 800eac4:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
}
 800eac8:	bf00      	nop
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bc80      	pop	{r7}
 800eace:	4770      	bx	lr
 800ead0:	20001134 	.word	0x20001134
 800ead4:	20000c28 	.word	0x20000c28

0800ead8 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b08e      	sub	sp, #56	; 0x38
 800eadc:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800eade:	4b44      	ldr	r3, [pc, #272]	; (800ebf0 <ProcessRadioTxDone+0x118>)
 800eae0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800eae4:	2b02      	cmp	r3, #2
 800eae6:	d002      	beq.n	800eaee <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800eae8:	4b42      	ldr	r3, [pc, #264]	; (800ebf4 <ProcessRadioTxDone+0x11c>)
 800eaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaec:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800eaee:	4b42      	ldr	r3, [pc, #264]	; (800ebf8 <ProcessRadioTxDone+0x120>)
 800eaf0:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	4841      	ldr	r0, [pc, #260]	; (800ebfc <ProcessRadioTxDone+0x124>)
 800eaf8:	f00d f8fa 	bl	801bcf0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800eafc:	483f      	ldr	r0, [pc, #252]	; (800ebfc <ProcessRadioTxDone+0x124>)
 800eafe:	f00d f819 	bl	801bb34 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800eb02:	4b3d      	ldr	r3, [pc, #244]	; (800ebf8 <ProcessRadioTxDone+0x120>)
 800eb04:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800eb08:	4619      	mov	r1, r3
 800eb0a:	483d      	ldr	r0, [pc, #244]	; (800ec00 <ProcessRadioTxDone+0x128>)
 800eb0c:	f00d f8f0 	bl	801bcf0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800eb10:	483b      	ldr	r0, [pc, #236]	; (800ec00 <ProcessRadioTxDone+0x128>)
 800eb12:	f00d f80f 	bl	801bb34 <UTIL_TIMER_Start>
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800eb16:	4b36      	ldr	r3, [pc, #216]	; (800ebf0 <ProcessRadioTxDone+0x118>)
 800eb18:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800eb1c:	2b02      	cmp	r3, #2
 800eb1e:	d004      	beq.n	800eb2a <ProcessRadioTxDone+0x52>
 800eb20:	4b35      	ldr	r3, [pc, #212]	; (800ebf8 <ProcessRadioTxDone+0x120>)
 800eb22:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d019      	beq.n	800eb5e <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800eb2a:	2316      	movs	r3, #22
 800eb2c:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eb30:	4b2f      	ldr	r3, [pc, #188]	; (800ebf0 <ProcessRadioTxDone+0x118>)
 800eb32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eb36:	f107 0220 	add.w	r2, r7, #32
 800eb3a:	4611      	mov	r1, r2
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f006 fc09 	bl	8015354 <RegionGetPhyParam>
 800eb42:	4603      	mov	r3, r0
 800eb44:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800eb46:	4b2c      	ldr	r3, [pc, #176]	; (800ebf8 <ProcessRadioTxDone+0x120>)
 800eb48:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	4413      	add	r3, r2
 800eb50:	4619      	mov	r1, r3
 800eb52:	482c      	ldr	r0, [pc, #176]	; (800ec04 <ProcessRadioTxDone+0x12c>)
 800eb54:	f00d f8cc 	bl	801bcf0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800eb58:	482a      	ldr	r0, [pc, #168]	; (800ec04 <ProcessRadioTxDone+0x12c>)
 800eb5a:	f00c ffeb 	bl	801bb34 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800eb5e:	4b2a      	ldr	r3, [pc, #168]	; (800ec08 <ProcessRadioTxDone+0x130>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	4a23      	ldr	r2, [pc, #140]	; (800ebf0 <ProcessRadioTxDone+0x118>)
 800eb64:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800eb66:	4b24      	ldr	r3, [pc, #144]	; (800ebf8 <ProcessRadioTxDone+0x120>)
 800eb68:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800eb6c:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800eb6e:	4b26      	ldr	r3, [pc, #152]	; (800ec08 <ProcessRadioTxDone+0x130>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800eb74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f00c fb15 	bl	801b1a8 <SysTimeGetMcuTime>
 800eb7e:	4638      	mov	r0, r7
 800eb80:	4b1b      	ldr	r3, [pc, #108]	; (800ebf0 <ProcessRadioTxDone+0x118>)
 800eb82:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800eb86:	9200      	str	r2, [sp, #0]
 800eb88:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800eb8c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800eb90:	ca06      	ldmia	r2, {r1, r2}
 800eb92:	f00c fa6a 	bl	801b06a <SysTimeSub>
 800eb96:	f107 0314 	add.w	r3, r7, #20
 800eb9a:	463a      	mov	r2, r7
 800eb9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eba0:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800eba4:	4b14      	ldr	r3, [pc, #80]	; (800ebf8 <ProcessRadioTxDone+0x120>)
 800eba6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800ebaa:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800ebac:	2301      	movs	r3, #1
 800ebae:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ebb0:	4b0f      	ldr	r3, [pc, #60]	; (800ebf0 <ProcessRadioTxDone+0x118>)
 800ebb2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d101      	bne.n	800ebbe <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800ebbe:	4b0c      	ldr	r3, [pc, #48]	; (800ebf0 <ProcessRadioTxDone+0x118>)
 800ebc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ebc4:	f107 0208 	add.w	r2, r7, #8
 800ebc8:	4611      	mov	r1, r2
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f006 fbda 	bl	8015384 <RegionSetBandTxDone>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800ebd0:	4b09      	ldr	r3, [pc, #36]	; (800ebf8 <ProcessRadioTxDone+0x120>)
 800ebd2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800ebd6:	f083 0301 	eor.w	r3, r3, #1
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d003      	beq.n	800ebe8 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ebe0:	4b05      	ldr	r3, [pc, #20]	; (800ebf8 <ProcessRadioTxDone+0x120>)
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
#endif /* LORAMAC_VERSION */
}
 800ebe8:	bf00      	nop
 800ebea:	3730      	adds	r7, #48	; 0x30
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}
 800ebf0:	20001134 	.word	0x20001134
 800ebf4:	0801d0b0 	.word	0x0801d0b0
 800ebf8:	20000c28 	.word	0x20000c28
 800ebfc:	20000fa8 	.word	0x20000fa8
 800ec00:	20000fc0 	.word	0x20000fc0
 800ec04:	20001020 	.word	0x20001020
 800ec08:	20001f88 	.word	0x20001f88

0800ec0c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800ec10:	4b10      	ldr	r3, [pc, #64]	; (800ec54 <PrepareRxDoneAbort+0x48>)
 800ec12:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ec16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec1a:	4a0e      	ldr	r2, [pc, #56]	; (800ec54 <PrepareRxDoneAbort+0x48>)
 800ec1c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800ec20:	4b0c      	ldr	r3, [pc, #48]	; (800ec54 <PrepareRxDoneAbort+0x48>)
 800ec22:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d002      	beq.n	800ec30 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800ec2a:	2000      	movs	r0, #0
 800ec2c:	f001 f8f2 	bl	800fe14 <OnAckTimeoutTimerEvent>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800ec30:	4a08      	ldr	r2, [pc, #32]	; (800ec54 <PrepareRxDoneAbort+0x48>)
 800ec32:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800ec36:	f043 0302 	orr.w	r3, r3, #2
 800ec3a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ec3e:	4a05      	ldr	r2, [pc, #20]	; (800ec54 <PrepareRxDoneAbort+0x48>)
 800ec40:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800ec44:	f043 0320 	orr.w	r3, r3, #32
 800ec48:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

    UpdateRxSlotIdleState( );
 800ec4c:	f7ff ff2c 	bl	800eaa8 <UpdateRxSlotIdleState>
}
 800ec50:	bf00      	nop
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	20000c28 	.word	0x20000c28

0800ec58 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800ec58:	b5b0      	push	{r4, r5, r7, lr}
 800ec5a:	b0a6      	sub	sp, #152	; 0x98
 800ec5c:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800ec5e:	2313      	movs	r3, #19
 800ec60:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800ec64:	4bb9      	ldr	r3, [pc, #740]	; (800ef4c <ProcessRadioRxDone+0x2f4>)
 800ec66:	685b      	ldr	r3, [r3, #4]
 800ec68:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800ec6a:	4bb8      	ldr	r3, [pc, #736]	; (800ef4c <ProcessRadioRxDone+0x2f4>)
 800ec6c:	891b      	ldrh	r3, [r3, #8]
 800ec6e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800ec72:	4bb6      	ldr	r3, [pc, #728]	; (800ef4c <ProcessRadioRxDone+0x2f4>)
 800ec74:	895b      	ldrh	r3, [r3, #10]
 800ec76:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800ec7a:	4bb4      	ldr	r3, [pc, #720]	; (800ef4c <ProcessRadioRxDone+0x2f4>)
 800ec7c:	7b1b      	ldrb	r3, [r3, #12]
 800ec7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800ec82:	2300      	movs	r3, #0
 800ec84:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800ec8c:	4bb0      	ldr	r3, [pc, #704]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800ec8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ec92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800ec96:	2300      	movs	r3, #0
 800ec98:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800eca2:	4bac      	ldr	r3, [pc, #688]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800eca4:	2200      	movs	r2, #0
 800eca6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800ecaa:	4aaa      	ldr	r2, [pc, #680]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ecac:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800ecb0:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    MacCtx.RxStatus.Snr = snr;
 800ecb4:	4aa7      	ldr	r2, [pc, #668]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ecb6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ecba:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800ecbe:	4ba5      	ldr	r3, [pc, #660]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ecc0:	f893 2484 	ldrb.w	r2, [r3, #1156]	; 0x484
 800ecc4:	4ba3      	ldr	r3, [pc, #652]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ecc6:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
    MacCtx.McpsIndication.Port = 0;
 800ecca:	4ba2      	ldr	r3, [pc, #648]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800eccc:	2200      	movs	r2, #0
 800ecce:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800ecd2:	4ba0      	ldr	r3, [pc, #640]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800ecda:	4b9e      	ldr	r3, [pc, #632]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ecdc:	2200      	movs	r2, #0
 800ecde:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800ece2:	4b9c      	ldr	r3, [pc, #624]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ece4:	2200      	movs	r2, #0
 800ece6:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800ecea:	4b9a      	ldr	r3, [pc, #616]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ecec:	2200      	movs	r2, #0
 800ecee:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800ecf2:	4b98      	ldr	r3, [pc, #608]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800ecfa:	4b96      	ldr	r3, [pc, #600]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800ed02:	4b94      	ldr	r3, [pc, #592]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ed04:	2200      	movs	r2, #0
 800ed06:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ed0a:	4b92      	ldr	r3, [pc, #584]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800ed12:	4b90      	ldr	r3, [pc, #576]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ed14:	2200      	movs	r2, #0
 800ed16:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800ed1a:	4b8e      	ldr	r3, [pc, #568]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800ed22:	4b8d      	ldr	r3, [pc, #564]	; (800ef58 <ProcessRadioRxDone+0x300>)
 800ed24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed26:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800ed28:	488c      	ldr	r0, [pc, #560]	; (800ef5c <ProcessRadioRxDone+0x304>)
 800ed2a:	f00c ff71 	bl	801bc10 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800ed2e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ed32:	4619      	mov	r1, r3
 800ed34:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ed36:	f004 fbaa 	bl	801348e <LoRaMacClassBRxBeacon>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d00a      	beq.n	800ed56 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800ed40:	4a84      	ldr	r2, [pc, #528]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ed42:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800ed46:	f8a2 3476 	strh.w	r3, [r2, #1142]	; 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800ed4a:	4a82      	ldr	r2, [pc, #520]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ed4c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ed50:	f882 3478 	strb.w	r3, [r2, #1144]	; 0x478
        return;
 800ed54:	e3c7      	b.n	800f4e6 <ProcessRadioRxDone+0x88e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ed56:	4b7e      	ldr	r3, [pc, #504]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800ed58:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d11e      	bne.n	800ed9e <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ed60:	f004 fba8 	bl	80134b4 <LoRaMacClassBIsPingExpected>
 800ed64:	4603      	mov	r3, r0
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d00a      	beq.n	800ed80 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ed6a:	2000      	movs	r0, #0
 800ed6c:	f004 fb59 	bl	8013422 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ed70:	2000      	movs	r0, #0
 800ed72:	f004 fb7a 	bl	801346a <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800ed76:	4b77      	ldr	r3, [pc, #476]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ed78:	2204      	movs	r2, #4
 800ed7a:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 800ed7e:	e00e      	b.n	800ed9e <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ed80:	f004 fb9f 	bl	80134c2 <LoRaMacClassBIsMulticastExpected>
 800ed84:	4603      	mov	r3, r0
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d009      	beq.n	800ed9e <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ed8a:	2000      	movs	r0, #0
 800ed8c:	f004 fb53 	bl	8013436 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ed90:	2000      	movs	r0, #0
 800ed92:	f004 fb73 	bl	801347c <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ed96:	4b6f      	ldr	r3, [pc, #444]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ed98:	2205      	movs	r2, #5
 800ed9a:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800ed9e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800eda2:	1c5a      	adds	r2, r3, #1
 800eda4:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800eda8:	461a      	mov	r2, r3
 800edaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800edac:	4413      	add	r3, r2
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800edb4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800edb8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800edbc:	b2db      	uxtb	r3, r3
 800edbe:	3b01      	subs	r3, #1
 800edc0:	2b06      	cmp	r3, #6
 800edc2:	f200 836a 	bhi.w	800f49a <ProcessRadioRxDone+0x842>
 800edc6:	a201      	add	r2, pc, #4	; (adr r2, 800edcc <ProcessRadioRxDone+0x174>)
 800edc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edcc:	0800ede9 	.word	0x0800ede9
 800edd0:	0800f49b 	.word	0x0800f49b
 800edd4:	0800ef69 	.word	0x0800ef69
 800edd8:	0800f49b 	.word	0x0800f49b
 800eddc:	0800ef61 	.word	0x0800ef61
 800ede0:	0800f49b 	.word	0x0800f49b
 800ede4:	0800f441 	.word	0x0800f441
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800ede8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800edec:	2b10      	cmp	r3, #16
 800edee:	d806      	bhi.n	800edfe <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800edf0:	4b58      	ldr	r3, [pc, #352]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800edf2:	2201      	movs	r2, #1
 800edf4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800edf8:	f7ff ff08 	bl	800ec0c <PrepareRxDoneAbort>
                return;
 800edfc:	e373      	b.n	800f4e6 <ProcessRadioRxDone+0x88e>
            }
            macMsgJoinAccept.Buffer = payload;
 800edfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee00:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800ee02:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ee06:	b2db      	uxtb	r3, r3
 800ee08:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ee0a:	4b51      	ldr	r3, [pc, #324]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800ee0c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d006      	beq.n	800ee22 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ee14:	4b4f      	ldr	r3, [pc, #316]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ee16:	2201      	movs	r2, #1
 800ee18:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800ee1c:	f7ff fef6 	bl	800ec0c <PrepareRxDoneAbort>
                return;
 800ee20:	e361      	b.n	800f4e6 <ProcessRadioRxDone+0x88e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800ee22:	f7fe faa3 	bl	800d36c <SecureElementGetJoinEui>
 800ee26:	4601      	mov	r1, r0
 800ee28:	f107 0308 	add.w	r3, r7, #8
 800ee2c:	461a      	mov	r2, r3
 800ee2e:	20ff      	movs	r0, #255	; 0xff
 800ee30:	f005 fd14 	bl	801485c <LoRaMacCryptoHandleJoinAccept>
 800ee34:	4603      	mov	r3, r0
 800ee36:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800ee3a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d172      	bne.n	800ef28 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800ee42:	7c7b      	ldrb	r3, [r7, #17]
 800ee44:	461a      	mov	r2, r3
 800ee46:	4b42      	ldr	r3, [pc, #264]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800ee48:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800ee4c:	4b40      	ldr	r3, [pc, #256]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800ee4e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800ee52:	7cbb      	ldrb	r3, [r7, #18]
 800ee54:	021b      	lsls	r3, r3, #8
 800ee56:	4313      	orrs	r3, r2
 800ee58:	4a3d      	ldr	r2, [pc, #244]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800ee5a:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800ee5e:	4b3c      	ldr	r3, [pc, #240]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800ee60:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800ee64:	7cfb      	ldrb	r3, [r7, #19]
 800ee66:	041b      	lsls	r3, r3, #16
 800ee68:	4313      	orrs	r3, r2
 800ee6a:	4a39      	ldr	r2, [pc, #228]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800ee6c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	4a37      	ldr	r2, [pc, #220]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800ee74:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800ee78:	7e3b      	ldrb	r3, [r7, #24]
 800ee7a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ee7e:	b2db      	uxtb	r3, r3
 800ee80:	461a      	mov	r2, r3
 800ee82:	4b33      	ldr	r3, [pc, #204]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800ee84:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ee88:	7e3b      	ldrb	r3, [r7, #24]
 800ee8a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	461a      	mov	r2, r3
 800ee92:	4b2f      	ldr	r3, [pc, #188]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800ee94:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ee98:	7e3b      	ldrb	r3, [r7, #24]
 800ee9a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ee9e:	b2db      	uxtb	r3, r3
 800eea0:	461a      	mov	r2, r3
 800eea2:	4b2b      	ldr	r3, [pc, #172]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800eea4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800eea8:	7e7b      	ldrb	r3, [r7, #25]
 800eeaa:	461a      	mov	r2, r3
 800eeac:	4b28      	ldr	r3, [pc, #160]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800eeae:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800eeb0:	4b27      	ldr	r3, [pc, #156]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800eeb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d102      	bne.n	800eebe <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800eeb8:	4b25      	ldr	r3, [pc, #148]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800eeba:	2201      	movs	r2, #1
 800eebc:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800eebe:	4b24      	ldr	r3, [pc, #144]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800eec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eec2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eec6:	fb02 f303 	mul.w	r3, r2, r3
 800eeca:	4a21      	ldr	r2, [pc, #132]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800eecc:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800eece:	4b20      	ldr	r3, [pc, #128]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800eed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eed2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800eed6:	4a1e      	ldr	r2, [pc, #120]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800eed8:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800eeda:	4b1d      	ldr	r3, [pc, #116]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800eedc:	2200      	movs	r2, #0
 800eede:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800eee2:	f107 0308 	add.w	r3, r7, #8
 800eee6:	3312      	adds	r3, #18
 800eee8:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800eeea:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800eeee:	b2db      	uxtb	r3, r3
 800eef0:	3b11      	subs	r3, #17
 800eef2:	b2db      	uxtb	r3, r3
 800eef4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800eef8:	4b15      	ldr	r3, [pc, #84]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800eefa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eefe:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800ef02:	4611      	mov	r1, r2
 800ef04:	4618      	mov	r0, r3
 800ef06:	f006 fa77 	bl	80153f8 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ef0a:	4b11      	ldr	r3, [pc, #68]	; (800ef50 <ProcessRadioRxDone+0x2f8>)
 800ef0c:	2202      	movs	r2, #2
 800ef0e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ef12:	2001      	movs	r0, #1
 800ef14:	f004 ff9a 	bl	8013e4c <LoRaMacConfirmQueueIsCmdActive>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d00e      	beq.n	800ef3c <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800ef1e:	2101      	movs	r1, #1
 800ef20:	2000      	movs	r0, #0
 800ef22:	f004 ff07 	bl	8013d34 <LoRaMacConfirmQueueSetStatus>
 800ef26:	e009      	b.n	800ef3c <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ef28:	2001      	movs	r0, #1
 800ef2a:	f004 ff8f 	bl	8013e4c <LoRaMacConfirmQueueIsCmdActive>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d003      	beq.n	800ef3c <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800ef34:	2101      	movs	r1, #1
 800ef36:	2007      	movs	r0, #7
 800ef38:	f004 fefc 	bl	8013d34 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800ef3c:	4a05      	ldr	r2, [pc, #20]	; (800ef54 <ProcessRadioRxDone+0x2fc>)
 800ef3e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800ef42:	f043 0308 	orr.w	r3, r3, #8
 800ef46:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800ef4a:	e2ad      	b.n	800f4a8 <ProcessRadioRxDone+0x850>
 800ef4c:	20001f8c 	.word	0x20001f8c
 800ef50:	20001134 	.word	0x20001134
 800ef54:	20000c28 	.word	0x20000c28
 800ef58:	0801d0b0 	.word	0x0801d0b0
 800ef5c:	20000fc0 	.word	0x20000fc0
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ef60:	4bb0      	ldr	r3, [pc, #704]	; (800f224 <ProcessRadioRxDone+0x5cc>)
 800ef62:	2201      	movs	r2, #1
 800ef64:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ef68:	4baf      	ldr	r3, [pc, #700]	; (800f228 <ProcessRadioRxDone+0x5d0>)
 800ef6a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800ef6e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800ef72:	4bac      	ldr	r3, [pc, #688]	; (800f224 <ProcessRadioRxDone+0x5cc>)
 800ef74:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800ef78:	b25b      	sxtb	r3, r3
 800ef7a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ef7e:	230d      	movs	r3, #13
 800ef80:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ef84:	4ba8      	ldr	r3, [pc, #672]	; (800f228 <ProcessRadioRxDone+0x5d0>)
 800ef86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d002      	beq.n	800ef94 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ef8e:	230e      	movs	r3, #14
 800ef90:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ef94:	4ba4      	ldr	r3, [pc, #656]	; (800f228 <ProcessRadioRxDone+0x5d0>)
 800ef96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef9a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800ef9e:	4611      	mov	r1, r2
 800efa0:	4618      	mov	r0, r3
 800efa2:	f006 f9d7 	bl	8015354 <RegionGetPhyParam>
 800efa6:	4603      	mov	r3, r0
 800efa8:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800efaa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800efae:	3b0d      	subs	r3, #13
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	b21b      	sxth	r3, r3
 800efb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800efb8:	b21a      	sxth	r2, r3
 800efba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800efbc:	b21b      	sxth	r3, r3
 800efbe:	429a      	cmp	r2, r3
 800efc0:	dc03      	bgt.n	800efca <ProcessRadioRxDone+0x372>
 800efc2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800efc6:	2b0b      	cmp	r3, #11
 800efc8:	d806      	bhi.n	800efd8 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800efca:	4b96      	ldr	r3, [pc, #600]	; (800f224 <ProcessRadioRxDone+0x5cc>)
 800efcc:	2201      	movs	r2, #1
 800efce:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800efd2:	f7ff fe1b 	bl	800ec0c <PrepareRxDoneAbort>
                return;
 800efd6:	e286      	b.n	800f4e6 <ProcessRadioRxDone+0x88e>
            }
            macMsgData.Buffer = payload;
 800efd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800efda:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800efdc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800efe0:	b2db      	uxtb	r3, r3
 800efe2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800efe6:	4b91      	ldr	r3, [pc, #580]	; (800f22c <ProcessRadioRxDone+0x5d4>)
 800efe8:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800efea:	23ff      	movs	r3, #255	; 0xff
 800efec:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800eff0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eff4:	4618      	mov	r0, r3
 800eff6:	f005 ff30 	bl	8014e5a <LoRaMacParserData>
 800effa:	4603      	mov	r3, r0
 800effc:	2b00      	cmp	r3, #0
 800effe:	d006      	beq.n	800f00e <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f000:	4b88      	ldr	r3, [pc, #544]	; (800f224 <ProcessRadioRxDone+0x5cc>)
 800f002:	2201      	movs	r2, #1
 800f004:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800f008:	f7ff fe00 	bl	800ec0c <PrepareRxDoneAbort>
                return;
 800f00c:	e26b      	b.n	800f4e6 <ProcessRadioRxDone+0x88e>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800f00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f010:	4a84      	ldr	r2, [pc, #528]	; (800f224 <ProcessRadioRxDone+0x5cc>)
 800f012:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800f016:	1cba      	adds	r2, r7, #2
 800f018:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f01c:	4611      	mov	r1, r2
 800f01e:	4618      	mov	r0, r3
 800f020:	f002 fc9e 	bl	8011960 <DetermineFrameType>
 800f024:	4603      	mov	r3, r0
 800f026:	2b00      	cmp	r3, #0
 800f028:	d006      	beq.n	800f038 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f02a:	4b7e      	ldr	r3, [pc, #504]	; (800f224 <ProcessRadioRxDone+0x5cc>)
 800f02c:	2201      	movs	r2, #1
 800f02e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800f032:	f7ff fdeb 	bl	800ec0c <PrepareRxDoneAbort>
                return;
 800f036:	e256      	b.n	800f4e6 <ProcessRadioRxDone+0x88e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800f038:	2300      	movs	r3, #0
 800f03a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800f03e:	2300      	movs	r3, #0
 800f040:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f042:	2300      	movs	r3, #0
 800f044:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800f048:	e049      	b.n	800f0de <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f04a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f04e:	4a76      	ldr	r2, [pc, #472]	; (800f228 <ProcessRadioRxDone+0x5d0>)
 800f050:	212c      	movs	r1, #44	; 0x2c
 800f052:	fb01 f303 	mul.w	r3, r1, r3
 800f056:	4413      	add	r3, r2
 800f058:	33dc      	adds	r3, #220	; 0xdc
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f05e:	429a      	cmp	r2, r3
 800f060:	d138      	bne.n	800f0d4 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800f062:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f066:	4a70      	ldr	r2, [pc, #448]	; (800f228 <ProcessRadioRxDone+0x5d0>)
 800f068:	212c      	movs	r1, #44	; 0x2c
 800f06a:	fb01 f303 	mul.w	r3, r1, r3
 800f06e:	4413      	add	r3, r2
 800f070:	33da      	adds	r3, #218	; 0xda
 800f072:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f074:	2b00      	cmp	r3, #0
 800f076:	d02d      	beq.n	800f0d4 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800f078:	2301      	movs	r3, #1
 800f07a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800f07e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f082:	4a69      	ldr	r2, [pc, #420]	; (800f228 <ProcessRadioRxDone+0x5d0>)
 800f084:	212c      	movs	r1, #44	; 0x2c
 800f086:	fb01 f303 	mul.w	r3, r1, r3
 800f08a:	4413      	add	r3, r2
 800f08c:	33db      	adds	r3, #219	; 0xdb
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800f094:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f098:	4a63      	ldr	r2, [pc, #396]	; (800f228 <ProcessRadioRxDone+0x5d0>)
 800f09a:	212c      	movs	r1, #44	; 0x2c
 800f09c:	fb01 f303 	mul.w	r3, r1, r3
 800f0a0:	4413      	add	r3, r2
 800f0a2:	33f8      	adds	r3, #248	; 0xf8
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800f0aa:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f0ae:	4a5e      	ldr	r2, [pc, #376]	; (800f228 <ProcessRadioRxDone+0x5d0>)
 800f0b0:	212c      	movs	r1, #44	; 0x2c
 800f0b2:	fb01 f303 	mul.w	r3, r1, r3
 800f0b6:	4413      	add	r3, r2
 800f0b8:	33dc      	adds	r3, #220	; 0xdc
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800f0c0:	4b59      	ldr	r3, [pc, #356]	; (800f228 <ProcessRadioRxDone+0x5d0>)
 800f0c2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f0c6:	2b02      	cmp	r3, #2
 800f0c8:	d10e      	bne.n	800f0e8 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f0ca:	4b56      	ldr	r3, [pc, #344]	; (800f224 <ProcessRadioRxDone+0x5cc>)
 800f0cc:	2203      	movs	r2, #3
 800f0ce:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
                    }
                    break;
 800f0d2:	e009      	b.n	800f0e8 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f0d4:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f0d8:	3301      	adds	r3, #1
 800f0da:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800f0de:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d0b1      	beq.n	800f04a <ProcessRadioRxDone+0x3f2>
 800f0e6:	e000      	b.n	800f0ea <ProcessRadioRxDone+0x492>
                    break;
 800f0e8:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f0ea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	d117      	bne.n	800f122 <ProcessRadioRxDone+0x4ca>
 800f0f2:	78bb      	ldrb	r3, [r7, #2]
 800f0f4:	2b03      	cmp	r3, #3
 800f0f6:	d10d      	bne.n	800f114 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f0f8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f0fc:	f003 0320 	and.w	r3, r3, #32
 800f100:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f102:	2b00      	cmp	r3, #0
 800f104:	d106      	bne.n	800f114 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800f106:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f10e:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f110:	2b00      	cmp	r3, #0
 800f112:	d006      	beq.n	800f122 <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f114:	4b43      	ldr	r3, [pc, #268]	; (800f224 <ProcessRadioRxDone+0x5cc>)
 800f116:	2201      	movs	r2, #1
 800f118:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800f11c:	f7ff fd76 	bl	800ec0c <PrepareRxDoneAbort>
                return;
 800f120:	e1e1      	b.n	800f4e6 <ProcessRadioRxDone+0x88e>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800f122:	2315      	movs	r3, #21
 800f124:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f128:	4b3f      	ldr	r3, [pc, #252]	; (800f228 <ProcessRadioRxDone+0x5d0>)
 800f12a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f12e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800f132:	4611      	mov	r1, r2
 800f134:	4618      	mov	r0, r3
 800f136:	f006 f90d 	bl	8015354 <RegionGetPhyParam>
 800f13a:	4603      	mov	r3, r0
 800f13c:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800f13e:	78b9      	ldrb	r1, [r7, #2]
 800f140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f142:	b29b      	uxth	r3, r3
 800f144:	4d38      	ldr	r5, [pc, #224]	; (800f228 <ProcessRadioRxDone+0x5d0>)
 800f146:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800f14a:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800f14e:	1d3a      	adds	r2, r7, #4
 800f150:	9202      	str	r2, [sp, #8]
 800f152:	1cfa      	adds	r2, r7, #3
 800f154:	9201      	str	r2, [sp, #4]
 800f156:	9300      	str	r3, [sp, #0]
 800f158:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800f15c:	4622      	mov	r2, r4
 800f15e:	f000 fe8f 	bl	800fe80 <GetFCntDown>
 800f162:	4603      	mov	r3, r0
 800f164:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f168:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d035      	beq.n	800f1dc <ProcessRadioRxDone+0x584>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800f170:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f174:	2b07      	cmp	r3, #7
 800f176:	d119      	bne.n	800f1ac <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800f178:	4b2a      	ldr	r3, [pc, #168]	; (800f224 <ProcessRadioRxDone+0x5cc>)
 800f17a:	2208      	movs	r2, #8
 800f17c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800f180:	4b29      	ldr	r3, [pc, #164]	; (800f228 <ProcessRadioRxDone+0x5d0>)
 800f182:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800f186:	2b00      	cmp	r3, #0
 800f188:	d11d      	bne.n	800f1c6 <ProcessRadioRxDone+0x56e>
 800f18a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800f18e:	f023 031f 	bic.w	r3, r3, #31
 800f192:	b2db      	uxtb	r3, r3
 800f194:	2ba0      	cmp	r3, #160	; 0xa0
 800f196:	d116      	bne.n	800f1c6 <ProcessRadioRxDone+0x56e>
 800f198:	4b23      	ldr	r3, [pc, #140]	; (800f228 <ProcessRadioRxDone+0x5d0>)
 800f19a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f19c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d111      	bne.n	800f1c6 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800f1a2:	4b21      	ldr	r3, [pc, #132]	; (800f228 <ProcessRadioRxDone+0x5d0>)
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800f1aa:	e00c      	b.n	800f1c6 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800f1ac:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f1b0:	2b08      	cmp	r3, #8
 800f1b2:	d104      	bne.n	800f1be <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800f1b4:	4b1b      	ldr	r3, [pc, #108]	; (800f224 <ProcessRadioRxDone+0x5cc>)
 800f1b6:	220a      	movs	r2, #10
 800f1b8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800f1bc:	e003      	b.n	800f1c6 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f1be:	4b19      	ldr	r3, [pc, #100]	; (800f224 <ProcessRadioRxDone+0x5cc>)
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4a16      	ldr	r2, [pc, #88]	; (800f224 <ProcessRadioRxDone+0x5cc>)
 800f1ca:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	4a14      	ldr	r2, [pc, #80]	; (800f224 <ProcessRadioRxDone+0x5cc>)
 800f1d2:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
                PrepareRxDoneAbort( );
 800f1d6:	f7ff fd19 	bl	800ec0c <PrepareRxDoneAbort>
                return;
 800f1da:	e184      	b.n	800f4e6 <ProcessRadioRxDone+0x88e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800f1dc:	78fa      	ldrb	r2, [r7, #3]
 800f1de:	6879      	ldr	r1, [r7, #4]
 800f1e0:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800f1e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f1e8:	9300      	str	r3, [sp, #0]
 800f1ea:	460b      	mov	r3, r1
 800f1ec:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f1f0:	f005 fc80 	bl	8014af4 <LoRaMacCryptoUnsecureMessage>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f1fa:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d016      	beq.n	800f230 <ProcessRadioRxDone+0x5d8>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800f202:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f206:	2b02      	cmp	r3, #2
 800f208:	d104      	bne.n	800f214 <ProcessRadioRxDone+0x5bc>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800f20a:	4b06      	ldr	r3, [pc, #24]	; (800f224 <ProcessRadioRxDone+0x5cc>)
 800f20c:	220b      	movs	r2, #11
 800f20e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800f212:	e003      	b.n	800f21c <ProcessRadioRxDone+0x5c4>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800f214:	4b03      	ldr	r3, [pc, #12]	; (800f224 <ProcessRadioRxDone+0x5cc>)
 800f216:	220c      	movs	r2, #12
 800f218:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800f21c:	f7ff fcf6 	bl	800ec0c <PrepareRxDoneAbort>
                return;
 800f220:	e161      	b.n	800f4e6 <ProcessRadioRxDone+0x88e>
 800f222:	bf00      	nop
 800f224:	20000c28 	.word	0x20000c28
 800f228:	20001134 	.word	0x20001134
 800f22c:	20000e60 	.word	0x20000e60
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f230:	4bae      	ldr	r3, [pc, #696]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f232:	2200      	movs	r2, #0
 800f234:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800f238:	4aac      	ldr	r2, [pc, #688]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f23a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800f23e:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800f242:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f246:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f24a:	b2db      	uxtb	r3, r3
 800f24c:	461a      	mov	r2, r3
 800f24e:	4ba7      	ldr	r3, [pc, #668]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f250:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800f254:	4ba5      	ldr	r3, [pc, #660]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f256:	2200      	movs	r2, #0
 800f258:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800f25c:	4ba3      	ldr	r3, [pc, #652]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f25e:	2200      	movs	r2, #0
 800f260:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	4aa1      	ldr	r2, [pc, #644]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f268:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	4a9f      	ldr	r2, [pc, #636]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f270:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f274:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f278:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f27c:	b2db      	uxtb	r3, r3
 800f27e:	2b00      	cmp	r3, #0
 800f280:	bf14      	ite	ne
 800f282:	2301      	movne	r3, #1
 800f284:	2300      	moveq	r3, #0
 800f286:	b2da      	uxtb	r2, r3
 800f288:	4b98      	ldr	r3, [pc, #608]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f28a:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f28e:	4b97      	ldr	r3, [pc, #604]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f290:	2200      	movs	r2, #0
 800f292:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f296:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f29a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f29e:	b2db      	uxtb	r3, r3
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	bf14      	ite	ne
 800f2a4:	2301      	movne	r3, #1
 800f2a6:	2300      	moveq	r3, #0
 800f2a8:	b2da      	uxtb	r2, r3
 800f2aa:	4b90      	ldr	r3, [pc, #576]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f2ac:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f2b0:	4b8e      	ldr	r3, [pc, #568]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f2b2:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d004      	beq.n	800f2c4 <ProcessRadioRxDone+0x66c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800f2ba:	4b8c      	ldr	r3, [pc, #560]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f2bc:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d102      	bne.n	800f2ca <ProcessRadioRxDone+0x672>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800f2c4:	4b8a      	ldr	r3, [pc, #552]	; (800f4f0 <ProcessRadioRxDone+0x898>)
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800f2ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800f2ce:	2b01      	cmp	r3, #1
 800f2d0:	d104      	bne.n	800f2dc <ProcessRadioRxDone+0x684>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800f2d2:	4b86      	ldr	r3, [pc, #536]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f2d4:	2202      	movs	r2, #2
 800f2d6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800f2da:	e01f      	b.n	800f31c <ProcessRadioRxDone+0x6c4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800f2dc:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800f2e0:	f023 031f 	bic.w	r3, r3, #31
 800f2e4:	b2db      	uxtb	r3, r3
 800f2e6:	2ba0      	cmp	r3, #160	; 0xa0
 800f2e8:	d110      	bne.n	800f30c <ProcessRadioRxDone+0x6b4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800f2ea:	4b81      	ldr	r3, [pc, #516]	; (800f4f0 <ProcessRadioRxDone+0x898>)
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800f2f2:	4b7f      	ldr	r3, [pc, #508]	; (800f4f0 <ProcessRadioRxDone+0x898>)
 800f2f4:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d102      	bne.n	800f302 <ProcessRadioRxDone+0x6aa>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800f2fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2fe:	4a7c      	ldr	r2, [pc, #496]	; (800f4f0 <ProcessRadioRxDone+0x898>)
 800f300:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f302:	4b7a      	ldr	r3, [pc, #488]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f304:	2201      	movs	r2, #1
 800f306:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800f30a:	e007      	b.n	800f31c <ProcessRadioRxDone+0x6c4>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800f30c:	4b78      	ldr	r3, [pc, #480]	; (800f4f0 <ProcessRadioRxDone+0x898>)
 800f30e:	2200      	movs	r2, #0
 800f310:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f314:	4b75      	ldr	r3, [pc, #468]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f316:	2200      	movs	r2, #0
 800f318:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800f31c:	4b73      	ldr	r3, [pc, #460]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f31e:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800f322:	4a72      	ldr	r2, [pc, #456]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f324:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800f328:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800f32c:	4618      	mov	r0, r3
 800f32e:	f001 fee9 	bl	8011104 <RemoveMacCommands>

            switch( fType )
 800f332:	78bb      	ldrb	r3, [r7, #2]
 800f334:	2b03      	cmp	r3, #3
 800f336:	d874      	bhi.n	800f422 <ProcessRadioRxDone+0x7ca>
 800f338:	a201      	add	r2, pc, #4	; (adr r2, 800f340 <ProcessRadioRxDone+0x6e8>)
 800f33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f33e:	bf00      	nop
 800f340:	0800f351 	.word	0x0800f351
 800f344:	0800f3a1 	.word	0x0800f3a1
 800f348:	0800f3d7 	.word	0x0800f3d7
 800f34c:	0800f3fd 	.word	0x0800f3fd
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f350:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f354:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	461c      	mov	r4, r3
 800f35c:	4b63      	ldr	r3, [pc, #396]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f35e:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800f362:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800f366:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f36a:	f102 0010 	add.w	r0, r2, #16
 800f36e:	9300      	str	r3, [sp, #0]
 800f370:	460b      	mov	r3, r1
 800f372:	4622      	mov	r2, r4
 800f374:	2100      	movs	r1, #0
 800f376:	f000 fee5 	bl	8010144 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f37a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f37e:	4b5b      	ldr	r3, [pc, #364]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f380:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f386:	4a59      	ldr	r2, [pc, #356]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f388:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f38c:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800f390:	4b56      	ldr	r3, [pc, #344]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f392:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800f396:	4b55      	ldr	r3, [pc, #340]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f398:	2201      	movs	r2, #1
 800f39a:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800f39e:	e047      	b.n	800f430 <ProcessRadioRxDone+0x7d8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f3a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f3a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f3a8:	b2db      	uxtb	r3, r3
 800f3aa:	461c      	mov	r4, r3
 800f3ac:	4b4f      	ldr	r3, [pc, #316]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f3ae:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800f3b2:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800f3b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f3ba:	f102 0010 	add.w	r0, r2, #16
 800f3be:	9300      	str	r3, [sp, #0]
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	4622      	mov	r2, r4
 800f3c4:	2100      	movs	r1, #0
 800f3c6:	f000 febd 	bl	8010144 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f3ca:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f3ce:	4b47      	ldr	r3, [pc, #284]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f3d0:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800f3d4:	e02c      	b.n	800f430 <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800f3d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f3d8:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800f3dc:	4b43      	ldr	r3, [pc, #268]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f3de:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800f3e2:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800f3e6:	9300      	str	r3, [sp, #0]
 800f3e8:	460b      	mov	r3, r1
 800f3ea:	2100      	movs	r1, #0
 800f3ec:	f000 feaa 	bl	8010144 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f3f0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f3f4:	4b3d      	ldr	r3, [pc, #244]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f3f6:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800f3fa:	e019      	b.n	800f430 <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f3fc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f400:	4b3a      	ldr	r3, [pc, #232]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f402:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f408:	4a38      	ldr	r2, [pc, #224]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f40a:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f40e:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800f412:	4b36      	ldr	r3, [pc, #216]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f414:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800f418:	4b34      	ldr	r3, [pc, #208]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f41a:	2201      	movs	r2, #1
 800f41c:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800f420:	e006      	b.n	800f430 <ProcessRadioRxDone+0x7d8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f422:	4b32      	ldr	r3, [pc, #200]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f424:	2201      	movs	r2, #1
 800f426:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800f42a:	f7ff fbef 	bl	800ec0c <PrepareRxDoneAbort>
                    break;
 800f42e:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f430:	4a2e      	ldr	r2, [pc, #184]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f432:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800f436:	f043 0302 	orr.w	r3, r3, #2
 800f43a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

            break;
 800f43e:	e033      	b.n	800f4a8 <ProcessRadioRxDone+0x850>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800f440:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f444:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f446:	18d1      	adds	r1, r2, r3
 800f448:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f44c:	b29b      	uxth	r3, r3
 800f44e:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800f452:	1ad3      	subs	r3, r2, r3
 800f454:	b29b      	uxth	r3, r3
 800f456:	461a      	mov	r2, r3
 800f458:	4826      	ldr	r0, [pc, #152]	; (800f4f4 <ProcessRadioRxDone+0x89c>)
 800f45a:	f008 fa8e 	bl	801797a <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800f45e:	4b23      	ldr	r3, [pc, #140]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f460:	2203      	movs	r2, #3
 800f462:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f466:	4b21      	ldr	r3, [pc, #132]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f468:	2200      	movs	r2, #0
 800f46a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800f46e:	4b1f      	ldr	r3, [pc, #124]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f470:	4a20      	ldr	r2, [pc, #128]	; (800f4f4 <ProcessRadioRxDone+0x89c>)
 800f472:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800f476:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f47a:	b2da      	uxtb	r2, r3
 800f47c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f480:	1ad3      	subs	r3, r2, r3
 800f482:	b2da      	uxtb	r2, r3
 800f484:	4b19      	ldr	r3, [pc, #100]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f486:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f48a:	4a18      	ldr	r2, [pc, #96]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f48c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800f490:	f043 0302 	orr.w	r3, r3, #2
 800f494:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800f498:	e006      	b.n	800f4a8 <ProcessRadioRxDone+0x850>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f49a:	4b14      	ldr	r3, [pc, #80]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f49c:	2201      	movs	r2, #1
 800f49e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800f4a2:	f7ff fbb3 	bl	800ec0c <PrepareRxDoneAbort>
            break;
 800f4a6:	bf00      	nop
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800f4a8:	4b10      	ldr	r3, [pc, #64]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f4aa:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d008      	beq.n	800f4c4 <ProcessRadioRxDone+0x86c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800f4b2:	4b0e      	ldr	r3, [pc, #56]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f4b4:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d00b      	beq.n	800f4d4 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800f4bc:	2000      	movs	r0, #0
 800f4be:	f000 fca9 	bl	800fe14 <OnAckTimeoutTimerEvent>
 800f4c2:	e007      	b.n	800f4d4 <ProcessRadioRxDone+0x87c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800f4c4:	4b0a      	ldr	r3, [pc, #40]	; (800f4f0 <ProcessRadioRxDone+0x898>)
 800f4c6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f4ca:	2b02      	cmp	r3, #2
 800f4cc:	d102      	bne.n	800f4d4 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800f4ce:	2000      	movs	r0, #0
 800f4d0:	f000 fca0 	bl	800fe14 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f4d4:	4a05      	ldr	r2, [pc, #20]	; (800f4ec <ProcessRadioRxDone+0x894>)
 800f4d6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800f4da:	f043 0320 	orr.w	r3, r3, #32
 800f4de:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800f4e2:	f7ff fae1 	bl	800eaa8 <UpdateRxSlotIdleState>
}
 800f4e6:	3788      	adds	r7, #136	; 0x88
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bdb0      	pop	{r4, r5, r7, pc}
 800f4ec:	20000c28 	.word	0x20000c28
 800f4f0:	20001134 	.word	0x20001134
 800f4f4:	20000e60 	.word	0x20000e60

0800f4f8 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f4fc:	4b11      	ldr	r3, [pc, #68]	; (800f544 <ProcessRadioTxTimeout+0x4c>)
 800f4fe:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f502:	2b02      	cmp	r3, #2
 800f504:	d002      	beq.n	800f50c <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800f506:	4b10      	ldr	r3, [pc, #64]	; (800f548 <ProcessRadioTxTimeout+0x50>)
 800f508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f50a:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800f50c:	f7ff facc 	bl	800eaa8 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f510:	4b0e      	ldr	r3, [pc, #56]	; (800f54c <ProcessRadioTxTimeout+0x54>)
 800f512:	2202      	movs	r2, #2
 800f514:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f518:	2002      	movs	r0, #2
 800f51a:	f004 fc63 	bl	8013de4 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f51e:	4b0b      	ldr	r3, [pc, #44]	; (800f54c <ProcessRadioTxTimeout+0x54>)
 800f520:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f524:	2b00      	cmp	r3, #0
 800f526:	d003      	beq.n	800f530 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 800f528:	4b08      	ldr	r3, [pc, #32]	; (800f54c <ProcessRadioTxTimeout+0x54>)
 800f52a:	2201      	movs	r2, #1
 800f52c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f530:	4a06      	ldr	r2, [pc, #24]	; (800f54c <ProcessRadioTxTimeout+0x54>)
 800f532:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800f536:	f043 0320 	orr.w	r3, r3, #32
 800f53a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
}
 800f53e:	bf00      	nop
 800f540:	bd80      	pop	{r7, pc}
 800f542:	bf00      	nop
 800f544:	20001134 	.word	0x20001134
 800f548:	0801d0b0 	.word	0x0801d0b0
 800f54c:	20000c28 	.word	0x20000c28

0800f550 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b084      	sub	sp, #16
 800f554:	af00      	add	r7, sp, #0
 800f556:	4603      	mov	r3, r0
 800f558:	460a      	mov	r2, r1
 800f55a:	71fb      	strb	r3, [r7, #7]
 800f55c:	4613      	mov	r3, r2
 800f55e:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800f560:	2300      	movs	r3, #0
 800f562:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f564:	4b40      	ldr	r3, [pc, #256]	; (800f668 <HandleRadioRxErrorTimeout+0x118>)
 800f566:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f56a:	2b02      	cmp	r3, #2
 800f56c:	d002      	beq.n	800f574 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800f56e:	4b3f      	ldr	r3, [pc, #252]	; (800f66c <HandleRadioRxErrorTimeout+0x11c>)
 800f570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f572:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f574:	f003 ff97 	bl	80134a6 <LoRaMacClassBIsBeaconExpected>
 800f578:	4603      	mov	r3, r0
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d007      	beq.n	800f58e <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f57e:	2002      	movs	r0, #2
 800f580:	f003 ff45 	bl	801340e <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f584:	2000      	movs	r0, #0
 800f586:	f003 ff67 	bl	8013458 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f58a:	2301      	movs	r3, #1
 800f58c:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f58e:	4b36      	ldr	r3, [pc, #216]	; (800f668 <HandleRadioRxErrorTimeout+0x118>)
 800f590:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f594:	2b01      	cmp	r3, #1
 800f596:	d119      	bne.n	800f5cc <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f598:	f003 ff8c 	bl	80134b4 <LoRaMacClassBIsPingExpected>
 800f59c:	4603      	mov	r3, r0
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d007      	beq.n	800f5b2 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f5a2:	2000      	movs	r0, #0
 800f5a4:	f003 ff3d 	bl	8013422 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f5a8:	2000      	movs	r0, #0
 800f5aa:	f003 ff5e 	bl	801346a <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f5b2:	f003 ff86 	bl	80134c2 <LoRaMacClassBIsMulticastExpected>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d007      	beq.n	800f5cc <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f5bc:	2000      	movs	r0, #0
 800f5be:	f003 ff3a 	bl	8013436 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f5c2:	2000      	movs	r0, #0
 800f5c4:	f003 ff5a 	bl	801347c <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800f5cc:	7bfb      	ldrb	r3, [r7, #15]
 800f5ce:	f083 0301 	eor.w	r3, r3, #1
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d040      	beq.n	800f65a <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f5d8:	4b25      	ldr	r3, [pc, #148]	; (800f670 <HandleRadioRxErrorTimeout+0x120>)
 800f5da:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d122      	bne.n	800f628 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800f5e2:	4b23      	ldr	r3, [pc, #140]	; (800f670 <HandleRadioRxErrorTimeout+0x120>)
 800f5e4:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d003      	beq.n	800f5f4 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f5ec:	4a20      	ldr	r2, [pc, #128]	; (800f670 <HandleRadioRxErrorTimeout+0x120>)
 800f5ee:	79fb      	ldrb	r3, [r7, #7]
 800f5f0:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f5f4:	79fb      	ldrb	r3, [r7, #7]
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f004 fbf4 	bl	8013de4 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f5fc:	4b1a      	ldr	r3, [pc, #104]	; (800f668 <HandleRadioRxErrorTimeout+0x118>)
 800f5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f600:	4618      	mov	r0, r3
 800f602:	f00c fc31 	bl	801be68 <UTIL_TIMER_GetElapsedTime>
 800f606:	4602      	mov	r2, r0
 800f608:	4b19      	ldr	r3, [pc, #100]	; (800f670 <HandleRadioRxErrorTimeout+0x120>)
 800f60a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800f60e:	429a      	cmp	r2, r3
 800f610:	d323      	bcc.n	800f65a <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f612:	4818      	ldr	r0, [pc, #96]	; (800f674 <HandleRadioRxErrorTimeout+0x124>)
 800f614:	f00c fafc 	bl	801bc10 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f618:	4a15      	ldr	r2, [pc, #84]	; (800f670 <HandleRadioRxErrorTimeout+0x120>)
 800f61a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800f61e:	f043 0320 	orr.w	r3, r3, #32
 800f622:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 800f626:	e018      	b.n	800f65a <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800f628:	4b11      	ldr	r3, [pc, #68]	; (800f670 <HandleRadioRxErrorTimeout+0x120>)
 800f62a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d003      	beq.n	800f63a <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f632:	4a0f      	ldr	r2, [pc, #60]	; (800f670 <HandleRadioRxErrorTimeout+0x120>)
 800f634:	79bb      	ldrb	r3, [r7, #6]
 800f636:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f63a:	79bb      	ldrb	r3, [r7, #6]
 800f63c:	4618      	mov	r0, r3
 800f63e:	f004 fbd1 	bl	8013de4 <LoRaMacConfirmQueueSetStatusCmn>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f642:	4b09      	ldr	r3, [pc, #36]	; (800f668 <HandleRadioRxErrorTimeout+0x118>)
 800f644:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f648:	2b02      	cmp	r3, #2
 800f64a:	d006      	beq.n	800f65a <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f64c:	4a08      	ldr	r2, [pc, #32]	; (800f670 <HandleRadioRxErrorTimeout+0x120>)
 800f64e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800f652:	f043 0320 	orr.w	r3, r3, #32
 800f656:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800f65a:	f7ff fa25 	bl	800eaa8 <UpdateRxSlotIdleState>
}
 800f65e:	bf00      	nop
 800f660:	3710      	adds	r7, #16
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}
 800f666:	bf00      	nop
 800f668:	20001134 	.word	0x20001134
 800f66c:	0801d0b0 	.word	0x0801d0b0
 800f670:	20000c28 	.word	0x20000c28
 800f674:	20000fc0 	.word	0x20000fc0

0800f678 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f67c:	2106      	movs	r1, #6
 800f67e:	2005      	movs	r0, #5
 800f680:	f7ff ff66 	bl	800f550 <HandleRadioRxErrorTimeout>
}
 800f684:	bf00      	nop
 800f686:	bd80      	pop	{r7, pc}

0800f688 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800f68c:	2104      	movs	r1, #4
 800f68e:	2003      	movs	r0, #3
 800f690:	f7ff ff5e 	bl	800f550 <HandleRadioRxErrorTimeout>
}
 800f694:	bf00      	nop
 800f696:	bd80      	pop	{r7, pc}

0800f698 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b084      	sub	sp, #16
 800f69c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f69e:	f3ef 8310 	mrs	r3, PRIMASK
 800f6a2:	607b      	str	r3, [r7, #4]
  return(result);
 800f6a4:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800f6a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f6a8:	b672      	cpsid	i
}
 800f6aa:	bf00      	nop
    events = LoRaMacRadioEvents;
 800f6ac:	4b1d      	ldr	r3, [pc, #116]	; (800f724 <LoRaMacHandleIrqEvents+0x8c>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800f6b2:	4b1c      	ldr	r3, [pc, #112]	; (800f724 <LoRaMacHandleIrqEvents+0x8c>)
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	601a      	str	r2, [r3, #0]
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	f383 8810 	msr	PRIMASK, r3
}
 800f6c2:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d027      	beq.n	800f71a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800f6ca:	783b      	ldrb	r3, [r7, #0]
 800f6cc:	f003 0310 	and.w	r3, r3, #16
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d001      	beq.n	800f6da <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800f6d6:	f7ff f9ff 	bl	800ead8 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800f6da:	783b      	ldrb	r3, [r7, #0]
 800f6dc:	f003 0308 	and.w	r3, r3, #8
 800f6e0:	b2db      	uxtb	r3, r3
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d001      	beq.n	800f6ea <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800f6e6:	f7ff fab7 	bl	800ec58 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800f6ea:	783b      	ldrb	r3, [r7, #0]
 800f6ec:	f003 0304 	and.w	r3, r3, #4
 800f6f0:	b2db      	uxtb	r3, r3
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d001      	beq.n	800f6fa <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800f6f6:	f7ff feff 	bl	800f4f8 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800f6fa:	783b      	ldrb	r3, [r7, #0]
 800f6fc:	f003 0302 	and.w	r3, r3, #2
 800f700:	b2db      	uxtb	r3, r3
 800f702:	2b00      	cmp	r3, #0
 800f704:	d001      	beq.n	800f70a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800f706:	f7ff ffb7 	bl	800f678 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800f70a:	783b      	ldrb	r3, [r7, #0]
 800f70c:	f003 0301 	and.w	r3, r3, #1
 800f710:	b2db      	uxtb	r3, r3
 800f712:	2b00      	cmp	r3, #0
 800f714:	d001      	beq.n	800f71a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800f716:	f7ff ffb7 	bl	800f688 <ProcessRadioRxTimeout>
        }
    }
}
 800f71a:	bf00      	nop
 800f71c:	3710      	adds	r7, #16
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}
 800f722:	bf00      	nop
 800f724:	20001f84 	.word	0x20001f84

0800f728 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800f728:	b480      	push	{r7}
 800f72a:	af00      	add	r7, sp, #0
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f72c:	4b08      	ldr	r3, [pc, #32]	; (800f750 <LoRaMacIsBusy+0x28>)
 800f72e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f732:	2b00      	cmp	r3, #0
 800f734:	d106      	bne.n	800f744 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800f736:	4b06      	ldr	r3, [pc, #24]	; (800f750 <LoRaMacIsBusy+0x28>)
 800f738:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	d101      	bne.n	800f744 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800f740:	2300      	movs	r3, #0
 800f742:	e000      	b.n	800f746 <LoRaMacIsBusy+0x1e>
    }
    return true;
 800f744:	2301      	movs	r3, #1
}
 800f746:	4618      	mov	r0, r3
 800f748:	46bd      	mov	sp, r7
 800f74a:	bc80      	pop	{r7}
 800f74c:	4770      	bx	lr
 800f74e:	bf00      	nop
 800f750:	20000c28 	.word	0x20000c28

0800f754 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800f754:	b480      	push	{r7}
 800f756:	b083      	sub	sp, #12
 800f758:	af00      	add	r7, sp, #0
 800f75a:	4603      	mov	r3, r0
 800f75c:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800f75e:	4a04      	ldr	r2, [pc, #16]	; (800f770 <LoRaMacEnableRequests+0x1c>)
 800f760:	79fb      	ldrb	r3, [r7, #7]
 800f762:	f882 3486 	strb.w	r3, [r2, #1158]	; 0x486
}
 800f766:	bf00      	nop
 800f768:	370c      	adds	r7, #12
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bc80      	pop	{r7}
 800f76e:	4770      	bx	lr
 800f770:	20000c28 	.word	0x20000c28

0800f774 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b082      	sub	sp, #8
 800f778:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800f77a:	4b2c      	ldr	r3, [pc, #176]	; (800f82c <LoRaMacHandleRequestEvents+0xb8>)
 800f77c:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800f780:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800f782:	4b2a      	ldr	r3, [pc, #168]	; (800f82c <LoRaMacHandleRequestEvents+0xb8>)
 800f784:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d14a      	bne.n	800f822 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f78c:	4b27      	ldr	r3, [pc, #156]	; (800f82c <LoRaMacHandleRequestEvents+0xb8>)
 800f78e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800f792:	f003 0301 	and.w	r3, r3, #1
 800f796:	b2db      	uxtb	r3, r3
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d006      	beq.n	800f7aa <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f79c:	4a23      	ldr	r2, [pc, #140]	; (800f82c <LoRaMacHandleRequestEvents+0xb8>)
 800f79e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800f7a2:	f36f 0300 	bfc	r3, #0, #1
 800f7a6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f7aa:	4b20      	ldr	r3, [pc, #128]	; (800f82c <LoRaMacHandleRequestEvents+0xb8>)
 800f7ac:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800f7b0:	f003 0304 	and.w	r3, r3, #4
 800f7b4:	b2db      	uxtb	r3, r3
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d006      	beq.n	800f7c8 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f7ba:	4a1c      	ldr	r2, [pc, #112]	; (800f82c <LoRaMacHandleRequestEvents+0xb8>)
 800f7bc:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800f7c0:	f36f 0382 	bfc	r3, #2, #1
 800f7c4:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f7c8:	2001      	movs	r0, #1
 800f7ca:	f7ff ffc3 	bl	800f754 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800f7ce:	793b      	ldrb	r3, [r7, #4]
 800f7d0:	f003 0301 	and.w	r3, r3, #1
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d005      	beq.n	800f7e6 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f7da:	4b14      	ldr	r3, [pc, #80]	; (800f82c <LoRaMacHandleRequestEvents+0xb8>)
 800f7dc:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	4813      	ldr	r0, [pc, #76]	; (800f830 <LoRaMacHandleRequestEvents+0xbc>)
 800f7e4:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800f7e6:	793b      	ldrb	r3, [r7, #4]
 800f7e8:	f003 0304 	and.w	r3, r3, #4
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00e      	beq.n	800f810 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f7f2:	4810      	ldr	r0, [pc, #64]	; (800f834 <LoRaMacHandleRequestEvents+0xc0>)
 800f7f4:	f004 fb44 	bl	8013e80 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f7f8:	f004 fb8e 	bl	8013f18 <LoRaMacConfirmQueueGetCnt>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d006      	beq.n	800f810 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f802:	4a0a      	ldr	r2, [pc, #40]	; (800f82c <LoRaMacHandleRequestEvents+0xb8>)
 800f804:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800f808:	f043 0304 	orr.w	r3, r3, #4
 800f80c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800f810:	f003 fe75 	bl	80134fe <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f814:	4a05      	ldr	r2, [pc, #20]	; (800f82c <LoRaMacHandleRequestEvents+0xb8>)
 800f816:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800f81a:	f36f 1345 	bfc	r3, #5, #1
 800f81e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
}
 800f822:	bf00      	nop
 800f824:	3708      	adds	r7, #8
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	20000c28 	.word	0x20000c28
 800f830:	20001060 	.word	0x20001060
 800f834:	20001074 	.word	0x20001074

0800f838 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800f83e:	4b07      	ldr	r3, [pc, #28]	; (800f85c <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800f840:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f844:	2b00      	cmp	r3, #0
 800f846:	d105      	bne.n	800f854 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800f848:	2300      	movs	r3, #0
 800f84a:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800f84c:	1dfb      	adds	r3, r7, #7
 800f84e:	4618      	mov	r0, r3
 800f850:	f004 f8fc 	bl	8013a4c <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800f854:	bf00      	nop
 800f856:	3708      	adds	r7, #8
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	20000c28 	.word	0x20000c28

0800f860 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800f860:	b580      	push	{r7, lr}
 800f862:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800f864:	4b16      	ldr	r3, [pc, #88]	; (800f8c0 <LoRaMacHandleIndicationEvents+0x60>)
 800f866:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800f86a:	f003 0308 	and.w	r3, r3, #8
 800f86e:	b2db      	uxtb	r3, r3
 800f870:	2b00      	cmp	r3, #0
 800f872:	d00d      	beq.n	800f890 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800f874:	4a12      	ldr	r2, [pc, #72]	; (800f8c0 <LoRaMacHandleIndicationEvents+0x60>)
 800f876:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800f87a:	f36f 03c3 	bfc	r3, #3, #1
 800f87e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800f882:	4b0f      	ldr	r3, [pc, #60]	; (800f8c0 <LoRaMacHandleIndicationEvents+0x60>)
 800f884:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f888:	68db      	ldr	r3, [r3, #12]
 800f88a:	490e      	ldr	r1, [pc, #56]	; (800f8c4 <LoRaMacHandleIndicationEvents+0x64>)
 800f88c:	480e      	ldr	r0, [pc, #56]	; (800f8c8 <LoRaMacHandleIndicationEvents+0x68>)
 800f88e:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f890:	4b0b      	ldr	r3, [pc, #44]	; (800f8c0 <LoRaMacHandleIndicationEvents+0x60>)
 800f892:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800f896:	f003 0302 	and.w	r3, r3, #2
 800f89a:	b2db      	uxtb	r3, r3
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d00d      	beq.n	800f8bc <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800f8a0:	4a07      	ldr	r2, [pc, #28]	; (800f8c0 <LoRaMacHandleIndicationEvents+0x60>)
 800f8a2:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800f8a6:	f36f 0341 	bfc	r3, #1, #1
 800f8aa:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800f8ae:	4b04      	ldr	r3, [pc, #16]	; (800f8c0 <LoRaMacHandleIndicationEvents+0x60>)
 800f8b0:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	4903      	ldr	r1, [pc, #12]	; (800f8c4 <LoRaMacHandleIndicationEvents+0x64>)
 800f8b8:	4804      	ldr	r0, [pc, #16]	; (800f8cc <LoRaMacHandleIndicationEvents+0x6c>)
 800f8ba:	4798      	blx	r3
    }
}
 800f8bc:	bf00      	nop
 800f8be:	bd80      	pop	{r7, pc}
 800f8c0:	20000c28 	.word	0x20000c28
 800f8c4:	200010a8 	.word	0x200010a8
 800f8c8:	20001088 	.word	0x20001088
 800f8cc:	20001044 	.word	0x20001044

0800f8d0 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b082      	sub	sp, #8
 800f8d4:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f8d6:	4b32      	ldr	r3, [pc, #200]	; (800f9a0 <LoRaMacHandleMcpsRequest+0xd0>)
 800f8d8:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800f8dc:	f003 0301 	and.w	r3, r3, #1
 800f8e0:	b2db      	uxtb	r3, r3
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d058      	beq.n	800f998 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f8ee:	4b2c      	ldr	r3, [pc, #176]	; (800f9a0 <LoRaMacHandleMcpsRequest+0xd0>)
 800f8f0:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d004      	beq.n	800f902 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800f8f8:	4b29      	ldr	r3, [pc, #164]	; (800f9a0 <LoRaMacHandleMcpsRequest+0xd0>)
 800f8fa:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f8fe:	2b03      	cmp	r3, #3
 800f900:	d104      	bne.n	800f90c <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f902:	f002 f87b 	bl	80119fc <CheckRetransUnconfirmedUplink>
 800f906:	4603      	mov	r3, r0
 800f908:	71fb      	strb	r3, [r7, #7]
 800f90a:	e020      	b.n	800f94e <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f90c:	4b24      	ldr	r3, [pc, #144]	; (800f9a0 <LoRaMacHandleMcpsRequest+0xd0>)
 800f90e:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800f912:	2b01      	cmp	r3, #1
 800f914:	d11b      	bne.n	800f94e <LoRaMacHandleMcpsRequest+0x7e>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 800f916:	4b22      	ldr	r3, [pc, #136]	; (800f9a0 <LoRaMacHandleMcpsRequest+0xd0>)
 800f918:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d014      	beq.n	800f94a <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f920:	f002 f898 	bl	8011a54 <CheckRetransConfirmedUplink>
 800f924:	4603      	mov	r3, r0
 800f926:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800f928:	4b1e      	ldr	r3, [pc, #120]	; (800f9a4 <LoRaMacHandleMcpsRequest+0xd4>)
 800f92a:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d10d      	bne.n	800f94e <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800f932:	79fb      	ldrb	r3, [r7, #7]
 800f934:	f083 0301 	eor.w	r3, r3, #1
 800f938:	b2db      	uxtb	r3, r3
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d002      	beq.n	800f944 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800f93e:	f002 f905 	bl	8011b4c <AckTimeoutRetriesProcess>
 800f942:	e004      	b.n	800f94e <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800f944:	f002 f940 	bl	8011bc8 <AckTimeoutRetriesFinalize>
 800f948:	e001      	b.n	800f94e <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800f94a:	2301      	movs	r3, #1
 800f94c:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800f94e:	79fb      	ldrb	r3, [r7, #7]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d00d      	beq.n	800f970 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800f954:	4814      	ldr	r0, [pc, #80]	; (800f9a8 <LoRaMacHandleMcpsRequest+0xd8>)
 800f956:	f00c f95b 	bl	801bc10 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f95a:	4b11      	ldr	r3, [pc, #68]	; (800f9a0 <LoRaMacHandleMcpsRequest+0xd0>)
 800f95c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f960:	f023 0320 	bic.w	r3, r3, #32
 800f964:	4a0e      	ldr	r2, [pc, #56]	; (800f9a0 <LoRaMacHandleMcpsRequest+0xd0>)
 800f966:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800f96a:	f002 f895 	bl	8011a98 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800f96e:	e013      	b.n	800f998 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800f970:	79bb      	ldrb	r3, [r7, #6]
 800f972:	f083 0301 	eor.w	r3, r3, #1
 800f976:	b2db      	uxtb	r3, r3
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d00d      	beq.n	800f998 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f97c:	4a08      	ldr	r2, [pc, #32]	; (800f9a0 <LoRaMacHandleMcpsRequest+0xd0>)
 800f97e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800f982:	f36f 1345 	bfc	r3, #5, #1
 800f986:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 800f98a:	4b05      	ldr	r3, [pc, #20]	; (800f9a0 <LoRaMacHandleMcpsRequest+0xd0>)
 800f98c:	2200      	movs	r2, #0
 800f98e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800f992:	2000      	movs	r0, #0
 800f994:	f000 f994 	bl	800fcc0 <OnTxDelayedTimerEvent>
}
 800f998:	bf00      	nop
 800f99a:	3708      	adds	r7, #8
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	20000c28 	.word	0x20000c28
 800f9a4:	20001134 	.word	0x20001134
 800f9a8:	20000f90 	.word	0x20000f90

0800f9ac <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f9b0:	4b1b      	ldr	r3, [pc, #108]	; (800fa20 <LoRaMacHandleMlmeRequest+0x74>)
 800f9b2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800f9b6:	f003 0304 	and.w	r3, r3, #4
 800f9ba:	b2db      	uxtb	r3, r3
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d02c      	beq.n	800fa1a <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f9c0:	2001      	movs	r0, #1
 800f9c2:	f004 fa43 	bl	8013e4c <LoRaMacConfirmQueueIsCmdActive>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d012      	beq.n	800f9f2 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f9cc:	2001      	movs	r0, #1
 800f9ce:	f004 f9df 	bl	8013d90 <LoRaMacConfirmQueueGetStatus>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d103      	bne.n	800f9e0 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f9d8:	4b11      	ldr	r3, [pc, #68]	; (800fa20 <LoRaMacHandleMlmeRequest+0x74>)
 800f9da:	2200      	movs	r2, #0
 800f9dc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f9e0:	4b0f      	ldr	r3, [pc, #60]	; (800fa20 <LoRaMacHandleMlmeRequest+0x74>)
 800f9e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f9e6:	f023 0302 	bic.w	r3, r3, #2
 800f9ea:	4a0d      	ldr	r2, [pc, #52]	; (800fa20 <LoRaMacHandleMlmeRequest+0x74>)
 800f9ec:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800f9f0:	e013      	b.n	800fa1a <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800f9f2:	2005      	movs	r0, #5
 800f9f4:	f004 fa2a 	bl	8013e4c <LoRaMacConfirmQueueIsCmdActive>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d105      	bne.n	800fa0a <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800f9fe:	2006      	movs	r0, #6
 800fa00:	f004 fa24 	bl	8013e4c <LoRaMacConfirmQueueIsCmdActive>
 800fa04:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d007      	beq.n	800fa1a <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fa0a:	4b05      	ldr	r3, [pc, #20]	; (800fa20 <LoRaMacHandleMlmeRequest+0x74>)
 800fa0c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fa10:	f023 0302 	bic.w	r3, r3, #2
 800fa14:	4a02      	ldr	r2, [pc, #8]	; (800fa20 <LoRaMacHandleMlmeRequest+0x74>)
 800fa16:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800fa1a:	bf00      	nop
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	20000c28 	.word	0x20000c28

0800fa24 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800fa28:	200c      	movs	r0, #12
 800fa2a:	f004 fa0f 	bl	8013e4c <LoRaMacConfirmQueueIsCmdActive>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d019      	beq.n	800fa68 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800fa34:	4b0e      	ldr	r3, [pc, #56]	; (800fa70 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800fa36:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800fa3a:	f003 0301 	and.w	r3, r3, #1
 800fa3e:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d111      	bne.n	800fa68 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800fa44:	4b0a      	ldr	r3, [pc, #40]	; (800fa70 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800fa46:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800fa4a:	f003 0304 	and.w	r3, r3, #4
 800fa4e:	b2db      	uxtb	r3, r3
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d009      	beq.n	800fa68 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fa54:	4b06      	ldr	r3, [pc, #24]	; (800fa70 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800fa56:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fa5a:	f023 0302 	bic.w	r3, r3, #2
 800fa5e:	4a04      	ldr	r2, [pc, #16]	; (800fa70 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800fa60:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800fa64:	2301      	movs	r3, #1
 800fa66:	e000      	b.n	800fa6a <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800fa68:	2300      	movs	r3, #0
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	20000c28 	.word	0x20000c28

0800fa74 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800fa74:	b480      	push	{r7}
 800fa76:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800fa78:	4b0d      	ldr	r3, [pc, #52]	; (800fab0 <LoRaMacCheckForRxAbort+0x3c>)
 800fa7a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fa7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d00f      	beq.n	800faa6 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800fa86:	4b0a      	ldr	r3, [pc, #40]	; (800fab0 <LoRaMacCheckForRxAbort+0x3c>)
 800fa88:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fa8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa90:	4a07      	ldr	r2, [pc, #28]	; (800fab0 <LoRaMacCheckForRxAbort+0x3c>)
 800fa92:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fa96:	4b06      	ldr	r3, [pc, #24]	; (800fab0 <LoRaMacCheckForRxAbort+0x3c>)
 800fa98:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fa9c:	f023 0302 	bic.w	r3, r3, #2
 800faa0:	4a03      	ldr	r2, [pc, #12]	; (800fab0 <LoRaMacCheckForRxAbort+0x3c>)
 800faa2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800faa6:	bf00      	nop
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bc80      	pop	{r7}
 800faac:	4770      	bx	lr
 800faae:	bf00      	nop
 800fab0:	20000c28 	.word	0x20000c28

0800fab4 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b084      	sub	sp, #16
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800fabc:	2300      	movs	r3, #0
 800fabe:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800fac0:	2300      	movs	r3, #0
 800fac2:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800fac4:	4b50      	ldr	r3, [pc, #320]	; (800fc08 <LoRaMacHandleNvm+0x154>)
 800fac6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800faca:	2b00      	cmp	r3, #0
 800facc:	f040 8098 	bne.w	800fc00 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2124      	movs	r1, #36	; 0x24
 800fad4:	4618      	mov	r0, r3
 800fad6:	f007 ffa5 	bl	8017a24 <Crc32>
 800fada:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fae0:	68ba      	ldr	r2, [r7, #8]
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d006      	beq.n	800faf4 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	68ba      	ldr	r2, [r7, #8]
 800faea:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800faec:	89fb      	ldrh	r3, [r7, #14]
 800faee:	f043 0301 	orr.w	r3, r3, #1
 800faf2:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	3328      	adds	r3, #40	; 0x28
 800faf8:	2114      	movs	r1, #20
 800fafa:	4618      	mov	r0, r3
 800fafc:	f007 ff92 	bl	8017a24 <Crc32>
 800fb00:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb06:	68ba      	ldr	r2, [r7, #8]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d006      	beq.n	800fb1a <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	68ba      	ldr	r2, [r7, #8]
 800fb10:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800fb12:	89fb      	ldrh	r3, [r7, #14]
 800fb14:	f043 0302 	orr.w	r3, r3, #2
 800fb18:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	3340      	adds	r3, #64	; 0x40
 800fb1e:	21dc      	movs	r1, #220	; 0xdc
 800fb20:	4618      	mov	r0, r3
 800fb22:	f007 ff7f 	bl	8017a24 <Crc32>
 800fb26:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800fb2e:	68ba      	ldr	r2, [r7, #8]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d007      	beq.n	800fb44 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	68ba      	ldr	r2, [r7, #8]
 800fb38:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800fb3c:	89fb      	ldrh	r3, [r7, #14]
 800fb3e:	f043 0304 	orr.w	r3, r3, #4
 800fb42:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800fb4a:	21bc      	movs	r1, #188	; 0xbc
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f007 ff69 	bl	8017a24 <Crc32>
 800fb52:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800fb5a:	68ba      	ldr	r2, [r7, #8]
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d007      	beq.n	800fb70 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	68ba      	ldr	r2, [r7, #8]
 800fb64:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800fb68:	89fb      	ldrh	r3, [r7, #14]
 800fb6a:	f043 0308 	orr.w	r3, r3, #8
 800fb6e:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800fb76:	2190      	movs	r1, #144	; 0x90
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f007 ff53 	bl	8017a24 <Crc32>
 800fb7e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800fb86:	68ba      	ldr	r2, [r7, #8]
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	d007      	beq.n	800fb9c <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	68ba      	ldr	r2, [r7, #8]
 800fb90:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800fb94:	89fb      	ldrh	r3, [r7, #14]
 800fb96:	f043 0310 	orr.w	r3, r3, #16
 800fb9a:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f503 731d 	add.w	r3, r3, #628	; 0x274
 800fba2:	f44f 6193 	mov.w	r1, #1176	; 0x498
 800fba6:	4618      	mov	r0, r3
 800fba8:	f007 ff3c 	bl	8017a24 <Crc32>
 800fbac:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 800fbb4:	68ba      	ldr	r2, [r7, #8]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d007      	beq.n	800fbca <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	68ba      	ldr	r2, [r7, #8]
 800fbbe:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800fbc2:	89fb      	ldrh	r3, [r7, #14]
 800fbc4:	f043 0320 	orr.w	r3, r3, #32
 800fbc8:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 800fbd0:	2114      	movs	r1, #20
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f007 ff26 	bl	8017a24 <Crc32>
 800fbd8:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 800fbe0:	68ba      	ldr	r2, [r7, #8]
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d007      	beq.n	800fbf6 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	68ba      	ldr	r2, [r7, #8]
 800fbea:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800fbee:	89fb      	ldrh	r3, [r7, #14]
 800fbf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbf4:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800fbf6:	89fb      	ldrh	r3, [r7, #14]
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f001 ff89 	bl	8011b10 <CallNvmDataChangeCallback>
 800fbfe:	e000      	b.n	800fc02 <LoRaMacHandleNvm+0x14e>
        return;
 800fc00:	bf00      	nop
}
 800fc02:	3710      	adds	r7, #16
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}
 800fc08:	20000c28 	.word	0x20000c28

0800fc0c <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800fc12:	2300      	movs	r3, #0
 800fc14:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800fc16:	f7ff fd3f 	bl	800f698 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800fc1a:	f003 fcd4 	bl	80135c6 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800fc1e:	4b26      	ldr	r3, [pc, #152]	; (800fcb8 <LoRaMacProcess+0xac>)
 800fc20:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800fc24:	f003 0320 	and.w	r3, r3, #32
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d025      	beq.n	800fc7a <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800fc2e:	2000      	movs	r0, #0
 800fc30:	f7ff fd90 	bl	800f754 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800fc34:	f7ff ff1e 	bl	800fa74 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800fc38:	f001 fffa 	bl	8011c30 <IsRequestPending>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d006      	beq.n	800fc50 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800fc42:	f7ff feef 	bl	800fa24 <LoRaMacCheckForBeaconAcquisition>
 800fc46:	4603      	mov	r3, r0
 800fc48:	461a      	mov	r2, r3
 800fc4a:	79fb      	ldrb	r3, [r7, #7]
 800fc4c:	4313      	orrs	r3, r2
 800fc4e:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800fc50:	79fb      	ldrb	r3, [r7, #7]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d103      	bne.n	800fc5e <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800fc56:	f7ff fea9 	bl	800f9ac <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800fc5a:	f7ff fe39 	bl	800f8d0 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800fc5e:	f7ff fd89 	bl	800f774 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800fc62:	f7ff fde9 	bl	800f838 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800fc66:	2001      	movs	r0, #1
 800fc68:	f7ff fd74 	bl	800f754 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800fc6c:	4a12      	ldr	r2, [pc, #72]	; (800fcb8 <LoRaMacProcess+0xac>)
 800fc6e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800fc72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc76:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    LoRaMacHandleIndicationEvents( );
 800fc7a:	f7ff fdf1 	bl	800f860 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800fc7e:	4b0e      	ldr	r3, [pc, #56]	; (800fcb8 <LoRaMacProcess+0xac>)
 800fc80:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800fc84:	2b02      	cmp	r3, #2
 800fc86:	d101      	bne.n	800fc8c <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800fc88:	f001 fb7e 	bl	8011388 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800fc8c:	4b0a      	ldr	r3, [pc, #40]	; (800fcb8 <LoRaMacProcess+0xac>)
 800fc8e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800fc92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc96:	b2db      	uxtb	r3, r3
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d009      	beq.n	800fcb0 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800fc9c:	4a06      	ldr	r2, [pc, #24]	; (800fcb8 <LoRaMacProcess+0xac>)
 800fc9e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800fca2:	f36f 1386 	bfc	r3, #6, #1
 800fca6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        LoRaMacHandleNvm( &Nvm );
 800fcaa:	4804      	ldr	r0, [pc, #16]	; (800fcbc <LoRaMacProcess+0xb0>)
 800fcac:	f7ff ff02 	bl	800fab4 <LoRaMacHandleNvm>
    }
}
 800fcb0:	bf00      	nop
 800fcb2:	3708      	adds	r7, #8
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	20000c28 	.word	0x20000c28
 800fcbc:	20001134 	.word	0x20001134

0800fcc0 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b082      	sub	sp, #8
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800fcc8:	4817      	ldr	r0, [pc, #92]	; (800fd28 <OnTxDelayedTimerEvent+0x68>)
 800fcca:	f00b ffa1 	bl	801bc10 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800fcce:	4b17      	ldr	r3, [pc, #92]	; (800fd2c <OnTxDelayedTimerEvent+0x6c>)
 800fcd0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fcd4:	f023 0320 	bic.w	r3, r3, #32
 800fcd8:	4a14      	ldr	r2, [pc, #80]	; (800fd2c <OnTxDelayedTimerEvent+0x6c>)
 800fcda:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800fcde:	2001      	movs	r0, #1
 800fce0:	f001 f8e6 	bl	8010eb0 <ScheduleTx>
 800fce4:	4603      	mov	r3, r0
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d018      	beq.n	800fd1c <OnTxDelayedTimerEvent+0x5c>
 800fcea:	2b0b      	cmp	r3, #11
 800fcec:	d016      	beq.n	800fd1c <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fcee:	4b10      	ldr	r3, [pc, #64]	; (800fd30 <OnTxDelayedTimerEvent+0x70>)
 800fcf0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fcf4:	b2da      	uxtb	r2, r3
 800fcf6:	4b0d      	ldr	r3, [pc, #52]	; (800fd2c <OnTxDelayedTimerEvent+0x6c>)
 800fcf8:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800fcfc:	4b0b      	ldr	r3, [pc, #44]	; (800fd2c <OnTxDelayedTimerEvent+0x6c>)
 800fcfe:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800fd02:	4b0a      	ldr	r3, [pc, #40]	; (800fd2c <OnTxDelayedTimerEvent+0x6c>)
 800fd04:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800fd08:	4b08      	ldr	r3, [pc, #32]	; (800fd2c <OnTxDelayedTimerEvent+0x6c>)
 800fd0a:	2209      	movs	r2, #9
 800fd0c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800fd10:	2009      	movs	r0, #9
 800fd12:	f004 f867 	bl	8013de4 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800fd16:	f001 febf 	bl	8011a98 <StopRetransmission>
            break;
 800fd1a:	e000      	b.n	800fd1e <OnTxDelayedTimerEvent+0x5e>
            break;
 800fd1c:	bf00      	nop
        }
    }
}
 800fd1e:	bf00      	nop
 800fd20:	3708      	adds	r7, #8
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}
 800fd26:	bf00      	nop
 800fd28:	20000f90 	.word	0x20000f90
 800fd2c:	20000c28 	.word	0x20000c28
 800fd30:	20001134 	.word	0x20001134

0800fd34 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800fd3c:	4b14      	ldr	r3, [pc, #80]	; (800fd90 <OnRxWindow1TimerEvent+0x5c>)
 800fd3e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800fd42:	4b13      	ldr	r3, [pc, #76]	; (800fd90 <OnRxWindow1TimerEvent+0x5c>)
 800fd44:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800fd48:	4b12      	ldr	r3, [pc, #72]	; (800fd94 <OnRxWindow1TimerEvent+0x60>)
 800fd4a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800fd4e:	b25a      	sxtb	r2, r3
 800fd50:	4b0f      	ldr	r3, [pc, #60]	; (800fd90 <OnRxWindow1TimerEvent+0x5c>)
 800fd52:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fd56:	4b0f      	ldr	r3, [pc, #60]	; (800fd94 <OnRxWindow1TimerEvent+0x60>)
 800fd58:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fd5c:	4b0c      	ldr	r3, [pc, #48]	; (800fd90 <OnRxWindow1TimerEvent+0x5c>)
 800fd5e:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fd62:	4b0c      	ldr	r3, [pc, #48]	; (800fd94 <OnRxWindow1TimerEvent+0x60>)
 800fd64:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fd68:	4b09      	ldr	r3, [pc, #36]	; (800fd90 <OnRxWindow1TimerEvent+0x5c>)
 800fd6a:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800fd6e:	4b08      	ldr	r3, [pc, #32]	; (800fd90 <OnRxWindow1TimerEvent+0x5c>)
 800fd70:	2200      	movs	r2, #0
 800fd72:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800fd76:	4b06      	ldr	r3, [pc, #24]	; (800fd90 <OnRxWindow1TimerEvent+0x5c>)
 800fd78:	2200      	movs	r2, #0
 800fd7a:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800fd7e:	4906      	ldr	r1, [pc, #24]	; (800fd98 <OnRxWindow1TimerEvent+0x64>)
 800fd80:	4806      	ldr	r0, [pc, #24]	; (800fd9c <OnRxWindow1TimerEvent+0x68>)
 800fd82:	f001 facd 	bl	8011320 <RxWindowSetup>
}
 800fd86:	bf00      	nop
 800fd88:	3708      	adds	r7, #8
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
 800fd8e:	bf00      	nop
 800fd90:	20000c28 	.word	0x20000c28
 800fd94:	20001134 	.word	0x20001134
 800fd98:	20000fe0 	.word	0x20000fe0
 800fd9c:	20000fa8 	.word	0x20000fa8

0800fda0 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fda8:	4b16      	ldr	r3, [pc, #88]	; (800fe04 <OnRxWindow2TimerEvent+0x64>)
 800fdaa:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d023      	beq.n	800fdfa <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fdb2:	4b14      	ldr	r3, [pc, #80]	; (800fe04 <OnRxWindow2TimerEvent+0x64>)
 800fdb4:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800fdb8:	4b12      	ldr	r3, [pc, #72]	; (800fe04 <OnRxWindow2TimerEvent+0x64>)
 800fdba:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800fdbe:	4b12      	ldr	r3, [pc, #72]	; (800fe08 <OnRxWindow2TimerEvent+0x68>)
 800fdc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fdc2:	4a10      	ldr	r2, [pc, #64]	; (800fe04 <OnRxWindow2TimerEvent+0x64>)
 800fdc4:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fdc8:	4b0f      	ldr	r3, [pc, #60]	; (800fe08 <OnRxWindow2TimerEvent+0x68>)
 800fdca:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fdce:	4b0d      	ldr	r3, [pc, #52]	; (800fe04 <OnRxWindow2TimerEvent+0x64>)
 800fdd0:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fdd4:	4b0c      	ldr	r3, [pc, #48]	; (800fe08 <OnRxWindow2TimerEvent+0x68>)
 800fdd6:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fdda:	4b0a      	ldr	r3, [pc, #40]	; (800fe04 <OnRxWindow2TimerEvent+0x64>)
 800fddc:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fde0:	4b08      	ldr	r3, [pc, #32]	; (800fe04 <OnRxWindow2TimerEvent+0x64>)
 800fde2:	2200      	movs	r2, #0
 800fde4:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fde8:	4b06      	ldr	r3, [pc, #24]	; (800fe04 <OnRxWindow2TimerEvent+0x64>)
 800fdea:	2201      	movs	r2, #1
 800fdec:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800fdf0:	4906      	ldr	r1, [pc, #24]	; (800fe0c <OnRxWindow2TimerEvent+0x6c>)
 800fdf2:	4807      	ldr	r0, [pc, #28]	; (800fe10 <OnRxWindow2TimerEvent+0x70>)
 800fdf4:	f001 fa94 	bl	8011320 <RxWindowSetup>
 800fdf8:	e000      	b.n	800fdfc <OnRxWindow2TimerEvent+0x5c>
        return;
 800fdfa:	bf00      	nop
}
 800fdfc:	3708      	adds	r7, #8
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	bf00      	nop
 800fe04:	20000c28 	.word	0x20000c28
 800fe08:	20001134 	.word	0x20001134
 800fe0c:	20000ff4 	.word	0x20000ff4
 800fe10:	20000fc0 	.word	0x20000fc0

0800fe14 <OnAckTimeoutTimerEvent>:
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b082      	sub	sp, #8
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800fe1c:	4815      	ldr	r0, [pc, #84]	; (800fe74 <OnAckTimeoutTimerEvent+0x60>)
 800fe1e:	f00b fef7 	bl	801bc10 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800fe22:	4b15      	ldr	r3, [pc, #84]	; (800fe78 <OnAckTimeoutTimerEvent+0x64>)
 800fe24:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d003      	beq.n	800fe34 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800fe2c:	4b12      	ldr	r3, [pc, #72]	; (800fe78 <OnAckTimeoutTimerEvent+0x64>)
 800fe2e:	2201      	movs	r2, #1
 800fe30:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800fe34:	4b11      	ldr	r3, [pc, #68]	; (800fe7c <OnAckTimeoutTimerEvent+0x68>)
 800fe36:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fe3a:	2b02      	cmp	r3, #2
 800fe3c:	d106      	bne.n	800fe4c <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800fe3e:	4a0e      	ldr	r2, [pc, #56]	; (800fe78 <OnAckTimeoutTimerEvent+0x64>)
 800fe40:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800fe44:	f043 0320 	orr.w	r3, r3, #32
 800fe48:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800fe4c:	4b0a      	ldr	r3, [pc, #40]	; (800fe78 <OnAckTimeoutTimerEvent+0x64>)
 800fe4e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d00a      	beq.n	800fe6c <OnAckTimeoutTimerEvent+0x58>
 800fe56:	4b08      	ldr	r3, [pc, #32]	; (800fe78 <OnAckTimeoutTimerEvent+0x64>)
 800fe58:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fe5c:	691b      	ldr	r3, [r3, #16]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d004      	beq.n	800fe6c <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800fe62:	4b05      	ldr	r3, [pc, #20]	; (800fe78 <OnAckTimeoutTimerEvent+0x64>)
 800fe64:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fe68:	691b      	ldr	r3, [r3, #16]
 800fe6a:	4798      	blx	r3
    }
}
 800fe6c:	bf00      	nop
 800fe6e:	3708      	adds	r7, #8
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}
 800fe74:	20001020 	.word	0x20001020
 800fe78:	20000c28 	.word	0x20000c28
 800fe7c:	20001134 	.word	0x20001134

0800fe80 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b084      	sub	sp, #16
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	60ba      	str	r2, [r7, #8]
 800fe88:	607b      	str	r3, [r7, #4]
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	73fb      	strb	r3, [r7, #15]
 800fe8e:	460b      	mov	r3, r1
 800fe90:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d005      	beq.n	800fea4 <GetFCntDown+0x24>
 800fe98:	69fb      	ldr	r3, [r7, #28]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d002      	beq.n	800fea4 <GetFCntDown+0x24>
 800fe9e:	6a3b      	ldr	r3, [r7, #32]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d101      	bne.n	800fea8 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fea4:	230a      	movs	r3, #10
 800fea6:	e029      	b.n	800fefc <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800fea8:	7bfb      	ldrb	r3, [r7, #15]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d016      	beq.n	800fedc <GetFCntDown+0x5c>
 800feae:	2b01      	cmp	r3, #1
 800feb0:	d118      	bne.n	800fee4 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800feb2:	79bb      	ldrb	r3, [r7, #6]
 800feb4:	2b01      	cmp	r3, #1
 800feb6:	d10d      	bne.n	800fed4 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800feb8:	7bbb      	ldrb	r3, [r7, #14]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d002      	beq.n	800fec4 <GetFCntDown+0x44>
 800febe:	7bbb      	ldrb	r3, [r7, #14]
 800fec0:	2b03      	cmp	r3, #3
 800fec2:	d103      	bne.n	800fecc <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800fec4:	69fb      	ldr	r3, [r7, #28]
 800fec6:	2202      	movs	r2, #2
 800fec8:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800feca:	e00d      	b.n	800fee8 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800fecc:	69fb      	ldr	r3, [r7, #28]
 800fece:	2201      	movs	r2, #1
 800fed0:	701a      	strb	r2, [r3, #0]
            break;
 800fed2:	e009      	b.n	800fee8 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800fed4:	69fb      	ldr	r3, [r7, #28]
 800fed6:	2203      	movs	r2, #3
 800fed8:	701a      	strb	r2, [r3, #0]
            break;
 800feda:	e005      	b.n	800fee8 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800fedc:	69fb      	ldr	r3, [r7, #28]
 800fede:	2204      	movs	r2, #4
 800fee0:	701a      	strb	r2, [r3, #0]
            break;
 800fee2:	e001      	b.n	800fee8 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800fee4:	2305      	movs	r3, #5
 800fee6:	e009      	b.n	800fefc <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800fee8:	69fb      	ldr	r3, [r7, #28]
 800feea:	7818      	ldrb	r0, [r3, #0]
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	89db      	ldrh	r3, [r3, #14]
 800fef0:	461a      	mov	r2, r3
 800fef2:	8b39      	ldrh	r1, [r7, #24]
 800fef4:	6a3b      	ldr	r3, [r7, #32]
 800fef6:	f004 fb9f 	bl	8014638 <LoRaMacCryptoGetFCntDown>
 800fefa:	4603      	mov	r3, r0
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	3710      	adds	r7, #16
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}

0800ff04 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800ff04:	b5b0      	push	{r4, r5, r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ff0e:	2303      	movs	r3, #3
 800ff10:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800ff12:	4b61      	ldr	r3, [pc, #388]	; (8010098 <SwitchClass+0x194>)
 800ff14:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ff18:	2b02      	cmp	r3, #2
 800ff1a:	f000 80a5 	beq.w	8010068 <SwitchClass+0x164>
 800ff1e:	2b02      	cmp	r3, #2
 800ff20:	f300 80b4 	bgt.w	801008c <SwitchClass+0x188>
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d003      	beq.n	800ff30 <SwitchClass+0x2c>
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	f000 808f 	beq.w	801004c <SwitchClass+0x148>
 800ff2e:	e0ad      	b.n	801008c <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800ff30:	79fb      	ldrb	r3, [r7, #7]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d107      	bne.n	800ff46 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ff36:	4b58      	ldr	r3, [pc, #352]	; (8010098 <SwitchClass+0x194>)
 800ff38:	4a57      	ldr	r2, [pc, #348]	; (8010098 <SwitchClass+0x194>)
 800ff3a:	336c      	adds	r3, #108	; 0x6c
 800ff3c:	3264      	adds	r2, #100	; 0x64
 800ff3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff42:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800ff46:	79fb      	ldrb	r3, [r7, #7]
 800ff48:	2b01      	cmp	r3, #1
 800ff4a:	d10c      	bne.n	800ff66 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ff4c:	79fb      	ldrb	r3, [r7, #7]
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f003 fadb 	bl	801350a <LoRaMacClassBSwitchClass>
 800ff54:	4603      	mov	r3, r0
 800ff56:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800ff58:	7bfb      	ldrb	r3, [r7, #15]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d103      	bne.n	800ff66 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ff5e:	4a4e      	ldr	r2, [pc, #312]	; (8010098 <SwitchClass+0x194>)
 800ff60:	79fb      	ldrb	r3, [r7, #7]
 800ff62:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800ff66:	79fb      	ldrb	r3, [r7, #7]
 800ff68:	2b02      	cmp	r3, #2
 800ff6a:	f040 808a 	bne.w	8010082 <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ff6e:	4a4a      	ldr	r2, [pc, #296]	; (8010098 <SwitchClass+0x194>)
 800ff70:	79fb      	ldrb	r3, [r7, #7]
 800ff72:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ff76:	4a49      	ldr	r2, [pc, #292]	; (801009c <SwitchClass+0x198>)
 800ff78:	4b48      	ldr	r3, [pc, #288]	; (801009c <SwitchClass+0x198>)
 800ff7a:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800ff7e:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800ff82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff86:	682b      	ldr	r3, [r5, #0]
 800ff88:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ff8a:	4b44      	ldr	r3, [pc, #272]	; (801009c <SwitchClass+0x198>)
 800ff8c:	2202      	movs	r2, #2
 800ff8e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ff92:	2300      	movs	r3, #0
 800ff94:	73bb      	strb	r3, [r7, #14]
 800ff96:	e049      	b.n	801002c <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800ff98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff9c:	4a3e      	ldr	r2, [pc, #248]	; (8010098 <SwitchClass+0x194>)
 800ff9e:	212c      	movs	r1, #44	; 0x2c
 800ffa0:	fb01 f303 	mul.w	r3, r1, r3
 800ffa4:	4413      	add	r3, r2
 800ffa6:	33da      	adds	r3, #218	; 0xda
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d038      	beq.n	8010020 <SwitchClass+0x11c>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800ffae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ffb2:	4a39      	ldr	r2, [pc, #228]	; (8010098 <SwitchClass+0x194>)
 800ffb4:	212c      	movs	r1, #44	; 0x2c
 800ffb6:	fb01 f303 	mul.w	r3, r1, r3
 800ffba:	4413      	add	r3, r2
 800ffbc:	33f0      	adds	r3, #240	; 0xf0
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	4a35      	ldr	r2, [pc, #212]	; (8010098 <SwitchClass+0x194>)
 800ffc2:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800ffc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ffc8:	4a33      	ldr	r2, [pc, #204]	; (8010098 <SwitchClass+0x194>)
 800ffca:	212c      	movs	r1, #44	; 0x2c
 800ffcc:	fb01 f303 	mul.w	r3, r1, r3
 800ffd0:	4413      	add	r3, r2
 800ffd2:	33f4      	adds	r3, #244	; 0xf4
 800ffd4:	f993 3000 	ldrsb.w	r3, [r3]
 800ffd8:	b2da      	uxtb	r2, r3
 800ffda:	4b2f      	ldr	r3, [pc, #188]	; (8010098 <SwitchClass+0x194>)
 800ffdc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800ffe0:	4b2e      	ldr	r3, [pc, #184]	; (801009c <SwitchClass+0x198>)
 800ffe2:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ffe6:	4b2d      	ldr	r3, [pc, #180]	; (801009c <SwitchClass+0x198>)
 800ffe8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800ffec:	4b2a      	ldr	r3, [pc, #168]	; (8010098 <SwitchClass+0x194>)
 800ffee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fff0:	4a2a      	ldr	r2, [pc, #168]	; (801009c <SwitchClass+0x198>)
 800fff2:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fff6:	4b28      	ldr	r3, [pc, #160]	; (8010098 <SwitchClass+0x194>)
 800fff8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fffc:	4b27      	ldr	r3, [pc, #156]	; (801009c <SwitchClass+0x198>)
 800fffe:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010002:	4b25      	ldr	r3, [pc, #148]	; (8010098 <SwitchClass+0x194>)
 8010004:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010008:	4b24      	ldr	r3, [pc, #144]	; (801009c <SwitchClass+0x198>)
 801000a:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 801000e:	4b23      	ldr	r3, [pc, #140]	; (801009c <SwitchClass+0x198>)
 8010010:	2203      	movs	r2, #3
 8010012:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010016:	4b21      	ldr	r3, [pc, #132]	; (801009c <SwitchClass+0x198>)
 8010018:	2201      	movs	r2, #1
 801001a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 801001e:	e009      	b.n	8010034 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010024:	b2db      	uxtb	r3, r3
 8010026:	3301      	adds	r3, #1
 8010028:	b2db      	uxtb	r3, r3
 801002a:	73bb      	strb	r3, [r7, #14]
 801002c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010030:	2b00      	cmp	r3, #0
 8010032:	ddb1      	ble.n	800ff98 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010034:	4b19      	ldr	r3, [pc, #100]	; (801009c <SwitchClass+0x198>)
 8010036:	2200      	movs	r2, #0
 8010038:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 801003c:	4b18      	ldr	r3, [pc, #96]	; (80100a0 <SwitchClass+0x19c>)
 801003e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010040:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8010042:	f001 f9a1 	bl	8011388 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 8010046:	2300      	movs	r3, #0
 8010048:	73fb      	strb	r3, [r7, #15]
            }
            break;
 801004a:	e01a      	b.n	8010082 <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 801004c:	79fb      	ldrb	r3, [r7, #7]
 801004e:	4618      	mov	r0, r3
 8010050:	f003 fa5b 	bl	801350a <LoRaMacClassBSwitchClass>
 8010054:	4603      	mov	r3, r0
 8010056:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8010058:	7bfb      	ldrb	r3, [r7, #15]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d113      	bne.n	8010086 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801005e:	4a0e      	ldr	r2, [pc, #56]	; (8010098 <SwitchClass+0x194>)
 8010060:	79fb      	ldrb	r3, [r7, #7]
 8010062:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 8010066:	e00e      	b.n	8010086 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010068:	79fb      	ldrb	r3, [r7, #7]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d10d      	bne.n	801008a <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801006e:	4a0a      	ldr	r2, [pc, #40]	; (8010098 <SwitchClass+0x194>)
 8010070:	79fb      	ldrb	r3, [r7, #7]
 8010072:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8010076:	4b0a      	ldr	r3, [pc, #40]	; (80100a0 <SwitchClass+0x19c>)
 8010078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801007a:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 801007c:	2300      	movs	r3, #0
 801007e:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010080:	e003      	b.n	801008a <SwitchClass+0x186>
            break;
 8010082:	bf00      	nop
 8010084:	e002      	b.n	801008c <SwitchClass+0x188>
            break;
 8010086:	bf00      	nop
 8010088:	e000      	b.n	801008c <SwitchClass+0x188>
            break;
 801008a:	bf00      	nop
        }
    }

    return status;
 801008c:	7bfb      	ldrb	r3, [r7, #15]
}
 801008e:	4618      	mov	r0, r3
 8010090:	3710      	adds	r7, #16
 8010092:	46bd      	mov	sp, r7
 8010094:	bdb0      	pop	{r4, r5, r7, pc}
 8010096:	bf00      	nop
 8010098:	20001134 	.word	0x20001134
 801009c:	20000c28 	.word	0x20000c28
 80100a0:	0801d0b0 	.word	0x0801d0b0

080100a4 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b086      	sub	sp, #24
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	4603      	mov	r3, r0
 80100ac:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80100ae:	4b10      	ldr	r3, [pc, #64]	; (80100f0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80100b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80100b4:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 80100b6:	79fb      	ldrb	r3, [r7, #7]
 80100b8:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80100ba:	230d      	movs	r3, #13
 80100bc:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80100be:	4b0c      	ldr	r3, [pc, #48]	; (80100f0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80100c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d001      	beq.n	80100cc <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80100c8:	230e      	movs	r3, #14
 80100ca:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80100cc:	4b08      	ldr	r3, [pc, #32]	; (80100f0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80100ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80100d2:	f107 0210 	add.w	r2, r7, #16
 80100d6:	4611      	mov	r1, r2
 80100d8:	4618      	mov	r0, r3
 80100da:	f005 f93b 	bl	8015354 <RegionGetPhyParam>
 80100de:	4603      	mov	r3, r0
 80100e0:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	b2db      	uxtb	r3, r3
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	3718      	adds	r7, #24
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}
 80100ee:	bf00      	nop
 80100f0:	20001134 	.word	0x20001134

080100f4 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b084      	sub	sp, #16
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	4603      	mov	r3, r0
 80100fc:	71fb      	strb	r3, [r7, #7]
 80100fe:	460b      	mov	r3, r1
 8010100:	71bb      	strb	r3, [r7, #6]
 8010102:	4613      	mov	r3, r2
 8010104:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8010106:	2300      	movs	r3, #0
 8010108:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 801010a:	2300      	movs	r3, #0
 801010c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801010e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010112:	4618      	mov	r0, r3
 8010114:	f7ff ffc6 	bl	80100a4 <GetMaxAppPayloadWithoutFOptsLength>
 8010118:	4603      	mov	r3, r0
 801011a:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 801011c:	79fb      	ldrb	r3, [r7, #7]
 801011e:	b29a      	uxth	r2, r3
 8010120:	797b      	ldrb	r3, [r7, #5]
 8010122:	b29b      	uxth	r3, r3
 8010124:	4413      	add	r3, r2
 8010126:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8010128:	89ba      	ldrh	r2, [r7, #12]
 801012a:	89fb      	ldrh	r3, [r7, #14]
 801012c:	429a      	cmp	r2, r3
 801012e:	d804      	bhi.n	801013a <ValidatePayloadLength+0x46>
 8010130:	89bb      	ldrh	r3, [r7, #12]
 8010132:	2bff      	cmp	r3, #255	; 0xff
 8010134:	d801      	bhi.n	801013a <ValidatePayloadLength+0x46>
    {
        return true;
 8010136:	2301      	movs	r3, #1
 8010138:	e000      	b.n	801013c <ValidatePayloadLength+0x48>
    }
    return false;
 801013a:	2300      	movs	r3, #0
}
 801013c:	4618      	mov	r0, r3
 801013e:	3710      	adds	r7, #16
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}

08010144 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8010144:	b590      	push	{r4, r7, lr}
 8010146:	b0a5      	sub	sp, #148	; 0x94
 8010148:	af02      	add	r7, sp, #8
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	4608      	mov	r0, r1
 801014e:	4611      	mov	r1, r2
 8010150:	461a      	mov	r2, r3
 8010152:	4603      	mov	r3, r0
 8010154:	70fb      	strb	r3, [r7, #3]
 8010156:	460b      	mov	r3, r1
 8010158:	70bb      	strb	r3, [r7, #2]
 801015a:	4613      	mov	r3, r2
 801015c:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 801015e:	2300      	movs	r3, #0
 8010160:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8010164:	2300      	movs	r3, #0
 8010166:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801016a:	2300      	movs	r3, #0
 801016c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8010170:	f000 bc6d 	b.w	8010a4e <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8010174:	78fb      	ldrb	r3, [r7, #3]
 8010176:	687a      	ldr	r2, [r7, #4]
 8010178:	4413      	add	r3, r2
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	4618      	mov	r0, r3
 801017e:	f003 fc8d 	bl	8013a9c <LoRaMacCommandsGetCmdSize>
 8010182:	4603      	mov	r3, r0
 8010184:	461a      	mov	r2, r3
 8010186:	78fb      	ldrb	r3, [r7, #3]
 8010188:	441a      	add	r2, r3
 801018a:	78bb      	ldrb	r3, [r7, #2]
 801018c:	429a      	cmp	r2, r3
 801018e:	f300 8464 	bgt.w	8010a5a <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8010192:	78fb      	ldrb	r3, [r7, #3]
 8010194:	1c5a      	adds	r2, r3, #1
 8010196:	70fa      	strb	r2, [r7, #3]
 8010198:	461a      	mov	r2, r3
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	4413      	add	r3, r2
 801019e:	781b      	ldrb	r3, [r3, #0]
 80101a0:	3b02      	subs	r3, #2
 80101a2:	2b11      	cmp	r3, #17
 80101a4:	f200 845b 	bhi.w	8010a5e <ProcessMacCommands+0x91a>
 80101a8:	a201      	add	r2, pc, #4	; (adr r2, 80101b0 <ProcessMacCommands+0x6c>)
 80101aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ae:	bf00      	nop
 80101b0:	080101f9 	.word	0x080101f9
 80101b4:	0801023b 	.word	0x0801023b
 80101b8:	08010357 	.word	0x08010357
 80101bc:	08010395 	.word	0x08010395
 80101c0:	08010481 	.word	0x08010481
 80101c4:	080104dd 	.word	0x080104dd
 80101c8:	08010599 	.word	0x08010599
 80101cc:	080105ef 	.word	0x080105ef
 80101d0:	080106d3 	.word	0x080106d3
 80101d4:	08010a5f 	.word	0x08010a5f
 80101d8:	08010a5f 	.word	0x08010a5f
 80101dc:	08010779 	.word	0x08010779
 80101e0:	08010a5f 	.word	0x08010a5f
 80101e4:	08010a5f 	.word	0x08010a5f
 80101e8:	0801088f 	.word	0x0801088f
 80101ec:	080108c3 	.word	0x080108c3
 80101f0:	08010953 	.word	0x08010953
 80101f4:	080109c9 	.word	0x080109c9
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80101f8:	2004      	movs	r0, #4
 80101fa:	f003 fe27 	bl	8013e4c <LoRaMacConfirmQueueIsCmdActive>
 80101fe:	4603      	mov	r3, r0
 8010200:	2b00      	cmp	r3, #0
 8010202:	f000 8424 	beq.w	8010a4e <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8010206:	2104      	movs	r1, #4
 8010208:	2000      	movs	r0, #0
 801020a:	f003 fd93 	bl	8013d34 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 801020e:	78fb      	ldrb	r3, [r7, #3]
 8010210:	1c5a      	adds	r2, r3, #1
 8010212:	70fa      	strb	r2, [r7, #3]
 8010214:	461a      	mov	r2, r3
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	4413      	add	r3, r2
 801021a:	781a      	ldrb	r2, [r3, #0]
 801021c:	4bac      	ldr	r3, [pc, #688]	; (80104d0 <ProcessMacCommands+0x38c>)
 801021e:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8010222:	78fb      	ldrb	r3, [r7, #3]
 8010224:	1c5a      	adds	r2, r3, #1
 8010226:	70fa      	strb	r2, [r7, #3]
 8010228:	461a      	mov	r2, r3
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	4413      	add	r3, r2
 801022e:	781a      	ldrb	r2, [r3, #0]
 8010230:	4ba7      	ldr	r3, [pc, #668]	; (80104d0 <ProcessMacCommands+0x38c>)
 8010232:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 8010236:	f000 bc0a 	b.w	8010a4e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 801023a:	2300      	movs	r3, #0
 801023c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8010240:	2300      	movs	r3, #0
 8010242:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 8010246:	2300      	movs	r3, #0
 8010248:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 801024c:	2300      	movs	r3, #0
 801024e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 8010252:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010256:	f083 0301 	eor.w	r3, r3, #1
 801025a:	b2db      	uxtb	r3, r3
 801025c:	2b00      	cmp	r3, #0
 801025e:	d078      	beq.n	8010352 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 8010260:	2301      	movs	r3, #1
 8010262:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8010266:	78fb      	ldrb	r3, [r7, #3]
 8010268:	3b01      	subs	r3, #1
 801026a:	687a      	ldr	r2, [r7, #4]
 801026c:	4413      	add	r3, r2
 801026e:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8010270:	78ba      	ldrb	r2, [r7, #2]
 8010272:	78fb      	ldrb	r3, [r7, #3]
 8010274:	1ad3      	subs	r3, r2, r3
 8010276:	b2db      	uxtb	r3, r3
 8010278:	3301      	adds	r3, #1
 801027a:	b2db      	uxtb	r3, r3
 801027c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010280:	4b94      	ldr	r3, [pc, #592]	; (80104d4 <ProcessMacCommands+0x390>)
 8010282:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8010286:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801028a:	4b92      	ldr	r3, [pc, #584]	; (80104d4 <ProcessMacCommands+0x390>)
 801028c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010290:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8010294:	4b8f      	ldr	r3, [pc, #572]	; (80104d4 <ProcessMacCommands+0x390>)
 8010296:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801029a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801029e:	4b8d      	ldr	r3, [pc, #564]	; (80104d4 <ProcessMacCommands+0x390>)
 80102a0:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80102a4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80102a8:	4b8a      	ldr	r3, [pc, #552]	; (80104d4 <ProcessMacCommands+0x390>)
 80102aa:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80102ae:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 80102b2:	4b88      	ldr	r3, [pc, #544]	; (80104d4 <ProcessMacCommands+0x390>)
 80102b4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80102b8:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80102ba:	4b86      	ldr	r3, [pc, #536]	; (80104d4 <ProcessMacCommands+0x390>)
 80102bc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80102c0:	f107 0456 	add.w	r4, r7, #86	; 0x56
 80102c4:	f107 0257 	add.w	r2, r7, #87	; 0x57
 80102c8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80102cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80102d0:	9301      	str	r3, [sp, #4]
 80102d2:	f107 0355 	add.w	r3, r7, #85	; 0x55
 80102d6:	9300      	str	r3, [sp, #0]
 80102d8:	4623      	mov	r3, r4
 80102da:	f005 f8f8 	bl	80154ce <RegionLinkAdrReq>
 80102de:	4603      	mov	r3, r0
 80102e0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 80102e4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80102e8:	f003 0307 	and.w	r3, r3, #7
 80102ec:	2b07      	cmp	r3, #7
 80102ee:	d10e      	bne.n	801030e <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80102f0:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 80102f4:	4b77      	ldr	r3, [pc, #476]	; (80104d4 <ProcessMacCommands+0x390>)
 80102f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80102fa:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 80102fe:	4b75      	ldr	r3, [pc, #468]	; (80104d4 <ProcessMacCommands+0x390>)
 8010300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8010304:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8010308:	4b72      	ldr	r3, [pc, #456]	; (80104d4 <ProcessMacCommands+0x390>)
 801030a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801030e:	2300      	movs	r3, #0
 8010310:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8010314:	e00b      	b.n	801032e <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010316:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 801031a:	2201      	movs	r2, #1
 801031c:	4619      	mov	r1, r3
 801031e:	2003      	movs	r0, #3
 8010320:	f003 fa6c 	bl	80137fc <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010324:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8010328:	3301      	adds	r3, #1
 801032a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 801032e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8010332:	4a69      	ldr	r2, [pc, #420]	; (80104d8 <ProcessMacCommands+0x394>)
 8010334:	fba2 2303 	umull	r2, r3, r2, r3
 8010338:	089b      	lsrs	r3, r3, #2
 801033a:	b2db      	uxtb	r3, r3
 801033c:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8010340:	429a      	cmp	r2, r3
 8010342:	d3e8      	bcc.n	8010316 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 8010344:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8010348:	78fb      	ldrb	r3, [r7, #3]
 801034a:	4413      	add	r3, r2
 801034c:	b2db      	uxtb	r3, r3
 801034e:	3b01      	subs	r3, #1
 8010350:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8010352:	bf00      	nop
 8010354:	e37b      	b.n	8010a4e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8010356:	78fb      	ldrb	r3, [r7, #3]
 8010358:	1c5a      	adds	r2, r3, #1
 801035a:	70fa      	strb	r2, [r7, #3]
 801035c:	461a      	mov	r2, r3
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	4413      	add	r3, r2
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	f003 030f 	and.w	r3, r3, #15
 8010368:	b2da      	uxtb	r2, r3
 801036a:	4b5a      	ldr	r3, [pc, #360]	; (80104d4 <ProcessMacCommands+0x390>)
 801036c:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8010370:	4b58      	ldr	r3, [pc, #352]	; (80104d4 <ProcessMacCommands+0x390>)
 8010372:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8010376:	461a      	mov	r2, r3
 8010378:	2301      	movs	r3, #1
 801037a:	4093      	lsls	r3, r2
 801037c:	b29a      	uxth	r2, r3
 801037e:	4b55      	ldr	r3, [pc, #340]	; (80104d4 <ProcessMacCommands+0x390>)
 8010380:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010384:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010388:	2200      	movs	r2, #0
 801038a:	4619      	mov	r1, r3
 801038c:	2004      	movs	r0, #4
 801038e:	f003 fa35 	bl	80137fc <LoRaMacCommandsAddCmd>
                break;
 8010392:	e35c      	b.n	8010a4e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010394:	2307      	movs	r3, #7
 8010396:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 801039a:	78fb      	ldrb	r3, [r7, #3]
 801039c:	687a      	ldr	r2, [r7, #4]
 801039e:	4413      	add	r3, r2
 80103a0:	781b      	ldrb	r3, [r3, #0]
 80103a2:	091b      	lsrs	r3, r3, #4
 80103a4:	b2db      	uxtb	r3, r3
 80103a6:	b25b      	sxtb	r3, r3
 80103a8:	f003 0307 	and.w	r3, r3, #7
 80103ac:	b25b      	sxtb	r3, r3
 80103ae:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80103b2:	78fb      	ldrb	r3, [r7, #3]
 80103b4:	687a      	ldr	r2, [r7, #4]
 80103b6:	4413      	add	r3, r2
 80103b8:	781b      	ldrb	r3, [r3, #0]
 80103ba:	b25b      	sxtb	r3, r3
 80103bc:	f003 030f 	and.w	r3, r3, #15
 80103c0:	b25b      	sxtb	r3, r3
 80103c2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 80103c6:	78fb      	ldrb	r3, [r7, #3]
 80103c8:	3301      	adds	r3, #1
 80103ca:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80103cc:	78fb      	ldrb	r3, [r7, #3]
 80103ce:	1c5a      	adds	r2, r3, #1
 80103d0:	70fa      	strb	r2, [r7, #3]
 80103d2:	461a      	mov	r2, r3
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	4413      	add	r3, r2
 80103d8:	781b      	ldrb	r3, [r3, #0]
 80103da:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80103dc:	78fb      	ldrb	r3, [r7, #3]
 80103de:	1c5a      	adds	r2, r3, #1
 80103e0:	70fa      	strb	r2, [r7, #3]
 80103e2:	461a      	mov	r2, r3
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	4413      	add	r3, r2
 80103e8:	781b      	ldrb	r3, [r3, #0]
 80103ea:	021a      	lsls	r2, r3, #8
 80103ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103ee:	4313      	orrs	r3, r2
 80103f0:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80103f2:	78fb      	ldrb	r3, [r7, #3]
 80103f4:	1c5a      	adds	r2, r3, #1
 80103f6:	70fa      	strb	r2, [r7, #3]
 80103f8:	461a      	mov	r2, r3
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	4413      	add	r3, r2
 80103fe:	781b      	ldrb	r3, [r3, #0]
 8010400:	041a      	lsls	r2, r3, #16
 8010402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010404:	4313      	orrs	r3, r2
 8010406:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8010408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801040a:	2264      	movs	r2, #100	; 0x64
 801040c:	fb02 f303 	mul.w	r3, r2, r3
 8010410:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8010412:	4b30      	ldr	r3, [pc, #192]	; (80104d4 <ProcessMacCommands+0x390>)
 8010414:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010418:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801041c:	4611      	mov	r1, r2
 801041e:	4618      	mov	r0, r3
 8010420:	f005 f86f 	bl	8015502 <RegionRxParamSetupReq>
 8010424:	4603      	mov	r3, r0
 8010426:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 801042a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801042e:	f003 0307 	and.w	r3, r3, #7
 8010432:	2b07      	cmp	r3, #7
 8010434:	d117      	bne.n	8010466 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8010436:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 801043a:	b2da      	uxtb	r2, r3
 801043c:	4b25      	ldr	r3, [pc, #148]	; (80104d4 <ProcessMacCommands+0x390>)
 801043e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8010442:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8010446:	b2da      	uxtb	r2, r3
 8010448:	4b22      	ldr	r3, [pc, #136]	; (80104d4 <ProcessMacCommands+0x390>)
 801044a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 801044e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010450:	4a20      	ldr	r2, [pc, #128]	; (80104d4 <ProcessMacCommands+0x390>)
 8010452:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010456:	4a1f      	ldr	r2, [pc, #124]	; (80104d4 <ProcessMacCommands+0x390>)
 8010458:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 801045a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801045e:	b2da      	uxtb	r2, r3
 8010460:	4b1c      	ldr	r3, [pc, #112]	; (80104d4 <ProcessMacCommands+0x390>)
 8010462:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 8010466:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801046a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 801046e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010472:	2201      	movs	r2, #1
 8010474:	4619      	mov	r1, r3
 8010476:	2005      	movs	r0, #5
 8010478:	f003 f9c0 	bl	80137fc <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 801047c:	bf00      	nop
 801047e:	e2e6      	b.n	8010a4e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010480:	23ff      	movs	r3, #255	; 0xff
 8010482:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8010486:	4b12      	ldr	r3, [pc, #72]	; (80104d0 <ProcessMacCommands+0x38c>)
 8010488:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801048c:	2b00      	cmp	r3, #0
 801048e:	d00d      	beq.n	80104ac <ProcessMacCommands+0x368>
 8010490:	4b0f      	ldr	r3, [pc, #60]	; (80104d0 <ProcessMacCommands+0x38c>)
 8010492:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d007      	beq.n	80104ac <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 801049c:	4b0c      	ldr	r3, [pc, #48]	; (80104d0 <ProcessMacCommands+0x38c>)
 801049e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	4798      	blx	r3
 80104a6:	4603      	mov	r3, r0
 80104a8:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 80104ac:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80104b0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80104b4:	787b      	ldrb	r3, [r7, #1]
 80104b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80104ba:	b2db      	uxtb	r3, r3
 80104bc:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80104c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80104c4:	2202      	movs	r2, #2
 80104c6:	4619      	mov	r1, r3
 80104c8:	2006      	movs	r0, #6
 80104ca:	f003 f997 	bl	80137fc <LoRaMacCommandsAddCmd>
                break;
 80104ce:	e2be      	b.n	8010a4e <ProcessMacCommands+0x90a>
 80104d0:	20000c28 	.word	0x20000c28
 80104d4:	20001134 	.word	0x20001134
 80104d8:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 80104dc:	2303      	movs	r3, #3
 80104de:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 80104e2:	78fb      	ldrb	r3, [r7, #3]
 80104e4:	1c5a      	adds	r2, r3, #1
 80104e6:	70fa      	strb	r2, [r7, #3]
 80104e8:	461a      	mov	r2, r3
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	4413      	add	r3, r2
 80104ee:	781b      	ldrb	r3, [r3, #0]
 80104f0:	b25b      	sxtb	r3, r3
 80104f2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 80104f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80104fa:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80104fc:	78fb      	ldrb	r3, [r7, #3]
 80104fe:	1c5a      	adds	r2, r3, #1
 8010500:	70fa      	strb	r2, [r7, #3]
 8010502:	461a      	mov	r2, r3
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	4413      	add	r3, r2
 8010508:	781b      	ldrb	r3, [r3, #0]
 801050a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801050c:	78fb      	ldrb	r3, [r7, #3]
 801050e:	1c5a      	adds	r2, r3, #1
 8010510:	70fa      	strb	r2, [r7, #3]
 8010512:	461a      	mov	r2, r3
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	4413      	add	r3, r2
 8010518:	781b      	ldrb	r3, [r3, #0]
 801051a:	021a      	lsls	r2, r3, #8
 801051c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801051e:	4313      	orrs	r3, r2
 8010520:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010522:	78fb      	ldrb	r3, [r7, #3]
 8010524:	1c5a      	adds	r2, r3, #1
 8010526:	70fa      	strb	r2, [r7, #3]
 8010528:	461a      	mov	r2, r3
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	4413      	add	r3, r2
 801052e:	781b      	ldrb	r3, [r3, #0]
 8010530:	041a      	lsls	r2, r3, #16
 8010532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010534:	4313      	orrs	r3, r2
 8010536:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8010538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801053a:	2264      	movs	r2, #100	; 0x64
 801053c:	fb02 f303 	mul.w	r3, r2, r3
 8010540:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8010542:	2300      	movs	r3, #0
 8010544:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8010546:	78fb      	ldrb	r3, [r7, #3]
 8010548:	1c5a      	adds	r2, r3, #1
 801054a:	70fa      	strb	r2, [r7, #3]
 801054c:	461a      	mov	r2, r3
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	4413      	add	r3, r2
 8010552:	781b      	ldrb	r3, [r3, #0]
 8010554:	b25b      	sxtb	r3, r3
 8010556:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 801055a:	4b85      	ldr	r3, [pc, #532]	; (8010770 <ProcessMacCommands+0x62c>)
 801055c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010560:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8010564:	4611      	mov	r1, r2
 8010566:	4618      	mov	r0, r3
 8010568:	f004 ffde 	bl	8015528 <RegionNewChannelReq>
 801056c:	4603      	mov	r3, r0
 801056e:	b2db      	uxtb	r3, r3
 8010570:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8010574:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010578:	b25b      	sxtb	r3, r3
 801057a:	2b00      	cmp	r3, #0
 801057c:	db0a      	blt.n	8010594 <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 801057e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010582:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8010586:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801058a:	2201      	movs	r2, #1
 801058c:	4619      	mov	r1, r3
 801058e:	2007      	movs	r0, #7
 8010590:	f003 f934 	bl	80137fc <LoRaMacCommandsAddCmd>
                }
                break;
 8010594:	bf00      	nop
 8010596:	e25a      	b.n	8010a4e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010598:	78fb      	ldrb	r3, [r7, #3]
 801059a:	1c5a      	adds	r2, r3, #1
 801059c:	70fa      	strb	r2, [r7, #3]
 801059e:	461a      	mov	r2, r3
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	4413      	add	r3, r2
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	f003 030f 	and.w	r3, r3, #15
 80105aa:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 80105ae:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d104      	bne.n	80105c0 <ProcessMacCommands+0x47c>
                {
                    delay++;
 80105b6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80105ba:	3301      	adds	r3, #1
 80105bc:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80105c0:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80105c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80105c8:	fb02 f303 	mul.w	r3, r2, r3
 80105cc:	461a      	mov	r2, r3
 80105ce:	4b68      	ldr	r3, [pc, #416]	; (8010770 <ProcessMacCommands+0x62c>)
 80105d0:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80105d2:	4b67      	ldr	r3, [pc, #412]	; (8010770 <ProcessMacCommands+0x62c>)
 80105d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105d6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80105da:	4a65      	ldr	r2, [pc, #404]	; (8010770 <ProcessMacCommands+0x62c>)
 80105dc:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80105de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80105e2:	2200      	movs	r2, #0
 80105e4:	4619      	mov	r1, r3
 80105e6:	2008      	movs	r0, #8
 80105e8:	f003 f908 	bl	80137fc <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 80105ec:	e22f      	b.n	8010a4e <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 80105ee:	78fb      	ldrb	r3, [r7, #3]
 80105f0:	1c5a      	adds	r2, r3, #1
 80105f2:	70fa      	strb	r2, [r7, #3]
 80105f4:	461a      	mov	r2, r3
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	4413      	add	r3, r2
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8010600:	2300      	movs	r3, #0
 8010602:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8010606:	2300      	movs	r3, #0
 8010608:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 801060c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010610:	f003 0320 	and.w	r3, r3, #32
 8010614:	2b00      	cmp	r3, #0
 8010616:	d002      	beq.n	801061e <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8010618:	2301      	movs	r3, #1
 801061a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 801061e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010622:	f003 0310 	and.w	r3, r3, #16
 8010626:	2b00      	cmp	r3, #0
 8010628:	d002      	beq.n	8010630 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 801062a:	2301      	movs	r3, #1
 801062c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8010630:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010634:	f003 030f 	and.w	r3, r3, #15
 8010638:	b2db      	uxtb	r3, r3
 801063a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 801063e:	4b4c      	ldr	r3, [pc, #304]	; (8010770 <ProcessMacCommands+0x62c>)
 8010640:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010644:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010648:	4611      	mov	r1, r2
 801064a:	4618      	mov	r0, r3
 801064c:	f004 ff7f 	bl	801554e <RegionTxParamSetupReq>
 8010650:	4603      	mov	r3, r0
 8010652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010656:	d03a      	beq.n	80106ce <ProcessMacCommands+0x58a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8010658:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 801065c:	4b44      	ldr	r3, [pc, #272]	; (8010770 <ProcessMacCommands+0x62c>)
 801065e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8010662:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8010666:	4b42      	ldr	r3, [pc, #264]	; (8010770 <ProcessMacCommands+0x62c>)
 8010668:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 801066c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010670:	461a      	mov	r2, r3
 8010672:	4b40      	ldr	r3, [pc, #256]	; (8010774 <ProcessMacCommands+0x630>)
 8010674:	5c9b      	ldrb	r3, [r3, r2]
 8010676:	4618      	mov	r0, r3
 8010678:	f7f0 fb0a 	bl	8000c90 <__aeabi_ui2f>
 801067c:	4603      	mov	r3, r0
 801067e:	4a3c      	ldr	r2, [pc, #240]	; (8010770 <ProcessMacCommands+0x62c>)
 8010680:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8010682:	2302      	movs	r3, #2
 8010684:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010688:	4b39      	ldr	r3, [pc, #228]	; (8010770 <ProcessMacCommands+0x62c>)
 801068a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801068e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010692:	4b37      	ldr	r3, [pc, #220]	; (8010770 <ProcessMacCommands+0x62c>)
 8010694:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010698:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801069c:	4611      	mov	r1, r2
 801069e:	4618      	mov	r0, r3
 80106a0:	f004 fe58 	bl	8015354 <RegionGetPhyParam>
 80106a4:	4603      	mov	r3, r0
 80106a6:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80106a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106aa:	b25a      	sxtb	r2, r3
 80106ac:	4b30      	ldr	r3, [pc, #192]	; (8010770 <ProcessMacCommands+0x62c>)
 80106ae:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80106b2:	4293      	cmp	r3, r2
 80106b4:	bfb8      	it	lt
 80106b6:	4613      	movlt	r3, r2
 80106b8:	b25a      	sxtb	r2, r3
 80106ba:	4b2d      	ldr	r3, [pc, #180]	; (8010770 <ProcessMacCommands+0x62c>)
 80106bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80106c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80106c4:	2200      	movs	r2, #0
 80106c6:	4619      	mov	r1, r3
 80106c8:	2009      	movs	r0, #9
 80106ca:	f003 f897 	bl	80137fc <LoRaMacCommandsAddCmd>
                }
                break;
 80106ce:	bf00      	nop
 80106d0:	e1bd      	b.n	8010a4e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 80106d2:	2303      	movs	r3, #3
 80106d4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 80106d8:	78fb      	ldrb	r3, [r7, #3]
 80106da:	1c5a      	adds	r2, r3, #1
 80106dc:	70fa      	strb	r2, [r7, #3]
 80106de:	461a      	mov	r2, r3
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	4413      	add	r3, r2
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80106ea:	78fb      	ldrb	r3, [r7, #3]
 80106ec:	1c5a      	adds	r2, r3, #1
 80106ee:	70fa      	strb	r2, [r7, #3]
 80106f0:	461a      	mov	r2, r3
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	4413      	add	r3, r2
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80106fa:	78fb      	ldrb	r3, [r7, #3]
 80106fc:	1c5a      	adds	r2, r3, #1
 80106fe:	70fa      	strb	r2, [r7, #3]
 8010700:	461a      	mov	r2, r3
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	4413      	add	r3, r2
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	021a      	lsls	r2, r3, #8
 801070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801070c:	4313      	orrs	r3, r2
 801070e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010710:	78fb      	ldrb	r3, [r7, #3]
 8010712:	1c5a      	adds	r2, r3, #1
 8010714:	70fa      	strb	r2, [r7, #3]
 8010716:	461a      	mov	r2, r3
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	4413      	add	r3, r2
 801071c:	781b      	ldrb	r3, [r3, #0]
 801071e:	041a      	lsls	r2, r3, #16
 8010720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010722:	4313      	orrs	r3, r2
 8010724:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8010726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010728:	2264      	movs	r2, #100	; 0x64
 801072a:	fb02 f303 	mul.w	r3, r2, r3
 801072e:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8010730:	4b0f      	ldr	r3, [pc, #60]	; (8010770 <ProcessMacCommands+0x62c>)
 8010732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010736:	f107 0220 	add.w	r2, r7, #32
 801073a:	4611      	mov	r1, r2
 801073c:	4618      	mov	r0, r3
 801073e:	f004 ff19 	bl	8015574 <RegionDlChannelReq>
 8010742:	4603      	mov	r3, r0
 8010744:	b2db      	uxtb	r3, r3
 8010746:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 801074a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801074e:	b25b      	sxtb	r3, r3
 8010750:	2b00      	cmp	r3, #0
 8010752:	db0a      	blt.n	801076a <ProcessMacCommands+0x626>
                {
                    macCmdPayload[0] = status;
 8010754:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010758:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 801075c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010760:	2201      	movs	r2, #1
 8010762:	4619      	mov	r1, r3
 8010764:	200a      	movs	r0, #10
 8010766:	f003 f849 	bl	80137fc <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 801076a:	bf00      	nop
 801076c:	e16f      	b.n	8010a4e <ProcessMacCommands+0x90a>
 801076e:	bf00      	nop
 8010770:	20001134 	.word	0x20001134
 8010774:	0801d068 	.word	0x0801d068
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8010778:	200a      	movs	r0, #10
 801077a:	f003 fb67 	bl	8013e4c <LoRaMacConfirmQueueIsCmdActive>
 801077e:	4603      	mov	r3, r0
 8010780:	2b00      	cmp	r3, #0
 8010782:	f000 8164 	beq.w	8010a4e <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8010786:	210a      	movs	r1, #10
 8010788:	2000      	movs	r0, #0
 801078a:	f003 fad3 	bl	8013d34 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 801078e:	f107 0318 	add.w	r3, r7, #24
 8010792:	2200      	movs	r2, #0
 8010794:	601a      	str	r2, [r3, #0]
 8010796:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8010798:	f107 0310 	add.w	r3, r7, #16
 801079c:	2200      	movs	r2, #0
 801079e:	601a      	str	r2, [r3, #0]
 80107a0:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 80107a2:	f107 0308 	add.w	r3, r7, #8
 80107a6:	2200      	movs	r2, #0
 80107a8:	601a      	str	r2, [r3, #0]
 80107aa:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80107ac:	78fb      	ldrb	r3, [r7, #3]
 80107ae:	1c5a      	adds	r2, r3, #1
 80107b0:	70fa      	strb	r2, [r7, #3]
 80107b2:	461a      	mov	r2, r3
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	4413      	add	r3, r2
 80107b8:	781b      	ldrb	r3, [r3, #0]
 80107ba:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80107bc:	78fb      	ldrb	r3, [r7, #3]
 80107be:	1c5a      	adds	r2, r3, #1
 80107c0:	70fa      	strb	r2, [r7, #3]
 80107c2:	461a      	mov	r2, r3
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	4413      	add	r3, r2
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	021a      	lsls	r2, r3, #8
 80107cc:	69bb      	ldr	r3, [r7, #24]
 80107ce:	4313      	orrs	r3, r2
 80107d0:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80107d2:	78fb      	ldrb	r3, [r7, #3]
 80107d4:	1c5a      	adds	r2, r3, #1
 80107d6:	70fa      	strb	r2, [r7, #3]
 80107d8:	461a      	mov	r2, r3
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	4413      	add	r3, r2
 80107de:	781b      	ldrb	r3, [r3, #0]
 80107e0:	041a      	lsls	r2, r3, #16
 80107e2:	69bb      	ldr	r3, [r7, #24]
 80107e4:	4313      	orrs	r3, r2
 80107e6:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80107e8:	78fb      	ldrb	r3, [r7, #3]
 80107ea:	1c5a      	adds	r2, r3, #1
 80107ec:	70fa      	strb	r2, [r7, #3]
 80107ee:	461a      	mov	r2, r3
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	4413      	add	r3, r2
 80107f4:	781b      	ldrb	r3, [r3, #0]
 80107f6:	061a      	lsls	r2, r3, #24
 80107f8:	69bb      	ldr	r3, [r7, #24]
 80107fa:	4313      	orrs	r3, r2
 80107fc:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80107fe:	78fb      	ldrb	r3, [r7, #3]
 8010800:	1c5a      	adds	r2, r3, #1
 8010802:	70fa      	strb	r2, [r7, #3]
 8010804:	461a      	mov	r2, r3
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	4413      	add	r3, r2
 801080a:	781b      	ldrb	r3, [r3, #0]
 801080c:	b21b      	sxth	r3, r3
 801080e:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8010810:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010814:	461a      	mov	r2, r3
 8010816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801081a:	fb02 f303 	mul.w	r3, r2, r3
 801081e:	121b      	asrs	r3, r3, #8
 8010820:	b21b      	sxth	r3, r3
 8010822:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8010824:	f107 0310 	add.w	r3, r7, #16
 8010828:	f107 0218 	add.w	r2, r7, #24
 801082c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010830:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8010834:	693a      	ldr	r2, [r7, #16]
 8010836:	4b8c      	ldr	r3, [pc, #560]	; (8010a68 <ProcessMacCommands+0x924>)
 8010838:	4413      	add	r3, r2
 801083a:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 801083c:	f107 0308 	add.w	r3, r7, #8
 8010840:	4618      	mov	r0, r3
 8010842:	f00a fc79 	bl	801b138 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8010846:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801084a:	4b88      	ldr	r3, [pc, #544]	; (8010a6c <ProcessMacCommands+0x928>)
 801084c:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8010850:	9200      	str	r2, [sp, #0]
 8010852:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8010856:	f107 0210 	add.w	r2, r7, #16
 801085a:	ca06      	ldmia	r2, {r1, r2}
 801085c:	f00a fc05 	bl	801b06a <SysTimeSub>
 8010860:	f107 0010 	add.w	r0, r7, #16
 8010864:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010866:	9300      	str	r3, [sp, #0]
 8010868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801086a:	f107 0208 	add.w	r2, r7, #8
 801086e:	ca06      	ldmia	r2, {r1, r2}
 8010870:	f00a fbc2 	bl	801aff8 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8010874:	f107 0310 	add.w	r3, r7, #16
 8010878:	e893 0003 	ldmia.w	r3, {r0, r1}
 801087c:	f00a fc2e 	bl	801b0dc <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8010880:	f002 fe81 	bl	8013586 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8010884:	4b79      	ldr	r3, [pc, #484]	; (8010a6c <ProcessMacCommands+0x928>)
 8010886:	2201      	movs	r2, #1
 8010888:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 801088c:	e0df      	b.n	8010a4e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 801088e:	200d      	movs	r0, #13
 8010890:	f003 fadc 	bl	8013e4c <LoRaMacConfirmQueueIsCmdActive>
 8010894:	4603      	mov	r3, r0
 8010896:	2b00      	cmp	r3, #0
 8010898:	f000 80d9 	beq.w	8010a4e <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 801089c:	210d      	movs	r1, #13
 801089e:	2000      	movs	r0, #0
 80108a0:	f003 fa48 	bl	8013d34 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80108a4:	4b71      	ldr	r3, [pc, #452]	; (8010a6c <ProcessMacCommands+0x928>)
 80108a6:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80108aa:	2b04      	cmp	r3, #4
 80108ac:	f000 80cf 	beq.w	8010a4e <ProcessMacCommands+0x90a>
 80108b0:	4b6e      	ldr	r3, [pc, #440]	; (8010a6c <ProcessMacCommands+0x928>)
 80108b2:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80108b6:	2b05      	cmp	r3, #5
 80108b8:	f000 80c9 	beq.w	8010a4e <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 80108bc:	f002 fe44 	bl	8013548 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 80108c0:	e0c5      	b.n	8010a4e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 80108c2:	2303      	movs	r3, #3
 80108c4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 80108c8:	2300      	movs	r3, #0
 80108ca:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 80108cc:	78fb      	ldrb	r3, [r7, #3]
 80108ce:	1c5a      	adds	r2, r3, #1
 80108d0:	70fa      	strb	r2, [r7, #3]
 80108d2:	461a      	mov	r2, r3
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	4413      	add	r3, r2
 80108d8:	781b      	ldrb	r3, [r3, #0]
 80108da:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80108dc:	78fb      	ldrb	r3, [r7, #3]
 80108de:	1c5a      	adds	r2, r3, #1
 80108e0:	70fa      	strb	r2, [r7, #3]
 80108e2:	461a      	mov	r2, r3
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	4413      	add	r3, r2
 80108e8:	781b      	ldrb	r3, [r3, #0]
 80108ea:	021b      	lsls	r3, r3, #8
 80108ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80108ee:	4313      	orrs	r3, r2
 80108f0:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80108f2:	78fb      	ldrb	r3, [r7, #3]
 80108f4:	1c5a      	adds	r2, r3, #1
 80108f6:	70fa      	strb	r2, [r7, #3]
 80108f8:	461a      	mov	r2, r3
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	4413      	add	r3, r2
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	041b      	lsls	r3, r3, #16
 8010902:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010904:	4313      	orrs	r3, r2
 8010906:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8010908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801090a:	2264      	movs	r2, #100	; 0x64
 801090c:	fb02 f303 	mul.w	r3, r2, r3
 8010910:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8010912:	78fb      	ldrb	r3, [r7, #3]
 8010914:	1c5a      	adds	r2, r3, #1
 8010916:	70fa      	strb	r2, [r7, #3]
 8010918:	461a      	mov	r2, r3
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	4413      	add	r3, r2
 801091e:	781b      	ldrb	r3, [r3, #0]
 8010920:	f003 030f 	and.w	r3, r3, #15
 8010924:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8010928:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801092c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801092e:	4618      	mov	r0, r3
 8010930:	f002 fe10 	bl	8013554 <LoRaMacClassBPingSlotChannelReq>
 8010934:	4603      	mov	r3, r0
 8010936:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 801093a:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 801093e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8010942:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010946:	2201      	movs	r2, #1
 8010948:	4619      	mov	r1, r3
 801094a:	2011      	movs	r0, #17
 801094c:	f002 ff56 	bl	80137fc <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 8010950:	e07d      	b.n	8010a4e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8010952:	200e      	movs	r0, #14
 8010954:	f003 fa7a 	bl	8013e4c <LoRaMacConfirmQueueIsCmdActive>
 8010958:	4603      	mov	r3, r0
 801095a:	2b00      	cmp	r3, #0
 801095c:	d077      	beq.n	8010a4e <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 801095e:	210e      	movs	r1, #14
 8010960:	2000      	movs	r0, #0
 8010962:	f003 f9e7 	bl	8013d34 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8010966:	2300      	movs	r3, #0
 8010968:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 801096c:	2300      	movs	r3, #0
 801096e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8010972:	78fb      	ldrb	r3, [r7, #3]
 8010974:	1c5a      	adds	r2, r3, #1
 8010976:	70fa      	strb	r2, [r7, #3]
 8010978:	461a      	mov	r2, r3
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	4413      	add	r3, r2
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8010984:	78fb      	ldrb	r3, [r7, #3]
 8010986:	1c5a      	adds	r2, r3, #1
 8010988:	70fa      	strb	r2, [r7, #3]
 801098a:	461a      	mov	r2, r3
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	4413      	add	r3, r2
 8010990:	781b      	ldrb	r3, [r3, #0]
 8010992:	021b      	lsls	r3, r3, #8
 8010994:	b21a      	sxth	r2, r3
 8010996:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801099a:	4313      	orrs	r3, r2
 801099c:	b21b      	sxth	r3, r3
 801099e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 80109a2:	78fb      	ldrb	r3, [r7, #3]
 80109a4:	1c5a      	adds	r2, r3, #1
 80109a6:	70fa      	strb	r2, [r7, #3]
 80109a8:	461a      	mov	r2, r3
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	4413      	add	r3, r2
 80109ae:	781b      	ldrb	r3, [r3, #0]
 80109b0:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80109b4:	4b2e      	ldr	r3, [pc, #184]	; (8010a70 <ProcessMacCommands+0x92c>)
 80109b6:	681a      	ldr	r2, [r3, #0]
 80109b8:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 80109bc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80109c0:	4618      	mov	r0, r3
 80109c2:	f002 fdd3 	bl	801356c <LoRaMacClassBBeaconTimingAns>
                }
                break;
 80109c6:	e042      	b.n	8010a4e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 80109c8:	2300      	movs	r3, #0
 80109ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 80109ce:	78fb      	ldrb	r3, [r7, #3]
 80109d0:	1c5a      	adds	r2, r3, #1
 80109d2:	70fa      	strb	r2, [r7, #3]
 80109d4:	461a      	mov	r2, r3
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	4413      	add	r3, r2
 80109da:	781b      	ldrb	r3, [r3, #0]
 80109dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80109e0:	78fb      	ldrb	r3, [r7, #3]
 80109e2:	1c5a      	adds	r2, r3, #1
 80109e4:	70fa      	strb	r2, [r7, #3]
 80109e6:	461a      	mov	r2, r3
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	4413      	add	r3, r2
 80109ec:	781b      	ldrb	r3, [r3, #0]
 80109ee:	021b      	lsls	r3, r3, #8
 80109f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80109f4:	4313      	orrs	r3, r2
 80109f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80109fa:	78fb      	ldrb	r3, [r7, #3]
 80109fc:	1c5a      	adds	r2, r3, #1
 80109fe:	70fa      	strb	r2, [r7, #3]
 8010a00:	461a      	mov	r2, r3
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	4413      	add	r3, r2
 8010a06:	781b      	ldrb	r3, [r3, #0]
 8010a08:	041b      	lsls	r3, r3, #16
 8010a0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010a0e:	4313      	orrs	r3, r2
 8010a10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8010a14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010a18:	2264      	movs	r2, #100	; 0x64
 8010a1a:	fb02 f303 	mul.w	r3, r2, r3
 8010a1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8010a22:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8010a26:	f002 fdb4 	bl	8013592 <LoRaMacClassBBeaconFreqReq>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d003      	beq.n	8010a38 <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 8010a30:	2301      	movs	r3, #1
 8010a32:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8010a36:	e002      	b.n	8010a3e <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8010a38:	2300      	movs	r3, #0
 8010a3a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8010a3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010a42:	2201      	movs	r2, #1
 8010a44:	4619      	mov	r1, r3
 8010a46:	2013      	movs	r0, #19
 8010a48:	f002 fed8 	bl	80137fc <LoRaMacCommandsAddCmd>
                }
                break;
 8010a4c:	bf00      	nop
    while( macIndex < commandsSize )
 8010a4e:	78fa      	ldrb	r2, [r7, #3]
 8010a50:	78bb      	ldrb	r3, [r7, #2]
 8010a52:	429a      	cmp	r2, r3
 8010a54:	f4ff ab8e 	bcc.w	8010174 <ProcessMacCommands+0x30>
 8010a58:	e002      	b.n	8010a60 <ProcessMacCommands+0x91c>
            return;
 8010a5a:	bf00      	nop
 8010a5c:	e000      	b.n	8010a60 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8010a5e:	bf00      	nop
        }
    }
}
 8010a60:	378c      	adds	r7, #140	; 0x8c
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd90      	pop	{r4, r7, pc}
 8010a66:	bf00      	nop
 8010a68:	12d53d80 	.word	0x12d53d80
 8010a6c:	20000c28 	.word	0x20000c28
 8010a70:	20001f8c 	.word	0x20001f8c

08010a74 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b08e      	sub	sp, #56	; 0x38
 8010a78:	af02      	add	r7, sp, #8
 8010a7a:	60f8      	str	r0, [r7, #12]
 8010a7c:	607a      	str	r2, [r7, #4]
 8010a7e:	461a      	mov	r2, r3
 8010a80:	460b      	mov	r3, r1
 8010a82:	72fb      	strb	r3, [r7, #11]
 8010a84:	4613      	mov	r3, r2
 8010a86:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010a88:	2303      	movs	r3, #3
 8010a8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010a8e:	4b65      	ldr	r3, [pc, #404]	; (8010c24 <Send+0x1b0>)
 8010a90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010a94:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8010a98:	4b62      	ldr	r3, [pc, #392]	; (8010c24 <Send+0x1b0>)
 8010a9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010a9e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010aa2:	4b60      	ldr	r3, [pc, #384]	; (8010c24 <Send+0x1b0>)
 8010aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010aa8:	4b5e      	ldr	r3, [pc, #376]	; (8010c24 <Send+0x1b0>)
 8010aaa:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d101      	bne.n	8010ab6 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8010ab2:	2307      	movs	r3, #7
 8010ab4:	e0b1      	b.n	8010c1a <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8010ab6:	4b5b      	ldr	r3, [pc, #364]	; (8010c24 <Send+0x1b0>)
 8010ab8:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d102      	bne.n	8010ac6 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010ac0:	4b58      	ldr	r3, [pc, #352]	; (8010c24 <Send+0x1b0>)
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8010acc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010ad0:	f36f 0303 	bfc	r3, #0, #4
 8010ad4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8010ad8:	4b52      	ldr	r3, [pc, #328]	; (8010c24 <Send+0x1b0>)
 8010ada:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8010ade:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010ae2:	f362 13c7 	bfi	r3, r2, #7, #1
 8010ae6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010aea:	4b4e      	ldr	r3, [pc, #312]	; (8010c24 <Send+0x1b0>)
 8010aec:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	d106      	bne.n	8010b02 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8010af4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010af8:	f043 0310 	orr.w	r3, r3, #16
 8010afc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8010b00:	e005      	b.n	8010b0e <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8010b02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010b06:	f36f 1304 	bfc	r3, #4, #1
 8010b0a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8010b0e:	4b45      	ldr	r3, [pc, #276]	; (8010c24 <Send+0x1b0>)
 8010b10:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d005      	beq.n	8010b24 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8010b18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010b1c:	f043 0320 	orr.w	r3, r3, #32
 8010b20:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8010b24:	4b3f      	ldr	r3, [pc, #252]	; (8010c24 <Send+0x1b0>)
 8010b26:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8010b2a:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8010b30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010b34:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010b38:	b2db      	uxtb	r3, r3
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	bf14      	ite	ne
 8010b3e:	2301      	movne	r3, #1
 8010b40:	2300      	moveq	r3, #0
 8010b42:	b2db      	uxtb	r3, r3
 8010b44:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010b46:	4b37      	ldr	r3, [pc, #220]	; (8010c24 <Send+0x1b0>)
 8010b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b4a:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010b4c:	4b36      	ldr	r3, [pc, #216]	; (8010c28 <Send+0x1b4>)
 8010b4e:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8010b52:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010b54:	4b34      	ldr	r3, [pc, #208]	; (8010c28 <Send+0x1b4>)
 8010b56:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8010b5a:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010b5c:	4b31      	ldr	r3, [pc, #196]	; (8010c24 <Send+0x1b0>)
 8010b5e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010b62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010b66:	4b2f      	ldr	r3, [pc, #188]	; (8010c24 <Send+0x1b0>)
 8010b68:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010b6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010b70:	4b2c      	ldr	r3, [pc, #176]	; (8010c24 <Send+0x1b0>)
 8010b72:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010b76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010b7a:	4b2a      	ldr	r3, [pc, #168]	; (8010c24 <Send+0x1b0>)
 8010b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8010b84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010b88:	f107 0014 	add.w	r0, r7, #20
 8010b8c:	4a27      	ldr	r2, [pc, #156]	; (8010c2c <Send+0x1b8>)
 8010b8e:	4928      	ldr	r1, [pc, #160]	; (8010c30 <Send+0x1bc>)
 8010b90:	f002 fc1a 	bl	80133c8 <LoRaMacAdrCalcNext>
 8010b94:	4603      	mov	r3, r0
 8010b96:	461a      	mov	r2, r3
 8010b98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010b9c:	f362 1386 	bfi	r3, r2, #6, #1
 8010ba0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8010ba4:	7afa      	ldrb	r2, [r7, #11]
 8010ba6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010baa:	893b      	ldrh	r3, [r7, #8]
 8010bac:	9300      	str	r3, [sp, #0]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	68f8      	ldr	r0, [r7, #12]
 8010bb2:	f000 fc2d 	bl	8011410 <PrepareFrame>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8010bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d003      	beq.n	8010bcc <Send+0x158>
 8010bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010bc8:	2b0a      	cmp	r3, #10
 8010bca:	d107      	bne.n	8010bdc <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8010bcc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f000 f96d 	bl	8010eb0 <ScheduleTx>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8010bdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d00a      	beq.n	8010bfa <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8010be4:	4a0f      	ldr	r2, [pc, #60]	; (8010c24 <Send+0x1b0>)
 8010be6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010bea:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8010bee:	4a0d      	ldr	r2, [pc, #52]	; (8010c24 <Send+0x1b0>)
 8010bf0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010bf4:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8010bf8:	e00d      	b.n	8010c16 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8010bfa:	4b0a      	ldr	r3, [pc, #40]	; (8010c24 <Send+0x1b0>)
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8010c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c04:	4a07      	ldr	r2, [pc, #28]	; (8010c24 <Send+0x1b0>)
 8010c06:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010c08:	f002 fe70 	bl	80138ec <LoRaMacCommandsRemoveNoneStickyCmds>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d001      	beq.n	8010c16 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010c12:	2313      	movs	r3, #19
 8010c14:	e001      	b.n	8010c1a <Send+0x1a6>
        }
    }
    return status;
 8010c16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3730      	adds	r7, #48	; 0x30
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
 8010c22:	bf00      	nop
 8010c24:	20001134 	.word	0x20001134
 8010c28:	20000c28 	.word	0x20000c28
 8010c2c:	2000116c 	.word	0x2000116c
 8010c30:	2000116d 	.word	0x2000116d

08010c34 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b084      	sub	sp, #16
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8010c42:	2300      	movs	r3, #0
 8010c44:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8010c46:	2301      	movs	r3, #1
 8010c48:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8010c4a:	79fb      	ldrb	r3, [r7, #7]
 8010c4c:	2bff      	cmp	r3, #255	; 0xff
 8010c4e:	d129      	bne.n	8010ca4 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8010c50:	2000      	movs	r0, #0
 8010c52:	f7ff f957 	bl	800ff04 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8010c56:	4b1a      	ldr	r3, [pc, #104]	; (8010cc0 <SendReJoinReq+0x8c>)
 8010c58:	2200      	movs	r2, #0
 8010c5a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8010c5e:	4b18      	ldr	r3, [pc, #96]	; (8010cc0 <SendReJoinReq+0x8c>)
 8010c60:	4a18      	ldr	r2, [pc, #96]	; (8010cc4 <SendReJoinReq+0x90>)
 8010c62:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010c66:	4b16      	ldr	r3, [pc, #88]	; (8010cc0 <SendReJoinReq+0x8c>)
 8010c68:	22ff      	movs	r2, #255	; 0xff
 8010c6a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8010c6e:	7b3b      	ldrb	r3, [r7, #12]
 8010c70:	f36f 1347 	bfc	r3, #5, #3
 8010c74:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8010c76:	7b3a      	ldrb	r2, [r7, #12]
 8010c78:	4b11      	ldr	r3, [pc, #68]	; (8010cc0 <SendReJoinReq+0x8c>)
 8010c7a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8010c7e:	f7fc fb75 	bl	800d36c <SecureElementGetJoinEui>
 8010c82:	4603      	mov	r3, r0
 8010c84:	2208      	movs	r2, #8
 8010c86:	4619      	mov	r1, r3
 8010c88:	480f      	ldr	r0, [pc, #60]	; (8010cc8 <SendReJoinReq+0x94>)
 8010c8a:	f006 fe76 	bl	801797a <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8010c8e:	f7fc fb4b 	bl	800d328 <SecureElementGetDevEui>
 8010c92:	4603      	mov	r3, r0
 8010c94:	2208      	movs	r2, #8
 8010c96:	4619      	mov	r1, r3
 8010c98:	480c      	ldr	r0, [pc, #48]	; (8010ccc <SendReJoinReq+0x98>)
 8010c9a:	f006 fe6e 	bl	801797a <memcpy1>

            allowDelayedTx = false;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	73fb      	strb	r3, [r7, #15]

            break;
 8010ca2:	e002      	b.n	8010caa <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010ca4:	2302      	movs	r3, #2
 8010ca6:	73bb      	strb	r3, [r7, #14]
            break;
 8010ca8:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8010caa:	7bfb      	ldrb	r3, [r7, #15]
 8010cac:	4618      	mov	r0, r3
 8010cae:	f000 f8ff 	bl	8010eb0 <ScheduleTx>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	73bb      	strb	r3, [r7, #14]
    return status;
 8010cb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3710      	adds	r7, #16
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}
 8010cc0:	20000c28 	.word	0x20000c28
 8010cc4:	20000c2a 	.word	0x20000c2a
 8010cc8:	20000d36 	.word	0x20000d36
 8010ccc:	20000d3e 	.word	0x20000d3e

08010cd0 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010cd4:	f002 fbe7 	bl	80134a6 <LoRaMacClassBIsBeaconExpected>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d001      	beq.n	8010ce2 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010cde:	230e      	movs	r3, #14
 8010ce0:	e013      	b.n	8010d0a <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010ce2:	4b0b      	ldr	r3, [pc, #44]	; (8010d10 <CheckForClassBCollision+0x40>)
 8010ce4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010ce8:	2b01      	cmp	r3, #1
 8010cea:	d10d      	bne.n	8010d08 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010cec:	f002 fbe2 	bl	80134b4 <LoRaMacClassBIsPingExpected>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d001      	beq.n	8010cfa <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010cf6:	230f      	movs	r3, #15
 8010cf8:	e007      	b.n	8010d0a <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010cfa:	f002 fbe2 	bl	80134c2 <LoRaMacClassBIsMulticastExpected>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d001      	beq.n	8010d08 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010d04:	230f      	movs	r3, #15
 8010d06:	e000      	b.n	8010d0a <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8010d08:	2300      	movs	r3, #0
}
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	bd80      	pop	{r7, pc}
 8010d0e:	bf00      	nop
 8010d10:	20001134 	.word	0x20001134

08010d14 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8010d14:	b590      	push	{r4, r7, lr}
 8010d16:	b083      	sub	sp, #12
 8010d18:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010d1a:	4b2d      	ldr	r3, [pc, #180]	; (8010dd0 <ComputeRxWindowParameters+0xbc>)
 8010d1c:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010d20:	4b2b      	ldr	r3, [pc, #172]	; (8010dd0 <ComputeRxWindowParameters+0xbc>)
 8010d22:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010d26:	4b2a      	ldr	r3, [pc, #168]	; (8010dd0 <ComputeRxWindowParameters+0xbc>)
 8010d28:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 8010d2c:	4b28      	ldr	r3, [pc, #160]	; (8010dd0 <ComputeRxWindowParameters+0xbc>)
 8010d2e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8010d32:	4b27      	ldr	r3, [pc, #156]	; (8010dd0 <ComputeRxWindowParameters+0xbc>)
 8010d34:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010d38:	b25b      	sxtb	r3, r3
 8010d3a:	f004 fc72 	bl	8015622 <RegionApplyDrOffset>
 8010d3e:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010d40:	b259      	sxtb	r1, r3
 8010d42:	4b23      	ldr	r3, [pc, #140]	; (8010dd0 <ComputeRxWindowParameters+0xbc>)
 8010d44:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010d48:	4b21      	ldr	r3, [pc, #132]	; (8010dd0 <ComputeRxWindowParameters+0xbc>)
 8010d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d4c:	4821      	ldr	r0, [pc, #132]	; (8010dd4 <ComputeRxWindowParameters+0xc0>)
 8010d4e:	9000      	str	r0, [sp, #0]
 8010d50:	4620      	mov	r0, r4
 8010d52:	f004 fb76 	bl	8015442 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010d56:	4b1e      	ldr	r3, [pc, #120]	; (8010dd0 <ComputeRxWindowParameters+0xbc>)
 8010d58:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8010d5c:	4b1c      	ldr	r3, [pc, #112]	; (8010dd0 <ComputeRxWindowParameters+0xbc>)
 8010d5e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010d62:	b259      	sxtb	r1, r3
 8010d64:	4b1a      	ldr	r3, [pc, #104]	; (8010dd0 <ComputeRxWindowParameters+0xbc>)
 8010d66:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010d6a:	4b19      	ldr	r3, [pc, #100]	; (8010dd0 <ComputeRxWindowParameters+0xbc>)
 8010d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d6e:	4c1a      	ldr	r4, [pc, #104]	; (8010dd8 <ComputeRxWindowParameters+0xc4>)
 8010d70:	9400      	str	r4, [sp, #0]
 8010d72:	f004 fb66 	bl	8015442 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010d76:	4b16      	ldr	r3, [pc, #88]	; (8010dd0 <ComputeRxWindowParameters+0xbc>)
 8010d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d7a:	4a18      	ldr	r2, [pc, #96]	; (8010ddc <ComputeRxWindowParameters+0xc8>)
 8010d7c:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8010d80:	4413      	add	r3, r2
 8010d82:	4a16      	ldr	r2, [pc, #88]	; (8010ddc <ComputeRxWindowParameters+0xc8>)
 8010d84:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010d88:	4b11      	ldr	r3, [pc, #68]	; (8010dd0 <ComputeRxWindowParameters+0xbc>)
 8010d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d8c:	4a13      	ldr	r2, [pc, #76]	; (8010ddc <ComputeRxWindowParameters+0xc8>)
 8010d8e:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8010d92:	4413      	add	r3, r2
 8010d94:	4a11      	ldr	r2, [pc, #68]	; (8010ddc <ComputeRxWindowParameters+0xc8>)
 8010d96:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010d9a:	4b0d      	ldr	r3, [pc, #52]	; (8010dd0 <ComputeRxWindowParameters+0xbc>)
 8010d9c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d111      	bne.n	8010dc8 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010da4:	4b0a      	ldr	r3, [pc, #40]	; (8010dd0 <ComputeRxWindowParameters+0xbc>)
 8010da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010da8:	4a0c      	ldr	r2, [pc, #48]	; (8010ddc <ComputeRxWindowParameters+0xc8>)
 8010daa:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8010dae:	4413      	add	r3, r2
 8010db0:	4a0a      	ldr	r2, [pc, #40]	; (8010ddc <ComputeRxWindowParameters+0xc8>)
 8010db2:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010db6:	4b06      	ldr	r3, [pc, #24]	; (8010dd0 <ComputeRxWindowParameters+0xbc>)
 8010db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010dba:	4a08      	ldr	r2, [pc, #32]	; (8010ddc <ComputeRxWindowParameters+0xc8>)
 8010dbc:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8010dc0:	4413      	add	r3, r2
 8010dc2:	4a06      	ldr	r2, [pc, #24]	; (8010ddc <ComputeRxWindowParameters+0xc8>)
 8010dc4:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8010dc8:	bf00      	nop
 8010dca:	3704      	adds	r7, #4
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd90      	pop	{r4, r7, pc}
 8010dd0:	20001134 	.word	0x20001134
 8010dd4:	20000fe0 	.word	0x20000fe0
 8010dd8:	20000ff4 	.word	0x20000ff4
 8010ddc:	20000c28 	.word	0x20000c28

08010de0 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b082      	sub	sp, #8
 8010de4:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8010de6:	2300      	movs	r3, #0
 8010de8:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010dea:	4b13      	ldr	r3, [pc, #76]	; (8010e38 <VerifyTxFrame+0x58>)
 8010dec:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d01b      	beq.n	8010e2c <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010df4:	1d3b      	adds	r3, r7, #4
 8010df6:	4618      	mov	r0, r3
 8010df8:	f002 fdbe 	bl	8013978 <LoRaMacCommandsGetSizeSerializedCmds>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d001      	beq.n	8010e06 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010e02:	2313      	movs	r3, #19
 8010e04:	e013      	b.n	8010e2e <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8010e06:	4b0d      	ldr	r3, [pc, #52]	; (8010e3c <VerifyTxFrame+0x5c>)
 8010e08:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010e0c:	4a0a      	ldr	r2, [pc, #40]	; (8010e38 <VerifyTxFrame+0x58>)
 8010e0e:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8010e12:	687a      	ldr	r2, [r7, #4]
 8010e14:	b2d2      	uxtb	r2, r2
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7ff f96c 	bl	80100f4 <ValidatePayloadLength>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	f083 0301 	eor.w	r3, r3, #1
 8010e22:	b2db      	uxtb	r3, r3
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d001      	beq.n	8010e2c <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010e28:	2308      	movs	r3, #8
 8010e2a:	e000      	b.n	8010e2e <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8010e2c:	2300      	movs	r3, #0
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3708      	adds	r7, #8
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}
 8010e36:	bf00      	nop
 8010e38:	20001134 	.word	0x20001134
 8010e3c:	20000c28 	.word	0x20000c28

08010e40 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b082      	sub	sp, #8
 8010e44:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8010e46:	4b18      	ldr	r3, [pc, #96]	; (8010ea8 <SerializeTxFrame+0x68>)
 8010e48:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d002      	beq.n	8010e56 <SerializeTxFrame+0x16>
 8010e50:	2b04      	cmp	r3, #4
 8010e52:	d011      	beq.n	8010e78 <SerializeTxFrame+0x38>
 8010e54:	e021      	b.n	8010e9a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010e56:	4815      	ldr	r0, [pc, #84]	; (8010eac <SerializeTxFrame+0x6c>)
 8010e58:	f004 f8f3 	bl	8015042 <LoRaMacSerializerJoinRequest>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010e60:	79fb      	ldrb	r3, [r7, #7]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d001      	beq.n	8010e6a <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010e66:	2311      	movs	r3, #17
 8010e68:	e01a      	b.n	8010ea0 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010e6a:	4b0f      	ldr	r3, [pc, #60]	; (8010ea8 <SerializeTxFrame+0x68>)
 8010e6c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010e70:	b29a      	uxth	r2, r3
 8010e72:	4b0d      	ldr	r3, [pc, #52]	; (8010ea8 <SerializeTxFrame+0x68>)
 8010e74:	801a      	strh	r2, [r3, #0]
            break;
 8010e76:	e012      	b.n	8010e9e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010e78:	480c      	ldr	r0, [pc, #48]	; (8010eac <SerializeTxFrame+0x6c>)
 8010e7a:	f004 f964 	bl	8015146 <LoRaMacSerializerData>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010e82:	79fb      	ldrb	r3, [r7, #7]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d001      	beq.n	8010e8c <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010e88:	2311      	movs	r3, #17
 8010e8a:	e009      	b.n	8010ea0 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010e8c:	4b06      	ldr	r3, [pc, #24]	; (8010ea8 <SerializeTxFrame+0x68>)
 8010e8e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010e92:	b29a      	uxth	r2, r3
 8010e94:	4b04      	ldr	r3, [pc, #16]	; (8010ea8 <SerializeTxFrame+0x68>)
 8010e96:	801a      	strh	r2, [r3, #0]
            break;
 8010e98:	e001      	b.n	8010e9e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010e9a:	2303      	movs	r3, #3
 8010e9c:	e000      	b.n	8010ea0 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8010e9e:	2300      	movs	r3, #0
}
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3708      	adds	r7, #8
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}
 8010ea8:	20000c28 	.word	0x20000c28
 8010eac:	20000d30 	.word	0x20000d30

08010eb0 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b090      	sub	sp, #64	; 0x40
 8010eb4:	af02      	add	r7, sp, #8
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010eba:	2303      	movs	r3, #3
 8010ebc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010ec0:	f7ff ff06 	bl	8010cd0 <CheckForClassBCollision>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010eca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d002      	beq.n	8010ed8 <ScheduleTx+0x28>
    {
        return status;
 8010ed2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ed6:	e08f      	b.n	8010ff8 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8010ed8:	f000 f8fa 	bl	80110d0 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010edc:	f7ff ffb0 	bl	8010e40 <SerializeTxFrame>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010ee6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d002      	beq.n	8010ef4 <ScheduleTx+0x44>
    {
        return status;
 8010eee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ef2:	e081      	b.n	8010ff8 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010ef4:	4b42      	ldr	r3, [pc, #264]	; (8011000 <ScheduleTx+0x150>)
 8010ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ef8:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010efa:	4b41      	ldr	r3, [pc, #260]	; (8011000 <ScheduleTx+0x150>)
 8010efc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010f00:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8010f02:	4b3f      	ldr	r3, [pc, #252]	; (8011000 <ScheduleTx+0x150>)
 8010f04:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8010f08:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f00a f94a 	bl	801b1a8 <SysTimeGetMcuTime>
 8010f14:	4638      	mov	r0, r7
 8010f16:	4b3a      	ldr	r3, [pc, #232]	; (8011000 <ScheduleTx+0x150>)
 8010f18:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8010f1c:	9200      	str	r2, [sp, #0]
 8010f1e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8010f22:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010f26:	ca06      	ldmia	r2, {r1, r2}
 8010f28:	f00a f89f 	bl	801b06a <SysTimeSub>
 8010f2c:	f107 0320 	add.w	r3, r7, #32
 8010f30:	463a      	mov	r2, r7
 8010f32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f36:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8010f3a:	4b31      	ldr	r3, [pc, #196]	; (8011000 <ScheduleTx+0x150>)
 8010f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f3e:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010f40:	2300      	movs	r3, #0
 8010f42:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8010f46:	2301      	movs	r3, #1
 8010f48:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8010f4a:	4b2e      	ldr	r3, [pc, #184]	; (8011004 <ScheduleTx+0x154>)
 8010f4c:	881b      	ldrh	r3, [r3, #0]
 8010f4e:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010f50:	4b2b      	ldr	r3, [pc, #172]	; (8011000 <ScheduleTx+0x150>)
 8010f52:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d104      	bne.n	8010f64 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8010f60:	2300      	movs	r3, #0
 8010f62:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8010f64:	4b26      	ldr	r3, [pc, #152]	; (8011000 <ScheduleTx+0x150>)
 8010f66:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010f6a:	f107 0114 	add.w	r1, r7, #20
 8010f6e:	4b26      	ldr	r3, [pc, #152]	; (8011008 <ScheduleTx+0x158>)
 8010f70:	9300      	str	r3, [sp, #0]
 8010f72:	4b26      	ldr	r3, [pc, #152]	; (801100c <ScheduleTx+0x15c>)
 8010f74:	4a26      	ldr	r2, [pc, #152]	; (8011010 <ScheduleTx+0x160>)
 8010f76:	f004 fb2a 	bl	80155ce <RegionNextChannel>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8010f80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d022      	beq.n	8010fce <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8010f88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f8c:	2b0b      	cmp	r3, #11
 8010f8e:	d11b      	bne.n	8010fc8 <ScheduleTx+0x118>
 8010f90:	7bfb      	ldrb	r3, [r7, #15]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d018      	beq.n	8010fc8 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8010f96:	4b1b      	ldr	r3, [pc, #108]	; (8011004 <ScheduleTx+0x154>)
 8010f98:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d011      	beq.n	8010fc4 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010fa0:	4b18      	ldr	r3, [pc, #96]	; (8011004 <ScheduleTx+0x154>)
 8010fa2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010fa6:	f043 0320 	orr.w	r3, r3, #32
 8010faa:	4a16      	ldr	r2, [pc, #88]	; (8011004 <ScheduleTx+0x154>)
 8010fac:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010fb0:	4b14      	ldr	r3, [pc, #80]	; (8011004 <ScheduleTx+0x154>)
 8010fb2:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	4816      	ldr	r0, [pc, #88]	; (8011014 <ScheduleTx+0x164>)
 8010fba:	f00a fe99 	bl	801bcf0 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8010fbe:	4815      	ldr	r0, [pc, #84]	; (8011014 <ScheduleTx+0x164>)
 8010fc0:	f00a fdb8 	bl	801bb34 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	e017      	b.n	8010ff8 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010fc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fcc:	e014      	b.n	8010ff8 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010fce:	f7ff fea1 	bl	8010d14 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8010fd2:	f7ff ff05 	bl	8010de0 <VerifyTxFrame>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010fdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d002      	beq.n	8010fea <ScheduleTx+0x13a>
    {
        return status;
 8010fe4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fe8:	e006      	b.n	8010ff8 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010fea:	4b06      	ldr	r3, [pc, #24]	; (8011004 <ScheduleTx+0x154>)
 8010fec:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f000 fb29 	bl	8011648 <SendFrameOnChannel>
 8010ff6:	4603      	mov	r3, r0
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3738      	adds	r7, #56	; 0x38
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}
 8011000:	20001134 	.word	0x20001134
 8011004:	20000c28 	.word	0x20000c28
 8011008:	20001164 	.word	0x20001164
 801100c:	200010b0 	.word	0x200010b0
 8011010:	2000103d 	.word	0x2000103d
 8011014:	20000f90 	.word	0x20000f90

08011018 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b084      	sub	sp, #16
 801101c:	af00      	add	r7, sp, #0
 801101e:	4603      	mov	r3, r0
 8011020:	460a      	mov	r2, r1
 8011022:	71fb      	strb	r3, [r7, #7]
 8011024:	4613      	mov	r3, r2
 8011026:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011028:	2313      	movs	r3, #19
 801102a:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 801102c:	2300      	movs	r3, #0
 801102e:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011030:	4b25      	ldr	r3, [pc, #148]	; (80110c8 <SecureFrame+0xb0>)
 8011032:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011036:	2b00      	cmp	r3, #0
 8011038:	d002      	beq.n	8011040 <SecureFrame+0x28>
 801103a:	2b04      	cmp	r3, #4
 801103c:	d011      	beq.n	8011062 <SecureFrame+0x4a>
 801103e:	e03b      	b.n	80110b8 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011040:	4822      	ldr	r0, [pc, #136]	; (80110cc <SecureFrame+0xb4>)
 8011042:	f003 fbc7 	bl	80147d4 <LoRaMacCryptoPrepareJoinRequest>
 8011046:	4603      	mov	r3, r0
 8011048:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801104a:	7bfb      	ldrb	r3, [r7, #15]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d001      	beq.n	8011054 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011050:	2311      	movs	r3, #17
 8011052:	e034      	b.n	80110be <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011054:	4b1c      	ldr	r3, [pc, #112]	; (80110c8 <SecureFrame+0xb0>)
 8011056:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801105a:	b29a      	uxth	r2, r3
 801105c:	4b1a      	ldr	r3, [pc, #104]	; (80110c8 <SecureFrame+0xb0>)
 801105e:	801a      	strh	r2, [r3, #0]
            break;
 8011060:	e02c      	b.n	80110bc <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011062:	f107 0308 	add.w	r3, r7, #8
 8011066:	4618      	mov	r0, r3
 8011068:	f003 face 	bl	8014608 <LoRaMacCryptoGetFCntUp>
 801106c:	4603      	mov	r3, r0
 801106e:	2b00      	cmp	r3, #0
 8011070:	d001      	beq.n	8011076 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011072:	2312      	movs	r3, #18
 8011074:	e023      	b.n	80110be <SecureFrame+0xa6>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8011076:	4b14      	ldr	r3, [pc, #80]	; (80110c8 <SecureFrame+0xb0>)
 8011078:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801107c:	2b00      	cmp	r3, #0
 801107e:	d104      	bne.n	801108a <SecureFrame+0x72>
 8011080:	4b11      	ldr	r3, [pc, #68]	; (80110c8 <SecureFrame+0xb0>)
 8011082:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8011086:	2b01      	cmp	r3, #1
 8011088:	d902      	bls.n	8011090 <SecureFrame+0x78>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	3b01      	subs	r3, #1
 801108e:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8011090:	68b8      	ldr	r0, [r7, #8]
 8011092:	79ba      	ldrb	r2, [r7, #6]
 8011094:	79f9      	ldrb	r1, [r7, #7]
 8011096:	4b0d      	ldr	r3, [pc, #52]	; (80110cc <SecureFrame+0xb4>)
 8011098:	f003 fcb4 	bl	8014a04 <LoRaMacCryptoSecureMessage>
 801109c:	4603      	mov	r3, r0
 801109e:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80110a0:	7bfb      	ldrb	r3, [r7, #15]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d001      	beq.n	80110aa <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80110a6:	2311      	movs	r3, #17
 80110a8:	e009      	b.n	80110be <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80110aa:	4b07      	ldr	r3, [pc, #28]	; (80110c8 <SecureFrame+0xb0>)
 80110ac:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80110b0:	b29a      	uxth	r2, r3
 80110b2:	4b05      	ldr	r3, [pc, #20]	; (80110c8 <SecureFrame+0xb0>)
 80110b4:	801a      	strh	r2, [r3, #0]
            break;
 80110b6:	e001      	b.n	80110bc <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80110b8:	2303      	movs	r3, #3
 80110ba:	e000      	b.n	80110be <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 80110bc:	2300      	movs	r3, #0
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3710      	adds	r7, #16
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
 80110c6:	bf00      	nop
 80110c8:	20000c28 	.word	0x20000c28
 80110cc:	20000d30 	.word	0x20000d30

080110d0 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 80110d0:	b480      	push	{r7}
 80110d2:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80110d4:	4b09      	ldr	r3, [pc, #36]	; (80110fc <CalculateBackOff+0x2c>)
 80110d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d10a      	bne.n	80110f2 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80110dc:	4b07      	ldr	r3, [pc, #28]	; (80110fc <CalculateBackOff+0x2c>)
 80110de:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 80110e2:	3b01      	subs	r3, #1
 80110e4:	4a06      	ldr	r2, [pc, #24]	; (8011100 <CalculateBackOff+0x30>)
 80110e6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 80110ea:	fb02 f303 	mul.w	r3, r2, r3
 80110ee:	4a03      	ldr	r2, [pc, #12]	; (80110fc <CalculateBackOff+0x2c>)
 80110f0:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 80110f2:	bf00      	nop
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bc80      	pop	{r7}
 80110f8:	4770      	bx	lr
 80110fa:	bf00      	nop
 80110fc:	20001134 	.word	0x20001134
 8011100:	20000c28 	.word	0x20000c28

08011104 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b082      	sub	sp, #8
 8011108:	af00      	add	r7, sp, #0
 801110a:	4603      	mov	r3, r0
 801110c:	7139      	strb	r1, [r7, #4]
 801110e:	71fb      	strb	r3, [r7, #7]
 8011110:	4613      	mov	r3, r2
 8011112:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8011114:	79fb      	ldrb	r3, [r7, #7]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d002      	beq.n	8011120 <RemoveMacCommands+0x1c>
 801111a:	79fb      	ldrb	r3, [r7, #7]
 801111c:	2b01      	cmp	r3, #1
 801111e:	d10d      	bne.n	801113c <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8011120:	79bb      	ldrb	r3, [r7, #6]
 8011122:	2b01      	cmp	r3, #1
 8011124:	d108      	bne.n	8011138 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8011126:	793b      	ldrb	r3, [r7, #4]
 8011128:	f003 0320 	and.w	r3, r3, #32
 801112c:	b2db      	uxtb	r3, r3
 801112e:	2b00      	cmp	r3, #0
 8011130:	d004      	beq.n	801113c <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8011132:	f002 fbff 	bl	8013934 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8011136:	e001      	b.n	801113c <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8011138:	f002 fbfc 	bl	8013934 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 801113c:	bf00      	nop
 801113e:	3708      	adds	r7, #8
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}

08011144 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8011144:	b5b0      	push	{r4, r5, r7, lr}
 8011146:	b08e      	sub	sp, #56	; 0x38
 8011148:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 801114a:	4b68      	ldr	r3, [pc, #416]	; (80112ec <ResetMacParameters+0x1a8>)
 801114c:	2200      	movs	r2, #0
 801114e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8011152:	4b66      	ldr	r3, [pc, #408]	; (80112ec <ResetMacParameters+0x1a8>)
 8011154:	2200      	movs	r2, #0
 8011156:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8011158:	4b65      	ldr	r3, [pc, #404]	; (80112f0 <ResetMacParameters+0x1ac>)
 801115a:	2200      	movs	r2, #0
 801115c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 8011160:	4b63      	ldr	r3, [pc, #396]	; (80112f0 <ResetMacParameters+0x1ac>)
 8011162:	2201      	movs	r2, #1
 8011164:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011168:	4b61      	ldr	r3, [pc, #388]	; (80112f0 <ResetMacParameters+0x1ac>)
 801116a:	2201      	movs	r2, #1
 801116c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8011170:	4b5f      	ldr	r3, [pc, #380]	; (80112f0 <ResetMacParameters+0x1ac>)
 8011172:	2200      	movs	r2, #0
 8011174:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8011178:	4b5c      	ldr	r3, [pc, #368]	; (80112ec <ResetMacParameters+0x1a8>)
 801117a:	2200      	movs	r2, #0
 801117c:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8011180:	4b5a      	ldr	r3, [pc, #360]	; (80112ec <ResetMacParameters+0x1a8>)
 8011182:	2201      	movs	r2, #1
 8011184:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011188:	4b58      	ldr	r3, [pc, #352]	; (80112ec <ResetMacParameters+0x1a8>)
 801118a:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 801118e:	4b57      	ldr	r3, [pc, #348]	; (80112ec <ResetMacParameters+0x1a8>)
 8011190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011194:	4b55      	ldr	r3, [pc, #340]	; (80112ec <ResetMacParameters+0x1a8>)
 8011196:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 801119a:	4b54      	ldr	r3, [pc, #336]	; (80112ec <ResetMacParameters+0x1a8>)
 801119c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80111a0:	4b52      	ldr	r3, [pc, #328]	; (80112ec <ResetMacParameters+0x1a8>)
 80111a2:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 80111a6:	4b51      	ldr	r3, [pc, #324]	; (80112ec <ResetMacParameters+0x1a8>)
 80111a8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80111ac:	4b4f      	ldr	r3, [pc, #316]	; (80112ec <ResetMacParameters+0x1a8>)
 80111ae:	4a4f      	ldr	r2, [pc, #316]	; (80112ec <ResetMacParameters+0x1a8>)
 80111b0:	3364      	adds	r3, #100	; 0x64
 80111b2:	32a8      	adds	r2, #168	; 0xa8
 80111b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80111b8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80111bc:	4b4b      	ldr	r3, [pc, #300]	; (80112ec <ResetMacParameters+0x1a8>)
 80111be:	4a4b      	ldr	r2, [pc, #300]	; (80112ec <ResetMacParameters+0x1a8>)
 80111c0:	336c      	adds	r3, #108	; 0x6c
 80111c2:	32b0      	adds	r2, #176	; 0xb0
 80111c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80111c8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80111cc:	4b47      	ldr	r3, [pc, #284]	; (80112ec <ResetMacParameters+0x1a8>)
 80111ce:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 80111d2:	4b46      	ldr	r3, [pc, #280]	; (80112ec <ResetMacParameters+0x1a8>)
 80111d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80111d8:	4b44      	ldr	r3, [pc, #272]	; (80112ec <ResetMacParameters+0x1a8>)
 80111da:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 80111de:	4b43      	ldr	r3, [pc, #268]	; (80112ec <ResetMacParameters+0x1a8>)
 80111e0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80111e4:	4b41      	ldr	r3, [pc, #260]	; (80112ec <ResetMacParameters+0x1a8>)
 80111e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80111ea:	4a40      	ldr	r2, [pc, #256]	; (80112ec <ResetMacParameters+0x1a8>)
 80111ec:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80111ee:	4b3f      	ldr	r3, [pc, #252]	; (80112ec <ResetMacParameters+0x1a8>)
 80111f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80111f4:	4a3d      	ldr	r2, [pc, #244]	; (80112ec <ResetMacParameters+0x1a8>)
 80111f6:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 80111f8:	4b3d      	ldr	r3, [pc, #244]	; (80112f0 <ResetMacParameters+0x1ac>)
 80111fa:	2200      	movs	r2, #0
 80111fc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8011200:	4b3a      	ldr	r3, [pc, #232]	; (80112ec <ResetMacParameters+0x1a8>)
 8011202:	2200      	movs	r2, #0
 8011204:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8011208:	2301      	movs	r3, #1
 801120a:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801120c:	4b39      	ldr	r3, [pc, #228]	; (80112f4 <ResetMacParameters+0x1b0>)
 801120e:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011210:	4b39      	ldr	r3, [pc, #228]	; (80112f8 <ResetMacParameters+0x1b4>)
 8011212:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011214:	4b35      	ldr	r3, [pc, #212]	; (80112ec <ResetMacParameters+0x1a8>)
 8011216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801121a:	1d3a      	adds	r2, r7, #4
 801121c:	4611      	mov	r1, r2
 801121e:	4618      	mov	r0, r3
 8011220:	f004 f8c1 	bl	80153a6 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8011224:	4b32      	ldr	r3, [pc, #200]	; (80112f0 <ResetMacParameters+0x1ac>)
 8011226:	2200      	movs	r2, #0
 8011228:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801122c:	4b30      	ldr	r3, [pc, #192]	; (80112f0 <ResetMacParameters+0x1ac>)
 801122e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8011232:	4b2f      	ldr	r3, [pc, #188]	; (80112f0 <ResetMacParameters+0x1ac>)
 8011234:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8011238:	4b2c      	ldr	r3, [pc, #176]	; (80112ec <ResetMacParameters+0x1a8>)
 801123a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801123c:	4a2c      	ldr	r2, [pc, #176]	; (80112f0 <ResetMacParameters+0x1ac>)
 801123e:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011242:	4b2a      	ldr	r3, [pc, #168]	; (80112ec <ResetMacParameters+0x1a8>)
 8011244:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8011248:	4b29      	ldr	r3, [pc, #164]	; (80112f0 <ResetMacParameters+0x1ac>)
 801124a:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 801124e:	4b27      	ldr	r3, [pc, #156]	; (80112ec <ResetMacParameters+0x1a8>)
 8011250:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8011254:	4b26      	ldr	r3, [pc, #152]	; (80112f0 <ResetMacParameters+0x1ac>)
 8011256:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 801125a:	4b25      	ldr	r3, [pc, #148]	; (80112f0 <ResetMacParameters+0x1ac>)
 801125c:	2200      	movs	r2, #0
 801125e:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011262:	4b23      	ldr	r3, [pc, #140]	; (80112f0 <ResetMacParameters+0x1ac>)
 8011264:	2201      	movs	r2, #1
 8011266:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801126a:	4a21      	ldr	r2, [pc, #132]	; (80112f0 <ResetMacParameters+0x1ac>)
 801126c:	4b20      	ldr	r3, [pc, #128]	; (80112f0 <ResetMacParameters+0x1ac>)
 801126e:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8011272:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8011276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801127a:	682b      	ldr	r3, [r5, #0]
 801127c:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801127e:	4b1c      	ldr	r3, [pc, #112]	; (80112f0 <ResetMacParameters+0x1ac>)
 8011280:	2201      	movs	r2, #1
 8011282:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011286:	4b1a      	ldr	r3, [pc, #104]	; (80112f0 <ResetMacParameters+0x1ac>)
 8011288:	2202      	movs	r2, #2
 801128a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801128e:	2300      	movs	r3, #0
 8011290:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8011292:	2300      	movs	r3, #0
 8011294:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 8011296:	4b16      	ldr	r3, [pc, #88]	; (80112f0 <ResetMacParameters+0x1ac>)
 8011298:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801129c:	2b00      	cmp	r3, #0
 801129e:	d009      	beq.n	80112b4 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80112a0:	4b13      	ldr	r3, [pc, #76]	; (80112f0 <ResetMacParameters+0x1ac>)
 80112a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80112a6:	685b      	ldr	r3, [r3, #4]
 80112a8:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80112aa:	4b11      	ldr	r3, [pc, #68]	; (80112f0 <ResetMacParameters+0x1ac>)
 80112ac:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80112b0:	691b      	ldr	r3, [r3, #16]
 80112b2:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80112b4:	4b11      	ldr	r3, [pc, #68]	; (80112fc <ResetMacParameters+0x1b8>)
 80112b6:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80112b8:	4b11      	ldr	r3, [pc, #68]	; (8011300 <ResetMacParameters+0x1bc>)
 80112ba:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80112bc:	4b11      	ldr	r3, [pc, #68]	; (8011304 <ResetMacParameters+0x1c0>)
 80112be:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80112c0:	4b11      	ldr	r3, [pc, #68]	; (8011308 <ResetMacParameters+0x1c4>)
 80112c2:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80112c4:	4b11      	ldr	r3, [pc, #68]	; (801130c <ResetMacParameters+0x1c8>)
 80112c6:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80112c8:	4b11      	ldr	r3, [pc, #68]	; (8011310 <ResetMacParameters+0x1cc>)
 80112ca:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80112cc:	4b11      	ldr	r3, [pc, #68]	; (8011314 <ResetMacParameters+0x1d0>)
 80112ce:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80112d0:	4b11      	ldr	r3, [pc, #68]	; (8011318 <ResetMacParameters+0x1d4>)
 80112d2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80112d4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80112d8:	f107 0310 	add.w	r3, r7, #16
 80112dc:	4a0f      	ldr	r2, [pc, #60]	; (801131c <ResetMacParameters+0x1d8>)
 80112de:	4618      	mov	r0, r3
 80112e0:	f002 f88a 	bl	80133f8 <LoRaMacClassBInit>
}
 80112e4:	bf00      	nop
 80112e6:	3738      	adds	r7, #56	; 0x38
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bdb0      	pop	{r4, r5, r7, pc}
 80112ec:	20001134 	.word	0x20001134
 80112f0:	20000c28 	.word	0x20000c28
 80112f4:	20001314 	.word	0x20001314
 80112f8:	200013a8 	.word	0x200013a8
 80112fc:	20001088 	.word	0x20001088
 8011300:	20001044 	.word	0x20001044
 8011304:	20001074 	.word	0x20001074
 8011308:	200010ad 	.word	0x200010ad
 801130c:	20001208 	.word	0x20001208
 8011310:	20001174 	.word	0x20001174
 8011314:	20001178 	.word	0x20001178
 8011318:	2000120c 	.word	0x2000120c
 801131c:	20001844 	.word	0x20001844

08011320 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b082      	sub	sp, #8
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
 8011328:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f00a fc70 	bl	801bc10 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8011330:	4b11      	ldr	r3, [pc, #68]	; (8011378 <RxWindowSetup+0x58>)
 8011332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011334:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011336:	4b11      	ldr	r3, [pc, #68]	; (801137c <RxWindowSetup+0x5c>)
 8011338:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801133c:	4a10      	ldr	r2, [pc, #64]	; (8011380 <RxWindowSetup+0x60>)
 801133e:	6839      	ldr	r1, [r7, #0]
 8011340:	4618      	mov	r0, r3
 8011342:	f004 f898 	bl	8015476 <RegionRxConfig>
 8011346:	4603      	mov	r3, r0
 8011348:	2b00      	cmp	r3, #0
 801134a:	d010      	beq.n	801136e <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 801134c:	4b0d      	ldr	r3, [pc, #52]	; (8011384 <RxWindowSetup+0x64>)
 801134e:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 8011352:	4b0c      	ldr	r3, [pc, #48]	; (8011384 <RxWindowSetup+0x64>)
 8011354:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8011358:	4b07      	ldr	r3, [pc, #28]	; (8011378 <RxWindowSetup+0x58>)
 801135a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801135c:	4a07      	ldr	r2, [pc, #28]	; (801137c <RxWindowSetup+0x5c>)
 801135e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8011360:	4610      	mov	r0, r2
 8011362:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	7cda      	ldrb	r2, [r3, #19]
 8011368:	4b06      	ldr	r3, [pc, #24]	; (8011384 <RxWindowSetup+0x64>)
 801136a:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 801136e:	bf00      	nop
 8011370:	3708      	adds	r7, #8
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
 8011376:	bf00      	nop
 8011378:	0801d0b0 	.word	0x0801d0b0
 801137c:	20001134 	.word	0x20001134
 8011380:	20001048 	.word	0x20001048
 8011384:	20000c28 	.word	0x20000c28

08011388 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011388:	b590      	push	{r4, r7, lr}
 801138a:	b083      	sub	sp, #12
 801138c:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801138e:	4b1b      	ldr	r3, [pc, #108]	; (80113fc <OpenContinuousRxCWindow+0x74>)
 8011390:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8011394:	4b19      	ldr	r3, [pc, #100]	; (80113fc <OpenContinuousRxCWindow+0x74>)
 8011396:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801139a:	b259      	sxtb	r1, r3
 801139c:	4b17      	ldr	r3, [pc, #92]	; (80113fc <OpenContinuousRxCWindow+0x74>)
 801139e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80113a2:	4b16      	ldr	r3, [pc, #88]	; (80113fc <OpenContinuousRxCWindow+0x74>)
 80113a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113a6:	4c16      	ldr	r4, [pc, #88]	; (8011400 <OpenContinuousRxCWindow+0x78>)
 80113a8:	9400      	str	r4, [sp, #0]
 80113aa:	f004 f84a 	bl	8015442 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80113ae:	4b15      	ldr	r3, [pc, #84]	; (8011404 <OpenContinuousRxCWindow+0x7c>)
 80113b0:	2202      	movs	r2, #2
 80113b2:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80113b6:	4b13      	ldr	r3, [pc, #76]	; (8011404 <OpenContinuousRxCWindow+0x7c>)
 80113b8:	2201      	movs	r2, #1
 80113ba:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80113be:	4b0f      	ldr	r3, [pc, #60]	; (80113fc <OpenContinuousRxCWindow+0x74>)
 80113c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80113c4:	4a10      	ldr	r2, [pc, #64]	; (8011408 <OpenContinuousRxCWindow+0x80>)
 80113c6:	490e      	ldr	r1, [pc, #56]	; (8011400 <OpenContinuousRxCWindow+0x78>)
 80113c8:	4618      	mov	r0, r3
 80113ca:	f004 f854 	bl	8015476 <RegionRxConfig>
 80113ce:	4603      	mov	r3, r0
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d00f      	beq.n	80113f4 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80113d4:	4b0b      	ldr	r3, [pc, #44]	; (8011404 <OpenContinuousRxCWindow+0x7c>)
 80113d6:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 80113da:	4b0a      	ldr	r3, [pc, #40]	; (8011404 <OpenContinuousRxCWindow+0x7c>)
 80113dc:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 80113e0:	4b0a      	ldr	r3, [pc, #40]	; (801140c <OpenContinuousRxCWindow+0x84>)
 80113e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113e4:	2000      	movs	r0, #0
 80113e6:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80113e8:	4b06      	ldr	r3, [pc, #24]	; (8011404 <OpenContinuousRxCWindow+0x7c>)
 80113ea:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 80113ee:	4b05      	ldr	r3, [pc, #20]	; (8011404 <OpenContinuousRxCWindow+0x7c>)
 80113f0:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 80113f4:	bf00      	nop
 80113f6:	3704      	adds	r7, #4
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd90      	pop	{r4, r7, pc}
 80113fc:	20001134 	.word	0x20001134
 8011400:	20001008 	.word	0x20001008
 8011404:	20000c28 	.word	0x20000c28
 8011408:	20001048 	.word	0x20001048
 801140c:	0801d0b0 	.word	0x0801d0b0

08011410 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b088      	sub	sp, #32
 8011414:	af00      	add	r7, sp, #0
 8011416:	60f8      	str	r0, [r7, #12]
 8011418:	60b9      	str	r1, [r7, #8]
 801141a:	603b      	str	r3, [r7, #0]
 801141c:	4613      	mov	r3, r2
 801141e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8011420:	4b82      	ldr	r3, [pc, #520]	; (801162c <PrepareFrame+0x21c>)
 8011422:	2200      	movs	r2, #0
 8011424:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8011426:	4b81      	ldr	r3, [pc, #516]	; (801162c <PrepareFrame+0x21c>)
 8011428:	2200      	movs	r2, #0
 801142a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 801142e:	2300      	movs	r3, #0
 8011430:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8011432:	2300      	movs	r3, #0
 8011434:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8011436:	2300      	movs	r3, #0
 8011438:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d101      	bne.n	8011444 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8011440:	2300      	movs	r3, #0
 8011442:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8011444:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011446:	461a      	mov	r2, r3
 8011448:	6839      	ldr	r1, [r7, #0]
 801144a:	4879      	ldr	r0, [pc, #484]	; (8011630 <PrepareFrame+0x220>)
 801144c:	f006 fa95 	bl	801797a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8011450:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011452:	b2da      	uxtb	r2, r3
 8011454:	4b75      	ldr	r3, [pc, #468]	; (801162c <PrepareFrame+0x21c>)
 8011456:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	781a      	ldrb	r2, [r3, #0]
 801145e:	4b73      	ldr	r3, [pc, #460]	; (801162c <PrepareFrame+0x21c>)
 8011460:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	781b      	ldrb	r3, [r3, #0]
 8011466:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801146a:	b2db      	uxtb	r3, r3
 801146c:	2b07      	cmp	r3, #7
 801146e:	f000 80b9 	beq.w	80115e4 <PrepareFrame+0x1d4>
 8011472:	2b07      	cmp	r3, #7
 8011474:	f300 80d0 	bgt.w	8011618 <PrepareFrame+0x208>
 8011478:	2b02      	cmp	r3, #2
 801147a:	d006      	beq.n	801148a <PrepareFrame+0x7a>
 801147c:	2b04      	cmp	r3, #4
 801147e:	f040 80cb 	bne.w	8011618 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8011482:	4b6a      	ldr	r3, [pc, #424]	; (801162c <PrepareFrame+0x21c>)
 8011484:	2201      	movs	r2, #1
 8011486:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801148a:	4b68      	ldr	r3, [pc, #416]	; (801162c <PrepareFrame+0x21c>)
 801148c:	2204      	movs	r2, #4
 801148e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8011492:	4b66      	ldr	r3, [pc, #408]	; (801162c <PrepareFrame+0x21c>)
 8011494:	4a67      	ldr	r2, [pc, #412]	; (8011634 <PrepareFrame+0x224>)
 8011496:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801149a:	4b64      	ldr	r3, [pc, #400]	; (801162c <PrepareFrame+0x21c>)
 801149c:	22ff      	movs	r2, #255	; 0xff
 801149e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	781a      	ldrb	r2, [r3, #0]
 80114a6:	4b61      	ldr	r3, [pc, #388]	; (801162c <PrepareFrame+0x21c>)
 80114a8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80114ac:	4a5f      	ldr	r2, [pc, #380]	; (801162c <PrepareFrame+0x21c>)
 80114ae:	79fb      	ldrb	r3, [r7, #7]
 80114b0:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80114b4:	4b60      	ldr	r3, [pc, #384]	; (8011638 <PrepareFrame+0x228>)
 80114b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80114ba:	4a5c      	ldr	r2, [pc, #368]	; (801162c <PrepareFrame+0x21c>)
 80114bc:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	781a      	ldrb	r2, [r3, #0]
 80114c4:	4b59      	ldr	r3, [pc, #356]	; (801162c <PrepareFrame+0x21c>)
 80114c6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80114ca:	4b58      	ldr	r3, [pc, #352]	; (801162c <PrepareFrame+0x21c>)
 80114cc:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80114d0:	4b56      	ldr	r3, [pc, #344]	; (801162c <PrepareFrame+0x21c>)
 80114d2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80114d6:	4b55      	ldr	r3, [pc, #340]	; (801162c <PrepareFrame+0x21c>)
 80114d8:	4a55      	ldr	r2, [pc, #340]	; (8011630 <PrepareFrame+0x220>)
 80114da:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80114de:	f107 0318 	add.w	r3, r7, #24
 80114e2:	4618      	mov	r0, r3
 80114e4:	f003 f890 	bl	8014608 <LoRaMacCryptoGetFCntUp>
 80114e8:	4603      	mov	r3, r0
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d001      	beq.n	80114f2 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80114ee:	2312      	movs	r3, #18
 80114f0:	e098      	b.n	8011624 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80114f2:	69bb      	ldr	r3, [r7, #24]
 80114f4:	b29a      	uxth	r2, r3
 80114f6:	4b4d      	ldr	r3, [pc, #308]	; (801162c <PrepareFrame+0x21c>)
 80114f8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 80114fc:	4b4b      	ldr	r3, [pc, #300]	; (801162c <PrepareFrame+0x21c>)
 80114fe:	2200      	movs	r2, #0
 8011500:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8011504:	4b49      	ldr	r3, [pc, #292]	; (801162c <PrepareFrame+0x21c>)
 8011506:	2200      	movs	r2, #0
 8011508:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 801150c:	69bb      	ldr	r3, [r7, #24]
 801150e:	4a47      	ldr	r2, [pc, #284]	; (801162c <PrepareFrame+0x21c>)
 8011510:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011514:	f107 0314 	add.w	r3, r7, #20
 8011518:	4618      	mov	r0, r3
 801151a:	f002 fa2d 	bl	8013978 <LoRaMacCommandsGetSizeSerializedCmds>
 801151e:	4603      	mov	r3, r0
 8011520:	2b00      	cmp	r3, #0
 8011522:	d001      	beq.n	8011528 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011524:	2313      	movs	r3, #19
 8011526:	e07d      	b.n	8011624 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d076      	beq.n	801161c <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801152e:	4b42      	ldr	r3, [pc, #264]	; (8011638 <PrepareFrame+0x228>)
 8011530:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011534:	4618      	mov	r0, r3
 8011536:	f7fe fdb5 	bl	80100a4 <GetMaxAppPayloadWithoutFOptsLength>
 801153a:	4603      	mov	r3, r0
 801153c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801153e:	4b3b      	ldr	r3, [pc, #236]	; (801162c <PrepareFrame+0x21c>)
 8011540:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011544:	2b00      	cmp	r3, #0
 8011546:	d01d      	beq.n	8011584 <PrepareFrame+0x174>
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	2b0f      	cmp	r3, #15
 801154c:	d81a      	bhi.n	8011584 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801154e:	f107 0314 	add.w	r3, r7, #20
 8011552:	4a3a      	ldr	r2, [pc, #232]	; (801163c <PrepareFrame+0x22c>)
 8011554:	4619      	mov	r1, r3
 8011556:	200f      	movs	r0, #15
 8011558:	f002 fa24 	bl	80139a4 <LoRaMacCommandsSerializeCmds>
 801155c:	4603      	mov	r3, r0
 801155e:	2b00      	cmp	r3, #0
 8011560:	d001      	beq.n	8011566 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011562:	2313      	movs	r3, #19
 8011564:	e05e      	b.n	8011624 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	f003 030f 	and.w	r3, r3, #15
 801156c:	b2d9      	uxtb	r1, r3
 801156e:	68ba      	ldr	r2, [r7, #8]
 8011570:	7813      	ldrb	r3, [r2, #0]
 8011572:	f361 0303 	bfi	r3, r1, #0, #4
 8011576:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	781a      	ldrb	r2, [r3, #0]
 801157c:	4b2b      	ldr	r3, [pc, #172]	; (801162c <PrepareFrame+0x21c>)
 801157e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8011582:	e04b      	b.n	801161c <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011584:	4b29      	ldr	r3, [pc, #164]	; (801162c <PrepareFrame+0x21c>)
 8011586:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801158a:	2b00      	cmp	r3, #0
 801158c:	d010      	beq.n	80115b0 <PrepareFrame+0x1a0>
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	2b0f      	cmp	r3, #15
 8011592:	d90d      	bls.n	80115b0 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011594:	7ffb      	ldrb	r3, [r7, #31]
 8011596:	f107 0114 	add.w	r1, r7, #20
 801159a:	4a29      	ldr	r2, [pc, #164]	; (8011640 <PrepareFrame+0x230>)
 801159c:	4618      	mov	r0, r3
 801159e:	f002 fa01 	bl	80139a4 <LoRaMacCommandsSerializeCmds>
 80115a2:	4603      	mov	r3, r0
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d001      	beq.n	80115ac <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80115a8:	2313      	movs	r3, #19
 80115aa:	e03b      	b.n	8011624 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80115ac:	230a      	movs	r3, #10
 80115ae:	e039      	b.n	8011624 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80115b0:	7ffb      	ldrb	r3, [r7, #31]
 80115b2:	f107 0114 	add.w	r1, r7, #20
 80115b6:	4a22      	ldr	r2, [pc, #136]	; (8011640 <PrepareFrame+0x230>)
 80115b8:	4618      	mov	r0, r3
 80115ba:	f002 f9f3 	bl	80139a4 <LoRaMacCommandsSerializeCmds>
 80115be:	4603      	mov	r3, r0
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d001      	beq.n	80115c8 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80115c4:	2313      	movs	r3, #19
 80115c6:	e02d      	b.n	8011624 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80115c8:	4b18      	ldr	r3, [pc, #96]	; (801162c <PrepareFrame+0x21c>)
 80115ca:	2200      	movs	r2, #0
 80115cc:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80115d0:	4b16      	ldr	r3, [pc, #88]	; (801162c <PrepareFrame+0x21c>)
 80115d2:	4a1b      	ldr	r2, [pc, #108]	; (8011640 <PrepareFrame+0x230>)
 80115d4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	b2da      	uxtb	r2, r3
 80115dc:	4b13      	ldr	r3, [pc, #76]	; (801162c <PrepareFrame+0x21c>)
 80115de:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80115e2:	e01b      	b.n	801161c <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d01a      	beq.n	8011620 <PrepareFrame+0x210>
 80115ea:	4b10      	ldr	r3, [pc, #64]	; (801162c <PrepareFrame+0x21c>)
 80115ec:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d015      	beq.n	8011620 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80115f4:	4813      	ldr	r0, [pc, #76]	; (8011644 <PrepareFrame+0x234>)
 80115f6:	4b0d      	ldr	r3, [pc, #52]	; (801162c <PrepareFrame+0x21c>)
 80115f8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80115fc:	b29b      	uxth	r3, r3
 80115fe:	461a      	mov	r2, r3
 8011600:	6839      	ldr	r1, [r7, #0]
 8011602:	f006 f9ba 	bl	801797a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8011606:	4b09      	ldr	r3, [pc, #36]	; (801162c <PrepareFrame+0x21c>)
 8011608:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801160c:	b29b      	uxth	r3, r3
 801160e:	3301      	adds	r3, #1
 8011610:	b29a      	uxth	r2, r3
 8011612:	4b06      	ldr	r3, [pc, #24]	; (801162c <PrepareFrame+0x21c>)
 8011614:	801a      	strh	r2, [r3, #0]
            }
            break;
 8011616:	e003      	b.n	8011620 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011618:	2302      	movs	r3, #2
 801161a:	e003      	b.n	8011624 <PrepareFrame+0x214>
            break;
 801161c:	bf00      	nop
 801161e:	e000      	b.n	8011622 <PrepareFrame+0x212>
            break;
 8011620:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8011622:	2300      	movs	r3, #0
}
 8011624:	4618      	mov	r0, r3
 8011626:	3720      	adds	r7, #32
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}
 801162c:	20000c28 	.word	0x20000c28
 8011630:	20000d60 	.word	0x20000d60
 8011634:	20000c2a 	.word	0x20000c2a
 8011638:	20001134 	.word	0x20001134
 801163c:	20000d40 	.word	0x20000d40
 8011640:	200010b4 	.word	0x200010b4
 8011644:	20000c2b 	.word	0x20000c2b

08011648 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b08a      	sub	sp, #40	; 0x28
 801164c:	af00      	add	r7, sp, #0
 801164e:	4603      	mov	r3, r0
 8011650:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011652:	2303      	movs	r3, #3
 8011654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8011658:	2300      	movs	r3, #0
 801165a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 801165c:	79fb      	ldrb	r3, [r7, #7]
 801165e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011660:	4b47      	ldr	r3, [pc, #284]	; (8011780 <SendFrameOnChannel+0x138>)
 8011662:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011666:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011668:	4b45      	ldr	r3, [pc, #276]	; (8011780 <SendFrameOnChannel+0x138>)
 801166a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801166e:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8011670:	4b43      	ldr	r3, [pc, #268]	; (8011780 <SendFrameOnChannel+0x138>)
 8011672:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011674:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011676:	4b42      	ldr	r3, [pc, #264]	; (8011780 <SendFrameOnChannel+0x138>)
 8011678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801167a:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 801167c:	4b41      	ldr	r3, [pc, #260]	; (8011784 <SendFrameOnChannel+0x13c>)
 801167e:	881b      	ldrh	r3, [r3, #0]
 8011680:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8011682:	4b3f      	ldr	r3, [pc, #252]	; (8011780 <SendFrameOnChannel+0x138>)
 8011684:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011688:	f107 020f 	add.w	r2, r7, #15
 801168c:	f107 0110 	add.w	r1, r7, #16
 8011690:	4b3d      	ldr	r3, [pc, #244]	; (8011788 <SendFrameOnChannel+0x140>)
 8011692:	f003 ff05 	bl	80154a0 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011696:	4b3b      	ldr	r3, [pc, #236]	; (8011784 <SendFrameOnChannel+0x13c>)
 8011698:	2201      	movs	r2, #1
 801169a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801169e:	4b38      	ldr	r3, [pc, #224]	; (8011780 <SendFrameOnChannel+0x138>)
 80116a0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80116a4:	b2da      	uxtb	r2, r3
 80116a6:	4b37      	ldr	r3, [pc, #220]	; (8011784 <SendFrameOnChannel+0x13c>)
 80116a8:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 80116ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80116b0:	4b34      	ldr	r3, [pc, #208]	; (8011784 <SendFrameOnChannel+0x13c>)
 80116b2:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 80116b6:	79fb      	ldrb	r3, [r7, #7]
 80116b8:	4a32      	ldr	r2, [pc, #200]	; (8011784 <SendFrameOnChannel+0x13c>)
 80116ba:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80116be:	4b31      	ldr	r3, [pc, #196]	; (8011784 <SendFrameOnChannel+0x13c>)
 80116c0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80116c4:	4a2f      	ldr	r2, [pc, #188]	; (8011784 <SendFrameOnChannel+0x13c>)
 80116c6:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80116ca:	4b2e      	ldr	r3, [pc, #184]	; (8011784 <SendFrameOnChannel+0x13c>)
 80116cc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80116d0:	4a2c      	ldr	r2, [pc, #176]	; (8011784 <SendFrameOnChannel+0x13c>)
 80116d2:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80116d6:	f001 fefb 	bl	80134d0 <LoRaMacClassBIsBeaconModeActive>
 80116da:	4603      	mov	r3, r0
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d00b      	beq.n	80116f8 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80116e0:	4b28      	ldr	r3, [pc, #160]	; (8011784 <SendFrameOnChannel+0x13c>)
 80116e2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80116e6:	4618      	mov	r0, r3
 80116e8:	f001 ff5d 	bl	80135a6 <LoRaMacClassBIsUplinkCollision>
 80116ec:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80116ee:	6a3b      	ldr	r3, [r7, #32]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d001      	beq.n	80116f8 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80116f4:	2310      	movs	r3, #16
 80116f6:	e03e      	b.n	8011776 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80116f8:	4b21      	ldr	r3, [pc, #132]	; (8011780 <SendFrameOnChannel+0x138>)
 80116fa:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80116fe:	2b01      	cmp	r3, #1
 8011700:	d101      	bne.n	8011706 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8011702:	f001 ff5a 	bl	80135ba <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8011706:	f001 fef4 	bl	80134f2 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 801170a:	4b1d      	ldr	r3, [pc, #116]	; (8011780 <SendFrameOnChannel+0x138>)
 801170c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011710:	b2db      	uxtb	r3, r3
 8011712:	4a1c      	ldr	r2, [pc, #112]	; (8011784 <SendFrameOnChannel+0x13c>)
 8011714:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8011718:	4611      	mov	r1, r2
 801171a:	4618      	mov	r0, r3
 801171c:	f7ff fc7c 	bl	8011018 <SecureFrame>
 8011720:	4603      	mov	r3, r0
 8011722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8011726:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801172a:	2b00      	cmp	r3, #0
 801172c:	d002      	beq.n	8011734 <SendFrameOnChannel+0xec>
    {
        return status;
 801172e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011732:	e020      	b.n	8011776 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011734:	4b13      	ldr	r3, [pc, #76]	; (8011784 <SendFrameOnChannel+0x13c>)
 8011736:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801173a:	f043 0302 	orr.w	r3, r3, #2
 801173e:	4a11      	ldr	r2, [pc, #68]	; (8011784 <SendFrameOnChannel+0x13c>)
 8011740:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8011744:	4b0f      	ldr	r3, [pc, #60]	; (8011784 <SendFrameOnChannel+0x13c>)
 8011746:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801174a:	f083 0301 	eor.w	r3, r3, #1
 801174e:	b2db      	uxtb	r3, r3
 8011750:	2b00      	cmp	r3, #0
 8011752:	d007      	beq.n	8011764 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8011754:	4b0b      	ldr	r3, [pc, #44]	; (8011784 <SendFrameOnChannel+0x13c>)
 8011756:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801175a:	3301      	adds	r3, #1
 801175c:	b2da      	uxtb	r2, r3
 801175e:	4b09      	ldr	r3, [pc, #36]	; (8011784 <SendFrameOnChannel+0x13c>)
 8011760:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8011764:	4b09      	ldr	r3, [pc, #36]	; (801178c <SendFrameOnChannel+0x144>)
 8011766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011768:	4a06      	ldr	r2, [pc, #24]	; (8011784 <SendFrameOnChannel+0x13c>)
 801176a:	8812      	ldrh	r2, [r2, #0]
 801176c:	b2d2      	uxtb	r2, r2
 801176e:	4611      	mov	r1, r2
 8011770:	4807      	ldr	r0, [pc, #28]	; (8011790 <SendFrameOnChannel+0x148>)
 8011772:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8011774:	2300      	movs	r3, #0
}
 8011776:	4618      	mov	r0, r3
 8011778:	3728      	adds	r7, #40	; 0x28
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}
 801177e:	bf00      	nop
 8011780:	20001134 	.word	0x20001134
 8011784:	20000c28 	.word	0x20000c28
 8011788:	20001040 	.word	0x20001040
 801178c:	0801d0b0 	.word	0x0801d0b0
 8011790:	20000c2a 	.word	0x20000c2a

08011794 <SetTxContinuousWave>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b086      	sub	sp, #24
 8011798:	af00      	add	r7, sp, #0
 801179a:	4603      	mov	r3, r0
 801179c:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 801179e:	4b15      	ldr	r3, [pc, #84]	; (80117f4 <SetTxContinuousWave+0x60>)
 80117a0:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 80117a4:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80117a6:	4b14      	ldr	r3, [pc, #80]	; (80117f8 <SetTxContinuousWave+0x64>)
 80117a8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80117ac:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80117ae:	4b12      	ldr	r3, [pc, #72]	; (80117f8 <SetTxContinuousWave+0x64>)
 80117b0:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80117b4:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80117b6:	4b10      	ldr	r3, [pc, #64]	; (80117f8 <SetTxContinuousWave+0x64>)
 80117b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80117ba:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80117bc:	4b0e      	ldr	r3, [pc, #56]	; (80117f8 <SetTxContinuousWave+0x64>)
 80117be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117c0:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 80117c2:	88fb      	ldrh	r3, [r7, #6]
 80117c4:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 80117c6:	4b0c      	ldr	r3, [pc, #48]	; (80117f8 <SetTxContinuousWave+0x64>)
 80117c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80117cc:	f107 0208 	add.w	r2, r7, #8
 80117d0:	4611      	mov	r1, r2
 80117d2:	4618      	mov	r0, r3
 80117d4:	f003 ff13 	bl	80155fe <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80117d8:	4b06      	ldr	r3, [pc, #24]	; (80117f4 <SetTxContinuousWave+0x60>)
 80117da:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80117de:	f043 0302 	orr.w	r3, r3, #2
 80117e2:	4a04      	ldr	r2, [pc, #16]	; (80117f4 <SetTxContinuousWave+0x60>)
 80117e4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80117e8:	2300      	movs	r3, #0
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3718      	adds	r7, #24
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
 80117f2:	bf00      	nop
 80117f4:	20000c28 	.word	0x20000c28
 80117f8:	20001134 	.word	0x20001134

080117fc <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b082      	sub	sp, #8
 8011800:	af00      	add	r7, sp, #0
 8011802:	4603      	mov	r3, r0
 8011804:	6039      	str	r1, [r7, #0]
 8011806:	80fb      	strh	r3, [r7, #6]
 8011808:	4613      	mov	r3, r2
 801180a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 801180c:	4b09      	ldr	r3, [pc, #36]	; (8011834 <SetTxContinuousWave1+0x38>)
 801180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011810:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011814:	88fa      	ldrh	r2, [r7, #6]
 8011816:	6838      	ldr	r0, [r7, #0]
 8011818:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801181a:	4b07      	ldr	r3, [pc, #28]	; (8011838 <SetTxContinuousWave1+0x3c>)
 801181c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011820:	f043 0302 	orr.w	r3, r3, #2
 8011824:	4a04      	ldr	r2, [pc, #16]	; (8011838 <SetTxContinuousWave1+0x3c>)
 8011826:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801182a:	2300      	movs	r3, #0
}
 801182c:	4618      	mov	r0, r3
 801182e:	3708      	adds	r7, #8
 8011830:	46bd      	mov	sp, r7
 8011832:	bd80      	pop	{r7, pc}
 8011834:	0801d0b0 	.word	0x0801d0b0
 8011838:	20000c28 	.word	0x20000c28

0801183c <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b082      	sub	sp, #8
 8011840:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 8011842:	2300      	movs	r3, #0
 8011844:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8011846:	4b3e      	ldr	r3, [pc, #248]	; (8011940 <RestoreNvmData+0x104>)
 8011848:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801184c:	2b01      	cmp	r3, #1
 801184e:	d001      	beq.n	8011854 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8011850:	2301      	movs	r3, #1
 8011852:	e071      	b.n	8011938 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8011854:	2124      	movs	r1, #36	; 0x24
 8011856:	483b      	ldr	r0, [pc, #236]	; (8011944 <RestoreNvmData+0x108>)
 8011858:	f006 f8e4 	bl	8017a24 <Crc32>
 801185c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 801185e:	4b39      	ldr	r3, [pc, #228]	; (8011944 <RestoreNvmData+0x108>)
 8011860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011862:	687a      	ldr	r2, [r7, #4]
 8011864:	429a      	cmp	r2, r3
 8011866:	d001      	beq.n	801186c <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011868:	2317      	movs	r3, #23
 801186a:	e065      	b.n	8011938 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 801186c:	2114      	movs	r1, #20
 801186e:	4836      	ldr	r0, [pc, #216]	; (8011948 <RestoreNvmData+0x10c>)
 8011870:	f006 f8d8 	bl	8017a24 <Crc32>
 8011874:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8011876:	4b33      	ldr	r3, [pc, #204]	; (8011944 <RestoreNvmData+0x108>)
 8011878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801187a:	687a      	ldr	r2, [r7, #4]
 801187c:	429a      	cmp	r2, r3
 801187e:	d001      	beq.n	8011884 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011880:	2317      	movs	r3, #23
 8011882:	e059      	b.n	8011938 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8011884:	21dc      	movs	r1, #220	; 0xdc
 8011886:	4831      	ldr	r0, [pc, #196]	; (801194c <RestoreNvmData+0x110>)
 8011888:	f006 f8cc 	bl	8017a24 <Crc32>
 801188c:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 801188e:	4b2d      	ldr	r3, [pc, #180]	; (8011944 <RestoreNvmData+0x108>)
 8011890:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8011894:	687a      	ldr	r2, [r7, #4]
 8011896:	429a      	cmp	r2, r3
 8011898:	d001      	beq.n	801189e <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801189a:	2317      	movs	r3, #23
 801189c:	e04c      	b.n	8011938 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 801189e:	21bc      	movs	r1, #188	; 0xbc
 80118a0:	482b      	ldr	r0, [pc, #172]	; (8011950 <RestoreNvmData+0x114>)
 80118a2:	f006 f8bf 	bl	8017a24 <Crc32>
 80118a6:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 80118a8:	4b26      	ldr	r3, [pc, #152]	; (8011944 <RestoreNvmData+0x108>)
 80118aa:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80118ae:	687a      	ldr	r2, [r7, #4]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d001      	beq.n	80118b8 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80118b4:	2317      	movs	r3, #23
 80118b6:	e03f      	b.n	8011938 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 80118b8:	2190      	movs	r1, #144	; 0x90
 80118ba:	4826      	ldr	r0, [pc, #152]	; (8011954 <RestoreNvmData+0x118>)
 80118bc:	f006 f8b2 	bl	8017a24 <Crc32>
 80118c0:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 80118c2:	4b20      	ldr	r3, [pc, #128]	; (8011944 <RestoreNvmData+0x108>)
 80118c4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80118c8:	687a      	ldr	r2, [r7, #4]
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d001      	beq.n	80118d2 <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80118ce:	2317      	movs	r3, #23
 80118d0:	e032      	b.n	8011938 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80118d2:	2114      	movs	r1, #20
 80118d4:	4820      	ldr	r0, [pc, #128]	; (8011958 <RestoreNvmData+0x11c>)
 80118d6:	f006 f8a5 	bl	8017a24 <Crc32>
 80118da:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 80118dc:	4b19      	ldr	r3, [pc, #100]	; (8011944 <RestoreNvmData+0x108>)
 80118de:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 80118e2:	687a      	ldr	r2, [r7, #4]
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d001      	beq.n	80118ec <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80118e8:	2317      	movs	r3, #23
 80118ea:	e025      	b.n	8011938 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 80118ec:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80118f0:	4914      	ldr	r1, [pc, #80]	; (8011944 <RestoreNvmData+0x108>)
 80118f2:	481a      	ldr	r0, [pc, #104]	; (801195c <RestoreNvmData+0x120>)
 80118f4:	f006 f841 	bl	801797a <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 80118f8:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80118fc:	2100      	movs	r1, #0
 80118fe:	4811      	ldr	r0, [pc, #68]	; (8011944 <RestoreNvmData+0x108>)
 8011900:	f006 f876 	bl	80179f0 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011904:	4b0e      	ldr	r3, [pc, #56]	; (8011940 <RestoreNvmData+0x104>)
 8011906:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 801190a:	4b0d      	ldr	r3, [pc, #52]	; (8011940 <RestoreNvmData+0x104>)
 801190c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8011910:	4b12      	ldr	r3, [pc, #72]	; (801195c <RestoreNvmData+0x120>)
 8011912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011914:	4a0a      	ldr	r2, [pc, #40]	; (8011940 <RestoreNvmData+0x104>)
 8011916:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801191a:	4b10      	ldr	r3, [pc, #64]	; (801195c <RestoreNvmData+0x120>)
 801191c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8011920:	4b07      	ldr	r3, [pc, #28]	; (8011940 <RestoreNvmData+0x104>)
 8011922:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011926:	4b06      	ldr	r3, [pc, #24]	; (8011940 <RestoreNvmData+0x104>)
 8011928:	2201      	movs	r2, #1
 801192a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801192e:	4b04      	ldr	r3, [pc, #16]	; (8011940 <RestoreNvmData+0x104>)
 8011930:	2202      	movs	r2, #2
 8011932:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    return LORAMAC_STATUS_OK;
 8011936:	2300      	movs	r3, #0
}
 8011938:	4618      	mov	r0, r3
 801193a:	3708      	adds	r7, #8
 801193c:	46bd      	mov	sp, r7
 801193e:	bd80      	pop	{r7, pc}
 8011940:	20000c28 	.word	0x20000c28
 8011944:	2000185c 	.word	0x2000185c
 8011948:	20001884 	.word	0x20001884
 801194c:	2000189c 	.word	0x2000189c
 8011950:	2000197c 	.word	0x2000197c
 8011954:	20001a3c 	.word	0x20001a3c
 8011958:	20001f6c 	.word	0x20001f6c
 801195c:	20001134 	.word	0x20001134

08011960 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8011960:	b480      	push	{r7}
 8011962:	b083      	sub	sp, #12
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
 8011968:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d002      	beq.n	8011976 <DetermineFrameType+0x16>
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d101      	bne.n	801197a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011976:	2303      	movs	r3, #3
 8011978:	e03b      	b.n	80119f2 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	7b1b      	ldrb	r3, [r3, #12]
 801197e:	f003 030f 	and.w	r3, r3, #15
 8011982:	b2db      	uxtb	r3, r3
 8011984:	2b00      	cmp	r3, #0
 8011986:	d008      	beq.n	801199a <DetermineFrameType+0x3a>
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d003      	beq.n	801199a <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	2200      	movs	r2, #0
 8011996:	701a      	strb	r2, [r3, #0]
 8011998:	e02a      	b.n	80119f0 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d103      	bne.n	80119ac <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	2201      	movs	r2, #1
 80119a8:	701a      	strb	r2, [r3, #0]
 80119aa:	e021      	b.n	80119f0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	7b1b      	ldrb	r3, [r3, #12]
 80119b0:	f003 030f 	and.w	r3, r3, #15
 80119b4:	b2db      	uxtb	r3, r3
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d108      	bne.n	80119cc <DetermineFrameType+0x6c>
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d103      	bne.n	80119cc <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80119c4:	683b      	ldr	r3, [r7, #0]
 80119c6:	2202      	movs	r2, #2
 80119c8:	701a      	strb	r2, [r3, #0]
 80119ca:	e011      	b.n	80119f0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	7b1b      	ldrb	r3, [r3, #12]
 80119d0:	f003 030f 	and.w	r3, r3, #15
 80119d4:	b2db      	uxtb	r3, r3
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d108      	bne.n	80119ec <DetermineFrameType+0x8c>
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d003      	beq.n	80119ec <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	2203      	movs	r2, #3
 80119e8:	701a      	strb	r2, [r3, #0]
 80119ea:	e001      	b.n	80119f0 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80119ec:	2318      	movs	r3, #24
 80119ee:	e000      	b.n	80119f2 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80119f0:	2300      	movs	r3, #0
}
 80119f2:	4618      	mov	r0, r3
 80119f4:	370c      	adds	r7, #12
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bc80      	pop	{r7}
 80119fa:	4770      	bx	lr

080119fc <CheckRetransUnconfirmedUplink>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 80119fc:	b480      	push	{r7}
 80119fe:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8011a00:	4b12      	ldr	r3, [pc, #72]	; (8011a4c <CheckRetransUnconfirmedUplink+0x50>)
 8011a02:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8011a06:	4b12      	ldr	r3, [pc, #72]	; (8011a50 <CheckRetransUnconfirmedUplink+0x54>)
 8011a08:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8011a0c:	429a      	cmp	r2, r3
 8011a0e:	d301      	bcc.n	8011a14 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8011a10:	2301      	movs	r3, #1
 8011a12:	e016      	b.n	8011a42 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011a14:	4b0d      	ldr	r3, [pc, #52]	; (8011a4c <CheckRetransUnconfirmedUplink+0x50>)
 8011a16:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011a1a:	f003 0302 	and.w	r3, r3, #2
 8011a1e:	b2db      	uxtb	r3, r3
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d00d      	beq.n	8011a40 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011a24:	4b0a      	ldr	r3, [pc, #40]	; (8011a50 <CheckRetransUnconfirmedUplink+0x54>)
 8011a26:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d101      	bne.n	8011a32 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8011a2e:	2301      	movs	r3, #1
 8011a30:	e007      	b.n	8011a42 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8011a32:	4b06      	ldr	r3, [pc, #24]	; (8011a4c <CheckRetransUnconfirmedUplink+0x50>)
 8011a34:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d101      	bne.n	8011a40 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	e000      	b.n	8011a42 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8011a40:	2300      	movs	r3, #0
}
 8011a42:	4618      	mov	r0, r3
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bc80      	pop	{r7}
 8011a48:	4770      	bx	lr
 8011a4a:	bf00      	nop
 8011a4c:	20000c28 	.word	0x20000c28
 8011a50:	20001134 	.word	0x20001134

08011a54 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8011a54:	b480      	push	{r7}
 8011a56:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8011a58:	4b0e      	ldr	r3, [pc, #56]	; (8011a94 <CheckRetransConfirmedUplink+0x40>)
 8011a5a:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 8011a5e:	4b0d      	ldr	r3, [pc, #52]	; (8011a94 <CheckRetransConfirmedUplink+0x40>)
 8011a60:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d301      	bcc.n	8011a6c <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8011a68:	2301      	movs	r3, #1
 8011a6a:	e00f      	b.n	8011a8c <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011a6c:	4b09      	ldr	r3, [pc, #36]	; (8011a94 <CheckRetransConfirmedUplink+0x40>)
 8011a6e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011a72:	f003 0302 	and.w	r3, r3, #2
 8011a76:	b2db      	uxtb	r3, r3
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d006      	beq.n	8011a8a <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011a7c:	4b05      	ldr	r3, [pc, #20]	; (8011a94 <CheckRetransConfirmedUplink+0x40>)
 8011a7e:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d001      	beq.n	8011a8a <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8011a86:	2301      	movs	r3, #1
 8011a88:	e000      	b.n	8011a8c <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8011a8a:	2300      	movs	r3, #0
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bc80      	pop	{r7}
 8011a92:	4770      	bx	lr
 8011a94:	20000c28 	.word	0x20000c28

08011a98 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8011a98:	b480      	push	{r7}
 8011a9a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011a9c:	4b1a      	ldr	r3, [pc, #104]	; (8011b08 <StopRetransmission+0x70>)
 8011a9e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011aa2:	f003 0302 	and.w	r3, r3, #2
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d009      	beq.n	8011ac0 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011aac:	4b16      	ldr	r3, [pc, #88]	; (8011b08 <StopRetransmission+0x70>)
 8011aae:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d00e      	beq.n	8011ad4 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8011ab6:	4b14      	ldr	r3, [pc, #80]	; (8011b08 <StopRetransmission+0x70>)
 8011ab8:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011abc:	2b01      	cmp	r3, #1
 8011abe:	d009      	beq.n	8011ad4 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8011ac0:	4b12      	ldr	r3, [pc, #72]	; (8011b0c <StopRetransmission+0x74>)
 8011ac2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d004      	beq.n	8011ad4 <StopRetransmission+0x3c>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8011aca:	4b10      	ldr	r3, [pc, #64]	; (8011b0c <StopRetransmission+0x74>)
 8011acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ace:	3301      	adds	r3, #1
 8011ad0:	4a0e      	ldr	r2, [pc, #56]	; (8011b0c <StopRetransmission+0x74>)
 8011ad2:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8011ad4:	4b0c      	ldr	r3, [pc, #48]	; (8011b08 <StopRetransmission+0x70>)
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8011adc:	4b0a      	ldr	r3, [pc, #40]	; (8011b08 <StopRetransmission+0x70>)
 8011ade:	2200      	movs	r2, #0
 8011ae0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8011ae4:	4b08      	ldr	r3, [pc, #32]	; (8011b08 <StopRetransmission+0x70>)
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011aec:	4b06      	ldr	r3, [pc, #24]	; (8011b08 <StopRetransmission+0x70>)
 8011aee:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011af2:	f023 0302 	bic.w	r3, r3, #2
 8011af6:	4a04      	ldr	r2, [pc, #16]	; (8011b08 <StopRetransmission+0x70>)
 8011af8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8011afc:	2301      	movs	r3, #1
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	46bd      	mov	sp, r7
 8011b02:	bc80      	pop	{r7}
 8011b04:	4770      	bx	lr
 8011b06:	bf00      	nop
 8011b08:	20000c28 	.word	0x20000c28
 8011b0c:	20001134 	.word	0x20001134

08011b10 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b082      	sub	sp, #8
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	4603      	mov	r3, r0
 8011b18:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8011b1a:	4b0b      	ldr	r3, [pc, #44]	; (8011b48 <CallNvmDataChangeCallback+0x38>)
 8011b1c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d00c      	beq.n	8011b3e <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8011b24:	4b08      	ldr	r3, [pc, #32]	; (8011b48 <CallNvmDataChangeCallback+0x38>)
 8011b26:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011b2a:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d006      	beq.n	8011b3e <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8011b30:	4b05      	ldr	r3, [pc, #20]	; (8011b48 <CallNvmDataChangeCallback+0x38>)
 8011b32:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011b36:	68db      	ldr	r3, [r3, #12]
 8011b38:	88fa      	ldrh	r2, [r7, #6]
 8011b3a:	4610      	mov	r0, r2
 8011b3c:	4798      	blx	r3
    }
}
 8011b3e:	bf00      	nop
 8011b40:	3708      	adds	r7, #8
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
 8011b46:	bf00      	nop
 8011b48:	20000c28 	.word	0x20000c28

08011b4c <AckTimeoutRetriesProcess>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b084      	sub	sp, #16
 8011b50:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8011b52:	4b1b      	ldr	r3, [pc, #108]	; (8011bc0 <AckTimeoutRetriesProcess+0x74>)
 8011b54:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8011b58:	4b19      	ldr	r3, [pc, #100]	; (8011bc0 <AckTimeoutRetriesProcess+0x74>)
 8011b5a:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d229      	bcs.n	8011bb6 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8011b62:	4b17      	ldr	r3, [pc, #92]	; (8011bc0 <AckTimeoutRetriesProcess+0x74>)
 8011b64:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8011b68:	3301      	adds	r3, #1
 8011b6a:	b2da      	uxtb	r2, r3
 8011b6c:	4b14      	ldr	r3, [pc, #80]	; (8011bc0 <AckTimeoutRetriesProcess+0x74>)
 8011b6e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8011b72:	4b13      	ldr	r3, [pc, #76]	; (8011bc0 <AckTimeoutRetriesProcess+0x74>)
 8011b74:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8011b78:	f003 0301 	and.w	r3, r3, #1
 8011b7c:	b2db      	uxtb	r3, r3
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d019      	beq.n	8011bb6 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011b82:	2322      	movs	r3, #34	; 0x22
 8011b84:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011b86:	4b0f      	ldr	r3, [pc, #60]	; (8011bc4 <AckTimeoutRetriesProcess+0x78>)
 8011b88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011b8c:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011b8e:	4b0d      	ldr	r3, [pc, #52]	; (8011bc4 <AckTimeoutRetriesProcess+0x78>)
 8011b90:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011b94:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b96:	4b0b      	ldr	r3, [pc, #44]	; (8011bc4 <AckTimeoutRetriesProcess+0x78>)
 8011b98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b9c:	f107 0208 	add.w	r2, r7, #8
 8011ba0:	4611      	mov	r1, r2
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f003 fbd6 	bl	8015354 <RegionGetPhyParam>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	b25a      	sxtb	r2, r3
 8011bb0:	4b04      	ldr	r3, [pc, #16]	; (8011bc4 <AckTimeoutRetriesProcess+0x78>)
 8011bb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8011bb6:	bf00      	nop
 8011bb8:	3710      	adds	r7, #16
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}
 8011bbe:	bf00      	nop
 8011bc0:	20000c28 	.word	0x20000c28
 8011bc4:	20001134 	.word	0x20001134

08011bc8 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b084      	sub	sp, #16
 8011bcc:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8011bce:	4b14      	ldr	r3, [pc, #80]	; (8011c20 <AckTimeoutRetriesFinalize+0x58>)
 8011bd0:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8011bd4:	f083 0301 	eor.w	r3, r3, #1
 8011bd8:	b2db      	uxtb	r3, r3
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d015      	beq.n	8011c0a <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011bde:	2302      	movs	r3, #2
 8011be0:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8011be2:	4b10      	ldr	r3, [pc, #64]	; (8011c24 <AckTimeoutRetriesFinalize+0x5c>)
 8011be4:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8011be6:	4b10      	ldr	r3, [pc, #64]	; (8011c28 <AckTimeoutRetriesFinalize+0x60>)
 8011be8:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011bea:	4b10      	ldr	r3, [pc, #64]	; (8011c2c <AckTimeoutRetriesFinalize+0x64>)
 8011bec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011bf0:	1d3a      	adds	r2, r7, #4
 8011bf2:	4611      	mov	r1, r2
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f003 fbd6 	bl	80153a6 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8011bfa:	4b09      	ldr	r3, [pc, #36]	; (8011c20 <AckTimeoutRetriesFinalize+0x58>)
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8011c02:	4b07      	ldr	r3, [pc, #28]	; (8011c20 <AckTimeoutRetriesFinalize+0x58>)
 8011c04:	2200      	movs	r2, #0
 8011c06:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8011c0a:	4b05      	ldr	r3, [pc, #20]	; (8011c20 <AckTimeoutRetriesFinalize+0x58>)
 8011c0c:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8011c10:	4b03      	ldr	r3, [pc, #12]	; (8011c20 <AckTimeoutRetriesFinalize+0x58>)
 8011c12:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8011c16:	bf00      	nop
 8011c18:	3710      	adds	r7, #16
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}
 8011c1e:	bf00      	nop
 8011c20:	20000c28 	.word	0x20000c28
 8011c24:	20001314 	.word	0x20001314
 8011c28:	200013a8 	.word	0x200013a8
 8011c2c:	20001134 	.word	0x20001134

08011c30 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8011c30:	b480      	push	{r7}
 8011c32:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011c34:	4b0b      	ldr	r3, [pc, #44]	; (8011c64 <IsRequestPending+0x34>)
 8011c36:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011c3a:	f003 0304 	and.w	r3, r3, #4
 8011c3e:	b2db      	uxtb	r3, r3
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d107      	bne.n	8011c54 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8011c44:	4b07      	ldr	r3, [pc, #28]	; (8011c64 <IsRequestPending+0x34>)
 8011c46:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011c4a:	f003 0301 	and.w	r3, r3, #1
 8011c4e:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d001      	beq.n	8011c58 <IsRequestPending+0x28>
    {
        return 1;
 8011c54:	2301      	movs	r3, #1
 8011c56:	e000      	b.n	8011c5a <IsRequestPending+0x2a>
    }
    return 0;
 8011c58:	2300      	movs	r3, #0
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	bc80      	pop	{r7}
 8011c60:	4770      	bx	lr
 8011c62:	bf00      	nop
 8011c64:	20000c28 	.word	0x20000c28

08011c68 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8011c68:	b590      	push	{r4, r7, lr}
 8011c6a:	b08f      	sub	sp, #60	; 0x3c
 8011c6c:	af02      	add	r7, sp, #8
 8011c6e:	6178      	str	r0, [r7, #20]
 8011c70:	6139      	str	r1, [r7, #16]
 8011c72:	4613      	mov	r3, r2
 8011c74:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8011c76:	697b      	ldr	r3, [r7, #20]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d002      	beq.n	8011c82 <LoRaMacInitialization+0x1a>
 8011c7c:	693b      	ldr	r3, [r7, #16]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d101      	bne.n	8011c86 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011c82:	2303      	movs	r3, #3
 8011c84:	e275      	b.n	8012172 <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d00b      	beq.n	8011ca6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d007      	beq.n	8011ca6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d003      	beq.n	8011ca6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d101      	bne.n	8011caa <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011ca6:	2303      	movs	r3, #3
 8011ca8:	e263      	b.n	8012172 <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8011caa:	7bfb      	ldrb	r3, [r7, #15]
 8011cac:	4618      	mov	r0, r3
 8011cae:	f003 fb41 	bl	8015334 <RegionIsActive>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	f083 0301 	eor.w	r3, r3, #1
 8011cb8:	b2db      	uxtb	r3, r3
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d001      	beq.n	8011cc2 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8011cbe:	2309      	movs	r3, #9
 8011cc0:	e257      	b.n	8012172 <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8011cc2:	6978      	ldr	r0, [r7, #20]
 8011cc4:	f001 ffb8 	bl	8013c38 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8011cc8:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8011ccc:	2100      	movs	r1, #0
 8011cce:	48c7      	ldr	r0, [pc, #796]	; (8011fec <LoRaMacInitialization+0x384>)
 8011cd0:	f005 fe8e 	bl	80179f0 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8011cd4:	f240 520c 	movw	r2, #1292	; 0x50c
 8011cd8:	2100      	movs	r1, #0
 8011cda:	48c5      	ldr	r0, [pc, #788]	; (8011ff0 <LoRaMacInitialization+0x388>)
 8011cdc:	f005 fe88 	bl	80179f0 <memset1>

    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011ce0:	4bc3      	ldr	r3, [pc, #780]	; (8011ff0 <LoRaMacInitialization+0x388>)
 8011ce2:	2201      	movs	r2, #1
 8011ce4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8011ce8:	4bc1      	ldr	r3, [pc, #772]	; (8011ff0 <LoRaMacInitialization+0x388>)
 8011cea:	2201      	movs	r2, #1
 8011cec:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8011cf0:	4abe      	ldr	r2, [pc, #760]	; (8011fec <LoRaMacInitialization+0x384>)
 8011cf2:	7bfb      	ldrb	r3, [r7, #15]
 8011cf4:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8011cf8:	4bbc      	ldr	r3, [pc, #752]	; (8011fec <LoRaMacInitialization+0x384>)
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8011d00:	4bba      	ldr	r3, [pc, #744]	; (8011fec <LoRaMacInitialization+0x384>)
 8011d02:	2200      	movs	r2, #0
 8011d04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8011d08:	4bb8      	ldr	r3, [pc, #736]	; (8011fec <LoRaMacInitialization+0x384>)
 8011d0a:	4aba      	ldr	r2, [pc, #744]	; (8011ff4 <LoRaMacInitialization+0x38c>)
 8011d0c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8011d10:	230f      	movs	r3, #15
 8011d12:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d16:	4bb5      	ldr	r3, [pc, #724]	; (8011fec <LoRaMacInitialization+0x384>)
 8011d18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d1c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011d20:	4611      	mov	r1, r2
 8011d22:	4618      	mov	r0, r3
 8011d24:	f003 fb16 	bl	8015354 <RegionGetPhyParam>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8011d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	bf14      	ite	ne
 8011d32:	2301      	movne	r3, #1
 8011d34:	2300      	moveq	r3, #0
 8011d36:	b2da      	uxtb	r2, r3
 8011d38:	4bac      	ldr	r3, [pc, #688]	; (8011fec <LoRaMacInitialization+0x384>)
 8011d3a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8011d3e:	230a      	movs	r3, #10
 8011d40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d44:	4ba9      	ldr	r3, [pc, #676]	; (8011fec <LoRaMacInitialization+0x384>)
 8011d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011d4e:	4611      	mov	r1, r2
 8011d50:	4618      	mov	r0, r3
 8011d52:	f003 faff 	bl	8015354 <RegionGetPhyParam>
 8011d56:	4603      	mov	r3, r0
 8011d58:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8011d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5c:	b25a      	sxtb	r2, r3
 8011d5e:	4ba3      	ldr	r3, [pc, #652]	; (8011fec <LoRaMacInitialization+0x384>)
 8011d60:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8011d64:	2306      	movs	r3, #6
 8011d66:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d6a:	4ba0      	ldr	r3, [pc, #640]	; (8011fec <LoRaMacInitialization+0x384>)
 8011d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d70:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011d74:	4611      	mov	r1, r2
 8011d76:	4618      	mov	r0, r3
 8011d78:	f003 faec 	bl	8015354 <RegionGetPhyParam>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8011d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d82:	b25a      	sxtb	r2, r3
 8011d84:	4b99      	ldr	r3, [pc, #612]	; (8011fec <LoRaMacInitialization+0x384>)
 8011d86:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8011d8a:	2310      	movs	r3, #16
 8011d8c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d90:	4b96      	ldr	r3, [pc, #600]	; (8011fec <LoRaMacInitialization+0x384>)
 8011d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011d9a:	4611      	mov	r1, r2
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f003 fad9 	bl	8015354 <RegionGetPhyParam>
 8011da2:	4603      	mov	r3, r0
 8011da4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8011da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da8:	4a90      	ldr	r2, [pc, #576]	; (8011fec <LoRaMacInitialization+0x384>)
 8011daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8011dae:	2311      	movs	r3, #17
 8011db0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011db4:	4b8d      	ldr	r3, [pc, #564]	; (8011fec <LoRaMacInitialization+0x384>)
 8011db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011dba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011dbe:	4611      	mov	r1, r2
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f003 fac7 	bl	8015354 <RegionGetPhyParam>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8011dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dcc:	4a87      	ldr	r2, [pc, #540]	; (8011fec <LoRaMacInitialization+0x384>)
 8011dce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8011dd2:	2312      	movs	r3, #18
 8011dd4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011dd8:	4b84      	ldr	r3, [pc, #528]	; (8011fec <LoRaMacInitialization+0x384>)
 8011dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011dde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011de2:	4611      	mov	r1, r2
 8011de4:	4618      	mov	r0, r3
 8011de6:	f003 fab5 	bl	8015354 <RegionGetPhyParam>
 8011dea:	4603      	mov	r3, r0
 8011dec:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8011dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df0:	4a7e      	ldr	r2, [pc, #504]	; (8011fec <LoRaMacInitialization+0x384>)
 8011df2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8011df6:	2313      	movs	r3, #19
 8011df8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011dfc:	4b7b      	ldr	r3, [pc, #492]	; (8011fec <LoRaMacInitialization+0x384>)
 8011dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011e06:	4611      	mov	r1, r2
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f003 faa3 	bl	8015354 <RegionGetPhyParam>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8011e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e14:	4a75      	ldr	r2, [pc, #468]	; (8011fec <LoRaMacInitialization+0x384>)
 8011e16:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8011e1a:	2314      	movs	r3, #20
 8011e1c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e20:	4b72      	ldr	r3, [pc, #456]	; (8011fec <LoRaMacInitialization+0x384>)
 8011e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011e2a:	4611      	mov	r1, r2
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f003 fa91 	bl	8015354 <RegionGetPhyParam>
 8011e32:	4603      	mov	r3, r0
 8011e34:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8011e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e38:	4a6c      	ldr	r2, [pc, #432]	; (8011fec <LoRaMacInitialization+0x384>)
 8011e3a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8011e3e:	2317      	movs	r3, #23
 8011e40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e44:	4b69      	ldr	r3, [pc, #420]	; (8011fec <LoRaMacInitialization+0x384>)
 8011e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011e4e:	4611      	mov	r1, r2
 8011e50:	4618      	mov	r0, r3
 8011e52:	f003 fa7f 	bl	8015354 <RegionGetPhyParam>
 8011e56:	4603      	mov	r3, r0
 8011e58:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8011e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e5c:	b2da      	uxtb	r2, r3
 8011e5e:	4b63      	ldr	r3, [pc, #396]	; (8011fec <LoRaMacInitialization+0x384>)
 8011e60:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8011e64:	2318      	movs	r3, #24
 8011e66:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e6a:	4b60      	ldr	r3, [pc, #384]	; (8011fec <LoRaMacInitialization+0x384>)
 8011e6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e70:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011e74:	4611      	mov	r1, r2
 8011e76:	4618      	mov	r0, r3
 8011e78:	f003 fa6c 	bl	8015354 <RegionGetPhyParam>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e82:	4a5a      	ldr	r2, [pc, #360]	; (8011fec <LoRaMacInitialization+0x384>)
 8011e84:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e8a:	4a58      	ldr	r2, [pc, #352]	; (8011fec <LoRaMacInitialization+0x384>)
 8011e8c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011e90:	2319      	movs	r3, #25
 8011e92:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e96:	4b55      	ldr	r3, [pc, #340]	; (8011fec <LoRaMacInitialization+0x384>)
 8011e98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e9c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011ea0:	4611      	mov	r1, r2
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f003 fa56 	bl	8015354 <RegionGetPhyParam>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8011eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eae:	b2da      	uxtb	r2, r3
 8011eb0:	4b4e      	ldr	r3, [pc, #312]	; (8011fec <LoRaMacInitialization+0x384>)
 8011eb2:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8011eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb8:	b2da      	uxtb	r2, r3
 8011eba:	4b4c      	ldr	r3, [pc, #304]	; (8011fec <LoRaMacInitialization+0x384>)
 8011ebc:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011ec0:	231e      	movs	r3, #30
 8011ec2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ec6:	4b49      	ldr	r3, [pc, #292]	; (8011fec <LoRaMacInitialization+0x384>)
 8011ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ecc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011ed0:	4611      	mov	r1, r2
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f003 fa3e 	bl	8015354 <RegionGetPhyParam>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ede:	b2da      	uxtb	r2, r3
 8011ee0:	4b42      	ldr	r3, [pc, #264]	; (8011fec <LoRaMacInitialization+0x384>)
 8011ee2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8011ee6:	231f      	movs	r3, #31
 8011ee8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011eec:	4b3f      	ldr	r3, [pc, #252]	; (8011fec <LoRaMacInitialization+0x384>)
 8011eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ef2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011ef6:	4611      	mov	r1, r2
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f003 fa2b 	bl	8015354 <RegionGetPhyParam>
 8011efe:	4603      	mov	r3, r0
 8011f00:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8011f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f04:	b2da      	uxtb	r2, r3
 8011f06:	4b39      	ldr	r3, [pc, #228]	; (8011fec <LoRaMacInitialization+0x384>)
 8011f08:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8011f0c:	2320      	movs	r3, #32
 8011f0e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f12:	4b36      	ldr	r3, [pc, #216]	; (8011fec <LoRaMacInitialization+0x384>)
 8011f14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f18:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011f1c:	4611      	mov	r1, r2
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f003 fa18 	bl	8015354 <RegionGetPhyParam>
 8011f24:	4603      	mov	r3, r0
 8011f26:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8011f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f2a:	4a30      	ldr	r2, [pc, #192]	; (8011fec <LoRaMacInitialization+0x384>)
 8011f2c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8011f30:	2321      	movs	r3, #33	; 0x21
 8011f32:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f36:	4b2d      	ldr	r3, [pc, #180]	; (8011fec <LoRaMacInitialization+0x384>)
 8011f38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f3c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011f40:	4611      	mov	r1, r2
 8011f42:	4618      	mov	r0, r3
 8011f44:	f003 fa06 	bl	8015354 <RegionGetPhyParam>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8011f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4e:	4a27      	ldr	r2, [pc, #156]	; (8011fec <LoRaMacInitialization+0x384>)
 8011f50:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8011f54:	230b      	movs	r3, #11
 8011f56:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f5a:	4b24      	ldr	r3, [pc, #144]	; (8011fec <LoRaMacInitialization+0x384>)
 8011f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f60:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011f64:	4611      	mov	r1, r2
 8011f66:	4618      	mov	r0, r3
 8011f68:	f003 f9f4 	bl	8015354 <RegionGetPhyParam>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8011f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f72:	b29a      	uxth	r2, r3
 8011f74:	4b1e      	ldr	r3, [pc, #120]	; (8011ff0 <LoRaMacInitialization+0x388>)
 8011f76:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011f7a:	230c      	movs	r3, #12
 8011f7c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f80:	4b1a      	ldr	r3, [pc, #104]	; (8011fec <LoRaMacInitialization+0x384>)
 8011f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011f8a:	4611      	mov	r1, r2
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f003 f9e1 	bl	8015354 <RegionGetPhyParam>
 8011f92:	4603      	mov	r3, r0
 8011f94:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8011f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f98:	b29a      	uxth	r2, r3
 8011f9a:	4b15      	ldr	r3, [pc, #84]	; (8011ff0 <LoRaMacInitialization+0x388>)
 8011f9c:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011fa0:	4b12      	ldr	r3, [pc, #72]	; (8011fec <LoRaMacInitialization+0x384>)
 8011fa2:	2201      	movs	r2, #1
 8011fa4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011fa8:	4b10      	ldr	r3, [pc, #64]	; (8011fec <LoRaMacInitialization+0x384>)
 8011faa:	220a      	movs	r2, #10
 8011fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011fb0:	4b0e      	ldr	r3, [pc, #56]	; (8011fec <LoRaMacInitialization+0x384>)
 8011fb2:	2206      	movs	r2, #6
 8011fb4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011fb8:	4b0c      	ldr	r3, [pc, #48]	; (8011fec <LoRaMacInitialization+0x384>)
 8011fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011fbe:	4a0b      	ldr	r2, [pc, #44]	; (8011fec <LoRaMacInitialization+0x384>)
 8011fc0:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8011fc2:	4b0a      	ldr	r3, [pc, #40]	; (8011fec <LoRaMacInitialization+0x384>)
 8011fc4:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011fc8:	4b08      	ldr	r3, [pc, #32]	; (8011fec <LoRaMacInitialization+0x384>)
 8011fca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011fce:	4b07      	ldr	r3, [pc, #28]	; (8011fec <LoRaMacInitialization+0x384>)
 8011fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fd4:	4a05      	ldr	r2, [pc, #20]	; (8011fec <LoRaMacInitialization+0x384>)
 8011fd6:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8011fd8:	4b04      	ldr	r3, [pc, #16]	; (8011fec <LoRaMacInitialization+0x384>)
 8011fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011fde:	4a03      	ldr	r2, [pc, #12]	; (8011fec <LoRaMacInitialization+0x384>)
 8011fe0:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8011fe2:	4b02      	ldr	r3, [pc, #8]	; (8011fec <LoRaMacInitialization+0x384>)
 8011fe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011fe8:	e006      	b.n	8011ff8 <LoRaMacInitialization+0x390>
 8011fea:	bf00      	nop
 8011fec:	20001134 	.word	0x20001134
 8011ff0:	20000c28 	.word	0x20000c28
 8011ff4:	01000300 	.word	0x01000300
 8011ff8:	4a60      	ldr	r2, [pc, #384]	; (801217c <LoRaMacInitialization+0x514>)
 8011ffa:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8011ffc:	4b5f      	ldr	r3, [pc, #380]	; (801217c <LoRaMacInitialization+0x514>)
 8011ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012002:	4a5e      	ldr	r2, [pc, #376]	; (801217c <LoRaMacInitialization+0x514>)
 8012004:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8012006:	4b5d      	ldr	r3, [pc, #372]	; (801217c <LoRaMacInitialization+0x514>)
 8012008:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801200c:	4a5b      	ldr	r2, [pc, #364]	; (801217c <LoRaMacInitialization+0x514>)
 801200e:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8012010:	4b5a      	ldr	r3, [pc, #360]	; (801217c <LoRaMacInitialization+0x514>)
 8012012:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8012016:	4b59      	ldr	r3, [pc, #356]	; (801217c <LoRaMacInitialization+0x514>)
 8012018:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 801201c:	2300      	movs	r3, #0
 801201e:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8012022:	4b57      	ldr	r3, [pc, #348]	; (8012180 <LoRaMacInitialization+0x518>)
 8012024:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8012026:	4b57      	ldr	r3, [pc, #348]	; (8012184 <LoRaMacInitialization+0x51c>)
 8012028:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801202a:	4b54      	ldr	r3, [pc, #336]	; (801217c <LoRaMacInitialization+0x514>)
 801202c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012030:	f107 0218 	add.w	r2, r7, #24
 8012034:	4611      	mov	r1, r2
 8012036:	4618      	mov	r0, r3
 8012038:	f003 f9b5 	bl	80153a6 <RegionInitDefaults>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 801203c:	4a52      	ldr	r2, [pc, #328]	; (8012188 <LoRaMacInitialization+0x520>)
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8012044:	f7ff f87e 	bl	8011144 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8012048:	4b4c      	ldr	r3, [pc, #304]	; (801217c <LoRaMacInitialization+0x514>)
 801204a:	2201      	movs	r2, #1
 801204c:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 8012050:	4a4d      	ldr	r2, [pc, #308]	; (8012188 <LoRaMacInitialization+0x520>)
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8012058:	4b4b      	ldr	r3, [pc, #300]	; (8012188 <LoRaMacInitialization+0x520>)
 801205a:	2200      	movs	r2, #0
 801205c:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 8012060:	4b49      	ldr	r3, [pc, #292]	; (8012188 <LoRaMacInitialization+0x520>)
 8012062:	2201      	movs	r2, #1
 8012064:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8012068:	4b44      	ldr	r3, [pc, #272]	; (801217c <LoRaMacInitialization+0x514>)
 801206a:	2200      	movs	r2, #0
 801206c:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 801206e:	4b43      	ldr	r3, [pc, #268]	; (801217c <LoRaMacInitialization+0x514>)
 8012070:	2200      	movs	r2, #0
 8012072:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8012074:	2300      	movs	r3, #0
 8012076:	9300      	str	r3, [sp, #0]
 8012078:	4b44      	ldr	r3, [pc, #272]	; (801218c <LoRaMacInitialization+0x524>)
 801207a:	2200      	movs	r2, #0
 801207c:	f04f 31ff 	mov.w	r1, #4294967295
 8012080:	4843      	ldr	r0, [pc, #268]	; (8012190 <LoRaMacInitialization+0x528>)
 8012082:	f009 fd21 	bl	801bac8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8012086:	2300      	movs	r3, #0
 8012088:	9300      	str	r3, [sp, #0]
 801208a:	4b42      	ldr	r3, [pc, #264]	; (8012194 <LoRaMacInitialization+0x52c>)
 801208c:	2200      	movs	r2, #0
 801208e:	f04f 31ff 	mov.w	r1, #4294967295
 8012092:	4841      	ldr	r0, [pc, #260]	; (8012198 <LoRaMacInitialization+0x530>)
 8012094:	f009 fd18 	bl	801bac8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8012098:	2300      	movs	r3, #0
 801209a:	9300      	str	r3, [sp, #0]
 801209c:	4b3f      	ldr	r3, [pc, #252]	; (801219c <LoRaMacInitialization+0x534>)
 801209e:	2200      	movs	r2, #0
 80120a0:	f04f 31ff 	mov.w	r1, #4294967295
 80120a4:	483e      	ldr	r0, [pc, #248]	; (80121a0 <LoRaMacInitialization+0x538>)
 80120a6:	f009 fd0f 	bl	801bac8 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80120aa:	2300      	movs	r3, #0
 80120ac:	9300      	str	r3, [sp, #0]
 80120ae:	4b3d      	ldr	r3, [pc, #244]	; (80121a4 <LoRaMacInitialization+0x53c>)
 80120b0:	2200      	movs	r2, #0
 80120b2:	f04f 31ff 	mov.w	r1, #4294967295
 80120b6:	483c      	ldr	r0, [pc, #240]	; (80121a8 <LoRaMacInitialization+0x540>)
 80120b8:	f009 fd06 	bl	801bac8 <UTIL_TIMER_Create>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80120bc:	4c2f      	ldr	r4, [pc, #188]	; (801217c <LoRaMacInitialization+0x514>)
 80120be:	463b      	mov	r3, r7
 80120c0:	4618      	mov	r0, r3
 80120c2:	f009 f871 	bl	801b1a8 <SysTimeGetMcuTime>
 80120c6:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 80120ca:	463a      	mov	r2, r7
 80120cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120d0:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80120d4:	4b2c      	ldr	r3, [pc, #176]	; (8012188 <LoRaMacInitialization+0x520>)
 80120d6:	4a35      	ldr	r2, [pc, #212]	; (80121ac <LoRaMacInitialization+0x544>)
 80120d8:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80120dc:	4b2a      	ldr	r3, [pc, #168]	; (8012188 <LoRaMacInitialization+0x520>)
 80120de:	4a34      	ldr	r2, [pc, #208]	; (80121b0 <LoRaMacInitialization+0x548>)
 80120e0:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80120e4:	4b28      	ldr	r3, [pc, #160]	; (8012188 <LoRaMacInitialization+0x520>)
 80120e6:	4a33      	ldr	r2, [pc, #204]	; (80121b4 <LoRaMacInitialization+0x54c>)
 80120e8:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80120ec:	4b26      	ldr	r3, [pc, #152]	; (8012188 <LoRaMacInitialization+0x520>)
 80120ee:	4a32      	ldr	r2, [pc, #200]	; (80121b8 <LoRaMacInitialization+0x550>)
 80120f0:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80120f4:	4b24      	ldr	r3, [pc, #144]	; (8012188 <LoRaMacInitialization+0x520>)
 80120f6:	4a31      	ldr	r2, [pc, #196]	; (80121bc <LoRaMacInitialization+0x554>)
 80120f8:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80120fc:	4b30      	ldr	r3, [pc, #192]	; (80121c0 <LoRaMacInitialization+0x558>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	4830      	ldr	r0, [pc, #192]	; (80121c4 <LoRaMacInitialization+0x55c>)
 8012102:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	689b      	ldr	r3, [r3, #8]
 8012108:	4619      	mov	r1, r3
 801210a:	482f      	ldr	r0, [pc, #188]	; (80121c8 <LoRaMacInitialization+0x560>)
 801210c:	f7fa fe20 	bl	800cd50 <SecureElementInit>
 8012110:	4603      	mov	r3, r0
 8012112:	2b00      	cmp	r3, #0
 8012114:	d001      	beq.n	801211a <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012116:	2311      	movs	r3, #17
 8012118:	e02b      	b.n	8012172 <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 801211a:	4818      	ldr	r0, [pc, #96]	; (801217c <LoRaMacInitialization+0x514>)
 801211c:	f002 fa38 	bl	8014590 <LoRaMacCryptoInit>
 8012120:	4603      	mov	r3, r0
 8012122:	2b00      	cmp	r3, #0
 8012124:	d001      	beq.n	801212a <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012126:	2311      	movs	r3, #17
 8012128:	e023      	b.n	8012172 <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 801212a:	f001 fb57 	bl	80137dc <LoRaMacCommandsInit>
 801212e:	4603      	mov	r3, r0
 8012130:	2b00      	cmp	r3, #0
 8012132:	d001      	beq.n	8012138 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012134:	2313      	movs	r3, #19
 8012136:	e01c      	b.n	8012172 <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8012138:	4824      	ldr	r0, [pc, #144]	; (80121cc <LoRaMacInitialization+0x564>)
 801213a:	f002 faf3 	bl	8014724 <LoRaMacCryptoSetMulticastReference>
 801213e:	4603      	mov	r3, r0
 8012140:	2b00      	cmp	r3, #0
 8012142:	d001      	beq.n	8012148 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012144:	2311      	movs	r3, #17
 8012146:	e014      	b.n	8012172 <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8012148:	4b1d      	ldr	r3, [pc, #116]	; (80121c0 <LoRaMacInitialization+0x558>)
 801214a:	695b      	ldr	r3, [r3, #20]
 801214c:	4798      	blx	r3
 801214e:	4603      	mov	r3, r0
 8012150:	4618      	mov	r0, r3
 8012152:	f005 fbed 	bl	8017930 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012156:	4b1a      	ldr	r3, [pc, #104]	; (80121c0 <LoRaMacInitialization+0x558>)
 8012158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801215a:	4a08      	ldr	r2, [pc, #32]	; (801217c <LoRaMacInitialization+0x514>)
 801215c:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8012160:	4610      	mov	r0, r2
 8012162:	4798      	blx	r3
    Radio.Sleep( );
 8012164:	4b16      	ldr	r3, [pc, #88]	; (80121c0 <LoRaMacInitialization+0x558>)
 8012166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012168:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801216a:	2001      	movs	r0, #1
 801216c:	f7fd faf2 	bl	800f754 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8012170:	2300      	movs	r3, #0
}
 8012172:	4618      	mov	r0, r3
 8012174:	3734      	adds	r7, #52	; 0x34
 8012176:	46bd      	mov	sp, r7
 8012178:	bd90      	pop	{r4, r7, pc}
 801217a:	bf00      	nop
 801217c:	20001134 	.word	0x20001134
 8012180:	20001314 	.word	0x20001314
 8012184:	200013a8 	.word	0x200013a8
 8012188:	20000c28 	.word	0x20000c28
 801218c:	0800fcc1 	.word	0x0800fcc1
 8012190:	20000f90 	.word	0x20000f90
 8012194:	0800fd35 	.word	0x0800fd35
 8012198:	20000fa8 	.word	0x20000fa8
 801219c:	0800fda1 	.word	0x0800fda1
 80121a0:	20000fc0 	.word	0x20000fc0
 80121a4:	0800fe15 	.word	0x0800fe15
 80121a8:	20001020 	.word	0x20001020
 80121ac:	0800e8d1 	.word	0x0800e8d1
 80121b0:	0800e949 	.word	0x0800e949
 80121b4:	0800ea21 	.word	0x0800ea21
 80121b8:	0800e9d5 	.word	0x0800e9d5
 80121bc:	0800ea5d 	.word	0x0800ea5d
 80121c0:	0801d0b0 	.word	0x0801d0b0
 80121c4:	20000f74 	.word	0x20000f74
 80121c8:	20001254 	.word	0x20001254
 80121cc:	2000120c 	.word	0x2000120c

080121d0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80121d0:	b480      	push	{r7}
 80121d2:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80121d4:	4b04      	ldr	r3, [pc, #16]	; (80121e8 <LoRaMacStart+0x18>)
 80121d6:	2200      	movs	r2, #0
 80121d8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 80121dc:	2300      	movs	r3, #0
}
 80121de:	4618      	mov	r0, r3
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bc80      	pop	{r7}
 80121e4:	4770      	bx	lr
 80121e6:	bf00      	nop
 80121e8:	20000c28 	.word	0x20000c28

080121ec <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 80121f0:	f7fd fa9a 	bl	800f728 <LoRaMacIsBusy>
 80121f4:	4603      	mov	r3, r0
 80121f6:	f083 0301 	eor.w	r3, r3, #1
 80121fa:	b2db      	uxtb	r3, r3
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d005      	beq.n	801220c <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8012200:	4b07      	ldr	r3, [pc, #28]	; (8012220 <LoRaMacStop+0x34>)
 8012202:	2201      	movs	r2, #1
 8012204:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8012208:	2300      	movs	r3, #0
 801220a:	e007      	b.n	801221c <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 801220c:	4b04      	ldr	r3, [pc, #16]	; (8012220 <LoRaMacStop+0x34>)
 801220e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012212:	2b01      	cmp	r3, #1
 8012214:	d101      	bne.n	801221a <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 8012216:	2300      	movs	r3, #0
 8012218:	e000      	b.n	801221c <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 801221a:	2301      	movs	r3, #1
}
 801221c:	4618      	mov	r0, r3
 801221e:	bd80      	pop	{r7, pc}
 8012220:	20000c28 	.word	0x20000c28

08012224 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8012224:	b580      	push	{r7, lr}
 8012226:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8012228:	4812      	ldr	r0, [pc, #72]	; (8012274 <LoRaMacHalt+0x50>)
 801222a:	f009 fcf1 	bl	801bc10 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 801222e:	4812      	ldr	r0, [pc, #72]	; (8012278 <LoRaMacHalt+0x54>)
 8012230:	f009 fcee 	bl	801bc10 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8012234:	4811      	ldr	r0, [pc, #68]	; (801227c <LoRaMacHalt+0x58>)
 8012236:	f009 fceb 	bl	801bc10 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 801223a:	4811      	ldr	r0, [pc, #68]	; (8012280 <LoRaMacHalt+0x5c>)
 801223c:	f009 fce8 	bl	801bc10 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8012240:	f001 f957 	bl	80134f2 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8012244:	4b0f      	ldr	r3, [pc, #60]	; (8012284 <LoRaMacHalt+0x60>)
 8012246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012248:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 801224a:	4b0f      	ldr	r3, [pc, #60]	; (8012288 <LoRaMacHalt+0x64>)
 801224c:	2200      	movs	r2, #0
 801224e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 8012252:	480e      	ldr	r0, [pc, #56]	; (801228c <LoRaMacHalt+0x68>)
 8012254:	f7fd fc2e 	bl	800fab4 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8012258:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 801225c:	490b      	ldr	r1, [pc, #44]	; (801228c <LoRaMacHalt+0x68>)
 801225e:	480c      	ldr	r0, [pc, #48]	; (8012290 <LoRaMacHalt+0x6c>)
 8012260:	f005 fb8b 	bl	801797a <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8012264:	4b08      	ldr	r3, [pc, #32]	; (8012288 <LoRaMacHalt+0x64>)
 8012266:	2201      	movs	r2, #1
 8012268:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801226c:	2300      	movs	r3, #0
}
 801226e:	4618      	mov	r0, r3
 8012270:	bd80      	pop	{r7, pc}
 8012272:	bf00      	nop
 8012274:	20000f90 	.word	0x20000f90
 8012278:	20000fa8 	.word	0x20000fa8
 801227c:	20000fc0 	.word	0x20000fc0
 8012280:	20001020 	.word	0x20001020
 8012284:	0801d0b0 	.word	0x0801d0b0
 8012288:	20000c28 	.word	0x20000c28
 801228c:	20001134 	.word	0x20001134
 8012290:	2000185c 	.word	0x2000185c

08012294 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b08a      	sub	sp, #40	; 0x28
 8012298:	af00      	add	r7, sp, #0
 801229a:	4603      	mov	r3, r0
 801229c:	6039      	str	r1, [r7, #0]
 801229e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80122a0:	4b3e      	ldr	r3, [pc, #248]	; (801239c <LoRaMacQueryTxPossible+0x108>)
 80122a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122a4:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80122a6:	4b3d      	ldr	r3, [pc, #244]	; (801239c <LoRaMacQueryTxPossible+0x108>)
 80122a8:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 80122ac:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80122ae:	4b3b      	ldr	r3, [pc, #236]	; (801239c <LoRaMacQueryTxPossible+0x108>)
 80122b0:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 80122b4:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80122b6:	2300      	movs	r3, #0
 80122b8:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d101      	bne.n	80122c4 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80122c0:	2303      	movs	r3, #3
 80122c2:	e066      	b.n	8012392 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 80122c4:	4b35      	ldr	r3, [pc, #212]	; (801239c <LoRaMacQueryTxPossible+0x108>)
 80122c6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80122ca:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80122cc:	2300      	movs	r3, #0
 80122ce:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80122d0:	4b32      	ldr	r3, [pc, #200]	; (801239c <LoRaMacQueryTxPossible+0x108>)
 80122d2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80122d6:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80122d8:	4b30      	ldr	r3, [pc, #192]	; (801239c <LoRaMacQueryTxPossible+0x108>)
 80122da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122dc:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80122de:	4b30      	ldr	r3, [pc, #192]	; (80123a0 <LoRaMacQueryTxPossible+0x10c>)
 80122e0:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 80122e4:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80122e6:	4b2e      	ldr	r3, [pc, #184]	; (80123a0 <LoRaMacQueryTxPossible+0x10c>)
 80122e8:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 80122ec:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80122ee:	4b2b      	ldr	r3, [pc, #172]	; (801239c <LoRaMacQueryTxPossible+0x108>)
 80122f0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80122f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80122f8:	4b28      	ldr	r3, [pc, #160]	; (801239c <LoRaMacQueryTxPossible+0x108>)
 80122fa:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80122fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012302:	4b26      	ldr	r3, [pc, #152]	; (801239c <LoRaMacQueryTxPossible+0x108>)
 8012304:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012308:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 801230c:	4b23      	ldr	r3, [pc, #140]	; (801239c <LoRaMacQueryTxPossible+0x108>)
 801230e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8012316:	f107 0310 	add.w	r3, r7, #16
 801231a:	f107 020e 	add.w	r2, r7, #14
 801231e:	f107 010f 	add.w	r1, r7, #15
 8012322:	f107 0014 	add.w	r0, r7, #20
 8012326:	f001 f84f 	bl	80133c8 <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801232a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801232e:	4618      	mov	r0, r3
 8012330:	f7fd feb8 	bl	80100a4 <GetMaxAppPayloadWithoutFOptsLength>
 8012334:	4603      	mov	r3, r0
 8012336:	461a      	mov	r2, r3
 8012338:	683b      	ldr	r3, [r7, #0]
 801233a:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801233c:	f107 0308 	add.w	r3, r7, #8
 8012340:	4618      	mov	r0, r3
 8012342:	f001 fb19 	bl	8013978 <LoRaMacCommandsGetSizeSerializedCmds>
 8012346:	4603      	mov	r3, r0
 8012348:	2b00      	cmp	r3, #0
 801234a:	d001      	beq.n	8012350 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801234c:	2313      	movs	r3, #19
 801234e:	e020      	b.n	8012392 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8012350:	68bb      	ldr	r3, [r7, #8]
 8012352:	2b0f      	cmp	r3, #15
 8012354:	d819      	bhi.n	801238a <LoRaMacQueryTxPossible+0xf6>
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	785b      	ldrb	r3, [r3, #1]
 801235a:	461a      	mov	r2, r3
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	429a      	cmp	r2, r3
 8012360:	d313      	bcc.n	801238a <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	785a      	ldrb	r2, [r3, #1]
 8012366:	68bb      	ldr	r3, [r7, #8]
 8012368:	b2db      	uxtb	r3, r3
 801236a:	1ad3      	subs	r3, r2, r3
 801236c:	b2da      	uxtb	r2, r3
 801236e:	683b      	ldr	r3, [r7, #0]
 8012370:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8012372:	683b      	ldr	r3, [r7, #0]
 8012374:	785b      	ldrb	r3, [r3, #1]
 8012376:	4619      	mov	r1, r3
 8012378:	79fa      	ldrb	r2, [r7, #7]
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	4413      	add	r3, r2
 801237e:	4299      	cmp	r1, r3
 8012380:	d301      	bcc.n	8012386 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8012382:	2300      	movs	r3, #0
 8012384:	e005      	b.n	8012392 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8012386:	2308      	movs	r3, #8
 8012388:	e003      	b.n	8012392 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	2200      	movs	r2, #0
 801238e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8012390:	2308      	movs	r3, #8
    }
}
 8012392:	4618      	mov	r0, r3
 8012394:	3728      	adds	r7, #40	; 0x28
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
 801239a:	bf00      	nop
 801239c:	20001134 	.word	0x20001134
 80123a0:	20000c28 	.word	0x20000c28

080123a4 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80123a4:	b590      	push	{r4, r7, lr}
 80123a6:	b087      	sub	sp, #28
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80123ac:	2300      	movs	r3, #0
 80123ae:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d101      	bne.n	80123ba <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80123b6:	2303      	movs	r3, #3
 80123b8:	e171      	b.n	801269e <LoRaMacMibGetRequestConfirm+0x2fa>
    }

    switch( mibGet->Type )
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	2b37      	cmp	r3, #55	; 0x37
 80123c0:	f200 8166 	bhi.w	8012690 <LoRaMacMibGetRequestConfirm+0x2ec>
 80123c4:	a201      	add	r2, pc, #4	; (adr r2, 80123cc <LoRaMacMibGetRequestConfirm+0x28>)
 80123c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123ca:	bf00      	nop
 80123cc:	080124ad 	.word	0x080124ad
 80123d0:	080124b9 	.word	0x080124b9
 80123d4:	080124c5 	.word	0x080124c5
 80123d8:	080124d1 	.word	0x080124d1
 80123dc:	080124dd 	.word	0x080124dd
 80123e0:	080124e9 	.word	0x080124e9
 80123e4:	080124f5 	.word	0x080124f5
 80123e8:	08012691 	.word	0x08012691
 80123ec:	08012691 	.word	0x08012691
 80123f0:	08012691 	.word	0x08012691
 80123f4:	08012691 	.word	0x08012691
 80123f8:	08012691 	.word	0x08012691
 80123fc:	08012691 	.word	0x08012691
 8012400:	08012691 	.word	0x08012691
 8012404:	08012691 	.word	0x08012691
 8012408:	08012501 	.word	0x08012501
 801240c:	0801250d 	.word	0x0801250d
 8012410:	08012519 	.word	0x08012519
 8012414:	0801253b 	.word	0x0801253b
 8012418:	0801254d 	.word	0x0801254d
 801241c:	0801255f 	.word	0x0801255f
 8012420:	08012571 	.word	0x08012571
 8012424:	080125a5 	.word	0x080125a5
 8012428:	08012583 	.word	0x08012583
 801242c:	080125c7 	.word	0x080125c7
 8012430:	080125d3 	.word	0x080125d3
 8012434:	080125dd 	.word	0x080125dd
 8012438:	080125e7 	.word	0x080125e7
 801243c:	080125f1 	.word	0x080125f1
 8012440:	080125fb 	.word	0x080125fb
 8012444:	08012605 	.word	0x08012605
 8012448:	08012611 	.word	0x08012611
 801244c:	08012629 	.word	0x08012629
 8012450:	0801261d 	.word	0x0801261d
 8012454:	08012635 	.word	0x08012635
 8012458:	0801263f 	.word	0x0801263f
 801245c:	0801264b 	.word	0x0801264b
 8012460:	08012665 	.word	0x08012665
 8012464:	08012655 	.word	0x08012655
 8012468:	0801265d 	.word	0x0801265d
 801246c:	08012691 	.word	0x08012691
 8012470:	08012671 	.word	0x08012671
 8012474:	08012691 	.word	0x08012691
 8012478:	08012691 	.word	0x08012691
 801247c:	08012691 	.word	0x08012691
 8012480:	08012691 	.word	0x08012691
 8012484:	08012691 	.word	0x08012691
 8012488:	08012691 	.word	0x08012691
 801248c:	08012691 	.word	0x08012691
 8012490:	08012691 	.word	0x08012691
 8012494:	08012691 	.word	0x08012691
 8012498:	08012691 	.word	0x08012691
 801249c:	08012691 	.word	0x08012691
 80124a0:	08012691 	.word	0x08012691
 80124a4:	08012691 	.word	0x08012691
 80124a8:	08012685 	.word	0x08012685
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80124ac:	4b7e      	ldr	r3, [pc, #504]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 80124ae:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	711a      	strb	r2, [r3, #4]
            break;
 80124b6:	e0f1      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80124b8:	4b7b      	ldr	r3, [pc, #492]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 80124ba:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	711a      	strb	r2, [r3, #4]
            break;
 80124c2:	e0eb      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80124c4:	f7fa ff30 	bl	800d328 <SecureElementGetDevEui>
 80124c8:	4602      	mov	r2, r0
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	605a      	str	r2, [r3, #4]
            break;
 80124ce:	e0e5      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80124d0:	f7fa ff4c 	bl	800d36c <SecureElementGetJoinEui>
 80124d4:	4602      	mov	r2, r0
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	605a      	str	r2, [r3, #4]
            break;
 80124da:	e0df      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80124dc:	4b72      	ldr	r3, [pc, #456]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 80124de:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	711a      	strb	r2, [r3, #4]
            break;
 80124e6:	e0d9      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80124e8:	4b6f      	ldr	r3, [pc, #444]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 80124ea:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	605a      	str	r2, [r3, #4]
            break;
 80124f2:	e0d3      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80124f4:	4b6c      	ldr	r3, [pc, #432]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 80124f6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	605a      	str	r2, [r3, #4]
            break;
 80124fe:	e0cd      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8012500:	4b69      	ldr	r3, [pc, #420]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 8012502:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	711a      	strb	r2, [r3, #4]
            break;
 801250a:	e0c7      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801250c:	4b66      	ldr	r3, [pc, #408]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 801250e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	711a      	strb	r2, [r3, #4]
            break;
 8012516:	e0c1      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012518:	231d      	movs	r3, #29
 801251a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801251c:	4b62      	ldr	r3, [pc, #392]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 801251e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012522:	f107 0210 	add.w	r2, r7, #16
 8012526:	4611      	mov	r1, r2
 8012528:	4618      	mov	r0, r3
 801252a:	f002 ff13 	bl	8015354 <RegionGetPhyParam>
 801252e:	4603      	mov	r3, r0
 8012530:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8012532:	68fa      	ldr	r2, [r7, #12]
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	605a      	str	r2, [r3, #4]
            break;
 8012538:	e0b0      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	4a5a      	ldr	r2, [pc, #360]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 801253e:	3304      	adds	r3, #4
 8012540:	3264      	adds	r2, #100	; 0x64
 8012542:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012546:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801254a:	e0a7      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	4a56      	ldr	r2, [pc, #344]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 8012550:	3304      	adds	r3, #4
 8012552:	32a8      	adds	r2, #168	; 0xa8
 8012554:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012558:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801255c:	e09e      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	4a51      	ldr	r2, [pc, #324]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 8012562:	3304      	adds	r3, #4
 8012564:	326c      	adds	r2, #108	; 0x6c
 8012566:	e892 0003 	ldmia.w	r2, {r0, r1}
 801256a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801256e:	e095      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	4a4d      	ldr	r2, [pc, #308]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 8012574:	3304      	adds	r3, #4
 8012576:	32b0      	adds	r2, #176	; 0xb0
 8012578:	e892 0003 	ldmia.w	r2, {r0, r1}
 801257c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012580:	e08c      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8012582:	231b      	movs	r3, #27
 8012584:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012586:	4b48      	ldr	r3, [pc, #288]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 8012588:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801258c:	f107 0210 	add.w	r2, r7, #16
 8012590:	4611      	mov	r1, r2
 8012592:	4618      	mov	r0, r3
 8012594:	f002 fede 	bl	8015354 <RegionGetPhyParam>
 8012598:	4603      	mov	r3, r0
 801259a:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 801259c:	68fa      	ldr	r2, [r7, #12]
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	605a      	str	r2, [r3, #4]
            break;
 80125a2:	e07b      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80125a4:	231a      	movs	r3, #26
 80125a6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80125a8:	4b3f      	ldr	r3, [pc, #252]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 80125aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80125ae:	f107 0210 	add.w	r2, r7, #16
 80125b2:	4611      	mov	r1, r2
 80125b4:	4618      	mov	r0, r3
 80125b6:	f002 fecd 	bl	8015354 <RegionGetPhyParam>
 80125ba:	4603      	mov	r3, r0
 80125bc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80125be:	68fa      	ldr	r2, [r7, #12]
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	605a      	str	r2, [r3, #4]
            break;
 80125c4:	e06a      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80125c6:	4b38      	ldr	r3, [pc, #224]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 80125c8:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	711a      	strb	r2, [r3, #4]
            break;
 80125d0:	e064      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80125d2:	4b35      	ldr	r3, [pc, #212]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 80125d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	605a      	str	r2, [r3, #4]
            break;
 80125da:	e05f      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80125dc:	4b32      	ldr	r3, [pc, #200]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 80125de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	605a      	str	r2, [r3, #4]
            break;
 80125e4:	e05a      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80125e6:	4b30      	ldr	r3, [pc, #192]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 80125e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	605a      	str	r2, [r3, #4]
            break;
 80125ee:	e055      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80125f0:	4b2d      	ldr	r3, [pc, #180]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 80125f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	605a      	str	r2, [r3, #4]
            break;
 80125f8:	e050      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80125fa:	4b2b      	ldr	r3, [pc, #172]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 80125fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	605a      	str	r2, [r3, #4]
            break;
 8012602:	e04b      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012604:	4b28      	ldr	r3, [pc, #160]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 8012606:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	711a      	strb	r2, [r3, #4]
            break;
 801260e:	e045      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012610:	4b25      	ldr	r3, [pc, #148]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 8012612:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	711a      	strb	r2, [r3, #4]
            break;
 801261a:	e03f      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801261c:	4b22      	ldr	r3, [pc, #136]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 801261e:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	711a      	strb	r2, [r3, #4]
            break;
 8012626:	e039      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012628:	4b1f      	ldr	r3, [pc, #124]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 801262a:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	711a      	strb	r2, [r3, #4]
            break;
 8012632:	e033      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8012634:	4b1c      	ldr	r3, [pc, #112]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 8012636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	605a      	str	r2, [r3, #4]
            break;
 801263c:	e02e      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801263e:	4b1a      	ldr	r3, [pc, #104]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 8012640:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	711a      	strb	r2, [r3, #4]
            break;
 8012648:	e028      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801264a:	4b17      	ldr	r3, [pc, #92]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 801264c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	605a      	str	r2, [r3, #4]
            break;
 8012652:	e023      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	4a14      	ldr	r2, [pc, #80]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 8012658:	605a      	str	r2, [r3, #4]
            break;
 801265a:	e01f      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	4a13      	ldr	r2, [pc, #76]	; (80126ac <LoRaMacMibGetRequestConfirm+0x308>)
 8012660:	605a      	str	r2, [r3, #4]
            break;
 8012662:	e01b      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012664:	4b10      	ldr	r3, [pc, #64]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 8012666:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	605a      	str	r2, [r3, #4]
            break;
 801266e:	e015      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	4a0d      	ldr	r2, [pc, #52]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 8012674:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 8012678:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 801267a:	687c      	ldr	r4, [r7, #4]
 801267c:	f002 fff2 	bl	8015664 <RegionGetVersion>
 8012680:	60a0      	str	r0, [r4, #8]
            break;
 8012682:	e00b      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8012684:	4b08      	ldr	r3, [pc, #32]	; (80126a8 <LoRaMacMibGetRequestConfirm+0x304>)
 8012686:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	605a      	str	r2, [r3, #4]
            break;
 801268e:	e005      	b.n	801269c <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8012690:	6878      	ldr	r0, [r7, #4]
 8012692:	f000 ff45 	bl	8013520 <LoRaMacClassBMibGetRequestConfirm>
 8012696:	4603      	mov	r3, r0
 8012698:	75fb      	strb	r3, [r7, #23]
            break;
 801269a:	bf00      	nop
        }
    }
    return status;
 801269c:	7dfb      	ldrb	r3, [r7, #23]
}
 801269e:	4618      	mov	r0, r3
 80126a0:	371c      	adds	r7, #28
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd90      	pop	{r4, r7, pc}
 80126a6:	bf00      	nop
 80126a8:	20001134 	.word	0x20001134
 80126ac:	2000185c 	.word	0x2000185c

080126b0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b086      	sub	sp, #24
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80126b8:	2300      	movs	r3, #0
 80126ba:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d101      	bne.n	80126c6 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80126c2:	2303      	movs	r3, #3
 80126c4:	e348      	b.n	8012d58 <LoRaMacMibSetRequestConfirm+0x6a8>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80126c6:	4bb7      	ldr	r3, [pc, #732]	; (80129a4 <LoRaMacMibSetRequestConfirm+0x2f4>)
 80126c8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80126cc:	f003 0302 	and.w	r3, r3, #2
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d001      	beq.n	80126d8 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80126d4:	2301      	movs	r3, #1
 80126d6:	e33f      	b.n	8012d58 <LoRaMacMibSetRequestConfirm+0x6a8>
    }

    switch( mibSet->Type )
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	781b      	ldrb	r3, [r3, #0]
 80126dc:	2b37      	cmp	r3, #55	; 0x37
 80126de:	f200 8319 	bhi.w	8012d14 <LoRaMacMibSetRequestConfirm+0x664>
 80126e2:	a201      	add	r2, pc, #4	; (adr r2, 80126e8 <LoRaMacMibSetRequestConfirm+0x38>)
 80126e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126e8:	080127c9 	.word	0x080127c9
 80126ec:	080127d9 	.word	0x080127d9
 80126f0:	080127f3 	.word	0x080127f3
 80126f4:	0801280b 	.word	0x0801280b
 80126f8:	08012823 	.word	0x08012823
 80126fc:	0801282f 	.word	0x0801282f
 8012700:	0801283b 	.word	0x0801283b
 8012704:	08012847 	.word	0x08012847
 8012708:	0801286d 	.word	0x0801286d
 801270c:	08012893 	.word	0x08012893
 8012710:	080128b9 	.word	0x080128b9
 8012714:	080128df 	.word	0x080128df
 8012718:	08012905 	.word	0x08012905
 801271c:	0801292b 	.word	0x0801292b
 8012720:	08012951 	.word	0x08012951
 8012724:	08012977 	.word	0x08012977
 8012728:	08012997 	.word	0x08012997
 801272c:	08012d15 	.word	0x08012d15
 8012730:	080129b1 	.word	0x080129b1
 8012734:	08012a21 	.word	0x08012a21
 8012738:	08012a61 	.word	0x08012a61
 801273c:	08012ac3 	.word	0x08012ac3
 8012740:	08012b33 	.word	0x08012b33
 8012744:	08012b03 	.word	0x08012b03
 8012748:	08012b63 	.word	0x08012b63
 801274c:	08012b85 	.word	0x08012b85
 8012750:	08012b8f 	.word	0x08012b8f
 8012754:	08012b99 	.word	0x08012b99
 8012758:	08012ba3 	.word	0x08012ba3
 801275c:	08012bad 	.word	0x08012bad
 8012760:	08012bb7 	.word	0x08012bb7
 8012764:	08012be9 	.word	0x08012be9
 8012768:	08012c55 	.word	0x08012c55
 801276c:	08012c23 	.word	0x08012c23
 8012770:	08012c91 	.word	0x08012c91
 8012774:	08012ca7 	.word	0x08012ca7
 8012778:	08012cbf 	.word	0x08012cbf
 801277c:	08012cc9 	.word	0x08012cc9
 8012780:	08012cd5 	.word	0x08012cd5
 8012784:	08012d15 	.word	0x08012d15
 8012788:	08012cdf 	.word	0x08012cdf
 801278c:	08012d15 	.word	0x08012d15
 8012790:	08012d15 	.word	0x08012d15
 8012794:	08012d15 	.word	0x08012d15
 8012798:	08012d15 	.word	0x08012d15
 801279c:	08012d15 	.word	0x08012d15
 80127a0:	08012d15 	.word	0x08012d15
 80127a4:	08012d15 	.word	0x08012d15
 80127a8:	08012d15 	.word	0x08012d15
 80127ac:	08012d15 	.word	0x08012d15
 80127b0:	08012d15 	.word	0x08012d15
 80127b4:	08012d15 	.word	0x08012d15
 80127b8:	08012d15 	.word	0x08012d15
 80127bc:	08012d15 	.word	0x08012d15
 80127c0:	08012d15 	.word	0x08012d15
 80127c4:	08012d09 	.word	0x08012d09
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	791b      	ldrb	r3, [r3, #4]
 80127cc:	4618      	mov	r0, r3
 80127ce:	f7fd fb99 	bl	800ff04 <SwitchClass>
 80127d2:	4603      	mov	r3, r0
 80127d4:	75fb      	strb	r3, [r7, #23]
            break;
 80127d6:	e2be      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	791b      	ldrb	r3, [r3, #4]
 80127dc:	2b02      	cmp	r3, #2
 80127de:	d005      	beq.n	80127ec <LoRaMacMibSetRequestConfirm+0x13c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	791a      	ldrb	r2, [r3, #4]
 80127e4:	4b70      	ldr	r3, [pc, #448]	; (80129a8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80127e6:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80127ea:	e2b4      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127ec:	2303      	movs	r3, #3
 80127ee:	75fb      	strb	r3, [r7, #23]
            break;
 80127f0:	e2b1      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	685b      	ldr	r3, [r3, #4]
 80127f6:	4618      	mov	r0, r3
 80127f8:	f7fa fd7e 	bl	800d2f8 <SecureElementSetDevEui>
 80127fc:	4603      	mov	r3, r0
 80127fe:	2b00      	cmp	r3, #0
 8012800:	f000 828e 	beq.w	8012d20 <LoRaMacMibSetRequestConfirm+0x670>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012804:	2303      	movs	r3, #3
 8012806:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012808:	e28a      	b.n	8012d20 <LoRaMacMibSetRequestConfirm+0x670>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	4618      	mov	r0, r3
 8012810:	f7fa fd94 	bl	800d33c <SecureElementSetJoinEui>
 8012814:	4603      	mov	r3, r0
 8012816:	2b00      	cmp	r3, #0
 8012818:	f000 8284 	beq.w	8012d24 <LoRaMacMibSetRequestConfirm+0x674>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801281c:	2303      	movs	r3, #3
 801281e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012820:	e280      	b.n	8012d24 <LoRaMacMibSetRequestConfirm+0x674>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	791a      	ldrb	r2, [r3, #4]
 8012826:	4b60      	ldr	r3, [pc, #384]	; (80129a8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8012828:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 801282c:	e293      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	4a5d      	ldr	r2, [pc, #372]	; (80129a8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8012834:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 8012838:	e28d      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	4a5a      	ldr	r2, [pc, #360]	; (80129a8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8012840:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 8012844:	e287      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	685b      	ldr	r3, [r3, #4]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d00b      	beq.n	8012866 <LoRaMacMibSetRequestConfirm+0x1b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	685b      	ldr	r3, [r3, #4]
 8012852:	4619      	mov	r1, r3
 8012854:	2000      	movs	r0, #0
 8012856:	f001 ff8d 	bl	8014774 <LoRaMacCryptoSetKey>
 801285a:	4603      	mov	r3, r0
 801285c:	2b00      	cmp	r3, #0
 801285e:	f000 8263 	beq.w	8012d28 <LoRaMacMibSetRequestConfirm+0x678>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012862:	2311      	movs	r3, #17
 8012864:	e278      	b.n	8012d58 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012866:	2303      	movs	r3, #3
 8012868:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801286a:	e25d      	b.n	8012d28 <LoRaMacMibSetRequestConfirm+0x678>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	685b      	ldr	r3, [r3, #4]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d00b      	beq.n	801288c <LoRaMacMibSetRequestConfirm+0x1dc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	685b      	ldr	r3, [r3, #4]
 8012878:	4619      	mov	r1, r3
 801287a:	2001      	movs	r0, #1
 801287c:	f001 ff7a 	bl	8014774 <LoRaMacCryptoSetKey>
 8012880:	4603      	mov	r3, r0
 8012882:	2b00      	cmp	r3, #0
 8012884:	f000 8252 	beq.w	8012d2c <LoRaMacMibSetRequestConfirm+0x67c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012888:	2311      	movs	r3, #17
 801288a:	e265      	b.n	8012d58 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801288c:	2303      	movs	r3, #3
 801288e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012890:	e24c      	b.n	8012d2c <LoRaMacMibSetRequestConfirm+0x67c>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d00b      	beq.n	80128b2 <LoRaMacMibSetRequestConfirm+0x202>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	685b      	ldr	r3, [r3, #4]
 801289e:	4619      	mov	r1, r3
 80128a0:	2002      	movs	r0, #2
 80128a2:	f001 ff67 	bl	8014774 <LoRaMacCryptoSetKey>
 80128a6:	4603      	mov	r3, r0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	f000 8241 	beq.w	8012d30 <LoRaMacMibSetRequestConfirm+0x680>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80128ae:	2311      	movs	r3, #17
 80128b0:	e252      	b.n	8012d58 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128b2:	2303      	movs	r3, #3
 80128b4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80128b6:	e23b      	b.n	8012d30 <LoRaMacMibSetRequestConfirm+0x680>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	685b      	ldr	r3, [r3, #4]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d00b      	beq.n	80128d8 <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	685b      	ldr	r3, [r3, #4]
 80128c4:	4619      	mov	r1, r3
 80128c6:	2003      	movs	r0, #3
 80128c8:	f001 ff54 	bl	8014774 <LoRaMacCryptoSetKey>
 80128cc:	4603      	mov	r3, r0
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	f000 8230 	beq.w	8012d34 <LoRaMacMibSetRequestConfirm+0x684>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80128d4:	2311      	movs	r3, #17
 80128d6:	e23f      	b.n	8012d58 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128d8:	2303      	movs	r3, #3
 80128da:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80128dc:	e22a      	b.n	8012d34 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	685b      	ldr	r3, [r3, #4]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d00b      	beq.n	80128fe <LoRaMacMibSetRequestConfirm+0x24e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	4619      	mov	r1, r3
 80128ec:	207f      	movs	r0, #127	; 0x7f
 80128ee:	f001 ff41 	bl	8014774 <LoRaMacCryptoSetKey>
 80128f2:	4603      	mov	r3, r0
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	f000 821f 	beq.w	8012d38 <LoRaMacMibSetRequestConfirm+0x688>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80128fa:	2311      	movs	r3, #17
 80128fc:	e22c      	b.n	8012d58 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128fe:	2303      	movs	r3, #3
 8012900:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012902:	e219      	b.n	8012d38 <LoRaMacMibSetRequestConfirm+0x688>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	685b      	ldr	r3, [r3, #4]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d00b      	beq.n	8012924 <LoRaMacMibSetRequestConfirm+0x274>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	685b      	ldr	r3, [r3, #4]
 8012910:	4619      	mov	r1, r3
 8012912:	2080      	movs	r0, #128	; 0x80
 8012914:	f001 ff2e 	bl	8014774 <LoRaMacCryptoSetKey>
 8012918:	4603      	mov	r3, r0
 801291a:	2b00      	cmp	r3, #0
 801291c:	f000 820e 	beq.w	8012d3c <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012920:	2311      	movs	r3, #17
 8012922:	e219      	b.n	8012d58 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012924:	2303      	movs	r3, #3
 8012926:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012928:	e208      	b.n	8012d3c <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	685b      	ldr	r3, [r3, #4]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d00b      	beq.n	801294a <LoRaMacMibSetRequestConfirm+0x29a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	685b      	ldr	r3, [r3, #4]
 8012936:	4619      	mov	r1, r3
 8012938:	2081      	movs	r0, #129	; 0x81
 801293a:	f001 ff1b 	bl	8014774 <LoRaMacCryptoSetKey>
 801293e:	4603      	mov	r3, r0
 8012940:	2b00      	cmp	r3, #0
 8012942:	f000 81fd 	beq.w	8012d40 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012946:	2311      	movs	r3, #17
 8012948:	e206      	b.n	8012d58 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801294a:	2303      	movs	r3, #3
 801294c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801294e:	e1f7      	b.n	8012d40 <LoRaMacMibSetRequestConfirm+0x690>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	685b      	ldr	r3, [r3, #4]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d00b      	beq.n	8012970 <LoRaMacMibSetRequestConfirm+0x2c0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	685b      	ldr	r3, [r3, #4]
 801295c:	4619      	mov	r1, r3
 801295e:	2082      	movs	r0, #130	; 0x82
 8012960:	f001 ff08 	bl	8014774 <LoRaMacCryptoSetKey>
 8012964:	4603      	mov	r3, r0
 8012966:	2b00      	cmp	r3, #0
 8012968:	f000 81ec 	beq.w	8012d44 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801296c:	2311      	movs	r3, #17
 801296e:	e1f3      	b.n	8012d58 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012970:	2303      	movs	r3, #3
 8012972:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012974:	e1e6      	b.n	8012d44 <LoRaMacMibSetRequestConfirm+0x694>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	791a      	ldrb	r2, [r3, #4]
 801297a:	4b0b      	ldr	r3, [pc, #44]	; (80129a8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 801297c:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012980:	4b0a      	ldr	r3, [pc, #40]	; (80129ac <LoRaMacMibSetRequestConfirm+0x2fc>)
 8012982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012984:	4a08      	ldr	r2, [pc, #32]	; (80129a8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8012986:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 801298a:	4610      	mov	r0, r2
 801298c:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 801298e:	4b07      	ldr	r3, [pc, #28]	; (80129ac <LoRaMacMibSetRequestConfirm+0x2fc>)
 8012990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012992:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8012994:	e1df      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	791a      	ldrb	r2, [r3, #4]
 801299a:	4b03      	ldr	r3, [pc, #12]	; (80129a8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 801299c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 80129a0:	e1d9      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
 80129a2:	bf00      	nop
 80129a4:	20000c28 	.word	0x20000c28
 80129a8:	20001134 	.word	0x20001134
 80129ac:	0801d0b0 	.word	0x0801d0b0
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	7a1b      	ldrb	r3, [r3, #8]
 80129b4:	b25b      	sxtb	r3, r3
 80129b6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80129b8:	4bb3      	ldr	r3, [pc, #716]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80129ba:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80129be:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80129c0:	4bb1      	ldr	r3, [pc, #708]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80129c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80129c6:	f107 0108 	add.w	r1, r7, #8
 80129ca:	2207      	movs	r2, #7
 80129cc:	4618      	mov	r0, r3
 80129ce:	f002 fcfc 	bl	80153ca <RegionVerify>
 80129d2:	4603      	mov	r3, r0
 80129d4:	f083 0301 	eor.w	r3, r3, #1
 80129d8:	b2db      	uxtb	r3, r3
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d002      	beq.n	80129e4 <LoRaMacMibSetRequestConfirm+0x334>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80129de:	2303      	movs	r3, #3
 80129e0:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 80129e2:	e1b8      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	685b      	ldr	r3, [r3, #4]
 80129e8:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80129ea:	4ba7      	ldr	r3, [pc, #668]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80129ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80129f0:	f107 0108 	add.w	r1, r7, #8
 80129f4:	2200      	movs	r2, #0
 80129f6:	4618      	mov	r0, r3
 80129f8:	f002 fce7 	bl	80153ca <RegionVerify>
 80129fc:	4603      	mov	r3, r0
 80129fe:	f083 0301 	eor.w	r3, r3, #1
 8012a02:	b2db      	uxtb	r3, r3
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d002      	beq.n	8012a0e <LoRaMacMibSetRequestConfirm+0x35e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a08:	2303      	movs	r3, #3
 8012a0a:	75fb      	strb	r3, [r7, #23]
            break;
 8012a0c:	e1a3      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8012a0e:	4b9e      	ldr	r3, [pc, #632]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012a10:	687a      	ldr	r2, [r7, #4]
 8012a12:	3364      	adds	r3, #100	; 0x64
 8012a14:	3204      	adds	r2, #4
 8012a16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a1a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012a1e:	e19a      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	7a1b      	ldrb	r3, [r3, #8]
 8012a24:	b25b      	sxtb	r3, r3
 8012a26:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012a28:	4b97      	ldr	r3, [pc, #604]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012a2a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8012a2e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012a30:	4b95      	ldr	r3, [pc, #596]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a36:	f107 0108 	add.w	r1, r7, #8
 8012a3a:	2207      	movs	r2, #7
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f002 fcc4 	bl	80153ca <RegionVerify>
 8012a42:	4603      	mov	r3, r0
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d008      	beq.n	8012a5a <LoRaMacMibSetRequestConfirm+0x3aa>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8012a48:	4b8f      	ldr	r3, [pc, #572]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012a4a:	687a      	ldr	r2, [r7, #4]
 8012a4c:	33a8      	adds	r3, #168	; 0xa8
 8012a4e:	3204      	adds	r2, #4
 8012a50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a54:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012a58:	e17d      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a5a:	2303      	movs	r3, #3
 8012a5c:	75fb      	strb	r3, [r7, #23]
            break;
 8012a5e:	e17a      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	7a1b      	ldrb	r3, [r3, #8]
 8012a64:	b25b      	sxtb	r3, r3
 8012a66:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012a68:	4b87      	ldr	r3, [pc, #540]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012a6a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8012a6e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012a70:	4b85      	ldr	r3, [pc, #532]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a76:	f107 0108 	add.w	r1, r7, #8
 8012a7a:	2207      	movs	r2, #7
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f002 fca4 	bl	80153ca <RegionVerify>
 8012a82:	4603      	mov	r3, r0
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d019      	beq.n	8012abc <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8012a88:	4b7f      	ldr	r3, [pc, #508]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012a8a:	687a      	ldr	r2, [r7, #4]
 8012a8c:	336c      	adds	r3, #108	; 0x6c
 8012a8e:	3204      	adds	r2, #4
 8012a90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a94:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8012a98:	4b7b      	ldr	r3, [pc, #492]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012a9a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012a9e:	2b02      	cmp	r3, #2
 8012aa0:	f040 8152 	bne.w	8012d48 <LoRaMacMibSetRequestConfirm+0x698>
 8012aa4:	4b78      	ldr	r3, [pc, #480]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012aa6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	f000 814c 	beq.w	8012d48 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8012ab0:	4b76      	ldr	r3, [pc, #472]	; (8012c8c <LoRaMacMibSetRequestConfirm+0x5dc>)
 8012ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ab4:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8012ab6:	f7fe fc67 	bl	8011388 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012aba:	e145      	b.n	8012d48 <LoRaMacMibSetRequestConfirm+0x698>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012abc:	2303      	movs	r3, #3
 8012abe:	75fb      	strb	r3, [r7, #23]
            break;
 8012ac0:	e142      	b.n	8012d48 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	7a1b      	ldrb	r3, [r3, #8]
 8012ac6:	b25b      	sxtb	r3, r3
 8012ac8:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012aca:	4b6f      	ldr	r3, [pc, #444]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012acc:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8012ad0:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012ad2:	4b6d      	ldr	r3, [pc, #436]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012ad4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012ad8:	f107 0108 	add.w	r1, r7, #8
 8012adc:	2207      	movs	r2, #7
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f002 fc73 	bl	80153ca <RegionVerify>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d008      	beq.n	8012afc <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8012aea:	4b67      	ldr	r3, [pc, #412]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012aec:	687a      	ldr	r2, [r7, #4]
 8012aee:	33b0      	adds	r3, #176	; 0xb0
 8012af0:	3204      	adds	r2, #4
 8012af2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012af6:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012afa:	e12c      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012afc:	2303      	movs	r3, #3
 8012afe:	75fb      	strb	r3, [r7, #23]
            break;
 8012b00:	e129      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	685b      	ldr	r3, [r3, #4]
 8012b06:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8012b08:	2301      	movs	r3, #1
 8012b0a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012b0c:	4b5e      	ldr	r3, [pc, #376]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b12:	f107 020c 	add.w	r2, r7, #12
 8012b16:	4611      	mov	r1, r2
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f002 fc7f 	bl	801541c <RegionChanMaskSet>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	f083 0301 	eor.w	r3, r3, #1
 8012b24:	b2db      	uxtb	r3, r3
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	f000 8110 	beq.w	8012d4c <LoRaMacMibSetRequestConfirm+0x69c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b2c:	2303      	movs	r3, #3
 8012b2e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012b30:	e10c      	b.n	8012d4c <LoRaMacMibSetRequestConfirm+0x69c>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	685b      	ldr	r3, [r3, #4]
 8012b36:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8012b38:	2300      	movs	r3, #0
 8012b3a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012b3c:	4b52      	ldr	r3, [pc, #328]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b42:	f107 020c 	add.w	r2, r7, #12
 8012b46:	4611      	mov	r1, r2
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f002 fc67 	bl	801541c <RegionChanMaskSet>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	f083 0301 	eor.w	r3, r3, #1
 8012b54:	b2db      	uxtb	r3, r3
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	f000 80fa 	beq.w	8012d50 <LoRaMacMibSetRequestConfirm+0x6a0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b5c:	2303      	movs	r3, #3
 8012b5e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012b60:	e0f6      	b.n	8012d50 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	791b      	ldrb	r3, [r3, #4]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d009      	beq.n	8012b7e <LoRaMacMibSetRequestConfirm+0x4ce>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012b6e:	2b0f      	cmp	r3, #15
 8012b70:	d805      	bhi.n	8012b7e <LoRaMacMibSetRequestConfirm+0x4ce>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	791a      	ldrb	r2, [r3, #4]
 8012b76:	4b44      	ldr	r3, [pc, #272]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012b78:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012b7c:	e0eb      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b7e:	2303      	movs	r3, #3
 8012b80:	75fb      	strb	r3, [r7, #23]
            break;
 8012b82:	e0e8      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	685b      	ldr	r3, [r3, #4]
 8012b88:	4a3f      	ldr	r2, [pc, #252]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8012b8c:	e0e3      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	685b      	ldr	r3, [r3, #4]
 8012b92:	4a3d      	ldr	r2, [pc, #244]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012b94:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8012b96:	e0de      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	685b      	ldr	r3, [r3, #4]
 8012b9c:	4a3a      	ldr	r2, [pc, #232]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012b9e:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8012ba0:	e0d9      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	685b      	ldr	r3, [r3, #4]
 8012ba6:	4a38      	ldr	r2, [pc, #224]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012ba8:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8012baa:	e0d4      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	4a35      	ldr	r2, [pc, #212]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012bb2:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8012bb4:	e0cf      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012bbc:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8012bbe:	4b32      	ldr	r3, [pc, #200]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012bc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012bc4:	f107 0108 	add.w	r1, r7, #8
 8012bc8:	2206      	movs	r2, #6
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f002 fbfd 	bl	80153ca <RegionVerify>
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d005      	beq.n	8012be2 <LoRaMacMibSetRequestConfirm+0x532>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8012bd6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012bda:	4b2b      	ldr	r3, [pc, #172]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012bdc:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012be0:	e0b9      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012be2:	2303      	movs	r3, #3
 8012be4:	75fb      	strb	r3, [r7, #23]
            break;
 8012be6:	e0b6      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012bee:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012bf0:	4b25      	ldr	r3, [pc, #148]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012bf2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012bf6:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012bf8:	4b23      	ldr	r3, [pc, #140]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012bfe:	f107 0108 	add.w	r1, r7, #8
 8012c02:	2205      	movs	r2, #5
 8012c04:	4618      	mov	r0, r3
 8012c06:	f002 fbe0 	bl	80153ca <RegionVerify>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d005      	beq.n	8012c1c <LoRaMacMibSetRequestConfirm+0x56c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012c10:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012c14:	4b1c      	ldr	r3, [pc, #112]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012c16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012c1a:	e09c      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012c1c:	2303      	movs	r3, #3
 8012c1e:	75fb      	strb	r3, [r7, #23]
            break;
 8012c20:	e099      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012c28:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8012c2a:	4b17      	ldr	r3, [pc, #92]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c30:	f107 0108 	add.w	r1, r7, #8
 8012c34:	220a      	movs	r2, #10
 8012c36:	4618      	mov	r0, r3
 8012c38:	f002 fbc7 	bl	80153ca <RegionVerify>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d005      	beq.n	8012c4e <LoRaMacMibSetRequestConfirm+0x59e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8012c42:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012c46:	4b10      	ldr	r3, [pc, #64]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012c48:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012c4c:	e083      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012c4e:	2303      	movs	r3, #3
 8012c50:	75fb      	strb	r3, [r7, #23]
            break;
 8012c52:	e080      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012c5a:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8012c5c:	4b0a      	ldr	r3, [pc, #40]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c62:	f107 0108 	add.w	r1, r7, #8
 8012c66:	2209      	movs	r2, #9
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f002 fbae 	bl	80153ca <RegionVerify>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d005      	beq.n	8012c80 <LoRaMacMibSetRequestConfirm+0x5d0>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8012c74:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012c78:	4b03      	ldr	r3, [pc, #12]	; (8012c88 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8012c7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012c7e:	e06a      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012c80:	2303      	movs	r3, #3
 8012c82:	75fb      	strb	r3, [r7, #23]
            break;
 8012c84:	e067      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
 8012c86:	bf00      	nop
 8012c88:	20001134 	.word	0x20001134
 8012c8c:	0801d0b0 	.word	0x0801d0b0
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	4a32      	ldr	r2, [pc, #200]	; (8012d60 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8012c96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8012c9a:	4b31      	ldr	r3, [pc, #196]	; (8012d60 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8012c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012ca0:	4a2f      	ldr	r2, [pc, #188]	; (8012d60 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8012ca2:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8012ca4:	e057      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	791a      	ldrb	r2, [r3, #4]
 8012caa:	4b2d      	ldr	r3, [pc, #180]	; (8012d60 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8012cac:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8012cb0:	4b2b      	ldr	r3, [pc, #172]	; (8012d60 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8012cb2:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012cb6:	4b2a      	ldr	r3, [pc, #168]	; (8012d60 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8012cb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8012cbc:	e04b      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	685b      	ldr	r3, [r3, #4]
 8012cc2:	4a27      	ldr	r2, [pc, #156]	; (8012d60 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8012cc4:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8012cc6:	e046      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	685b      	ldr	r3, [r3, #4]
 8012ccc:	4a24      	ldr	r2, [pc, #144]	; (8012d60 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8012cce:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 8012cd2:	e040      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8012cd4:	f7fe fdb2 	bl	801183c <RestoreNvmData>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	75fb      	strb	r3, [r7, #23]
            break;
 8012cdc:	e03b      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	799b      	ldrb	r3, [r3, #6]
 8012ce2:	2b01      	cmp	r3, #1
 8012ce4:	d80d      	bhi.n	8012d02 <LoRaMacMibSetRequestConfirm+0x652>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8012ce6:	4a1e      	ldr	r2, [pc, #120]	; (8012d60 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	685b      	ldr	r3, [r3, #4]
 8012cec:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	6858      	ldr	r0, [r3, #4]
 8012cf4:	f001 fc78 	bl	80145e8 <LoRaMacCryptoSetLrWanVersion>
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d02a      	beq.n	8012d54 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012cfe:	2311      	movs	r3, #17
 8012d00:	e02a      	b.n	8012d58 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012d02:	2303      	movs	r3, #3
 8012d04:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012d06:	e025      	b.n	8012d54 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	685b      	ldr	r3, [r3, #4]
 8012d0c:	4a14      	ldr	r2, [pc, #80]	; (8012d60 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8012d0e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8012d12:	e020      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8012d14:	6878      	ldr	r0, [r7, #4]
 8012d16:	f000 fc0d 	bl	8013534 <LoRaMacMibClassBSetRequestConfirm>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	75fb      	strb	r3, [r7, #23]
            break;
 8012d1e:	e01a      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8012d20:	bf00      	nop
 8012d22:	e018      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8012d24:	bf00      	nop
 8012d26:	e016      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8012d28:	bf00      	nop
 8012d2a:	e014      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8012d2c:	bf00      	nop
 8012d2e:	e012      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8012d30:	bf00      	nop
 8012d32:	e010      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8012d34:	bf00      	nop
 8012d36:	e00e      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8012d38:	bf00      	nop
 8012d3a:	e00c      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8012d3c:	bf00      	nop
 8012d3e:	e00a      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8012d40:	bf00      	nop
 8012d42:	e008      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8012d44:	bf00      	nop
 8012d46:	e006      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8012d48:	bf00      	nop
 8012d4a:	e004      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8012d4c:	bf00      	nop
 8012d4e:	e002      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8012d50:	bf00      	nop
 8012d52:	e000      	b.n	8012d56 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8012d54:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8012d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d58:	4618      	mov	r0, r3
 8012d5a:	3718      	adds	r7, #24
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	20001134 	.word	0x20001134

08012d64 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b086      	sub	sp, #24
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012d6c:	2302      	movs	r3, #2
 8012d6e:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012d70:	2300      	movs	r3, #0
 8012d72:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d101      	bne.n	8012d7e <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012d7a:	2303      	movs	r3, #3
 8012d7c:	e127      	b.n	8012fce <LoRaMacMlmeRequest+0x26a>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8012d7e:	f7fc fcd3 	bl	800f728 <LoRaMacIsBusy>
 8012d82:	4603      	mov	r3, r0
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d001      	beq.n	8012d8c <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8012d88:	2301      	movs	r3, #1
 8012d8a:	e120      	b.n	8012fce <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8012d8c:	f001 f8d0 	bl	8013f30 <LoRaMacConfirmQueueIsFull>
 8012d90:	4603      	mov	r3, r0
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d001      	beq.n	8012d9a <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8012d96:	2301      	movs	r3, #1
 8012d98:	e119      	b.n	8012fce <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012d9a:	f001 f8bd 	bl	8013f18 <LoRaMacConfirmQueueGetCnt>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d104      	bne.n	8012dae <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8012da4:	2214      	movs	r2, #20
 8012da6:	2100      	movs	r1, #0
 8012da8:	488b      	ldr	r0, [pc, #556]	; (8012fd8 <LoRaMacMlmeRequest+0x274>)
 8012daa:	f004 fe21 	bl	80179f0 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012dae:	4b8b      	ldr	r3, [pc, #556]	; (8012fdc <LoRaMacMlmeRequest+0x278>)
 8012db0:	2201      	movs	r2, #1
 8012db2:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8012db6:	4a89      	ldr	r2, [pc, #548]	; (8012fdc <LoRaMacMlmeRequest+0x278>)
 8012db8:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8012dbc:	f043 0304 	orr.w	r3, r3, #4
 8012dc0:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012dca:	2301      	movs	r3, #1
 8012dcc:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	74fb      	strb	r3, [r7, #19]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	781b      	ldrb	r3, [r3, #0]
 8012dd6:	3b01      	subs	r3, #1
 8012dd8:	2b0d      	cmp	r3, #13
 8012dda:	f200 80ce 	bhi.w	8012f7a <LoRaMacMlmeRequest+0x216>
 8012dde:	a201      	add	r2, pc, #4	; (adr r2, 8012de4 <LoRaMacMlmeRequest+0x80>)
 8012de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012de4:	08012e1d 	.word	0x08012e1d
 8012de8:	08012f7b 	.word	0x08012f7b
 8012dec:	08012f7b 	.word	0x08012f7b
 8012df0:	08012e87 	.word	0x08012e87
 8012df4:	08012ea5 	.word	0x08012ea5
 8012df8:	08012eb5 	.word	0x08012eb5
 8012dfc:	08012f7b 	.word	0x08012f7b
 8012e00:	08012f7b 	.word	0x08012f7b
 8012e04:	08012f7b 	.word	0x08012f7b
 8012e08:	08012ed1 	.word	0x08012ed1
 8012e0c:	08012f7b 	.word	0x08012f7b
 8012e10:	08012f4f 	.word	0x08012f4f
 8012e14:	08012eef 	.word	0x08012eef
 8012e18:	08012f31 	.word	0x08012f31
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8012e1c:	4b6f      	ldr	r3, [pc, #444]	; (8012fdc <LoRaMacMlmeRequest+0x278>)
 8012e1e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012e22:	f003 0320 	and.w	r3, r3, #32
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d001      	beq.n	8012e2e <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8012e2a:	2301      	movs	r3, #1
 8012e2c:	e0cf      	b.n	8012fce <LoRaMacMlmeRequest+0x26a>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( );
 8012e2e:	f7fe f989 	bl	8011144 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8012e32:	4b6b      	ldr	r3, [pc, #428]	; (8012fe0 <LoRaMacMlmeRequest+0x27c>)
 8012e34:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	795b      	ldrb	r3, [r3, #5]
 8012e3c:	b25b      	sxtb	r3, r3
 8012e3e:	2200      	movs	r2, #0
 8012e40:	4619      	mov	r1, r3
 8012e42:	f002 fbaa 	bl	801559a <RegionAlternateDr>
 8012e46:	4603      	mov	r3, r0
 8012e48:	461a      	mov	r2, r3
 8012e4a:	4b65      	ldr	r3, [pc, #404]	; (8012fe0 <LoRaMacMlmeRequest+0x27c>)
 8012e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8012e50:	2307      	movs	r3, #7
 8012e52:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8012e54:	20ff      	movs	r0, #255	; 0xff
 8012e56:	f7fd feed 	bl	8010c34 <SendReJoinReq>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8012e5e:	7dfb      	ldrb	r3, [r7, #23]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	f000 808c 	beq.w	8012f7e <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8012e66:	4b5e      	ldr	r3, [pc, #376]	; (8012fe0 <LoRaMacMlmeRequest+0x27c>)
 8012e68:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	795b      	ldrb	r3, [r3, #5]
 8012e70:	b25b      	sxtb	r3, r3
 8012e72:	2201      	movs	r2, #1
 8012e74:	4619      	mov	r1, r3
 8012e76:	f002 fb90 	bl	801559a <RegionAlternateDr>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	461a      	mov	r2, r3
 8012e7e:	4b58      	ldr	r3, [pc, #352]	; (8012fe0 <LoRaMacMlmeRequest+0x27c>)
 8012e80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8012e84:	e07b      	b.n	8012f7e <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012e86:	2300      	movs	r3, #0
 8012e88:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012e8a:	f107 030c 	add.w	r3, r7, #12
 8012e8e:	2200      	movs	r2, #0
 8012e90:	4619      	mov	r1, r3
 8012e92:	2002      	movs	r0, #2
 8012e94:	f000 fcb2 	bl	80137fc <LoRaMacCommandsAddCmd>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d071      	beq.n	8012f82 <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012e9e:	2313      	movs	r3, #19
 8012ea0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012ea2:	e06e      	b.n	8012f82 <LoRaMacMlmeRequest+0x21e>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	889b      	ldrh	r3, [r3, #4]
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f7fe fc73 	bl	8011794 <SetTxContinuousWave>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	75fb      	strb	r3, [r7, #23]
            break;
 8012eb2:	e06d      	b.n	8012f90 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	8898      	ldrh	r0, [r3, #4]
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	6899      	ldr	r1, [r3, #8]
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8012ec2:	b2db      	uxtb	r3, r3
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	f7fe fc99 	bl	80117fc <SetTxContinuousWave1>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	75fb      	strb	r3, [r7, #23]
            break;
 8012ece:	e05f      	b.n	8012f90 <LoRaMacMlmeRequest+0x22c>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012ed4:	f107 030c 	add.w	r3, r7, #12
 8012ed8:	2200      	movs	r2, #0
 8012eda:	4619      	mov	r1, r3
 8012edc:	200d      	movs	r0, #13
 8012ede:	f000 fc8d 	bl	80137fc <LoRaMacCommandsAddCmd>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d04e      	beq.n	8012f86 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012ee8:	2313      	movs	r3, #19
 8012eea:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012eec:	e04b      	b.n	8012f86 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012eee:	4b3c      	ldr	r3, [pc, #240]	; (8012fe0 <LoRaMacMlmeRequest+0x27c>)
 8012ef0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d148      	bne.n	8012f8a <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	791b      	ldrb	r3, [r3, #4]
 8012efc:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	791b      	ldrb	r3, [r3, #4]
 8012f02:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012f06:	b2db      	uxtb	r3, r3
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f000 fae8 	bl	80134de <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8012f0e:	7dbb      	ldrb	r3, [r7, #22]
 8012f10:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8012f12:	2300      	movs	r3, #0
 8012f14:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8012f16:	f107 030c 	add.w	r3, r7, #12
 8012f1a:	2201      	movs	r2, #1
 8012f1c:	4619      	mov	r1, r3
 8012f1e:	2010      	movs	r0, #16
 8012f20:	f000 fc6c 	bl	80137fc <LoRaMacCommandsAddCmd>
 8012f24:	4603      	mov	r3, r0
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d02f      	beq.n	8012f8a <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012f2a:	2313      	movs	r3, #19
 8012f2c:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8012f2e:	e02c      	b.n	8012f8a <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012f30:	2300      	movs	r3, #0
 8012f32:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012f34:	f107 030c 	add.w	r3, r7, #12
 8012f38:	2200      	movs	r2, #0
 8012f3a:	4619      	mov	r1, r3
 8012f3c:	2012      	movs	r0, #18
 8012f3e:	f000 fc5d 	bl	80137fc <LoRaMacCommandsAddCmd>
 8012f42:	4603      	mov	r3, r0
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d022      	beq.n	8012f8e <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012f48:	2313      	movs	r3, #19
 8012f4a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012f4c:	e01f      	b.n	8012f8e <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8012f4e:	2301      	movs	r3, #1
 8012f50:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8012f52:	f000 fa7a 	bl	801344a <LoRaMacClassBIsAcquisitionInProgress>
 8012f56:	4603      	mov	r3, r0
 8012f58:	f083 0301 	eor.w	r3, r3, #1
 8012f5c:	b2db      	uxtb	r3, r3
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d008      	beq.n	8012f74 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8012f62:	2000      	movs	r0, #0
 8012f64:	f000 fa53 	bl	801340e <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8012f68:	2000      	movs	r0, #0
 8012f6a:	f000 fa75 	bl	8013458 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8012f6e:	2300      	movs	r3, #0
 8012f70:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012f72:	e00d      	b.n	8012f90 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8012f74:	2301      	movs	r3, #1
 8012f76:	75fb      	strb	r3, [r7, #23]
            break;
 8012f78:	e00a      	b.n	8012f90 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8012f7a:	bf00      	nop
 8012f7c:	e008      	b.n	8012f90 <LoRaMacMlmeRequest+0x22c>
            break;
 8012f7e:	bf00      	nop
 8012f80:	e006      	b.n	8012f90 <LoRaMacMlmeRequest+0x22c>
            break;
 8012f82:	bf00      	nop
 8012f84:	e004      	b.n	8012f90 <LoRaMacMlmeRequest+0x22c>
            break;
 8012f86:	bf00      	nop
 8012f88:	e002      	b.n	8012f90 <LoRaMacMlmeRequest+0x22c>
            break;
 8012f8a:	bf00      	nop
 8012f8c:	e000      	b.n	8012f90 <LoRaMacMlmeRequest+0x22c>
            break;
 8012f8e:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012f90:	4b12      	ldr	r3, [pc, #72]	; (8012fdc <LoRaMacMlmeRequest+0x278>)
 8012f92:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8012f9a:	7dfb      	ldrb	r3, [r7, #23]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d010      	beq.n	8012fc2 <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012fa0:	f000 ffba 	bl	8013f18 <LoRaMacConfirmQueueGetCnt>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d110      	bne.n	8012fcc <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8012faa:	4b0c      	ldr	r3, [pc, #48]	; (8012fdc <LoRaMacMlmeRequest+0x278>)
 8012fac:	2200      	movs	r2, #0
 8012fae:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012fb2:	4a0a      	ldr	r2, [pc, #40]	; (8012fdc <LoRaMacMlmeRequest+0x278>)
 8012fb4:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8012fb8:	f36f 0382 	bfc	r3, #2, #1
 8012fbc:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8012fc0:	e004      	b.n	8012fcc <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8012fc2:	f107 0310 	add.w	r3, r7, #16
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f000 fe58 	bl	8013c7c <LoRaMacConfirmQueueAdd>
    }
    return status;
 8012fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3718      	adds	r7, #24
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	20001074 	.word	0x20001074
 8012fdc:	20000c28 	.word	0x20000c28
 8012fe0:	20001134 	.word	0x20001134

08012fe4 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b08c      	sub	sp, #48	; 0x30
 8012fe8:	af02      	add	r7, sp, #8
 8012fea:	6078      	str	r0, [r7, #4]
 8012fec:	460b      	mov	r3, r1
 8012fee:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012ff0:	2302      	movs	r3, #2
 8012ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8013000:	2300      	movs	r3, #0
 8013002:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8013004:	2300      	movs	r3, #0
 8013006:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d101      	bne.n	8013012 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801300e:	2303      	movs	r3, #3
 8013010:	e0d4      	b.n	80131bc <LoRaMacMcpsRequest+0x1d8>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8013012:	f7fc fb89 	bl	800f728 <LoRaMacIsBusy>
 8013016:	4603      	mov	r3, r0
 8013018:	2b00      	cmp	r3, #0
 801301a:	d001      	beq.n	8013020 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 801301c:	2301      	movs	r3, #1
 801301e:	e0cd      	b.n	80131bc <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8013020:	2300      	movs	r3, #0
 8013022:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8013024:	2214      	movs	r2, #20
 8013026:	2100      	movs	r1, #0
 8013028:	4866      	ldr	r0, [pc, #408]	; (80131c4 <LoRaMacMcpsRequest+0x1e0>)
 801302a:	f004 fce1 	bl	80179f0 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801302e:	4b66      	ldr	r3, [pc, #408]	; (80131c8 <LoRaMacMcpsRequest+0x1e4>)
 8013030:	2201      	movs	r2, #1
 8013032:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013036:	4b64      	ldr	r3, [pc, #400]	; (80131c8 <LoRaMacMcpsRequest+0x1e4>)
 8013038:	2201      	movs	r2, #1
 801303a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	781b      	ldrb	r3, [r3, #0]
 8013042:	2b03      	cmp	r3, #3
 8013044:	d03d      	beq.n	80130c2 <LoRaMacMcpsRequest+0xde>
 8013046:	2b03      	cmp	r3, #3
 8013048:	dc4f      	bgt.n	80130ea <LoRaMacMcpsRequest+0x106>
 801304a:	2b00      	cmp	r3, #0
 801304c:	d002      	beq.n	8013054 <LoRaMacMcpsRequest+0x70>
 801304e:	2b01      	cmp	r3, #1
 8013050:	d019      	beq.n	8013086 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8013052:	e04a      	b.n	80130ea <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8013054:	2301      	movs	r3, #1
 8013056:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8013058:	4b5b      	ldr	r3, [pc, #364]	; (80131c8 <LoRaMacMcpsRequest+0x1e4>)
 801305a:	2201      	movs	r2, #1
 801305c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8013060:	7b3b      	ldrb	r3, [r7, #12]
 8013062:	2202      	movs	r2, #2
 8013064:	f362 1347 	bfi	r3, r2, #5, #3
 8013068:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	791b      	ldrb	r3, [r3, #4]
 801306e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	689b      	ldr	r3, [r3, #8]
 8013076:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	899b      	ldrh	r3, [r3, #12]
 801307c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	7b9b      	ldrb	r3, [r3, #14]
 8013082:	777b      	strb	r3, [r7, #29]
            break;
 8013084:	e032      	b.n	80130ec <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8013086:	2301      	movs	r3, #1
 8013088:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	7bdb      	ldrb	r3, [r3, #15]
 801308e:	2b08      	cmp	r3, #8
 8013090:	bf28      	it	cs
 8013092:	2308      	movcs	r3, #8
 8013094:	b2da      	uxtb	r2, r3
 8013096:	4b4c      	ldr	r3, [pc, #304]	; (80131c8 <LoRaMacMcpsRequest+0x1e4>)
 8013098:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 801309c:	7b3b      	ldrb	r3, [r7, #12]
 801309e:	2204      	movs	r2, #4
 80130a0:	f362 1347 	bfi	r3, r2, #5, #3
 80130a4:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	791b      	ldrb	r3, [r3, #4]
 80130aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	689b      	ldr	r3, [r3, #8]
 80130b2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	899b      	ldrh	r3, [r3, #12]
 80130b8:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	7b9b      	ldrb	r3, [r3, #14]
 80130be:	777b      	strb	r3, [r7, #29]
            break;
 80130c0:	e014      	b.n	80130ec <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80130c2:	2301      	movs	r3, #1
 80130c4:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80130c6:	4b40      	ldr	r3, [pc, #256]	; (80131c8 <LoRaMacMcpsRequest+0x1e4>)
 80130c8:	2201      	movs	r2, #1
 80130ca:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80130ce:	7b3b      	ldrb	r3, [r7, #12]
 80130d0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80130d4:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	685b      	ldr	r3, [r3, #4]
 80130da:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	891b      	ldrh	r3, [r3, #8]
 80130e0:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	7a9b      	ldrb	r3, [r3, #10]
 80130e6:	777b      	strb	r3, [r7, #29]
            break;
 80130e8:	e000      	b.n	80130ec <LoRaMacMcpsRequest+0x108>
            break;
 80130ea:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80130ec:	2302      	movs	r3, #2
 80130ee:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80130f0:	4b36      	ldr	r3, [pc, #216]	; (80131cc <LoRaMacMcpsRequest+0x1e8>)
 80130f2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80130f6:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80130f8:	4b34      	ldr	r3, [pc, #208]	; (80131cc <LoRaMacMcpsRequest+0x1e8>)
 80130fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80130fe:	f107 0214 	add.w	r2, r7, #20
 8013102:	4611      	mov	r1, r2
 8013104:	4618      	mov	r0, r3
 8013106:	f002 f925 	bl	8015354 <RegionGetPhyParam>
 801310a:	4603      	mov	r3, r0
 801310c:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801310e:	693b      	ldr	r3, [r7, #16]
 8013110:	b25b      	sxtb	r3, r3
 8013112:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8013116:	4293      	cmp	r3, r2
 8013118:	bfb8      	it	lt
 801311a:	4613      	movlt	r3, r2
 801311c:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 801311e:	7f3b      	ldrb	r3, [r7, #28]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d044      	beq.n	80131ae <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8013124:	4b29      	ldr	r3, [pc, #164]	; (80131cc <LoRaMacMcpsRequest+0x1e8>)
 8013126:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801312a:	f083 0301 	eor.w	r3, r3, #1
 801312e:	b2db      	uxtb	r3, r3
 8013130:	2b00      	cmp	r3, #0
 8013132:	d019      	beq.n	8013168 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8013134:	7f7b      	ldrb	r3, [r7, #29]
 8013136:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013138:	4b24      	ldr	r3, [pc, #144]	; (80131cc <LoRaMacMcpsRequest+0x1e8>)
 801313a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801313e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013140:	4b22      	ldr	r3, [pc, #136]	; (80131cc <LoRaMacMcpsRequest+0x1e8>)
 8013142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013146:	f107 0108 	add.w	r1, r7, #8
 801314a:	2205      	movs	r2, #5
 801314c:	4618      	mov	r0, r3
 801314e:	f002 f93c 	bl	80153ca <RegionVerify>
 8013152:	4603      	mov	r3, r0
 8013154:	2b00      	cmp	r3, #0
 8013156:	d005      	beq.n	8013164 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013158:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801315c:	4b1b      	ldr	r3, [pc, #108]	; (80131cc <LoRaMacMcpsRequest+0x1e8>)
 801315e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8013162:	e001      	b.n	8013168 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8013164:	2303      	movs	r3, #3
 8013166:	e029      	b.n	80131bc <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8013168:	8bfa      	ldrh	r2, [r7, #30]
 801316a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 801316e:	f107 000c 	add.w	r0, r7, #12
 8013172:	78fb      	ldrb	r3, [r7, #3]
 8013174:	9300      	str	r3, [sp, #0]
 8013176:	4613      	mov	r3, r2
 8013178:	6a3a      	ldr	r2, [r7, #32]
 801317a:	f7fd fc7b 	bl	8010a74 <Send>
 801317e:	4603      	mov	r3, r0
 8013180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8013184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013188:	2b00      	cmp	r3, #0
 801318a:	d10c      	bne.n	80131a6 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	781a      	ldrb	r2, [r3, #0]
 8013190:	4b0d      	ldr	r3, [pc, #52]	; (80131c8 <LoRaMacMcpsRequest+0x1e4>)
 8013192:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8013196:	4a0c      	ldr	r2, [pc, #48]	; (80131c8 <LoRaMacMcpsRequest+0x1e4>)
 8013198:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801319c:	f043 0301 	orr.w	r3, r3, #1
 80131a0:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 80131a4:	e003      	b.n	80131ae <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80131a6:	4b08      	ldr	r3, [pc, #32]	; (80131c8 <LoRaMacMcpsRequest+0x1e4>)
 80131a8:	2200      	movs	r2, #0
 80131aa:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80131ae:	4b06      	ldr	r3, [pc, #24]	; (80131c8 <LoRaMacMcpsRequest+0x1e4>)
 80131b0:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	611a      	str	r2, [r3, #16]

    return status;
 80131b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80131bc:	4618      	mov	r0, r3
 80131be:	3728      	adds	r7, #40	; 0x28
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd80      	pop	{r7, pc}
 80131c4:	20001060 	.word	0x20001060
 80131c8:	20000c28 	.word	0x20000c28
 80131cc:	20001134 	.word	0x20001134

080131d0 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b084      	sub	sp, #16
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	4603      	mov	r3, r0
 80131d8:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80131da:	79fb      	ldrb	r3, [r7, #7]
 80131dc:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80131de:	4b0a      	ldr	r3, [pc, #40]	; (8013208 <LoRaMacTestSetDutyCycleOn+0x38>)
 80131e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80131e4:	f107 010c 	add.w	r1, r7, #12
 80131e8:	220f      	movs	r2, #15
 80131ea:	4618      	mov	r0, r3
 80131ec:	f002 f8ed 	bl	80153ca <RegionVerify>
 80131f0:	4603      	mov	r3, r0
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d003      	beq.n	80131fe <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80131f6:	4a04      	ldr	r2, [pc, #16]	; (8013208 <LoRaMacTestSetDutyCycleOn+0x38>)
 80131f8:	79fb      	ldrb	r3, [r7, #7]
 80131fa:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 80131fe:	bf00      	nop
 8013200:	3710      	adds	r7, #16
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}
 8013206:	bf00      	nop
 8013208:	20001134 	.word	0x20001134

0801320c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 801320c:	b580      	push	{r7, lr}
 801320e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8013210:	f7fe ffec 	bl	80121ec <LoRaMacStop>
 8013214:	4603      	mov	r3, r0
 8013216:	2b00      	cmp	r3, #0
 8013218:	d114      	bne.n	8013244 <LoRaMacDeInitialization+0x38>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801321a:	480c      	ldr	r0, [pc, #48]	; (801324c <LoRaMacDeInitialization+0x40>)
 801321c:	f008 fcf8 	bl	801bc10 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8013220:	480b      	ldr	r0, [pc, #44]	; (8013250 <LoRaMacDeInitialization+0x44>)
 8013222:	f008 fcf5 	bl	801bc10 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8013226:	480b      	ldr	r0, [pc, #44]	; (8013254 <LoRaMacDeInitialization+0x48>)
 8013228:	f008 fcf2 	bl	801bc10 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 801322c:	480a      	ldr	r0, [pc, #40]	; (8013258 <LoRaMacDeInitialization+0x4c>)
 801322e:	f008 fcef 	bl	801bc10 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8013232:	f000 f95e 	bl	80134f2 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8013236:	f7fd ff85 	bl	8011144 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 801323a:	4b08      	ldr	r3, [pc, #32]	; (801325c <LoRaMacDeInitialization+0x50>)
 801323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801323e:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8013240:	2300      	movs	r3, #0
 8013242:	e000      	b.n	8013246 <LoRaMacDeInitialization+0x3a>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8013244:	2301      	movs	r3, #1
    }
}
 8013246:	4618      	mov	r0, r3
 8013248:	bd80      	pop	{r7, pc}
 801324a:	bf00      	nop
 801324c:	20000f90 	.word	0x20000f90
 8013250:	20000fa8 	.word	0x20000fa8
 8013254:	20000fc0 	.word	0x20000fc0
 8013258:	20001020 	.word	0x20001020
 801325c:	0801d0b0 	.word	0x0801d0b0

08013260 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b08c      	sub	sp, #48	; 0x30
 8013264:	af00      	add	r7, sp, #0
 8013266:	60f8      	str	r0, [r7, #12]
 8013268:	60b9      	str	r1, [r7, #8]
 801326a:	607a      	str	r2, [r7, #4]
 801326c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801326e:	2300      	movs	r3, #0
 8013270:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	7c1b      	ldrb	r3, [r3, #16]
 8013278:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	7c5b      	ldrb	r3, [r3, #17]
 8013280:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	689a      	ldr	r2, [r3, #8]
 8013288:	683b      	ldr	r3, [r7, #0]
 801328a:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	795b      	ldrb	r3, [r3, #5]
 8013290:	2b00      	cmp	r3, #0
 8013292:	f000 808b 	beq.w	80133ac <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8013296:	2302      	movs	r3, #2
 8013298:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	7c9b      	ldrb	r3, [r3, #18]
 80132a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	7cdb      	ldrb	r3, [r3, #19]
 80132a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80132ac:	4611      	mov	r1, r2
 80132ae:	4618      	mov	r0, r3
 80132b0:	f002 f850 	bl	8015354 <RegionGetPhyParam>
 80132b4:	4603      	mov	r3, r0
 80132b6:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80132b8:	6a3b      	ldr	r3, [r7, #32]
 80132ba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 80132be:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 80132c2:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80132c6:	4293      	cmp	r3, r2
 80132c8:	bfb8      	it	lt
 80132ca:	4613      	movlt	r3, r2
 80132cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 80132d0:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80132d4:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80132d8:	429a      	cmp	r2, r3
 80132da:	d106      	bne.n	80132ea <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	2200      	movs	r2, #0
 80132e0:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80132e2:	2300      	movs	r3, #0
 80132e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80132e8:	e060      	b.n	80133ac <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	689b      	ldr	r3, [r3, #8]
 80132ee:	68fa      	ldr	r2, [r7, #12]
 80132f0:	8992      	ldrh	r2, [r2, #12]
 80132f2:	4293      	cmp	r3, r2
 80132f4:	d303      	bcc.n	80132fe <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 80132f6:	2301      	movs	r3, #1
 80132f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80132fc:	e002      	b.n	8013304 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 80132fe:	2300      	movs	r3, #0
 8013300:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	689b      	ldr	r3, [r3, #8]
 8013308:	68fa      	ldr	r2, [r7, #12]
 801330a:	8992      	ldrh	r2, [r2, #12]
 801330c:	4611      	mov	r1, r2
 801330e:	68fa      	ldr	r2, [r7, #12]
 8013310:	89d2      	ldrh	r2, [r2, #14]
 8013312:	440a      	add	r2, r1
 8013314:	4293      	cmp	r3, r2
 8013316:	d349      	bcc.n	80133ac <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8013318:	2308      	movs	r3, #8
 801331a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	7cdb      	ldrb	r3, [r3, #19]
 8013322:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013326:	4611      	mov	r1, r2
 8013328:	4618      	mov	r0, r3
 801332a:	f002 f813 	bl	8015354 <RegionGetPhyParam>
 801332e:	4603      	mov	r3, r0
 8013330:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8013332:	6a3b      	ldr	r3, [r7, #32]
 8013334:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	689b      	ldr	r3, [r3, #8]
 801333c:	68fa      	ldr	r2, [r7, #12]
 801333e:	89d2      	ldrh	r2, [r2, #14]
 8013340:	fbb3 f1f2 	udiv	r1, r3, r2
 8013344:	fb01 f202 	mul.w	r2, r1, r2
 8013348:	1a9b      	subs	r3, r3, r2
 801334a:	2b01      	cmp	r3, #1
 801334c:	d12e      	bne.n	80133ac <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801334e:	2322      	movs	r3, #34	; 0x22
 8013350:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8013354:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013358:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	7c9b      	ldrb	r3, [r3, #18]
 8013360:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	7cdb      	ldrb	r3, [r3, #19]
 8013368:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801336c:	4611      	mov	r1, r2
 801336e:	4618      	mov	r0, r3
 8013370:	f001 fff0 	bl	8015354 <RegionGetPhyParam>
 8013374:	4603      	mov	r3, r0
 8013376:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8013378:	6a3b      	ldr	r3, [r7, #32]
 801337a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 801337e:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8013382:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8013386:	429a      	cmp	r2, r3
 8013388:	d110      	bne.n	80133ac <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 801338a:	2300      	movs	r3, #0
 801338c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	791b      	ldrb	r3, [r3, #4]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d009      	beq.n	80133ac <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013398:	2302      	movs	r3, #2
 801339a:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	7cdb      	ldrb	r3, [r3, #19]
 80133a0:	f107 0214 	add.w	r2, r7, #20
 80133a4:	4611      	mov	r1, r2
 80133a6:	4618      	mov	r0, r3
 80133a8:	f001 fffd 	bl	80153a6 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80133b2:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80133ba:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80133bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80133c0:	4618      	mov	r0, r3
 80133c2:	3730      	adds	r7, #48	; 0x30
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}

080133c8 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b084      	sub	sp, #16
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	60f8      	str	r0, [r7, #12]
 80133d0:	60b9      	str	r1, [r7, #8]
 80133d2:	607a      	str	r2, [r7, #4]
 80133d4:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	789b      	ldrb	r3, [r3, #2]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d107      	bne.n	80133ee <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	687a      	ldr	r2, [r7, #4]
 80133e2:	68b9      	ldr	r1, [r7, #8]
 80133e4:	68f8      	ldr	r0, [r7, #12]
 80133e6:	f7ff ff3b 	bl	8013260 <CalcNextV10X>
 80133ea:	4603      	mov	r3, r0
 80133ec:	e000      	b.n	80133f0 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80133ee:	2300      	movs	r3, #0
}
 80133f0:	4618      	mov	r0, r3
 80133f2:	3710      	adds	r7, #16
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}

080133f8 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80133f8:	b480      	push	{r7}
 80133fa:	b085      	sub	sp, #20
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	60f8      	str	r0, [r7, #12]
 8013400:	60b9      	str	r1, [r7, #8]
 8013402:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013404:	bf00      	nop
 8013406:	3714      	adds	r7, #20
 8013408:	46bd      	mov	sp, r7
 801340a:	bc80      	pop	{r7}
 801340c:	4770      	bx	lr

0801340e <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801340e:	b480      	push	{r7}
 8013410:	b083      	sub	sp, #12
 8013412:	af00      	add	r7, sp, #0
 8013414:	4603      	mov	r3, r0
 8013416:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013418:	bf00      	nop
 801341a:	370c      	adds	r7, #12
 801341c:	46bd      	mov	sp, r7
 801341e:	bc80      	pop	{r7}
 8013420:	4770      	bx	lr

08013422 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8013422:	b480      	push	{r7}
 8013424:	b083      	sub	sp, #12
 8013426:	af00      	add	r7, sp, #0
 8013428:	4603      	mov	r3, r0
 801342a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801342c:	bf00      	nop
 801342e:	370c      	adds	r7, #12
 8013430:	46bd      	mov	sp, r7
 8013432:	bc80      	pop	{r7}
 8013434:	4770      	bx	lr

08013436 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8013436:	b480      	push	{r7}
 8013438:	b083      	sub	sp, #12
 801343a:	af00      	add	r7, sp, #0
 801343c:	4603      	mov	r3, r0
 801343e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013440:	bf00      	nop
 8013442:	370c      	adds	r7, #12
 8013444:	46bd      	mov	sp, r7
 8013446:	bc80      	pop	{r7}
 8013448:	4770      	bx	lr

0801344a <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801344a:	b480      	push	{r7}
 801344c:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801344e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013450:	4618      	mov	r0, r3
 8013452:	46bd      	mov	sp, r7
 8013454:	bc80      	pop	{r7}
 8013456:	4770      	bx	lr

08013458 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8013458:	b480      	push	{r7}
 801345a:	b083      	sub	sp, #12
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013460:	bf00      	nop
 8013462:	370c      	adds	r7, #12
 8013464:	46bd      	mov	sp, r7
 8013466:	bc80      	pop	{r7}
 8013468:	4770      	bx	lr

0801346a <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 801346a:	b480      	push	{r7}
 801346c:	b083      	sub	sp, #12
 801346e:	af00      	add	r7, sp, #0
 8013470:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013472:	bf00      	nop
 8013474:	370c      	adds	r7, #12
 8013476:	46bd      	mov	sp, r7
 8013478:	bc80      	pop	{r7}
 801347a:	4770      	bx	lr

0801347c <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 801347c:	b480      	push	{r7}
 801347e:	b083      	sub	sp, #12
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013484:	bf00      	nop
 8013486:	370c      	adds	r7, #12
 8013488:	46bd      	mov	sp, r7
 801348a:	bc80      	pop	{r7}
 801348c:	4770      	bx	lr

0801348e <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801348e:	b480      	push	{r7}
 8013490:	b083      	sub	sp, #12
 8013492:	af00      	add	r7, sp, #0
 8013494:	6078      	str	r0, [r7, #4]
 8013496:	460b      	mov	r3, r1
 8013498:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 801349a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801349c:	4618      	mov	r0, r3
 801349e:	370c      	adds	r7, #12
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bc80      	pop	{r7}
 80134a4:	4770      	bx	lr

080134a6 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80134a6:	b480      	push	{r7}
 80134a8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80134aa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134ac:	4618      	mov	r0, r3
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bc80      	pop	{r7}
 80134b2:	4770      	bx	lr

080134b4 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80134b4:	b480      	push	{r7}
 80134b6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80134b8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134ba:	4618      	mov	r0, r3
 80134bc:	46bd      	mov	sp, r7
 80134be:	bc80      	pop	{r7}
 80134c0:	4770      	bx	lr

080134c2 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80134c2:	b480      	push	{r7}
 80134c4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80134c6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bc80      	pop	{r7}
 80134ce:	4770      	bx	lr

080134d0 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80134d0:	b480      	push	{r7}
 80134d2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80134d4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	46bd      	mov	sp, r7
 80134da:	bc80      	pop	{r7}
 80134dc:	4770      	bx	lr

080134de <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80134de:	b480      	push	{r7}
 80134e0:	b083      	sub	sp, #12
 80134e2:	af00      	add	r7, sp, #0
 80134e4:	4603      	mov	r3, r0
 80134e6:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134e8:	bf00      	nop
 80134ea:	370c      	adds	r7, #12
 80134ec:	46bd      	mov	sp, r7
 80134ee:	bc80      	pop	{r7}
 80134f0:	4770      	bx	lr

080134f2 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80134f2:	b480      	push	{r7}
 80134f4:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134f6:	bf00      	nop
 80134f8:	46bd      	mov	sp, r7
 80134fa:	bc80      	pop	{r7}
 80134fc:	4770      	bx	lr

080134fe <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80134fe:	b480      	push	{r7}
 8013500:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013502:	bf00      	nop
 8013504:	46bd      	mov	sp, r7
 8013506:	bc80      	pop	{r7}
 8013508:	4770      	bx	lr

0801350a <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801350a:	b480      	push	{r7}
 801350c:	b083      	sub	sp, #12
 801350e:	af00      	add	r7, sp, #0
 8013510:	4603      	mov	r3, r0
 8013512:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013514:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013516:	4618      	mov	r0, r3
 8013518:	370c      	adds	r7, #12
 801351a:	46bd      	mov	sp, r7
 801351c:	bc80      	pop	{r7}
 801351e:	4770      	bx	lr

08013520 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8013520:	b480      	push	{r7}
 8013522:	b083      	sub	sp, #12
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013528:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801352a:	4618      	mov	r0, r3
 801352c:	370c      	adds	r7, #12
 801352e:	46bd      	mov	sp, r7
 8013530:	bc80      	pop	{r7}
 8013532:	4770      	bx	lr

08013534 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8013534:	b480      	push	{r7}
 8013536:	b083      	sub	sp, #12
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801353c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801353e:	4618      	mov	r0, r3
 8013540:	370c      	adds	r7, #12
 8013542:	46bd      	mov	sp, r7
 8013544:	bc80      	pop	{r7}
 8013546:	4770      	bx	lr

08013548 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8013548:	b480      	push	{r7}
 801354a:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801354c:	bf00      	nop
 801354e:	46bd      	mov	sp, r7
 8013550:	bc80      	pop	{r7}
 8013552:	4770      	bx	lr

08013554 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8013554:	b480      	push	{r7}
 8013556:	b083      	sub	sp, #12
 8013558:	af00      	add	r7, sp, #0
 801355a:	4603      	mov	r3, r0
 801355c:	6039      	str	r1, [r7, #0]
 801355e:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8013560:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013562:	4618      	mov	r0, r3
 8013564:	370c      	adds	r7, #12
 8013566:	46bd      	mov	sp, r7
 8013568:	bc80      	pop	{r7}
 801356a:	4770      	bx	lr

0801356c <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801356c:	b480      	push	{r7}
 801356e:	b083      	sub	sp, #12
 8013570:	af00      	add	r7, sp, #0
 8013572:	4603      	mov	r3, r0
 8013574:	603a      	str	r2, [r7, #0]
 8013576:	80fb      	strh	r3, [r7, #6]
 8013578:	460b      	mov	r3, r1
 801357a:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801357c:	bf00      	nop
 801357e:	370c      	adds	r7, #12
 8013580:	46bd      	mov	sp, r7
 8013582:	bc80      	pop	{r7}
 8013584:	4770      	bx	lr

08013586 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8013586:	b480      	push	{r7}
 8013588:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801358a:	bf00      	nop
 801358c:	46bd      	mov	sp, r7
 801358e:	bc80      	pop	{r7}
 8013590:	4770      	bx	lr

08013592 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8013592:	b480      	push	{r7}
 8013594:	b083      	sub	sp, #12
 8013596:	af00      	add	r7, sp, #0
 8013598:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 801359a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801359c:	4618      	mov	r0, r3
 801359e:	370c      	adds	r7, #12
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bc80      	pop	{r7}
 80135a4:	4770      	bx	lr

080135a6 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80135a6:	b480      	push	{r7}
 80135a8:	b083      	sub	sp, #12
 80135aa:	af00      	add	r7, sp, #0
 80135ac:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80135ae:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80135b0:	4618      	mov	r0, r3
 80135b2:	370c      	adds	r7, #12
 80135b4:	46bd      	mov	sp, r7
 80135b6:	bc80      	pop	{r7}
 80135b8:	4770      	bx	lr

080135ba <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80135ba:	b480      	push	{r7}
 80135bc:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80135be:	bf00      	nop
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bc80      	pop	{r7}
 80135c4:	4770      	bx	lr

080135c6 <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80135c6:	b480      	push	{r7}
 80135c8:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80135ca:	bf00      	nop
 80135cc:	46bd      	mov	sp, r7
 80135ce:	bc80      	pop	{r7}
 80135d0:	4770      	bx	lr

080135d2 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80135d2:	b480      	push	{r7}
 80135d4:	b085      	sub	sp, #20
 80135d6:	af00      	add	r7, sp, #0
 80135d8:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80135de:	2300      	movs	r3, #0
 80135e0:	81fb      	strh	r3, [r7, #14]
 80135e2:	e00a      	b.n	80135fa <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80135e4:	89fb      	ldrh	r3, [r7, #14]
 80135e6:	68ba      	ldr	r2, [r7, #8]
 80135e8:	4413      	add	r3, r2
 80135ea:	781b      	ldrb	r3, [r3, #0]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d001      	beq.n	80135f4 <IsSlotFree+0x22>
        {
            return false;
 80135f0:	2300      	movs	r3, #0
 80135f2:	e006      	b.n	8013602 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80135f4:	89fb      	ldrh	r3, [r7, #14]
 80135f6:	3301      	adds	r3, #1
 80135f8:	81fb      	strh	r3, [r7, #14]
 80135fa:	89fb      	ldrh	r3, [r7, #14]
 80135fc:	2b0f      	cmp	r3, #15
 80135fe:	d9f1      	bls.n	80135e4 <IsSlotFree+0x12>
        }
    }
    return true;
 8013600:	2301      	movs	r3, #1
}
 8013602:	4618      	mov	r0, r3
 8013604:	3714      	adds	r7, #20
 8013606:	46bd      	mov	sp, r7
 8013608:	bc80      	pop	{r7}
 801360a:	4770      	bx	lr

0801360c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8013612:	2300      	movs	r3, #0
 8013614:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013616:	e007      	b.n	8013628 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8013618:	79fb      	ldrb	r3, [r7, #7]
 801361a:	3301      	adds	r3, #1
 801361c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801361e:	79fb      	ldrb	r3, [r7, #7]
 8013620:	2b0f      	cmp	r3, #15
 8013622:	d101      	bne.n	8013628 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8013624:	2300      	movs	r3, #0
 8013626:	e012      	b.n	801364e <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013628:	79fb      	ldrb	r3, [r7, #7]
 801362a:	011b      	lsls	r3, r3, #4
 801362c:	3308      	adds	r3, #8
 801362e:	4a0a      	ldr	r2, [pc, #40]	; (8013658 <MallocNewMacCommandSlot+0x4c>)
 8013630:	4413      	add	r3, r2
 8013632:	4618      	mov	r0, r3
 8013634:	f7ff ffcd 	bl	80135d2 <IsSlotFree>
 8013638:	4603      	mov	r3, r0
 801363a:	f083 0301 	eor.w	r3, r3, #1
 801363e:	b2db      	uxtb	r3, r3
 8013640:	2b00      	cmp	r3, #0
 8013642:	d1e9      	bne.n	8013618 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8013644:	79fb      	ldrb	r3, [r7, #7]
 8013646:	011b      	lsls	r3, r3, #4
 8013648:	3308      	adds	r3, #8
 801364a:	4a03      	ldr	r2, [pc, #12]	; (8013658 <MallocNewMacCommandSlot+0x4c>)
 801364c:	4413      	add	r3, r2
}
 801364e:	4618      	mov	r0, r3
 8013650:	3708      	adds	r7, #8
 8013652:	46bd      	mov	sp, r7
 8013654:	bd80      	pop	{r7, pc}
 8013656:	bf00      	nop
 8013658:	20001f9c 	.word	0x20001f9c

0801365c <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b082      	sub	sp, #8
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d101      	bne.n	801366e <FreeMacCommandSlot+0x12>
    {
        return false;
 801366a:	2300      	movs	r3, #0
 801366c:	e005      	b.n	801367a <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801366e:	2210      	movs	r2, #16
 8013670:	2100      	movs	r1, #0
 8013672:	6878      	ldr	r0, [r7, #4]
 8013674:	f004 f9bc 	bl	80179f0 <memset1>

    return true;
 8013678:	2301      	movs	r3, #1
}
 801367a:	4618      	mov	r0, r3
 801367c:	3708      	adds	r7, #8
 801367e:	46bd      	mov	sp, r7
 8013680:	bd80      	pop	{r7, pc}

08013682 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8013682:	b480      	push	{r7}
 8013684:	b083      	sub	sp, #12
 8013686:	af00      	add	r7, sp, #0
 8013688:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d101      	bne.n	8013694 <LinkedListInit+0x12>
    {
        return false;
 8013690:	2300      	movs	r3, #0
 8013692:	e006      	b.n	80136a2 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	2200      	movs	r2, #0
 8013698:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	2200      	movs	r2, #0
 801369e:	605a      	str	r2, [r3, #4]

    return true;
 80136a0:	2301      	movs	r3, #1
}
 80136a2:	4618      	mov	r0, r3
 80136a4:	370c      	adds	r7, #12
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bc80      	pop	{r7}
 80136aa:	4770      	bx	lr

080136ac <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80136ac:	b480      	push	{r7}
 80136ae:	b083      	sub	sp, #12
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
 80136b4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d002      	beq.n	80136c2 <LinkedListAdd+0x16>
 80136bc:	683b      	ldr	r3, [r7, #0]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d101      	bne.n	80136c6 <LinkedListAdd+0x1a>
    {
        return false;
 80136c2:	2300      	movs	r3, #0
 80136c4:	e015      	b.n	80136f2 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d102      	bne.n	80136d4 <LinkedListAdd+0x28>
    {
        list->First = element;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	683a      	ldr	r2, [r7, #0]
 80136d2:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	685b      	ldr	r3, [r3, #4]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d003      	beq.n	80136e4 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	685b      	ldr	r3, [r3, #4]
 80136e0:	683a      	ldr	r2, [r7, #0]
 80136e2:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	2200      	movs	r2, #0
 80136e8:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	683a      	ldr	r2, [r7, #0]
 80136ee:	605a      	str	r2, [r3, #4]

    return true;
 80136f0:	2301      	movs	r3, #1
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	370c      	adds	r7, #12
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bc80      	pop	{r7}
 80136fa:	4770      	bx	lr

080136fc <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80136fc:	b480      	push	{r7}
 80136fe:	b085      	sub	sp, #20
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
 8013704:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d002      	beq.n	8013712 <LinkedListGetPrevious+0x16>
 801370c:	683b      	ldr	r3, [r7, #0]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d101      	bne.n	8013716 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8013712:	2300      	movs	r3, #0
 8013714:	e016      	b.n	8013744 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 801371c:	683a      	ldr	r2, [r7, #0]
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	429a      	cmp	r2, r3
 8013722:	d00c      	beq.n	801373e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013724:	e002      	b.n	801372c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d007      	beq.n	8013742 <LinkedListGetPrevious+0x46>
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	683a      	ldr	r2, [r7, #0]
 8013738:	429a      	cmp	r2, r3
 801373a:	d1f4      	bne.n	8013726 <LinkedListGetPrevious+0x2a>
 801373c:	e001      	b.n	8013742 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801373e:	2300      	movs	r3, #0
 8013740:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8013742:	68fb      	ldr	r3, [r7, #12]
}
 8013744:	4618      	mov	r0, r3
 8013746:	3714      	adds	r7, #20
 8013748:	46bd      	mov	sp, r7
 801374a:	bc80      	pop	{r7}
 801374c:	4770      	bx	lr

0801374e <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801374e:	b580      	push	{r7, lr}
 8013750:	b084      	sub	sp, #16
 8013752:	af00      	add	r7, sp, #0
 8013754:	6078      	str	r0, [r7, #4]
 8013756:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d002      	beq.n	8013764 <LinkedListRemove+0x16>
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d101      	bne.n	8013768 <LinkedListRemove+0x1a>
    {
        return false;
 8013764:	2300      	movs	r3, #0
 8013766:	e020      	b.n	80137aa <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8013768:	6839      	ldr	r1, [r7, #0]
 801376a:	6878      	ldr	r0, [r7, #4]
 801376c:	f7ff ffc6 	bl	80136fc <LinkedListGetPrevious>
 8013770:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	683a      	ldr	r2, [r7, #0]
 8013778:	429a      	cmp	r2, r3
 801377a:	d103      	bne.n	8013784 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 801377c:	683b      	ldr	r3, [r7, #0]
 801377e:	681a      	ldr	r2, [r3, #0]
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	685b      	ldr	r3, [r3, #4]
 8013788:	683a      	ldr	r2, [r7, #0]
 801378a:	429a      	cmp	r2, r3
 801378c:	d102      	bne.n	8013794 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	68fa      	ldr	r2, [r7, #12]
 8013792:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d003      	beq.n	80137a2 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	681a      	ldr	r2, [r3, #0]
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80137a2:	683b      	ldr	r3, [r7, #0]
 80137a4:	2200      	movs	r2, #0
 80137a6:	601a      	str	r2, [r3, #0]

    return true;
 80137a8:	2301      	movs	r3, #1
}
 80137aa:	4618      	mov	r0, r3
 80137ac:	3710      	adds	r7, #16
 80137ae:	46bd      	mov	sp, r7
 80137b0:	bd80      	pop	{r7, pc}

080137b2 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80137b2:	b480      	push	{r7}
 80137b4:	b083      	sub	sp, #12
 80137b6:	af00      	add	r7, sp, #0
 80137b8:	4603      	mov	r3, r0
 80137ba:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80137bc:	79fb      	ldrb	r3, [r7, #7]
 80137be:	2b05      	cmp	r3, #5
 80137c0:	d004      	beq.n	80137cc <IsSticky+0x1a>
 80137c2:	2b05      	cmp	r3, #5
 80137c4:	db04      	blt.n	80137d0 <IsSticky+0x1e>
 80137c6:	3b08      	subs	r3, #8
 80137c8:	2b02      	cmp	r3, #2
 80137ca:	d801      	bhi.n	80137d0 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80137cc:	2301      	movs	r3, #1
 80137ce:	e000      	b.n	80137d2 <IsSticky+0x20>
        default:
            return false;
 80137d0:	2300      	movs	r3, #0
    }
}
 80137d2:	4618      	mov	r0, r3
 80137d4:	370c      	adds	r7, #12
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bc80      	pop	{r7}
 80137da:	4770      	bx	lr

080137dc <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80137e0:	22fc      	movs	r2, #252	; 0xfc
 80137e2:	2100      	movs	r1, #0
 80137e4:	4804      	ldr	r0, [pc, #16]	; (80137f8 <LoRaMacCommandsInit+0x1c>)
 80137e6:	f004 f903 	bl	80179f0 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80137ea:	4803      	ldr	r0, [pc, #12]	; (80137f8 <LoRaMacCommandsInit+0x1c>)
 80137ec:	f7ff ff49 	bl	8013682 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80137f0:	2300      	movs	r3, #0
}
 80137f2:	4618      	mov	r0, r3
 80137f4:	bd80      	pop	{r7, pc}
 80137f6:	bf00      	nop
 80137f8:	20001f9c 	.word	0x20001f9c

080137fc <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b086      	sub	sp, #24
 8013800:	af00      	add	r7, sp, #0
 8013802:	4603      	mov	r3, r0
 8013804:	60b9      	str	r1, [r7, #8]
 8013806:	607a      	str	r2, [r7, #4]
 8013808:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801380a:	68bb      	ldr	r3, [r7, #8]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d101      	bne.n	8013814 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013810:	2301      	movs	r3, #1
 8013812:	e033      	b.n	801387c <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8013814:	f7ff fefa 	bl	801360c <MallocNewMacCommandSlot>
 8013818:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801381a:	697b      	ldr	r3, [r7, #20]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d101      	bne.n	8013824 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8013820:	2302      	movs	r3, #2
 8013822:	e02b      	b.n	801387c <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8013824:	6979      	ldr	r1, [r7, #20]
 8013826:	4817      	ldr	r0, [pc, #92]	; (8013884 <LoRaMacCommandsAddCmd+0x88>)
 8013828:	f7ff ff40 	bl	80136ac <LinkedListAdd>
 801382c:	4603      	mov	r3, r0
 801382e:	f083 0301 	eor.w	r3, r3, #1
 8013832:	b2db      	uxtb	r3, r3
 8013834:	2b00      	cmp	r3, #0
 8013836:	d001      	beq.n	801383c <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013838:	2305      	movs	r3, #5
 801383a:	e01f      	b.n	801387c <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	7bfa      	ldrb	r2, [r7, #15]
 8013840:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8013842:	697b      	ldr	r3, [r7, #20]
 8013844:	687a      	ldr	r2, [r7, #4]
 8013846:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8013848:	697b      	ldr	r3, [r7, #20]
 801384a:	3305      	adds	r3, #5
 801384c:	687a      	ldr	r2, [r7, #4]
 801384e:	b292      	uxth	r2, r2
 8013850:	68b9      	ldr	r1, [r7, #8]
 8013852:	4618      	mov	r0, r3
 8013854:	f004 f891 	bl	801797a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8013858:	7bfb      	ldrb	r3, [r7, #15]
 801385a:	4618      	mov	r0, r3
 801385c:	f7ff ffa9 	bl	80137b2 <IsSticky>
 8013860:	4603      	mov	r3, r0
 8013862:	461a      	mov	r2, r3
 8013864:	697b      	ldr	r3, [r7, #20]
 8013866:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8013868:	4b06      	ldr	r3, [pc, #24]	; (8013884 <LoRaMacCommandsAddCmd+0x88>)
 801386a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	4413      	add	r3, r2
 8013872:	3301      	adds	r3, #1
 8013874:	4a03      	ldr	r2, [pc, #12]	; (8013884 <LoRaMacCommandsAddCmd+0x88>)
 8013876:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 801387a:	2300      	movs	r3, #0
}
 801387c:	4618      	mov	r0, r3
 801387e:	3718      	adds	r7, #24
 8013880:	46bd      	mov	sp, r7
 8013882:	bd80      	pop	{r7, pc}
 8013884:	20001f9c 	.word	0x20001f9c

08013888 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b082      	sub	sp, #8
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d101      	bne.n	801389a <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013896:	2301      	movs	r3, #1
 8013898:	e021      	b.n	80138de <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 801389a:	6879      	ldr	r1, [r7, #4]
 801389c:	4812      	ldr	r0, [pc, #72]	; (80138e8 <LoRaMacCommandsRemoveCmd+0x60>)
 801389e:	f7ff ff56 	bl	801374e <LinkedListRemove>
 80138a2:	4603      	mov	r3, r0
 80138a4:	f083 0301 	eor.w	r3, r3, #1
 80138a8:	b2db      	uxtb	r3, r3
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d001      	beq.n	80138b2 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80138ae:	2303      	movs	r3, #3
 80138b0:	e015      	b.n	80138de <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80138b2:	4b0d      	ldr	r3, [pc, #52]	; (80138e8 <LoRaMacCommandsRemoveCmd+0x60>)
 80138b4:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	689b      	ldr	r3, [r3, #8]
 80138bc:	1ad3      	subs	r3, r2, r3
 80138be:	3b01      	subs	r3, #1
 80138c0:	4a09      	ldr	r2, [pc, #36]	; (80138e8 <LoRaMacCommandsRemoveCmd+0x60>)
 80138c2:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80138c6:	6878      	ldr	r0, [r7, #4]
 80138c8:	f7ff fec8 	bl	801365c <FreeMacCommandSlot>
 80138cc:	4603      	mov	r3, r0
 80138ce:	f083 0301 	eor.w	r3, r3, #1
 80138d2:	b2db      	uxtb	r3, r3
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d001      	beq.n	80138dc <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80138d8:	2305      	movs	r3, #5
 80138da:	e000      	b.n	80138de <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80138dc:	2300      	movs	r3, #0
}
 80138de:	4618      	mov	r0, r3
 80138e0:	3708      	adds	r7, #8
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	bf00      	nop
 80138e8:	20001f9c 	.word	0x20001f9c

080138ec <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b082      	sub	sp, #8
 80138f0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80138f2:	4b0f      	ldr	r3, [pc, #60]	; (8013930 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80138f8:	e012      	b.n	8013920 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	7b1b      	ldrb	r3, [r3, #12]
 80138fe:	f083 0301 	eor.w	r3, r3, #1
 8013902:	b2db      	uxtb	r3, r3
 8013904:	2b00      	cmp	r3, #0
 8013906:	d008      	beq.n	801391a <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	f7ff ffba 	bl	8013888 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	607b      	str	r3, [r7, #4]
 8013918:	e002      	b.n	8013920 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d1e9      	bne.n	80138fa <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013926:	2300      	movs	r3, #0
}
 8013928:	4618      	mov	r0, r3
 801392a:	3708      	adds	r7, #8
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}
 8013930:	20001f9c 	.word	0x20001f9c

08013934 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b082      	sub	sp, #8
 8013938:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801393a:	4b0e      	ldr	r3, [pc, #56]	; (8013974 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013940:	e00f      	b.n	8013962 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	791b      	ldrb	r3, [r3, #4]
 801394c:	4618      	mov	r0, r3
 801394e:	f7ff ff30 	bl	80137b2 <IsSticky>
 8013952:	4603      	mov	r3, r0
 8013954:	2b00      	cmp	r3, #0
 8013956:	d002      	beq.n	801395e <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8013958:	6878      	ldr	r0, [r7, #4]
 801395a:	f7ff ff95 	bl	8013888 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d1ec      	bne.n	8013942 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013968:	2300      	movs	r3, #0
}
 801396a:	4618      	mov	r0, r3
 801396c:	3708      	adds	r7, #8
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}
 8013972:	bf00      	nop
 8013974:	20001f9c 	.word	0x20001f9c

08013978 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8013978:	b480      	push	{r7}
 801397a:	b083      	sub	sp, #12
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d101      	bne.n	801398a <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013986:	2301      	movs	r3, #1
 8013988:	e005      	b.n	8013996 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 801398a:	4b05      	ldr	r3, [pc, #20]	; (80139a0 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 801398c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8013994:	2300      	movs	r3, #0
}
 8013996:	4618      	mov	r0, r3
 8013998:	370c      	adds	r7, #12
 801399a:	46bd      	mov	sp, r7
 801399c:	bc80      	pop	{r7}
 801399e:	4770      	bx	lr
 80139a0:	20001f9c 	.word	0x20001f9c

080139a4 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b088      	sub	sp, #32
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	60f8      	str	r0, [r7, #12]
 80139ac:	60b9      	str	r1, [r7, #8]
 80139ae:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80139b0:	4b25      	ldr	r3, [pc, #148]	; (8013a48 <LoRaMacCommandsSerializeCmds+0xa4>)
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80139b6:	2300      	movs	r3, #0
 80139b8:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d002      	beq.n	80139c6 <LoRaMacCommandsSerializeCmds+0x22>
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d126      	bne.n	8013a14 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80139c6:	2301      	movs	r3, #1
 80139c8:	e039      	b.n	8013a3e <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80139ca:	7efb      	ldrb	r3, [r7, #27]
 80139cc:	68fa      	ldr	r2, [r7, #12]
 80139ce:	1ad2      	subs	r2, r2, r3
 80139d0:	69fb      	ldr	r3, [r7, #28]
 80139d2:	689b      	ldr	r3, [r3, #8]
 80139d4:	3301      	adds	r3, #1
 80139d6:	429a      	cmp	r2, r3
 80139d8:	d320      	bcc.n	8013a1c <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80139da:	7efb      	ldrb	r3, [r7, #27]
 80139dc:	1c5a      	adds	r2, r3, #1
 80139de:	76fa      	strb	r2, [r7, #27]
 80139e0:	461a      	mov	r2, r3
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	4413      	add	r3, r2
 80139e6:	69fa      	ldr	r2, [r7, #28]
 80139e8:	7912      	ldrb	r2, [r2, #4]
 80139ea:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80139ec:	7efb      	ldrb	r3, [r7, #27]
 80139ee:	687a      	ldr	r2, [r7, #4]
 80139f0:	18d0      	adds	r0, r2, r3
 80139f2:	69fb      	ldr	r3, [r7, #28]
 80139f4:	1d59      	adds	r1, r3, #5
 80139f6:	69fb      	ldr	r3, [r7, #28]
 80139f8:	689b      	ldr	r3, [r3, #8]
 80139fa:	b29b      	uxth	r3, r3
 80139fc:	461a      	mov	r2, r3
 80139fe:	f003 ffbc 	bl	801797a <memcpy1>
            itr += curElement->PayloadSize;
 8013a02:	69fb      	ldr	r3, [r7, #28]
 8013a04:	689b      	ldr	r3, [r3, #8]
 8013a06:	b2da      	uxtb	r2, r3
 8013a08:	7efb      	ldrb	r3, [r7, #27]
 8013a0a:	4413      	add	r3, r2
 8013a0c:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8013a0e:	69fb      	ldr	r3, [r7, #28]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013a14:	69fb      	ldr	r3, [r7, #28]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d1d7      	bne.n	80139ca <LoRaMacCommandsSerializeCmds+0x26>
 8013a1a:	e009      	b.n	8013a30 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8013a1c:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8013a1e:	e007      	b.n	8013a30 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8013a20:	69fb      	ldr	r3, [r7, #28]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8013a26:	69f8      	ldr	r0, [r7, #28]
 8013a28:	f7ff ff2e 	bl	8013888 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8013a2c:	697b      	ldr	r3, [r7, #20]
 8013a2e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013a30:	69fb      	ldr	r3, [r7, #28]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d1f4      	bne.n	8013a20 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8013a36:	68b8      	ldr	r0, [r7, #8]
 8013a38:	f7ff ff9e 	bl	8013978 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8013a3c:	2300      	movs	r3, #0
}
 8013a3e:	4618      	mov	r0, r3
 8013a40:	3720      	adds	r7, #32
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}
 8013a46:	bf00      	nop
 8013a48:	20001f9c 	.word	0x20001f9c

08013a4c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8013a4c:	b480      	push	{r7}
 8013a4e:	b085      	sub	sp, #20
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d101      	bne.n	8013a5e <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013a5a:	2301      	movs	r3, #1
 8013a5c:	e016      	b.n	8013a8c <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8013a5e:	4b0e      	ldr	r3, [pc, #56]	; (8013a98 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	2200      	movs	r2, #0
 8013a68:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8013a6a:	e00b      	b.n	8013a84 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	7b1b      	ldrb	r3, [r3, #12]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d004      	beq.n	8013a7e <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	2201      	movs	r2, #1
 8013a78:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	e006      	b.n	8013a8c <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d1f0      	bne.n	8013a6c <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013a8a:	2300      	movs	r3, #0
}
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	3714      	adds	r7, #20
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bc80      	pop	{r7}
 8013a94:	4770      	bx	lr
 8013a96:	bf00      	nop
 8013a98:	20001f9c 	.word	0x20001f9c

08013a9c <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8013a9c:	b480      	push	{r7}
 8013a9e:	b085      	sub	sp, #20
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8013aaa:	79fb      	ldrb	r3, [r7, #7]
 8013aac:	3b02      	subs	r3, #2
 8013aae:	2b11      	cmp	r3, #17
 8013ab0:	d850      	bhi.n	8013b54 <LoRaMacCommandsGetCmdSize+0xb8>
 8013ab2:	a201      	add	r2, pc, #4	; (adr r2, 8013ab8 <LoRaMacCommandsGetCmdSize+0x1c>)
 8013ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ab8:	08013b01 	.word	0x08013b01
 8013abc:	08013b07 	.word	0x08013b07
 8013ac0:	08013b0d 	.word	0x08013b0d
 8013ac4:	08013b13 	.word	0x08013b13
 8013ac8:	08013b19 	.word	0x08013b19
 8013acc:	08013b1f 	.word	0x08013b1f
 8013ad0:	08013b25 	.word	0x08013b25
 8013ad4:	08013b2b 	.word	0x08013b2b
 8013ad8:	08013b31 	.word	0x08013b31
 8013adc:	08013b55 	.word	0x08013b55
 8013ae0:	08013b55 	.word	0x08013b55
 8013ae4:	08013b37 	.word	0x08013b37
 8013ae8:	08013b55 	.word	0x08013b55
 8013aec:	08013b55 	.word	0x08013b55
 8013af0:	08013b3d 	.word	0x08013b3d
 8013af4:	08013b43 	.word	0x08013b43
 8013af8:	08013b49 	.word	0x08013b49
 8013afc:	08013b4f 	.word	0x08013b4f
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8013b00:	2303      	movs	r3, #3
 8013b02:	73fb      	strb	r3, [r7, #15]
            break;
 8013b04:	e027      	b.n	8013b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8013b06:	2305      	movs	r3, #5
 8013b08:	73fb      	strb	r3, [r7, #15]
            break;
 8013b0a:	e024      	b.n	8013b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013b0c:	2302      	movs	r3, #2
 8013b0e:	73fb      	strb	r3, [r7, #15]
            break;
 8013b10:	e021      	b.n	8013b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8013b12:	2305      	movs	r3, #5
 8013b14:	73fb      	strb	r3, [r7, #15]
            break;
 8013b16:	e01e      	b.n	8013b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8013b18:	2301      	movs	r3, #1
 8013b1a:	73fb      	strb	r3, [r7, #15]
            break;
 8013b1c:	e01b      	b.n	8013b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8013b1e:	2306      	movs	r3, #6
 8013b20:	73fb      	strb	r3, [r7, #15]
            break;
 8013b22:	e018      	b.n	8013b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8013b24:	2302      	movs	r3, #2
 8013b26:	73fb      	strb	r3, [r7, #15]
            break;
 8013b28:	e015      	b.n	8013b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8013b2a:	2302      	movs	r3, #2
 8013b2c:	73fb      	strb	r3, [r7, #15]
            break;
 8013b2e:	e012      	b.n	8013b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8013b30:	2305      	movs	r3, #5
 8013b32:	73fb      	strb	r3, [r7, #15]
            break;
 8013b34:	e00f      	b.n	8013b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8013b36:	2306      	movs	r3, #6
 8013b38:	73fb      	strb	r3, [r7, #15]
            break;
 8013b3a:	e00c      	b.n	8013b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8013b3c:	2301      	movs	r3, #1
 8013b3e:	73fb      	strb	r3, [r7, #15]
            break;
 8013b40:	e009      	b.n	8013b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8013b42:	2305      	movs	r3, #5
 8013b44:	73fb      	strb	r3, [r7, #15]
            break;
 8013b46:	e006      	b.n	8013b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8013b48:	2304      	movs	r3, #4
 8013b4a:	73fb      	strb	r3, [r7, #15]
            break;
 8013b4c:	e003      	b.n	8013b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8013b4e:	2304      	movs	r3, #4
 8013b50:	73fb      	strb	r3, [r7, #15]
            break;
 8013b52:	e000      	b.n	8013b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8013b54:	bf00      	nop
        }
    }
    return cidSize;
 8013b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b58:	4618      	mov	r0, r3
 8013b5a:	3714      	adds	r7, #20
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	bc80      	pop	{r7}
 8013b60:	4770      	bx	lr
 8013b62:	bf00      	nop

08013b64 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8013b64:	b480      	push	{r7}
 8013b66:	b083      	sub	sp, #12
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	4a07      	ldr	r2, [pc, #28]	; (8013b8c <IncreaseBufferPointer+0x28>)
 8013b70:	4293      	cmp	r3, r2
 8013b72:	d102      	bne.n	8013b7a <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013b74:	4b06      	ldr	r3, [pc, #24]	; (8013b90 <IncreaseBufferPointer+0x2c>)
 8013b76:	607b      	str	r3, [r7, #4]
 8013b78:	e002      	b.n	8013b80 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	3304      	adds	r3, #4
 8013b7e:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8013b80:	687b      	ldr	r3, [r7, #4]
}
 8013b82:	4618      	mov	r0, r3
 8013b84:	370c      	adds	r7, #12
 8013b86:	46bd      	mov	sp, r7
 8013b88:	bc80      	pop	{r7}
 8013b8a:	4770      	bx	lr
 8013b8c:	200020b4 	.word	0x200020b4
 8013b90:	200020a4 	.word	0x200020a4

08013b94 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8013b94:	b480      	push	{r7}
 8013b96:	b083      	sub	sp, #12
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8013b9e:	79fb      	ldrb	r3, [r7, #7]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d101      	bne.n	8013ba8 <IsListEmpty+0x14>
    {
        return true;
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	e000      	b.n	8013baa <IsListEmpty+0x16>
    }
    return false;
 8013ba8:	2300      	movs	r3, #0
}
 8013baa:	4618      	mov	r0, r3
 8013bac:	370c      	adds	r7, #12
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bc80      	pop	{r7}
 8013bb2:	4770      	bx	lr

08013bb4 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8013bb4:	b480      	push	{r7}
 8013bb6:	b083      	sub	sp, #12
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	4603      	mov	r3, r0
 8013bbc:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8013bbe:	79fb      	ldrb	r3, [r7, #7]
 8013bc0:	2b04      	cmp	r3, #4
 8013bc2:	d901      	bls.n	8013bc8 <IsListFull+0x14>
    {
        return true;
 8013bc4:	2301      	movs	r3, #1
 8013bc6:	e000      	b.n	8013bca <IsListFull+0x16>
    }
    return false;
 8013bc8:	2300      	movs	r3, #0
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	370c      	adds	r7, #12
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bc80      	pop	{r7}
 8013bd2:	4770      	bx	lr

08013bd4 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b086      	sub	sp, #24
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	4603      	mov	r3, r0
 8013bdc:	60b9      	str	r1, [r7, #8]
 8013bde:	607a      	str	r2, [r7, #4]
 8013be0:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8013be2:	68bb      	ldr	r3, [r7, #8]
 8013be4:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013be6:	4b13      	ldr	r3, [pc, #76]	; (8013c34 <GetElement+0x60>)
 8013be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013bec:	4618      	mov	r0, r3
 8013bee:	f7ff ffd1 	bl	8013b94 <IsListEmpty>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d001      	beq.n	8013bfc <GetElement+0x28>
    {
        return NULL;
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	e017      	b.n	8013c2c <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	74fb      	strb	r3, [r7, #19]
 8013c00:	e00d      	b.n	8013c1e <GetElement+0x4a>
    {
        if( element->Request == request )
 8013c02:	697b      	ldr	r3, [r7, #20]
 8013c04:	781b      	ldrb	r3, [r3, #0]
 8013c06:	7bfa      	ldrb	r2, [r7, #15]
 8013c08:	429a      	cmp	r2, r3
 8013c0a:	d101      	bne.n	8013c10 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013c0c:	697b      	ldr	r3, [r7, #20]
 8013c0e:	e00d      	b.n	8013c2c <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8013c10:	6978      	ldr	r0, [r7, #20]
 8013c12:	f7ff ffa7 	bl	8013b64 <IncreaseBufferPointer>
 8013c16:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013c18:	7cfb      	ldrb	r3, [r7, #19]
 8013c1a:	3301      	adds	r3, #1
 8013c1c:	74fb      	strb	r3, [r7, #19]
 8013c1e:	4b05      	ldr	r3, [pc, #20]	; (8013c34 <GetElement+0x60>)
 8013c20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c24:	7cfa      	ldrb	r2, [r7, #19]
 8013c26:	429a      	cmp	r2, r3
 8013c28:	d3eb      	bcc.n	8013c02 <GetElement+0x2e>
    }

    return NULL;
 8013c2a:	2300      	movs	r3, #0
}
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	3718      	adds	r7, #24
 8013c30:	46bd      	mov	sp, r7
 8013c32:	bd80      	pop	{r7, pc}
 8013c34:	20002098 	.word	0x20002098

08013c38 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b082      	sub	sp, #8
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8013c40:	4a0c      	ldr	r2, [pc, #48]	; (8013c74 <LoRaMacConfirmQueueInit+0x3c>)
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8013c46:	4b0b      	ldr	r3, [pc, #44]	; (8013c74 <LoRaMacConfirmQueueInit+0x3c>)
 8013c48:	2200      	movs	r2, #0
 8013c4a:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013c4e:	4b09      	ldr	r3, [pc, #36]	; (8013c74 <LoRaMacConfirmQueueInit+0x3c>)
 8013c50:	4a09      	ldr	r2, [pc, #36]	; (8013c78 <LoRaMacConfirmQueueInit+0x40>)
 8013c52:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013c54:	4b07      	ldr	r3, [pc, #28]	; (8013c74 <LoRaMacConfirmQueueInit+0x3c>)
 8013c56:	4a08      	ldr	r2, [pc, #32]	; (8013c78 <LoRaMacConfirmQueueInit+0x40>)
 8013c58:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013c5a:	2214      	movs	r2, #20
 8013c5c:	21ff      	movs	r1, #255	; 0xff
 8013c5e:	4806      	ldr	r0, [pc, #24]	; (8013c78 <LoRaMacConfirmQueueInit+0x40>)
 8013c60:	f003 fec6 	bl	80179f0 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013c64:	4b03      	ldr	r3, [pc, #12]	; (8013c74 <LoRaMacConfirmQueueInit+0x3c>)
 8013c66:	2201      	movs	r2, #1
 8013c68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8013c6c:	bf00      	nop
 8013c6e:	3708      	adds	r7, #8
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}
 8013c74:	20002098 	.word	0x20002098
 8013c78:	200020a4 	.word	0x200020a4

08013c7c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b082      	sub	sp, #8
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013c84:	4b19      	ldr	r3, [pc, #100]	; (8013cec <LoRaMacConfirmQueueAdd+0x70>)
 8013c86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7ff ff92 	bl	8013bb4 <IsListFull>
 8013c90:	4603      	mov	r3, r0
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d001      	beq.n	8013c9a <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8013c96:	2300      	movs	r3, #0
 8013c98:	e023      	b.n	8013ce2 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8013c9a:	4b14      	ldr	r3, [pc, #80]	; (8013cec <LoRaMacConfirmQueueAdd+0x70>)
 8013c9c:	689b      	ldr	r3, [r3, #8]
 8013c9e:	687a      	ldr	r2, [r7, #4]
 8013ca0:	7812      	ldrb	r2, [r2, #0]
 8013ca2:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8013ca4:	4b11      	ldr	r3, [pc, #68]	; (8013cec <LoRaMacConfirmQueueAdd+0x70>)
 8013ca6:	689b      	ldr	r3, [r3, #8]
 8013ca8:	687a      	ldr	r2, [r7, #4]
 8013caa:	7852      	ldrb	r2, [r2, #1]
 8013cac:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8013cae:	4b0f      	ldr	r3, [pc, #60]	; (8013cec <LoRaMacConfirmQueueAdd+0x70>)
 8013cb0:	689b      	ldr	r3, [r3, #8]
 8013cb2:	687a      	ldr	r2, [r7, #4]
 8013cb4:	78d2      	ldrb	r2, [r2, #3]
 8013cb6:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8013cb8:	4b0c      	ldr	r3, [pc, #48]	; (8013cec <LoRaMacConfirmQueueAdd+0x70>)
 8013cba:	689b      	ldr	r3, [r3, #8]
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8013cc0:	4b0a      	ldr	r3, [pc, #40]	; (8013cec <LoRaMacConfirmQueueAdd+0x70>)
 8013cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013cc6:	3301      	adds	r3, #1
 8013cc8:	b2da      	uxtb	r2, r3
 8013cca:	4b08      	ldr	r3, [pc, #32]	; (8013cec <LoRaMacConfirmQueueAdd+0x70>)
 8013ccc:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8013cd0:	4b06      	ldr	r3, [pc, #24]	; (8013cec <LoRaMacConfirmQueueAdd+0x70>)
 8013cd2:	689b      	ldr	r3, [r3, #8]
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7ff ff45 	bl	8013b64 <IncreaseBufferPointer>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	4a03      	ldr	r2, [pc, #12]	; (8013cec <LoRaMacConfirmQueueAdd+0x70>)
 8013cde:	6093      	str	r3, [r2, #8]

    return true;
 8013ce0:	2301      	movs	r3, #1
}
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	3708      	adds	r7, #8
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}
 8013cea:	bf00      	nop
 8013cec:	20002098 	.word	0x20002098

08013cf0 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013cf4:	4b0e      	ldr	r3, [pc, #56]	; (8013d30 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7ff ff4a 	bl	8013b94 <IsListEmpty>
 8013d00:	4603      	mov	r3, r0
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d001      	beq.n	8013d0a <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8013d06:	2300      	movs	r3, #0
 8013d08:	e010      	b.n	8013d2c <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8013d0a:	4b09      	ldr	r3, [pc, #36]	; (8013d30 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d10:	3b01      	subs	r3, #1
 8013d12:	b2da      	uxtb	r2, r3
 8013d14:	4b06      	ldr	r3, [pc, #24]	; (8013d30 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013d16:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013d1a:	4b05      	ldr	r3, [pc, #20]	; (8013d30 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013d1c:	685b      	ldr	r3, [r3, #4]
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f7ff ff20 	bl	8013b64 <IncreaseBufferPointer>
 8013d24:	4603      	mov	r3, r0
 8013d26:	4a02      	ldr	r2, [pc, #8]	; (8013d30 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013d28:	6053      	str	r3, [r2, #4]

    return true;
 8013d2a:	2301      	movs	r3, #1
}
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	bd80      	pop	{r7, pc}
 8013d30:	20002098 	.word	0x20002098

08013d34 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b084      	sub	sp, #16
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	460a      	mov	r2, r1
 8013d3e:	71fb      	strb	r3, [r7, #7]
 8013d40:	4613      	mov	r3, r2
 8013d42:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8013d44:	2300      	movs	r3, #0
 8013d46:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013d48:	4b10      	ldr	r3, [pc, #64]	; (8013d8c <LoRaMacConfirmQueueSetStatus+0x58>)
 8013d4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7ff ff20 	bl	8013b94 <IsListEmpty>
 8013d54:	4603      	mov	r3, r0
 8013d56:	f083 0301 	eor.w	r3, r3, #1
 8013d5a:	b2db      	uxtb	r3, r3
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d011      	beq.n	8013d84 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013d60:	4b0a      	ldr	r3, [pc, #40]	; (8013d8c <LoRaMacConfirmQueueSetStatus+0x58>)
 8013d62:	6859      	ldr	r1, [r3, #4]
 8013d64:	4b09      	ldr	r3, [pc, #36]	; (8013d8c <LoRaMacConfirmQueueSetStatus+0x58>)
 8013d66:	689a      	ldr	r2, [r3, #8]
 8013d68:	79bb      	ldrb	r3, [r7, #6]
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f7ff ff32 	bl	8013bd4 <GetElement>
 8013d70:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d005      	beq.n	8013d84 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	79fa      	ldrb	r2, [r7, #7]
 8013d7c:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	2201      	movs	r2, #1
 8013d82:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8013d84:	bf00      	nop
 8013d86:	3710      	adds	r7, #16
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd80      	pop	{r7, pc}
 8013d8c:	20002098 	.word	0x20002098

08013d90 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b084      	sub	sp, #16
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	4603      	mov	r3, r0
 8013d98:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013d9e:	4b10      	ldr	r3, [pc, #64]	; (8013de0 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013da0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013da4:	4618      	mov	r0, r3
 8013da6:	f7ff fef5 	bl	8013b94 <IsListEmpty>
 8013daa:	4603      	mov	r3, r0
 8013dac:	f083 0301 	eor.w	r3, r3, #1
 8013db0:	b2db      	uxtb	r3, r3
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d00e      	beq.n	8013dd4 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013db6:	4b0a      	ldr	r3, [pc, #40]	; (8013de0 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013db8:	6859      	ldr	r1, [r3, #4]
 8013dba:	4b09      	ldr	r3, [pc, #36]	; (8013de0 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013dbc:	689a      	ldr	r2, [r3, #8]
 8013dbe:	79fb      	ldrb	r3, [r7, #7]
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7ff ff07 	bl	8013bd4 <GetElement>
 8013dc6:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d002      	beq.n	8013dd4 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	785b      	ldrb	r3, [r3, #1]
 8013dd2:	e000      	b.n	8013dd6 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013dd4:	2301      	movs	r3, #1
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3710      	adds	r7, #16
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}
 8013dde:	bf00      	nop
 8013de0:	20002098 	.word	0x20002098

08013de4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b084      	sub	sp, #16
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	4603      	mov	r3, r0
 8013dec:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013dee:	4b16      	ldr	r3, [pc, #88]	; (8013e48 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013df0:	685b      	ldr	r3, [r3, #4]
 8013df2:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013df4:	4a14      	ldr	r2, [pc, #80]	; (8013e48 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013df6:	79fb      	ldrb	r3, [r7, #7]
 8013df8:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013dfc:	4b12      	ldr	r3, [pc, #72]	; (8013e48 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7ff fec6 	bl	8013b94 <IsListEmpty>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	f083 0301 	eor.w	r3, r3, #1
 8013e0e:	b2db      	uxtb	r3, r3
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d015      	beq.n	8013e40 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	79fa      	ldrb	r2, [r7, #7]
 8013e18:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	78db      	ldrb	r3, [r3, #3]
 8013e1e:	f083 0301 	eor.w	r3, r3, #1
 8013e22:	b2db      	uxtb	r3, r3
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d002      	beq.n	8013e2e <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	2201      	movs	r2, #1
 8013e2c:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8013e2e:	68f8      	ldr	r0, [r7, #12]
 8013e30:	f7ff fe98 	bl	8013b64 <IncreaseBufferPointer>
 8013e34:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8013e36:	4b04      	ldr	r3, [pc, #16]	; (8013e48 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013e38:	689b      	ldr	r3, [r3, #8]
 8013e3a:	68fa      	ldr	r2, [r7, #12]
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d1e9      	bne.n	8013e14 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8013e40:	bf00      	nop
 8013e42:	3710      	adds	r7, #16
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}
 8013e48:	20002098 	.word	0x20002098

08013e4c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b082      	sub	sp, #8
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	4603      	mov	r3, r0
 8013e54:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013e56:	4b09      	ldr	r3, [pc, #36]	; (8013e7c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013e58:	6859      	ldr	r1, [r3, #4]
 8013e5a:	4b08      	ldr	r3, [pc, #32]	; (8013e7c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013e5c:	689a      	ldr	r2, [r3, #8]
 8013e5e:	79fb      	ldrb	r3, [r7, #7]
 8013e60:	4618      	mov	r0, r3
 8013e62:	f7ff feb7 	bl	8013bd4 <GetElement>
 8013e66:	4603      	mov	r3, r0
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d001      	beq.n	8013e70 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013e6c:	2301      	movs	r3, #1
 8013e6e:	e000      	b.n	8013e72 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8013e70:	2300      	movs	r3, #0
}
 8013e72:	4618      	mov	r0, r3
 8013e74:	3708      	adds	r7, #8
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bd80      	pop	{r7, pc}
 8013e7a:	bf00      	nop
 8013e7c:	20002098 	.word	0x20002098

08013e80 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b084      	sub	sp, #16
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013e88:	4b22      	ldr	r3, [pc, #136]	; (8013f14 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013e8e:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8013e90:	2300      	movs	r3, #0
 8013e92:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8013e94:	2300      	movs	r3, #0
 8013e96:	73fb      	strb	r3, [r7, #15]
 8013e98:	e032      	b.n	8013f00 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8013e9a:	4b1e      	ldr	r3, [pc, #120]	; (8013f14 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013e9c:	685b      	ldr	r3, [r3, #4]
 8013e9e:	781a      	ldrb	r2, [r3, #0]
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8013ea4:	4b1b      	ldr	r3, [pc, #108]	; (8013f14 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013ea6:	685b      	ldr	r3, [r3, #4]
 8013ea8:	785a      	ldrb	r2, [r3, #1]
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8013eae:	4b19      	ldr	r3, [pc, #100]	; (8013f14 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013eb0:	685b      	ldr	r3, [r3, #4]
 8013eb2:	789b      	ldrb	r3, [r3, #2]
 8013eb4:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8013eb6:	7b7b      	ldrb	r3, [r7, #13]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d005      	beq.n	8013ec8 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8013ebc:	4b15      	ldr	r3, [pc, #84]	; (8013f14 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	689b      	ldr	r3, [r3, #8]
 8013ec2:	6878      	ldr	r0, [r7, #4]
 8013ec4:	4798      	blx	r3
 8013ec6:	e00b      	b.n	8013ee0 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8013ec8:	4b12      	ldr	r3, [pc, #72]	; (8013f14 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013eca:	685b      	ldr	r3, [r3, #4]
 8013ecc:	781b      	ldrb	r3, [r3, #0]
 8013ece:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8013ed0:	4b10      	ldr	r3, [pc, #64]	; (8013f14 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013ed2:	685b      	ldr	r3, [r3, #4]
 8013ed4:	785b      	ldrb	r3, [r3, #1]
 8013ed6:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8013ed8:	4b0e      	ldr	r3, [pc, #56]	; (8013f14 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013eda:	685b      	ldr	r3, [r3, #4]
 8013edc:	78db      	ldrb	r3, [r3, #3]
 8013ede:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013ee0:	f7ff ff06 	bl	8013cf0 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013ee4:	7b7b      	ldrb	r3, [r7, #13]
 8013ee6:	f083 0301 	eor.w	r3, r3, #1
 8013eea:	b2db      	uxtb	r3, r3
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d004      	beq.n	8013efa <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013ef0:	f107 0308 	add.w	r3, r7, #8
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f7ff fec1 	bl	8013c7c <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013efa:	7bfb      	ldrb	r3, [r7, #15]
 8013efc:	3301      	adds	r3, #1
 8013efe:	73fb      	strb	r3, [r7, #15]
 8013f00:	7bfa      	ldrb	r2, [r7, #15]
 8013f02:	7bbb      	ldrb	r3, [r7, #14]
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d3c8      	bcc.n	8013e9a <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8013f08:	bf00      	nop
 8013f0a:	bf00      	nop
 8013f0c:	3710      	adds	r7, #16
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	bd80      	pop	{r7, pc}
 8013f12:	bf00      	nop
 8013f14:	20002098 	.word	0x20002098

08013f18 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013f18:	b480      	push	{r7}
 8013f1a:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013f1c:	4b03      	ldr	r3, [pc, #12]	; (8013f2c <LoRaMacConfirmQueueGetCnt+0x14>)
 8013f1e:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8013f22:	4618      	mov	r0, r3
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bc80      	pop	{r7}
 8013f28:	4770      	bx	lr
 8013f2a:	bf00      	nop
 8013f2c:	20002098 	.word	0x20002098

08013f30 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013f34:	4b06      	ldr	r3, [pc, #24]	; (8013f50 <LoRaMacConfirmQueueIsFull+0x20>)
 8013f36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f7ff fe3a 	bl	8013bb4 <IsListFull>
 8013f40:	4603      	mov	r3, r0
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d001      	beq.n	8013f4a <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8013f46:	2301      	movs	r3, #1
 8013f48:	e000      	b.n	8013f4c <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8013f4a:	2300      	movs	r3, #0
    }
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	bd80      	pop	{r7, pc}
 8013f50:	20002098 	.word	0x20002098

08013f54 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b08e      	sub	sp, #56	; 0x38
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	60f8      	str	r0, [r7, #12]
 8013f5c:	607b      	str	r3, [r7, #4]
 8013f5e:	460b      	mov	r3, r1
 8013f60:	817b      	strh	r3, [r7, #10]
 8013f62:	4613      	mov	r3, r2
 8013f64:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d101      	bne.n	8013f70 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013f6c:	230a      	movs	r3, #10
 8013f6e:	e086      	b.n	801407e <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8013f70:	2300      	movs	r3, #0
 8013f72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8013f76:	2301      	movs	r3, #1
 8013f78:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	623b      	str	r3, [r7, #32]
 8013f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013f82:	2200      	movs	r2, #0
 8013f84:	601a      	str	r2, [r3, #0]
 8013f86:	605a      	str	r2, [r3, #4]
 8013f88:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	613b      	str	r3, [r7, #16]
 8013f8e:	f107 0314 	add.w	r3, r7, #20
 8013f92:	2200      	movs	r2, #0
 8013f94:	601a      	str	r2, [r3, #0]
 8013f96:	605a      	str	r2, [r3, #4]
 8013f98:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8013f9a:	2301      	movs	r3, #1
 8013f9c:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8013f9e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8013fa2:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	b2db      	uxtb	r3, r3
 8013fa8:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	0a1b      	lsrs	r3, r3, #8
 8013fae:	b2db      	uxtb	r3, r3
 8013fb0:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	0c1b      	lsrs	r3, r3, #16
 8013fb6:	b2db      	uxtb	r3, r3
 8013fb8:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	0e1b      	lsrs	r3, r3, #24
 8013fbe:	b2db      	uxtb	r3, r3
 8013fc0:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8013fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fc4:	b2db      	uxtb	r3, r3
 8013fc6:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fca:	0a1b      	lsrs	r3, r3, #8
 8013fcc:	b2db      	uxtb	r3, r3
 8013fce:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fd2:	0c1b      	lsrs	r3, r3, #16
 8013fd4:	b2db      	uxtb	r3, r3
 8013fd6:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fda:	0e1b      	lsrs	r3, r3, #24
 8013fdc:	b2db      	uxtb	r3, r3
 8013fde:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013fe0:	e048      	b.n	8014074 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8013fe2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013fe4:	b2db      	uxtb	r3, r3
 8013fe6:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013fe8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013fea:	3301      	adds	r3, #1
 8013fec:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8013fee:	f107 0320 	add.w	r3, r7, #32
 8013ff2:	7a7a      	ldrb	r2, [r7, #9]
 8013ff4:	f107 0010 	add.w	r0, r7, #16
 8013ff8:	2110      	movs	r1, #16
 8013ffa:	f7f9 f842 	bl	800d082 <SecureElementAesEncrypt>
 8013ffe:	4603      	mov	r3, r0
 8014000:	2b00      	cmp	r3, #0
 8014002:	d001      	beq.n	8014008 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014004:	230f      	movs	r3, #15
 8014006:	e03a      	b.n	801407e <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014008:	2300      	movs	r3, #0
 801400a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801400e:	e01e      	b.n	801404e <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8014010:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014014:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014018:	4413      	add	r3, r2
 801401a:	461a      	mov	r2, r3
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	4413      	add	r3, r2
 8014020:	7819      	ldrb	r1, [r3, #0]
 8014022:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014026:	3338      	adds	r3, #56	; 0x38
 8014028:	443b      	add	r3, r7
 801402a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 801402e:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8014032:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014036:	4403      	add	r3, r0
 8014038:	4618      	mov	r0, r3
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	4403      	add	r3, r0
 801403e:	404a      	eors	r2, r1
 8014040:	b2d2      	uxtb	r2, r2
 8014042:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014044:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014048:	3301      	adds	r3, #1
 801404a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801404e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014052:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014056:	2a10      	cmp	r2, #16
 8014058:	bfa8      	it	ge
 801405a:	2210      	movge	r2, #16
 801405c:	b212      	sxth	r2, r2
 801405e:	4293      	cmp	r3, r2
 8014060:	dbd6      	blt.n	8014010 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8014062:	897b      	ldrh	r3, [r7, #10]
 8014064:	3b10      	subs	r3, #16
 8014066:	b29b      	uxth	r3, r3
 8014068:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801406a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801406e:	3310      	adds	r3, #16
 8014070:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8014074:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014078:	2b00      	cmp	r3, #0
 801407a:	dcb2      	bgt.n	8013fe2 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801407c:	2300      	movs	r3, #0
}
 801407e:	4618      	mov	r0, r3
 8014080:	3738      	adds	r7, #56	; 0x38
 8014082:	46bd      	mov	sp, r7
 8014084:	bd80      	pop	{r7, pc}

08014086 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8014086:	b490      	push	{r4, r7}
 8014088:	b082      	sub	sp, #8
 801408a:	af00      	add	r7, sp, #0
 801408c:	4604      	mov	r4, r0
 801408e:	4608      	mov	r0, r1
 8014090:	4611      	mov	r1, r2
 8014092:	461a      	mov	r2, r3
 8014094:	4623      	mov	r3, r4
 8014096:	80fb      	strh	r3, [r7, #6]
 8014098:	4603      	mov	r3, r0
 801409a:	717b      	strb	r3, [r7, #5]
 801409c:	460b      	mov	r3, r1
 801409e:	713b      	strb	r3, [r7, #4]
 80140a0:	4613      	mov	r3, r2
 80140a2:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80140a4:	69bb      	ldr	r3, [r7, #24]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d101      	bne.n	80140ae <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80140aa:	230a      	movs	r3, #10
 80140ac:	e04e      	b.n	801414c <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80140ae:	69bb      	ldr	r3, [r7, #24]
 80140b0:	2249      	movs	r2, #73	; 0x49
 80140b2:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 80140b4:	69bb      	ldr	r3, [r7, #24]
 80140b6:	3301      	adds	r3, #1
 80140b8:	2200      	movs	r2, #0
 80140ba:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80140bc:	69bb      	ldr	r3, [r7, #24]
 80140be:	3302      	adds	r3, #2
 80140c0:	2200      	movs	r2, #0
 80140c2:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80140c4:	69bb      	ldr	r3, [r7, #24]
 80140c6:	3303      	adds	r3, #3
 80140c8:	2200      	movs	r2, #0
 80140ca:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80140cc:	69bb      	ldr	r3, [r7, #24]
 80140ce:	3304      	adds	r3, #4
 80140d0:	2200      	movs	r2, #0
 80140d2:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80140d4:	69bb      	ldr	r3, [r7, #24]
 80140d6:	3305      	adds	r3, #5
 80140d8:	78fa      	ldrb	r2, [r7, #3]
 80140da:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80140dc:	69bb      	ldr	r3, [r7, #24]
 80140de:	3306      	adds	r3, #6
 80140e0:	693a      	ldr	r2, [r7, #16]
 80140e2:	b2d2      	uxtb	r2, r2
 80140e4:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80140e6:	693b      	ldr	r3, [r7, #16]
 80140e8:	0a1a      	lsrs	r2, r3, #8
 80140ea:	69bb      	ldr	r3, [r7, #24]
 80140ec:	3307      	adds	r3, #7
 80140ee:	b2d2      	uxtb	r2, r2
 80140f0:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80140f2:	693b      	ldr	r3, [r7, #16]
 80140f4:	0c1a      	lsrs	r2, r3, #16
 80140f6:	69bb      	ldr	r3, [r7, #24]
 80140f8:	3308      	adds	r3, #8
 80140fa:	b2d2      	uxtb	r2, r2
 80140fc:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80140fe:	693b      	ldr	r3, [r7, #16]
 8014100:	0e1a      	lsrs	r2, r3, #24
 8014102:	69bb      	ldr	r3, [r7, #24]
 8014104:	3309      	adds	r3, #9
 8014106:	b2d2      	uxtb	r2, r2
 8014108:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801410a:	69bb      	ldr	r3, [r7, #24]
 801410c:	330a      	adds	r3, #10
 801410e:	697a      	ldr	r2, [r7, #20]
 8014110:	b2d2      	uxtb	r2, r2
 8014112:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014114:	697b      	ldr	r3, [r7, #20]
 8014116:	0a1a      	lsrs	r2, r3, #8
 8014118:	69bb      	ldr	r3, [r7, #24]
 801411a:	330b      	adds	r3, #11
 801411c:	b2d2      	uxtb	r2, r2
 801411e:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8014120:	697b      	ldr	r3, [r7, #20]
 8014122:	0c1a      	lsrs	r2, r3, #16
 8014124:	69bb      	ldr	r3, [r7, #24]
 8014126:	330c      	adds	r3, #12
 8014128:	b2d2      	uxtb	r2, r2
 801412a:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	0e1a      	lsrs	r2, r3, #24
 8014130:	69bb      	ldr	r3, [r7, #24]
 8014132:	330d      	adds	r3, #13
 8014134:	b2d2      	uxtb	r2, r2
 8014136:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8014138:	69bb      	ldr	r3, [r7, #24]
 801413a:	330e      	adds	r3, #14
 801413c:	2200      	movs	r2, #0
 801413e:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8014140:	69bb      	ldr	r3, [r7, #24]
 8014142:	330f      	adds	r3, #15
 8014144:	88fa      	ldrh	r2, [r7, #6]
 8014146:	b2d2      	uxtb	r2, r2
 8014148:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801414a:	2300      	movs	r3, #0
}
 801414c:	4618      	mov	r0, r3
 801414e:	3708      	adds	r7, #8
 8014150:	46bd      	mov	sp, r7
 8014152:	bc90      	pop	{r4, r7}
 8014154:	4770      	bx	lr

08014156 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8014156:	b590      	push	{r4, r7, lr}
 8014158:	b08b      	sub	sp, #44	; 0x2c
 801415a:	af04      	add	r7, sp, #16
 801415c:	6078      	str	r0, [r7, #4]
 801415e:	4608      	mov	r0, r1
 8014160:	4611      	mov	r1, r2
 8014162:	461a      	mov	r2, r3
 8014164:	4603      	mov	r3, r0
 8014166:	807b      	strh	r3, [r7, #2]
 8014168:	460b      	mov	r3, r1
 801416a:	707b      	strb	r3, [r7, #1]
 801416c:	4613      	mov	r3, r2
 801416e:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d002      	beq.n	801417c <ComputeCmacB0+0x26>
 8014176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014178:	2b00      	cmp	r3, #0
 801417a:	d101      	bne.n	8014180 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801417c:	230a      	movs	r3, #10
 801417e:	e024      	b.n	80141ca <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014180:	887b      	ldrh	r3, [r7, #2]
 8014182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014186:	d901      	bls.n	801418c <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014188:	230e      	movs	r3, #14
 801418a:	e01e      	b.n	80141ca <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801418c:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8014190:	783a      	ldrb	r2, [r7, #0]
 8014192:	7879      	ldrb	r1, [r7, #1]
 8014194:	8878      	ldrh	r0, [r7, #2]
 8014196:	f107 0308 	add.w	r3, r7, #8
 801419a:	9302      	str	r3, [sp, #8]
 801419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801419e:	9301      	str	r3, [sp, #4]
 80141a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141a2:	9300      	str	r3, [sp, #0]
 80141a4:	4623      	mov	r3, r4
 80141a6:	f7ff ff6e 	bl	8014086 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80141aa:	7879      	ldrb	r1, [r7, #1]
 80141ac:	887a      	ldrh	r2, [r7, #2]
 80141ae:	f107 0008 	add.w	r0, r7, #8
 80141b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141b4:	9300      	str	r3, [sp, #0]
 80141b6:	460b      	mov	r3, r1
 80141b8:	6879      	ldr	r1, [r7, #4]
 80141ba:	f7f8 ff15 	bl	800cfe8 <SecureElementComputeAesCmac>
 80141be:	4603      	mov	r3, r0
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d001      	beq.n	80141c8 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80141c4:	230f      	movs	r3, #15
 80141c6:	e000      	b.n	80141ca <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80141c8:	2300      	movs	r3, #0
}
 80141ca:	4618      	mov	r0, r3
 80141cc:	371c      	adds	r7, #28
 80141ce:	46bd      	mov	sp, r7
 80141d0:	bd90      	pop	{r4, r7, pc}

080141d2 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80141d2:	b590      	push	{r4, r7, lr}
 80141d4:	b0cd      	sub	sp, #308	; 0x134
 80141d6:	af04      	add	r7, sp, #16
 80141d8:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80141dc:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 80141e0:	6020      	str	r0, [r4, #0]
 80141e2:	460c      	mov	r4, r1
 80141e4:	4610      	mov	r0, r2
 80141e6:	4619      	mov	r1, r3
 80141e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80141ec:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80141f0:	4622      	mov	r2, r4
 80141f2:	801a      	strh	r2, [r3, #0]
 80141f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80141f8:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80141fc:	4602      	mov	r2, r0
 80141fe:	701a      	strb	r2, [r3, #0]
 8014200:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014204:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8014208:	460a      	mov	r2, r1
 801420a:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 801420c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014210:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d101      	bne.n	801421e <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801421a:	230a      	movs	r3, #10
 801421c:	e063      	b.n	80142e6 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801421e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014222:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014226:	881b      	ldrh	r3, [r3, #0]
 8014228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801422c:	d901      	bls.n	8014232 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801422e:	230e      	movs	r3, #14
 8014230:	e059      	b.n	80142e6 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8014232:	f107 030c 	add.w	r3, r7, #12
 8014236:	f44f 7288 	mov.w	r2, #272	; 0x110
 801423a:	2100      	movs	r1, #0
 801423c:	4618      	mov	r0, r3
 801423e:	f003 fbd7 	bl	80179f0 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014242:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8014246:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801424a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801424e:	781a      	ldrb	r2, [r3, #0]
 8014250:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014254:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014258:	7819      	ldrb	r1, [r3, #0]
 801425a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801425e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014262:	8818      	ldrh	r0, [r3, #0]
 8014264:	f107 030c 	add.w	r3, r7, #12
 8014268:	9302      	str	r3, [sp, #8]
 801426a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801426e:	9301      	str	r3, [sp, #4]
 8014270:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014274:	9300      	str	r3, [sp, #0]
 8014276:	4623      	mov	r3, r4
 8014278:	f7ff ff05 	bl	8014086 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 801427c:	f107 030c 	add.w	r3, r7, #12
 8014280:	3310      	adds	r3, #16
 8014282:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8014286:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 801428a:	8812      	ldrh	r2, [r2, #0]
 801428c:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8014290:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8014294:	6809      	ldr	r1, [r1, #0]
 8014296:	4618      	mov	r0, r3
 8014298:	f003 fb6f 	bl	801797a <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 801429c:	2306      	movs	r3, #6
 801429e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80142a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80142a6:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80142aa:	881b      	ldrh	r3, [r3, #0]
 80142ac:	3310      	adds	r3, #16
 80142ae:	b299      	uxth	r1, r3
 80142b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80142b4:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80142b8:	781b      	ldrb	r3, [r3, #0]
 80142ba:	f107 000c 	add.w	r0, r7, #12
 80142be:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80142c2:	f7f8 feaf 	bl	800d024 <SecureElementVerifyAesCmac>
 80142c6:	4603      	mov	r3, r0
 80142c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80142cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d101      	bne.n	80142d8 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80142d4:	2300      	movs	r3, #0
 80142d6:	e006      	b.n	80142e6 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80142d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80142dc:	2b01      	cmp	r3, #1
 80142de:	d101      	bne.n	80142e4 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80142e0:	2301      	movs	r3, #1
 80142e2:	e000      	b.n	80142e6 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80142e4:	230f      	movs	r3, #15
}
 80142e6:	4618      	mov	r0, r3
 80142e8:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd90      	pop	{r4, r7, pc}

080142f0 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80142f0:	b480      	push	{r7}
 80142f2:	b085      	sub	sp, #20
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	4603      	mov	r3, r0
 80142f8:	6039      	str	r1, [r7, #0]
 80142fa:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80142fc:	2300      	movs	r3, #0
 80142fe:	73fb      	strb	r3, [r7, #15]
 8014300:	e011      	b.n	8014326 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8014302:	7bfb      	ldrb	r3, [r7, #15]
 8014304:	4a0c      	ldr	r2, [pc, #48]	; (8014338 <GetKeyAddrItem+0x48>)
 8014306:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801430a:	79fa      	ldrb	r2, [r7, #7]
 801430c:	429a      	cmp	r2, r3
 801430e:	d107      	bne.n	8014320 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8014310:	7bfb      	ldrb	r3, [r7, #15]
 8014312:	009b      	lsls	r3, r3, #2
 8014314:	4a08      	ldr	r2, [pc, #32]	; (8014338 <GetKeyAddrItem+0x48>)
 8014316:	441a      	add	r2, r3
 8014318:	683b      	ldr	r3, [r7, #0]
 801431a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 801431c:	2300      	movs	r3, #0
 801431e:	e006      	b.n	801432e <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014320:	7bfb      	ldrb	r3, [r7, #15]
 8014322:	3301      	adds	r3, #1
 8014324:	73fb      	strb	r3, [r7, #15]
 8014326:	7bfb      	ldrb	r3, [r7, #15]
 8014328:	2b01      	cmp	r3, #1
 801432a:	d9ea      	bls.n	8014302 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801432c:	230c      	movs	r3, #12
}
 801432e:	4618      	mov	r0, r3
 8014330:	3714      	adds	r7, #20
 8014332:	46bd      	mov	sp, r7
 8014334:	bc80      	pop	{r7}
 8014336:	4770      	bx	lr
 8014338:	20000118 	.word	0x20000118

0801433c <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b088      	sub	sp, #32
 8014340:	af00      	add	r7, sp, #0
 8014342:	60b9      	str	r1, [r7, #8]
 8014344:	607a      	str	r2, [r7, #4]
 8014346:	461a      	mov	r2, r3
 8014348:	4603      	mov	r3, r0
 801434a:	73fb      	strb	r3, [r7, #15]
 801434c:	4613      	mov	r3, r2
 801434e:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8014350:	2300      	movs	r3, #0
 8014352:	613b      	str	r3, [r7, #16]
 8014354:	f107 0314 	add.w	r3, r7, #20
 8014358:	2200      	movs	r2, #0
 801435a:	601a      	str	r2, [r3, #0]
 801435c:	605a      	str	r2, [r3, #4]
 801435e:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8014360:	7bfb      	ldrb	r3, [r7, #15]
 8014362:	2b02      	cmp	r3, #2
 8014364:	d002      	beq.n	801436c <DeriveSessionKey10x+0x30>
 8014366:	2b03      	cmp	r3, #3
 8014368:	d003      	beq.n	8014372 <DeriveSessionKey10x+0x36>
 801436a:	e005      	b.n	8014378 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 801436c:	2301      	movs	r3, #1
 801436e:	743b      	strb	r3, [r7, #16]
            break;
 8014370:	e004      	b.n	801437c <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8014372:	2302      	movs	r3, #2
 8014374:	743b      	strb	r3, [r7, #16]
            break;
 8014376:	e001      	b.n	801437c <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014378:	230b      	movs	r3, #11
 801437a:	e02a      	b.n	80143d2 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 801437c:	68bb      	ldr	r3, [r7, #8]
 801437e:	b2db      	uxtb	r3, r3
 8014380:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	0a1b      	lsrs	r3, r3, #8
 8014386:	b2db      	uxtb	r3, r3
 8014388:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	0c1b      	lsrs	r3, r3, #16
 801438e:	b2db      	uxtb	r3, r3
 8014390:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	b2db      	uxtb	r3, r3
 8014396:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	0a1b      	lsrs	r3, r3, #8
 801439c:	b2db      	uxtb	r3, r3
 801439e:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	0c1b      	lsrs	r3, r3, #16
 80143a4:	b2db      	uxtb	r3, r3
 80143a6:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80143a8:	89bb      	ldrh	r3, [r7, #12]
 80143aa:	b2db      	uxtb	r3, r3
 80143ac:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80143ae:	89bb      	ldrh	r3, [r7, #12]
 80143b0:	0a1b      	lsrs	r3, r3, #8
 80143b2:	b29b      	uxth	r3, r3
 80143b4:	b2db      	uxtb	r3, r3
 80143b6:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80143b8:	7bfa      	ldrb	r2, [r7, #15]
 80143ba:	f107 0310 	add.w	r3, r7, #16
 80143be:	2101      	movs	r1, #1
 80143c0:	4618      	mov	r0, r3
 80143c2:	f7f8 fec5 	bl	800d150 <SecureElementDeriveAndStoreKey>
 80143c6:	4603      	mov	r3, r0
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d001      	beq.n	80143d0 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80143cc:	230f      	movs	r3, #15
 80143ce:	e000      	b.n	80143d2 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80143d0:	2300      	movs	r3, #0
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	3720      	adds	r7, #32
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd80      	pop	{r7, pc}
	...

080143dc <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80143dc:	b480      	push	{r7}
 80143de:	b083      	sub	sp, #12
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	4603      	mov	r3, r0
 80143e4:	6039      	str	r1, [r7, #0]
 80143e6:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d101      	bne.n	80143f2 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80143ee:	230a      	movs	r3, #10
 80143f0:	e03b      	b.n	801446a <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 80143f2:	79fb      	ldrb	r3, [r7, #7]
 80143f4:	3b01      	subs	r3, #1
 80143f6:	2b03      	cmp	r3, #3
 80143f8:	d834      	bhi.n	8014464 <GetLastFcntDown+0x88>
 80143fa:	a201      	add	r2, pc, #4	; (adr r2, 8014400 <GetLastFcntDown+0x24>)
 80143fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014400:	08014411 	.word	0x08014411
 8014404:	08014429 	.word	0x08014429
 8014408:	08014441 	.word	0x08014441
 801440c:	08014459 	.word	0x08014459
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8014410:	4b18      	ldr	r3, [pc, #96]	; (8014474 <GetLastFcntDown+0x98>)
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	691a      	ldr	r2, [r3, #16]
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 801441a:	4b16      	ldr	r3, [pc, #88]	; (8014474 <GetLastFcntDown+0x98>)
 801441c:	681a      	ldr	r2, [r3, #0]
 801441e:	4b15      	ldr	r3, [pc, #84]	; (8014474 <GetLastFcntDown+0x98>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	6912      	ldr	r2, [r2, #16]
 8014424:	621a      	str	r2, [r3, #32]
            break;
 8014426:	e01f      	b.n	8014468 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8014428:	4b12      	ldr	r3, [pc, #72]	; (8014474 <GetLastFcntDown+0x98>)
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	695a      	ldr	r2, [r3, #20]
 801442e:	683b      	ldr	r3, [r7, #0]
 8014430:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8014432:	4b10      	ldr	r3, [pc, #64]	; (8014474 <GetLastFcntDown+0x98>)
 8014434:	681a      	ldr	r2, [r3, #0]
 8014436:	4b0f      	ldr	r3, [pc, #60]	; (8014474 <GetLastFcntDown+0x98>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	6952      	ldr	r2, [r2, #20]
 801443c:	621a      	str	r2, [r3, #32]
            break;
 801443e:	e013      	b.n	8014468 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8014440:	4b0c      	ldr	r3, [pc, #48]	; (8014474 <GetLastFcntDown+0x98>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	699a      	ldr	r2, [r3, #24]
 8014446:	683b      	ldr	r3, [r7, #0]
 8014448:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801444a:	4b0a      	ldr	r3, [pc, #40]	; (8014474 <GetLastFcntDown+0x98>)
 801444c:	681a      	ldr	r2, [r3, #0]
 801444e:	4b09      	ldr	r3, [pc, #36]	; (8014474 <GetLastFcntDown+0x98>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	6992      	ldr	r2, [r2, #24]
 8014454:	621a      	str	r2, [r3, #32]
            break;
 8014456:	e007      	b.n	8014468 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8014458:	4b06      	ldr	r3, [pc, #24]	; (8014474 <GetLastFcntDown+0x98>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	69da      	ldr	r2, [r3, #28]
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	601a      	str	r2, [r3, #0]
            break;
 8014462:	e001      	b.n	8014468 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8014464:	2305      	movs	r3, #5
 8014466:	e000      	b.n	801446a <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014468:	2300      	movs	r3, #0
}
 801446a:	4618      	mov	r0, r3
 801446c:	370c      	adds	r7, #12
 801446e:	46bd      	mov	sp, r7
 8014470:	bc80      	pop	{r7}
 8014472:	4770      	bx	lr
 8014474:	200020bc 	.word	0x200020bc

08014478 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b084      	sub	sp, #16
 801447c:	af00      	add	r7, sp, #0
 801447e:	4603      	mov	r3, r0
 8014480:	6039      	str	r1, [r7, #0]
 8014482:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8014484:	2300      	movs	r3, #0
 8014486:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8014488:	f107 020c 	add.w	r2, r7, #12
 801448c:	79fb      	ldrb	r3, [r7, #7]
 801448e:	4611      	mov	r1, r2
 8014490:	4618      	mov	r0, r3
 8014492:	f7ff ffa3 	bl	80143dc <GetLastFcntDown>
 8014496:	4603      	mov	r3, r0
 8014498:	2b00      	cmp	r3, #0
 801449a:	d001      	beq.n	80144a0 <CheckFCntDown+0x28>
    {
        return false;
 801449c:	2300      	movs	r3, #0
 801449e:	e00a      	b.n	80144b6 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	683a      	ldr	r2, [r7, #0]
 80144a4:	429a      	cmp	r2, r3
 80144a6:	d803      	bhi.n	80144b0 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 80144a8:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80144aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144ae:	d101      	bne.n	80144b4 <CheckFCntDown+0x3c>
    {
        return true;
 80144b0:	2301      	movs	r3, #1
 80144b2:	e000      	b.n	80144b6 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80144b4:	2300      	movs	r3, #0
    }
}
 80144b6:	4618      	mov	r0, r3
 80144b8:	3710      	adds	r7, #16
 80144ba:	46bd      	mov	sp, r7
 80144bc:	bd80      	pop	{r7, pc}
	...

080144c0 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80144c0:	b480      	push	{r7}
 80144c2:	b083      	sub	sp, #12
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	4603      	mov	r3, r0
 80144c8:	6039      	str	r1, [r7, #0]
 80144ca:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80144cc:	79fb      	ldrb	r3, [r7, #7]
 80144ce:	3b01      	subs	r3, #1
 80144d0:	2b03      	cmp	r3, #3
 80144d2:	d81f      	bhi.n	8014514 <UpdateFCntDown+0x54>
 80144d4:	a201      	add	r2, pc, #4	; (adr r2, 80144dc <UpdateFCntDown+0x1c>)
 80144d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144da:	bf00      	nop
 80144dc:	080144ed 	.word	0x080144ed
 80144e0:	080144f7 	.word	0x080144f7
 80144e4:	08014501 	.word	0x08014501
 80144e8:	0801450b 	.word	0x0801450b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80144ec:	4b0c      	ldr	r3, [pc, #48]	; (8014520 <UpdateFCntDown+0x60>)
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	683a      	ldr	r2, [r7, #0]
 80144f2:	611a      	str	r2, [r3, #16]
            break;
 80144f4:	e00f      	b.n	8014516 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80144f6:	4b0a      	ldr	r3, [pc, #40]	; (8014520 <UpdateFCntDown+0x60>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	683a      	ldr	r2, [r7, #0]
 80144fc:	615a      	str	r2, [r3, #20]
            break;
 80144fe:	e00a      	b.n	8014516 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8014500:	4b07      	ldr	r3, [pc, #28]	; (8014520 <UpdateFCntDown+0x60>)
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	683a      	ldr	r2, [r7, #0]
 8014506:	619a      	str	r2, [r3, #24]
            break;
 8014508:	e005      	b.n	8014516 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801450a:	4b05      	ldr	r3, [pc, #20]	; (8014520 <UpdateFCntDown+0x60>)
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	683a      	ldr	r2, [r7, #0]
 8014510:	61da      	str	r2, [r3, #28]
            break;
 8014512:	e000      	b.n	8014516 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8014514:	bf00      	nop
    }
}
 8014516:	bf00      	nop
 8014518:	370c      	adds	r7, #12
 801451a:	46bd      	mov	sp, r7
 801451c:	bc80      	pop	{r7}
 801451e:	4770      	bx	lr
 8014520:	200020bc 	.word	0x200020bc

08014524 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8014524:	b480      	push	{r7}
 8014526:	b083      	sub	sp, #12
 8014528:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801452a:	4b18      	ldr	r3, [pc, #96]	; (801458c <ResetFCnts+0x68>)
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	2200      	movs	r2, #0
 8014530:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014532:	4b16      	ldr	r3, [pc, #88]	; (801458c <ResetFCnts+0x68>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	f04f 32ff 	mov.w	r2, #4294967295
 801453a:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801453c:	4b13      	ldr	r3, [pc, #76]	; (801458c <ResetFCnts+0x68>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	f04f 32ff 	mov.w	r2, #4294967295
 8014544:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8014546:	4b11      	ldr	r3, [pc, #68]	; (801458c <ResetFCnts+0x68>)
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	f04f 32ff 	mov.w	r2, #4294967295
 801454e:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8014550:	4b0e      	ldr	r3, [pc, #56]	; (801458c <ResetFCnts+0x68>)
 8014552:	681a      	ldr	r2, [r3, #0]
 8014554:	4b0d      	ldr	r3, [pc, #52]	; (801458c <ResetFCnts+0x68>)
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	6992      	ldr	r2, [r2, #24]
 801455a:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801455c:	2300      	movs	r3, #0
 801455e:	607b      	str	r3, [r7, #4]
 8014560:	e00b      	b.n	801457a <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8014562:	4b0a      	ldr	r3, [pc, #40]	; (801458c <ResetFCnts+0x68>)
 8014564:	681a      	ldr	r2, [r3, #0]
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	3306      	adds	r3, #6
 801456a:	009b      	lsls	r3, r3, #2
 801456c:	4413      	add	r3, r2
 801456e:	f04f 32ff 	mov.w	r2, #4294967295
 8014572:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	3301      	adds	r3, #1
 8014578:	607b      	str	r3, [r7, #4]
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	2b00      	cmp	r3, #0
 801457e:	ddf0      	ble.n	8014562 <ResetFCnts+0x3e>
    }
}
 8014580:	bf00      	nop
 8014582:	bf00      	nop
 8014584:	370c      	adds	r7, #12
 8014586:	46bd      	mov	sp, r7
 8014588:	bc80      	pop	{r7}
 801458a:	4770      	bx	lr
 801458c:	200020bc 	.word	0x200020bc

08014590 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b082      	sub	sp, #8
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d101      	bne.n	80145a2 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801459e:	2309      	movs	r3, #9
 80145a0:	e01c      	b.n	80145dc <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80145a2:	4a10      	ldr	r2, [pc, #64]	; (80145e4 <LoRaMacCryptoInit+0x54>)
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80145a8:	4b0e      	ldr	r3, [pc, #56]	; (80145e4 <LoRaMacCryptoInit+0x54>)
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	2228      	movs	r2, #40	; 0x28
 80145ae:	2100      	movs	r1, #0
 80145b0:	4618      	mov	r0, r3
 80145b2:	f003 fa1d 	bl	80179f0 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80145b6:	4b0b      	ldr	r3, [pc, #44]	; (80145e4 <LoRaMacCryptoInit+0x54>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	2201      	movs	r2, #1
 80145bc:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80145be:	4b09      	ldr	r3, [pc, #36]	; (80145e4 <LoRaMacCryptoInit+0x54>)
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	2201      	movs	r2, #1
 80145c4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80145c6:	4b07      	ldr	r3, [pc, #28]	; (80145e4 <LoRaMacCryptoInit+0x54>)
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	2201      	movs	r2, #1
 80145cc:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80145ce:	4b05      	ldr	r3, [pc, #20]	; (80145e4 <LoRaMacCryptoInit+0x54>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	2200      	movs	r2, #0
 80145d4:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80145d6:	f7ff ffa5 	bl	8014524 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80145da:	2300      	movs	r3, #0
}
 80145dc:	4618      	mov	r0, r3
 80145de:	3708      	adds	r7, #8
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd80      	pop	{r7, pc}
 80145e4:	200020bc 	.word	0x200020bc

080145e8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80145e8:	b480      	push	{r7}
 80145ea:	b083      	sub	sp, #12
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80145f0:	4b04      	ldr	r3, [pc, #16]	; (8014604 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	687a      	ldr	r2, [r7, #4]
 80145f6:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80145f8:	2300      	movs	r3, #0
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	370c      	adds	r7, #12
 80145fe:	46bd      	mov	sp, r7
 8014600:	bc80      	pop	{r7}
 8014602:	4770      	bx	lr
 8014604:	200020bc 	.word	0x200020bc

08014608 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8014608:	b480      	push	{r7}
 801460a:	b083      	sub	sp, #12
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d101      	bne.n	801461a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014616:	230a      	movs	r3, #10
 8014618:	e006      	b.n	8014628 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801461a:	4b06      	ldr	r3, [pc, #24]	; (8014634 <LoRaMacCryptoGetFCntUp+0x2c>)
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	68db      	ldr	r3, [r3, #12]
 8014620:	1c5a      	adds	r2, r3, #1
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8014626:	2300      	movs	r3, #0
}
 8014628:	4618      	mov	r0, r3
 801462a:	370c      	adds	r7, #12
 801462c:	46bd      	mov	sp, r7
 801462e:	bc80      	pop	{r7}
 8014630:	4770      	bx	lr
 8014632:	bf00      	nop
 8014634:	200020bc 	.word	0x200020bc

08014638 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8014638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801463c:	b08a      	sub	sp, #40	; 0x28
 801463e:	af00      	add	r7, sp, #0
 8014640:	613a      	str	r2, [r7, #16]
 8014642:	60fb      	str	r3, [r7, #12]
 8014644:	4603      	mov	r3, r0
 8014646:	75fb      	strb	r3, [r7, #23]
 8014648:	460b      	mov	r3, r1
 801464a:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 801464c:	2300      	movs	r3, #0
 801464e:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8014650:	2300      	movs	r3, #0
 8014652:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8014654:	2313      	movs	r3, #19
 8014656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d101      	bne.n	8014664 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014660:	230a      	movs	r3, #10
 8014662:	e057      	b.n	8014714 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8014664:	f107 021c 	add.w	r2, r7, #28
 8014668:	7dfb      	ldrb	r3, [r7, #23]
 801466a:	4611      	mov	r1, r2
 801466c:	4618      	mov	r0, r3
 801466e:	f7ff feb5 	bl	80143dc <GetLastFcntDown>
 8014672:	4603      	mov	r3, r0
 8014674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8014678:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801467c:	2b00      	cmp	r3, #0
 801467e:	d002      	beq.n	8014686 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8014680:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014684:	e046      	b.n	8014714 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8014686:	69fb      	ldr	r3, [r7, #28]
 8014688:	f1b3 3fff 	cmp.w	r3, #4294967295
 801468c:	d103      	bne.n	8014696 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	693a      	ldr	r2, [r7, #16]
 8014692:	601a      	str	r2, [r3, #0]
 8014694:	e01e      	b.n	80146d4 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8014696:	69fb      	ldr	r3, [r7, #28]
 8014698:	b29b      	uxth	r3, r3
 801469a:	693a      	ldr	r2, [r7, #16]
 801469c:	1ad3      	subs	r3, r2, r3
 801469e:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 80146a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	dd05      	ble.n	80146b2 <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80146a6:	69fa      	ldr	r2, [r7, #28]
 80146a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146aa:	441a      	add	r2, r3
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	601a      	str	r2, [r3, #0]
 80146b0:	e010      	b.n	80146d4 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 80146b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d104      	bne.n	80146c2 <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80146b8:	69fa      	ldr	r2, [r7, #28]
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80146be:	2307      	movs	r3, #7
 80146c0:	e028      	b.n	8014714 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80146c2:	69fb      	ldr	r3, [r7, #28]
 80146c4:	0c1b      	lsrs	r3, r3, #16
 80146c6:	041b      	lsls	r3, r3, #16
 80146c8:	693a      	ldr	r2, [r7, #16]
 80146ca:	4413      	add	r3, r2
 80146cc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80146d4:	4b12      	ldr	r3, [pc, #72]	; (8014720 <LoRaMacCryptoGetFCntDown+0xe8>)
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	789b      	ldrb	r3, [r3, #2]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d119      	bne.n	8014712 <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	2200      	movs	r2, #0
 80146e4:	603b      	str	r3, [r7, #0]
 80146e6:	607a      	str	r2, [r7, #4]
 80146e8:	69fb      	ldr	r3, [r7, #28]
 80146ea:	2200      	movs	r2, #0
 80146ec:	469a      	mov	sl, r3
 80146ee:	4693      	mov	fp, r2
 80146f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80146f4:	4611      	mov	r1, r2
 80146f6:	ebb1 040a 	subs.w	r4, r1, sl
 80146fa:	eb63 050b 	sbc.w	r5, r3, fp
 80146fe:	8abb      	ldrh	r3, [r7, #20]
 8014700:	2200      	movs	r2, #0
 8014702:	4698      	mov	r8, r3
 8014704:	4691      	mov	r9, r2
 8014706:	4544      	cmp	r4, r8
 8014708:	eb75 0309 	sbcs.w	r3, r5, r9
 801470c:	db01      	blt.n	8014712 <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 801470e:	2308      	movs	r3, #8
 8014710:	e000      	b.n	8014714 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014712:	2300      	movs	r3, #0
}
 8014714:	4618      	mov	r0, r3
 8014716:	3728      	adds	r7, #40	; 0x28
 8014718:	46bd      	mov	sp, r7
 801471a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801471e:	bf00      	nop
 8014720:	200020bc 	.word	0x200020bc

08014724 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8014724:	b480      	push	{r7}
 8014726:	b085      	sub	sp, #20
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d101      	bne.n	8014736 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014732:	230a      	movs	r3, #10
 8014734:	e017      	b.n	8014766 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014736:	2300      	movs	r3, #0
 8014738:	60fb      	str	r3, [r7, #12]
 801473a:	e010      	b.n	801475e <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 801473c:	4b0c      	ldr	r3, [pc, #48]	; (8014770 <LoRaMacCryptoSetMulticastReference+0x4c>)
 801473e:	6819      	ldr	r1, [r3, #0]
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	222c      	movs	r2, #44	; 0x2c
 8014744:	fb02 f303 	mul.w	r3, r2, r3
 8014748:	687a      	ldr	r2, [r7, #4]
 801474a:	4413      	add	r3, r2
 801474c:	68fa      	ldr	r2, [r7, #12]
 801474e:	3206      	adds	r2, #6
 8014750:	0092      	lsls	r2, r2, #2
 8014752:	440a      	add	r2, r1
 8014754:	3204      	adds	r2, #4
 8014756:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	3301      	adds	r3, #1
 801475c:	60fb      	str	r3, [r7, #12]
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	2b00      	cmp	r3, #0
 8014762:	ddeb      	ble.n	801473c <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014764:	2300      	movs	r3, #0
}
 8014766:	4618      	mov	r0, r3
 8014768:	3714      	adds	r7, #20
 801476a:	46bd      	mov	sp, r7
 801476c:	bc80      	pop	{r7}
 801476e:	4770      	bx	lr
 8014770:	200020bc 	.word	0x200020bc

08014774 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b082      	sub	sp, #8
 8014778:	af00      	add	r7, sp, #0
 801477a:	4603      	mov	r3, r0
 801477c:	6039      	str	r1, [r7, #0]
 801477e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8014780:	79fb      	ldrb	r3, [r7, #7]
 8014782:	6839      	ldr	r1, [r7, #0]
 8014784:	4618      	mov	r0, r3
 8014786:	f7f8 fbd1 	bl	800cf2c <SecureElementSetKey>
 801478a:	4603      	mov	r3, r0
 801478c:	2b00      	cmp	r3, #0
 801478e:	d001      	beq.n	8014794 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014790:	230f      	movs	r3, #15
 8014792:	e018      	b.n	80147c6 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8014794:	79fb      	ldrb	r3, [r7, #7]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d114      	bne.n	80147c4 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 801479a:	4b0d      	ldr	r3, [pc, #52]	; (80147d0 <LoRaMacCryptoSetKey+0x5c>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	789b      	ldrb	r3, [r3, #2]
 80147a0:	79fa      	ldrb	r2, [r7, #7]
 80147a2:	4611      	mov	r1, r2
 80147a4:	4618      	mov	r0, r3
 80147a6:	f000 fa3f 	bl	8014c28 <LoRaMacCryptoDeriveMcRootKey>
 80147aa:	4603      	mov	r3, r0
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d001      	beq.n	80147b4 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80147b0:	230f      	movs	r3, #15
 80147b2:	e008      	b.n	80147c6 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80147b4:	2004      	movs	r0, #4
 80147b6:	f000 fa62 	bl	8014c7e <LoRaMacCryptoDeriveMcKEKey>
 80147ba:	4603      	mov	r3, r0
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d001      	beq.n	80147c4 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80147c0:	230f      	movs	r3, #15
 80147c2:	e000      	b.n	80147c6 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80147c4:	2300      	movs	r3, #0
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	3708      	adds	r7, #8
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}
 80147ce:	bf00      	nop
 80147d0:	200020bc 	.word	0x200020bc

080147d4 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b086      	sub	sp, #24
 80147d8:	af02      	add	r7, sp, #8
 80147da:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d101      	bne.n	80147e6 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80147e2:	230a      	movs	r3, #10
 80147e4:	e033      	b.n	801484e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80147e6:	2301      	movs	r3, #1
 80147e8:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 80147ea:	2300      	movs	r3, #0
 80147ec:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 80147ee:	f107 0308 	add.w	r3, r7, #8
 80147f2:	4618      	mov	r0, r3
 80147f4:	f7f8 fd6a 	bl	800d2cc <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 80147f8:	68ba      	ldr	r2, [r7, #8]
 80147fa:	4b17      	ldr	r3, [pc, #92]	; (8014858 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	b292      	uxth	r2, r2
 8014800:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8014802:	4b15      	ldr	r3, [pc, #84]	; (8014858 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	889a      	ldrh	r2, [r3, #4]
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801480c:	6878      	ldr	r0, [r7, #4]
 801480e:	f000 fc18 	bl	8015042 <LoRaMacSerializerJoinRequest>
 8014812:	4603      	mov	r3, r0
 8014814:	2b00      	cmp	r3, #0
 8014816:	d001      	beq.n	801481c <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014818:	2311      	movs	r3, #17
 801481a:	e018      	b.n	801484e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	6819      	ldr	r1, [r3, #0]
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	3318      	adds	r3, #24
 8014824:	7bfa      	ldrb	r2, [r7, #15]
 8014826:	9300      	str	r3, [sp, #0]
 8014828:	4613      	mov	r3, r2
 801482a:	2213      	movs	r2, #19
 801482c:	2000      	movs	r0, #0
 801482e:	f7f8 fbdb 	bl	800cfe8 <SecureElementComputeAesCmac>
 8014832:	4603      	mov	r3, r0
 8014834:	2b00      	cmp	r3, #0
 8014836:	d001      	beq.n	801483c <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014838:	230f      	movs	r3, #15
 801483a:	e008      	b.n	801484e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f000 fc00 	bl	8015042 <LoRaMacSerializerJoinRequest>
 8014842:	4603      	mov	r3, r0
 8014844:	2b00      	cmp	r3, #0
 8014846:	d001      	beq.n	801484c <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014848:	2311      	movs	r3, #17
 801484a:	e000      	b.n	801484e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801484c:	2300      	movs	r3, #0
}
 801484e:	4618      	mov	r0, r3
 8014850:	3710      	adds	r7, #16
 8014852:	46bd      	mov	sp, r7
 8014854:	bd80      	pop	{r7, pc}
 8014856:	bf00      	nop
 8014858:	200020bc 	.word	0x200020bc

0801485c <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 801485c:	b590      	push	{r4, r7, lr}
 801485e:	b097      	sub	sp, #92	; 0x5c
 8014860:	af04      	add	r7, sp, #16
 8014862:	4603      	mov	r3, r0
 8014864:	60b9      	str	r1, [r7, #8]
 8014866:	607a      	str	r2, [r7, #4]
 8014868:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d002      	beq.n	8014876 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8014870:	68bb      	ldr	r3, [r7, #8]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d101      	bne.n	801487a <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014876:	230a      	movs	r3, #10
 8014878:	e0bd      	b.n	80149f6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801487a:	2313      	movs	r3, #19
 801487c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8014880:	2300      	movs	r3, #0
 8014882:	61bb      	str	r3, [r7, #24]
 8014884:	f107 031c 	add.w	r3, r7, #28
 8014888:	221d      	movs	r2, #29
 801488a:	2100      	movs	r1, #0
 801488c:	4618      	mov	r0, r3
 801488e:	f007 fe73 	bl	801c578 <memset>
    uint8_t versionMinor         = 0;
 8014892:	2300      	movs	r3, #0
 8014894:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8014896:	4b5a      	ldr	r3, [pc, #360]	; (8014a00 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	889b      	ldrh	r3, [r3, #4]
 801489c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	681c      	ldr	r4, [r3, #0]
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	791b      	ldrb	r3, [r3, #4]
 80148a8:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80148ac:	7bf8      	ldrb	r0, [r7, #15]
 80148ae:	f107 0217 	add.w	r2, r7, #23
 80148b2:	9202      	str	r2, [sp, #8]
 80148b4:	f107 0218 	add.w	r2, r7, #24
 80148b8:	9201      	str	r2, [sp, #4]
 80148ba:	9300      	str	r3, [sp, #0]
 80148bc:	4623      	mov	r3, r4
 80148be:	460a      	mov	r2, r1
 80148c0:	68b9      	ldr	r1, [r7, #8]
 80148c2:	f7f8 fc85 	bl	800d1d0 <SecureElementProcessJoinAccept>
 80148c6:	4603      	mov	r3, r0
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d001      	beq.n	80148d0 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80148cc:	230f      	movs	r3, #15
 80148ce:	e092      	b.n	80149f6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	6818      	ldr	r0, [r3, #0]
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	791b      	ldrb	r3, [r3, #4]
 80148d8:	b29a      	uxth	r2, r3
 80148da:	f107 0318 	add.w	r3, r7, #24
 80148de:	4619      	mov	r1, r3
 80148e0:	f003 f84b 	bl	801797a <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80148e4:	6878      	ldr	r0, [r7, #4]
 80148e6:	f000 f9ed 	bl	8014cc4 <LoRaMacParserJoinAccept>
 80148ea:	4603      	mov	r3, r0
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d001      	beq.n	80148f4 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80148f0:	2310      	movs	r3, #16
 80148f2:	e080      	b.n	80149f6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	799b      	ldrb	r3, [r3, #6]
 80148f8:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	79db      	ldrb	r3, [r3, #7]
 80148fe:	021b      	lsls	r3, r3, #8
 8014900:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014902:	4313      	orrs	r3, r2
 8014904:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	7a1b      	ldrb	r3, [r3, #8]
 801490a:	041b      	lsls	r3, r3, #16
 801490c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801490e:	4313      	orrs	r3, r2
 8014910:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8014912:	4b3b      	ldr	r3, [pc, #236]	; (8014a00 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	689b      	ldr	r3, [r3, #8]
 8014918:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801491a:	429a      	cmp	r2, r3
 801491c:	d010      	beq.n	8014940 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 801491e:	4b38      	ldr	r3, [pc, #224]	; (8014a00 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014924:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8014926:	7dfb      	ldrb	r3, [r7, #23]
 8014928:	2100      	movs	r1, #0
 801492a:	4618      	mov	r0, r3
 801492c:	f000 f97c 	bl	8014c28 <LoRaMacCryptoDeriveMcRootKey>
 8014930:	4603      	mov	r3, r0
 8014932:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014936:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801493a:	2b00      	cmp	r3, #0
 801493c:	d005      	beq.n	801494a <LoRaMacCryptoHandleJoinAccept+0xee>
 801493e:	e001      	b.n	8014944 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8014940:	2303      	movs	r3, #3
 8014942:	e058      	b.n	80149f6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8014944:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014948:	e055      	b.n	80149f6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 801494a:	2004      	movs	r0, #4
 801494c:	f000 f997 	bl	8014c7e <LoRaMacCryptoDeriveMcKEKey>
 8014950:	4603      	mov	r3, r0
 8014952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014956:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801495a:	2b00      	cmp	r3, #0
 801495c:	d002      	beq.n	8014964 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 801495e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014962:	e048      	b.n	80149f6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	7a5b      	ldrb	r3, [r3, #9]
 8014968:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	7a9b      	ldrb	r3, [r3, #10]
 801496e:	021b      	lsls	r3, r3, #8
 8014970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014972:	4313      	orrs	r3, r2
 8014974:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	7adb      	ldrb	r3, [r3, #11]
 801497a:	041b      	lsls	r3, r3, #16
 801497c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801497e:	4313      	orrs	r3, r2
 8014980:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8014982:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014986:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014988:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801498a:	2003      	movs	r0, #3
 801498c:	f7ff fcd6 	bl	801433c <DeriveSessionKey10x>
 8014990:	4603      	mov	r3, r0
 8014992:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014996:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801499a:	2b00      	cmp	r3, #0
 801499c:	d002      	beq.n	80149a4 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 801499e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80149a2:	e028      	b.n	80149f6 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80149a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80149a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80149aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80149ac:	2002      	movs	r0, #2
 80149ae:	f7ff fcc5 	bl	801433c <DeriveSessionKey10x>
 80149b2:	4603      	mov	r3, r0
 80149b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80149b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d002      	beq.n	80149c6 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 80149c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80149c4:	e017      	b.n	80149f6 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80149c6:	4b0e      	ldr	r3, [pc, #56]	; (8014a00 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	7dfa      	ldrb	r2, [r7, #23]
 80149cc:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 80149ce:	4b0c      	ldr	r3, [pc, #48]	; (8014a00 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	2200      	movs	r2, #0
 80149d4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80149d6:	4b0a      	ldr	r3, [pc, #40]	; (8014a00 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	f04f 32ff 	mov.w	r2, #4294967295
 80149de:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80149e0:	4b07      	ldr	r3, [pc, #28]	; (8014a00 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	f04f 32ff 	mov.w	r2, #4294967295
 80149e8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80149ea:	4b05      	ldr	r3, [pc, #20]	; (8014a00 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	f04f 32ff 	mov.w	r2, #4294967295
 80149f2:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80149f4:	2300      	movs	r3, #0
}
 80149f6:	4618      	mov	r0, r3
 80149f8:	374c      	adds	r7, #76	; 0x4c
 80149fa:	46bd      	mov	sp, r7
 80149fc:	bd90      	pop	{r4, r7, pc}
 80149fe:	bf00      	nop
 8014a00:	200020bc 	.word	0x200020bc

08014a04 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8014a04:	b590      	push	{r4, r7, lr}
 8014a06:	b08b      	sub	sp, #44	; 0x2c
 8014a08:	af04      	add	r7, sp, #16
 8014a0a:	60f8      	str	r0, [r7, #12]
 8014a0c:	607b      	str	r3, [r7, #4]
 8014a0e:	460b      	mov	r3, r1
 8014a10:	72fb      	strb	r3, [r7, #11]
 8014a12:	4613      	mov	r3, r2
 8014a14:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014a16:	2313      	movs	r3, #19
 8014a18:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014a1a:	2303      	movs	r3, #3
 8014a1c:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d101      	bne.n	8014a28 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014a24:	230a      	movs	r3, #10
 8014a26:	e05f      	b.n	8014ae8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8014a28:	4b31      	ldr	r3, [pc, #196]	; (8014af0 <LoRaMacCryptoSecureMessage+0xec>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	68db      	ldr	r3, [r3, #12]
 8014a2e:	68fa      	ldr	r2, [r7, #12]
 8014a30:	429a      	cmp	r2, r3
 8014a32:	d201      	bcs.n	8014a38 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014a34:	2306      	movs	r3, #6
 8014a36:	e057      	b.n	8014ae8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d101      	bne.n	8014a46 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014a42:	2302      	movs	r3, #2
 8014a44:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8014a46:	4b2a      	ldr	r3, [pc, #168]	; (8014af0 <LoRaMacCryptoSecureMessage+0xec>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	68db      	ldr	r3, [r3, #12]
 8014a4c:	68fa      	ldr	r2, [r7, #12]
 8014a4e:	429a      	cmp	r2, r3
 8014a50:	d916      	bls.n	8014a80 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a5c:	b219      	sxth	r1, r3
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	689c      	ldr	r4, [r3, #8]
 8014a62:	7dfa      	ldrb	r2, [r7, #23]
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	9301      	str	r3, [sp, #4]
 8014a68:	2300      	movs	r3, #0
 8014a6a:	9300      	str	r3, [sp, #0]
 8014a6c:	4623      	mov	r3, r4
 8014a6e:	f7ff fa71 	bl	8013f54 <PayloadEncrypt>
 8014a72:	4603      	mov	r3, r0
 8014a74:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014a76:	7dbb      	ldrb	r3, [r7, #22]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d001      	beq.n	8014a80 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8014a7c:	7dbb      	ldrb	r3, [r7, #22]
 8014a7e:	e033      	b.n	8014ae8 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014a80:	6878      	ldr	r0, [r7, #4]
 8014a82:	f000 fb60 	bl	8015146 <LoRaMacSerializerData>
 8014a86:	4603      	mov	r3, r0
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d001      	beq.n	8014a90 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014a8c:	2311      	movs	r3, #17
 8014a8e:	e02b      	b.n	8014ae8 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014a90:	2302      	movs	r3, #2
 8014a92:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	6818      	ldr	r0, [r3, #0]
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	791b      	ldrb	r3, [r3, #4]
 8014a9c:	b29b      	uxth	r3, r3
 8014a9e:	3b04      	subs	r3, #4
 8014aa0:	b299      	uxth	r1, r3
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	689b      	ldr	r3, [r3, #8]
 8014aa6:	687a      	ldr	r2, [r7, #4]
 8014aa8:	322c      	adds	r2, #44	; 0x2c
 8014aaa:	7dfc      	ldrb	r4, [r7, #23]
 8014aac:	9203      	str	r2, [sp, #12]
 8014aae:	68fa      	ldr	r2, [r7, #12]
 8014ab0:	9202      	str	r2, [sp, #8]
 8014ab2:	9301      	str	r3, [sp, #4]
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	9300      	str	r3, [sp, #0]
 8014ab8:	2300      	movs	r3, #0
 8014aba:	4622      	mov	r2, r4
 8014abc:	f7ff fb4b 	bl	8014156 <ComputeCmacB0>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014ac4:	7dbb      	ldrb	r3, [r7, #22]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d001      	beq.n	8014ace <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8014aca:	7dbb      	ldrb	r3, [r7, #22]
 8014acc:	e00c      	b.n	8014ae8 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014ace:	6878      	ldr	r0, [r7, #4]
 8014ad0:	f000 fb39 	bl	8015146 <LoRaMacSerializerData>
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d001      	beq.n	8014ade <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014ada:	2311      	movs	r3, #17
 8014adc:	e004      	b.n	8014ae8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8014ade:	4b04      	ldr	r3, [pc, #16]	; (8014af0 <LoRaMacCryptoSecureMessage+0xec>)
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	68fa      	ldr	r2, [r7, #12]
 8014ae4:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8014ae6:	2300      	movs	r3, #0
}
 8014ae8:	4618      	mov	r0, r3
 8014aea:	371c      	adds	r7, #28
 8014aec:	46bd      	mov	sp, r7
 8014aee:	bd90      	pop	{r4, r7, pc}
 8014af0:	200020bc 	.word	0x200020bc

08014af4 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8014af4:	b590      	push	{r4, r7, lr}
 8014af6:	b08b      	sub	sp, #44	; 0x2c
 8014af8:	af04      	add	r7, sp, #16
 8014afa:	60b9      	str	r1, [r7, #8]
 8014afc:	607b      	str	r3, [r7, #4]
 8014afe:	4603      	mov	r3, r0
 8014b00:	73fb      	strb	r3, [r7, #15]
 8014b02:	4613      	mov	r3, r2
 8014b04:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8014b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d101      	bne.n	8014b10 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014b0c:	230a      	movs	r3, #10
 8014b0e:	e084      	b.n	8014c1a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014b10:	7bbb      	ldrb	r3, [r7, #14]
 8014b12:	6879      	ldr	r1, [r7, #4]
 8014b14:	4618      	mov	r0, r3
 8014b16:	f7ff fcaf 	bl	8014478 <CheckFCntDown>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	f083 0301 	eor.w	r3, r3, #1
 8014b20:	b2db      	uxtb	r3, r3
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d001      	beq.n	8014b2a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014b26:	2306      	movs	r3, #6
 8014b28:	e077      	b.n	8014c1a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014b2a:	2313      	movs	r3, #19
 8014b2c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014b2e:	2303      	movs	r3, #3
 8014b30:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8014b32:	2302      	movs	r3, #2
 8014b34:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b38:	f000 f98f 	bl	8014e5a <LoRaMacParserData>
 8014b3c:	4603      	mov	r3, r0
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d001      	beq.n	8014b46 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014b42:	2310      	movs	r3, #16
 8014b44:	e069      	b.n	8014c1a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8014b46:	f107 0210 	add.w	r2, r7, #16
 8014b4a:	7bfb      	ldrb	r3, [r7, #15]
 8014b4c:	4611      	mov	r1, r2
 8014b4e:	4618      	mov	r0, r3
 8014b50:	f7ff fbce 	bl	80142f0 <GetKeyAddrItem>
 8014b54:	4603      	mov	r3, r0
 8014b56:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014b58:	7d7b      	ldrb	r3, [r7, #21]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d001      	beq.n	8014b62 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8014b5e:	7d7b      	ldrb	r3, [r7, #21]
 8014b60:	e05b      	b.n	8014c1a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8014b62:	693b      	ldr	r3, [r7, #16]
 8014b64:	785b      	ldrb	r3, [r3, #1]
 8014b66:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8014b68:	693b      	ldr	r3, [r7, #16]
 8014b6a:	789b      	ldrb	r3, [r3, #2]
 8014b6c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8014b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b70:	689b      	ldr	r3, [r3, #8]
 8014b72:	68ba      	ldr	r2, [r7, #8]
 8014b74:	429a      	cmp	r2, r3
 8014b76:	d001      	beq.n	8014b7c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8014b78:	2302      	movs	r3, #2
 8014b7a:	e04e      	b.n	8014c1a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8014b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b7e:	7b1b      	ldrb	r3, [r3, #12]
 8014b80:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014b84:	b2db      	uxtb	r3, r3
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	bf14      	ite	ne
 8014b8a:	2301      	movne	r3, #1
 8014b8c:	2300      	moveq	r3, #0
 8014b8e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8014b90:	4b24      	ldr	r3, [pc, #144]	; (8014c24 <LoRaMacCryptoUnsecureMessage+0x130>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	789b      	ldrb	r3, [r3, #2]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d101      	bne.n	8014b9e <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8014b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ba0:	6818      	ldr	r0, [r3, #0]
 8014ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ba4:	791b      	ldrb	r3, [r3, #4]
 8014ba6:	b29b      	uxth	r3, r3
 8014ba8:	3b04      	subs	r3, #4
 8014baa:	b299      	uxth	r1, r3
 8014bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bb0:	7dbc      	ldrb	r4, [r7, #22]
 8014bb2:	7d3a      	ldrb	r2, [r7, #20]
 8014bb4:	9303      	str	r3, [sp, #12]
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	9302      	str	r3, [sp, #8]
 8014bba:	68bb      	ldr	r3, [r7, #8]
 8014bbc:	9301      	str	r3, [sp, #4]
 8014bbe:	2301      	movs	r3, #1
 8014bc0:	9300      	str	r3, [sp, #0]
 8014bc2:	4623      	mov	r3, r4
 8014bc4:	f7ff fb05 	bl	80141d2 <VerifyCmacB0>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014bcc:	7d7b      	ldrb	r3, [r7, #21]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d001      	beq.n	8014bd6 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8014bd2:	7d7b      	ldrb	r3, [r7, #21]
 8014bd4:	e021      	b.n	8014c1a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8014bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d101      	bne.n	8014be4 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014be0:	2302      	movs	r3, #2
 8014be2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8014be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014be6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014bee:	b219      	sxth	r1, r3
 8014bf0:	7dfa      	ldrb	r2, [r7, #23]
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	9301      	str	r3, [sp, #4]
 8014bf6:	2301      	movs	r3, #1
 8014bf8:	9300      	str	r3, [sp, #0]
 8014bfa:	68bb      	ldr	r3, [r7, #8]
 8014bfc:	f7ff f9aa 	bl	8013f54 <PayloadEncrypt>
 8014c00:	4603      	mov	r3, r0
 8014c02:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014c04:	7d7b      	ldrb	r3, [r7, #21]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d001      	beq.n	8014c0e <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8014c0a:	7d7b      	ldrb	r3, [r7, #21]
 8014c0c:	e005      	b.n	8014c1a <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8014c0e:	7bbb      	ldrb	r3, [r7, #14]
 8014c10:	6879      	ldr	r1, [r7, #4]
 8014c12:	4618      	mov	r0, r3
 8014c14:	f7ff fc54 	bl	80144c0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8014c18:	2300      	movs	r3, #0
}
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	371c      	adds	r7, #28
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd90      	pop	{r4, r7, pc}
 8014c22:	bf00      	nop
 8014c24:	200020bc 	.word	0x200020bc

08014c28 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b086      	sub	sp, #24
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	4603      	mov	r3, r0
 8014c30:	460a      	mov	r2, r1
 8014c32:	71fb      	strb	r3, [r7, #7]
 8014c34:	4613      	mov	r3, r2
 8014c36:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8014c38:	79bb      	ldrb	r3, [r7, #6]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d001      	beq.n	8014c42 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014c3e:	230b      	movs	r3, #11
 8014c40:	e019      	b.n	8014c76 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8014c42:	2300      	movs	r3, #0
 8014c44:	60bb      	str	r3, [r7, #8]
 8014c46:	f107 030c 	add.w	r3, r7, #12
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	601a      	str	r2, [r3, #0]
 8014c4e:	605a      	str	r2, [r3, #4]
 8014c50:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8014c52:	79fb      	ldrb	r3, [r7, #7]
 8014c54:	2b01      	cmp	r3, #1
 8014c56:	d101      	bne.n	8014c5c <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8014c58:	2320      	movs	r3, #32
 8014c5a:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014c5c:	79b9      	ldrb	r1, [r7, #6]
 8014c5e:	f107 0308 	add.w	r3, r7, #8
 8014c62:	2204      	movs	r2, #4
 8014c64:	4618      	mov	r0, r3
 8014c66:	f7f8 fa73 	bl	800d150 <SecureElementDeriveAndStoreKey>
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d001      	beq.n	8014c74 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014c70:	230f      	movs	r3, #15
 8014c72:	e000      	b.n	8014c76 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014c74:	2300      	movs	r3, #0
}
 8014c76:	4618      	mov	r0, r3
 8014c78:	3718      	adds	r7, #24
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	bd80      	pop	{r7, pc}

08014c7e <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8014c7e:	b580      	push	{r7, lr}
 8014c80:	b086      	sub	sp, #24
 8014c82:	af00      	add	r7, sp, #0
 8014c84:	4603      	mov	r3, r0
 8014c86:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8014c88:	79fb      	ldrb	r3, [r7, #7]
 8014c8a:	2b04      	cmp	r3, #4
 8014c8c:	d001      	beq.n	8014c92 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014c8e:	230b      	movs	r3, #11
 8014c90:	e014      	b.n	8014cbc <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8014c92:	2300      	movs	r3, #0
 8014c94:	60bb      	str	r3, [r7, #8]
 8014c96:	f107 030c 	add.w	r3, r7, #12
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	601a      	str	r2, [r3, #0]
 8014c9e:	605a      	str	r2, [r3, #4]
 8014ca0:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014ca2:	79f9      	ldrb	r1, [r7, #7]
 8014ca4:	f107 0308 	add.w	r3, r7, #8
 8014ca8:	227f      	movs	r2, #127	; 0x7f
 8014caa:	4618      	mov	r0, r3
 8014cac:	f7f8 fa50 	bl	800d150 <SecureElementDeriveAndStoreKey>
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d001      	beq.n	8014cba <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014cb6:	230f      	movs	r3, #15
 8014cb8:	e000      	b.n	8014cbc <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014cba:	2300      	movs	r3, #0
}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	3718      	adds	r7, #24
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd80      	pop	{r7, pc}

08014cc4 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b084      	sub	sp, #16
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d003      	beq.n	8014cda <LoRaMacParserJoinAccept+0x16>
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d101      	bne.n	8014cde <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014cda:	2302      	movs	r3, #2
 8014cdc:	e0b9      	b.n	8014e52 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8014cde:	2300      	movs	r3, #0
 8014ce0:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	681a      	ldr	r2, [r3, #0]
 8014ce6:	89fb      	ldrh	r3, [r7, #14]
 8014ce8:	1c59      	adds	r1, r3, #1
 8014cea:	81f9      	strh	r1, [r7, #14]
 8014cec:	4413      	add	r3, r2
 8014cee:	781a      	ldrb	r2, [r3, #0]
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	1d98      	adds	r0, r3, #6
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	681a      	ldr	r2, [r3, #0]
 8014cfc:	89fb      	ldrh	r3, [r7, #14]
 8014cfe:	4413      	add	r3, r2
 8014d00:	2203      	movs	r2, #3
 8014d02:	4619      	mov	r1, r3
 8014d04:	f002 fe39 	bl	801797a <memcpy1>
    bufItr = bufItr + 3;
 8014d08:	89fb      	ldrh	r3, [r7, #14]
 8014d0a:	3303      	adds	r3, #3
 8014d0c:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	f103 0009 	add.w	r0, r3, #9
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	681a      	ldr	r2, [r3, #0]
 8014d18:	89fb      	ldrh	r3, [r7, #14]
 8014d1a:	4413      	add	r3, r2
 8014d1c:	2203      	movs	r2, #3
 8014d1e:	4619      	mov	r1, r3
 8014d20:	f002 fe2b 	bl	801797a <memcpy1>
    bufItr = bufItr + 3;
 8014d24:	89fb      	ldrh	r3, [r7, #14]
 8014d26:	3303      	adds	r3, #3
 8014d28:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	681a      	ldr	r2, [r3, #0]
 8014d2e:	89fb      	ldrh	r3, [r7, #14]
 8014d30:	1c59      	adds	r1, r3, #1
 8014d32:	81f9      	strh	r1, [r7, #14]
 8014d34:	4413      	add	r3, r2
 8014d36:	781b      	ldrb	r3, [r3, #0]
 8014d38:	461a      	mov	r2, r3
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	681a      	ldr	r2, [r3, #0]
 8014d42:	89fb      	ldrh	r3, [r7, #14]
 8014d44:	1c59      	adds	r1, r3, #1
 8014d46:	81f9      	strh	r1, [r7, #14]
 8014d48:	4413      	add	r3, r2
 8014d4a:	781b      	ldrb	r3, [r3, #0]
 8014d4c:	021a      	lsls	r2, r3, #8
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	68db      	ldr	r3, [r3, #12]
 8014d52:	431a      	orrs	r2, r3
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	681a      	ldr	r2, [r3, #0]
 8014d5c:	89fb      	ldrh	r3, [r7, #14]
 8014d5e:	1c59      	adds	r1, r3, #1
 8014d60:	81f9      	strh	r1, [r7, #14]
 8014d62:	4413      	add	r3, r2
 8014d64:	781b      	ldrb	r3, [r3, #0]
 8014d66:	041a      	lsls	r2, r3, #16
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	68db      	ldr	r3, [r3, #12]
 8014d6c:	431a      	orrs	r2, r3
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	681a      	ldr	r2, [r3, #0]
 8014d76:	89fb      	ldrh	r3, [r7, #14]
 8014d78:	1c59      	adds	r1, r3, #1
 8014d7a:	81f9      	strh	r1, [r7, #14]
 8014d7c:	4413      	add	r3, r2
 8014d7e:	781b      	ldrb	r3, [r3, #0]
 8014d80:	061a      	lsls	r2, r3, #24
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	68db      	ldr	r3, [r3, #12]
 8014d86:	431a      	orrs	r2, r3
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	681a      	ldr	r2, [r3, #0]
 8014d90:	89fb      	ldrh	r3, [r7, #14]
 8014d92:	1c59      	adds	r1, r3, #1
 8014d94:	81f9      	strh	r1, [r7, #14]
 8014d96:	4413      	add	r3, r2
 8014d98:	781a      	ldrb	r2, [r3, #0]
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	681a      	ldr	r2, [r3, #0]
 8014da2:	89fb      	ldrh	r3, [r7, #14]
 8014da4:	1c59      	adds	r1, r3, #1
 8014da6:	81f9      	strh	r1, [r7, #14]
 8014da8:	4413      	add	r3, r2
 8014daa:	781a      	ldrb	r2, [r3, #0]
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	791b      	ldrb	r3, [r3, #4]
 8014db4:	1f1a      	subs	r2, r3, #4
 8014db6:	89fb      	ldrh	r3, [r7, #14]
 8014db8:	1ad3      	subs	r3, r2, r3
 8014dba:	2b10      	cmp	r3, #16
 8014dbc:	d10e      	bne.n	8014ddc <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	f103 0012 	add.w	r0, r3, #18
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	681a      	ldr	r2, [r3, #0]
 8014dc8:	89fb      	ldrh	r3, [r7, #14]
 8014dca:	4413      	add	r3, r2
 8014dcc:	2210      	movs	r2, #16
 8014dce:	4619      	mov	r1, r3
 8014dd0:	f002 fdd3 	bl	801797a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8014dd4:	89fb      	ldrh	r3, [r7, #14]
 8014dd6:	3310      	adds	r3, #16
 8014dd8:	81fb      	strh	r3, [r7, #14]
 8014dda:	e008      	b.n	8014dee <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	791b      	ldrb	r3, [r3, #4]
 8014de0:	1f1a      	subs	r2, r3, #4
 8014de2:	89fb      	ldrh	r3, [r7, #14]
 8014de4:	1ad3      	subs	r3, r2, r3
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	dd01      	ble.n	8014dee <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8014dea:	2301      	movs	r3, #1
 8014dec:	e031      	b.n	8014e52 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	681a      	ldr	r2, [r3, #0]
 8014df2:	89fb      	ldrh	r3, [r7, #14]
 8014df4:	1c59      	adds	r1, r3, #1
 8014df6:	81f9      	strh	r1, [r7, #14]
 8014df8:	4413      	add	r3, r2
 8014dfa:	781b      	ldrb	r3, [r3, #0]
 8014dfc:	461a      	mov	r2, r3
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	681a      	ldr	r2, [r3, #0]
 8014e06:	89fb      	ldrh	r3, [r7, #14]
 8014e08:	1c59      	adds	r1, r3, #1
 8014e0a:	81f9      	strh	r1, [r7, #14]
 8014e0c:	4413      	add	r3, r2
 8014e0e:	781b      	ldrb	r3, [r3, #0]
 8014e10:	021a      	lsls	r2, r3, #8
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e16:	431a      	orrs	r2, r3
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	681a      	ldr	r2, [r3, #0]
 8014e20:	89fb      	ldrh	r3, [r7, #14]
 8014e22:	1c59      	adds	r1, r3, #1
 8014e24:	81f9      	strh	r1, [r7, #14]
 8014e26:	4413      	add	r3, r2
 8014e28:	781b      	ldrb	r3, [r3, #0]
 8014e2a:	041a      	lsls	r2, r3, #16
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e30:	431a      	orrs	r2, r3
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	681a      	ldr	r2, [r3, #0]
 8014e3a:	89fb      	ldrh	r3, [r7, #14]
 8014e3c:	1c59      	adds	r1, r3, #1
 8014e3e:	81f9      	strh	r1, [r7, #14]
 8014e40:	4413      	add	r3, r2
 8014e42:	781b      	ldrb	r3, [r3, #0]
 8014e44:	061a      	lsls	r2, r3, #24
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e4a:	431a      	orrs	r2, r3
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014e50:	2300      	movs	r3, #0
}
 8014e52:	4618      	mov	r0, r3
 8014e54:	3710      	adds	r7, #16
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}

08014e5a <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014e5a:	b580      	push	{r7, lr}
 8014e5c:	b084      	sub	sp, #16
 8014e5e:	af00      	add	r7, sp, #0
 8014e60:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d003      	beq.n	8014e70 <LoRaMacParserData+0x16>
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d101      	bne.n	8014e74 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014e70:	2302      	movs	r3, #2
 8014e72:	e0e2      	b.n	801503a <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8014e74:	2300      	movs	r3, #0
 8014e76:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	681a      	ldr	r2, [r3, #0]
 8014e7c:	89fb      	ldrh	r3, [r7, #14]
 8014e7e:	1c59      	adds	r1, r3, #1
 8014e80:	81f9      	strh	r1, [r7, #14]
 8014e82:	4413      	add	r3, r2
 8014e84:	781a      	ldrb	r2, [r3, #0]
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	681a      	ldr	r2, [r3, #0]
 8014e8e:	89fb      	ldrh	r3, [r7, #14]
 8014e90:	1c59      	adds	r1, r3, #1
 8014e92:	81f9      	strh	r1, [r7, #14]
 8014e94:	4413      	add	r3, r2
 8014e96:	781b      	ldrb	r3, [r3, #0]
 8014e98:	461a      	mov	r2, r3
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	681a      	ldr	r2, [r3, #0]
 8014ea2:	89fb      	ldrh	r3, [r7, #14]
 8014ea4:	1c59      	adds	r1, r3, #1
 8014ea6:	81f9      	strh	r1, [r7, #14]
 8014ea8:	4413      	add	r3, r2
 8014eaa:	781b      	ldrb	r3, [r3, #0]
 8014eac:	021a      	lsls	r2, r3, #8
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	689b      	ldr	r3, [r3, #8]
 8014eb2:	431a      	orrs	r2, r3
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	681a      	ldr	r2, [r3, #0]
 8014ebc:	89fb      	ldrh	r3, [r7, #14]
 8014ebe:	1c59      	adds	r1, r3, #1
 8014ec0:	81f9      	strh	r1, [r7, #14]
 8014ec2:	4413      	add	r3, r2
 8014ec4:	781b      	ldrb	r3, [r3, #0]
 8014ec6:	041a      	lsls	r2, r3, #16
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	689b      	ldr	r3, [r3, #8]
 8014ecc:	431a      	orrs	r2, r3
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	681a      	ldr	r2, [r3, #0]
 8014ed6:	89fb      	ldrh	r3, [r7, #14]
 8014ed8:	1c59      	adds	r1, r3, #1
 8014eda:	81f9      	strh	r1, [r7, #14]
 8014edc:	4413      	add	r3, r2
 8014ede:	781b      	ldrb	r3, [r3, #0]
 8014ee0:	061a      	lsls	r2, r3, #24
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	689b      	ldr	r3, [r3, #8]
 8014ee6:	431a      	orrs	r2, r3
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	681a      	ldr	r2, [r3, #0]
 8014ef0:	89fb      	ldrh	r3, [r7, #14]
 8014ef2:	1c59      	adds	r1, r3, #1
 8014ef4:	81f9      	strh	r1, [r7, #14]
 8014ef6:	4413      	add	r3, r2
 8014ef8:	781a      	ldrb	r2, [r3, #0]
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	681a      	ldr	r2, [r3, #0]
 8014f02:	89fb      	ldrh	r3, [r7, #14]
 8014f04:	1c59      	adds	r1, r3, #1
 8014f06:	81f9      	strh	r1, [r7, #14]
 8014f08:	4413      	add	r3, r2
 8014f0a:	781b      	ldrb	r3, [r3, #0]
 8014f0c:	b29a      	uxth	r2, r3
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	681a      	ldr	r2, [r3, #0]
 8014f16:	89fb      	ldrh	r3, [r7, #14]
 8014f18:	1c59      	adds	r1, r3, #1
 8014f1a:	81f9      	strh	r1, [r7, #14]
 8014f1c:	4413      	add	r3, r2
 8014f1e:	781b      	ldrb	r3, [r3, #0]
 8014f20:	0219      	lsls	r1, r3, #8
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	89db      	ldrh	r3, [r3, #14]
 8014f26:	b21a      	sxth	r2, r3
 8014f28:	b20b      	sxth	r3, r1
 8014f2a:	4313      	orrs	r3, r2
 8014f2c:	b21b      	sxth	r3, r3
 8014f2e:	b29a      	uxth	r2, r3
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	f103 0010 	add.w	r0, r3, #16
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	681a      	ldr	r2, [r3, #0]
 8014f3e:	89fb      	ldrh	r3, [r7, #14]
 8014f40:	18d1      	adds	r1, r2, r3
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	7b1b      	ldrb	r3, [r3, #12]
 8014f46:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014f4a:	b2db      	uxtb	r3, r3
 8014f4c:	b29b      	uxth	r3, r3
 8014f4e:	461a      	mov	r2, r3
 8014f50:	f002 fd13 	bl	801797a <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	7b1b      	ldrb	r3, [r3, #12]
 8014f58:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014f5c:	b2db      	uxtb	r3, r3
 8014f5e:	b29a      	uxth	r2, r3
 8014f60:	89fb      	ldrh	r3, [r7, #14]
 8014f62:	4413      	add	r3, r2
 8014f64:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	2200      	movs	r2, #0
 8014f6a:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	2200      	movs	r2, #0
 8014f72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	791b      	ldrb	r3, [r3, #4]
 8014f7a:	461a      	mov	r2, r3
 8014f7c:	89fb      	ldrh	r3, [r7, #14]
 8014f7e:	1ad3      	subs	r3, r2, r3
 8014f80:	2b04      	cmp	r3, #4
 8014f82:	dd28      	ble.n	8014fd6 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	681a      	ldr	r2, [r3, #0]
 8014f88:	89fb      	ldrh	r3, [r7, #14]
 8014f8a:	1c59      	adds	r1, r3, #1
 8014f8c:	81f9      	strh	r1, [r7, #14]
 8014f8e:	4413      	add	r3, r2
 8014f90:	781a      	ldrb	r2, [r3, #0]
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	791a      	ldrb	r2, [r3, #4]
 8014f9c:	89fb      	ldrh	r3, [r7, #14]
 8014f9e:	b2db      	uxtb	r3, r3
 8014fa0:	1ad3      	subs	r3, r2, r3
 8014fa2:	b2db      	uxtb	r3, r3
 8014fa4:	3b04      	subs	r3, #4
 8014fa6:	b2da      	uxtb	r2, r3
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	681a      	ldr	r2, [r3, #0]
 8014fb6:	89fb      	ldrh	r3, [r7, #14]
 8014fb8:	18d1      	adds	r1, r2, r3
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014fc0:	b29b      	uxth	r3, r3
 8014fc2:	461a      	mov	r2, r3
 8014fc4:	f002 fcd9 	bl	801797a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014fce:	b29a      	uxth	r2, r3
 8014fd0:	89fb      	ldrh	r3, [r7, #14]
 8014fd2:	4413      	add	r3, r2
 8014fd4:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	681a      	ldr	r2, [r3, #0]
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	791b      	ldrb	r3, [r3, #4]
 8014fde:	3b04      	subs	r3, #4
 8014fe0:	4413      	add	r3, r2
 8014fe2:	781b      	ldrb	r3, [r3, #0]
 8014fe4:	461a      	mov	r2, r3
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	6819      	ldr	r1, [r3, #0]
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	791b      	ldrb	r3, [r3, #4]
 8014ff6:	3b03      	subs	r3, #3
 8014ff8:	440b      	add	r3, r1
 8014ffa:	781b      	ldrb	r3, [r3, #0]
 8014ffc:	021b      	lsls	r3, r3, #8
 8014ffe:	431a      	orrs	r2, r3
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	6819      	ldr	r1, [r3, #0]
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	791b      	ldrb	r3, [r3, #4]
 8015010:	3b02      	subs	r3, #2
 8015012:	440b      	add	r3, r1
 8015014:	781b      	ldrb	r3, [r3, #0]
 8015016:	041b      	lsls	r3, r3, #16
 8015018:	431a      	orrs	r2, r3
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	6819      	ldr	r1, [r3, #0]
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	791b      	ldrb	r3, [r3, #4]
 801502a:	3b01      	subs	r3, #1
 801502c:	440b      	add	r3, r1
 801502e:	781b      	ldrb	r3, [r3, #0]
 8015030:	061b      	lsls	r3, r3, #24
 8015032:	431a      	orrs	r2, r3
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8015038:	2300      	movs	r3, #0
}
 801503a:	4618      	mov	r0, r3
 801503c:	3710      	adds	r7, #16
 801503e:	46bd      	mov	sp, r7
 8015040:	bd80      	pop	{r7, pc}

08015042 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015042:	b580      	push	{r7, lr}
 8015044:	b084      	sub	sp, #16
 8015046:	af00      	add	r7, sp, #0
 8015048:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d003      	beq.n	8015058 <LoRaMacSerializerJoinRequest+0x16>
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d101      	bne.n	801505c <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015058:	2301      	movs	r3, #1
 801505a:	e070      	b.n	801513e <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 801505c:	2300      	movs	r3, #0
 801505e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	791b      	ldrb	r3, [r3, #4]
 8015064:	2b16      	cmp	r3, #22
 8015066:	d801      	bhi.n	801506c <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015068:	2302      	movs	r3, #2
 801506a:	e068      	b.n	801513e <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	681a      	ldr	r2, [r3, #0]
 8015070:	89fb      	ldrh	r3, [r7, #14]
 8015072:	1c59      	adds	r1, r3, #1
 8015074:	81f9      	strh	r1, [r7, #14]
 8015076:	4413      	add	r3, r2
 8015078:	687a      	ldr	r2, [r7, #4]
 801507a:	7952      	ldrb	r2, [r2, #5]
 801507c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	681a      	ldr	r2, [r3, #0]
 8015082:	89fb      	ldrh	r3, [r7, #14]
 8015084:	18d0      	adds	r0, r2, r3
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	3306      	adds	r3, #6
 801508a:	2208      	movs	r2, #8
 801508c:	4619      	mov	r1, r3
 801508e:	f002 fc8f 	bl	80179b0 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8015092:	89fb      	ldrh	r3, [r7, #14]
 8015094:	3308      	adds	r3, #8
 8015096:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	681a      	ldr	r2, [r3, #0]
 801509c:	89fb      	ldrh	r3, [r7, #14]
 801509e:	18d0      	adds	r0, r2, r3
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	330e      	adds	r3, #14
 80150a4:	2208      	movs	r2, #8
 80150a6:	4619      	mov	r1, r3
 80150a8:	f002 fc82 	bl	80179b0 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80150ac:	89fb      	ldrh	r3, [r7, #14]
 80150ae:	3308      	adds	r3, #8
 80150b0:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	8ad9      	ldrh	r1, [r3, #22]
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	681a      	ldr	r2, [r3, #0]
 80150ba:	89fb      	ldrh	r3, [r7, #14]
 80150bc:	1c58      	adds	r0, r3, #1
 80150be:	81f8      	strh	r0, [r7, #14]
 80150c0:	4413      	add	r3, r2
 80150c2:	b2ca      	uxtb	r2, r1
 80150c4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	8adb      	ldrh	r3, [r3, #22]
 80150ca:	0a1b      	lsrs	r3, r3, #8
 80150cc:	b299      	uxth	r1, r3
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	681a      	ldr	r2, [r3, #0]
 80150d2:	89fb      	ldrh	r3, [r7, #14]
 80150d4:	1c58      	adds	r0, r3, #1
 80150d6:	81f8      	strh	r0, [r7, #14]
 80150d8:	4413      	add	r3, r2
 80150da:	b2ca      	uxtb	r2, r1
 80150dc:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	6999      	ldr	r1, [r3, #24]
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	681a      	ldr	r2, [r3, #0]
 80150e6:	89fb      	ldrh	r3, [r7, #14]
 80150e8:	1c58      	adds	r0, r3, #1
 80150ea:	81f8      	strh	r0, [r7, #14]
 80150ec:	4413      	add	r3, r2
 80150ee:	b2ca      	uxtb	r2, r1
 80150f0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	699b      	ldr	r3, [r3, #24]
 80150f6:	0a19      	lsrs	r1, r3, #8
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	681a      	ldr	r2, [r3, #0]
 80150fc:	89fb      	ldrh	r3, [r7, #14]
 80150fe:	1c58      	adds	r0, r3, #1
 8015100:	81f8      	strh	r0, [r7, #14]
 8015102:	4413      	add	r3, r2
 8015104:	b2ca      	uxtb	r2, r1
 8015106:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	699b      	ldr	r3, [r3, #24]
 801510c:	0c19      	lsrs	r1, r3, #16
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	681a      	ldr	r2, [r3, #0]
 8015112:	89fb      	ldrh	r3, [r7, #14]
 8015114:	1c58      	adds	r0, r3, #1
 8015116:	81f8      	strh	r0, [r7, #14]
 8015118:	4413      	add	r3, r2
 801511a:	b2ca      	uxtb	r2, r1
 801511c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	699b      	ldr	r3, [r3, #24]
 8015122:	0e19      	lsrs	r1, r3, #24
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	681a      	ldr	r2, [r3, #0]
 8015128:	89fb      	ldrh	r3, [r7, #14]
 801512a:	1c58      	adds	r0, r3, #1
 801512c:	81f8      	strh	r0, [r7, #14]
 801512e:	4413      	add	r3, r2
 8015130:	b2ca      	uxtb	r2, r1
 8015132:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015134:	89fb      	ldrh	r3, [r7, #14]
 8015136:	b2da      	uxtb	r2, r3
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801513c:	2300      	movs	r3, #0
}
 801513e:	4618      	mov	r0, r3
 8015140:	3710      	adds	r7, #16
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}

08015146 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8015146:	b580      	push	{r7, lr}
 8015148:	b084      	sub	sp, #16
 801514a:	af00      	add	r7, sp, #0
 801514c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d003      	beq.n	801515c <LoRaMacSerializerData+0x16>
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d101      	bne.n	8015160 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801515c:	2301      	movs	r3, #1
 801515e:	e0e5      	b.n	801532c <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8015160:	2300      	movs	r3, #0
 8015162:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8015164:	2308      	movs	r3, #8
 8015166:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	7b1b      	ldrb	r3, [r3, #12]
 801516c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015170:	b2db      	uxtb	r3, r3
 8015172:	b29a      	uxth	r2, r3
 8015174:	89bb      	ldrh	r3, [r7, #12]
 8015176:	4413      	add	r3, r2
 8015178:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015180:	2b00      	cmp	r3, #0
 8015182:	d002      	beq.n	801518a <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8015184:	89bb      	ldrh	r3, [r7, #12]
 8015186:	3301      	adds	r3, #1
 8015188:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015190:	b29a      	uxth	r2, r3
 8015192:	89bb      	ldrh	r3, [r7, #12]
 8015194:	4413      	add	r3, r2
 8015196:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8015198:	89bb      	ldrh	r3, [r7, #12]
 801519a:	3304      	adds	r3, #4
 801519c:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	791b      	ldrb	r3, [r3, #4]
 80151a2:	b29b      	uxth	r3, r3
 80151a4:	89ba      	ldrh	r2, [r7, #12]
 80151a6:	429a      	cmp	r2, r3
 80151a8:	d901      	bls.n	80151ae <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80151aa:	2302      	movs	r3, #2
 80151ac:	e0be      	b.n	801532c <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	681a      	ldr	r2, [r3, #0]
 80151b2:	89fb      	ldrh	r3, [r7, #14]
 80151b4:	1c59      	adds	r1, r3, #1
 80151b6:	81f9      	strh	r1, [r7, #14]
 80151b8:	4413      	add	r3, r2
 80151ba:	687a      	ldr	r2, [r7, #4]
 80151bc:	7952      	ldrb	r2, [r2, #5]
 80151be:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	6899      	ldr	r1, [r3, #8]
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	681a      	ldr	r2, [r3, #0]
 80151c8:	89fb      	ldrh	r3, [r7, #14]
 80151ca:	1c58      	adds	r0, r3, #1
 80151cc:	81f8      	strh	r0, [r7, #14]
 80151ce:	4413      	add	r3, r2
 80151d0:	b2ca      	uxtb	r2, r1
 80151d2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	689b      	ldr	r3, [r3, #8]
 80151d8:	0a19      	lsrs	r1, r3, #8
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	681a      	ldr	r2, [r3, #0]
 80151de:	89fb      	ldrh	r3, [r7, #14]
 80151e0:	1c58      	adds	r0, r3, #1
 80151e2:	81f8      	strh	r0, [r7, #14]
 80151e4:	4413      	add	r3, r2
 80151e6:	b2ca      	uxtb	r2, r1
 80151e8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	689b      	ldr	r3, [r3, #8]
 80151ee:	0c19      	lsrs	r1, r3, #16
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	681a      	ldr	r2, [r3, #0]
 80151f4:	89fb      	ldrh	r3, [r7, #14]
 80151f6:	1c58      	adds	r0, r3, #1
 80151f8:	81f8      	strh	r0, [r7, #14]
 80151fa:	4413      	add	r3, r2
 80151fc:	b2ca      	uxtb	r2, r1
 80151fe:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	689b      	ldr	r3, [r3, #8]
 8015204:	0e19      	lsrs	r1, r3, #24
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	681a      	ldr	r2, [r3, #0]
 801520a:	89fb      	ldrh	r3, [r7, #14]
 801520c:	1c58      	adds	r0, r3, #1
 801520e:	81f8      	strh	r0, [r7, #14]
 8015210:	4413      	add	r3, r2
 8015212:	b2ca      	uxtb	r2, r1
 8015214:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	681a      	ldr	r2, [r3, #0]
 801521a:	89fb      	ldrh	r3, [r7, #14]
 801521c:	1c59      	adds	r1, r3, #1
 801521e:	81f9      	strh	r1, [r7, #14]
 8015220:	4413      	add	r3, r2
 8015222:	687a      	ldr	r2, [r7, #4]
 8015224:	7b12      	ldrb	r2, [r2, #12]
 8015226:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	89d9      	ldrh	r1, [r3, #14]
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	681a      	ldr	r2, [r3, #0]
 8015230:	89fb      	ldrh	r3, [r7, #14]
 8015232:	1c58      	adds	r0, r3, #1
 8015234:	81f8      	strh	r0, [r7, #14]
 8015236:	4413      	add	r3, r2
 8015238:	b2ca      	uxtb	r2, r1
 801523a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	89db      	ldrh	r3, [r3, #14]
 8015240:	0a1b      	lsrs	r3, r3, #8
 8015242:	b299      	uxth	r1, r3
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	681a      	ldr	r2, [r3, #0]
 8015248:	89fb      	ldrh	r3, [r7, #14]
 801524a:	1c58      	adds	r0, r3, #1
 801524c:	81f8      	strh	r0, [r7, #14]
 801524e:	4413      	add	r3, r2
 8015250:	b2ca      	uxtb	r2, r1
 8015252:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	681a      	ldr	r2, [r3, #0]
 8015258:	89fb      	ldrh	r3, [r7, #14]
 801525a:	18d0      	adds	r0, r2, r3
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	f103 0110 	add.w	r1, r3, #16
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	7b1b      	ldrb	r3, [r3, #12]
 8015266:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801526a:	b2db      	uxtb	r3, r3
 801526c:	b29b      	uxth	r3, r3
 801526e:	461a      	mov	r2, r3
 8015270:	f002 fb83 	bl	801797a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	7b1b      	ldrb	r3, [r3, #12]
 8015278:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801527c:	b2db      	uxtb	r3, r3
 801527e:	b29a      	uxth	r2, r3
 8015280:	89fb      	ldrh	r3, [r7, #14]
 8015282:	4413      	add	r3, r2
 8015284:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801528c:	2b00      	cmp	r3, #0
 801528e:	d009      	beq.n	80152a4 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	681a      	ldr	r2, [r3, #0]
 8015294:	89fb      	ldrh	r3, [r7, #14]
 8015296:	1c59      	adds	r1, r3, #1
 8015298:	81f9      	strh	r1, [r7, #14]
 801529a:	4413      	add	r3, r2
 801529c:	687a      	ldr	r2, [r7, #4]
 801529e:	f892 2020 	ldrb.w	r2, [r2, #32]
 80152a2:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	681a      	ldr	r2, [r3, #0]
 80152a8:	89fb      	ldrh	r3, [r7, #14]
 80152aa:	18d0      	adds	r0, r2, r3
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80152b6:	b29b      	uxth	r3, r3
 80152b8:	461a      	mov	r2, r3
 80152ba:	f002 fb5e 	bl	801797a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80152c4:	b29a      	uxth	r2, r3
 80152c6:	89fb      	ldrh	r3, [r7, #14]
 80152c8:	4413      	add	r3, r2
 80152ca:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	681a      	ldr	r2, [r3, #0]
 80152d4:	89fb      	ldrh	r3, [r7, #14]
 80152d6:	1c58      	adds	r0, r3, #1
 80152d8:	81f8      	strh	r0, [r7, #14]
 80152da:	4413      	add	r3, r2
 80152dc:	b2ca      	uxtb	r2, r1
 80152de:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152e4:	0a19      	lsrs	r1, r3, #8
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	681a      	ldr	r2, [r3, #0]
 80152ea:	89fb      	ldrh	r3, [r7, #14]
 80152ec:	1c58      	adds	r0, r3, #1
 80152ee:	81f8      	strh	r0, [r7, #14]
 80152f0:	4413      	add	r3, r2
 80152f2:	b2ca      	uxtb	r2, r1
 80152f4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152fa:	0c19      	lsrs	r1, r3, #16
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	681a      	ldr	r2, [r3, #0]
 8015300:	89fb      	ldrh	r3, [r7, #14]
 8015302:	1c58      	adds	r0, r3, #1
 8015304:	81f8      	strh	r0, [r7, #14]
 8015306:	4413      	add	r3, r2
 8015308:	b2ca      	uxtb	r2, r1
 801530a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015310:	0e19      	lsrs	r1, r3, #24
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	681a      	ldr	r2, [r3, #0]
 8015316:	89fb      	ldrh	r3, [r7, #14]
 8015318:	1c58      	adds	r0, r3, #1
 801531a:	81f8      	strh	r0, [r7, #14]
 801531c:	4413      	add	r3, r2
 801531e:	b2ca      	uxtb	r2, r1
 8015320:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015322:	89fb      	ldrh	r3, [r7, #14]
 8015324:	b2da      	uxtb	r2, r3
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801532a:	2300      	movs	r3, #0
}
 801532c:	4618      	mov	r0, r3
 801532e:	3710      	adds	r7, #16
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}

08015334 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8015334:	b480      	push	{r7}
 8015336:	b083      	sub	sp, #12
 8015338:	af00      	add	r7, sp, #0
 801533a:	4603      	mov	r3, r0
 801533c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801533e:	79fb      	ldrb	r3, [r7, #7]
 8015340:	2b05      	cmp	r3, #5
 8015342:	d101      	bne.n	8015348 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8015344:	2301      	movs	r3, #1
 8015346:	e000      	b.n	801534a <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8015348:	2300      	movs	r3, #0
        }
    }
}
 801534a:	4618      	mov	r0, r3
 801534c:	370c      	adds	r7, #12
 801534e:	46bd      	mov	sp, r7
 8015350:	bc80      	pop	{r7}
 8015352:	4770      	bx	lr

08015354 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b084      	sub	sp, #16
 8015358:	af00      	add	r7, sp, #0
 801535a:	4603      	mov	r3, r0
 801535c:	6039      	str	r1, [r7, #0]
 801535e:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8015360:	2300      	movs	r3, #0
 8015362:	60bb      	str	r3, [r7, #8]
    switch( region )
 8015364:	79fb      	ldrb	r3, [r7, #7]
 8015366:	2b05      	cmp	r3, #5
 8015368:	d105      	bne.n	8015376 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 801536a:	6838      	ldr	r0, [r7, #0]
 801536c:	f001 f994 	bl	8016698 <RegionEU868GetPhyParam>
 8015370:	4603      	mov	r3, r0
 8015372:	60fb      	str	r3, [r7, #12]
 8015374:	e001      	b.n	801537a <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8015376:	68bb      	ldr	r3, [r7, #8]
 8015378:	60fb      	str	r3, [r7, #12]
        }
    }
}
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	4618      	mov	r0, r3
 801537e:	3710      	adds	r7, #16
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}

08015384 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b082      	sub	sp, #8
 8015388:	af00      	add	r7, sp, #0
 801538a:	4603      	mov	r3, r0
 801538c:	6039      	str	r1, [r7, #0]
 801538e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015390:	79fb      	ldrb	r3, [r7, #7]
 8015392:	2b05      	cmp	r3, #5
 8015394:	d103      	bne.n	801539e <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8015396:	6838      	ldr	r0, [r7, #0]
 8015398:	f001 faca 	bl	8016930 <RegionEU868SetBandTxDone>
 801539c:	e000      	b.n	80153a0 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801539e:	bf00      	nop
        }
    }
}
 80153a0:	3708      	adds	r7, #8
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd80      	pop	{r7, pc}

080153a6 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80153a6:	b580      	push	{r7, lr}
 80153a8:	b082      	sub	sp, #8
 80153aa:	af00      	add	r7, sp, #0
 80153ac:	4603      	mov	r3, r0
 80153ae:	6039      	str	r1, [r7, #0]
 80153b0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80153b2:	79fb      	ldrb	r3, [r7, #7]
 80153b4:	2b05      	cmp	r3, #5
 80153b6:	d103      	bne.n	80153c0 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 80153b8:	6838      	ldr	r0, [r7, #0]
 80153ba:	f001 fae5 	bl	8016988 <RegionEU868InitDefaults>
 80153be:	e000      	b.n	80153c2 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80153c0:	bf00      	nop
        }
    }
}
 80153c2:	bf00      	nop
 80153c4:	3708      	adds	r7, #8
 80153c6:	46bd      	mov	sp, r7
 80153c8:	bd80      	pop	{r7, pc}

080153ca <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80153ca:	b580      	push	{r7, lr}
 80153cc:	b082      	sub	sp, #8
 80153ce:	af00      	add	r7, sp, #0
 80153d0:	4603      	mov	r3, r0
 80153d2:	6039      	str	r1, [r7, #0]
 80153d4:	71fb      	strb	r3, [r7, #7]
 80153d6:	4613      	mov	r3, r2
 80153d8:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80153da:	79fb      	ldrb	r3, [r7, #7]
 80153dc:	2b05      	cmp	r3, #5
 80153de:	d106      	bne.n	80153ee <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80153e0:	79bb      	ldrb	r3, [r7, #6]
 80153e2:	4619      	mov	r1, r3
 80153e4:	6838      	ldr	r0, [r7, #0]
 80153e6:	f001 fb6d 	bl	8016ac4 <RegionEU868Verify>
 80153ea:	4603      	mov	r3, r0
 80153ec:	e000      	b.n	80153f0 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80153ee:	2300      	movs	r3, #0
        }
    }
}
 80153f0:	4618      	mov	r0, r3
 80153f2:	3708      	adds	r7, #8
 80153f4:	46bd      	mov	sp, r7
 80153f6:	bd80      	pop	{r7, pc}

080153f8 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b082      	sub	sp, #8
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	4603      	mov	r3, r0
 8015400:	6039      	str	r1, [r7, #0]
 8015402:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015404:	79fb      	ldrb	r3, [r7, #7]
 8015406:	2b05      	cmp	r3, #5
 8015408:	d103      	bne.n	8015412 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 801540a:	6838      	ldr	r0, [r7, #0]
 801540c:	f001 fbd6 	bl	8016bbc <RegionEU868ApplyCFList>
 8015410:	e000      	b.n	8015414 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8015412:	bf00      	nop
        }
    }
}
 8015414:	bf00      	nop
 8015416:	3708      	adds	r7, #8
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}

0801541c <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b082      	sub	sp, #8
 8015420:	af00      	add	r7, sp, #0
 8015422:	4603      	mov	r3, r0
 8015424:	6039      	str	r1, [r7, #0]
 8015426:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015428:	79fb      	ldrb	r3, [r7, #7]
 801542a:	2b05      	cmp	r3, #5
 801542c:	d104      	bne.n	8015438 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 801542e:	6838      	ldr	r0, [r7, #0]
 8015430:	f001 fc38 	bl	8016ca4 <RegionEU868ChanMaskSet>
 8015434:	4603      	mov	r3, r0
 8015436:	e000      	b.n	801543a <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8015438:	2300      	movs	r3, #0
        }
    }
}
 801543a:	4618      	mov	r0, r3
 801543c:	3708      	adds	r7, #8
 801543e:	46bd      	mov	sp, r7
 8015440:	bd80      	pop	{r7, pc}

08015442 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015442:	b580      	push	{r7, lr}
 8015444:	b082      	sub	sp, #8
 8015446:	af00      	add	r7, sp, #0
 8015448:	603b      	str	r3, [r7, #0]
 801544a:	4603      	mov	r3, r0
 801544c:	71fb      	strb	r3, [r7, #7]
 801544e:	460b      	mov	r3, r1
 8015450:	71bb      	strb	r3, [r7, #6]
 8015452:	4613      	mov	r3, r2
 8015454:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015456:	79fb      	ldrb	r3, [r7, #7]
 8015458:	2b05      	cmp	r3, #5
 801545a:	d107      	bne.n	801546c <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801545c:	7979      	ldrb	r1, [r7, #5]
 801545e:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8015462:	693b      	ldr	r3, [r7, #16]
 8015464:	683a      	ldr	r2, [r7, #0]
 8015466:	f001 fc47 	bl	8016cf8 <RegionEU868ComputeRxWindowParameters>
 801546a:	e000      	b.n	801546e <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 801546c:	bf00      	nop
        }
    }
}
 801546e:	bf00      	nop
 8015470:	3708      	adds	r7, #8
 8015472:	46bd      	mov	sp, r7
 8015474:	bd80      	pop	{r7, pc}

08015476 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015476:	b580      	push	{r7, lr}
 8015478:	b084      	sub	sp, #16
 801547a:	af00      	add	r7, sp, #0
 801547c:	4603      	mov	r3, r0
 801547e:	60b9      	str	r1, [r7, #8]
 8015480:	607a      	str	r2, [r7, #4]
 8015482:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015484:	7bfb      	ldrb	r3, [r7, #15]
 8015486:	2b05      	cmp	r3, #5
 8015488:	d105      	bne.n	8015496 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 801548a:	6879      	ldr	r1, [r7, #4]
 801548c:	68b8      	ldr	r0, [r7, #8]
 801548e:	f001 fc8d 	bl	8016dac <RegionEU868RxConfig>
 8015492:	4603      	mov	r3, r0
 8015494:	e000      	b.n	8015498 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8015496:	2300      	movs	r3, #0
        }
    }
}
 8015498:	4618      	mov	r0, r3
 801549a:	3710      	adds	r7, #16
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}

080154a0 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b084      	sub	sp, #16
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	60b9      	str	r1, [r7, #8]
 80154a8:	607a      	str	r2, [r7, #4]
 80154aa:	603b      	str	r3, [r7, #0]
 80154ac:	4603      	mov	r3, r0
 80154ae:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80154b0:	7bfb      	ldrb	r3, [r7, #15]
 80154b2:	2b05      	cmp	r3, #5
 80154b4:	d106      	bne.n	80154c4 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 80154b6:	683a      	ldr	r2, [r7, #0]
 80154b8:	6879      	ldr	r1, [r7, #4]
 80154ba:	68b8      	ldr	r0, [r7, #8]
 80154bc:	f001 fd46 	bl	8016f4c <RegionEU868TxConfig>
 80154c0:	4603      	mov	r3, r0
 80154c2:	e000      	b.n	80154c6 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80154c4:	2300      	movs	r3, #0
        }
    }
}
 80154c6:	4618      	mov	r0, r3
 80154c8:	3710      	adds	r7, #16
 80154ca:	46bd      	mov	sp, r7
 80154cc:	bd80      	pop	{r7, pc}

080154ce <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80154ce:	b580      	push	{r7, lr}
 80154d0:	b086      	sub	sp, #24
 80154d2:	af02      	add	r7, sp, #8
 80154d4:	60b9      	str	r1, [r7, #8]
 80154d6:	607a      	str	r2, [r7, #4]
 80154d8:	603b      	str	r3, [r7, #0]
 80154da:	4603      	mov	r3, r0
 80154dc:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80154de:	7bfb      	ldrb	r3, [r7, #15]
 80154e0:	2b05      	cmp	r3, #5
 80154e2:	d109      	bne.n	80154f8 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80154e4:	69fb      	ldr	r3, [r7, #28]
 80154e6:	9300      	str	r3, [sp, #0]
 80154e8:	69bb      	ldr	r3, [r7, #24]
 80154ea:	683a      	ldr	r2, [r7, #0]
 80154ec:	6879      	ldr	r1, [r7, #4]
 80154ee:	68b8      	ldr	r0, [r7, #8]
 80154f0:	f001 fdfc 	bl	80170ec <RegionEU868LinkAdrReq>
 80154f4:	4603      	mov	r3, r0
 80154f6:	e000      	b.n	80154fa <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80154f8:	2300      	movs	r3, #0
        }
    }
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	3710      	adds	r7, #16
 80154fe:	46bd      	mov	sp, r7
 8015500:	bd80      	pop	{r7, pc}

08015502 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015502:	b580      	push	{r7, lr}
 8015504:	b082      	sub	sp, #8
 8015506:	af00      	add	r7, sp, #0
 8015508:	4603      	mov	r3, r0
 801550a:	6039      	str	r1, [r7, #0]
 801550c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801550e:	79fb      	ldrb	r3, [r7, #7]
 8015510:	2b05      	cmp	r3, #5
 8015512:	d104      	bne.n	801551e <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8015514:	6838      	ldr	r0, [r7, #0]
 8015516:	f001 ff0b 	bl	8017330 <RegionEU868RxParamSetupReq>
 801551a:	4603      	mov	r3, r0
 801551c:	e000      	b.n	8015520 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801551e:	2300      	movs	r3, #0
        }
    }
}
 8015520:	4618      	mov	r0, r3
 8015522:	3708      	adds	r7, #8
 8015524:	46bd      	mov	sp, r7
 8015526:	bd80      	pop	{r7, pc}

08015528 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8015528:	b580      	push	{r7, lr}
 801552a:	b082      	sub	sp, #8
 801552c:	af00      	add	r7, sp, #0
 801552e:	4603      	mov	r3, r0
 8015530:	6039      	str	r1, [r7, #0]
 8015532:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015534:	79fb      	ldrb	r3, [r7, #7]
 8015536:	2b05      	cmp	r3, #5
 8015538:	d104      	bne.n	8015544 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 801553a:	6838      	ldr	r0, [r7, #0]
 801553c:	f001 ff36 	bl	80173ac <RegionEU868NewChannelReq>
 8015540:	4603      	mov	r3, r0
 8015542:	e000      	b.n	8015546 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015544:	2300      	movs	r3, #0
        }
    }
}
 8015546:	4618      	mov	r0, r3
 8015548:	3708      	adds	r7, #8
 801554a:	46bd      	mov	sp, r7
 801554c:	bd80      	pop	{r7, pc}

0801554e <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 801554e:	b580      	push	{r7, lr}
 8015550:	b082      	sub	sp, #8
 8015552:	af00      	add	r7, sp, #0
 8015554:	4603      	mov	r3, r0
 8015556:	6039      	str	r1, [r7, #0]
 8015558:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801555a:	79fb      	ldrb	r3, [r7, #7]
 801555c:	2b05      	cmp	r3, #5
 801555e:	d104      	bne.n	801556a <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8015560:	6838      	ldr	r0, [r7, #0]
 8015562:	f001 ff81 	bl	8017468 <RegionEU868TxParamSetupReq>
 8015566:	4603      	mov	r3, r0
 8015568:	e000      	b.n	801556c <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801556a:	2300      	movs	r3, #0
        }
    }
}
 801556c:	4618      	mov	r0, r3
 801556e:	3708      	adds	r7, #8
 8015570:	46bd      	mov	sp, r7
 8015572:	bd80      	pop	{r7, pc}

08015574 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b082      	sub	sp, #8
 8015578:	af00      	add	r7, sp, #0
 801557a:	4603      	mov	r3, r0
 801557c:	6039      	str	r1, [r7, #0]
 801557e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015580:	79fb      	ldrb	r3, [r7, #7]
 8015582:	2b05      	cmp	r3, #5
 8015584:	d104      	bne.n	8015590 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8015586:	6838      	ldr	r0, [r7, #0]
 8015588:	f001 ff7a 	bl	8017480 <RegionEU868DlChannelReq>
 801558c:	4603      	mov	r3, r0
 801558e:	e000      	b.n	8015592 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015590:	2300      	movs	r3, #0
        }
    }
}
 8015592:	4618      	mov	r0, r3
 8015594:	3708      	adds	r7, #8
 8015596:	46bd      	mov	sp, r7
 8015598:	bd80      	pop	{r7, pc}

0801559a <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801559a:	b580      	push	{r7, lr}
 801559c:	b082      	sub	sp, #8
 801559e:	af00      	add	r7, sp, #0
 80155a0:	4603      	mov	r3, r0
 80155a2:	71fb      	strb	r3, [r7, #7]
 80155a4:	460b      	mov	r3, r1
 80155a6:	71bb      	strb	r3, [r7, #6]
 80155a8:	4613      	mov	r3, r2
 80155aa:	717b      	strb	r3, [r7, #5]
    switch( region )
 80155ac:	79fb      	ldrb	r3, [r7, #7]
 80155ae:	2b05      	cmp	r3, #5
 80155b0:	d108      	bne.n	80155c4 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80155b2:	797a      	ldrb	r2, [r7, #5]
 80155b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80155b8:	4611      	mov	r1, r2
 80155ba:	4618      	mov	r0, r3
 80155bc:	f001 ffa4 	bl	8017508 <RegionEU868AlternateDr>
 80155c0:	4603      	mov	r3, r0
 80155c2:	e000      	b.n	80155c6 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80155c4:	2300      	movs	r3, #0
        }
    }
}
 80155c6:	4618      	mov	r0, r3
 80155c8:	3708      	adds	r7, #8
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}

080155ce <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80155ce:	b580      	push	{r7, lr}
 80155d0:	b084      	sub	sp, #16
 80155d2:	af00      	add	r7, sp, #0
 80155d4:	60b9      	str	r1, [r7, #8]
 80155d6:	607a      	str	r2, [r7, #4]
 80155d8:	603b      	str	r3, [r7, #0]
 80155da:	4603      	mov	r3, r0
 80155dc:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80155de:	7bfb      	ldrb	r3, [r7, #15]
 80155e0:	2b05      	cmp	r3, #5
 80155e2:	d107      	bne.n	80155f4 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80155e4:	69bb      	ldr	r3, [r7, #24]
 80155e6:	683a      	ldr	r2, [r7, #0]
 80155e8:	6879      	ldr	r1, [r7, #4]
 80155ea:	68b8      	ldr	r0, [r7, #8]
 80155ec:	f001 ff9c 	bl	8017528 <RegionEU868NextChannel>
 80155f0:	4603      	mov	r3, r0
 80155f2:	e000      	b.n	80155f6 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80155f4:	2309      	movs	r3, #9
        }
    }
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	3710      	adds	r7, #16
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}

080155fe <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 80155fe:	b580      	push	{r7, lr}
 8015600:	b082      	sub	sp, #8
 8015602:	af00      	add	r7, sp, #0
 8015604:	4603      	mov	r3, r0
 8015606:	6039      	str	r1, [r7, #0]
 8015608:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801560a:	79fb      	ldrb	r3, [r7, #7]
 801560c:	2b05      	cmp	r3, #5
 801560e:	d103      	bne.n	8015618 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8015610:	6838      	ldr	r0, [r7, #0]
 8015612:	f002 f903 	bl	801781c <RegionEU868SetContinuousWave>
 8015616:	e000      	b.n	801561a <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8015618:	bf00      	nop
        }
    }
}
 801561a:	bf00      	nop
 801561c:	3708      	adds	r7, #8
 801561e:	46bd      	mov	sp, r7
 8015620:	bd80      	pop	{r7, pc}

08015622 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015622:	b590      	push	{r4, r7, lr}
 8015624:	b083      	sub	sp, #12
 8015626:	af00      	add	r7, sp, #0
 8015628:	4604      	mov	r4, r0
 801562a:	4608      	mov	r0, r1
 801562c:	4611      	mov	r1, r2
 801562e:	461a      	mov	r2, r3
 8015630:	4623      	mov	r3, r4
 8015632:	71fb      	strb	r3, [r7, #7]
 8015634:	4603      	mov	r3, r0
 8015636:	71bb      	strb	r3, [r7, #6]
 8015638:	460b      	mov	r3, r1
 801563a:	717b      	strb	r3, [r7, #5]
 801563c:	4613      	mov	r3, r2
 801563e:	713b      	strb	r3, [r7, #4]
    switch( region )
 8015640:	79fb      	ldrb	r3, [r7, #7]
 8015642:	2b05      	cmp	r3, #5
 8015644:	d109      	bne.n	801565a <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8015646:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801564a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801564e:	79bb      	ldrb	r3, [r7, #6]
 8015650:	4618      	mov	r0, r3
 8015652:	f002 f931 	bl	80178b8 <RegionEU868ApplyDrOffset>
 8015656:	4603      	mov	r3, r0
 8015658:	e000      	b.n	801565c <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 801565a:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 801565c:	4618      	mov	r0, r3
 801565e:	370c      	adds	r7, #12
 8015660:	46bd      	mov	sp, r7
 8015662:	bd90      	pop	{r4, r7, pc}

08015664 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8015664:	b480      	push	{r7}
 8015666:	b083      	sub	sp, #12
 8015668:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801566a:	4b04      	ldr	r3, [pc, #16]	; (801567c <RegionGetVersion+0x18>)
 801566c:	607b      	str	r3, [r7, #4]

    return version;
 801566e:	687b      	ldr	r3, [r7, #4]
}
 8015670:	4618      	mov	r0, r3
 8015672:	370c      	adds	r7, #12
 8015674:	46bd      	mov	sp, r7
 8015676:	bc80      	pop	{r7}
 8015678:	4770      	bx	lr
 801567a:	bf00      	nop
 801567c:	01010003 	.word	0x01010003

08015680 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015680:	b480      	push	{r7}
 8015682:	b087      	sub	sp, #28
 8015684:	af00      	add	r7, sp, #0
 8015686:	60f8      	str	r0, [r7, #12]
 8015688:	4608      	mov	r0, r1
 801568a:	4639      	mov	r1, r7
 801568c:	e881 000c 	stmia.w	r1, {r2, r3}
 8015690:	4603      	mov	r3, r0
 8015692:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	881b      	ldrh	r3, [r3, #0]
 8015698:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801569a:	7afb      	ldrb	r3, [r7, #11]
 801569c:	f083 0301 	eor.w	r3, r3, #1
 80156a0:	b2db      	uxtb	r3, r3
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d01b      	beq.n	80156de <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80156a6:	f242 7310 	movw	r3, #10000	; 0x2710
 80156aa:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80156ac:	683b      	ldr	r3, [r7, #0]
 80156ae:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80156b2:	d202      	bcs.n	80156ba <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80156b4:	2364      	movs	r3, #100	; 0x64
 80156b6:	82bb      	strh	r3, [r7, #20]
 80156b8:	e00b      	b.n	80156d2 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80156c0:	4293      	cmp	r3, r2
 80156c2:	d803      	bhi.n	80156cc <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80156c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80156c8:	82bb      	strh	r3, [r7, #20]
 80156ca:	e002      	b.n	80156d2 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80156cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80156d0:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80156d2:	8aba      	ldrh	r2, [r7, #20]
 80156d4:	8afb      	ldrh	r3, [r7, #22]
 80156d6:	4293      	cmp	r3, r2
 80156d8:	bf38      	it	cc
 80156da:	4613      	movcc	r3, r2
 80156dc:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80156de:	8afb      	ldrh	r3, [r7, #22]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d101      	bne.n	80156e8 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80156e4:	2301      	movs	r3, #1
 80156e6:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80156e8:	8afb      	ldrh	r3, [r7, #22]
}
 80156ea:	4618      	mov	r0, r3
 80156ec:	371c      	adds	r7, #28
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bc80      	pop	{r7}
 80156f2:	4770      	bx	lr

080156f4 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b08e      	sub	sp, #56	; 0x38
 80156f8:	af02      	add	r7, sp, #8
 80156fa:	60f8      	str	r0, [r7, #12]
 80156fc:	4608      	mov	r0, r1
 80156fe:	4639      	mov	r1, r7
 8015700:	e881 000c 	stmia.w	r1, {r2, r3}
 8015704:	4603      	mov	r3, r0
 8015706:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	881b      	ldrh	r3, [r3, #0]
 801570c:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801570e:	4b4b      	ldr	r3, [pc, #300]	; (801583c <SetMaxTimeCredits+0x148>)
 8015710:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8015712:	463b      	mov	r3, r7
 8015714:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015718:	f005 fd66 	bl	801b1e8 <SysTimeToMs>
 801571c:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 801571e:	f107 0314 	add.w	r3, r7, #20
 8015722:	2200      	movs	r2, #0
 8015724:	601a      	str	r2, [r3, #0]
 8015726:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015728:	7af9      	ldrb	r1, [r7, #11]
 801572a:	463b      	mov	r3, r7
 801572c:	cb0c      	ldmia	r3, {r2, r3}
 801572e:	68f8      	ldr	r0, [r7, #12]
 8015730:	f7ff ffa6 	bl	8015680 <GetDutyCycle>
 8015734:	4603      	mov	r3, r0
 8015736:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8015738:	7afb      	ldrb	r3, [r7, #11]
 801573a:	f083 0301 	eor.w	r3, r3, #1
 801573e:	b2db      	uxtb	r3, r3
 8015740:	2b00      	cmp	r3, #0
 8015742:	d062      	beq.n	801580a <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015744:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015746:	2b64      	cmp	r3, #100	; 0x64
 8015748:	d105      	bne.n	8015756 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801574a:	4b3c      	ldr	r3, [pc, #240]	; (801583c <SetMaxTimeCredits+0x148>)
 801574c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015752:	609a      	str	r2, [r3, #8]
 8015754:	e00b      	b.n	801576e <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015756:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801575c:	d105      	bne.n	801576a <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801575e:	4b38      	ldr	r3, [pc, #224]	; (8015840 <SetMaxTimeCredits+0x14c>)
 8015760:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015766:	609a      	str	r2, [r3, #8]
 8015768:	e001      	b.n	801576e <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801576a:	4b36      	ldr	r3, [pc, #216]	; (8015844 <SetMaxTimeCredits+0x150>)
 801576c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	689a      	ldr	r2, [r3, #8]
 8015772:	f107 031c 	add.w	r3, r7, #28
 8015776:	4611      	mov	r1, r2
 8015778:	4618      	mov	r0, r3
 801577a:	f005 fd5d 	bl	801b238 <SysTimeFromMs>
 801577e:	f107 0014 	add.w	r0, r7, #20
 8015782:	6a3b      	ldr	r3, [r7, #32]
 8015784:	9300      	str	r3, [sp, #0]
 8015786:	69fb      	ldr	r3, [r7, #28]
 8015788:	463a      	mov	r2, r7
 801578a:	ca06      	ldmia	r2, {r1, r2}
 801578c:	f005 fc6d 	bl	801b06a <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015790:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015794:	f083 0301 	eor.w	r3, r3, #1
 8015798:	b2db      	uxtb	r3, r3
 801579a:	2b00      	cmp	r3, #0
 801579c:	d006      	beq.n	80157ac <SetMaxTimeCredits+0xb8>
 801579e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80157a2:	f083 0301 	eor.w	r3, r3, #1
 80157a6:	b2db      	uxtb	r3, r3
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d108      	bne.n	80157be <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80157b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157b2:	429a      	cmp	r2, r3
 80157b4:	d103      	bne.n	80157be <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80157b6:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80157b8:	4a23      	ldr	r2, [pc, #140]	; (8015848 <SetMaxTimeCredits+0x154>)
 80157ba:	4293      	cmp	r3, r2
 80157bc:	d92f      	bls.n	801581e <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157c2:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80157c4:	683b      	ldr	r3, [r7, #0]
 80157c6:	4a21      	ldr	r2, [pc, #132]	; (801584c <SetMaxTimeCredits+0x158>)
 80157c8:	4293      	cmp	r3, r2
 80157ca:	d928      	bls.n	801581e <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80157cc:	683b      	ldr	r3, [r7, #0]
 80157ce:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80157d2:	3b30      	subs	r3, #48	; 0x30
 80157d4:	4a1e      	ldr	r2, [pc, #120]	; (8015850 <SetMaxTimeCredits+0x15c>)
 80157d6:	fba2 2303 	umull	r2, r3, r2, r3
 80157da:	0c1b      	lsrs	r3, r3, #16
 80157dc:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80157de:	697b      	ldr	r3, [r7, #20]
 80157e0:	4a1c      	ldr	r2, [pc, #112]	; (8015854 <SetMaxTimeCredits+0x160>)
 80157e2:	fb02 f303 	mul.w	r3, r2, r3
 80157e6:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80157e8:	697b      	ldr	r3, [r7, #20]
 80157ea:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80157ee:	3330      	adds	r3, #48	; 0x30
 80157f0:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80157f2:	2300      	movs	r3, #0
 80157f4:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80157f6:	f107 0314 	add.w	r3, r7, #20
 80157fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80157fe:	f005 fcf3 	bl	801b1e8 <SysTimeToMs>
 8015802:	4602      	mov	r2, r0
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	609a      	str	r2, [r3, #8]
 8015808:	e009      	b.n	801581e <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 801580a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801580e:	f083 0301 	eor.w	r3, r3, #1
 8015812:	b2db      	uxtb	r3, r3
 8015814:	2b00      	cmp	r3, #0
 8015816:	d002      	beq.n	801581e <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801581c:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	685b      	ldr	r3, [r3, #4]
 8015822:	2b00      	cmp	r3, #0
 8015824:	d102      	bne.n	801582c <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801582a:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015830:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8015832:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8015834:	4618      	mov	r0, r3
 8015836:	3730      	adds	r7, #48	; 0x30
 8015838:	46bd      	mov	sp, r7
 801583a:	bd80      	pop	{r7, pc}
 801583c:	001b7740 	.word	0x001b7740
 8015840:	0112a880 	.word	0x0112a880
 8015844:	02932e00 	.word	0x02932e00
 8015848:	0001517f 	.word	0x0001517f
 801584c:	0001ec2f 	.word	0x0001ec2f
 8015850:	c22e4507 	.word	0xc22e4507
 8015854:	00015180 	.word	0x00015180

08015858 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b086      	sub	sp, #24
 801585c:	af02      	add	r7, sp, #8
 801585e:	6078      	str	r0, [r7, #4]
 8015860:	4608      	mov	r0, r1
 8015862:	4611      	mov	r1, r2
 8015864:	461a      	mov	r2, r3
 8015866:	4603      	mov	r3, r0
 8015868:	70fb      	strb	r3, [r7, #3]
 801586a:	460b      	mov	r3, r1
 801586c:	70bb      	strb	r3, [r7, #2]
 801586e:	4613      	mov	r3, r2
 8015870:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8015872:	78f9      	ldrb	r1, [r7, #3]
 8015874:	787b      	ldrb	r3, [r7, #1]
 8015876:	9301      	str	r3, [sp, #4]
 8015878:	78bb      	ldrb	r3, [r7, #2]
 801587a:	9300      	str	r3, [sp, #0]
 801587c:	f107 0318 	add.w	r3, r7, #24
 8015880:	cb0c      	ldmia	r3, {r2, r3}
 8015882:	6878      	ldr	r0, [r7, #4]
 8015884:	f7ff ff36 	bl	80156f4 <SetMaxTimeCredits>
 8015888:	4603      	mov	r3, r0
 801588a:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 801588c:	78fb      	ldrb	r3, [r7, #3]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d00a      	beq.n	80158a8 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	685b      	ldr	r3, [r3, #4]
 8015896:	4618      	mov	r0, r3
 8015898:	f006 fae6 	bl	801be68 <UTIL_TIMER_GetElapsedTime>
 801589c:	4602      	mov	r2, r0
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	68db      	ldr	r3, [r3, #12]
 80158a2:	441a      	add	r2, r3
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	68da      	ldr	r2, [r3, #12]
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	691b      	ldr	r3, [r3, #16]
 80158b0:	429a      	cmp	r2, r3
 80158b2:	d903      	bls.n	80158bc <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	691a      	ldr	r2, [r3, #16]
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	6a3a      	ldr	r2, [r7, #32]
 80158c0:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80158c2:	89fb      	ldrh	r3, [r7, #14]
}
 80158c4:	4618      	mov	r0, r3
 80158c6:	3710      	adds	r7, #16
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}

080158cc <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80158cc:	b480      	push	{r7}
 80158ce:	b085      	sub	sp, #20
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	4603      	mov	r3, r0
 80158d4:	460a      	mov	r2, r1
 80158d6:	80fb      	strh	r3, [r7, #6]
 80158d8:	4613      	mov	r3, r2
 80158da:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80158dc:	2300      	movs	r3, #0
 80158de:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80158e0:	2300      	movs	r3, #0
 80158e2:	73bb      	strb	r3, [r7, #14]
 80158e4:	e011      	b.n	801590a <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80158e6:	88fa      	ldrh	r2, [r7, #6]
 80158e8:	7bbb      	ldrb	r3, [r7, #14]
 80158ea:	2101      	movs	r1, #1
 80158ec:	fa01 f303 	lsl.w	r3, r1, r3
 80158f0:	401a      	ands	r2, r3
 80158f2:	7bbb      	ldrb	r3, [r7, #14]
 80158f4:	2101      	movs	r1, #1
 80158f6:	fa01 f303 	lsl.w	r3, r1, r3
 80158fa:	429a      	cmp	r2, r3
 80158fc:	d102      	bne.n	8015904 <CountChannels+0x38>
        {
            nbActiveBits++;
 80158fe:	7bfb      	ldrb	r3, [r7, #15]
 8015900:	3301      	adds	r3, #1
 8015902:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8015904:	7bbb      	ldrb	r3, [r7, #14]
 8015906:	3301      	adds	r3, #1
 8015908:	73bb      	strb	r3, [r7, #14]
 801590a:	7bba      	ldrb	r2, [r7, #14]
 801590c:	797b      	ldrb	r3, [r7, #5]
 801590e:	429a      	cmp	r2, r3
 8015910:	d3e9      	bcc.n	80158e6 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8015912:	7bfb      	ldrb	r3, [r7, #15]
}
 8015914:	4618      	mov	r0, r3
 8015916:	3714      	adds	r7, #20
 8015918:	46bd      	mov	sp, r7
 801591a:	bc80      	pop	{r7}
 801591c:	4770      	bx	lr

0801591e <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801591e:	b580      	push	{r7, lr}
 8015920:	b084      	sub	sp, #16
 8015922:	af00      	add	r7, sp, #0
 8015924:	6039      	str	r1, [r7, #0]
 8015926:	4611      	mov	r1, r2
 8015928:	461a      	mov	r2, r3
 801592a:	4603      	mov	r3, r0
 801592c:	71fb      	strb	r3, [r7, #7]
 801592e:	460b      	mov	r3, r1
 8015930:	71bb      	strb	r3, [r7, #6]
 8015932:	4613      	mov	r3, r2
 8015934:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8015936:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801593a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801593e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015942:	4618      	mov	r0, r3
 8015944:	f000 f85d 	bl	8015a02 <RegionCommonValueInRange>
 8015948:	4603      	mov	r3, r0
 801594a:	2b00      	cmp	r3, #0
 801594c:	d101      	bne.n	8015952 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801594e:	2300      	movs	r3, #0
 8015950:	e053      	b.n	80159fa <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015952:	2300      	movs	r3, #0
 8015954:	73fb      	strb	r3, [r7, #15]
 8015956:	2300      	movs	r3, #0
 8015958:	73bb      	strb	r3, [r7, #14]
 801595a:	e049      	b.n	80159f0 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801595c:	2300      	movs	r3, #0
 801595e:	737b      	strb	r3, [r7, #13]
 8015960:	e03d      	b.n	80159de <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8015962:	7bbb      	ldrb	r3, [r7, #14]
 8015964:	005b      	lsls	r3, r3, #1
 8015966:	683a      	ldr	r2, [r7, #0]
 8015968:	4413      	add	r3, r2
 801596a:	881b      	ldrh	r3, [r3, #0]
 801596c:	461a      	mov	r2, r3
 801596e:	7b7b      	ldrb	r3, [r7, #13]
 8015970:	fa42 f303 	asr.w	r3, r2, r3
 8015974:	f003 0301 	and.w	r3, r3, #1
 8015978:	2b00      	cmp	r3, #0
 801597a:	d02d      	beq.n	80159d8 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801597c:	7bfa      	ldrb	r2, [r7, #15]
 801597e:	7b7b      	ldrb	r3, [r7, #13]
 8015980:	4413      	add	r3, r2
 8015982:	461a      	mov	r2, r3
 8015984:	4613      	mov	r3, r2
 8015986:	005b      	lsls	r3, r3, #1
 8015988:	4413      	add	r3, r2
 801598a:	009b      	lsls	r3, r3, #2
 801598c:	461a      	mov	r2, r3
 801598e:	69fb      	ldr	r3, [r7, #28]
 8015990:	4413      	add	r3, r2
 8015992:	7a1b      	ldrb	r3, [r3, #8]
 8015994:	f343 0303 	sbfx	r3, r3, #0, #4
 8015998:	b25b      	sxtb	r3, r3
 801599a:	f003 030f 	and.w	r3, r3, #15
 801599e:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80159a0:	7bfa      	ldrb	r2, [r7, #15]
 80159a2:	7b7b      	ldrb	r3, [r7, #13]
 80159a4:	4413      	add	r3, r2
 80159a6:	461a      	mov	r2, r3
 80159a8:	4613      	mov	r3, r2
 80159aa:	005b      	lsls	r3, r3, #1
 80159ac:	4413      	add	r3, r2
 80159ae:	009b      	lsls	r3, r3, #2
 80159b0:	461a      	mov	r2, r3
 80159b2:	69fb      	ldr	r3, [r7, #28]
 80159b4:	4413      	add	r3, r2
 80159b6:	7a1b      	ldrb	r3, [r3, #8]
 80159b8:	f343 1303 	sbfx	r3, r3, #4, #4
 80159bc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80159be:	f003 030f 	and.w	r3, r3, #15
 80159c2:	b25a      	sxtb	r2, r3
 80159c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80159c8:	4618      	mov	r0, r3
 80159ca:	f000 f81a 	bl	8015a02 <RegionCommonValueInRange>
 80159ce:	4603      	mov	r3, r0
 80159d0:	2b01      	cmp	r3, #1
 80159d2:	d101      	bne.n	80159d8 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80159d4:	2301      	movs	r3, #1
 80159d6:	e010      	b.n	80159fa <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80159d8:	7b7b      	ldrb	r3, [r7, #13]
 80159da:	3301      	adds	r3, #1
 80159dc:	737b      	strb	r3, [r7, #13]
 80159de:	7b7b      	ldrb	r3, [r7, #13]
 80159e0:	2b0f      	cmp	r3, #15
 80159e2:	d9be      	bls.n	8015962 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80159e4:	7bfb      	ldrb	r3, [r7, #15]
 80159e6:	3310      	adds	r3, #16
 80159e8:	73fb      	strb	r3, [r7, #15]
 80159ea:	7bbb      	ldrb	r3, [r7, #14]
 80159ec:	3301      	adds	r3, #1
 80159ee:	73bb      	strb	r3, [r7, #14]
 80159f0:	7bfa      	ldrb	r2, [r7, #15]
 80159f2:	79fb      	ldrb	r3, [r7, #7]
 80159f4:	429a      	cmp	r2, r3
 80159f6:	d3b1      	bcc.n	801595c <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80159f8:	2300      	movs	r3, #0
}
 80159fa:	4618      	mov	r0, r3
 80159fc:	3710      	adds	r7, #16
 80159fe:	46bd      	mov	sp, r7
 8015a00:	bd80      	pop	{r7, pc}

08015a02 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8015a02:	b480      	push	{r7}
 8015a04:	b083      	sub	sp, #12
 8015a06:	af00      	add	r7, sp, #0
 8015a08:	4603      	mov	r3, r0
 8015a0a:	71fb      	strb	r3, [r7, #7]
 8015a0c:	460b      	mov	r3, r1
 8015a0e:	71bb      	strb	r3, [r7, #6]
 8015a10:	4613      	mov	r3, r2
 8015a12:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8015a14:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015a18:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015a1c:	429a      	cmp	r2, r3
 8015a1e:	db07      	blt.n	8015a30 <RegionCommonValueInRange+0x2e>
 8015a20:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015a24:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	dc01      	bgt.n	8015a30 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	e000      	b.n	8015a32 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8015a30:	2300      	movs	r3, #0
}
 8015a32:	4618      	mov	r0, r3
 8015a34:	370c      	adds	r7, #12
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bc80      	pop	{r7}
 8015a3a:	4770      	bx	lr

08015a3c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015a3c:	b480      	push	{r7}
 8015a3e:	b085      	sub	sp, #20
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
 8015a44:	460b      	mov	r3, r1
 8015a46:	70fb      	strb	r3, [r7, #3]
 8015a48:	4613      	mov	r3, r2
 8015a4a:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8015a4c:	78fb      	ldrb	r3, [r7, #3]
 8015a4e:	091b      	lsrs	r3, r3, #4
 8015a50:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8015a52:	78bb      	ldrb	r3, [r7, #2]
 8015a54:	091b      	lsrs	r3, r3, #4
 8015a56:	b2db      	uxtb	r3, r3
 8015a58:	7bfa      	ldrb	r2, [r7, #15]
 8015a5a:	429a      	cmp	r2, r3
 8015a5c:	d803      	bhi.n	8015a66 <RegionCommonChanDisable+0x2a>
 8015a5e:	78fa      	ldrb	r2, [r7, #3]
 8015a60:	78bb      	ldrb	r3, [r7, #2]
 8015a62:	429a      	cmp	r2, r3
 8015a64:	d301      	bcc.n	8015a6a <RegionCommonChanDisable+0x2e>
    {
        return false;
 8015a66:	2300      	movs	r3, #0
 8015a68:	e017      	b.n	8015a9a <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8015a6a:	7bfb      	ldrb	r3, [r7, #15]
 8015a6c:	005b      	lsls	r3, r3, #1
 8015a6e:	687a      	ldr	r2, [r7, #4]
 8015a70:	4413      	add	r3, r2
 8015a72:	881b      	ldrh	r3, [r3, #0]
 8015a74:	b21a      	sxth	r2, r3
 8015a76:	78fb      	ldrb	r3, [r7, #3]
 8015a78:	f003 030f 	and.w	r3, r3, #15
 8015a7c:	2101      	movs	r1, #1
 8015a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8015a82:	b21b      	sxth	r3, r3
 8015a84:	43db      	mvns	r3, r3
 8015a86:	b21b      	sxth	r3, r3
 8015a88:	4013      	ands	r3, r2
 8015a8a:	b219      	sxth	r1, r3
 8015a8c:	7bfb      	ldrb	r3, [r7, #15]
 8015a8e:	005b      	lsls	r3, r3, #1
 8015a90:	687a      	ldr	r2, [r7, #4]
 8015a92:	4413      	add	r3, r2
 8015a94:	b28a      	uxth	r2, r1
 8015a96:	801a      	strh	r2, [r3, #0]

    return true;
 8015a98:	2301      	movs	r3, #1
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	3714      	adds	r7, #20
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bc80      	pop	{r7}
 8015aa2:	4770      	bx	lr

08015aa4 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b084      	sub	sp, #16
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
 8015aac:	460b      	mov	r3, r1
 8015aae:	70fb      	strb	r3, [r7, #3]
 8015ab0:	4613      	mov	r3, r2
 8015ab2:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d101      	bne.n	8015ac2 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8015abe:	2300      	movs	r3, #0
 8015ac0:	e018      	b.n	8015af4 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015ac2:	78fb      	ldrb	r3, [r7, #3]
 8015ac4:	73bb      	strb	r3, [r7, #14]
 8015ac6:	e010      	b.n	8015aea <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015ac8:	7bbb      	ldrb	r3, [r7, #14]
 8015aca:	005b      	lsls	r3, r3, #1
 8015acc:	687a      	ldr	r2, [r7, #4]
 8015ace:	4413      	add	r3, r2
 8015ad0:	881b      	ldrh	r3, [r3, #0]
 8015ad2:	2110      	movs	r1, #16
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f7ff fef9 	bl	80158cc <CountChannels>
 8015ada:	4603      	mov	r3, r0
 8015adc:	461a      	mov	r2, r3
 8015ade:	7bfb      	ldrb	r3, [r7, #15]
 8015ae0:	4413      	add	r3, r2
 8015ae2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015ae4:	7bbb      	ldrb	r3, [r7, #14]
 8015ae6:	3301      	adds	r3, #1
 8015ae8:	73bb      	strb	r3, [r7, #14]
 8015aea:	7bba      	ldrb	r2, [r7, #14]
 8015aec:	78bb      	ldrb	r3, [r7, #2]
 8015aee:	429a      	cmp	r2, r3
 8015af0:	d3ea      	bcc.n	8015ac8 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8015af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015af4:	4618      	mov	r0, r3
 8015af6:	3710      	adds	r7, #16
 8015af8:	46bd      	mov	sp, r7
 8015afa:	bd80      	pop	{r7, pc}

08015afc <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8015afc:	b480      	push	{r7}
 8015afe:	b087      	sub	sp, #28
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	60f8      	str	r0, [r7, #12]
 8015b04:	60b9      	str	r1, [r7, #8]
 8015b06:	4613      	mov	r3, r2
 8015b08:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d016      	beq.n	8015b3e <RegionCommonChanMaskCopy+0x42>
 8015b10:	68bb      	ldr	r3, [r7, #8]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d013      	beq.n	8015b3e <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8015b16:	2300      	movs	r3, #0
 8015b18:	75fb      	strb	r3, [r7, #23]
 8015b1a:	e00c      	b.n	8015b36 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015b1c:	7dfb      	ldrb	r3, [r7, #23]
 8015b1e:	005b      	lsls	r3, r3, #1
 8015b20:	68ba      	ldr	r2, [r7, #8]
 8015b22:	441a      	add	r2, r3
 8015b24:	7dfb      	ldrb	r3, [r7, #23]
 8015b26:	005b      	lsls	r3, r3, #1
 8015b28:	68f9      	ldr	r1, [r7, #12]
 8015b2a:	440b      	add	r3, r1
 8015b2c:	8812      	ldrh	r2, [r2, #0]
 8015b2e:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015b30:	7dfb      	ldrb	r3, [r7, #23]
 8015b32:	3301      	adds	r3, #1
 8015b34:	75fb      	strb	r3, [r7, #23]
 8015b36:	7dfa      	ldrb	r2, [r7, #23]
 8015b38:	79fb      	ldrb	r3, [r7, #7]
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	d3ee      	bcc.n	8015b1c <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8015b3e:	bf00      	nop
 8015b40:	371c      	adds	r7, #28
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bc80      	pop	{r7}
 8015b46:	4770      	bx	lr

08015b48 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015b48:	b082      	sub	sp, #8
 8015b4a:	b580      	push	{r7, lr}
 8015b4c:	b086      	sub	sp, #24
 8015b4e:	af00      	add	r7, sp, #0
 8015b50:	60f8      	str	r0, [r7, #12]
 8015b52:	60b9      	str	r1, [r7, #8]
 8015b54:	627b      	str	r3, [r7, #36]	; 0x24
 8015b56:	4613      	mov	r3, r2
 8015b58:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015b5a:	79f9      	ldrb	r1, [r7, #7]
 8015b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015b60:	cb0c      	ldmia	r3, {r2, r3}
 8015b62:	68f8      	ldr	r0, [r7, #12]
 8015b64:	f7ff fd8c 	bl	8015680 <GetDutyCycle>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	68da      	ldr	r2, [r3, #12]
 8015b70:	8afb      	ldrh	r3, [r7, #22]
 8015b72:	68b9      	ldr	r1, [r7, #8]
 8015b74:	fb01 f303 	mul.w	r3, r1, r3
 8015b78:	429a      	cmp	r2, r3
 8015b7a:	d909      	bls.n	8015b90 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	68da      	ldr	r2, [r3, #12]
 8015b80:	8afb      	ldrh	r3, [r7, #22]
 8015b82:	68b9      	ldr	r1, [r7, #8]
 8015b84:	fb01 f303 	mul.w	r3, r1, r3
 8015b88:	1ad2      	subs	r2, r2, r3
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8015b8e:	e002      	b.n	8015b96 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	2200      	movs	r2, #0
 8015b94:	60da      	str	r2, [r3, #12]
}
 8015b96:	bf00      	nop
 8015b98:	3718      	adds	r7, #24
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015ba0:	b002      	add	sp, #8
 8015ba2:	4770      	bx	lr

08015ba4 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8015ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ba6:	b08f      	sub	sp, #60	; 0x3c
 8015ba8:	af04      	add	r7, sp, #16
 8015baa:	6039      	str	r1, [r7, #0]
 8015bac:	4611      	mov	r1, r2
 8015bae:	461a      	mov	r2, r3
 8015bb0:	4603      	mov	r3, r0
 8015bb2:	71fb      	strb	r3, [r7, #7]
 8015bb4:	460b      	mov	r3, r1
 8015bb6:	71bb      	strb	r3, [r7, #6]
 8015bb8:	4613      	mov	r3, r2
 8015bba:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8015bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8015bc0:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8015bc2:	f006 f93f 	bl	801be44 <UTIL_TIMER_GetCurrentTime>
 8015bc6:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8015bc8:	2300      	movs	r3, #0
 8015bca:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8015bcc:	2301      	movs	r3, #1
 8015bce:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015bdc:	e0ba      	b.n	8015d54 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8015bde:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015be2:	4613      	mov	r3, r2
 8015be4:	005b      	lsls	r3, r3, #1
 8015be6:	4413      	add	r3, r2
 8015be8:	00db      	lsls	r3, r3, #3
 8015bea:	461a      	mov	r2, r3
 8015bec:	683b      	ldr	r3, [r7, #0]
 8015bee:	189c      	adds	r4, r3, r2
 8015bf0:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8015bf4:	797a      	ldrb	r2, [r7, #5]
 8015bf6:	79fd      	ldrb	r5, [r7, #7]
 8015bf8:	69fb      	ldr	r3, [r7, #28]
 8015bfa:	9302      	str	r3, [sp, #8]
 8015bfc:	46ec      	mov	ip, sp
 8015bfe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015c02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015c06:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015c0a:	4633      	mov	r3, r6
 8015c0c:	4629      	mov	r1, r5
 8015c0e:	4620      	mov	r0, r4
 8015c10:	f7ff fe22 	bl	8015858 <UpdateTimeCredits>
 8015c14:	4603      	mov	r3, r0
 8015c16:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8015c18:	8afa      	ldrh	r2, [r7, #22]
 8015c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c1c:	fb02 f303 	mul.w	r3, r2, r3
 8015c20:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015c22:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015c26:	4613      	mov	r3, r2
 8015c28:	005b      	lsls	r3, r3, #1
 8015c2a:	4413      	add	r3, r2
 8015c2c:	00db      	lsls	r3, r3, #3
 8015c2e:	461a      	mov	r2, r3
 8015c30:	683b      	ldr	r3, [r7, #0]
 8015c32:	4413      	add	r3, r2
 8015c34:	68db      	ldr	r3, [r3, #12]
 8015c36:	69ba      	ldr	r2, [r7, #24]
 8015c38:	429a      	cmp	r2, r3
 8015c3a:	d308      	bcc.n	8015c4e <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015c3c:	797b      	ldrb	r3, [r7, #5]
 8015c3e:	f083 0301 	eor.w	r3, r3, #1
 8015c42:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d013      	beq.n	8015c70 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015c48:	79fb      	ldrb	r3, [r7, #7]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d010      	beq.n	8015c70 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8015c4e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015c52:	4613      	mov	r3, r2
 8015c54:	005b      	lsls	r3, r3, #1
 8015c56:	4413      	add	r3, r2
 8015c58:	00db      	lsls	r3, r3, #3
 8015c5a:	461a      	mov	r2, r3
 8015c5c:	683b      	ldr	r3, [r7, #0]
 8015c5e:	4413      	add	r3, r2
 8015c60:	2201      	movs	r2, #1
 8015c62:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8015c64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015c68:	3301      	adds	r3, #1
 8015c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015c6e:	e06c      	b.n	8015d4a <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8015c70:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015c74:	4613      	mov	r3, r2
 8015c76:	005b      	lsls	r3, r3, #1
 8015c78:	4413      	add	r3, r2
 8015c7a:	00db      	lsls	r3, r3, #3
 8015c7c:	461a      	mov	r2, r3
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	4413      	add	r3, r2
 8015c82:	2200      	movs	r2, #0
 8015c84:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8015c86:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015c8a:	4613      	mov	r3, r2
 8015c8c:	005b      	lsls	r3, r3, #1
 8015c8e:	4413      	add	r3, r2
 8015c90:	00db      	lsls	r3, r3, #3
 8015c92:	461a      	mov	r2, r3
 8015c94:	683b      	ldr	r3, [r7, #0]
 8015c96:	4413      	add	r3, r2
 8015c98:	691b      	ldr	r3, [r3, #16]
 8015c9a:	69ba      	ldr	r2, [r7, #24]
 8015c9c:	429a      	cmp	r2, r3
 8015c9e:	d215      	bcs.n	8015ccc <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8015ca0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015ca4:	4613      	mov	r3, r2
 8015ca6:	005b      	lsls	r3, r3, #1
 8015ca8:	4413      	add	r3, r2
 8015caa:	00db      	lsls	r3, r3, #3
 8015cac:	461a      	mov	r2, r3
 8015cae:	683b      	ldr	r3, [r7, #0]
 8015cb0:	4413      	add	r3, r2
 8015cb2:	68db      	ldr	r3, [r3, #12]
 8015cb4:	69ba      	ldr	r2, [r7, #24]
 8015cb6:	1ad3      	subs	r3, r2, r3
 8015cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015cba:	4293      	cmp	r3, r2
 8015cbc:	bf28      	it	cs
 8015cbe:	4613      	movcs	r3, r2
 8015cc0:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8015cc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015cc6:	3301      	adds	r3, #1
 8015cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8015ccc:	79fb      	ldrb	r3, [r7, #7]
 8015cce:	f083 0301 	eor.w	r3, r3, #1
 8015cd2:	b2db      	uxtb	r3, r3
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d038      	beq.n	8015d4a <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8015cd8:	2300      	movs	r3, #0
 8015cda:	60fb      	str	r3, [r7, #12]
 8015cdc:	2300      	movs	r3, #0
 8015cde:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015ce0:	8afb      	ldrh	r3, [r7, #22]
 8015ce2:	2b64      	cmp	r3, #100	; 0x64
 8015ce4:	d103      	bne.n	8015cee <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8015ce6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8015cea:	60fb      	str	r3, [r7, #12]
 8015cec:	e009      	b.n	8015d02 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015cee:	8afb      	ldrh	r3, [r7, #22]
 8015cf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015cf4:	d103      	bne.n	8015cfe <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8015cf6:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8015cfa:	60fb      	str	r3, [r7, #12]
 8015cfc:	e001      	b.n	8015d02 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015cfe:	4b1e      	ldr	r3, [pc, #120]	; (8015d78 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015d00:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d04:	4a1c      	ldr	r2, [pc, #112]	; (8015d78 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015d06:	4293      	cmp	r3, r2
 8015d08:	d90e      	bls.n	8015d28 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8015d0a:	68fa      	ldr	r2, [r7, #12]
 8015d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d0e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8015d12:	3b30      	subs	r3, #48	; 0x30
 8015d14:	4919      	ldr	r1, [pc, #100]	; (8015d7c <RegionCommonUpdateBandTimeOff+0x1d8>)
 8015d16:	fba1 1303 	umull	r1, r3, r1, r3
 8015d1a:	0c1b      	lsrs	r3, r3, #16
 8015d1c:	3301      	adds	r3, #1
 8015d1e:	4918      	ldr	r1, [pc, #96]	; (8015d80 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8015d20:	fb01 f303 	mul.w	r3, r1, r3
 8015d24:	4413      	add	r3, r2
 8015d26:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8015d28:	f107 000c 	add.w	r0, r7, #12
 8015d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d2e:	9300      	str	r3, [sp, #0]
 8015d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d32:	f107 020c 	add.w	r2, r7, #12
 8015d36:	ca06      	ldmia	r2, {r1, r2}
 8015d38:	f005 f997 	bl	801b06a <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8015d3c:	f107 030c 	add.w	r3, r7, #12
 8015d40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015d44:	f005 fa50 	bl	801b1e8 <SysTimeToMs>
 8015d48:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8015d4a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015d4e:	3301      	adds	r3, #1
 8015d50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015d54:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015d58:	79bb      	ldrb	r3, [r7, #6]
 8015d5a:	429a      	cmp	r2, r3
 8015d5c:	f4ff af3f 	bcc.w	8015bde <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8015d60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d102      	bne.n	8015d6e <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8015d68:	f04f 33ff 	mov.w	r3, #4294967295
 8015d6c:	e000      	b.n	8015d70 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8015d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015d70:	4618      	mov	r0, r3
 8015d72:	372c      	adds	r7, #44	; 0x2c
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d78:	0001ec30 	.word	0x0001ec30
 8015d7c:	c22e4507 	.word	0xc22e4507
 8015d80:	00015180 	.word	0x00015180

08015d84 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8015d84:	b480      	push	{r7}
 8015d86:	b085      	sub	sp, #20
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	6078      	str	r0, [r7, #4]
 8015d8c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8015d8e:	2300      	movs	r3, #0
 8015d90:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	781b      	ldrb	r3, [r3, #0]
 8015d96:	2b03      	cmp	r3, #3
 8015d98:	d13f      	bne.n	8015e1a <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	3301      	adds	r3, #1
 8015d9e:	781b      	ldrb	r3, [r3, #0]
 8015da0:	b25a      	sxtb	r2, r3
 8015da2:	683b      	ldr	r3, [r7, #0]
 8015da4:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8015da6:	683b      	ldr	r3, [r7, #0]
 8015da8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015dac:	f003 030f 	and.w	r3, r3, #15
 8015db0:	b25a      	sxtb	r2, r3
 8015db2:	683b      	ldr	r3, [r7, #0]
 8015db4:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8015db6:	683b      	ldr	r3, [r7, #0]
 8015db8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015dbc:	b2db      	uxtb	r3, r3
 8015dbe:	091b      	lsrs	r3, r3, #4
 8015dc0:	b2db      	uxtb	r3, r3
 8015dc2:	b25a      	sxtb	r2, r3
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	3302      	adds	r3, #2
 8015dcc:	781b      	ldrb	r3, [r3, #0]
 8015dce:	b29a      	uxth	r2, r3
 8015dd0:	683b      	ldr	r3, [r7, #0]
 8015dd2:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8015dd4:	683b      	ldr	r3, [r7, #0]
 8015dd6:	889b      	ldrh	r3, [r3, #4]
 8015dd8:	b21a      	sxth	r2, r3
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	3303      	adds	r3, #3
 8015dde:	781b      	ldrb	r3, [r3, #0]
 8015de0:	021b      	lsls	r3, r3, #8
 8015de2:	b21b      	sxth	r3, r3
 8015de4:	4313      	orrs	r3, r2
 8015de6:	b21b      	sxth	r3, r3
 8015de8:	b29a      	uxth	r2, r3
 8015dea:	683b      	ldr	r3, [r7, #0]
 8015dec:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	791a      	ldrb	r2, [r3, #4]
 8015df2:	683b      	ldr	r3, [r7, #0]
 8015df4:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8015df6:	683b      	ldr	r3, [r7, #0]
 8015df8:	781b      	ldrb	r3, [r3, #0]
 8015dfa:	091b      	lsrs	r3, r3, #4
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	f003 0307 	and.w	r3, r3, #7
 8015e02:	b2da      	uxtb	r2, r3
 8015e04:	683b      	ldr	r3, [r7, #0]
 8015e06:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	781b      	ldrb	r3, [r3, #0]
 8015e0c:	f003 030f 	and.w	r3, r3, #15
 8015e10:	b2da      	uxtb	r2, r3
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8015e16:	2305      	movs	r3, #5
 8015e18:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8015e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	3714      	adds	r7, #20
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bc80      	pop	{r7}
 8015e24:	4770      	bx	lr

08015e26 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8015e26:	b5b0      	push	{r4, r5, r7, lr}
 8015e28:	b088      	sub	sp, #32
 8015e2a:	af02      	add	r7, sp, #8
 8015e2c:	60f8      	str	r0, [r7, #12]
 8015e2e:	60b9      	str	r1, [r7, #8]
 8015e30:	607a      	str	r2, [r7, #4]
 8015e32:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	791b      	ldrb	r3, [r3, #4]
 8015e38:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	799b      	ldrb	r3, [r3, #6]
 8015e3e:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	79db      	ldrb	r3, [r3, #7]
 8015e44:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	7a1b      	ldrb	r3, [r3, #8]
 8015e4a:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	795b      	ldrb	r3, [r3, #5]
 8015e50:	f083 0301 	eor.w	r3, r3, #1
 8015e54:	b2db      	uxtb	r3, r3
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d008      	beq.n	8015e6c <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	7adb      	ldrb	r3, [r3, #11]
 8015e5e:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	7a5b      	ldrb	r3, [r3, #9]
 8015e64:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	7a9b      	ldrb	r3, [r3, #10]
 8015e6a:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8015e6c:	7dfb      	ldrb	r3, [r7, #23]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d04a      	beq.n	8015f08 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8015e72:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8015e76:	2b0f      	cmp	r3, #15
 8015e78:	d103      	bne.n	8015e82 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	7a5b      	ldrb	r3, [r3, #9]
 8015e7e:	75bb      	strb	r3, [r7, #22]
 8015e80:	e01d      	b.n	8015ebe <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	7b18      	ldrb	r0, [r3, #12]
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	6919      	ldr	r1, [r3, #16]
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8015e96:	68fa      	ldr	r2, [r7, #12]
 8015e98:	6992      	ldr	r2, [r2, #24]
 8015e9a:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8015e9e:	9201      	str	r2, [sp, #4]
 8015ea0:	9300      	str	r3, [sp, #0]
 8015ea2:	462b      	mov	r3, r5
 8015ea4:	4622      	mov	r2, r4
 8015ea6:	f7ff fd3a 	bl	801591e <RegionCommonChanVerifyDr>
 8015eaa:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8015eac:	f083 0301 	eor.w	r3, r3, #1
 8015eb0:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d003      	beq.n	8015ebe <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8015eb6:	7dfb      	ldrb	r3, [r7, #23]
 8015eb8:	f023 0302 	bic.w	r3, r3, #2
 8015ebc:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8015ebe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8015ec2:	2b0f      	cmp	r3, #15
 8015ec4:	d103      	bne.n	8015ece <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	7a9b      	ldrb	r3, [r3, #10]
 8015eca:	757b      	strb	r3, [r7, #21]
 8015ecc:	e01c      	b.n	8015f08 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8015eda:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f7ff fd8f 	bl	8015a02 <RegionCommonValueInRange>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d10e      	bne.n	8015f08 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8015ef0:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8015ef4:	429a      	cmp	r2, r3
 8015ef6:	da03      	bge.n	8015f00 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	7f5b      	ldrb	r3, [r3, #29]
 8015efc:	757b      	strb	r3, [r7, #21]
 8015efe:	e003      	b.n	8015f08 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8015f00:	7dfb      	ldrb	r3, [r7, #23]
 8015f02:	f023 0304 	bic.w	r3, r3, #4
 8015f06:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8015f08:	7dfb      	ldrb	r3, [r7, #23]
 8015f0a:	2b07      	cmp	r3, #7
 8015f0c:	d105      	bne.n	8015f1a <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8015f0e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d101      	bne.n	8015f1a <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8015f16:	2301      	movs	r3, #1
 8015f18:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8015f1a:	68bb      	ldr	r3, [r7, #8]
 8015f1c:	7dba      	ldrb	r2, [r7, #22]
 8015f1e:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	7d7a      	ldrb	r2, [r7, #21]
 8015f24:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8015f26:	7d3a      	ldrb	r2, [r7, #20]
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	701a      	strb	r2, [r3, #0]

    return status;
 8015f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f2e:	4618      	mov	r0, r3
 8015f30:	3718      	adds	r7, #24
 8015f32:	46bd      	mov	sp, r7
 8015f34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015f38 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8015f38:	b480      	push	{r7}
 8015f3a:	b083      	sub	sp, #12
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	4603      	mov	r3, r0
 8015f40:	6039      	str	r1, [r7, #0]
 8015f42:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8015f44:	79fb      	ldrb	r3, [r7, #7]
 8015f46:	4a06      	ldr	r2, [pc, #24]	; (8015f60 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8015f48:	fa02 f303 	lsl.w	r3, r2, r3
 8015f4c:	461a      	mov	r2, r3
 8015f4e:	683b      	ldr	r3, [r7, #0]
 8015f50:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8015f54:	4618      	mov	r0, r3
 8015f56:	370c      	adds	r7, #12
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	bc80      	pop	{r7}
 8015f5c:	4770      	bx	lr
 8015f5e:	bf00      	nop
 8015f60:	000f4240 	.word	0x000f4240

08015f64 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8015f64:	b480      	push	{r7}
 8015f66:	b083      	sub	sp, #12
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8015f6e:	79fb      	ldrb	r3, [r7, #7]
 8015f70:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8015f74:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8015f78:	4618      	mov	r0, r3
 8015f7a:	370c      	adds	r7, #12
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	bc80      	pop	{r7}
 8015f80:	4770      	bx	lr
	...

08015f84 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8015f84:	b480      	push	{r7}
 8015f86:	b085      	sub	sp, #20
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	60f8      	str	r0, [r7, #12]
 8015f8c:	607a      	str	r2, [r7, #4]
 8015f8e:	603b      	str	r3, [r7, #0]
 8015f90:	460b      	mov	r3, r1
 8015f92:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8015f94:	7afa      	ldrb	r2, [r7, #11]
 8015f96:	7afb      	ldrb	r3, [r7, #11]
 8015f98:	3b04      	subs	r3, #4
 8015f9a:	4619      	mov	r1, r3
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	fb03 f101 	mul.w	r1, r3, r1
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015fa8:	fb00 f303 	mul.w	r3, r0, r3
 8015fac:	440b      	add	r3, r1
 8015fae:	005b      	lsls	r3, r3, #1
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d013      	beq.n	8015fdc <RegionCommonComputeRxWindowParameters+0x58>
 8015fb4:	7afb      	ldrb	r3, [r7, #11]
 8015fb6:	3b04      	subs	r3, #4
 8015fb8:	4619      	mov	r1, r3
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	fb03 f101 	mul.w	r1, r3, r1
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015fc6:	fb00 f303 	mul.w	r3, r0, r3
 8015fca:	440b      	add	r3, r1
 8015fcc:	0059      	lsls	r1, r3, #1
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	440b      	add	r3, r1
 8015fd2:	1e59      	subs	r1, r3, #1
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8015fda:	e00f      	b.n	8015ffc <RegionCommonComputeRxWindowParameters+0x78>
 8015fdc:	7afb      	ldrb	r3, [r7, #11]
 8015fde:	3b04      	subs	r3, #4
 8015fe0:	4619      	mov	r1, r3
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	fb03 f101 	mul.w	r1, r3, r1
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015fee:	fb00 f303 	mul.w	r3, r0, r3
 8015ff2:	440b      	add	r3, r1
 8015ff4:	0059      	lsls	r1, r3, #1
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8015ffc:	429a      	cmp	r2, r3
 8015ffe:	bf38      	it	cc
 8016000:	461a      	movcc	r2, r3
 8016002:	69bb      	ldr	r3, [r7, #24]
 8016004:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	009b      	lsls	r3, r3, #2
 801600a:	4619      	mov	r1, r3
 801600c:	69bb      	ldr	r3, [r7, #24]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	68fa      	ldr	r2, [r7, #12]
 8016012:	fb02 f303 	mul.w	r3, r2, r3
 8016016:	2b00      	cmp	r3, #0
 8016018:	d007      	beq.n	801602a <RegionCommonComputeRxWindowParameters+0xa6>
 801601a:	69bb      	ldr	r3, [r7, #24]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	68fa      	ldr	r2, [r7, #12]
 8016020:	fb02 f303 	mul.w	r3, r2, r3
 8016024:	3301      	adds	r3, #1
 8016026:	085b      	lsrs	r3, r3, #1
 8016028:	e005      	b.n	8016036 <RegionCommonComputeRxWindowParameters+0xb2>
 801602a:	69bb      	ldr	r3, [r7, #24]
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	68fa      	ldr	r2, [r7, #12]
 8016030:	fb02 f303 	mul.w	r3, r2, r3
 8016034:	085b      	lsrs	r3, r3, #1
 8016036:	1acb      	subs	r3, r1, r3
 8016038:	683a      	ldr	r2, [r7, #0]
 801603a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801603e:	fb01 f202 	mul.w	r2, r1, r2
 8016042:	1a9b      	subs	r3, r3, r2
 8016044:	2b00      	cmp	r3, #0
 8016046:	dd27      	ble.n	8016098 <RegionCommonComputeRxWindowParameters+0x114>
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	009b      	lsls	r3, r3, #2
 801604c:	4619      	mov	r1, r3
 801604e:	69bb      	ldr	r3, [r7, #24]
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	68fa      	ldr	r2, [r7, #12]
 8016054:	fb02 f303 	mul.w	r3, r2, r3
 8016058:	2b00      	cmp	r3, #0
 801605a:	d007      	beq.n	801606c <RegionCommonComputeRxWindowParameters+0xe8>
 801605c:	69bb      	ldr	r3, [r7, #24]
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	68fa      	ldr	r2, [r7, #12]
 8016062:	fb02 f303 	mul.w	r3, r2, r3
 8016066:	3301      	adds	r3, #1
 8016068:	085b      	lsrs	r3, r3, #1
 801606a:	e005      	b.n	8016078 <RegionCommonComputeRxWindowParameters+0xf4>
 801606c:	69bb      	ldr	r3, [r7, #24]
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	68fa      	ldr	r2, [r7, #12]
 8016072:	fb02 f303 	mul.w	r3, r2, r3
 8016076:	085b      	lsrs	r3, r3, #1
 8016078:	1acb      	subs	r3, r1, r3
 801607a:	683a      	ldr	r2, [r7, #0]
 801607c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016080:	fb01 f202 	mul.w	r2, r1, r2
 8016084:	1a9b      	subs	r3, r3, r2
 8016086:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 801608a:	4a19      	ldr	r2, [pc, #100]	; (80160f0 <RegionCommonComputeRxWindowParameters+0x16c>)
 801608c:	fb82 1203 	smull	r1, r2, r2, r3
 8016090:	1192      	asrs	r2, r2, #6
 8016092:	17db      	asrs	r3, r3, #31
 8016094:	1ad3      	subs	r3, r2, r3
 8016096:	e024      	b.n	80160e2 <RegionCommonComputeRxWindowParameters+0x15e>
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	009b      	lsls	r3, r3, #2
 801609c:	4619      	mov	r1, r3
 801609e:	69bb      	ldr	r3, [r7, #24]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	68fa      	ldr	r2, [r7, #12]
 80160a4:	fb02 f303 	mul.w	r3, r2, r3
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d007      	beq.n	80160bc <RegionCommonComputeRxWindowParameters+0x138>
 80160ac:	69bb      	ldr	r3, [r7, #24]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	68fa      	ldr	r2, [r7, #12]
 80160b2:	fb02 f303 	mul.w	r3, r2, r3
 80160b6:	3301      	adds	r3, #1
 80160b8:	085b      	lsrs	r3, r3, #1
 80160ba:	e005      	b.n	80160c8 <RegionCommonComputeRxWindowParameters+0x144>
 80160bc:	69bb      	ldr	r3, [r7, #24]
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	68fa      	ldr	r2, [r7, #12]
 80160c2:	fb02 f303 	mul.w	r3, r2, r3
 80160c6:	085b      	lsrs	r3, r3, #1
 80160c8:	1acb      	subs	r3, r1, r3
 80160ca:	683a      	ldr	r2, [r7, #0]
 80160cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80160d0:	fb01 f202 	mul.w	r2, r1, r2
 80160d4:	1a9b      	subs	r3, r3, r2
 80160d6:	4a06      	ldr	r2, [pc, #24]	; (80160f0 <RegionCommonComputeRxWindowParameters+0x16c>)
 80160d8:	fb82 1203 	smull	r1, r2, r2, r3
 80160dc:	1192      	asrs	r2, r2, #6
 80160de:	17db      	asrs	r3, r3, #31
 80160e0:	1ad3      	subs	r3, r2, r3
 80160e2:	69fa      	ldr	r2, [r7, #28]
 80160e4:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80160e6:	bf00      	nop
 80160e8:	3714      	adds	r7, #20
 80160ea:	46bd      	mov	sp, r7
 80160ec:	bc80      	pop	{r7}
 80160ee:	4770      	bx	lr
 80160f0:	10624dd3 	.word	0x10624dd3

080160f4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	b086      	sub	sp, #24
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	4603      	mov	r3, r0
 80160fc:	60b9      	str	r1, [r7, #8]
 80160fe:	607a      	str	r2, [r7, #4]
 8016100:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016102:	2300      	movs	r3, #0
 8016104:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8016106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801610a:	005b      	lsls	r3, r3, #1
 801610c:	4618      	mov	r0, r3
 801610e:	f7ea fdbf 	bl	8000c90 <__aeabi_ui2f>
 8016112:	4603      	mov	r3, r0
 8016114:	4619      	mov	r1, r3
 8016116:	68b8      	ldr	r0, [r7, #8]
 8016118:	f7ea fd08 	bl	8000b2c <__aeabi_fsub>
 801611c:	4603      	mov	r3, r0
 801611e:	6879      	ldr	r1, [r7, #4]
 8016120:	4618      	mov	r0, r3
 8016122:	f7ea fd03 	bl	8000b2c <__aeabi_fsub>
 8016126:	4603      	mov	r3, r0
 8016128:	4618      	mov	r0, r3
 801612a:	f7ea f991 	bl	8000450 <__aeabi_f2d>
 801612e:	4602      	mov	r2, r0
 8016130:	460b      	mov	r3, r1
 8016132:	4610      	mov	r0, r2
 8016134:	4619      	mov	r1, r3
 8016136:	f006 fa8f 	bl	801c658 <floor>
 801613a:	4602      	mov	r2, r0
 801613c:	460b      	mov	r3, r1
 801613e:	4610      	mov	r0, r2
 8016140:	4619      	mov	r1, r3
 8016142:	f7ea fc77 	bl	8000a34 <__aeabi_d2iz>
 8016146:	4603      	mov	r3, r0
 8016148:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801614a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801614e:	4618      	mov	r0, r3
 8016150:	3718      	adds	r7, #24
 8016152:	46bd      	mov	sp, r7
 8016154:	bd80      	pop	{r7, pc}

08016156 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8016156:	b590      	push	{r4, r7, lr}
 8016158:	b087      	sub	sp, #28
 801615a:	af00      	add	r7, sp, #0
 801615c:	60f8      	str	r0, [r7, #12]
 801615e:	60b9      	str	r1, [r7, #8]
 8016160:	607a      	str	r2, [r7, #4]
 8016162:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016164:	2300      	movs	r3, #0
 8016166:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8016168:	2300      	movs	r3, #0
 801616a:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801616c:	2300      	movs	r3, #0
 801616e:	757b      	strb	r3, [r7, #21]
 8016170:	2300      	movs	r3, #0
 8016172:	753b      	strb	r3, [r7, #20]
 8016174:	e09c      	b.n	80162b0 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016176:	2300      	movs	r3, #0
 8016178:	74fb      	strb	r3, [r7, #19]
 801617a:	e08f      	b.n	801629c <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	685a      	ldr	r2, [r3, #4]
 8016180:	7d3b      	ldrb	r3, [r7, #20]
 8016182:	005b      	lsls	r3, r3, #1
 8016184:	4413      	add	r3, r2
 8016186:	881b      	ldrh	r3, [r3, #0]
 8016188:	461a      	mov	r2, r3
 801618a:	7cfb      	ldrb	r3, [r7, #19]
 801618c:	fa42 f303 	asr.w	r3, r2, r3
 8016190:	f003 0301 	and.w	r3, r3, #1
 8016194:	2b00      	cmp	r3, #0
 8016196:	d07e      	beq.n	8016296 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	689a      	ldr	r2, [r3, #8]
 801619c:	7d79      	ldrb	r1, [r7, #21]
 801619e:	7cfb      	ldrb	r3, [r7, #19]
 80161a0:	440b      	add	r3, r1
 80161a2:	4619      	mov	r1, r3
 80161a4:	460b      	mov	r3, r1
 80161a6:	005b      	lsls	r3, r3, #1
 80161a8:	440b      	add	r3, r1
 80161aa:	009b      	lsls	r3, r3, #2
 80161ac:	4413      	add	r3, r2
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d06b      	beq.n	801628c <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	781b      	ldrb	r3, [r3, #0]
 80161b8:	f083 0301 	eor.w	r3, r3, #1
 80161bc:	b2db      	uxtb	r3, r3
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d011      	beq.n	80161e6 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d00d      	beq.n	80161e6 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	695a      	ldr	r2, [r3, #20]
 80161ce:	7d3b      	ldrb	r3, [r7, #20]
 80161d0:	005b      	lsls	r3, r3, #1
 80161d2:	4413      	add	r3, r2
 80161d4:	881b      	ldrh	r3, [r3, #0]
 80161d6:	461a      	mov	r2, r3
 80161d8:	7cfb      	ldrb	r3, [r7, #19]
 80161da:	fa42 f303 	asr.w	r3, r2, r3
 80161de:	f003 0301 	and.w	r3, r3, #1
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d054      	beq.n	8016290 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	785b      	ldrb	r3, [r3, #1]
 80161ea:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	689a      	ldr	r2, [r3, #8]
 80161f0:	7d79      	ldrb	r1, [r7, #21]
 80161f2:	7cfb      	ldrb	r3, [r7, #19]
 80161f4:	440b      	add	r3, r1
 80161f6:	4619      	mov	r1, r3
 80161f8:	460b      	mov	r3, r1
 80161fa:	005b      	lsls	r3, r3, #1
 80161fc:	440b      	add	r3, r1
 80161fe:	009b      	lsls	r3, r3, #2
 8016200:	4413      	add	r3, r2
 8016202:	7a1b      	ldrb	r3, [r3, #8]
 8016204:	f343 0303 	sbfx	r3, r3, #0, #4
 8016208:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801620a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	689a      	ldr	r2, [r3, #8]
 8016210:	7d79      	ldrb	r1, [r7, #21]
 8016212:	7cfb      	ldrb	r3, [r7, #19]
 8016214:	440b      	add	r3, r1
 8016216:	4619      	mov	r1, r3
 8016218:	460b      	mov	r3, r1
 801621a:	005b      	lsls	r3, r3, #1
 801621c:	440b      	add	r3, r1
 801621e:	009b      	lsls	r3, r3, #2
 8016220:	4413      	add	r3, r2
 8016222:	7a1b      	ldrb	r3, [r3, #8]
 8016224:	f343 1303 	sbfx	r3, r3, #4, #4
 8016228:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801622a:	461a      	mov	r2, r3
 801622c:	4621      	mov	r1, r4
 801622e:	f7ff fbe8 	bl	8015a02 <RegionCommonValueInRange>
 8016232:	4603      	mov	r3, r0
 8016234:	2b00      	cmp	r3, #0
 8016236:	d02d      	beq.n	8016294 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	68da      	ldr	r2, [r3, #12]
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	6899      	ldr	r1, [r3, #8]
 8016240:	7d78      	ldrb	r0, [r7, #21]
 8016242:	7cfb      	ldrb	r3, [r7, #19]
 8016244:	4403      	add	r3, r0
 8016246:	4618      	mov	r0, r3
 8016248:	4603      	mov	r3, r0
 801624a:	005b      	lsls	r3, r3, #1
 801624c:	4403      	add	r3, r0
 801624e:	009b      	lsls	r3, r3, #2
 8016250:	440b      	add	r3, r1
 8016252:	7a5b      	ldrb	r3, [r3, #9]
 8016254:	4619      	mov	r1, r3
 8016256:	460b      	mov	r3, r1
 8016258:	005b      	lsls	r3, r3, #1
 801625a:	440b      	add	r3, r1
 801625c:	00db      	lsls	r3, r3, #3
 801625e:	4413      	add	r3, r2
 8016260:	7d1b      	ldrb	r3, [r3, #20]
 8016262:	f083 0301 	eor.w	r3, r3, #1
 8016266:	b2db      	uxtb	r3, r3
 8016268:	2b00      	cmp	r3, #0
 801626a:	d003      	beq.n	8016274 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 801626c:	7dbb      	ldrb	r3, [r7, #22]
 801626e:	3301      	adds	r3, #1
 8016270:	75bb      	strb	r3, [r7, #22]
                    continue;
 8016272:	e010      	b.n	8016296 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8016274:	7dfb      	ldrb	r3, [r7, #23]
 8016276:	1c5a      	adds	r2, r3, #1
 8016278:	75fa      	strb	r2, [r7, #23]
 801627a:	461a      	mov	r2, r3
 801627c:	68bb      	ldr	r3, [r7, #8]
 801627e:	4413      	add	r3, r2
 8016280:	7d79      	ldrb	r1, [r7, #21]
 8016282:	7cfa      	ldrb	r2, [r7, #19]
 8016284:	440a      	add	r2, r1
 8016286:	b2d2      	uxtb	r2, r2
 8016288:	701a      	strb	r2, [r3, #0]
 801628a:	e004      	b.n	8016296 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801628c:	bf00      	nop
 801628e:	e002      	b.n	8016296 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016290:	bf00      	nop
 8016292:	e000      	b.n	8016296 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016294:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8016296:	7cfb      	ldrb	r3, [r7, #19]
 8016298:	3301      	adds	r3, #1
 801629a:	74fb      	strb	r3, [r7, #19]
 801629c:	7cfb      	ldrb	r3, [r7, #19]
 801629e:	2b0f      	cmp	r3, #15
 80162a0:	f67f af6c 	bls.w	801617c <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80162a4:	7d7b      	ldrb	r3, [r7, #21]
 80162a6:	3310      	adds	r3, #16
 80162a8:	757b      	strb	r3, [r7, #21]
 80162aa:	7d3b      	ldrb	r3, [r7, #20]
 80162ac:	3301      	adds	r3, #1
 80162ae:	753b      	strb	r3, [r7, #20]
 80162b0:	7d7b      	ldrb	r3, [r7, #21]
 80162b2:	b29a      	uxth	r2, r3
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	8a1b      	ldrh	r3, [r3, #16]
 80162b8:	429a      	cmp	r2, r3
 80162ba:	f4ff af5c 	bcc.w	8016176 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	7dfa      	ldrb	r2, [r7, #23]
 80162c2:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80162c4:	683b      	ldr	r3, [r7, #0]
 80162c6:	7dba      	ldrb	r2, [r7, #22]
 80162c8:	701a      	strb	r2, [r3, #0]
}
 80162ca:	bf00      	nop
 80162cc:	371c      	adds	r7, #28
 80162ce:	46bd      	mov	sp, r7
 80162d0:	bd90      	pop	{r4, r7, pc}

080162d2 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80162d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162d4:	b08b      	sub	sp, #44	; 0x2c
 80162d6:	af04      	add	r7, sp, #16
 80162d8:	60f8      	str	r0, [r7, #12]
 80162da:	60b9      	str	r1, [r7, #8]
 80162dc:	607a      	str	r2, [r7, #4]
 80162de:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	685b      	ldr	r3, [r3, #4]
 80162e4:	4618      	mov	r0, r3
 80162e6:	f005 fdbf 	bl	801be68 <UTIL_TIMER_GetElapsedTime>
 80162ea:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	681a      	ldr	r2, [r3, #0]
 80162f0:	697b      	ldr	r3, [r7, #20]
 80162f2:	1ad2      	subs	r2, r2, r3
 80162f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162f6:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80162f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162fa:	2201      	movs	r2, #1
 80162fc:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80162fe:	683b      	ldr	r3, [r7, #0]
 8016300:	2200      	movs	r2, #0
 8016302:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	685b      	ldr	r3, [r3, #4]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d004      	beq.n	8016316 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016310:	697a      	ldr	r2, [r7, #20]
 8016312:	429a      	cmp	r2, r3
 8016314:	d32b      	bcc.n	801636e <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8016316:	68bb      	ldr	r3, [r7, #8]
 8016318:	2200      	movs	r2, #0
 801631a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	69db      	ldr	r3, [r3, #28]
 8016320:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016326:	68dd      	ldr	r5, [r3, #12]
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	7a5e      	ldrb	r6, [r3, #9]
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	f893 c008 	ldrb.w	ip, [r3, #8]
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	7d1b      	ldrb	r3, [r3, #20]
 8016336:	68fa      	ldr	r2, [r7, #12]
 8016338:	6992      	ldr	r2, [r2, #24]
 801633a:	9203      	str	r2, [sp, #12]
 801633c:	68fa      	ldr	r2, [r7, #12]
 801633e:	f10d 0e04 	add.w	lr, sp, #4
 8016342:	320c      	adds	r2, #12
 8016344:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016348:	e88e 0003 	stmia.w	lr, {r0, r1}
 801634c:	9300      	str	r3, [sp, #0]
 801634e:	4663      	mov	r3, ip
 8016350:	4632      	mov	r2, r6
 8016352:	4629      	mov	r1, r5
 8016354:	4620      	mov	r0, r4
 8016356:	f7ff fc25 	bl	8015ba4 <RegionCommonUpdateBandTimeOff>
 801635a:	4602      	mov	r2, r0
 801635c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801635e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	69d8      	ldr	r0, [r3, #28]
 8016364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016366:	683a      	ldr	r2, [r7, #0]
 8016368:	6879      	ldr	r1, [r7, #4]
 801636a:	f7ff fef4 	bl	8016156 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801636e:	683b      	ldr	r3, [r7, #0]
 8016370:	781b      	ldrb	r3, [r3, #0]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d004      	beq.n	8016380 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8016376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016378:	2200      	movs	r2, #0
 801637a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801637c:	2300      	movs	r3, #0
 801637e:	e006      	b.n	801638e <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8016380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016382:	781b      	ldrb	r3, [r3, #0]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d001      	beq.n	801638c <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8016388:	230b      	movs	r3, #11
 801638a:	e000      	b.n	801638e <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801638c:	230c      	movs	r3, #12
    }
}
 801638e:	4618      	mov	r0, r3
 8016390:	371c      	adds	r7, #28
 8016392:	46bd      	mov	sp, r7
 8016394:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016396 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8016396:	b5b0      	push	{r4, r5, r7, lr}
 8016398:	b086      	sub	sp, #24
 801639a:	af02      	add	r7, sp, #8
 801639c:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	781b      	ldrb	r3, [r3, #0]
 80163a2:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	f993 2000 	ldrsb.w	r2, [r3]
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80163b0:	429a      	cmp	r2, r3
 80163b2:	d103      	bne.n	80163bc <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80163ba:	e026      	b.n	801640a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80163bc:	7bfb      	ldrb	r3, [r7, #15]
 80163be:	3b01      	subs	r3, #1
 80163c0:	b2db      	uxtb	r3, r3
 80163c2:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80163ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80163ce:	429a      	cmp	r2, r3
 80163d0:	d019      	beq.n	8016406 <RegionCommonGetNextLowerTxDr+0x70>
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	78d8      	ldrb	r0, [r3, #3]
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	6859      	ldr	r1, [r3, #4]
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80163e6:	687a      	ldr	r2, [r7, #4]
 80163e8:	6892      	ldr	r2, [r2, #8]
 80163ea:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80163ee:	9201      	str	r2, [sp, #4]
 80163f0:	9300      	str	r3, [sp, #0]
 80163f2:	462b      	mov	r3, r5
 80163f4:	4622      	mov	r2, r4
 80163f6:	f7ff fa92 	bl	801591e <RegionCommonChanVerifyDr>
 80163fa:	4603      	mov	r3, r0
 80163fc:	f083 0301 	eor.w	r3, r3, #1
 8016400:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8016402:	2b00      	cmp	r3, #0
 8016404:	d1da      	bne.n	80163bc <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8016406:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801640a:	4618      	mov	r0, r3
 801640c:	3710      	adds	r7, #16
 801640e:	46bd      	mov	sp, r7
 8016410:	bdb0      	pop	{r4, r5, r7, pc}

08016412 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8016412:	b480      	push	{r7}
 8016414:	b083      	sub	sp, #12
 8016416:	af00      	add	r7, sp, #0
 8016418:	4603      	mov	r3, r0
 801641a:	460a      	mov	r2, r1
 801641c:	71fb      	strb	r3, [r7, #7]
 801641e:	4613      	mov	r3, r2
 8016420:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8016422:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801642a:	4293      	cmp	r3, r2
 801642c:	bfb8      	it	lt
 801642e:	4613      	movlt	r3, r2
 8016430:	b25b      	sxtb	r3, r3
}
 8016432:	4618      	mov	r0, r3
 8016434:	370c      	adds	r7, #12
 8016436:	46bd      	mov	sp, r7
 8016438:	bc80      	pop	{r7}
 801643a:	4770      	bx	lr

0801643c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801643c:	b480      	push	{r7}
 801643e:	b083      	sub	sp, #12
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
 8016444:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	009b      	lsls	r3, r3, #2
 801644a:	683a      	ldr	r2, [r7, #0]
 801644c:	4413      	add	r3, r2
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	4a07      	ldr	r2, [pc, #28]	; (8016470 <RegionCommonGetBandwidth+0x34>)
 8016452:	4293      	cmp	r3, r2
 8016454:	d004      	beq.n	8016460 <RegionCommonGetBandwidth+0x24>
 8016456:	4a07      	ldr	r2, [pc, #28]	; (8016474 <RegionCommonGetBandwidth+0x38>)
 8016458:	4293      	cmp	r3, r2
 801645a:	d003      	beq.n	8016464 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 801645c:	2300      	movs	r3, #0
 801645e:	e002      	b.n	8016466 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8016460:	2301      	movs	r3, #1
 8016462:	e000      	b.n	8016466 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8016464:	2302      	movs	r3, #2
    }
}
 8016466:	4618      	mov	r0, r3
 8016468:	370c      	adds	r7, #12
 801646a:	46bd      	mov	sp, r7
 801646c:	bc80      	pop	{r7}
 801646e:	4770      	bx	lr
 8016470:	0003d090 	.word	0x0003d090
 8016474:	0007a120 	.word	0x0007a120

08016478 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8016478:	b580      	push	{r7, lr}
 801647a:	b086      	sub	sp, #24
 801647c:	af04      	add	r7, sp, #16
 801647e:	4603      	mov	r3, r0
 8016480:	6039      	str	r1, [r7, #0]
 8016482:	71fb      	strb	r3, [r7, #7]
 8016484:	4613      	mov	r3, r2
 8016486:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8016488:	79fb      	ldrb	r3, [r7, #7]
 801648a:	2b05      	cmp	r3, #5
 801648c:	d810      	bhi.n	80164b0 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801648e:	79fb      	ldrb	r3, [r7, #7]
 8016490:	4a0f      	ldr	r2, [pc, #60]	; (80164d0 <RegionCommonRxConfigPrint+0x58>)
 8016492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016496:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801649a:	9202      	str	r2, [sp, #8]
 801649c:	683a      	ldr	r2, [r7, #0]
 801649e:	9201      	str	r2, [sp, #4]
 80164a0:	9300      	str	r3, [sp, #0]
 80164a2:	4b0c      	ldr	r3, [pc, #48]	; (80164d4 <RegionCommonRxConfigPrint+0x5c>)
 80164a4:	2201      	movs	r2, #1
 80164a6:	2100      	movs	r1, #0
 80164a8:	2002      	movs	r0, #2
 80164aa:	f005 fdbb 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80164ae:	e00a      	b.n	80164c6 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80164b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80164b4:	9301      	str	r3, [sp, #4]
 80164b6:	683b      	ldr	r3, [r7, #0]
 80164b8:	9300      	str	r3, [sp, #0]
 80164ba:	4b07      	ldr	r3, [pc, #28]	; (80164d8 <RegionCommonRxConfigPrint+0x60>)
 80164bc:	2201      	movs	r2, #1
 80164be:	2100      	movs	r1, #0
 80164c0:	2002      	movs	r0, #2
 80164c2:	f005 fdaf 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
}
 80164c6:	bf00      	nop
 80164c8:	3708      	adds	r7, #8
 80164ca:	46bd      	mov	sp, r7
 80164cc:	bd80      	pop	{r7, pc}
 80164ce:	bf00      	nop
 80164d0:	20000120 	.word	0x20000120
 80164d4:	0801cad4 	.word	0x0801cad4
 80164d8:	0801caf4 	.word	0x0801caf4

080164dc <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	b084      	sub	sp, #16
 80164e0:	af02      	add	r7, sp, #8
 80164e2:	6078      	str	r0, [r7, #4]
 80164e4:	460b      	mov	r3, r1
 80164e6:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80164e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80164ec:	9301      	str	r3, [sp, #4]
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	9300      	str	r3, [sp, #0]
 80164f2:	4b05      	ldr	r3, [pc, #20]	; (8016508 <RegionCommonTxConfigPrint+0x2c>)
 80164f4:	2201      	movs	r2, #1
 80164f6:	2100      	movs	r1, #0
 80164f8:	2002      	movs	r0, #2
 80164fa:	f005 fd93 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
}
 80164fe:	bf00      	nop
 8016500:	3708      	adds	r7, #8
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}
 8016506:	bf00      	nop
 8016508:	0801cb10 	.word	0x0801cb10

0801650c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b082      	sub	sp, #8
 8016510:	af00      	add	r7, sp, #0
 8016512:	6078      	str	r0, [r7, #4]
 8016514:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8016516:	4b2d      	ldr	r3, [pc, #180]	; (80165cc <VerifyRfFreq+0xc0>)
 8016518:	6a1b      	ldr	r3, [r3, #32]
 801651a:	6878      	ldr	r0, [r7, #4]
 801651c:	4798      	blx	r3
 801651e:	4603      	mov	r3, r0
 8016520:	f083 0301 	eor.w	r3, r3, #1
 8016524:	b2db      	uxtb	r3, r3
 8016526:	2b00      	cmp	r3, #0
 8016528:	d001      	beq.n	801652e <VerifyRfFreq+0x22>
    {
        return false;
 801652a:	2300      	movs	r3, #0
 801652c:	e04a      	b.n	80165c4 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	4a27      	ldr	r2, [pc, #156]	; (80165d0 <VerifyRfFreq+0xc4>)
 8016532:	4293      	cmp	r3, r2
 8016534:	d307      	bcc.n	8016546 <VerifyRfFreq+0x3a>
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	4a26      	ldr	r2, [pc, #152]	; (80165d4 <VerifyRfFreq+0xc8>)
 801653a:	4293      	cmp	r3, r2
 801653c:	d803      	bhi.n	8016546 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801653e:	683b      	ldr	r3, [r7, #0]
 8016540:	2202      	movs	r2, #2
 8016542:	701a      	strb	r2, [r3, #0]
 8016544:	e03d      	b.n	80165c2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	4a22      	ldr	r2, [pc, #136]	; (80165d4 <VerifyRfFreq+0xc8>)
 801654a:	4293      	cmp	r3, r2
 801654c:	d907      	bls.n	801655e <VerifyRfFreq+0x52>
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	4a21      	ldr	r2, [pc, #132]	; (80165d8 <VerifyRfFreq+0xcc>)
 8016552:	4293      	cmp	r3, r2
 8016554:	d803      	bhi.n	801655e <VerifyRfFreq+0x52>
    {
        *band = 0;
 8016556:	683b      	ldr	r3, [r7, #0]
 8016558:	2200      	movs	r2, #0
 801655a:	701a      	strb	r2, [r3, #0]
 801655c:	e031      	b.n	80165c2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	4a1d      	ldr	r2, [pc, #116]	; (80165d8 <VerifyRfFreq+0xcc>)
 8016562:	4293      	cmp	r3, r2
 8016564:	d907      	bls.n	8016576 <VerifyRfFreq+0x6a>
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	4a1c      	ldr	r2, [pc, #112]	; (80165dc <VerifyRfFreq+0xd0>)
 801656a:	4293      	cmp	r3, r2
 801656c:	d803      	bhi.n	8016576 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801656e:	683b      	ldr	r3, [r7, #0]
 8016570:	2201      	movs	r2, #1
 8016572:	701a      	strb	r2, [r3, #0]
 8016574:	e025      	b.n	80165c2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	4a19      	ldr	r2, [pc, #100]	; (80165e0 <VerifyRfFreq+0xd4>)
 801657a:	4293      	cmp	r3, r2
 801657c:	d907      	bls.n	801658e <VerifyRfFreq+0x82>
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	4a18      	ldr	r2, [pc, #96]	; (80165e4 <VerifyRfFreq+0xd8>)
 8016582:	4293      	cmp	r3, r2
 8016584:	d803      	bhi.n	801658e <VerifyRfFreq+0x82>
    {
        *band = 5;
 8016586:	683b      	ldr	r3, [r7, #0]
 8016588:	2205      	movs	r2, #5
 801658a:	701a      	strb	r2, [r3, #0]
 801658c:	e019      	b.n	80165c2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	4a15      	ldr	r2, [pc, #84]	; (80165e8 <VerifyRfFreq+0xdc>)
 8016592:	4293      	cmp	r3, r2
 8016594:	d907      	bls.n	80165a6 <VerifyRfFreq+0x9a>
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	4a14      	ldr	r2, [pc, #80]	; (80165ec <VerifyRfFreq+0xe0>)
 801659a:	4293      	cmp	r3, r2
 801659c:	d803      	bhi.n	80165a6 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801659e:	683b      	ldr	r3, [r7, #0]
 80165a0:	2203      	movs	r2, #3
 80165a2:	701a      	strb	r2, [r3, #0]
 80165a4:	e00d      	b.n	80165c2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	4a11      	ldr	r2, [pc, #68]	; (80165f0 <VerifyRfFreq+0xe4>)
 80165aa:	4293      	cmp	r3, r2
 80165ac:	d307      	bcc.n	80165be <VerifyRfFreq+0xb2>
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	4a10      	ldr	r2, [pc, #64]	; (80165f4 <VerifyRfFreq+0xe8>)
 80165b2:	4293      	cmp	r3, r2
 80165b4:	d803      	bhi.n	80165be <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80165b6:	683b      	ldr	r3, [r7, #0]
 80165b8:	2204      	movs	r2, #4
 80165ba:	701a      	strb	r2, [r3, #0]
 80165bc:	e001      	b.n	80165c2 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80165be:	2300      	movs	r3, #0
 80165c0:	e000      	b.n	80165c4 <VerifyRfFreq+0xb8>
    }
    return true;
 80165c2:	2301      	movs	r3, #1
}
 80165c4:	4618      	mov	r0, r3
 80165c6:	3708      	adds	r7, #8
 80165c8:	46bd      	mov	sp, r7
 80165ca:	bd80      	pop	{r7, pc}
 80165cc:	0801d0b0 	.word	0x0801d0b0
 80165d0:	337055c0 	.word	0x337055c0
 80165d4:	338eda3f 	.word	0x338eda3f
 80165d8:	33bca100 	.word	0x33bca100
 80165dc:	33c5c8c0 	.word	0x33c5c8c0
 80165e0:	33c74f5f 	.word	0x33c74f5f
 80165e4:	33cef080 	.word	0x33cef080
 80165e8:	33d1fdbf 	.word	0x33d1fdbf
 80165ec:	33d5ce50 	.word	0x33d5ce50
 80165f0:	33d691a0 	.word	0x33d691a0
 80165f4:	33db2580 	.word	0x33db2580

080165f8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80165f8:	b590      	push	{r4, r7, lr}
 80165fa:	b08b      	sub	sp, #44	; 0x2c
 80165fc:	af04      	add	r7, sp, #16
 80165fe:	4603      	mov	r3, r0
 8016600:	460a      	mov	r2, r1
 8016602:	71fb      	strb	r3, [r7, #7]
 8016604:	4613      	mov	r3, r2
 8016606:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8016608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801660c:	4a1f      	ldr	r2, [pc, #124]	; (801668c <GetTimeOnAir+0x94>)
 801660e:	5cd3      	ldrb	r3, [r2, r3]
 8016610:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8016612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016616:	491e      	ldr	r1, [pc, #120]	; (8016690 <GetTimeOnAir+0x98>)
 8016618:	4618      	mov	r0, r3
 801661a:	f7ff ff0f 	bl	801643c <RegionCommonGetBandwidth>
 801661e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8016620:	2300      	movs	r3, #0
 8016622:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8016624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016628:	2b07      	cmp	r3, #7
 801662a:	d118      	bne.n	801665e <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801662c:	4b19      	ldr	r3, [pc, #100]	; (8016694 <GetTimeOnAir+0x9c>)
 801662e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016630:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016638:	fb02 f303 	mul.w	r3, r2, r3
 801663c:	4619      	mov	r1, r3
 801663e:	88bb      	ldrh	r3, [r7, #4]
 8016640:	b2db      	uxtb	r3, r3
 8016642:	2201      	movs	r2, #1
 8016644:	9203      	str	r2, [sp, #12]
 8016646:	9302      	str	r3, [sp, #8]
 8016648:	2300      	movs	r3, #0
 801664a:	9301      	str	r3, [sp, #4]
 801664c:	2305      	movs	r3, #5
 801664e:	9300      	str	r3, [sp, #0]
 8016650:	2300      	movs	r3, #0
 8016652:	460a      	mov	r2, r1
 8016654:	68f9      	ldr	r1, [r7, #12]
 8016656:	2000      	movs	r0, #0
 8016658:	47a0      	blx	r4
 801665a:	6178      	str	r0, [r7, #20]
 801665c:	e011      	b.n	8016682 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801665e:	4b0d      	ldr	r3, [pc, #52]	; (8016694 <GetTimeOnAir+0x9c>)
 8016660:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016662:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016666:	88bb      	ldrh	r3, [r7, #4]
 8016668:	b2db      	uxtb	r3, r3
 801666a:	2101      	movs	r1, #1
 801666c:	9103      	str	r1, [sp, #12]
 801666e:	9302      	str	r3, [sp, #8]
 8016670:	2300      	movs	r3, #0
 8016672:	9301      	str	r3, [sp, #4]
 8016674:	2308      	movs	r3, #8
 8016676:	9300      	str	r3, [sp, #0]
 8016678:	2301      	movs	r3, #1
 801667a:	68f9      	ldr	r1, [r7, #12]
 801667c:	2001      	movs	r0, #1
 801667e:	47a0      	blx	r4
 8016680:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8016682:	697b      	ldr	r3, [r7, #20]
}
 8016684:	4618      	mov	r0, r3
 8016686:	371c      	adds	r7, #28
 8016688:	46bd      	mov	sp, r7
 801668a:	bd90      	pop	{r4, r7, pc}
 801668c:	0801d078 	.word	0x0801d078
 8016690:	0801d080 	.word	0x0801d080
 8016694:	0801d0b0 	.word	0x0801d0b0

08016698 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b088      	sub	sp, #32
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80166a0:	2300      	movs	r3, #0
 80166a2:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	781b      	ldrb	r3, [r3, #0]
 80166a8:	3b01      	subs	r3, #1
 80166aa:	2b38      	cmp	r3, #56	; 0x38
 80166ac:	f200 8128 	bhi.w	8016900 <RegionEU868GetPhyParam+0x268>
 80166b0:	a201      	add	r2, pc, #4	; (adr r2, 80166b8 <RegionEU868GetPhyParam+0x20>)
 80166b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166b6:	bf00      	nop
 80166b8:	0801679d 	.word	0x0801679d
 80166bc:	080167a3 	.word	0x080167a3
 80166c0:	08016901 	.word	0x08016901
 80166c4:	08016901 	.word	0x08016901
 80166c8:	08016901 	.word	0x08016901
 80166cc:	080167a9 	.word	0x080167a9
 80166d0:	08016901 	.word	0x08016901
 80166d4:	080167e3 	.word	0x080167e3
 80166d8:	08016901 	.word	0x08016901
 80166dc:	080167e9 	.word	0x080167e9
 80166e0:	080167ef 	.word	0x080167ef
 80166e4:	080167f5 	.word	0x080167f5
 80166e8:	080167fb 	.word	0x080167fb
 80166ec:	0801680b 	.word	0x0801680b
 80166f0:	0801681b 	.word	0x0801681b
 80166f4:	08016821 	.word	0x08016821
 80166f8:	08016829 	.word	0x08016829
 80166fc:	08016831 	.word	0x08016831
 8016700:	08016839 	.word	0x08016839
 8016704:	08016841 	.word	0x08016841
 8016708:	08016849 	.word	0x08016849
 801670c:	08016851 	.word	0x08016851
 8016710:	08016865 	.word	0x08016865
 8016714:	0801686b 	.word	0x0801686b
 8016718:	08016871 	.word	0x08016871
 801671c:	08016877 	.word	0x08016877
 8016720:	08016883 	.word	0x08016883
 8016724:	0801688f 	.word	0x0801688f
 8016728:	08016895 	.word	0x08016895
 801672c:	0801689d 	.word	0x0801689d
 8016730:	080168a3 	.word	0x080168a3
 8016734:	080168a9 	.word	0x080168a9
 8016738:	080168b1 	.word	0x080168b1
 801673c:	080167af 	.word	0x080167af
 8016740:	08016901 	.word	0x08016901
 8016744:	08016901 	.word	0x08016901
 8016748:	08016901 	.word	0x08016901
 801674c:	08016901 	.word	0x08016901
 8016750:	08016901 	.word	0x08016901
 8016754:	08016901 	.word	0x08016901
 8016758:	08016901 	.word	0x08016901
 801675c:	08016901 	.word	0x08016901
 8016760:	08016901 	.word	0x08016901
 8016764:	08016901 	.word	0x08016901
 8016768:	08016901 	.word	0x08016901
 801676c:	08016901 	.word	0x08016901
 8016770:	08016901 	.word	0x08016901
 8016774:	080168b7 	.word	0x080168b7
 8016778:	080168bd 	.word	0x080168bd
 801677c:	080168cb 	.word	0x080168cb
 8016780:	08016901 	.word	0x08016901
 8016784:	08016901 	.word	0x08016901
 8016788:	080168d1 	.word	0x080168d1
 801678c:	080168d7 	.word	0x080168d7
 8016790:	08016901 	.word	0x08016901
 8016794:	080168dd 	.word	0x080168dd
 8016798:	080168ed 	.word	0x080168ed
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 801679c:	2300      	movs	r3, #0
 801679e:	61bb      	str	r3, [r7, #24]
            break;
 80167a0:	e0af      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80167a2:	2300      	movs	r3, #0
 80167a4:	61bb      	str	r3, [r7, #24]
            break;
 80167a6:	e0ac      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80167a8:	2300      	movs	r3, #0
 80167aa:	61bb      	str	r3, [r7, #24]
            break;
 80167ac:	e0a9      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80167b4:	733b      	strb	r3, [r7, #12]
 80167b6:	2307      	movs	r3, #7
 80167b8:	737b      	strb	r3, [r7, #13]
 80167ba:	2300      	movs	r3, #0
 80167bc:	73bb      	strb	r3, [r7, #14]
 80167be:	2310      	movs	r3, #16
 80167c0:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80167c2:	4b53      	ldr	r3, [pc, #332]	; (8016910 <RegionEU868GetPhyParam+0x278>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80167ca:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80167cc:	4b50      	ldr	r3, [pc, #320]	; (8016910 <RegionEU868GetPhyParam+0x278>)
 80167ce:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80167d0:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80167d2:	f107 030c 	add.w	r3, r7, #12
 80167d6:	4618      	mov	r0, r3
 80167d8:	f7ff fddd 	bl	8016396 <RegionCommonGetNextLowerTxDr>
 80167dc:	4603      	mov	r3, r0
 80167de:	61bb      	str	r3, [r7, #24]
            break;
 80167e0:	e08f      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80167e2:	2300      	movs	r3, #0
 80167e4:	61bb      	str	r3, [r7, #24]
            break;
 80167e6:	e08c      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80167e8:	2300      	movs	r3, #0
 80167ea:	61bb      	str	r3, [r7, #24]
            break;
 80167ec:	e089      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80167ee:	2340      	movs	r3, #64	; 0x40
 80167f0:	61bb      	str	r3, [r7, #24]
            break;
 80167f2:	e086      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80167f4:	2320      	movs	r3, #32
 80167f6:	61bb      	str	r3, [r7, #24]
            break;
 80167f8:	e083      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016800:	461a      	mov	r2, r3
 8016802:	4b44      	ldr	r3, [pc, #272]	; (8016914 <RegionEU868GetPhyParam+0x27c>)
 8016804:	5c9b      	ldrb	r3, [r3, r2]
 8016806:	61bb      	str	r3, [r7, #24]
            break;
 8016808:	e07b      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016810:	461a      	mov	r2, r3
 8016812:	4b41      	ldr	r3, [pc, #260]	; (8016918 <RegionEU868GetPhyParam+0x280>)
 8016814:	5c9b      	ldrb	r3, [r3, r2]
 8016816:	61bb      	str	r3, [r7, #24]
            break;
 8016818:	e073      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801681a:	2301      	movs	r3, #1
 801681c:	61bb      	str	r3, [r7, #24]
            break;
 801681e:	e070      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8016820:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8016824:	61bb      	str	r3, [r7, #24]
            break;
 8016826:	e06c      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8016828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801682c:	61bb      	str	r3, [r7, #24]
            break;
 801682e:	e068      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8016830:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8016834:	61bb      	str	r3, [r7, #24]
            break;
 8016836:	e064      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8016838:	f241 3388 	movw	r3, #5000	; 0x1388
 801683c:	61bb      	str	r3, [r7, #24]
            break;
 801683e:	e060      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8016840:	f241 7370 	movw	r3, #6000	; 0x1770
 8016844:	61bb      	str	r3, [r7, #24]
            break;
 8016846:	e05c      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8016848:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801684c:	61bb      	str	r3, [r7, #24]
            break;
 801684e:	e058      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8016850:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016854:	4831      	ldr	r0, [pc, #196]	; (801691c <RegionEU868GetPhyParam+0x284>)
 8016856:	f001 f879 	bl	801794c <randr>
 801685a:	4603      	mov	r3, r0
 801685c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8016860:	61bb      	str	r3, [r7, #24]
            break;
 8016862:	e04e      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8016864:	2300      	movs	r3, #0
 8016866:	61bb      	str	r3, [r7, #24]
            break;
 8016868:	e04b      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801686a:	4b2d      	ldr	r3, [pc, #180]	; (8016920 <RegionEU868GetPhyParam+0x288>)
 801686c:	61bb      	str	r3, [r7, #24]
            break;
 801686e:	e048      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8016870:	2300      	movs	r3, #0
 8016872:	61bb      	str	r3, [r7, #24]
            break;
 8016874:	e045      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016876:	4b26      	ldr	r3, [pc, #152]	; (8016910 <RegionEU868GetPhyParam+0x278>)
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801687e:	61bb      	str	r3, [r7, #24]
            break;
 8016880:	e03f      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8016882:	4b23      	ldr	r3, [pc, #140]	; (8016910 <RegionEU868GetPhyParam+0x278>)
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801688a:	61bb      	str	r3, [r7, #24]
            break;
 801688c:	e039      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801688e:	2310      	movs	r3, #16
 8016890:	61bb      	str	r3, [r7, #24]
            break;
 8016892:	e036      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8016894:	4b1e      	ldr	r3, [pc, #120]	; (8016910 <RegionEU868GetPhyParam+0x278>)
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	61bb      	str	r3, [r7, #24]
            break;
 801689a:	e032      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 801689c:	2300      	movs	r3, #0
 801689e:	61bb      	str	r3, [r7, #24]
            break;
 80168a0:	e02f      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80168a2:	2300      	movs	r3, #0
 80168a4:	61bb      	str	r3, [r7, #24]
            break;
 80168a6:	e02c      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80168a8:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80168ac:	61bb      	str	r3, [r7, #24]
            break;
 80168ae:	e028      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80168b0:	4b1c      	ldr	r3, [pc, #112]	; (8016924 <RegionEU868GetPhyParam+0x28c>)
 80168b2:	61bb      	str	r3, [r7, #24]
            break;
 80168b4:	e025      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80168b6:	4b1a      	ldr	r3, [pc, #104]	; (8016920 <RegionEU868GetPhyParam+0x288>)
 80168b8:	61bb      	str	r3, [r7, #24]
            break;
 80168ba:	e022      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80168bc:	2311      	movs	r3, #17
 80168be:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80168c0:	2302      	movs	r3, #2
 80168c2:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80168c4:	2300      	movs	r3, #0
 80168c6:	76bb      	strb	r3, [r7, #26]
            break;
 80168c8:	e01b      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80168ca:	2303      	movs	r3, #3
 80168cc:	61bb      	str	r3, [r7, #24]
            break;
 80168ce:	e018      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80168d0:	4b13      	ldr	r3, [pc, #76]	; (8016920 <RegionEU868GetPhyParam+0x288>)
 80168d2:	61bb      	str	r3, [r7, #24]
            break;
 80168d4:	e015      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80168d6:	2303      	movs	r3, #3
 80168d8:	61bb      	str	r3, [r7, #24]
            break;
 80168da:	e012      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168e2:	461a      	mov	r2, r3
 80168e4:	4b10      	ldr	r3, [pc, #64]	; (8016928 <RegionEU868GetPhyParam+0x290>)
 80168e6:	5c9b      	ldrb	r3, [r3, r2]
 80168e8:	61bb      	str	r3, [r7, #24]
            break;
 80168ea:	e00a      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168f2:	490e      	ldr	r1, [pc, #56]	; (801692c <RegionEU868GetPhyParam+0x294>)
 80168f4:	4618      	mov	r0, r3
 80168f6:	f7ff fda1 	bl	801643c <RegionCommonGetBandwidth>
 80168fa:	4603      	mov	r3, r0
 80168fc:	61bb      	str	r3, [r7, #24]
            break;
 80168fe:	e000      	b.n	8016902 <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8016900:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8016902:	69bb      	ldr	r3, [r7, #24]
 8016904:	61fb      	str	r3, [r7, #28]
 8016906:	69fb      	ldr	r3, [r7, #28]
}
 8016908:	4618      	mov	r0, r3
 801690a:	3720      	adds	r7, #32
 801690c:	46bd      	mov	sp, r7
 801690e:	bd80      	pop	{r7, pc}
 8016910:	200020c4 	.word	0x200020c4
 8016914:	0801d0a0 	.word	0x0801d0a0
 8016918:	0801d0a8 	.word	0x0801d0a8
 801691c:	fffffc18 	.word	0xfffffc18
 8016920:	33d3e608 	.word	0x33d3e608
 8016924:	4009999a 	.word	0x4009999a
 8016928:	0801d078 	.word	0x0801d078
 801692c:	0801d080 	.word	0x0801d080

08016930 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8016930:	b590      	push	{r4, r7, lr}
 8016932:	b085      	sub	sp, #20
 8016934:	af02      	add	r7, sp, #8
 8016936:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8016938:	4b11      	ldr	r3, [pc, #68]	; (8016980 <RegionEU868SetBandTxDone+0x50>)
 801693a:	681a      	ldr	r2, [r3, #0]
 801693c:	4b11      	ldr	r3, [pc, #68]	; (8016984 <RegionEU868SetBandTxDone+0x54>)
 801693e:	6819      	ldr	r1, [r3, #0]
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	781b      	ldrb	r3, [r3, #0]
 8016944:	4618      	mov	r0, r3
 8016946:	4603      	mov	r3, r0
 8016948:	005b      	lsls	r3, r3, #1
 801694a:	4403      	add	r3, r0
 801694c:	009b      	lsls	r3, r3, #2
 801694e:	440b      	add	r3, r1
 8016950:	3309      	adds	r3, #9
 8016952:	781b      	ldrb	r3, [r3, #0]
 8016954:	4619      	mov	r1, r3
 8016956:	460b      	mov	r3, r1
 8016958:	005b      	lsls	r3, r3, #1
 801695a:	440b      	add	r3, r1
 801695c:	00db      	lsls	r3, r3, #3
 801695e:	18d0      	adds	r0, r2, r3
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	6899      	ldr	r1, [r3, #8]
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	785c      	ldrb	r4, [r3, #1]
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	691a      	ldr	r2, [r3, #16]
 801696c:	9200      	str	r2, [sp, #0]
 801696e:	68db      	ldr	r3, [r3, #12]
 8016970:	4622      	mov	r2, r4
 8016972:	f7ff f8e9 	bl	8015b48 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8016976:	bf00      	nop
 8016978:	370c      	adds	r7, #12
 801697a:	46bd      	mov	sp, r7
 801697c:	bd90      	pop	{r4, r7, pc}
 801697e:	bf00      	nop
 8016980:	200020c0 	.word	0x200020c0
 8016984:	200020c4 	.word	0x200020c4

08016988 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8016988:	b580      	push	{r7, lr}
 801698a:	b0b0      	sub	sp, #192	; 0xc0
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8016990:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016994:	2290      	movs	r2, #144	; 0x90
 8016996:	2100      	movs	r1, #0
 8016998:	4618      	mov	r0, r3
 801699a:	f005 fded 	bl	801c578 <memset>
 801699e:	2364      	movs	r3, #100	; 0x64
 80169a0:	863b      	strh	r3, [r7, #48]	; 0x30
 80169a2:	2364      	movs	r3, #100	; 0x64
 80169a4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80169a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80169ac:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 80169b0:	230a      	movs	r3, #10
 80169b2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80169b6:	2364      	movs	r3, #100	; 0x64
 80169b8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80169bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80169c0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	7a1b      	ldrb	r3, [r3, #8]
 80169c8:	2b02      	cmp	r3, #2
 80169ca:	d05e      	beq.n	8016a8a <RegionEU868InitDefaults+0x102>
 80169cc:	2b02      	cmp	r3, #2
 80169ce:	dc6b      	bgt.n	8016aa8 <RegionEU868InitDefaults+0x120>
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d002      	beq.n	80169da <RegionEU868InitDefaults+0x52>
 80169d4:	2b01      	cmp	r3, #1
 80169d6:	d03f      	beq.n	8016a58 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80169d8:	e066      	b.n	8016aa8 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d063      	beq.n	8016aaa <RegionEU868InitDefaults+0x122>
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	685b      	ldr	r3, [r3, #4]
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d05f      	beq.n	8016aaa <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	4a30      	ldr	r2, [pc, #192]	; (8016ab0 <RegionEU868InitDefaults+0x128>)
 80169f0:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	685b      	ldr	r3, [r3, #4]
 80169f6:	4a2f      	ldr	r2, [pc, #188]	; (8016ab4 <RegionEU868InitDefaults+0x12c>)
 80169f8:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80169fa:	4b2d      	ldr	r3, [pc, #180]	; (8016ab0 <RegionEU868InitDefaults+0x128>)
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	4618      	mov	r0, r3
 8016a00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016a04:	2290      	movs	r2, #144	; 0x90
 8016a06:	4619      	mov	r1, r3
 8016a08:	f000 ffb7 	bl	801797a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8016a0c:	4b29      	ldr	r3, [pc, #164]	; (8016ab4 <RegionEU868InitDefaults+0x12c>)
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	4a29      	ldr	r2, [pc, #164]	; (8016ab8 <RegionEU868InitDefaults+0x130>)
 8016a12:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8016a18:	4b26      	ldr	r3, [pc, #152]	; (8016ab4 <RegionEU868InitDefaults+0x12c>)
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	4a27      	ldr	r2, [pc, #156]	; (8016abc <RegionEU868InitDefaults+0x134>)
 8016a1e:	330c      	adds	r3, #12
 8016a20:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8016a26:	4b23      	ldr	r3, [pc, #140]	; (8016ab4 <RegionEU868InitDefaults+0x12c>)
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	4a25      	ldr	r2, [pc, #148]	; (8016ac0 <RegionEU868InitDefaults+0x138>)
 8016a2c:	3318      	adds	r3, #24
 8016a2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8016a34:	4b1f      	ldr	r3, [pc, #124]	; (8016ab4 <RegionEU868InitDefaults+0x12c>)
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	2207      	movs	r2, #7
 8016a3a:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016a3e:	4b1d      	ldr	r3, [pc, #116]	; (8016ab4 <RegionEU868InitDefaults+0x12c>)
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8016a46:	4b1b      	ldr	r3, [pc, #108]	; (8016ab4 <RegionEU868InitDefaults+0x12c>)
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8016a4e:	2201      	movs	r2, #1
 8016a50:	4619      	mov	r1, r3
 8016a52:	f7ff f853 	bl	8015afc <RegionCommonChanMaskCopy>
 8016a56:	e028      	b.n	8016aaa <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8016a58:	4b16      	ldr	r3, [pc, #88]	; (8016ab4 <RegionEU868InitDefaults+0x12c>)
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	2200      	movs	r2, #0
 8016a5e:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8016a60:	4b14      	ldr	r3, [pc, #80]	; (8016ab4 <RegionEU868InitDefaults+0x12c>)
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	2200      	movs	r2, #0
 8016a66:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8016a68:	4b12      	ldr	r3, [pc, #72]	; (8016ab4 <RegionEU868InitDefaults+0x12c>)
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016a70:	4b10      	ldr	r3, [pc, #64]	; (8016ab4 <RegionEU868InitDefaults+0x12c>)
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8016a78:	4b0e      	ldr	r3, [pc, #56]	; (8016ab4 <RegionEU868InitDefaults+0x12c>)
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8016a80:	2201      	movs	r2, #1
 8016a82:	4619      	mov	r1, r3
 8016a84:	f7ff f83a 	bl	8015afc <RegionCommonChanMaskCopy>
            break;
 8016a88:	e00f      	b.n	8016aaa <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8016a8a:	4b0a      	ldr	r3, [pc, #40]	; (8016ab4 <RegionEU868InitDefaults+0x12c>)
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8016a92:	4b08      	ldr	r3, [pc, #32]	; (8016ab4 <RegionEU868InitDefaults+0x12c>)
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8016a9a:	4b06      	ldr	r3, [pc, #24]	; (8016ab4 <RegionEU868InitDefaults+0x12c>)
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	430a      	orrs	r2, r1
 8016aa0:	b292      	uxth	r2, r2
 8016aa2:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 8016aa6:	e000      	b.n	8016aaa <RegionEU868InitDefaults+0x122>
            break;
 8016aa8:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016aaa:	37c0      	adds	r7, #192	; 0xc0
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}
 8016ab0:	200020c0 	.word	0x200020c0
 8016ab4:	200020c4 	.word	0x200020c4
 8016ab8:	0801cb2c 	.word	0x0801cb2c
 8016abc:	0801cb38 	.word	0x0801cb38
 8016ac0:	0801cb44 	.word	0x0801cb44

08016ac4 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016ac4:	b580      	push	{r7, lr}
 8016ac6:	b084      	sub	sp, #16
 8016ac8:	af00      	add	r7, sp, #0
 8016aca:	6078      	str	r0, [r7, #4]
 8016acc:	460b      	mov	r3, r1
 8016ace:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8016ad0:	78fb      	ldrb	r3, [r7, #3]
 8016ad2:	2b0f      	cmp	r3, #15
 8016ad4:	d86c      	bhi.n	8016bb0 <RegionEU868Verify+0xec>
 8016ad6:	a201      	add	r2, pc, #4	; (adr r2, 8016adc <RegionEU868Verify+0x18>)
 8016ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016adc:	08016b1d 	.word	0x08016b1d
 8016ae0:	08016bb1 	.word	0x08016bb1
 8016ae4:	08016bb1 	.word	0x08016bb1
 8016ae8:	08016bb1 	.word	0x08016bb1
 8016aec:	08016bb1 	.word	0x08016bb1
 8016af0:	08016b35 	.word	0x08016b35
 8016af4:	08016b53 	.word	0x08016b53
 8016af8:	08016b71 	.word	0x08016b71
 8016afc:	08016bb1 	.word	0x08016bb1
 8016b00:	08016b8f 	.word	0x08016b8f
 8016b04:	08016b8f 	.word	0x08016b8f
 8016b08:	08016bb1 	.word	0x08016bb1
 8016b0c:	08016bb1 	.word	0x08016bb1
 8016b10:	08016bb1 	.word	0x08016bb1
 8016b14:	08016bb1 	.word	0x08016bb1
 8016b18:	08016bad 	.word	0x08016bad
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8016b1c:	2300      	movs	r3, #0
 8016b1e:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	f107 020f 	add.w	r2, r7, #15
 8016b28:	4611      	mov	r1, r2
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	f7ff fcee 	bl	801650c <VerifyRfFreq>
 8016b30:	4603      	mov	r3, r0
 8016b32:	e03e      	b.n	8016bb2 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	f993 3000 	ldrsb.w	r3, [r3]
 8016b3a:	2207      	movs	r2, #7
 8016b3c:	2100      	movs	r1, #0
 8016b3e:	4618      	mov	r0, r3
 8016b40:	f7fe ff5f 	bl	8015a02 <RegionCommonValueInRange>
 8016b44:	4603      	mov	r3, r0
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	bf14      	ite	ne
 8016b4a:	2301      	movne	r3, #1
 8016b4c:	2300      	moveq	r3, #0
 8016b4e:	b2db      	uxtb	r3, r3
 8016b50:	e02f      	b.n	8016bb2 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	f993 3000 	ldrsb.w	r3, [r3]
 8016b58:	2205      	movs	r2, #5
 8016b5a:	2100      	movs	r1, #0
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f7fe ff50 	bl	8015a02 <RegionCommonValueInRange>
 8016b62:	4603      	mov	r3, r0
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	bf14      	ite	ne
 8016b68:	2301      	movne	r3, #1
 8016b6a:	2300      	moveq	r3, #0
 8016b6c:	b2db      	uxtb	r3, r3
 8016b6e:	e020      	b.n	8016bb2 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	f993 3000 	ldrsb.w	r3, [r3]
 8016b76:	2207      	movs	r2, #7
 8016b78:	2100      	movs	r1, #0
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	f7fe ff41 	bl	8015a02 <RegionCommonValueInRange>
 8016b80:	4603      	mov	r3, r0
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	bf14      	ite	ne
 8016b86:	2301      	movne	r3, #1
 8016b88:	2300      	moveq	r3, #0
 8016b8a:	b2db      	uxtb	r3, r3
 8016b8c:	e011      	b.n	8016bb2 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	f993 3000 	ldrsb.w	r3, [r3]
 8016b94:	2207      	movs	r2, #7
 8016b96:	2100      	movs	r1, #0
 8016b98:	4618      	mov	r0, r3
 8016b9a:	f7fe ff32 	bl	8015a02 <RegionCommonValueInRange>
 8016b9e:	4603      	mov	r3, r0
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	bf14      	ite	ne
 8016ba4:	2301      	movne	r3, #1
 8016ba6:	2300      	moveq	r3, #0
 8016ba8:	b2db      	uxtb	r3, r3
 8016baa:	e002      	b.n	8016bb2 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8016bac:	2301      	movs	r3, #1
 8016bae:	e000      	b.n	8016bb2 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8016bb0:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	3710      	adds	r7, #16
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	bd80      	pop	{r7, pc}
 8016bba:	bf00      	nop

08016bbc <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b08a      	sub	sp, #40	; 0x28
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8016bc4:	2350      	movs	r3, #80	; 0x50
 8016bc6:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	791b      	ldrb	r3, [r3, #4]
 8016bce:	2b10      	cmp	r3, #16
 8016bd0:	d162      	bne.n	8016c98 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	330f      	adds	r3, #15
 8016bd8:	781b      	ldrb	r3, [r3, #0]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d15e      	bne.n	8016c9c <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016bde:	2300      	movs	r3, #0
 8016be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016be4:	2303      	movs	r3, #3
 8016be6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016bea:	e050      	b.n	8016c8e <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8016bec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016bf0:	2b07      	cmp	r3, #7
 8016bf2:	d824      	bhi.n	8016c3e <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	681a      	ldr	r2, [r3, #0]
 8016bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bfc:	4413      	add	r3, r2
 8016bfe:	781b      	ldrb	r3, [r3, #0]
 8016c00:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8016c02:	69ba      	ldr	r2, [r7, #24]
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	6819      	ldr	r1, [r3, #0]
 8016c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c0c:	3301      	adds	r3, #1
 8016c0e:	440b      	add	r3, r1
 8016c10:	781b      	ldrb	r3, [r3, #0]
 8016c12:	021b      	lsls	r3, r3, #8
 8016c14:	4313      	orrs	r3, r2
 8016c16:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8016c18:	69ba      	ldr	r2, [r7, #24]
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	6819      	ldr	r1, [r3, #0]
 8016c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c22:	3302      	adds	r3, #2
 8016c24:	440b      	add	r3, r1
 8016c26:	781b      	ldrb	r3, [r3, #0]
 8016c28:	041b      	lsls	r3, r3, #16
 8016c2a:	4313      	orrs	r3, r2
 8016c2c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8016c2e:	69bb      	ldr	r3, [r7, #24]
 8016c30:	2264      	movs	r2, #100	; 0x64
 8016c32:	fb02 f303 	mul.w	r3, r2, r3
 8016c36:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8016c38:	2300      	movs	r3, #0
 8016c3a:	61fb      	str	r3, [r7, #28]
 8016c3c:	e006      	b.n	8016c4c <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8016c3e:	2300      	movs	r3, #0
 8016c40:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8016c42:	2300      	movs	r3, #0
 8016c44:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8016c48:	2300      	movs	r3, #0
 8016c4a:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8016c4c:	69bb      	ldr	r3, [r7, #24]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d00b      	beq.n	8016c6a <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8016c52:	f107 0318 	add.w	r3, r7, #24
 8016c56:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8016c58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c5c:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8016c5e:	f107 0310 	add.w	r3, r7, #16
 8016c62:	4618      	mov	r0, r3
 8016c64:	f000 fd0e 	bl	8017684 <RegionEU868ChannelAdd>
 8016c68:	e007      	b.n	8016c7a <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8016c6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c6e:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8016c70:	f107 030c 	add.w	r3, r7, #12
 8016c74:	4618      	mov	r0, r3
 8016c76:	f000 fda7 	bl	80177c8 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c7e:	3303      	adds	r3, #3
 8016c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016c84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c88:	3301      	adds	r3, #1
 8016c8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016c8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c92:	2b0f      	cmp	r3, #15
 8016c94:	d9aa      	bls.n	8016bec <RegionEU868ApplyCFList+0x30>
 8016c96:	e002      	b.n	8016c9e <RegionEU868ApplyCFList+0xe2>
        return;
 8016c98:	bf00      	nop
 8016c9a:	e000      	b.n	8016c9e <RegionEU868ApplyCFList+0xe2>
        return;
 8016c9c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016c9e:	3728      	adds	r7, #40	; 0x28
 8016ca0:	46bd      	mov	sp, r7
 8016ca2:	bd80      	pop	{r7, pc}

08016ca4 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b082      	sub	sp, #8
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	791b      	ldrb	r3, [r3, #4]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d002      	beq.n	8016cba <RegionEU868ChanMaskSet+0x16>
 8016cb4:	2b01      	cmp	r3, #1
 8016cb6:	d00b      	beq.n	8016cd0 <RegionEU868ChanMaskSet+0x2c>
 8016cb8:	e015      	b.n	8016ce6 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016cba:	4b0e      	ldr	r3, [pc, #56]	; (8016cf4 <RegionEU868ChanMaskSet+0x50>)
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	2201      	movs	r2, #1
 8016cc8:	4619      	mov	r1, r3
 8016cca:	f7fe ff17 	bl	8015afc <RegionCommonChanMaskCopy>
            break;
 8016cce:	e00c      	b.n	8016cea <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016cd0:	4b08      	ldr	r3, [pc, #32]	; (8016cf4 <RegionEU868ChanMaskSet+0x50>)
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	2201      	movs	r2, #1
 8016cde:	4619      	mov	r1, r3
 8016ce0:	f7fe ff0c 	bl	8015afc <RegionCommonChanMaskCopy>
            break;
 8016ce4:	e001      	b.n	8016cea <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	e000      	b.n	8016cec <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8016cea:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016cec:	4618      	mov	r0, r3
 8016cee:	3708      	adds	r7, #8
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	bd80      	pop	{r7, pc}
 8016cf4:	200020c4 	.word	0x200020c4

08016cf8 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b088      	sub	sp, #32
 8016cfc:	af02      	add	r7, sp, #8
 8016cfe:	60ba      	str	r2, [r7, #8]
 8016d00:	607b      	str	r3, [r7, #4]
 8016d02:	4603      	mov	r3, r0
 8016d04:	73fb      	strb	r3, [r7, #15]
 8016d06:	460b      	mov	r3, r1
 8016d08:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8016d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d12:	2b07      	cmp	r3, #7
 8016d14:	bfa8      	it	ge
 8016d16:	2307      	movge	r3, #7
 8016d18:	b25a      	sxtb	r2, r3
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016d24:	491e      	ldr	r1, [pc, #120]	; (8016da0 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016d26:	4618      	mov	r0, r3
 8016d28:	f7ff fb88 	bl	801643c <RegionCommonGetBandwidth>
 8016d2c:	4603      	mov	r3, r0
 8016d2e:	b2da      	uxtb	r2, r3
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016d3a:	2b07      	cmp	r3, #7
 8016d3c:	d10a      	bne.n	8016d54 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016d44:	461a      	mov	r2, r3
 8016d46:	4b17      	ldr	r3, [pc, #92]	; (8016da4 <RegionEU868ComputeRxWindowParameters+0xac>)
 8016d48:	5c9b      	ldrb	r3, [r3, r2]
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	f7ff f90a 	bl	8015f64 <RegionCommonComputeSymbolTimeFsk>
 8016d50:	6178      	str	r0, [r7, #20]
 8016d52:	e011      	b.n	8016d78 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016d5a:	461a      	mov	r2, r3
 8016d5c:	4b11      	ldr	r3, [pc, #68]	; (8016da4 <RegionEU868ComputeRxWindowParameters+0xac>)
 8016d5e:	5c9a      	ldrb	r2, [r3, r2]
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016d66:	4619      	mov	r1, r3
 8016d68:	4b0d      	ldr	r3, [pc, #52]	; (8016da0 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016d6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016d6e:	4619      	mov	r1, r3
 8016d70:	4610      	mov	r0, r2
 8016d72:	f7ff f8e1 	bl	8015f38 <RegionCommonComputeSymbolTimeLoRa>
 8016d76:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8016d78:	4b0b      	ldr	r3, [pc, #44]	; (8016da8 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8016d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016d7c:	4798      	blx	r3
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	3308      	adds	r3, #8
 8016d82:	687a      	ldr	r2, [r7, #4]
 8016d84:	320c      	adds	r2, #12
 8016d86:	7bb9      	ldrb	r1, [r7, #14]
 8016d88:	9201      	str	r2, [sp, #4]
 8016d8a:	9300      	str	r3, [sp, #0]
 8016d8c:	4603      	mov	r3, r0
 8016d8e:	68ba      	ldr	r2, [r7, #8]
 8016d90:	6978      	ldr	r0, [r7, #20]
 8016d92:	f7ff f8f7 	bl	8015f84 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8016d96:	bf00      	nop
 8016d98:	3718      	adds	r7, #24
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	bd80      	pop	{r7, pc}
 8016d9e:	bf00      	nop
 8016da0:	0801d080 	.word	0x0801d080
 8016da4:	0801d078 	.word	0x0801d078
 8016da8:	0801d0b0 	.word	0x0801d0b0

08016dac <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016dac:	b5b0      	push	{r4, r5, r7, lr}
 8016dae:	b090      	sub	sp, #64	; 0x40
 8016db0:	af0a      	add	r7, sp, #40	; 0x28
 8016db2:	6078      	str	r0, [r7, #4]
 8016db4:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	785b      	ldrb	r3, [r3, #1]
 8016dba:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	685b      	ldr	r3, [r3, #4]
 8016dc8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8016dca:	4b5a      	ldr	r3, [pc, #360]	; (8016f34 <RegionEU868RxConfig+0x188>)
 8016dcc:	685b      	ldr	r3, [r3, #4]
 8016dce:	4798      	blx	r3
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d001      	beq.n	8016dda <RegionEU868RxConfig+0x2e>
    {
        return false;
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	e0a8      	b.n	8016f2c <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	7cdb      	ldrb	r3, [r3, #19]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d126      	bne.n	8016e30 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8016de2:	4b55      	ldr	r3, [pc, #340]	; (8016f38 <RegionEU868RxConfig+0x18c>)
 8016de4:	681a      	ldr	r2, [r3, #0]
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	781b      	ldrb	r3, [r3, #0]
 8016dea:	4619      	mov	r1, r3
 8016dec:	460b      	mov	r3, r1
 8016dee:	005b      	lsls	r3, r3, #1
 8016df0:	440b      	add	r3, r1
 8016df2:	009b      	lsls	r3, r3, #2
 8016df4:	4413      	add	r3, r2
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8016dfa:	4b4f      	ldr	r3, [pc, #316]	; (8016f38 <RegionEU868RxConfig+0x18c>)
 8016dfc:	681a      	ldr	r2, [r3, #0]
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	781b      	ldrb	r3, [r3, #0]
 8016e02:	4619      	mov	r1, r3
 8016e04:	460b      	mov	r3, r1
 8016e06:	005b      	lsls	r3, r3, #1
 8016e08:	440b      	add	r3, r1
 8016e0a:	009b      	lsls	r3, r3, #2
 8016e0c:	4413      	add	r3, r2
 8016e0e:	3304      	adds	r3, #4
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d00c      	beq.n	8016e30 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8016e16:	4b48      	ldr	r3, [pc, #288]	; (8016f38 <RegionEU868RxConfig+0x18c>)
 8016e18:	681a      	ldr	r2, [r3, #0]
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	781b      	ldrb	r3, [r3, #0]
 8016e1e:	4619      	mov	r1, r3
 8016e20:	460b      	mov	r3, r1
 8016e22:	005b      	lsls	r3, r3, #1
 8016e24:	440b      	add	r3, r1
 8016e26:	009b      	lsls	r3, r3, #2
 8016e28:	4413      	add	r3, r2
 8016e2a:	3304      	adds	r3, #4
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8016e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e34:	4a41      	ldr	r2, [pc, #260]	; (8016f3c <RegionEU868RxConfig+0x190>)
 8016e36:	5cd3      	ldrb	r3, [r2, r3]
 8016e38:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8016e3a:	4b3e      	ldr	r3, [pc, #248]	; (8016f34 <RegionEU868RxConfig+0x188>)
 8016e3c:	68db      	ldr	r3, [r3, #12]
 8016e3e:	6938      	ldr	r0, [r7, #16]
 8016e40:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8016e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e46:	2b07      	cmp	r3, #7
 8016e48:	d128      	bne.n	8016e9c <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8016e4e:	4b39      	ldr	r3, [pc, #228]	; (8016f34 <RegionEU868RxConfig+0x188>)
 8016e50:	699c      	ldr	r4, [r3, #24]
 8016e52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016e56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016e5a:	fb02 f303 	mul.w	r3, r2, r3
 8016e5e:	4619      	mov	r1, r3
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	689b      	ldr	r3, [r3, #8]
 8016e64:	b29b      	uxth	r3, r3
 8016e66:	687a      	ldr	r2, [r7, #4]
 8016e68:	7c92      	ldrb	r2, [r2, #18]
 8016e6a:	7df8      	ldrb	r0, [r7, #23]
 8016e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8016e6e:	2200      	movs	r2, #0
 8016e70:	9208      	str	r2, [sp, #32]
 8016e72:	2200      	movs	r2, #0
 8016e74:	9207      	str	r2, [sp, #28]
 8016e76:	2200      	movs	r2, #0
 8016e78:	9206      	str	r2, [sp, #24]
 8016e7a:	2201      	movs	r2, #1
 8016e7c:	9205      	str	r2, [sp, #20]
 8016e7e:	2200      	movs	r2, #0
 8016e80:	9204      	str	r2, [sp, #16]
 8016e82:	2200      	movs	r2, #0
 8016e84:	9203      	str	r2, [sp, #12]
 8016e86:	9302      	str	r3, [sp, #8]
 8016e88:	2305      	movs	r3, #5
 8016e8a:	9301      	str	r3, [sp, #4]
 8016e8c:	4b2c      	ldr	r3, [pc, #176]	; (8016f40 <RegionEU868RxConfig+0x194>)
 8016e8e:	9300      	str	r3, [sp, #0]
 8016e90:	2300      	movs	r3, #0
 8016e92:	460a      	mov	r2, r1
 8016e94:	f24c 3150 	movw	r1, #50000	; 0xc350
 8016e98:	47a0      	blx	r4
 8016e9a:	e024      	b.n	8016ee6 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8016e9c:	2301      	movs	r3, #1
 8016e9e:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8016ea0:	4b24      	ldr	r3, [pc, #144]	; (8016f34 <RegionEU868RxConfig+0x188>)
 8016ea2:	699c      	ldr	r4, [r3, #24]
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	789b      	ldrb	r3, [r3, #2]
 8016ea8:	461d      	mov	r5, r3
 8016eaa:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	689b      	ldr	r3, [r3, #8]
 8016eb2:	b29b      	uxth	r3, r3
 8016eb4:	687a      	ldr	r2, [r7, #4]
 8016eb6:	7c92      	ldrb	r2, [r2, #18]
 8016eb8:	7df8      	ldrb	r0, [r7, #23]
 8016eba:	9209      	str	r2, [sp, #36]	; 0x24
 8016ebc:	2201      	movs	r2, #1
 8016ebe:	9208      	str	r2, [sp, #32]
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	9207      	str	r2, [sp, #28]
 8016ec4:	2200      	movs	r2, #0
 8016ec6:	9206      	str	r2, [sp, #24]
 8016ec8:	2200      	movs	r2, #0
 8016eca:	9205      	str	r2, [sp, #20]
 8016ecc:	2200      	movs	r2, #0
 8016ece:	9204      	str	r2, [sp, #16]
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	9203      	str	r2, [sp, #12]
 8016ed4:	9302      	str	r3, [sp, #8]
 8016ed6:	2308      	movs	r3, #8
 8016ed8:	9301      	str	r3, [sp, #4]
 8016eda:	2300      	movs	r3, #0
 8016edc:	9300      	str	r3, [sp, #0]
 8016ede:	2301      	movs	r3, #1
 8016ee0:	460a      	mov	r2, r1
 8016ee2:	4629      	mov	r1, r5
 8016ee4:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	7c5b      	ldrb	r3, [r3, #17]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d005      	beq.n	8016efa <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8016eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ef2:	4a14      	ldr	r2, [pc, #80]	; (8016f44 <RegionEU868RxConfig+0x198>)
 8016ef4:	5cd3      	ldrb	r3, [r2, r3]
 8016ef6:	75bb      	strb	r3, [r7, #22]
 8016ef8:	e004      	b.n	8016f04 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8016efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016efe:	4a12      	ldr	r2, [pc, #72]	; (8016f48 <RegionEU868RxConfig+0x19c>)
 8016f00:	5cd3      	ldrb	r3, [r2, r3]
 8016f02:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8016f04:	4b0b      	ldr	r3, [pc, #44]	; (8016f34 <RegionEU868RxConfig+0x188>)
 8016f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016f08:	7dba      	ldrb	r2, [r7, #22]
 8016f0a:	320d      	adds	r2, #13
 8016f0c:	b2d1      	uxtb	r1, r2
 8016f0e:	7dfa      	ldrb	r2, [r7, #23]
 8016f10:	4610      	mov	r0, r2
 8016f12:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	7cdb      	ldrb	r3, [r3, #19]
 8016f18:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016f1c:	6939      	ldr	r1, [r7, #16]
 8016f1e:	4618      	mov	r0, r3
 8016f20:	f7ff faaa 	bl	8016478 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8016f24:	683b      	ldr	r3, [r7, #0]
 8016f26:	7bfa      	ldrb	r2, [r7, #15]
 8016f28:	701a      	strb	r2, [r3, #0]
    return true;
 8016f2a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	3718      	adds	r7, #24
 8016f30:	46bd      	mov	sp, r7
 8016f32:	bdb0      	pop	{r4, r5, r7, pc}
 8016f34:	0801d0b0 	.word	0x0801d0b0
 8016f38:	200020c4 	.word	0x200020c4
 8016f3c:	0801d078 	.word	0x0801d078
 8016f40:	00014585 	.word	0x00014585
 8016f44:	0801d0a8 	.word	0x0801d0a8
 8016f48:	0801d0a0 	.word	0x0801d0a0

08016f4c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016f4c:	b590      	push	{r4, r7, lr}
 8016f4e:	b093      	sub	sp, #76	; 0x4c
 8016f50:	af0a      	add	r7, sp, #40	; 0x28
 8016f52:	60f8      	str	r0, [r7, #12]
 8016f54:	60b9      	str	r1, [r7, #8]
 8016f56:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016f5e:	461a      	mov	r2, r3
 8016f60:	4b5d      	ldr	r3, [pc, #372]	; (80170d8 <RegionEU868TxConfig+0x18c>)
 8016f62:	5c9b      	ldrb	r3, [r3, r2]
 8016f64:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8016f6c:	4b5b      	ldr	r3, [pc, #364]	; (80170dc <RegionEU868TxConfig+0x190>)
 8016f6e:	681a      	ldr	r2, [r3, #0]
 8016f70:	4b5b      	ldr	r3, [pc, #364]	; (80170e0 <RegionEU868TxConfig+0x194>)
 8016f72:	6819      	ldr	r1, [r3, #0]
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	781b      	ldrb	r3, [r3, #0]
 8016f78:	461c      	mov	r4, r3
 8016f7a:	4623      	mov	r3, r4
 8016f7c:	005b      	lsls	r3, r3, #1
 8016f7e:	4423      	add	r3, r4
 8016f80:	009b      	lsls	r3, r3, #2
 8016f82:	440b      	add	r3, r1
 8016f84:	3309      	adds	r3, #9
 8016f86:	781b      	ldrb	r3, [r3, #0]
 8016f88:	4619      	mov	r1, r3
 8016f8a:	460b      	mov	r3, r1
 8016f8c:	005b      	lsls	r3, r3, #1
 8016f8e:	440b      	add	r3, r1
 8016f90:	00db      	lsls	r3, r3, #3
 8016f92:	4413      	add	r3, r2
 8016f94:	3302      	adds	r3, #2
 8016f96:	f993 3000 	ldrsb.w	r3, [r3]
 8016f9a:	4619      	mov	r1, r3
 8016f9c:	f7ff fa39 	bl	8016412 <RegionCommonLimitTxPower>
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016faa:	494e      	ldr	r1, [pc, #312]	; (80170e4 <RegionEU868TxConfig+0x198>)
 8016fac:	4618      	mov	r0, r3
 8016fae:	f7ff fa45 	bl	801643c <RegionCommonGetBandwidth>
 8016fb2:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	6859      	ldr	r1, [r3, #4]
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	689a      	ldr	r2, [r3, #8]
 8016fc0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	f7ff f895 	bl	80160f4 <RegionCommonComputeTxPower>
 8016fca:	4603      	mov	r3, r0
 8016fcc:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8016fce:	4b46      	ldr	r3, [pc, #280]	; (80170e8 <RegionEU868TxConfig+0x19c>)
 8016fd0:	68da      	ldr	r2, [r3, #12]
 8016fd2:	4b43      	ldr	r3, [pc, #268]	; (80170e0 <RegionEU868TxConfig+0x194>)
 8016fd4:	6819      	ldr	r1, [r3, #0]
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	781b      	ldrb	r3, [r3, #0]
 8016fda:	4618      	mov	r0, r3
 8016fdc:	4603      	mov	r3, r0
 8016fde:	005b      	lsls	r3, r3, #1
 8016fe0:	4403      	add	r3, r0
 8016fe2:	009b      	lsls	r3, r3, #2
 8016fe4:	440b      	add	r3, r1
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	4618      	mov	r0, r3
 8016fea:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016ff2:	2b07      	cmp	r3, #7
 8016ff4:	d124      	bne.n	8017040 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8016ffa:	4b3b      	ldr	r3, [pc, #236]	; (80170e8 <RegionEU868TxConfig+0x19c>)
 8016ffc:	69dc      	ldr	r4, [r3, #28]
 8016ffe:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017002:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017006:	fb02 f303 	mul.w	r3, r2, r3
 801700a:	461a      	mov	r2, r3
 801700c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017010:	7ff8      	ldrb	r0, [r7, #31]
 8017012:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8017016:	9308      	str	r3, [sp, #32]
 8017018:	2300      	movs	r3, #0
 801701a:	9307      	str	r3, [sp, #28]
 801701c:	2300      	movs	r3, #0
 801701e:	9306      	str	r3, [sp, #24]
 8017020:	2300      	movs	r3, #0
 8017022:	9305      	str	r3, [sp, #20]
 8017024:	2301      	movs	r3, #1
 8017026:	9304      	str	r3, [sp, #16]
 8017028:	2300      	movs	r3, #0
 801702a:	9303      	str	r3, [sp, #12]
 801702c:	2305      	movs	r3, #5
 801702e:	9302      	str	r3, [sp, #8]
 8017030:	2300      	movs	r3, #0
 8017032:	9301      	str	r3, [sp, #4]
 8017034:	9200      	str	r2, [sp, #0]
 8017036:	69bb      	ldr	r3, [r7, #24]
 8017038:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801703c:	47a0      	blx	r4
 801703e:	e01d      	b.n	801707c <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8017040:	2301      	movs	r3, #1
 8017042:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8017044:	4b28      	ldr	r3, [pc, #160]	; (80170e8 <RegionEU868TxConfig+0x19c>)
 8017046:	69dc      	ldr	r4, [r3, #28]
 8017048:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801704c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017050:	7ff8      	ldrb	r0, [r7, #31]
 8017052:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8017056:	9208      	str	r2, [sp, #32]
 8017058:	2200      	movs	r2, #0
 801705a:	9207      	str	r2, [sp, #28]
 801705c:	2200      	movs	r2, #0
 801705e:	9206      	str	r2, [sp, #24]
 8017060:	2200      	movs	r2, #0
 8017062:	9205      	str	r2, [sp, #20]
 8017064:	2201      	movs	r2, #1
 8017066:	9204      	str	r2, [sp, #16]
 8017068:	2200      	movs	r2, #0
 801706a:	9203      	str	r2, [sp, #12]
 801706c:	2208      	movs	r2, #8
 801706e:	9202      	str	r2, [sp, #8]
 8017070:	2201      	movs	r2, #1
 8017072:	9201      	str	r2, [sp, #4]
 8017074:	9300      	str	r3, [sp, #0]
 8017076:	69bb      	ldr	r3, [r7, #24]
 8017078:	2200      	movs	r2, #0
 801707a:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801707c:	4b18      	ldr	r3, [pc, #96]	; (80170e0 <RegionEU868TxConfig+0x194>)
 801707e:	681a      	ldr	r2, [r3, #0]
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	781b      	ldrb	r3, [r3, #0]
 8017084:	4619      	mov	r1, r3
 8017086:	460b      	mov	r3, r1
 8017088:	005b      	lsls	r3, r3, #1
 801708a:	440b      	add	r3, r1
 801708c:	009b      	lsls	r3, r3, #2
 801708e:	4413      	add	r3, r2
 8017090:	681a      	ldr	r2, [r3, #0]
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017098:	4619      	mov	r1, r3
 801709a:	4610      	mov	r0, r2
 801709c:	f7ff fa1e 	bl	80164dc <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	899b      	ldrh	r3, [r3, #12]
 80170aa:	4619      	mov	r1, r3
 80170ac:	4610      	mov	r0, r2
 80170ae:	f7ff faa3 	bl	80165f8 <GetTimeOnAir>
 80170b2:	4602      	mov	r2, r0
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80170b8:	4b0b      	ldr	r3, [pc, #44]	; (80170e8 <RegionEU868TxConfig+0x19c>)
 80170ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80170bc:	68fa      	ldr	r2, [r7, #12]
 80170be:	8992      	ldrh	r2, [r2, #12]
 80170c0:	b2d1      	uxtb	r1, r2
 80170c2:	7ffa      	ldrb	r2, [r7, #31]
 80170c4:	4610      	mov	r0, r2
 80170c6:	4798      	blx	r3

    *txPower = txPowerLimited;
 80170c8:	68bb      	ldr	r3, [r7, #8]
 80170ca:	7f7a      	ldrb	r2, [r7, #29]
 80170cc:	701a      	strb	r2, [r3, #0]
    return true;
 80170ce:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80170d0:	4618      	mov	r0, r3
 80170d2:	3724      	adds	r7, #36	; 0x24
 80170d4:	46bd      	mov	sp, r7
 80170d6:	bd90      	pop	{r4, r7, pc}
 80170d8:	0801d078 	.word	0x0801d078
 80170dc:	200020c0 	.word	0x200020c0
 80170e0:	200020c4 	.word	0x200020c4
 80170e4:	0801d080 	.word	0x0801d080
 80170e8:	0801d0b0 	.word	0x0801d0b0

080170ec <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80170ec:	b590      	push	{r4, r7, lr}
 80170ee:	b093      	sub	sp, #76	; 0x4c
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	60f8      	str	r0, [r7, #12]
 80170f4:	60b9      	str	r1, [r7, #8]
 80170f6:	607a      	str	r2, [r7, #4]
 80170f8:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80170fa:	2307      	movs	r3, #7
 80170fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8017100:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017104:	2200      	movs	r2, #0
 8017106:	601a      	str	r2, [r3, #0]
 8017108:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801710a:	2300      	movs	r3, #0
 801710c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8017110:	2300      	movs	r3, #0
 8017112:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8017116:	2300      	movs	r3, #0
 8017118:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801711a:	e085      	b.n	8017228 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	685a      	ldr	r2, [r3, #4]
 8017120:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017124:	4413      	add	r3, r2
 8017126:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801712a:	4611      	mov	r1, r2
 801712c:	4618      	mov	r0, r3
 801712e:	f7fe fe29 	bl	8015d84 <RegionCommonParseLinkAdrReq>
 8017132:	4603      	mov	r3, r0
 8017134:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8017138:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801713c:	2b00      	cmp	r3, #0
 801713e:	d07b      	beq.n	8017238 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8017140:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017144:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017148:	4413      	add	r3, r2
 801714a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801714e:	2307      	movs	r3, #7
 8017150:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8017154:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017158:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801715a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801715e:	2b00      	cmp	r3, #0
 8017160:	d109      	bne.n	8017176 <RegionEU868LinkAdrReq+0x8a>
 8017162:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017164:	2b00      	cmp	r3, #0
 8017166:	d106      	bne.n	8017176 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8017168:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801716c:	f023 0301 	bic.w	r3, r3, #1
 8017170:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8017174:	e058      	b.n	8017228 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8017176:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801717a:	2b00      	cmp	r3, #0
 801717c:	d003      	beq.n	8017186 <RegionEU868LinkAdrReq+0x9a>
 801717e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017182:	2b05      	cmp	r3, #5
 8017184:	d903      	bls.n	801718e <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8017186:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801718a:	2b06      	cmp	r3, #6
 801718c:	d906      	bls.n	801719c <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801718e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017192:	f023 0301 	bic.w	r3, r3, #1
 8017196:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801719a:	e045      	b.n	8017228 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801719c:	2300      	movs	r3, #0
 801719e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80171a2:	e03d      	b.n	8017220 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80171a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80171a8:	2b06      	cmp	r3, #6
 80171aa:	d118      	bne.n	80171de <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80171ac:	4b5f      	ldr	r3, [pc, #380]	; (801732c <RegionEU868LinkAdrReq+0x240>)
 80171ae:	6819      	ldr	r1, [r3, #0]
 80171b0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80171b4:	4613      	mov	r3, r2
 80171b6:	005b      	lsls	r3, r3, #1
 80171b8:	4413      	add	r3, r2
 80171ba:	009b      	lsls	r3, r3, #2
 80171bc:	440b      	add	r3, r1
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d028      	beq.n	8017216 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80171c4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80171c8:	2201      	movs	r2, #1
 80171ca:	fa02 f303 	lsl.w	r3, r2, r3
 80171ce:	b21a      	sxth	r2, r3
 80171d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80171d2:	b21b      	sxth	r3, r3
 80171d4:	4313      	orrs	r3, r2
 80171d6:	b21b      	sxth	r3, r3
 80171d8:	b29b      	uxth	r3, r3
 80171da:	877b      	strh	r3, [r7, #58]	; 0x3a
 80171dc:	e01b      	b.n	8017216 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80171de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80171e0:	461a      	mov	r2, r3
 80171e2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80171e6:	fa42 f303 	asr.w	r3, r2, r3
 80171ea:	f003 0301 	and.w	r3, r3, #1
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d011      	beq.n	8017216 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80171f2:	4b4e      	ldr	r3, [pc, #312]	; (801732c <RegionEU868LinkAdrReq+0x240>)
 80171f4:	6819      	ldr	r1, [r3, #0]
 80171f6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80171fa:	4613      	mov	r3, r2
 80171fc:	005b      	lsls	r3, r3, #1
 80171fe:	4413      	add	r3, r2
 8017200:	009b      	lsls	r3, r3, #2
 8017202:	440b      	add	r3, r1
 8017204:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8017206:	2b00      	cmp	r3, #0
 8017208:	d105      	bne.n	8017216 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801720a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801720e:	f023 0301 	bic.w	r3, r3, #1
 8017212:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017216:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801721a:	3301      	adds	r3, #1
 801721c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8017220:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017224:	2b0f      	cmp	r3, #15
 8017226:	d9bd      	bls.n	80171a4 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	7a1b      	ldrb	r3, [r3, #8]
 801722c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017230:	429a      	cmp	r2, r3
 8017232:	f4ff af73 	bcc.w	801711c <RegionEU868LinkAdrReq+0x30>
 8017236:	e000      	b.n	801723a <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8017238:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801723a:	2302      	movs	r3, #2
 801723c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	7a5b      	ldrb	r3, [r3, #9]
 8017244:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8017248:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801724c:	4618      	mov	r0, r3
 801724e:	f7ff fa23 	bl	8016698 <RegionEU868GetPhyParam>
 8017252:	4603      	mov	r3, r0
 8017254:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8017256:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801725a:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	7a9b      	ldrb	r3, [r3, #10]
 8017260:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8017262:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8017266:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8017268:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 801726c:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801726e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017272:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801727a:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8017282:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	7b5b      	ldrb	r3, [r3, #13]
 8017288:	b25b      	sxtb	r3, r3
 801728a:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 801728c:	2310      	movs	r3, #16
 801728e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8017290:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8017294:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8017296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017298:	b25b      	sxtb	r3, r3
 801729a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801729e:	2307      	movs	r3, #7
 80172a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80172a4:	4b21      	ldr	r3, [pc, #132]	; (801732c <RegionEU868LinkAdrReq+0x240>)
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80172aa:	2307      	movs	r3, #7
 80172ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80172b0:	2300      	movs	r3, #0
 80172b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80172bc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80172c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80172c4:	1c9a      	adds	r2, r3, #2
 80172c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80172ca:	1c59      	adds	r1, r3, #1
 80172cc:	f107 0010 	add.w	r0, r7, #16
 80172d0:	4623      	mov	r3, r4
 80172d2:	f7fe fda8 	bl	8015e26 <RegionCommonLinkAdrReqVerifyParams>
 80172d6:	4603      	mov	r3, r0
 80172d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80172dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80172e0:	2b07      	cmp	r3, #7
 80172e2:	d10d      	bne.n	8017300 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80172e4:	4b11      	ldr	r3, [pc, #68]	; (801732c <RegionEU868LinkAdrReq+0x240>)
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80172ec:	220c      	movs	r2, #12
 80172ee:	2100      	movs	r1, #0
 80172f0:	4618      	mov	r0, r3
 80172f2:	f000 fb7d 	bl	80179f0 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80172f6:	4b0d      	ldr	r3, [pc, #52]	; (801732c <RegionEU868LinkAdrReq+0x240>)
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80172fc:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8017300:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8017304:	68bb      	ldr	r3, [r7, #8]
 8017306:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8017308:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8017310:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8017314:	683b      	ldr	r3, [r7, #0]
 8017316:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8017318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801731a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801731e:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8017320:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8017324:	4618      	mov	r0, r3
 8017326:	374c      	adds	r7, #76	; 0x4c
 8017328:	46bd      	mov	sp, r7
 801732a:	bd90      	pop	{r4, r7, pc}
 801732c:	200020c4 	.word	0x200020c4

08017330 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b084      	sub	sp, #16
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8017338:	2307      	movs	r3, #7
 801733a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801733c:	2300      	movs	r3, #0
 801733e:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	685b      	ldr	r3, [r3, #4]
 8017344:	f107 020e 	add.w	r2, r7, #14
 8017348:	4611      	mov	r1, r2
 801734a:	4618      	mov	r0, r3
 801734c:	f7ff f8de 	bl	801650c <VerifyRfFreq>
 8017350:	4603      	mov	r3, r0
 8017352:	f083 0301 	eor.w	r3, r3, #1
 8017356:	b2db      	uxtb	r3, r3
 8017358:	2b00      	cmp	r3, #0
 801735a:	d003      	beq.n	8017364 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 801735c:	7bfb      	ldrb	r3, [r7, #15]
 801735e:	f023 0301 	bic.w	r3, r3, #1
 8017362:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	f993 3000 	ldrsb.w	r3, [r3]
 801736a:	2207      	movs	r2, #7
 801736c:	2100      	movs	r1, #0
 801736e:	4618      	mov	r0, r3
 8017370:	f7fe fb47 	bl	8015a02 <RegionCommonValueInRange>
 8017374:	4603      	mov	r3, r0
 8017376:	2b00      	cmp	r3, #0
 8017378:	d103      	bne.n	8017382 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 801737a:	7bfb      	ldrb	r3, [r7, #15]
 801737c:	f023 0302 	bic.w	r3, r3, #2
 8017380:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017388:	2205      	movs	r2, #5
 801738a:	2100      	movs	r1, #0
 801738c:	4618      	mov	r0, r3
 801738e:	f7fe fb38 	bl	8015a02 <RegionCommonValueInRange>
 8017392:	4603      	mov	r3, r0
 8017394:	2b00      	cmp	r3, #0
 8017396:	d103      	bne.n	80173a0 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8017398:	7bfb      	ldrb	r3, [r7, #15]
 801739a:	f023 0304 	bic.w	r3, r3, #4
 801739e:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 80173a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80173a2:	4618      	mov	r0, r3
 80173a4:	3710      	adds	r7, #16
 80173a6:	46bd      	mov	sp, r7
 80173a8:	bd80      	pop	{r7, pc}
	...

080173ac <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b086      	sub	sp, #24
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80173b4:	2303      	movs	r3, #3
 80173b6:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	681b      	ldr	r3, [r3, #0]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d114      	bne.n	80173ec <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80173c8:	b2db      	uxtb	r3, r3
 80173ca:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80173cc:	f107 0308 	add.w	r3, r7, #8
 80173d0:	4618      	mov	r0, r3
 80173d2:	f000 f9f9 	bl	80177c8 <RegionEU868ChannelsRemove>
 80173d6:	4603      	mov	r3, r0
 80173d8:	f083 0301 	eor.w	r3, r3, #1
 80173dc:	b2db      	uxtb	r3, r3
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d03b      	beq.n	801745a <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 80173e2:	7dfb      	ldrb	r3, [r7, #23]
 80173e4:	f023 0303 	bic.w	r3, r3, #3
 80173e8:	75fb      	strb	r3, [r7, #23]
 80173ea:	e036      	b.n	801745a <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80173f8:	b2db      	uxtb	r3, r3
 80173fa:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80173fc:	f107 030c 	add.w	r3, r7, #12
 8017400:	4618      	mov	r0, r3
 8017402:	f000 f93f 	bl	8017684 <RegionEU868ChannelAdd>
 8017406:	4603      	mov	r3, r0
 8017408:	2b06      	cmp	r3, #6
 801740a:	d820      	bhi.n	801744e <RegionEU868NewChannelReq+0xa2>
 801740c:	a201      	add	r2, pc, #4	; (adr r2, 8017414 <RegionEU868NewChannelReq+0x68>)
 801740e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017412:	bf00      	nop
 8017414:	08017459 	.word	0x08017459
 8017418:	0801744f 	.word	0x0801744f
 801741c:	0801744f 	.word	0x0801744f
 8017420:	0801744f 	.word	0x0801744f
 8017424:	08017431 	.word	0x08017431
 8017428:	0801743b 	.word	0x0801743b
 801742c:	08017445 	.word	0x08017445
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8017430:	7dfb      	ldrb	r3, [r7, #23]
 8017432:	f023 0301 	bic.w	r3, r3, #1
 8017436:	75fb      	strb	r3, [r7, #23]
                break;
 8017438:	e00f      	b.n	801745a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801743a:	7dfb      	ldrb	r3, [r7, #23]
 801743c:	f023 0302 	bic.w	r3, r3, #2
 8017440:	75fb      	strb	r3, [r7, #23]
                break;
 8017442:	e00a      	b.n	801745a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8017444:	7dfb      	ldrb	r3, [r7, #23]
 8017446:	f023 0303 	bic.w	r3, r3, #3
 801744a:	75fb      	strb	r3, [r7, #23]
                break;
 801744c:	e005      	b.n	801745a <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801744e:	7dfb      	ldrb	r3, [r7, #23]
 8017450:	f023 0303 	bic.w	r3, r3, #3
 8017454:	75fb      	strb	r3, [r7, #23]
                break;
 8017456:	e000      	b.n	801745a <RegionEU868NewChannelReq+0xae>
                break;
 8017458:	bf00      	nop
            }
        }
    }

    return status;
 801745a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801745e:	4618      	mov	r0, r3
 8017460:	3718      	adds	r7, #24
 8017462:	46bd      	mov	sp, r7
 8017464:	bd80      	pop	{r7, pc}
 8017466:	bf00      	nop

08017468 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8017468:	b480      	push	{r7}
 801746a:	b083      	sub	sp, #12
 801746c:	af00      	add	r7, sp, #0
 801746e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017474:	4618      	mov	r0, r3
 8017476:	370c      	adds	r7, #12
 8017478:	46bd      	mov	sp, r7
 801747a:	bc80      	pop	{r7}
 801747c:	4770      	bx	lr
	...

08017480 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8017480:	b580      	push	{r7, lr}
 8017482:	b084      	sub	sp, #16
 8017484:	af00      	add	r7, sp, #0
 8017486:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8017488:	2303      	movs	r3, #3
 801748a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801748c:	2300      	movs	r3, #0
 801748e:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	685b      	ldr	r3, [r3, #4]
 8017494:	f107 020e 	add.w	r2, r7, #14
 8017498:	4611      	mov	r1, r2
 801749a:	4618      	mov	r0, r3
 801749c:	f7ff f836 	bl	801650c <VerifyRfFreq>
 80174a0:	4603      	mov	r3, r0
 80174a2:	f083 0301 	eor.w	r3, r3, #1
 80174a6:	b2db      	uxtb	r3, r3
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d003      	beq.n	80174b4 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 80174ac:	7bfb      	ldrb	r3, [r7, #15]
 80174ae:	f023 0301 	bic.w	r3, r3, #1
 80174b2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80174b4:	4b13      	ldr	r3, [pc, #76]	; (8017504 <RegionEU868DlChannelReq+0x84>)
 80174b6:	681a      	ldr	r2, [r3, #0]
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	781b      	ldrb	r3, [r3, #0]
 80174bc:	4619      	mov	r1, r3
 80174be:	460b      	mov	r3, r1
 80174c0:	005b      	lsls	r3, r3, #1
 80174c2:	440b      	add	r3, r1
 80174c4:	009b      	lsls	r3, r3, #2
 80174c6:	4413      	add	r3, r2
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d103      	bne.n	80174d6 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 80174ce:	7bfb      	ldrb	r3, [r7, #15]
 80174d0:	f023 0302 	bic.w	r3, r3, #2
 80174d4:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80174d6:	7bfb      	ldrb	r3, [r7, #15]
 80174d8:	2b03      	cmp	r3, #3
 80174da:	d10d      	bne.n	80174f8 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80174dc:	4b09      	ldr	r3, [pc, #36]	; (8017504 <RegionEU868DlChannelReq+0x84>)
 80174de:	6819      	ldr	r1, [r3, #0]
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	781b      	ldrb	r3, [r3, #0]
 80174e4:	4618      	mov	r0, r3
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	685a      	ldr	r2, [r3, #4]
 80174ea:	4603      	mov	r3, r0
 80174ec:	005b      	lsls	r3, r3, #1
 80174ee:	4403      	add	r3, r0
 80174f0:	009b      	lsls	r3, r3, #2
 80174f2:	440b      	add	r3, r1
 80174f4:	3304      	adds	r3, #4
 80174f6:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 80174f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80174fc:	4618      	mov	r0, r3
 80174fe:	3710      	adds	r7, #16
 8017500:	46bd      	mov	sp, r7
 8017502:	bd80      	pop	{r7, pc}
 8017504:	200020c4 	.word	0x200020c4

08017508 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8017508:	b480      	push	{r7}
 801750a:	b083      	sub	sp, #12
 801750c:	af00      	add	r7, sp, #0
 801750e:	4603      	mov	r3, r0
 8017510:	460a      	mov	r2, r1
 8017512:	71fb      	strb	r3, [r7, #7]
 8017514:	4613      	mov	r3, r2
 8017516:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8017518:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 801751c:	4618      	mov	r0, r3
 801751e:	370c      	adds	r7, #12
 8017520:	46bd      	mov	sp, r7
 8017522:	bc80      	pop	{r7}
 8017524:	4770      	bx	lr
	...

08017528 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017528:	b580      	push	{r7, lr}
 801752a:	b09a      	sub	sp, #104	; 0x68
 801752c:	af02      	add	r7, sp, #8
 801752e:	60f8      	str	r0, [r7, #12]
 8017530:	60b9      	str	r1, [r7, #8]
 8017532:	607a      	str	r2, [r7, #4]
 8017534:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8017536:	2300      	movs	r3, #0
 8017538:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 801753c:	2300      	movs	r3, #0
 801753e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8017542:	2300      	movs	r3, #0
 8017544:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017546:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801754a:	2200      	movs	r2, #0
 801754c:	601a      	str	r2, [r3, #0]
 801754e:	605a      	str	r2, [r3, #4]
 8017550:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017552:	230c      	movs	r3, #12
 8017554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8017558:	2307      	movs	r3, #7
 801755a:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801755c:	4b47      	ldr	r3, [pc, #284]	; (801767c <RegionEU868NextChannel+0x154>)
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8017564:	2201      	movs	r2, #1
 8017566:	2100      	movs	r1, #0
 8017568:	4618      	mov	r0, r3
 801756a:	f7fe fa9b 	bl	8015aa4 <RegionCommonCountChannels>
 801756e:	4603      	mov	r3, r0
 8017570:	2b00      	cmp	r3, #0
 8017572:	d10a      	bne.n	801758a <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8017574:	4b41      	ldr	r3, [pc, #260]	; (801767c <RegionEU868NextChannel+0x154>)
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 801757c:	4b3f      	ldr	r3, [pc, #252]	; (801767c <RegionEU868NextChannel+0x154>)
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	f042 0207 	orr.w	r2, r2, #7
 8017584:	b292      	uxth	r2, r2
 8017586:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	7a5b      	ldrb	r3, [r3, #9]
 801758e:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017596:	b2db      	uxtb	r3, r3
 8017598:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801759a:	4b38      	ldr	r3, [pc, #224]	; (801767c <RegionEU868NextChannel+0x154>)
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80175a2:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80175a4:	4b35      	ldr	r3, [pc, #212]	; (801767c <RegionEU868NextChannel+0x154>)
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 80175aa:	4b35      	ldr	r3, [pc, #212]	; (8017680 <RegionEU868NextChannel+0x158>)
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80175b0:	2310      	movs	r3, #16
 80175b2:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80175b4:	f107 0312 	add.w	r3, r7, #18
 80175b8:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	685b      	ldr	r3, [r3, #4]
 80175c4:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	7a9b      	ldrb	r3, [r3, #10]
 80175ca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80175ce:	2306      	movs	r3, #6
 80175d0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80175d4:	68fa      	ldr	r2, [r7, #12]
 80175d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80175da:	320c      	adds	r2, #12
 80175dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80175e0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	7d1b      	ldrb	r3, [r3, #20]
 80175e8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	8adb      	ldrh	r3, [r3, #22]
 80175f6:	4619      	mov	r1, r3
 80175f8:	4610      	mov	r0, r2
 80175fa:	f7fe fffd 	bl	80165f8 <GetTimeOnAir>
 80175fe:	4603      	mov	r3, r0
 8017600:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8017602:	f107 0314 	add.w	r3, r7, #20
 8017606:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8017608:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 801760c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017610:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	9301      	str	r3, [sp, #4]
 8017618:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 801761c:	9300      	str	r3, [sp, #0]
 801761e:	460b      	mov	r3, r1
 8017620:	6839      	ldr	r1, [r7, #0]
 8017622:	f7fe fe56 	bl	80162d2 <RegionCommonIdentifyChannels>
 8017626:	4603      	mov	r3, r0
 8017628:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801762c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017630:	2b00      	cmp	r3, #0
 8017632:	d10e      	bne.n	8017652 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8017634:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8017638:	3b01      	subs	r3, #1
 801763a:	4619      	mov	r1, r3
 801763c:	2000      	movs	r0, #0
 801763e:	f000 f985 	bl	801794c <randr>
 8017642:	4603      	mov	r3, r0
 8017644:	3360      	adds	r3, #96	; 0x60
 8017646:	443b      	add	r3, r7
 8017648:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801764c:	68bb      	ldr	r3, [r7, #8]
 801764e:	701a      	strb	r2, [r3, #0]
 8017650:	e00e      	b.n	8017670 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8017652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017656:	2b0c      	cmp	r3, #12
 8017658:	d10a      	bne.n	8017670 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801765a:	4b08      	ldr	r3, [pc, #32]	; (801767c <RegionEU868NextChannel+0x154>)
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8017662:	4b06      	ldr	r3, [pc, #24]	; (801767c <RegionEU868NextChannel+0x154>)
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	f042 0207 	orr.w	r2, r2, #7
 801766a:	b292      	uxth	r2, r2
 801766c:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 8017670:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8017674:	4618      	mov	r0, r3
 8017676:	3760      	adds	r7, #96	; 0x60
 8017678:	46bd      	mov	sp, r7
 801767a:	bd80      	pop	{r7, pc}
 801767c:	200020c4 	.word	0x200020c4
 8017680:	200020c0 	.word	0x200020c0

08017684 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8017684:	b580      	push	{r7, lr}
 8017686:	b084      	sub	sp, #16
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801768c:	2300      	movs	r3, #0
 801768e:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8017690:	2300      	movs	r3, #0
 8017692:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8017694:	2300      	movs	r3, #0
 8017696:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	791b      	ldrb	r3, [r3, #4]
 801769c:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801769e:	7b7b      	ldrb	r3, [r7, #13]
 80176a0:	2b02      	cmp	r3, #2
 80176a2:	d801      	bhi.n	80176a8 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80176a4:	2306      	movs	r3, #6
 80176a6:	e089      	b.n	80177bc <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80176a8:	7b7b      	ldrb	r3, [r7, #13]
 80176aa:	2b0f      	cmp	r3, #15
 80176ac:	d901      	bls.n	80176b2 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80176ae:	2303      	movs	r3, #3
 80176b0:	e084      	b.n	80177bc <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	7a1b      	ldrb	r3, [r3, #8]
 80176b8:	f343 0303 	sbfx	r3, r3, #0, #4
 80176bc:	b25b      	sxtb	r3, r3
 80176be:	2207      	movs	r2, #7
 80176c0:	2100      	movs	r1, #0
 80176c2:	4618      	mov	r0, r3
 80176c4:	f7fe f99d 	bl	8015a02 <RegionCommonValueInRange>
 80176c8:	4603      	mov	r3, r0
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d101      	bne.n	80176d2 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 80176ce:	2301      	movs	r3, #1
 80176d0:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	7a1b      	ldrb	r3, [r3, #8]
 80176d8:	f343 1303 	sbfx	r3, r3, #4, #4
 80176dc:	b25b      	sxtb	r3, r3
 80176de:	2207      	movs	r2, #7
 80176e0:	2100      	movs	r1, #0
 80176e2:	4618      	mov	r0, r3
 80176e4:	f7fe f98d 	bl	8015a02 <RegionCommonValueInRange>
 80176e8:	4603      	mov	r3, r0
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d101      	bne.n	80176f2 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 80176ee:	2301      	movs	r3, #1
 80176f0:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	7a1b      	ldrb	r3, [r3, #8]
 80176f8:	f343 0303 	sbfx	r3, r3, #0, #4
 80176fc:	b25a      	sxtb	r2, r3
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	7a1b      	ldrb	r3, [r3, #8]
 8017704:	f343 1303 	sbfx	r3, r3, #4, #4
 8017708:	b25b      	sxtb	r3, r3
 801770a:	429a      	cmp	r2, r3
 801770c:	dd01      	ble.n	8017712 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801770e:	2301      	movs	r3, #1
 8017710:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8017712:	7bbb      	ldrb	r3, [r7, #14]
 8017714:	f083 0301 	eor.w	r3, r3, #1
 8017718:	b2db      	uxtb	r3, r3
 801771a:	2b00      	cmp	r3, #0
 801771c:	d010      	beq.n	8017740 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	f107 020c 	add.w	r2, r7, #12
 8017728:	4611      	mov	r1, r2
 801772a:	4618      	mov	r0, r3
 801772c:	f7fe feee 	bl	801650c <VerifyRfFreq>
 8017730:	4603      	mov	r3, r0
 8017732:	f083 0301 	eor.w	r3, r3, #1
 8017736:	b2db      	uxtb	r3, r3
 8017738:	2b00      	cmp	r3, #0
 801773a:	d001      	beq.n	8017740 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801773c:	2301      	movs	r3, #1
 801773e:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8017740:	7bfb      	ldrb	r3, [r7, #15]
 8017742:	2b00      	cmp	r3, #0
 8017744:	d004      	beq.n	8017750 <RegionEU868ChannelAdd+0xcc>
 8017746:	7bbb      	ldrb	r3, [r7, #14]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d001      	beq.n	8017750 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801774c:	2306      	movs	r3, #6
 801774e:	e035      	b.n	80177bc <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8017750:	7bfb      	ldrb	r3, [r7, #15]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d001      	beq.n	801775a <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8017756:	2305      	movs	r3, #5
 8017758:	e030      	b.n	80177bc <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801775a:	7bbb      	ldrb	r3, [r7, #14]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d001      	beq.n	8017764 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8017760:	2304      	movs	r3, #4
 8017762:	e02b      	b.n	80177bc <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8017764:	4b17      	ldr	r3, [pc, #92]	; (80177c4 <RegionEU868ChannelAdd+0x140>)
 8017766:	6819      	ldr	r1, [r3, #0]
 8017768:	7b7a      	ldrb	r2, [r7, #13]
 801776a:	4613      	mov	r3, r2
 801776c:	005b      	lsls	r3, r3, #1
 801776e:	4413      	add	r3, r2
 8017770:	009b      	lsls	r3, r3, #2
 8017772:	18c8      	adds	r0, r1, r3
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	220c      	movs	r2, #12
 801777a:	4619      	mov	r1, r3
 801777c:	f000 f8fd 	bl	801797a <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8017780:	4b10      	ldr	r3, [pc, #64]	; (80177c4 <RegionEU868ChannelAdd+0x140>)
 8017782:	6819      	ldr	r1, [r3, #0]
 8017784:	7b7a      	ldrb	r2, [r7, #13]
 8017786:	7b38      	ldrb	r0, [r7, #12]
 8017788:	4613      	mov	r3, r2
 801778a:	005b      	lsls	r3, r3, #1
 801778c:	4413      	add	r3, r2
 801778e:	009b      	lsls	r3, r3, #2
 8017790:	440b      	add	r3, r1
 8017792:	3309      	adds	r3, #9
 8017794:	4602      	mov	r2, r0
 8017796:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8017798:	4b0a      	ldr	r3, [pc, #40]	; (80177c4 <RegionEU868ChannelAdd+0x140>)
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 80177a0:	b21a      	sxth	r2, r3
 80177a2:	7b7b      	ldrb	r3, [r7, #13]
 80177a4:	2101      	movs	r1, #1
 80177a6:	fa01 f303 	lsl.w	r3, r1, r3
 80177aa:	b21b      	sxth	r3, r3
 80177ac:	4313      	orrs	r3, r2
 80177ae:	b21a      	sxth	r2, r3
 80177b0:	4b04      	ldr	r3, [pc, #16]	; (80177c4 <RegionEU868ChannelAdd+0x140>)
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	b292      	uxth	r2, r2
 80177b6:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 80177ba:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80177bc:	4618      	mov	r0, r3
 80177be:	3710      	adds	r7, #16
 80177c0:	46bd      	mov	sp, r7
 80177c2:	bd80      	pop	{r7, pc}
 80177c4:	200020c4 	.word	0x200020c4

080177c8 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80177c8:	b580      	push	{r7, lr}
 80177ca:	b086      	sub	sp, #24
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	781b      	ldrb	r3, [r3, #0]
 80177d4:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80177d6:	7dfb      	ldrb	r3, [r7, #23]
 80177d8:	2b02      	cmp	r3, #2
 80177da:	d801      	bhi.n	80177e0 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 80177dc:	2300      	movs	r3, #0
 80177de:	e016      	b.n	801780e <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80177e0:	4b0d      	ldr	r3, [pc, #52]	; (8017818 <RegionEU868ChannelsRemove+0x50>)
 80177e2:	6819      	ldr	r1, [r3, #0]
 80177e4:	7dfa      	ldrb	r2, [r7, #23]
 80177e6:	4613      	mov	r3, r2
 80177e8:	005b      	lsls	r3, r3, #1
 80177ea:	4413      	add	r3, r2
 80177ec:	009b      	lsls	r3, r3, #2
 80177ee:	440b      	add	r3, r1
 80177f0:	461a      	mov	r2, r3
 80177f2:	2300      	movs	r3, #0
 80177f4:	6013      	str	r3, [r2, #0]
 80177f6:	6053      	str	r3, [r2, #4]
 80177f8:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80177fa:	4b07      	ldr	r3, [pc, #28]	; (8017818 <RegionEU868ChannelsRemove+0x50>)
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8017802:	7df9      	ldrb	r1, [r7, #23]
 8017804:	2210      	movs	r2, #16
 8017806:	4618      	mov	r0, r3
 8017808:	f7fe f918 	bl	8015a3c <RegionCommonChanDisable>
 801780c:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801780e:	4618      	mov	r0, r3
 8017810:	3718      	adds	r7, #24
 8017812:	46bd      	mov	sp, r7
 8017814:	bd80      	pop	{r7, pc}
 8017816:	bf00      	nop
 8017818:	200020c4 	.word	0x200020c4

0801781c <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801781c:	b590      	push	{r4, r7, lr}
 801781e:	b085      	sub	sp, #20
 8017820:	af00      	add	r7, sp, #0
 8017822:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801782a:	4b20      	ldr	r3, [pc, #128]	; (80178ac <RegionEU868SetContinuousWave+0x90>)
 801782c:	681a      	ldr	r2, [r3, #0]
 801782e:	4b20      	ldr	r3, [pc, #128]	; (80178b0 <RegionEU868SetContinuousWave+0x94>)
 8017830:	6819      	ldr	r1, [r3, #0]
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	781b      	ldrb	r3, [r3, #0]
 8017836:	461c      	mov	r4, r3
 8017838:	4623      	mov	r3, r4
 801783a:	005b      	lsls	r3, r3, #1
 801783c:	4423      	add	r3, r4
 801783e:	009b      	lsls	r3, r3, #2
 8017840:	440b      	add	r3, r1
 8017842:	3309      	adds	r3, #9
 8017844:	781b      	ldrb	r3, [r3, #0]
 8017846:	4619      	mov	r1, r3
 8017848:	460b      	mov	r3, r1
 801784a:	005b      	lsls	r3, r3, #1
 801784c:	440b      	add	r3, r1
 801784e:	00db      	lsls	r3, r3, #3
 8017850:	4413      	add	r3, r2
 8017852:	3302      	adds	r3, #2
 8017854:	f993 3000 	ldrsb.w	r3, [r3]
 8017858:	4619      	mov	r1, r3
 801785a:	f7fe fdda 	bl	8016412 <RegionCommonLimitTxPower>
 801785e:	4603      	mov	r3, r0
 8017860:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8017862:	2300      	movs	r3, #0
 8017864:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8017866:	4b12      	ldr	r3, [pc, #72]	; (80178b0 <RegionEU868SetContinuousWave+0x94>)
 8017868:	681a      	ldr	r2, [r3, #0]
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	781b      	ldrb	r3, [r3, #0]
 801786e:	4619      	mov	r1, r3
 8017870:	460b      	mov	r3, r1
 8017872:	005b      	lsls	r3, r3, #1
 8017874:	440b      	add	r3, r1
 8017876:	009b      	lsls	r3, r3, #2
 8017878:	4413      	add	r3, r2
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	6859      	ldr	r1, [r3, #4]
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	689a      	ldr	r2, [r3, #8]
 8017886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801788a:	4618      	mov	r0, r3
 801788c:	f7fe fc32 	bl	80160f4 <RegionCommonComputeTxPower>
 8017890:	4603      	mov	r3, r0
 8017892:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8017894:	4b07      	ldr	r3, [pc, #28]	; (80178b4 <RegionEU868SetContinuousWave+0x98>)
 8017896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017898:	687a      	ldr	r2, [r7, #4]
 801789a:	8992      	ldrh	r2, [r2, #12]
 801789c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80178a0:	68b8      	ldr	r0, [r7, #8]
 80178a2:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 80178a4:	bf00      	nop
 80178a6:	3714      	adds	r7, #20
 80178a8:	46bd      	mov	sp, r7
 80178aa:	bd90      	pop	{r4, r7, pc}
 80178ac:	200020c0 	.word	0x200020c0
 80178b0:	200020c4 	.word	0x200020c4
 80178b4:	0801d0b0 	.word	0x0801d0b0

080178b8 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80178b8:	b480      	push	{r7}
 80178ba:	b085      	sub	sp, #20
 80178bc:	af00      	add	r7, sp, #0
 80178be:	4603      	mov	r3, r0
 80178c0:	71fb      	strb	r3, [r7, #7]
 80178c2:	460b      	mov	r3, r1
 80178c4:	71bb      	strb	r3, [r7, #6]
 80178c6:	4613      	mov	r3, r2
 80178c8:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80178ca:	79ba      	ldrb	r2, [r7, #6]
 80178cc:	797b      	ldrb	r3, [r7, #5]
 80178ce:	1ad3      	subs	r3, r2, r3
 80178d0:	b2db      	uxtb	r3, r3
 80178d2:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80178d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	da01      	bge.n	80178e0 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 80178dc:	2300      	movs	r3, #0
 80178de:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80178e0:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 80178e2:	4618      	mov	r0, r3
 80178e4:	3714      	adds	r7, #20
 80178e6:	46bd      	mov	sp, r7
 80178e8:	bc80      	pop	{r7}
 80178ea:	4770      	bx	lr

080178ec <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80178ec:	b480      	push	{r7}
 80178ee:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80178f0:	4b0d      	ldr	r3, [pc, #52]	; (8017928 <rand1+0x3c>)
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	4a0d      	ldr	r2, [pc, #52]	; (801792c <rand1+0x40>)
 80178f6:	fb02 f303 	mul.w	r3, r2, r3
 80178fa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80178fe:	3339      	adds	r3, #57	; 0x39
 8017900:	4a09      	ldr	r2, [pc, #36]	; (8017928 <rand1+0x3c>)
 8017902:	6013      	str	r3, [r2, #0]
 8017904:	4b08      	ldr	r3, [pc, #32]	; (8017928 <rand1+0x3c>)
 8017906:	681a      	ldr	r2, [r3, #0]
 8017908:	2303      	movs	r3, #3
 801790a:	fba3 1302 	umull	r1, r3, r3, r2
 801790e:	1ad1      	subs	r1, r2, r3
 8017910:	0849      	lsrs	r1, r1, #1
 8017912:	440b      	add	r3, r1
 8017914:	0f99      	lsrs	r1, r3, #30
 8017916:	460b      	mov	r3, r1
 8017918:	07db      	lsls	r3, r3, #31
 801791a:	1a5b      	subs	r3, r3, r1
 801791c:	1ad1      	subs	r1, r2, r3
 801791e:	460b      	mov	r3, r1
}
 8017920:	4618      	mov	r0, r3
 8017922:	46bd      	mov	sp, r7
 8017924:	bc80      	pop	{r7}
 8017926:	4770      	bx	lr
 8017928:	20000138 	.word	0x20000138
 801792c:	41c64e6d 	.word	0x41c64e6d

08017930 <srand1>:

void srand1( uint32_t seed )
{
 8017930:	b480      	push	{r7}
 8017932:	b083      	sub	sp, #12
 8017934:	af00      	add	r7, sp, #0
 8017936:	6078      	str	r0, [r7, #4]
    next = seed;
 8017938:	4a03      	ldr	r2, [pc, #12]	; (8017948 <srand1+0x18>)
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	6013      	str	r3, [r2, #0]
}
 801793e:	bf00      	nop
 8017940:	370c      	adds	r7, #12
 8017942:	46bd      	mov	sp, r7
 8017944:	bc80      	pop	{r7}
 8017946:	4770      	bx	lr
 8017948:	20000138 	.word	0x20000138

0801794c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b082      	sub	sp, #8
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
 8017954:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8017956:	f7ff ffc9 	bl	80178ec <rand1>
 801795a:	4602      	mov	r2, r0
 801795c:	6839      	ldr	r1, [r7, #0]
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	1acb      	subs	r3, r1, r3
 8017962:	3301      	adds	r3, #1
 8017964:	fb92 f1f3 	sdiv	r1, r2, r3
 8017968:	fb01 f303 	mul.w	r3, r1, r3
 801796c:	1ad2      	subs	r2, r2, r3
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	4413      	add	r3, r2
}
 8017972:	4618      	mov	r0, r3
 8017974:	3708      	adds	r7, #8
 8017976:	46bd      	mov	sp, r7
 8017978:	bd80      	pop	{r7, pc}

0801797a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801797a:	b480      	push	{r7}
 801797c:	b085      	sub	sp, #20
 801797e:	af00      	add	r7, sp, #0
 8017980:	60f8      	str	r0, [r7, #12]
 8017982:	60b9      	str	r1, [r7, #8]
 8017984:	4613      	mov	r3, r2
 8017986:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8017988:	e007      	b.n	801799a <memcpy1+0x20>
    {
        *dst++ = *src++;
 801798a:	68ba      	ldr	r2, [r7, #8]
 801798c:	1c53      	adds	r3, r2, #1
 801798e:	60bb      	str	r3, [r7, #8]
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	1c59      	adds	r1, r3, #1
 8017994:	60f9      	str	r1, [r7, #12]
 8017996:	7812      	ldrb	r2, [r2, #0]
 8017998:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801799a:	88fb      	ldrh	r3, [r7, #6]
 801799c:	1e5a      	subs	r2, r3, #1
 801799e:	80fa      	strh	r2, [r7, #6]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d1f2      	bne.n	801798a <memcpy1+0x10>
    }
}
 80179a4:	bf00      	nop
 80179a6:	bf00      	nop
 80179a8:	3714      	adds	r7, #20
 80179aa:	46bd      	mov	sp, r7
 80179ac:	bc80      	pop	{r7}
 80179ae:	4770      	bx	lr

080179b0 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80179b0:	b480      	push	{r7}
 80179b2:	b085      	sub	sp, #20
 80179b4:	af00      	add	r7, sp, #0
 80179b6:	60f8      	str	r0, [r7, #12]
 80179b8:	60b9      	str	r1, [r7, #8]
 80179ba:	4613      	mov	r3, r2
 80179bc:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80179be:	88fb      	ldrh	r3, [r7, #6]
 80179c0:	3b01      	subs	r3, #1
 80179c2:	68fa      	ldr	r2, [r7, #12]
 80179c4:	4413      	add	r3, r2
 80179c6:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80179c8:	e007      	b.n	80179da <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80179ca:	68ba      	ldr	r2, [r7, #8]
 80179cc:	1c53      	adds	r3, r2, #1
 80179ce:	60bb      	str	r3, [r7, #8]
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	1e59      	subs	r1, r3, #1
 80179d4:	60f9      	str	r1, [r7, #12]
 80179d6:	7812      	ldrb	r2, [r2, #0]
 80179d8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80179da:	88fb      	ldrh	r3, [r7, #6]
 80179dc:	1e5a      	subs	r2, r3, #1
 80179de:	80fa      	strh	r2, [r7, #6]
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d1f2      	bne.n	80179ca <memcpyr+0x1a>
    }
}
 80179e4:	bf00      	nop
 80179e6:	bf00      	nop
 80179e8:	3714      	adds	r7, #20
 80179ea:	46bd      	mov	sp, r7
 80179ec:	bc80      	pop	{r7}
 80179ee:	4770      	bx	lr

080179f0 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80179f0:	b480      	push	{r7}
 80179f2:	b083      	sub	sp, #12
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]
 80179f8:	460b      	mov	r3, r1
 80179fa:	70fb      	strb	r3, [r7, #3]
 80179fc:	4613      	mov	r3, r2
 80179fe:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8017a00:	e004      	b.n	8017a0c <memset1+0x1c>
    {
        *dst++ = value;
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	1c5a      	adds	r2, r3, #1
 8017a06:	607a      	str	r2, [r7, #4]
 8017a08:	78fa      	ldrb	r2, [r7, #3]
 8017a0a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017a0c:	883b      	ldrh	r3, [r7, #0]
 8017a0e:	1e5a      	subs	r2, r3, #1
 8017a10:	803a      	strh	r2, [r7, #0]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d1f5      	bne.n	8017a02 <memset1+0x12>
    }
}
 8017a16:	bf00      	nop
 8017a18:	bf00      	nop
 8017a1a:	370c      	adds	r7, #12
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	bc80      	pop	{r7}
 8017a20:	4770      	bx	lr
	...

08017a24 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8017a24:	b480      	push	{r7}
 8017a26:	b085      	sub	sp, #20
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
 8017a2c:	460b      	mov	r3, r1
 8017a2e:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8017a30:	f04f 33ff 	mov.w	r3, #4294967295
 8017a34:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d101      	bne.n	8017a40 <Crc32+0x1c>
    {
        return 0;
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	e026      	b.n	8017a8e <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8017a40:	2300      	movs	r3, #0
 8017a42:	817b      	strh	r3, [r7, #10]
 8017a44:	e01d      	b.n	8017a82 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8017a46:	897b      	ldrh	r3, [r7, #10]
 8017a48:	687a      	ldr	r2, [r7, #4]
 8017a4a:	4413      	add	r3, r2
 8017a4c:	781b      	ldrb	r3, [r3, #0]
 8017a4e:	461a      	mov	r2, r3
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	4053      	eors	r3, r2
 8017a54:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017a56:	2300      	movs	r3, #0
 8017a58:	813b      	strh	r3, [r7, #8]
 8017a5a:	e00c      	b.n	8017a76 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	085a      	lsrs	r2, r3, #1
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	f003 0301 	and.w	r3, r3, #1
 8017a66:	425b      	negs	r3, r3
 8017a68:	490b      	ldr	r1, [pc, #44]	; (8017a98 <Crc32+0x74>)
 8017a6a:	400b      	ands	r3, r1
 8017a6c:	4053      	eors	r3, r2
 8017a6e:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017a70:	893b      	ldrh	r3, [r7, #8]
 8017a72:	3301      	adds	r3, #1
 8017a74:	813b      	strh	r3, [r7, #8]
 8017a76:	893b      	ldrh	r3, [r7, #8]
 8017a78:	2b07      	cmp	r3, #7
 8017a7a:	d9ef      	bls.n	8017a5c <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8017a7c:	897b      	ldrh	r3, [r7, #10]
 8017a7e:	3301      	adds	r3, #1
 8017a80:	817b      	strh	r3, [r7, #10]
 8017a82:	897a      	ldrh	r2, [r7, #10]
 8017a84:	887b      	ldrh	r3, [r7, #2]
 8017a86:	429a      	cmp	r2, r3
 8017a88:	d3dd      	bcc.n	8017a46 <Crc32+0x22>
        }
    }

    return ~crc;
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	43db      	mvns	r3, r3
}
 8017a8e:	4618      	mov	r0, r3
 8017a90:	3714      	adds	r7, #20
 8017a92:	46bd      	mov	sp, r7
 8017a94:	bc80      	pop	{r7}
 8017a96:	4770      	bx	lr
 8017a98:	edb88320 	.word	0xedb88320

08017a9c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	b084      	sub	sp, #16
 8017aa0:	af02      	add	r7, sp, #8
 8017aa2:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8017aa4:	4a24      	ldr	r2, [pc, #144]	; (8017b38 <RadioInit+0x9c>)
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8017aaa:	4b24      	ldr	r3, [pc, #144]	; (8017b3c <RadioInit+0xa0>)
 8017aac:	2200      	movs	r2, #0
 8017aae:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8017ab0:	4b22      	ldr	r3, [pc, #136]	; (8017b3c <RadioInit+0xa0>)
 8017ab2:	2200      	movs	r2, #0
 8017ab4:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8017ab6:	4b21      	ldr	r3, [pc, #132]	; (8017b3c <RadioInit+0xa0>)
 8017ab8:	2200      	movs	r2, #0
 8017aba:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017abc:	4b1f      	ldr	r3, [pc, #124]	; (8017b3c <RadioInit+0xa0>)
 8017abe:	2200      	movs	r2, #0
 8017ac0:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8017ac2:	481f      	ldr	r0, [pc, #124]	; (8017b40 <RadioInit+0xa4>)
 8017ac4:	f001 ff88 	bl	80199d8 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8017ac8:	4b1c      	ldr	r3, [pc, #112]	; (8017b3c <RadioInit+0xa0>)
 8017aca:	2200      	movs	r2, #0
 8017acc:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8017ace:	4b1b      	ldr	r3, [pc, #108]	; (8017b3c <RadioInit+0xa0>)
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8017ad4:	f002 fa16 	bl	8019f04 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8017ad8:	2100      	movs	r1, #0
 8017ada:	2000      	movs	r0, #0
 8017adc:	f002 fdde 	bl	801a69c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8017ae0:	2204      	movs	r2, #4
 8017ae2:	2100      	movs	r1, #0
 8017ae4:	2001      	movs	r0, #1
 8017ae6:	f002 fb9b 	bl	801a220 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017aea:	2300      	movs	r3, #0
 8017aec:	2200      	movs	r2, #0
 8017aee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017af2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017af6:	f002 facb 	bl	801a090 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8017afa:	f000 fe83 	bl	8018804 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8017afe:	2300      	movs	r3, #0
 8017b00:	9300      	str	r3, [sp, #0]
 8017b02:	4b10      	ldr	r3, [pc, #64]	; (8017b44 <RadioInit+0xa8>)
 8017b04:	2200      	movs	r2, #0
 8017b06:	f04f 31ff 	mov.w	r1, #4294967295
 8017b0a:	480f      	ldr	r0, [pc, #60]	; (8017b48 <RadioInit+0xac>)
 8017b0c:	f003 ffdc 	bl	801bac8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8017b10:	2300      	movs	r3, #0
 8017b12:	9300      	str	r3, [sp, #0]
 8017b14:	4b0d      	ldr	r3, [pc, #52]	; (8017b4c <RadioInit+0xb0>)
 8017b16:	2200      	movs	r2, #0
 8017b18:	f04f 31ff 	mov.w	r1, #4294967295
 8017b1c:	480c      	ldr	r0, [pc, #48]	; (8017b50 <RadioInit+0xb4>)
 8017b1e:	f003 ffd3 	bl	801bac8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8017b22:	4809      	ldr	r0, [pc, #36]	; (8017b48 <RadioInit+0xac>)
 8017b24:	f004 f874 	bl	801bc10 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8017b28:	4809      	ldr	r0, [pc, #36]	; (8017b50 <RadioInit+0xb4>)
 8017b2a:	f004 f871 	bl	801bc10 <UTIL_TIMER_Stop>
}
 8017b2e:	bf00      	nop
 8017b30:	3708      	adds	r7, #8
 8017b32:	46bd      	mov	sp, r7
 8017b34:	bd80      	pop	{r7, pc}
 8017b36:	bf00      	nop
 8017b38:	200021c8 	.word	0x200021c8
 8017b3c:	200021cc 	.word	0x200021cc
 8017b40:	08018bf1 	.word	0x08018bf1
 8017b44:	08018b79 	.word	0x08018b79
 8017b48:	20002228 	.word	0x20002228
 8017b4c:	08018b8d 	.word	0x08018b8d
 8017b50:	20002240 	.word	0x20002240

08017b54 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8017b54:	b580      	push	{r7, lr}
 8017b56:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8017b58:	f001 ff80 	bl	8019a5c <SUBGRF_GetOperatingMode>
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	2b07      	cmp	r3, #7
 8017b60:	d00a      	beq.n	8017b78 <RadioGetStatus+0x24>
 8017b62:	2b07      	cmp	r3, #7
 8017b64:	dc0a      	bgt.n	8017b7c <RadioGetStatus+0x28>
 8017b66:	2b04      	cmp	r3, #4
 8017b68:	d002      	beq.n	8017b70 <RadioGetStatus+0x1c>
 8017b6a:	2b05      	cmp	r3, #5
 8017b6c:	d002      	beq.n	8017b74 <RadioGetStatus+0x20>
 8017b6e:	e005      	b.n	8017b7c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8017b70:	2302      	movs	r3, #2
 8017b72:	e004      	b.n	8017b7e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8017b74:	2301      	movs	r3, #1
 8017b76:	e002      	b.n	8017b7e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8017b78:	2303      	movs	r3, #3
 8017b7a:	e000      	b.n	8017b7e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8017b7c:	2300      	movs	r3, #0
    }
}
 8017b7e:	4618      	mov	r0, r3
 8017b80:	bd80      	pop	{r7, pc}
	...

08017b84 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b082      	sub	sp, #8
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	4603      	mov	r3, r0
 8017b8c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8017b8e:	4a2a      	ldr	r2, [pc, #168]	; (8017c38 <RadioSetModem+0xb4>)
 8017b90:	79fb      	ldrb	r3, [r7, #7]
 8017b92:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8017b94:	79fb      	ldrb	r3, [r7, #7]
 8017b96:	4618      	mov	r0, r3
 8017b98:	f003 f943 	bl	801ae22 <RFW_SetRadioModem>
    switch( modem )
 8017b9c:	79fb      	ldrb	r3, [r7, #7]
 8017b9e:	2b05      	cmp	r3, #5
 8017ba0:	d80e      	bhi.n	8017bc0 <RadioSetModem+0x3c>
 8017ba2:	a201      	add	r2, pc, #4	; (adr r2, 8017ba8 <RadioSetModem+0x24>)
 8017ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ba8:	08017bcf 	.word	0x08017bcf
 8017bac:	08017bdd 	.word	0x08017bdd
 8017bb0:	08017bc1 	.word	0x08017bc1
 8017bb4:	08017c03 	.word	0x08017c03
 8017bb8:	08017c11 	.word	0x08017c11
 8017bbc:	08017c1f 	.word	0x08017c1f
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8017bc0:	2003      	movs	r0, #3
 8017bc2:	f002 fb07 	bl	801a1d4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017bc6:	4b1c      	ldr	r3, [pc, #112]	; (8017c38 <RadioSetModem+0xb4>)
 8017bc8:	2200      	movs	r2, #0
 8017bca:	735a      	strb	r2, [r3, #13]
        break;
 8017bcc:	e02f      	b.n	8017c2e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017bce:	2000      	movs	r0, #0
 8017bd0:	f002 fb00 	bl	801a1d4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017bd4:	4b18      	ldr	r3, [pc, #96]	; (8017c38 <RadioSetModem+0xb4>)
 8017bd6:	2200      	movs	r2, #0
 8017bd8:	735a      	strb	r2, [r3, #13]
        break;
 8017bda:	e028      	b.n	8017c2e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8017bdc:	2001      	movs	r0, #1
 8017bde:	f002 faf9 	bl	801a1d4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8017be2:	4b15      	ldr	r3, [pc, #84]	; (8017c38 <RadioSetModem+0xb4>)
 8017be4:	7b5a      	ldrb	r2, [r3, #13]
 8017be6:	4b14      	ldr	r3, [pc, #80]	; (8017c38 <RadioSetModem+0xb4>)
 8017be8:	7b1b      	ldrb	r3, [r3, #12]
 8017bea:	429a      	cmp	r2, r3
 8017bec:	d01e      	beq.n	8017c2c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8017bee:	4b12      	ldr	r3, [pc, #72]	; (8017c38 <RadioSetModem+0xb4>)
 8017bf0:	7b1a      	ldrb	r2, [r3, #12]
 8017bf2:	4b11      	ldr	r3, [pc, #68]	; (8017c38 <RadioSetModem+0xb4>)
 8017bf4:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8017bf6:	4b10      	ldr	r3, [pc, #64]	; (8017c38 <RadioSetModem+0xb4>)
 8017bf8:	7b5b      	ldrb	r3, [r3, #13]
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	f000 ff86 	bl	8018b0c <RadioSetPublicNetwork>
        }
        break;
 8017c00:	e014      	b.n	8017c2c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017c02:	2002      	movs	r0, #2
 8017c04:	f002 fae6 	bl	801a1d4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017c08:	4b0b      	ldr	r3, [pc, #44]	; (8017c38 <RadioSetModem+0xb4>)
 8017c0a:	2200      	movs	r2, #0
 8017c0c:	735a      	strb	r2, [r3, #13]
        break;
 8017c0e:	e00e      	b.n	8017c2e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017c10:	2002      	movs	r0, #2
 8017c12:	f002 fadf 	bl	801a1d4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017c16:	4b08      	ldr	r3, [pc, #32]	; (8017c38 <RadioSetModem+0xb4>)
 8017c18:	2200      	movs	r2, #0
 8017c1a:	735a      	strb	r2, [r3, #13]
        break;
 8017c1c:	e007      	b.n	8017c2e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017c1e:	2000      	movs	r0, #0
 8017c20:	f002 fad8 	bl	801a1d4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017c24:	4b04      	ldr	r3, [pc, #16]	; (8017c38 <RadioSetModem+0xb4>)
 8017c26:	2200      	movs	r2, #0
 8017c28:	735a      	strb	r2, [r3, #13]
        break;
 8017c2a:	e000      	b.n	8017c2e <RadioSetModem+0xaa>
        break;
 8017c2c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8017c2e:	bf00      	nop
 8017c30:	3708      	adds	r7, #8
 8017c32:	46bd      	mov	sp, r7
 8017c34:	bd80      	pop	{r7, pc}
 8017c36:	bf00      	nop
 8017c38:	200021cc 	.word	0x200021cc

08017c3c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8017c3c:	b580      	push	{r7, lr}
 8017c3e:	b082      	sub	sp, #8
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8017c44:	6878      	ldr	r0, [r7, #4]
 8017c46:	f002 fa7f 	bl	801a148 <SUBGRF_SetRfFrequency>
}
 8017c4a:	bf00      	nop
 8017c4c:	3708      	adds	r7, #8
 8017c4e:	46bd      	mov	sp, r7
 8017c50:	bd80      	pop	{r7, pc}

08017c52 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8017c52:	b580      	push	{r7, lr}
 8017c54:	b090      	sub	sp, #64	; 0x40
 8017c56:	af0a      	add	r7, sp, #40	; 0x28
 8017c58:	60f8      	str	r0, [r7, #12]
 8017c5a:	60b9      	str	r1, [r7, #8]
 8017c5c:	603b      	str	r3, [r7, #0]
 8017c5e:	4613      	mov	r3, r2
 8017c60:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8017c62:	2301      	movs	r3, #1
 8017c64:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8017c66:	2300      	movs	r3, #0
 8017c68:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8017c6e:	f000 fddc 	bl	801882a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8017c72:	2000      	movs	r0, #0
 8017c74:	f7ff ff86 	bl	8017b84 <RadioSetModem>

    RadioSetChannel( freq );
 8017c78:	68f8      	ldr	r0, [r7, #12]
 8017c7a:	f7ff ffdf 	bl	8017c3c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8017c7e:	2301      	movs	r3, #1
 8017c80:	9309      	str	r3, [sp, #36]	; 0x24
 8017c82:	2300      	movs	r3, #0
 8017c84:	9308      	str	r3, [sp, #32]
 8017c86:	2300      	movs	r3, #0
 8017c88:	9307      	str	r3, [sp, #28]
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	9306      	str	r3, [sp, #24]
 8017c8e:	2300      	movs	r3, #0
 8017c90:	9305      	str	r3, [sp, #20]
 8017c92:	2300      	movs	r3, #0
 8017c94:	9304      	str	r3, [sp, #16]
 8017c96:	2300      	movs	r3, #0
 8017c98:	9303      	str	r3, [sp, #12]
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	9302      	str	r3, [sp, #8]
 8017c9e:	2303      	movs	r3, #3
 8017ca0:	9301      	str	r3, [sp, #4]
 8017ca2:	68bb      	ldr	r3, [r7, #8]
 8017ca4:	9300      	str	r3, [sp, #0]
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8017cac:	68b9      	ldr	r1, [r7, #8]
 8017cae:	2000      	movs	r0, #0
 8017cb0:	f000 f83c 	bl	8017d2c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8017cb4:	2000      	movs	r0, #0
 8017cb6:	f000 fdbf 	bl	8018838 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8017cba:	f000 ff55 	bl	8018b68 <RadioGetWakeupTime>
 8017cbe:	4603      	mov	r3, r0
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	f7ea fb19 	bl	80022f8 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8017cc6:	f004 f8bd 	bl	801be44 <UTIL_TIMER_GetCurrentTime>
 8017cca:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017ccc:	e00d      	b.n	8017cea <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8017cce:	2000      	movs	r0, #0
 8017cd0:	f000 fe9a 	bl	8018a08 <RadioRssi>
 8017cd4:	4603      	mov	r3, r0
 8017cd6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8017cd8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017cdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017ce0:	429a      	cmp	r2, r3
 8017ce2:	dd02      	ble.n	8017cea <RadioIsChannelFree+0x98>
        {
            status = false;
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	75fb      	strb	r3, [r7, #23]
            break;
 8017ce8:	e006      	b.n	8017cf8 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017cea:	6938      	ldr	r0, [r7, #16]
 8017cec:	f004 f8bc 	bl	801be68 <UTIL_TIMER_GetElapsedTime>
 8017cf0:	4602      	mov	r2, r0
 8017cf2:	683b      	ldr	r3, [r7, #0]
 8017cf4:	4293      	cmp	r3, r2
 8017cf6:	d8ea      	bhi.n	8017cce <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8017cf8:	f000 fd97 	bl	801882a <RadioStandby>

    return status;
 8017cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8017cfe:	4618      	mov	r0, r3
 8017d00:	3718      	adds	r7, #24
 8017d02:	46bd      	mov	sp, r7
 8017d04:	bd80      	pop	{r7, pc}

08017d06 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8017d06:	b580      	push	{r7, lr}
 8017d08:	b082      	sub	sp, #8
 8017d0a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017d10:	2300      	movs	r3, #0
 8017d12:	2200      	movs	r2, #0
 8017d14:	2100      	movs	r1, #0
 8017d16:	2000      	movs	r0, #0
 8017d18:	f002 f9ba 	bl	801a090 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8017d1c:	f001 ff6f 	bl	8019bfe <SUBGRF_GetRandom>
 8017d20:	6078      	str	r0, [r7, #4]

    return rnd;
 8017d22:	687b      	ldr	r3, [r7, #4]
}
 8017d24:	4618      	mov	r0, r3
 8017d26:	3708      	adds	r7, #8
 8017d28:	46bd      	mov	sp, r7
 8017d2a:	bd80      	pop	{r7, pc}

08017d2c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8017d2c:	b580      	push	{r7, lr}
 8017d2e:	b08a      	sub	sp, #40	; 0x28
 8017d30:	af00      	add	r7, sp, #0
 8017d32:	60b9      	str	r1, [r7, #8]
 8017d34:	607a      	str	r2, [r7, #4]
 8017d36:	461a      	mov	r2, r3
 8017d38:	4603      	mov	r3, r0
 8017d3a:	73fb      	strb	r3, [r7, #15]
 8017d3c:	4613      	mov	r3, r2
 8017d3e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8017d40:	4ab9      	ldr	r2, [pc, #740]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017d42:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017d46:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8017d48:	f003 f829 	bl	801ad9e <RFW_DeInit>
    if( rxContinuous == true )
 8017d4c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d001      	beq.n	8017d58 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8017d54:	2300      	movs	r3, #0
 8017d56:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8017d58:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d004      	beq.n	8017d6a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8017d60:	4ab2      	ldr	r2, [pc, #712]	; (801802c <RadioSetRxConfig+0x300>)
 8017d62:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8017d66:	7013      	strb	r3, [r2, #0]
 8017d68:	e002      	b.n	8017d70 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8017d6a:	4bb0      	ldr	r3, [pc, #704]	; (801802c <RadioSetRxConfig+0x300>)
 8017d6c:	22ff      	movs	r2, #255	; 0xff
 8017d6e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8017d70:	7bfb      	ldrb	r3, [r7, #15]
 8017d72:	2b05      	cmp	r3, #5
 8017d74:	d009      	beq.n	8017d8a <RadioSetRxConfig+0x5e>
 8017d76:	2b05      	cmp	r3, #5
 8017d78:	f300 81ca 	bgt.w	8018110 <RadioSetRxConfig+0x3e4>
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	f000 80bf 	beq.w	8017f00 <RadioSetRxConfig+0x1d4>
 8017d82:	2b01      	cmp	r3, #1
 8017d84:	f000 8124 	beq.w	8017fd0 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8017d88:	e1c2      	b.n	8018110 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8017d8a:	2001      	movs	r0, #1
 8017d8c:	f002 f87c 	bl	8019e88 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017d90:	4ba5      	ldr	r3, [pc, #660]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017d92:	2200      	movs	r2, #0
 8017d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017d98:	4aa3      	ldr	r2, [pc, #652]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8017d9e:	4ba2      	ldr	r3, [pc, #648]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017da0:	2209      	movs	r2, #9
 8017da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8017da6:	4ba0      	ldr	r3, [pc, #640]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017da8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017dac:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017dae:	68b8      	ldr	r0, [r7, #8]
 8017db0:	f002 ff28 	bl	801ac04 <SUBGRF_GetFskBandwidthRegValue>
 8017db4:	4603      	mov	r3, r0
 8017db6:	461a      	mov	r2, r3
 8017db8:	4b9b      	ldr	r3, [pc, #620]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017dbe:	4b9a      	ldr	r3, [pc, #616]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017dc0:	2200      	movs	r2, #0
 8017dc2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017dc4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017dc6:	00db      	lsls	r3, r3, #3
 8017dc8:	b29a      	uxth	r2, r3
 8017dca:	4b97      	ldr	r3, [pc, #604]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017dcc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8017dce:	4b96      	ldr	r3, [pc, #600]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017dd0:	2200      	movs	r2, #0
 8017dd2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8017dd4:	4b94      	ldr	r3, [pc, #592]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017dd6:	2210      	movs	r2, #16
 8017dd8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017dda:	4b93      	ldr	r3, [pc, #588]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017ddc:	2200      	movs	r2, #0
 8017dde:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8017de0:	4b91      	ldr	r3, [pc, #580]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017de2:	2200      	movs	r2, #0
 8017de4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017de6:	4b91      	ldr	r3, [pc, #580]	; (801802c <RadioSetRxConfig+0x300>)
 8017de8:	781a      	ldrb	r2, [r3, #0]
 8017dea:	4b8f      	ldr	r3, [pc, #572]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017dec:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017dee:	4b8e      	ldr	r3, [pc, #568]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017df0:	2201      	movs	r2, #1
 8017df2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8017df4:	4b8c      	ldr	r3, [pc, #560]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017df6:	2200      	movs	r2, #0
 8017df8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8017dfa:	2005      	movs	r0, #5
 8017dfc:	f7ff fec2 	bl	8017b84 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017e00:	488b      	ldr	r0, [pc, #556]	; (8018030 <RadioSetRxConfig+0x304>)
 8017e02:	f002 fadb 	bl	801a3bc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e06:	488b      	ldr	r0, [pc, #556]	; (8018034 <RadioSetRxConfig+0x308>)
 8017e08:	f002 fbaa 	bl	801a560 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017e0c:	4a8a      	ldr	r2, [pc, #552]	; (8018038 <RadioSetRxConfig+0x30c>)
 8017e0e:	f107 031c 	add.w	r3, r7, #28
 8017e12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017e16:	e883 0003 	stmia.w	r3, {r0, r1}
 8017e1a:	f107 031c 	add.w	r3, r7, #28
 8017e1e:	4618      	mov	r0, r3
 8017e20:	f001 fe6b 	bl	8019afa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017e24:	f240 10ff 	movw	r0, #511	; 0x1ff
 8017e28:	f001 feb6 	bl	8019b98 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8017e2c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8017e30:	f000 fe09 	bl	8018a46 <RadioRead>
 8017e34:	4603      	mov	r3, r0
 8017e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8017e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e3e:	f023 0310 	bic.w	r3, r3, #16
 8017e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8017e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e4a:	4619      	mov	r1, r3
 8017e4c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8017e50:	f000 fde7 	bl	8018a22 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8017e54:	2104      	movs	r1, #4
 8017e56:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8017e5a:	f000 fde2 	bl	8018a22 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8017e5e:	f640 009b 	movw	r0, #2203	; 0x89b
 8017e62:	f000 fdf0 	bl	8018a46 <RadioRead>
 8017e66:	4603      	mov	r3, r0
 8017e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e70:	f023 031c 	bic.w	r3, r3, #28
 8017e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8017e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e7c:	f043 0308 	orr.w	r3, r3, #8
 8017e80:	b2db      	uxtb	r3, r3
 8017e82:	4619      	mov	r1, r3
 8017e84:	f640 009b 	movw	r0, #2203	; 0x89b
 8017e88:	f000 fdcb 	bl	8018a22 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8017e8c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8017e90:	f000 fdd9 	bl	8018a46 <RadioRead>
 8017e94:	4603      	mov	r3, r0
 8017e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e9e:	f023 0318 	bic.w	r3, r3, #24
 8017ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8017ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017eaa:	f043 0318 	orr.w	r3, r3, #24
 8017eae:	b2db      	uxtb	r3, r3
 8017eb0:	4619      	mov	r1, r3
 8017eb2:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8017eb6:	f000 fdb4 	bl	8018a22 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8017eba:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8017ebe:	f000 fdc2 	bl	8018a46 <RadioRead>
 8017ec2:	4603      	mov	r3, r0
 8017ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8017ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8017ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ed8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8017edc:	b2db      	uxtb	r3, r3
 8017ede:	4619      	mov	r1, r3
 8017ee0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8017ee4:	f000 fd9d 	bl	8018a22 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017ee8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017eea:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017eee:	fb02 f303 	mul.w	r3, r2, r3
 8017ef2:	461a      	mov	r2, r3
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8017efa:	4a4b      	ldr	r2, [pc, #300]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017efc:	6093      	str	r3, [r2, #8]
            break;
 8017efe:	e108      	b.n	8018112 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017f00:	2000      	movs	r0, #0
 8017f02:	f001 ffc1 	bl	8019e88 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017f06:	4b48      	ldr	r3, [pc, #288]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017f08:	2200      	movs	r2, #0
 8017f0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017f0e:	4a46      	ldr	r2, [pc, #280]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017f14:	4b44      	ldr	r3, [pc, #272]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017f16:	220b      	movs	r2, #11
 8017f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017f1c:	68b8      	ldr	r0, [r7, #8]
 8017f1e:	f002 fe71 	bl	801ac04 <SUBGRF_GetFskBandwidthRegValue>
 8017f22:	4603      	mov	r3, r0
 8017f24:	461a      	mov	r2, r3
 8017f26:	4b40      	ldr	r3, [pc, #256]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017f2c:	4b3e      	ldr	r3, [pc, #248]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017f2e:	2200      	movs	r2, #0
 8017f30:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017f32:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017f34:	00db      	lsls	r3, r3, #3
 8017f36:	b29a      	uxth	r2, r3
 8017f38:	4b3b      	ldr	r3, [pc, #236]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017f3a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017f3c:	4b3a      	ldr	r3, [pc, #232]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017f3e:	2204      	movs	r2, #4
 8017f40:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8017f42:	4b39      	ldr	r3, [pc, #228]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017f44:	2218      	movs	r2, #24
 8017f46:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017f48:	4b37      	ldr	r3, [pc, #220]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017f4a:	2200      	movs	r2, #0
 8017f4c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017f4e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017f52:	f083 0301 	eor.w	r3, r3, #1
 8017f56:	b2db      	uxtb	r3, r3
 8017f58:	461a      	mov	r2, r3
 8017f5a:	4b33      	ldr	r3, [pc, #204]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017f5c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017f5e:	4b33      	ldr	r3, [pc, #204]	; (801802c <RadioSetRxConfig+0x300>)
 8017f60:	781a      	ldrb	r2, [r3, #0]
 8017f62:	4b31      	ldr	r3, [pc, #196]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017f64:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8017f66:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d003      	beq.n	8017f76 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017f6e:	4b2e      	ldr	r3, [pc, #184]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017f70:	22f2      	movs	r2, #242	; 0xf2
 8017f72:	75da      	strb	r2, [r3, #23]
 8017f74:	e002      	b.n	8017f7c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017f76:	4b2c      	ldr	r3, [pc, #176]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017f78:	2201      	movs	r2, #1
 8017f7a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017f7c:	4b2a      	ldr	r3, [pc, #168]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017f7e:	2201      	movs	r2, #1
 8017f80:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017f82:	f000 fc52 	bl	801882a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8017f86:	2000      	movs	r0, #0
 8017f88:	f7ff fdfc 	bl	8017b84 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017f8c:	4828      	ldr	r0, [pc, #160]	; (8018030 <RadioSetRxConfig+0x304>)
 8017f8e:	f002 fa15 	bl	801a3bc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017f92:	4828      	ldr	r0, [pc, #160]	; (8018034 <RadioSetRxConfig+0x308>)
 8017f94:	f002 fae4 	bl	801a560 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017f98:	4a28      	ldr	r2, [pc, #160]	; (801803c <RadioSetRxConfig+0x310>)
 8017f9a:	f107 0314 	add.w	r3, r7, #20
 8017f9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017fa2:	e883 0003 	stmia.w	r3, {r0, r1}
 8017fa6:	f107 0314 	add.w	r3, r7, #20
 8017faa:	4618      	mov	r0, r3
 8017fac:	f001 fda5 	bl	8019afa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017fb0:	f240 10ff 	movw	r0, #511	; 0x1ff
 8017fb4:	f001 fdf0 	bl	8019b98 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017fb8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017fba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017fbe:	fb02 f303 	mul.w	r3, r2, r3
 8017fc2:	461a      	mov	r2, r3
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8017fca:	4a17      	ldr	r2, [pc, #92]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017fcc:	6093      	str	r3, [r2, #8]
            break;
 8017fce:	e0a0      	b.n	8018112 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017fd0:	2000      	movs	r0, #0
 8017fd2:	f001 ff59 	bl	8019e88 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017fd6:	4b14      	ldr	r3, [pc, #80]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017fd8:	2201      	movs	r2, #1
 8017fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	b2da      	uxtb	r2, r3
 8017fe2:	4b11      	ldr	r3, [pc, #68]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8017fe8:	4a15      	ldr	r2, [pc, #84]	; (8018040 <RadioSetRxConfig+0x314>)
 8017fea:	68bb      	ldr	r3, [r7, #8]
 8017fec:	4413      	add	r3, r2
 8017fee:	781a      	ldrb	r2, [r3, #0]
 8017ff0:	4b0d      	ldr	r3, [pc, #52]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8017ff6:	4a0c      	ldr	r2, [pc, #48]	; (8018028 <RadioSetRxConfig+0x2fc>)
 8017ff8:	7bbb      	ldrb	r3, [r7, #14]
 8017ffa:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017ffe:	68bb      	ldr	r3, [r7, #8]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d105      	bne.n	8018010 <RadioSetRxConfig+0x2e4>
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	2b0b      	cmp	r3, #11
 8018008:	d008      	beq.n	801801c <RadioSetRxConfig+0x2f0>
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	2b0c      	cmp	r3, #12
 801800e:	d005      	beq.n	801801c <RadioSetRxConfig+0x2f0>
 8018010:	68bb      	ldr	r3, [r7, #8]
 8018012:	2b01      	cmp	r3, #1
 8018014:	d116      	bne.n	8018044 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	2b0c      	cmp	r3, #12
 801801a:	d113      	bne.n	8018044 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801801c:	4b02      	ldr	r3, [pc, #8]	; (8018028 <RadioSetRxConfig+0x2fc>)
 801801e:	2201      	movs	r2, #1
 8018020:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8018024:	e012      	b.n	801804c <RadioSetRxConfig+0x320>
 8018026:	bf00      	nop
 8018028:	200021cc 	.word	0x200021cc
 801802c:	2000013c 	.word	0x2000013c
 8018030:	20002204 	.word	0x20002204
 8018034:	200021da 	.word	0x200021da
 8018038:	0801cb50 	.word	0x0801cb50
 801803c:	0801cb58 	.word	0x0801cb58
 8018040:	0801d134 	.word	0x0801d134
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018044:	4b35      	ldr	r3, [pc, #212]	; (801811c <RadioSetRxConfig+0x3f0>)
 8018046:	2200      	movs	r2, #0
 8018048:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801804c:	4b33      	ldr	r3, [pc, #204]	; (801811c <RadioSetRxConfig+0x3f0>)
 801804e:	2201      	movs	r2, #1
 8018050:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018052:	4b32      	ldr	r3, [pc, #200]	; (801811c <RadioSetRxConfig+0x3f0>)
 8018054:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018058:	2b05      	cmp	r3, #5
 801805a:	d004      	beq.n	8018066 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801805c:	4b2f      	ldr	r3, [pc, #188]	; (801811c <RadioSetRxConfig+0x3f0>)
 801805e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018062:	2b06      	cmp	r3, #6
 8018064:	d10a      	bne.n	801807c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8018066:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018068:	2b0b      	cmp	r3, #11
 801806a:	d803      	bhi.n	8018074 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801806c:	4b2b      	ldr	r3, [pc, #172]	; (801811c <RadioSetRxConfig+0x3f0>)
 801806e:	220c      	movs	r2, #12
 8018070:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018072:	e006      	b.n	8018082 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018074:	4a29      	ldr	r2, [pc, #164]	; (801811c <RadioSetRxConfig+0x3f0>)
 8018076:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018078:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801807a:	e002      	b.n	8018082 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801807c:	4a27      	ldr	r2, [pc, #156]	; (801811c <RadioSetRxConfig+0x3f0>)
 801807e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018080:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018082:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8018086:	4b25      	ldr	r3, [pc, #148]	; (801811c <RadioSetRxConfig+0x3f0>)
 8018088:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801808a:	4b25      	ldr	r3, [pc, #148]	; (8018120 <RadioSetRxConfig+0x3f4>)
 801808c:	781a      	ldrb	r2, [r3, #0]
 801808e:	4b23      	ldr	r3, [pc, #140]	; (801811c <RadioSetRxConfig+0x3f0>)
 8018090:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018092:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8018096:	4b21      	ldr	r3, [pc, #132]	; (801811c <RadioSetRxConfig+0x3f0>)
 8018098:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801809c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80180a0:	4b1e      	ldr	r3, [pc, #120]	; (801811c <RadioSetRxConfig+0x3f0>)
 80180a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80180a6:	f000 fbc0 	bl	801882a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80180aa:	2001      	movs	r0, #1
 80180ac:	f7ff fd6a 	bl	8017b84 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80180b0:	481c      	ldr	r0, [pc, #112]	; (8018124 <RadioSetRxConfig+0x3f8>)
 80180b2:	f002 f983 	bl	801a3bc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80180b6:	481c      	ldr	r0, [pc, #112]	; (8018128 <RadioSetRxConfig+0x3fc>)
 80180b8:	f002 fa52 	bl	801a560 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80180bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80180be:	b2db      	uxtb	r3, r3
 80180c0:	4618      	mov	r0, r3
 80180c2:	f001 fef0 	bl	8019ea6 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80180c6:	4b15      	ldr	r3, [pc, #84]	; (801811c <RadioSetRxConfig+0x3f0>)
 80180c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80180cc:	2b01      	cmp	r3, #1
 80180ce:	d10d      	bne.n	80180ec <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80180d0:	f240 7036 	movw	r0, #1846	; 0x736
 80180d4:	f002 fba0 	bl	801a818 <SUBGRF_ReadRegister>
 80180d8:	4603      	mov	r3, r0
 80180da:	f023 0304 	bic.w	r3, r3, #4
 80180de:	b2db      	uxtb	r3, r3
 80180e0:	4619      	mov	r1, r3
 80180e2:	f240 7036 	movw	r0, #1846	; 0x736
 80180e6:	f002 fb83 	bl	801a7f0 <SUBGRF_WriteRegister>
 80180ea:	e00c      	b.n	8018106 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80180ec:	f240 7036 	movw	r0, #1846	; 0x736
 80180f0:	f002 fb92 	bl	801a818 <SUBGRF_ReadRegister>
 80180f4:	4603      	mov	r3, r0
 80180f6:	f043 0304 	orr.w	r3, r3, #4
 80180fa:	b2db      	uxtb	r3, r3
 80180fc:	4619      	mov	r1, r3
 80180fe:	f240 7036 	movw	r0, #1846	; 0x736
 8018102:	f002 fb75 	bl	801a7f0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8018106:	4b05      	ldr	r3, [pc, #20]	; (801811c <RadioSetRxConfig+0x3f0>)
 8018108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801810c:	609a      	str	r2, [r3, #8]
            break;
 801810e:	e000      	b.n	8018112 <RadioSetRxConfig+0x3e6>
            break;
 8018110:	bf00      	nop
    }
}
 8018112:	bf00      	nop
 8018114:	3728      	adds	r7, #40	; 0x28
 8018116:	46bd      	mov	sp, r7
 8018118:	bd80      	pop	{r7, pc}
 801811a:	bf00      	nop
 801811c:	200021cc 	.word	0x200021cc
 8018120:	2000013c 	.word	0x2000013c
 8018124:	20002204 	.word	0x20002204
 8018128:	200021da 	.word	0x200021da

0801812c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801812c:	b580      	push	{r7, lr}
 801812e:	b086      	sub	sp, #24
 8018130:	af00      	add	r7, sp, #0
 8018132:	60ba      	str	r2, [r7, #8]
 8018134:	607b      	str	r3, [r7, #4]
 8018136:	4603      	mov	r3, r0
 8018138:	73fb      	strb	r3, [r7, #15]
 801813a:	460b      	mov	r3, r1
 801813c:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801813e:	f002 fe2e 	bl	801ad9e <RFW_DeInit>
    switch( modem )
 8018142:	7bfb      	ldrb	r3, [r7, #15]
 8018144:	2b04      	cmp	r3, #4
 8018146:	f000 80c7 	beq.w	80182d8 <RadioSetTxConfig+0x1ac>
 801814a:	2b04      	cmp	r3, #4
 801814c:	f300 80d6 	bgt.w	80182fc <RadioSetTxConfig+0x1d0>
 8018150:	2b00      	cmp	r3, #0
 8018152:	d002      	beq.n	801815a <RadioSetTxConfig+0x2e>
 8018154:	2b01      	cmp	r3, #1
 8018156:	d059      	beq.n	801820c <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018158:	e0d0      	b.n	80182fc <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801815a:	4b74      	ldr	r3, [pc, #464]	; (801832c <RadioSetTxConfig+0x200>)
 801815c:	2200      	movs	r2, #0
 801815e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018162:	4a72      	ldr	r2, [pc, #456]	; (801832c <RadioSetTxConfig+0x200>)
 8018164:	6a3b      	ldr	r3, [r7, #32]
 8018166:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018168:	4b70      	ldr	r3, [pc, #448]	; (801832c <RadioSetTxConfig+0x200>)
 801816a:	220b      	movs	r2, #11
 801816c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018170:	6878      	ldr	r0, [r7, #4]
 8018172:	f002 fd47 	bl	801ac04 <SUBGRF_GetFskBandwidthRegValue>
 8018176:	4603      	mov	r3, r0
 8018178:	461a      	mov	r2, r3
 801817a:	4b6c      	ldr	r3, [pc, #432]	; (801832c <RadioSetTxConfig+0x200>)
 801817c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8018180:	4a6a      	ldr	r2, [pc, #424]	; (801832c <RadioSetTxConfig+0x200>)
 8018182:	68bb      	ldr	r3, [r7, #8]
 8018184:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018186:	4b69      	ldr	r3, [pc, #420]	; (801832c <RadioSetTxConfig+0x200>)
 8018188:	2200      	movs	r2, #0
 801818a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801818c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801818e:	00db      	lsls	r3, r3, #3
 8018190:	b29a      	uxth	r2, r3
 8018192:	4b66      	ldr	r3, [pc, #408]	; (801832c <RadioSetTxConfig+0x200>)
 8018194:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018196:	4b65      	ldr	r3, [pc, #404]	; (801832c <RadioSetTxConfig+0x200>)
 8018198:	2204      	movs	r2, #4
 801819a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801819c:	4b63      	ldr	r3, [pc, #396]	; (801832c <RadioSetTxConfig+0x200>)
 801819e:	2218      	movs	r2, #24
 80181a0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80181a2:	4b62      	ldr	r3, [pc, #392]	; (801832c <RadioSetTxConfig+0x200>)
 80181a4:	2200      	movs	r2, #0
 80181a6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80181a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80181ac:	f083 0301 	eor.w	r3, r3, #1
 80181b0:	b2db      	uxtb	r3, r3
 80181b2:	461a      	mov	r2, r3
 80181b4:	4b5d      	ldr	r3, [pc, #372]	; (801832c <RadioSetTxConfig+0x200>)
 80181b6:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80181b8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d003      	beq.n	80181c8 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80181c0:	4b5a      	ldr	r3, [pc, #360]	; (801832c <RadioSetTxConfig+0x200>)
 80181c2:	22f2      	movs	r2, #242	; 0xf2
 80181c4:	75da      	strb	r2, [r3, #23]
 80181c6:	e002      	b.n	80181ce <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80181c8:	4b58      	ldr	r3, [pc, #352]	; (801832c <RadioSetTxConfig+0x200>)
 80181ca:	2201      	movs	r2, #1
 80181cc:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80181ce:	4b57      	ldr	r3, [pc, #348]	; (801832c <RadioSetTxConfig+0x200>)
 80181d0:	2201      	movs	r2, #1
 80181d2:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80181d4:	f000 fb29 	bl	801882a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80181d8:	2000      	movs	r0, #0
 80181da:	f7ff fcd3 	bl	8017b84 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80181de:	4854      	ldr	r0, [pc, #336]	; (8018330 <RadioSetTxConfig+0x204>)
 80181e0:	f002 f8ec 	bl	801a3bc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80181e4:	4853      	ldr	r0, [pc, #332]	; (8018334 <RadioSetTxConfig+0x208>)
 80181e6:	f002 f9bb 	bl	801a560 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80181ea:	4a53      	ldr	r2, [pc, #332]	; (8018338 <RadioSetTxConfig+0x20c>)
 80181ec:	f107 0310 	add.w	r3, r7, #16
 80181f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80181f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80181f8:	f107 0310 	add.w	r3, r7, #16
 80181fc:	4618      	mov	r0, r3
 80181fe:	f001 fc7c 	bl	8019afa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018202:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018206:	f001 fcc7 	bl	8019b98 <SUBGRF_SetWhiteningSeed>
            break;
 801820a:	e078      	b.n	80182fe <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801820c:	4b47      	ldr	r3, [pc, #284]	; (801832c <RadioSetTxConfig+0x200>)
 801820e:	2201      	movs	r2, #1
 8018210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8018214:	6a3b      	ldr	r3, [r7, #32]
 8018216:	b2da      	uxtb	r2, r3
 8018218:	4b44      	ldr	r3, [pc, #272]	; (801832c <RadioSetTxConfig+0x200>)
 801821a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801821e:	4a47      	ldr	r2, [pc, #284]	; (801833c <RadioSetTxConfig+0x210>)
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	4413      	add	r3, r2
 8018224:	781a      	ldrb	r2, [r3, #0]
 8018226:	4b41      	ldr	r3, [pc, #260]	; (801832c <RadioSetTxConfig+0x200>)
 8018228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801822c:	4a3f      	ldr	r2, [pc, #252]	; (801832c <RadioSetTxConfig+0x200>)
 801822e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018232:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d105      	bne.n	8018248 <RadioSetTxConfig+0x11c>
 801823c:	6a3b      	ldr	r3, [r7, #32]
 801823e:	2b0b      	cmp	r3, #11
 8018240:	d008      	beq.n	8018254 <RadioSetTxConfig+0x128>
 8018242:	6a3b      	ldr	r3, [r7, #32]
 8018244:	2b0c      	cmp	r3, #12
 8018246:	d005      	beq.n	8018254 <RadioSetTxConfig+0x128>
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	2b01      	cmp	r3, #1
 801824c:	d107      	bne.n	801825e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801824e:	6a3b      	ldr	r3, [r7, #32]
 8018250:	2b0c      	cmp	r3, #12
 8018252:	d104      	bne.n	801825e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018254:	4b35      	ldr	r3, [pc, #212]	; (801832c <RadioSetTxConfig+0x200>)
 8018256:	2201      	movs	r2, #1
 8018258:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801825c:	e003      	b.n	8018266 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801825e:	4b33      	ldr	r3, [pc, #204]	; (801832c <RadioSetTxConfig+0x200>)
 8018260:	2200      	movs	r2, #0
 8018262:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018266:	4b31      	ldr	r3, [pc, #196]	; (801832c <RadioSetTxConfig+0x200>)
 8018268:	2201      	movs	r2, #1
 801826a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801826c:	4b2f      	ldr	r3, [pc, #188]	; (801832c <RadioSetTxConfig+0x200>)
 801826e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018272:	2b05      	cmp	r3, #5
 8018274:	d004      	beq.n	8018280 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018276:	4b2d      	ldr	r3, [pc, #180]	; (801832c <RadioSetTxConfig+0x200>)
 8018278:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801827c:	2b06      	cmp	r3, #6
 801827e:	d10a      	bne.n	8018296 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8018280:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018282:	2b0b      	cmp	r3, #11
 8018284:	d803      	bhi.n	801828e <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018286:	4b29      	ldr	r3, [pc, #164]	; (801832c <RadioSetTxConfig+0x200>)
 8018288:	220c      	movs	r2, #12
 801828a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801828c:	e006      	b.n	801829c <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801828e:	4a27      	ldr	r2, [pc, #156]	; (801832c <RadioSetTxConfig+0x200>)
 8018290:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018292:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018294:	e002      	b.n	801829c <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018296:	4a25      	ldr	r2, [pc, #148]	; (801832c <RadioSetTxConfig+0x200>)
 8018298:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801829a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801829c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80182a0:	4b22      	ldr	r3, [pc, #136]	; (801832c <RadioSetTxConfig+0x200>)
 80182a2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80182a4:	4b26      	ldr	r3, [pc, #152]	; (8018340 <RadioSetTxConfig+0x214>)
 80182a6:	781a      	ldrb	r2, [r3, #0]
 80182a8:	4b20      	ldr	r3, [pc, #128]	; (801832c <RadioSetTxConfig+0x200>)
 80182aa:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80182ac:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80182b0:	4b1e      	ldr	r3, [pc, #120]	; (801832c <RadioSetTxConfig+0x200>)
 80182b2:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80182b6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80182ba:	4b1c      	ldr	r3, [pc, #112]	; (801832c <RadioSetTxConfig+0x200>)
 80182bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80182c0:	f000 fab3 	bl	801882a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80182c4:	2001      	movs	r0, #1
 80182c6:	f7ff fc5d 	bl	8017b84 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80182ca:	4819      	ldr	r0, [pc, #100]	; (8018330 <RadioSetTxConfig+0x204>)
 80182cc:	f002 f876 	bl	801a3bc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80182d0:	4818      	ldr	r0, [pc, #96]	; (8018334 <RadioSetTxConfig+0x208>)
 80182d2:	f002 f945 	bl	801a560 <SUBGRF_SetPacketParams>
            break;
 80182d6:	e012      	b.n	80182fe <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80182d8:	2004      	movs	r0, #4
 80182da:	f7ff fc53 	bl	8017b84 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80182de:	4b13      	ldr	r3, [pc, #76]	; (801832c <RadioSetTxConfig+0x200>)
 80182e0:	2202      	movs	r2, #2
 80182e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80182e6:	4a11      	ldr	r2, [pc, #68]	; (801832c <RadioSetTxConfig+0x200>)
 80182e8:	6a3b      	ldr	r3, [r7, #32]
 80182ea:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80182ec:	4b0f      	ldr	r3, [pc, #60]	; (801832c <RadioSetTxConfig+0x200>)
 80182ee:	2216      	movs	r2, #22
 80182f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80182f4:	480e      	ldr	r0, [pc, #56]	; (8018330 <RadioSetTxConfig+0x204>)
 80182f6:	f002 f861 	bl	801a3bc <SUBGRF_SetModulationParams>
            break;
 80182fa:	e000      	b.n	80182fe <RadioSetTxConfig+0x1d2>
            break;
 80182fc:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80182fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018302:	4618      	mov	r0, r3
 8018304:	f002 fb90 	bl	801aa28 <SUBGRF_SetRfTxPower>
 8018308:	4603      	mov	r3, r0
 801830a:	461a      	mov	r2, r3
 801830c:	4b07      	ldr	r3, [pc, #28]	; (801832c <RadioSetTxConfig+0x200>)
 801830e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8018312:	4b06      	ldr	r3, [pc, #24]	; (801832c <RadioSetTxConfig+0x200>)
 8018314:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018318:	4618      	mov	r0, r3
 801831a:	f002 fd54 	bl	801adc6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801831e:	4a03      	ldr	r2, [pc, #12]	; (801832c <RadioSetTxConfig+0x200>)
 8018320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018322:	6053      	str	r3, [r2, #4]
}
 8018324:	bf00      	nop
 8018326:	3718      	adds	r7, #24
 8018328:	46bd      	mov	sp, r7
 801832a:	bd80      	pop	{r7, pc}
 801832c:	200021cc 	.word	0x200021cc
 8018330:	20002204 	.word	0x20002204
 8018334:	200021da 	.word	0x200021da
 8018338:	0801cb58 	.word	0x0801cb58
 801833c:	0801d134 	.word	0x0801d134
 8018340:	2000013c 	.word	0x2000013c

08018344 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8018344:	b480      	push	{r7}
 8018346:	b083      	sub	sp, #12
 8018348:	af00      	add	r7, sp, #0
 801834a:	6078      	str	r0, [r7, #4]
    return true;
 801834c:	2301      	movs	r3, #1
}
 801834e:	4618      	mov	r0, r3
 8018350:	370c      	adds	r7, #12
 8018352:	46bd      	mov	sp, r7
 8018354:	bc80      	pop	{r7}
 8018356:	4770      	bx	lr

08018358 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8018358:	b480      	push	{r7}
 801835a:	b085      	sub	sp, #20
 801835c:	af00      	add	r7, sp, #0
 801835e:	4603      	mov	r3, r0
 8018360:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8018362:	2300      	movs	r3, #0
 8018364:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8018366:	79fb      	ldrb	r3, [r7, #7]
 8018368:	2b0a      	cmp	r3, #10
 801836a:	d83e      	bhi.n	80183ea <RadioGetLoRaBandwidthInHz+0x92>
 801836c:	a201      	add	r2, pc, #4	; (adr r2, 8018374 <RadioGetLoRaBandwidthInHz+0x1c>)
 801836e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018372:	bf00      	nop
 8018374:	080183a1 	.word	0x080183a1
 8018378:	080183b1 	.word	0x080183b1
 801837c:	080183c1 	.word	0x080183c1
 8018380:	080183d1 	.word	0x080183d1
 8018384:	080183d9 	.word	0x080183d9
 8018388:	080183df 	.word	0x080183df
 801838c:	080183e5 	.word	0x080183e5
 8018390:	080183eb 	.word	0x080183eb
 8018394:	080183a9 	.word	0x080183a9
 8018398:	080183b9 	.word	0x080183b9
 801839c:	080183c9 	.word	0x080183c9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80183a0:	f641 6384 	movw	r3, #7812	; 0x1e84
 80183a4:	60fb      	str	r3, [r7, #12]
        break;
 80183a6:	e020      	b.n	80183ea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80183a8:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80183ac:	60fb      	str	r3, [r7, #12]
        break;
 80183ae:	e01c      	b.n	80183ea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80183b0:	f643 5309 	movw	r3, #15625	; 0x3d09
 80183b4:	60fb      	str	r3, [r7, #12]
        break;
 80183b6:	e018      	b.n	80183ea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80183b8:	f245 1361 	movw	r3, #20833	; 0x5161
 80183bc:	60fb      	str	r3, [r7, #12]
        break;
 80183be:	e014      	b.n	80183ea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80183c0:	f647 2312 	movw	r3, #31250	; 0x7a12
 80183c4:	60fb      	str	r3, [r7, #12]
        break;
 80183c6:	e010      	b.n	80183ea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80183c8:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80183cc:	60fb      	str	r3, [r7, #12]
        break;
 80183ce:	e00c      	b.n	80183ea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80183d0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80183d4:	60fb      	str	r3, [r7, #12]
        break;
 80183d6:	e008      	b.n	80183ea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80183d8:	4b07      	ldr	r3, [pc, #28]	; (80183f8 <RadioGetLoRaBandwidthInHz+0xa0>)
 80183da:	60fb      	str	r3, [r7, #12]
        break;
 80183dc:	e005      	b.n	80183ea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80183de:	4b07      	ldr	r3, [pc, #28]	; (80183fc <RadioGetLoRaBandwidthInHz+0xa4>)
 80183e0:	60fb      	str	r3, [r7, #12]
        break;
 80183e2:	e002      	b.n	80183ea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80183e4:	4b06      	ldr	r3, [pc, #24]	; (8018400 <RadioGetLoRaBandwidthInHz+0xa8>)
 80183e6:	60fb      	str	r3, [r7, #12]
        break;
 80183e8:	bf00      	nop
    }

    return bandwidthInHz;
 80183ea:	68fb      	ldr	r3, [r7, #12]
}
 80183ec:	4618      	mov	r0, r3
 80183ee:	3714      	adds	r7, #20
 80183f0:	46bd      	mov	sp, r7
 80183f2:	bc80      	pop	{r7}
 80183f4:	4770      	bx	lr
 80183f6:	bf00      	nop
 80183f8:	0001e848 	.word	0x0001e848
 80183fc:	0003d090 	.word	0x0003d090
 8018400:	0007a120 	.word	0x0007a120

08018404 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018404:	b480      	push	{r7}
 8018406:	b083      	sub	sp, #12
 8018408:	af00      	add	r7, sp, #0
 801840a:	6078      	str	r0, [r7, #4]
 801840c:	4608      	mov	r0, r1
 801840e:	4611      	mov	r1, r2
 8018410:	461a      	mov	r2, r3
 8018412:	4603      	mov	r3, r0
 8018414:	70fb      	strb	r3, [r7, #3]
 8018416:	460b      	mov	r3, r1
 8018418:	803b      	strh	r3, [r7, #0]
 801841a:	4613      	mov	r3, r2
 801841c:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 801841e:	883b      	ldrh	r3, [r7, #0]
 8018420:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018422:	78ba      	ldrb	r2, [r7, #2]
 8018424:	f082 0201 	eor.w	r2, r2, #1
 8018428:	b2d2      	uxtb	r2, r2
 801842a:	2a00      	cmp	r2, #0
 801842c:	d001      	beq.n	8018432 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801842e:	2208      	movs	r2, #8
 8018430:	e000      	b.n	8018434 <RadioGetGfskTimeOnAirNumerator+0x30>
 8018432:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8018434:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018436:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801843a:	7c3b      	ldrb	r3, [r7, #16]
 801843c:	7d39      	ldrb	r1, [r7, #20]
 801843e:	2900      	cmp	r1, #0
 8018440:	d001      	beq.n	8018446 <RadioGetGfskTimeOnAirNumerator+0x42>
 8018442:	2102      	movs	r1, #2
 8018444:	e000      	b.n	8018448 <RadioGetGfskTimeOnAirNumerator+0x44>
 8018446:	2100      	movs	r1, #0
 8018448:	440b      	add	r3, r1
 801844a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801844c:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 801844e:	4618      	mov	r0, r3
 8018450:	370c      	adds	r7, #12
 8018452:	46bd      	mov	sp, r7
 8018454:	bc80      	pop	{r7}
 8018456:	4770      	bx	lr

08018458 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018458:	b480      	push	{r7}
 801845a:	b08b      	sub	sp, #44	; 0x2c
 801845c:	af00      	add	r7, sp, #0
 801845e:	60f8      	str	r0, [r7, #12]
 8018460:	60b9      	str	r1, [r7, #8]
 8018462:	4611      	mov	r1, r2
 8018464:	461a      	mov	r2, r3
 8018466:	460b      	mov	r3, r1
 8018468:	71fb      	strb	r3, [r7, #7]
 801846a:	4613      	mov	r3, r2
 801846c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801846e:	79fb      	ldrb	r3, [r7, #7]
 8018470:	3304      	adds	r3, #4
 8018472:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8018474:	2300      	movs	r3, #0
 8018476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801847a:	68bb      	ldr	r3, [r7, #8]
 801847c:	2b05      	cmp	r3, #5
 801847e:	d002      	beq.n	8018486 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8018480:	68bb      	ldr	r3, [r7, #8]
 8018482:	2b06      	cmp	r3, #6
 8018484:	d104      	bne.n	8018490 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8018486:	88bb      	ldrh	r3, [r7, #4]
 8018488:	2b0b      	cmp	r3, #11
 801848a:	d801      	bhi.n	8018490 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801848c:	230c      	movs	r3, #12
 801848e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	2b00      	cmp	r3, #0
 8018494:	d105      	bne.n	80184a2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8018496:	68bb      	ldr	r3, [r7, #8]
 8018498:	2b0b      	cmp	r3, #11
 801849a:	d008      	beq.n	80184ae <RadioGetLoRaTimeOnAirNumerator+0x56>
 801849c:	68bb      	ldr	r3, [r7, #8]
 801849e:	2b0c      	cmp	r3, #12
 80184a0:	d005      	beq.n	80184ae <RadioGetLoRaTimeOnAirNumerator+0x56>
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	2b01      	cmp	r3, #1
 80184a6:	d105      	bne.n	80184b4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80184a8:	68bb      	ldr	r3, [r7, #8]
 80184aa:	2b0c      	cmp	r3, #12
 80184ac:	d102      	bne.n	80184b4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80184ae:	2301      	movs	r3, #1
 80184b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80184b4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80184b8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80184ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80184be:	2a00      	cmp	r2, #0
 80184c0:	d001      	beq.n	80184c6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80184c2:	2210      	movs	r2, #16
 80184c4:	e000      	b.n	80184c8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80184c6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80184c8:	4413      	add	r3, r2
 80184ca:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80184cc:	68bb      	ldr	r3, [r7, #8]
 80184ce:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80184d0:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80184d2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80184d6:	2a00      	cmp	r2, #0
 80184d8:	d001      	beq.n	80184de <RadioGetLoRaTimeOnAirNumerator+0x86>
 80184da:	2200      	movs	r2, #0
 80184dc:	e000      	b.n	80184e0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80184de:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80184e0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80184e2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80184e4:	68bb      	ldr	r3, [r7, #8]
 80184e6:	2b06      	cmp	r3, #6
 80184e8:	d803      	bhi.n	80184f2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80184ea:	68bb      	ldr	r3, [r7, #8]
 80184ec:	009b      	lsls	r3, r3, #2
 80184ee:	623b      	str	r3, [r7, #32]
 80184f0:	e00e      	b.n	8018510 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80184f2:	69fb      	ldr	r3, [r7, #28]
 80184f4:	3308      	adds	r3, #8
 80184f6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80184f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d004      	beq.n	801850a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8018500:	68bb      	ldr	r3, [r7, #8]
 8018502:	3b02      	subs	r3, #2
 8018504:	009b      	lsls	r3, r3, #2
 8018506:	623b      	str	r3, [r7, #32]
 8018508:	e002      	b.n	8018510 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801850a:	68bb      	ldr	r3, [r7, #8]
 801850c:	009b      	lsls	r3, r3, #2
 801850e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8018510:	69fb      	ldr	r3, [r7, #28]
 8018512:	2b00      	cmp	r3, #0
 8018514:	da01      	bge.n	801851a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8018516:	2300      	movs	r3, #0
 8018518:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801851a:	69fa      	ldr	r2, [r7, #28]
 801851c:	6a3b      	ldr	r3, [r7, #32]
 801851e:	4413      	add	r3, r2
 8018520:	1e5a      	subs	r2, r3, #1
 8018522:	6a3b      	ldr	r3, [r7, #32]
 8018524:	fb92 f3f3 	sdiv	r3, r2, r3
 8018528:	697a      	ldr	r2, [r7, #20]
 801852a:	fb03 f202 	mul.w	r2, r3, r2
 801852e:	88bb      	ldrh	r3, [r7, #4]
 8018530:	4413      	add	r3, r2
    int32_t intermediate =
 8018532:	330c      	adds	r3, #12
 8018534:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8018536:	68bb      	ldr	r3, [r7, #8]
 8018538:	2b06      	cmp	r3, #6
 801853a:	d802      	bhi.n	8018542 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801853c:	69bb      	ldr	r3, [r7, #24]
 801853e:	3302      	adds	r3, #2
 8018540:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8018542:	69bb      	ldr	r3, [r7, #24]
 8018544:	009b      	lsls	r3, r3, #2
 8018546:	1c5a      	adds	r2, r3, #1
 8018548:	68bb      	ldr	r3, [r7, #8]
 801854a:	3b02      	subs	r3, #2
 801854c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8018550:	4618      	mov	r0, r3
 8018552:	372c      	adds	r7, #44	; 0x2c
 8018554:	46bd      	mov	sp, r7
 8018556:	bc80      	pop	{r7}
 8018558:	4770      	bx	lr
	...

0801855c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801855c:	b580      	push	{r7, lr}
 801855e:	b08a      	sub	sp, #40	; 0x28
 8018560:	af04      	add	r7, sp, #16
 8018562:	60b9      	str	r1, [r7, #8]
 8018564:	607a      	str	r2, [r7, #4]
 8018566:	461a      	mov	r2, r3
 8018568:	4603      	mov	r3, r0
 801856a:	73fb      	strb	r3, [r7, #15]
 801856c:	4613      	mov	r3, r2
 801856e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8018570:	2300      	movs	r3, #0
 8018572:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8018574:	2301      	movs	r3, #1
 8018576:	613b      	str	r3, [r7, #16]

    switch( modem )
 8018578:	7bfb      	ldrb	r3, [r7, #15]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d002      	beq.n	8018584 <RadioTimeOnAir+0x28>
 801857e:	2b01      	cmp	r3, #1
 8018580:	d017      	beq.n	80185b2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8018582:	e035      	b.n	80185f0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8018584:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8018588:	8c3a      	ldrh	r2, [r7, #32]
 801858a:	7bb9      	ldrb	r1, [r7, #14]
 801858c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018590:	9301      	str	r3, [sp, #4]
 8018592:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018596:	9300      	str	r3, [sp, #0]
 8018598:	4603      	mov	r3, r0
 801859a:	6878      	ldr	r0, [r7, #4]
 801859c:	f7ff ff32 	bl	8018404 <RadioGetGfskTimeOnAirNumerator>
 80185a0:	4603      	mov	r3, r0
 80185a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80185a6:	fb02 f303 	mul.w	r3, r2, r3
 80185aa:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	613b      	str	r3, [r7, #16]
        break;
 80185b0:	e01e      	b.n	80185f0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80185b2:	8c39      	ldrh	r1, [r7, #32]
 80185b4:	7bba      	ldrb	r2, [r7, #14]
 80185b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80185ba:	9302      	str	r3, [sp, #8]
 80185bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80185c0:	9301      	str	r3, [sp, #4]
 80185c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80185c6:	9300      	str	r3, [sp, #0]
 80185c8:	460b      	mov	r3, r1
 80185ca:	6879      	ldr	r1, [r7, #4]
 80185cc:	68b8      	ldr	r0, [r7, #8]
 80185ce:	f7ff ff43 	bl	8018458 <RadioGetLoRaTimeOnAirNumerator>
 80185d2:	4603      	mov	r3, r0
 80185d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80185d8:	fb02 f303 	mul.w	r3, r2, r3
 80185dc:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80185de:	4a0a      	ldr	r2, [pc, #40]	; (8018608 <RadioTimeOnAir+0xac>)
 80185e0:	68bb      	ldr	r3, [r7, #8]
 80185e2:	4413      	add	r3, r2
 80185e4:	781b      	ldrb	r3, [r3, #0]
 80185e6:	4618      	mov	r0, r3
 80185e8:	f7ff feb6 	bl	8018358 <RadioGetLoRaBandwidthInHz>
 80185ec:	6138      	str	r0, [r7, #16]
        break;
 80185ee:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 80185f0:	697a      	ldr	r2, [r7, #20]
 80185f2:	693b      	ldr	r3, [r7, #16]
 80185f4:	4413      	add	r3, r2
 80185f6:	1e5a      	subs	r2, r3, #1
 80185f8:	693b      	ldr	r3, [r7, #16]
 80185fa:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80185fe:	4618      	mov	r0, r3
 8018600:	3718      	adds	r7, #24
 8018602:	46bd      	mov	sp, r7
 8018604:	bd80      	pop	{r7, pc}
 8018606:	bf00      	nop
 8018608:	0801d134 	.word	0x0801d134

0801860c <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 801860c:	b580      	push	{r7, lr}
 801860e:	b084      	sub	sp, #16
 8018610:	af00      	add	r7, sp, #0
 8018612:	6078      	str	r0, [r7, #4]
 8018614:	460b      	mov	r3, r1
 8018616:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8018618:	2300      	movs	r3, #0
 801861a:	2200      	movs	r2, #0
 801861c:	f240 2101 	movw	r1, #513	; 0x201
 8018620:	f240 2001 	movw	r0, #513	; 0x201
 8018624:	f001 fd34 	bl	801a090 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018628:	4b71      	ldr	r3, [pc, #452]	; (80187f0 <RadioSend+0x1e4>)
 801862a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801862e:	2101      	movs	r1, #1
 8018630:	4618      	mov	r0, r3
 8018632:	f002 f9d1 	bl	801a9d8 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8018636:	4b6e      	ldr	r3, [pc, #440]	; (80187f0 <RadioSend+0x1e4>)
 8018638:	781b      	ldrb	r3, [r3, #0]
 801863a:	2b01      	cmp	r3, #1
 801863c:	d112      	bne.n	8018664 <RadioSend+0x58>
 801863e:	4b6c      	ldr	r3, [pc, #432]	; (80187f0 <RadioSend+0x1e4>)
 8018640:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8018644:	2b06      	cmp	r3, #6
 8018646:	d10d      	bne.n	8018664 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018648:	f640 0089 	movw	r0, #2185	; 0x889
 801864c:	f002 f8e4 	bl	801a818 <SUBGRF_ReadRegister>
 8018650:	4603      	mov	r3, r0
 8018652:	f023 0304 	bic.w	r3, r3, #4
 8018656:	b2db      	uxtb	r3, r3
 8018658:	4619      	mov	r1, r3
 801865a:	f640 0089 	movw	r0, #2185	; 0x889
 801865e:	f002 f8c7 	bl	801a7f0 <SUBGRF_WriteRegister>
 8018662:	e00c      	b.n	801867e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018664:	f640 0089 	movw	r0, #2185	; 0x889
 8018668:	f002 f8d6 	bl	801a818 <SUBGRF_ReadRegister>
 801866c:	4603      	mov	r3, r0
 801866e:	f043 0304 	orr.w	r3, r3, #4
 8018672:	b2db      	uxtb	r3, r3
 8018674:	4619      	mov	r1, r3
 8018676:	f640 0089 	movw	r0, #2185	; 0x889
 801867a:	f002 f8b9 	bl	801a7f0 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 801867e:	4b5c      	ldr	r3, [pc, #368]	; (80187f0 <RadioSend+0x1e4>)
 8018680:	781b      	ldrb	r3, [r3, #0]
 8018682:	2b04      	cmp	r3, #4
 8018684:	f200 80a7 	bhi.w	80187d6 <RadioSend+0x1ca>
 8018688:	a201      	add	r2, pc, #4	; (adr r2, 8018690 <RadioSend+0x84>)
 801868a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801868e:	bf00      	nop
 8018690:	080186bf 	.word	0x080186bf
 8018694:	080186a5 	.word	0x080186a5
 8018698:	080186bf 	.word	0x080186bf
 801869c:	0801871f 	.word	0x0801871f
 80186a0:	0801873f 	.word	0x0801873f
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80186a4:	4a52      	ldr	r2, [pc, #328]	; (80187f0 <RadioSend+0x1e4>)
 80186a6:	78fb      	ldrb	r3, [r7, #3]
 80186a8:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80186aa:	4852      	ldr	r0, [pc, #328]	; (80187f4 <RadioSend+0x1e8>)
 80186ac:	f001 ff58 	bl	801a560 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80186b0:	78fb      	ldrb	r3, [r7, #3]
 80186b2:	2200      	movs	r2, #0
 80186b4:	4619      	mov	r1, r3
 80186b6:	6878      	ldr	r0, [r7, #4]
 80186b8:	f001 fa0c 	bl	8019ad4 <SUBGRF_SendPayload>
            break;
 80186bc:	e08c      	b.n	80187d8 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80186be:	f002 fb74 	bl	801adaa <RFW_Is_Init>
 80186c2:	4603      	mov	r3, r0
 80186c4:	2b01      	cmp	r3, #1
 80186c6:	d11d      	bne.n	8018704 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80186c8:	f107 020d 	add.w	r2, r7, #13
 80186cc:	78fb      	ldrb	r3, [r7, #3]
 80186ce:	4619      	mov	r1, r3
 80186d0:	6878      	ldr	r0, [r7, #4]
 80186d2:	f002 fb82 	bl	801adda <RFW_TransmitInit>
 80186d6:	4603      	mov	r3, r0
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d10c      	bne.n	80186f6 <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80186dc:	7b7a      	ldrb	r2, [r7, #13]
 80186de:	4b44      	ldr	r3, [pc, #272]	; (80187f0 <RadioSend+0x1e4>)
 80186e0:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80186e2:	4844      	ldr	r0, [pc, #272]	; (80187f4 <RadioSend+0x1e8>)
 80186e4:	f001 ff3c 	bl	801a560 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 80186e8:	7b7b      	ldrb	r3, [r7, #13]
 80186ea:	2200      	movs	r2, #0
 80186ec:	4619      	mov	r1, r3
 80186ee:	6878      	ldr	r0, [r7, #4]
 80186f0:	f001 f9f0 	bl	8019ad4 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80186f4:	e070      	b.n	80187d8 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 80186f6:	4b40      	ldr	r3, [pc, #256]	; (80187f8 <RadioSend+0x1ec>)
 80186f8:	2201      	movs	r2, #1
 80186fa:	2100      	movs	r1, #0
 80186fc:	2002      	movs	r0, #2
 80186fe:	f003 fc91 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
 8018702:	e072      	b.n	80187ea <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8018704:	4a3a      	ldr	r2, [pc, #232]	; (80187f0 <RadioSend+0x1e4>)
 8018706:	78fb      	ldrb	r3, [r7, #3]
 8018708:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801870a:	483a      	ldr	r0, [pc, #232]	; (80187f4 <RadioSend+0x1e8>)
 801870c:	f001 ff28 	bl	801a560 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8018710:	78fb      	ldrb	r3, [r7, #3]
 8018712:	2200      	movs	r2, #0
 8018714:	4619      	mov	r1, r3
 8018716:	6878      	ldr	r0, [r7, #4]
 8018718:	f001 f9dc 	bl	8019ad4 <SUBGRF_SendPayload>
            break;
 801871c:	e05c      	b.n	80187d8 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801871e:	4b34      	ldr	r3, [pc, #208]	; (80187f0 <RadioSend+0x1e4>)
 8018720:	2202      	movs	r2, #2
 8018722:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8018724:	4a32      	ldr	r2, [pc, #200]	; (80187f0 <RadioSend+0x1e4>)
 8018726:	78fb      	ldrb	r3, [r7, #3]
 8018728:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801872a:	4832      	ldr	r0, [pc, #200]	; (80187f4 <RadioSend+0x1e8>)
 801872c:	f001 ff18 	bl	801a560 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018730:	78fb      	ldrb	r3, [r7, #3]
 8018732:	2200      	movs	r2, #0
 8018734:	4619      	mov	r1, r3
 8018736:	6878      	ldr	r0, [r7, #4]
 8018738:	f001 f9cc 	bl	8019ad4 <SUBGRF_SendPayload>
            break;
 801873c:	e04c      	b.n	80187d8 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801873e:	78fb      	ldrb	r3, [r7, #3]
 8018740:	461a      	mov	r2, r3
 8018742:	6879      	ldr	r1, [r7, #4]
 8018744:	482d      	ldr	r0, [pc, #180]	; (80187fc <RadioSend+0x1f0>)
 8018746:	f000 fcbc 	bl	80190c2 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801874a:	4b29      	ldr	r3, [pc, #164]	; (80187f0 <RadioSend+0x1e4>)
 801874c:	2202      	movs	r2, #2
 801874e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8018750:	78fb      	ldrb	r3, [r7, #3]
 8018752:	3301      	adds	r3, #1
 8018754:	b2da      	uxtb	r2, r3
 8018756:	4b26      	ldr	r3, [pc, #152]	; (80187f0 <RadioSend+0x1e4>)
 8018758:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801875a:	4826      	ldr	r0, [pc, #152]	; (80187f4 <RadioSend+0x1e8>)
 801875c:	f001 ff00 	bl	801a560 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8018760:	2100      	movs	r1, #0
 8018762:	20f1      	movs	r0, #241	; 0xf1
 8018764:	f000 f95d 	bl	8018a22 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8018768:	2100      	movs	r1, #0
 801876a:	20f0      	movs	r0, #240	; 0xf0
 801876c:	f000 f959 	bl	8018a22 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8018770:	4b1f      	ldr	r3, [pc, #124]	; (80187f0 <RadioSend+0x1e4>)
 8018772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018774:	2b64      	cmp	r3, #100	; 0x64
 8018776:	d108      	bne.n	801878a <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8018778:	2170      	movs	r1, #112	; 0x70
 801877a:	20f3      	movs	r0, #243	; 0xf3
 801877c:	f000 f951 	bl	8018a22 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8018780:	211d      	movs	r1, #29
 8018782:	20f2      	movs	r0, #242	; 0xf2
 8018784:	f000 f94d 	bl	8018a22 <RadioWrite>
 8018788:	e007      	b.n	801879a <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801878a:	21e1      	movs	r1, #225	; 0xe1
 801878c:	20f3      	movs	r0, #243	; 0xf3
 801878e:	f000 f948 	bl	8018a22 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8018792:	2104      	movs	r1, #4
 8018794:	20f2      	movs	r0, #242	; 0xf2
 8018796:	f000 f944 	bl	8018a22 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801879a:	78fb      	ldrb	r3, [r7, #3]
 801879c:	b29b      	uxth	r3, r3
 801879e:	00db      	lsls	r3, r3, #3
 80187a0:	b29b      	uxth	r3, r3
 80187a2:	3302      	adds	r3, #2
 80187a4:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80187a6:	89fb      	ldrh	r3, [r7, #14]
 80187a8:	0a1b      	lsrs	r3, r3, #8
 80187aa:	b29b      	uxth	r3, r3
 80187ac:	b2db      	uxtb	r3, r3
 80187ae:	4619      	mov	r1, r3
 80187b0:	20f4      	movs	r0, #244	; 0xf4
 80187b2:	f000 f936 	bl	8018a22 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80187b6:	89fb      	ldrh	r3, [r7, #14]
 80187b8:	b2db      	uxtb	r3, r3
 80187ba:	4619      	mov	r1, r3
 80187bc:	20f5      	movs	r0, #245	; 0xf5
 80187be:	f000 f930 	bl	8018a22 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80187c2:	78fb      	ldrb	r3, [r7, #3]
 80187c4:	3301      	adds	r3, #1
 80187c6:	b2db      	uxtb	r3, r3
 80187c8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80187cc:	4619      	mov	r1, r3
 80187ce:	480b      	ldr	r0, [pc, #44]	; (80187fc <RadioSend+0x1f0>)
 80187d0:	f001 f980 	bl	8019ad4 <SUBGRF_SendPayload>
            break;
 80187d4:	e000      	b.n	80187d8 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80187d6:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80187d8:	4b05      	ldr	r3, [pc, #20]	; (80187f0 <RadioSend+0x1e4>)
 80187da:	685b      	ldr	r3, [r3, #4]
 80187dc:	4619      	mov	r1, r3
 80187de:	4808      	ldr	r0, [pc, #32]	; (8018800 <RadioSend+0x1f4>)
 80187e0:	f003 fa86 	bl	801bcf0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80187e4:	4806      	ldr	r0, [pc, #24]	; (8018800 <RadioSend+0x1f4>)
 80187e6:	f003 f9a5 	bl	801bb34 <UTIL_TIMER_Start>
}
 80187ea:	3710      	adds	r7, #16
 80187ec:	46bd      	mov	sp, r7
 80187ee:	bd80      	pop	{r7, pc}
 80187f0:	200021cc 	.word	0x200021cc
 80187f4:	200021da 	.word	0x200021da
 80187f8:	0801cb60 	.word	0x0801cb60
 80187fc:	200020c8 	.word	0x200020c8
 8018800:	20002228 	.word	0x20002228

08018804 <RadioSleep>:

static void RadioSleep( void )
{
 8018804:	b580      	push	{r7, lr}
 8018806:	b082      	sub	sp, #8
 8018808:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801880a:	2300      	movs	r3, #0
 801880c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801880e:	793b      	ldrb	r3, [r7, #4]
 8018810:	f043 0304 	orr.w	r3, r3, #4
 8018814:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8018816:	7938      	ldrb	r0, [r7, #4]
 8018818:	f001 fa38 	bl	8019c8c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801881c:	2002      	movs	r0, #2
 801881e:	f7e9 fd6b 	bl	80022f8 <HAL_Delay>
}
 8018822:	bf00      	nop
 8018824:	3708      	adds	r7, #8
 8018826:	46bd      	mov	sp, r7
 8018828:	bd80      	pop	{r7, pc}

0801882a <RadioStandby>:

static void RadioStandby( void )
{
 801882a:	b580      	push	{r7, lr}
 801882c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801882e:	2000      	movs	r0, #0
 8018830:	f001 fa5e 	bl	8019cf0 <SUBGRF_SetStandby>
}
 8018834:	bf00      	nop
 8018836:	bd80      	pop	{r7, pc}

08018838 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8018838:	b580      	push	{r7, lr}
 801883a:	b082      	sub	sp, #8
 801883c:	af00      	add	r7, sp, #0
 801883e:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8018840:	f002 fab3 	bl	801adaa <RFW_Is_Init>
 8018844:	4603      	mov	r3, r0
 8018846:	2b01      	cmp	r3, #1
 8018848:	d102      	bne.n	8018850 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801884a:	f002 fad6 	bl	801adfa <RFW_ReceiveInit>
 801884e:	e007      	b.n	8018860 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018850:	2300      	movs	r3, #0
 8018852:	2200      	movs	r2, #0
 8018854:	f240 2162 	movw	r1, #610	; 0x262
 8018858:	f240 2062 	movw	r0, #610	; 0x262
 801885c:	f001 fc18 	bl	801a090 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	2b00      	cmp	r3, #0
 8018864:	d006      	beq.n	8018874 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8018866:	6879      	ldr	r1, [r7, #4]
 8018868:	4811      	ldr	r0, [pc, #68]	; (80188b0 <RadioRx+0x78>)
 801886a:	f003 fa41 	bl	801bcf0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801886e:	4810      	ldr	r0, [pc, #64]	; (80188b0 <RadioRx+0x78>)
 8018870:	f003 f960 	bl	801bb34 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018874:	4b0f      	ldr	r3, [pc, #60]	; (80188b4 <RadioRx+0x7c>)
 8018876:	2200      	movs	r2, #0
 8018878:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801887a:	4b0e      	ldr	r3, [pc, #56]	; (80188b4 <RadioRx+0x7c>)
 801887c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018880:	2100      	movs	r1, #0
 8018882:	4618      	mov	r0, r3
 8018884:	f002 f8a8 	bl	801a9d8 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8018888:	4b0a      	ldr	r3, [pc, #40]	; (80188b4 <RadioRx+0x7c>)
 801888a:	785b      	ldrb	r3, [r3, #1]
 801888c:	2b00      	cmp	r3, #0
 801888e:	d004      	beq.n	801889a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018890:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018894:	f001 fa68 	bl	8019d68 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8018898:	e005      	b.n	80188a6 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801889a:	4b06      	ldr	r3, [pc, #24]	; (80188b4 <RadioRx+0x7c>)
 801889c:	689b      	ldr	r3, [r3, #8]
 801889e:	019b      	lsls	r3, r3, #6
 80188a0:	4618      	mov	r0, r3
 80188a2:	f001 fa61 	bl	8019d68 <SUBGRF_SetRx>
}
 80188a6:	bf00      	nop
 80188a8:	3708      	adds	r7, #8
 80188aa:	46bd      	mov	sp, r7
 80188ac:	bd80      	pop	{r7, pc}
 80188ae:	bf00      	nop
 80188b0:	20002240 	.word	0x20002240
 80188b4:	200021cc 	.word	0x200021cc

080188b8 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80188b8:	b580      	push	{r7, lr}
 80188ba:	b082      	sub	sp, #8
 80188bc:	af00      	add	r7, sp, #0
 80188be:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 80188c0:	f002 fa73 	bl	801adaa <RFW_Is_Init>
 80188c4:	4603      	mov	r3, r0
 80188c6:	2b01      	cmp	r3, #1
 80188c8:	d102      	bne.n	80188d0 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80188ca:	f002 fa96 	bl	801adfa <RFW_ReceiveInit>
 80188ce:	e007      	b.n	80188e0 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80188d0:	2300      	movs	r3, #0
 80188d2:	2200      	movs	r2, #0
 80188d4:	f240 2162 	movw	r1, #610	; 0x262
 80188d8:	f240 2062 	movw	r0, #610	; 0x262
 80188dc:	f001 fbd8 	bl	801a090 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d006      	beq.n	80188f4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80188e6:	6879      	ldr	r1, [r7, #4]
 80188e8:	4811      	ldr	r0, [pc, #68]	; (8018930 <RadioRxBoosted+0x78>)
 80188ea:	f003 fa01 	bl	801bcf0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80188ee:	4810      	ldr	r0, [pc, #64]	; (8018930 <RadioRxBoosted+0x78>)
 80188f0:	f003 f920 	bl	801bb34 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80188f4:	4b0f      	ldr	r3, [pc, #60]	; (8018934 <RadioRxBoosted+0x7c>)
 80188f6:	2200      	movs	r2, #0
 80188f8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80188fa:	4b0e      	ldr	r3, [pc, #56]	; (8018934 <RadioRxBoosted+0x7c>)
 80188fc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018900:	2100      	movs	r1, #0
 8018902:	4618      	mov	r0, r3
 8018904:	f002 f868 	bl	801a9d8 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8018908:	4b0a      	ldr	r3, [pc, #40]	; (8018934 <RadioRxBoosted+0x7c>)
 801890a:	785b      	ldrb	r3, [r3, #1]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d004      	beq.n	801891a <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8018910:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018914:	f001 fa48 	bl	8019da8 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8018918:	e005      	b.n	8018926 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801891a:	4b06      	ldr	r3, [pc, #24]	; (8018934 <RadioRxBoosted+0x7c>)
 801891c:	689b      	ldr	r3, [r3, #8]
 801891e:	019b      	lsls	r3, r3, #6
 8018920:	4618      	mov	r0, r3
 8018922:	f001 fa41 	bl	8019da8 <SUBGRF_SetRxBoosted>
}
 8018926:	bf00      	nop
 8018928:	3708      	adds	r7, #8
 801892a:	46bd      	mov	sp, r7
 801892c:	bd80      	pop	{r7, pc}
 801892e:	bf00      	nop
 8018930:	20002240 	.word	0x20002240
 8018934:	200021cc 	.word	0x200021cc

08018938 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018938:	b580      	push	{r7, lr}
 801893a:	b082      	sub	sp, #8
 801893c:	af00      	add	r7, sp, #0
 801893e:	6078      	str	r0, [r7, #4]
 8018940:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	005a      	lsls	r2, r3, #1
 8018946:	683b      	ldr	r3, [r7, #0]
 8018948:	4413      	add	r3, r2
 801894a:	4a0c      	ldr	r2, [pc, #48]	; (801897c <RadioSetRxDutyCycle+0x44>)
 801894c:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801894e:	2300      	movs	r3, #0
 8018950:	2200      	movs	r2, #0
 8018952:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018956:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801895a:	f001 fb99 	bl	801a090 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801895e:	4b07      	ldr	r3, [pc, #28]	; (801897c <RadioSetRxDutyCycle+0x44>)
 8018960:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018964:	2100      	movs	r1, #0
 8018966:	4618      	mov	r0, r3
 8018968:	f002 f836 	bl	801a9d8 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801896c:	6839      	ldr	r1, [r7, #0]
 801896e:	6878      	ldr	r0, [r7, #4]
 8018970:	f001 fa3e 	bl	8019df0 <SUBGRF_SetRxDutyCycle>
}
 8018974:	bf00      	nop
 8018976:	3708      	adds	r7, #8
 8018978:	46bd      	mov	sp, r7
 801897a:	bd80      	pop	{r7, pc}
 801897c:	200021cc 	.word	0x200021cc

08018980 <RadioStartCad>:

static void RadioStartCad( void )
{
 8018980:	b580      	push	{r7, lr}
 8018982:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018984:	4b09      	ldr	r3, [pc, #36]	; (80189ac <RadioStartCad+0x2c>)
 8018986:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801898a:	2100      	movs	r1, #0
 801898c:	4618      	mov	r0, r3
 801898e:	f002 f823 	bl	801a9d8 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8018992:	2300      	movs	r3, #0
 8018994:	2200      	movs	r2, #0
 8018996:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801899a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801899e:	f001 fb77 	bl	801a090 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80189a2:	f001 fa51 	bl	8019e48 <SUBGRF_SetCad>
}
 80189a6:	bf00      	nop
 80189a8:	bd80      	pop	{r7, pc}
 80189aa:	bf00      	nop
 80189ac:	200021cc 	.word	0x200021cc

080189b0 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80189b0:	b580      	push	{r7, lr}
 80189b2:	b084      	sub	sp, #16
 80189b4:	af00      	add	r7, sp, #0
 80189b6:	6078      	str	r0, [r7, #4]
 80189b8:	460b      	mov	r3, r1
 80189ba:	70fb      	strb	r3, [r7, #3]
 80189bc:	4613      	mov	r3, r2
 80189be:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 80189c0:	883b      	ldrh	r3, [r7, #0]
 80189c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80189c6:	fb02 f303 	mul.w	r3, r2, r3
 80189ca:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80189cc:	6878      	ldr	r0, [r7, #4]
 80189ce:	f001 fbbb 	bl	801a148 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80189d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80189d6:	4618      	mov	r0, r3
 80189d8:	f002 f826 	bl	801aa28 <SUBGRF_SetRfTxPower>
 80189dc:	4603      	mov	r3, r0
 80189de:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80189e0:	7afb      	ldrb	r3, [r7, #11]
 80189e2:	2101      	movs	r1, #1
 80189e4:	4618      	mov	r0, r3
 80189e6:	f001 fff7 	bl	801a9d8 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80189ea:	f001 fa3b 	bl	8019e64 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80189ee:	68f9      	ldr	r1, [r7, #12]
 80189f0:	4804      	ldr	r0, [pc, #16]	; (8018a04 <RadioSetTxContinuousWave+0x54>)
 80189f2:	f003 f97d 	bl	801bcf0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80189f6:	4803      	ldr	r0, [pc, #12]	; (8018a04 <RadioSetTxContinuousWave+0x54>)
 80189f8:	f003 f89c 	bl	801bb34 <UTIL_TIMER_Start>
}
 80189fc:	bf00      	nop
 80189fe:	3710      	adds	r7, #16
 8018a00:	46bd      	mov	sp, r7
 8018a02:	bd80      	pop	{r7, pc}
 8018a04:	20002228 	.word	0x20002228

08018a08 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8018a08:	b580      	push	{r7, lr}
 8018a0a:	b082      	sub	sp, #8
 8018a0c:	af00      	add	r7, sp, #0
 8018a0e:	4603      	mov	r3, r0
 8018a10:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8018a12:	f001 fe5a 	bl	801a6ca <SUBGRF_GetRssiInst>
 8018a16:	4603      	mov	r3, r0
 8018a18:	b21b      	sxth	r3, r3
}
 8018a1a:	4618      	mov	r0, r3
 8018a1c:	3708      	adds	r7, #8
 8018a1e:	46bd      	mov	sp, r7
 8018a20:	bd80      	pop	{r7, pc}

08018a22 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8018a22:	b580      	push	{r7, lr}
 8018a24:	b082      	sub	sp, #8
 8018a26:	af00      	add	r7, sp, #0
 8018a28:	4603      	mov	r3, r0
 8018a2a:	460a      	mov	r2, r1
 8018a2c:	80fb      	strh	r3, [r7, #6]
 8018a2e:	4613      	mov	r3, r2
 8018a30:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8018a32:	797a      	ldrb	r2, [r7, #5]
 8018a34:	88fb      	ldrh	r3, [r7, #6]
 8018a36:	4611      	mov	r1, r2
 8018a38:	4618      	mov	r0, r3
 8018a3a:	f001 fed9 	bl	801a7f0 <SUBGRF_WriteRegister>
}
 8018a3e:	bf00      	nop
 8018a40:	3708      	adds	r7, #8
 8018a42:	46bd      	mov	sp, r7
 8018a44:	bd80      	pop	{r7, pc}

08018a46 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8018a46:	b580      	push	{r7, lr}
 8018a48:	b082      	sub	sp, #8
 8018a4a:	af00      	add	r7, sp, #0
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8018a50:	88fb      	ldrh	r3, [r7, #6]
 8018a52:	4618      	mov	r0, r3
 8018a54:	f001 fee0 	bl	801a818 <SUBGRF_ReadRegister>
 8018a58:	4603      	mov	r3, r0
}
 8018a5a:	4618      	mov	r0, r3
 8018a5c:	3708      	adds	r7, #8
 8018a5e:	46bd      	mov	sp, r7
 8018a60:	bd80      	pop	{r7, pc}

08018a62 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018a62:	b580      	push	{r7, lr}
 8018a64:	b082      	sub	sp, #8
 8018a66:	af00      	add	r7, sp, #0
 8018a68:	4603      	mov	r3, r0
 8018a6a:	6039      	str	r1, [r7, #0]
 8018a6c:	80fb      	strh	r3, [r7, #6]
 8018a6e:	4613      	mov	r3, r2
 8018a70:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8018a72:	797b      	ldrb	r3, [r7, #5]
 8018a74:	b29a      	uxth	r2, r3
 8018a76:	88fb      	ldrh	r3, [r7, #6]
 8018a78:	6839      	ldr	r1, [r7, #0]
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	f001 fee0 	bl	801a840 <SUBGRF_WriteRegisters>
}
 8018a80:	bf00      	nop
 8018a82:	3708      	adds	r7, #8
 8018a84:	46bd      	mov	sp, r7
 8018a86:	bd80      	pop	{r7, pc}

08018a88 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b082      	sub	sp, #8
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	4603      	mov	r3, r0
 8018a90:	6039      	str	r1, [r7, #0]
 8018a92:	80fb      	strh	r3, [r7, #6]
 8018a94:	4613      	mov	r3, r2
 8018a96:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8018a98:	797b      	ldrb	r3, [r7, #5]
 8018a9a:	b29a      	uxth	r2, r3
 8018a9c:	88fb      	ldrh	r3, [r7, #6]
 8018a9e:	6839      	ldr	r1, [r7, #0]
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	f001 feef 	bl	801a884 <SUBGRF_ReadRegisters>
}
 8018aa6:	bf00      	nop
 8018aa8:	3708      	adds	r7, #8
 8018aaa:	46bd      	mov	sp, r7
 8018aac:	bd80      	pop	{r7, pc}
	...

08018ab0 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b082      	sub	sp, #8
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	4603      	mov	r3, r0
 8018ab8:	460a      	mov	r2, r1
 8018aba:	71fb      	strb	r3, [r7, #7]
 8018abc:	4613      	mov	r3, r2
 8018abe:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8018ac0:	79fb      	ldrb	r3, [r7, #7]
 8018ac2:	2b01      	cmp	r3, #1
 8018ac4:	d10a      	bne.n	8018adc <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8018ac6:	4a0e      	ldr	r2, [pc, #56]	; (8018b00 <RadioSetMaxPayloadLength+0x50>)
 8018ac8:	79bb      	ldrb	r3, [r7, #6]
 8018aca:	7013      	strb	r3, [r2, #0]
 8018acc:	4b0c      	ldr	r3, [pc, #48]	; (8018b00 <RadioSetMaxPayloadLength+0x50>)
 8018ace:	781a      	ldrb	r2, [r3, #0]
 8018ad0:	4b0c      	ldr	r3, [pc, #48]	; (8018b04 <RadioSetMaxPayloadLength+0x54>)
 8018ad2:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018ad4:	480c      	ldr	r0, [pc, #48]	; (8018b08 <RadioSetMaxPayloadLength+0x58>)
 8018ad6:	f001 fd43 	bl	801a560 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8018ada:	e00d      	b.n	8018af8 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8018adc:	4b09      	ldr	r3, [pc, #36]	; (8018b04 <RadioSetMaxPayloadLength+0x54>)
 8018ade:	7d5b      	ldrb	r3, [r3, #21]
 8018ae0:	2b01      	cmp	r3, #1
 8018ae2:	d109      	bne.n	8018af8 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8018ae4:	4a06      	ldr	r2, [pc, #24]	; (8018b00 <RadioSetMaxPayloadLength+0x50>)
 8018ae6:	79bb      	ldrb	r3, [r7, #6]
 8018ae8:	7013      	strb	r3, [r2, #0]
 8018aea:	4b05      	ldr	r3, [pc, #20]	; (8018b00 <RadioSetMaxPayloadLength+0x50>)
 8018aec:	781a      	ldrb	r2, [r3, #0]
 8018aee:	4b05      	ldr	r3, [pc, #20]	; (8018b04 <RadioSetMaxPayloadLength+0x54>)
 8018af0:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018af2:	4805      	ldr	r0, [pc, #20]	; (8018b08 <RadioSetMaxPayloadLength+0x58>)
 8018af4:	f001 fd34 	bl	801a560 <SUBGRF_SetPacketParams>
}
 8018af8:	bf00      	nop
 8018afa:	3708      	adds	r7, #8
 8018afc:	46bd      	mov	sp, r7
 8018afe:	bd80      	pop	{r7, pc}
 8018b00:	2000013c 	.word	0x2000013c
 8018b04:	200021cc 	.word	0x200021cc
 8018b08:	200021da 	.word	0x200021da

08018b0c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8018b0c:	b580      	push	{r7, lr}
 8018b0e:	b082      	sub	sp, #8
 8018b10:	af00      	add	r7, sp, #0
 8018b12:	4603      	mov	r3, r0
 8018b14:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8018b16:	4a13      	ldr	r2, [pc, #76]	; (8018b64 <RadioSetPublicNetwork+0x58>)
 8018b18:	79fb      	ldrb	r3, [r7, #7]
 8018b1a:	7313      	strb	r3, [r2, #12]
 8018b1c:	4b11      	ldr	r3, [pc, #68]	; (8018b64 <RadioSetPublicNetwork+0x58>)
 8018b1e:	7b1a      	ldrb	r2, [r3, #12]
 8018b20:	4b10      	ldr	r3, [pc, #64]	; (8018b64 <RadioSetPublicNetwork+0x58>)
 8018b22:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8018b24:	2001      	movs	r0, #1
 8018b26:	f7ff f82d 	bl	8017b84 <RadioSetModem>
    if( enable == true )
 8018b2a:	79fb      	ldrb	r3, [r7, #7]
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d00a      	beq.n	8018b46 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8018b30:	2134      	movs	r1, #52	; 0x34
 8018b32:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8018b36:	f001 fe5b 	bl	801a7f0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8018b3a:	2144      	movs	r1, #68	; 0x44
 8018b3c:	f240 7041 	movw	r0, #1857	; 0x741
 8018b40:	f001 fe56 	bl	801a7f0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8018b44:	e009      	b.n	8018b5a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8018b46:	2114      	movs	r1, #20
 8018b48:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8018b4c:	f001 fe50 	bl	801a7f0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8018b50:	2124      	movs	r1, #36	; 0x24
 8018b52:	f240 7041 	movw	r0, #1857	; 0x741
 8018b56:	f001 fe4b 	bl	801a7f0 <SUBGRF_WriteRegister>
}
 8018b5a:	bf00      	nop
 8018b5c:	3708      	adds	r7, #8
 8018b5e:	46bd      	mov	sp, r7
 8018b60:	bd80      	pop	{r7, pc}
 8018b62:	bf00      	nop
 8018b64:	200021cc 	.word	0x200021cc

08018b68 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8018b68:	b580      	push	{r7, lr}
 8018b6a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8018b6c:	f001 ff90 	bl	801aa90 <SUBGRF_GetRadioWakeUpTime>
 8018b70:	4603      	mov	r3, r0
 8018b72:	3303      	adds	r3, #3
}
 8018b74:	4618      	mov	r0, r3
 8018b76:	bd80      	pop	{r7, pc}

08018b78 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	b082      	sub	sp, #8
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8018b80:	f000 f80e 	bl	8018ba0 <RadioOnTxTimeoutProcess>
}
 8018b84:	bf00      	nop
 8018b86:	3708      	adds	r7, #8
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	bd80      	pop	{r7, pc}

08018b8c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b082      	sub	sp, #8
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8018b94:	f000 f818 	bl	8018bc8 <RadioOnRxTimeoutProcess>
}
 8018b98:	bf00      	nop
 8018b9a:	3708      	adds	r7, #8
 8018b9c:	46bd      	mov	sp, r7
 8018b9e:	bd80      	pop	{r7, pc}

08018ba0 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8018ba0:	b580      	push	{r7, lr}
 8018ba2:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018ba4:	4b07      	ldr	r3, [pc, #28]	; (8018bc4 <RadioOnTxTimeoutProcess+0x24>)
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d008      	beq.n	8018bbe <RadioOnTxTimeoutProcess+0x1e>
 8018bac:	4b05      	ldr	r3, [pc, #20]	; (8018bc4 <RadioOnTxTimeoutProcess+0x24>)
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	685b      	ldr	r3, [r3, #4]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d003      	beq.n	8018bbe <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8018bb6:	4b03      	ldr	r3, [pc, #12]	; (8018bc4 <RadioOnTxTimeoutProcess+0x24>)
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	685b      	ldr	r3, [r3, #4]
 8018bbc:	4798      	blx	r3
    }
}
 8018bbe:	bf00      	nop
 8018bc0:	bd80      	pop	{r7, pc}
 8018bc2:	bf00      	nop
 8018bc4:	200021c8 	.word	0x200021c8

08018bc8 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8018bc8:	b580      	push	{r7, lr}
 8018bca:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018bcc:	4b07      	ldr	r3, [pc, #28]	; (8018bec <RadioOnRxTimeoutProcess+0x24>)
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d008      	beq.n	8018be6 <RadioOnRxTimeoutProcess+0x1e>
 8018bd4:	4b05      	ldr	r3, [pc, #20]	; (8018bec <RadioOnRxTimeoutProcess+0x24>)
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	68db      	ldr	r3, [r3, #12]
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d003      	beq.n	8018be6 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8018bde:	4b03      	ldr	r3, [pc, #12]	; (8018bec <RadioOnRxTimeoutProcess+0x24>)
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	68db      	ldr	r3, [r3, #12]
 8018be4:	4798      	blx	r3
    }
}
 8018be6:	bf00      	nop
 8018be8:	bd80      	pop	{r7, pc}
 8018bea:	bf00      	nop
 8018bec:	200021c8 	.word	0x200021c8

08018bf0 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8018bf0:	b580      	push	{r7, lr}
 8018bf2:	b082      	sub	sp, #8
 8018bf4:	af00      	add	r7, sp, #0
 8018bf6:	4603      	mov	r3, r0
 8018bf8:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8018bfa:	4a05      	ldr	r2, [pc, #20]	; (8018c10 <RadioOnDioIrq+0x20>)
 8018bfc:	88fb      	ldrh	r3, [r7, #6]
 8018bfe:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8018c02:	f000 f807 	bl	8018c14 <RadioIrqProcess>
}
 8018c06:	bf00      	nop
 8018c08:	3708      	adds	r7, #8
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	bd80      	pop	{r7, pc}
 8018c0e:	bf00      	nop
 8018c10:	200021cc 	.word	0x200021cc

08018c14 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8018c14:	b590      	push	{r4, r7, lr}
 8018c16:	b083      	sub	sp, #12
 8018c18:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8018c1a:	2300      	movs	r3, #0
 8018c1c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8018c1e:	2300      	movs	r3, #0
 8018c20:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8018c22:	4ba8      	ldr	r3, [pc, #672]	; (8018ec4 <RadioIrqProcess+0x2b0>)
 8018c24:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8018c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018c2c:	f000 810c 	beq.w	8018e48 <RadioIrqProcess+0x234>
 8018c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018c34:	f300 81e8 	bgt.w	8019008 <RadioIrqProcess+0x3f4>
 8018c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018c3c:	f000 80f0 	beq.w	8018e20 <RadioIrqProcess+0x20c>
 8018c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018c44:	f300 81e0 	bgt.w	8019008 <RadioIrqProcess+0x3f4>
 8018c48:	2b80      	cmp	r3, #128	; 0x80
 8018c4a:	f000 80d5 	beq.w	8018df8 <RadioIrqProcess+0x1e4>
 8018c4e:	2b80      	cmp	r3, #128	; 0x80
 8018c50:	f300 81da 	bgt.w	8019008 <RadioIrqProcess+0x3f4>
 8018c54:	2b20      	cmp	r3, #32
 8018c56:	dc49      	bgt.n	8018cec <RadioIrqProcess+0xd8>
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	f340 81d5 	ble.w	8019008 <RadioIrqProcess+0x3f4>
 8018c5e:	3b01      	subs	r3, #1
 8018c60:	2b1f      	cmp	r3, #31
 8018c62:	f200 81d1 	bhi.w	8019008 <RadioIrqProcess+0x3f4>
 8018c66:	a201      	add	r2, pc, #4	; (adr r2, 8018c6c <RadioIrqProcess+0x58>)
 8018c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c6c:	08018cf5 	.word	0x08018cf5
 8018c70:	08018d2f 	.word	0x08018d2f
 8018c74:	08019009 	.word	0x08019009
 8018c78:	08018ee5 	.word	0x08018ee5
 8018c7c:	08019009 	.word	0x08019009
 8018c80:	08019009 	.word	0x08019009
 8018c84:	08019009 	.word	0x08019009
 8018c88:	08018f61 	.word	0x08018f61
 8018c8c:	08019009 	.word	0x08019009
 8018c90:	08019009 	.word	0x08019009
 8018c94:	08019009 	.word	0x08019009
 8018c98:	08019009 	.word	0x08019009
 8018c9c:	08019009 	.word	0x08019009
 8018ca0:	08019009 	.word	0x08019009
 8018ca4:	08019009 	.word	0x08019009
 8018ca8:	08018f7d 	.word	0x08018f7d
 8018cac:	08019009 	.word	0x08019009
 8018cb0:	08019009 	.word	0x08019009
 8018cb4:	08019009 	.word	0x08019009
 8018cb8:	08019009 	.word	0x08019009
 8018cbc:	08019009 	.word	0x08019009
 8018cc0:	08019009 	.word	0x08019009
 8018cc4:	08019009 	.word	0x08019009
 8018cc8:	08019009 	.word	0x08019009
 8018ccc:	08019009 	.word	0x08019009
 8018cd0:	08019009 	.word	0x08019009
 8018cd4:	08019009 	.word	0x08019009
 8018cd8:	08019009 	.word	0x08019009
 8018cdc:	08019009 	.word	0x08019009
 8018ce0:	08019009 	.word	0x08019009
 8018ce4:	08019009 	.word	0x08019009
 8018ce8:	08018f8b 	.word	0x08018f8b
 8018cec:	2b40      	cmp	r3, #64	; 0x40
 8018cee:	f000 816d 	beq.w	8018fcc <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8018cf2:	e189      	b.n	8019008 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8018cf4:	4874      	ldr	r0, [pc, #464]	; (8018ec8 <RadioIrqProcess+0x2b4>)
 8018cf6:	f002 ff8b 	bl	801bc10 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8018cfa:	2000      	movs	r0, #0
 8018cfc:	f000 fff8 	bl	8019cf0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8018d00:	f002 f85a 	bl	801adb8 <RFW_Is_LongPacketModeEnabled>
 8018d04:	4603      	mov	r3, r0
 8018d06:	2b01      	cmp	r3, #1
 8018d08:	d101      	bne.n	8018d0e <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8018d0a:	f002 f87e 	bl	801ae0a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8018d0e:	4b6f      	ldr	r3, [pc, #444]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	f000 817a 	beq.w	801900c <RadioIrqProcess+0x3f8>
 8018d18:	4b6c      	ldr	r3, [pc, #432]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	f000 8174 	beq.w	801900c <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8018d24:	4b69      	ldr	r3, [pc, #420]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	4798      	blx	r3
        break;
 8018d2c:	e16e      	b.n	801900c <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8018d2e:	4868      	ldr	r0, [pc, #416]	; (8018ed0 <RadioIrqProcess+0x2bc>)
 8018d30:	f002 ff6e 	bl	801bc10 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018d34:	4b63      	ldr	r3, [pc, #396]	; (8018ec4 <RadioIrqProcess+0x2b0>)
 8018d36:	785b      	ldrb	r3, [r3, #1]
 8018d38:	f083 0301 	eor.w	r3, r3, #1
 8018d3c:	b2db      	uxtb	r3, r3
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d014      	beq.n	8018d6c <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8018d42:	2000      	movs	r0, #0
 8018d44:	f000 ffd4 	bl	8019cf0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8018d48:	2100      	movs	r1, #0
 8018d4a:	f640 1002 	movw	r0, #2306	; 0x902
 8018d4e:	f001 fd4f 	bl	801a7f0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8018d52:	f640 1044 	movw	r0, #2372	; 0x944
 8018d56:	f001 fd5f 	bl	801a818 <SUBGRF_ReadRegister>
 8018d5a:	4603      	mov	r3, r0
 8018d5c:	f043 0302 	orr.w	r3, r3, #2
 8018d60:	b2db      	uxtb	r3, r3
 8018d62:	4619      	mov	r1, r3
 8018d64:	f640 1044 	movw	r0, #2372	; 0x944
 8018d68:	f001 fd42 	bl	801a7f0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8018d6c:	1dfb      	adds	r3, r7, #7
 8018d6e:	22ff      	movs	r2, #255	; 0xff
 8018d70:	4619      	mov	r1, r3
 8018d72:	4858      	ldr	r0, [pc, #352]	; (8018ed4 <RadioIrqProcess+0x2c0>)
 8018d74:	f000 fe8c 	bl	8019a90 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8018d78:	4857      	ldr	r0, [pc, #348]	; (8018ed8 <RadioIrqProcess+0x2c4>)
 8018d7a:	f001 fce7 	bl	801a74c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8018d7e:	4b53      	ldr	r3, [pc, #332]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d036      	beq.n	8018df4 <RadioIrqProcess+0x1e0>
 8018d86:	4b51      	ldr	r3, [pc, #324]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	689b      	ldr	r3, [r3, #8]
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d031      	beq.n	8018df4 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 8018d90:	4b4c      	ldr	r3, [pc, #304]	; (8018ec4 <RadioIrqProcess+0x2b0>)
 8018d92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018d96:	2b01      	cmp	r3, #1
 8018d98:	d10e      	bne.n	8018db8 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8018d9a:	4b4c      	ldr	r3, [pc, #304]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	689c      	ldr	r4, [r3, #8]
 8018da0:	79fb      	ldrb	r3, [r7, #7]
 8018da2:	b299      	uxth	r1, r3
 8018da4:	4b47      	ldr	r3, [pc, #284]	; (8018ec4 <RadioIrqProcess+0x2b0>)
 8018da6:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8018daa:	b21a      	sxth	r2, r3
 8018dac:	4b45      	ldr	r3, [pc, #276]	; (8018ec4 <RadioIrqProcess+0x2b0>)
 8018dae:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8018db2:	4848      	ldr	r0, [pc, #288]	; (8018ed4 <RadioIrqProcess+0x2c0>)
 8018db4:	47a0      	blx	r4
                break;
 8018db6:	e01e      	b.n	8018df6 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8018db8:	4b42      	ldr	r3, [pc, #264]	; (8018ec4 <RadioIrqProcess+0x2b0>)
 8018dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018dbc:	463a      	mov	r2, r7
 8018dbe:	4611      	mov	r1, r2
 8018dc0:	4618      	mov	r0, r3
 8018dc2:	f001 ff47 	bl	801ac54 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8018dc6:	4b41      	ldr	r3, [pc, #260]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	689c      	ldr	r4, [r3, #8]
 8018dcc:	79fb      	ldrb	r3, [r7, #7]
 8018dce:	b299      	uxth	r1, r3
 8018dd0:	4b3c      	ldr	r3, [pc, #240]	; (8018ec4 <RadioIrqProcess+0x2b0>)
 8018dd2:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8018dd6:	b218      	sxth	r0, r3
 8018dd8:	683b      	ldr	r3, [r7, #0]
 8018dda:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8018dde:	4a3f      	ldr	r2, [pc, #252]	; (8018edc <RadioIrqProcess+0x2c8>)
 8018de0:	fb82 c203 	smull	ip, r2, r2, r3
 8018de4:	1192      	asrs	r2, r2, #6
 8018de6:	17db      	asrs	r3, r3, #31
 8018de8:	1ad3      	subs	r3, r2, r3
 8018dea:	b25b      	sxtb	r3, r3
 8018dec:	4602      	mov	r2, r0
 8018dee:	4839      	ldr	r0, [pc, #228]	; (8018ed4 <RadioIrqProcess+0x2c0>)
 8018df0:	47a0      	blx	r4
                break;
 8018df2:	e000      	b.n	8018df6 <RadioIrqProcess+0x1e2>
        }
 8018df4:	bf00      	nop
        break;
 8018df6:	e118      	b.n	801902a <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 8018df8:	2000      	movs	r0, #0
 8018dfa:	f000 ff79 	bl	8019cf0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018dfe:	4b33      	ldr	r3, [pc, #204]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	f000 8104 	beq.w	8019010 <RadioIrqProcess+0x3fc>
 8018e08:	4b30      	ldr	r3, [pc, #192]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	699b      	ldr	r3, [r3, #24]
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	f000 80fe 	beq.w	8019010 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 8018e14:	4b2d      	ldr	r3, [pc, #180]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018e16:	681b      	ldr	r3, [r3, #0]
 8018e18:	699b      	ldr	r3, [r3, #24]
 8018e1a:	2000      	movs	r0, #0
 8018e1c:	4798      	blx	r3
        break;
 8018e1e:	e0f7      	b.n	8019010 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8018e20:	2000      	movs	r0, #0
 8018e22:	f000 ff65 	bl	8019cf0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018e26:	4b29      	ldr	r3, [pc, #164]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	f000 80f2 	beq.w	8019014 <RadioIrqProcess+0x400>
 8018e30:	4b26      	ldr	r3, [pc, #152]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	699b      	ldr	r3, [r3, #24]
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	f000 80ec 	beq.w	8019014 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 8018e3c:	4b23      	ldr	r3, [pc, #140]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	699b      	ldr	r3, [r3, #24]
 8018e42:	2001      	movs	r0, #1
 8018e44:	4798      	blx	r3
        break;
 8018e46:	e0e5      	b.n	8019014 <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8018e48:	4b25      	ldr	r3, [pc, #148]	; (8018ee0 <RadioIrqProcess+0x2cc>)
 8018e4a:	2201      	movs	r2, #1
 8018e4c:	2100      	movs	r1, #0
 8018e4e:	2002      	movs	r0, #2
 8018e50:	f003 f8e8 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8018e54:	f000 fe02 	bl	8019a5c <SUBGRF_GetOperatingMode>
 8018e58:	4603      	mov	r3, r0
 8018e5a:	2b04      	cmp	r3, #4
 8018e5c:	d115      	bne.n	8018e8a <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 8018e5e:	481a      	ldr	r0, [pc, #104]	; (8018ec8 <RadioIrqProcess+0x2b4>)
 8018e60:	f002 fed6 	bl	801bc10 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018e64:	2000      	movs	r0, #0
 8018e66:	f000 ff43 	bl	8019cf0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018e6a:	4b18      	ldr	r3, [pc, #96]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	f000 80d2 	beq.w	8019018 <RadioIrqProcess+0x404>
 8018e74:	4b15      	ldr	r3, [pc, #84]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	685b      	ldr	r3, [r3, #4]
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	f000 80cc 	beq.w	8019018 <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 8018e80:	4b12      	ldr	r3, [pc, #72]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	685b      	ldr	r3, [r3, #4]
 8018e86:	4798      	blx	r3
        break;
 8018e88:	e0c6      	b.n	8019018 <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8018e8a:	f000 fde7 	bl	8019a5c <SUBGRF_GetOperatingMode>
 8018e8e:	4603      	mov	r3, r0
 8018e90:	2b05      	cmp	r3, #5
 8018e92:	f040 80c1 	bne.w	8019018 <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 8018e96:	480e      	ldr	r0, [pc, #56]	; (8018ed0 <RadioIrqProcess+0x2bc>)
 8018e98:	f002 feba 	bl	801bc10 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018e9c:	2000      	movs	r0, #0
 8018e9e:	f000 ff27 	bl	8019cf0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018ea2:	4b0a      	ldr	r3, [pc, #40]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	f000 80b6 	beq.w	8019018 <RadioIrqProcess+0x404>
 8018eac:	4b07      	ldr	r3, [pc, #28]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	68db      	ldr	r3, [r3, #12]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	f000 80b0 	beq.w	8019018 <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 8018eb8:	4b04      	ldr	r3, [pc, #16]	; (8018ecc <RadioIrqProcess+0x2b8>)
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	68db      	ldr	r3, [r3, #12]
 8018ebe:	4798      	blx	r3
        break;
 8018ec0:	e0aa      	b.n	8019018 <RadioIrqProcess+0x404>
 8018ec2:	bf00      	nop
 8018ec4:	200021cc 	.word	0x200021cc
 8018ec8:	20002228 	.word	0x20002228
 8018ecc:	200021c8 	.word	0x200021c8
 8018ed0:	20002240 	.word	0x20002240
 8018ed4:	200020c8 	.word	0x200020c8
 8018ed8:	200021f0 	.word	0x200021f0
 8018edc:	10624dd3 	.word	0x10624dd3
 8018ee0:	0801cb78 	.word	0x0801cb78
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8018ee4:	4b53      	ldr	r3, [pc, #332]	; (8019034 <RadioIrqProcess+0x420>)
 8018ee6:	2201      	movs	r2, #1
 8018ee8:	2100      	movs	r1, #0
 8018eea:	2002      	movs	r0, #2
 8018eec:	f003 f89a 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8018ef0:	4b51      	ldr	r3, [pc, #324]	; (8019038 <RadioIrqProcess+0x424>)
 8018ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	f000 8091 	beq.w	801901c <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8018efa:	4a50      	ldr	r2, [pc, #320]	; (801903c <RadioIrqProcess+0x428>)
 8018efc:	4b4e      	ldr	r3, [pc, #312]	; (8019038 <RadioIrqProcess+0x424>)
 8018efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018f00:	0c1b      	lsrs	r3, r3, #16
 8018f02:	b2db      	uxtb	r3, r3
 8018f04:	4619      	mov	r1, r3
 8018f06:	f640 1003 	movw	r0, #2307	; 0x903
 8018f0a:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8018f0c:	4a4b      	ldr	r2, [pc, #300]	; (801903c <RadioIrqProcess+0x428>)
 8018f0e:	4b4a      	ldr	r3, [pc, #296]	; (8019038 <RadioIrqProcess+0x424>)
 8018f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018f12:	0a1b      	lsrs	r3, r3, #8
 8018f14:	b2db      	uxtb	r3, r3
 8018f16:	4619      	mov	r1, r3
 8018f18:	f640 1004 	movw	r0, #2308	; 0x904
 8018f1c:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8018f1e:	4a47      	ldr	r2, [pc, #284]	; (801903c <RadioIrqProcess+0x428>)
 8018f20:	4b45      	ldr	r3, [pc, #276]	; (8019038 <RadioIrqProcess+0x424>)
 8018f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018f24:	b2db      	uxtb	r3, r3
 8018f26:	4619      	mov	r1, r3
 8018f28:	f640 1005 	movw	r0, #2309	; 0x905
 8018f2c:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8018f2e:	4c43      	ldr	r4, [pc, #268]	; (801903c <RadioIrqProcess+0x428>)
 8018f30:	4b43      	ldr	r3, [pc, #268]	; (8019040 <RadioIrqProcess+0x42c>)
 8018f32:	f640 1002 	movw	r0, #2306	; 0x902
 8018f36:	4798      	blx	r3
 8018f38:	4603      	mov	r3, r0
 8018f3a:	f043 0301 	orr.w	r3, r3, #1
 8018f3e:	b2db      	uxtb	r3, r3
 8018f40:	4619      	mov	r1, r3
 8018f42:	f640 1002 	movw	r0, #2306	; 0x902
 8018f46:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8018f48:	4b3b      	ldr	r3, [pc, #236]	; (8019038 <RadioIrqProcess+0x424>)
 8018f4a:	2200      	movs	r2, #0
 8018f4c:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018f4e:	2300      	movs	r3, #0
 8018f50:	2200      	movs	r2, #0
 8018f52:	f240 2162 	movw	r1, #610	; 0x262
 8018f56:	f240 2062 	movw	r0, #610	; 0x262
 8018f5a:	f001 f899 	bl	801a090 <SUBGRF_SetDioIrqParams>
        break;
 8018f5e:	e05d      	b.n	801901c <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8018f60:	4b38      	ldr	r3, [pc, #224]	; (8019044 <RadioIrqProcess+0x430>)
 8018f62:	2201      	movs	r2, #1
 8018f64:	2100      	movs	r1, #0
 8018f66:	2002      	movs	r0, #2
 8018f68:	f003 f85c 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8018f6c:	f001 ff1d 	bl	801adaa <RFW_Is_Init>
 8018f70:	4603      	mov	r3, r0
 8018f72:	2b01      	cmp	r3, #1
 8018f74:	d154      	bne.n	8019020 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 8018f76:	f001 ff4e 	bl	801ae16 <RFW_ReceivePayload>
        break;
 8018f7a:	e051      	b.n	8019020 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8018f7c:	4b32      	ldr	r3, [pc, #200]	; (8019048 <RadioIrqProcess+0x434>)
 8018f7e:	2201      	movs	r2, #1
 8018f80:	2100      	movs	r1, #0
 8018f82:	2002      	movs	r0, #2
 8018f84:	f003 f84e 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018f88:	e04f      	b.n	801902a <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 8018f8a:	4830      	ldr	r0, [pc, #192]	; (801904c <RadioIrqProcess+0x438>)
 8018f8c:	f002 fe40 	bl	801bc10 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018f90:	4b29      	ldr	r3, [pc, #164]	; (8019038 <RadioIrqProcess+0x424>)
 8018f92:	785b      	ldrb	r3, [r3, #1]
 8018f94:	f083 0301 	eor.w	r3, r3, #1
 8018f98:	b2db      	uxtb	r3, r3
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d002      	beq.n	8018fa4 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8018f9e:	2000      	movs	r0, #0
 8018fa0:	f000 fea6 	bl	8019cf0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018fa4:	4b2a      	ldr	r3, [pc, #168]	; (8019050 <RadioIrqProcess+0x43c>)
 8018fa6:	681b      	ldr	r3, [r3, #0]
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d03b      	beq.n	8019024 <RadioIrqProcess+0x410>
 8018fac:	4b28      	ldr	r3, [pc, #160]	; (8019050 <RadioIrqProcess+0x43c>)
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	68db      	ldr	r3, [r3, #12]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d036      	beq.n	8019024 <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 8018fb6:	4b26      	ldr	r3, [pc, #152]	; (8019050 <RadioIrqProcess+0x43c>)
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	68db      	ldr	r3, [r3, #12]
 8018fbc:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8018fbe:	4b25      	ldr	r3, [pc, #148]	; (8019054 <RadioIrqProcess+0x440>)
 8018fc0:	2201      	movs	r2, #1
 8018fc2:	2100      	movs	r1, #0
 8018fc4:	2002      	movs	r0, #2
 8018fc6:	f003 f82d 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018fca:	e02b      	b.n	8019024 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8018fcc:	4b22      	ldr	r3, [pc, #136]	; (8019058 <RadioIrqProcess+0x444>)
 8018fce:	2201      	movs	r2, #1
 8018fd0:	2100      	movs	r1, #0
 8018fd2:	2002      	movs	r0, #2
 8018fd4:	f003 f826 	bl	801c024 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8018fd8:	4b17      	ldr	r3, [pc, #92]	; (8019038 <RadioIrqProcess+0x424>)
 8018fda:	785b      	ldrb	r3, [r3, #1]
 8018fdc:	f083 0301 	eor.w	r3, r3, #1
 8018fe0:	b2db      	uxtb	r3, r3
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d002      	beq.n	8018fec <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8018fe6:	2000      	movs	r0, #0
 8018fe8:	f000 fe82 	bl	8019cf0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8018fec:	4b18      	ldr	r3, [pc, #96]	; (8019050 <RadioIrqProcess+0x43c>)
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d019      	beq.n	8019028 <RadioIrqProcess+0x414>
 8018ff4:	4b16      	ldr	r3, [pc, #88]	; (8019050 <RadioIrqProcess+0x43c>)
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	691b      	ldr	r3, [r3, #16]
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d014      	beq.n	8019028 <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 8018ffe:	4b14      	ldr	r3, [pc, #80]	; (8019050 <RadioIrqProcess+0x43c>)
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	691b      	ldr	r3, [r3, #16]
 8019004:	4798      	blx	r3
        break;
 8019006:	e00f      	b.n	8019028 <RadioIrqProcess+0x414>
        break;
 8019008:	bf00      	nop
 801900a:	e00e      	b.n	801902a <RadioIrqProcess+0x416>
        break;
 801900c:	bf00      	nop
 801900e:	e00c      	b.n	801902a <RadioIrqProcess+0x416>
        break;
 8019010:	bf00      	nop
 8019012:	e00a      	b.n	801902a <RadioIrqProcess+0x416>
        break;
 8019014:	bf00      	nop
 8019016:	e008      	b.n	801902a <RadioIrqProcess+0x416>
        break;
 8019018:	bf00      	nop
 801901a:	e006      	b.n	801902a <RadioIrqProcess+0x416>
        break;
 801901c:	bf00      	nop
 801901e:	e004      	b.n	801902a <RadioIrqProcess+0x416>
        break;
 8019020:	bf00      	nop
 8019022:	e002      	b.n	801902a <RadioIrqProcess+0x416>
        break;
 8019024:	bf00      	nop
 8019026:	e000      	b.n	801902a <RadioIrqProcess+0x416>
        break;
 8019028:	bf00      	nop
    }
}
 801902a:	bf00      	nop
 801902c:	370c      	adds	r7, #12
 801902e:	46bd      	mov	sp, r7
 8019030:	bd90      	pop	{r4, r7, pc}
 8019032:	bf00      	nop
 8019034:	0801cb8c 	.word	0x0801cb8c
 8019038:	200021cc 	.word	0x200021cc
 801903c:	08018a23 	.word	0x08018a23
 8019040:	08018a47 	.word	0x08018a47
 8019044:	0801cb98 	.word	0x0801cb98
 8019048:	0801cba4 	.word	0x0801cba4
 801904c:	20002240 	.word	0x20002240
 8019050:	200021c8 	.word	0x200021c8
 8019054:	0801cbb0 	.word	0x0801cbb0
 8019058:	0801cbbc 	.word	0x0801cbbc

0801905c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801905c:	b580      	push	{r7, lr}
 801905e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019060:	4b09      	ldr	r3, [pc, #36]	; (8019088 <RadioTxPrbs+0x2c>)
 8019062:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019066:	2101      	movs	r1, #1
 8019068:	4618      	mov	r0, r3
 801906a:	f001 fcb5 	bl	801a9d8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801906e:	4b07      	ldr	r3, [pc, #28]	; (801908c <RadioTxPrbs+0x30>)
 8019070:	212d      	movs	r1, #45	; 0x2d
 8019072:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8019076:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8019078:	f000 fefd 	bl	8019e76 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801907c:	4804      	ldr	r0, [pc, #16]	; (8019090 <RadioTxPrbs+0x34>)
 801907e:	f000 fe53 	bl	8019d28 <SUBGRF_SetTx>
}
 8019082:	bf00      	nop
 8019084:	bd80      	pop	{r7, pc}
 8019086:	bf00      	nop
 8019088:	200021cc 	.word	0x200021cc
 801908c:	08018a23 	.word	0x08018a23
 8019090:	000fffff 	.word	0x000fffff

08019094 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8019094:	b580      	push	{r7, lr}
 8019096:	b084      	sub	sp, #16
 8019098:	af00      	add	r7, sp, #0
 801909a:	4603      	mov	r3, r0
 801909c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801909e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80190a2:	4618      	mov	r0, r3
 80190a4:	f001 fcc0 	bl	801aa28 <SUBGRF_SetRfTxPower>
 80190a8:	4603      	mov	r3, r0
 80190aa:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80190ac:	7bfb      	ldrb	r3, [r7, #15]
 80190ae:	2101      	movs	r1, #1
 80190b0:	4618      	mov	r0, r3
 80190b2:	f001 fc91 	bl	801a9d8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80190b6:	f000 fed5 	bl	8019e64 <SUBGRF_SetTxContinuousWave>
}
 80190ba:	bf00      	nop
 80190bc:	3710      	adds	r7, #16
 80190be:	46bd      	mov	sp, r7
 80190c0:	bd80      	pop	{r7, pc}

080190c2 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80190c2:	b480      	push	{r7}
 80190c4:	b089      	sub	sp, #36	; 0x24
 80190c6:	af00      	add	r7, sp, #0
 80190c8:	60f8      	str	r0, [r7, #12]
 80190ca:	60b9      	str	r1, [r7, #8]
 80190cc:	4613      	mov	r3, r2
 80190ce:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80190d0:	2300      	movs	r3, #0
 80190d2:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80190d4:	2300      	movs	r3, #0
 80190d6:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80190d8:	2300      	movs	r3, #0
 80190da:	61bb      	str	r3, [r7, #24]
 80190dc:	e011      	b.n	8019102 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80190de:	69bb      	ldr	r3, [r7, #24]
 80190e0:	68ba      	ldr	r2, [r7, #8]
 80190e2:	4413      	add	r3, r2
 80190e4:	781a      	ldrb	r2, [r3, #0]
 80190e6:	69bb      	ldr	r3, [r7, #24]
 80190e8:	68b9      	ldr	r1, [r7, #8]
 80190ea:	440b      	add	r3, r1
 80190ec:	43d2      	mvns	r2, r2
 80190ee:	b2d2      	uxtb	r2, r2
 80190f0:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80190f2:	69bb      	ldr	r3, [r7, #24]
 80190f4:	68fa      	ldr	r2, [r7, #12]
 80190f6:	4413      	add	r3, r2
 80190f8:	2200      	movs	r2, #0
 80190fa:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80190fc:	69bb      	ldr	r3, [r7, #24]
 80190fe:	3301      	adds	r3, #1
 8019100:	61bb      	str	r3, [r7, #24]
 8019102:	79fb      	ldrb	r3, [r7, #7]
 8019104:	69ba      	ldr	r2, [r7, #24]
 8019106:	429a      	cmp	r2, r3
 8019108:	dbe9      	blt.n	80190de <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801910a:	2300      	movs	r3, #0
 801910c:	61bb      	str	r3, [r7, #24]
 801910e:	e049      	b.n	80191a4 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8019110:	69bb      	ldr	r3, [r7, #24]
 8019112:	425a      	negs	r2, r3
 8019114:	f003 0307 	and.w	r3, r3, #7
 8019118:	f002 0207 	and.w	r2, r2, #7
 801911c:	bf58      	it	pl
 801911e:	4253      	negpl	r3, r2
 8019120:	b2db      	uxtb	r3, r3
 8019122:	f1c3 0307 	rsb	r3, r3, #7
 8019126:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8019128:	69bb      	ldr	r3, [r7, #24]
 801912a:	2b00      	cmp	r3, #0
 801912c:	da00      	bge.n	8019130 <payload_integration+0x6e>
 801912e:	3307      	adds	r3, #7
 8019130:	10db      	asrs	r3, r3, #3
 8019132:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8019134:	69bb      	ldr	r3, [r7, #24]
 8019136:	3301      	adds	r3, #1
 8019138:	425a      	negs	r2, r3
 801913a:	f003 0307 	and.w	r3, r3, #7
 801913e:	f002 0207 	and.w	r2, r2, #7
 8019142:	bf58      	it	pl
 8019144:	4253      	negpl	r3, r2
 8019146:	b2db      	uxtb	r3, r3
 8019148:	f1c3 0307 	rsb	r3, r3, #7
 801914c:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801914e:	69bb      	ldr	r3, [r7, #24]
 8019150:	3301      	adds	r3, #1
 8019152:	2b00      	cmp	r3, #0
 8019154:	da00      	bge.n	8019158 <payload_integration+0x96>
 8019156:	3307      	adds	r3, #7
 8019158:	10db      	asrs	r3, r3, #3
 801915a:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801915c:	7dbb      	ldrb	r3, [r7, #22]
 801915e:	68ba      	ldr	r2, [r7, #8]
 8019160:	4413      	add	r3, r2
 8019162:	781b      	ldrb	r3, [r3, #0]
 8019164:	461a      	mov	r2, r3
 8019166:	7dfb      	ldrb	r3, [r7, #23]
 8019168:	fa42 f303 	asr.w	r3, r2, r3
 801916c:	b2db      	uxtb	r3, r3
 801916e:	f003 0301 	and.w	r3, r3, #1
 8019172:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8019174:	7ffa      	ldrb	r2, [r7, #31]
 8019176:	7cfb      	ldrb	r3, [r7, #19]
 8019178:	4053      	eors	r3, r2
 801917a:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801917c:	7d3b      	ldrb	r3, [r7, #20]
 801917e:	68fa      	ldr	r2, [r7, #12]
 8019180:	4413      	add	r3, r2
 8019182:	781b      	ldrb	r3, [r3, #0]
 8019184:	b25a      	sxtb	r2, r3
 8019186:	7ff9      	ldrb	r1, [r7, #31]
 8019188:	7d7b      	ldrb	r3, [r7, #21]
 801918a:	fa01 f303 	lsl.w	r3, r1, r3
 801918e:	b25b      	sxtb	r3, r3
 8019190:	4313      	orrs	r3, r2
 8019192:	b259      	sxtb	r1, r3
 8019194:	7d3b      	ldrb	r3, [r7, #20]
 8019196:	68fa      	ldr	r2, [r7, #12]
 8019198:	4413      	add	r3, r2
 801919a:	b2ca      	uxtb	r2, r1
 801919c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801919e:	69bb      	ldr	r3, [r7, #24]
 80191a0:	3301      	adds	r3, #1
 80191a2:	61bb      	str	r3, [r7, #24]
 80191a4:	79fb      	ldrb	r3, [r7, #7]
 80191a6:	00db      	lsls	r3, r3, #3
 80191a8:	69ba      	ldr	r2, [r7, #24]
 80191aa:	429a      	cmp	r2, r3
 80191ac:	dbb0      	blt.n	8019110 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80191ae:	7ffb      	ldrb	r3, [r7, #31]
 80191b0:	01db      	lsls	r3, r3, #7
 80191b2:	b25a      	sxtb	r2, r3
 80191b4:	7ffb      	ldrb	r3, [r7, #31]
 80191b6:	019b      	lsls	r3, r3, #6
 80191b8:	b25b      	sxtb	r3, r3
 80191ba:	4313      	orrs	r3, r2
 80191bc:	b25b      	sxtb	r3, r3
 80191be:	7ffa      	ldrb	r2, [r7, #31]
 80191c0:	2a00      	cmp	r2, #0
 80191c2:	d101      	bne.n	80191c8 <payload_integration+0x106>
 80191c4:	2220      	movs	r2, #32
 80191c6:	e000      	b.n	80191ca <payload_integration+0x108>
 80191c8:	2200      	movs	r2, #0
 80191ca:	4313      	orrs	r3, r2
 80191cc:	b259      	sxtb	r1, r3
 80191ce:	79fb      	ldrb	r3, [r7, #7]
 80191d0:	68fa      	ldr	r2, [r7, #12]
 80191d2:	4413      	add	r3, r2
 80191d4:	b2ca      	uxtb	r2, r1
 80191d6:	701a      	strb	r2, [r3, #0]
}
 80191d8:	bf00      	nop
 80191da:	3724      	adds	r7, #36	; 0x24
 80191dc:	46bd      	mov	sp, r7
 80191de:	bc80      	pop	{r7}
 80191e0:	4770      	bx	lr
	...

080191e4 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 80191e4:	b580      	push	{r7, lr}
 80191e6:	b08c      	sub	sp, #48	; 0x30
 80191e8:	af00      	add	r7, sp, #0
 80191ea:	60b9      	str	r1, [r7, #8]
 80191ec:	607a      	str	r2, [r7, #4]
 80191ee:	603b      	str	r3, [r7, #0]
 80191f0:	4603      	mov	r3, r0
 80191f2:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80191f4:	2300      	movs	r3, #0
 80191f6:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 80191f8:	2300      	movs	r3, #0
 80191fa:	623b      	str	r3, [r7, #32]
 80191fc:	2300      	movs	r3, #0
 80191fe:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019200:	f001 fdcd 	bl	801ad9e <RFW_DeInit>

    if( rxContinuous != 0 )
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	2b00      	cmp	r3, #0
 8019208:	d001      	beq.n	801920e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801920a:	2300      	movs	r3, #0
 801920c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	2b00      	cmp	r3, #0
 8019212:	bf14      	ite	ne
 8019214:	2301      	movne	r3, #1
 8019216:	2300      	moveq	r3, #0
 8019218:	b2da      	uxtb	r2, r3
 801921a:	4ba3      	ldr	r3, [pc, #652]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 801921c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801921e:	7bfb      	ldrb	r3, [r7, #15]
 8019220:	2b00      	cmp	r3, #0
 8019222:	d003      	beq.n	801922c <RadioSetRxGenericConfig+0x48>
 8019224:	2b01      	cmp	r3, #1
 8019226:	f000 80dc 	beq.w	80193e2 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801922a:	e194      	b.n	8019556 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801922c:	68bb      	ldr	r3, [r7, #8]
 801922e:	689b      	ldr	r3, [r3, #8]
 8019230:	2b00      	cmp	r3, #0
 8019232:	d003      	beq.n	801923c <RadioSetRxGenericConfig+0x58>
 8019234:	68bb      	ldr	r3, [r7, #8]
 8019236:	68db      	ldr	r3, [r3, #12]
 8019238:	2b00      	cmp	r3, #0
 801923a:	d102      	bne.n	8019242 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801923c:	f04f 33ff 	mov.w	r3, #4294967295
 8019240:	e18a      	b.n	8019558 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8019242:	68bb      	ldr	r3, [r7, #8]
 8019244:	7f9b      	ldrb	r3, [r3, #30]
 8019246:	2b08      	cmp	r3, #8
 8019248:	d902      	bls.n	8019250 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801924a:	f04f 33ff 	mov.w	r3, #4294967295
 801924e:	e183      	b.n	8019558 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8019250:	68bb      	ldr	r3, [r7, #8]
 8019252:	6919      	ldr	r1, [r3, #16]
 8019254:	68bb      	ldr	r3, [r7, #8]
 8019256:	7f9b      	ldrb	r3, [r3, #30]
 8019258:	b29a      	uxth	r2, r3
 801925a:	f107 0320 	add.w	r3, r7, #32
 801925e:	4618      	mov	r0, r3
 8019260:	f001 fe90 	bl	801af84 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019264:	68bb      	ldr	r3, [r7, #8]
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	2b00      	cmp	r3, #0
 801926a:	bf14      	ite	ne
 801926c:	2301      	movne	r3, #1
 801926e:	2300      	moveq	r3, #0
 8019270:	b2db      	uxtb	r3, r3
 8019272:	4618      	mov	r0, r3
 8019274:	f000 fe08 	bl	8019e88 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019278:	4b8b      	ldr	r3, [pc, #556]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 801927a:	2200      	movs	r2, #0
 801927c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019280:	68bb      	ldr	r3, [r7, #8]
 8019282:	689b      	ldr	r3, [r3, #8]
 8019284:	4a88      	ldr	r2, [pc, #544]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 8019286:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8019288:	68bb      	ldr	r3, [r7, #8]
 801928a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801928e:	4b86      	ldr	r3, [pc, #536]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 8019290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8019294:	68bb      	ldr	r3, [r7, #8]
 8019296:	685b      	ldr	r3, [r3, #4]
 8019298:	4618      	mov	r0, r3
 801929a:	f001 fcb3 	bl	801ac04 <SUBGRF_GetFskBandwidthRegValue>
 801929e:	4603      	mov	r3, r0
 80192a0:	461a      	mov	r2, r3
 80192a2:	4b81      	ldr	r3, [pc, #516]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 80192a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80192a8:	4b7f      	ldr	r3, [pc, #508]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 80192aa:	2200      	movs	r2, #0
 80192ac:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80192ae:	68bb      	ldr	r3, [r7, #8]
 80192b0:	68db      	ldr	r3, [r3, #12]
 80192b2:	b29b      	uxth	r3, r3
 80192b4:	00db      	lsls	r3, r3, #3
 80192b6:	b29a      	uxth	r2, r3
 80192b8:	4b7b      	ldr	r3, [pc, #492]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 80192ba:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80192bc:	68bb      	ldr	r3, [r7, #8]
 80192be:	7fda      	ldrb	r2, [r3, #31]
 80192c0:	4b79      	ldr	r3, [pc, #484]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 80192c2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80192c4:	68bb      	ldr	r3, [r7, #8]
 80192c6:	7f9b      	ldrb	r3, [r3, #30]
 80192c8:	00db      	lsls	r3, r3, #3
 80192ca:	b2da      	uxtb	r2, r3
 80192cc:	4b76      	ldr	r3, [pc, #472]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 80192ce:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80192d0:	68bb      	ldr	r3, [r7, #8]
 80192d2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80192d6:	4b74      	ldr	r3, [pc, #464]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 80192d8:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80192da:	68bb      	ldr	r3, [r7, #8]
 80192dc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d105      	bne.n	80192f0 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80192e4:	68bb      	ldr	r3, [r7, #8]
 80192e6:	695b      	ldr	r3, [r3, #20]
 80192e8:	b2da      	uxtb	r2, r3
 80192ea:	4b6f      	ldr	r3, [pc, #444]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 80192ec:	759a      	strb	r2, [r3, #22]
 80192ee:	e00b      	b.n	8019308 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80192f0:	68bb      	ldr	r3, [r7, #8]
 80192f2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80192f6:	2b02      	cmp	r3, #2
 80192f8:	d103      	bne.n	8019302 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80192fa:	4b6b      	ldr	r3, [pc, #428]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 80192fc:	22ff      	movs	r2, #255	; 0xff
 80192fe:	759a      	strb	r2, [r3, #22]
 8019300:	e002      	b.n	8019308 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019302:	4b69      	ldr	r3, [pc, #420]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 8019304:	22ff      	movs	r2, #255	; 0xff
 8019306:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019308:	68bb      	ldr	r3, [r7, #8]
 801930a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801930e:	2b02      	cmp	r3, #2
 8019310:	d004      	beq.n	801931c <RadioSetRxGenericConfig+0x138>
 8019312:	68bb      	ldr	r3, [r7, #8]
 8019314:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019318:	2b02      	cmp	r3, #2
 801931a:	d12d      	bne.n	8019378 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801931c:	68bb      	ldr	r3, [r7, #8]
 801931e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019322:	2bf1      	cmp	r3, #241	; 0xf1
 8019324:	d00c      	beq.n	8019340 <RadioSetRxGenericConfig+0x15c>
 8019326:	68bb      	ldr	r3, [r7, #8]
 8019328:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801932c:	2bf2      	cmp	r3, #242	; 0xf2
 801932e:	d007      	beq.n	8019340 <RadioSetRxGenericConfig+0x15c>
 8019330:	68bb      	ldr	r3, [r7, #8]
 8019332:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019336:	2b01      	cmp	r3, #1
 8019338:	d002      	beq.n	8019340 <RadioSetRxGenericConfig+0x15c>
            return -1;
 801933a:	f04f 33ff 	mov.w	r3, #4294967295
 801933e:	e10b      	b.n	8019558 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8019340:	2300      	movs	r3, #0
 8019342:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8019344:	68bb      	ldr	r3, [r7, #8]
 8019346:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8019348:	4b58      	ldr	r3, [pc, #352]	; (80194ac <RadioSetRxGenericConfig+0x2c8>)
 801934a:	6819      	ldr	r1, [r3, #0]
 801934c:	f107 0314 	add.w	r3, r7, #20
 8019350:	4a57      	ldr	r2, [pc, #348]	; (80194b0 <RadioSetRxGenericConfig+0x2cc>)
 8019352:	4618      	mov	r0, r3
 8019354:	f001 fd16 	bl	801ad84 <RFW_Init>
 8019358:	4603      	mov	r3, r0
 801935a:	2b00      	cmp	r3, #0
 801935c:	d002      	beq.n	8019364 <RadioSetRxGenericConfig+0x180>
            return -1;
 801935e:	f04f 33ff 	mov.w	r3, #4294967295
 8019362:	e0f9      	b.n	8019558 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019364:	4b50      	ldr	r3, [pc, #320]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 8019366:	2200      	movs	r2, #0
 8019368:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801936a:	4b4f      	ldr	r3, [pc, #316]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 801936c:	2201      	movs	r2, #1
 801936e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019370:	4b4d      	ldr	r3, [pc, #308]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 8019372:	2200      	movs	r2, #0
 8019374:	755a      	strb	r2, [r3, #21]
        {
 8019376:	e00e      	b.n	8019396 <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019378:	68bb      	ldr	r3, [r7, #8]
 801937a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801937e:	4b4a      	ldr	r3, [pc, #296]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 8019380:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019382:	68bb      	ldr	r3, [r7, #8]
 8019384:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8019388:	4b47      	ldr	r3, [pc, #284]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 801938a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801938c:	68bb      	ldr	r3, [r7, #8]
 801938e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8019392:	4b45      	ldr	r3, [pc, #276]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 8019394:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8019396:	f7ff fa48 	bl	801882a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801939a:	2000      	movs	r0, #0
 801939c:	f7fe fbf2 	bl	8017b84 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80193a0:	4844      	ldr	r0, [pc, #272]	; (80194b4 <RadioSetRxGenericConfig+0x2d0>)
 80193a2:	f001 f80b 	bl	801a3bc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80193a6:	4844      	ldr	r0, [pc, #272]	; (80194b8 <RadioSetRxGenericConfig+0x2d4>)
 80193a8:	f001 f8da 	bl	801a560 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80193ac:	f107 0320 	add.w	r3, r7, #32
 80193b0:	4618      	mov	r0, r3
 80193b2:	f000 fba2 	bl	8019afa <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80193b6:	68bb      	ldr	r3, [r7, #8]
 80193b8:	8b9b      	ldrh	r3, [r3, #28]
 80193ba:	4618      	mov	r0, r3
 80193bc:	f000 fbec 	bl	8019b98 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80193c0:	68bb      	ldr	r3, [r7, #8]
 80193c2:	8b1b      	ldrh	r3, [r3, #24]
 80193c4:	4618      	mov	r0, r3
 80193c6:	f000 fbc7 	bl	8019b58 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80193ca:	683b      	ldr	r3, [r7, #0]
 80193cc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80193d0:	fb03 f202 	mul.w	r2, r3, r2
 80193d4:	68bb      	ldr	r3, [r7, #8]
 80193d6:	689b      	ldr	r3, [r3, #8]
 80193d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80193dc:	4a32      	ldr	r2, [pc, #200]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 80193de:	6093      	str	r3, [r2, #8]
        break;
 80193e0:	e0b9      	b.n	8019556 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 80193e2:	68bb      	ldr	r3, [r7, #8]
 80193e4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d102      	bne.n	80193f0 <RadioSetRxGenericConfig+0x20c>
            return -1;
 80193ea:	f04f 33ff 	mov.w	r3, #4294967295
 80193ee:	e0b3      	b.n	8019558 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80193f0:	68bb      	ldr	r3, [r7, #8]
 80193f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80193f6:	2b01      	cmp	r3, #1
 80193f8:	d104      	bne.n	8019404 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80193fa:	68bb      	ldr	r3, [r7, #8]
 80193fc:	695b      	ldr	r3, [r3, #20]
 80193fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019402:	e002      	b.n	801940a <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8019404:	23ff      	movs	r3, #255	; 0xff
 8019406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801940a:	68bb      	ldr	r3, [r7, #8]
 801940c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801940e:	2b00      	cmp	r3, #0
 8019410:	bf14      	ite	ne
 8019412:	2301      	movne	r3, #1
 8019414:	2300      	moveq	r3, #0
 8019416:	b2db      	uxtb	r3, r3
 8019418:	4618      	mov	r0, r3
 801941a:	f000 fd35 	bl	8019e88 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801941e:	683b      	ldr	r3, [r7, #0]
 8019420:	b2db      	uxtb	r3, r3
 8019422:	4618      	mov	r0, r3
 8019424:	f000 fd3f 	bl	8019ea6 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019428:	4b1f      	ldr	r3, [pc, #124]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 801942a:	2201      	movs	r2, #1
 801942c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019430:	68bb      	ldr	r3, [r7, #8]
 8019432:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8019436:	4b1c      	ldr	r3, [pc, #112]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 8019438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801943c:	68bb      	ldr	r3, [r7, #8]
 801943e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8019442:	4b19      	ldr	r3, [pc, #100]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 8019444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8019448:	68bb      	ldr	r3, [r7, #8]
 801944a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801944e:	4b16      	ldr	r3, [pc, #88]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 8019450:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8019454:	68bb      	ldr	r3, [r7, #8]
 8019456:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801945a:	2b02      	cmp	r3, #2
 801945c:	d010      	beq.n	8019480 <RadioSetRxGenericConfig+0x29c>
 801945e:	2b02      	cmp	r3, #2
 8019460:	dc2c      	bgt.n	80194bc <RadioSetRxGenericConfig+0x2d8>
 8019462:	2b00      	cmp	r3, #0
 8019464:	d002      	beq.n	801946c <RadioSetRxGenericConfig+0x288>
 8019466:	2b01      	cmp	r3, #1
 8019468:	d005      	beq.n	8019476 <RadioSetRxGenericConfig+0x292>
            break;
 801946a:	e027      	b.n	80194bc <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801946c:	4b0e      	ldr	r3, [pc, #56]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 801946e:	2200      	movs	r2, #0
 8019470:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019474:	e023      	b.n	80194be <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019476:	4b0c      	ldr	r3, [pc, #48]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 8019478:	2201      	movs	r2, #1
 801947a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801947e:	e01e      	b.n	80194be <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8019480:	68bb      	ldr	r3, [r7, #8]
 8019482:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019486:	2b0b      	cmp	r3, #11
 8019488:	d004      	beq.n	8019494 <RadioSetRxGenericConfig+0x2b0>
 801948a:	68bb      	ldr	r3, [r7, #8]
 801948c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019490:	2b0c      	cmp	r3, #12
 8019492:	d104      	bne.n	801949e <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019494:	4b04      	ldr	r3, [pc, #16]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 8019496:	2201      	movs	r2, #1
 8019498:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801949c:	e00f      	b.n	80194be <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801949e:	4b02      	ldr	r3, [pc, #8]	; (80194a8 <RadioSetRxGenericConfig+0x2c4>)
 80194a0:	2200      	movs	r2, #0
 80194a2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80194a6:	e00a      	b.n	80194be <RadioSetRxGenericConfig+0x2da>
 80194a8:	200021cc 	.word	0x200021cc
 80194ac:	200021c8 	.word	0x200021c8
 80194b0:	20002240 	.word	0x20002240
 80194b4:	20002204 	.word	0x20002204
 80194b8:	200021da 	.word	0x200021da
            break;
 80194bc:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80194be:	4b28      	ldr	r3, [pc, #160]	; (8019560 <RadioSetRxGenericConfig+0x37c>)
 80194c0:	2201      	movs	r2, #1
 80194c2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80194c4:	68bb      	ldr	r3, [r7, #8]
 80194c6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80194c8:	4b25      	ldr	r3, [pc, #148]	; (8019560 <RadioSetRxGenericConfig+0x37c>)
 80194ca:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80194cc:	68bb      	ldr	r3, [r7, #8]
 80194ce:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80194d2:	4b23      	ldr	r3, [pc, #140]	; (8019560 <RadioSetRxGenericConfig+0x37c>)
 80194d4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80194d6:	4a22      	ldr	r2, [pc, #136]	; (8019560 <RadioSetRxGenericConfig+0x37c>)
 80194d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80194dc:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80194de:	68bb      	ldr	r3, [r7, #8]
 80194e0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80194e4:	4b1e      	ldr	r3, [pc, #120]	; (8019560 <RadioSetRxGenericConfig+0x37c>)
 80194e6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80194ea:	68bb      	ldr	r3, [r7, #8]
 80194ec:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80194f0:	4b1b      	ldr	r3, [pc, #108]	; (8019560 <RadioSetRxGenericConfig+0x37c>)
 80194f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80194f6:	f7ff f998 	bl	801882a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80194fa:	2001      	movs	r0, #1
 80194fc:	f7fe fb42 	bl	8017b84 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019500:	4818      	ldr	r0, [pc, #96]	; (8019564 <RadioSetRxGenericConfig+0x380>)
 8019502:	f000 ff5b 	bl	801a3bc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019506:	4818      	ldr	r0, [pc, #96]	; (8019568 <RadioSetRxGenericConfig+0x384>)
 8019508:	f001 f82a 	bl	801a560 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801950c:	4b14      	ldr	r3, [pc, #80]	; (8019560 <RadioSetRxGenericConfig+0x37c>)
 801950e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8019512:	2b01      	cmp	r3, #1
 8019514:	d10d      	bne.n	8019532 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8019516:	f240 7036 	movw	r0, #1846	; 0x736
 801951a:	f001 f97d 	bl	801a818 <SUBGRF_ReadRegister>
 801951e:	4603      	mov	r3, r0
 8019520:	f023 0304 	bic.w	r3, r3, #4
 8019524:	b2db      	uxtb	r3, r3
 8019526:	4619      	mov	r1, r3
 8019528:	f240 7036 	movw	r0, #1846	; 0x736
 801952c:	f001 f960 	bl	801a7f0 <SUBGRF_WriteRegister>
 8019530:	e00c      	b.n	801954c <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019532:	f240 7036 	movw	r0, #1846	; 0x736
 8019536:	f001 f96f 	bl	801a818 <SUBGRF_ReadRegister>
 801953a:	4603      	mov	r3, r0
 801953c:	f043 0304 	orr.w	r3, r3, #4
 8019540:	b2db      	uxtb	r3, r3
 8019542:	4619      	mov	r1, r3
 8019544:	f240 7036 	movw	r0, #1846	; 0x736
 8019548:	f001 f952 	bl	801a7f0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801954c:	4b04      	ldr	r3, [pc, #16]	; (8019560 <RadioSetRxGenericConfig+0x37c>)
 801954e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019552:	609a      	str	r2, [r3, #8]
        break;
 8019554:	bf00      	nop
    }
    return status;
 8019556:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8019558:	4618      	mov	r0, r3
 801955a:	3730      	adds	r7, #48	; 0x30
 801955c:	46bd      	mov	sp, r7
 801955e:	bd80      	pop	{r7, pc}
 8019560:	200021cc 	.word	0x200021cc
 8019564:	20002204 	.word	0x20002204
 8019568:	200021da 	.word	0x200021da

0801956c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801956c:	b580      	push	{r7, lr}
 801956e:	b08e      	sub	sp, #56	; 0x38
 8019570:	af00      	add	r7, sp, #0
 8019572:	60b9      	str	r1, [r7, #8]
 8019574:	607b      	str	r3, [r7, #4]
 8019576:	4603      	mov	r3, r0
 8019578:	73fb      	strb	r3, [r7, #15]
 801957a:	4613      	mov	r3, r2
 801957c:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801957e:	2300      	movs	r3, #0
 8019580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019582:	2300      	movs	r3, #0
 8019584:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019586:	f001 fc0a 	bl	801ad9e <RFW_DeInit>
    switch( modem )
 801958a:	7bfb      	ldrb	r3, [r7, #15]
 801958c:	2b03      	cmp	r3, #3
 801958e:	f200 8204 	bhi.w	801999a <RadioSetTxGenericConfig+0x42e>
 8019592:	a201      	add	r2, pc, #4	; (adr r2, 8019598 <RadioSetTxGenericConfig+0x2c>)
 8019594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019598:	0801971d 	.word	0x0801971d
 801959c:	08019865 	.word	0x08019865
 80195a0:	0801995d 	.word	0x0801995d
 80195a4:	080195a9 	.word	0x080195a9
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 80195a8:	68bb      	ldr	r3, [r7, #8]
 80195aa:	7c9b      	ldrb	r3, [r3, #18]
 80195ac:	2b08      	cmp	r3, #8
 80195ae:	d902      	bls.n	80195b6 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 80195b0:	f04f 33ff 	mov.w	r3, #4294967295
 80195b4:	e206      	b.n	80199c4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 80195b6:	68bb      	ldr	r3, [r7, #8]
 80195b8:	6899      	ldr	r1, [r3, #8]
 80195ba:	68bb      	ldr	r3, [r7, #8]
 80195bc:	7c9b      	ldrb	r3, [r3, #18]
 80195be:	b29a      	uxth	r2, r3
 80195c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80195c4:	4618      	mov	r0, r3
 80195c6:	f001 fcdd 	bl	801af84 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80195ca:	68bb      	ldr	r3, [r7, #8]
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d102      	bne.n	80195d8 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 80195d2:	f04f 33ff 	mov.w	r3, #4294967295
 80195d6:	e1f5      	b.n	80199c4 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 80195d8:	68bb      	ldr	r3, [r7, #8]
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80195e0:	4293      	cmp	r3, r2
 80195e2:	d813      	bhi.n	801960c <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 80195e4:	2302      	movs	r3, #2
 80195e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80195ea:	4b99      	ldr	r3, [pc, #612]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 80195ec:	2203      	movs	r2, #3
 80195ee:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80195f0:	4b97      	ldr	r3, [pc, #604]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 80195f2:	2203      	movs	r2, #3
 80195f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80195f8:	68bb      	ldr	r3, [r7, #8]
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	4a94      	ldr	r2, [pc, #592]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 80195fe:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019600:	68bb      	ldr	r3, [r7, #8]
 8019602:	7cda      	ldrb	r2, [r3, #19]
 8019604:	4b92      	ldr	r3, [pc, #584]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 8019606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801960a:	e017      	b.n	801963c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 801960c:	2300      	movs	r3, #0
 801960e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019612:	4b8f      	ldr	r3, [pc, #572]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 8019614:	2200      	movs	r2, #0
 8019616:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019618:	4b8d      	ldr	r3, [pc, #564]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 801961a:	2200      	movs	r2, #0
 801961c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019620:	68bb      	ldr	r3, [r7, #8]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	4a8a      	ldr	r2, [pc, #552]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 8019626:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019628:	68bb      	ldr	r3, [r7, #8]
 801962a:	7cda      	ldrb	r2, [r3, #19]
 801962c:	4b88      	ldr	r3, [pc, #544]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 801962e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8019632:	68bb      	ldr	r3, [r7, #8]
 8019634:	681b      	ldr	r3, [r3, #0]
 8019636:	089b      	lsrs	r3, r3, #2
 8019638:	4a85      	ldr	r2, [pc, #532]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 801963a:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801963c:	68bb      	ldr	r3, [r7, #8]
 801963e:	685b      	ldr	r3, [r3, #4]
 8019640:	b29b      	uxth	r3, r3
 8019642:	00db      	lsls	r3, r3, #3
 8019644:	b29a      	uxth	r2, r3
 8019646:	4b82      	ldr	r3, [pc, #520]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 8019648:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801964a:	4b81      	ldr	r3, [pc, #516]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 801964c:	2204      	movs	r2, #4
 801964e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8019650:	68bb      	ldr	r3, [r7, #8]
 8019652:	7c9b      	ldrb	r3, [r3, #18]
 8019654:	00db      	lsls	r3, r3, #3
 8019656:	b2da      	uxtb	r2, r3
 8019658:	4b7d      	ldr	r3, [pc, #500]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 801965a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801965c:	4b7c      	ldr	r3, [pc, #496]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 801965e:	2200      	movs	r2, #0
 8019660:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019662:	68bb      	ldr	r3, [r7, #8]
 8019664:	7d9b      	ldrb	r3, [r3, #22]
 8019666:	2b02      	cmp	r3, #2
 8019668:	d003      	beq.n	8019672 <RadioSetTxGenericConfig+0x106>
 801966a:	68bb      	ldr	r3, [r7, #8]
 801966c:	7d1b      	ldrb	r3, [r3, #20]
 801966e:	2b02      	cmp	r3, #2
 8019670:	d12b      	bne.n	80196ca <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019672:	68bb      	ldr	r3, [r7, #8]
 8019674:	7d5b      	ldrb	r3, [r3, #21]
 8019676:	2bf1      	cmp	r3, #241	; 0xf1
 8019678:	d00a      	beq.n	8019690 <RadioSetTxGenericConfig+0x124>
 801967a:	68bb      	ldr	r3, [r7, #8]
 801967c:	7d5b      	ldrb	r3, [r3, #21]
 801967e:	2bf2      	cmp	r3, #242	; 0xf2
 8019680:	d006      	beq.n	8019690 <RadioSetTxGenericConfig+0x124>
 8019682:	68bb      	ldr	r3, [r7, #8]
 8019684:	7d5b      	ldrb	r3, [r3, #21]
 8019686:	2b01      	cmp	r3, #1
 8019688:	d002      	beq.n	8019690 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801968a:	f04f 33ff 	mov.w	r3, #4294967295
 801968e:	e199      	b.n	80199c4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8019690:	68bb      	ldr	r3, [r7, #8]
 8019692:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8019694:	2301      	movs	r3, #1
 8019696:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801969a:	4b6e      	ldr	r3, [pc, #440]	; (8019854 <RadioSetTxGenericConfig+0x2e8>)
 801969c:	6819      	ldr	r1, [r3, #0]
 801969e:	f107 0320 	add.w	r3, r7, #32
 80196a2:	4a6d      	ldr	r2, [pc, #436]	; (8019858 <RadioSetTxGenericConfig+0x2ec>)
 80196a4:	4618      	mov	r0, r3
 80196a6:	f001 fb6d 	bl	801ad84 <RFW_Init>
 80196aa:	4603      	mov	r3, r0
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d002      	beq.n	80196b6 <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 80196b0:	f04f 33ff 	mov.w	r3, #4294967295
 80196b4:	e186      	b.n	80199c4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80196b6:	4b66      	ldr	r3, [pc, #408]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 80196b8:	2200      	movs	r2, #0
 80196ba:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80196bc:	4b64      	ldr	r3, [pc, #400]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 80196be:	2201      	movs	r2, #1
 80196c0:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80196c2:	4b63      	ldr	r3, [pc, #396]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 80196c4:	2200      	movs	r2, #0
 80196c6:	755a      	strb	r2, [r3, #21]
        {
 80196c8:	e00b      	b.n	80196e2 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80196ca:	68bb      	ldr	r3, [r7, #8]
 80196cc:	7d5a      	ldrb	r2, [r3, #21]
 80196ce:	4b60      	ldr	r3, [pc, #384]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 80196d0:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80196d2:	68bb      	ldr	r3, [r7, #8]
 80196d4:	7d9a      	ldrb	r2, [r3, #22]
 80196d6:	4b5e      	ldr	r3, [pc, #376]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 80196d8:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80196da:	68bb      	ldr	r3, [r7, #8]
 80196dc:	7d1a      	ldrb	r2, [r3, #20]
 80196de:	4b5c      	ldr	r3, [pc, #368]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 80196e0:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80196e2:	f7ff f8a2 	bl	801882a <RadioStandby>
        RadioSetModem( radio_modem );
 80196e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80196ea:	4618      	mov	r0, r3
 80196ec:	f7fe fa4a 	bl	8017b84 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80196f0:	485a      	ldr	r0, [pc, #360]	; (801985c <RadioSetTxGenericConfig+0x2f0>)
 80196f2:	f000 fe63 	bl	801a3bc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80196f6:	485a      	ldr	r0, [pc, #360]	; (8019860 <RadioSetTxGenericConfig+0x2f4>)
 80196f8:	f000 ff32 	bl	801a560 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80196fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019700:	4618      	mov	r0, r3
 8019702:	f000 f9fa 	bl	8019afa <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8019706:	68bb      	ldr	r3, [r7, #8]
 8019708:	8a1b      	ldrh	r3, [r3, #16]
 801970a:	4618      	mov	r0, r3
 801970c:	f000 fa44 	bl	8019b98 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8019710:	68bb      	ldr	r3, [r7, #8]
 8019712:	899b      	ldrh	r3, [r3, #12]
 8019714:	4618      	mov	r0, r3
 8019716:	f000 fa1f 	bl	8019b58 <SUBGRF_SetCrcPolynomial>
        break;
 801971a:	e13f      	b.n	801999c <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801971c:	68bb      	ldr	r3, [r7, #8]
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	2b00      	cmp	r3, #0
 8019722:	d102      	bne.n	801972a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8019724:	f04f 33ff 	mov.w	r3, #4294967295
 8019728:	e14c      	b.n	80199c4 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801972a:	68bb      	ldr	r3, [r7, #8]
 801972c:	7c9b      	ldrb	r3, [r3, #18]
 801972e:	2b08      	cmp	r3, #8
 8019730:	d902      	bls.n	8019738 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8019732:	f04f 33ff 	mov.w	r3, #4294967295
 8019736:	e145      	b.n	80199c4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 8019738:	68bb      	ldr	r3, [r7, #8]
 801973a:	6899      	ldr	r1, [r3, #8]
 801973c:	68bb      	ldr	r3, [r7, #8]
 801973e:	7c9b      	ldrb	r3, [r3, #18]
 8019740:	b29a      	uxth	r2, r3
 8019742:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019746:	4618      	mov	r0, r3
 8019748:	f001 fc1c 	bl	801af84 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801974c:	4b40      	ldr	r3, [pc, #256]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 801974e:	2200      	movs	r2, #0
 8019750:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019754:	68bb      	ldr	r3, [r7, #8]
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	4a3d      	ldr	r2, [pc, #244]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 801975a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801975c:	68bb      	ldr	r3, [r7, #8]
 801975e:	7cda      	ldrb	r2, [r3, #19]
 8019760:	4b3b      	ldr	r3, [pc, #236]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 8019762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8019766:	68bb      	ldr	r3, [r7, #8]
 8019768:	699b      	ldr	r3, [r3, #24]
 801976a:	4a39      	ldr	r2, [pc, #228]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 801976c:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801976e:	4b38      	ldr	r3, [pc, #224]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 8019770:	2200      	movs	r2, #0
 8019772:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8019774:	68bb      	ldr	r3, [r7, #8]
 8019776:	685b      	ldr	r3, [r3, #4]
 8019778:	b29b      	uxth	r3, r3
 801977a:	00db      	lsls	r3, r3, #3
 801977c:	b29a      	uxth	r2, r3
 801977e:	4b34      	ldr	r3, [pc, #208]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 8019780:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8019782:	4b33      	ldr	r3, [pc, #204]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 8019784:	2204      	movs	r2, #4
 8019786:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019788:	68bb      	ldr	r3, [r7, #8]
 801978a:	7c9b      	ldrb	r3, [r3, #18]
 801978c:	00db      	lsls	r3, r3, #3
 801978e:	b2da      	uxtb	r2, r3
 8019790:	4b2f      	ldr	r3, [pc, #188]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 8019792:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019794:	4b2e      	ldr	r3, [pc, #184]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 8019796:	2200      	movs	r2, #0
 8019798:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801979a:	68bb      	ldr	r3, [r7, #8]
 801979c:	7d9b      	ldrb	r3, [r3, #22]
 801979e:	2b02      	cmp	r3, #2
 80197a0:	d003      	beq.n	80197aa <RadioSetTxGenericConfig+0x23e>
 80197a2:	68bb      	ldr	r3, [r7, #8]
 80197a4:	7d1b      	ldrb	r3, [r3, #20]
 80197a6:	2b02      	cmp	r3, #2
 80197a8:	d12a      	bne.n	8019800 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80197aa:	68bb      	ldr	r3, [r7, #8]
 80197ac:	7d5b      	ldrb	r3, [r3, #21]
 80197ae:	2bf1      	cmp	r3, #241	; 0xf1
 80197b0:	d00a      	beq.n	80197c8 <RadioSetTxGenericConfig+0x25c>
 80197b2:	68bb      	ldr	r3, [r7, #8]
 80197b4:	7d5b      	ldrb	r3, [r3, #21]
 80197b6:	2bf2      	cmp	r3, #242	; 0xf2
 80197b8:	d006      	beq.n	80197c8 <RadioSetTxGenericConfig+0x25c>
 80197ba:	68bb      	ldr	r3, [r7, #8]
 80197bc:	7d5b      	ldrb	r3, [r3, #21]
 80197be:	2b01      	cmp	r3, #1
 80197c0:	d002      	beq.n	80197c8 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 80197c2:	f04f 33ff 	mov.w	r3, #4294967295
 80197c6:	e0fd      	b.n	80199c4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80197c8:	2301      	movs	r3, #1
 80197ca:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 80197cc:	68bb      	ldr	r3, [r7, #8]
 80197ce:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80197d0:	4b20      	ldr	r3, [pc, #128]	; (8019854 <RadioSetTxGenericConfig+0x2e8>)
 80197d2:	6819      	ldr	r1, [r3, #0]
 80197d4:	f107 0314 	add.w	r3, r7, #20
 80197d8:	4a1f      	ldr	r2, [pc, #124]	; (8019858 <RadioSetTxGenericConfig+0x2ec>)
 80197da:	4618      	mov	r0, r3
 80197dc:	f001 fad2 	bl	801ad84 <RFW_Init>
 80197e0:	4603      	mov	r3, r0
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d002      	beq.n	80197ec <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 80197e6:	f04f 33ff 	mov.w	r3, #4294967295
 80197ea:	e0eb      	b.n	80199c4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80197ec:	4b18      	ldr	r3, [pc, #96]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 80197ee:	2200      	movs	r2, #0
 80197f0:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80197f2:	4b17      	ldr	r3, [pc, #92]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 80197f4:	2201      	movs	r2, #1
 80197f6:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80197f8:	4b15      	ldr	r3, [pc, #84]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 80197fa:	2200      	movs	r2, #0
 80197fc:	755a      	strb	r2, [r3, #21]
        {
 80197fe:	e00b      	b.n	8019818 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019800:	68bb      	ldr	r3, [r7, #8]
 8019802:	7d5a      	ldrb	r2, [r3, #21]
 8019804:	4b12      	ldr	r3, [pc, #72]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 8019806:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019808:	68bb      	ldr	r3, [r7, #8]
 801980a:	7d9a      	ldrb	r2, [r3, #22]
 801980c:	4b10      	ldr	r3, [pc, #64]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 801980e:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8019810:	68bb      	ldr	r3, [r7, #8]
 8019812:	7d1a      	ldrb	r2, [r3, #20]
 8019814:	4b0e      	ldr	r3, [pc, #56]	; (8019850 <RadioSetTxGenericConfig+0x2e4>)
 8019816:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8019818:	f7ff f807 	bl	801882a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801981c:	2000      	movs	r0, #0
 801981e:	f7fe f9b1 	bl	8017b84 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019822:	480e      	ldr	r0, [pc, #56]	; (801985c <RadioSetTxGenericConfig+0x2f0>)
 8019824:	f000 fdca 	bl	801a3bc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019828:	480d      	ldr	r0, [pc, #52]	; (8019860 <RadioSetTxGenericConfig+0x2f4>)
 801982a:	f000 fe99 	bl	801a560 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801982e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019832:	4618      	mov	r0, r3
 8019834:	f000 f961 	bl	8019afa <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019838:	68bb      	ldr	r3, [r7, #8]
 801983a:	8a1b      	ldrh	r3, [r3, #16]
 801983c:	4618      	mov	r0, r3
 801983e:	f000 f9ab 	bl	8019b98 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8019842:	68bb      	ldr	r3, [r7, #8]
 8019844:	899b      	ldrh	r3, [r3, #12]
 8019846:	4618      	mov	r0, r3
 8019848:	f000 f986 	bl	8019b58 <SUBGRF_SetCrcPolynomial>
        break;
 801984c:	e0a6      	b.n	801999c <RadioSetTxGenericConfig+0x430>
 801984e:	bf00      	nop
 8019850:	200021cc 	.word	0x200021cc
 8019854:	200021c8 	.word	0x200021c8
 8019858:	20002228 	.word	0x20002228
 801985c:	20002204 	.word	0x20002204
 8019860:	200021da 	.word	0x200021da
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019864:	4b59      	ldr	r3, [pc, #356]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 8019866:	2201      	movs	r2, #1
 8019868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801986c:	68bb      	ldr	r3, [r7, #8]
 801986e:	781a      	ldrb	r2, [r3, #0]
 8019870:	4b56      	ldr	r3, [pc, #344]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 8019872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8019876:	68bb      	ldr	r3, [r7, #8]
 8019878:	785a      	ldrb	r2, [r3, #1]
 801987a:	4b54      	ldr	r3, [pc, #336]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 801987c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8019880:	68bb      	ldr	r3, [r7, #8]
 8019882:	789a      	ldrb	r2, [r3, #2]
 8019884:	4b51      	ldr	r3, [pc, #324]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 8019886:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801988a:	68bb      	ldr	r3, [r7, #8]
 801988c:	78db      	ldrb	r3, [r3, #3]
 801988e:	2b02      	cmp	r3, #2
 8019890:	d010      	beq.n	80198b4 <RadioSetTxGenericConfig+0x348>
 8019892:	2b02      	cmp	r3, #2
 8019894:	dc20      	bgt.n	80198d8 <RadioSetTxGenericConfig+0x36c>
 8019896:	2b00      	cmp	r3, #0
 8019898:	d002      	beq.n	80198a0 <RadioSetTxGenericConfig+0x334>
 801989a:	2b01      	cmp	r3, #1
 801989c:	d005      	beq.n	80198aa <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 801989e:	e01b      	b.n	80198d8 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80198a0:	4b4a      	ldr	r3, [pc, #296]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 80198a2:	2200      	movs	r2, #0
 80198a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80198a8:	e017      	b.n	80198da <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80198aa:	4b48      	ldr	r3, [pc, #288]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 80198ac:	2201      	movs	r2, #1
 80198ae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80198b2:	e012      	b.n	80198da <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80198b4:	68bb      	ldr	r3, [r7, #8]
 80198b6:	781b      	ldrb	r3, [r3, #0]
 80198b8:	2b0b      	cmp	r3, #11
 80198ba:	d003      	beq.n	80198c4 <RadioSetTxGenericConfig+0x358>
 80198bc:	68bb      	ldr	r3, [r7, #8]
 80198be:	781b      	ldrb	r3, [r3, #0]
 80198c0:	2b0c      	cmp	r3, #12
 80198c2:	d104      	bne.n	80198ce <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80198c4:	4b41      	ldr	r3, [pc, #260]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 80198c6:	2201      	movs	r2, #1
 80198c8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80198cc:	e005      	b.n	80198da <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80198ce:	4b3f      	ldr	r3, [pc, #252]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 80198d0:	2200      	movs	r2, #0
 80198d2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80198d6:	e000      	b.n	80198da <RadioSetTxGenericConfig+0x36e>
            break;
 80198d8:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80198da:	4b3c      	ldr	r3, [pc, #240]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 80198dc:	2201      	movs	r2, #1
 80198de:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80198e0:	68bb      	ldr	r3, [r7, #8]
 80198e2:	889a      	ldrh	r2, [r3, #4]
 80198e4:	4b39      	ldr	r3, [pc, #228]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 80198e6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80198e8:	68bb      	ldr	r3, [r7, #8]
 80198ea:	799a      	ldrb	r2, [r3, #6]
 80198ec:	4b37      	ldr	r3, [pc, #220]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 80198ee:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80198f0:	68bb      	ldr	r3, [r7, #8]
 80198f2:	79da      	ldrb	r2, [r3, #7]
 80198f4:	4b35      	ldr	r3, [pc, #212]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 80198f6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80198fa:	68bb      	ldr	r3, [r7, #8]
 80198fc:	7a1a      	ldrb	r2, [r3, #8]
 80198fe:	4b33      	ldr	r3, [pc, #204]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 8019900:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8019904:	f7fe ff91 	bl	801882a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8019908:	2001      	movs	r0, #1
 801990a:	f7fe f93b 	bl	8017b84 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801990e:	4830      	ldr	r0, [pc, #192]	; (80199d0 <RadioSetTxGenericConfig+0x464>)
 8019910:	f000 fd54 	bl	801a3bc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019914:	482f      	ldr	r0, [pc, #188]	; (80199d4 <RadioSetTxGenericConfig+0x468>)
 8019916:	f000 fe23 	bl	801a560 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801991a:	4b2c      	ldr	r3, [pc, #176]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 801991c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019920:	2b06      	cmp	r3, #6
 8019922:	d10d      	bne.n	8019940 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019924:	f640 0089 	movw	r0, #2185	; 0x889
 8019928:	f000 ff76 	bl	801a818 <SUBGRF_ReadRegister>
 801992c:	4603      	mov	r3, r0
 801992e:	f023 0304 	bic.w	r3, r3, #4
 8019932:	b2db      	uxtb	r3, r3
 8019934:	4619      	mov	r1, r3
 8019936:	f640 0089 	movw	r0, #2185	; 0x889
 801993a:	f000 ff59 	bl	801a7f0 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 801993e:	e02d      	b.n	801999c <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019940:	f640 0089 	movw	r0, #2185	; 0x889
 8019944:	f000 ff68 	bl	801a818 <SUBGRF_ReadRegister>
 8019948:	4603      	mov	r3, r0
 801994a:	f043 0304 	orr.w	r3, r3, #4
 801994e:	b2db      	uxtb	r3, r3
 8019950:	4619      	mov	r1, r3
 8019952:	f640 0089 	movw	r0, #2185	; 0x889
 8019956:	f000 ff4b 	bl	801a7f0 <SUBGRF_WriteRegister>
        break;
 801995a:	e01f      	b.n	801999c <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801995c:	68bb      	ldr	r3, [r7, #8]
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	2b00      	cmp	r3, #0
 8019962:	d004      	beq.n	801996e <RadioSetTxGenericConfig+0x402>
 8019964:	68bb      	ldr	r3, [r7, #8]
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801996c:	d902      	bls.n	8019974 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801996e:	f04f 33ff 	mov.w	r3, #4294967295
 8019972:	e027      	b.n	80199c4 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8019974:	2003      	movs	r0, #3
 8019976:	f7fe f905 	bl	8017b84 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801997a:	4b14      	ldr	r3, [pc, #80]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 801997c:	2202      	movs	r2, #2
 801997e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8019982:	68bb      	ldr	r3, [r7, #8]
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	4a11      	ldr	r2, [pc, #68]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 8019988:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801998a:	4b10      	ldr	r3, [pc, #64]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 801998c:	2216      	movs	r2, #22
 801998e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019992:	480f      	ldr	r0, [pc, #60]	; (80199d0 <RadioSetTxGenericConfig+0x464>)
 8019994:	f000 fd12 	bl	801a3bc <SUBGRF_SetModulationParams>
        break;
 8019998:	e000      	b.n	801999c <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801999a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801999c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80199a0:	4618      	mov	r0, r3
 80199a2:	f001 f841 	bl	801aa28 <SUBGRF_SetRfTxPower>
 80199a6:	4603      	mov	r3, r0
 80199a8:	461a      	mov	r2, r3
 80199aa:	4b08      	ldr	r3, [pc, #32]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 80199ac:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80199b0:	4b06      	ldr	r3, [pc, #24]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 80199b2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80199b6:	4618      	mov	r0, r3
 80199b8:	f001 fa05 	bl	801adc6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80199bc:	4a03      	ldr	r2, [pc, #12]	; (80199cc <RadioSetTxGenericConfig+0x460>)
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	6053      	str	r3, [r2, #4]
    return 0;
 80199c2:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80199c4:	4618      	mov	r0, r3
 80199c6:	3738      	adds	r7, #56	; 0x38
 80199c8:	46bd      	mov	sp, r7
 80199ca:	bd80      	pop	{r7, pc}
 80199cc:	200021cc 	.word	0x200021cc
 80199d0:	20002204 	.word	0x20002204
 80199d4:	200021da 	.word	0x200021da

080199d8 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80199d8:	b580      	push	{r7, lr}
 80199da:	b084      	sub	sp, #16
 80199dc:	af00      	add	r7, sp, #0
 80199de:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d002      	beq.n	80199ec <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80199e6:	4a1a      	ldr	r2, [pc, #104]	; (8019a50 <SUBGRF_Init+0x78>)
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80199ec:	f7e8 fab6 	bl	8001f5c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80199f0:	2002      	movs	r0, #2
 80199f2:	f001 f8e5 	bl	801abc0 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80199f6:	4b17      	ldr	r3, [pc, #92]	; (8019a54 <SUBGRF_Init+0x7c>)
 80199f8:	2200      	movs	r2, #0
 80199fa:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80199fc:	2000      	movs	r0, #0
 80199fe:	f000 f977 	bl	8019cf0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8019a02:	f7f2 f847 	bl	800ba94 <RBI_IsTCXO>
 8019a06:	4603      	mov	r3, r0
 8019a08:	2b01      	cmp	r3, #1
 8019a0a:	d10e      	bne.n	8019a2a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8019a0c:	2140      	movs	r1, #64	; 0x40
 8019a0e:	2001      	movs	r0, #1
 8019a10:	f000 fb78 	bl	801a104 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8019a14:	2100      	movs	r1, #0
 8019a16:	f640 1011 	movw	r0, #2321	; 0x911
 8019a1a:	f000 fee9 	bl	801a7f0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8019a1e:	237f      	movs	r3, #127	; 0x7f
 8019a20:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8019a22:	7b38      	ldrb	r0, [r7, #12]
 8019a24:	f000 fa85 	bl	8019f32 <SUBGRF_Calibrate>
 8019a28:	e009      	b.n	8019a3e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8019a2a:	2120      	movs	r1, #32
 8019a2c:	f640 1011 	movw	r0, #2321	; 0x911
 8019a30:	f000 fede 	bl	801a7f0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8019a34:	2120      	movs	r1, #32
 8019a36:	f640 1012 	movw	r0, #2322	; 0x912
 8019a3a:	f000 fed9 	bl	801a7f0 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8019a3e:	f7f2 f80d 	bl	800ba5c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8019a42:	4b05      	ldr	r3, [pc, #20]	; (8019a58 <SUBGRF_Init+0x80>)
 8019a44:	2201      	movs	r2, #1
 8019a46:	701a      	strb	r2, [r3, #0]
}
 8019a48:	bf00      	nop
 8019a4a:	3710      	adds	r7, #16
 8019a4c:	46bd      	mov	sp, r7
 8019a4e:	bd80      	pop	{r7, pc}
 8019a50:	20002264 	.word	0x20002264
 8019a54:	20002260 	.word	0x20002260
 8019a58:	20002258 	.word	0x20002258

08019a5c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8019a5c:	b480      	push	{r7}
 8019a5e:	af00      	add	r7, sp, #0
    return OperatingMode;
 8019a60:	4b02      	ldr	r3, [pc, #8]	; (8019a6c <SUBGRF_GetOperatingMode+0x10>)
 8019a62:	781b      	ldrb	r3, [r3, #0]
}
 8019a64:	4618      	mov	r0, r3
 8019a66:	46bd      	mov	sp, r7
 8019a68:	bc80      	pop	{r7}
 8019a6a:	4770      	bx	lr
 8019a6c:	20002258 	.word	0x20002258

08019a70 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8019a70:	b580      	push	{r7, lr}
 8019a72:	b082      	sub	sp, #8
 8019a74:	af00      	add	r7, sp, #0
 8019a76:	6078      	str	r0, [r7, #4]
 8019a78:	460b      	mov	r3, r1
 8019a7a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8019a7c:	78fb      	ldrb	r3, [r7, #3]
 8019a7e:	461a      	mov	r2, r3
 8019a80:	6879      	ldr	r1, [r7, #4]
 8019a82:	2000      	movs	r0, #0
 8019a84:	f000 ff20 	bl	801a8c8 <SUBGRF_WriteBuffer>
}
 8019a88:	bf00      	nop
 8019a8a:	3708      	adds	r7, #8
 8019a8c:	46bd      	mov	sp, r7
 8019a8e:	bd80      	pop	{r7, pc}

08019a90 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8019a90:	b580      	push	{r7, lr}
 8019a92:	b086      	sub	sp, #24
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	60f8      	str	r0, [r7, #12]
 8019a98:	60b9      	str	r1, [r7, #8]
 8019a9a:	4613      	mov	r3, r2
 8019a9c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8019a9e:	2300      	movs	r3, #0
 8019aa0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8019aa2:	f107 0317 	add.w	r3, r7, #23
 8019aa6:	4619      	mov	r1, r3
 8019aa8:	68b8      	ldr	r0, [r7, #8]
 8019aaa:	f000 fe23 	bl	801a6f4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8019aae:	68bb      	ldr	r3, [r7, #8]
 8019ab0:	781b      	ldrb	r3, [r3, #0]
 8019ab2:	79fa      	ldrb	r2, [r7, #7]
 8019ab4:	429a      	cmp	r2, r3
 8019ab6:	d201      	bcs.n	8019abc <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8019ab8:	2301      	movs	r3, #1
 8019aba:	e007      	b.n	8019acc <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8019abc:	7df8      	ldrb	r0, [r7, #23]
 8019abe:	68bb      	ldr	r3, [r7, #8]
 8019ac0:	781b      	ldrb	r3, [r3, #0]
 8019ac2:	461a      	mov	r2, r3
 8019ac4:	68f9      	ldr	r1, [r7, #12]
 8019ac6:	f000 ff21 	bl	801a90c <SUBGRF_ReadBuffer>

    return 0;
 8019aca:	2300      	movs	r3, #0
}
 8019acc:	4618      	mov	r0, r3
 8019ace:	3718      	adds	r7, #24
 8019ad0:	46bd      	mov	sp, r7
 8019ad2:	bd80      	pop	{r7, pc}

08019ad4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8019ad4:	b580      	push	{r7, lr}
 8019ad6:	b084      	sub	sp, #16
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	60f8      	str	r0, [r7, #12]
 8019adc:	460b      	mov	r3, r1
 8019ade:	607a      	str	r2, [r7, #4]
 8019ae0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8019ae2:	7afb      	ldrb	r3, [r7, #11]
 8019ae4:	4619      	mov	r1, r3
 8019ae6:	68f8      	ldr	r0, [r7, #12]
 8019ae8:	f7ff ffc2 	bl	8019a70 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8019aec:	6878      	ldr	r0, [r7, #4]
 8019aee:	f000 f91b 	bl	8019d28 <SUBGRF_SetTx>
}
 8019af2:	bf00      	nop
 8019af4:	3710      	adds	r7, #16
 8019af6:	46bd      	mov	sp, r7
 8019af8:	bd80      	pop	{r7, pc}

08019afa <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8019afa:	b580      	push	{r7, lr}
 8019afc:	b082      	sub	sp, #8
 8019afe:	af00      	add	r7, sp, #0
 8019b00:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8019b02:	2208      	movs	r2, #8
 8019b04:	6879      	ldr	r1, [r7, #4]
 8019b06:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8019b0a:	f000 fe99 	bl	801a840 <SUBGRF_WriteRegisters>
    return 0;
 8019b0e:	2300      	movs	r3, #0
}
 8019b10:	4618      	mov	r0, r3
 8019b12:	3708      	adds	r7, #8
 8019b14:	46bd      	mov	sp, r7
 8019b16:	bd80      	pop	{r7, pc}

08019b18 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8019b18:	b580      	push	{r7, lr}
 8019b1a:	b084      	sub	sp, #16
 8019b1c:	af00      	add	r7, sp, #0
 8019b1e:	4603      	mov	r3, r0
 8019b20:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8019b22:	88fb      	ldrh	r3, [r7, #6]
 8019b24:	0a1b      	lsrs	r3, r3, #8
 8019b26:	b29b      	uxth	r3, r3
 8019b28:	b2db      	uxtb	r3, r3
 8019b2a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8019b2c:	88fb      	ldrh	r3, [r7, #6]
 8019b2e:	b2db      	uxtb	r3, r3
 8019b30:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019b32:	f000 fb6b 	bl	801a20c <SUBGRF_GetPacketType>
 8019b36:	4603      	mov	r3, r0
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d108      	bne.n	8019b4e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8019b3c:	f107 030c 	add.w	r3, r7, #12
 8019b40:	2202      	movs	r2, #2
 8019b42:	4619      	mov	r1, r3
 8019b44:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8019b48:	f000 fe7a 	bl	801a840 <SUBGRF_WriteRegisters>
            break;
 8019b4c:	e000      	b.n	8019b50 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8019b4e:	bf00      	nop
    }
}
 8019b50:	bf00      	nop
 8019b52:	3710      	adds	r7, #16
 8019b54:	46bd      	mov	sp, r7
 8019b56:	bd80      	pop	{r7, pc}

08019b58 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8019b58:	b580      	push	{r7, lr}
 8019b5a:	b084      	sub	sp, #16
 8019b5c:	af00      	add	r7, sp, #0
 8019b5e:	4603      	mov	r3, r0
 8019b60:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8019b62:	88fb      	ldrh	r3, [r7, #6]
 8019b64:	0a1b      	lsrs	r3, r3, #8
 8019b66:	b29b      	uxth	r3, r3
 8019b68:	b2db      	uxtb	r3, r3
 8019b6a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8019b6c:	88fb      	ldrh	r3, [r7, #6]
 8019b6e:	b2db      	uxtb	r3, r3
 8019b70:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019b72:	f000 fb4b 	bl	801a20c <SUBGRF_GetPacketType>
 8019b76:	4603      	mov	r3, r0
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d108      	bne.n	8019b8e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8019b7c:	f107 030c 	add.w	r3, r7, #12
 8019b80:	2202      	movs	r2, #2
 8019b82:	4619      	mov	r1, r3
 8019b84:	f240 60be 	movw	r0, #1726	; 0x6be
 8019b88:	f000 fe5a 	bl	801a840 <SUBGRF_WriteRegisters>
            break;
 8019b8c:	e000      	b.n	8019b90 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8019b8e:	bf00      	nop
    }
}
 8019b90:	bf00      	nop
 8019b92:	3710      	adds	r7, #16
 8019b94:	46bd      	mov	sp, r7
 8019b96:	bd80      	pop	{r7, pc}

08019b98 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	b084      	sub	sp, #16
 8019b9c:	af00      	add	r7, sp, #0
 8019b9e:	4603      	mov	r3, r0
 8019ba0:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8019ba2:	2300      	movs	r3, #0
 8019ba4:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8019ba6:	f000 fb31 	bl	801a20c <SUBGRF_GetPacketType>
 8019baa:	4603      	mov	r3, r0
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d121      	bne.n	8019bf4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8019bb0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8019bb4:	f000 fe30 	bl	801a818 <SUBGRF_ReadRegister>
 8019bb8:	4603      	mov	r3, r0
 8019bba:	f023 0301 	bic.w	r3, r3, #1
 8019bbe:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8019bc0:	88fb      	ldrh	r3, [r7, #6]
 8019bc2:	0a1b      	lsrs	r3, r3, #8
 8019bc4:	b29b      	uxth	r3, r3
 8019bc6:	b25b      	sxtb	r3, r3
 8019bc8:	f003 0301 	and.w	r3, r3, #1
 8019bcc:	b25a      	sxtb	r2, r3
 8019bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019bd2:	4313      	orrs	r3, r2
 8019bd4:	b25b      	sxtb	r3, r3
 8019bd6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8019bd8:	7bfb      	ldrb	r3, [r7, #15]
 8019bda:	4619      	mov	r1, r3
 8019bdc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8019be0:	f000 fe06 	bl	801a7f0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8019be4:	88fb      	ldrh	r3, [r7, #6]
 8019be6:	b2db      	uxtb	r3, r3
 8019be8:	4619      	mov	r1, r3
 8019bea:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8019bee:	f000 fdff 	bl	801a7f0 <SUBGRF_WriteRegister>
            break;
 8019bf2:	e000      	b.n	8019bf6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8019bf4:	bf00      	nop
    }
}
 8019bf6:	bf00      	nop
 8019bf8:	3710      	adds	r7, #16
 8019bfa:	46bd      	mov	sp, r7
 8019bfc:	bd80      	pop	{r7, pc}

08019bfe <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8019bfe:	b580      	push	{r7, lr}
 8019c00:	b082      	sub	sp, #8
 8019c02:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8019c04:	2300      	movs	r3, #0
 8019c06:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8019c08:	2300      	movs	r3, #0
 8019c0a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8019c0c:	2300      	movs	r3, #0
 8019c0e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8019c10:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8019c14:	f000 fe00 	bl	801a818 <SUBGRF_ReadRegister>
 8019c18:	4603      	mov	r3, r0
 8019c1a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8019c1c:	79fb      	ldrb	r3, [r7, #7]
 8019c1e:	f023 0301 	bic.w	r3, r3, #1
 8019c22:	b2db      	uxtb	r3, r3
 8019c24:	4619      	mov	r1, r3
 8019c26:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8019c2a:	f000 fde1 	bl	801a7f0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8019c2e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8019c32:	f000 fdf1 	bl	801a818 <SUBGRF_ReadRegister>
 8019c36:	4603      	mov	r3, r0
 8019c38:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8019c3a:	79bb      	ldrb	r3, [r7, #6]
 8019c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019c40:	b2db      	uxtb	r3, r3
 8019c42:	4619      	mov	r1, r3
 8019c44:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8019c48:	f000 fdd2 	bl	801a7f0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019c4c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019c50:	f000 f88a 	bl	8019d68 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8019c54:	463b      	mov	r3, r7
 8019c56:	2204      	movs	r2, #4
 8019c58:	4619      	mov	r1, r3
 8019c5a:	f640 0019 	movw	r0, #2073	; 0x819
 8019c5e:	f000 fe11 	bl	801a884 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8019c62:	2000      	movs	r0, #0
 8019c64:	f000 f844 	bl	8019cf0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8019c68:	79fb      	ldrb	r3, [r7, #7]
 8019c6a:	4619      	mov	r1, r3
 8019c6c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8019c70:	f000 fdbe 	bl	801a7f0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8019c74:	79bb      	ldrb	r3, [r7, #6]
 8019c76:	4619      	mov	r1, r3
 8019c78:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8019c7c:	f000 fdb8 	bl	801a7f0 <SUBGRF_WriteRegister>

    return number;
 8019c80:	683b      	ldr	r3, [r7, #0]
}
 8019c82:	4618      	mov	r0, r3
 8019c84:	3708      	adds	r7, #8
 8019c86:	46bd      	mov	sp, r7
 8019c88:	bd80      	pop	{r7, pc}
	...

08019c8c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8019c8c:	b580      	push	{r7, lr}
 8019c8e:	b084      	sub	sp, #16
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8019c94:	2000      	movs	r0, #0
 8019c96:	f7f1 fee8 	bl	800ba6a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8019c9a:	2002      	movs	r0, #2
 8019c9c:	f000 ff90 	bl	801abc0 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019ca0:	793b      	ldrb	r3, [r7, #4]
 8019ca2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019ca6:	b2db      	uxtb	r3, r3
 8019ca8:	009b      	lsls	r3, r3, #2
 8019caa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019cac:	793b      	ldrb	r3, [r7, #4]
 8019cae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019cb2:	b2db      	uxtb	r3, r3
 8019cb4:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019cb6:	b25b      	sxtb	r3, r3
 8019cb8:	4313      	orrs	r3, r2
 8019cba:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8019cbc:	793b      	ldrb	r3, [r7, #4]
 8019cbe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019cc2:	b2db      	uxtb	r3, r3
 8019cc4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019cc6:	4313      	orrs	r3, r2
 8019cc8:	b25b      	sxtb	r3, r3
 8019cca:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019ccc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8019cce:	f107 030f 	add.w	r3, r7, #15
 8019cd2:	2201      	movs	r2, #1
 8019cd4:	4619      	mov	r1, r3
 8019cd6:	2084      	movs	r0, #132	; 0x84
 8019cd8:	f000 fe3a 	bl	801a950 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8019cdc:	4b03      	ldr	r3, [pc, #12]	; (8019cec <SUBGRF_SetSleep+0x60>)
 8019cde:	2200      	movs	r2, #0
 8019ce0:	701a      	strb	r2, [r3, #0]
}
 8019ce2:	bf00      	nop
 8019ce4:	3710      	adds	r7, #16
 8019ce6:	46bd      	mov	sp, r7
 8019ce8:	bd80      	pop	{r7, pc}
 8019cea:	bf00      	nop
 8019cec:	20002258 	.word	0x20002258

08019cf0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8019cf0:	b580      	push	{r7, lr}
 8019cf2:	b082      	sub	sp, #8
 8019cf4:	af00      	add	r7, sp, #0
 8019cf6:	4603      	mov	r3, r0
 8019cf8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8019cfa:	1dfb      	adds	r3, r7, #7
 8019cfc:	2201      	movs	r2, #1
 8019cfe:	4619      	mov	r1, r3
 8019d00:	2080      	movs	r0, #128	; 0x80
 8019d02:	f000 fe25 	bl	801a950 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8019d06:	79fb      	ldrb	r3, [r7, #7]
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d103      	bne.n	8019d14 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8019d0c:	4b05      	ldr	r3, [pc, #20]	; (8019d24 <SUBGRF_SetStandby+0x34>)
 8019d0e:	2201      	movs	r2, #1
 8019d10:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8019d12:	e002      	b.n	8019d1a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8019d14:	4b03      	ldr	r3, [pc, #12]	; (8019d24 <SUBGRF_SetStandby+0x34>)
 8019d16:	2202      	movs	r2, #2
 8019d18:	701a      	strb	r2, [r3, #0]
}
 8019d1a:	bf00      	nop
 8019d1c:	3708      	adds	r7, #8
 8019d1e:	46bd      	mov	sp, r7
 8019d20:	bd80      	pop	{r7, pc}
 8019d22:	bf00      	nop
 8019d24:	20002258 	.word	0x20002258

08019d28 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8019d28:	b580      	push	{r7, lr}
 8019d2a:	b084      	sub	sp, #16
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8019d30:	4b0c      	ldr	r3, [pc, #48]	; (8019d64 <SUBGRF_SetTx+0x3c>)
 8019d32:	2204      	movs	r2, #4
 8019d34:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	0c1b      	lsrs	r3, r3, #16
 8019d3a:	b2db      	uxtb	r3, r3
 8019d3c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	0a1b      	lsrs	r3, r3, #8
 8019d42:	b2db      	uxtb	r3, r3
 8019d44:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	b2db      	uxtb	r3, r3
 8019d4a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8019d4c:	f107 030c 	add.w	r3, r7, #12
 8019d50:	2203      	movs	r2, #3
 8019d52:	4619      	mov	r1, r3
 8019d54:	2083      	movs	r0, #131	; 0x83
 8019d56:	f000 fdfb 	bl	801a950 <SUBGRF_WriteCommand>
}
 8019d5a:	bf00      	nop
 8019d5c:	3710      	adds	r7, #16
 8019d5e:	46bd      	mov	sp, r7
 8019d60:	bd80      	pop	{r7, pc}
 8019d62:	bf00      	nop
 8019d64:	20002258 	.word	0x20002258

08019d68 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8019d68:	b580      	push	{r7, lr}
 8019d6a:	b084      	sub	sp, #16
 8019d6c:	af00      	add	r7, sp, #0
 8019d6e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019d70:	4b0c      	ldr	r3, [pc, #48]	; (8019da4 <SUBGRF_SetRx+0x3c>)
 8019d72:	2205      	movs	r2, #5
 8019d74:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	0c1b      	lsrs	r3, r3, #16
 8019d7a:	b2db      	uxtb	r3, r3
 8019d7c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	0a1b      	lsrs	r3, r3, #8
 8019d82:	b2db      	uxtb	r3, r3
 8019d84:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	b2db      	uxtb	r3, r3
 8019d8a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019d8c:	f107 030c 	add.w	r3, r7, #12
 8019d90:	2203      	movs	r2, #3
 8019d92:	4619      	mov	r1, r3
 8019d94:	2082      	movs	r0, #130	; 0x82
 8019d96:	f000 fddb 	bl	801a950 <SUBGRF_WriteCommand>
}
 8019d9a:	bf00      	nop
 8019d9c:	3710      	adds	r7, #16
 8019d9e:	46bd      	mov	sp, r7
 8019da0:	bd80      	pop	{r7, pc}
 8019da2:	bf00      	nop
 8019da4:	20002258 	.word	0x20002258

08019da8 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8019da8:	b580      	push	{r7, lr}
 8019daa:	b084      	sub	sp, #16
 8019dac:	af00      	add	r7, sp, #0
 8019dae:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019db0:	4b0e      	ldr	r3, [pc, #56]	; (8019dec <SUBGRF_SetRxBoosted+0x44>)
 8019db2:	2205      	movs	r2, #5
 8019db4:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8019db6:	2197      	movs	r1, #151	; 0x97
 8019db8:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8019dbc:	f000 fd18 	bl	801a7f0 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	0c1b      	lsrs	r3, r3, #16
 8019dc4:	b2db      	uxtb	r3, r3
 8019dc6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	0a1b      	lsrs	r3, r3, #8
 8019dcc:	b2db      	uxtb	r3, r3
 8019dce:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	b2db      	uxtb	r3, r3
 8019dd4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019dd6:	f107 030c 	add.w	r3, r7, #12
 8019dda:	2203      	movs	r2, #3
 8019ddc:	4619      	mov	r1, r3
 8019dde:	2082      	movs	r0, #130	; 0x82
 8019de0:	f000 fdb6 	bl	801a950 <SUBGRF_WriteCommand>
}
 8019de4:	bf00      	nop
 8019de6:	3710      	adds	r7, #16
 8019de8:	46bd      	mov	sp, r7
 8019dea:	bd80      	pop	{r7, pc}
 8019dec:	20002258 	.word	0x20002258

08019df0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019df0:	b580      	push	{r7, lr}
 8019df2:	b084      	sub	sp, #16
 8019df4:	af00      	add	r7, sp, #0
 8019df6:	6078      	str	r0, [r7, #4]
 8019df8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	0c1b      	lsrs	r3, r3, #16
 8019dfe:	b2db      	uxtb	r3, r3
 8019e00:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	0a1b      	lsrs	r3, r3, #8
 8019e06:	b2db      	uxtb	r3, r3
 8019e08:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	b2db      	uxtb	r3, r3
 8019e0e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8019e10:	683b      	ldr	r3, [r7, #0]
 8019e12:	0c1b      	lsrs	r3, r3, #16
 8019e14:	b2db      	uxtb	r3, r3
 8019e16:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8019e18:	683b      	ldr	r3, [r7, #0]
 8019e1a:	0a1b      	lsrs	r3, r3, #8
 8019e1c:	b2db      	uxtb	r3, r3
 8019e1e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8019e20:	683b      	ldr	r3, [r7, #0]
 8019e22:	b2db      	uxtb	r3, r3
 8019e24:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8019e26:	f107 0308 	add.w	r3, r7, #8
 8019e2a:	2206      	movs	r2, #6
 8019e2c:	4619      	mov	r1, r3
 8019e2e:	2094      	movs	r0, #148	; 0x94
 8019e30:	f000 fd8e 	bl	801a950 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8019e34:	4b03      	ldr	r3, [pc, #12]	; (8019e44 <SUBGRF_SetRxDutyCycle+0x54>)
 8019e36:	2206      	movs	r2, #6
 8019e38:	701a      	strb	r2, [r3, #0]
}
 8019e3a:	bf00      	nop
 8019e3c:	3710      	adds	r7, #16
 8019e3e:	46bd      	mov	sp, r7
 8019e40:	bd80      	pop	{r7, pc}
 8019e42:	bf00      	nop
 8019e44:	20002258 	.word	0x20002258

08019e48 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8019e48:	b580      	push	{r7, lr}
 8019e4a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8019e4c:	2200      	movs	r2, #0
 8019e4e:	2100      	movs	r1, #0
 8019e50:	20c5      	movs	r0, #197	; 0xc5
 8019e52:	f000 fd7d 	bl	801a950 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8019e56:	4b02      	ldr	r3, [pc, #8]	; (8019e60 <SUBGRF_SetCad+0x18>)
 8019e58:	2207      	movs	r2, #7
 8019e5a:	701a      	strb	r2, [r3, #0]
}
 8019e5c:	bf00      	nop
 8019e5e:	bd80      	pop	{r7, pc}
 8019e60:	20002258 	.word	0x20002258

08019e64 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8019e64:	b580      	push	{r7, lr}
 8019e66:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8019e68:	2200      	movs	r2, #0
 8019e6a:	2100      	movs	r1, #0
 8019e6c:	20d1      	movs	r0, #209	; 0xd1
 8019e6e:	f000 fd6f 	bl	801a950 <SUBGRF_WriteCommand>
}
 8019e72:	bf00      	nop
 8019e74:	bd80      	pop	{r7, pc}

08019e76 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8019e76:	b580      	push	{r7, lr}
 8019e78:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8019e7a:	2200      	movs	r2, #0
 8019e7c:	2100      	movs	r1, #0
 8019e7e:	20d2      	movs	r0, #210	; 0xd2
 8019e80:	f000 fd66 	bl	801a950 <SUBGRF_WriteCommand>
}
 8019e84:	bf00      	nop
 8019e86:	bd80      	pop	{r7, pc}

08019e88 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8019e88:	b580      	push	{r7, lr}
 8019e8a:	b082      	sub	sp, #8
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	4603      	mov	r3, r0
 8019e90:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8019e92:	1dfb      	adds	r3, r7, #7
 8019e94:	2201      	movs	r2, #1
 8019e96:	4619      	mov	r1, r3
 8019e98:	209f      	movs	r0, #159	; 0x9f
 8019e9a:	f000 fd59 	bl	801a950 <SUBGRF_WriteCommand>
}
 8019e9e:	bf00      	nop
 8019ea0:	3708      	adds	r7, #8
 8019ea2:	46bd      	mov	sp, r7
 8019ea4:	bd80      	pop	{r7, pc}

08019ea6 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8019ea6:	b580      	push	{r7, lr}
 8019ea8:	b084      	sub	sp, #16
 8019eaa:	af00      	add	r7, sp, #0
 8019eac:	4603      	mov	r3, r0
 8019eae:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8019eb0:	1dfb      	adds	r3, r7, #7
 8019eb2:	2201      	movs	r2, #1
 8019eb4:	4619      	mov	r1, r3
 8019eb6:	20a0      	movs	r0, #160	; 0xa0
 8019eb8:	f000 fd4a 	bl	801a950 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8019ebc:	79fb      	ldrb	r3, [r7, #7]
 8019ebe:	2b3f      	cmp	r3, #63	; 0x3f
 8019ec0:	d91c      	bls.n	8019efc <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8019ec2:	79fb      	ldrb	r3, [r7, #7]
 8019ec4:	085b      	lsrs	r3, r3, #1
 8019ec6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8019ec8:	2300      	movs	r3, #0
 8019eca:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8019ecc:	2300      	movs	r3, #0
 8019ece:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8019ed0:	e005      	b.n	8019ede <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8019ed2:	7bfb      	ldrb	r3, [r7, #15]
 8019ed4:	089b      	lsrs	r3, r3, #2
 8019ed6:	73fb      	strb	r3, [r7, #15]
            exp++;
 8019ed8:	7bbb      	ldrb	r3, [r7, #14]
 8019eda:	3301      	adds	r3, #1
 8019edc:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8019ede:	7bfb      	ldrb	r3, [r7, #15]
 8019ee0:	2b1f      	cmp	r3, #31
 8019ee2:	d8f6      	bhi.n	8019ed2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8019ee4:	7bfb      	ldrb	r3, [r7, #15]
 8019ee6:	00db      	lsls	r3, r3, #3
 8019ee8:	b2da      	uxtb	r2, r3
 8019eea:	7bbb      	ldrb	r3, [r7, #14]
 8019eec:	4413      	add	r3, r2
 8019eee:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8019ef0:	7b7b      	ldrb	r3, [r7, #13]
 8019ef2:	4619      	mov	r1, r3
 8019ef4:	f240 7006 	movw	r0, #1798	; 0x706
 8019ef8:	f000 fc7a 	bl	801a7f0 <SUBGRF_WriteRegister>
    }
}
 8019efc:	bf00      	nop
 8019efe:	3710      	adds	r7, #16
 8019f00:	46bd      	mov	sp, r7
 8019f02:	bd80      	pop	{r7, pc}

08019f04 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8019f04:	b580      	push	{r7, lr}
 8019f06:	b082      	sub	sp, #8
 8019f08:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8019f0a:	f7f1 fdca 	bl	800baa2 <RBI_IsDCDC>
 8019f0e:	4603      	mov	r3, r0
 8019f10:	2b01      	cmp	r3, #1
 8019f12:	d102      	bne.n	8019f1a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8019f14:	2301      	movs	r3, #1
 8019f16:	71fb      	strb	r3, [r7, #7]
 8019f18:	e001      	b.n	8019f1e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8019f1a:	2300      	movs	r3, #0
 8019f1c:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8019f1e:	1dfb      	adds	r3, r7, #7
 8019f20:	2201      	movs	r2, #1
 8019f22:	4619      	mov	r1, r3
 8019f24:	2096      	movs	r0, #150	; 0x96
 8019f26:	f000 fd13 	bl	801a950 <SUBGRF_WriteCommand>
}
 8019f2a:	bf00      	nop
 8019f2c:	3708      	adds	r7, #8
 8019f2e:	46bd      	mov	sp, r7
 8019f30:	bd80      	pop	{r7, pc}

08019f32 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8019f32:	b580      	push	{r7, lr}
 8019f34:	b084      	sub	sp, #16
 8019f36:	af00      	add	r7, sp, #0
 8019f38:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019f3a:	793b      	ldrb	r3, [r7, #4]
 8019f3c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8019f40:	b2db      	uxtb	r3, r3
 8019f42:	019b      	lsls	r3, r3, #6
 8019f44:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019f46:	793b      	ldrb	r3, [r7, #4]
 8019f48:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8019f4c:	b2db      	uxtb	r3, r3
 8019f4e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019f50:	b25b      	sxtb	r3, r3
 8019f52:	4313      	orrs	r3, r2
 8019f54:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019f56:	793b      	ldrb	r3, [r7, #4]
 8019f58:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8019f5c:	b2db      	uxtb	r3, r3
 8019f5e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019f60:	b25b      	sxtb	r3, r3
 8019f62:	4313      	orrs	r3, r2
 8019f64:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019f66:	793b      	ldrb	r3, [r7, #4]
 8019f68:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019f6c:	b2db      	uxtb	r3, r3
 8019f6e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019f70:	b25b      	sxtb	r3, r3
 8019f72:	4313      	orrs	r3, r2
 8019f74:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019f76:	793b      	ldrb	r3, [r7, #4]
 8019f78:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019f7c:	b2db      	uxtb	r3, r3
 8019f7e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019f80:	b25b      	sxtb	r3, r3
 8019f82:	4313      	orrs	r3, r2
 8019f84:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019f86:	793b      	ldrb	r3, [r7, #4]
 8019f88:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019f8c:	b2db      	uxtb	r3, r3
 8019f8e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019f90:	b25b      	sxtb	r3, r3
 8019f92:	4313      	orrs	r3, r2
 8019f94:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8019f96:	793b      	ldrb	r3, [r7, #4]
 8019f98:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019f9c:	b2db      	uxtb	r3, r3
 8019f9e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019fa0:	4313      	orrs	r3, r2
 8019fa2:	b25b      	sxtb	r3, r3
 8019fa4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019fa6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8019fa8:	f107 030f 	add.w	r3, r7, #15
 8019fac:	2201      	movs	r2, #1
 8019fae:	4619      	mov	r1, r3
 8019fb0:	2089      	movs	r0, #137	; 0x89
 8019fb2:	f000 fccd 	bl	801a950 <SUBGRF_WriteCommand>
}
 8019fb6:	bf00      	nop
 8019fb8:	3710      	adds	r7, #16
 8019fba:	46bd      	mov	sp, r7
 8019fbc:	bd80      	pop	{r7, pc}
	...

08019fc0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8019fc0:	b580      	push	{r7, lr}
 8019fc2:	b084      	sub	sp, #16
 8019fc4:	af00      	add	r7, sp, #0
 8019fc6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	4a1b      	ldr	r2, [pc, #108]	; (801a038 <SUBGRF_CalibrateImage+0x78>)
 8019fcc:	4293      	cmp	r3, r2
 8019fce:	d904      	bls.n	8019fda <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8019fd0:	23e1      	movs	r3, #225	; 0xe1
 8019fd2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8019fd4:	23e9      	movs	r3, #233	; 0xe9
 8019fd6:	737b      	strb	r3, [r7, #13]
 8019fd8:	e022      	b.n	801a020 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	4a17      	ldr	r2, [pc, #92]	; (801a03c <SUBGRF_CalibrateImage+0x7c>)
 8019fde:	4293      	cmp	r3, r2
 8019fe0:	d904      	bls.n	8019fec <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8019fe2:	23d7      	movs	r3, #215	; 0xd7
 8019fe4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8019fe6:	23db      	movs	r3, #219	; 0xdb
 8019fe8:	737b      	strb	r3, [r7, #13]
 8019fea:	e019      	b.n	801a020 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	4a14      	ldr	r2, [pc, #80]	; (801a040 <SUBGRF_CalibrateImage+0x80>)
 8019ff0:	4293      	cmp	r3, r2
 8019ff2:	d904      	bls.n	8019ffe <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8019ff4:	23c1      	movs	r3, #193	; 0xc1
 8019ff6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8019ff8:	23c5      	movs	r3, #197	; 0xc5
 8019ffa:	737b      	strb	r3, [r7, #13]
 8019ffc:	e010      	b.n	801a020 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	4a10      	ldr	r2, [pc, #64]	; (801a044 <SUBGRF_CalibrateImage+0x84>)
 801a002:	4293      	cmp	r3, r2
 801a004:	d904      	bls.n	801a010 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801a006:	2375      	movs	r3, #117	; 0x75
 801a008:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801a00a:	2381      	movs	r3, #129	; 0x81
 801a00c:	737b      	strb	r3, [r7, #13]
 801a00e:	e007      	b.n	801a020 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	4a0d      	ldr	r2, [pc, #52]	; (801a048 <SUBGRF_CalibrateImage+0x88>)
 801a014:	4293      	cmp	r3, r2
 801a016:	d903      	bls.n	801a020 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801a018:	236b      	movs	r3, #107	; 0x6b
 801a01a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801a01c:	236f      	movs	r3, #111	; 0x6f
 801a01e:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801a020:	f107 030c 	add.w	r3, r7, #12
 801a024:	2202      	movs	r2, #2
 801a026:	4619      	mov	r1, r3
 801a028:	2098      	movs	r0, #152	; 0x98
 801a02a:	f000 fc91 	bl	801a950 <SUBGRF_WriteCommand>
}
 801a02e:	bf00      	nop
 801a030:	3710      	adds	r7, #16
 801a032:	46bd      	mov	sp, r7
 801a034:	bd80      	pop	{r7, pc}
 801a036:	bf00      	nop
 801a038:	35a4e900 	.word	0x35a4e900
 801a03c:	32a9f880 	.word	0x32a9f880
 801a040:	2de54480 	.word	0x2de54480
 801a044:	1b6b0b00 	.word	0x1b6b0b00
 801a048:	1954fc40 	.word	0x1954fc40

0801a04c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801a04c:	b590      	push	{r4, r7, lr}
 801a04e:	b085      	sub	sp, #20
 801a050:	af00      	add	r7, sp, #0
 801a052:	4604      	mov	r4, r0
 801a054:	4608      	mov	r0, r1
 801a056:	4611      	mov	r1, r2
 801a058:	461a      	mov	r2, r3
 801a05a:	4623      	mov	r3, r4
 801a05c:	71fb      	strb	r3, [r7, #7]
 801a05e:	4603      	mov	r3, r0
 801a060:	71bb      	strb	r3, [r7, #6]
 801a062:	460b      	mov	r3, r1
 801a064:	717b      	strb	r3, [r7, #5]
 801a066:	4613      	mov	r3, r2
 801a068:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801a06a:	79fb      	ldrb	r3, [r7, #7]
 801a06c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801a06e:	79bb      	ldrb	r3, [r7, #6]
 801a070:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801a072:	797b      	ldrb	r3, [r7, #5]
 801a074:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801a076:	793b      	ldrb	r3, [r7, #4]
 801a078:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801a07a:	f107 030c 	add.w	r3, r7, #12
 801a07e:	2204      	movs	r2, #4
 801a080:	4619      	mov	r1, r3
 801a082:	2095      	movs	r0, #149	; 0x95
 801a084:	f000 fc64 	bl	801a950 <SUBGRF_WriteCommand>
}
 801a088:	bf00      	nop
 801a08a:	3714      	adds	r7, #20
 801a08c:	46bd      	mov	sp, r7
 801a08e:	bd90      	pop	{r4, r7, pc}

0801a090 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801a090:	b590      	push	{r4, r7, lr}
 801a092:	b085      	sub	sp, #20
 801a094:	af00      	add	r7, sp, #0
 801a096:	4604      	mov	r4, r0
 801a098:	4608      	mov	r0, r1
 801a09a:	4611      	mov	r1, r2
 801a09c:	461a      	mov	r2, r3
 801a09e:	4623      	mov	r3, r4
 801a0a0:	80fb      	strh	r3, [r7, #6]
 801a0a2:	4603      	mov	r3, r0
 801a0a4:	80bb      	strh	r3, [r7, #4]
 801a0a6:	460b      	mov	r3, r1
 801a0a8:	807b      	strh	r3, [r7, #2]
 801a0aa:	4613      	mov	r3, r2
 801a0ac:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801a0ae:	88fb      	ldrh	r3, [r7, #6]
 801a0b0:	0a1b      	lsrs	r3, r3, #8
 801a0b2:	b29b      	uxth	r3, r3
 801a0b4:	b2db      	uxtb	r3, r3
 801a0b6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801a0b8:	88fb      	ldrh	r3, [r7, #6]
 801a0ba:	b2db      	uxtb	r3, r3
 801a0bc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801a0be:	88bb      	ldrh	r3, [r7, #4]
 801a0c0:	0a1b      	lsrs	r3, r3, #8
 801a0c2:	b29b      	uxth	r3, r3
 801a0c4:	b2db      	uxtb	r3, r3
 801a0c6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801a0c8:	88bb      	ldrh	r3, [r7, #4]
 801a0ca:	b2db      	uxtb	r3, r3
 801a0cc:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801a0ce:	887b      	ldrh	r3, [r7, #2]
 801a0d0:	0a1b      	lsrs	r3, r3, #8
 801a0d2:	b29b      	uxth	r3, r3
 801a0d4:	b2db      	uxtb	r3, r3
 801a0d6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801a0d8:	887b      	ldrh	r3, [r7, #2]
 801a0da:	b2db      	uxtb	r3, r3
 801a0dc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801a0de:	883b      	ldrh	r3, [r7, #0]
 801a0e0:	0a1b      	lsrs	r3, r3, #8
 801a0e2:	b29b      	uxth	r3, r3
 801a0e4:	b2db      	uxtb	r3, r3
 801a0e6:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801a0e8:	883b      	ldrh	r3, [r7, #0]
 801a0ea:	b2db      	uxtb	r3, r3
 801a0ec:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801a0ee:	f107 0308 	add.w	r3, r7, #8
 801a0f2:	2208      	movs	r2, #8
 801a0f4:	4619      	mov	r1, r3
 801a0f6:	2008      	movs	r0, #8
 801a0f8:	f000 fc2a 	bl	801a950 <SUBGRF_WriteCommand>
}
 801a0fc:	bf00      	nop
 801a0fe:	3714      	adds	r7, #20
 801a100:	46bd      	mov	sp, r7
 801a102:	bd90      	pop	{r4, r7, pc}

0801a104 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801a104:	b580      	push	{r7, lr}
 801a106:	b084      	sub	sp, #16
 801a108:	af00      	add	r7, sp, #0
 801a10a:	4603      	mov	r3, r0
 801a10c:	6039      	str	r1, [r7, #0]
 801a10e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801a110:	79fb      	ldrb	r3, [r7, #7]
 801a112:	f003 0307 	and.w	r3, r3, #7
 801a116:	b2db      	uxtb	r3, r3
 801a118:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a11a:	683b      	ldr	r3, [r7, #0]
 801a11c:	0c1b      	lsrs	r3, r3, #16
 801a11e:	b2db      	uxtb	r3, r3
 801a120:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a122:	683b      	ldr	r3, [r7, #0]
 801a124:	0a1b      	lsrs	r3, r3, #8
 801a126:	b2db      	uxtb	r3, r3
 801a128:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801a12a:	683b      	ldr	r3, [r7, #0]
 801a12c:	b2db      	uxtb	r3, r3
 801a12e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801a130:	f107 030c 	add.w	r3, r7, #12
 801a134:	2204      	movs	r2, #4
 801a136:	4619      	mov	r1, r3
 801a138:	2097      	movs	r0, #151	; 0x97
 801a13a:	f000 fc09 	bl	801a950 <SUBGRF_WriteCommand>
}
 801a13e:	bf00      	nop
 801a140:	3710      	adds	r7, #16
 801a142:	46bd      	mov	sp, r7
 801a144:	bd80      	pop	{r7, pc}
	...

0801a148 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801a148:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a14c:	b084      	sub	sp, #16
 801a14e:	af00      	add	r7, sp, #0
 801a150:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801a152:	2300      	movs	r3, #0
 801a154:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801a156:	4b1d      	ldr	r3, [pc, #116]	; (801a1cc <SUBGRF_SetRfFrequency+0x84>)
 801a158:	781b      	ldrb	r3, [r3, #0]
 801a15a:	f083 0301 	eor.w	r3, r3, #1
 801a15e:	b2db      	uxtb	r3, r3
 801a160:	2b00      	cmp	r3, #0
 801a162:	d005      	beq.n	801a170 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801a164:	6878      	ldr	r0, [r7, #4]
 801a166:	f7ff ff2b 	bl	8019fc0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801a16a:	4b18      	ldr	r3, [pc, #96]	; (801a1cc <SUBGRF_SetRfFrequency+0x84>)
 801a16c:	2201      	movs	r2, #1
 801a16e:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	2200      	movs	r2, #0
 801a174:	461c      	mov	r4, r3
 801a176:	4615      	mov	r5, r2
 801a178:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a17c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a180:	4a13      	ldr	r2, [pc, #76]	; (801a1d0 <SUBGRF_SetRfFrequency+0x88>)
 801a182:	f04f 0300 	mov.w	r3, #0
 801a186:	4640      	mov	r0, r8
 801a188:	4649      	mov	r1, r9
 801a18a:	f7e6 fdff 	bl	8000d8c <__aeabi_uldivmod>
 801a18e:	4602      	mov	r2, r0
 801a190:	460b      	mov	r3, r1
 801a192:	4613      	mov	r3, r2
 801a194:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	0e1b      	lsrs	r3, r3, #24
 801a19a:	b2db      	uxtb	r3, r3
 801a19c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	0c1b      	lsrs	r3, r3, #16
 801a1a2:	b2db      	uxtb	r3, r3
 801a1a4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801a1a6:	68fb      	ldr	r3, [r7, #12]
 801a1a8:	0a1b      	lsrs	r3, r3, #8
 801a1aa:	b2db      	uxtb	r3, r3
 801a1ac:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	b2db      	uxtb	r3, r3
 801a1b2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801a1b4:	f107 0308 	add.w	r3, r7, #8
 801a1b8:	2204      	movs	r2, #4
 801a1ba:	4619      	mov	r1, r3
 801a1bc:	2086      	movs	r0, #134	; 0x86
 801a1be:	f000 fbc7 	bl	801a950 <SUBGRF_WriteCommand>
}
 801a1c2:	bf00      	nop
 801a1c4:	3710      	adds	r7, #16
 801a1c6:	46bd      	mov	sp, r7
 801a1c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a1cc:	20002260 	.word	0x20002260
 801a1d0:	01e84800 	.word	0x01e84800

0801a1d4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801a1d4:	b580      	push	{r7, lr}
 801a1d6:	b082      	sub	sp, #8
 801a1d8:	af00      	add	r7, sp, #0
 801a1da:	4603      	mov	r3, r0
 801a1dc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801a1de:	79fa      	ldrb	r2, [r7, #7]
 801a1e0:	4b09      	ldr	r3, [pc, #36]	; (801a208 <SUBGRF_SetPacketType+0x34>)
 801a1e2:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801a1e4:	79fb      	ldrb	r3, [r7, #7]
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d104      	bne.n	801a1f4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801a1ea:	2100      	movs	r1, #0
 801a1ec:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a1f0:	f000 fafe 	bl	801a7f0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801a1f4:	1dfb      	adds	r3, r7, #7
 801a1f6:	2201      	movs	r2, #1
 801a1f8:	4619      	mov	r1, r3
 801a1fa:	208a      	movs	r0, #138	; 0x8a
 801a1fc:	f000 fba8 	bl	801a950 <SUBGRF_WriteCommand>
}
 801a200:	bf00      	nop
 801a202:	3708      	adds	r7, #8
 801a204:	46bd      	mov	sp, r7
 801a206:	bd80      	pop	{r7, pc}
 801a208:	20002259 	.word	0x20002259

0801a20c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801a20c:	b480      	push	{r7}
 801a20e:	af00      	add	r7, sp, #0
    return PacketType;
 801a210:	4b02      	ldr	r3, [pc, #8]	; (801a21c <SUBGRF_GetPacketType+0x10>)
 801a212:	781b      	ldrb	r3, [r3, #0]
}
 801a214:	4618      	mov	r0, r3
 801a216:	46bd      	mov	sp, r7
 801a218:	bc80      	pop	{r7}
 801a21a:	4770      	bx	lr
 801a21c:	20002259 	.word	0x20002259

0801a220 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801a220:	b580      	push	{r7, lr}
 801a222:	b084      	sub	sp, #16
 801a224:	af00      	add	r7, sp, #0
 801a226:	4603      	mov	r3, r0
 801a228:	71fb      	strb	r3, [r7, #7]
 801a22a:	460b      	mov	r3, r1
 801a22c:	71bb      	strb	r3, [r7, #6]
 801a22e:	4613      	mov	r3, r2
 801a230:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801a232:	79fb      	ldrb	r3, [r7, #7]
 801a234:	2b01      	cmp	r3, #1
 801a236:	d149      	bne.n	801a2cc <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801a238:	2000      	movs	r0, #0
 801a23a:	f7f1 fc39 	bl	800bab0 <RBI_GetRFOMaxPowerConfig>
 801a23e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801a240:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a244:	68fa      	ldr	r2, [r7, #12]
 801a246:	429a      	cmp	r2, r3
 801a248:	da01      	bge.n	801a24e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801a24a:	68fb      	ldr	r3, [r7, #12]
 801a24c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	2b0e      	cmp	r3, #14
 801a252:	d10e      	bne.n	801a272 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801a254:	2301      	movs	r3, #1
 801a256:	2201      	movs	r2, #1
 801a258:	2100      	movs	r1, #0
 801a25a:	2004      	movs	r0, #4
 801a25c:	f7ff fef6 	bl	801a04c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a260:	79ba      	ldrb	r2, [r7, #6]
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	b2db      	uxtb	r3, r3
 801a266:	1ad3      	subs	r3, r2, r3
 801a268:	b2db      	uxtb	r3, r3
 801a26a:	330e      	adds	r3, #14
 801a26c:	b2db      	uxtb	r3, r3
 801a26e:	71bb      	strb	r3, [r7, #6]
 801a270:	e01f      	b.n	801a2b2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801a272:	68fb      	ldr	r3, [r7, #12]
 801a274:	2b0a      	cmp	r3, #10
 801a276:	d10e      	bne.n	801a296 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801a278:	2301      	movs	r3, #1
 801a27a:	2201      	movs	r2, #1
 801a27c:	2100      	movs	r1, #0
 801a27e:	2001      	movs	r0, #1
 801a280:	f7ff fee4 	bl	801a04c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801a284:	79ba      	ldrb	r2, [r7, #6]
 801a286:	68fb      	ldr	r3, [r7, #12]
 801a288:	b2db      	uxtb	r3, r3
 801a28a:	1ad3      	subs	r3, r2, r3
 801a28c:	b2db      	uxtb	r3, r3
 801a28e:	330d      	adds	r3, #13
 801a290:	b2db      	uxtb	r3, r3
 801a292:	71bb      	strb	r3, [r7, #6]
 801a294:	e00d      	b.n	801a2b2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801a296:	2301      	movs	r3, #1
 801a298:	2201      	movs	r2, #1
 801a29a:	2100      	movs	r1, #0
 801a29c:	2006      	movs	r0, #6
 801a29e:	f7ff fed5 	bl	801a04c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a2a2:	79ba      	ldrb	r2, [r7, #6]
 801a2a4:	68fb      	ldr	r3, [r7, #12]
 801a2a6:	b2db      	uxtb	r3, r3
 801a2a8:	1ad3      	subs	r3, r2, r3
 801a2aa:	b2db      	uxtb	r3, r3
 801a2ac:	330e      	adds	r3, #14
 801a2ae:	b2db      	uxtb	r3, r3
 801a2b0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801a2b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a2b6:	f113 0f11 	cmn.w	r3, #17
 801a2ba:	da01      	bge.n	801a2c0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801a2bc:	23ef      	movs	r3, #239	; 0xef
 801a2be:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801a2c0:	2118      	movs	r1, #24
 801a2c2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801a2c6:	f000 fa93 	bl	801a7f0 <SUBGRF_WriteRegister>
 801a2ca:	e067      	b.n	801a39c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801a2cc:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801a2d0:	f000 faa2 	bl	801a818 <SUBGRF_ReadRegister>
 801a2d4:	4603      	mov	r3, r0
 801a2d6:	f043 031e 	orr.w	r3, r3, #30
 801a2da:	b2db      	uxtb	r3, r3
 801a2dc:	4619      	mov	r1, r3
 801a2de:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801a2e2:	f000 fa85 	bl	801a7f0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801a2e6:	2001      	movs	r0, #1
 801a2e8:	f7f1 fbe2 	bl	800bab0 <RBI_GetRFOMaxPowerConfig>
 801a2ec:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801a2ee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a2f2:	68fa      	ldr	r2, [r7, #12]
 801a2f4:	429a      	cmp	r2, r3
 801a2f6:	da01      	bge.n	801a2fc <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801a2fc:	68fb      	ldr	r3, [r7, #12]
 801a2fe:	2b14      	cmp	r3, #20
 801a300:	d10e      	bne.n	801a320 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801a302:	2301      	movs	r3, #1
 801a304:	2200      	movs	r2, #0
 801a306:	2105      	movs	r1, #5
 801a308:	2003      	movs	r0, #3
 801a30a:	f7ff fe9f 	bl	801a04c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a30e:	79ba      	ldrb	r2, [r7, #6]
 801a310:	68fb      	ldr	r3, [r7, #12]
 801a312:	b2db      	uxtb	r3, r3
 801a314:	1ad3      	subs	r3, r2, r3
 801a316:	b2db      	uxtb	r3, r3
 801a318:	3316      	adds	r3, #22
 801a31a:	b2db      	uxtb	r3, r3
 801a31c:	71bb      	strb	r3, [r7, #6]
 801a31e:	e031      	b.n	801a384 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801a320:	68fb      	ldr	r3, [r7, #12]
 801a322:	2b11      	cmp	r3, #17
 801a324:	d10e      	bne.n	801a344 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801a326:	2301      	movs	r3, #1
 801a328:	2200      	movs	r2, #0
 801a32a:	2103      	movs	r1, #3
 801a32c:	2002      	movs	r0, #2
 801a32e:	f7ff fe8d 	bl	801a04c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a332:	79ba      	ldrb	r2, [r7, #6]
 801a334:	68fb      	ldr	r3, [r7, #12]
 801a336:	b2db      	uxtb	r3, r3
 801a338:	1ad3      	subs	r3, r2, r3
 801a33a:	b2db      	uxtb	r3, r3
 801a33c:	3316      	adds	r3, #22
 801a33e:	b2db      	uxtb	r3, r3
 801a340:	71bb      	strb	r3, [r7, #6]
 801a342:	e01f      	b.n	801a384 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801a344:	68fb      	ldr	r3, [r7, #12]
 801a346:	2b0e      	cmp	r3, #14
 801a348:	d10e      	bne.n	801a368 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801a34a:	2301      	movs	r3, #1
 801a34c:	2200      	movs	r2, #0
 801a34e:	2102      	movs	r1, #2
 801a350:	2002      	movs	r0, #2
 801a352:	f7ff fe7b 	bl	801a04c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a356:	79ba      	ldrb	r2, [r7, #6]
 801a358:	68fb      	ldr	r3, [r7, #12]
 801a35a:	b2db      	uxtb	r3, r3
 801a35c:	1ad3      	subs	r3, r2, r3
 801a35e:	b2db      	uxtb	r3, r3
 801a360:	330e      	adds	r3, #14
 801a362:	b2db      	uxtb	r3, r3
 801a364:	71bb      	strb	r3, [r7, #6]
 801a366:	e00d      	b.n	801a384 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801a368:	2301      	movs	r3, #1
 801a36a:	2200      	movs	r2, #0
 801a36c:	2107      	movs	r1, #7
 801a36e:	2004      	movs	r0, #4
 801a370:	f7ff fe6c 	bl	801a04c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a374:	79ba      	ldrb	r2, [r7, #6]
 801a376:	68fb      	ldr	r3, [r7, #12]
 801a378:	b2db      	uxtb	r3, r3
 801a37a:	1ad3      	subs	r3, r2, r3
 801a37c:	b2db      	uxtb	r3, r3
 801a37e:	3316      	adds	r3, #22
 801a380:	b2db      	uxtb	r3, r3
 801a382:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801a384:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a388:	f113 0f09 	cmn.w	r3, #9
 801a38c:	da01      	bge.n	801a392 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801a38e:	23f7      	movs	r3, #247	; 0xf7
 801a390:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801a392:	2138      	movs	r1, #56	; 0x38
 801a394:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801a398:	f000 fa2a 	bl	801a7f0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801a39c:	79bb      	ldrb	r3, [r7, #6]
 801a39e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801a3a0:	797b      	ldrb	r3, [r7, #5]
 801a3a2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801a3a4:	f107 0308 	add.w	r3, r7, #8
 801a3a8:	2202      	movs	r2, #2
 801a3aa:	4619      	mov	r1, r3
 801a3ac:	208e      	movs	r0, #142	; 0x8e
 801a3ae:	f000 facf 	bl	801a950 <SUBGRF_WriteCommand>
}
 801a3b2:	bf00      	nop
 801a3b4:	3710      	adds	r7, #16
 801a3b6:	46bd      	mov	sp, r7
 801a3b8:	bd80      	pop	{r7, pc}
	...

0801a3bc <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801a3bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a3c0:	b086      	sub	sp, #24
 801a3c2:	af00      	add	r7, sp, #0
 801a3c4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801a3c6:	2300      	movs	r3, #0
 801a3c8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801a3ca:	4a61      	ldr	r2, [pc, #388]	; (801a550 <SUBGRF_SetModulationParams+0x194>)
 801a3cc:	f107 0308 	add.w	r3, r7, #8
 801a3d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a3d4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	781a      	ldrb	r2, [r3, #0]
 801a3dc:	4b5d      	ldr	r3, [pc, #372]	; (801a554 <SUBGRF_SetModulationParams+0x198>)
 801a3de:	781b      	ldrb	r3, [r3, #0]
 801a3e0:	429a      	cmp	r2, r3
 801a3e2:	d004      	beq.n	801a3ee <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	781b      	ldrb	r3, [r3, #0]
 801a3e8:	4618      	mov	r0, r3
 801a3ea:	f7ff fef3 	bl	801a1d4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	781b      	ldrb	r3, [r3, #0]
 801a3f2:	2b03      	cmp	r3, #3
 801a3f4:	f200 80a5 	bhi.w	801a542 <SUBGRF_SetModulationParams+0x186>
 801a3f8:	a201      	add	r2, pc, #4	; (adr r2, 801a400 <SUBGRF_SetModulationParams+0x44>)
 801a3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a3fe:	bf00      	nop
 801a400:	0801a411 	.word	0x0801a411
 801a404:	0801a4d1 	.word	0x0801a4d1
 801a408:	0801a493 	.word	0x0801a493
 801a40c:	0801a4ff 	.word	0x0801a4ff
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801a410:	2308      	movs	r3, #8
 801a412:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	685b      	ldr	r3, [r3, #4]
 801a418:	4a4f      	ldr	r2, [pc, #316]	; (801a558 <SUBGRF_SetModulationParams+0x19c>)
 801a41a:	fbb2 f3f3 	udiv	r3, r2, r3
 801a41e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a420:	697b      	ldr	r3, [r7, #20]
 801a422:	0c1b      	lsrs	r3, r3, #16
 801a424:	b2db      	uxtb	r3, r3
 801a426:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a428:	697b      	ldr	r3, [r7, #20]
 801a42a:	0a1b      	lsrs	r3, r3, #8
 801a42c:	b2db      	uxtb	r3, r3
 801a42e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a430:	697b      	ldr	r3, [r7, #20]
 801a432:	b2db      	uxtb	r3, r3
 801a434:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	7b1b      	ldrb	r3, [r3, #12]
 801a43a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	7b5b      	ldrb	r3, [r3, #13]
 801a440:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	689b      	ldr	r3, [r3, #8]
 801a446:	2200      	movs	r2, #0
 801a448:	461c      	mov	r4, r3
 801a44a:	4615      	mov	r5, r2
 801a44c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a450:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a454:	4a41      	ldr	r2, [pc, #260]	; (801a55c <SUBGRF_SetModulationParams+0x1a0>)
 801a456:	f04f 0300 	mov.w	r3, #0
 801a45a:	4640      	mov	r0, r8
 801a45c:	4649      	mov	r1, r9
 801a45e:	f7e6 fc95 	bl	8000d8c <__aeabi_uldivmod>
 801a462:	4602      	mov	r2, r0
 801a464:	460b      	mov	r3, r1
 801a466:	4613      	mov	r3, r2
 801a468:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801a46a:	697b      	ldr	r3, [r7, #20]
 801a46c:	0c1b      	lsrs	r3, r3, #16
 801a46e:	b2db      	uxtb	r3, r3
 801a470:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801a472:	697b      	ldr	r3, [r7, #20]
 801a474:	0a1b      	lsrs	r3, r3, #8
 801a476:	b2db      	uxtb	r3, r3
 801a478:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801a47a:	697b      	ldr	r3, [r7, #20]
 801a47c:	b2db      	uxtb	r3, r3
 801a47e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a480:	7cfb      	ldrb	r3, [r7, #19]
 801a482:	b29a      	uxth	r2, r3
 801a484:	f107 0308 	add.w	r3, r7, #8
 801a488:	4619      	mov	r1, r3
 801a48a:	208b      	movs	r0, #139	; 0x8b
 801a48c:	f000 fa60 	bl	801a950 <SUBGRF_WriteCommand>
        break;
 801a490:	e058      	b.n	801a544 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801a492:	2304      	movs	r3, #4
 801a494:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	691b      	ldr	r3, [r3, #16]
 801a49a:	4a2f      	ldr	r2, [pc, #188]	; (801a558 <SUBGRF_SetModulationParams+0x19c>)
 801a49c:	fbb2 f3f3 	udiv	r3, r2, r3
 801a4a0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a4a2:	697b      	ldr	r3, [r7, #20]
 801a4a4:	0c1b      	lsrs	r3, r3, #16
 801a4a6:	b2db      	uxtb	r3, r3
 801a4a8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a4aa:	697b      	ldr	r3, [r7, #20]
 801a4ac:	0a1b      	lsrs	r3, r3, #8
 801a4ae:	b2db      	uxtb	r3, r3
 801a4b0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a4b2:	697b      	ldr	r3, [r7, #20]
 801a4b4:	b2db      	uxtb	r3, r3
 801a4b6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	7d1b      	ldrb	r3, [r3, #20]
 801a4bc:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a4be:	7cfb      	ldrb	r3, [r7, #19]
 801a4c0:	b29a      	uxth	r2, r3
 801a4c2:	f107 0308 	add.w	r3, r7, #8
 801a4c6:	4619      	mov	r1, r3
 801a4c8:	208b      	movs	r0, #139	; 0x8b
 801a4ca:	f000 fa41 	bl	801a950 <SUBGRF_WriteCommand>
        break;
 801a4ce:	e039      	b.n	801a544 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801a4d0:	2304      	movs	r3, #4
 801a4d2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	7e1b      	ldrb	r3, [r3, #24]
 801a4d8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	7e5b      	ldrb	r3, [r3, #25]
 801a4de:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	7e9b      	ldrb	r3, [r3, #26]
 801a4e4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	7edb      	ldrb	r3, [r3, #27]
 801a4ea:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a4ec:	7cfb      	ldrb	r3, [r7, #19]
 801a4ee:	b29a      	uxth	r2, r3
 801a4f0:	f107 0308 	add.w	r3, r7, #8
 801a4f4:	4619      	mov	r1, r3
 801a4f6:	208b      	movs	r0, #139	; 0x8b
 801a4f8:	f000 fa2a 	bl	801a950 <SUBGRF_WriteCommand>

        break;
 801a4fc:	e022      	b.n	801a544 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801a4fe:	2305      	movs	r3, #5
 801a500:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	685b      	ldr	r3, [r3, #4]
 801a506:	4a14      	ldr	r2, [pc, #80]	; (801a558 <SUBGRF_SetModulationParams+0x19c>)
 801a508:	fbb2 f3f3 	udiv	r3, r2, r3
 801a50c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a50e:	697b      	ldr	r3, [r7, #20]
 801a510:	0c1b      	lsrs	r3, r3, #16
 801a512:	b2db      	uxtb	r3, r3
 801a514:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a516:	697b      	ldr	r3, [r7, #20]
 801a518:	0a1b      	lsrs	r3, r3, #8
 801a51a:	b2db      	uxtb	r3, r3
 801a51c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a51e:	697b      	ldr	r3, [r7, #20]
 801a520:	b2db      	uxtb	r3, r3
 801a522:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	7b1b      	ldrb	r3, [r3, #12]
 801a528:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	7b5b      	ldrb	r3, [r3, #13]
 801a52e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a530:	7cfb      	ldrb	r3, [r7, #19]
 801a532:	b29a      	uxth	r2, r3
 801a534:	f107 0308 	add.w	r3, r7, #8
 801a538:	4619      	mov	r1, r3
 801a53a:	208b      	movs	r0, #139	; 0x8b
 801a53c:	f000 fa08 	bl	801a950 <SUBGRF_WriteCommand>
        break;
 801a540:	e000      	b.n	801a544 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801a542:	bf00      	nop
    }
}
 801a544:	bf00      	nop
 801a546:	3718      	adds	r7, #24
 801a548:	46bd      	mov	sp, r7
 801a54a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a54e:	bf00      	nop
 801a550:	0801cbcc 	.word	0x0801cbcc
 801a554:	20002259 	.word	0x20002259
 801a558:	3d090000 	.word	0x3d090000
 801a55c:	01e84800 	.word	0x01e84800

0801a560 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801a560:	b580      	push	{r7, lr}
 801a562:	b086      	sub	sp, #24
 801a564:	af00      	add	r7, sp, #0
 801a566:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801a568:	2300      	movs	r3, #0
 801a56a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801a56c:	4a48      	ldr	r2, [pc, #288]	; (801a690 <SUBGRF_SetPacketParams+0x130>)
 801a56e:	f107 030c 	add.w	r3, r7, #12
 801a572:	ca07      	ldmia	r2, {r0, r1, r2}
 801a574:	c303      	stmia	r3!, {r0, r1}
 801a576:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	781a      	ldrb	r2, [r3, #0]
 801a57c:	4b45      	ldr	r3, [pc, #276]	; (801a694 <SUBGRF_SetPacketParams+0x134>)
 801a57e:	781b      	ldrb	r3, [r3, #0]
 801a580:	429a      	cmp	r2, r3
 801a582:	d004      	beq.n	801a58e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	781b      	ldrb	r3, [r3, #0]
 801a588:	4618      	mov	r0, r3
 801a58a:	f7ff fe23 	bl	801a1d4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	781b      	ldrb	r3, [r3, #0]
 801a592:	2b03      	cmp	r3, #3
 801a594:	d878      	bhi.n	801a688 <SUBGRF_SetPacketParams+0x128>
 801a596:	a201      	add	r2, pc, #4	; (adr r2, 801a59c <SUBGRF_SetPacketParams+0x3c>)
 801a598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a59c:	0801a5ad 	.word	0x0801a5ad
 801a5a0:	0801a63d 	.word	0x0801a63d
 801a5a4:	0801a631 	.word	0x0801a631
 801a5a8:	0801a5ad 	.word	0x0801a5ad
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	7a5b      	ldrb	r3, [r3, #9]
 801a5b0:	2bf1      	cmp	r3, #241	; 0xf1
 801a5b2:	d10a      	bne.n	801a5ca <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801a5b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801a5b8:	f7ff faae 	bl	8019b18 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801a5bc:	f248 0005 	movw	r0, #32773	; 0x8005
 801a5c0:	f7ff faca 	bl	8019b58 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801a5c4:	2302      	movs	r3, #2
 801a5c6:	75bb      	strb	r3, [r7, #22]
 801a5c8:	e011      	b.n	801a5ee <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	7a5b      	ldrb	r3, [r3, #9]
 801a5ce:	2bf2      	cmp	r3, #242	; 0xf2
 801a5d0:	d10a      	bne.n	801a5e8 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801a5d2:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801a5d6:	f7ff fa9f 	bl	8019b18 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801a5da:	f241 0021 	movw	r0, #4129	; 0x1021
 801a5de:	f7ff fabb 	bl	8019b58 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801a5e2:	2306      	movs	r3, #6
 801a5e4:	75bb      	strb	r3, [r7, #22]
 801a5e6:	e002      	b.n	801a5ee <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	7a5b      	ldrb	r3, [r3, #9]
 801a5ec:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801a5ee:	2309      	movs	r3, #9
 801a5f0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	885b      	ldrh	r3, [r3, #2]
 801a5f6:	0a1b      	lsrs	r3, r3, #8
 801a5f8:	b29b      	uxth	r3, r3
 801a5fa:	b2db      	uxtb	r3, r3
 801a5fc:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	885b      	ldrh	r3, [r3, #2]
 801a602:	b2db      	uxtb	r3, r3
 801a604:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	791b      	ldrb	r3, [r3, #4]
 801a60a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	795b      	ldrb	r3, [r3, #5]
 801a610:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	799b      	ldrb	r3, [r3, #6]
 801a616:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	79db      	ldrb	r3, [r3, #7]
 801a61c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	7a1b      	ldrb	r3, [r3, #8]
 801a622:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801a624:	7dbb      	ldrb	r3, [r7, #22]
 801a626:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	7a9b      	ldrb	r3, [r3, #10]
 801a62c:	753b      	strb	r3, [r7, #20]
        break;
 801a62e:	e022      	b.n	801a676 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801a630:	2301      	movs	r3, #1
 801a632:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	7b1b      	ldrb	r3, [r3, #12]
 801a638:	733b      	strb	r3, [r7, #12]
        break;
 801a63a:	e01c      	b.n	801a676 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801a63c:	2306      	movs	r3, #6
 801a63e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	89db      	ldrh	r3, [r3, #14]
 801a644:	0a1b      	lsrs	r3, r3, #8
 801a646:	b29b      	uxth	r3, r3
 801a648:	b2db      	uxtb	r3, r3
 801a64a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	89db      	ldrh	r3, [r3, #14]
 801a650:	b2db      	uxtb	r3, r3
 801a652:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	7c1a      	ldrb	r2, [r3, #16]
 801a658:	4b0f      	ldr	r3, [pc, #60]	; (801a698 <SUBGRF_SetPacketParams+0x138>)
 801a65a:	4611      	mov	r1, r2
 801a65c:	7019      	strb	r1, [r3, #0]
 801a65e:	4613      	mov	r3, r2
 801a660:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	7c5b      	ldrb	r3, [r3, #17]
 801a666:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	7c9b      	ldrb	r3, [r3, #18]
 801a66c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	7cdb      	ldrb	r3, [r3, #19]
 801a672:	747b      	strb	r3, [r7, #17]
        break;
 801a674:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801a676:	7dfb      	ldrb	r3, [r7, #23]
 801a678:	b29a      	uxth	r2, r3
 801a67a:	f107 030c 	add.w	r3, r7, #12
 801a67e:	4619      	mov	r1, r3
 801a680:	208c      	movs	r0, #140	; 0x8c
 801a682:	f000 f965 	bl	801a950 <SUBGRF_WriteCommand>
 801a686:	e000      	b.n	801a68a <SUBGRF_SetPacketParams+0x12a>
        return;
 801a688:	bf00      	nop
}
 801a68a:	3718      	adds	r7, #24
 801a68c:	46bd      	mov	sp, r7
 801a68e:	bd80      	pop	{r7, pc}
 801a690:	0801cbd4 	.word	0x0801cbd4
 801a694:	20002259 	.word	0x20002259
 801a698:	2000225a 	.word	0x2000225a

0801a69c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801a69c:	b580      	push	{r7, lr}
 801a69e:	b084      	sub	sp, #16
 801a6a0:	af00      	add	r7, sp, #0
 801a6a2:	4603      	mov	r3, r0
 801a6a4:	460a      	mov	r2, r1
 801a6a6:	71fb      	strb	r3, [r7, #7]
 801a6a8:	4613      	mov	r3, r2
 801a6aa:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801a6ac:	79fb      	ldrb	r3, [r7, #7]
 801a6ae:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801a6b0:	79bb      	ldrb	r3, [r7, #6]
 801a6b2:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801a6b4:	f107 030c 	add.w	r3, r7, #12
 801a6b8:	2202      	movs	r2, #2
 801a6ba:	4619      	mov	r1, r3
 801a6bc:	208f      	movs	r0, #143	; 0x8f
 801a6be:	f000 f947 	bl	801a950 <SUBGRF_WriteCommand>
}
 801a6c2:	bf00      	nop
 801a6c4:	3710      	adds	r7, #16
 801a6c6:	46bd      	mov	sp, r7
 801a6c8:	bd80      	pop	{r7, pc}

0801a6ca <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801a6ca:	b580      	push	{r7, lr}
 801a6cc:	b082      	sub	sp, #8
 801a6ce:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801a6d0:	2300      	movs	r3, #0
 801a6d2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801a6d4:	1d3b      	adds	r3, r7, #4
 801a6d6:	2201      	movs	r2, #1
 801a6d8:	4619      	mov	r1, r3
 801a6da:	2015      	movs	r0, #21
 801a6dc:	f000 f95a 	bl	801a994 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801a6e0:	793b      	ldrb	r3, [r7, #4]
 801a6e2:	425b      	negs	r3, r3
 801a6e4:	105b      	asrs	r3, r3, #1
 801a6e6:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801a6e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a6ec:	4618      	mov	r0, r3
 801a6ee:	3708      	adds	r7, #8
 801a6f0:	46bd      	mov	sp, r7
 801a6f2:	bd80      	pop	{r7, pc}

0801a6f4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801a6f4:	b580      	push	{r7, lr}
 801a6f6:	b084      	sub	sp, #16
 801a6f8:	af00      	add	r7, sp, #0
 801a6fa:	6078      	str	r0, [r7, #4]
 801a6fc:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801a6fe:	f107 030c 	add.w	r3, r7, #12
 801a702:	2202      	movs	r2, #2
 801a704:	4619      	mov	r1, r3
 801a706:	2013      	movs	r0, #19
 801a708:	f000 f944 	bl	801a994 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801a70c:	f7ff fd7e 	bl	801a20c <SUBGRF_GetPacketType>
 801a710:	4603      	mov	r3, r0
 801a712:	2b01      	cmp	r3, #1
 801a714:	d10d      	bne.n	801a732 <SUBGRF_GetRxBufferStatus+0x3e>
 801a716:	4b0c      	ldr	r3, [pc, #48]	; (801a748 <SUBGRF_GetRxBufferStatus+0x54>)
 801a718:	781b      	ldrb	r3, [r3, #0]
 801a71a:	b2db      	uxtb	r3, r3
 801a71c:	2b01      	cmp	r3, #1
 801a71e:	d108      	bne.n	801a732 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801a720:	f240 7002 	movw	r0, #1794	; 0x702
 801a724:	f000 f878 	bl	801a818 <SUBGRF_ReadRegister>
 801a728:	4603      	mov	r3, r0
 801a72a:	461a      	mov	r2, r3
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	701a      	strb	r2, [r3, #0]
 801a730:	e002      	b.n	801a738 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801a732:	7b3a      	ldrb	r2, [r7, #12]
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801a738:	7b7a      	ldrb	r2, [r7, #13]
 801a73a:	683b      	ldr	r3, [r7, #0]
 801a73c:	701a      	strb	r2, [r3, #0]
}
 801a73e:	bf00      	nop
 801a740:	3710      	adds	r7, #16
 801a742:	46bd      	mov	sp, r7
 801a744:	bd80      	pop	{r7, pc}
 801a746:	bf00      	nop
 801a748:	2000225a 	.word	0x2000225a

0801a74c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801a74c:	b580      	push	{r7, lr}
 801a74e:	b084      	sub	sp, #16
 801a750:	af00      	add	r7, sp, #0
 801a752:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801a754:	f107 030c 	add.w	r3, r7, #12
 801a758:	2203      	movs	r2, #3
 801a75a:	4619      	mov	r1, r3
 801a75c:	2014      	movs	r0, #20
 801a75e:	f000 f919 	bl	801a994 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801a762:	f7ff fd53 	bl	801a20c <SUBGRF_GetPacketType>
 801a766:	4603      	mov	r3, r0
 801a768:	461a      	mov	r2, r3
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	781b      	ldrb	r3, [r3, #0]
 801a772:	2b00      	cmp	r3, #0
 801a774:	d002      	beq.n	801a77c <SUBGRF_GetPacketStatus+0x30>
 801a776:	2b01      	cmp	r3, #1
 801a778:	d013      	beq.n	801a7a2 <SUBGRF_GetPacketStatus+0x56>
 801a77a:	e02a      	b.n	801a7d2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801a77c:	7b3a      	ldrb	r2, [r7, #12]
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801a782:	7b7b      	ldrb	r3, [r7, #13]
 801a784:	425b      	negs	r3, r3
 801a786:	105b      	asrs	r3, r3, #1
 801a788:	b25a      	sxtb	r2, r3
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801a78e:	7bbb      	ldrb	r3, [r7, #14]
 801a790:	425b      	negs	r3, r3
 801a792:	105b      	asrs	r3, r3, #1
 801a794:	b25a      	sxtb	r2, r3
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	2200      	movs	r2, #0
 801a79e:	609a      	str	r2, [r3, #8]
            break;
 801a7a0:	e020      	b.n	801a7e4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801a7a2:	7b3b      	ldrb	r3, [r7, #12]
 801a7a4:	425b      	negs	r3, r3
 801a7a6:	105b      	asrs	r3, r3, #1
 801a7a8:	b25a      	sxtb	r2, r3
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801a7ae:	7b7b      	ldrb	r3, [r7, #13]
 801a7b0:	b25b      	sxtb	r3, r3
 801a7b2:	3302      	adds	r3, #2
 801a7b4:	109b      	asrs	r3, r3, #2
 801a7b6:	b25a      	sxtb	r2, r3
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801a7bc:	7bbb      	ldrb	r3, [r7, #14]
 801a7be:	425b      	negs	r3, r3
 801a7c0:	105b      	asrs	r3, r3, #1
 801a7c2:	b25a      	sxtb	r2, r3
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801a7c8:	4b08      	ldr	r3, [pc, #32]	; (801a7ec <SUBGRF_GetPacketStatus+0xa0>)
 801a7ca:	681a      	ldr	r2, [r3, #0]
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	611a      	str	r2, [r3, #16]
            break;
 801a7d0:	e008      	b.n	801a7e4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801a7d2:	2214      	movs	r2, #20
 801a7d4:	2100      	movs	r1, #0
 801a7d6:	6878      	ldr	r0, [r7, #4]
 801a7d8:	f000 fbf3 	bl	801afc2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	220f      	movs	r2, #15
 801a7e0:	701a      	strb	r2, [r3, #0]
            break;
 801a7e2:	bf00      	nop
    }
}
 801a7e4:	bf00      	nop
 801a7e6:	3710      	adds	r7, #16
 801a7e8:	46bd      	mov	sp, r7
 801a7ea:	bd80      	pop	{r7, pc}
 801a7ec:	2000225c 	.word	0x2000225c

0801a7f0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801a7f0:	b580      	push	{r7, lr}
 801a7f2:	b082      	sub	sp, #8
 801a7f4:	af00      	add	r7, sp, #0
 801a7f6:	4603      	mov	r3, r0
 801a7f8:	460a      	mov	r2, r1
 801a7fa:	80fb      	strh	r3, [r7, #6]
 801a7fc:	4613      	mov	r3, r2
 801a7fe:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801a800:	1d7a      	adds	r2, r7, #5
 801a802:	88f9      	ldrh	r1, [r7, #6]
 801a804:	2301      	movs	r3, #1
 801a806:	4803      	ldr	r0, [pc, #12]	; (801a814 <SUBGRF_WriteRegister+0x24>)
 801a808:	f7ed fe10 	bl	800842c <HAL_SUBGHZ_WriteRegisters>
}
 801a80c:	bf00      	nop
 801a80e:	3708      	adds	r7, #8
 801a810:	46bd      	mov	sp, r7
 801a812:	bd80      	pop	{r7, pc}
 801a814:	200006b4 	.word	0x200006b4

0801a818 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801a818:	b580      	push	{r7, lr}
 801a81a:	b084      	sub	sp, #16
 801a81c:	af00      	add	r7, sp, #0
 801a81e:	4603      	mov	r3, r0
 801a820:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801a822:	f107 020f 	add.w	r2, r7, #15
 801a826:	88f9      	ldrh	r1, [r7, #6]
 801a828:	2301      	movs	r3, #1
 801a82a:	4804      	ldr	r0, [pc, #16]	; (801a83c <SUBGRF_ReadRegister+0x24>)
 801a82c:	f7ed fe5d 	bl	80084ea <HAL_SUBGHZ_ReadRegisters>
    return data;
 801a830:	7bfb      	ldrb	r3, [r7, #15]
}
 801a832:	4618      	mov	r0, r3
 801a834:	3710      	adds	r7, #16
 801a836:	46bd      	mov	sp, r7
 801a838:	bd80      	pop	{r7, pc}
 801a83a:	bf00      	nop
 801a83c:	200006b4 	.word	0x200006b4

0801a840 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a840:	b580      	push	{r7, lr}
 801a842:	b086      	sub	sp, #24
 801a844:	af00      	add	r7, sp, #0
 801a846:	4603      	mov	r3, r0
 801a848:	6039      	str	r1, [r7, #0]
 801a84a:	80fb      	strh	r3, [r7, #6]
 801a84c:	4613      	mov	r3, r2
 801a84e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a850:	f3ef 8310 	mrs	r3, PRIMASK
 801a854:	60fb      	str	r3, [r7, #12]
  return(result);
 801a856:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a858:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a85a:	b672      	cpsid	i
}
 801a85c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801a85e:	88bb      	ldrh	r3, [r7, #4]
 801a860:	88f9      	ldrh	r1, [r7, #6]
 801a862:	683a      	ldr	r2, [r7, #0]
 801a864:	4806      	ldr	r0, [pc, #24]	; (801a880 <SUBGRF_WriteRegisters+0x40>)
 801a866:	f7ed fde1 	bl	800842c <HAL_SUBGHZ_WriteRegisters>
 801a86a:	697b      	ldr	r3, [r7, #20]
 801a86c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a86e:	693b      	ldr	r3, [r7, #16]
 801a870:	f383 8810 	msr	PRIMASK, r3
}
 801a874:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a876:	bf00      	nop
 801a878:	3718      	adds	r7, #24
 801a87a:	46bd      	mov	sp, r7
 801a87c:	bd80      	pop	{r7, pc}
 801a87e:	bf00      	nop
 801a880:	200006b4 	.word	0x200006b4

0801a884 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a884:	b580      	push	{r7, lr}
 801a886:	b086      	sub	sp, #24
 801a888:	af00      	add	r7, sp, #0
 801a88a:	4603      	mov	r3, r0
 801a88c:	6039      	str	r1, [r7, #0]
 801a88e:	80fb      	strh	r3, [r7, #6]
 801a890:	4613      	mov	r3, r2
 801a892:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a894:	f3ef 8310 	mrs	r3, PRIMASK
 801a898:	60fb      	str	r3, [r7, #12]
  return(result);
 801a89a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a89c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a89e:	b672      	cpsid	i
}
 801a8a0:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801a8a2:	88bb      	ldrh	r3, [r7, #4]
 801a8a4:	88f9      	ldrh	r1, [r7, #6]
 801a8a6:	683a      	ldr	r2, [r7, #0]
 801a8a8:	4806      	ldr	r0, [pc, #24]	; (801a8c4 <SUBGRF_ReadRegisters+0x40>)
 801a8aa:	f7ed fe1e 	bl	80084ea <HAL_SUBGHZ_ReadRegisters>
 801a8ae:	697b      	ldr	r3, [r7, #20]
 801a8b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8b2:	693b      	ldr	r3, [r7, #16]
 801a8b4:	f383 8810 	msr	PRIMASK, r3
}
 801a8b8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a8ba:	bf00      	nop
 801a8bc:	3718      	adds	r7, #24
 801a8be:	46bd      	mov	sp, r7
 801a8c0:	bd80      	pop	{r7, pc}
 801a8c2:	bf00      	nop
 801a8c4:	200006b4 	.word	0x200006b4

0801a8c8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a8c8:	b580      	push	{r7, lr}
 801a8ca:	b086      	sub	sp, #24
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	4603      	mov	r3, r0
 801a8d0:	6039      	str	r1, [r7, #0]
 801a8d2:	71fb      	strb	r3, [r7, #7]
 801a8d4:	4613      	mov	r3, r2
 801a8d6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a8d8:	f3ef 8310 	mrs	r3, PRIMASK
 801a8dc:	60fb      	str	r3, [r7, #12]
  return(result);
 801a8de:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a8e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a8e2:	b672      	cpsid	i
}
 801a8e4:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801a8e6:	79bb      	ldrb	r3, [r7, #6]
 801a8e8:	b29b      	uxth	r3, r3
 801a8ea:	79f9      	ldrb	r1, [r7, #7]
 801a8ec:	683a      	ldr	r2, [r7, #0]
 801a8ee:	4806      	ldr	r0, [pc, #24]	; (801a908 <SUBGRF_WriteBuffer+0x40>)
 801a8f0:	f7ed ff0f 	bl	8008712 <HAL_SUBGHZ_WriteBuffer>
 801a8f4:	697b      	ldr	r3, [r7, #20]
 801a8f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8f8:	693b      	ldr	r3, [r7, #16]
 801a8fa:	f383 8810 	msr	PRIMASK, r3
}
 801a8fe:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a900:	bf00      	nop
 801a902:	3718      	adds	r7, #24
 801a904:	46bd      	mov	sp, r7
 801a906:	bd80      	pop	{r7, pc}
 801a908:	200006b4 	.word	0x200006b4

0801a90c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a90c:	b580      	push	{r7, lr}
 801a90e:	b086      	sub	sp, #24
 801a910:	af00      	add	r7, sp, #0
 801a912:	4603      	mov	r3, r0
 801a914:	6039      	str	r1, [r7, #0]
 801a916:	71fb      	strb	r3, [r7, #7]
 801a918:	4613      	mov	r3, r2
 801a91a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a91c:	f3ef 8310 	mrs	r3, PRIMASK
 801a920:	60fb      	str	r3, [r7, #12]
  return(result);
 801a922:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a924:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a926:	b672      	cpsid	i
}
 801a928:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801a92a:	79bb      	ldrb	r3, [r7, #6]
 801a92c:	b29b      	uxth	r3, r3
 801a92e:	79f9      	ldrb	r1, [r7, #7]
 801a930:	683a      	ldr	r2, [r7, #0]
 801a932:	4806      	ldr	r0, [pc, #24]	; (801a94c <SUBGRF_ReadBuffer+0x40>)
 801a934:	f7ed ff40 	bl	80087b8 <HAL_SUBGHZ_ReadBuffer>
 801a938:	697b      	ldr	r3, [r7, #20]
 801a93a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a93c:	693b      	ldr	r3, [r7, #16]
 801a93e:	f383 8810 	msr	PRIMASK, r3
}
 801a942:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a944:	bf00      	nop
 801a946:	3718      	adds	r7, #24
 801a948:	46bd      	mov	sp, r7
 801a94a:	bd80      	pop	{r7, pc}
 801a94c:	200006b4 	.word	0x200006b4

0801a950 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a950:	b580      	push	{r7, lr}
 801a952:	b086      	sub	sp, #24
 801a954:	af00      	add	r7, sp, #0
 801a956:	4603      	mov	r3, r0
 801a958:	6039      	str	r1, [r7, #0]
 801a95a:	71fb      	strb	r3, [r7, #7]
 801a95c:	4613      	mov	r3, r2
 801a95e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a960:	f3ef 8310 	mrs	r3, PRIMASK
 801a964:	60fb      	str	r3, [r7, #12]
  return(result);
 801a966:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a968:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a96a:	b672      	cpsid	i
}
 801a96c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801a96e:	88bb      	ldrh	r3, [r7, #4]
 801a970:	79f9      	ldrb	r1, [r7, #7]
 801a972:	683a      	ldr	r2, [r7, #0]
 801a974:	4806      	ldr	r0, [pc, #24]	; (801a990 <SUBGRF_WriteCommand+0x40>)
 801a976:	f7ed fe19 	bl	80085ac <HAL_SUBGHZ_ExecSetCmd>
 801a97a:	697b      	ldr	r3, [r7, #20]
 801a97c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a97e:	693b      	ldr	r3, [r7, #16]
 801a980:	f383 8810 	msr	PRIMASK, r3
}
 801a984:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a986:	bf00      	nop
 801a988:	3718      	adds	r7, #24
 801a98a:	46bd      	mov	sp, r7
 801a98c:	bd80      	pop	{r7, pc}
 801a98e:	bf00      	nop
 801a990:	200006b4 	.word	0x200006b4

0801a994 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a994:	b580      	push	{r7, lr}
 801a996:	b086      	sub	sp, #24
 801a998:	af00      	add	r7, sp, #0
 801a99a:	4603      	mov	r3, r0
 801a99c:	6039      	str	r1, [r7, #0]
 801a99e:	71fb      	strb	r3, [r7, #7]
 801a9a0:	4613      	mov	r3, r2
 801a9a2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a9a4:	f3ef 8310 	mrs	r3, PRIMASK
 801a9a8:	60fb      	str	r3, [r7, #12]
  return(result);
 801a9aa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a9ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a9ae:	b672      	cpsid	i
}
 801a9b0:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801a9b2:	88bb      	ldrh	r3, [r7, #4]
 801a9b4:	79f9      	ldrb	r1, [r7, #7]
 801a9b6:	683a      	ldr	r2, [r7, #0]
 801a9b8:	4806      	ldr	r0, [pc, #24]	; (801a9d4 <SUBGRF_ReadCommand+0x40>)
 801a9ba:	f7ed fe56 	bl	800866a <HAL_SUBGHZ_ExecGetCmd>
 801a9be:	697b      	ldr	r3, [r7, #20]
 801a9c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a9c2:	693b      	ldr	r3, [r7, #16]
 801a9c4:	f383 8810 	msr	PRIMASK, r3
}
 801a9c8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a9ca:	bf00      	nop
 801a9cc:	3718      	adds	r7, #24
 801a9ce:	46bd      	mov	sp, r7
 801a9d0:	bd80      	pop	{r7, pc}
 801a9d2:	bf00      	nop
 801a9d4:	200006b4 	.word	0x200006b4

0801a9d8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801a9d8:	b580      	push	{r7, lr}
 801a9da:	b084      	sub	sp, #16
 801a9dc:	af00      	add	r7, sp, #0
 801a9de:	4603      	mov	r3, r0
 801a9e0:	460a      	mov	r2, r1
 801a9e2:	71fb      	strb	r3, [r7, #7]
 801a9e4:	4613      	mov	r3, r2
 801a9e6:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801a9e8:	2301      	movs	r3, #1
 801a9ea:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801a9ec:	79bb      	ldrb	r3, [r7, #6]
 801a9ee:	2b01      	cmp	r3, #1
 801a9f0:	d10d      	bne.n	801aa0e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801a9f2:	79fb      	ldrb	r3, [r7, #7]
 801a9f4:	2b01      	cmp	r3, #1
 801a9f6:	d104      	bne.n	801aa02 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801a9f8:	2302      	movs	r3, #2
 801a9fa:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801a9fc:	2004      	movs	r0, #4
 801a9fe:	f000 f8df 	bl	801abc0 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801aa02:	79fb      	ldrb	r3, [r7, #7]
 801aa04:	2b02      	cmp	r3, #2
 801aa06:	d107      	bne.n	801aa18 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801aa08:	2303      	movs	r3, #3
 801aa0a:	73fb      	strb	r3, [r7, #15]
 801aa0c:	e004      	b.n	801aa18 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801aa0e:	79bb      	ldrb	r3, [r7, #6]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d101      	bne.n	801aa18 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801aa14:	2301      	movs	r3, #1
 801aa16:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801aa18:	7bfb      	ldrb	r3, [r7, #15]
 801aa1a:	4618      	mov	r0, r3
 801aa1c:	f7f1 f825 	bl	800ba6a <RBI_ConfigRFSwitch>
}
 801aa20:	bf00      	nop
 801aa22:	3710      	adds	r7, #16
 801aa24:	46bd      	mov	sp, r7
 801aa26:	bd80      	pop	{r7, pc}

0801aa28 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801aa28:	b580      	push	{r7, lr}
 801aa2a:	b084      	sub	sp, #16
 801aa2c:	af00      	add	r7, sp, #0
 801aa2e:	4603      	mov	r3, r0
 801aa30:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801aa32:	2301      	movs	r3, #1
 801aa34:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801aa36:	f7f1 f826 	bl	800ba86 <RBI_GetTxConfig>
 801aa3a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801aa3c:	68bb      	ldr	r3, [r7, #8]
 801aa3e:	2b02      	cmp	r3, #2
 801aa40:	d016      	beq.n	801aa70 <SUBGRF_SetRfTxPower+0x48>
 801aa42:	68bb      	ldr	r3, [r7, #8]
 801aa44:	2b02      	cmp	r3, #2
 801aa46:	dc16      	bgt.n	801aa76 <SUBGRF_SetRfTxPower+0x4e>
 801aa48:	68bb      	ldr	r3, [r7, #8]
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	d003      	beq.n	801aa56 <SUBGRF_SetRfTxPower+0x2e>
 801aa4e:	68bb      	ldr	r3, [r7, #8]
 801aa50:	2b01      	cmp	r3, #1
 801aa52:	d00a      	beq.n	801aa6a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801aa54:	e00f      	b.n	801aa76 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801aa56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801aa5a:	2b0f      	cmp	r3, #15
 801aa5c:	dd02      	ble.n	801aa64 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801aa5e:	2302      	movs	r3, #2
 801aa60:	73fb      	strb	r3, [r7, #15]
            break;
 801aa62:	e009      	b.n	801aa78 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801aa64:	2301      	movs	r3, #1
 801aa66:	73fb      	strb	r3, [r7, #15]
            break;
 801aa68:	e006      	b.n	801aa78 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801aa6a:	2301      	movs	r3, #1
 801aa6c:	73fb      	strb	r3, [r7, #15]
            break;
 801aa6e:	e003      	b.n	801aa78 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801aa70:	2302      	movs	r3, #2
 801aa72:	73fb      	strb	r3, [r7, #15]
            break;
 801aa74:	e000      	b.n	801aa78 <SUBGRF_SetRfTxPower+0x50>
            break;
 801aa76:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801aa78:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801aa7c:	7bfb      	ldrb	r3, [r7, #15]
 801aa7e:	2202      	movs	r2, #2
 801aa80:	4618      	mov	r0, r3
 801aa82:	f7ff fbcd 	bl	801a220 <SUBGRF_SetTxParams>

    return paSelect;
 801aa86:	7bfb      	ldrb	r3, [r7, #15]
}
 801aa88:	4618      	mov	r0, r3
 801aa8a:	3710      	adds	r7, #16
 801aa8c:	46bd      	mov	sp, r7
 801aa8e:	bd80      	pop	{r7, pc}

0801aa90 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801aa90:	b480      	push	{r7}
 801aa92:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801aa94:	2301      	movs	r3, #1
}
 801aa96:	4618      	mov	r0, r3
 801aa98:	46bd      	mov	sp, r7
 801aa9a:	bc80      	pop	{r7}
 801aa9c:	4770      	bx	lr
	...

0801aaa0 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	b082      	sub	sp, #8
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801aaa8:	4b03      	ldr	r3, [pc, #12]	; (801aab8 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	2001      	movs	r0, #1
 801aaae:	4798      	blx	r3
}
 801aab0:	bf00      	nop
 801aab2:	3708      	adds	r7, #8
 801aab4:	46bd      	mov	sp, r7
 801aab6:	bd80      	pop	{r7, pc}
 801aab8:	20002264 	.word	0x20002264

0801aabc <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801aabc:	b580      	push	{r7, lr}
 801aabe:	b082      	sub	sp, #8
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801aac4:	4b03      	ldr	r3, [pc, #12]	; (801aad4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	2002      	movs	r0, #2
 801aaca:	4798      	blx	r3
}
 801aacc:	bf00      	nop
 801aace:	3708      	adds	r7, #8
 801aad0:	46bd      	mov	sp, r7
 801aad2:	bd80      	pop	{r7, pc}
 801aad4:	20002264 	.word	0x20002264

0801aad8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801aad8:	b580      	push	{r7, lr}
 801aada:	b082      	sub	sp, #8
 801aadc:	af00      	add	r7, sp, #0
 801aade:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801aae0:	4b03      	ldr	r3, [pc, #12]	; (801aaf0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	2040      	movs	r0, #64	; 0x40
 801aae6:	4798      	blx	r3
}
 801aae8:	bf00      	nop
 801aaea:	3708      	adds	r7, #8
 801aaec:	46bd      	mov	sp, r7
 801aaee:	bd80      	pop	{r7, pc}
 801aaf0:	20002264 	.word	0x20002264

0801aaf4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801aaf4:	b580      	push	{r7, lr}
 801aaf6:	b082      	sub	sp, #8
 801aaf8:	af00      	add	r7, sp, #0
 801aafa:	6078      	str	r0, [r7, #4]
 801aafc:	460b      	mov	r3, r1
 801aafe:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801ab00:	78fb      	ldrb	r3, [r7, #3]
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d002      	beq.n	801ab0c <HAL_SUBGHZ_CADStatusCallback+0x18>
 801ab06:	2b01      	cmp	r3, #1
 801ab08:	d005      	beq.n	801ab16 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801ab0a:	e00a      	b.n	801ab22 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801ab0c:	4b07      	ldr	r3, [pc, #28]	; (801ab2c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	2080      	movs	r0, #128	; 0x80
 801ab12:	4798      	blx	r3
            break;
 801ab14:	e005      	b.n	801ab22 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801ab16:	4b05      	ldr	r3, [pc, #20]	; (801ab2c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	f44f 7080 	mov.w	r0, #256	; 0x100
 801ab1e:	4798      	blx	r3
            break;
 801ab20:	bf00      	nop
    }
}
 801ab22:	bf00      	nop
 801ab24:	3708      	adds	r7, #8
 801ab26:	46bd      	mov	sp, r7
 801ab28:	bd80      	pop	{r7, pc}
 801ab2a:	bf00      	nop
 801ab2c:	20002264 	.word	0x20002264

0801ab30 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ab30:	b580      	push	{r7, lr}
 801ab32:	b082      	sub	sp, #8
 801ab34:	af00      	add	r7, sp, #0
 801ab36:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801ab38:	4b04      	ldr	r3, [pc, #16]	; (801ab4c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	f44f 7000 	mov.w	r0, #512	; 0x200
 801ab40:	4798      	blx	r3
}
 801ab42:	bf00      	nop
 801ab44:	3708      	adds	r7, #8
 801ab46:	46bd      	mov	sp, r7
 801ab48:	bd80      	pop	{r7, pc}
 801ab4a:	bf00      	nop
 801ab4c:	20002264 	.word	0x20002264

0801ab50 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ab50:	b580      	push	{r7, lr}
 801ab52:	b082      	sub	sp, #8
 801ab54:	af00      	add	r7, sp, #0
 801ab56:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801ab58:	4b03      	ldr	r3, [pc, #12]	; (801ab68 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	2020      	movs	r0, #32
 801ab5e:	4798      	blx	r3
}
 801ab60:	bf00      	nop
 801ab62:	3708      	adds	r7, #8
 801ab64:	46bd      	mov	sp, r7
 801ab66:	bd80      	pop	{r7, pc}
 801ab68:	20002264 	.word	0x20002264

0801ab6c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ab6c:	b580      	push	{r7, lr}
 801ab6e:	b082      	sub	sp, #8
 801ab70:	af00      	add	r7, sp, #0
 801ab72:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801ab74:	4b03      	ldr	r3, [pc, #12]	; (801ab84 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	2004      	movs	r0, #4
 801ab7a:	4798      	blx	r3
}
 801ab7c:	bf00      	nop
 801ab7e:	3708      	adds	r7, #8
 801ab80:	46bd      	mov	sp, r7
 801ab82:	bd80      	pop	{r7, pc}
 801ab84:	20002264 	.word	0x20002264

0801ab88 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ab88:	b580      	push	{r7, lr}
 801ab8a:	b082      	sub	sp, #8
 801ab8c:	af00      	add	r7, sp, #0
 801ab8e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801ab90:	4b03      	ldr	r3, [pc, #12]	; (801aba0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	2008      	movs	r0, #8
 801ab96:	4798      	blx	r3
}
 801ab98:	bf00      	nop
 801ab9a:	3708      	adds	r7, #8
 801ab9c:	46bd      	mov	sp, r7
 801ab9e:	bd80      	pop	{r7, pc}
 801aba0:	20002264 	.word	0x20002264

0801aba4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801aba4:	b580      	push	{r7, lr}
 801aba6:	b082      	sub	sp, #8
 801aba8:	af00      	add	r7, sp, #0
 801abaa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801abac:	4b03      	ldr	r3, [pc, #12]	; (801abbc <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801abae:	681b      	ldr	r3, [r3, #0]
 801abb0:	2010      	movs	r0, #16
 801abb2:	4798      	blx	r3
}
 801abb4:	bf00      	nop
 801abb6:	3708      	adds	r7, #8
 801abb8:	46bd      	mov	sp, r7
 801abba:	bd80      	pop	{r7, pc}
 801abbc:	20002264 	.word	0x20002264

0801abc0 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b084      	sub	sp, #16
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	4603      	mov	r3, r0
 801abc8:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801abca:	f7f0 ff6a 	bl	800baa2 <RBI_IsDCDC>
 801abce:	4603      	mov	r3, r0
 801abd0:	2b01      	cmp	r3, #1
 801abd2:	d112      	bne.n	801abfa <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801abd4:	f640 1023 	movw	r0, #2339	; 0x923
 801abd8:	f7ff fe1e 	bl	801a818 <SUBGRF_ReadRegister>
 801abdc:	4603      	mov	r3, r0
 801abde:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801abe0:	7bfb      	ldrb	r3, [r7, #15]
 801abe2:	f023 0306 	bic.w	r3, r3, #6
 801abe6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801abe8:	7bfa      	ldrb	r2, [r7, #15]
 801abea:	79fb      	ldrb	r3, [r7, #7]
 801abec:	4313      	orrs	r3, r2
 801abee:	b2db      	uxtb	r3, r3
 801abf0:	4619      	mov	r1, r3
 801abf2:	f640 1023 	movw	r0, #2339	; 0x923
 801abf6:	f7ff fdfb 	bl	801a7f0 <SUBGRF_WriteRegister>
  }
}
 801abfa:	bf00      	nop
 801abfc:	3710      	adds	r7, #16
 801abfe:	46bd      	mov	sp, r7
 801ac00:	bd80      	pop	{r7, pc}
	...

0801ac04 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801ac04:	b480      	push	{r7}
 801ac06:	b085      	sub	sp, #20
 801ac08:	af00      	add	r7, sp, #0
 801ac0a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d101      	bne.n	801ac16 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801ac12:	231f      	movs	r3, #31
 801ac14:	e016      	b.n	801ac44 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801ac16:	2300      	movs	r3, #0
 801ac18:	73fb      	strb	r3, [r7, #15]
 801ac1a:	e00f      	b.n	801ac3c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801ac1c:	7bfb      	ldrb	r3, [r7, #15]
 801ac1e:	4a0c      	ldr	r2, [pc, #48]	; (801ac50 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801ac20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ac24:	687a      	ldr	r2, [r7, #4]
 801ac26:	429a      	cmp	r2, r3
 801ac28:	d205      	bcs.n	801ac36 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801ac2a:	7bfb      	ldrb	r3, [r7, #15]
 801ac2c:	4a08      	ldr	r2, [pc, #32]	; (801ac50 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801ac2e:	00db      	lsls	r3, r3, #3
 801ac30:	4413      	add	r3, r2
 801ac32:	791b      	ldrb	r3, [r3, #4]
 801ac34:	e006      	b.n	801ac44 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801ac36:	7bfb      	ldrb	r3, [r7, #15]
 801ac38:	3301      	adds	r3, #1
 801ac3a:	73fb      	strb	r3, [r7, #15]
 801ac3c:	7bfb      	ldrb	r3, [r7, #15]
 801ac3e:	2b15      	cmp	r3, #21
 801ac40:	d9ec      	bls.n	801ac1c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801ac42:	e7fe      	b.n	801ac42 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801ac44:	4618      	mov	r0, r3
 801ac46:	3714      	adds	r7, #20
 801ac48:	46bd      	mov	sp, r7
 801ac4a:	bc80      	pop	{r7}
 801ac4c:	4770      	bx	lr
 801ac4e:	bf00      	nop
 801ac50:	0801d138 	.word	0x0801d138

0801ac54 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801ac54:	b580      	push	{r7, lr}
 801ac56:	b08a      	sub	sp, #40	; 0x28
 801ac58:	af00      	add	r7, sp, #0
 801ac5a:	6078      	str	r0, [r7, #4]
 801ac5c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801ac5e:	4b35      	ldr	r3, [pc, #212]	; (801ad34 <SUBGRF_GetCFO+0xe0>)
 801ac60:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801ac62:	f640 0007 	movw	r0, #2055	; 0x807
 801ac66:	f7ff fdd7 	bl	801a818 <SUBGRF_ReadRegister>
 801ac6a:	4603      	mov	r3, r0
 801ac6c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801ac6e:	7ffb      	ldrb	r3, [r7, #31]
 801ac70:	08db      	lsrs	r3, r3, #3
 801ac72:	b2db      	uxtb	r3, r3
 801ac74:	f003 0303 	and.w	r3, r3, #3
 801ac78:	3328      	adds	r3, #40	; 0x28
 801ac7a:	443b      	add	r3, r7
 801ac7c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801ac80:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801ac82:	7ffb      	ldrb	r3, [r7, #31]
 801ac84:	f003 0307 	and.w	r3, r3, #7
 801ac88:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801ac8a:	7fba      	ldrb	r2, [r7, #30]
 801ac8c:	7f7b      	ldrb	r3, [r7, #29]
 801ac8e:	3b01      	subs	r3, #1
 801ac90:	fa02 f303 	lsl.w	r3, r2, r3
 801ac94:	461a      	mov	r2, r3
 801ac96:	4b28      	ldr	r3, [pc, #160]	; (801ad38 <SUBGRF_GetCFO+0xe4>)
 801ac98:	fbb3 f3f2 	udiv	r3, r3, r2
 801ac9c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801ac9e:	69ba      	ldr	r2, [r7, #24]
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	fbb2 f3f3 	udiv	r3, r2, r3
 801aca6:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801aca8:	2301      	movs	r3, #1
 801acaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801acae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801acb2:	697a      	ldr	r2, [r7, #20]
 801acb4:	fb02 f303 	mul.w	r3, r2, r3
 801acb8:	2b07      	cmp	r3, #7
 801acba:	d802      	bhi.n	801acc2 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801acbc:	2302      	movs	r3, #2
 801acbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801acc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801acc6:	697a      	ldr	r2, [r7, #20]
 801acc8:	fb02 f303 	mul.w	r3, r2, r3
 801accc:	2b03      	cmp	r3, #3
 801acce:	d802      	bhi.n	801acd6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801acd0:	2304      	movs	r3, #4
 801acd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801acd6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801acda:	69bb      	ldr	r3, [r7, #24]
 801acdc:	fb02 f303 	mul.w	r3, r2, r3
 801ace0:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801ace2:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801ace6:	f7ff fd97 	bl	801a818 <SUBGRF_ReadRegister>
 801acea:	4603      	mov	r3, r0
 801acec:	021b      	lsls	r3, r3, #8
 801acee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801acf2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801acf4:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801acf8:	f7ff fd8e 	bl	801a818 <SUBGRF_ReadRegister>
 801acfc:	4603      	mov	r3, r0
 801acfe:	461a      	mov	r2, r3
 801ad00:	6a3b      	ldr	r3, [r7, #32]
 801ad02:	4313      	orrs	r3, r2
 801ad04:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801ad06:	6a3b      	ldr	r3, [r7, #32]
 801ad08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ad0c:	2b00      	cmp	r3, #0
 801ad0e:	d005      	beq.n	801ad1c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801ad10:	6a3b      	ldr	r3, [r7, #32]
 801ad12:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801ad16:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801ad1a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801ad1c:	693b      	ldr	r3, [r7, #16]
 801ad1e:	095b      	lsrs	r3, r3, #5
 801ad20:	6a3a      	ldr	r2, [r7, #32]
 801ad22:	fb02 f303 	mul.w	r3, r2, r3
 801ad26:	11da      	asrs	r2, r3, #7
 801ad28:	683b      	ldr	r3, [r7, #0]
 801ad2a:	601a      	str	r2, [r3, #0]
}
 801ad2c:	bf00      	nop
 801ad2e:	3728      	adds	r7, #40	; 0x28
 801ad30:	46bd      	mov	sp, r7
 801ad32:	bd80      	pop	{r7, pc}
 801ad34:	0c0a0804 	.word	0x0c0a0804
 801ad38:	01e84800 	.word	0x01e84800

0801ad3c <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801ad3c:	b480      	push	{r7}
 801ad3e:	b087      	sub	sp, #28
 801ad40:	af00      	add	r7, sp, #0
 801ad42:	4603      	mov	r3, r0
 801ad44:	60b9      	str	r1, [r7, #8]
 801ad46:	607a      	str	r2, [r7, #4]
 801ad48:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801ad4a:	2300      	movs	r3, #0
 801ad4c:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801ad4e:	f04f 33ff 	mov.w	r3, #4294967295
 801ad52:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801ad54:	697b      	ldr	r3, [r7, #20]
}
 801ad56:	4618      	mov	r0, r3
 801ad58:	371c      	adds	r7, #28
 801ad5a:	46bd      	mov	sp, r7
 801ad5c:	bc80      	pop	{r7}
 801ad5e:	4770      	bx	lr

0801ad60 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801ad60:	b480      	push	{r7}
 801ad62:	b087      	sub	sp, #28
 801ad64:	af00      	add	r7, sp, #0
 801ad66:	4603      	mov	r3, r0
 801ad68:	60b9      	str	r1, [r7, #8]
 801ad6a:	607a      	str	r2, [r7, #4]
 801ad6c:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801ad6e:	2300      	movs	r3, #0
 801ad70:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801ad72:	f04f 33ff 	mov.w	r3, #4294967295
 801ad76:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801ad78:	697b      	ldr	r3, [r7, #20]
}
 801ad7a:	4618      	mov	r0, r3
 801ad7c:	371c      	adds	r7, #28
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	bc80      	pop	{r7}
 801ad82:	4770      	bx	lr

0801ad84 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801ad84:	b480      	push	{r7}
 801ad86:	b085      	sub	sp, #20
 801ad88:	af00      	add	r7, sp, #0
 801ad8a:	60f8      	str	r0, [r7, #12]
 801ad8c:	60b9      	str	r1, [r7, #8]
 801ad8e:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801ad90:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801ad94:	4618      	mov	r0, r3
 801ad96:	3714      	adds	r7, #20
 801ad98:	46bd      	mov	sp, r7
 801ad9a:	bc80      	pop	{r7}
 801ad9c:	4770      	bx	lr

0801ad9e <RFW_DeInit>:

void RFW_DeInit( void)
{
 801ad9e:	b480      	push	{r7}
 801ada0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801ada2:	bf00      	nop
 801ada4:	46bd      	mov	sp, r7
 801ada6:	bc80      	pop	{r7}
 801ada8:	4770      	bx	lr

0801adaa <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801adaa:	b480      	push	{r7}
 801adac:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801adae:	2300      	movs	r3, #0
#endif
}
 801adb0:	4618      	mov	r0, r3
 801adb2:	46bd      	mov	sp, r7
 801adb4:	bc80      	pop	{r7}
 801adb6:	4770      	bx	lr

0801adb8 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801adb8:	b480      	push	{r7}
 801adba:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801adbc:	2300      	movs	r3, #0
#endif
}
 801adbe:	4618      	mov	r0, r3
 801adc0:	46bd      	mov	sp, r7
 801adc2:	bc80      	pop	{r7}
 801adc4:	4770      	bx	lr

0801adc6 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801adc6:	b480      	push	{r7}
 801adc8:	b083      	sub	sp, #12
 801adca:	af00      	add	r7, sp, #0
 801adcc:	4603      	mov	r3, r0
 801adce:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801add0:	bf00      	nop
 801add2:	370c      	adds	r7, #12
 801add4:	46bd      	mov	sp, r7
 801add6:	bc80      	pop	{r7}
 801add8:	4770      	bx	lr

0801adda <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801adda:	b480      	push	{r7}
 801addc:	b087      	sub	sp, #28
 801adde:	af00      	add	r7, sp, #0
 801ade0:	60f8      	str	r0, [r7, #12]
 801ade2:	460b      	mov	r3, r1
 801ade4:	607a      	str	r2, [r7, #4]
 801ade6:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801ade8:	f04f 33ff 	mov.w	r3, #4294967295
 801adec:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801adee:	697b      	ldr	r3, [r7, #20]
}
 801adf0:	4618      	mov	r0, r3
 801adf2:	371c      	adds	r7, #28
 801adf4:	46bd      	mov	sp, r7
 801adf6:	bc80      	pop	{r7}
 801adf8:	4770      	bx	lr

0801adfa <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801adfa:	b480      	push	{r7}
 801adfc:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801adfe:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801ae02:	4618      	mov	r0, r3
 801ae04:	46bd      	mov	sp, r7
 801ae06:	bc80      	pop	{r7}
 801ae08:	4770      	bx	lr

0801ae0a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801ae0a:	b480      	push	{r7}
 801ae0c:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801ae0e:	bf00      	nop
 801ae10:	46bd      	mov	sp, r7
 801ae12:	bc80      	pop	{r7}
 801ae14:	4770      	bx	lr

0801ae16 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801ae16:	b480      	push	{r7}
 801ae18:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801ae1a:	bf00      	nop
 801ae1c:	46bd      	mov	sp, r7
 801ae1e:	bc80      	pop	{r7}
 801ae20:	4770      	bx	lr

0801ae22 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801ae22:	b480      	push	{r7}
 801ae24:	b083      	sub	sp, #12
 801ae26:	af00      	add	r7, sp, #0
 801ae28:	4603      	mov	r3, r0
 801ae2a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801ae2c:	bf00      	nop
 801ae2e:	370c      	adds	r7, #12
 801ae30:	46bd      	mov	sp, r7
 801ae32:	bc80      	pop	{r7}
 801ae34:	4770      	bx	lr
	...

0801ae38 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801ae38:	b480      	push	{r7}
 801ae3a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801ae3c:	4b04      	ldr	r3, [pc, #16]	; (801ae50 <UTIL_LPM_Init+0x18>)
 801ae3e:	2200      	movs	r2, #0
 801ae40:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801ae42:	4b04      	ldr	r3, [pc, #16]	; (801ae54 <UTIL_LPM_Init+0x1c>)
 801ae44:	2200      	movs	r2, #0
 801ae46:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801ae48:	bf00      	nop
 801ae4a:	46bd      	mov	sp, r7
 801ae4c:	bc80      	pop	{r7}
 801ae4e:	4770      	bx	lr
 801ae50:	20002268 	.word	0x20002268
 801ae54:	2000226c 	.word	0x2000226c

0801ae58 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ae58:	b480      	push	{r7}
 801ae5a:	b087      	sub	sp, #28
 801ae5c:	af00      	add	r7, sp, #0
 801ae5e:	6078      	str	r0, [r7, #4]
 801ae60:	460b      	mov	r3, r1
 801ae62:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae64:	f3ef 8310 	mrs	r3, PRIMASK
 801ae68:	613b      	str	r3, [r7, #16]
  return(result);
 801ae6a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ae6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ae6e:	b672      	cpsid	i
}
 801ae70:	bf00      	nop
  
  switch( state )
 801ae72:	78fb      	ldrb	r3, [r7, #3]
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d008      	beq.n	801ae8a <UTIL_LPM_SetStopMode+0x32>
 801ae78:	2b01      	cmp	r3, #1
 801ae7a:	d10e      	bne.n	801ae9a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801ae7c:	4b0d      	ldr	r3, [pc, #52]	; (801aeb4 <UTIL_LPM_SetStopMode+0x5c>)
 801ae7e:	681a      	ldr	r2, [r3, #0]
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	4313      	orrs	r3, r2
 801ae84:	4a0b      	ldr	r2, [pc, #44]	; (801aeb4 <UTIL_LPM_SetStopMode+0x5c>)
 801ae86:	6013      	str	r3, [r2, #0]
      break;
 801ae88:	e008      	b.n	801ae9c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	43da      	mvns	r2, r3
 801ae8e:	4b09      	ldr	r3, [pc, #36]	; (801aeb4 <UTIL_LPM_SetStopMode+0x5c>)
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	4013      	ands	r3, r2
 801ae94:	4a07      	ldr	r2, [pc, #28]	; (801aeb4 <UTIL_LPM_SetStopMode+0x5c>)
 801ae96:	6013      	str	r3, [r2, #0]
      break;
 801ae98:	e000      	b.n	801ae9c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801ae9a:	bf00      	nop
 801ae9c:	697b      	ldr	r3, [r7, #20]
 801ae9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aea0:	68fb      	ldr	r3, [r7, #12]
 801aea2:	f383 8810 	msr	PRIMASK, r3
}
 801aea6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801aea8:	bf00      	nop
 801aeaa:	371c      	adds	r7, #28
 801aeac:	46bd      	mov	sp, r7
 801aeae:	bc80      	pop	{r7}
 801aeb0:	4770      	bx	lr
 801aeb2:	bf00      	nop
 801aeb4:	20002268 	.word	0x20002268

0801aeb8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801aeb8:	b480      	push	{r7}
 801aeba:	b087      	sub	sp, #28
 801aebc:	af00      	add	r7, sp, #0
 801aebe:	6078      	str	r0, [r7, #4]
 801aec0:	460b      	mov	r3, r1
 801aec2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aec4:	f3ef 8310 	mrs	r3, PRIMASK
 801aec8:	613b      	str	r3, [r7, #16]
  return(result);
 801aeca:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801aecc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801aece:	b672      	cpsid	i
}
 801aed0:	bf00      	nop
  
  switch(state)
 801aed2:	78fb      	ldrb	r3, [r7, #3]
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d008      	beq.n	801aeea <UTIL_LPM_SetOffMode+0x32>
 801aed8:	2b01      	cmp	r3, #1
 801aeda:	d10e      	bne.n	801aefa <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801aedc:	4b0d      	ldr	r3, [pc, #52]	; (801af14 <UTIL_LPM_SetOffMode+0x5c>)
 801aede:	681a      	ldr	r2, [r3, #0]
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	4313      	orrs	r3, r2
 801aee4:	4a0b      	ldr	r2, [pc, #44]	; (801af14 <UTIL_LPM_SetOffMode+0x5c>)
 801aee6:	6013      	str	r3, [r2, #0]
      break;
 801aee8:	e008      	b.n	801aefc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	43da      	mvns	r2, r3
 801aeee:	4b09      	ldr	r3, [pc, #36]	; (801af14 <UTIL_LPM_SetOffMode+0x5c>)
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	4013      	ands	r3, r2
 801aef4:	4a07      	ldr	r2, [pc, #28]	; (801af14 <UTIL_LPM_SetOffMode+0x5c>)
 801aef6:	6013      	str	r3, [r2, #0]
      break;
 801aef8:	e000      	b.n	801aefc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801aefa:	bf00      	nop
 801aefc:	697b      	ldr	r3, [r7, #20]
 801aefe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af00:	68fb      	ldr	r3, [r7, #12]
 801af02:	f383 8810 	msr	PRIMASK, r3
}
 801af06:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801af08:	bf00      	nop
 801af0a:	371c      	adds	r7, #28
 801af0c:	46bd      	mov	sp, r7
 801af0e:	bc80      	pop	{r7}
 801af10:	4770      	bx	lr
 801af12:	bf00      	nop
 801af14:	2000226c 	.word	0x2000226c

0801af18 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801af18:	b580      	push	{r7, lr}
 801af1a:	b084      	sub	sp, #16
 801af1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801af1e:	f3ef 8310 	mrs	r3, PRIMASK
 801af22:	60bb      	str	r3, [r7, #8]
  return(result);
 801af24:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801af26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801af28:	b672      	cpsid	i
}
 801af2a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801af2c:	4b12      	ldr	r3, [pc, #72]	; (801af78 <UTIL_LPM_EnterLowPower+0x60>)
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	2b00      	cmp	r3, #0
 801af32:	d006      	beq.n	801af42 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801af34:	4b11      	ldr	r3, [pc, #68]	; (801af7c <UTIL_LPM_EnterLowPower+0x64>)
 801af36:	681b      	ldr	r3, [r3, #0]
 801af38:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801af3a:	4b10      	ldr	r3, [pc, #64]	; (801af7c <UTIL_LPM_EnterLowPower+0x64>)
 801af3c:	685b      	ldr	r3, [r3, #4]
 801af3e:	4798      	blx	r3
 801af40:	e010      	b.n	801af64 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801af42:	4b0f      	ldr	r3, [pc, #60]	; (801af80 <UTIL_LPM_EnterLowPower+0x68>)
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	2b00      	cmp	r3, #0
 801af48:	d006      	beq.n	801af58 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801af4a:	4b0c      	ldr	r3, [pc, #48]	; (801af7c <UTIL_LPM_EnterLowPower+0x64>)
 801af4c:	689b      	ldr	r3, [r3, #8]
 801af4e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801af50:	4b0a      	ldr	r3, [pc, #40]	; (801af7c <UTIL_LPM_EnterLowPower+0x64>)
 801af52:	68db      	ldr	r3, [r3, #12]
 801af54:	4798      	blx	r3
 801af56:	e005      	b.n	801af64 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801af58:	4b08      	ldr	r3, [pc, #32]	; (801af7c <UTIL_LPM_EnterLowPower+0x64>)
 801af5a:	691b      	ldr	r3, [r3, #16]
 801af5c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801af5e:	4b07      	ldr	r3, [pc, #28]	; (801af7c <UTIL_LPM_EnterLowPower+0x64>)
 801af60:	695b      	ldr	r3, [r3, #20]
 801af62:	4798      	blx	r3
 801af64:	68fb      	ldr	r3, [r7, #12]
 801af66:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	f383 8810 	msr	PRIMASK, r3
}
 801af6e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801af70:	bf00      	nop
 801af72:	3710      	adds	r7, #16
 801af74:	46bd      	mov	sp, r7
 801af76:	bd80      	pop	{r7, pc}
 801af78:	20002268 	.word	0x20002268
 801af7c:	0801cc38 	.word	0x0801cc38
 801af80:	2000226c 	.word	0x2000226c

0801af84 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801af84:	b480      	push	{r7}
 801af86:	b087      	sub	sp, #28
 801af88:	af00      	add	r7, sp, #0
 801af8a:	60f8      	str	r0, [r7, #12]
 801af8c:	60b9      	str	r1, [r7, #8]
 801af8e:	4613      	mov	r3, r2
 801af90:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801af92:	68fb      	ldr	r3, [r7, #12]
 801af94:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801af96:	68bb      	ldr	r3, [r7, #8]
 801af98:	613b      	str	r3, [r7, #16]

  while( size-- )
 801af9a:	e007      	b.n	801afac <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801af9c:	693a      	ldr	r2, [r7, #16]
 801af9e:	1c53      	adds	r3, r2, #1
 801afa0:	613b      	str	r3, [r7, #16]
 801afa2:	697b      	ldr	r3, [r7, #20]
 801afa4:	1c59      	adds	r1, r3, #1
 801afa6:	6179      	str	r1, [r7, #20]
 801afa8:	7812      	ldrb	r2, [r2, #0]
 801afaa:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801afac:	88fb      	ldrh	r3, [r7, #6]
 801afae:	1e5a      	subs	r2, r3, #1
 801afb0:	80fa      	strh	r2, [r7, #6]
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d1f2      	bne.n	801af9c <UTIL_MEM_cpy_8+0x18>
    }
}
 801afb6:	bf00      	nop
 801afb8:	bf00      	nop
 801afba:	371c      	adds	r7, #28
 801afbc:	46bd      	mov	sp, r7
 801afbe:	bc80      	pop	{r7}
 801afc0:	4770      	bx	lr

0801afc2 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801afc2:	b480      	push	{r7}
 801afc4:	b085      	sub	sp, #20
 801afc6:	af00      	add	r7, sp, #0
 801afc8:	6078      	str	r0, [r7, #4]
 801afca:	460b      	mov	r3, r1
 801afcc:	70fb      	strb	r3, [r7, #3]
 801afce:	4613      	mov	r3, r2
 801afd0:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801afd6:	e004      	b.n	801afe2 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801afd8:	68fb      	ldr	r3, [r7, #12]
 801afda:	1c5a      	adds	r2, r3, #1
 801afdc:	60fa      	str	r2, [r7, #12]
 801afde:	78fa      	ldrb	r2, [r7, #3]
 801afe0:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801afe2:	883b      	ldrh	r3, [r7, #0]
 801afe4:	1e5a      	subs	r2, r3, #1
 801afe6:	803a      	strh	r2, [r7, #0]
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d1f5      	bne.n	801afd8 <UTIL_MEM_set_8+0x16>
  }
}
 801afec:	bf00      	nop
 801afee:	bf00      	nop
 801aff0:	3714      	adds	r7, #20
 801aff2:	46bd      	mov	sp, r7
 801aff4:	bc80      	pop	{r7}
 801aff6:	4770      	bx	lr

0801aff8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801aff8:	b082      	sub	sp, #8
 801affa:	b480      	push	{r7}
 801affc:	b087      	sub	sp, #28
 801affe:	af00      	add	r7, sp, #0
 801b000:	60f8      	str	r0, [r7, #12]
 801b002:	1d38      	adds	r0, r7, #4
 801b004:	e880 0006 	stmia.w	r0, {r1, r2}
 801b008:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801b00a:	2300      	movs	r3, #0
 801b00c:	613b      	str	r3, [r7, #16]
 801b00e:	2300      	movs	r3, #0
 801b010:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801b012:	687a      	ldr	r2, [r7, #4]
 801b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b016:	4413      	add	r3, r2
 801b018:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801b01a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b01e:	b29a      	uxth	r2, r3
 801b020:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801b024:	b29b      	uxth	r3, r3
 801b026:	4413      	add	r3, r2
 801b028:	b29b      	uxth	r3, r3
 801b02a:	b21b      	sxth	r3, r3
 801b02c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801b02e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b036:	db0a      	blt.n	801b04e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801b038:	693b      	ldr	r3, [r7, #16]
 801b03a:	3301      	adds	r3, #1
 801b03c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801b03e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b042:	b29b      	uxth	r3, r3
 801b044:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801b048:	b29b      	uxth	r3, r3
 801b04a:	b21b      	sxth	r3, r3
 801b04c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b04e:	68fb      	ldr	r3, [r7, #12]
 801b050:	461a      	mov	r2, r3
 801b052:	f107 0310 	add.w	r3, r7, #16
 801b056:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b05a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b05e:	68f8      	ldr	r0, [r7, #12]
 801b060:	371c      	adds	r7, #28
 801b062:	46bd      	mov	sp, r7
 801b064:	bc80      	pop	{r7}
 801b066:	b002      	add	sp, #8
 801b068:	4770      	bx	lr

0801b06a <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801b06a:	b082      	sub	sp, #8
 801b06c:	b480      	push	{r7}
 801b06e:	b087      	sub	sp, #28
 801b070:	af00      	add	r7, sp, #0
 801b072:	60f8      	str	r0, [r7, #12]
 801b074:	1d38      	adds	r0, r7, #4
 801b076:	e880 0006 	stmia.w	r0, {r1, r2}
 801b07a:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801b07c:	2300      	movs	r3, #0
 801b07e:	613b      	str	r3, [r7, #16]
 801b080:	2300      	movs	r3, #0
 801b082:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801b084:	687a      	ldr	r2, [r7, #4]
 801b086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b088:	1ad3      	subs	r3, r2, r3
 801b08a:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801b08c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b090:	b29a      	uxth	r2, r3
 801b092:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801b096:	b29b      	uxth	r3, r3
 801b098:	1ad3      	subs	r3, r2, r3
 801b09a:	b29b      	uxth	r3, r3
 801b09c:	b21b      	sxth	r3, r3
 801b09e:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801b0a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	da0a      	bge.n	801b0be <SysTimeSub+0x54>
  {
    c.Seconds--;
 801b0a8:	693b      	ldr	r3, [r7, #16]
 801b0aa:	3b01      	subs	r3, #1
 801b0ac:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801b0ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b0b2:	b29b      	uxth	r3, r3
 801b0b4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801b0b8:	b29b      	uxth	r3, r3
 801b0ba:	b21b      	sxth	r3, r3
 801b0bc:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b0be:	68fb      	ldr	r3, [r7, #12]
 801b0c0:	461a      	mov	r2, r3
 801b0c2:	f107 0310 	add.w	r3, r7, #16
 801b0c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b0ca:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b0ce:	68f8      	ldr	r0, [r7, #12]
 801b0d0:	371c      	adds	r7, #28
 801b0d2:	46bd      	mov	sp, r7
 801b0d4:	bc80      	pop	{r7}
 801b0d6:	b002      	add	sp, #8
 801b0d8:	4770      	bx	lr
	...

0801b0dc <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801b0dc:	b580      	push	{r7, lr}
 801b0de:	b088      	sub	sp, #32
 801b0e0:	af02      	add	r7, sp, #8
 801b0e2:	463b      	mov	r3, r7
 801b0e4:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b0e8:	2300      	movs	r3, #0
 801b0ea:	60bb      	str	r3, [r7, #8]
 801b0ec:	2300      	movs	r3, #0
 801b0ee:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b0f0:	4b10      	ldr	r3, [pc, #64]	; (801b134 <SysTimeSet+0x58>)
 801b0f2:	691b      	ldr	r3, [r3, #16]
 801b0f4:	f107 0208 	add.w	r2, r7, #8
 801b0f8:	3204      	adds	r2, #4
 801b0fa:	4610      	mov	r0, r2
 801b0fc:	4798      	blx	r3
 801b0fe:	4603      	mov	r3, r0
 801b100:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801b102:	f107 0010 	add.w	r0, r7, #16
 801b106:	68fb      	ldr	r3, [r7, #12]
 801b108:	9300      	str	r3, [sp, #0]
 801b10a:	68bb      	ldr	r3, [r7, #8]
 801b10c:	463a      	mov	r2, r7
 801b10e:	ca06      	ldmia	r2, {r1, r2}
 801b110:	f7ff ffab 	bl	801b06a <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801b114:	4b07      	ldr	r3, [pc, #28]	; (801b134 <SysTimeSet+0x58>)
 801b116:	681b      	ldr	r3, [r3, #0]
 801b118:	693a      	ldr	r2, [r7, #16]
 801b11a:	4610      	mov	r0, r2
 801b11c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801b11e:	4b05      	ldr	r3, [pc, #20]	; (801b134 <SysTimeSet+0x58>)
 801b120:	689b      	ldr	r3, [r3, #8]
 801b122:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801b126:	4610      	mov	r0, r2
 801b128:	4798      	blx	r3
}
 801b12a:	bf00      	nop
 801b12c:	3718      	adds	r7, #24
 801b12e:	46bd      	mov	sp, r7
 801b130:	bd80      	pop	{r7, pc}
 801b132:	bf00      	nop
 801b134:	0801cd1c 	.word	0x0801cd1c

0801b138 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801b138:	b580      	push	{r7, lr}
 801b13a:	b08a      	sub	sp, #40	; 0x28
 801b13c:	af02      	add	r7, sp, #8
 801b13e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b140:	2300      	movs	r3, #0
 801b142:	61bb      	str	r3, [r7, #24]
 801b144:	2300      	movs	r3, #0
 801b146:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801b148:	2300      	movs	r3, #0
 801b14a:	613b      	str	r3, [r7, #16]
 801b14c:	2300      	movs	r3, #0
 801b14e:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b150:	4b14      	ldr	r3, [pc, #80]	; (801b1a4 <SysTimeGet+0x6c>)
 801b152:	691b      	ldr	r3, [r3, #16]
 801b154:	f107 0218 	add.w	r2, r7, #24
 801b158:	3204      	adds	r2, #4
 801b15a:	4610      	mov	r0, r2
 801b15c:	4798      	blx	r3
 801b15e:	4603      	mov	r3, r0
 801b160:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b162:	4b10      	ldr	r3, [pc, #64]	; (801b1a4 <SysTimeGet+0x6c>)
 801b164:	68db      	ldr	r3, [r3, #12]
 801b166:	4798      	blx	r3
 801b168:	4603      	mov	r3, r0
 801b16a:	b21b      	sxth	r3, r3
 801b16c:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b16e:	4b0d      	ldr	r3, [pc, #52]	; (801b1a4 <SysTimeGet+0x6c>)
 801b170:	685b      	ldr	r3, [r3, #4]
 801b172:	4798      	blx	r3
 801b174:	4603      	mov	r3, r0
 801b176:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801b178:	f107 0010 	add.w	r0, r7, #16
 801b17c:	69fb      	ldr	r3, [r7, #28]
 801b17e:	9300      	str	r3, [sp, #0]
 801b180:	69bb      	ldr	r3, [r7, #24]
 801b182:	f107 0208 	add.w	r2, r7, #8
 801b186:	ca06      	ldmia	r2, {r1, r2}
 801b188:	f7ff ff36 	bl	801aff8 <SysTimeAdd>

  return sysTime;
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	461a      	mov	r2, r3
 801b190:	f107 0310 	add.w	r3, r7, #16
 801b194:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b198:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b19c:	6878      	ldr	r0, [r7, #4]
 801b19e:	3720      	adds	r7, #32
 801b1a0:	46bd      	mov	sp, r7
 801b1a2:	bd80      	pop	{r7, pc}
 801b1a4:	0801cd1c 	.word	0x0801cd1c

0801b1a8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801b1a8:	b580      	push	{r7, lr}
 801b1aa:	b084      	sub	sp, #16
 801b1ac:	af00      	add	r7, sp, #0
 801b1ae:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	60bb      	str	r3, [r7, #8]
 801b1b4:	2300      	movs	r3, #0
 801b1b6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b1b8:	4b0a      	ldr	r3, [pc, #40]	; (801b1e4 <SysTimeGetMcuTime+0x3c>)
 801b1ba:	691b      	ldr	r3, [r3, #16]
 801b1bc:	f107 0208 	add.w	r2, r7, #8
 801b1c0:	3204      	adds	r2, #4
 801b1c2:	4610      	mov	r0, r2
 801b1c4:	4798      	blx	r3
 801b1c6:	4603      	mov	r3, r0
 801b1c8:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	461a      	mov	r2, r3
 801b1ce:	f107 0308 	add.w	r3, r7, #8
 801b1d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b1d6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b1da:	6878      	ldr	r0, [r7, #4]
 801b1dc:	3710      	adds	r7, #16
 801b1de:	46bd      	mov	sp, r7
 801b1e0:	bd80      	pop	{r7, pc}
 801b1e2:	bf00      	nop
 801b1e4:	0801cd1c 	.word	0x0801cd1c

0801b1e8 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801b1e8:	b580      	push	{r7, lr}
 801b1ea:	b088      	sub	sp, #32
 801b1ec:	af02      	add	r7, sp, #8
 801b1ee:	463b      	mov	r3, r7
 801b1f0:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b1f4:	4b0f      	ldr	r3, [pc, #60]	; (801b234 <SysTimeToMs+0x4c>)
 801b1f6:	68db      	ldr	r3, [r3, #12]
 801b1f8:	4798      	blx	r3
 801b1fa:	4603      	mov	r3, r0
 801b1fc:	b21b      	sxth	r3, r3
 801b1fe:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b200:	4b0c      	ldr	r3, [pc, #48]	; (801b234 <SysTimeToMs+0x4c>)
 801b202:	685b      	ldr	r3, [r3, #4]
 801b204:	4798      	blx	r3
 801b206:	4603      	mov	r3, r0
 801b208:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801b20a:	f107 0008 	add.w	r0, r7, #8
 801b20e:	697b      	ldr	r3, [r7, #20]
 801b210:	9300      	str	r3, [sp, #0]
 801b212:	693b      	ldr	r3, [r7, #16]
 801b214:	463a      	mov	r2, r7
 801b216:	ca06      	ldmia	r2, {r1, r2}
 801b218:	f7ff ff27 	bl	801b06a <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801b21c:	68bb      	ldr	r3, [r7, #8]
 801b21e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b222:	fb02 f303 	mul.w	r3, r2, r3
 801b226:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801b22a:	4413      	add	r3, r2
}
 801b22c:	4618      	mov	r0, r3
 801b22e:	3718      	adds	r7, #24
 801b230:	46bd      	mov	sp, r7
 801b232:	bd80      	pop	{r7, pc}
 801b234:	0801cd1c 	.word	0x0801cd1c

0801b238 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801b238:	b580      	push	{r7, lr}
 801b23a:	b08a      	sub	sp, #40	; 0x28
 801b23c:	af02      	add	r7, sp, #8
 801b23e:	6078      	str	r0, [r7, #4]
 801b240:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801b242:	683b      	ldr	r3, [r7, #0]
 801b244:	4a19      	ldr	r2, [pc, #100]	; (801b2ac <SysTimeFromMs+0x74>)
 801b246:	fba2 2303 	umull	r2, r3, r2, r3
 801b24a:	099b      	lsrs	r3, r3, #6
 801b24c:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801b24e:	69fb      	ldr	r3, [r7, #28]
 801b250:	617b      	str	r3, [r7, #20]
 801b252:	683b      	ldr	r3, [r7, #0]
 801b254:	b29a      	uxth	r2, r3
 801b256:	69fb      	ldr	r3, [r7, #28]
 801b258:	b29b      	uxth	r3, r3
 801b25a:	4619      	mov	r1, r3
 801b25c:	0149      	lsls	r1, r1, #5
 801b25e:	1ac9      	subs	r1, r1, r3
 801b260:	0089      	lsls	r1, r1, #2
 801b262:	440b      	add	r3, r1
 801b264:	00db      	lsls	r3, r3, #3
 801b266:	b29b      	uxth	r3, r3
 801b268:	1ad3      	subs	r3, r2, r3
 801b26a:	b29b      	uxth	r3, r3
 801b26c:	b21b      	sxth	r3, r3
 801b26e:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801b270:	f107 030c 	add.w	r3, r7, #12
 801b274:	2200      	movs	r2, #0
 801b276:	601a      	str	r2, [r3, #0]
 801b278:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b27a:	4b0d      	ldr	r3, [pc, #52]	; (801b2b0 <SysTimeFromMs+0x78>)
 801b27c:	68db      	ldr	r3, [r3, #12]
 801b27e:	4798      	blx	r3
 801b280:	4603      	mov	r3, r0
 801b282:	b21b      	sxth	r3, r3
 801b284:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b286:	4b0a      	ldr	r3, [pc, #40]	; (801b2b0 <SysTimeFromMs+0x78>)
 801b288:	685b      	ldr	r3, [r3, #4]
 801b28a:	4798      	blx	r3
 801b28c:	4603      	mov	r3, r0
 801b28e:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801b290:	6878      	ldr	r0, [r7, #4]
 801b292:	693b      	ldr	r3, [r7, #16]
 801b294:	9300      	str	r3, [sp, #0]
 801b296:	68fb      	ldr	r3, [r7, #12]
 801b298:	f107 0214 	add.w	r2, r7, #20
 801b29c:	ca06      	ldmia	r2, {r1, r2}
 801b29e:	f7ff feab 	bl	801aff8 <SysTimeAdd>
}
 801b2a2:	6878      	ldr	r0, [r7, #4]
 801b2a4:	3720      	adds	r7, #32
 801b2a6:	46bd      	mov	sp, r7
 801b2a8:	bd80      	pop	{r7, pc}
 801b2aa:	bf00      	nop
 801b2ac:	10624dd3 	.word	0x10624dd3
 801b2b0:	0801cd1c 	.word	0x0801cd1c

0801b2b4 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801b2b4:	b480      	push	{r7}
 801b2b6:	b085      	sub	sp, #20
 801b2b8:	af00      	add	r7, sp, #0
 801b2ba:	6078      	str	r0, [r7, #4]
  int i = 0;
 801b2bc:	2300      	movs	r3, #0
 801b2be:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801b2c0:	e00e      	b.n	801b2e0 <ee_skip_atoi+0x2c>
 801b2c2:	68fa      	ldr	r2, [r7, #12]
 801b2c4:	4613      	mov	r3, r2
 801b2c6:	009b      	lsls	r3, r3, #2
 801b2c8:	4413      	add	r3, r2
 801b2ca:	005b      	lsls	r3, r3, #1
 801b2cc:	4618      	mov	r0, r3
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	1c59      	adds	r1, r3, #1
 801b2d4:	687a      	ldr	r2, [r7, #4]
 801b2d6:	6011      	str	r1, [r2, #0]
 801b2d8:	781b      	ldrb	r3, [r3, #0]
 801b2da:	4403      	add	r3, r0
 801b2dc:	3b30      	subs	r3, #48	; 0x30
 801b2de:	60fb      	str	r3, [r7, #12]
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	781b      	ldrb	r3, [r3, #0]
 801b2e6:	2b2f      	cmp	r3, #47	; 0x2f
 801b2e8:	d904      	bls.n	801b2f4 <ee_skip_atoi+0x40>
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	781b      	ldrb	r3, [r3, #0]
 801b2f0:	2b39      	cmp	r3, #57	; 0x39
 801b2f2:	d9e6      	bls.n	801b2c2 <ee_skip_atoi+0xe>
  return i;
 801b2f4:	68fb      	ldr	r3, [r7, #12]
}
 801b2f6:	4618      	mov	r0, r3
 801b2f8:	3714      	adds	r7, #20
 801b2fa:	46bd      	mov	sp, r7
 801b2fc:	bc80      	pop	{r7}
 801b2fe:	4770      	bx	lr

0801b300 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801b300:	b480      	push	{r7}
 801b302:	b099      	sub	sp, #100	; 0x64
 801b304:	af00      	add	r7, sp, #0
 801b306:	60f8      	str	r0, [r7, #12]
 801b308:	60b9      	str	r1, [r7, #8]
 801b30a:	607a      	str	r2, [r7, #4]
 801b30c:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801b30e:	4b71      	ldr	r3, [pc, #452]	; (801b4d4 <ee_number+0x1d4>)
 801b310:	681b      	ldr	r3, [r3, #0]
 801b312:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801b314:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d002      	beq.n	801b324 <ee_number+0x24>
 801b31e:	4b6e      	ldr	r3, [pc, #440]	; (801b4d8 <ee_number+0x1d8>)
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801b324:	683b      	ldr	r3, [r7, #0]
 801b326:	2b01      	cmp	r3, #1
 801b328:	dd02      	ble.n	801b330 <ee_number+0x30>
 801b32a:	683b      	ldr	r3, [r7, #0]
 801b32c:	2b24      	cmp	r3, #36	; 0x24
 801b32e:	dd01      	ble.n	801b334 <ee_number+0x34>
 801b330:	2300      	movs	r3, #0
 801b332:	e0ca      	b.n	801b4ca <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801b334:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b336:	f003 0301 	and.w	r3, r3, #1
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	d001      	beq.n	801b342 <ee_number+0x42>
 801b33e:	2330      	movs	r3, #48	; 0x30
 801b340:	e000      	b.n	801b344 <ee_number+0x44>
 801b342:	2320      	movs	r3, #32
 801b344:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801b348:	2300      	movs	r3, #0
 801b34a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801b34e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b350:	f003 0302 	and.w	r3, r3, #2
 801b354:	2b00      	cmp	r3, #0
 801b356:	d00b      	beq.n	801b370 <ee_number+0x70>
  {
    if (num < 0)
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	da08      	bge.n	801b370 <ee_number+0x70>
    {
      sign = '-';
 801b35e:	232d      	movs	r3, #45	; 0x2d
 801b360:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	425b      	negs	r3, r3
 801b368:	607b      	str	r3, [r7, #4]
      size--;
 801b36a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b36c:	3b01      	subs	r3, #1
 801b36e:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801b370:	2300      	movs	r3, #0
 801b372:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	2b00      	cmp	r3, #0
 801b378:	d11e      	bne.n	801b3b8 <ee_number+0xb8>
    tmp[i++] = '0';
 801b37a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b37c:	1c5a      	adds	r2, r3, #1
 801b37e:	657a      	str	r2, [r7, #84]	; 0x54
 801b380:	3360      	adds	r3, #96	; 0x60
 801b382:	443b      	add	r3, r7
 801b384:	2230      	movs	r2, #48	; 0x30
 801b386:	f803 2c50 	strb.w	r2, [r3, #-80]
 801b38a:	e018      	b.n	801b3be <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	683a      	ldr	r2, [r7, #0]
 801b390:	fbb3 f1f2 	udiv	r1, r3, r2
 801b394:	fb01 f202 	mul.w	r2, r1, r2
 801b398:	1a9b      	subs	r3, r3, r2
 801b39a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801b39c:	441a      	add	r2, r3
 801b39e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b3a0:	1c59      	adds	r1, r3, #1
 801b3a2:	6579      	str	r1, [r7, #84]	; 0x54
 801b3a4:	7812      	ldrb	r2, [r2, #0]
 801b3a6:	3360      	adds	r3, #96	; 0x60
 801b3a8:	443b      	add	r3, r7
 801b3aa:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801b3ae:	687a      	ldr	r2, [r7, #4]
 801b3b0:	683b      	ldr	r3, [r7, #0]
 801b3b2:	fbb2 f3f3 	udiv	r3, r2, r3
 801b3b6:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d1e6      	bne.n	801b38c <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801b3be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b3c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b3c2:	429a      	cmp	r2, r3
 801b3c4:	dd01      	ble.n	801b3ca <ee_number+0xca>
 801b3c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b3c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801b3ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b3cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b3ce:	1ad3      	subs	r3, r2, r3
 801b3d0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801b3d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b3d4:	f003 0301 	and.w	r3, r3, #1
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d112      	bne.n	801b402 <ee_number+0x102>
 801b3dc:	e00c      	b.n	801b3f8 <ee_number+0xf8>
 801b3de:	68fb      	ldr	r3, [r7, #12]
 801b3e0:	1c5a      	adds	r2, r3, #1
 801b3e2:	60fa      	str	r2, [r7, #12]
 801b3e4:	2220      	movs	r2, #32
 801b3e6:	701a      	strb	r2, [r3, #0]
 801b3e8:	68bb      	ldr	r3, [r7, #8]
 801b3ea:	3b01      	subs	r3, #1
 801b3ec:	60bb      	str	r3, [r7, #8]
 801b3ee:	68bb      	ldr	r3, [r7, #8]
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d101      	bne.n	801b3f8 <ee_number+0xf8>
 801b3f4:	68fb      	ldr	r3, [r7, #12]
 801b3f6:	e068      	b.n	801b4ca <ee_number+0x1ca>
 801b3f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b3fa:	1e5a      	subs	r2, r3, #1
 801b3fc:	66ba      	str	r2, [r7, #104]	; 0x68
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	dced      	bgt.n	801b3de <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801b402:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801b406:	2b00      	cmp	r3, #0
 801b408:	d01b      	beq.n	801b442 <ee_number+0x142>
 801b40a:	68fb      	ldr	r3, [r7, #12]
 801b40c:	1c5a      	adds	r2, r3, #1
 801b40e:	60fa      	str	r2, [r7, #12]
 801b410:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801b414:	701a      	strb	r2, [r3, #0]
 801b416:	68bb      	ldr	r3, [r7, #8]
 801b418:	3b01      	subs	r3, #1
 801b41a:	60bb      	str	r3, [r7, #8]
 801b41c:	68bb      	ldr	r3, [r7, #8]
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d10f      	bne.n	801b442 <ee_number+0x142>
 801b422:	68fb      	ldr	r3, [r7, #12]
 801b424:	e051      	b.n	801b4ca <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801b426:	68fb      	ldr	r3, [r7, #12]
 801b428:	1c5a      	adds	r2, r3, #1
 801b42a:	60fa      	str	r2, [r7, #12]
 801b42c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801b430:	701a      	strb	r2, [r3, #0]
 801b432:	68bb      	ldr	r3, [r7, #8]
 801b434:	3b01      	subs	r3, #1
 801b436:	60bb      	str	r3, [r7, #8]
 801b438:	68bb      	ldr	r3, [r7, #8]
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d101      	bne.n	801b442 <ee_number+0x142>
 801b43e:	68fb      	ldr	r3, [r7, #12]
 801b440:	e043      	b.n	801b4ca <ee_number+0x1ca>
 801b442:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b444:	1e5a      	subs	r2, r3, #1
 801b446:	66ba      	str	r2, [r7, #104]	; 0x68
 801b448:	2b00      	cmp	r3, #0
 801b44a:	dcec      	bgt.n	801b426 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801b44c:	e00c      	b.n	801b468 <ee_number+0x168>
 801b44e:	68fb      	ldr	r3, [r7, #12]
 801b450:	1c5a      	adds	r2, r3, #1
 801b452:	60fa      	str	r2, [r7, #12]
 801b454:	2230      	movs	r2, #48	; 0x30
 801b456:	701a      	strb	r2, [r3, #0]
 801b458:	68bb      	ldr	r3, [r7, #8]
 801b45a:	3b01      	subs	r3, #1
 801b45c:	60bb      	str	r3, [r7, #8]
 801b45e:	68bb      	ldr	r3, [r7, #8]
 801b460:	2b00      	cmp	r3, #0
 801b462:	d101      	bne.n	801b468 <ee_number+0x168>
 801b464:	68fb      	ldr	r3, [r7, #12]
 801b466:	e030      	b.n	801b4ca <ee_number+0x1ca>
 801b468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b46a:	1e5a      	subs	r2, r3, #1
 801b46c:	66fa      	str	r2, [r7, #108]	; 0x6c
 801b46e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b470:	429a      	cmp	r2, r3
 801b472:	dbec      	blt.n	801b44e <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801b474:	e010      	b.n	801b498 <ee_number+0x198>
 801b476:	68fb      	ldr	r3, [r7, #12]
 801b478:	1c5a      	adds	r2, r3, #1
 801b47a:	60fa      	str	r2, [r7, #12]
 801b47c:	f107 0110 	add.w	r1, r7, #16
 801b480:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b482:	440a      	add	r2, r1
 801b484:	7812      	ldrb	r2, [r2, #0]
 801b486:	701a      	strb	r2, [r3, #0]
 801b488:	68bb      	ldr	r3, [r7, #8]
 801b48a:	3b01      	subs	r3, #1
 801b48c:	60bb      	str	r3, [r7, #8]
 801b48e:	68bb      	ldr	r3, [r7, #8]
 801b490:	2b00      	cmp	r3, #0
 801b492:	d101      	bne.n	801b498 <ee_number+0x198>
 801b494:	68fb      	ldr	r3, [r7, #12]
 801b496:	e018      	b.n	801b4ca <ee_number+0x1ca>
 801b498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b49a:	1e5a      	subs	r2, r3, #1
 801b49c:	657a      	str	r2, [r7, #84]	; 0x54
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	dce9      	bgt.n	801b476 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801b4a2:	e00c      	b.n	801b4be <ee_number+0x1be>
 801b4a4:	68fb      	ldr	r3, [r7, #12]
 801b4a6:	1c5a      	adds	r2, r3, #1
 801b4a8:	60fa      	str	r2, [r7, #12]
 801b4aa:	2220      	movs	r2, #32
 801b4ac:	701a      	strb	r2, [r3, #0]
 801b4ae:	68bb      	ldr	r3, [r7, #8]
 801b4b0:	3b01      	subs	r3, #1
 801b4b2:	60bb      	str	r3, [r7, #8]
 801b4b4:	68bb      	ldr	r3, [r7, #8]
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d101      	bne.n	801b4be <ee_number+0x1be>
 801b4ba:	68fb      	ldr	r3, [r7, #12]
 801b4bc:	e005      	b.n	801b4ca <ee_number+0x1ca>
 801b4be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b4c0:	1e5a      	subs	r2, r3, #1
 801b4c2:	66ba      	str	r2, [r7, #104]	; 0x68
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	dced      	bgt.n	801b4a4 <ee_number+0x1a4>

  return str;
 801b4c8:	68fb      	ldr	r3, [r7, #12]
}
 801b4ca:	4618      	mov	r0, r3
 801b4cc:	3764      	adds	r7, #100	; 0x64
 801b4ce:	46bd      	mov	sp, r7
 801b4d0:	bc80      	pop	{r7}
 801b4d2:	4770      	bx	lr
 801b4d4:	20000140 	.word	0x20000140
 801b4d8:	20000144 	.word	0x20000144

0801b4dc <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801b4dc:	b580      	push	{r7, lr}
 801b4de:	b092      	sub	sp, #72	; 0x48
 801b4e0:	af04      	add	r7, sp, #16
 801b4e2:	60f8      	str	r0, [r7, #12]
 801b4e4:	60b9      	str	r1, [r7, #8]
 801b4e6:	607a      	str	r2, [r7, #4]
 801b4e8:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801b4ea:	68bb      	ldr	r3, [r7, #8]
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	dc01      	bgt.n	801b4f4 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801b4f0:	2300      	movs	r3, #0
 801b4f2:	e142      	b.n	801b77a <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b4f4:	68fb      	ldr	r3, [r7, #12]
 801b4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b4f8:	e12a      	b.n	801b750 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801b4fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b4fc:	68fb      	ldr	r3, [r7, #12]
 801b4fe:	1ad2      	subs	r2, r2, r3
 801b500:	68bb      	ldr	r3, [r7, #8]
 801b502:	3b01      	subs	r3, #1
 801b504:	429a      	cmp	r2, r3
 801b506:	f280 8131 	bge.w	801b76c <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	781b      	ldrb	r3, [r3, #0]
 801b50e:	2b25      	cmp	r3, #37	; 0x25
 801b510:	d006      	beq.n	801b520 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801b512:	687a      	ldr	r2, [r7, #4]
 801b514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b516:	1c59      	adds	r1, r3, #1
 801b518:	62f9      	str	r1, [r7, #44]	; 0x2c
 801b51a:	7812      	ldrb	r2, [r2, #0]
 801b51c:	701a      	strb	r2, [r3, #0]
      continue;
 801b51e:	e114      	b.n	801b74a <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 801b520:	2300      	movs	r3, #0
 801b522:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	3301      	adds	r3, #1
 801b528:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	781b      	ldrb	r3, [r3, #0]
 801b52e:	2b30      	cmp	r3, #48	; 0x30
 801b530:	d103      	bne.n	801b53a <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801b532:	6a3b      	ldr	r3, [r7, #32]
 801b534:	f043 0301 	orr.w	r3, r3, #1
 801b538:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801b53a:	f04f 33ff 	mov.w	r3, #4294967295
 801b53e:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	781b      	ldrb	r3, [r3, #0]
 801b544:	2b2f      	cmp	r3, #47	; 0x2f
 801b546:	d908      	bls.n	801b55a <tiny_vsnprintf_like+0x7e>
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	781b      	ldrb	r3, [r3, #0]
 801b54c:	2b39      	cmp	r3, #57	; 0x39
 801b54e:	d804      	bhi.n	801b55a <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801b550:	1d3b      	adds	r3, r7, #4
 801b552:	4618      	mov	r0, r3
 801b554:	f7ff feae 	bl	801b2b4 <ee_skip_atoi>
 801b558:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801b55a:	f04f 33ff 	mov.w	r3, #4294967295
 801b55e:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801b560:	f04f 33ff 	mov.w	r3, #4294967295
 801b564:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801b566:	230a      	movs	r3, #10
 801b568:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	781b      	ldrb	r3, [r3, #0]
 801b56e:	3b58      	subs	r3, #88	; 0x58
 801b570:	2b20      	cmp	r3, #32
 801b572:	f200 8094 	bhi.w	801b69e <tiny_vsnprintf_like+0x1c2>
 801b576:	a201      	add	r2, pc, #4	; (adr r2, 801b57c <tiny_vsnprintf_like+0xa0>)
 801b578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b57c:	0801b687 	.word	0x0801b687
 801b580:	0801b69f 	.word	0x0801b69f
 801b584:	0801b69f 	.word	0x0801b69f
 801b588:	0801b69f 	.word	0x0801b69f
 801b58c:	0801b69f 	.word	0x0801b69f
 801b590:	0801b69f 	.word	0x0801b69f
 801b594:	0801b69f 	.word	0x0801b69f
 801b598:	0801b69f 	.word	0x0801b69f
 801b59c:	0801b69f 	.word	0x0801b69f
 801b5a0:	0801b69f 	.word	0x0801b69f
 801b5a4:	0801b69f 	.word	0x0801b69f
 801b5a8:	0801b60b 	.word	0x0801b60b
 801b5ac:	0801b695 	.word	0x0801b695
 801b5b0:	0801b69f 	.word	0x0801b69f
 801b5b4:	0801b69f 	.word	0x0801b69f
 801b5b8:	0801b69f 	.word	0x0801b69f
 801b5bc:	0801b69f 	.word	0x0801b69f
 801b5c0:	0801b695 	.word	0x0801b695
 801b5c4:	0801b69f 	.word	0x0801b69f
 801b5c8:	0801b69f 	.word	0x0801b69f
 801b5cc:	0801b69f 	.word	0x0801b69f
 801b5d0:	0801b69f 	.word	0x0801b69f
 801b5d4:	0801b69f 	.word	0x0801b69f
 801b5d8:	0801b69f 	.word	0x0801b69f
 801b5dc:	0801b69f 	.word	0x0801b69f
 801b5e0:	0801b69f 	.word	0x0801b69f
 801b5e4:	0801b69f 	.word	0x0801b69f
 801b5e8:	0801b62b 	.word	0x0801b62b
 801b5ec:	0801b69f 	.word	0x0801b69f
 801b5f0:	0801b6eb 	.word	0x0801b6eb
 801b5f4:	0801b69f 	.word	0x0801b69f
 801b5f8:	0801b69f 	.word	0x0801b69f
 801b5fc:	0801b68f 	.word	0x0801b68f
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801b600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b602:	1c5a      	adds	r2, r3, #1
 801b604:	62fa      	str	r2, [r7, #44]	; 0x2c
 801b606:	2220      	movs	r2, #32
 801b608:	701a      	strb	r2, [r3, #0]
 801b60a:	69fb      	ldr	r3, [r7, #28]
 801b60c:	3b01      	subs	r3, #1
 801b60e:	61fb      	str	r3, [r7, #28]
 801b610:	69fb      	ldr	r3, [r7, #28]
 801b612:	2b00      	cmp	r3, #0
 801b614:	dcf4      	bgt.n	801b600 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801b616:	683b      	ldr	r3, [r7, #0]
 801b618:	1d1a      	adds	r2, r3, #4
 801b61a:	603a      	str	r2, [r7, #0]
 801b61c:	6819      	ldr	r1, [r3, #0]
 801b61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b620:	1c5a      	adds	r2, r3, #1
 801b622:	62fa      	str	r2, [r7, #44]	; 0x2c
 801b624:	b2ca      	uxtb	r2, r1
 801b626:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801b628:	e08f      	b.n	801b74a <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801b62a:	683b      	ldr	r3, [r7, #0]
 801b62c:	1d1a      	adds	r2, r3, #4
 801b62e:	603a      	str	r2, [r7, #0]
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801b634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b636:	2b00      	cmp	r3, #0
 801b638:	d101      	bne.n	801b63e <tiny_vsnprintf_like+0x162>
 801b63a:	4b52      	ldr	r3, [pc, #328]	; (801b784 <tiny_vsnprintf_like+0x2a8>)
 801b63c:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801b63e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b640:	f7e4 fd9a 	bl	8000178 <strlen>
 801b644:	4603      	mov	r3, r0
 801b646:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801b648:	e004      	b.n	801b654 <tiny_vsnprintf_like+0x178>
 801b64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b64c:	1c5a      	adds	r2, r3, #1
 801b64e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801b650:	2220      	movs	r2, #32
 801b652:	701a      	strb	r2, [r3, #0]
 801b654:	69fb      	ldr	r3, [r7, #28]
 801b656:	1e5a      	subs	r2, r3, #1
 801b658:	61fa      	str	r2, [r7, #28]
 801b65a:	693a      	ldr	r2, [r7, #16]
 801b65c:	429a      	cmp	r2, r3
 801b65e:	dbf4      	blt.n	801b64a <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801b660:	2300      	movs	r3, #0
 801b662:	62bb      	str	r3, [r7, #40]	; 0x28
 801b664:	e00a      	b.n	801b67c <tiny_vsnprintf_like+0x1a0>
 801b666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b668:	1c53      	adds	r3, r2, #1
 801b66a:	627b      	str	r3, [r7, #36]	; 0x24
 801b66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b66e:	1c59      	adds	r1, r3, #1
 801b670:	62f9      	str	r1, [r7, #44]	; 0x2c
 801b672:	7812      	ldrb	r2, [r2, #0]
 801b674:	701a      	strb	r2, [r3, #0]
 801b676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b678:	3301      	adds	r3, #1
 801b67a:	62bb      	str	r3, [r7, #40]	; 0x28
 801b67c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b67e:	693b      	ldr	r3, [r7, #16]
 801b680:	429a      	cmp	r2, r3
 801b682:	dbf0      	blt.n	801b666 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801b684:	e061      	b.n	801b74a <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801b686:	6a3b      	ldr	r3, [r7, #32]
 801b688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b68c:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801b68e:	2310      	movs	r3, #16
 801b690:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801b692:	e02d      	b.n	801b6f0 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801b694:	6a3b      	ldr	r3, [r7, #32]
 801b696:	f043 0302 	orr.w	r3, r3, #2
 801b69a:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801b69c:	e025      	b.n	801b6ea <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	781b      	ldrb	r3, [r3, #0]
 801b6a2:	2b25      	cmp	r3, #37	; 0x25
 801b6a4:	d004      	beq.n	801b6b0 <tiny_vsnprintf_like+0x1d4>
 801b6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6a8:	1c5a      	adds	r2, r3, #1
 801b6aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 801b6ac:	2225      	movs	r2, #37	; 0x25
 801b6ae:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801b6b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	1ad2      	subs	r2, r2, r3
 801b6b6:	68bb      	ldr	r3, [r7, #8]
 801b6b8:	3b01      	subs	r3, #1
 801b6ba:	429a      	cmp	r2, r3
 801b6bc:	da17      	bge.n	801b6ee <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	781b      	ldrb	r3, [r3, #0]
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d006      	beq.n	801b6d4 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801b6c6:	687a      	ldr	r2, [r7, #4]
 801b6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6ca:	1c59      	adds	r1, r3, #1
 801b6cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 801b6ce:	7812      	ldrb	r2, [r2, #0]
 801b6d0:	701a      	strb	r2, [r3, #0]
 801b6d2:	e002      	b.n	801b6da <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	3b01      	subs	r3, #1
 801b6d8:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801b6da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b6dc:	68fb      	ldr	r3, [r7, #12]
 801b6de:	1ad2      	subs	r2, r2, r3
 801b6e0:	68bb      	ldr	r3, [r7, #8]
 801b6e2:	3b01      	subs	r3, #1
 801b6e4:	429a      	cmp	r2, r3
 801b6e6:	db2f      	blt.n	801b748 <tiny_vsnprintf_like+0x26c>
 801b6e8:	e002      	b.n	801b6f0 <tiny_vsnprintf_like+0x214>
        break;
 801b6ea:	bf00      	nop
 801b6ec:	e000      	b.n	801b6f0 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801b6ee:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801b6f0:	697b      	ldr	r3, [r7, #20]
 801b6f2:	2b6c      	cmp	r3, #108	; 0x6c
 801b6f4:	d105      	bne.n	801b702 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801b6f6:	683b      	ldr	r3, [r7, #0]
 801b6f8:	1d1a      	adds	r2, r3, #4
 801b6fa:	603a      	str	r2, [r7, #0]
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	637b      	str	r3, [r7, #52]	; 0x34
 801b700:	e00f      	b.n	801b722 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801b702:	6a3b      	ldr	r3, [r7, #32]
 801b704:	f003 0302 	and.w	r3, r3, #2
 801b708:	2b00      	cmp	r3, #0
 801b70a:	d005      	beq.n	801b718 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801b70c:	683b      	ldr	r3, [r7, #0]
 801b70e:	1d1a      	adds	r2, r3, #4
 801b710:	603a      	str	r2, [r7, #0]
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	637b      	str	r3, [r7, #52]	; 0x34
 801b716:	e004      	b.n	801b722 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801b718:	683b      	ldr	r3, [r7, #0]
 801b71a:	1d1a      	adds	r2, r3, #4
 801b71c:	603a      	str	r2, [r7, #0]
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801b722:	68bb      	ldr	r3, [r7, #8]
 801b724:	1e5a      	subs	r2, r3, #1
 801b726:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b728:	68fb      	ldr	r3, [r7, #12]
 801b72a:	1acb      	subs	r3, r1, r3
 801b72c:	1ad1      	subs	r1, r2, r3
 801b72e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b730:	6a3b      	ldr	r3, [r7, #32]
 801b732:	9302      	str	r3, [sp, #8]
 801b734:	69bb      	ldr	r3, [r7, #24]
 801b736:	9301      	str	r3, [sp, #4]
 801b738:	69fb      	ldr	r3, [r7, #28]
 801b73a:	9300      	str	r3, [sp, #0]
 801b73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b73e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b740:	f7ff fdde 	bl	801b300 <ee_number>
 801b744:	62f8      	str	r0, [r7, #44]	; 0x2c
 801b746:	e000      	b.n	801b74a <tiny_vsnprintf_like+0x26e>
        continue;
 801b748:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b74a:	687b      	ldr	r3, [r7, #4]
 801b74c:	3301      	adds	r3, #1
 801b74e:	607b      	str	r3, [r7, #4]
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	781b      	ldrb	r3, [r3, #0]
 801b754:	2b00      	cmp	r3, #0
 801b756:	f47f aed0 	bne.w	801b4fa <tiny_vsnprintf_like+0x1e>
 801b75a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b75c:	68fb      	ldr	r3, [r7, #12]
 801b75e:	1ad2      	subs	r2, r2, r3
 801b760:	68bb      	ldr	r3, [r7, #8]
 801b762:	3b01      	subs	r3, #1
 801b764:	429a      	cmp	r2, r3
 801b766:	f6bf aec8 	bge.w	801b4fa <tiny_vsnprintf_like+0x1e>
 801b76a:	e000      	b.n	801b76e <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801b76c:	bf00      	nop
  }

  *str = '\0';
 801b76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b770:	2200      	movs	r2, #0
 801b772:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801b774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b776:	68fb      	ldr	r3, [r7, #12]
 801b778:	1ad3      	subs	r3, r2, r3
}
 801b77a:	4618      	mov	r0, r3
 801b77c:	3738      	adds	r7, #56	; 0x38
 801b77e:	46bd      	mov	sp, r7
 801b780:	bd80      	pop	{r7, pc}
 801b782:	bf00      	nop
 801b784:	0801cc30 	.word	0x0801cc30

0801b788 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801b788:	b580      	push	{r7, lr}
 801b78a:	b090      	sub	sp, #64	; 0x40
 801b78c:	af00      	add	r7, sp, #0
 801b78e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801b790:	4b73      	ldr	r3, [pc, #460]	; (801b960 <UTIL_SEQ_Run+0x1d8>)
 801b792:	681b      	ldr	r3, [r3, #0]
 801b794:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801b796:	4b72      	ldr	r3, [pc, #456]	; (801b960 <UTIL_SEQ_Run+0x1d8>)
 801b798:	681a      	ldr	r2, [r3, #0]
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	4013      	ands	r3, r2
 801b79e:	4a70      	ldr	r2, [pc, #448]	; (801b960 <UTIL_SEQ_Run+0x1d8>)
 801b7a0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801b7a2:	4b70      	ldr	r3, [pc, #448]	; (801b964 <UTIL_SEQ_Run+0x1dc>)
 801b7a4:	681b      	ldr	r3, [r3, #0]
 801b7a6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801b7a8:	4b6f      	ldr	r3, [pc, #444]	; (801b968 <UTIL_SEQ_Run+0x1e0>)
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801b7ae:	4b6f      	ldr	r3, [pc, #444]	; (801b96c <UTIL_SEQ_Run+0x1e4>)
 801b7b0:	681b      	ldr	r3, [r3, #0]
 801b7b2:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801b7b4:	4b6e      	ldr	r3, [pc, #440]	; (801b970 <UTIL_SEQ_Run+0x1e8>)
 801b7b6:	681b      	ldr	r3, [r3, #0]
 801b7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801b7ba:	e08d      	b.n	801b8d8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801b7bc:	2300      	movs	r3, #0
 801b7be:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801b7c0:	e002      	b.n	801b7c8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801b7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b7c4:	3301      	adds	r3, #1
 801b7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801b7c8:	4a6a      	ldr	r2, [pc, #424]	; (801b974 <UTIL_SEQ_Run+0x1ec>)
 801b7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b7cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7d2:	401a      	ands	r2, r3
 801b7d4:	4b62      	ldr	r3, [pc, #392]	; (801b960 <UTIL_SEQ_Run+0x1d8>)
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	4013      	ands	r3, r2
 801b7da:	2b00      	cmp	r3, #0
 801b7dc:	d0f1      	beq.n	801b7c2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801b7de:	4a65      	ldr	r2, [pc, #404]	; (801b974 <UTIL_SEQ_Run+0x1ec>)
 801b7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b7e2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7e8:	401a      	ands	r2, r3
 801b7ea:	4b5d      	ldr	r3, [pc, #372]	; (801b960 <UTIL_SEQ_Run+0x1d8>)
 801b7ec:	681b      	ldr	r3, [r3, #0]
 801b7ee:	4013      	ands	r3, r2
 801b7f0:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801b7f2:	4a60      	ldr	r2, [pc, #384]	; (801b974 <UTIL_SEQ_Run+0x1ec>)
 801b7f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b7f6:	00db      	lsls	r3, r3, #3
 801b7f8:	4413      	add	r3, r2
 801b7fa:	685a      	ldr	r2, [r3, #4]
 801b7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7fe:	4013      	ands	r3, r2
 801b800:	2b00      	cmp	r3, #0
 801b802:	d106      	bne.n	801b812 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801b804:	4a5b      	ldr	r2, [pc, #364]	; (801b974 <UTIL_SEQ_Run+0x1ec>)
 801b806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b808:	00db      	lsls	r3, r3, #3
 801b80a:	4413      	add	r3, r2
 801b80c:	f04f 32ff 	mov.w	r2, #4294967295
 801b810:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801b812:	4a58      	ldr	r2, [pc, #352]	; (801b974 <UTIL_SEQ_Run+0x1ec>)
 801b814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b816:	00db      	lsls	r3, r3, #3
 801b818:	4413      	add	r3, r2
 801b81a:	685a      	ldr	r2, [r3, #4]
 801b81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b81e:	4013      	ands	r3, r2
 801b820:	4618      	mov	r0, r3
 801b822:	f000 f907 	bl	801ba34 <SEQ_BitPosition>
 801b826:	4603      	mov	r3, r0
 801b828:	461a      	mov	r2, r3
 801b82a:	4b53      	ldr	r3, [pc, #332]	; (801b978 <UTIL_SEQ_Run+0x1f0>)
 801b82c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801b82e:	4a51      	ldr	r2, [pc, #324]	; (801b974 <UTIL_SEQ_Run+0x1ec>)
 801b830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b832:	00db      	lsls	r3, r3, #3
 801b834:	4413      	add	r3, r2
 801b836:	685a      	ldr	r2, [r3, #4]
 801b838:	4b4f      	ldr	r3, [pc, #316]	; (801b978 <UTIL_SEQ_Run+0x1f0>)
 801b83a:	681b      	ldr	r3, [r3, #0]
 801b83c:	2101      	movs	r1, #1
 801b83e:	fa01 f303 	lsl.w	r3, r1, r3
 801b842:	43db      	mvns	r3, r3
 801b844:	401a      	ands	r2, r3
 801b846:	494b      	ldr	r1, [pc, #300]	; (801b974 <UTIL_SEQ_Run+0x1ec>)
 801b848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b84a:	00db      	lsls	r3, r3, #3
 801b84c:	440b      	add	r3, r1
 801b84e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b850:	f3ef 8310 	mrs	r3, PRIMASK
 801b854:	61bb      	str	r3, [r7, #24]
  return(result);
 801b856:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b858:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801b85a:	b672      	cpsid	i
}
 801b85c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801b85e:	4b46      	ldr	r3, [pc, #280]	; (801b978 <UTIL_SEQ_Run+0x1f0>)
 801b860:	681b      	ldr	r3, [r3, #0]
 801b862:	2201      	movs	r2, #1
 801b864:	fa02 f303 	lsl.w	r3, r2, r3
 801b868:	43da      	mvns	r2, r3
 801b86a:	4b3e      	ldr	r3, [pc, #248]	; (801b964 <UTIL_SEQ_Run+0x1dc>)
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	4013      	ands	r3, r2
 801b870:	4a3c      	ldr	r2, [pc, #240]	; (801b964 <UTIL_SEQ_Run+0x1dc>)
 801b872:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b874:	2301      	movs	r3, #1
 801b876:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b878:	e013      	b.n	801b8a2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801b87a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b87c:	3b01      	subs	r3, #1
 801b87e:	4a3d      	ldr	r2, [pc, #244]	; (801b974 <UTIL_SEQ_Run+0x1ec>)
 801b880:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801b884:	4b3c      	ldr	r3, [pc, #240]	; (801b978 <UTIL_SEQ_Run+0x1f0>)
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	2201      	movs	r2, #1
 801b88a:	fa02 f303 	lsl.w	r3, r2, r3
 801b88e:	43da      	mvns	r2, r3
 801b890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b892:	3b01      	subs	r3, #1
 801b894:	400a      	ands	r2, r1
 801b896:	4937      	ldr	r1, [pc, #220]	; (801b974 <UTIL_SEQ_Run+0x1ec>)
 801b898:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b89c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b89e:	3b01      	subs	r3, #1
 801b8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b8a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d1e8      	bne.n	801b87a <UTIL_SEQ_Run+0xf2>
 801b8a8:	6a3b      	ldr	r3, [r7, #32]
 801b8aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b8ac:	697b      	ldr	r3, [r7, #20]
 801b8ae:	f383 8810 	msr	PRIMASK, r3
}
 801b8b2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801b8b4:	4b30      	ldr	r3, [pc, #192]	; (801b978 <UTIL_SEQ_Run+0x1f0>)
 801b8b6:	681b      	ldr	r3, [r3, #0]
 801b8b8:	4a30      	ldr	r2, [pc, #192]	; (801b97c <UTIL_SEQ_Run+0x1f4>)
 801b8ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b8be:	4798      	blx	r3

    local_taskset = TaskSet;
 801b8c0:	4b28      	ldr	r3, [pc, #160]	; (801b964 <UTIL_SEQ_Run+0x1dc>)
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801b8c6:	4b28      	ldr	r3, [pc, #160]	; (801b968 <UTIL_SEQ_Run+0x1e0>)
 801b8c8:	681b      	ldr	r3, [r3, #0]
 801b8ca:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801b8cc:	4b27      	ldr	r3, [pc, #156]	; (801b96c <UTIL_SEQ_Run+0x1e4>)
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801b8d2:	4b27      	ldr	r3, [pc, #156]	; (801b970 <UTIL_SEQ_Run+0x1e8>)
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801b8d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8dc:	401a      	ands	r2, r3
 801b8de:	4b20      	ldr	r3, [pc, #128]	; (801b960 <UTIL_SEQ_Run+0x1d8>)
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	4013      	ands	r3, r2
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	d005      	beq.n	801b8f4 <UTIL_SEQ_Run+0x16c>
 801b8e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8ec:	4013      	ands	r3, r2
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	f43f af64 	beq.w	801b7bc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801b8f4:	4b20      	ldr	r3, [pc, #128]	; (801b978 <UTIL_SEQ_Run+0x1f0>)
 801b8f6:	f04f 32ff 	mov.w	r2, #4294967295
 801b8fa:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801b8fc:	f000 f88e 	bl	801ba1c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b900:	f3ef 8310 	mrs	r3, PRIMASK
 801b904:	613b      	str	r3, [r7, #16]
  return(result);
 801b906:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801b908:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b90a:	b672      	cpsid	i
}
 801b90c:	bf00      	nop
  local_taskset = TaskSet;
 801b90e:	4b15      	ldr	r3, [pc, #84]	; (801b964 <UTIL_SEQ_Run+0x1dc>)
 801b910:	681b      	ldr	r3, [r3, #0]
 801b912:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801b914:	4b14      	ldr	r3, [pc, #80]	; (801b968 <UTIL_SEQ_Run+0x1e0>)
 801b916:	681b      	ldr	r3, [r3, #0]
 801b918:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801b91a:	4b14      	ldr	r3, [pc, #80]	; (801b96c <UTIL_SEQ_Run+0x1e4>)
 801b91c:	681b      	ldr	r3, [r3, #0]
 801b91e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801b920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b924:	401a      	ands	r2, r3
 801b926:	4b0e      	ldr	r3, [pc, #56]	; (801b960 <UTIL_SEQ_Run+0x1d8>)
 801b928:	681b      	ldr	r3, [r3, #0]
 801b92a:	4013      	ands	r3, r2
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	d107      	bne.n	801b940 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801b930:	4b0f      	ldr	r3, [pc, #60]	; (801b970 <UTIL_SEQ_Run+0x1e8>)
 801b932:	681a      	ldr	r2, [r3, #0]
 801b934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b936:	4013      	ands	r3, r2
 801b938:	2b00      	cmp	r3, #0
 801b93a:	d101      	bne.n	801b940 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801b93c:	f7e6 fb96 	bl	800206c <UTIL_SEQ_Idle>
 801b940:	69fb      	ldr	r3, [r7, #28]
 801b942:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b944:	68fb      	ldr	r3, [r7, #12]
 801b946:	f383 8810 	msr	PRIMASK, r3
}
 801b94a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801b94c:	f000 f86c 	bl	801ba28 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801b950:	4a03      	ldr	r2, [pc, #12]	; (801b960 <UTIL_SEQ_Run+0x1d8>)
 801b952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b954:	6013      	str	r3, [r2, #0]

  return;
 801b956:	bf00      	nop
}
 801b958:	3740      	adds	r7, #64	; 0x40
 801b95a:	46bd      	mov	sp, r7
 801b95c:	bd80      	pop	{r7, pc}
 801b95e:	bf00      	nop
 801b960:	2000014c 	.word	0x2000014c
 801b964:	20002270 	.word	0x20002270
 801b968:	20002274 	.word	0x20002274
 801b96c:	20000148 	.word	0x20000148
 801b970:	20002278 	.word	0x20002278
 801b974:	20002290 	.word	0x20002290
 801b978:	2000227c 	.word	0x2000227c
 801b97c:	20002280 	.word	0x20002280

0801b980 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801b980:	b580      	push	{r7, lr}
 801b982:	b088      	sub	sp, #32
 801b984:	af00      	add	r7, sp, #0
 801b986:	60f8      	str	r0, [r7, #12]
 801b988:	60b9      	str	r1, [r7, #8]
 801b98a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b98c:	f3ef 8310 	mrs	r3, PRIMASK
 801b990:	617b      	str	r3, [r7, #20]
  return(result);
 801b992:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801b994:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b996:	b672      	cpsid	i
}
 801b998:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801b99a:	68f8      	ldr	r0, [r7, #12]
 801b99c:	f000 f84a 	bl	801ba34 <SEQ_BitPosition>
 801b9a0:	4603      	mov	r3, r0
 801b9a2:	4619      	mov	r1, r3
 801b9a4:	4a06      	ldr	r2, [pc, #24]	; (801b9c0 <UTIL_SEQ_RegTask+0x40>)
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801b9ac:	69fb      	ldr	r3, [r7, #28]
 801b9ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9b0:	69bb      	ldr	r3, [r7, #24]
 801b9b2:	f383 8810 	msr	PRIMASK, r3
}
 801b9b6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801b9b8:	bf00      	nop
}
 801b9ba:	3720      	adds	r7, #32
 801b9bc:	46bd      	mov	sp, r7
 801b9be:	bd80      	pop	{r7, pc}
 801b9c0:	20002280 	.word	0x20002280

0801b9c4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801b9c4:	b480      	push	{r7}
 801b9c6:	b087      	sub	sp, #28
 801b9c8:	af00      	add	r7, sp, #0
 801b9ca:	6078      	str	r0, [r7, #4]
 801b9cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b9ce:	f3ef 8310 	mrs	r3, PRIMASK
 801b9d2:	60fb      	str	r3, [r7, #12]
  return(result);
 801b9d4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b9d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b9d8:	b672      	cpsid	i
}
 801b9da:	bf00      	nop

  TaskSet |= TaskId_bm;
 801b9dc:	4b0d      	ldr	r3, [pc, #52]	; (801ba14 <UTIL_SEQ_SetTask+0x50>)
 801b9de:	681a      	ldr	r2, [r3, #0]
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	4313      	orrs	r3, r2
 801b9e4:	4a0b      	ldr	r2, [pc, #44]	; (801ba14 <UTIL_SEQ_SetTask+0x50>)
 801b9e6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801b9e8:	4a0b      	ldr	r2, [pc, #44]	; (801ba18 <UTIL_SEQ_SetTask+0x54>)
 801b9ea:	683b      	ldr	r3, [r7, #0]
 801b9ec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	431a      	orrs	r2, r3
 801b9f4:	4908      	ldr	r1, [pc, #32]	; (801ba18 <UTIL_SEQ_SetTask+0x54>)
 801b9f6:	683b      	ldr	r3, [r7, #0]
 801b9f8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801b9fc:	697b      	ldr	r3, [r7, #20]
 801b9fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba00:	693b      	ldr	r3, [r7, #16]
 801ba02:	f383 8810 	msr	PRIMASK, r3
}
 801ba06:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801ba08:	bf00      	nop
}
 801ba0a:	371c      	adds	r7, #28
 801ba0c:	46bd      	mov	sp, r7
 801ba0e:	bc80      	pop	{r7}
 801ba10:	4770      	bx	lr
 801ba12:	bf00      	nop
 801ba14:	20002270 	.word	0x20002270
 801ba18:	20002290 	.word	0x20002290

0801ba1c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801ba1c:	b480      	push	{r7}
 801ba1e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ba20:	bf00      	nop
}
 801ba22:	46bd      	mov	sp, r7
 801ba24:	bc80      	pop	{r7}
 801ba26:	4770      	bx	lr

0801ba28 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801ba28:	b480      	push	{r7}
 801ba2a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ba2c:	bf00      	nop
}
 801ba2e:	46bd      	mov	sp, r7
 801ba30:	bc80      	pop	{r7}
 801ba32:	4770      	bx	lr

0801ba34 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801ba34:	b480      	push	{r7}
 801ba36:	b085      	sub	sp, #20
 801ba38:	af00      	add	r7, sp, #0
 801ba3a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801ba44:	68bb      	ldr	r3, [r7, #8]
 801ba46:	0c1b      	lsrs	r3, r3, #16
 801ba48:	041b      	lsls	r3, r3, #16
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	d104      	bne.n	801ba58 <SEQ_BitPosition+0x24>
 801ba4e:	2310      	movs	r3, #16
 801ba50:	73fb      	strb	r3, [r7, #15]
 801ba52:	68bb      	ldr	r3, [r7, #8]
 801ba54:	041b      	lsls	r3, r3, #16
 801ba56:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801ba58:	68bb      	ldr	r3, [r7, #8]
 801ba5a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	d105      	bne.n	801ba6e <SEQ_BitPosition+0x3a>
 801ba62:	7bfb      	ldrb	r3, [r7, #15]
 801ba64:	3308      	adds	r3, #8
 801ba66:	73fb      	strb	r3, [r7, #15]
 801ba68:	68bb      	ldr	r3, [r7, #8]
 801ba6a:	021b      	lsls	r3, r3, #8
 801ba6c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801ba6e:	68bb      	ldr	r3, [r7, #8]
 801ba70:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d105      	bne.n	801ba84 <SEQ_BitPosition+0x50>
 801ba78:	7bfb      	ldrb	r3, [r7, #15]
 801ba7a:	3304      	adds	r3, #4
 801ba7c:	73fb      	strb	r3, [r7, #15]
 801ba7e:	68bb      	ldr	r3, [r7, #8]
 801ba80:	011b      	lsls	r3, r3, #4
 801ba82:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801ba84:	68bb      	ldr	r3, [r7, #8]
 801ba86:	0f1b      	lsrs	r3, r3, #28
 801ba88:	4a06      	ldr	r2, [pc, #24]	; (801baa4 <SEQ_BitPosition+0x70>)
 801ba8a:	5cd2      	ldrb	r2, [r2, r3]
 801ba8c:	7bfb      	ldrb	r3, [r7, #15]
 801ba8e:	4413      	add	r3, r2
 801ba90:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801ba92:	7bfb      	ldrb	r3, [r7, #15]
 801ba94:	f1c3 031f 	rsb	r3, r3, #31
 801ba98:	b2db      	uxtb	r3, r3
}
 801ba9a:	4618      	mov	r0, r3
 801ba9c:	3714      	adds	r7, #20
 801ba9e:	46bd      	mov	sp, r7
 801baa0:	bc80      	pop	{r7}
 801baa2:	4770      	bx	lr
 801baa4:	0801d1e8 	.word	0x0801d1e8

0801baa8 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801baa8:	b580      	push	{r7, lr}
 801baaa:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801baac:	4b04      	ldr	r3, [pc, #16]	; (801bac0 <UTIL_TIMER_Init+0x18>)
 801baae:	2200      	movs	r2, #0
 801bab0:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801bab2:	4b04      	ldr	r3, [pc, #16]	; (801bac4 <UTIL_TIMER_Init+0x1c>)
 801bab4:	681b      	ldr	r3, [r3, #0]
 801bab6:	4798      	blx	r3
 801bab8:	4603      	mov	r3, r0
}
 801baba:	4618      	mov	r0, r3
 801babc:	bd80      	pop	{r7, pc}
 801babe:	bf00      	nop
 801bac0:	20002298 	.word	0x20002298
 801bac4:	0801ccf0 	.word	0x0801ccf0

0801bac8 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801bac8:	b580      	push	{r7, lr}
 801baca:	b084      	sub	sp, #16
 801bacc:	af00      	add	r7, sp, #0
 801bace:	60f8      	str	r0, [r7, #12]
 801bad0:	60b9      	str	r1, [r7, #8]
 801bad2:	603b      	str	r3, [r7, #0]
 801bad4:	4613      	mov	r3, r2
 801bad6:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801bad8:	68fb      	ldr	r3, [r7, #12]
 801bada:	2b00      	cmp	r3, #0
 801badc:	d023      	beq.n	801bb26 <UTIL_TIMER_Create+0x5e>
 801bade:	683b      	ldr	r3, [r7, #0]
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d020      	beq.n	801bb26 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	2200      	movs	r2, #0
 801bae8:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801baea:	4b11      	ldr	r3, [pc, #68]	; (801bb30 <UTIL_TIMER_Create+0x68>)
 801baec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801baee:	68b8      	ldr	r0, [r7, #8]
 801baf0:	4798      	blx	r3
 801baf2:	4602      	mov	r2, r0
 801baf4:	68fb      	ldr	r3, [r7, #12]
 801baf6:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801baf8:	68fb      	ldr	r3, [r7, #12]
 801bafa:	2200      	movs	r2, #0
 801bafc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801bafe:	68fb      	ldr	r3, [r7, #12]
 801bb00:	2200      	movs	r2, #0
 801bb02:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801bb04:	68fb      	ldr	r3, [r7, #12]
 801bb06:	2200      	movs	r2, #0
 801bb08:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801bb0a:	68fb      	ldr	r3, [r7, #12]
 801bb0c:	683a      	ldr	r2, [r7, #0]
 801bb0e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801bb10:	68fb      	ldr	r3, [r7, #12]
 801bb12:	69ba      	ldr	r2, [r7, #24]
 801bb14:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801bb16:	68fb      	ldr	r3, [r7, #12]
 801bb18:	79fa      	ldrb	r2, [r7, #7]
 801bb1a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801bb1c:	68fb      	ldr	r3, [r7, #12]
 801bb1e:	2200      	movs	r2, #0
 801bb20:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801bb22:	2300      	movs	r3, #0
 801bb24:	e000      	b.n	801bb28 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801bb26:	2301      	movs	r3, #1
  }
}
 801bb28:	4618      	mov	r0, r3
 801bb2a:	3710      	adds	r7, #16
 801bb2c:	46bd      	mov	sp, r7
 801bb2e:	bd80      	pop	{r7, pc}
 801bb30:	0801ccf0 	.word	0x0801ccf0

0801bb34 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801bb34:	b580      	push	{r7, lr}
 801bb36:	b08a      	sub	sp, #40	; 0x28
 801bb38:	af00      	add	r7, sp, #0
 801bb3a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801bb3c:	2300      	movs	r3, #0
 801bb3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	2b00      	cmp	r3, #0
 801bb46:	d056      	beq.n	801bbf6 <UTIL_TIMER_Start+0xc2>
 801bb48:	6878      	ldr	r0, [r7, #4]
 801bb4a:	f000 f9a9 	bl	801bea0 <TimerExists>
 801bb4e:	4603      	mov	r3, r0
 801bb50:	f083 0301 	eor.w	r3, r3, #1
 801bb54:	b2db      	uxtb	r3, r3
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d04d      	beq.n	801bbf6 <UTIL_TIMER_Start+0xc2>
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	7a5b      	ldrb	r3, [r3, #9]
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	d149      	bne.n	801bbf6 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb62:	f3ef 8310 	mrs	r3, PRIMASK
 801bb66:	613b      	str	r3, [r7, #16]
  return(result);
 801bb68:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801bb6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb6c:	b672      	cpsid	i
}
 801bb6e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	685b      	ldr	r3, [r3, #4]
 801bb74:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801bb76:	4b24      	ldr	r3, [pc, #144]	; (801bc08 <UTIL_TIMER_Start+0xd4>)
 801bb78:	6a1b      	ldr	r3, [r3, #32]
 801bb7a:	4798      	blx	r3
 801bb7c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801bb7e:	6a3a      	ldr	r2, [r7, #32]
 801bb80:	69bb      	ldr	r3, [r7, #24]
 801bb82:	429a      	cmp	r2, r3
 801bb84:	d201      	bcs.n	801bb8a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801bb86:	69bb      	ldr	r3, [r7, #24]
 801bb88:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	6a3a      	ldr	r2, [r7, #32]
 801bb8e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	2200      	movs	r2, #0
 801bb94:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	2201      	movs	r2, #1
 801bb9a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	2200      	movs	r2, #0
 801bba0:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801bba2:	4b1a      	ldr	r3, [pc, #104]	; (801bc0c <UTIL_TIMER_Start+0xd8>)
 801bba4:	681b      	ldr	r3, [r3, #0]
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d106      	bne.n	801bbb8 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801bbaa:	4b17      	ldr	r3, [pc, #92]	; (801bc08 <UTIL_TIMER_Start+0xd4>)
 801bbac:	691b      	ldr	r3, [r3, #16]
 801bbae:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801bbb0:	6878      	ldr	r0, [r7, #4]
 801bbb2:	f000 f9eb 	bl	801bf8c <TimerInsertNewHeadTimer>
 801bbb6:	e017      	b.n	801bbe8 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801bbb8:	4b13      	ldr	r3, [pc, #76]	; (801bc08 <UTIL_TIMER_Start+0xd4>)
 801bbba:	699b      	ldr	r3, [r3, #24]
 801bbbc:	4798      	blx	r3
 801bbbe:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	681a      	ldr	r2, [r3, #0]
 801bbc4:	697b      	ldr	r3, [r7, #20]
 801bbc6:	441a      	add	r2, r3
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	681a      	ldr	r2, [r3, #0]
 801bbd0:	4b0e      	ldr	r3, [pc, #56]	; (801bc0c <UTIL_TIMER_Start+0xd8>)
 801bbd2:	681b      	ldr	r3, [r3, #0]
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	429a      	cmp	r2, r3
 801bbd8:	d203      	bcs.n	801bbe2 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801bbda:	6878      	ldr	r0, [r7, #4]
 801bbdc:	f000 f9d6 	bl	801bf8c <TimerInsertNewHeadTimer>
 801bbe0:	e002      	b.n	801bbe8 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801bbe2:	6878      	ldr	r0, [r7, #4]
 801bbe4:	f000 f9a2 	bl	801bf2c <TimerInsertTimer>
 801bbe8:	69fb      	ldr	r3, [r7, #28]
 801bbea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbec:	68fb      	ldr	r3, [r7, #12]
 801bbee:	f383 8810 	msr	PRIMASK, r3
}
 801bbf2:	bf00      	nop
  {
 801bbf4:	e002      	b.n	801bbfc <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801bbf6:	2301      	movs	r3, #1
 801bbf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801bbfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801bc00:	4618      	mov	r0, r3
 801bc02:	3728      	adds	r7, #40	; 0x28
 801bc04:	46bd      	mov	sp, r7
 801bc06:	bd80      	pop	{r7, pc}
 801bc08:	0801ccf0 	.word	0x0801ccf0
 801bc0c:	20002298 	.word	0x20002298

0801bc10 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801bc10:	b580      	push	{r7, lr}
 801bc12:	b088      	sub	sp, #32
 801bc14:	af00      	add	r7, sp, #0
 801bc16:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801bc18:	2300      	movs	r3, #0
 801bc1a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	d05b      	beq.n	801bcda <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc22:	f3ef 8310 	mrs	r3, PRIMASK
 801bc26:	60fb      	str	r3, [r7, #12]
  return(result);
 801bc28:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801bc2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc2c:	b672      	cpsid	i
}
 801bc2e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801bc30:	4b2d      	ldr	r3, [pc, #180]	; (801bce8 <UTIL_TIMER_Stop+0xd8>)
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801bc36:	4b2c      	ldr	r3, [pc, #176]	; (801bce8 <UTIL_TIMER_Stop+0xd8>)
 801bc38:	681b      	ldr	r3, [r3, #0]
 801bc3a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	2201      	movs	r2, #1
 801bc40:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801bc42:	4b29      	ldr	r3, [pc, #164]	; (801bce8 <UTIL_TIMER_Stop+0xd8>)
 801bc44:	681b      	ldr	r3, [r3, #0]
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d041      	beq.n	801bcce <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	2200      	movs	r2, #0
 801bc4e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801bc50:	4b25      	ldr	r3, [pc, #148]	; (801bce8 <UTIL_TIMER_Stop+0xd8>)
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	687a      	ldr	r2, [r7, #4]
 801bc56:	429a      	cmp	r2, r3
 801bc58:	d134      	bne.n	801bcc4 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801bc5a:	4b23      	ldr	r3, [pc, #140]	; (801bce8 <UTIL_TIMER_Stop+0xd8>)
 801bc5c:	681b      	ldr	r3, [r3, #0]
 801bc5e:	2200      	movs	r2, #0
 801bc60:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801bc62:	4b21      	ldr	r3, [pc, #132]	; (801bce8 <UTIL_TIMER_Stop+0xd8>)
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	695b      	ldr	r3, [r3, #20]
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	d00a      	beq.n	801bc82 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801bc6c:	4b1e      	ldr	r3, [pc, #120]	; (801bce8 <UTIL_TIMER_Stop+0xd8>)
 801bc6e:	681b      	ldr	r3, [r3, #0]
 801bc70:	695b      	ldr	r3, [r3, #20]
 801bc72:	4a1d      	ldr	r2, [pc, #116]	; (801bce8 <UTIL_TIMER_Stop+0xd8>)
 801bc74:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801bc76:	4b1c      	ldr	r3, [pc, #112]	; (801bce8 <UTIL_TIMER_Stop+0xd8>)
 801bc78:	681b      	ldr	r3, [r3, #0]
 801bc7a:	4618      	mov	r0, r3
 801bc7c:	f000 f92c 	bl	801bed8 <TimerSetTimeout>
 801bc80:	e023      	b.n	801bcca <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801bc82:	4b1a      	ldr	r3, [pc, #104]	; (801bcec <UTIL_TIMER_Stop+0xdc>)
 801bc84:	68db      	ldr	r3, [r3, #12]
 801bc86:	4798      	blx	r3
            TimerListHead = NULL;
 801bc88:	4b17      	ldr	r3, [pc, #92]	; (801bce8 <UTIL_TIMER_Stop+0xd8>)
 801bc8a:	2200      	movs	r2, #0
 801bc8c:	601a      	str	r2, [r3, #0]
 801bc8e:	e01c      	b.n	801bcca <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801bc90:	697a      	ldr	r2, [r7, #20]
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	429a      	cmp	r2, r3
 801bc96:	d110      	bne.n	801bcba <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801bc98:	697b      	ldr	r3, [r7, #20]
 801bc9a:	695b      	ldr	r3, [r3, #20]
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d006      	beq.n	801bcae <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801bca0:	697b      	ldr	r3, [r7, #20]
 801bca2:	695b      	ldr	r3, [r3, #20]
 801bca4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801bca6:	69bb      	ldr	r3, [r7, #24]
 801bca8:	697a      	ldr	r2, [r7, #20]
 801bcaa:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801bcac:	e00d      	b.n	801bcca <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801bcae:	2300      	movs	r3, #0
 801bcb0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801bcb2:	69bb      	ldr	r3, [r7, #24]
 801bcb4:	697a      	ldr	r2, [r7, #20]
 801bcb6:	615a      	str	r2, [r3, #20]
            break;
 801bcb8:	e007      	b.n	801bcca <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801bcba:	697b      	ldr	r3, [r7, #20]
 801bcbc:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801bcbe:	697b      	ldr	r3, [r7, #20]
 801bcc0:	695b      	ldr	r3, [r3, #20]
 801bcc2:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801bcc4:	697b      	ldr	r3, [r7, #20]
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d1e2      	bne.n	801bc90 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801bcca:	2300      	movs	r3, #0
 801bccc:	77fb      	strb	r3, [r7, #31]
 801bcce:	693b      	ldr	r3, [r7, #16]
 801bcd0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bcd2:	68bb      	ldr	r3, [r7, #8]
 801bcd4:	f383 8810 	msr	PRIMASK, r3
}
 801bcd8:	e001      	b.n	801bcde <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801bcda:	2301      	movs	r3, #1
 801bcdc:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801bcde:	7ffb      	ldrb	r3, [r7, #31]
}
 801bce0:	4618      	mov	r0, r3
 801bce2:	3720      	adds	r7, #32
 801bce4:	46bd      	mov	sp, r7
 801bce6:	bd80      	pop	{r7, pc}
 801bce8:	20002298 	.word	0x20002298
 801bcec:	0801ccf0 	.word	0x0801ccf0

0801bcf0 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801bcf0:	b580      	push	{r7, lr}
 801bcf2:	b084      	sub	sp, #16
 801bcf4:	af00      	add	r7, sp, #0
 801bcf6:	6078      	str	r0, [r7, #4]
 801bcf8:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801bcfa:	2300      	movs	r3, #0
 801bcfc:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	d102      	bne.n	801bd0a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801bd04:	2301      	movs	r3, #1
 801bd06:	73fb      	strb	r3, [r7, #15]
 801bd08:	e014      	b.n	801bd34 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801bd0a:	4b0d      	ldr	r3, [pc, #52]	; (801bd40 <UTIL_TIMER_SetPeriod+0x50>)
 801bd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd0e:	6838      	ldr	r0, [r7, #0]
 801bd10:	4798      	blx	r3
 801bd12:	4602      	mov	r2, r0
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801bd18:	6878      	ldr	r0, [r7, #4]
 801bd1a:	f000 f8c1 	bl	801bea0 <TimerExists>
 801bd1e:	4603      	mov	r3, r0
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d007      	beq.n	801bd34 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801bd24:	6878      	ldr	r0, [r7, #4]
 801bd26:	f7ff ff73 	bl	801bc10 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801bd2a:	6878      	ldr	r0, [r7, #4]
 801bd2c:	f7ff ff02 	bl	801bb34 <UTIL_TIMER_Start>
 801bd30:	4603      	mov	r3, r0
 801bd32:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801bd34:	7bfb      	ldrb	r3, [r7, #15]
}
 801bd36:	4618      	mov	r0, r3
 801bd38:	3710      	adds	r7, #16
 801bd3a:	46bd      	mov	sp, r7
 801bd3c:	bd80      	pop	{r7, pc}
 801bd3e:	bf00      	nop
 801bd40:	0801ccf0 	.word	0x0801ccf0

0801bd44 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801bd44:	b590      	push	{r4, r7, lr}
 801bd46:	b089      	sub	sp, #36	; 0x24
 801bd48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd4a:	f3ef 8310 	mrs	r3, PRIMASK
 801bd4e:	60bb      	str	r3, [r7, #8]
  return(result);
 801bd50:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801bd52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801bd54:	b672      	cpsid	i
}
 801bd56:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801bd58:	4b38      	ldr	r3, [pc, #224]	; (801be3c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801bd5a:	695b      	ldr	r3, [r3, #20]
 801bd5c:	4798      	blx	r3
 801bd5e:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801bd60:	4b36      	ldr	r3, [pc, #216]	; (801be3c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801bd62:	691b      	ldr	r3, [r3, #16]
 801bd64:	4798      	blx	r3
 801bd66:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801bd68:	693a      	ldr	r2, [r7, #16]
 801bd6a:	697b      	ldr	r3, [r7, #20]
 801bd6c:	1ad3      	subs	r3, r2, r3
 801bd6e:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801bd70:	4b33      	ldr	r3, [pc, #204]	; (801be40 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d037      	beq.n	801bde8 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801bd78:	4b31      	ldr	r3, [pc, #196]	; (801be40 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bd7a:	681b      	ldr	r3, [r3, #0]
 801bd7c:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801bd7e:	69fb      	ldr	r3, [r7, #28]
 801bd80:	681b      	ldr	r3, [r3, #0]
 801bd82:	68fa      	ldr	r2, [r7, #12]
 801bd84:	429a      	cmp	r2, r3
 801bd86:	d206      	bcs.n	801bd96 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801bd88:	69fb      	ldr	r3, [r7, #28]
 801bd8a:	681a      	ldr	r2, [r3, #0]
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	1ad2      	subs	r2, r2, r3
 801bd90:	69fb      	ldr	r3, [r7, #28]
 801bd92:	601a      	str	r2, [r3, #0]
 801bd94:	e002      	b.n	801bd9c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801bd96:	69fb      	ldr	r3, [r7, #28]
 801bd98:	2200      	movs	r2, #0
 801bd9a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801bd9c:	69fb      	ldr	r3, [r7, #28]
 801bd9e:	695b      	ldr	r3, [r3, #20]
 801bda0:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801bda2:	69fb      	ldr	r3, [r7, #28]
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	d1ea      	bne.n	801bd7e <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801bda8:	e01e      	b.n	801bde8 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801bdaa:	4b25      	ldr	r3, [pc, #148]	; (801be40 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801bdb0:	4b23      	ldr	r3, [pc, #140]	; (801be40 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	695b      	ldr	r3, [r3, #20]
 801bdb6:	4a22      	ldr	r2, [pc, #136]	; (801be40 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bdb8:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801bdba:	69fb      	ldr	r3, [r7, #28]
 801bdbc:	2200      	movs	r2, #0
 801bdbe:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801bdc0:	69fb      	ldr	r3, [r7, #28]
 801bdc2:	2200      	movs	r2, #0
 801bdc4:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801bdc6:	69fb      	ldr	r3, [r7, #28]
 801bdc8:	68db      	ldr	r3, [r3, #12]
 801bdca:	69fa      	ldr	r2, [r7, #28]
 801bdcc:	6912      	ldr	r2, [r2, #16]
 801bdce:	4610      	mov	r0, r2
 801bdd0:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801bdd2:	69fb      	ldr	r3, [r7, #28]
 801bdd4:	7adb      	ldrb	r3, [r3, #11]
 801bdd6:	2b01      	cmp	r3, #1
 801bdd8:	d106      	bne.n	801bde8 <UTIL_TIMER_IRQ_Handler+0xa4>
 801bdda:	69fb      	ldr	r3, [r7, #28]
 801bddc:	7a9b      	ldrb	r3, [r3, #10]
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d102      	bne.n	801bde8 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801bde2:	69f8      	ldr	r0, [r7, #28]
 801bde4:	f7ff fea6 	bl	801bb34 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801bde8:	4b15      	ldr	r3, [pc, #84]	; (801be40 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	d00d      	beq.n	801be0c <UTIL_TIMER_IRQ_Handler+0xc8>
 801bdf0:	4b13      	ldr	r3, [pc, #76]	; (801be40 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bdf2:	681b      	ldr	r3, [r3, #0]
 801bdf4:	681b      	ldr	r3, [r3, #0]
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	d0d7      	beq.n	801bdaa <UTIL_TIMER_IRQ_Handler+0x66>
 801bdfa:	4b11      	ldr	r3, [pc, #68]	; (801be40 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bdfc:	681b      	ldr	r3, [r3, #0]
 801bdfe:	681c      	ldr	r4, [r3, #0]
 801be00:	4b0e      	ldr	r3, [pc, #56]	; (801be3c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801be02:	699b      	ldr	r3, [r3, #24]
 801be04:	4798      	blx	r3
 801be06:	4603      	mov	r3, r0
 801be08:	429c      	cmp	r4, r3
 801be0a:	d3ce      	bcc.n	801bdaa <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801be0c:	4b0c      	ldr	r3, [pc, #48]	; (801be40 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801be0e:	681b      	ldr	r3, [r3, #0]
 801be10:	2b00      	cmp	r3, #0
 801be12:	d009      	beq.n	801be28 <UTIL_TIMER_IRQ_Handler+0xe4>
 801be14:	4b0a      	ldr	r3, [pc, #40]	; (801be40 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801be16:	681b      	ldr	r3, [r3, #0]
 801be18:	7a1b      	ldrb	r3, [r3, #8]
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d104      	bne.n	801be28 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801be1e:	4b08      	ldr	r3, [pc, #32]	; (801be40 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801be20:	681b      	ldr	r3, [r3, #0]
 801be22:	4618      	mov	r0, r3
 801be24:	f000 f858 	bl	801bed8 <TimerSetTimeout>
 801be28:	69bb      	ldr	r3, [r7, #24]
 801be2a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	f383 8810 	msr	PRIMASK, r3
}
 801be32:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801be34:	bf00      	nop
 801be36:	3724      	adds	r7, #36	; 0x24
 801be38:	46bd      	mov	sp, r7
 801be3a:	bd90      	pop	{r4, r7, pc}
 801be3c:	0801ccf0 	.word	0x0801ccf0
 801be40:	20002298 	.word	0x20002298

0801be44 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801be44:	b580      	push	{r7, lr}
 801be46:	b082      	sub	sp, #8
 801be48:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801be4a:	4b06      	ldr	r3, [pc, #24]	; (801be64 <UTIL_TIMER_GetCurrentTime+0x20>)
 801be4c:	69db      	ldr	r3, [r3, #28]
 801be4e:	4798      	blx	r3
 801be50:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801be52:	4b04      	ldr	r3, [pc, #16]	; (801be64 <UTIL_TIMER_GetCurrentTime+0x20>)
 801be54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be56:	6878      	ldr	r0, [r7, #4]
 801be58:	4798      	blx	r3
 801be5a:	4603      	mov	r3, r0
}
 801be5c:	4618      	mov	r0, r3
 801be5e:	3708      	adds	r7, #8
 801be60:	46bd      	mov	sp, r7
 801be62:	bd80      	pop	{r7, pc}
 801be64:	0801ccf0 	.word	0x0801ccf0

0801be68 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801be68:	b580      	push	{r7, lr}
 801be6a:	b084      	sub	sp, #16
 801be6c:	af00      	add	r7, sp, #0
 801be6e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801be70:	4b0a      	ldr	r3, [pc, #40]	; (801be9c <UTIL_TIMER_GetElapsedTime+0x34>)
 801be72:	69db      	ldr	r3, [r3, #28]
 801be74:	4798      	blx	r3
 801be76:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801be78:	4b08      	ldr	r3, [pc, #32]	; (801be9c <UTIL_TIMER_GetElapsedTime+0x34>)
 801be7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be7c:	6878      	ldr	r0, [r7, #4]
 801be7e:	4798      	blx	r3
 801be80:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801be82:	4b06      	ldr	r3, [pc, #24]	; (801be9c <UTIL_TIMER_GetElapsedTime+0x34>)
 801be84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be86:	68f9      	ldr	r1, [r7, #12]
 801be88:	68ba      	ldr	r2, [r7, #8]
 801be8a:	1a8a      	subs	r2, r1, r2
 801be8c:	4610      	mov	r0, r2
 801be8e:	4798      	blx	r3
 801be90:	4603      	mov	r3, r0
}
 801be92:	4618      	mov	r0, r3
 801be94:	3710      	adds	r7, #16
 801be96:	46bd      	mov	sp, r7
 801be98:	bd80      	pop	{r7, pc}
 801be9a:	bf00      	nop
 801be9c:	0801ccf0 	.word	0x0801ccf0

0801bea0 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801bea0:	b480      	push	{r7}
 801bea2:	b085      	sub	sp, #20
 801bea4:	af00      	add	r7, sp, #0
 801bea6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801bea8:	4b0a      	ldr	r3, [pc, #40]	; (801bed4 <TimerExists+0x34>)
 801beaa:	681b      	ldr	r3, [r3, #0]
 801beac:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801beae:	e008      	b.n	801bec2 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801beb0:	68fa      	ldr	r2, [r7, #12]
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	429a      	cmp	r2, r3
 801beb6:	d101      	bne.n	801bebc <TimerExists+0x1c>
    {
      return true;
 801beb8:	2301      	movs	r3, #1
 801beba:	e006      	b.n	801beca <TimerExists+0x2a>
    }
    cur = cur->Next;
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	695b      	ldr	r3, [r3, #20]
 801bec0:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801bec2:	68fb      	ldr	r3, [r7, #12]
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d1f3      	bne.n	801beb0 <TimerExists+0x10>
  }
  return false;
 801bec8:	2300      	movs	r3, #0
}
 801beca:	4618      	mov	r0, r3
 801becc:	3714      	adds	r7, #20
 801bece:	46bd      	mov	sp, r7
 801bed0:	bc80      	pop	{r7}
 801bed2:	4770      	bx	lr
 801bed4:	20002298 	.word	0x20002298

0801bed8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801bed8:	b590      	push	{r4, r7, lr}
 801beda:	b085      	sub	sp, #20
 801bedc:	af00      	add	r7, sp, #0
 801bede:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801bee0:	4b11      	ldr	r3, [pc, #68]	; (801bf28 <TimerSetTimeout+0x50>)
 801bee2:	6a1b      	ldr	r3, [r3, #32]
 801bee4:	4798      	blx	r3
 801bee6:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801bee8:	687b      	ldr	r3, [r7, #4]
 801beea:	2201      	movs	r2, #1
 801beec:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	681c      	ldr	r4, [r3, #0]
 801bef2:	4b0d      	ldr	r3, [pc, #52]	; (801bf28 <TimerSetTimeout+0x50>)
 801bef4:	699b      	ldr	r3, [r3, #24]
 801bef6:	4798      	blx	r3
 801bef8:	4602      	mov	r2, r0
 801befa:	68fb      	ldr	r3, [r7, #12]
 801befc:	4413      	add	r3, r2
 801befe:	429c      	cmp	r4, r3
 801bf00:	d207      	bcs.n	801bf12 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801bf02:	4b09      	ldr	r3, [pc, #36]	; (801bf28 <TimerSetTimeout+0x50>)
 801bf04:	699b      	ldr	r3, [r3, #24]
 801bf06:	4798      	blx	r3
 801bf08:	4602      	mov	r2, r0
 801bf0a:	68fb      	ldr	r3, [r7, #12]
 801bf0c:	441a      	add	r2, r3
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801bf12:	4b05      	ldr	r3, [pc, #20]	; (801bf28 <TimerSetTimeout+0x50>)
 801bf14:	689b      	ldr	r3, [r3, #8]
 801bf16:	687a      	ldr	r2, [r7, #4]
 801bf18:	6812      	ldr	r2, [r2, #0]
 801bf1a:	4610      	mov	r0, r2
 801bf1c:	4798      	blx	r3
}
 801bf1e:	bf00      	nop
 801bf20:	3714      	adds	r7, #20
 801bf22:	46bd      	mov	sp, r7
 801bf24:	bd90      	pop	{r4, r7, pc}
 801bf26:	bf00      	nop
 801bf28:	0801ccf0 	.word	0x0801ccf0

0801bf2c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801bf2c:	b480      	push	{r7}
 801bf2e:	b085      	sub	sp, #20
 801bf30:	af00      	add	r7, sp, #0
 801bf32:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801bf34:	4b14      	ldr	r3, [pc, #80]	; (801bf88 <TimerInsertTimer+0x5c>)
 801bf36:	681b      	ldr	r3, [r3, #0]
 801bf38:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801bf3a:	4b13      	ldr	r3, [pc, #76]	; (801bf88 <TimerInsertTimer+0x5c>)
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	695b      	ldr	r3, [r3, #20]
 801bf40:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801bf42:	e012      	b.n	801bf6a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	681a      	ldr	r2, [r3, #0]
 801bf48:	68bb      	ldr	r3, [r7, #8]
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	429a      	cmp	r2, r3
 801bf4e:	d905      	bls.n	801bf5c <TimerInsertTimer+0x30>
    {
        cur = next;
 801bf50:	68bb      	ldr	r3, [r7, #8]
 801bf52:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801bf54:	68bb      	ldr	r3, [r7, #8]
 801bf56:	695b      	ldr	r3, [r3, #20]
 801bf58:	60bb      	str	r3, [r7, #8]
 801bf5a:	e006      	b.n	801bf6a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801bf5c:	68fb      	ldr	r3, [r7, #12]
 801bf5e:	687a      	ldr	r2, [r7, #4]
 801bf60:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	68ba      	ldr	r2, [r7, #8]
 801bf66:	615a      	str	r2, [r3, #20]
        return;
 801bf68:	e009      	b.n	801bf7e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801bf6a:	68fb      	ldr	r3, [r7, #12]
 801bf6c:	695b      	ldr	r3, [r3, #20]
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	d1e8      	bne.n	801bf44 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801bf72:	68fb      	ldr	r3, [r7, #12]
 801bf74:	687a      	ldr	r2, [r7, #4]
 801bf76:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	2200      	movs	r2, #0
 801bf7c:	615a      	str	r2, [r3, #20]
}
 801bf7e:	3714      	adds	r7, #20
 801bf80:	46bd      	mov	sp, r7
 801bf82:	bc80      	pop	{r7}
 801bf84:	4770      	bx	lr
 801bf86:	bf00      	nop
 801bf88:	20002298 	.word	0x20002298

0801bf8c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801bf8c:	b580      	push	{r7, lr}
 801bf8e:	b084      	sub	sp, #16
 801bf90:	af00      	add	r7, sp, #0
 801bf92:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801bf94:	4b0b      	ldr	r3, [pc, #44]	; (801bfc4 <TimerInsertNewHeadTimer+0x38>)
 801bf96:	681b      	ldr	r3, [r3, #0]
 801bf98:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801bf9a:	68fb      	ldr	r3, [r7, #12]
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d002      	beq.n	801bfa6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801bfa0:	68fb      	ldr	r3, [r7, #12]
 801bfa2:	2200      	movs	r2, #0
 801bfa4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	68fa      	ldr	r2, [r7, #12]
 801bfaa:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801bfac:	4a05      	ldr	r2, [pc, #20]	; (801bfc4 <TimerInsertNewHeadTimer+0x38>)
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801bfb2:	4b04      	ldr	r3, [pc, #16]	; (801bfc4 <TimerInsertNewHeadTimer+0x38>)
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	4618      	mov	r0, r3
 801bfb8:	f7ff ff8e 	bl	801bed8 <TimerSetTimeout>
}
 801bfbc:	bf00      	nop
 801bfbe:	3710      	adds	r7, #16
 801bfc0:	46bd      	mov	sp, r7
 801bfc2:	bd80      	pop	{r7, pc}
 801bfc4:	20002298 	.word	0x20002298

0801bfc8 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801bfc8:	b580      	push	{r7, lr}
 801bfca:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801bfcc:	2218      	movs	r2, #24
 801bfce:	2100      	movs	r1, #0
 801bfd0:	4807      	ldr	r0, [pc, #28]	; (801bff0 <UTIL_ADV_TRACE_Init+0x28>)
 801bfd2:	f7fe fff6 	bl	801afc2 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801bfd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bfda:	2100      	movs	r1, #0
 801bfdc:	4805      	ldr	r0, [pc, #20]	; (801bff4 <UTIL_ADV_TRACE_Init+0x2c>)
 801bfde:	f7fe fff0 	bl	801afc2 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801bfe2:	4b05      	ldr	r3, [pc, #20]	; (801bff8 <UTIL_ADV_TRACE_Init+0x30>)
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	4805      	ldr	r0, [pc, #20]	; (801bffc <UTIL_ADV_TRACE_Init+0x34>)
 801bfe8:	4798      	blx	r3
 801bfea:	4603      	mov	r3, r0
}
 801bfec:	4618      	mov	r0, r3
 801bfee:	bd80      	pop	{r7, pc}
 801bff0:	2000229c 	.word	0x2000229c
 801bff4:	200022b4 	.word	0x200022b4
 801bff8:	0801cd30 	.word	0x0801cd30
 801bffc:	0801c269 	.word	0x0801c269

0801c000 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801c000:	b480      	push	{r7}
 801c002:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c004:	4b06      	ldr	r3, [pc, #24]	; (801c020 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c006:	8a5a      	ldrh	r2, [r3, #18]
 801c008:	4b05      	ldr	r3, [pc, #20]	; (801c020 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c00a:	8a1b      	ldrh	r3, [r3, #16]
 801c00c:	429a      	cmp	r2, r3
 801c00e:	d101      	bne.n	801c014 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801c010:	2301      	movs	r3, #1
 801c012:	e000      	b.n	801c016 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801c014:	2300      	movs	r3, #0
}
 801c016:	4618      	mov	r0, r3
 801c018:	46bd      	mov	sp, r7
 801c01a:	bc80      	pop	{r7}
 801c01c:	4770      	bx	lr
 801c01e:	bf00      	nop
 801c020:	2000229c 	.word	0x2000229c

0801c024 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801c024:	b408      	push	{r3}
 801c026:	b580      	push	{r7, lr}
 801c028:	b08d      	sub	sp, #52	; 0x34
 801c02a:	af00      	add	r7, sp, #0
 801c02c:	60f8      	str	r0, [r7, #12]
 801c02e:	60b9      	str	r1, [r7, #8]
 801c030:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801c032:	2300      	movs	r3, #0
 801c034:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801c036:	2300      	movs	r3, #0
 801c038:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801c03a:	4b37      	ldr	r3, [pc, #220]	; (801c118 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c03c:	7a1b      	ldrb	r3, [r3, #8]
 801c03e:	461a      	mov	r2, r3
 801c040:	68fb      	ldr	r3, [r7, #12]
 801c042:	4293      	cmp	r3, r2
 801c044:	d902      	bls.n	801c04c <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801c046:	f06f 0304 	mvn.w	r3, #4
 801c04a:	e05e      	b.n	801c10a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801c04c:	4b32      	ldr	r3, [pc, #200]	; (801c118 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c04e:	68da      	ldr	r2, [r3, #12]
 801c050:	68bb      	ldr	r3, [r7, #8]
 801c052:	4013      	ands	r3, r2
 801c054:	68ba      	ldr	r2, [r7, #8]
 801c056:	429a      	cmp	r2, r3
 801c058:	d002      	beq.n	801c060 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801c05a:	f06f 0305 	mvn.w	r3, #5
 801c05e:	e054      	b.n	801c10a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801c060:	4b2d      	ldr	r3, [pc, #180]	; (801c118 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c062:	685b      	ldr	r3, [r3, #4]
 801c064:	2b00      	cmp	r3, #0
 801c066:	d00a      	beq.n	801c07e <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d007      	beq.n	801c07e <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801c06e:	4b2a      	ldr	r3, [pc, #168]	; (801c118 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c070:	685b      	ldr	r3, [r3, #4]
 801c072:	f107 0116 	add.w	r1, r7, #22
 801c076:	f107 0218 	add.w	r2, r7, #24
 801c07a:	4610      	mov	r0, r2
 801c07c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801c07e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c082:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c086:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c088:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c08c:	4823      	ldr	r0, [pc, #140]	; (801c11c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801c08e:	f7ff fa25 	bl	801b4dc <tiny_vsnprintf_like>
 801c092:	4603      	mov	r3, r0
 801c094:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801c096:	f000 f9f1 	bl	801c47c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801c09a:	8afa      	ldrh	r2, [r7, #22]
 801c09c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c09e:	4413      	add	r3, r2
 801c0a0:	b29b      	uxth	r3, r3
 801c0a2:	f107 0214 	add.w	r2, r7, #20
 801c0a6:	4611      	mov	r1, r2
 801c0a8:	4618      	mov	r0, r3
 801c0aa:	f000 f969 	bl	801c380 <TRACE_AllocateBufer>
 801c0ae:	4603      	mov	r3, r0
 801c0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c0b4:	d025      	beq.n	801c102 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801c0b6:	2300      	movs	r3, #0
 801c0b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c0ba:	e00e      	b.n	801c0da <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801c0bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c0be:	8aba      	ldrh	r2, [r7, #20]
 801c0c0:	3330      	adds	r3, #48	; 0x30
 801c0c2:	443b      	add	r3, r7
 801c0c4:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801c0c8:	4b15      	ldr	r3, [pc, #84]	; (801c120 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c0ca:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801c0cc:	8abb      	ldrh	r3, [r7, #20]
 801c0ce:	3301      	adds	r3, #1
 801c0d0:	b29b      	uxth	r3, r3
 801c0d2:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801c0d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c0d6:	3301      	adds	r3, #1
 801c0d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c0da:	8afb      	ldrh	r3, [r7, #22]
 801c0dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c0de:	429a      	cmp	r2, r3
 801c0e0:	d3ec      	bcc.n	801c0bc <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c0e2:	8abb      	ldrh	r3, [r7, #20]
 801c0e4:	461a      	mov	r2, r3
 801c0e6:	4b0e      	ldr	r3, [pc, #56]	; (801c120 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c0e8:	18d0      	adds	r0, r2, r3
 801c0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c0ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c0ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c0f2:	f7ff f9f3 	bl	801b4dc <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801c0f6:	f000 f9df 	bl	801c4b8 <TRACE_UnLock>

    return TRACE_Send();
 801c0fa:	f000 f831 	bl	801c160 <TRACE_Send>
 801c0fe:	4603      	mov	r3, r0
 801c100:	e003      	b.n	801c10a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801c102:	f000 f9d9 	bl	801c4b8 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801c106:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801c10a:	4618      	mov	r0, r3
 801c10c:	3734      	adds	r7, #52	; 0x34
 801c10e:	46bd      	mov	sp, r7
 801c110:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c114:	b001      	add	sp, #4
 801c116:	4770      	bx	lr
 801c118:	2000229c 	.word	0x2000229c
 801c11c:	200026b4 	.word	0x200026b4
 801c120:	200022b4 	.word	0x200022b4

0801c124 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801c124:	b480      	push	{r7}
 801c126:	b083      	sub	sp, #12
 801c128:	af00      	add	r7, sp, #0
 801c12a:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801c12c:	4a03      	ldr	r2, [pc, #12]	; (801c13c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	6053      	str	r3, [r2, #4]
}
 801c132:	bf00      	nop
 801c134:	370c      	adds	r7, #12
 801c136:	46bd      	mov	sp, r7
 801c138:	bc80      	pop	{r7}
 801c13a:	4770      	bx	lr
 801c13c:	2000229c 	.word	0x2000229c

0801c140 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801c140:	b480      	push	{r7}
 801c142:	b083      	sub	sp, #12
 801c144:	af00      	add	r7, sp, #0
 801c146:	4603      	mov	r3, r0
 801c148:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801c14a:	4a04      	ldr	r2, [pc, #16]	; (801c15c <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801c14c:	79fb      	ldrb	r3, [r7, #7]
 801c14e:	7213      	strb	r3, [r2, #8]
}
 801c150:	bf00      	nop
 801c152:	370c      	adds	r7, #12
 801c154:	46bd      	mov	sp, r7
 801c156:	bc80      	pop	{r7}
 801c158:	4770      	bx	lr
 801c15a:	bf00      	nop
 801c15c:	2000229c 	.word	0x2000229c

0801c160 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801c160:	b580      	push	{r7, lr}
 801c162:	b088      	sub	sp, #32
 801c164:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801c166:	2300      	movs	r3, #0
 801c168:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801c16a:	2300      	movs	r3, #0
 801c16c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c16e:	f3ef 8310 	mrs	r3, PRIMASK
 801c172:	613b      	str	r3, [r7, #16]
  return(result);
 801c174:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c176:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c178:	b672      	cpsid	i
}
 801c17a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801c17c:	f000 f9ba 	bl	801c4f4 <TRACE_IsLocked>
 801c180:	4603      	mov	r3, r0
 801c182:	2b00      	cmp	r3, #0
 801c184:	d15d      	bne.n	801c242 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801c186:	f000 f979 	bl	801c47c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801c18a:	4b34      	ldr	r3, [pc, #208]	; (801c25c <TRACE_Send+0xfc>)
 801c18c:	8a1a      	ldrh	r2, [r3, #16]
 801c18e:	4b33      	ldr	r3, [pc, #204]	; (801c25c <TRACE_Send+0xfc>)
 801c190:	8a5b      	ldrh	r3, [r3, #18]
 801c192:	429a      	cmp	r2, r3
 801c194:	d04d      	beq.n	801c232 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c196:	4b31      	ldr	r3, [pc, #196]	; (801c25c <TRACE_Send+0xfc>)
 801c198:	789b      	ldrb	r3, [r3, #2]
 801c19a:	2b01      	cmp	r3, #1
 801c19c:	d117      	bne.n	801c1ce <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801c19e:	4b2f      	ldr	r3, [pc, #188]	; (801c25c <TRACE_Send+0xfc>)
 801c1a0:	881a      	ldrh	r2, [r3, #0]
 801c1a2:	4b2e      	ldr	r3, [pc, #184]	; (801c25c <TRACE_Send+0xfc>)
 801c1a4:	8a1b      	ldrh	r3, [r3, #16]
 801c1a6:	1ad3      	subs	r3, r2, r3
 801c1a8:	b29a      	uxth	r2, r3
 801c1aa:	4b2c      	ldr	r3, [pc, #176]	; (801c25c <TRACE_Send+0xfc>)
 801c1ac:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c1ae:	4b2b      	ldr	r3, [pc, #172]	; (801c25c <TRACE_Send+0xfc>)
 801c1b0:	2202      	movs	r2, #2
 801c1b2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c1b4:	4b29      	ldr	r3, [pc, #164]	; (801c25c <TRACE_Send+0xfc>)
 801c1b6:	2200      	movs	r2, #0
 801c1b8:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c1ba:	4b28      	ldr	r3, [pc, #160]	; (801c25c <TRACE_Send+0xfc>)
 801c1bc:	8a9b      	ldrh	r3, [r3, #20]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d105      	bne.n	801c1ce <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c1c2:	4b26      	ldr	r3, [pc, #152]	; (801c25c <TRACE_Send+0xfc>)
 801c1c4:	2200      	movs	r2, #0
 801c1c6:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c1c8:	4b24      	ldr	r3, [pc, #144]	; (801c25c <TRACE_Send+0xfc>)
 801c1ca:	2200      	movs	r2, #0
 801c1cc:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c1ce:	4b23      	ldr	r3, [pc, #140]	; (801c25c <TRACE_Send+0xfc>)
 801c1d0:	789b      	ldrb	r3, [r3, #2]
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	d115      	bne.n	801c202 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c1d6:	4b21      	ldr	r3, [pc, #132]	; (801c25c <TRACE_Send+0xfc>)
 801c1d8:	8a5a      	ldrh	r2, [r3, #18]
 801c1da:	4b20      	ldr	r3, [pc, #128]	; (801c25c <TRACE_Send+0xfc>)
 801c1dc:	8a1b      	ldrh	r3, [r3, #16]
 801c1de:	429a      	cmp	r2, r3
 801c1e0:	d908      	bls.n	801c1f4 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c1e2:	4b1e      	ldr	r3, [pc, #120]	; (801c25c <TRACE_Send+0xfc>)
 801c1e4:	8a5a      	ldrh	r2, [r3, #18]
 801c1e6:	4b1d      	ldr	r3, [pc, #116]	; (801c25c <TRACE_Send+0xfc>)
 801c1e8:	8a1b      	ldrh	r3, [r3, #16]
 801c1ea:	1ad3      	subs	r3, r2, r3
 801c1ec:	b29a      	uxth	r2, r3
 801c1ee:	4b1b      	ldr	r3, [pc, #108]	; (801c25c <TRACE_Send+0xfc>)
 801c1f0:	829a      	strh	r2, [r3, #20]
 801c1f2:	e006      	b.n	801c202 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c1f4:	4b19      	ldr	r3, [pc, #100]	; (801c25c <TRACE_Send+0xfc>)
 801c1f6:	8a1b      	ldrh	r3, [r3, #16]
 801c1f8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c1fc:	b29a      	uxth	r2, r3
 801c1fe:	4b17      	ldr	r3, [pc, #92]	; (801c25c <TRACE_Send+0xfc>)
 801c200:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c202:	4b16      	ldr	r3, [pc, #88]	; (801c25c <TRACE_Send+0xfc>)
 801c204:	8a1b      	ldrh	r3, [r3, #16]
 801c206:	461a      	mov	r2, r3
 801c208:	4b15      	ldr	r3, [pc, #84]	; (801c260 <TRACE_Send+0x100>)
 801c20a:	4413      	add	r3, r2
 801c20c:	61bb      	str	r3, [r7, #24]
 801c20e:	697b      	ldr	r3, [r7, #20]
 801c210:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c212:	68fb      	ldr	r3, [r7, #12]
 801c214:	f383 8810 	msr	PRIMASK, r3
}
 801c218:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801c21a:	f7e6 f829 	bl	8002270 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c21e:	4b11      	ldr	r3, [pc, #68]	; (801c264 <TRACE_Send+0x104>)
 801c220:	68db      	ldr	r3, [r3, #12]
 801c222:	4a0e      	ldr	r2, [pc, #56]	; (801c25c <TRACE_Send+0xfc>)
 801c224:	8a92      	ldrh	r2, [r2, #20]
 801c226:	4611      	mov	r1, r2
 801c228:	69b8      	ldr	r0, [r7, #24]
 801c22a:	4798      	blx	r3
 801c22c:	4603      	mov	r3, r0
 801c22e:	77fb      	strb	r3, [r7, #31]
 801c230:	e00d      	b.n	801c24e <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801c232:	f000 f941 	bl	801c4b8 <TRACE_UnLock>
 801c236:	697b      	ldr	r3, [r7, #20]
 801c238:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c23a:	68bb      	ldr	r3, [r7, #8]
 801c23c:	f383 8810 	msr	PRIMASK, r3
}
 801c240:	e005      	b.n	801c24e <TRACE_Send+0xee>
 801c242:	697b      	ldr	r3, [r7, #20]
 801c244:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	f383 8810 	msr	PRIMASK, r3
}
 801c24c:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801c24e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c252:	4618      	mov	r0, r3
 801c254:	3720      	adds	r7, #32
 801c256:	46bd      	mov	sp, r7
 801c258:	bd80      	pop	{r7, pc}
 801c25a:	bf00      	nop
 801c25c:	2000229c 	.word	0x2000229c
 801c260:	200022b4 	.word	0x200022b4
 801c264:	0801cd30 	.word	0x0801cd30

0801c268 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801c268:	b580      	push	{r7, lr}
 801c26a:	b088      	sub	sp, #32
 801c26c:	af00      	add	r7, sp, #0
 801c26e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801c270:	2300      	movs	r3, #0
 801c272:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c274:	f3ef 8310 	mrs	r3, PRIMASK
 801c278:	617b      	str	r3, [r7, #20]
  return(result);
 801c27a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c27c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c27e:	b672      	cpsid	i
}
 801c280:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801c282:	4b3c      	ldr	r3, [pc, #240]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c284:	789b      	ldrb	r3, [r3, #2]
 801c286:	2b02      	cmp	r3, #2
 801c288:	d106      	bne.n	801c298 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c28a:	4b3a      	ldr	r3, [pc, #232]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c28c:	2200      	movs	r2, #0
 801c28e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c290:	4b38      	ldr	r3, [pc, #224]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c292:	2200      	movs	r2, #0
 801c294:	821a      	strh	r2, [r3, #16]
 801c296:	e00a      	b.n	801c2ae <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c298:	4b36      	ldr	r3, [pc, #216]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c29a:	8a1a      	ldrh	r2, [r3, #16]
 801c29c:	4b35      	ldr	r3, [pc, #212]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c29e:	8a9b      	ldrh	r3, [r3, #20]
 801c2a0:	4413      	add	r3, r2
 801c2a2:	b29b      	uxth	r3, r3
 801c2a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c2a8:	b29a      	uxth	r2, r3
 801c2aa:	4b32      	ldr	r3, [pc, #200]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c2ac:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801c2ae:	4b31      	ldr	r3, [pc, #196]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c2b0:	8a1a      	ldrh	r2, [r3, #16]
 801c2b2:	4b30      	ldr	r3, [pc, #192]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c2b4:	8a5b      	ldrh	r3, [r3, #18]
 801c2b6:	429a      	cmp	r2, r3
 801c2b8:	d04d      	beq.n	801c356 <TRACE_TxCpltCallback+0xee>
 801c2ba:	4b2e      	ldr	r3, [pc, #184]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c2bc:	8adb      	ldrh	r3, [r3, #22]
 801c2be:	2b01      	cmp	r3, #1
 801c2c0:	d149      	bne.n	801c356 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c2c2:	4b2c      	ldr	r3, [pc, #176]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c2c4:	789b      	ldrb	r3, [r3, #2]
 801c2c6:	2b01      	cmp	r3, #1
 801c2c8:	d117      	bne.n	801c2fa <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801c2ca:	4b2a      	ldr	r3, [pc, #168]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c2cc:	881a      	ldrh	r2, [r3, #0]
 801c2ce:	4b29      	ldr	r3, [pc, #164]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c2d0:	8a1b      	ldrh	r3, [r3, #16]
 801c2d2:	1ad3      	subs	r3, r2, r3
 801c2d4:	b29a      	uxth	r2, r3
 801c2d6:	4b27      	ldr	r3, [pc, #156]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c2d8:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c2da:	4b26      	ldr	r3, [pc, #152]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c2dc:	2202      	movs	r2, #2
 801c2de:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c2e0:	4b24      	ldr	r3, [pc, #144]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c2e2:	2200      	movs	r2, #0
 801c2e4:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c2e6:	4b23      	ldr	r3, [pc, #140]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c2e8:	8a9b      	ldrh	r3, [r3, #20]
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	d105      	bne.n	801c2fa <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c2ee:	4b21      	ldr	r3, [pc, #132]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c2f0:	2200      	movs	r2, #0
 801c2f2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c2f4:	4b1f      	ldr	r3, [pc, #124]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c2f6:	2200      	movs	r2, #0
 801c2f8:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c2fa:	4b1e      	ldr	r3, [pc, #120]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c2fc:	789b      	ldrb	r3, [r3, #2]
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d115      	bne.n	801c32e <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c302:	4b1c      	ldr	r3, [pc, #112]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c304:	8a5a      	ldrh	r2, [r3, #18]
 801c306:	4b1b      	ldr	r3, [pc, #108]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c308:	8a1b      	ldrh	r3, [r3, #16]
 801c30a:	429a      	cmp	r2, r3
 801c30c:	d908      	bls.n	801c320 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c30e:	4b19      	ldr	r3, [pc, #100]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c310:	8a5a      	ldrh	r2, [r3, #18]
 801c312:	4b18      	ldr	r3, [pc, #96]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c314:	8a1b      	ldrh	r3, [r3, #16]
 801c316:	1ad3      	subs	r3, r2, r3
 801c318:	b29a      	uxth	r2, r3
 801c31a:	4b16      	ldr	r3, [pc, #88]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c31c:	829a      	strh	r2, [r3, #20]
 801c31e:	e006      	b.n	801c32e <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c320:	4b14      	ldr	r3, [pc, #80]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c322:	8a1b      	ldrh	r3, [r3, #16]
 801c324:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c328:	b29a      	uxth	r2, r3
 801c32a:	4b12      	ldr	r3, [pc, #72]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c32c:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c32e:	4b11      	ldr	r3, [pc, #68]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c330:	8a1b      	ldrh	r3, [r3, #16]
 801c332:	461a      	mov	r2, r3
 801c334:	4b10      	ldr	r3, [pc, #64]	; (801c378 <TRACE_TxCpltCallback+0x110>)
 801c336:	4413      	add	r3, r2
 801c338:	61fb      	str	r3, [r7, #28]
 801c33a:	69bb      	ldr	r3, [r7, #24]
 801c33c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c33e:	693b      	ldr	r3, [r7, #16]
 801c340:	f383 8810 	msr	PRIMASK, r3
}
 801c344:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c346:	4b0d      	ldr	r3, [pc, #52]	; (801c37c <TRACE_TxCpltCallback+0x114>)
 801c348:	68db      	ldr	r3, [r3, #12]
 801c34a:	4a0a      	ldr	r2, [pc, #40]	; (801c374 <TRACE_TxCpltCallback+0x10c>)
 801c34c:	8a92      	ldrh	r2, [r2, #20]
 801c34e:	4611      	mov	r1, r2
 801c350:	69f8      	ldr	r0, [r7, #28]
 801c352:	4798      	blx	r3
 801c354:	e00a      	b.n	801c36c <TRACE_TxCpltCallback+0x104>
 801c356:	69bb      	ldr	r3, [r7, #24]
 801c358:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c35a:	68fb      	ldr	r3, [r7, #12]
 801c35c:	f383 8810 	msr	PRIMASK, r3
}
 801c360:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801c362:	f7e5 ff8d 	bl	8002280 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801c366:	f000 f8a7 	bl	801c4b8 <TRACE_UnLock>
  }
}
 801c36a:	bf00      	nop
 801c36c:	bf00      	nop
 801c36e:	3720      	adds	r7, #32
 801c370:	46bd      	mov	sp, r7
 801c372:	bd80      	pop	{r7, pc}
 801c374:	2000229c 	.word	0x2000229c
 801c378:	200022b4 	.word	0x200022b4
 801c37c:	0801cd30 	.word	0x0801cd30

0801c380 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801c380:	b480      	push	{r7}
 801c382:	b087      	sub	sp, #28
 801c384:	af00      	add	r7, sp, #0
 801c386:	4603      	mov	r3, r0
 801c388:	6039      	str	r1, [r7, #0]
 801c38a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801c38c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c390:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c392:	f3ef 8310 	mrs	r3, PRIMASK
 801c396:	60fb      	str	r3, [r7, #12]
  return(result);
 801c398:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c39a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c39c:	b672      	cpsid	i
}
 801c39e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c3a0:	4b35      	ldr	r3, [pc, #212]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c3a2:	8a5a      	ldrh	r2, [r3, #18]
 801c3a4:	4b34      	ldr	r3, [pc, #208]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c3a6:	8a1b      	ldrh	r3, [r3, #16]
 801c3a8:	429a      	cmp	r2, r3
 801c3aa:	d11b      	bne.n	801c3e4 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c3ac:	4b32      	ldr	r3, [pc, #200]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c3ae:	8a5b      	ldrh	r3, [r3, #18]
 801c3b0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c3b4:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801c3b6:	88fa      	ldrh	r2, [r7, #6]
 801c3b8:	8afb      	ldrh	r3, [r7, #22]
 801c3ba:	429a      	cmp	r2, r3
 801c3bc:	d33a      	bcc.n	801c434 <TRACE_AllocateBufer+0xb4>
 801c3be:	4b2e      	ldr	r3, [pc, #184]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c3c0:	8a1b      	ldrh	r3, [r3, #16]
 801c3c2:	88fa      	ldrh	r2, [r7, #6]
 801c3c4:	429a      	cmp	r2, r3
 801c3c6:	d235      	bcs.n	801c434 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c3c8:	4b2b      	ldr	r3, [pc, #172]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c3ca:	2201      	movs	r2, #1
 801c3cc:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c3ce:	4b2a      	ldr	r3, [pc, #168]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c3d0:	8a5a      	ldrh	r2, [r3, #18]
 801c3d2:	4b29      	ldr	r3, [pc, #164]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c3d4:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c3d6:	4b28      	ldr	r3, [pc, #160]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c3d8:	8a1b      	ldrh	r3, [r3, #16]
 801c3da:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c3dc:	4b26      	ldr	r3, [pc, #152]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c3de:	2200      	movs	r2, #0
 801c3e0:	825a      	strh	r2, [r3, #18]
 801c3e2:	e027      	b.n	801c434 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c3e4:	4b24      	ldr	r3, [pc, #144]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c3e6:	8a5a      	ldrh	r2, [r3, #18]
 801c3e8:	4b23      	ldr	r3, [pc, #140]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c3ea:	8a1b      	ldrh	r3, [r3, #16]
 801c3ec:	429a      	cmp	r2, r3
 801c3ee:	d91b      	bls.n	801c428 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c3f0:	4b21      	ldr	r3, [pc, #132]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c3f2:	8a5b      	ldrh	r3, [r3, #18]
 801c3f4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c3f8:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801c3fa:	88fa      	ldrh	r2, [r7, #6]
 801c3fc:	8afb      	ldrh	r3, [r7, #22]
 801c3fe:	429a      	cmp	r2, r3
 801c400:	d318      	bcc.n	801c434 <TRACE_AllocateBufer+0xb4>
 801c402:	4b1d      	ldr	r3, [pc, #116]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c404:	8a1b      	ldrh	r3, [r3, #16]
 801c406:	88fa      	ldrh	r2, [r7, #6]
 801c408:	429a      	cmp	r2, r3
 801c40a:	d213      	bcs.n	801c434 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c40c:	4b1a      	ldr	r3, [pc, #104]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c40e:	2201      	movs	r2, #1
 801c410:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c412:	4b19      	ldr	r3, [pc, #100]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c414:	8a5a      	ldrh	r2, [r3, #18]
 801c416:	4b18      	ldr	r3, [pc, #96]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c418:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c41a:	4b17      	ldr	r3, [pc, #92]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c41c:	8a1b      	ldrh	r3, [r3, #16]
 801c41e:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c420:	4b15      	ldr	r3, [pc, #84]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c422:	2200      	movs	r2, #0
 801c424:	825a      	strh	r2, [r3, #18]
 801c426:	e005      	b.n	801c434 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801c428:	4b13      	ldr	r3, [pc, #76]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c42a:	8a1a      	ldrh	r2, [r3, #16]
 801c42c:	4b12      	ldr	r3, [pc, #72]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c42e:	8a5b      	ldrh	r3, [r3, #18]
 801c430:	1ad3      	subs	r3, r2, r3
 801c432:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801c434:	8afa      	ldrh	r2, [r7, #22]
 801c436:	88fb      	ldrh	r3, [r7, #6]
 801c438:	429a      	cmp	r2, r3
 801c43a:	d90f      	bls.n	801c45c <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801c43c:	4b0e      	ldr	r3, [pc, #56]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c43e:	8a5a      	ldrh	r2, [r3, #18]
 801c440:	683b      	ldr	r3, [r7, #0]
 801c442:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c444:	4b0c      	ldr	r3, [pc, #48]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c446:	8a5a      	ldrh	r2, [r3, #18]
 801c448:	88fb      	ldrh	r3, [r7, #6]
 801c44a:	4413      	add	r3, r2
 801c44c:	b29b      	uxth	r3, r3
 801c44e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c452:	b29a      	uxth	r2, r3
 801c454:	4b08      	ldr	r3, [pc, #32]	; (801c478 <TRACE_AllocateBufer+0xf8>)
 801c456:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801c458:	2300      	movs	r3, #0
 801c45a:	82bb      	strh	r3, [r7, #20]
 801c45c:	693b      	ldr	r3, [r7, #16]
 801c45e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c460:	68bb      	ldr	r3, [r7, #8]
 801c462:	f383 8810 	msr	PRIMASK, r3
}
 801c466:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801c468:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801c46c:	4618      	mov	r0, r3
 801c46e:	371c      	adds	r7, #28
 801c470:	46bd      	mov	sp, r7
 801c472:	bc80      	pop	{r7}
 801c474:	4770      	bx	lr
 801c476:	bf00      	nop
 801c478:	2000229c 	.word	0x2000229c

0801c47c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801c47c:	b480      	push	{r7}
 801c47e:	b085      	sub	sp, #20
 801c480:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c482:	f3ef 8310 	mrs	r3, PRIMASK
 801c486:	607b      	str	r3, [r7, #4]
  return(result);
 801c488:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c48a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c48c:	b672      	cpsid	i
}
 801c48e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801c490:	4b08      	ldr	r3, [pc, #32]	; (801c4b4 <TRACE_Lock+0x38>)
 801c492:	8adb      	ldrh	r3, [r3, #22]
 801c494:	3301      	adds	r3, #1
 801c496:	b29a      	uxth	r2, r3
 801c498:	4b06      	ldr	r3, [pc, #24]	; (801c4b4 <TRACE_Lock+0x38>)
 801c49a:	82da      	strh	r2, [r3, #22]
 801c49c:	68fb      	ldr	r3, [r7, #12]
 801c49e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4a0:	68bb      	ldr	r3, [r7, #8]
 801c4a2:	f383 8810 	msr	PRIMASK, r3
}
 801c4a6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c4a8:	bf00      	nop
 801c4aa:	3714      	adds	r7, #20
 801c4ac:	46bd      	mov	sp, r7
 801c4ae:	bc80      	pop	{r7}
 801c4b0:	4770      	bx	lr
 801c4b2:	bf00      	nop
 801c4b4:	2000229c 	.word	0x2000229c

0801c4b8 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801c4b8:	b480      	push	{r7}
 801c4ba:	b085      	sub	sp, #20
 801c4bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4be:	f3ef 8310 	mrs	r3, PRIMASK
 801c4c2:	607b      	str	r3, [r7, #4]
  return(result);
 801c4c4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c4c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4c8:	b672      	cpsid	i
}
 801c4ca:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801c4cc:	4b08      	ldr	r3, [pc, #32]	; (801c4f0 <TRACE_UnLock+0x38>)
 801c4ce:	8adb      	ldrh	r3, [r3, #22]
 801c4d0:	3b01      	subs	r3, #1
 801c4d2:	b29a      	uxth	r2, r3
 801c4d4:	4b06      	ldr	r3, [pc, #24]	; (801c4f0 <TRACE_UnLock+0x38>)
 801c4d6:	82da      	strh	r2, [r3, #22]
 801c4d8:	68fb      	ldr	r3, [r7, #12]
 801c4da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4dc:	68bb      	ldr	r3, [r7, #8]
 801c4de:	f383 8810 	msr	PRIMASK, r3
}
 801c4e2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c4e4:	bf00      	nop
 801c4e6:	3714      	adds	r7, #20
 801c4e8:	46bd      	mov	sp, r7
 801c4ea:	bc80      	pop	{r7}
 801c4ec:	4770      	bx	lr
 801c4ee:	bf00      	nop
 801c4f0:	2000229c 	.word	0x2000229c

0801c4f4 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801c4f4:	b480      	push	{r7}
 801c4f6:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801c4f8:	4b05      	ldr	r3, [pc, #20]	; (801c510 <TRACE_IsLocked+0x1c>)
 801c4fa:	8adb      	ldrh	r3, [r3, #22]
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	bf14      	ite	ne
 801c500:	2301      	movne	r3, #1
 801c502:	2300      	moveq	r3, #0
 801c504:	b2db      	uxtb	r3, r3
}
 801c506:	4618      	mov	r0, r3
 801c508:	46bd      	mov	sp, r7
 801c50a:	bc80      	pop	{r7}
 801c50c:	4770      	bx	lr
 801c50e:	bf00      	nop
 801c510:	2000229c 	.word	0x2000229c

0801c514 <__libc_init_array>:
 801c514:	b570      	push	{r4, r5, r6, lr}
 801c516:	4d0d      	ldr	r5, [pc, #52]	; (801c54c <__libc_init_array+0x38>)
 801c518:	4c0d      	ldr	r4, [pc, #52]	; (801c550 <__libc_init_array+0x3c>)
 801c51a:	1b64      	subs	r4, r4, r5
 801c51c:	10a4      	asrs	r4, r4, #2
 801c51e:	2600      	movs	r6, #0
 801c520:	42a6      	cmp	r6, r4
 801c522:	d109      	bne.n	801c538 <__libc_init_array+0x24>
 801c524:	4d0b      	ldr	r5, [pc, #44]	; (801c554 <__libc_init_array+0x40>)
 801c526:	4c0c      	ldr	r4, [pc, #48]	; (801c558 <__libc_init_array+0x44>)
 801c528:	f000 f916 	bl	801c758 <_init>
 801c52c:	1b64      	subs	r4, r4, r5
 801c52e:	10a4      	asrs	r4, r4, #2
 801c530:	2600      	movs	r6, #0
 801c532:	42a6      	cmp	r6, r4
 801c534:	d105      	bne.n	801c542 <__libc_init_array+0x2e>
 801c536:	bd70      	pop	{r4, r5, r6, pc}
 801c538:	f855 3b04 	ldr.w	r3, [r5], #4
 801c53c:	4798      	blx	r3
 801c53e:	3601      	adds	r6, #1
 801c540:	e7ee      	b.n	801c520 <__libc_init_array+0xc>
 801c542:	f855 3b04 	ldr.w	r3, [r5], #4
 801c546:	4798      	blx	r3
 801c548:	3601      	adds	r6, #1
 801c54a:	e7f2      	b.n	801c532 <__libc_init_array+0x1e>
 801c54c:	0801d2c4 	.word	0x0801d2c4
 801c550:	0801d2c4 	.word	0x0801d2c4
 801c554:	0801d2c4 	.word	0x0801d2c4
 801c558:	0801d2cc 	.word	0x0801d2cc

0801c55c <memcpy>:
 801c55c:	440a      	add	r2, r1
 801c55e:	4291      	cmp	r1, r2
 801c560:	f100 33ff 	add.w	r3, r0, #4294967295
 801c564:	d100      	bne.n	801c568 <memcpy+0xc>
 801c566:	4770      	bx	lr
 801c568:	b510      	push	{r4, lr}
 801c56a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c56e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c572:	4291      	cmp	r1, r2
 801c574:	d1f9      	bne.n	801c56a <memcpy+0xe>
 801c576:	bd10      	pop	{r4, pc}

0801c578 <memset>:
 801c578:	4402      	add	r2, r0
 801c57a:	4603      	mov	r3, r0
 801c57c:	4293      	cmp	r3, r2
 801c57e:	d100      	bne.n	801c582 <memset+0xa>
 801c580:	4770      	bx	lr
 801c582:	f803 1b01 	strb.w	r1, [r3], #1
 801c586:	e7f9      	b.n	801c57c <memset+0x4>

0801c588 <register_fini>:
 801c588:	4b02      	ldr	r3, [pc, #8]	; (801c594 <register_fini+0xc>)
 801c58a:	b113      	cbz	r3, 801c592 <register_fini+0xa>
 801c58c:	4802      	ldr	r0, [pc, #8]	; (801c598 <register_fini+0x10>)
 801c58e:	f000 b805 	b.w	801c59c <atexit>
 801c592:	4770      	bx	lr
 801c594:	00000000 	.word	0x00000000
 801c598:	0801c5a9 	.word	0x0801c5a9

0801c59c <atexit>:
 801c59c:	2300      	movs	r3, #0
 801c59e:	4601      	mov	r1, r0
 801c5a0:	461a      	mov	r2, r3
 801c5a2:	4618      	mov	r0, r3
 801c5a4:	f000 b816 	b.w	801c5d4 <__register_exitproc>

0801c5a8 <__libc_fini_array>:
 801c5a8:	b538      	push	{r3, r4, r5, lr}
 801c5aa:	4d07      	ldr	r5, [pc, #28]	; (801c5c8 <__libc_fini_array+0x20>)
 801c5ac:	4c07      	ldr	r4, [pc, #28]	; (801c5cc <__libc_fini_array+0x24>)
 801c5ae:	1b64      	subs	r4, r4, r5
 801c5b0:	10a4      	asrs	r4, r4, #2
 801c5b2:	b91c      	cbnz	r4, 801c5bc <__libc_fini_array+0x14>
 801c5b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c5b8:	f000 b8d4 	b.w	801c764 <_fini>
 801c5bc:	3c01      	subs	r4, #1
 801c5be:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801c5c2:	4798      	blx	r3
 801c5c4:	e7f5      	b.n	801c5b2 <__libc_fini_array+0xa>
 801c5c6:	bf00      	nop
 801c5c8:	0801d2cc 	.word	0x0801d2cc
 801c5cc:	0801d2d0 	.word	0x0801d2d0

0801c5d0 <__retarget_lock_acquire_recursive>:
 801c5d0:	4770      	bx	lr

0801c5d2 <__retarget_lock_release_recursive>:
 801c5d2:	4770      	bx	lr

0801c5d4 <__register_exitproc>:
 801c5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c5d8:	f8df a074 	ldr.w	sl, [pc, #116]	; 801c650 <__register_exitproc+0x7c>
 801c5dc:	4606      	mov	r6, r0
 801c5de:	f8da 0000 	ldr.w	r0, [sl]
 801c5e2:	4698      	mov	r8, r3
 801c5e4:	460f      	mov	r7, r1
 801c5e6:	4691      	mov	r9, r2
 801c5e8:	f7ff fff2 	bl	801c5d0 <__retarget_lock_acquire_recursive>
 801c5ec:	4b19      	ldr	r3, [pc, #100]	; (801c654 <__register_exitproc+0x80>)
 801c5ee:	681b      	ldr	r3, [r3, #0]
 801c5f0:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 801c5f4:	b91c      	cbnz	r4, 801c5fe <__register_exitproc+0x2a>
 801c5f6:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801c5fa:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 801c5fe:	6865      	ldr	r5, [r4, #4]
 801c600:	f8da 0000 	ldr.w	r0, [sl]
 801c604:	2d1f      	cmp	r5, #31
 801c606:	dd05      	ble.n	801c614 <__register_exitproc+0x40>
 801c608:	f7ff ffe3 	bl	801c5d2 <__retarget_lock_release_recursive>
 801c60c:	f04f 30ff 	mov.w	r0, #4294967295
 801c610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c614:	b19e      	cbz	r6, 801c63e <__register_exitproc+0x6a>
 801c616:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801c61a:	2201      	movs	r2, #1
 801c61c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801c620:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801c624:	40aa      	lsls	r2, r5
 801c626:	4313      	orrs	r3, r2
 801c628:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801c62c:	2e02      	cmp	r6, #2
 801c62e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801c632:	bf02      	ittt	eq
 801c634:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801c638:	4313      	orreq	r3, r2
 801c63a:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801c63e:	1c6b      	adds	r3, r5, #1
 801c640:	3502      	adds	r5, #2
 801c642:	6063      	str	r3, [r4, #4]
 801c644:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801c648:	f7ff ffc3 	bl	801c5d2 <__retarget_lock_release_recursive>
 801c64c:	2000      	movs	r0, #0
 801c64e:	e7df      	b.n	801c610 <__register_exitproc+0x3c>
 801c650:	20000578 	.word	0x20000578
 801c654:	0801d1f8 	.word	0x0801d1f8

0801c658 <floor>:
 801c658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c65c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801c660:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801c664:	2e13      	cmp	r6, #19
 801c666:	4602      	mov	r2, r0
 801c668:	460b      	mov	r3, r1
 801c66a:	4607      	mov	r7, r0
 801c66c:	460c      	mov	r4, r1
 801c66e:	4605      	mov	r5, r0
 801c670:	dc33      	bgt.n	801c6da <floor+0x82>
 801c672:	2e00      	cmp	r6, #0
 801c674:	da14      	bge.n	801c6a0 <floor+0x48>
 801c676:	a334      	add	r3, pc, #208	; (adr r3, 801c748 <floor+0xf0>)
 801c678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c67c:	f7e3 fd8a 	bl	8000194 <__adddf3>
 801c680:	2200      	movs	r2, #0
 801c682:	2300      	movs	r3, #0
 801c684:	f7e4 f9cc 	bl	8000a20 <__aeabi_dcmpgt>
 801c688:	b138      	cbz	r0, 801c69a <floor+0x42>
 801c68a:	2c00      	cmp	r4, #0
 801c68c:	da58      	bge.n	801c740 <floor+0xe8>
 801c68e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801c692:	431d      	orrs	r5, r3
 801c694:	d001      	beq.n	801c69a <floor+0x42>
 801c696:	4c2e      	ldr	r4, [pc, #184]	; (801c750 <floor+0xf8>)
 801c698:	2500      	movs	r5, #0
 801c69a:	4623      	mov	r3, r4
 801c69c:	462f      	mov	r7, r5
 801c69e:	e025      	b.n	801c6ec <floor+0x94>
 801c6a0:	4a2c      	ldr	r2, [pc, #176]	; (801c754 <floor+0xfc>)
 801c6a2:	fa42 f806 	asr.w	r8, r2, r6
 801c6a6:	ea01 0208 	and.w	r2, r1, r8
 801c6aa:	4302      	orrs	r2, r0
 801c6ac:	d01e      	beq.n	801c6ec <floor+0x94>
 801c6ae:	a326      	add	r3, pc, #152	; (adr r3, 801c748 <floor+0xf0>)
 801c6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6b4:	f7e3 fd6e 	bl	8000194 <__adddf3>
 801c6b8:	2200      	movs	r2, #0
 801c6ba:	2300      	movs	r3, #0
 801c6bc:	f7e4 f9b0 	bl	8000a20 <__aeabi_dcmpgt>
 801c6c0:	2800      	cmp	r0, #0
 801c6c2:	d0ea      	beq.n	801c69a <floor+0x42>
 801c6c4:	2c00      	cmp	r4, #0
 801c6c6:	bfbe      	ittt	lt
 801c6c8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801c6cc:	fa43 f606 	asrlt.w	r6, r3, r6
 801c6d0:	19a4      	addlt	r4, r4, r6
 801c6d2:	ea24 0408 	bic.w	r4, r4, r8
 801c6d6:	2500      	movs	r5, #0
 801c6d8:	e7df      	b.n	801c69a <floor+0x42>
 801c6da:	2e33      	cmp	r6, #51	; 0x33
 801c6dc:	dd0a      	ble.n	801c6f4 <floor+0x9c>
 801c6de:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c6e2:	d103      	bne.n	801c6ec <floor+0x94>
 801c6e4:	f7e3 fd56 	bl	8000194 <__adddf3>
 801c6e8:	4607      	mov	r7, r0
 801c6ea:	460b      	mov	r3, r1
 801c6ec:	4638      	mov	r0, r7
 801c6ee:	4619      	mov	r1, r3
 801c6f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c6f4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801c6f8:	f04f 32ff 	mov.w	r2, #4294967295
 801c6fc:	fa22 f808 	lsr.w	r8, r2, r8
 801c700:	ea18 0f00 	tst.w	r8, r0
 801c704:	d0f2      	beq.n	801c6ec <floor+0x94>
 801c706:	a310      	add	r3, pc, #64	; (adr r3, 801c748 <floor+0xf0>)
 801c708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c70c:	f7e3 fd42 	bl	8000194 <__adddf3>
 801c710:	2200      	movs	r2, #0
 801c712:	2300      	movs	r3, #0
 801c714:	f7e4 f984 	bl	8000a20 <__aeabi_dcmpgt>
 801c718:	2800      	cmp	r0, #0
 801c71a:	d0be      	beq.n	801c69a <floor+0x42>
 801c71c:	2c00      	cmp	r4, #0
 801c71e:	da02      	bge.n	801c726 <floor+0xce>
 801c720:	2e14      	cmp	r6, #20
 801c722:	d103      	bne.n	801c72c <floor+0xd4>
 801c724:	3401      	adds	r4, #1
 801c726:	ea25 0508 	bic.w	r5, r5, r8
 801c72a:	e7b6      	b.n	801c69a <floor+0x42>
 801c72c:	2301      	movs	r3, #1
 801c72e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801c732:	fa03 f606 	lsl.w	r6, r3, r6
 801c736:	4435      	add	r5, r6
 801c738:	42bd      	cmp	r5, r7
 801c73a:	bf38      	it	cc
 801c73c:	18e4      	addcc	r4, r4, r3
 801c73e:	e7f2      	b.n	801c726 <floor+0xce>
 801c740:	2500      	movs	r5, #0
 801c742:	462c      	mov	r4, r5
 801c744:	e7a9      	b.n	801c69a <floor+0x42>
 801c746:	bf00      	nop
 801c748:	8800759c 	.word	0x8800759c
 801c74c:	7e37e43c 	.word	0x7e37e43c
 801c750:	bff00000 	.word	0xbff00000
 801c754:	000fffff 	.word	0x000fffff

0801c758 <_init>:
 801c758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c75a:	bf00      	nop
 801c75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c75e:	bc08      	pop	{r3}
 801c760:	469e      	mov	lr, r3
 801c762:	4770      	bx	lr

0801c764 <_fini>:
 801c764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c766:	bf00      	nop
 801c768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c76a:	bc08      	pop	{r3}
 801c76c:	469e      	mov	lr, r3
 801c76e:	4770      	bx	lr
