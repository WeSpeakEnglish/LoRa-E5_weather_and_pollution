
LoRa-E5_weather_and_pollution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020f40  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000edc  08021078  08021078  00031078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  08021f54  08021f54  00031f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08022014  08022014  000405ac  2**0
                  CONTENTS
  5 .ARM          00000008  08022014  08022014  00032014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802201c  0802201c  000405ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0802201c  0802201c  0003201c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08022024  08022024  00032024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000005ac  20000000  08022028  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000025ec  200005ac  080225d4  000405ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002b98  080225d4  00042b98  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000405ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00051798  00000000  00000000  000405d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b8ed  00000000  00000000  00091d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003f18  00000000  00000000  0009d660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003a80  00000000  00000000  000a1578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b132  00000000  00000000  000a4ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004ad77  00000000  00000000  000d012a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d958c  00000000  00000000  0011aea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001f442d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00010988  00000000  00000000  001f4480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	200005ac 	.word	0x200005ac
 8000154:	00000000 	.word	0x00000000
 8000158:	08021060 	.word	0x08021060

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	200005b0 	.word	0x200005b0
 8000174:	08021060 	.word	0x08021060

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_fmul>:
 8000d40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d48:	bf1e      	ittt	ne
 8000d4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4e:	ea92 0f0c 	teqne	r2, ip
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d06f      	beq.n	8000e38 <__aeabi_fmul+0xf8>
 8000d58:	441a      	add	r2, r3
 8000d5a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5e:	0240      	lsls	r0, r0, #9
 8000d60:	bf18      	it	ne
 8000d62:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d66:	d01e      	beq.n	8000da6 <__aeabi_fmul+0x66>
 8000d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d6c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d70:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d74:	fba0 3101 	umull	r3, r1, r0, r1
 8000d78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d7c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d80:	bf3e      	ittt	cc
 8000d82:	0049      	lslcc	r1, r1, #1
 8000d84:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d88:	005b      	lslcc	r3, r3, #1
 8000d8a:	ea40 0001 	orr.w	r0, r0, r1
 8000d8e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d92:	2afd      	cmp	r2, #253	; 0xfd
 8000d94:	d81d      	bhi.n	8000dd2 <__aeabi_fmul+0x92>
 8000d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9e:	bf08      	it	eq
 8000da0:	f020 0001 	biceq.w	r0, r0, #1
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dae:	bf08      	it	eq
 8000db0:	0249      	lsleq	r1, r1, #9
 8000db2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dba:	3a7f      	subs	r2, #127	; 0x7f
 8000dbc:	bfc2      	ittt	gt
 8000dbe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc6:	4770      	bxgt	lr
 8000dc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	dc5d      	bgt.n	8000e90 <__aeabi_fmul+0x150>
 8000dd4:	f112 0f19 	cmn.w	r2, #25
 8000dd8:	bfdc      	itt	le
 8000dda:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dde:	4770      	bxle	lr
 8000de0:	f1c2 0200 	rsb	r2, r2, #0
 8000de4:	0041      	lsls	r1, r0, #1
 8000de6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dea:	f1c2 0220 	rsb	r2, r2, #32
 8000dee:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df6:	f140 0000 	adc.w	r0, r0, #0
 8000dfa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfe:	bf08      	it	eq
 8000e00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e04:	4770      	bx	lr
 8000e06:	f092 0f00 	teq	r2, #0
 8000e0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0e:	bf02      	ittt	eq
 8000e10:	0040      	lsleq	r0, r0, #1
 8000e12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e16:	3a01      	subeq	r2, #1
 8000e18:	d0f9      	beq.n	8000e0e <__aeabi_fmul+0xce>
 8000e1a:	ea40 000c 	orr.w	r0, r0, ip
 8000e1e:	f093 0f00 	teq	r3, #0
 8000e22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0049      	lsleq	r1, r1, #1
 8000e2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2e:	3b01      	subeq	r3, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xe6>
 8000e32:	ea41 010c 	orr.w	r1, r1, ip
 8000e36:	e78f      	b.n	8000d58 <__aeabi_fmul+0x18>
 8000e38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	bf18      	it	ne
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d00a      	beq.n	8000e5e <__aeabi_fmul+0x11e>
 8000e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e4c:	bf18      	it	ne
 8000e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	d1d8      	bne.n	8000e06 <__aeabi_fmul+0xc6>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	4770      	bx	lr
 8000e5e:	f090 0f00 	teq	r0, #0
 8000e62:	bf17      	itett	ne
 8000e64:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e68:	4608      	moveq	r0, r1
 8000e6a:	f091 0f00 	teqne	r1, #0
 8000e6e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e72:	d014      	beq.n	8000e9e <__aeabi_fmul+0x15e>
 8000e74:	ea92 0f0c 	teq	r2, ip
 8000e78:	d101      	bne.n	8000e7e <__aeabi_fmul+0x13e>
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	d10f      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e7e:	ea93 0f0c 	teq	r3, ip
 8000e82:	d103      	bne.n	8000e8c <__aeabi_fmul+0x14c>
 8000e84:	024b      	lsls	r3, r1, #9
 8000e86:	bf18      	it	ne
 8000e88:	4608      	movne	r0, r1
 8000e8a:	d108      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e8c:	ea80 0001 	eor.w	r0, r0, r1
 8000e90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9c:	4770      	bx	lr
 8000e9e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_fdiv>:
 8000ea8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb0:	bf1e      	ittt	ne
 8000eb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb6:	ea92 0f0c 	teqne	r2, ip
 8000eba:	ea93 0f0c 	teqne	r3, ip
 8000ebe:	d069      	beq.n	8000f94 <__aeabi_fdiv+0xec>
 8000ec0:	eba2 0203 	sub.w	r2, r2, r3
 8000ec4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec8:	0249      	lsls	r1, r1, #9
 8000eca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ece:	d037      	beq.n	8000f40 <__aeabi_fdiv+0x98>
 8000ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000edc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	bf38      	it	cc
 8000ee4:	005b      	lslcc	r3, r3, #1
 8000ee6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	bf24      	itt	cs
 8000ef2:	1a5b      	subcs	r3, r3, r1
 8000ef4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0a:	bf24      	itt	cs
 8000f0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f18:	bf24      	itt	cs
 8000f1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	bf18      	it	ne
 8000f26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2a:	d1e0      	bne.n	8000eee <__aeabi_fdiv+0x46>
 8000f2c:	2afd      	cmp	r2, #253	; 0xfd
 8000f2e:	f63f af50 	bhi.w	8000dd2 <__aeabi_fmul+0x92>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f38:	bf08      	it	eq
 8000f3a:	f020 0001 	biceq.w	r0, r0, #1
 8000f3e:	4770      	bx	lr
 8000f40:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f48:	327f      	adds	r2, #127	; 0x7f
 8000f4a:	bfc2      	ittt	gt
 8000f4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f54:	4770      	bxgt	lr
 8000f56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	3a01      	subs	r2, #1
 8000f60:	e737      	b.n	8000dd2 <__aeabi_fmul+0x92>
 8000f62:	f092 0f00 	teq	r2, #0
 8000f66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6a:	bf02      	ittt	eq
 8000f6c:	0040      	lsleq	r0, r0, #1
 8000f6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f72:	3a01      	subeq	r2, #1
 8000f74:	d0f9      	beq.n	8000f6a <__aeabi_fdiv+0xc2>
 8000f76:	ea40 000c 	orr.w	r0, r0, ip
 8000f7a:	f093 0f00 	teq	r3, #0
 8000f7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0049      	lsleq	r1, r1, #1
 8000f86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8a:	3b01      	subeq	r3, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xda>
 8000f8e:	ea41 010c 	orr.w	r1, r1, ip
 8000f92:	e795      	b.n	8000ec0 <__aeabi_fdiv+0x18>
 8000f94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d108      	bne.n	8000fb0 <__aeabi_fdiv+0x108>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	f47f af7d 	bne.w	8000e9e <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	f47f af70 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e776      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	d104      	bne.n	8000fc0 <__aeabi_fdiv+0x118>
 8000fb6:	024b      	lsls	r3, r1, #9
 8000fb8:	f43f af4c 	beq.w	8000e54 <__aeabi_fmul+0x114>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e76e      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc4:	bf18      	it	ne
 8000fc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fca:	d1ca      	bne.n	8000f62 <__aeabi_fdiv+0xba>
 8000fcc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd0:	f47f af5c 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fd4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd8:	f47f af3c 	bne.w	8000e54 <__aeabi_fmul+0x114>
 8000fdc:	e75f      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fde:	bf00      	nop

08000fe0 <__gesf2>:
 8000fe0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe4:	e006      	b.n	8000ff4 <__cmpsf2+0x4>
 8000fe6:	bf00      	nop

08000fe8 <__lesf2>:
 8000fe8:	f04f 0c01 	mov.w	ip, #1
 8000fec:	e002      	b.n	8000ff4 <__cmpsf2+0x4>
 8000fee:	bf00      	nop

08000ff0 <__cmpsf2>:
 8000ff0:	f04f 0c01 	mov.w	ip, #1
 8000ff4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ffc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001000:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001004:	bf18      	it	ne
 8001006:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100a:	d011      	beq.n	8001030 <__cmpsf2+0x40>
 800100c:	b001      	add	sp, #4
 800100e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001012:	bf18      	it	ne
 8001014:	ea90 0f01 	teqne	r0, r1
 8001018:	bf58      	it	pl
 800101a:	ebb2 0003 	subspl.w	r0, r2, r3
 800101e:	bf88      	it	hi
 8001020:	17c8      	asrhi	r0, r1, #31
 8001022:	bf38      	it	cc
 8001024:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001028:	bf18      	it	ne
 800102a:	f040 0001 	orrne.w	r0, r0, #1
 800102e:	4770      	bx	lr
 8001030:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001034:	d102      	bne.n	800103c <__cmpsf2+0x4c>
 8001036:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103a:	d105      	bne.n	8001048 <__cmpsf2+0x58>
 800103c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001040:	d1e4      	bne.n	800100c <__cmpsf2+0x1c>
 8001042:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001046:	d0e1      	beq.n	800100c <__cmpsf2+0x1c>
 8001048:	f85d 0b04 	ldr.w	r0, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <__aeabi_cfrcmple>:
 8001050:	4684      	mov	ip, r0
 8001052:	4608      	mov	r0, r1
 8001054:	4661      	mov	r1, ip
 8001056:	e7ff      	b.n	8001058 <__aeabi_cfcmpeq>

08001058 <__aeabi_cfcmpeq>:
 8001058:	b50f      	push	{r0, r1, r2, r3, lr}
 800105a:	f7ff ffc9 	bl	8000ff0 <__cmpsf2>
 800105e:	2800      	cmp	r0, #0
 8001060:	bf48      	it	mi
 8001062:	f110 0f00 	cmnmi.w	r0, #0
 8001066:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001068 <__aeabi_fcmpeq>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff fff4 	bl	8001058 <__aeabi_cfcmpeq>
 8001070:	bf0c      	ite	eq
 8001072:	2001      	moveq	r0, #1
 8001074:	2000      	movne	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmplt>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffea 	bl	8001058 <__aeabi_cfcmpeq>
 8001084:	bf34      	ite	cc
 8001086:	2001      	movcc	r0, #1
 8001088:	2000      	movcs	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmple>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffe0 	bl	8001058 <__aeabi_cfcmpeq>
 8001098:	bf94      	ite	ls
 800109a:	2001      	movls	r0, #1
 800109c:	2000      	movhi	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmpge>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffd2 	bl	8001050 <__aeabi_cfrcmple>
 80010ac:	bf94      	ite	ls
 80010ae:	2001      	movls	r0, #1
 80010b0:	2000      	movhi	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmpgt>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffc8 	bl	8001050 <__aeabi_cfrcmple>
 80010c0:	bf34      	ite	cc
 80010c2:	2001      	movcc	r0, #1
 80010c4:	2000      	movcs	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_f2iz>:
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d4:	d30f      	bcc.n	80010f6 <__aeabi_f2iz+0x2a>
 80010d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010de:	d90d      	bls.n	80010fc <__aeabi_f2iz+0x30>
 80010e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	bf18      	it	ne
 80010f2:	4240      	negne	r0, r0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0000 	mov.w	r0, #0
 80010fa:	4770      	bx	lr
 80010fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001100:	d101      	bne.n	8001106 <__aeabi_f2iz+0x3a>
 8001102:	0242      	lsls	r2, r0, #9
 8001104:	d105      	bne.n	8001112 <__aeabi_f2iz+0x46>
 8001106:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110a:	bf08      	it	eq
 800110c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001110:	4770      	bx	lr
 8001112:	f04f 0000 	mov.w	r0, #0
 8001116:	4770      	bx	lr

08001118 <__aeabi_f2uiz>:
 8001118:	0042      	lsls	r2, r0, #1
 800111a:	d20e      	bcs.n	800113a <__aeabi_f2uiz+0x22>
 800111c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001120:	d30b      	bcc.n	800113a <__aeabi_f2uiz+0x22>
 8001122:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001126:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112a:	d409      	bmi.n	8001140 <__aeabi_f2uiz+0x28>
 800112c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001130:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001134:	fa23 f002 	lsr.w	r0, r3, r2
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2uiz+0x32>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d102      	bne.n	8001150 <__aeabi_f2uiz+0x38>
 800114a:	f04f 30ff 	mov.w	r0, #4294967295
 800114e:	4770      	bx	lr
 8001150:	f04f 0000 	mov.w	r0, #0
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop

08001158 <__aeabi_uldivmod>:
 8001158:	b953      	cbnz	r3, 8001170 <__aeabi_uldivmod+0x18>
 800115a:	b94a      	cbnz	r2, 8001170 <__aeabi_uldivmod+0x18>
 800115c:	2900      	cmp	r1, #0
 800115e:	bf08      	it	eq
 8001160:	2800      	cmpeq	r0, #0
 8001162:	bf1c      	itt	ne
 8001164:	f04f 31ff 	movne.w	r1, #4294967295
 8001168:	f04f 30ff 	movne.w	r0, #4294967295
 800116c:	f000 b974 	b.w	8001458 <__aeabi_idiv0>
 8001170:	f1ad 0c08 	sub.w	ip, sp, #8
 8001174:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001178:	f000 f806 	bl	8001188 <__udivmoddi4>
 800117c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001184:	b004      	add	sp, #16
 8001186:	4770      	bx	lr

08001188 <__udivmoddi4>:
 8001188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800118c:	9e08      	ldr	r6, [sp, #32]
 800118e:	460d      	mov	r5, r1
 8001190:	4604      	mov	r4, r0
 8001192:	4688      	mov	r8, r1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d14d      	bne.n	8001234 <__udivmoddi4+0xac>
 8001198:	428a      	cmp	r2, r1
 800119a:	4694      	mov	ip, r2
 800119c:	d968      	bls.n	8001270 <__udivmoddi4+0xe8>
 800119e:	fab2 f282 	clz	r2, r2
 80011a2:	b152      	cbz	r2, 80011ba <__udivmoddi4+0x32>
 80011a4:	fa01 f302 	lsl.w	r3, r1, r2
 80011a8:	f1c2 0120 	rsb	r1, r2, #32
 80011ac:	fa20 f101 	lsr.w	r1, r0, r1
 80011b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011b4:	ea41 0803 	orr.w	r8, r1, r3
 80011b8:	4094      	lsls	r4, r2
 80011ba:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80011be:	0c21      	lsrs	r1, r4, #16
 80011c0:	fbb8 fef5 	udiv	lr, r8, r5
 80011c4:	fa1f f78c 	uxth.w	r7, ip
 80011c8:	fb05 831e 	mls	r3, r5, lr, r8
 80011cc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80011d0:	fb0e f107 	mul.w	r1, lr, r7
 80011d4:	4299      	cmp	r1, r3
 80011d6:	d90b      	bls.n	80011f0 <__udivmoddi4+0x68>
 80011d8:	eb1c 0303 	adds.w	r3, ip, r3
 80011dc:	f10e 30ff 	add.w	r0, lr, #4294967295
 80011e0:	f080 811e 	bcs.w	8001420 <__udivmoddi4+0x298>
 80011e4:	4299      	cmp	r1, r3
 80011e6:	f240 811b 	bls.w	8001420 <__udivmoddi4+0x298>
 80011ea:	f1ae 0e02 	sub.w	lr, lr, #2
 80011ee:	4463      	add	r3, ip
 80011f0:	1a5b      	subs	r3, r3, r1
 80011f2:	b2a4      	uxth	r4, r4
 80011f4:	fbb3 f0f5 	udiv	r0, r3, r5
 80011f8:	fb05 3310 	mls	r3, r5, r0, r3
 80011fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001200:	fb00 f707 	mul.w	r7, r0, r7
 8001204:	42a7      	cmp	r7, r4
 8001206:	d90a      	bls.n	800121e <__udivmoddi4+0x96>
 8001208:	eb1c 0404 	adds.w	r4, ip, r4
 800120c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001210:	f080 8108 	bcs.w	8001424 <__udivmoddi4+0x29c>
 8001214:	42a7      	cmp	r7, r4
 8001216:	f240 8105 	bls.w	8001424 <__udivmoddi4+0x29c>
 800121a:	4464      	add	r4, ip
 800121c:	3802      	subs	r0, #2
 800121e:	1be4      	subs	r4, r4, r7
 8001220:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001224:	2100      	movs	r1, #0
 8001226:	b11e      	cbz	r6, 8001230 <__udivmoddi4+0xa8>
 8001228:	40d4      	lsrs	r4, r2
 800122a:	2300      	movs	r3, #0
 800122c:	e9c6 4300 	strd	r4, r3, [r6]
 8001230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001234:	428b      	cmp	r3, r1
 8001236:	d908      	bls.n	800124a <__udivmoddi4+0xc2>
 8001238:	2e00      	cmp	r6, #0
 800123a:	f000 80ee 	beq.w	800141a <__udivmoddi4+0x292>
 800123e:	2100      	movs	r1, #0
 8001240:	e9c6 0500 	strd	r0, r5, [r6]
 8001244:	4608      	mov	r0, r1
 8001246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800124a:	fab3 f183 	clz	r1, r3
 800124e:	2900      	cmp	r1, #0
 8001250:	d14a      	bne.n	80012e8 <__udivmoddi4+0x160>
 8001252:	42ab      	cmp	r3, r5
 8001254:	d302      	bcc.n	800125c <__udivmoddi4+0xd4>
 8001256:	4282      	cmp	r2, r0
 8001258:	f200 80f9 	bhi.w	800144e <__udivmoddi4+0x2c6>
 800125c:	1a84      	subs	r4, r0, r2
 800125e:	eb65 0303 	sbc.w	r3, r5, r3
 8001262:	2001      	movs	r0, #1
 8001264:	4698      	mov	r8, r3
 8001266:	2e00      	cmp	r6, #0
 8001268:	d0e2      	beq.n	8001230 <__udivmoddi4+0xa8>
 800126a:	e9c6 4800 	strd	r4, r8, [r6]
 800126e:	e7df      	b.n	8001230 <__udivmoddi4+0xa8>
 8001270:	b902      	cbnz	r2, 8001274 <__udivmoddi4+0xec>
 8001272:	deff      	udf	#255	; 0xff
 8001274:	fab2 f282 	clz	r2, r2
 8001278:	2a00      	cmp	r2, #0
 800127a:	f040 8091 	bne.w	80013a0 <__udivmoddi4+0x218>
 800127e:	eba1 050c 	sub.w	r5, r1, ip
 8001282:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001286:	fa1f fe8c 	uxth.w	lr, ip
 800128a:	2101      	movs	r1, #1
 800128c:	fbb5 f3f7 	udiv	r3, r5, r7
 8001290:	fb07 5013 	mls	r0, r7, r3, r5
 8001294:	0c25      	lsrs	r5, r4, #16
 8001296:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800129a:	fb0e f003 	mul.w	r0, lr, r3
 800129e:	42a8      	cmp	r0, r5
 80012a0:	d908      	bls.n	80012b4 <__udivmoddi4+0x12c>
 80012a2:	eb1c 0505 	adds.w	r5, ip, r5
 80012a6:	f103 38ff 	add.w	r8, r3, #4294967295
 80012aa:	d202      	bcs.n	80012b2 <__udivmoddi4+0x12a>
 80012ac:	42a8      	cmp	r0, r5
 80012ae:	f200 80cb 	bhi.w	8001448 <__udivmoddi4+0x2c0>
 80012b2:	4643      	mov	r3, r8
 80012b4:	1a2d      	subs	r5, r5, r0
 80012b6:	b2a4      	uxth	r4, r4
 80012b8:	fbb5 f0f7 	udiv	r0, r5, r7
 80012bc:	fb07 5510 	mls	r5, r7, r0, r5
 80012c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012c4:	fb0e fe00 	mul.w	lr, lr, r0
 80012c8:	45a6      	cmp	lr, r4
 80012ca:	d908      	bls.n	80012de <__udivmoddi4+0x156>
 80012cc:	eb1c 0404 	adds.w	r4, ip, r4
 80012d0:	f100 35ff 	add.w	r5, r0, #4294967295
 80012d4:	d202      	bcs.n	80012dc <__udivmoddi4+0x154>
 80012d6:	45a6      	cmp	lr, r4
 80012d8:	f200 80bb 	bhi.w	8001452 <__udivmoddi4+0x2ca>
 80012dc:	4628      	mov	r0, r5
 80012de:	eba4 040e 	sub.w	r4, r4, lr
 80012e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012e6:	e79e      	b.n	8001226 <__udivmoddi4+0x9e>
 80012e8:	f1c1 0720 	rsb	r7, r1, #32
 80012ec:	408b      	lsls	r3, r1
 80012ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80012f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80012f6:	fa20 f407 	lsr.w	r4, r0, r7
 80012fa:	fa05 f301 	lsl.w	r3, r5, r1
 80012fe:	431c      	orrs	r4, r3
 8001300:	40fd      	lsrs	r5, r7
 8001302:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001306:	fa00 f301 	lsl.w	r3, r0, r1
 800130a:	fbb5 f8f9 	udiv	r8, r5, r9
 800130e:	0c20      	lsrs	r0, r4, #16
 8001310:	fa1f fe8c 	uxth.w	lr, ip
 8001314:	fb09 5518 	mls	r5, r9, r8, r5
 8001318:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800131c:	fb08 f00e 	mul.w	r0, r8, lr
 8001320:	42a8      	cmp	r0, r5
 8001322:	fa02 f201 	lsl.w	r2, r2, r1
 8001326:	d90b      	bls.n	8001340 <__udivmoddi4+0x1b8>
 8001328:	eb1c 0505 	adds.w	r5, ip, r5
 800132c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001330:	f080 8088 	bcs.w	8001444 <__udivmoddi4+0x2bc>
 8001334:	42a8      	cmp	r0, r5
 8001336:	f240 8085 	bls.w	8001444 <__udivmoddi4+0x2bc>
 800133a:	f1a8 0802 	sub.w	r8, r8, #2
 800133e:	4465      	add	r5, ip
 8001340:	1a2d      	subs	r5, r5, r0
 8001342:	b2a4      	uxth	r4, r4
 8001344:	fbb5 f0f9 	udiv	r0, r5, r9
 8001348:	fb09 5510 	mls	r5, r9, r0, r5
 800134c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8001350:	fb00 fe0e 	mul.w	lr, r0, lr
 8001354:	45ae      	cmp	lr, r5
 8001356:	d908      	bls.n	800136a <__udivmoddi4+0x1e2>
 8001358:	eb1c 0505 	adds.w	r5, ip, r5
 800135c:	f100 34ff 	add.w	r4, r0, #4294967295
 8001360:	d26c      	bcs.n	800143c <__udivmoddi4+0x2b4>
 8001362:	45ae      	cmp	lr, r5
 8001364:	d96a      	bls.n	800143c <__udivmoddi4+0x2b4>
 8001366:	3802      	subs	r0, #2
 8001368:	4465      	add	r5, ip
 800136a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800136e:	fba0 9402 	umull	r9, r4, r0, r2
 8001372:	eba5 050e 	sub.w	r5, r5, lr
 8001376:	42a5      	cmp	r5, r4
 8001378:	46c8      	mov	r8, r9
 800137a:	46a6      	mov	lr, r4
 800137c:	d356      	bcc.n	800142c <__udivmoddi4+0x2a4>
 800137e:	d053      	beq.n	8001428 <__udivmoddi4+0x2a0>
 8001380:	b15e      	cbz	r6, 800139a <__udivmoddi4+0x212>
 8001382:	ebb3 0208 	subs.w	r2, r3, r8
 8001386:	eb65 050e 	sbc.w	r5, r5, lr
 800138a:	fa05 f707 	lsl.w	r7, r5, r7
 800138e:	fa22 f301 	lsr.w	r3, r2, r1
 8001392:	40cd      	lsrs	r5, r1
 8001394:	431f      	orrs	r7, r3
 8001396:	e9c6 7500 	strd	r7, r5, [r6]
 800139a:	2100      	movs	r1, #0
 800139c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013a0:	f1c2 0320 	rsb	r3, r2, #32
 80013a4:	fa20 f103 	lsr.w	r1, r0, r3
 80013a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80013ac:	fa25 f303 	lsr.w	r3, r5, r3
 80013b0:	4095      	lsls	r5, r2
 80013b2:	430d      	orrs	r5, r1
 80013b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013b8:	fa1f fe8c 	uxth.w	lr, ip
 80013bc:	fbb3 f1f7 	udiv	r1, r3, r7
 80013c0:	fb07 3011 	mls	r0, r7, r1, r3
 80013c4:	0c2b      	lsrs	r3, r5, #16
 80013c6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80013ca:	fb01 f00e 	mul.w	r0, r1, lr
 80013ce:	4298      	cmp	r0, r3
 80013d0:	fa04 f402 	lsl.w	r4, r4, r2
 80013d4:	d908      	bls.n	80013e8 <__udivmoddi4+0x260>
 80013d6:	eb1c 0303 	adds.w	r3, ip, r3
 80013da:	f101 38ff 	add.w	r8, r1, #4294967295
 80013de:	d22f      	bcs.n	8001440 <__udivmoddi4+0x2b8>
 80013e0:	4298      	cmp	r0, r3
 80013e2:	d92d      	bls.n	8001440 <__udivmoddi4+0x2b8>
 80013e4:	3902      	subs	r1, #2
 80013e6:	4463      	add	r3, ip
 80013e8:	1a1b      	subs	r3, r3, r0
 80013ea:	b2ad      	uxth	r5, r5
 80013ec:	fbb3 f0f7 	udiv	r0, r3, r7
 80013f0:	fb07 3310 	mls	r3, r7, r0, r3
 80013f4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80013f8:	fb00 f30e 	mul.w	r3, r0, lr
 80013fc:	42ab      	cmp	r3, r5
 80013fe:	d908      	bls.n	8001412 <__udivmoddi4+0x28a>
 8001400:	eb1c 0505 	adds.w	r5, ip, r5
 8001404:	f100 38ff 	add.w	r8, r0, #4294967295
 8001408:	d216      	bcs.n	8001438 <__udivmoddi4+0x2b0>
 800140a:	42ab      	cmp	r3, r5
 800140c:	d914      	bls.n	8001438 <__udivmoddi4+0x2b0>
 800140e:	3802      	subs	r0, #2
 8001410:	4465      	add	r5, ip
 8001412:	1aed      	subs	r5, r5, r3
 8001414:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001418:	e738      	b.n	800128c <__udivmoddi4+0x104>
 800141a:	4631      	mov	r1, r6
 800141c:	4630      	mov	r0, r6
 800141e:	e707      	b.n	8001230 <__udivmoddi4+0xa8>
 8001420:	4686      	mov	lr, r0
 8001422:	e6e5      	b.n	80011f0 <__udivmoddi4+0x68>
 8001424:	4618      	mov	r0, r3
 8001426:	e6fa      	b.n	800121e <__udivmoddi4+0x96>
 8001428:	454b      	cmp	r3, r9
 800142a:	d2a9      	bcs.n	8001380 <__udivmoddi4+0x1f8>
 800142c:	ebb9 0802 	subs.w	r8, r9, r2
 8001430:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001434:	3801      	subs	r0, #1
 8001436:	e7a3      	b.n	8001380 <__udivmoddi4+0x1f8>
 8001438:	4640      	mov	r0, r8
 800143a:	e7ea      	b.n	8001412 <__udivmoddi4+0x28a>
 800143c:	4620      	mov	r0, r4
 800143e:	e794      	b.n	800136a <__udivmoddi4+0x1e2>
 8001440:	4641      	mov	r1, r8
 8001442:	e7d1      	b.n	80013e8 <__udivmoddi4+0x260>
 8001444:	46d0      	mov	r8, sl
 8001446:	e77b      	b.n	8001340 <__udivmoddi4+0x1b8>
 8001448:	3b02      	subs	r3, #2
 800144a:	4465      	add	r5, ip
 800144c:	e732      	b.n	80012b4 <__udivmoddi4+0x12c>
 800144e:	4608      	mov	r0, r1
 8001450:	e709      	b.n	8001266 <__udivmoddi4+0xde>
 8001452:	4464      	add	r4, ip
 8001454:	3802      	subs	r0, #2
 8001456:	e742      	b.n	80012de <__udivmoddi4+0x156>

08001458 <__aeabi_idiv0>:
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop

0800145c <CS_Select>:
#define NRF24_CSN_PORT  GPIOB
#define NRF24_CSN_PIN   GPIO_PIN_9


void CS_Select (void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001466:	4802      	ldr	r0, [pc, #8]	; (8001470 <CS_Select+0x14>)
 8001468:	f005 f96c 	bl	8006744 <HAL_GPIO_WritePin>
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	48000400 	.word	0x48000400

08001474 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147e:	4802      	ldr	r0, [pc, #8]	; (8001488 <CS_UnSelect+0x14>)
 8001480:	f005 f960 	bl	8006744 <HAL_GPIO_WritePin>
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	48000400 	.word	0x48000400

0800148c <CE_Enable>:


void CE_Enable (void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001496:	4802      	ldr	r0, [pc, #8]	; (80014a0 <CE_Enable+0x14>)
 8001498:	f005 f954 	bl	8006744 <HAL_GPIO_WritePin>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	48000400 	.word	0x48000400

080014a4 <CE_Disable>:

void CE_Disable (void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ae:	4802      	ldr	r0, [pc, #8]	; (80014b8 <CE_Disable+0x14>)
 80014b0:	f005 f948 	bl	8006744 <HAL_GPIO_WritePin>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	48000400 	.word	0x48000400

080014bc <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	460a      	mov	r2, r1
 80014c6:	71fb      	strb	r3, [r7, #7]
 80014c8:	4613      	mov	r3, r2
 80014ca:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef checkOK;
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f043 0320 	orr.w	r3, r3, #32
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80014d6:	79bb      	ldrb	r3, [r7, #6]
 80014d8:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80014da:	f7ff ffbf 	bl	800145c <CS_Select>

	checkOK = HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80014de:	f107 010c 	add.w	r1, r7, #12
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	2202      	movs	r2, #2
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <nrf24_WriteReg+0x44>)
 80014ea:	f007 fedd 	bl	80092a8 <HAL_SPI_Transmit>
 80014ee:	4603      	mov	r3, r0
 80014f0:	73fb      	strb	r3, [r7, #15]

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80014f2:	f7ff ffbf 	bl	8001474 <CS_UnSelect>
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000788 	.word	0x20000788

08001504 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	f043 0320 	orr.w	r3, r3, #32
 8001518:	b2db      	uxtb	r3, r3
 800151a:	753b      	strb	r3, [r7, #20]
	//buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800151c:	f7ff ff9e 	bl	800145c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8001520:	f107 0114 	add.w	r1, r7, #20
 8001524:	2364      	movs	r3, #100	; 0x64
 8001526:	2201      	movs	r2, #1
 8001528:	4808      	ldr	r0, [pc, #32]	; (800154c <nrf24_WriteRegMulti+0x48>)
 800152a:	f007 febd 	bl	80092a8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	b29a      	uxth	r2, r3
 8001532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001536:	68b9      	ldr	r1, [r7, #8]
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <nrf24_WriteRegMulti+0x48>)
 800153a:	f007 feb5 	bl	80092a8 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800153e:	f7ff ff99 	bl	8001474 <CS_UnSelect>
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000788 	.word	0x20000788

08001550 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800155a:	2300      	movs	r3, #0
 800155c:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800155e:	f7ff ff7d 	bl	800145c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8001562:	1df9      	adds	r1, r7, #7
 8001564:	2364      	movs	r3, #100	; 0x64
 8001566:	2201      	movs	r2, #1
 8001568:	4808      	ldr	r0, [pc, #32]	; (800158c <nrf24_ReadReg+0x3c>)
 800156a:	f007 fe9d 	bl	80092a8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800156e:	f107 010f 	add.w	r1, r7, #15
 8001572:	2364      	movs	r3, #100	; 0x64
 8001574:	2201      	movs	r2, #1
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <nrf24_ReadReg+0x3c>)
 8001578:	f008 f826 	bl	80095c8 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800157c:	f7ff ff7a 	bl	8001474 <CS_UnSelect>

	return data;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000788 	.word	0x20000788

08001590 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800159e:	f7ff ff5d 	bl	800145c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80015a2:	f107 010f 	add.w	r1, r7, #15
 80015a6:	2364      	movs	r3, #100	; 0x64
 80015a8:	2201      	movs	r2, #1
 80015aa:	4808      	ldr	r0, [pc, #32]	; (80015cc <nrf24_ReadReg_Multi+0x3c>)
 80015ac:	f007 fe7c 	bl	80092a8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	4804      	ldr	r0, [pc, #16]	; (80015cc <nrf24_ReadReg_Multi+0x3c>)
 80015bc:	f008 f804 	bl	80095c8 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80015c0:	f7ff ff58 	bl	8001474 <CS_UnSelect>
}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000788 	.word	0x20000788

080015d0 <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80015da:	f7ff ff3f 	bl	800145c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80015de:	1df9      	adds	r1, r7, #7
 80015e0:	2364      	movs	r3, #100	; 0x64
 80015e2:	2201      	movs	r2, #1
 80015e4:	4804      	ldr	r0, [pc, #16]	; (80015f8 <nrfsendCmd+0x28>)
 80015e6:	f007 fe5f 	bl	80092a8 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80015ea:	f7ff ff43 	bl	8001474 <CS_UnSelect>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000788 	.word	0x20000788

080015fc <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b07      	cmp	r3, #7
 800160a:	d104      	bne.n	8001616 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 800160c:	2100      	movs	r1, #0
 800160e:	2007      	movs	r0, #7
 8001610:	f7ff ff54 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8001614:	e090      	b.n	8001738 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	2b17      	cmp	r3, #23
 800161a:	d104      	bne.n	8001626 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 800161c:	2111      	movs	r1, #17
 800161e:	2017      	movs	r0, #23
 8001620:	f7ff ff4c 	bl	80014bc <nrf24_WriteReg>
}
 8001624:	e088      	b.n	8001738 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8001626:	2108      	movs	r1, #8
 8001628:	2000      	movs	r0, #0
 800162a:	f7ff ff47 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 800162e:	213f      	movs	r1, #63	; 0x3f
 8001630:	2001      	movs	r0, #1
 8001632:	f7ff ff43 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8001636:	2103      	movs	r1, #3
 8001638:	2002      	movs	r0, #2
 800163a:	f7ff ff3f 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 800163e:	2103      	movs	r1, #3
 8001640:	2003      	movs	r0, #3
 8001642:	f7ff ff3b 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8001646:	2103      	movs	r1, #3
 8001648:	2004      	movs	r0, #4
 800164a:	f7ff ff37 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 800164e:	2102      	movs	r1, #2
 8001650:	2005      	movs	r0, #5
 8001652:	f7ff ff33 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8001656:	210e      	movs	r1, #14
 8001658:	2006      	movs	r0, #6
 800165a:	f7ff ff2f 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 800165e:	2100      	movs	r1, #0
 8001660:	2007      	movs	r0, #7
 8001662:	f7ff ff2b 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8001666:	2100      	movs	r1, #0
 8001668:	2008      	movs	r0, #8
 800166a:	f7ff ff27 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800166e:	2100      	movs	r1, #0
 8001670:	2009      	movs	r0, #9
 8001672:	f7ff ff23 	bl	80014bc <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001676:	4a32      	ldr	r2, [pc, #200]	; (8001740 <nrf24_reset+0x144>)
 8001678:	f107 0318 	add.w	r3, r7, #24
 800167c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001680:	6018      	str	r0, [r3, #0]
 8001682:	3304      	adds	r3, #4
 8001684:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8001686:	f107 0318 	add.w	r3, r7, #24
 800168a:	2205      	movs	r2, #5
 800168c:	4619      	mov	r1, r3
 800168e:	200a      	movs	r0, #10
 8001690:	f7ff ff38 	bl	8001504 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001694:	4a2b      	ldr	r2, [pc, #172]	; (8001744 <nrf24_reset+0x148>)
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800169e:	6018      	str	r0, [r3, #0]
 80016a0:	3304      	adds	r3, #4
 80016a2:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	2205      	movs	r2, #5
 80016aa:	4619      	mov	r1, r3
 80016ac:	200b      	movs	r0, #11
 80016ae:	f7ff ff29 	bl	8001504 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80016b2:	21c3      	movs	r1, #195	; 0xc3
 80016b4:	200c      	movs	r0, #12
 80016b6:	f7ff ff01 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80016ba:	21c4      	movs	r1, #196	; 0xc4
 80016bc:	200d      	movs	r0, #13
 80016be:	f7ff fefd 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80016c2:	21c5      	movs	r1, #197	; 0xc5
 80016c4:	200e      	movs	r0, #14
 80016c6:	f7ff fef9 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80016ca:	21c6      	movs	r1, #198	; 0xc6
 80016cc:	200f      	movs	r0, #15
 80016ce:	f7ff fef5 	bl	80014bc <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80016d2:	4a1b      	ldr	r2, [pc, #108]	; (8001740 <nrf24_reset+0x144>)
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016dc:	6018      	str	r0, [r3, #0]
 80016de:	3304      	adds	r3, #4
 80016e0:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	2205      	movs	r2, #5
 80016e8:	4619      	mov	r1, r3
 80016ea:	2010      	movs	r0, #16
 80016ec:	f7ff ff0a 	bl	8001504 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80016f0:	2100      	movs	r1, #0
 80016f2:	2011      	movs	r0, #17
 80016f4:	f7ff fee2 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80016f8:	2100      	movs	r1, #0
 80016fa:	2012      	movs	r0, #18
 80016fc:	f7ff fede 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8001700:	2100      	movs	r1, #0
 8001702:	2013      	movs	r0, #19
 8001704:	f7ff feda 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8001708:	2100      	movs	r1, #0
 800170a:	2014      	movs	r0, #20
 800170c:	f7ff fed6 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8001710:	2100      	movs	r1, #0
 8001712:	2015      	movs	r0, #21
 8001714:	f7ff fed2 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8001718:	2100      	movs	r1, #0
 800171a:	2016      	movs	r0, #22
 800171c:	f7ff fece 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001720:	2111      	movs	r1, #17
 8001722:	2017      	movs	r0, #23
 8001724:	f7ff feca 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8001728:	2100      	movs	r1, #0
 800172a:	201c      	movs	r0, #28
 800172c:	f7ff fec6 	bl	80014bc <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8001730:	2100      	movs	r1, #0
 8001732:	201d      	movs	r0, #29
 8001734:	f7ff fec2 	bl	80014bc <nrf24_WriteReg>
}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	08021078 	.word	0x08021078
 8001744:	08021080 	.word	0x08021080

08001748 <NRF24_Init>:




void NRF24_Init (void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 800174c:	f7ff feaa 	bl	80014a4 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff ff53 	bl	80015fc <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8001756:	2100      	movs	r1, #0
 8001758:	2000      	movs	r0, #0
 800175a:	f7ff feaf 	bl	80014bc <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 800175e:	2100      	movs	r1, #0
 8001760:	2001      	movs	r0, #1
 8001762:	f7ff feab 	bl	80014bc <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8001766:	2100      	movs	r1, #0
 8001768:	2002      	movs	r0, #2
 800176a:	f7ff fea7 	bl	80014bc <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800176e:	2103      	movs	r1, #3
 8001770:	2003      	movs	r0, #3
 8001772:	f7ff fea3 	bl	80014bc <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0x07);   // No retransmission
 8001776:	2107      	movs	r1, #7
 8001778:	2004      	movs	r0, #4
 800177a:	f7ff fe9f 	bl	80014bc <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800177e:	2100      	movs	r1, #0
 8001780:	2005      	movs	r0, #5
 8001782:	f7ff fe9b 	bl	80014bc <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x03);   // Power= 0db, data rate = 2Mbps 0x0e
 8001786:	2103      	movs	r1, #3
 8001788:	2006      	movs	r0, #6
 800178a:	f7ff fe97 	bl	80014bc <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800178e:	f7ff fe7d 	bl	800148c <CE_Enable>

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}

08001796 <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	460b      	mov	r3, r1
 80017a0:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 80017a2:	f7ff fe7f 	bl	80014a4 <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	4619      	mov	r1, r3
 80017aa:	2005      	movs	r0, #5
 80017ac:	f7ff fe86 	bl	80014bc <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 80017b0:	2205      	movs	r2, #5
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	2010      	movs	r0, #16
 80017b6:	f7ff fea5 	bl	8001504 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff fec8 	bl	8001550 <nrf24_ReadReg>
 80017c0:	4603      	mov	r3, r0
 80017c2:	73fb      	strb	r3, [r7, #15]
	config = config | 12;   // write 1 in the PWR_UP bit crc enable 16 bits
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	f043 030c 	orr.w	r3, r3, #12
 80017ca:	73fb      	strb	r3, [r7, #15]
//	config = config & (0xF6);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
	nrf24_WriteReg (CONFIG, config);
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	4619      	mov	r1, r3
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff fe73 	bl	80014bc <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80017d6:	f7ff fe59 	bl	800148c <CE_Enable>
}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	73bb      	strb	r3, [r7, #14]

	// select the device
	CS_Select();
 80017f0:	f7ff fe34 	bl	800145c <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 80017f4:	23a0      	movs	r3, #160	; 0xa0
 80017f6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80017f8:	f107 010e 	add.w	r1, r7, #14
 80017fc:	2364      	movs	r3, #100	; 0x64
 80017fe:	2201      	movs	r2, #1
 8001800:	4816      	ldr	r0, [pc, #88]	; (800185c <NRF24_Transmit+0x78>)
 8001802:	f007 fd51 	bl	80092a8 <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 8001806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180a:	2220      	movs	r2, #32
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4813      	ldr	r0, [pc, #76]	; (800185c <NRF24_Transmit+0x78>)
 8001810:	f007 fd4a 	bl	80092a8 <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 8001814:	f7ff fe2e 	bl	8001474 <CS_UnSelect>

	HAL_Delay(1);
 8001818:	2001      	movs	r0, #1
 800181a:	f001 fc89 	bl	8003130 <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 800181e:	2017      	movs	r0, #23
 8001820:	f7ff fe96 	bl	8001550 <nrf24_ReadReg>
 8001824:	4603      	mov	r3, r0
 8001826:	73fb      	strb	r3, [r7, #15]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00f      	beq.n	8001852 <NRF24_Transmit+0x6e>
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10a      	bne.n	8001852 <NRF24_Transmit+0x6e>
	{
		cmdtosend = FLUSH_TX;
 800183c:	23e1      	movs	r3, #225	; 0xe1
 800183e:	73bb      	strb	r3, [r7, #14]
		nrfsendCmd(cmdtosend);
 8001840:	7bbb      	ldrb	r3, [r7, #14]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fec4 	bl	80015d0 <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 8001848:	2017      	movs	r0, #23
 800184a:	f7ff fed7 	bl	80015fc <nrf24_reset>

		return 1;
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <NRF24_Transmit+0x70>
	}

	return 0;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000788 	.word	0x20000788

08001860 <NRF24_RxMode>:


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800186c:	f7ff fe1a 	bl	80014a4 <CE_Disable>

	nrf24_reset (STATUS);
 8001870:	2007      	movs	r0, #7
 8001872:	f7ff fec3 	bl	80015fc <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	4619      	mov	r1, r3
 800187a:	2005      	movs	r0, #5
 800187c:	f7ff fe1e 	bl	80014bc <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8001880:	2002      	movs	r0, #2
 8001882:	f7ff fe65 	bl	8001550 <nrf24_ReadReg>
 8001886:	4603      	mov	r3, r0
 8001888:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	4619      	mov	r1, r3
 8001896:	2002      	movs	r0, #2
 8001898:	f7ff fe10 	bl	80014bc <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 800189c:	2205      	movs	r2, #5
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	200b      	movs	r0, #11
 80018a2:	f7ff fe2f 	bl	8001504 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 80018a6:	21ee      	movs	r1, #238	; 0xee
 80018a8:	200c      	movs	r0, #12
 80018aa:	f7ff fe07 	bl	80014bc <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 80018ae:	2120      	movs	r1, #32
 80018b0:	2013      	movs	r0, #19
 80018b2:	f7ff fe03 	bl	80014bc <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f7ff fe4a 	bl	8001550 <nrf24_ReadReg>
 80018bc:	4603      	mov	r3, r0
 80018be:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 80018c0:	7bbb      	ldrb	r3, [r7, #14]
 80018c2:	f043 0303 	orr.w	r3, r3, #3
 80018c6:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 80018c8:	7bbb      	ldrb	r3, [r7, #14]
 80018ca:	4619      	mov	r1, r3
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff fdf5 	bl	80014bc <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80018d2:	f7ff fddb 	bl	800148c <CE_Enable>
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 80018e6:	2007      	movs	r0, #7
 80018e8:	f7ff fe32 	bl	8001550 <nrf24_ReadReg>
 80018ec:	4603      	mov	r3, r0
 80018ee:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00b      	beq.n	8001912 <isDataAvailable+0x34>
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4013      	ands	r3, r2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8001906:	2140      	movs	r1, #64	; 0x40
 8001908:	2007      	movs	r0, #7
 800190a:	f7ff fdd7 	bl	80014bc <nrf24_WriteReg>

		return 1;
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <isDataAvailable+0x36>
	}

	return 0;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8001928:	f7ff fd98 	bl	800145c <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 800192c:	2361      	movs	r3, #97	; 0x61
 800192e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8001930:	f107 010f 	add.w	r1, r7, #15
 8001934:	2364      	movs	r3, #100	; 0x64
 8001936:	2201      	movs	r2, #1
 8001938:	480c      	ldr	r0, [pc, #48]	; (800196c <NRF24_Receive+0x50>)
 800193a:	f007 fcb5 	bl	80092a8 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 800193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001942:	2220      	movs	r2, #32
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4809      	ldr	r0, [pc, #36]	; (800196c <NRF24_Receive+0x50>)
 8001948:	f007 fe3e 	bl	80095c8 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 800194c:	f7ff fd92 	bl	8001474 <CS_UnSelect>

	HAL_Delay(1);
 8001950:	2001      	movs	r0, #1
 8001952:	f001 fbed 	bl	8003130 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8001956:	23e2      	movs	r3, #226	; 0xe2
 8001958:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fe37 	bl	80015d0 <nrfsendCmd>
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000788 	.word	0x20000788

08001970 <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	e00c      	b.n	8001998 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	b2d9      	uxtb	r1, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	18d4      	adds	r4, r2, r3
 8001988:	4608      	mov	r0, r1
 800198a:	f7ff fde1 	bl	8001550 <nrf24_ReadReg>
 800198e:	4603      	mov	r3, r0
 8001990:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3301      	adds	r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b09      	cmp	r3, #9
 800199c:	ddef      	ble.n	800197e <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	330a      	adds	r3, #10
 80019a2:	2205      	movs	r2, #5
 80019a4:	4619      	mov	r1, r3
 80019a6:	200a      	movs	r0, #10
 80019a8:	f7ff fdf2 	bl	8001590 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	330f      	adds	r3, #15
 80019b0:	2205      	movs	r2, #5
 80019b2:	4619      	mov	r1, r3
 80019b4:	200b      	movs	r0, #11
 80019b6:	f7ff fdeb 	bl	8001590 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f103 0414 	add.w	r4, r3, #20
 80019c0:	200c      	movs	r0, #12
 80019c2:	f7ff fdc5 	bl	8001550 <nrf24_ReadReg>
 80019c6:	4603      	mov	r3, r0
 80019c8:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f103 0415 	add.w	r4, r3, #21
 80019d0:	200d      	movs	r0, #13
 80019d2:	f7ff fdbd 	bl	8001550 <nrf24_ReadReg>
 80019d6:	4603      	mov	r3, r0
 80019d8:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f103 0416 	add.w	r4, r3, #22
 80019e0:	200e      	movs	r0, #14
 80019e2:	f7ff fdb5 	bl	8001550 <nrf24_ReadReg>
 80019e6:	4603      	mov	r3, r0
 80019e8:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f103 0417 	add.w	r4, r3, #23
 80019f0:	200f      	movs	r0, #15
 80019f2:	f7ff fdad 	bl	8001550 <nrf24_ReadReg>
 80019f6:	4603      	mov	r3, r0
 80019f8:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3318      	adds	r3, #24
 80019fe:	2205      	movs	r2, #5
 8001a00:	4619      	mov	r1, r3
 8001a02:	200a      	movs	r0, #10
 8001a04:	f7ff fdc4 	bl	8001590 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 8001a08:	231d      	movs	r3, #29
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	e00e      	b.n	8001a2c <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	3b0c      	subs	r3, #12
 8001a14:	b2d9      	uxtb	r1, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	18d4      	adds	r4, r2, r3
 8001a1c:	4608      	mov	r0, r1
 8001a1e:	f7ff fd97 	bl	8001550 <nrf24_ReadReg>
 8001a22:	4603      	mov	r3, r0
 8001a24:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b25      	cmp	r3, #37	; 0x25
 8001a30:	dded      	ble.n	8001a0e <NRF24_ReadAll+0x9e>
	}

}
 8001a32:	bf00      	nop
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd90      	pop	{r4, r7, pc}

08001a3c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a60:	68fb      	ldr	r3, [r7, #12]
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a82:	4013      	ands	r3, r2
 8001a84:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001a94:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <MX_ADC_Init+0x94>)
 8001a96:	4a24      	ldr	r2, [pc, #144]	; (8001b28 <MX_ADC_Init+0x98>)
 8001a98:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a9a:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <MX_ADC_Init+0x94>)
 8001a9c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001aa0:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <MX_ADC_Init+0x94>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aa8:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <MX_ADC_Init+0x94>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <MX_ADC_Init+0x94>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <MX_ADC_Init+0x94>)
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001aba:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <MX_ADC_Init+0x94>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <MX_ADC_Init+0x94>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001ac6:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <MX_ADC_Init+0x94>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <MX_ADC_Init+0x94>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <MX_ADC_Init+0x94>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ada:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <MX_ADC_Init+0x94>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <MX_ADC_Init+0x94>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <MX_ADC_Init+0x94>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <MX_ADC_Init+0x94>)
 8001af0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001af4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <MX_ADC_Init+0x94>)
 8001af8:	2207      	movs	r2, #7
 8001afa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <MX_ADC_Init+0x94>)
 8001afe:	2207      	movs	r2, #7
 8001b00:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <MX_ADC_Init+0x94>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <MX_ADC_Init+0x94>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001b10:	4804      	ldr	r0, [pc, #16]	; (8001b24 <MX_ADC_Init+0x94>)
 8001b12:	f002 fcff 	bl	8004514 <HAL_ADC_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001b1c:	f000 fe42 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200005c8 	.word	0x200005c8
 8001b28:	40012400 	.word	0x40012400

08001b2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <HAL_ADC_MspInit+0x24>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d103      	bne.n	8001b46 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b3e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b42:	f7ff ff7b 	bl	8001a3c <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40012400 	.word	0x40012400

08001b54 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <HAL_ADC_MspDeInit+0x24>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d103      	bne.n	8001b6e <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001b66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b6a:	f7ff ff7f 	bl	8001a6c <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40012400 	.word	0x40012400

08001b7c <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <SYS_InitMeasurement+0x14>)
 8001b82:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <SYS_InitMeasurement+0x18>)
 8001b84:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	200005c8 	.word	0x200005c8
 8001b94:	40012400 	.word	0x40012400

08001b98 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001ba6:	4813      	ldr	r0, [pc, #76]	; (8001bf4 <SYS_GetBatteryLevel+0x5c>)
 8001ba8:	f000 f82a 	bl	8001c00 <ADC_ReadChannels>
 8001bac:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d102      	bne.n	8001bba <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	80fb      	strh	r3, [r7, #6]
 8001bb8:	e016      	b.n	8001be8 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <SYS_GetBatteryLevel+0x60>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00b      	beq.n	8001bde <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <SYS_GetBatteryLevel+0x60>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001bd0:	fb03 f202 	mul.w	r2, r3, r2
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	80fb      	strh	r3, [r7, #6]
 8001bdc:	e004      	b.n	8001be8 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001bde:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <SYS_GetBatteryLevel+0x64>)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001be8:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	b4002000 	.word	0xb4002000
 8001bf8:	1fff75aa 	.word	0x1fff75aa
 8001bfc:	004c08d8 	.word	0x004c08d8

08001c00 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c0c:	f107 0308 	add.w	r3, r7, #8
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001c18:	f7ff ff3a 	bl	8001a90 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001c1c:	481a      	ldr	r0, [pc, #104]	; (8001c88 <ADC_ReadChannels+0x88>)
 8001c1e:	f003 faa8 	bl	8005172 <HAL_ADCEx_Calibration_Start>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001c28:	f000 fdbc 	bl	80027a4 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4812      	ldr	r0, [pc, #72]	; (8001c88 <ADC_ReadChannels+0x88>)
 8001c40:	f002 ffb4 	bl	8004bac <HAL_ADC_ConfigChannel>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001c4a:	f000 fdab 	bl	80027a4 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001c4e:	480e      	ldr	r0, [pc, #56]	; (8001c88 <ADC_ReadChannels+0x88>)
 8001c50:	f002 fe90 	bl	8004974 <HAL_ADC_Start>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001c5a:	f000 fda3 	bl	80027a4 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001c5e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c62:	4809      	ldr	r0, [pc, #36]	; (8001c88 <ADC_ReadChannels+0x88>)
 8001c64:	f002 fefe 	bl	8004a64 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001c68:	4807      	ldr	r0, [pc, #28]	; (8001c88 <ADC_ReadChannels+0x88>)
 8001c6a:	f002 fec9 	bl	8004a00 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001c6e:	4806      	ldr	r0, [pc, #24]	; (8001c88 <ADC_ReadChannels+0x88>)
 8001c70:	f002 ff8f 	bl	8004b92 <HAL_ADC_GetValue>
 8001c74:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001c76:	4804      	ldr	r0, [pc, #16]	; (8001c88 <ADC_ReadChannels+0x88>)
 8001c78:	f002 fe00 	bl	800487c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001c7c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200005c8 	.word	0x200005c8

08001c8c <LL_AHB1_GRP1_EnableClock>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4013      	ands	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
}
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001cc0:	2004      	movs	r0, #4
 8001cc2:	f7ff ffe3 	bl	8001c8c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f7ff ffe0 	bl	8001c8c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2102      	movs	r1, #2
 8001cd0:	200b      	movs	r0, #11
 8001cd2:	f003 fbf4 	bl	80054be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001cd6:	200b      	movs	r0, #11
 8001cd8:	f003 fc0b 	bl	80054f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	200c      	movs	r0, #12
 8001ce2:	f003 fbec 	bl	80054be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001ce6:	200c      	movs	r0, #12
 8001ce8:	f003 fc03 	bl	80054f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	200d      	movs	r0, #13
 8001cf2:	f003 fbe4 	bl	80054be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001cf6:	200d      	movs	r0, #13
 8001cf8:	f003 fbfb 	bl	80054f2 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	203d      	movs	r0, #61	; 0x3d
 8001d02:	f003 fbdc 	bl	80054be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8001d06:	203d      	movs	r0, #61	; 0x3d
 8001d08:	f003 fbf3 	bl	80054f2 <HAL_NVIC_EnableIRQ>

}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d20:	d101      	bne.n	8001d26 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 8001d26:	2300      	movs	r3, #0
#endif
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	58004000 	.word	0x58004000

08001d34 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08c      	sub	sp, #48	; 0x30
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001d4c:	4b56      	ldr	r3, [pc, #344]	; (8001ea8 <FLASH_IF_Write+0x174>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0299      	lsls	r1, r3, #10
 8001d52:	4b56      	ldr	r3, [pc, #344]	; (8001eac <FLASH_IF_Write+0x178>)
 8001d54:	400b      	ands	r3, r1
 8001d56:	fbb2 f1f3 	udiv	r1, r2, r3
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	0adb      	lsrs	r3, r3, #11
 8001d62:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	4a4d      	ldr	r2, [pc, #308]	; (8001ea8 <FLASH_IF_Write+0x174>)
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	0291      	lsls	r1, r2, #10
 8001d76:	4a4d      	ldr	r2, [pc, #308]	; (8001eac <FLASH_IF_Write+0x178>)
 8001d78:	400a      	ands	r2, r1
 8001d7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d7e:	fb01 f202 	mul.w	r2, r1, r2
 8001d82:	1a9b      	subs	r3, r3, r2
 8001d84:	0adb      	lsrs	r3, r3, #11
 8001d86:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d009      	beq.n	8001dae <FLASH_IF_Write+0x7a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d104      	bne.n	8001dae <FLASH_IF_Write+0x7a>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 8001dae:	f06f 0304 	mvn.w	r3, #4
 8001db2:	e074      	b.n	8001e9e <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001db4:	4b3e      	ldr	r3, [pc, #248]	; (8001eb0 <FLASH_IF_Write+0x17c>)
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	da02      	bge.n	8001dc2 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 8001dbc:	f06f 0303 	mvn.w	r3, #3
 8001dc0:	e06d      	b.n	8001e9e <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d005      	beq.n	8001dd6 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dd0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	e05b      	b.n	8001e94 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 f8f8 	bl	8001fd6 <FLASH_IF_IsEmpty>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d037      	beq.n	8001e5c <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001df2:	f06f 0304 	mvn.w	r3, #4
 8001df6:	e052      	b.n	8001e9e <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001dfe:	02db      	lsls	r3, r3, #11
 8001e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e04:	4619      	mov	r1, r3
 8001e06:	6838      	ldr	r0, [r7, #0]
 8001e08:	f01d fd4e 	bl	801f8a8 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	4413      	add	r3, r2
 8001e16:	6a39      	ldr	r1, [r7, #32]
 8001e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e1a:	b292      	uxth	r2, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f01d fd43 	bl	801f8a8 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8001e22:	2200      	movs	r2, #0
 8001e24:	2101      	movs	r1, #1
 8001e26:	69f8      	ldr	r0, [r7, #28]
 8001e28:	f000 f865 	bl	8001ef6 <FLASH_IF_EraseByPages>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 8001e32:	f06f 0301 	mvn.w	r3, #1
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001e38:	e030      	b.n	8001e9c <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001e40:	02db      	lsls	r3, r3, #11
 8001e42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e46:	6839      	ldr	r1, [r7, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f88a 	bl	8001f62 <FLASH_IF_Write_Buffer>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d010      	beq.n	8001e76 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 8001e54:	f06f 0302 	mvn.w	r3, #2
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 8001e5a:	e01f      	b.n	8001e9c <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e60:	4619      	mov	r1, r3
 8001e62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e64:	f000 f87d 	bl	8001f62 <FLASH_IF_Write_Buffer>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 8001e6e:	f06f 0302 	mvn.w	r3, #2
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001e74:	e012      	b.n	8001e9c <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 8001e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7a:	4413      	add	r3, r2
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 8001e7e:	6a3a      	ldr	r2, [r7, #32]
 8001e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e82:	4413      	add	r3, r2
 8001e84:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3301      	adds	r3, #1
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d99f      	bls.n	8001ddc <FLASH_IF_Write+0xa8>
  }

  return status;
 8001e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3730      	adds	r7, #48	; 0x30
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	1fff75e0 	.word	0x1fff75e0
 8001eac:	03fffc00 	.word	0x03fffc00
 8001eb0:	58004000 	.word	0x58004000

08001eb4 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8001ec0:	e00b      	b.n	8001eda <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 8001ec2:	bf00      	nop
 8001ec4:	f7ff ff24 	bl	8001d10 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1fa      	bne.n	8001ec4 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8001ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ed2:	68f9      	ldr	r1, [r7, #12]
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f003 ffa5 	bl	8005e24 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ee4:	4299      	cmp	r1, r3
 8001ee6:	bf08      	it	eq
 8001ee8:	4290      	cmpeq	r0, r2
 8001eea:	d1ea      	bne.n	8001ec2 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 8001eec:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b08a      	sub	sp, #40	; 0x28
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	460b      	mov	r3, r1
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001f04:	2302      	movs	r3, #2
 8001f06:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 8001f0c:	897b      	ldrh	r3, [r7, #10]
 8001f0e:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d008      	beq.n	8001f28 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001f16:	f107 0318 	add.w	r3, r7, #24
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f004 f920 	bl	8006160 <HAL_FLASHEx_Erase_IT>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f26:	e00a      	b.n	8001f3e <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001f28:	f107 0214 	add.w	r2, r7, #20
 8001f2c:	f107 0318 	add.w	r3, r7, #24
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f004 f8bc 	bl	80060b0 <HAL_FLASHEx_Erase>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <FLASH_IF_EraseByPages+0x62>
 8001f46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d101      	bne.n	8001f52 <FLASH_IF_EraseByPages+0x5c>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e003      	b.n	8001f5a <FLASH_IF_EraseByPages+0x64>
 8001f52:	f06f 0301 	mvn.w	r3, #1
 8001f56:	e000      	b.n	8001f5a <FLASH_IF_EraseByPages+0x64>
 8001f58:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3728      	adds	r7, #40	; 0x28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b08a      	sub	sp, #40	; 0x28
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	e020      	b.n	8001fbe <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	2208      	movs	r2, #8
 8001f82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f84:	4618      	mov	r0, r3
 8001f86:	f01d fc8f 	bl	801f8a8 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 8001f8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f92:	bf08      	it	eq
 8001f94:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001f98:	d005      	beq.n	8001fa6 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 8001f9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f7ff ff88 	bl	8001eb4 <FLASH_IF_Write64>
 8001fa4:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	3308      	adds	r3, #8
 8001faa:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	3308      	adds	r3, #8
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d108      	bne.n	8001fca <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	08db      	lsrs	r3, r3, #3
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d3d9      	bcc.n	8001f7c <FLASH_IF_Write_Buffer+0x1a>
 8001fc8:	e000      	b.n	8001fcc <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 8001fca:	bf00      	nop
    }
  }

  return status;
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3728      	adds	r7, #40	; 0x28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b085      	sub	sp, #20
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001fe0:	e00a      	b.n	8001ff8 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2bff      	cmp	r3, #255	; 0xff
 8001fec:	d001      	beq.n	8001ff2 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e039      	b.n	8002066 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1ef      	bne.n	8001fe2 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	e010      	b.n	800202e <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f103 0208 	add.w	r2, r3, #8
 8002012:	60fa      	str	r2, [r7, #12]
 8002014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201c:	bf08      	it	eq
 800201e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8002022:	d001      	beq.n	8002028 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8002024:	2301      	movs	r3, #1
 8002026:	e01e      	b.n	8002066 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	3301      	adds	r3, #1
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	08db      	lsrs	r3, r3, #3
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	429a      	cmp	r2, r3
 8002036:	d3e9      	bcc.n	800200c <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	607b      	str	r3, [r7, #4]
  while (size != 0)
 8002046:	e00a      	b.n	800205e <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2bff      	cmp	r3, #255	; 0xff
 8002052:	d001      	beq.n	8002058 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 8002054:	2301      	movs	r3, #1
 8002056:	e006      	b.n	8002066 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	3b01      	subs	r3, #1
 800205c:	603b      	str	r3, [r7, #0]
  while (size != 0)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f1      	bne.n	8002048 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 8002064:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <LL_AHB2_GRP1_EnableClock>:
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800207e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4313      	orrs	r3, r2
 8002086:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4013      	ands	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002094:	68fb      	ldr	r3, [r7, #12]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7ff ffdb 	bl	8002070 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ba:	2002      	movs	r0, #2
 80020bc:	f7ff ffd8 	bl	8002070 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c0:	2004      	movs	r0, #4
 80020c2:	f7ff ffd5 	bl	8002070 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|SPI_CSN_Pin|SPI_CEN_Pin, GPIO_PIN_RESET);
 80020c6:	2200      	movs	r2, #0
 80020c8:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 80020cc:	4825      	ldr	r0, [pc, #148]	; (8002164 <MX_GPIO_Init+0xc4>)
 80020ce:	f004 fb39 	bl	8006744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80020d2:	2201      	movs	r2, #1
 80020d4:	2120      	movs	r1, #32
 80020d6:	4823      	ldr	r0, [pc, #140]	; (8002164 <MX_GPIO_Init+0xc4>)
 80020d8:	f004 fb34 	bl	8006744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 80020dc:	2200      	movs	r2, #0
 80020de:	f240 2131 	movw	r1, #561	; 0x231
 80020e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e6:	f004 fb2d 	bl	8006744 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin;
 80020ea:	2338      	movs	r3, #56	; 0x38
 80020ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ee:	2301      	movs	r3, #1
 80020f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	4619      	mov	r1, r3
 80020fe:	4819      	ldr	r0, [pc, #100]	; (8002164 <MX_GPIO_Init+0xc4>)
 8002100:	f004 f8f2 	bl	80062e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CEN_Pin;
 8002104:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002108:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210a:	2301      	movs	r3, #1
 800210c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4812      	ldr	r0, [pc, #72]	; (8002164 <MX_GPIO_Init+0xc4>)
 800211c:	f004 f8e4 	bl	80062e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8002120:	2331      	movs	r3, #49	; 0x31
 8002122:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002124:	2301      	movs	r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212c:	2303      	movs	r3, #3
 800212e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	4619      	mov	r1, r3
 8002134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002138:	f004 f8d6 	bl	80062e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 800213c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002140:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002142:	2311      	movs	r3, #17
 8002144:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	4619      	mov	r1, r3
 8002152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002156:	f004 f8c7 	bl	80062e8 <HAL_GPIO_Init>

}
 800215a:	bf00      	nop
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	48000400 	.word	0x48000400

08002168 <LL_AHB2_GRP1_EnableClock>:
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002174:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002176:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4313      	orrs	r3, r2
 800217e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4013      	ands	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800218c:	68fb      	ldr	r3, [r7, #12]
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <LL_APB1_GRP1_EnableClock>:
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80021a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80021b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4013      	ands	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021bc:	68fb      	ldr	r3, [r7, #12]
}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <MX_I2C2_Init+0x74>)
 80021ce:	4a1c      	ldr	r2, [pc, #112]	; (8002240 <MX_I2C2_Init+0x78>)
 80021d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <MX_I2C2_Init+0x74>)
 80021d4:	4a1b      	ldr	r2, [pc, #108]	; (8002244 <MX_I2C2_Init+0x7c>)
 80021d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80021d8:	4b18      	ldr	r3, [pc, #96]	; (800223c <MX_I2C2_Init+0x74>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <MX_I2C2_Init+0x74>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021e4:	4b15      	ldr	r3, [pc, #84]	; (800223c <MX_I2C2_Init+0x74>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80021ea:	4b14      	ldr	r3, [pc, #80]	; (800223c <MX_I2C2_Init+0x74>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <MX_I2C2_Init+0x74>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <MX_I2C2_Init+0x74>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <MX_I2C2_Init+0x74>)
 80021fe:	2200      	movs	r2, #0
 8002200:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002202:	480e      	ldr	r0, [pc, #56]	; (800223c <MX_I2C2_Init+0x74>)
 8002204:	f004 face 	bl	80067a4 <HAL_I2C_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800220e:	f000 fac9 	bl	80027a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002212:	2100      	movs	r1, #0
 8002214:	4809      	ldr	r0, [pc, #36]	; (800223c <MX_I2C2_Init+0x74>)
 8002216:	f004 ffb5 	bl	8007184 <HAL_I2CEx_ConfigAnalogFilter>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002220:	f000 fac0 	bl	80027a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002224:	2100      	movs	r1, #0
 8002226:	4805      	ldr	r0, [pc, #20]	; (800223c <MX_I2C2_Init+0x74>)
 8002228:	f004 fff6 	bl	8007218 <HAL_I2CEx_ConfigDigitalFilter>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002232:	f000 fab7 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	2000062c 	.word	0x2000062c
 8002240:	40005800 	.word	0x40005800
 8002244:	00707cbb 	.word	0x00707cbb

08002248 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b096      	sub	sp, #88	; 0x58
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	2238      	movs	r2, #56	; 0x38
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f01e fe09 	bl	8020e80 <memset>
  if(i2cHandle->Instance==I2C2)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a21      	ldr	r2, [pc, #132]	; (80022f8 <HAL_I2C_MspInit+0xb0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d13b      	bne.n	80022f0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800227c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002282:	f107 030c 	add.w	r3, r7, #12
 8002286:	4618      	mov	r0, r3
 8002288:	f006 fa9c 	bl	80087c4 <HAL_RCCEx_PeriphCLKConfig>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002292:	f000 fa87 	bl	80027a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	2001      	movs	r0, #1
 8002298:	f7ff ff66 	bl	8002168 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229c:	2002      	movs	r0, #2
 800229e:	f7ff ff63 	bl	8002168 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022a6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022a8:	2312      	movs	r3, #18
 80022aa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ac:	2301      	movs	r3, #1
 80022ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80022b0:	2301      	movs	r3, #1
 80022b2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022b4:	2304      	movs	r3, #4
 80022b6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022bc:	4619      	mov	r1, r3
 80022be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c2:	f004 f811 	bl	80062e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022ca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022cc:	2312      	movs	r3, #18
 80022ce:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d0:	2301      	movs	r3, #1
 80022d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80022d4:	2301      	movs	r3, #1
 80022d6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022d8:	2304      	movs	r3, #4
 80022da:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022e0:	4619      	mov	r1, r3
 80022e2:	4806      	ldr	r0, [pc, #24]	; (80022fc <HAL_I2C_MspInit+0xb4>)
 80022e4:	f004 f800 	bl	80062e8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022e8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80022ec:	f7ff ff54 	bl	8002198 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80022f0:	bf00      	nop
 80022f2:	3758      	adds	r7, #88	; 0x58
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40005800 	.word	0x40005800
 80022fc:	48000400 	.word	0x48000400

08002300 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002310:	f023 0218 	bic.w	r2, r3, #24
 8002314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	0000      	movs	r0, r0
 800232c:	0000      	movs	r0, r0
	...

08002330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
//	static uint16_t count = 1;
	uint8_t arrayToSenfNRF[32] = {0};
 8002336:	2300      	movs	r3, #0
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
 8002348:	615a      	str	r2, [r3, #20]
 800234a:	619a      	str	r2, [r3, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800234c:	f001 fef4 	bl	8004138 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002350:	f000 f90a 	bl	8002568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002354:	f7ff fea4 	bl	80020a0 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8002358:	f00b fae2 	bl	800d920 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 800235c:	f001 fb10 	bl	8003980 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8002360:	f7ff ff32 	bl	80021c8 <MX_I2C2_Init>
  MX_TIM16_Init();
 8002364:	f000 ff66 	bl	8003234 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002368:	f000 ff98 	bl	800329c <MX_TIM17_Init>
  MX_SPI2_Init();
 800236c:	f000 fb7e 	bl	8002a6c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  UART2_SET =0;
 8002370:	4b69      	ldr	r3, [pc, #420]	; (8002518 <main+0x1e8>)
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]

  NRF24_Init();
 8002376:	f7ff f9e7 	bl	8001748 <NRF24_Init>

 // NRF24_RxMode(RxAddress, 1);



   NRF24_ReadAll(data);
 800237a:	4868      	ldr	r0, [pc, #416]	; (800251c <main+0x1ec>)
 800237c:	f7ff faf8 	bl	8001970 <NRF24_ReadAll>

  F1_QueueIni(); // init Function queue
 8002380:	f000 fa1c 	bl	80027bc <F1_QueueIni>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 8002384:	2220      	movs	r2, #32
 8002386:	4966      	ldr	r1, [pc, #408]	; (8002520 <main+0x1f0>)
 8002388:	4866      	ldr	r0, [pc, #408]	; (8002524 <main+0x1f4>)
 800238a:	f00b f9fe 	bl	800d78a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800238e:	4b66      	ldr	r3, [pc, #408]	; (8002528 <main+0x1f8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b64      	ldr	r3, [pc, #400]	; (8002528 <main+0x1f8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0204 	bic.w	r2, r2, #4
 800239c:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800239e:	2200      	movs	r2, #0
 80023a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a8:	f004 f9cc 	bl	8006744 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim16);
 80023ac:	485f      	ldr	r0, [pc, #380]	; (800252c <main+0x1fc>)
 80023ae:	f008 fca1 	bl	800acf4 <HAL_TIM_Base_Start_IT>


  while (1)
  {
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 80023b2:	2364      	movs	r3, #100	; 0x64
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2301      	movs	r3, #1
 80023b8:	4a5d      	ldr	r2, [pc, #372]	; (8002530 <main+0x200>)
 80023ba:	2188      	movs	r1, #136	; 0x88
 80023bc:	485d      	ldr	r0, [pc, #372]	; (8002534 <main+0x204>)
 80023be:	f004 fa81 	bl	80068c4 <HAL_I2C_Master_Transmit>
	MeasurePM_sens();
 80023c2:	f000 f97d 	bl	80026c0 <MeasurePM_sens>

    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80023c6:	f00b fab3 	bl	800d930 <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */


    F1_pull()();
 80023ca:	f000 fa3b 	bl	8002844 <F1_pull>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4798      	blx	r3




    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(0x44 << 1),SHT40_dataRX, 6, 100);
 80023d2:	2364      	movs	r3, #100	; 0x64
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	2306      	movs	r3, #6
 80023d8:	4a57      	ldr	r2, [pc, #348]	; (8002538 <main+0x208>)
 80023da:	2188      	movs	r1, #136	; 0x88
 80023dc:	4855      	ldr	r0, [pc, #340]	; (8002534 <main+0x204>)
 80023de:	f004 fb65 	bl	8006aac <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 80023e2:	4b55      	ldr	r3, [pc, #340]	; (8002538 <main+0x208>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	4b52      	ldr	r3, [pc, #328]	; (8002538 <main+0x208>)
 80023ee:	785b      	ldrb	r3, [r3, #1]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	4b51      	ldr	r3, [pc, #324]	; (800253c <main+0x20c>)
 80023f8:	801a      	strh	r2, [r3, #0]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 80023fa:	4b4f      	ldr	r3, [pc, #316]	; (8002538 <main+0x208>)
 80023fc:	78db      	ldrb	r3, [r3, #3]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	b29a      	uxth	r2, r3
 8002404:	4b4c      	ldr	r3, [pc, #304]	; (8002538 <main+0x208>)
 8002406:	791b      	ldrb	r3, [r3, #4]
 8002408:	b29b      	uxth	r3, r3
 800240a:	4413      	add	r3, r2
 800240c:	b29a      	uxth	r2, r3
 800240e:	4b4c      	ldr	r3, [pc, #304]	; (8002540 <main+0x210>)
 8002410:	801a      	strh	r2, [r3, #0]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 8002412:	4b4a      	ldr	r3, [pc, #296]	; (800253c <main+0x20c>)
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fc3a 	bl	8000c90 <__aeabi_ui2f>
 800241c:	4603      	mov	r3, r0
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe f816 	bl	8000450 <__aeabi_f2d>
 8002424:	a338      	add	r3, pc, #224	; (adr r3, 8002508 <main+0x1d8>)
 8002426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242a:	f7fe f869 	bl	8000500 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4610      	mov	r0, r2
 8002434:	4619      	mov	r1, r3
 8002436:	a336      	add	r3, pc, #216	; (adr r3, 8002510 <main+0x1e0>)
 8002438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243c:	f7fe f98a 	bl	8000754 <__aeabi_ddiv>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <main+0x214>)
 800244e:	f7fd fe9f 	bl	8000190 <__aeabi_dsub>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4610      	mov	r0, r2
 8002458:	4619      	mov	r1, r3
 800245a:	f7fe fb13 	bl	8000a84 <__aeabi_d2f>
 800245e:	4603      	mov	r3, r0
 8002460:	4a39      	ldr	r2, [pc, #228]	; (8002548 <main+0x218>)
 8002462:	6013      	str	r3, [r2, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 8002464:	4b36      	ldr	r3, [pc, #216]	; (8002540 <main+0x210>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe fc11 	bl	8000c90 <__aeabi_ui2f>
 800246e:	4603      	mov	r3, r0
 8002470:	4618      	mov	r0, r3
 8002472:	f7fd ffed 	bl	8000450 <__aeabi_f2d>
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	4b34      	ldr	r3, [pc, #208]	; (800254c <main+0x21c>)
 800247c:	f7fe f840 	bl	8000500 <__aeabi_dmul>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	a321      	add	r3, pc, #132	; (adr r3, 8002510 <main+0x1e0>)
 800248a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248e:	f7fe f961 	bl	8000754 <__aeabi_ddiv>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	4b2c      	ldr	r3, [pc, #176]	; (8002550 <main+0x220>)
 80024a0:	f7fd fe76 	bl	8000190 <__aeabi_dsub>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	f7fe faea 	bl	8000a84 <__aeabi_d2f>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4a28      	ldr	r2, [pc, #160]	; (8002554 <main+0x224>)
 80024b4:	6013      	str	r3, [r2, #0]

    NRF24_TxMode(TxAddress, 76);
 80024b6:	214c      	movs	r1, #76	; 0x4c
 80024b8:	4827      	ldr	r0, [pc, #156]	; (8002558 <main+0x228>)
 80024ba:	f7ff f96c 	bl	8001796 <NRF24_TxMode>
    NRF24_Transmit( arrayToSenfNRF);
 80024be:	463b      	mov	r3, r7
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff f98f 	bl	80017e4 <NRF24_Transmit>

    NRF24_RxMode(RxAddress, 76);
 80024c6:	214c      	movs	r1, #76	; 0x4c
 80024c8:	4824      	ldr	r0, [pc, #144]	; (800255c <main+0x22c>)
 80024ca:	f7ff f9c9 	bl	8001860 <NRF24_RxMode>
    HAL_Delay(10);
 80024ce:	200a      	movs	r0, #10
 80024d0:	f000 fe2e 	bl	8003130 <HAL_Delay>
    if (isDataAvailable(2) == 1)
 80024d4:	2002      	movs	r0, #2
 80024d6:	f7ff fa02 	bl	80018de <isDataAvailable>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d10d      	bne.n	80024fc <main+0x1cc>
   	  {
   		  NRF24_Receive(RxData);
 80024e0:	481f      	ldr	r0, [pc, #124]	; (8002560 <main+0x230>)
 80024e2:	f7ff fa1b 	bl	800191c <NRF24_Receive>
   		  HAL_UART_Transmit(&huart2, RxData, strlen((char *)RxData), 1000);
 80024e6:	481e      	ldr	r0, [pc, #120]	; (8002560 <main+0x230>)
 80024e8:	f7fd fe46 	bl	8000178 <strlen>
 80024ec:	4603      	mov	r3, r0
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f4:	491a      	ldr	r1, [pc, #104]	; (8002560 <main+0x230>)
 80024f6:	480b      	ldr	r0, [pc, #44]	; (8002524 <main+0x1f4>)
 80024f8:	f008 fe7a 	bl	800b1f0 <HAL_UART_Transmit>
   	  }

    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);///DBG
 80024fc:	2120      	movs	r1, #32
 80024fe:	4819      	ldr	r0, [pc, #100]	; (8002564 <main+0x234>)
 8002500:	f004 f937 	bl	8006772 <HAL_GPIO_TogglePin>
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8002504:	e755      	b.n	80023b2 <main+0x82>
 8002506:	bf00      	nop
 8002508:	00000000 	.word	0x00000000
 800250c:	4065e000 	.word	0x4065e000
 8002510:	00000000 	.word	0x00000000
 8002514:	40efffe0 	.word	0x40efffe0
 8002518:	2000001c 	.word	0x2000001c
 800251c:	200006c8 	.word	0x200006c8
 8002520:	20000678 	.word	0x20000678
 8002524:	20000934 	.word	0x20000934
 8002528:	20000a84 	.word	0x20000a84
 800252c:	20000804 	.word	0x20000804
 8002530:	20000015 	.word	0x20000015
 8002534:	2000062c 	.word	0x2000062c
 8002538:	200006fc 	.word	0x200006fc
 800253c:	20000702 	.word	0x20000702
 8002540:	20000704 	.word	0x20000704
 8002544:	40468000 	.word	0x40468000
 8002548:	2000069c 	.word	0x2000069c
 800254c:	405f4000 	.word	0x405f4000
 8002550:	40180000 	.word	0x40180000
 8002554:	200006a0 	.word	0x200006a0
 8002558:	20000010 	.word	0x20000010
 800255c:	20000004 	.word	0x20000004
 8002560:	200006a8 	.word	0x200006a8
 8002564:	48000400 	.word	0x48000400

08002568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b09a      	sub	sp, #104	; 0x68
 800256c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800256e:	f107 0320 	add.w	r3, r7, #32
 8002572:	2248      	movs	r2, #72	; 0x48
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f01e fc82 	bl	8020e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800257c:	f107 0308 	add.w	r3, r7, #8
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
 800258c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800258e:	f004 fe8f 	bl	80072b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002592:	2000      	movs	r0, #0
 8002594:	f7ff feb4 	bl	8002300 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <SystemClock_Config+0xb8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025a0:	4a1f      	ldr	r2, [pc, #124]	; (8002620 <SystemClock_Config+0xb8>)
 80025a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <SystemClock_Config+0xb8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80025b4:	2307      	movs	r3, #7
 80025b6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 80025b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80025be:	2381      	movs	r3, #129	; 0x81
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025c8:	2340      	movs	r3, #64	; 0x40
 80025ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d4:	f107 0320 	add.w	r3, r7, #32
 80025d8:	4618      	mov	r0, r3
 80025da:	f005 f9b5 	bl	8007948 <HAL_RCC_OscConfig>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80025e4:	f000 f8de 	bl	80027a4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80025e8:	234f      	movs	r3, #79	; 0x4f
 80025ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80025ec:	2302      	movs	r3, #2
 80025ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002600:	f107 0308 	add.w	r3, r7, #8
 8002604:	2101      	movs	r1, #1
 8002606:	4618      	mov	r0, r3
 8002608:	f005 fd3a 	bl	8008080 <HAL_RCC_ClockConfig>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002612:	f000 f8c7 	bl	80027a4 <Error_Handler>
  }
}
 8002616:	bf00      	nop
 8002618:	3768      	adds	r7, #104	; 0x68
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	58000400 	.word	0x58000400

08002624 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a13      	ldr	r2, [pc, #76]	; (8002684 <HAL_UARTEx_RxEventCallback+0x60>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d11e      	bne.n	8002678 <HAL_UARTEx_RxEventCallback+0x54>
	{
		if(aRXBufferUser[0]=='B'&& aRXBufferUser[1]=='M'){
 800263a:	4b13      	ldr	r3, [pc, #76]	; (8002688 <HAL_UARTEx_RxEventCallback+0x64>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b42      	cmp	r3, #66	; 0x42
 8002640:	d117      	bne.n	8002672 <HAL_UARTEx_RxEventCallback+0x4e>
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_UARTEx_RxEventCallback+0x64>)
 8002644:	785b      	ldrb	r3, [r3, #1]
 8002646:	2b4d      	cmp	r3, #77	; 0x4d
 8002648:	d113      	bne.n	8002672 <HAL_UARTEx_RxEventCallback+0x4e>
		//memcpy(mainBuffer,aRXBufferUser,Size);
		if((aRXBufferUser[30]<<8) + aRXBufferUser[31])
 800264a:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <HAL_UARTEx_RxEventCallback+0x64>)
 800264c:	7f9b      	ldrb	r3, [r3, #30]
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	4a0d      	ldr	r2, [pc, #52]	; (8002688 <HAL_UARTEx_RxEventCallback+0x64>)
 8002652:	7fd2      	ldrb	r2, [r2, #31]
 8002654:	4413      	add	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <HAL_UARTEx_RxEventCallback+0x4e>
			PM2_5 = aRXBufferUser[6]*256+aRXBufferUser[7];
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_UARTEx_RxEventCallback+0x64>)
 800265c:	799b      	ldrb	r3, [r3, #6]
 800265e:	b29b      	uxth	r3, r3
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	b29a      	uxth	r2, r3
 8002664:	4b08      	ldr	r3, [pc, #32]	; (8002688 <HAL_UARTEx_RxEventCallback+0x64>)
 8002666:	79db      	ldrb	r3, [r3, #7]
 8002668:	b29b      	uxth	r3, r3
 800266a:	4413      	add	r3, r2
 800266c:	b29a      	uxth	r2, r3
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <HAL_UARTEx_RxEventCallback+0x68>)
 8002670:	801a      	strh	r2, [r3, #0]


		}
		UART2_SET =1;
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <HAL_UARTEx_RxEventCallback+0x6c>)
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]

	}
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40004400 	.word	0x40004400
 8002688:	20000678 	.word	0x20000678
 800268c:	20000698 	.word	0x20000698
 8002690:	2000001c 	.word	0x2000001c

08002694 <EnablePM_sens>:

void EnablePM_sens(void){
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002698:	2200      	movs	r2, #0
 800269a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800269e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026a2:	f004 f84f 	bl	8006744 <HAL_GPIO_WritePin>

}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}

080026aa <DisablePM_sens>:

void DisablePM_sens(void){
 80026aa:	b580      	push	{r7, lr}
 80026ac:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80026ae:	2201      	movs	r2, #1
 80026b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b8:	f004 f844 	bl	8006744 <HAL_GPIO_WritePin>


}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}

080026c0 <MeasurePM_sens>:

void MeasurePM_sens(void){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0

	if(PM_measure_flag){
 80026c4:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <MeasurePM_sens+0x30>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00f      	beq.n	80026ec <MeasurePM_sens+0x2c>
	       UART2_SET = 0;
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <MeasurePM_sens+0x34>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
	       HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 80026d2:	2220      	movs	r2, #32
 80026d4:	4908      	ldr	r1, [pc, #32]	; (80026f8 <MeasurePM_sens+0x38>)
 80026d6:	4809      	ldr	r0, [pc, #36]	; (80026fc <MeasurePM_sens+0x3c>)
 80026d8:	f00b f857 	bl	800d78a <HAL_UARTEx_ReceiveToIdle_DMA>
		   __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <MeasurePM_sens+0x40>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <MeasurePM_sens+0x40>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0204 	bic.w	r2, r2, #4
 80026ea:	601a      	str	r2, [r3, #0]


	     }
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000000 	.word	0x20000000
 80026f4:	2000001c 	.word	0x2000001c
 80026f8:	20000678 	.word	0x20000678
 80026fc:	20000934 	.word	0x20000934
 8002700:	20000a84 	.word	0x20000a84

08002704 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
   if (htim == &htim16)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a1e      	ldr	r2, [pc, #120]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d134      	bne.n	800277e <HAL_TIM_PeriodElapsedCallback+0x7a>
   {
	  counter++;
 8002714:	4b1d      	ldr	r3, [pc, #116]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	3301      	adds	r3, #1
 800271a:	4a1c      	ldr	r2, [pc, #112]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800271c:	6013      	str	r3, [r2, #0]
      switch(counter){
 800271e:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 8002726:	d014      	beq.n	8002752 <HAL_TIM_PeriodElapsedCallback+0x4e>
 8002728:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 800272c:	dc17      	bgt.n	800275e <HAL_TIM_PeriodElapsedCallback+0x5a>
 800272e:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8002732:	d003      	beq.n	800273c <HAL_TIM_PeriodElapsedCallback+0x38>
 8002734:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8002738:	d004      	beq.n	8002744 <HAL_TIM_PeriodElapsedCallback+0x40>
 800273a:	e010      	b.n	800275e <HAL_TIM_PeriodElapsedCallback+0x5a>
      case 820:
    	  F1_push(EnablePM_sens);
 800273c:	4814      	ldr	r0, [pc, #80]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800273e:	f000 f84d 	bl	80027dc <F1_push>

    	  break;
 8002742:	e00c      	b.n	800275e <HAL_TIM_PeriodElapsedCallback+0x5a>
      case 840:
     	  PM_measure_flag = 1;
 8002744:	4b13      	ldr	r3, [pc, #76]	; (8002794 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002746:	2201      	movs	r2, #1
 8002748:	701a      	strb	r2, [r3, #0]
    	  F1_push(MeasurePM_sens);
 800274a:	4813      	ldr	r0, [pc, #76]	; (8002798 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800274c:	f000 f846 	bl	80027dc <F1_push>
    	  break;
 8002750:	e005      	b.n	800275e <HAL_TIM_PeriodElapsedCallback+0x5a>
      case 860:
    	  F1_push(DisablePM_sens);
 8002752:	4812      	ldr	r0, [pc, #72]	; (800279c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002754:	f000 f842 	bl	80027dc <F1_push>
    	  PM_measure_flag = 0;
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800275a:	2200      	movs	r2, #0
 800275c:	701a      	strb	r2, [r3, #0]
      }

      counter %= 900;
 800275e:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a0f      	ldr	r2, [pc, #60]	; (80027a0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002764:	fb82 1203 	smull	r1, r2, r2, r3
 8002768:	441a      	add	r2, r3
 800276a:	1251      	asrs	r1, r2, #9
 800276c:	17da      	asrs	r2, r3, #31
 800276e:	1a8a      	subs	r2, r1, r2
 8002770:	f44f 7161 	mov.w	r1, #900	; 0x384
 8002774:	fb01 f202 	mul.w	r2, r1, r2
 8002778:	1a9a      	subs	r2, r3, r2
 800277a:	4b04      	ldr	r3, [pc, #16]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800277c:	601a      	str	r2, [r3, #0]
   }
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000804 	.word	0x20000804
 800278c:	200006a4 	.word	0x200006a4
 8002790:	08002695 	.word	0x08002695
 8002794:	20000000 	.word	0x20000000
 8002798:	080026c1 	.word	0x080026c1
 800279c:	080026ab 	.word	0x080026ab
 80027a0:	91a2b3c5 	.word	0x91a2b3c5

080027a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027a8:	b672      	cpsid	i
}
 80027aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027ac:	e7fe      	b.n	80027ac <Error_Handler+0x8>

080027ae <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
	...

080027bc <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  F1_last = 0;
 80027c0:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <F1_QueueIni+0x18>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 80027c6:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <F1_QueueIni+0x1c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	20000708 	.word	0x20000708
 80027d8:	2000070c 	.word	0x2000070c

080027dc <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 80027e4:	4b14      	ldr	r3, [pc, #80]	; (8002838 <F1_push+0x5c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	425a      	negs	r2, r3
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	f002 020f 	and.w	r2, r2, #15
 80027f4:	bf58      	it	pl
 80027f6:	4253      	negpl	r3, r2
 80027f8:	4a10      	ldr	r2, [pc, #64]	; (800283c <F1_push+0x60>)
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d101      	bne.n	8002804 <F1_push+0x28>
 8002800:	2301      	movs	r3, #1
 8002802:	e014      	b.n	800282e <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <F1_push+0x5c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	490b      	ldr	r1, [pc, #44]	; (8002838 <F1_push+0x5c>)
 800280c:	600a      	str	r2, [r1, #0]
 800280e:	490c      	ldr	r1, [pc, #48]	; (8002840 <F1_push+0x64>)
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 8002816:	4b08      	ldr	r3, [pc, #32]	; (8002838 <F1_push+0x5c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	425a      	negs	r2, r3
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	f002 020f 	and.w	r2, r2, #15
 8002824:	bf58      	it	pl
 8002826:	4253      	negpl	r3, r2
 8002828:	4a03      	ldr	r2, [pc, #12]	; (8002838 <F1_push+0x5c>)
 800282a:	6013      	str	r3, [r2, #0]
  return 0;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	20000708 	.word	0x20000708
 800283c:	2000070c 	.word	0x2000070c
 8002840:	20000710 	.word	0x20000710

08002844 <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <F1_pull+0x4c>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <F1_pull+0x50>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d101      	bne.n	800285a <F1_pull+0x16>
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <F1_pull+0x54>)
 8002858:	e014      	b.n	8002884 <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 800285a:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <F1_pull+0x50>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	490c      	ldr	r1, [pc, #48]	; (8002894 <F1_pull+0x50>)
 8002862:	600a      	str	r2, [r1, #0]
 8002864:	4a0d      	ldr	r2, [pc, #52]	; (800289c <F1_pull+0x58>)
 8002866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286a:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <F1_pull+0x50>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	425a      	negs	r2, r3
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	f002 020f 	and.w	r2, r2, #15
 800287a:	bf58      	it	pl
 800287c:	4253      	negpl	r3, r2
 800287e:	4a05      	ldr	r2, [pc, #20]	; (8002894 <F1_pull+0x50>)
 8002880:	6013      	str	r3, [r2, #0]
  return pullVar;
 8002882:	687b      	ldr	r3, [r7, #4]
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	20000708 	.word	0x20000708
 8002894:	2000070c 	.word	0x2000070c
 8002898:	080027af 	.word	0x080027af
 800289c:	20000710 	.word	0x20000710

080028a0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80028a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <LL_APB1_GRP1_EnableClock>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80028c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80028ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80028d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4013      	ands	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028e4:	68fb      	ldr	r3, [r7, #12]
}
 80028e6:	bf00      	nop
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08c      	sub	sp, #48	; 0x30
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80028f6:	1d3b      	adds	r3, r7, #4
 80028f8:	222c      	movs	r2, #44	; 0x2c
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f01e fabf 	bl	8020e80 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002902:	4b22      	ldr	r3, [pc, #136]	; (800298c <MX_RTC_Init+0x9c>)
 8002904:	4a22      	ldr	r2, [pc, #136]	; (8002990 <MX_RTC_Init+0xa0>)
 8002906:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8002908:	4b20      	ldr	r3, [pc, #128]	; (800298c <MX_RTC_Init+0x9c>)
 800290a:	221f      	movs	r2, #31
 800290c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800290e:	4b1f      	ldr	r3, [pc, #124]	; (800298c <MX_RTC_Init+0x9c>)
 8002910:	2200      	movs	r2, #0
 8002912:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <MX_RTC_Init+0x9c>)
 8002916:	2200      	movs	r2, #0
 8002918:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800291a:	4b1c      	ldr	r3, [pc, #112]	; (800298c <MX_RTC_Init+0x9c>)
 800291c:	2200      	movs	r2, #0
 800291e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002920:	4b1a      	ldr	r3, [pc, #104]	; (800298c <MX_RTC_Init+0x9c>)
 8002922:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002926:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002928:	4b18      	ldr	r3, [pc, #96]	; (800298c <MX_RTC_Init+0x9c>)
 800292a:	2200      	movs	r2, #0
 800292c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800292e:	4b17      	ldr	r3, [pc, #92]	; (800298c <MX_RTC_Init+0x9c>)
 8002930:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002934:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002936:	4815      	ldr	r0, [pc, #84]	; (800298c <MX_RTC_Init+0x9c>)
 8002938:	f006 f85e 	bl	80089f8 <HAL_RTC_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002942:	f7ff ff2f 	bl	80027a4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8002946:	4811      	ldr	r0, [pc, #68]	; (800298c <MX_RTC_Init+0x9c>)
 8002948:	f006 fb4c 	bl	8008fe4 <HAL_RTCEx_SetSSRU_IT>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002952:	f7ff ff27 	bl	80027a4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002956:	2300      	movs	r3, #0
 8002958:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002962:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002966:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800296e:	1d3b      	adds	r3, r7, #4
 8002970:	2200      	movs	r2, #0
 8002972:	4619      	mov	r1, r3
 8002974:	4805      	ldr	r0, [pc, #20]	; (800298c <MX_RTC_Init+0x9c>)
 8002976:	f006 f8b9 	bl	8008aec <HAL_RTC_SetAlarm_IT>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002980:	f7ff ff10 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002984:	bf00      	nop
 8002986:	3730      	adds	r7, #48	; 0x30
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20000750 	.word	0x20000750
 8002990:	40002800 	.word	0x40002800

08002994 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b090      	sub	sp, #64	; 0x40
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800299c:	f107 0308 	add.w	r3, r7, #8
 80029a0:	2238      	movs	r2, #56	; 0x38
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f01e fa6b 	bl	8020e80 <memset>
  if(rtcHandle->Instance==RTC)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a16      	ldr	r2, [pc, #88]	; (8002a08 <HAL_RTC_MspInit+0x74>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d125      	bne.n	8002a00 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80029b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029b8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80029ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029be:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029c0:	f107 0308 	add.w	r3, r7, #8
 80029c4:	4618      	mov	r0, r3
 80029c6:	f005 fefd 	bl	80087c4 <HAL_RCCEx_PeriphCLKConfig>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80029d0:	f7ff fee8 	bl	80027a4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80029d4:	f7ff ff64 	bl	80028a0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80029d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80029dc:	f7ff ff70 	bl	80028c0 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80029e0:	2200      	movs	r2, #0
 80029e2:	2100      	movs	r1, #0
 80029e4:	2002      	movs	r0, #2
 80029e6:	f002 fd6a 	bl	80054be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80029ea:	2002      	movs	r0, #2
 80029ec:	f002 fd81 	bl	80054f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2100      	movs	r1, #0
 80029f4:	202a      	movs	r0, #42	; 0x2a
 80029f6:	f002 fd62 	bl	80054be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80029fa:	202a      	movs	r0, #42	; 0x2a
 80029fc:	f002 fd79 	bl	80054f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002a00:	bf00      	nop
 8002a02:	3740      	adds	r7, #64	; 0x40
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40002800 	.word	0x40002800

08002a0c <LL_AHB2_GRP1_EnableClock>:
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a30:	68fb      	ldr	r3, [r7, #12]
}
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <LL_APB1_GRP1_EnableClock>:
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a60:	68fb      	ldr	r3, [r7, #12]
}
 8002a62:	bf00      	nop
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <MX_SPI2_Init+0x74>)
 8002a72:	4a1c      	ldr	r2, [pc, #112]	; (8002ae4 <MX_SPI2_Init+0x78>)
 8002a74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <MX_SPI2_Init+0x74>)
 8002a78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a7e:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <MX_SPI2_Init+0x74>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a84:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <MX_SPI2_Init+0x74>)
 8002a86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a8a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a8c:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <MX_SPI2_Init+0x74>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a92:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <MX_SPI2_Init+0x74>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a98:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <MX_SPI2_Init+0x74>)
 8002a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a9e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <MX_SPI2_Init+0x74>)
 8002aa2:	2218      	movs	r2, #24
 8002aa4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <MX_SPI2_Init+0x74>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aac:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <MX_SPI2_Init+0x74>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <MX_SPI2_Init+0x74>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <MX_SPI2_Init+0x74>)
 8002aba:	2207      	movs	r2, #7
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <MX_SPI2_Init+0x74>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <MX_SPI2_Init+0x74>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002aca:	4805      	ldr	r0, [pc, #20]	; (8002ae0 <MX_SPI2_Init+0x74>)
 8002acc:	f006 fb18 	bl	8009100 <HAL_SPI_Init>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002ad6:	f7ff fe65 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000788 	.word	0x20000788
 8002ae4:	40003800 	.word	0x40003800

08002ae8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b096      	sub	sp, #88	; 0x58
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b00:	f107 030c 	add.w	r3, r7, #12
 8002b04:	2238      	movs	r2, #56	; 0x38
 8002b06:	2100      	movs	r1, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f01e f9b9 	bl	8020e80 <memset>
  if(spiHandle->Instance==SPI2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a21      	ldr	r2, [pc, #132]	; (8002b98 <HAL_SPI_MspInit+0xb0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d13b      	bne.n	8002b90 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8002b18:	2310      	movs	r3, #16
 8002b1a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8002b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b20:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b22:	f107 030c 	add.w	r3, r7, #12
 8002b26:	4618      	mov	r0, r3
 8002b28:	f005 fe4c 	bl	80087c4 <HAL_RCCEx_PeriphCLKConfig>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002b32:	f7ff fe37 	bl	80027a4 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b36:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b3a:	f7ff ff7f 	bl	8002a3c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3e:	2002      	movs	r0, #2
 8002b40:	f7ff ff64 	bl	8002a0c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b44:	2001      	movs	r0, #1
 8002b46:	f7ff ff61 	bl	8002a0c <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8002b4a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002b4e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b50:	2302      	movs	r3, #2
 8002b52:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b5c:	2305      	movs	r3, #5
 8002b5e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b64:	4619      	mov	r1, r3
 8002b66:	480d      	ldr	r0, [pc, #52]	; (8002b9c <HAL_SPI_MspInit+0xb4>)
 8002b68:	f003 fbbe 	bl	80062e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b70:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b7e:	2305      	movs	r3, #5
 8002b80:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b86:	4619      	mov	r1, r3
 8002b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8c:	f003 fbac 	bl	80062e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002b90:	bf00      	nop
 8002b92:	3758      	adds	r7, #88	; 0x58
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40003800 	.word	0x40003800
 8002b9c:	48000400 	.word	0x48000400

08002ba0 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr
 8002bb4:	58000400 	.word	0x58000400

08002bb8 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002bd4:	f001 fad0 	bl	8004178 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8002bd8:	f7ff ffe2 	bl	8002ba0 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002bdc:	2001      	movs	r0, #1
 8002bde:	f004 fbf9 	bl	80073d4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8002bea:	f001 fad3 	bl	8004194 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8002bee:	f001 f941 	bl	8003e74 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8002bfa:	f001 fabd 	bl	8004178 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002bfe:	2101      	movs	r1, #1
 8002c00:	2000      	movs	r0, #0
 8002c02:	f004 fb63 	bl	80072cc <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8002c0e:	f001 fac1 	bl	8004194 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr

08002c22 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c26:	e7fe      	b.n	8002c26 <NMI_Handler+0x4>

08002c28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c2c:	e7fe      	b.n	8002c2c <HardFault_Handler+0x4>

08002c2e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c32:	e7fe      	b.n	8002c32 <MemManage_Handler+0x4>

08002c34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c38:	e7fe      	b.n	8002c38 <BusFault_Handler+0x4>

08002c3a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c3e:	e7fe      	b.n	8002c3e <UsageFault_Handler+0x4>

08002c40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002c74:	4802      	ldr	r0, [pc, #8]	; (8002c80 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8002c76:	f006 f9f1 	bl	800905c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000750 	.word	0x20000750

08002c84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <DMA1_Channel1_IRQHandler+0x10>)
 8002c8a:	f002 fec9 	bl	8005a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200009c4 	.word	0x200009c4

08002c98 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c9c:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <DMA1_Channel2_IRQHandler+0x10>)
 8002c9e:	f002 febf 	bl	8005a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000a24 	.word	0x20000a24

08002cac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <DMA1_Channel3_IRQHandler+0x10>)
 8002cb2:	f002 feb5 	bl	8005a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000a84 	.word	0x20000a84

08002cc0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	static int counter = 0;
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002cc4:	4804      	ldr	r0, [pc, #16]	; (8002cd8 <TIM16_IRQHandler+0x18>)
 8002cc6:	f008 f861 	bl	800ad8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  counter++;
 8002cca:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <TIM16_IRQHandler+0x1c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	4a02      	ldr	r2, [pc, #8]	; (8002cdc <TIM16_IRQHandler+0x1c>)
 8002cd2:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM16_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000804 	.word	0x20000804
 8002cdc:	200007ec 	.word	0x200007ec

08002ce0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
static int counter = 0;
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002ce4:	4804      	ldr	r0, [pc, #16]	; (8002cf8 <TIM17_IRQHandler+0x18>)
 8002ce6:	f008 f851 	bl	800ad8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  counter++;
 8002cea:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <TIM17_IRQHandler+0x1c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	4a02      	ldr	r2, [pc, #8]	; (8002cfc <TIM17_IRQHandler+0x1c>)
 8002cf2:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM17_IRQn 1 */
}
 8002cf4:	bf00      	nop
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000850 	.word	0x20000850
 8002cfc:	200007f0 	.word	0x200007f0

08002d00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d04:	4802      	ldr	r0, [pc, #8]	; (8002d10 <USART1_IRQHandler+0x10>)
 8002d06:	f008 fbf1 	bl	800b4ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200008a4 	.word	0x200008a4

08002d14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d18:	4802      	ldr	r0, [pc, #8]	; (8002d24 <USART2_IRQHandler+0x10>)
 8002d1a:	f008 fbe7 	bl	800b4ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000934 	.word	0x20000934

08002d28 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002d2c:	4802      	ldr	r0, [pc, #8]	; (8002d38 <RTC_Alarm_IRQHandler+0x10>)
 8002d2e:	f006 f845 	bl	8008dbc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000750 	.word	0x20000750

08002d3c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002d40:	4802      	ldr	r0, [pc, #8]	; (8002d4c <SUBGHZ_Radio_IRQHandler+0x10>)
 8002d42:	f007 fde1 	bl	800a908 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	200007f4 	.word	0x200007f4

08002d50 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8002d54:	4802      	ldr	r0, [pc, #8]	; (8002d60 <DMAMUX1_OVR_IRQHandler+0x10>)
 8002d56:	f003 f813 	bl	8005d80 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000a24 	.word	0x20000a24

08002d64 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4013      	ands	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d88:	68fb      	ldr	r3, [r7, #12]
}
 8002d8a:	bf00      	nop
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <MX_SUBGHZ_Init+0x20>)
 8002d9a:	2208      	movs	r2, #8
 8002d9c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002d9e:	4805      	ldr	r0, [pc, #20]	; (8002db4 <MX_SUBGHZ_Init+0x20>)
 8002da0:	f007 fb36 	bl	800a410 <HAL_SUBGHZ_Init>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002daa:	f7ff fcfb 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	200007f4 	.word	0x200007f4

08002db8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	f7ff ffcf 	bl	8002d64 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2032      	movs	r0, #50	; 0x32
 8002dcc:	f002 fb77 	bl	80054be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002dd0:	2032      	movs	r0, #50	; 0x32
 8002dd2:	f002 fb8e 	bl	80054f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002df0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002e08:	4b02      	ldr	r3, [pc, #8]	; (8002e14 <LL_FLASH_GetUDN+0x10>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	1fff7580 	.word	0x1fff7580

08002e18 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <LL_FLASH_GetDeviceID+0x14>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	1fff7584 	.word	0x1fff7584

08002e30 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <LL_FLASH_GetSTCompanyID+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0a1b      	lsrs	r3, r3, #8
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	1fff7584 	.word	0x1fff7584

08002e48 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f7ff ffc6 	bl	8002dde <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002e52:	f01d fabb 	bl	80203cc <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <SystemApp_Init+0x50>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002e5c:	f000 f988 	bl	8003170 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002e60:	f01d fd44 	bl	80208ec <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002e64:	480d      	ldr	r0, [pc, #52]	; (8002e9c <SystemApp_Init+0x54>)
 8002e66:	f01d fdef 	bl	8020a48 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <SystemApp_Init+0x58>)
 8002e6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e70:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002e72:	2002      	movs	r0, #2
 8002e74:	f01d fdf6 	bl	8020a64 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002e78:	f7fe fe80 	bl	8001b7c <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002e7c:	f000 f9b0 	bl	80031e0 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002e80:	f01c fc6c 	bl	801f75c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002e84:	2101      	movs	r1, #1
 8002e86:	2001      	movs	r0, #1
 8002e88:	f01c fca8 	bl	801f7dc <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f01c fc74 	bl	801f77c <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002e94:	bf00      	nop
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000800 	.word	0x20000800
 8002e9c:	08003069 	.word	0x08003069
 8002ea0:	58004000 	.word	0x58004000

08002ea4 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002ea8:	f01c fcc8 	bl	801f83c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002eac:	bf00      	nop
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002eba:	f7fe fe6d 	bl	8001b98 <SYS_GetBatteryLevel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8002ec2:	88bb      	ldrh	r3, [r7, #4]
 8002ec4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d902      	bls.n	8002ed2 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002ecc:	23fe      	movs	r3, #254	; 0xfe
 8002ece:	71fb      	strb	r3, [r7, #7]
 8002ed0:	e014      	b.n	8002efc <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8002ed2:	88bb      	ldrh	r3, [r7, #4]
 8002ed4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002ed8:	d202      	bcs.n	8002ee0 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	71fb      	strb	r3, [r7, #7]
 8002ede:	e00d      	b.n	8002efc <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002ee0:	88bb      	ldrh	r3, [r7, #4]
 8002ee2:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4613      	mov	r3, r2
 8002eea:	01db      	lsls	r3, r3, #7
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <GetBatteryLevel+0x58>)
 8002ef4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ef8:	09db      	lsrs	r3, r3, #7
 8002efa:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002efc:	79fb      	ldrb	r3, [r7, #7]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	1b4e81b5 	.word	0x1b4e81b5

08002f0c <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8002f16:	1d3b      	adds	r3, r7, #4
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f937 	bl	800318c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fe f8d3 	bl	80010cc <__aeabi_f2iz>
 8002f26:	4603      	mov	r3, r0
 8002f28:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002f2a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3720      	adds	r7, #32
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002f36:	b590      	push	{r4, r7, lr}
 8002f38:	b087      	sub	sp, #28
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002f42:	f7ff ff5f 	bl	8002e04 <LL_FLASH_GetUDN>
 8002f46:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d138      	bne.n	8002fc2 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002f50:	f001 f92e 	bl	80041b0 <HAL_GetUIDw0>
 8002f54:	4604      	mov	r4, r0
 8002f56:	f001 f93f 	bl	80041d8 <HAL_GetUIDw2>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4423      	add	r3, r4
 8002f5e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002f60:	f001 f930 	bl	80041c4 <HAL_GetUIDw1>
 8002f64:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	0e1a      	lsrs	r2, r3, #24
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3307      	adds	r3, #7
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	0c1a      	lsrs	r2, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3306      	adds	r3, #6
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	0a1a      	lsrs	r2, r3, #8
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3305      	adds	r3, #5
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	0e1a      	lsrs	r2, r3, #24
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3303      	adds	r3, #3
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	0c1a      	lsrs	r2, r3, #16
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3302      	adds	r3, #2
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	0a1a      	lsrs	r2, r3, #8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002fc0:	e031      	b.n	8003026 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3307      	adds	r3, #7
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	0a1a      	lsrs	r2, r3, #8
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3306      	adds	r3, #6
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	0c1a      	lsrs	r2, r3, #16
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3305      	adds	r3, #5
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	0e1a      	lsrs	r2, r3, #24
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3304      	adds	r3, #4
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002ff0:	f7ff ff12 	bl	8002e18 <LL_FLASH_GetDeviceID>
 8002ff4:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3303      	adds	r3, #3
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8003000:	f7ff ff16 	bl	8002e30 <LL_FLASH_GetSTCompanyID>
 8003004:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3302      	adds	r3, #2
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	0a1a      	lsrs	r2, r3, #8
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3301      	adds	r3, #1
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	0c1b      	lsrs	r3, r3, #16
 8003020:	b2da      	uxtb	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	701a      	strb	r2, [r3, #0]
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	bd90      	pop	{r4, r7, pc}

0800302e <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 800302e:	b590      	push	{r4, r7, lr}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8003034:	2300      	movs	r3, #0
 8003036:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8003038:	f7ff fee4 	bl	8002e04 <LL_FLASH_GetUDN>
 800303c:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d10b      	bne.n	800305e <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8003046:	f001 f8b3 	bl	80041b0 <HAL_GetUIDw0>
 800304a:	4604      	mov	r4, r0
 800304c:	f001 f8ba 	bl	80041c4 <HAL_GetUIDw1>
 8003050:	4603      	mov	r3, r0
 8003052:	405c      	eors	r4, r3
 8003054:	f001 f8c0 	bl	80041d8 <HAL_GetUIDw2>
 8003058:	4603      	mov	r3, r0
 800305a:	4063      	eors	r3, r4
 800305c:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 800305e:	687b      	ldr	r3, [r7, #4]

}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	bd90      	pop	{r4, r7, pc}

08003068 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af02      	add	r7, sp, #8
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8003072:	f107 0308 	add.w	r3, r7, #8
 8003076:	4618      	mov	r0, r3
 8003078:	f01c fcf0 	bl	801fa5c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003082:	9200      	str	r2, [sp, #0]
 8003084:	4a07      	ldr	r2, [pc, #28]	; (80030a4 <TimestampNow+0x3c>)
 8003086:	2110      	movs	r1, #16
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f81d 	bl	80030c8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fd f872 	bl	8000178 <strlen>
 8003094:	4603      	mov	r3, r0
 8003096:	b29a      	uxth	r2, r3
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	08021088 	.word	0x08021088

080030a8 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80030ac:	2101      	movs	r1, #1
 80030ae:	2002      	movs	r0, #2
 80030b0:	f01c fb64 	bl	801f77c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80030bc:	2100      	movs	r1, #0
 80030be:	2002      	movs	r0, #2
 80030c0:	f01c fb5c 	bl	801f77c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80030c4:	bf00      	nop
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80030c8:	b40c      	push	{r2, r3}
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80030d4:	f107 031c 	add.w	r3, r7, #28
 80030d8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80030da:	6839      	ldr	r1, [r7, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f01c fe8d 	bl	801fe00 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030f0:	b002      	add	sp, #8
 80030f2:	4770      	bx	lr

080030f4 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_GetTick+0x24>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800311a:	f000 f9dd 	bl	80034d8 <TIMER_IF_GetTimerValue>
 800311e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8003120:	687b      	ldr	r3, [r7, #4]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000800 	.word	0x20000800

08003130 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fa53 	bl	80035e6 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <LL_EXTI_EnableIT_32_63+0x24>)
 8003152:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003156:	4905      	ldr	r1, [pc, #20]	; (800316c <LL_EXTI_EnableIT_32_63+0x24>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	58000800 	.word	0x58000800

08003170 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8003174:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003178:	f7ff ffe6 	bl	8003148 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 800317c:	f001 f836 	bl	80041ec <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8003180:	f001 f83a 	bl	80041f8 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8003184:	f001 f83e 	bl	8004204 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8003188:	bf00      	nop
 800318a:	bd80      	pop	{r7, pc}

0800318c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8003194:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <EnvSensors_Read+0x40>)
 8003196:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8003198:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <EnvSensors_Read+0x44>)
 800319a:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <EnvSensors_Read+0x48>)
 800319e:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a08      	ldr	r2, [pc, #32]	; (80031d8 <EnvSensors_Read+0x4c>)
 80031b6:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a08      	ldr	r2, [pc, #32]	; (80031dc <EnvSensors_Read+0x50>)
 80031bc:	611a      	str	r2, [r3, #16]

  return 0;
 80031be:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	42480000 	.word	0x42480000
 80031d0:	41900000 	.word	0x41900000
 80031d4:	447a0000 	.word	0x447a0000
 80031d8:	003e090d 	.word	0x003e090d
 80031dc:	000503ab 	.word	0x000503ab

080031e0 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 80031ea:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <LL_APB2_GRP1_EnableClock>:
{
 8003202:	b480      	push	{r7}
 8003204:	b085      	sub	sp, #20
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800320a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4313      	orrs	r3, r2
 8003218:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800321a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4013      	ands	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003226:	68fb      	ldr	r3, [r7, #12]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr
	...

08003234 <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003238:	4b16      	ldr	r3, [pc, #88]	; (8003294 <MX_TIM16_Init+0x60>)
 800323a:	4a17      	ldr	r2, [pc, #92]	; (8003298 <MX_TIM16_Init+0x64>)
 800323c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 800323e:	4b15      	ldr	r3, [pc, #84]	; (8003294 <MX_TIM16_Init+0x60>)
 8003240:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003244:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003246:	4b13      	ldr	r3, [pc, #76]	; (8003294 <MX_TIM16_Init+0x60>)
 8003248:	2200      	movs	r2, #0
 800324a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32000;
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <MX_TIM16_Init+0x60>)
 800324e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8003252:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <MX_TIM16_Init+0x60>)
 8003256:	2200      	movs	r2, #0
 8003258:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800325a:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <MX_TIM16_Init+0x60>)
 800325c:	2200      	movs	r2, #0
 800325e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <MX_TIM16_Init+0x60>)
 8003262:	2280      	movs	r2, #128	; 0x80
 8003264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003266:	480b      	ldr	r0, [pc, #44]	; (8003294 <MX_TIM16_Init+0x60>)
 8003268:	f007 fcec 	bl	800ac44 <HAL_TIM_Base_Init>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8003272:	f7ff fa97 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8003276:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800327a:	f7ff ffc2 	bl	8003202 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800327e:	2200      	movs	r2, #0
 8003280:	2100      	movs	r1, #0
 8003282:	201c      	movs	r0, #28
 8003284:	f002 f91b 	bl	80054be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003288:	201c      	movs	r0, #28
 800328a:	f002 f932 	bl	80054f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM16_Init 2 */

}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20000804 	.word	0x20000804
 8003298:	40014400 	.word	0x40014400

0800329c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80032a0:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <MX_TIM17_Init+0x5c>)
 80032a2:	4a16      	ldr	r2, [pc, #88]	; (80032fc <MX_TIM17_Init+0x60>)
 80032a4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80032a6:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <MX_TIM17_Init+0x5c>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <MX_TIM17_Init+0x5c>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80032b2:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <MX_TIM17_Init+0x5c>)
 80032b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032b8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ba:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <MX_TIM17_Init+0x5c>)
 80032bc:	2200      	movs	r2, #0
 80032be:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80032c0:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <MX_TIM17_Init+0x5c>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <MX_TIM17_Init+0x5c>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80032cc:	480a      	ldr	r0, [pc, #40]	; (80032f8 <MX_TIM17_Init+0x5c>)
 80032ce:	f007 fcb9 	bl	800ac44 <HAL_TIM_Base_Init>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80032d8:	f7ff fa64 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80032dc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80032e0:	f7ff ff8f 	bl	8003202 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80032e4:	2200      	movs	r2, #0
 80032e6:	2100      	movs	r1, #0
 80032e8:	201d      	movs	r0, #29
 80032ea:	f002 f8e8 	bl	80054be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80032ee:	201d      	movs	r0, #29
 80032f0:	f002 f8ff 	bl	80054f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM17_Init 2 */

}
 80032f4:	bf00      	nop
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20000850 	.word	0x20000850
 80032fc:	40014800 	.word	0x40014800

08003300 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a12      	ldr	r2, [pc, #72]	; (8003358 <HAL_TIM_Base_MspInit+0x58>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d10c      	bne.n	800332c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003312:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003316:	f7ff ff74 	bl	8003202 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	2100      	movs	r1, #0
 800331e:	201c      	movs	r0, #28
 8003320:	f002 f8cd 	bl	80054be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003324:	201c      	movs	r0, #28
 8003326:	f002 f8e4 	bl	80054f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800332a:	e010      	b.n	800334e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a0a      	ldr	r2, [pc, #40]	; (800335c <HAL_TIM_Base_MspInit+0x5c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d10b      	bne.n	800334e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003336:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800333a:	f7ff ff62 	bl	8003202 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800333e:	2200      	movs	r2, #0
 8003340:	2100      	movs	r1, #0
 8003342:	201d      	movs	r0, #29
 8003344:	f002 f8bb 	bl	80054be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003348:	201d      	movs	r0, #29
 800334a:	f002 f8d2 	bl	80054f2 <HAL_NVIC_EnableIRQ>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40014400 	.word	0x40014400
 800335c:	40014800 	.word	0x40014800

08003360 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr
	...

08003378 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8003382:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <TIMER_IF_Init+0x5c>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	f083 0301 	eor.w	r3, r3, #1
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01b      	beq.n	80033c8 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8003390:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <TIMER_IF_Init+0x60>)
 8003392:	f04f 32ff 	mov.w	r2, #4294967295
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8003398:	f7ff faaa 	bl	80028f0 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 800339c:	f000 f856 	bl	800344c <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80033a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033a4:	480c      	ldr	r0, [pc, #48]	; (80033d8 <TIMER_IF_Init+0x60>)
 80033a6:	f005 fcad 	bl	8008d04 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <TIMER_IF_Init+0x60>)
 80033ac:	f04f 32ff 	mov.w	r2, #4294967295
 80033b0:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80033b2:	4809      	ldr	r0, [pc, #36]	; (80033d8 <TIMER_IF_Init+0x60>)
 80033b4:	f005 fde4 	bl	8008f80 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80033b8:	2000      	movs	r0, #0
 80033ba:	f000 f9d3 	bl	8003764 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80033be:	f000 f85f 	bl	8003480 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80033c2:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <TIMER_IF_Init+0x5c>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80033c8:	79fb      	ldrb	r3, [r7, #7]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	2000089c 	.word	0x2000089c
 80033d8:	20000750 	.word	0x20000750

080033dc <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08e      	sub	sp, #56	; 0x38
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80033ea:	f107 0308 	add.w	r3, r7, #8
 80033ee:	222c      	movs	r2, #44	; 0x2c
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f01d fd44 	bl	8020e80 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80033f8:	f000 f828 	bl	800344c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <TIMER_IF_StartTimer+0x68>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	4413      	add	r3, r2
 8003404:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8003406:	2300      	movs	r3, #0
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	43db      	mvns	r3, r3
 800340e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003410:	2300      	movs	r3, #0
 8003412:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8003414:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003418:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800341a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800341e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003420:	f107 0308 	add.w	r3, r7, #8
 8003424:	2201      	movs	r2, #1
 8003426:	4619      	mov	r1, r3
 8003428:	4807      	ldr	r0, [pc, #28]	; (8003448 <TIMER_IF_StartTimer+0x6c>)
 800342a:	f005 fb5f 	bl	8008aec <HAL_RTC_SetAlarm_IT>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8003434:	f7ff f9b6 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8003438:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800343c:	4618      	mov	r0, r3
 800343e:	3738      	adds	r7, #56	; 0x38
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	200008a0 	.word	0x200008a0
 8003448:	20000750 	.word	0x20000750

0800344c <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <TIMER_IF_StopTimer+0x2c>)
 8003458:	2201      	movs	r2, #1
 800345a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800345c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003460:	4806      	ldr	r0, [pc, #24]	; (800347c <TIMER_IF_StopTimer+0x30>)
 8003462:	f005 fc4f 	bl	8008d04 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8003466:	4b05      	ldr	r3, [pc, #20]	; (800347c <TIMER_IF_StopTimer+0x30>)
 8003468:	f04f 32ff 	mov.w	r2, #4294967295
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800346e:	79fb      	ldrb	r3, [r7, #7]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40002800 	.word	0x40002800
 800347c:	20000750 	.word	0x20000750

08003480 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8003484:	f000 f98e 	bl	80037a4 <GetTimerTicks>
 8003488:	4603      	mov	r3, r0
 800348a:	4a03      	ldr	r2, [pc, #12]	; (8003498 <TIMER_IF_SetTimerContext+0x18>)
 800348c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800348e:	4b02      	ldr	r3, [pc, #8]	; (8003498 <TIMER_IF_SetTimerContext+0x18>)
 8003490:	681b      	ldr	r3, [r3, #0]
}
 8003492:	4618      	mov	r0, r3
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	200008a0 	.word	0x200008a0

0800349c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80034a0:	4b02      	ldr	r3, [pc, #8]	; (80034ac <TIMER_IF_GetTimerContext+0x10>)
 80034a2:	681b      	ldr	r3, [r3, #0]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	200008a0 	.word	0x200008a0

080034b0 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80034ba:	f000 f973 	bl	80037a4 <GetTimerTicks>
 80034be:	4602      	mov	r2, r0
 80034c0:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80034c8:	687b      	ldr	r3, [r7, #4]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	200008a0 	.word	0x200008a0

080034d8 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <TIMER_IF_GetTimerValue+0x24>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80034ea:	f000 f95b 	bl	80037a4 <GetTimerTicks>
 80034ee:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80034f0:	687b      	ldr	r3, [r7, #4]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	2000089c 	.word	0x2000089c

08003500 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800350a:	2303      	movs	r3, #3
 800350c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 800350e:	687b      	ldr	r3, [r7, #4]
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr

0800351a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800351a:	b5b0      	push	{r4, r5, r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8003522:	2100      	movs	r1, #0
 8003524:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	2000      	movs	r0, #0
 800352a:	460a      	mov	r2, r1
 800352c:	4603      	mov	r3, r0
 800352e:	0d95      	lsrs	r5, r2, #22
 8003530:	0294      	lsls	r4, r2, #10
 8003532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	4620      	mov	r0, r4
 800353c:	4629      	mov	r1, r5
 800353e:	f7fd fe0b 	bl	8001158 <__aeabi_uldivmod>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4613      	mov	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 800354a:	68fb      	ldr	r3, [r7, #12]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bdb0      	pop	{r4, r5, r7, pc}

08003554 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8003554:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003558:	b085      	sub	sp, #20
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800355e:	2100      	movs	r1, #0
 8003560:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	2000      	movs	r0, #0
 8003566:	460c      	mov	r4, r1
 8003568:	4605      	mov	r5, r0
 800356a:	4620      	mov	r0, r4
 800356c:	4629      	mov	r1, r5
 800356e:	f04f 0a00 	mov.w	sl, #0
 8003572:	f04f 0b00 	mov.w	fp, #0
 8003576:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800357a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800357e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8003582:	4650      	mov	r0, sl
 8003584:	4659      	mov	r1, fp
 8003586:	1b02      	subs	r2, r0, r4
 8003588:	eb61 0305 	sbc.w	r3, r1, r5
 800358c:	f04f 0000 	mov.w	r0, #0
 8003590:	f04f 0100 	mov.w	r1, #0
 8003594:	0099      	lsls	r1, r3, #2
 8003596:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800359a:	0090      	lsls	r0, r2, #2
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	eb12 0804 	adds.w	r8, r2, r4
 80035a4:	eb43 0905 	adc.w	r9, r3, r5
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035bc:	4690      	mov	r8, r2
 80035be:	4699      	mov	r9, r3
 80035c0:	4640      	mov	r0, r8
 80035c2:	4649      	mov	r1, r9
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	0a82      	lsrs	r2, r0, #10
 80035ce:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80035d2:	0a8b      	lsrs	r3, r1, #10
 80035d4:	4613      	mov	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80035d8:	68fb      	ldr	r3, [r7, #12]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80035e4:	4770      	bx	lr

080035e6 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff ff93 	bl	800351a <TIMER_IF_Convert_ms2Tick>
 80035f4:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80035f6:	f000 f8d5 	bl	80037a4 <GetTimerTicks>
 80035fa:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80035fc:	e000      	b.n	8003600 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80035fe:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8003600:	f000 f8d0 	bl	80037a4 <GetTimerTicks>
 8003604:	4602      	mov	r2, r0
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	429a      	cmp	r2, r3
 800360e:	d8f6      	bhi.n	80035fe <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8003610:	bf00      	nop
 8003612:	bf00      	nop
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8003622:	f01d f821 	bl	8020668 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8003636:	f000 f8a5 	bl	8003784 <TIMER_IF_BkUp_Read_MSBticks>
 800363a:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	3301      	adds	r3, #1
 8003640:	4618      	mov	r0, r3
 8003642:	f000 f88f 	bl	8003764 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 800364e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003652:	b08c      	sub	sp, #48	; 0x30
 8003654:	af00      	add	r7, sp, #0
 8003656:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 800365c:	f000 f8a2 	bl	80037a4 <GetTimerTicks>
 8003660:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8003662:	f000 f88f 	bl	8003784 <TIMER_IF_BkUp_Read_MSBticks>
 8003666:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	2200      	movs	r2, #0
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	60fa      	str	r2, [r7, #12]
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	000b      	movs	r3, r1
 800367c:	2200      	movs	r2, #0
 800367e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003680:	2000      	movs	r0, #0
 8003682:	460c      	mov	r4, r1
 8003684:	4605      	mov	r5, r0
 8003686:	eb12 0804 	adds.w	r8, r2, r4
 800368a:	eb43 0905 	adc.w	r9, r3, r5
 800368e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8003692:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	0a82      	lsrs	r2, r0, #10
 80036a0:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80036a4:	0a8b      	lsrs	r3, r1, #10
 80036a6:	4613      	mov	r3, r2
 80036a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	2200      	movs	r2, #0
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	607a      	str	r2, [r7, #4]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80036b8:	f04f 0b00 	mov.w	fp, #0
 80036bc:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff ff46 	bl	8003554 <TIMER_IF_Convert_Tick2ms>
 80036c8:	4603      	mov	r3, r0
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80036d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3730      	adds	r7, #48	; 0x30
 80036d6:	46bd      	mov	sp, r7
 80036d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080036dc <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	2100      	movs	r1, #0
 80036e8:	4803      	ldr	r0, [pc, #12]	; (80036f8 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80036ea:	f005 fcdb 	bl	80090a4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000750 	.word	0x20000750

080036fc <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	2101      	movs	r1, #1
 8003708:	4803      	ldr	r0, [pc, #12]	; (8003718 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800370a:	f005 fccb 	bl	80090a4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000750 	.word	0x20000750

0800371c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8003726:	2100      	movs	r1, #0
 8003728:	4804      	ldr	r0, [pc, #16]	; (800373c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800372a:	f005 fcd3 	bl	80090d4 <HAL_RTCEx_BKUPRead>
 800372e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8003730:	687b      	ldr	r3, [r7, #4]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	20000750 	.word	0x20000750

08003740 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800374a:	2101      	movs	r1, #1
 800374c:	4804      	ldr	r0, [pc, #16]	; (8003760 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800374e:	f005 fcc1 	bl	80090d4 <HAL_RTCEx_BKUPRead>
 8003752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8003754:	687b      	ldr	r3, [r7, #4]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20000750 	.word	0x20000750

08003764 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	2102      	movs	r1, #2
 8003770:	4803      	ldr	r0, [pc, #12]	; (8003780 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8003772:	f005 fc97 	bl	80090a4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000750 	.word	0x20000750

08003784 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800378a:	2102      	movs	r1, #2
 800378c:	4804      	ldr	r0, [pc, #16]	; (80037a0 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800378e:	f005 fca1 	bl	80090d4 <HAL_RTCEx_BKUPRead>
 8003792:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8003794:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000750 	.word	0x20000750

080037a4 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80037aa:	480b      	ldr	r0, [pc, #44]	; (80037d8 <GetTimerTicks+0x34>)
 80037ac:	f7ff fdd8 	bl	8003360 <LL_RTC_TIME_GetSubSecond>
 80037b0:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80037b2:	e003      	b.n	80037bc <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80037b4:	4808      	ldr	r0, [pc, #32]	; (80037d8 <GetTimerTicks+0x34>)
 80037b6:	f7ff fdd3 	bl	8003360 <LL_RTC_TIME_GetSubSecond>
 80037ba:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80037bc:	4806      	ldr	r0, [pc, #24]	; (80037d8 <GetTimerTicks+0x34>)
 80037be:	f7ff fdcf 	bl	8003360 <LL_RTC_TIME_GetSubSecond>
 80037c2:	4602      	mov	r2, r0
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d1f4      	bne.n	80037b4 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40002800 	.word	0x40002800

080037dc <LL_AHB2_GRP1_EnableClock>:
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80037e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80037f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4013      	ands	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003800:	68fb      	ldr	r3, [r7, #12]
}
 8003802:	bf00      	nop
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <LL_APB1_GRP1_EnableClock>:
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003818:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800381a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4313      	orrs	r3, r2
 8003822:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003828:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4013      	ands	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003830:	68fb      	ldr	r3, [r7, #12]
}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <LL_APB1_GRP1_DisableClock>:
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003848:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	43db      	mvns	r3, r3
 800384e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003852:	4013      	ands	r3, r2
 8003854:	658b      	str	r3, [r1, #88]	; 0x58
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <LL_APB2_GRP1_EnableClock>:
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800386e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4313      	orrs	r3, r2
 8003876:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4013      	ands	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003884:	68fb      	ldr	r3, [r7, #12]
}
 8003886:	bf00      	nop
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <LL_APB2_GRP1_DisableClock>:
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	43db      	mvns	r3, r3
 80038a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038a6:	4013      	ands	r3, r2
 80038a8:	660b      	str	r3, [r1, #96]	; 0x60
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <LL_SYSCFG_EnableFastModePlus>:
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <LL_SYSCFG_EnableFastModePlus+0x20>)
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	4904      	ldr	r1, [pc, #16]	; (80038d4 <LL_SYSCFG_EnableFastModePlus+0x20>)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40010000 	.word	0x40010000

080038d8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038dc:	4b26      	ldr	r3, [pc, #152]	; (8003978 <MX_USART1_UART_Init+0xa0>)
 80038de:	4a27      	ldr	r2, [pc, #156]	; (800397c <MX_USART1_UART_Init+0xa4>)
 80038e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80038e2:	4b25      	ldr	r3, [pc, #148]	; (8003978 <MX_USART1_UART_Init+0xa0>)
 80038e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038ea:	4b23      	ldr	r3, [pc, #140]	; (8003978 <MX_USART1_UART_Init+0xa0>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038f0:	4b21      	ldr	r3, [pc, #132]	; (8003978 <MX_USART1_UART_Init+0xa0>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038f6:	4b20      	ldr	r3, [pc, #128]	; (8003978 <MX_USART1_UART_Init+0xa0>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038fc:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <MX_USART1_UART_Init+0xa0>)
 80038fe:	220c      	movs	r2, #12
 8003900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003902:	4b1d      	ldr	r3, [pc, #116]	; (8003978 <MX_USART1_UART_Init+0xa0>)
 8003904:	2200      	movs	r2, #0
 8003906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003908:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <MX_USART1_UART_Init+0xa0>)
 800390a:	2200      	movs	r2, #0
 800390c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800390e:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <MX_USART1_UART_Init+0xa0>)
 8003910:	2200      	movs	r2, #0
 8003912:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003914:	4b18      	ldr	r3, [pc, #96]	; (8003978 <MX_USART1_UART_Init+0xa0>)
 8003916:	2200      	movs	r2, #0
 8003918:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 800391a:	4b17      	ldr	r3, [pc, #92]	; (8003978 <MX_USART1_UART_Init+0xa0>)
 800391c:	2240      	movs	r2, #64	; 0x40
 800391e:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8003920:	4b15      	ldr	r3, [pc, #84]	; (8003978 <MX_USART1_UART_Init+0xa0>)
 8003922:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003926:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8003928:	4b13      	ldr	r3, [pc, #76]	; (8003978 <MX_USART1_UART_Init+0xa0>)
 800392a:	2200      	movs	r2, #0
 800392c:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800392e:	4812      	ldr	r0, [pc, #72]	; (8003978 <MX_USART1_UART_Init+0xa0>)
 8003930:	f007 fc0e 	bl	800b150 <HAL_UART_Init>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 800393a:	f7fe ff33 	bl	80027a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800393e:	2100      	movs	r1, #0
 8003940:	480d      	ldr	r0, [pc, #52]	; (8003978 <MX_USART1_UART_Init+0xa0>)
 8003942:	f009 fea6 	bl	800d692 <HAL_UARTEx_SetTxFifoThreshold>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 800394c:	f7fe ff2a 	bl	80027a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003950:	2100      	movs	r1, #0
 8003952:	4809      	ldr	r0, [pc, #36]	; (8003978 <MX_USART1_UART_Init+0xa0>)
 8003954:	f009 fedb 	bl	800d70e <HAL_UARTEx_SetRxFifoThreshold>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800395e:	f7fe ff21 	bl	80027a4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8003962:	4805      	ldr	r0, [pc, #20]	; (8003978 <MX_USART1_UART_Init+0xa0>)
 8003964:	f009 fe22 	bl	800d5ac <HAL_UARTEx_EnableFifoMode>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 800396e:	f7fe ff19 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003972:	bf00      	nop
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	200008a4 	.word	0x200008a4
 800397c:	40013800 	.word	0x40013800

08003980 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003984:	4b23      	ldr	r3, [pc, #140]	; (8003a14 <MX_USART2_UART_Init+0x94>)
 8003986:	4a24      	ldr	r2, [pc, #144]	; (8003a18 <MX_USART2_UART_Init+0x98>)
 8003988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800398a:	4b22      	ldr	r3, [pc, #136]	; (8003a14 <MX_USART2_UART_Init+0x94>)
 800398c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003992:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <MX_USART2_UART_Init+0x94>)
 8003994:	2200      	movs	r2, #0
 8003996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003998:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <MX_USART2_UART_Init+0x94>)
 800399a:	2200      	movs	r2, #0
 800399c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800399e:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <MX_USART2_UART_Init+0x94>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039a4:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <MX_USART2_UART_Init+0x94>)
 80039a6:	220c      	movs	r2, #12
 80039a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039aa:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <MX_USART2_UART_Init+0x94>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80039b0:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <MX_USART2_UART_Init+0x94>)
 80039b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039b6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039b8:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <MX_USART2_UART_Init+0x94>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80039be:	4b15      	ldr	r3, [pc, #84]	; (8003a14 <MX_USART2_UART_Init+0x94>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039c4:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <MX_USART2_UART_Init+0x94>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039ca:	4812      	ldr	r0, [pc, #72]	; (8003a14 <MX_USART2_UART_Init+0x94>)
 80039cc:	f007 fbc0 	bl	800b150 <HAL_UART_Init>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80039d6:	f7fe fee5 	bl	80027a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039da:	2100      	movs	r1, #0
 80039dc:	480d      	ldr	r0, [pc, #52]	; (8003a14 <MX_USART2_UART_Init+0x94>)
 80039de:	f009 fe58 	bl	800d692 <HAL_UARTEx_SetTxFifoThreshold>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80039e8:	f7fe fedc 	bl	80027a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039ec:	2100      	movs	r1, #0
 80039ee:	4809      	ldr	r0, [pc, #36]	; (8003a14 <MX_USART2_UART_Init+0x94>)
 80039f0:	f009 fe8d 	bl	800d70e <HAL_UARTEx_SetRxFifoThreshold>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80039fa:	f7fe fed3 	bl	80027a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80039fe:	4805      	ldr	r0, [pc, #20]	; (8003a14 <MX_USART2_UART_Init+0x94>)
 8003a00:	f009 fe0f 	bl	800d622 <HAL_UARTEx_DisableFifoMode>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8003a0a:	f7fe fecb 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000934 	.word	0x20000934
 8003a18:	40004400 	.word	0x40004400

08003a1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b09a      	sub	sp, #104	; 0x68
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	60da      	str	r2, [r3, #12]
 8003a32:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8003a34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a42:	f107 030c 	add.w	r3, r7, #12
 8003a46:	2238      	movs	r2, #56	; 0x38
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f01d fa18 	bl	8020e80 <memset>
  if(uartHandle->Instance==USART1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a83      	ldr	r2, [pc, #524]	; (8003c64 <HAL_UART_MspInit+0x248>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	f040 80a3 	bne.w	8003ba2 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a60:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003a64:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a66:	f107 030c 	add.w	r3, r7, #12
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f004 feaa 	bl	80087c4 <HAL_RCCEx_PeriphCLKConfig>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 8003a76:	f7fe fe95 	bl	80027a4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003a7e:	f7ff feef 	bl	8003860 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a82:	2002      	movs	r0, #2
 8003a84:	f7ff feaa 	bl	80037dc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8003a88:	23c0      	movs	r3, #192	; 0xc0
 8003a8a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a90:	2301      	movs	r3, #1
 8003a92:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003a94:	2301      	movs	r3, #1
 8003a96:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a98:	2307      	movs	r3, #7
 8003a9a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4871      	ldr	r0, [pc, #452]	; (8003c68 <HAL_UART_MspInit+0x24c>)
 8003aa4:	f002 fc20 	bl	80062e8 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8003aa8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003aac:	f7ff ff02 	bl	80038b4 <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8003ab0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003ab4:	f7ff fefe 	bl	80038b4 <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8003ab8:	4b6c      	ldr	r3, [pc, #432]	; (8003c6c <HAL_UART_MspInit+0x250>)
 8003aba:	4a6d      	ldr	r2, [pc, #436]	; (8003c70 <HAL_UART_MspInit+0x254>)
 8003abc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003abe:	4b6b      	ldr	r3, [pc, #428]	; (8003c6c <HAL_UART_MspInit+0x250>)
 8003ac0:	2212      	movs	r2, #18
 8003ac2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ac4:	4b69      	ldr	r3, [pc, #420]	; (8003c6c <HAL_UART_MspInit+0x250>)
 8003ac6:	2210      	movs	r2, #16
 8003ac8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aca:	4b68      	ldr	r3, [pc, #416]	; (8003c6c <HAL_UART_MspInit+0x250>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ad0:	4b66      	ldr	r3, [pc, #408]	; (8003c6c <HAL_UART_MspInit+0x250>)
 8003ad2:	2280      	movs	r2, #128	; 0x80
 8003ad4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ad6:	4b65      	ldr	r3, [pc, #404]	; (8003c6c <HAL_UART_MspInit+0x250>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003adc:	4b63      	ldr	r3, [pc, #396]	; (8003c6c <HAL_UART_MspInit+0x250>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003ae2:	4b62      	ldr	r3, [pc, #392]	; (8003c6c <HAL_UART_MspInit+0x250>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ae8:	4b60      	ldr	r3, [pc, #384]	; (8003c6c <HAL_UART_MspInit+0x250>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003aee:	485f      	ldr	r0, [pc, #380]	; (8003c6c <HAL_UART_MspInit+0x250>)
 8003af0:	f001 fd1c 	bl	800552c <HAL_DMA_Init>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8003afa:	f7fe fe53 	bl	80027a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a5a      	ldr	r2, [pc, #360]	; (8003c6c <HAL_UART_MspInit+0x250>)
 8003b02:	679a      	str	r2, [r3, #120]	; 0x78
 8003b04:	4a59      	ldr	r2, [pc, #356]	; (8003c6c <HAL_UART_MspInit+0x250>)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8003b0a:	4b5a      	ldr	r3, [pc, #360]	; (8003c74 <HAL_UART_MspInit+0x258>)
 8003b0c:	4a5a      	ldr	r2, [pc, #360]	; (8003c78 <HAL_UART_MspInit+0x25c>)
 8003b0e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003b10:	4b58      	ldr	r3, [pc, #352]	; (8003c74 <HAL_UART_MspInit+0x258>)
 8003b12:	2211      	movs	r2, #17
 8003b14:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b16:	4b57      	ldr	r3, [pc, #348]	; (8003c74 <HAL_UART_MspInit+0x258>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b1c:	4b55      	ldr	r3, [pc, #340]	; (8003c74 <HAL_UART_MspInit+0x258>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b22:	4b54      	ldr	r3, [pc, #336]	; (8003c74 <HAL_UART_MspInit+0x258>)
 8003b24:	2280      	movs	r2, #128	; 0x80
 8003b26:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b28:	4b52      	ldr	r3, [pc, #328]	; (8003c74 <HAL_UART_MspInit+0x258>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b2e:	4b51      	ldr	r3, [pc, #324]	; (8003c74 <HAL_UART_MspInit+0x258>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003b34:	4b4f      	ldr	r3, [pc, #316]	; (8003c74 <HAL_UART_MspInit+0x258>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b3a:	4b4e      	ldr	r3, [pc, #312]	; (8003c74 <HAL_UART_MspInit+0x258>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003b40:	484c      	ldr	r0, [pc, #304]	; (8003c74 <HAL_UART_MspInit+0x258>)
 8003b42:	f001 fcf3 	bl	800552c <HAL_DMA_Init>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8003b4c:	f7fe fe2a 	bl	80027a4 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003b54:	2300      	movs	r3, #0
 8003b56:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 8003b64:	2301      	movs	r3, #1
 8003b66:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 8003b68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4841      	ldr	r0, [pc, #260]	; (8003c74 <HAL_UART_MspInit+0x258>)
 8003b70:	f002 f8c6 	bl	8005d00 <HAL_DMAEx_ConfigMuxSync>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8003b7a:	f7fe fe13 	bl	80027a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a3c      	ldr	r2, [pc, #240]	; (8003c74 <HAL_UART_MspInit+0x258>)
 8003b82:	67da      	str	r2, [r3, #124]	; 0x7c
 8003b84:	4a3b      	ldr	r2, [pc, #236]	; (8003c74 <HAL_UART_MspInit+0x258>)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2102      	movs	r1, #2
 8003b8e:	2024      	movs	r0, #36	; 0x24
 8003b90:	f001 fc95 	bl	80054be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b94:	2024      	movs	r0, #36	; 0x24
 8003b96:	f001 fcac 	bl	80054f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003b9a:	200c      	movs	r0, #12
 8003b9c:	f001 fca9 	bl	80054f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003ba0:	e05c      	b.n	8003c5c <HAL_UART_MspInit+0x240>
  else if(uartHandle->Instance==USART2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a35      	ldr	r2, [pc, #212]	; (8003c7c <HAL_UART_MspInit+0x260>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d157      	bne.n	8003c5c <HAL_UART_MspInit+0x240>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003bac:	2302      	movs	r3, #2
 8003bae:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003bb0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8003bb4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bb6:	f107 030c 	add.w	r3, r7, #12
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f004 fe02 	bl	80087c4 <HAL_RCCEx_PeriphCLKConfig>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 8003bc6:	f7fe fded 	bl	80027a4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003bce:	f7ff fe1d 	bl	800380c <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	f7ff fe02 	bl	80037dc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8003bd8:	230c      	movs	r3, #12
 8003bda:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003be0:	2301      	movs	r3, #1
 8003be2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003be4:	2301      	movs	r3, #1
 8003be6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003be8:	2307      	movs	r3, #7
 8003bea:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bf6:	f002 fb77 	bl	80062e8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8003bfa:	4b21      	ldr	r3, [pc, #132]	; (8003c80 <HAL_UART_MspInit+0x264>)
 8003bfc:	4a21      	ldr	r2, [pc, #132]	; (8003c84 <HAL_UART_MspInit+0x268>)
 8003bfe:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003c00:	4b1f      	ldr	r3, [pc, #124]	; (8003c80 <HAL_UART_MspInit+0x264>)
 8003c02:	2213      	movs	r2, #19
 8003c04:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c06:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <HAL_UART_MspInit+0x264>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c0c:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <HAL_UART_MspInit+0x264>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c12:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <HAL_UART_MspInit+0x264>)
 8003c14:	2280      	movs	r2, #128	; 0x80
 8003c16:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c18:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <HAL_UART_MspInit+0x264>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c1e:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <HAL_UART_MspInit+0x264>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003c24:	4b16      	ldr	r3, [pc, #88]	; (8003c80 <HAL_UART_MspInit+0x264>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c2a:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <HAL_UART_MspInit+0x264>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003c30:	4813      	ldr	r0, [pc, #76]	; (8003c80 <HAL_UART_MspInit+0x264>)
 8003c32:	f001 fc7b 	bl	800552c <HAL_DMA_Init>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_UART_MspInit+0x224>
      Error_Handler();
 8003c3c:	f7fe fdb2 	bl	80027a4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a0f      	ldr	r2, [pc, #60]	; (8003c80 <HAL_UART_MspInit+0x264>)
 8003c44:	67da      	str	r2, [r3, #124]	; 0x7c
 8003c46:	4a0e      	ldr	r2, [pc, #56]	; (8003c80 <HAL_UART_MspInit+0x264>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	2100      	movs	r1, #0
 8003c50:	2025      	movs	r0, #37	; 0x25
 8003c52:	f001 fc34 	bl	80054be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c56:	2025      	movs	r0, #37	; 0x25
 8003c58:	f001 fc4b 	bl	80054f2 <HAL_NVIC_EnableIRQ>
}
 8003c5c:	bf00      	nop
 8003c5e:	3768      	adds	r7, #104	; 0x68
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40013800 	.word	0x40013800
 8003c68:	48000400 	.word	0x48000400
 8003c6c:	200009c4 	.word	0x200009c4
 8003c70:	40020008 	.word	0x40020008
 8003c74:	20000a24 	.word	0x20000a24
 8003c78:	4002001c 	.word	0x4002001c
 8003c7c:	40004400 	.word	0x40004400
 8003c80:	20000a84 	.word	0x20000a84
 8003c84:	40020030 	.word	0x40020030

08003c88 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <HAL_UART_MspDeInit+0x74>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d115      	bne.n	8003cc6 <HAL_UART_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003c9a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003c9e:	f7ff fdf7 	bl	8003890 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8003ca2:	21c0      	movs	r1, #192	; 0xc0
 8003ca4:	4816      	ldr	r0, [pc, #88]	; (8003d00 <HAL_UART_MspDeInit+0x78>)
 8003ca6:	f002 fc7f 	bl	80065a8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f001 fce4 	bl	800567c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f001 fcdf 	bl	800567c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003cbe:	2024      	movs	r0, #36	; 0x24
 8003cc0:	f001 fc25 	bl	800550e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8003cc4:	e015      	b.n	8003cf2 <HAL_UART_MspDeInit+0x6a>
  else if(uartHandle->Instance==USART2)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a0e      	ldr	r2, [pc, #56]	; (8003d04 <HAL_UART_MspDeInit+0x7c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d110      	bne.n	8003cf2 <HAL_UART_MspDeInit+0x6a>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003cd0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003cd4:	f7ff fdb2 	bl	800383c <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8003cd8:	210c      	movs	r1, #12
 8003cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cde:	f002 fc63 	bl	80065a8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f001 fcc8 	bl	800567c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003cec:	2025      	movs	r0, #37	; 0x25
 8003cee:	f001 fc0e 	bl	800550e <HAL_NVIC_DisableIRQ>
}
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40013800 	.word	0x40013800
 8003d00:	48000400 	.word	0x48000400
 8003d04:	40004400 	.word	0x40004400

08003d08 <LL_APB2_GRP1_ForceReset>:
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr

08003d2a <LL_APB2_GRP1_ReleaseReset>:
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8003d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d40:	4013      	ands	r3, r2
 8003d42:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr
	...

08003d50 <LL_EXTI_EnableIT_0_31>:
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <LL_EXTI_EnableIT_0_31+0x24>)
 8003d5a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003d5e:	4905      	ldr	r1, [pc, #20]	; (8003d74 <LL_EXTI_EnableIT_0_31+0x24>)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	58000800 	.word	0x58000800

08003d78 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003d80:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <vcom_Init+0x28>)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8003d86:	f7fd ff99 	bl	8001cbc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003d8a:	f7ff fda5 	bl	80038d8 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8003d8e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003d92:	f7ff ffdd 	bl	8003d50 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8003d96:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20000ae8 	.word	0x20000ae8

08003da4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8003da8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003dac:	f7ff ffac 	bl	8003d08 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003db0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003db4:	f7ff ffb9 	bl	8003d2a <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003db8:	4804      	ldr	r0, [pc, #16]	; (8003dcc <vcom_DeInit+0x28>)
 8003dba:	f7ff ff65 	bl	8003c88 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003dbe:	200f      	movs	r0, #15
 8003dc0:	f001 fba5 	bl	800550e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003dc4:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	200008a4 	.word	0x200008a4

08003dd0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003ddc:	887b      	ldrh	r3, [r7, #2]
 8003dde:	461a      	mov	r2, r3
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4804      	ldr	r0, [pc, #16]	; (8003df4 <vcom_Trace_DMA+0x24>)
 8003de4:	f007 faf0 	bl	800b3c8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8003de8:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	200008a4 	.word	0x200008a4

08003df8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003e00:	4a19      	ldr	r2, [pc, #100]	; (8003e68 <vcom_ReceiveInit+0x70>)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003e06:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e0a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003e0c:	f107 0308 	add.w	r3, r7, #8
 8003e10:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003e14:	4815      	ldr	r0, [pc, #84]	; (8003e6c <vcom_ReceiveInit+0x74>)
 8003e16:	f009 fb3c 	bl	800d492 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8003e1a:	bf00      	nop
 8003e1c:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <vcom_ReceiveInit+0x74>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e2a:	d0f7      	beq.n	8003e1c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8003e2c:	bf00      	nop
 8003e2e:	4b0f      	ldr	r3, [pc, #60]	; (8003e6c <vcom_ReceiveInit+0x74>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e3c:	d1f7      	bne.n	8003e2e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <vcom_ReceiveInit+0x74>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <vcom_ReceiveInit+0x74>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003e4c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8003e4e:	4807      	ldr	r0, [pc, #28]	; (8003e6c <vcom_ReceiveInit+0x74>)
 8003e50:	f009 fb7a 	bl	800d548 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003e54:	2201      	movs	r2, #1
 8003e56:	4906      	ldr	r1, [pc, #24]	; (8003e70 <vcom_ReceiveInit+0x78>)
 8003e58:	4804      	ldr	r0, [pc, #16]	; (8003e6c <vcom_ReceiveInit+0x74>)
 8003e5a:	f007 fa5f 	bl	800b31c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8003e5e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20000aec 	.word	0x20000aec
 8003e6c:	200008a4 	.word	0x200008a4
 8003e70:	20000ae4 	.word	0x20000ae4

08003e74 <vcom_Resume>:

void vcom_Resume(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e78:	4808      	ldr	r0, [pc, #32]	; (8003e9c <vcom_Resume+0x28>)
 8003e7a:	f007 f969 	bl	800b150 <HAL_UART_Init>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <vcom_Resume+0x14>
  {
    Error_Handler();
 8003e84:	f7fe fc8e 	bl	80027a4 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003e88:	4805      	ldr	r0, [pc, #20]	; (8003ea0 <vcom_Resume+0x2c>)
 8003e8a:	f001 fb4f 	bl	800552c <HAL_DMA_Init>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <vcom_Resume+0x24>
  {
    Error_Handler();
 8003e94:	f7fe fc86 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003e98:	bf00      	nop
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	200008a4 	.word	0x200008a4
 8003ea0:	200009c4 	.word	0x200009c4

08003ea4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a05      	ldr	r2, [pc, #20]	; (8003ec8 <HAL_UART_TxCpltCallback+0x24>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d103      	bne.n	8003ebe <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8003eb6:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <HAL_UART_TxCpltCallback+0x28>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2000      	movs	r0, #0
 8003ebc:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40013800 	.word	0x40013800
 8003ecc:	20000ae8 	.word	0x20000ae8

08003ed0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a13      	ldr	r2, [pc, #76]	; (8003f2c <HAL_UART_RxCpltCallback+0x5c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d113      	bne.n	8003f0a <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8003ee2:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <HAL_UART_RxCpltCallback+0x60>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_UART_RxCpltCallback+0x30>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d105      	bne.n	8003f00 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003ef4:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <HAL_UART_RxCpltCallback+0x60>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2101      	movs	r1, #1
 8003efc:	480d      	ldr	r0, [pc, #52]	; (8003f34 <HAL_UART_RxCpltCallback+0x64>)
 8003efe:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8003f00:	2201      	movs	r2, #1
 8003f02:	490c      	ldr	r1, [pc, #48]	; (8003f34 <HAL_UART_RxCpltCallback+0x64>)
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f007 fa09 	bl	800b31c <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <HAL_UART_RxCpltCallback+0x68>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d106      	bne.n	8003f22 <HAL_UART_RxCpltCallback+0x52>
    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
 8003f14:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <HAL_UART_RxCpltCallback+0x6c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2210      	movs	r2, #16
 8003f1a:	621a      	str	r2, [r3, #32]
    	  UART2_SET = 1;
 8003f1c:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <HAL_UART_RxCpltCallback+0x70>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40013800 	.word	0x40013800
 8003f30:	20000aec 	.word	0x20000aec
 8003f34:	20000ae4 	.word	0x20000ae4
 8003f38:	40004400 	.word	0x40004400
 8003f3c:	20000934 	.word	0x20000934
 8003f40:	2000001c 	.word	0x2000001c

08003f44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003f44:	480d      	ldr	r0, [pc, #52]	; (8003f7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003f46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f48:	f7ff f955 	bl	80031f6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f4c:	480c      	ldr	r0, [pc, #48]	; (8003f80 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f4e:	490d      	ldr	r1, [pc, #52]	; (8003f84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f50:	4a0d      	ldr	r2, [pc, #52]	; (8003f88 <LoopForever+0xe>)
  movs r3, #0
 8003f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f54:	e002      	b.n	8003f5c <LoopCopyDataInit>

08003f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f5a:	3304      	adds	r3, #4

08003f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f60:	d3f9      	bcc.n	8003f56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f62:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f64:	4c0a      	ldr	r4, [pc, #40]	; (8003f90 <LoopForever+0x16>)
  movs r3, #0
 8003f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f68:	e001      	b.n	8003f6e <LoopFillZerobss>

08003f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f6c:	3204      	adds	r2, #4

08003f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f70:	d3fb      	bcc.n	8003f6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003f72:	f01c ff61 	bl	8020e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f76:	f7fe f9db 	bl	8002330 <main>

08003f7a <LoopForever>:

LoopForever:
    b LoopForever
 8003f7a:	e7fe      	b.n	8003f7a <LoopForever>
  ldr   r0, =_estack
 8003f7c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f84:	200005ac 	.word	0x200005ac
  ldr r2, =_sidata
 8003f88:	08022028 	.word	0x08022028
  ldr r2, =_sbss
 8003f8c:	200005ac 	.word	0x200005ac
  ldr r4, =_ebss
 8003f90:	20002b98 	.word	0x20002b98

08003f94 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f94:	e7fe      	b.n	8003f94 <ADC_IRQHandler>

08003f96 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b086      	sub	sp, #24
 8003f9a:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003f9c:	1d3b      	adds	r3, r7, #4
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	605a      	str	r2, [r3, #4]
 8003fa4:	609a      	str	r2, [r3, #8]
 8003fa6:	60da      	str	r2, [r3, #12]
 8003fa8:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003faa:	2310      	movs	r3, #16
 8003fac:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003fba:	1d3b      	adds	r3, r7, #4
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fc2:	f002 f991 	bl	80062e8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003fc6:	2320      	movs	r3, #32
 8003fc8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003fca:	1d3b      	adds	r3, r7, #4
 8003fcc:	4619      	mov	r1, r3
 8003fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fd2:	f002 f989 	bl	80062e8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2120      	movs	r1, #32
 8003fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fde:	f002 fbb1 	bl	8006744 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2110      	movs	r1, #16
 8003fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fea:	f002 fbab 	bl	8006744 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	2b03      	cmp	r3, #3
 8004006:	d83f      	bhi.n	8004088 <BSP_RADIO_ConfigRFSwitch+0x90>
 8004008:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800400a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400e:	bf00      	nop
 8004010:	08004021 	.word	0x08004021
 8004014:	0800403b 	.word	0x0800403b
 8004018:	08004055 	.word	0x08004055
 800401c:	0800406f 	.word	0x0800406f
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8004020:	2200      	movs	r2, #0
 8004022:	2110      	movs	r1, #16
 8004024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004028:	f002 fb8c 	bl	8006744 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800402c:	2200      	movs	r2, #0
 800402e:	2120      	movs	r1, #32
 8004030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004034:	f002 fb86 	bl	8006744 <HAL_GPIO_WritePin>
      break;      
 8004038:	e027      	b.n	800408a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800403a:	2201      	movs	r2, #1
 800403c:	2110      	movs	r1, #16
 800403e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004042:	f002 fb7f 	bl	8006744 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8004046:	2200      	movs	r2, #0
 8004048:	2120      	movs	r1, #32
 800404a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800404e:	f002 fb79 	bl	8006744 <HAL_GPIO_WritePin>
      break;
 8004052:	e01a      	b.n	800408a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8004054:	2201      	movs	r2, #1
 8004056:	2110      	movs	r1, #16
 8004058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800405c:	f002 fb72 	bl	8006744 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8004060:	2201      	movs	r2, #1
 8004062:	2120      	movs	r1, #32
 8004064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004068:	f002 fb6c 	bl	8006744 <HAL_GPIO_WritePin>
      break;
 800406c:	e00d      	b.n	800408a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800406e:	2200      	movs	r2, #0
 8004070:	2110      	movs	r1, #16
 8004072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004076:	f002 fb65 	bl	8006744 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800407a:	2201      	movs	r2, #1
 800407c:	2120      	movs	r1, #32
 800407e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004082:	f002 fb5f 	bl	8006744 <HAL_GPIO_WritePin>
      break;
 8004086:	e000      	b.n	800408a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8004088:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8004098:	2302      	movs	r3, #2
}
 800409a:	4618      	mov	r0, r3
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr

080040a2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80040a2:	b480      	push	{r7}
 80040a4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80040a6:	2301      	movs	r3, #1
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bc80      	pop	{r7}
 80040ae:	4770      	bx	lr

080040b0 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80040b4:	2301      	movs	r3, #1
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr

080040be <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80040be:	b480      	push	{r7}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	4603      	mov	r3, r0
 80040c6:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d102      	bne.n	80040d4 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80040ce:	230f      	movs	r3, #15
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	e001      	b.n	80040d8 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80040d4:	2316      	movs	r3, #22
 80040d6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80040d8:	68fb      	ldr	r3, [r7, #12]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <LL_DBGMCU_EnableDBGSleepMode>:
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80040e8:	4b04      	ldr	r3, [pc, #16]	; (80040fc <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4a03      	ldr	r2, [pc, #12]	; (80040fc <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	6053      	str	r3, [r2, #4]
}
 80040f4:	bf00      	nop
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr
 80040fc:	e0042000 	.word	0xe0042000

08004100 <LL_DBGMCU_EnableDBGStopMode>:
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004104:	4b04      	ldr	r3, [pc, #16]	; (8004118 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4a03      	ldr	r2, [pc, #12]	; (8004118 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800410a:	f043 0302 	orr.w	r3, r3, #2
 800410e:	6053      	str	r3, [r2, #4]
}
 8004110:	bf00      	nop
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr
 8004118:	e0042000 	.word	0xe0042000

0800411c <LL_DBGMCU_EnableDBGStandbyMode>:
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8004120:	4b04      	ldr	r3, [pc, #16]	; (8004134 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4a03      	ldr	r2, [pc, #12]	; (8004134 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8004126:	f043 0304 	orr.w	r3, r3, #4
 800412a:	6053      	str	r3, [r2, #4]
}
 800412c:	bf00      	nop
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr
 8004134:	e0042000 	.word	0xe0042000

08004138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004142:	2003      	movs	r0, #3
 8004144:	f001 f9b0 	bl	80054a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004148:	f004 f95e 	bl	8008408 <HAL_RCC_GetHCLKFreq>
 800414c:	4603      	mov	r3, r0
 800414e:	4a09      	ldr	r2, [pc, #36]	; (8004174 <HAL_Init+0x3c>)
 8004150:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004152:	200f      	movs	r0, #15
 8004154:	f7fe ffce 	bl	80030f4 <HAL_InitTick>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	71fb      	strb	r3, [r7, #7]
 8004162:	e001      	b.n	8004168 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004164:	f7fe fd57 	bl	8002c16 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004168:	79fb      	ldrb	r3, [r7, #7]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000018 	.word	0x20000018

08004178 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800417c:	4b04      	ldr	r3, [pc, #16]	; (8004190 <HAL_SuspendTick+0x18>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a03      	ldr	r2, [pc, #12]	; (8004190 <HAL_SuspendTick+0x18>)
 8004182:	f023 0302 	bic.w	r3, r3, #2
 8004186:	6013      	str	r3, [r2, #0]
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr
 8004190:	e000e010 	.word	0xe000e010

08004194 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <HAL_ResumeTick+0x18>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a03      	ldr	r2, [pc, #12]	; (80041ac <HAL_ResumeTick+0x18>)
 800419e:	f043 0302 	orr.w	r3, r3, #2
 80041a2:	6013      	str	r3, [r2, #0]
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	e000e010 	.word	0xe000e010

080041b0 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80041b4:	4b02      	ldr	r3, [pc, #8]	; (80041c0 <HAL_GetUIDw0+0x10>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr
 80041c0:	1fff7590 	.word	0x1fff7590

080041c4 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80041c8:	4b02      	ldr	r3, [pc, #8]	; (80041d4 <HAL_GetUIDw1+0x10>)
 80041ca:	681b      	ldr	r3, [r3, #0]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr
 80041d4:	1fff7594 	.word	0x1fff7594

080041d8 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80041dc:	4b02      	ldr	r3, [pc, #8]	; (80041e8 <HAL_GetUIDw2+0x10>)
 80041de:	681b      	ldr	r3, [r3, #0]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr
 80041e8:	1fff7598 	.word	0x1fff7598

080041ec <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80041f0:	f7ff ff78 	bl	80040e4 <LL_DBGMCU_EnableDBGSleepMode>
}
 80041f4:	bf00      	nop
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80041fc:	f7ff ff80 	bl	8004100 <LL_DBGMCU_EnableDBGStopMode>
}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8004208:	f7ff ff88 	bl	800411c <LL_DBGMCU_EnableDBGStandbyMode>
}
 800420c:	bf00      	nop
 800420e:	bd80      	pop	{r7, pc}

08004210 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	601a      	str	r2, [r3, #0]
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr

08004234 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr

0800424e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800424e:	b480      	push	{r7}
 8004250:	b085      	sub	sp, #20
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	695a      	ldr	r2, [r3, #20]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2107      	movs	r1, #7
 8004266:	fa01 f303 	lsl.w	r3, r1, r3
 800426a:	43db      	mvns	r3, r3
 800426c:	401a      	ands	r2, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	fa01 f303 	lsl.w	r3, r1, r3
 800427a:	431a      	orrs	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	695a      	ldr	r2, [r3, #20]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2107      	movs	r1, #7
 80042a0:	fa01 f303 	lsl.w	r3, r1, r3
 80042a4:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042de:	b480      	push	{r7}
 80042e0:	b085      	sub	sp, #20
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	210f      	movs	r1, #15
 80042f6:	fa01 f303 	lsl.w	r3, r1, r3
 80042fa:	43db      	mvns	r3, r3
 80042fc:	401a      	ands	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	0e9b      	lsrs	r3, r3, #26
 8004302:	f003 010f 	and.w	r1, r3, #15
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	fa01 f303 	lsl.w	r3, r1, r3
 8004310:	431a      	orrs	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004316:	bf00      	nop
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	629a      	str	r2, [r3, #40]	; 0x28
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr

08004344 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004358:	43db      	mvns	r3, r3
 800435a:	401a      	ands	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr

0800436a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	43db      	mvns	r3, r3
 8004380:	401a      	ands	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	0219      	lsls	r1, r3, #8
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	400b      	ands	r3, r1
 800438a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800438e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004392:	431a      	orrs	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004398:	bf00      	nop
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr

080043a2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80043b2:	f023 0317 	bic.w	r3, r3, #23
 80043b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr

080043c8 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80043d8:	f023 0317 	bic.w	r3, r3, #23
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6093      	str	r3, [r2, #8]
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043fe:	d101      	bne.n	8004404 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004400:	2301      	movs	r3, #1
 8004402:	e000      	b.n	8004406 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004420:	f023 0317 	bic.w	r3, r3, #23
 8004424:	f043 0201 	orr.w	r2, r3, #1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr

08004436 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004446:	f023 0317 	bic.w	r3, r3, #23
 800444a:	f043 0202 	orr.w	r2, r3, #2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <LL_ADC_IsEnabled+0x18>
 8004470:	2301      	movs	r3, #1
 8004472:	e000      	b.n	8004476 <LL_ADC_IsEnabled+0x1a>
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr

08004480 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b02      	cmp	r3, #2
 8004492:	d101      	bne.n	8004498 <LL_ADC_IsDisableOngoing+0x18>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <LL_ADC_IsDisableOngoing+0x1a>
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr

080044a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044b4:	f023 0317 	bic.w	r3, r3, #23
 80044b8:	f043 0204 	orr.w	r2, r3, #4
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr

080044ca <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044da:	f023 0317 	bic.w	r3, r3, #23
 80044de:	f043 0210 	orr.w	r2, r3, #16
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr

080044f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b04      	cmp	r3, #4
 8004502:	d101      	bne.n	8004508 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr

08004514 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8004520:	2300      	movs	r3, #0
 8004522:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004528:	2300      	movs	r3, #0
 800452a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e19e      	b.n	8004874 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004540:	2b00      	cmp	r3, #0
 8004542:	d109      	bne.n	8004558 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7fd faf1 	bl	8001b2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff ff44 	bl	80043ea <LL_ADC_IsInternalRegulatorEnabled>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d115      	bne.n	8004594 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ff18 	bl	80043a2 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004572:	4b99      	ldr	r3, [pc, #612]	; (80047d8 <HAL_ADC_Init+0x2c4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	099b      	lsrs	r3, r3, #6
 8004578:	4a98      	ldr	r2, [pc, #608]	; (80047dc <HAL_ADC_Init+0x2c8>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	099b      	lsrs	r3, r3, #6
 8004580:	3301      	adds	r3, #1
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004586:	e002      	b.n	800458e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	3b01      	subs	r3, #1
 800458c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1f9      	bne.n	8004588 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff ff26 	bl	80043ea <LL_ADC_IsInternalRegulatorEnabled>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10d      	bne.n	80045c0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a8:	f043 0210 	orr.w	r2, r3, #16
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b4:	f043 0201 	orr.w	r2, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff ff93 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 80045ca:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f040 8144 	bne.w	8004862 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f040 8140 	bne.w	8004862 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80045ea:	f043 0202 	orr.w	r2, r3, #2
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff ff30 	bl	800445c <LL_ADC_IsEnabled>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f040 80a7 	bne.w	8004752 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	7e1b      	ldrb	r3, [r3, #24]
 800460c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800460e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	7e5b      	ldrb	r3, [r3, #25]
 8004614:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004616:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	7e9b      	ldrb	r3, [r3, #26]
 800461c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800461e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004624:	2a00      	cmp	r2, #0
 8004626:	d002      	beq.n	800462e <HAL_ADC_Init+0x11a>
 8004628:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800462c:	e000      	b.n	8004630 <HAL_ADC_Init+0x11c>
 800462e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004630:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004636:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	da04      	bge.n	800464a <HAL_ADC_Init+0x136>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004648:	e001      	b.n	800464e <HAL_ADC_Init+0x13a>
 800464a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800464e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004656:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004658:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4313      	orrs	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d114      	bne.n	8004694 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	7e9b      	ldrb	r3, [r3, #26]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d104      	bne.n	800467c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	e00b      	b.n	8004694 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004680:	f043 0220 	orr.w	r2, r3, #32
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468c:	f043 0201 	orr.w	r2, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	2b00      	cmp	r3, #0
 800469a:	d009      	beq.n	80046b0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80046a8:	4313      	orrs	r3, r2
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80046ba:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6812      	ldr	r2, [r2, #0]
 80046c2:	69b9      	ldr	r1, [r7, #24]
 80046c4:	430b      	orrs	r3, r1
 80046c6:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046d4:	4313      	orrs	r3, r2
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d111      	bne.n	800470a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046f2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80046f8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80046fe:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	4b33      	ldr	r3, [pc, #204]	; (80047e0 <HAL_ADC_Init+0x2cc>)
 8004712:	4013      	ands	r3, r2
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	6979      	ldr	r1, [r7, #20]
 800471a:	430b      	orrs	r3, r1
 800471c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004726:	d014      	beq.n	8004752 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800472c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004730:	d00f      	beq.n	8004752 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004736:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800473a:	d00a      	beq.n	8004752 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800473c:	4b29      	ldr	r3, [pc, #164]	; (80047e4 <HAL_ADC_Init+0x2d0>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800474c:	4925      	ldr	r1, [pc, #148]	; (80047e4 <HAL_ADC_Init+0x2d0>)
 800474e:	4313      	orrs	r3, r2
 8004750:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475a:	461a      	mov	r2, r3
 800475c:	2100      	movs	r1, #0
 800475e:	f7ff fd76 	bl	800424e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	461a      	mov	r2, r3
 800476c:	491e      	ldr	r1, [pc, #120]	; (80047e8 <HAL_ADC_Init+0x2d4>)
 800476e:	f7ff fd6e 	bl	800424e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d108      	bne.n	800478c <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f062 020f 	orn	r2, r2, #15
 8004788:	629a      	str	r2, [r3, #40]	; 0x28
 800478a:	e042      	b.n	8004812 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004794:	d13d      	bne.n	8004812 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8004796:	2300      	movs	r3, #0
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	e00c      	b.n	80047b6 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	fa22 f303 	lsr.w	r3, r2, r3
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	2b0f      	cmp	r3, #15
 80047ae:	d006      	beq.n	80047be <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	3301      	adds	r3, #1
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	2b07      	cmp	r3, #7
 80047ba:	d9ef      	bls.n	800479c <HAL_ADC_Init+0x288>
 80047bc:	e000      	b.n	80047c0 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 80047be:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d112      	bne.n	80047ec <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f062 020f 	orn	r2, r2, #15
 80047d4:	629a      	str	r2, [r3, #40]	; 0x28
 80047d6:	e01c      	b.n	8004812 <HAL_ADC_Init+0x2fe>
 80047d8:	20000018 	.word	0x20000018
 80047dc:	053e2d63 	.word	0x053e2d63
 80047e0:	1ffffc02 	.word	0x1ffffc02
 80047e4:	40012708 	.word	0x40012708
 80047e8:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	f003 031c 	and.w	r3, r3, #28
 80047fe:	f06f 020f 	mvn.w	r2, #15
 8004802:	fa02 f103 	lsl.w	r1, r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2100      	movs	r1, #0
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fd36 	bl	800428a <LL_ADC_GetSamplingTimeCommonChannels>
 800481e:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004824:	429a      	cmp	r2, r3
 8004826:	d10b      	bne.n	8004840 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004832:	f023 0303 	bic.w	r3, r3, #3
 8004836:	f043 0201 	orr.w	r2, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800483e:	e018      	b.n	8004872 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004844:	f023 0312 	bic.w	r3, r3, #18
 8004848:	f043 0210 	orr.w	r2, r3, #16
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004854:	f043 0201 	orr.w	r2, r3, #1
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004860:	e007      	b.n	8004872 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004866:	f043 0210 	orr.w	r2, r3, #16
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8004872:	7ffb      	ldrb	r3, [r7, #31]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3720      	adds	r7, #32
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e06a      	b.n	8004964 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004892:	f043 0202 	orr.w	r2, r3, #2
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fabe 	bl	8004e1c <ADC_ConversionStop>
 80048a0:	4603      	mov	r3, r0
 80048a2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10f      	bne.n	80048ca <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fb82 	bl	8004fb4 <ADC_Disable>
 80048b0:	4603      	mov	r3, r0
 80048b2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d102      	bne.n	80048c0 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff fd7f 	bl	80043c8 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80048d8:	f023 0303 	bic.w	r3, r3, #3
 80048dc:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f240 329f 	movw	r2, #927	; 0x39f
 80048e6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68d9      	ldr	r1, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	4b1e      	ldr	r3, [pc, #120]	; (800496c <HAL_ADC_DeInit+0xf0>)
 80048f4:	400b      	ands	r3, r1
 80048f6:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004906:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695a      	ldr	r2, [r3, #20]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0207 	bic.w	r2, r2, #7
 8004916:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6a1a      	ldr	r2, [r3, #32]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8004926:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2200      	movs	r2, #0
 8004934:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8004936:	4b0e      	ldr	r3, [pc, #56]	; (8004970 <HAL_ADC_DeInit+0xf4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a0d      	ldr	r2, [pc, #52]	; (8004970 <HAL_ADC_DeInit+0xf4>)
 800493c:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8004940:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fd f906 	bl	8001b54 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004962:	7bfb      	ldrb	r3, [r7, #15]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	833e0200 	.word	0x833e0200
 8004970:	40012708 	.word	0x40012708

08004974 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff fdb5 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d132      	bne.n	80049f2 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_ADC_Start+0x26>
 8004996:	2302      	movs	r3, #2
 8004998:	e02e      	b.n	80049f8 <HAL_ADC_Start+0x84>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fa80 	bl	8004ea8 <ADC_Enable>
 80049a8:	4603      	mov	r3, r0
 80049aa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d11a      	bne.n	80049e8 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	221c      	movs	r2, #28
 80049d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fd5f 	bl	80044a4 <LL_ADC_REG_StartConversion>
 80049e6:	e006      	b.n	80049f6 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80049f0:	e001      	b.n	80049f6 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80049f2:	2302      	movs	r3, #2
 80049f4:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_ADC_Stop+0x16>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e022      	b.n	8004a5c <HAL_ADC_Stop+0x5c>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f9fc 	bl	8004e1c <ADC_ConversionStop>
 8004a24:	4603      	mov	r3, r0
 8004a26:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d111      	bne.n	8004a52 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fac0 	bl	8004fb4 <ADC_Disable>
 8004a34:	4603      	mov	r3, r0
 8004a36:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a46:	f023 0301 	bic.w	r3, r3, #1
 8004a4a:	f043 0201 	orr.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d102      	bne.n	8004a7c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004a76:	2308      	movs	r3, #8
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	e010      	b.n	8004a9e <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d007      	beq.n	8004a9a <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8e:	f043 0220 	orr.w	r2, r3, #32
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e077      	b.n	8004b8a <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004a9a:	2304      	movs	r3, #4
 8004a9c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004a9e:	f7fe fb33 	bl	8003108 <HAL_GetTick>
 8004aa2:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004aa4:	e021      	b.n	8004aea <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aac:	d01d      	beq.n	8004aea <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004aae:	f7fe fb2b 	bl	8003108 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d302      	bcc.n	8004ac4 <HAL_ADC_PollForConversion+0x60>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d112      	bne.n	8004aea <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4013      	ands	r3, r2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10b      	bne.n	8004aea <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad6:	f043 0204 	orr.w	r2, r3, #4
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e04f      	b.n	8004b8a <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4013      	ands	r3, r2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0d6      	beq.n	8004aa6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff fbd6 	bl	80042ba <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d031      	beq.n	8004b78 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	7e9b      	ldrb	r3, [r3, #26]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d12d      	bne.n	8004b78 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d126      	bne.n	8004b78 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff fcde 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d112      	bne.n	8004b60 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 020c 	bic.w	r2, r2, #12
 8004b48:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b52:	f023 0301 	bic.w	r3, r3, #1
 8004b56:	f043 0201 	orr.w	r2, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	659a      	str	r2, [r3, #88]	; 0x58
 8004b5e:	e00b      	b.n	8004b78 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b64:	f043 0220 	orr.w	r2, r3, #32
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b70:	f043 0201 	orr.w	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	7e1b      	ldrb	r3, [r3, #24]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d103      	bne.n	8004b88 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	220c      	movs	r2, #12
 8004b86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr
	...

08004bac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_ADC_ConfigChannel+0x28>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e110      	b.n	8004df6 <HAL_ADC_ConfigChannel+0x24a>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff fc85 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f040 80f7 	bne.w	8004ddc <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	f000 80b1 	beq.w	8004d5a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c00:	d004      	beq.n	8004c0c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004c06:	4a7e      	ldr	r2, [pc, #504]	; (8004e00 <HAL_ADC_ConfigChannel+0x254>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d108      	bne.n	8004c1e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4619      	mov	r1, r3
 8004c16:	4610      	mov	r0, r2
 8004c18:	f7ff fb82 	bl	8004320 <LL_ADC_REG_SetSequencerChAdd>
 8004c1c:	e041      	b.n	8004ca2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f003 031f 	and.w	r3, r3, #31
 8004c2a:	210f      	movs	r1, #15
 8004c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c30:	43db      	mvns	r3, r3
 8004c32:	401a      	ands	r2, r3
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d105      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0xa0>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	0e9b      	lsrs	r3, r3, #26
 8004c46:	f003 031f 	and.w	r3, r3, #31
 8004c4a:	e011      	b.n	8004c70 <HAL_ADC_ConfigChannel+0xc4>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	fa93 f3a3 	rbit	r3, r3
 8004c58:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004c64:	2320      	movs	r3, #32
 8004c66:	e003      	b.n	8004c70 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	fab3 f383 	clz	r3, r3
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	6839      	ldr	r1, [r7, #0]
 8004c72:	6849      	ldr	r1, [r1, #4]
 8004c74:	f001 011f 	and.w	r1, r1, #31
 8004c78:	408b      	lsls	r3, r1
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	089b      	lsrs	r3, r3, #2
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d808      	bhi.n	8004ca2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	6859      	ldr	r1, [r3, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f7ff fb1e 	bl	80042de <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6819      	ldr	r1, [r3, #0]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f7ff fb5b 	bl	800436a <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f280 8097 	bge.w	8004dec <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cbe:	4851      	ldr	r0, [pc, #324]	; (8004e04 <HAL_ADC_ConfigChannel+0x258>)
 8004cc0:	f7ff fab8 	bl	8004234 <LL_ADC_GetCommonPathInternalCh>
 8004cc4:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a4f      	ldr	r2, [pc, #316]	; (8004e08 <HAL_ADC_ConfigChannel+0x25c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d120      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d11b      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4848      	ldr	r0, [pc, #288]	; (8004e04 <HAL_ADC_ConfigChannel+0x258>)
 8004ce4:	f7ff fa94 	bl	8004210 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ce8:	4b48      	ldr	r3, [pc, #288]	; (8004e0c <HAL_ADC_ConfigChannel+0x260>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	099b      	lsrs	r3, r3, #6
 8004cee:	4a48      	ldr	r2, [pc, #288]	; (8004e10 <HAL_ADC_ConfigChannel+0x264>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	099b      	lsrs	r3, r3, #6
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004d02:	e002      	b.n	8004d0a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1f9      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004d10:	e06c      	b.n	8004dec <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a3f      	ldr	r2, [pc, #252]	; (8004e14 <HAL_ADC_ConfigChannel+0x268>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d10c      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x18a>
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d107      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4835      	ldr	r0, [pc, #212]	; (8004e04 <HAL_ADC_ConfigChannel+0x258>)
 8004d30:	f7ff fa6e 	bl	8004210 <LL_ADC_SetCommonPathInternalCh>
 8004d34:	e05a      	b.n	8004dec <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a37      	ldr	r2, [pc, #220]	; (8004e18 <HAL_ADC_ConfigChannel+0x26c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d155      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d150      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d50:	4619      	mov	r1, r3
 8004d52:	482c      	ldr	r0, [pc, #176]	; (8004e04 <HAL_ADC_ConfigChannel+0x258>)
 8004d54:	f7ff fa5c 	bl	8004210 <LL_ADC_SetCommonPathInternalCh>
 8004d58:	e048      	b.n	8004dec <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d62:	d004      	beq.n	8004d6e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004d68:	4a25      	ldr	r2, [pc, #148]	; (8004e00 <HAL_ADC_ConfigChannel+0x254>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d107      	bne.n	8004d7e <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4619      	mov	r1, r3
 8004d78:	4610      	mov	r0, r2
 8004d7a:	f7ff fae3 	bl	8004344 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	da32      	bge.n	8004dec <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d86:	481f      	ldr	r0, [pc, #124]	; (8004e04 <HAL_ADC_ConfigChannel+0x258>)
 8004d88:	f7ff fa54 	bl	8004234 <LL_ADC_GetCommonPathInternalCh>
 8004d8c:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a1d      	ldr	r2, [pc, #116]	; (8004e08 <HAL_ADC_ConfigChannel+0x25c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d107      	bne.n	8004da8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4818      	ldr	r0, [pc, #96]	; (8004e04 <HAL_ADC_ConfigChannel+0x258>)
 8004da2:	f7ff fa35 	bl	8004210 <LL_ADC_SetCommonPathInternalCh>
 8004da6:	e021      	b.n	8004dec <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a19      	ldr	r2, [pc, #100]	; (8004e14 <HAL_ADC_ConfigChannel+0x268>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d107      	bne.n	8004dc2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004db8:	4619      	mov	r1, r3
 8004dba:	4812      	ldr	r0, [pc, #72]	; (8004e04 <HAL_ADC_ConfigChannel+0x258>)
 8004dbc:	f7ff fa28 	bl	8004210 <LL_ADC_SetCommonPathInternalCh>
 8004dc0:	e014      	b.n	8004dec <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <HAL_ADC_ConfigChannel+0x26c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d10f      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	480b      	ldr	r0, [pc, #44]	; (8004e04 <HAL_ADC_ConfigChannel+0x258>)
 8004dd6:	f7ff fa1b 	bl	8004210 <LL_ADC_SetCommonPathInternalCh>
 8004dda:	e007      	b.n	8004dec <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de0:	f043 0220 	orr.w	r2, r3, #32
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004df4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	80000004 	.word	0x80000004
 8004e04:	40012708 	.word	0x40012708
 8004e08:	b0001000 	.word	0xb0001000
 8004e0c:	20000018 	.word	0x20000018
 8004e10:	053e2d63 	.word	0x053e2d63
 8004e14:	b8004000 	.word	0xb8004000
 8004e18:	b4002000 	.word	0xb4002000

08004e1c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff fb61 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d033      	beq.n	8004e9c <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff fb21 	bl	8004480 <LL_ADC_IsDisableOngoing>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d104      	bne.n	8004e4e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff fb3e 	bl	80044ca <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e4e:	f7fe f95b 	bl	8003108 <HAL_GetTick>
 8004e52:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004e54:	e01b      	b.n	8004e8e <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004e56:	f7fe f957 	bl	8003108 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d914      	bls.n	8004e8e <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00d      	beq.n	8004e8e <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	f043 0210 	orr.w	r2, r3, #16
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e82:	f043 0201 	orr.w	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e007      	b.n	8004e9e <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1dc      	bne.n	8004e56 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff facf 	bl	800445c <LL_ADC_IsEnabled>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d169      	bne.n	8004f98 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	4b36      	ldr	r3, [pc, #216]	; (8004fa4 <ADC_Enable+0xfc>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00d      	beq.n	8004eee <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed6:	f043 0210 	orr.w	r2, r3, #16
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee2:	f043 0201 	orr.w	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e055      	b.n	8004f9a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff fa8c 	bl	8004410 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004ef8:	482b      	ldr	r0, [pc, #172]	; (8004fa8 <ADC_Enable+0x100>)
 8004efa:	f7ff f99b 	bl	8004234 <LL_ADC_GetCommonPathInternalCh>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00f      	beq.n	8004f28 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f08:	4b28      	ldr	r3, [pc, #160]	; (8004fac <ADC_Enable+0x104>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	099b      	lsrs	r3, r3, #6
 8004f0e:	4a28      	ldr	r2, [pc, #160]	; (8004fb0 <ADC_Enable+0x108>)
 8004f10:	fba2 2303 	umull	r2, r3, r2, r3
 8004f14:	099b      	lsrs	r3, r3, #6
 8004f16:	3301      	adds	r3, #1
 8004f18:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004f1a:	e002      	b.n	8004f22 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1f9      	bne.n	8004f1c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	7e5b      	ldrb	r3, [r3, #25]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d033      	beq.n	8004f98 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004f30:	f7fe f8ea 	bl	8003108 <HAL_GetTick>
 8004f34:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f36:	e028      	b.n	8004f8a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff fa8d 	bl	800445c <LL_ADC_IsEnabled>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d104      	bne.n	8004f52 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff fa5f 	bl	8004410 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f52:	f7fe f8d9 	bl	8003108 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d914      	bls.n	8004f8a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d00d      	beq.n	8004f8a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f72:	f043 0210 	orr.w	r2, r3, #16
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7e:	f043 0201 	orr.w	r2, r3, #1
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e007      	b.n	8004f9a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d1cf      	bne.n	8004f38 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	80000017 	.word	0x80000017
 8004fa8:	40012708 	.word	0x40012708
 8004fac:	20000018 	.word	0x20000018
 8004fb0:	053e2d63 	.word	0x053e2d63

08004fb4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff fa5d 	bl	8004480 <LL_ADC_IsDisableOngoing>
 8004fc6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fa45 	bl	800445c <LL_ADC_IsEnabled>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d047      	beq.n	8005068 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d144      	bne.n	8005068 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 0305 	and.w	r3, r3, #5
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d10c      	bne.n	8005006 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff fa20 	bl	8004436 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ffe:	f7fe f883 	bl	8003108 <HAL_GetTick>
 8005002:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005004:	e029      	b.n	800505a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500a:	f043 0210 	orr.w	r2, r3, #16
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005016:	f043 0201 	orr.w	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e023      	b.n	800506a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005022:	f7fe f871 	bl	8003108 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d914      	bls.n	800505a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00d      	beq.n	800505a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005042:	f043 0210 	orr.w	r2, r3, #16
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504e:	f043 0201 	orr.w	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e007      	b.n	800506a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1dc      	bne.n	8005022 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <LL_ADC_SetCalibrationFactor>:
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005082:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr

0800509a <LL_ADC_GetCalibrationFactor>:
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr

080050b6 <LL_ADC_Enable>:
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050c6:	f023 0317 	bic.w	r3, r3, #23
 80050ca:	f043 0201 	orr.w	r2, r3, #1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	609a      	str	r2, [r3, #8]
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr

080050dc <LL_ADC_Disable>:
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050ec:	f023 0317 	bic.w	r3, r3, #23
 80050f0:	f043 0202 	orr.w	r2, r3, #2
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	609a      	str	r2, [r3, #8]
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr

08005102 <LL_ADC_IsEnabled>:
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <LL_ADC_IsEnabled+0x18>
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <LL_ADC_IsEnabled+0x1a>
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr

08005126 <LL_ADC_StartCalibration>:
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005136:	f023 0317 	bic.w	r3, r3, #23
 800513a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	609a      	str	r2, [r3, #8]
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr

0800514c <LL_ADC_IsCalibrationOnGoing>:
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800515c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005160:	d101      	bne.n	8005166 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr

08005172 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b088      	sub	sp, #32
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800517a:	2300      	movs	r3, #0
 800517c:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_ADCEx_Calibration_Start+0x1e>
 800518c:	2302      	movs	r3, #2
 800518e:	e0b9      	b.n	8005304 <HAL_ADCEx_Calibration_Start+0x192>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7ff ff0b 	bl	8004fb4 <ADC_Disable>
 800519e:	4603      	mov	r3, r0
 80051a0:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff ffab 	bl	8005102 <LL_ADC_IsEnabled>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f040 809d 	bne.w	80052ee <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80051bc:	f043 0202 	orr.w	r2, r3, #2
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	f248 0303 	movw	r3, #32771	; 0x8003
 80051ce:	4013      	ands	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051e0:	f023 0303 	bic.w	r3, r3, #3
 80051e4:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80051e6:	2300      	movs	r3, #0
 80051e8:	61fb      	str	r3, [r7, #28]
 80051ea:	e02e      	b.n	800524a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff ff98 	bl	8005126 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80051f6:	e014      	b.n	8005222 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	3301      	adds	r3, #1
 80051fc:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8005204:	d30d      	bcc.n	8005222 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520a:	f023 0312 	bic.w	r3, r3, #18
 800520e:	f043 0210 	orr.w	r2, r3, #16
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e070      	b.n	8005304 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff ff90 	bl	800514c <LL_ADC_IsCalibrationOnGoing>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e2      	bne.n	80051f8 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff ff2f 	bl	800509a <LL_ADC_GetCalibrationFactor>
 800523c:	4602      	mov	r2, r0
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	4413      	add	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	3301      	adds	r3, #1
 8005248:	61fb      	str	r3, [r7, #28]
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	2b07      	cmp	r3, #7
 800524e:	d9cd      	bls.n	80051ec <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff ff29 	bl	80050b6 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69b9      	ldr	r1, [r7, #24]
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff ff01 	bl	8005072 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff ff31 	bl	80050dc <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800527a:	f7fd ff45 	bl	8003108 <HAL_GetTick>
 800527e:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005280:	e01c      	b.n	80052bc <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005282:	f7fd ff41 	bl	8003108 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d915      	bls.n	80052bc <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff ff34 	bl	8005102 <LL_ADC_IsEnabled>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00d      	beq.n	80052bc <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a4:	f043 0210 	orr.w	r2, r3, #16
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b0:	f043 0201 	orr.w	r2, r3, #1
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e023      	b.n	8005304 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff ff1e 	bl	8005102 <LL_ADC_IsEnabled>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1da      	bne.n	8005282 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68d9      	ldr	r1, [r3, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	430a      	orrs	r2, r1
 80052da:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e0:	f023 0303 	bic.w	r3, r3, #3
 80052e4:	f043 0201 	orr.w	r2, r3, #1
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	659a      	str	r2, [r3, #88]	; 0x58
 80052ec:	e005      	b.n	80052fa <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f2:	f043 0210 	orr.w	r2, r3, #16
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8005302:	7dfb      	ldrb	r3, [r7, #23]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800531c:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <__NVIC_SetPriorityGrouping+0x44>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005328:	4013      	ands	r3, r2
 800532a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800533c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800533e:	4a04      	ldr	r2, [pc, #16]	; (8005350 <__NVIC_SetPriorityGrouping+0x44>)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	60d3      	str	r3, [r2, #12]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	e000ed00 	.word	0xe000ed00

08005354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005358:	4b04      	ldr	r3, [pc, #16]	; (800536c <__NVIC_GetPriorityGrouping+0x18>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	0a1b      	lsrs	r3, r3, #8
 800535e:	f003 0307 	and.w	r3, r3, #7
}
 8005362:	4618      	mov	r0, r3
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	e000ed00 	.word	0xe000ed00

08005370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800537a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800537e:	2b00      	cmp	r3, #0
 8005380:	db0b      	blt.n	800539a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	f003 021f 	and.w	r2, r3, #31
 8005388:	4906      	ldr	r1, [pc, #24]	; (80053a4 <__NVIC_EnableIRQ+0x34>)
 800538a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	2001      	movs	r0, #1
 8005392:	fa00 f202 	lsl.w	r2, r0, r2
 8005396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr
 80053a4:	e000e100 	.word	0xe000e100

080053a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	db12      	blt.n	80053e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	f003 021f 	and.w	r2, r3, #31
 80053c0:	490a      	ldr	r1, [pc, #40]	; (80053ec <__NVIC_DisableIRQ+0x44>)
 80053c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	2001      	movs	r0, #1
 80053ca:	fa00 f202 	lsl.w	r2, r0, r2
 80053ce:	3320      	adds	r3, #32
 80053d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80053d4:	f3bf 8f4f 	dsb	sy
}
 80053d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80053da:	f3bf 8f6f 	isb	sy
}
 80053de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	e000e100 	.word	0xe000e100

080053f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	6039      	str	r1, [r7, #0]
 80053fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005400:	2b00      	cmp	r3, #0
 8005402:	db0a      	blt.n	800541a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	b2da      	uxtb	r2, r3
 8005408:	490c      	ldr	r1, [pc, #48]	; (800543c <__NVIC_SetPriority+0x4c>)
 800540a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540e:	0112      	lsls	r2, r2, #4
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	440b      	add	r3, r1
 8005414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005418:	e00a      	b.n	8005430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	b2da      	uxtb	r2, r3
 800541e:	4908      	ldr	r1, [pc, #32]	; (8005440 <__NVIC_SetPriority+0x50>)
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	3b04      	subs	r3, #4
 8005428:	0112      	lsls	r2, r2, #4
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	440b      	add	r3, r1
 800542e:	761a      	strb	r2, [r3, #24]
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	bc80      	pop	{r7}
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	e000e100 	.word	0xe000e100
 8005440:	e000ed00 	.word	0xe000ed00

08005444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005444:	b480      	push	{r7}
 8005446:	b089      	sub	sp, #36	; 0x24
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	f1c3 0307 	rsb	r3, r3, #7
 800545e:	2b04      	cmp	r3, #4
 8005460:	bf28      	it	cs
 8005462:	2304      	movcs	r3, #4
 8005464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	3304      	adds	r3, #4
 800546a:	2b06      	cmp	r3, #6
 800546c:	d902      	bls.n	8005474 <NVIC_EncodePriority+0x30>
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	3b03      	subs	r3, #3
 8005472:	e000      	b.n	8005476 <NVIC_EncodePriority+0x32>
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005478:	f04f 32ff 	mov.w	r2, #4294967295
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	43da      	mvns	r2, r3
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	401a      	ands	r2, r3
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800548c:	f04f 31ff 	mov.w	r1, #4294967295
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	fa01 f303 	lsl.w	r3, r1, r3
 8005496:	43d9      	mvns	r1, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800549c:	4313      	orrs	r3, r2
         );
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3724      	adds	r7, #36	; 0x24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bc80      	pop	{r7}
 80054a6:	4770      	bx	lr

080054a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff ff2b 	bl	800530c <__NVIC_SetPriorityGrouping>
}
 80054b6:	bf00      	nop
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b086      	sub	sp, #24
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	4603      	mov	r3, r0
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054cc:	f7ff ff42 	bl	8005354 <__NVIC_GetPriorityGrouping>
 80054d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	68b9      	ldr	r1, [r7, #8]
 80054d6:	6978      	ldr	r0, [r7, #20]
 80054d8:	f7ff ffb4 	bl	8005444 <NVIC_EncodePriority>
 80054dc:	4602      	mov	r2, r0
 80054de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054e2:	4611      	mov	r1, r2
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff ff83 	bl	80053f0 <__NVIC_SetPriority>
}
 80054ea:	bf00      	nop
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b082      	sub	sp, #8
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	4603      	mov	r3, r0
 80054fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff ff35 	bl	8005370 <__NVIC_EnableIRQ>
}
 8005506:	bf00      	nop
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b082      	sub	sp, #8
 8005512:	af00      	add	r7, sp, #0
 8005514:	4603      	mov	r3, r0
 8005516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff ff43 	bl	80053a8 <__NVIC_DisableIRQ>
}
 8005522:	bf00      	nop
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e08e      	b.n	800565c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	4b47      	ldr	r3, [pc, #284]	; (8005664 <HAL_DMA_Init+0x138>)
 8005546:	429a      	cmp	r2, r3
 8005548:	d80f      	bhi.n	800556a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	4b45      	ldr	r3, [pc, #276]	; (8005668 <HAL_DMA_Init+0x13c>)
 8005552:	4413      	add	r3, r2
 8005554:	4a45      	ldr	r2, [pc, #276]	; (800566c <HAL_DMA_Init+0x140>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	091b      	lsrs	r3, r3, #4
 800555c:	009a      	lsls	r2, r3, #2
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a42      	ldr	r2, [pc, #264]	; (8005670 <HAL_DMA_Init+0x144>)
 8005566:	641a      	str	r2, [r3, #64]	; 0x40
 8005568:	e00e      	b.n	8005588 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	4b40      	ldr	r3, [pc, #256]	; (8005674 <HAL_DMA_Init+0x148>)
 8005572:	4413      	add	r3, r2
 8005574:	4a3d      	ldr	r2, [pc, #244]	; (800566c <HAL_DMA_Init+0x140>)
 8005576:	fba2 2303 	umull	r2, r3, r2, r3
 800557a:	091b      	lsrs	r3, r3, #4
 800557c:	009a      	lsls	r2, r3, #2
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a3c      	ldr	r2, [pc, #240]	; (8005678 <HAL_DMA_Init+0x14c>)
 8005586:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6812      	ldr	r2, [r2, #0]
 800559a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800559e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6819      	ldr	r1, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fb24 	bl	8005c28 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055e8:	d102      	bne.n	80055f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055fc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005606:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d010      	beq.n	8005632 <HAL_DMA_Init+0x106>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b04      	cmp	r3, #4
 8005616:	d80c      	bhi.n	8005632 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fb4d 	bl	8005cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800562e:	605a      	str	r2, [r3, #4]
 8005630:	e008      	b.n	8005644 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40020407 	.word	0x40020407
 8005668:	bffdfff8 	.word	0xbffdfff8
 800566c:	cccccccd 	.word	0xcccccccd
 8005670:	40020000 	.word	0x40020000
 8005674:	bffdfbf8 	.word	0xbffdfbf8
 8005678:	40020400 	.word	0x40020400

0800567c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e07b      	b.n	8005786 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0201 	bic.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	4b3a      	ldr	r3, [pc, #232]	; (8005790 <HAL_DMA_DeInit+0x114>)
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d80f      	bhi.n	80056ca <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	4b38      	ldr	r3, [pc, #224]	; (8005794 <HAL_DMA_DeInit+0x118>)
 80056b2:	4413      	add	r3, r2
 80056b4:	4a38      	ldr	r2, [pc, #224]	; (8005798 <HAL_DMA_DeInit+0x11c>)
 80056b6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ba:	091b      	lsrs	r3, r3, #4
 80056bc:	009a      	lsls	r2, r3, #2
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a35      	ldr	r2, [pc, #212]	; (800579c <HAL_DMA_DeInit+0x120>)
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40
 80056c8:	e00e      	b.n	80056e8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	4b33      	ldr	r3, [pc, #204]	; (80057a0 <HAL_DMA_DeInit+0x124>)
 80056d2:	4413      	add	r3, r2
 80056d4:	4a30      	ldr	r2, [pc, #192]	; (8005798 <HAL_DMA_DeInit+0x11c>)
 80056d6:	fba2 2303 	umull	r2, r3, r2, r3
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	009a      	lsls	r2, r3, #2
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a2f      	ldr	r2, [pc, #188]	; (80057a4 <HAL_DMA_DeInit+0x128>)
 80056e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f4:	f003 021c 	and.w	r2, r3, #28
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	2101      	movs	r1, #1
 80056fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005702:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fa8f 	bl	8005c28 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800571a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00f      	beq.n	8005744 <HAL_DMA_DeInit+0xc8>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b04      	cmp	r3, #4
 800572a:	d80b      	bhi.n	8005744 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 fac3 	bl	8005cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005736:	2200      	movs	r2, #0
 8005738:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005742:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40020407 	.word	0x40020407
 8005794:	bffdfff8 	.word	0xbffdfff8
 8005798:	cccccccd 	.word	0xcccccccd
 800579c:	40020000 	.word	0x40020000
 80057a0:	bffdfbf8 	.word	0xbffdfbf8
 80057a4:	40020400 	.word	0x40020400

080057a8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_DMA_Start_IT+0x20>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e069      	b.n	800589c <HAL_DMA_Start_IT+0xf4>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d155      	bne.n	8005888 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0201 	bic.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 f9d3 	bl	8005bac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580a:	2b00      	cmp	r3, #0
 800580c:	d008      	beq.n	8005820 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 020e 	orr.w	r2, r2, #14
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	e00f      	b.n	8005840 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0204 	bic.w	r2, r2, #4
 800582e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 020a 	orr.w	r2, r2, #10
 800583e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d007      	beq.n	800585e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800585c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005862:	2b00      	cmp	r3, #0
 8005864:	d007      	beq.n	8005876 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005874:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0201 	orr.w	r2, r2, #1
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	e008      	b.n	800589a <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2280      	movs	r2, #128	; 0x80
 800588c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800589a:	7dfb      	ldrb	r3, [r7, #23]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e04f      	b.n	8005956 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d008      	beq.n	80058d4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2204      	movs	r2, #4
 80058c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e040      	b.n	8005956 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 020e 	bic.w	r2, r2, #14
 80058e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0201 	bic.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005908:	f003 021c 	and.w	r2, r3, #28
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	2101      	movs	r1, #1
 8005912:	fa01 f202 	lsl.w	r2, r1, r2
 8005916:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005920:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00c      	beq.n	8005944 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005938:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005942:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr

08005960 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d005      	beq.n	8005984 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2204      	movs	r2, #4
 800597c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	73fb      	strb	r3, [r7, #15]
 8005982:	e047      	b.n	8005a14 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 020e 	bic.w	r2, r2, #14
 8005992:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0201 	bic.w	r2, r2, #1
 80059a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b8:	f003 021c 	and.w	r2, r3, #28
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	2101      	movs	r1, #1
 80059c2:	fa01 f202 	lsl.w	r2, r1, r2
 80059c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80059d0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00c      	beq.n	80059f4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80059f2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	4798      	blx	r3
    }
  }
  return status;
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3c:	f003 031c 	and.w	r3, r3, #28
 8005a40:	2204      	movs	r2, #4
 8005a42:	409a      	lsls	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4013      	ands	r3, r2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d027      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x7c>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f003 0304 	and.w	r3, r3, #4
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d022      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d107      	bne.n	8005a74 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0204 	bic.w	r2, r2, #4
 8005a72:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a78:	f003 021c 	and.w	r2, r3, #28
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	2104      	movs	r1, #4
 8005a82:	fa01 f202 	lsl.w	r2, r1, r2
 8005a86:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8081 	beq.w	8005b94 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005a9a:	e07b      	b.n	8005b94 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa0:	f003 031c 	and.w	r3, r3, #28
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	409a      	lsls	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d03d      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x10c>
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d038      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10b      	bne.n	8005ae0 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 020a 	bic.w	r2, r2, #10
 8005ad6:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	4b2e      	ldr	r3, [pc, #184]	; (8005ba0 <HAL_DMA_IRQHandler+0x180>)
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d909      	bls.n	8005b00 <HAL_DMA_IRQHandler+0xe0>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af0:	f003 031c 	and.w	r3, r3, #28
 8005af4:	4a2b      	ldr	r2, [pc, #172]	; (8005ba4 <HAL_DMA_IRQHandler+0x184>)
 8005af6:	2102      	movs	r1, #2
 8005af8:	fa01 f303 	lsl.w	r3, r1, r3
 8005afc:	6053      	str	r3, [r2, #4]
 8005afe:	e008      	b.n	8005b12 <HAL_DMA_IRQHandler+0xf2>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b04:	f003 031c 	and.w	r3, r3, #28
 8005b08:	4a27      	ldr	r2, [pc, #156]	; (8005ba8 <HAL_DMA_IRQHandler+0x188>)
 8005b0a:	2102      	movs	r1, #2
 8005b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b10:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d038      	beq.n	8005b94 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005b2a:	e033      	b.n	8005b94 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b30:	f003 031c 	and.w	r3, r3, #28
 8005b34:	2208      	movs	r2, #8
 8005b36:	409a      	lsls	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d02a      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x176>
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d025      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 020e 	bic.w	r2, r2, #14
 8005b58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5e:	f003 021c 	and.w	r2, r3, #28
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	2101      	movs	r1, #1
 8005b68:	fa01 f202 	lsl.w	r2, r1, r2
 8005b6c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d004      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
}
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40020080 	.word	0x40020080
 8005ba4:	40020400 	.word	0x40020400
 8005ba8:	40020000 	.word	0x40020000

08005bac <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005bc2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d004      	beq.n	8005bd6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005bd4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bda:	f003 021c 	and.w	r2, r3, #28
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	2101      	movs	r1, #1
 8005be4:	fa01 f202 	lsl.w	r2, r1, r2
 8005be8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	2b10      	cmp	r3, #16
 8005bf8:	d108      	bne.n	8005c0c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c0a:	e007      	b.n	8005c1c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	60da      	str	r2, [r3, #12]
}
 8005c1c:	bf00      	nop
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bc80      	pop	{r7}
 8005c24:	4770      	bx	lr
	...

08005c28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	461a      	mov	r2, r3
 8005c36:	4b1c      	ldr	r3, [pc, #112]	; (8005ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d813      	bhi.n	8005c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c40:	089b      	lsrs	r3, r3, #2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c48:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	3b08      	subs	r3, #8
 8005c58:	4a14      	ldr	r2, [pc, #80]	; (8005cac <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5e:	091b      	lsrs	r3, r3, #4
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	e011      	b.n	8005c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c68:	089b      	lsrs	r3, r3, #2
 8005c6a:	009a      	lsls	r2, r3, #2
 8005c6c:	4b10      	ldr	r3, [pc, #64]	; (8005cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8005c6e:	4413      	add	r3, r2
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	3b08      	subs	r3, #8
 8005c7c:	4a0b      	ldr	r2, [pc, #44]	; (8005cac <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c82:	091b      	lsrs	r3, r3, #4
 8005c84:	3307      	adds	r3, #7
 8005c86:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a0a      	ldr	r2, [pc, #40]	; (8005cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8005c8c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f003 031f 	and.w	r3, r3, #31
 8005c94:	2201      	movs	r2, #1
 8005c96:	409a      	lsls	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005c9c:	bf00      	nop
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bc80      	pop	{r7}
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40020407 	.word	0x40020407
 8005cac:	cccccccd 	.word	0xcccccccd
 8005cb0:	4002081c 	.word	0x4002081c
 8005cb4:	40020880 	.word	0x40020880

08005cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4b0a      	ldr	r3, [pc, #40]	; (8005cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a08      	ldr	r2, [pc, #32]	; (8005cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005cdc:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	409a      	lsls	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005cee:	bf00      	nop
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc80      	pop	{r7}
 8005cf6:	4770      	bx	lr
 8005cf8:	1000823f 	.word	0x1000823f
 8005cfc:	40020940 	.word	0x40020940

08005d00 <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d12b      	bne.n	8005d6e <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <HAL_DMAEx_ConfigMuxSync+0x24>
 8005d20:	2302      	movs	r3, #2
 8005d22:	e028      	b.n	8005d76 <HAL_DMAEx_ConfigMuxSync+0x76>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	04db      	lsls	r3, r3, #19
 8005d42:	431a      	orrs	r2, r3
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	7a1b      	ldrb	r3, [r3, #8]
 8005d4e:	041b      	lsls	r3, r3, #16
 8005d50:	431a      	orrs	r2, r3
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	7a5b      	ldrb	r3, [r3, #9]
 8005d56:	025b      	lsls	r3, r3, #9
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e003      	b.n	8005d76 <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2280      	movs	r2, #128	; 0x80
 8005d72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
  }
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bc80      	pop	{r7}
 8005d7e:	4770      	bx	lr

08005d80 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d92:	4013      	ands	r3, r2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01a      	beq.n	8005dce <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005da6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005db0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d022      	beq.n	8005e1c <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de0:	4013      	ands	r3, r2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d01a      	beq.n	8005e1c <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005df4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005dfe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	4798      	blx	r3
      }
    }
  }
}
 8005e1c:	bf00      	nop
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005e32:	4b1c      	ldr	r3, [pc, #112]	; (8005ea4 <HAL_FLASH_Program+0x80>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <HAL_FLASH_Program+0x1a>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e02d      	b.n	8005e9a <HAL_FLASH_Program+0x76>
 8005e3e:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <HAL_FLASH_Program+0x80>)
 8005e40:	2201      	movs	r2, #1
 8005e42:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e44:	4b17      	ldr	r3, [pc, #92]	; (8005ea4 <HAL_FLASH_Program+0x80>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005e4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e4e:	f000 f869 	bl	8005f24 <FLASH_WaitForLastOperation>
 8005e52:	4603      	mov	r3, r0
 8005e54:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005e56:	7dfb      	ldrb	r3, [r7, #23]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d11a      	bne.n	8005e92 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d105      	bne.n	8005e6e <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e66:	68b8      	ldr	r0, [r7, #8]
 8005e68:	f000 f8be 	bl	8005fe8 <FLASH_Program_DoubleWord>
 8005e6c:	e004      	b.n	8005e78 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	4619      	mov	r1, r3
 8005e72:	68b8      	ldr	r0, [r7, #8]
 8005e74:	f000 f8de 	bl	8006034 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005e78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e7c:	f000 f852 	bl	8005f24 <FLASH_WaitForLastOperation>
 8005e80:	4603      	mov	r3, r0
 8005e82:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005e84:	4b08      	ldr	r3, [pc, #32]	; (8005ea8 <HAL_FLASH_Program+0x84>)
 8005e86:	695a      	ldr	r2, [r3, #20]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	43db      	mvns	r3, r3
 8005e8c:	4906      	ldr	r1, [pc, #24]	; (8005ea8 <HAL_FLASH_Program+0x84>)
 8005e8e:	4013      	ands	r3, r2
 8005e90:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005e92:	4b04      	ldr	r3, [pc, #16]	; (8005ea4 <HAL_FLASH_Program+0x80>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000af0 	.word	0x20000af0
 8005ea8:	58004000 	.word	0x58004000

08005eac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005eb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <HAL_FLASH_Unlock+0x38>)
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	da0b      	bge.n	8005ed6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005ebe:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <HAL_FLASH_Unlock+0x38>)
 8005ec0:	4a09      	ldr	r2, [pc, #36]	; (8005ee8 <HAL_FLASH_Unlock+0x3c>)
 8005ec2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005ec4:	4b07      	ldr	r3, [pc, #28]	; (8005ee4 <HAL_FLASH_Unlock+0x38>)
 8005ec6:	4a09      	ldr	r2, [pc, #36]	; (8005eec <HAL_FLASH_Unlock+0x40>)
 8005ec8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005eca:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <HAL_FLASH_Unlock+0x38>)
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	da01      	bge.n	8005ed6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005ed6:	79fb      	ldrb	r3, [r7, #7]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bc80      	pop	{r7}
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	58004000 	.word	0x58004000
 8005ee8:	45670123 	.word	0x45670123
 8005eec:	cdef89ab 	.word	0xcdef89ab

08005ef0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005efa:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <HAL_FLASH_Lock+0x30>)
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	4a08      	ldr	r2, [pc, #32]	; (8005f20 <HAL_FLASH_Lock+0x30>)
 8005f00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f04:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8005f06:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <HAL_FLASH_Lock+0x30>)
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	db01      	blt.n	8005f12 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005f12:	79fb      	ldrb	r3, [r7, #7]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bc80      	pop	{r7}
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	58004000 	.word	0x58004000

08005f24 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005f2c:	f7fd f8ec 	bl	8003108 <HAL_GetTick>
 8005f30:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005f32:	e009      	b.n	8005f48 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005f34:	f7fd f8e8 	bl	8003108 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d801      	bhi.n	8005f48 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e047      	b.n	8005fd8 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005f48:	4b25      	ldr	r3, [pc, #148]	; (8005fe0 <FLASH_WaitForLastOperation+0xbc>)
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f54:	d0ee      	beq.n	8005f34 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005f56:	4b22      	ldr	r3, [pc, #136]	; (8005fe0 <FLASH_WaitForLastOperation+0xbc>)
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d002      	beq.n	8005f6c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005f66:	4b1e      	ldr	r3, [pc, #120]	; (8005fe0 <FLASH_WaitForLastOperation+0xbc>)
 8005f68:	2201      	movs	r2, #1
 8005f6a:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005f72:	4013      	ands	r3, r2
 8005f74:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d007      	beq.n	8005f90 <FLASH_WaitForLastOperation+0x6c>
 8005f80:	4b17      	ldr	r3, [pc, #92]	; (8005fe0 <FLASH_WaitForLastOperation+0xbc>)
 8005f82:	699a      	ldr	r2, [r3, #24]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005f8a:	4915      	ldr	r1, [pc, #84]	; (8005fe0 <FLASH_WaitForLastOperation+0xbc>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	618b      	str	r3, [r1, #24]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d004      	beq.n	8005fa4 <FLASH_WaitForLastOperation+0x80>
 8005f9a:	4a11      	ldr	r2, [pc, #68]	; (8005fe0 <FLASH_WaitForLastOperation+0xbc>)
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005fa2:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00e      	beq.n	8005fc8 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8005faa:	4a0e      	ldr	r2, [pc, #56]	; (8005fe4 <FLASH_WaitForLastOperation+0xc0>)
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e011      	b.n	8005fd8 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005fb4:	f7fd f8a8 	bl	8003108 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d801      	bhi.n	8005fc8 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e007      	b.n	8005fd8 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005fc8:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <FLASH_WaitForLastOperation+0xbc>)
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fd4:	d0ee      	beq.n	8005fb4 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	58004000 	.word	0x58004000
 8005fe4:	20000af0 	.word	0x20000af0

08005fe8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005ff4:	4b0e      	ldr	r3, [pc, #56]	; (8006030 <FLASH_Program_DoubleWord+0x48>)
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	4a0d      	ldr	r2, [pc, #52]	; (8006030 <FLASH_Program_DoubleWord+0x48>)
 8005ffa:	f043 0301 	orr.w	r3, r3, #1
 8005ffe:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006006:	f3bf 8f6f 	isb	sy
}
 800600a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800600c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	000a      	movs	r2, r1
 800601a:	2300      	movs	r3, #0
 800601c:	68f9      	ldr	r1, [r7, #12]
 800601e:	3104      	adds	r1, #4
 8006020:	4613      	mov	r3, r2
 8006022:	600b      	str	r3, [r1, #0]
}
 8006024:	bf00      	nop
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	bc80      	pop	{r7}
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	58004000 	.word	0x58004000

08006034 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8006034:	b480      	push	{r7}
 8006036:	b089      	sub	sp, #36	; 0x24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800603e:	2340      	movs	r3, #64	; 0x40
 8006040:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800604a:	4b18      	ldr	r3, [pc, #96]	; (80060ac <FLASH_Program_Fast+0x78>)
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	4a17      	ldr	r2, [pc, #92]	; (80060ac <FLASH_Program_Fast+0x78>)
 8006050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006054:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006056:	f3ef 8310 	mrs	r3, PRIMASK
 800605a:	60fb      	str	r3, [r7, #12]
  return(result);
 800605c:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800605e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006060:	b672      	cpsid	i
}
 8006062:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	3304      	adds	r3, #4
 8006070:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	3304      	adds	r3, #4
 8006076:	617b      	str	r3, [r7, #20]
    row_index--;
 8006078:	7ffb      	ldrb	r3, [r7, #31]
 800607a:	3b01      	subs	r3, #1
 800607c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800607e:	7ffb      	ldrb	r3, [r7, #31]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1ef      	bne.n	8006064 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8006084:	bf00      	nop
 8006086:	4b09      	ldr	r3, [pc, #36]	; (80060ac <FLASH_Program_Fast+0x78>)
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800608e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006092:	d0f8      	beq.n	8006086 <FLASH_Program_Fast+0x52>
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f383 8810 	msr	PRIMASK, r3
}
 800609e:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80060a0:	bf00      	nop
 80060a2:	3724      	adds	r7, #36	; 0x24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bc80      	pop	{r7}
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	58004000 	.word	0x58004000

080060b0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80060ba:	4b28      	ldr	r3, [pc, #160]	; (800615c <HAL_FLASHEx_Erase+0xac>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d101      	bne.n	80060c6 <HAL_FLASHEx_Erase+0x16>
 80060c2:	2302      	movs	r3, #2
 80060c4:	e046      	b.n	8006154 <HAL_FLASHEx_Erase+0xa4>
 80060c6:	4b25      	ldr	r3, [pc, #148]	; (800615c <HAL_FLASHEx_Erase+0xac>)
 80060c8:	2201      	movs	r2, #1
 80060ca:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80060cc:	4b23      	ldr	r3, [pc, #140]	; (800615c <HAL_FLASHEx_Erase+0xac>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80060d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80060d6:	f7ff ff25 	bl	8005f24 <FLASH_WaitForLastOperation>
 80060da:	4603      	mov	r3, r0
 80060dc:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80060de:	7bfb      	ldrb	r3, [r7, #15]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d133      	bne.n	800614c <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	d108      	bne.n	80060fe <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80060ec:	f000 f880 	bl	80061f0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80060f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80060f4:	f7ff ff16 	bl	8005f24 <FLASH_WaitForLastOperation>
 80060f8:	4603      	mov	r3, r0
 80060fa:	73fb      	strb	r3, [r7, #15]
 80060fc:	e024      	b.n	8006148 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	f04f 32ff 	mov.w	r2, #4294967295
 8006104:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	60bb      	str	r3, [r7, #8]
 800610c:	e012      	b.n	8006134 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800610e:	68b8      	ldr	r0, [r7, #8]
 8006110:	f000 f87e 	bl	8006210 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006114:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006118:	f7ff ff04 	bl	8005f24 <FLASH_WaitForLastOperation>
 800611c:	4603      	mov	r3, r0
 800611e:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8006120:	7bfb      	ldrb	r3, [r7, #15]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	601a      	str	r2, [r3, #0]
          break;
 800612c:	e00a      	b.n	8006144 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	3301      	adds	r3, #1
 8006132:	60bb      	str	r3, [r7, #8]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	4413      	add	r3, r2
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	429a      	cmp	r2, r3
 8006142:	d3e4      	bcc.n	800610e <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8006144:	f000 f8c0 	bl	80062c8 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006148:	f000 f87a 	bl	8006240 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800614c:	4b03      	ldr	r3, [pc, #12]	; (800615c <HAL_FLASHEx_Erase+0xac>)
 800614e:	2200      	movs	r2, #0
 8006150:	701a      	strb	r2, [r3, #0]

  return status;
 8006152:	7bfb      	ldrb	r3, [r7, #15]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	20000af0 	.word	0x20000af0

08006160 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006168:	4b1f      	ldr	r3, [pc, #124]	; (80061e8 <HAL_FLASHEx_Erase_IT+0x88>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <HAL_FLASHEx_Erase_IT+0x14>
 8006170:	2302      	movs	r3, #2
 8006172:	e034      	b.n	80061de <HAL_FLASHEx_Erase_IT+0x7e>
 8006174:	4b1c      	ldr	r3, [pc, #112]	; (80061e8 <HAL_FLASHEx_Erase_IT+0x88>)
 8006176:	2201      	movs	r2, #1
 8006178:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800617a:	4b1b      	ldr	r3, [pc, #108]	; (80061e8 <HAL_FLASHEx_Erase_IT+0x88>)
 800617c:	2200      	movs	r2, #0
 800617e:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a18      	ldr	r2, [pc, #96]	; (80061e8 <HAL_FLASHEx_Erase_IT+0x88>)
 8006186:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006188:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800618c:	f7ff feca 	bl	8005f24 <FLASH_WaitForLastOperation>
 8006190:	4603      	mov	r3, r0
 8006192:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800619a:	4b13      	ldr	r3, [pc, #76]	; (80061e8 <HAL_FLASHEx_Erase_IT+0x88>)
 800619c:	2200      	movs	r2, #0
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	e01c      	b.n	80061dc <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80061a2:	4b12      	ldr	r3, [pc, #72]	; (80061ec <HAL_FLASHEx_Erase_IT+0x8c>)
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	4a11      	ldr	r2, [pc, #68]	; (80061ec <HAL_FLASHEx_Erase_IT+0x8c>)
 80061a8:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80061ac:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d105      	bne.n	80061c2 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 80061b6:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <HAL_FLASHEx_Erase_IT+0x88>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 80061bc:	f000 f818 	bl	80061f0 <FLASH_MassErase>
 80061c0:	e00c      	b.n	80061dc <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	4a08      	ldr	r2, [pc, #32]	; (80061e8 <HAL_FLASHEx_Erase_IT+0x88>)
 80061c8:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	4a06      	ldr	r2, [pc, #24]	; (80061e8 <HAL_FLASHEx_Erase_IT+0x88>)
 80061d0:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 f81a 	bl	8006210 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000af0 	.word	0x20000af0
 80061ec:	58004000 	.word	0x58004000

080061f0 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80061f4:	4b05      	ldr	r3, [pc, #20]	; (800620c <FLASH_MassErase+0x1c>)
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	4a04      	ldr	r2, [pc, #16]	; (800620c <FLASH_MassErase+0x1c>)
 80061fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061fe:	f043 0304 	orr.w	r3, r3, #4
 8006202:	6153      	str	r3, [r2, #20]
#endif
}
 8006204:	bf00      	nop
 8006206:	46bd      	mov	sp, r7
 8006208:	bc80      	pop	{r7}
 800620a:	4770      	bx	lr
 800620c:	58004000 	.word	0x58004000

08006210 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8006218:	4b08      	ldr	r3, [pc, #32]	; (800623c <FLASH_PageErase+0x2c>)
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	4313      	orrs	r3, r2
 8006226:	4a05      	ldr	r2, [pc, #20]	; (800623c <FLASH_PageErase+0x2c>)
 8006228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800622c:	f043 0302 	orr.w	r3, r3, #2
 8006230:	6153      	str	r3, [r2, #20]
#endif
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	bc80      	pop	{r7}
 800623a:	4770      	bx	lr
 800623c:	58004000 	.word	0x58004000

08006240 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8006244:	4b1f      	ldr	r3, [pc, #124]	; (80062c4 <FLASH_FlushCaches+0x84>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800624c:	2b01      	cmp	r3, #1
 800624e:	d117      	bne.n	8006280 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006250:	4b1c      	ldr	r3, [pc, #112]	; (80062c4 <FLASH_FlushCaches+0x84>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a1b      	ldr	r2, [pc, #108]	; (80062c4 <FLASH_FlushCaches+0x84>)
 8006256:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800625a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800625c:	4b19      	ldr	r3, [pc, #100]	; (80062c4 <FLASH_FlushCaches+0x84>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a18      	ldr	r2, [pc, #96]	; (80062c4 <FLASH_FlushCaches+0x84>)
 8006262:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	4b16      	ldr	r3, [pc, #88]	; (80062c4 <FLASH_FlushCaches+0x84>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a15      	ldr	r2, [pc, #84]	; (80062c4 <FLASH_FlushCaches+0x84>)
 800626e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006272:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006274:	4b13      	ldr	r3, [pc, #76]	; (80062c4 <FLASH_FlushCaches+0x84>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a12      	ldr	r2, [pc, #72]	; (80062c4 <FLASH_FlushCaches+0x84>)
 800627a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800627e:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8006280:	4b10      	ldr	r3, [pc, #64]	; (80062c4 <FLASH_FlushCaches+0x84>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006288:	2b01      	cmp	r3, #1
 800628a:	d117      	bne.n	80062bc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800628c:	4b0d      	ldr	r3, [pc, #52]	; (80062c4 <FLASH_FlushCaches+0x84>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a0c      	ldr	r2, [pc, #48]	; (80062c4 <FLASH_FlushCaches+0x84>)
 8006292:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006296:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006298:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <FLASH_FlushCaches+0x84>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a09      	ldr	r2, [pc, #36]	; (80062c4 <FLASH_FlushCaches+0x84>)
 800629e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	4b07      	ldr	r3, [pc, #28]	; (80062c4 <FLASH_FlushCaches+0x84>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a06      	ldr	r2, [pc, #24]	; (80062c4 <FLASH_FlushCaches+0x84>)
 80062aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80062b0:	4b04      	ldr	r3, [pc, #16]	; (80062c4 <FLASH_FlushCaches+0x84>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a03      	ldr	r2, [pc, #12]	; (80062c4 <FLASH_FlushCaches+0x84>)
 80062b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062ba:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80062bc:	bf00      	nop
 80062be:	46bd      	mov	sp, r7
 80062c0:	bc80      	pop	{r7}
 80062c2:	4770      	bx	lr
 80062c4:	58004000 	.word	0x58004000

080062c8 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80062c8:	b480      	push	{r7}
 80062ca:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80062cc:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <FLASH_AcknowledgePageErase+0x1c>)
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	4a04      	ldr	r2, [pc, #16]	; (80062e4 <FLASH_AcknowledgePageErase+0x1c>)
 80062d2:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80062d6:	f023 0302 	bic.w	r3, r3, #2
 80062da:	6153      	str	r3, [r2, #20]
#endif
}
 80062dc:	bf00      	nop
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr
 80062e4:	58004000 	.word	0x58004000

080062e8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80062f2:	2300      	movs	r3, #0
 80062f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062f6:	e140      	b.n	800657a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	2101      	movs	r1, #1
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	fa01 f303 	lsl.w	r3, r1, r3
 8006304:	4013      	ands	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 8132 	beq.w	8006574 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f003 0303 	and.w	r3, r3, #3
 8006318:	2b01      	cmp	r3, #1
 800631a:	d005      	beq.n	8006328 <HAL_GPIO_Init+0x40>
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f003 0303 	and.w	r3, r3, #3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d130      	bne.n	800638a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	2203      	movs	r2, #3
 8006334:	fa02 f303 	lsl.w	r3, r2, r3
 8006338:	43db      	mvns	r3, r3
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4013      	ands	r3, r2
 800633e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	fa02 f303 	lsl.w	r3, r2, r3
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800635e:	2201      	movs	r2, #1
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	43db      	mvns	r3, r3
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4013      	ands	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	091b      	lsrs	r3, r3, #4
 8006374:	f003 0201 	and.w	r2, r3, #1
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	fa02 f303 	lsl.w	r3, r2, r3
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	4313      	orrs	r3, r2
 8006382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	2b03      	cmp	r3, #3
 8006394:	d017      	beq.n	80063c6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	2203      	movs	r2, #3
 80063a2:	fa02 f303 	lsl.w	r3, r2, r3
 80063a6:	43db      	mvns	r3, r3
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4013      	ands	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d123      	bne.n	800641a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	08da      	lsrs	r2, r3, #3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3208      	adds	r2, #8
 80063da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	220f      	movs	r2, #15
 80063ea:	fa02 f303 	lsl.w	r3, r2, r3
 80063ee:	43db      	mvns	r3, r3
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4013      	ands	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	691a      	ldr	r2, [r3, #16]
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	fa02 f303 	lsl.w	r3, r2, r3
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	4313      	orrs	r3, r2
 800640a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	08da      	lsrs	r2, r3, #3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3208      	adds	r2, #8
 8006414:	6939      	ldr	r1, [r7, #16]
 8006416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	2203      	movs	r2, #3
 8006426:	fa02 f303 	lsl.w	r3, r2, r3
 800642a:	43db      	mvns	r3, r3
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	4013      	ands	r3, r2
 8006430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f003 0203 	and.w	r2, r3, #3
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	fa02 f303 	lsl.w	r3, r2, r3
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 808c 	beq.w	8006574 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800645c:	4a4e      	ldr	r2, [pc, #312]	; (8006598 <HAL_GPIO_Init+0x2b0>)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	089b      	lsrs	r3, r3, #2
 8006462:	3302      	adds	r3, #2
 8006464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006468:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f003 0303 	and.w	r3, r3, #3
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	2207      	movs	r2, #7
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	43db      	mvns	r3, r3
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4013      	ands	r3, r2
 800647e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006486:	d00d      	beq.n	80064a4 <HAL_GPIO_Init+0x1bc>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a44      	ldr	r2, [pc, #272]	; (800659c <HAL_GPIO_Init+0x2b4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d007      	beq.n	80064a0 <HAL_GPIO_Init+0x1b8>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a43      	ldr	r2, [pc, #268]	; (80065a0 <HAL_GPIO_Init+0x2b8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d101      	bne.n	800649c <HAL_GPIO_Init+0x1b4>
 8006498:	2302      	movs	r3, #2
 800649a:	e004      	b.n	80064a6 <HAL_GPIO_Init+0x1be>
 800649c:	2307      	movs	r3, #7
 800649e:	e002      	b.n	80064a6 <HAL_GPIO_Init+0x1be>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e000      	b.n	80064a6 <HAL_GPIO_Init+0x1be>
 80064a4:	2300      	movs	r3, #0
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	f002 0203 	and.w	r2, r2, #3
 80064ac:	0092      	lsls	r2, r2, #2
 80064ae:	4093      	lsls	r3, r2
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80064b6:	4938      	ldr	r1, [pc, #224]	; (8006598 <HAL_GPIO_Init+0x2b0>)
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	089b      	lsrs	r3, r3, #2
 80064bc:	3302      	adds	r3, #2
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80064c4:	4b37      	ldr	r3, [pc, #220]	; (80065a4 <HAL_GPIO_Init+0x2bc>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	43db      	mvns	r3, r3
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4013      	ands	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80064e8:	4a2e      	ldr	r2, [pc, #184]	; (80065a4 <HAL_GPIO_Init+0x2bc>)
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80064ee:	4b2d      	ldr	r3, [pc, #180]	; (80065a4 <HAL_GPIO_Init+0x2bc>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	43db      	mvns	r3, r3
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4013      	ands	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006512:	4a24      	ldr	r2, [pc, #144]	; (80065a4 <HAL_GPIO_Init+0x2bc>)
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8006518:	4b22      	ldr	r3, [pc, #136]	; (80065a4 <HAL_GPIO_Init+0x2bc>)
 800651a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800651e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	43db      	mvns	r3, r3
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	4013      	ands	r3, r2
 8006528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4313      	orrs	r3, r2
 800653c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800653e:	4a19      	ldr	r2, [pc, #100]	; (80065a4 <HAL_GPIO_Init+0x2bc>)
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8006546:	4b17      	ldr	r3, [pc, #92]	; (80065a4 <HAL_GPIO_Init+0x2bc>)
 8006548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800654c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	43db      	mvns	r3, r3
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	4013      	ands	r3, r2
 8006556:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4313      	orrs	r3, r2
 800656a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800656c:	4a0d      	ldr	r2, [pc, #52]	; (80065a4 <HAL_GPIO_Init+0x2bc>)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	3301      	adds	r3, #1
 8006578:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	fa22 f303 	lsr.w	r3, r2, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	f47f aeb7 	bne.w	80062f8 <HAL_GPIO_Init+0x10>
  }
}
 800658a:	bf00      	nop
 800658c:	bf00      	nop
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	bc80      	pop	{r7}
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40010000 	.word	0x40010000
 800659c:	48000400 	.word	0x48000400
 80065a0:	48000800 	.word	0x48000800
 80065a4:	58000800 	.word	0x58000800

080065a8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80065b2:	2300      	movs	r3, #0
 80065b4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80065b6:	e0af      	b.n	8006718 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80065b8:	2201      	movs	r2, #1
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	fa02 f303 	lsl.w	r3, r2, r3
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	4013      	ands	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 80a2 	beq.w	8006712 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80065ce:	4a59      	ldr	r2, [pc, #356]	; (8006734 <HAL_GPIO_DeInit+0x18c>)
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	089b      	lsrs	r3, r3, #2
 80065d4:	3302      	adds	r3, #2
 80065d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065da:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	2207      	movs	r2, #7
 80065e6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	4013      	ands	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80065f6:	d00d      	beq.n	8006614 <HAL_GPIO_DeInit+0x6c>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a4f      	ldr	r2, [pc, #316]	; (8006738 <HAL_GPIO_DeInit+0x190>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d007      	beq.n	8006610 <HAL_GPIO_DeInit+0x68>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a4e      	ldr	r2, [pc, #312]	; (800673c <HAL_GPIO_DeInit+0x194>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d101      	bne.n	800660c <HAL_GPIO_DeInit+0x64>
 8006608:	2302      	movs	r3, #2
 800660a:	e004      	b.n	8006616 <HAL_GPIO_DeInit+0x6e>
 800660c:	2307      	movs	r3, #7
 800660e:	e002      	b.n	8006616 <HAL_GPIO_DeInit+0x6e>
 8006610:	2301      	movs	r3, #1
 8006612:	e000      	b.n	8006616 <HAL_GPIO_DeInit+0x6e>
 8006614:	2300      	movs	r3, #0
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	f002 0203 	and.w	r2, r2, #3
 800661c:	0092      	lsls	r2, r2, #2
 800661e:	4093      	lsls	r3, r2
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	429a      	cmp	r2, r3
 8006624:	d136      	bne.n	8006694 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8006626:	4b46      	ldr	r3, [pc, #280]	; (8006740 <HAL_GPIO_DeInit+0x198>)
 8006628:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	43db      	mvns	r3, r3
 8006630:	4943      	ldr	r1, [pc, #268]	; (8006740 <HAL_GPIO_DeInit+0x198>)
 8006632:	4013      	ands	r3, r2
 8006634:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8006638:	4b41      	ldr	r3, [pc, #260]	; (8006740 <HAL_GPIO_DeInit+0x198>)
 800663a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	43db      	mvns	r3, r3
 8006642:	493f      	ldr	r1, [pc, #252]	; (8006740 <HAL_GPIO_DeInit+0x198>)
 8006644:	4013      	ands	r3, r2
 8006646:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800664a:	4b3d      	ldr	r3, [pc, #244]	; (8006740 <HAL_GPIO_DeInit+0x198>)
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	43db      	mvns	r3, r3
 8006652:	493b      	ldr	r1, [pc, #236]	; (8006740 <HAL_GPIO_DeInit+0x198>)
 8006654:	4013      	ands	r3, r2
 8006656:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8006658:	4b39      	ldr	r3, [pc, #228]	; (8006740 <HAL_GPIO_DeInit+0x198>)
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	43db      	mvns	r3, r3
 8006660:	4937      	ldr	r1, [pc, #220]	; (8006740 <HAL_GPIO_DeInit+0x198>)
 8006662:	4013      	ands	r3, r2
 8006664:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	2207      	movs	r2, #7
 8006670:	fa02 f303 	lsl.w	r3, r2, r3
 8006674:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006676:	4a2f      	ldr	r2, [pc, #188]	; (8006734 <HAL_GPIO_DeInit+0x18c>)
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	089b      	lsrs	r3, r3, #2
 800667c:	3302      	adds	r3, #2
 800667e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	43da      	mvns	r2, r3
 8006686:	482b      	ldr	r0, [pc, #172]	; (8006734 <HAL_GPIO_DeInit+0x18c>)
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	089b      	lsrs	r3, r3, #2
 800668c:	400a      	ands	r2, r1
 800668e:	3302      	adds	r3, #2
 8006690:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	2103      	movs	r1, #3
 800669e:	fa01 f303 	lsl.w	r3, r1, r3
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	08da      	lsrs	r2, r3, #3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3208      	adds	r2, #8
 80066b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	220f      	movs	r2, #15
 80066be:	fa02 f303 	lsl.w	r3, r2, r3
 80066c2:	43db      	mvns	r3, r3
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	08d2      	lsrs	r2, r2, #3
 80066c8:	4019      	ands	r1, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	3208      	adds	r2, #8
 80066ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	2103      	movs	r1, #3
 80066dc:	fa01 f303 	lsl.w	r3, r1, r3
 80066e0:	43db      	mvns	r3, r3
 80066e2:	401a      	ands	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	2101      	movs	r1, #1
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	fa01 f303 	lsl.w	r3, r1, r3
 80066f4:	43db      	mvns	r3, r3
 80066f6:	401a      	ands	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	2103      	movs	r1, #3
 8006706:	fa01 f303 	lsl.w	r3, r1, r3
 800670a:	43db      	mvns	r3, r3
 800670c:	401a      	ands	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60da      	str	r2, [r3, #12]
    }

    position++;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	3301      	adds	r3, #1
 8006716:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	fa22 f303 	lsr.w	r3, r2, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	f47f af49 	bne.w	80065b8 <HAL_GPIO_DeInit+0x10>
  }
}
 8006726:	bf00      	nop
 8006728:	bf00      	nop
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	bc80      	pop	{r7}
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	40010000 	.word	0x40010000
 8006738:	48000400 	.word	0x48000400
 800673c:	48000800 	.word	0x48000800
 8006740:	58000800 	.word	0x58000800

08006744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	807b      	strh	r3, [r7, #2]
 8006750:	4613      	mov	r3, r2
 8006752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006754:	787b      	ldrb	r3, [r7, #1]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800675a:	887a      	ldrh	r2, [r7, #2]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006760:	e002      	b.n	8006768 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006762:	887a      	ldrh	r2, [r7, #2]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	bc80      	pop	{r7}
 8006770:	4770      	bx	lr

08006772 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006772:	b480      	push	{r7}
 8006774:	b085      	sub	sp, #20
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006784:	887a      	ldrh	r2, [r7, #2]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4013      	ands	r3, r2
 800678a:	041a      	lsls	r2, r3, #16
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	43d9      	mvns	r1, r3
 8006790:	887b      	ldrh	r3, [r7, #2]
 8006792:	400b      	ands	r3, r1
 8006794:	431a      	orrs	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	619a      	str	r2, [r3, #24]
}
 800679a:	bf00      	nop
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	bc80      	pop	{r7}
 80067a2:	4770      	bx	lr

080067a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e081      	b.n	80068ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d106      	bne.n	80067d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7fb fd3c 	bl	8002248 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2224      	movs	r2, #36	; 0x24
 80067d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0201 	bic.w	r2, r2, #1
 80067e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80067f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006804:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d107      	bne.n	800681e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689a      	ldr	r2, [r3, #8]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800681a:	609a      	str	r2, [r3, #8]
 800681c:	e006      	b.n	800682c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800682a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	2b02      	cmp	r3, #2
 8006832:	d104      	bne.n	800683e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800683c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6812      	ldr	r2, [r2, #0]
 8006848:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800684c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006850:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68da      	ldr	r2, [r3, #12]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006860:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691a      	ldr	r2, [r3, #16]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	69d9      	ldr	r1, [r3, #28]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1a      	ldr	r2, [r3, #32]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0201 	orr.w	r2, r2, #1
 800689a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af02      	add	r7, sp, #8
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	607a      	str	r2, [r7, #4]
 80068ce:	461a      	mov	r2, r3
 80068d0:	460b      	mov	r3, r1
 80068d2:	817b      	strh	r3, [r7, #10]
 80068d4:	4613      	mov	r3, r2
 80068d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b20      	cmp	r3, #32
 80068e2:	f040 80da 	bne.w	8006a9a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_I2C_Master_Transmit+0x30>
 80068f0:	2302      	movs	r3, #2
 80068f2:	e0d3      	b.n	8006a9c <HAL_I2C_Master_Transmit+0x1d8>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80068fc:	f7fc fc04 	bl	8003108 <HAL_GetTick>
 8006900:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	2319      	movs	r3, #25
 8006908:	2201      	movs	r2, #1
 800690a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f000 f9e5 	bl	8006cde <I2C_WaitOnFlagUntilTimeout>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e0be      	b.n	8006a9c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2221      	movs	r2, #33	; 0x21
 8006922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2210      	movs	r2, #16
 800692a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	893a      	ldrh	r2, [r7, #8]
 800693e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694a:	b29b      	uxth	r3, r3
 800694c:	2bff      	cmp	r3, #255	; 0xff
 800694e:	d90e      	bls.n	800696e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	22ff      	movs	r2, #255	; 0xff
 8006954:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695a:	b2da      	uxtb	r2, r3
 800695c:	8979      	ldrh	r1, [r7, #10]
 800695e:	4b51      	ldr	r3, [pc, #324]	; (8006aa4 <HAL_I2C_Master_Transmit+0x1e0>)
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 fbdc 	bl	8007124 <I2C_TransferConfig>
 800696c:	e06c      	b.n	8006a48 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800697c:	b2da      	uxtb	r2, r3
 800697e:	8979      	ldrh	r1, [r7, #10]
 8006980:	4b48      	ldr	r3, [pc, #288]	; (8006aa4 <HAL_I2C_Master_Transmit+0x1e0>)
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 fbcb 	bl	8007124 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800698e:	e05b      	b.n	8006a48 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	6a39      	ldr	r1, [r7, #32]
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 f9e2 	bl	8006d5e <I2C_WaitOnTXISFlagUntilTimeout>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e07b      	b.n	8006a9c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a8:	781a      	ldrb	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069be:	b29b      	uxth	r3, r3
 80069c0:	3b01      	subs	r3, #1
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d8:	b29b      	uxth	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d034      	beq.n	8006a48 <HAL_I2C_Master_Transmit+0x184>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d130      	bne.n	8006a48 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	2200      	movs	r2, #0
 80069ee:	2180      	movs	r1, #128	; 0x80
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 f974 	bl	8006cde <I2C_WaitOnFlagUntilTimeout>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e04d      	b.n	8006a9c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2bff      	cmp	r3, #255	; 0xff
 8006a08:	d90e      	bls.n	8006a28 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	22ff      	movs	r2, #255	; 0xff
 8006a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	8979      	ldrh	r1, [r7, #10]
 8006a18:	2300      	movs	r3, #0
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 fb7f 	bl	8007124 <I2C_TransferConfig>
 8006a26:	e00f      	b.n	8006a48 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	8979      	ldrh	r1, [r7, #10]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 fb6e 	bl	8007124 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d19e      	bne.n	8006990 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	6a39      	ldr	r1, [r7, #32]
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 f9c1 	bl	8006dde <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e01a      	b.n	8006a9c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6859      	ldr	r1, [r3, #4]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <HAL_I2C_Master_Transmit+0x1e4>)
 8006a7a:	400b      	ands	r3, r1
 8006a7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	e000      	b.n	8006a9c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006a9a:	2302      	movs	r3, #2
  }
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	80002000 	.word	0x80002000
 8006aa8:	fe00e800 	.word	0xfe00e800

08006aac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b088      	sub	sp, #32
 8006ab0:	af02      	add	r7, sp, #8
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	607a      	str	r2, [r7, #4]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	460b      	mov	r3, r1
 8006aba:	817b      	strh	r3, [r7, #10]
 8006abc:	4613      	mov	r3, r2
 8006abe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b20      	cmp	r3, #32
 8006aca:	f040 80db 	bne.w	8006c84 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d101      	bne.n	8006adc <HAL_I2C_Master_Receive+0x30>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	e0d4      	b.n	8006c86 <HAL_I2C_Master_Receive+0x1da>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ae4:	f7fc fb10 	bl	8003108 <HAL_GetTick>
 8006ae8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	2319      	movs	r3, #25
 8006af0:	2201      	movs	r2, #1
 8006af2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 f8f1 	bl	8006cde <I2C_WaitOnFlagUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e0bf      	b.n	8006c86 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2222      	movs	r2, #34	; 0x22
 8006b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2210      	movs	r2, #16
 8006b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	893a      	ldrh	r2, [r7, #8]
 8006b26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	2bff      	cmp	r3, #255	; 0xff
 8006b36:	d90e      	bls.n	8006b56 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	22ff      	movs	r2, #255	; 0xff
 8006b3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	8979      	ldrh	r1, [r7, #10]
 8006b46:	4b52      	ldr	r3, [pc, #328]	; (8006c90 <HAL_I2C_Master_Receive+0x1e4>)
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 fae8 	bl	8007124 <I2C_TransferConfig>
 8006b54:	e06d      	b.n	8006c32 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	8979      	ldrh	r1, [r7, #10]
 8006b68:	4b49      	ldr	r3, [pc, #292]	; (8006c90 <HAL_I2C_Master_Receive+0x1e4>)
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 fad7 	bl	8007124 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006b76:	e05c      	b.n	8006c32 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	6a39      	ldr	r1, [r7, #32]
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 f96b 	bl	8006e58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e07c      	b.n	8006c86 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d034      	beq.n	8006c32 <HAL_I2C_Master_Receive+0x186>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d130      	bne.n	8006c32 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	6a3b      	ldr	r3, [r7, #32]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2180      	movs	r1, #128	; 0x80
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 f87f 	bl	8006cde <I2C_WaitOnFlagUntilTimeout>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e04d      	b.n	8006c86 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	2bff      	cmp	r3, #255	; 0xff
 8006bf2:	d90e      	bls.n	8006c12 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	22ff      	movs	r2, #255	; 0xff
 8006bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	8979      	ldrh	r1, [r7, #10]
 8006c02:	2300      	movs	r3, #0
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 fa8a 	bl	8007124 <I2C_TransferConfig>
 8006c10:	e00f      	b.n	8006c32 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	8979      	ldrh	r1, [r7, #10]
 8006c24:	2300      	movs	r3, #0
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 fa79 	bl	8007124 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d19d      	bne.n	8006b78 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	6a39      	ldr	r1, [r7, #32]
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 f8cc 	bl	8006dde <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e01a      	b.n	8006c86 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2220      	movs	r2, #32
 8006c56:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6859      	ldr	r1, [r3, #4]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <HAL_I2C_Master_Receive+0x1e8>)
 8006c64:	400b      	ands	r3, r1
 8006c66:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c80:	2300      	movs	r3, #0
 8006c82:	e000      	b.n	8006c86 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006c84:	2302      	movs	r3, #2
  }
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	80002400 	.word	0x80002400
 8006c94:	fe00e800 	.word	0xfe00e800

08006c98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d103      	bne.n	8006cb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d007      	beq.n	8006cd4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	699a      	ldr	r2, [r3, #24]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0201 	orr.w	r2, r2, #1
 8006cd2:	619a      	str	r2, [r3, #24]
  }
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bc80      	pop	{r7}
 8006cdc:	4770      	bx	lr

08006cde <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b084      	sub	sp, #16
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	60b9      	str	r1, [r7, #8]
 8006ce8:	603b      	str	r3, [r7, #0]
 8006cea:	4613      	mov	r3, r2
 8006cec:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cee:	e022      	b.n	8006d36 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf6:	d01e      	beq.n	8006d36 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cf8:	f7fc fa06 	bl	8003108 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d302      	bcc.n	8006d0e <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d113      	bne.n	8006d36 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d12:	f043 0220 	orr.w	r2, r3, #32
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e00f      	b.n	8006d56 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	699a      	ldr	r2, [r3, #24]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4013      	ands	r3, r2
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	bf0c      	ite	eq
 8006d46:	2301      	moveq	r3, #1
 8006d48:	2300      	movne	r3, #0
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	79fb      	ldrb	r3, [r7, #7]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d0cd      	beq.n	8006cf0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d6a:	e02c      	b.n	8006dc6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	68b9      	ldr	r1, [r7, #8]
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 f8eb 	bl	8006f4c <I2C_IsErrorOccurred>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e02a      	b.n	8006dd6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d86:	d01e      	beq.n	8006dc6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d88:	f7fc f9be 	bl	8003108 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d302      	bcc.n	8006d9e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d113      	bne.n	8006dc6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da2:	f043 0220 	orr.w	r2, r3, #32
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e007      	b.n	8006dd6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d1cb      	bne.n	8006d6c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	60f8      	str	r0, [r7, #12]
 8006de6:	60b9      	str	r1, [r7, #8]
 8006de8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dea:	e028      	b.n	8006e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	68b9      	ldr	r1, [r7, #8]
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 f8ab 	bl	8006f4c <I2C_IsErrorOccurred>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e026      	b.n	8006e4e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e00:	f7fc f982 	bl	8003108 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d302      	bcc.n	8006e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d113      	bne.n	8006e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1a:	f043 0220 	orr.w	r2, r3, #32
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e007      	b.n	8006e4e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	f003 0320 	and.w	r3, r3, #32
 8006e48:	2b20      	cmp	r3, #32
 8006e4a:	d1cf      	bne.n	8006dec <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
	...

08006e58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e64:	e064      	b.n	8006f30 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	68b9      	ldr	r1, [r7, #8]
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 f86e 	bl	8006f4c <I2C_IsErrorOccurred>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e062      	b.n	8006f40 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	f003 0320 	and.w	r3, r3, #32
 8006e84:	2b20      	cmp	r3, #32
 8006e86:	d138      	bne.n	8006efa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	f003 0304 	and.w	r3, r3, #4
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d105      	bne.n	8006ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e04e      	b.n	8006f40 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	f003 0310 	and.w	r3, r3, #16
 8006eac:	2b10      	cmp	r3, #16
 8006eae:	d107      	bne.n	8006ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2210      	movs	r2, #16
 8006eb6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2204      	movs	r2, #4
 8006ebc:	645a      	str	r2, [r3, #68]	; 0x44
 8006ebe:	e002      	b.n	8006ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6859      	ldr	r1, [r3, #4]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	4b1b      	ldr	r3, [pc, #108]	; (8006f48 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006eda:	400b      	ands	r3, r1
 8006edc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e022      	b.n	8006f40 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006efa:	f7fc f905 	bl	8003108 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d302      	bcc.n	8006f10 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10f      	bne.n	8006f30 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f14:	f043 0220 	orr.w	r2, r3, #32
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e007      	b.n	8006f40 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	f003 0304 	and.w	r3, r3, #4
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d193      	bne.n	8006e66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	fe00e800 	.word	0xfe00e800

08006f4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b08a      	sub	sp, #40	; 0x28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	f003 0310 	and.w	r3, r3, #16
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d075      	beq.n	8007064 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2210      	movs	r2, #16
 8006f7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f80:	e056      	b.n	8007030 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f88:	d052      	beq.n	8007030 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f8a:	f7fc f8bd 	bl	8003108 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d302      	bcc.n	8006fa0 <I2C_IsErrorOccurred+0x54>
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d147      	bne.n	8007030 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006faa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fc2:	d12e      	bne.n	8007022 <I2C_IsErrorOccurred+0xd6>
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fca:	d02a      	beq.n	8007022 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006fcc:	7cfb      	ldrb	r3, [r7, #19]
 8006fce:	2b20      	cmp	r3, #32
 8006fd0:	d027      	beq.n	8007022 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fe0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006fe2:	f7fc f891 	bl	8003108 <HAL_GetTick>
 8006fe6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fe8:	e01b      	b.n	8007022 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006fea:	f7fc f88d 	bl	8003108 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	2b19      	cmp	r3, #25
 8006ff6:	d914      	bls.n	8007022 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ffc:	f043 0220 	orr.w	r2, r3, #32
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2220      	movs	r2, #32
 8007008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	f003 0320 	and.w	r3, r3, #32
 800702c:	2b20      	cmp	r3, #32
 800702e:	d1dc      	bne.n	8006fea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	f003 0320 	and.w	r3, r3, #32
 800703a:	2b20      	cmp	r3, #32
 800703c:	d003      	beq.n	8007046 <I2C_IsErrorOccurred+0xfa>
 800703e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007042:	2b00      	cmp	r3, #0
 8007044:	d09d      	beq.n	8006f82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800704a:	2b00      	cmp	r3, #0
 800704c:	d103      	bne.n	8007056 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2220      	movs	r2, #32
 8007054:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	f043 0304 	orr.w	r3, r3, #4
 800705c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00b      	beq.n	800708e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	f043 0301 	orr.w	r3, r3, #1
 800707c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007086:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00b      	beq.n	80070b0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	f043 0308 	orr.w	r3, r3, #8
 800709e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00b      	beq.n	80070d2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	f043 0302 	orr.w	r3, r3, #2
 80070c0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80070d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d01c      	beq.n	8007114 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f7ff fddc 	bl	8006c98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6859      	ldr	r1, [r3, #4]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	4b0d      	ldr	r3, [pc, #52]	; (8007120 <I2C_IsErrorOccurred+0x1d4>)
 80070ec:	400b      	ands	r3, r1
 80070ee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	431a      	orrs	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007118:	4618      	mov	r0, r3
 800711a:	3728      	adds	r7, #40	; 0x28
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	fe00e800 	.word	0xfe00e800

08007124 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	607b      	str	r3, [r7, #4]
 800712e:	460b      	mov	r3, r1
 8007130:	817b      	strh	r3, [r7, #10]
 8007132:	4613      	mov	r3, r2
 8007134:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007136:	897b      	ldrh	r3, [r7, #10]
 8007138:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800713c:	7a7b      	ldrb	r3, [r7, #9]
 800713e:	041b      	lsls	r3, r3, #16
 8007140:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007144:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	4313      	orrs	r3, r2
 800714e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007152:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	0d5b      	lsrs	r3, r3, #21
 800715e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007162:	4b07      	ldr	r3, [pc, #28]	; (8007180 <I2C_TransferConfig+0x5c>)
 8007164:	430b      	orrs	r3, r1
 8007166:	43db      	mvns	r3, r3
 8007168:	ea02 0103 	and.w	r1, r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	430a      	orrs	r2, r1
 8007174:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007176:	bf00      	nop
 8007178:	371c      	adds	r7, #28
 800717a:	46bd      	mov	sp, r7
 800717c:	bc80      	pop	{r7}
 800717e:	4770      	bx	lr
 8007180:	03ff63ff 	.word	0x03ff63ff

08007184 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b20      	cmp	r3, #32
 8007198:	d138      	bne.n	800720c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d101      	bne.n	80071a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80071a4:	2302      	movs	r3, #2
 80071a6:	e032      	b.n	800720e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2224      	movs	r2, #36	; 0x24
 80071b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0201 	bic.w	r2, r2, #1
 80071c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6819      	ldr	r1, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f042 0201 	orr.w	r2, r2, #1
 80071f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2220      	movs	r2, #32
 80071fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007208:	2300      	movs	r3, #0
 800720a:	e000      	b.n	800720e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800720c:	2302      	movs	r3, #2
  }
}
 800720e:	4618      	mov	r0, r3
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	bc80      	pop	{r7}
 8007216:	4770      	bx	lr

08007218 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b20      	cmp	r3, #32
 800722c:	d139      	bne.n	80072a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007238:	2302      	movs	r3, #2
 800723a:	e033      	b.n	80072a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2224      	movs	r2, #36	; 0x24
 8007248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0201 	bic.w	r2, r2, #1
 800725a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800726a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	021b      	lsls	r3, r3, #8
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	4313      	orrs	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f042 0201 	orr.w	r2, r2, #1
 800728c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2220      	movs	r2, #32
 8007292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	e000      	b.n	80072a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80072a2:	2302      	movs	r3, #2
  }
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bc80      	pop	{r7}
 80072ac:	4770      	bx	lr
	...

080072b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80072b0:	b480      	push	{r7}
 80072b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072b4:	4b04      	ldr	r3, [pc, #16]	; (80072c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a03      	ldr	r2, [pc, #12]	; (80072c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80072ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072be:	6013      	str	r3, [r2, #0]
}
 80072c0:	bf00      	nop
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bc80      	pop	{r7}
 80072c6:	4770      	bx	lr
 80072c8:	58000400 	.word	0x58000400

080072cc <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	460b      	mov	r3, r1
 80072d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10c      	bne.n	80072f8 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80072de:	4b13      	ldr	r3, [pc, #76]	; (800732c <HAL_PWR_EnterSLEEPMode+0x60>)
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ea:	d10d      	bne.n	8007308 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80072ec:	f000 f83c 	bl	8007368 <HAL_PWREx_DisableLowPowerRunMode>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d008      	beq.n	8007308 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80072f6:	e015      	b.n	8007324 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80072f8:	4b0c      	ldr	r3, [pc, #48]	; (800732c <HAL_PWR_EnterSLEEPMode+0x60>)
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8007304:	f000 f822 	bl	800734c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007308:	4b09      	ldr	r3, [pc, #36]	; (8007330 <HAL_PWR_EnterSLEEPMode+0x64>)
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	4a08      	ldr	r2, [pc, #32]	; (8007330 <HAL_PWR_EnterSLEEPMode+0x64>)
 800730e:	f023 0304 	bic.w	r3, r3, #4
 8007312:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d101      	bne.n	800731e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800731a:	bf30      	wfi
 800731c:	e002      	b.n	8007324 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800731e:	bf40      	sev
    __WFE();
 8007320:	bf20      	wfe
    __WFE();
 8007322:	bf20      	wfe
  }
}
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	58000400 	.word	0x58000400
 8007330:	e000ed00 	.word	0xe000ed00

08007334 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007334:	b480      	push	{r7}
 8007336:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007338:	4b03      	ldr	r3, [pc, #12]	; (8007348 <HAL_PWREx_GetVoltageRange+0x14>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007340:	4618      	mov	r0, r3
 8007342:	46bd      	mov	sp, r7
 8007344:	bc80      	pop	{r7}
 8007346:	4770      	bx	lr
 8007348:	58000400 	.word	0x58000400

0800734c <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8007350:	4b04      	ldr	r3, [pc, #16]	; (8007364 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a03      	ldr	r2, [pc, #12]	; (8007364 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8007356:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800735a:	6013      	str	r3, [r2, #0]
}
 800735c:	bf00      	nop
 800735e:	46bd      	mov	sp, r7
 8007360:	bc80      	pop	{r7}
 8007362:	4770      	bx	lr
 8007364:	58000400 	.word	0x58000400

08007368 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800736e:	4b16      	ldr	r3, [pc, #88]	; (80073c8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a15      	ldr	r2, [pc, #84]	; (80073c8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8007374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007378:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800737a:	4b14      	ldr	r3, [pc, #80]	; (80073cc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2232      	movs	r2, #50	; 0x32
 8007380:	fb02 f303 	mul.w	r3, r2, r3
 8007384:	4a12      	ldr	r2, [pc, #72]	; (80073d0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8007386:	fba2 2303 	umull	r2, r3, r2, r3
 800738a:	0c9b      	lsrs	r3, r3, #18
 800738c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800738e:	e002      	b.n	8007396 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	3b01      	subs	r3, #1
 8007394:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8007396:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800739e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073a2:	d102      	bne.n	80073aa <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1f2      	bne.n	8007390 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80073aa:	4b07      	ldr	r3, [pc, #28]	; (80073c8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073b6:	d101      	bne.n	80073bc <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e000      	b.n	80073be <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bc80      	pop	{r7}
 80073c6:	4770      	bx	lr
 80073c8:	58000400 	.word	0x58000400
 80073cc:	20000018 	.word	0x20000018
 80073d0:	431bde83 	.word	0x431bde83

080073d4 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	4603      	mov	r3, r0
 80073dc:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80073de:	4b10      	ldr	r3, [pc, #64]	; (8007420 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f023 0307 	bic.w	r3, r3, #7
 80073e6:	4a0e      	ldr	r2, [pc, #56]	; (8007420 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80073e8:	f043 0302 	orr.w	r3, r3, #2
 80073ec:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80073ee:	4b0d      	ldr	r3, [pc, #52]	; (8007424 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	4a0c      	ldr	r2, [pc, #48]	; (8007424 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80073f4:	f043 0304 	orr.w	r3, r3, #4
 80073f8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d101      	bne.n	8007404 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8007400:	bf30      	wfi
 8007402:	e002      	b.n	800740a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007404:	bf40      	sev
    __WFE();
 8007406:	bf20      	wfe
    __WFE();
 8007408:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800740a:	4b06      	ldr	r3, [pc, #24]	; (8007424 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	4a05      	ldr	r2, [pc, #20]	; (8007424 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8007410:	f023 0304 	bic.w	r3, r3, #4
 8007414:	6113      	str	r3, [r2, #16]
}
 8007416:	bf00      	nop
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	bc80      	pop	{r7}
 800741e:	4770      	bx	lr
 8007420:	58000400 	.word	0x58000400
 8007424:	e000ed00 	.word	0xe000ed00

08007428 <LL_PWR_IsEnabledBkUpAccess>:
{
 8007428:	b480      	push	{r7}
 800742a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800742c:	4b06      	ldr	r3, [pc, #24]	; (8007448 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007438:	d101      	bne.n	800743e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	46bd      	mov	sp, r7
 8007444:	bc80      	pop	{r7}
 8007446:	4770      	bx	lr
 8007448:	58000400 	.word	0x58000400

0800744c <LL_RCC_HSE_EnableTcxo>:
{
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8007450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800745a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800745e:	6013      	str	r3, [r2, #0]
}
 8007460:	bf00      	nop
 8007462:	46bd      	mov	sp, r7
 8007464:	bc80      	pop	{r7}
 8007466:	4770      	bx	lr

08007468 <LL_RCC_HSE_DisableTcxo>:
{
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800746c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007476:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800747a:	6013      	str	r3, [r2, #0]
}
 800747c:	bf00      	nop
 800747e:	46bd      	mov	sp, r7
 8007480:	bc80      	pop	{r7}
 8007482:	4770      	bx	lr

08007484 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007496:	d101      	bne.n	800749c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007498:	2301      	movs	r3, #1
 800749a:	e000      	b.n	800749e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bc80      	pop	{r7}
 80074a4:	4770      	bx	lr

080074a6 <LL_RCC_HSE_Enable>:
{
 80074a6:	b480      	push	{r7}
 80074a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80074aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074b8:	6013      	str	r3, [r2, #0]
}
 80074ba:	bf00      	nop
 80074bc:	46bd      	mov	sp, r7
 80074be:	bc80      	pop	{r7}
 80074c0:	4770      	bx	lr

080074c2 <LL_RCC_HSE_Disable>:
{
 80074c2:	b480      	push	{r7}
 80074c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80074c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074d4:	6013      	str	r3, [r2, #0]
}
 80074d6:	bf00      	nop
 80074d8:	46bd      	mov	sp, r7
 80074da:	bc80      	pop	{r7}
 80074dc:	4770      	bx	lr

080074de <LL_RCC_HSE_IsReady>:
{
 80074de:	b480      	push	{r7}
 80074e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80074e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074f0:	d101      	bne.n	80074f6 <LL_RCC_HSE_IsReady+0x18>
 80074f2:	2301      	movs	r3, #1
 80074f4:	e000      	b.n	80074f8 <LL_RCC_HSE_IsReady+0x1a>
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bc80      	pop	{r7}
 80074fe:	4770      	bx	lr

08007500 <LL_RCC_HSI_Enable>:
{
 8007500:	b480      	push	{r7}
 8007502:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800750e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007512:	6013      	str	r3, [r2, #0]
}
 8007514:	bf00      	nop
 8007516:	46bd      	mov	sp, r7
 8007518:	bc80      	pop	{r7}
 800751a:	4770      	bx	lr

0800751c <LL_RCC_HSI_Disable>:
{
 800751c:	b480      	push	{r7}
 800751e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800752a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800752e:	6013      	str	r3, [r2, #0]
}
 8007530:	bf00      	nop
 8007532:	46bd      	mov	sp, r7
 8007534:	bc80      	pop	{r7}
 8007536:	4770      	bx	lr

08007538 <LL_RCC_HSI_IsReady>:
{
 8007538:	b480      	push	{r7}
 800753a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800753c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800754a:	d101      	bne.n	8007550 <LL_RCC_HSI_IsReady+0x18>
 800754c:	2301      	movs	r3, #1
 800754e:	e000      	b.n	8007552 <LL_RCC_HSI_IsReady+0x1a>
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	46bd      	mov	sp, r7
 8007556:	bc80      	pop	{r7}
 8007558:	4770      	bx	lr

0800755a <LL_RCC_HSI_SetCalibTrimming>:
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	061b      	lsls	r3, r3, #24
 8007570:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007574:	4313      	orrs	r3, r2
 8007576:	604b      	str	r3, [r1, #4]
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	bc80      	pop	{r7}
 8007580:	4770      	bx	lr

08007582 <LL_RCC_LSE_IsReady>:
{
 8007582:	b480      	push	{r7}
 8007584:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800758a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800758e:	f003 0302 	and.w	r3, r3, #2
 8007592:	2b02      	cmp	r3, #2
 8007594:	d101      	bne.n	800759a <LL_RCC_LSE_IsReady+0x18>
 8007596:	2301      	movs	r3, #1
 8007598:	e000      	b.n	800759c <LL_RCC_LSE_IsReady+0x1a>
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	46bd      	mov	sp, r7
 80075a0:	bc80      	pop	{r7}
 80075a2:	4770      	bx	lr

080075a4 <LL_RCC_LSI_Enable>:
{
 80075a4:	b480      	push	{r7}
 80075a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80075a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075b4:	f043 0301 	orr.w	r3, r3, #1
 80075b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80075bc:	bf00      	nop
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr

080075c4 <LL_RCC_LSI_Disable>:
{
 80075c4:	b480      	push	{r7}
 80075c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80075c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075d4:	f023 0301 	bic.w	r3, r3, #1
 80075d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80075dc:	bf00      	nop
 80075de:	46bd      	mov	sp, r7
 80075e0:	bc80      	pop	{r7}
 80075e2:	4770      	bx	lr

080075e4 <LL_RCC_LSI_IsReady>:
{
 80075e4:	b480      	push	{r7}
 80075e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80075e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d101      	bne.n	80075fc <LL_RCC_LSI_IsReady+0x18>
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <LL_RCC_LSI_IsReady+0x1a>
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	46bd      	mov	sp, r7
 8007602:	bc80      	pop	{r7}
 8007604:	4770      	bx	lr

08007606 <LL_RCC_MSI_Enable>:
{
 8007606:	b480      	push	{r7}
 8007608:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800760a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007614:	f043 0301 	orr.w	r3, r3, #1
 8007618:	6013      	str	r3, [r2, #0]
}
 800761a:	bf00      	nop
 800761c:	46bd      	mov	sp, r7
 800761e:	bc80      	pop	{r7}
 8007620:	4770      	bx	lr

08007622 <LL_RCC_MSI_Disable>:
{
 8007622:	b480      	push	{r7}
 8007624:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007630:	f023 0301 	bic.w	r3, r3, #1
 8007634:	6013      	str	r3, [r2, #0]
}
 8007636:	bf00      	nop
 8007638:	46bd      	mov	sp, r7
 800763a:	bc80      	pop	{r7}
 800763c:	4770      	bx	lr

0800763e <LL_RCC_MSI_IsReady>:
{
 800763e:	b480      	push	{r7}
 8007640:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0302 	and.w	r3, r3, #2
 800764c:	2b02      	cmp	r3, #2
 800764e:	d101      	bne.n	8007654 <LL_RCC_MSI_IsReady+0x16>
 8007650:	2301      	movs	r3, #1
 8007652:	e000      	b.n	8007656 <LL_RCC_MSI_IsReady+0x18>
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	46bd      	mov	sp, r7
 800765a:	bc80      	pop	{r7}
 800765c:	4770      	bx	lr

0800765e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800765e:	b480      	push	{r7}
 8007660:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8007662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0308 	and.w	r3, r3, #8
 800766c:	2b08      	cmp	r3, #8
 800766e:	d101      	bne.n	8007674 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8007670:	2301      	movs	r3, #1
 8007672:	e000      	b.n	8007676 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	46bd      	mov	sp, r7
 800767a:	bc80      	pop	{r7}
 800767c:	4770      	bx	lr

0800767e <LL_RCC_MSI_GetRange>:
{
 800767e:	b480      	push	{r7}
 8007680:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800768c:	4618      	mov	r0, r3
 800768e:	46bd      	mov	sp, r7
 8007690:	bc80      	pop	{r7}
 8007692:	4770      	bx	lr

08007694 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8007694:	b480      	push	{r7}
 8007696:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8007698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800769c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bc80      	pop	{r7}
 80076aa:	4770      	bx	lr

080076ac <LL_RCC_MSI_SetCalibTrimming>:
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80076b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	021b      	lsls	r3, r3, #8
 80076c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076c6:	4313      	orrs	r3, r2
 80076c8:	604b      	str	r3, [r1, #4]
}
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bc80      	pop	{r7}
 80076d2:	4770      	bx	lr

080076d4 <LL_RCC_SetSysClkSource>:
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80076dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f023 0203 	bic.w	r2, r3, #3
 80076e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	608b      	str	r3, [r1, #8]
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bc80      	pop	{r7}
 80076f8:	4770      	bx	lr

080076fa <LL_RCC_GetSysClkSource>:
{
 80076fa:	b480      	push	{r7}
 80076fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80076fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f003 030c 	and.w	r3, r3, #12
}
 8007708:	4618      	mov	r0, r3
 800770a:	46bd      	mov	sp, r7
 800770c:	bc80      	pop	{r7}
 800770e:	4770      	bx	lr

08007710 <LL_RCC_SetAHBPrescaler>:
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4313      	orrs	r3, r2
 800772a:	608b      	str	r3, [r1, #8]
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	bc80      	pop	{r7}
 8007734:	4770      	bx	lr

08007736 <LL_RCC_SetAHB3Prescaler>:
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800773e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007742:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007746:	f023 020f 	bic.w	r2, r3, #15
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	091b      	lsrs	r3, r3, #4
 800774e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007752:	4313      	orrs	r3, r2
 8007754:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	bc80      	pop	{r7}
 8007760:	4770      	bx	lr

08007762 <LL_RCC_SetAPB1Prescaler>:
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800776a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007774:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4313      	orrs	r3, r2
 800777c:	608b      	str	r3, [r1, #8]
}
 800777e:	bf00      	nop
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	bc80      	pop	{r7}
 8007786:	4770      	bx	lr

08007788 <LL_RCC_SetAPB2Prescaler>:
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800779a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	608b      	str	r3, [r1, #8]
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bc80      	pop	{r7}
 80077ac:	4770      	bx	lr

080077ae <LL_RCC_GetAHBPrescaler>:
{
 80077ae:	b480      	push	{r7}
 80077b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80077b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	46bd      	mov	sp, r7
 80077c0:	bc80      	pop	{r7}
 80077c2:	4770      	bx	lr

080077c4 <LL_RCC_GetAHB3Prescaler>:
{
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80077c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	46bd      	mov	sp, r7
 80077da:	bc80      	pop	{r7}
 80077dc:	4770      	bx	lr

080077de <LL_RCC_GetAPB1Prescaler>:
{
 80077de:	b480      	push	{r7}
 80077e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80077e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bc80      	pop	{r7}
 80077f2:	4770      	bx	lr

080077f4 <LL_RCC_GetAPB2Prescaler>:
{
 80077f4:	b480      	push	{r7}
 80077f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80077f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007802:	4618      	mov	r0, r3
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr

0800780a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800780a:	b480      	push	{r7}
 800780c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800780e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007818:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800781c:	6013      	str	r3, [r2, #0]
}
 800781e:	bf00      	nop
 8007820:	46bd      	mov	sp, r7
 8007822:	bc80      	pop	{r7}
 8007824:	4770      	bx	lr

08007826 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8007826:	b480      	push	{r7}
 8007828:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800782a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007834:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007838:	6013      	str	r3, [r2, #0]
}
 800783a:	bf00      	nop
 800783c:	46bd      	mov	sp, r7
 800783e:	bc80      	pop	{r7}
 8007840:	4770      	bx	lr

08007842 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007842:	b480      	push	{r7}
 8007844:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007854:	d101      	bne.n	800785a <LL_RCC_PLL_IsReady+0x18>
 8007856:	2301      	movs	r3, #1
 8007858:	e000      	b.n	800785c <LL_RCC_PLL_IsReady+0x1a>
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	46bd      	mov	sp, r7
 8007860:	bc80      	pop	{r7}
 8007862:	4770      	bx	lr

08007864 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	0a1b      	lsrs	r3, r3, #8
 8007870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007874:	4618      	mov	r0, r3
 8007876:	46bd      	mov	sp, r7
 8007878:	bc80      	pop	{r7}
 800787a:	4770      	bx	lr

0800787c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800787c:	b480      	push	{r7}
 800787e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800788a:	4618      	mov	r0, r3
 800788c:	46bd      	mov	sp, r7
 800788e:	bc80      	pop	{r7}
 8007890:	4770      	bx	lr

08007892 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007892:	b480      	push	{r7}
 8007894:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bc80      	pop	{r7}
 80078a6:	4770      	bx	lr

080078a8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80078a8:	b480      	push	{r7}
 80078aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80078ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f003 0303 	and.w	r3, r3, #3
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr

080078be <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80078be:	b480      	push	{r7}
 80078c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80078c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078d0:	d101      	bne.n	80078d6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80078d2:	2301      	movs	r3, #1
 80078d4:	e000      	b.n	80078d8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	46bd      	mov	sp, r7
 80078dc:	bc80      	pop	{r7}
 80078de:	4770      	bx	lr

080078e0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80078e0:	b480      	push	{r7}
 80078e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80078e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80078ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078f4:	d101      	bne.n	80078fa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	46bd      	mov	sp, r7
 8007900:	bc80      	pop	{r7}
 8007902:	4770      	bx	lr

08007904 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007904:	b480      	push	{r7}
 8007906:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007912:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007916:	d101      	bne.n	800791c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8007918:	2301      	movs	r3, #1
 800791a:	e000      	b.n	800791e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	46bd      	mov	sp, r7
 8007922:	bc80      	pop	{r7}
 8007924:	4770      	bx	lr

08007926 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8007926:	b480      	push	{r7}
 8007928:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800792a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007934:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007938:	d101      	bne.n	800793e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800793a:	2301      	movs	r3, #1
 800793c:	e000      	b.n	8007940 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	46bd      	mov	sp, r7
 8007944:	bc80      	pop	{r7}
 8007946:	4770      	bx	lr

08007948 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e38b      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800795a:	f7ff fece 	bl	80076fa <LL_RCC_GetSysClkSource>
 800795e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007960:	f7ff ffa2 	bl	80078a8 <LL_RCC_PLL_GetMainSource>
 8007964:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 80c9 	beq.w	8007b06 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d005      	beq.n	8007986 <HAL_RCC_OscConfig+0x3e>
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	2b0c      	cmp	r3, #12
 800797e:	d17b      	bne.n	8007a78 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d178      	bne.n	8007a78 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007986:	f7ff fe5a 	bl	800763e <LL_RCC_MSI_IsReady>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d005      	beq.n	800799c <HAL_RCC_OscConfig+0x54>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a1b      	ldr	r3, [r3, #32]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e36a      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0308 	and.w	r3, r3, #8
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d005      	beq.n	80079ba <HAL_RCC_OscConfig+0x72>
 80079ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079b8:	e006      	b.n	80079c8 <HAL_RCC_OscConfig+0x80>
 80079ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079c2:	091b      	lsrs	r3, r3, #4
 80079c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d222      	bcs.n	8007a12 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fd51 	bl	8008478 <RCC_SetFlashLatencyFromMSIRange>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d001      	beq.n	80079e0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e348      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80079e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079ea:	f043 0308 	orr.w	r3, r3, #8
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a02:	4313      	orrs	r3, r2
 8007a04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff fe4e 	bl	80076ac <LL_RCC_MSI_SetCalibTrimming>
 8007a10:	e021      	b.n	8007a56 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a1c:	f043 0308 	orr.w	r3, r3, #8
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a34:	4313      	orrs	r3, r2
 8007a36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7ff fe35 	bl	80076ac <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 fd16 	bl	8008478 <RCC_SetFlashLatencyFromMSIRange>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e30d      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007a56:	f000 fcd7 	bl	8008408 <HAL_RCC_GetHCLKFreq>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	4aa1      	ldr	r2, [pc, #644]	; (8007ce4 <HAL_RCC_OscConfig+0x39c>)
 8007a5e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007a60:	4ba1      	ldr	r3, [pc, #644]	; (8007ce8 <HAL_RCC_OscConfig+0x3a0>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fb fb45 	bl	80030f4 <HAL_InitTick>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8007a6e:	7cfb      	ldrb	r3, [r7, #19]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d047      	beq.n	8007b04 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8007a74:	7cfb      	ldrb	r3, [r7, #19]
 8007a76:	e2fc      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a1b      	ldr	r3, [r3, #32]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d02c      	beq.n	8007ada <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007a80:	f7ff fdc1 	bl	8007606 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007a84:	f7fb fb40 	bl	8003108 <HAL_GetTick>
 8007a88:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007a8a:	e008      	b.n	8007a9e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a8c:	f7fb fb3c 	bl	8003108 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e2e9      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007a9e:	f7ff fdce 	bl	800763e <LL_RCC_MSI_IsReady>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d0f1      	beq.n	8007a8c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ab2:	f043 0308 	orr.w	r3, r3, #8
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007aca:	4313      	orrs	r3, r2
 8007acc:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7ff fdea 	bl	80076ac <LL_RCC_MSI_SetCalibTrimming>
 8007ad8:	e015      	b.n	8007b06 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007ada:	f7ff fda2 	bl	8007622 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007ade:	f7fb fb13 	bl	8003108 <HAL_GetTick>
 8007ae2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007ae4:	e008      	b.n	8007af8 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007ae6:	f7fb fb0f 	bl	8003108 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d901      	bls.n	8007af8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e2bc      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007af8:	f7ff fda1 	bl	800763e <LL_RCC_MSI_IsReady>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1f1      	bne.n	8007ae6 <HAL_RCC_OscConfig+0x19e>
 8007b02:	e000      	b.n	8007b06 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007b04:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d05f      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	2b08      	cmp	r3, #8
 8007b16:	d005      	beq.n	8007b24 <HAL_RCC_OscConfig+0x1dc>
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	2b0c      	cmp	r3, #12
 8007b1c:	d10d      	bne.n	8007b3a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d10a      	bne.n	8007b3a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b24:	f7ff fcdb 	bl	80074de <LL_RCC_HSE_IsReady>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d050      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x288>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d14c      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e29b      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8007b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b58:	d102      	bne.n	8007b60 <HAL_RCC_OscConfig+0x218>
 8007b5a:	f7ff fca4 	bl	80074a6 <LL_RCC_HSE_Enable>
 8007b5e:	e00d      	b.n	8007b7c <HAL_RCC_OscConfig+0x234>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8007b68:	d104      	bne.n	8007b74 <HAL_RCC_OscConfig+0x22c>
 8007b6a:	f7ff fc6f 	bl	800744c <LL_RCC_HSE_EnableTcxo>
 8007b6e:	f7ff fc9a 	bl	80074a6 <LL_RCC_HSE_Enable>
 8007b72:	e003      	b.n	8007b7c <HAL_RCC_OscConfig+0x234>
 8007b74:	f7ff fca5 	bl	80074c2 <LL_RCC_HSE_Disable>
 8007b78:	f7ff fc76 	bl	8007468 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d012      	beq.n	8007baa <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b84:	f7fb fac0 	bl	8003108 <HAL_GetTick>
 8007b88:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007b8a:	e008      	b.n	8007b9e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b8c:	f7fb fabc 	bl	8003108 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b64      	cmp	r3, #100	; 0x64
 8007b98:	d901      	bls.n	8007b9e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e269      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007b9e:	f7ff fc9e 	bl	80074de <LL_RCC_HSE_IsReady>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d0f1      	beq.n	8007b8c <HAL_RCC_OscConfig+0x244>
 8007ba8:	e013      	b.n	8007bd2 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007baa:	f7fb faad 	bl	8003108 <HAL_GetTick>
 8007bae:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007bb0:	e008      	b.n	8007bc4 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bb2:	f7fb faa9 	bl	8003108 <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b64      	cmp	r3, #100	; 0x64
 8007bbe:	d901      	bls.n	8007bc4 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e256      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007bc4:	f7ff fc8b 	bl	80074de <LL_RCC_HSE_IsReady>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1f1      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x26a>
 8007bce:	e000      	b.n	8007bd2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bd0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d04b      	beq.n	8007c76 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	2b04      	cmp	r3, #4
 8007be2:	d005      	beq.n	8007bf0 <HAL_RCC_OscConfig+0x2a8>
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	2b0c      	cmp	r3, #12
 8007be8:	d113      	bne.n	8007c12 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d110      	bne.n	8007c12 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bf0:	f7ff fca2 	bl	8007538 <LL_RCC_HSI_IsReady>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <HAL_RCC_OscConfig+0x2be>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e235      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7ff fca5 	bl	800755a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c10:	e031      	b.n	8007c76 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d019      	beq.n	8007c4e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c1a:	f7ff fc71 	bl	8007500 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c1e:	f7fb fa73 	bl	8003108 <HAL_GetTick>
 8007c22:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007c24:	e008      	b.n	8007c38 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c26:	f7fb fa6f 	bl	8003108 <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d901      	bls.n	8007c38 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e21c      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007c38:	f7ff fc7e 	bl	8007538 <LL_RCC_HSI_IsReady>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d0f1      	beq.n	8007c26 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7ff fc87 	bl	800755a <LL_RCC_HSI_SetCalibTrimming>
 8007c4c:	e013      	b.n	8007c76 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c4e:	f7ff fc65 	bl	800751c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c52:	f7fb fa59 	bl	8003108 <HAL_GetTick>
 8007c56:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007c58:	e008      	b.n	8007c6c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c5a:	f7fb fa55 	bl	8003108 <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d901      	bls.n	8007c6c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e202      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007c6c:	f7ff fc64 	bl	8007538 <LL_RCC_HSI_IsReady>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1f1      	bne.n	8007c5a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0308 	and.w	r3, r3, #8
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d06f      	beq.n	8007d62 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d057      	beq.n	8007d3a <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8007c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c92:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	69da      	ldr	r2, [r3, #28]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f003 0310 	and.w	r3, r3, #16
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d036      	beq.n	8007d10 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f003 0302 	and.w	r3, r3, #2
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d006      	beq.n	8007cba <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e1db      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d018      	beq.n	8007cf6 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8007cc4:	f7ff fc7e 	bl	80075c4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007cc8:	f7fb fa1e 	bl	8003108 <HAL_GetTick>
 8007ccc:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8007cce:	e00d      	b.n	8007cec <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cd0:	f7fb fa1a 	bl	8003108 <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	2b11      	cmp	r3, #17
 8007cdc:	d906      	bls.n	8007cec <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e1c7      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
 8007ce2:	bf00      	nop
 8007ce4:	20000018 	.word	0x20000018
 8007ce8:	20000020 	.word	0x20000020
          while (LL_RCC_LSI_IsReady() != 0U)
 8007cec:	f7ff fc7a 	bl	80075e4 <LL_RCC_LSI_IsReady>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1ec      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8007cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cfe:	f023 0210 	bic.w	r2, r3, #16
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d10:	f7ff fc48 	bl	80075a4 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d14:	f7fb f9f8 	bl	8003108 <HAL_GetTick>
 8007d18:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8007d1a:	e008      	b.n	8007d2e <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d1c:	f7fb f9f4 	bl	8003108 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	2b11      	cmp	r3, #17
 8007d28:	d901      	bls.n	8007d2e <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e1a1      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8007d2e:	f7ff fc59 	bl	80075e4 <LL_RCC_LSI_IsReady>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d0f1      	beq.n	8007d1c <HAL_RCC_OscConfig+0x3d4>
 8007d38:	e013      	b.n	8007d62 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d3a:	f7ff fc43 	bl	80075c4 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d3e:	f7fb f9e3 	bl	8003108 <HAL_GetTick>
 8007d42:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007d44:	e008      	b.n	8007d58 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d46:	f7fb f9df 	bl	8003108 <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	2b11      	cmp	r3, #17
 8007d52:	d901      	bls.n	8007d58 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e18c      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8007d58:	f7ff fc44 	bl	80075e4 <LL_RCC_LSI_IsReady>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1f1      	bne.n	8007d46 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0304 	and.w	r3, r3, #4
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 80d8 	beq.w	8007f20 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007d70:	f7ff fb5a 	bl	8007428 <LL_PWR_IsEnabledBkUpAccess>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d113      	bne.n	8007da2 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007d7a:	f7ff fa99 	bl	80072b0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d7e:	f7fb f9c3 	bl	8003108 <HAL_GetTick>
 8007d82:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007d84:	e008      	b.n	8007d98 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d86:	f7fb f9bf 	bl	8003108 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d901      	bls.n	8007d98 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e16c      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007d98:	f7ff fb46 	bl	8007428 <LL_PWR_IsEnabledBkUpAccess>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d0f1      	beq.n	8007d86 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d07b      	beq.n	8007ea2 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	2b85      	cmp	r3, #133	; 0x85
 8007db0:	d003      	beq.n	8007dba <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	2b05      	cmp	r3, #5
 8007db8:	d109      	bne.n	8007dce <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dc6:	f043 0304 	orr.w	r3, r3, #4
 8007dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dce:	f7fb f99b 	bl	8003108 <HAL_GetTick>
 8007dd2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ddc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007de0:	f043 0301 	orr.w	r3, r3, #1
 8007de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007de8:	e00a      	b.n	8007e00 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dea:	f7fb f98d 	bl	8003108 <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d901      	bls.n	8007e00 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e138      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007e00:	f7ff fbbf 	bl	8007582 <LL_RCC_LSE_IsReady>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0ef      	beq.n	8007dea <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	2b81      	cmp	r3, #129	; 0x81
 8007e10:	d003      	beq.n	8007e1a <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	2b85      	cmp	r3, #133	; 0x85
 8007e18:	d121      	bne.n	8007e5e <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e1a:	f7fb f975 	bl	8003108 <HAL_GetTick>
 8007e1e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007e34:	e00a      	b.n	8007e4c <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e36:	f7fb f967 	bl	8003108 <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d901      	bls.n	8007e4c <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e112      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d0ec      	beq.n	8007e36 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007e5c:	e060      	b.n	8007f20 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e5e:	f7fb f953 	bl	8003108 <HAL_GetTick>
 8007e62:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007e78:	e00a      	b.n	8007e90 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e7a:	f7fb f945 	bl	8003108 <HAL_GetTick>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d901      	bls.n	8007e90 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e0f0      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1ec      	bne.n	8007e7a <HAL_RCC_OscConfig+0x532>
 8007ea0:	e03e      	b.n	8007f20 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ea2:	f7fb f931 	bl	8003108 <HAL_GetTick>
 8007ea6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007ebc:	e00a      	b.n	8007ed4 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ebe:	f7fb f923 	bl	8003108 <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d901      	bls.n	8007ed4 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e0ce      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1ec      	bne.n	8007ebe <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ee4:	f7fb f910 	bl	8003108 <HAL_GetTick>
 8007ee8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ef6:	f023 0301 	bic.w	r3, r3, #1
 8007efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007efe:	e00a      	b.n	8007f16 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f00:	f7fb f902 	bl	8003108 <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d901      	bls.n	8007f16 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e0ad      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007f16:	f7ff fb34 	bl	8007582 <LL_RCC_LSE_IsReady>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1ef      	bne.n	8007f00 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 80a3 	beq.w	8008070 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	2b0c      	cmp	r3, #12
 8007f2e:	d076      	beq.n	800801e <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d14b      	bne.n	8007fd0 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f38:	f7ff fc75 	bl	8007826 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f3c:	f7fb f8e4 	bl	8003108 <HAL_GetTick>
 8007f40:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007f42:	e008      	b.n	8007f56 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f44:	f7fb f8e0 	bl	8003108 <HAL_GetTick>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	2b0a      	cmp	r3, #10
 8007f50:	d901      	bls.n	8007f56 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e08d      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007f56:	f7ff fc74 	bl	8007842 <LL_RCC_PLL_IsReady>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1f1      	bne.n	8007f44 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f64:	68da      	ldr	r2, [r3, #12]
 8007f66:	4b45      	ldr	r3, [pc, #276]	; (800807c <HAL_RCC_OscConfig+0x734>)
 8007f68:	4013      	ands	r3, r2
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f72:	4311      	orrs	r1, r2
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f78:	0212      	lsls	r2, r2, #8
 8007f7a:	4311      	orrs	r1, r2
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007f80:	4311      	orrs	r1, r2
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007f86:	4311      	orrs	r1, r2
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007f8c:	430a      	orrs	r2, r1
 8007f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f96:	f7ff fc38 	bl	800780a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fa8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007faa:	f7fb f8ad 	bl	8003108 <HAL_GetTick>
 8007fae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8007fb0:	e008      	b.n	8007fc4 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fb2:	f7fb f8a9 	bl	8003108 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	2b0a      	cmp	r3, #10
 8007fbe:	d901      	bls.n	8007fc4 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e056      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8007fc4:	f7ff fc3d 	bl	8007842 <LL_RCC_PLL_IsReady>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d0f1      	beq.n	8007fb2 <HAL_RCC_OscConfig+0x66a>
 8007fce:	e04f      	b.n	8008070 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fd0:	f7ff fc29 	bl	8007826 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8007fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fde:	f023 0303 	bic.w	r3, r3, #3
 8007fe2:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8007fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fee:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8007ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ff6:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ff8:	f7fb f886 	bl	8003108 <HAL_GetTick>
 8007ffc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007ffe:	e008      	b.n	8008012 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008000:	f7fb f882 	bl	8003108 <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	2b0a      	cmp	r3, #10
 800800c:	d901      	bls.n	8008012 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e02f      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8008012:	f7ff fc16 	bl	8007842 <LL_RCC_PLL_IsReady>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1f1      	bne.n	8008000 <HAL_RCC_OscConfig+0x6b8>
 800801c:	e028      	b.n	8008070 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	2b01      	cmp	r3, #1
 8008024:	d101      	bne.n	800802a <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e023      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800802a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	f003 0203 	and.w	r2, r3, #3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803c:	429a      	cmp	r2, r3
 800803e:	d115      	bne.n	800806c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800804a:	429a      	cmp	r2, r3
 800804c:	d10e      	bne.n	800806c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008058:	021b      	lsls	r3, r3, #8
 800805a:	429a      	cmp	r2, r3
 800805c:	d106      	bne.n	800806c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008068:	429a      	cmp	r2, r3
 800806a:	d001      	beq.n	8008070 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3720      	adds	r7, #32
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	11c1808c 	.word	0x11c1808c

08008080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e10f      	b.n	80082b4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008094:	4b89      	ldr	r3, [pc, #548]	; (80082bc <HAL_RCC_ClockConfig+0x23c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0307 	and.w	r3, r3, #7
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d91b      	bls.n	80080da <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080a2:	4b86      	ldr	r3, [pc, #536]	; (80082bc <HAL_RCC_ClockConfig+0x23c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f023 0207 	bic.w	r2, r3, #7
 80080aa:	4984      	ldr	r1, [pc, #528]	; (80082bc <HAL_RCC_ClockConfig+0x23c>)
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080b2:	f7fb f829 	bl	8003108 <HAL_GetTick>
 80080b6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080b8:	e008      	b.n	80080cc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80080ba:	f7fb f825 	bl	8003108 <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d901      	bls.n	80080cc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e0f3      	b.n	80082b4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080cc:	4b7b      	ldr	r3, [pc, #492]	; (80082bc <HAL_RCC_ClockConfig+0x23c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0307 	and.w	r3, r3, #7
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d1ef      	bne.n	80080ba <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0302 	and.w	r3, r3, #2
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d016      	beq.n	8008114 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7ff fb10 	bl	8007710 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80080f0:	f7fb f80a 	bl	8003108 <HAL_GetTick>
 80080f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80080f6:	e008      	b.n	800810a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80080f8:	f7fb f806 	bl	8003108 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d901      	bls.n	800810a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e0d4      	b.n	80082b4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800810a:	f7ff fbd8 	bl	80078be <LL_RCC_IsActiveFlag_HPRE>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d0f1      	beq.n	80080f8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800811c:	2b00      	cmp	r3, #0
 800811e:	d016      	beq.n	800814e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	4618      	mov	r0, r3
 8008126:	f7ff fb06 	bl	8007736 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800812a:	f7fa ffed 	bl	8003108 <HAL_GetTick>
 800812e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008130:	e008      	b.n	8008144 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008132:	f7fa ffe9 	bl	8003108 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	2b02      	cmp	r3, #2
 800813e:	d901      	bls.n	8008144 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e0b7      	b.n	80082b4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008144:	f7ff fbcc 	bl	80078e0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0f1      	beq.n	8008132 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0304 	and.w	r3, r3, #4
 8008156:	2b00      	cmp	r3, #0
 8008158:	d016      	beq.n	8008188 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	4618      	mov	r0, r3
 8008160:	f7ff faff 	bl	8007762 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008164:	f7fa ffd0 	bl	8003108 <HAL_GetTick>
 8008168:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800816a:	e008      	b.n	800817e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800816c:	f7fa ffcc 	bl	8003108 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2b02      	cmp	r3, #2
 8008178:	d901      	bls.n	800817e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e09a      	b.n	80082b4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800817e:	f7ff fbc1 	bl	8007904 <LL_RCC_IsActiveFlag_PPRE1>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d0f1      	beq.n	800816c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0308 	and.w	r3, r3, #8
 8008190:	2b00      	cmp	r3, #0
 8008192:	d017      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	00db      	lsls	r3, r3, #3
 800819a:	4618      	mov	r0, r3
 800819c:	f7ff faf4 	bl	8007788 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80081a0:	f7fa ffb2 	bl	8003108 <HAL_GetTick>
 80081a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80081a6:	e008      	b.n	80081ba <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80081a8:	f7fa ffae 	bl	8003108 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d901      	bls.n	80081ba <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e07c      	b.n	80082b4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80081ba:	f7ff fbb4 	bl	8007926 <LL_RCC_IsActiveFlag_PPRE2>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d0f1      	beq.n	80081a8 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d043      	beq.n	8008258 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d106      	bne.n	80081e6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80081d8:	f7ff f981 	bl	80074de <LL_RCC_HSE_IsReady>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d11e      	bne.n	8008220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e066      	b.n	80082b4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d106      	bne.n	80081fc <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80081ee:	f7ff fb28 	bl	8007842 <LL_RCC_PLL_IsReady>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d113      	bne.n	8008220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e05b      	b.n	80082b4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d106      	bne.n	8008212 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008204:	f7ff fa1b 	bl	800763e <LL_RCC_MSI_IsReady>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d108      	bne.n	8008220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e050      	b.n	80082b4 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008212:	f7ff f991 	bl	8007538 <LL_RCC_HSI_IsReady>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	e049      	b.n	80082b4 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	4618      	mov	r0, r3
 8008226:	f7ff fa55 	bl	80076d4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800822a:	f7fa ff6d 	bl	8003108 <HAL_GetTick>
 800822e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008230:	e00a      	b.n	8008248 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008232:	f7fa ff69 	bl	8003108 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008240:	4293      	cmp	r3, r2
 8008242:	d901      	bls.n	8008248 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e035      	b.n	80082b4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008248:	f7ff fa57 	bl	80076fa <LL_RCC_GetSysClkSource>
 800824c:	4602      	mov	r2, r0
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	429a      	cmp	r2, r3
 8008256:	d1ec      	bne.n	8008232 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008258:	4b18      	ldr	r3, [pc, #96]	; (80082bc <HAL_RCC_ClockConfig+0x23c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0307 	and.w	r3, r3, #7
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	429a      	cmp	r2, r3
 8008264:	d21b      	bcs.n	800829e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008266:	4b15      	ldr	r3, [pc, #84]	; (80082bc <HAL_RCC_ClockConfig+0x23c>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f023 0207 	bic.w	r2, r3, #7
 800826e:	4913      	ldr	r1, [pc, #76]	; (80082bc <HAL_RCC_ClockConfig+0x23c>)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	4313      	orrs	r3, r2
 8008274:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008276:	f7fa ff47 	bl	8003108 <HAL_GetTick>
 800827a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800827c:	e008      	b.n	8008290 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800827e:	f7fa ff43 	bl	8003108 <HAL_GetTick>
 8008282:	4602      	mov	r2, r0
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	2b02      	cmp	r3, #2
 800828a:	d901      	bls.n	8008290 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e011      	b.n	80082b4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008290:	4b0a      	ldr	r3, [pc, #40]	; (80082bc <HAL_RCC_ClockConfig+0x23c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0307 	and.w	r3, r3, #7
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	429a      	cmp	r2, r3
 800829c:	d1ef      	bne.n	800827e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800829e:	f000 f8b3 	bl	8008408 <HAL_RCC_GetHCLKFreq>
 80082a2:	4603      	mov	r3, r0
 80082a4:	4a06      	ldr	r2, [pc, #24]	; (80082c0 <HAL_RCC_ClockConfig+0x240>)
 80082a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80082a8:	4b06      	ldr	r3, [pc, #24]	; (80082c4 <HAL_RCC_ClockConfig+0x244>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fa ff21 	bl	80030f4 <HAL_InitTick>
 80082b2:	4603      	mov	r3, r0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	58004000 	.word	0x58004000
 80082c0:	20000018 	.word	0x20000018
 80082c4:	20000020 	.word	0x20000020

080082c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082c8:	b590      	push	{r4, r7, lr}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082d6:	f7ff fa10 	bl	80076fa <LL_RCC_GetSysClkSource>
 80082da:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082dc:	f7ff fae4 	bl	80078a8 <LL_RCC_PLL_GetMainSource>
 80082e0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d005      	beq.n	80082f4 <HAL_RCC_GetSysClockFreq+0x2c>
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	2b0c      	cmp	r3, #12
 80082ec:	d139      	bne.n	8008362 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d136      	bne.n	8008362 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80082f4:	f7ff f9b3 	bl	800765e <LL_RCC_MSI_IsEnabledRangeSelect>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d115      	bne.n	800832a <HAL_RCC_GetSysClockFreq+0x62>
 80082fe:	f7ff f9ae 	bl	800765e <LL_RCC_MSI_IsEnabledRangeSelect>
 8008302:	4603      	mov	r3, r0
 8008304:	2b01      	cmp	r3, #1
 8008306:	d106      	bne.n	8008316 <HAL_RCC_GetSysClockFreq+0x4e>
 8008308:	f7ff f9b9 	bl	800767e <LL_RCC_MSI_GetRange>
 800830c:	4603      	mov	r3, r0
 800830e:	0a1b      	lsrs	r3, r3, #8
 8008310:	f003 030f 	and.w	r3, r3, #15
 8008314:	e005      	b.n	8008322 <HAL_RCC_GetSysClockFreq+0x5a>
 8008316:	f7ff f9bd 	bl	8007694 <LL_RCC_MSI_GetRangeAfterStandby>
 800831a:	4603      	mov	r3, r0
 800831c:	0a1b      	lsrs	r3, r3, #8
 800831e:	f003 030f 	and.w	r3, r3, #15
 8008322:	4a36      	ldr	r2, [pc, #216]	; (80083fc <HAL_RCC_GetSysClockFreq+0x134>)
 8008324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008328:	e014      	b.n	8008354 <HAL_RCC_GetSysClockFreq+0x8c>
 800832a:	f7ff f998 	bl	800765e <LL_RCC_MSI_IsEnabledRangeSelect>
 800832e:	4603      	mov	r3, r0
 8008330:	2b01      	cmp	r3, #1
 8008332:	d106      	bne.n	8008342 <HAL_RCC_GetSysClockFreq+0x7a>
 8008334:	f7ff f9a3 	bl	800767e <LL_RCC_MSI_GetRange>
 8008338:	4603      	mov	r3, r0
 800833a:	091b      	lsrs	r3, r3, #4
 800833c:	f003 030f 	and.w	r3, r3, #15
 8008340:	e005      	b.n	800834e <HAL_RCC_GetSysClockFreq+0x86>
 8008342:	f7ff f9a7 	bl	8007694 <LL_RCC_MSI_GetRangeAfterStandby>
 8008346:	4603      	mov	r3, r0
 8008348:	091b      	lsrs	r3, r3, #4
 800834a:	f003 030f 	and.w	r3, r3, #15
 800834e:	4a2b      	ldr	r2, [pc, #172]	; (80083fc <HAL_RCC_GetSysClockFreq+0x134>)
 8008350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008354:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d115      	bne.n	8008388 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008360:	e012      	b.n	8008388 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2b04      	cmp	r3, #4
 8008366:	d102      	bne.n	800836e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008368:	4b25      	ldr	r3, [pc, #148]	; (8008400 <HAL_RCC_GetSysClockFreq+0x138>)
 800836a:	617b      	str	r3, [r7, #20]
 800836c:	e00c      	b.n	8008388 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	2b08      	cmp	r3, #8
 8008372:	d109      	bne.n	8008388 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008374:	f7ff f886 	bl	8007484 <LL_RCC_HSE_IsEnabledDiv2>
 8008378:	4603      	mov	r3, r0
 800837a:	2b01      	cmp	r3, #1
 800837c:	d102      	bne.n	8008384 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800837e:	4b20      	ldr	r3, [pc, #128]	; (8008400 <HAL_RCC_GetSysClockFreq+0x138>)
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	e001      	b.n	8008388 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008384:	4b1f      	ldr	r3, [pc, #124]	; (8008404 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008386:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008388:	f7ff f9b7 	bl	80076fa <LL_RCC_GetSysClkSource>
 800838c:	4603      	mov	r3, r0
 800838e:	2b0c      	cmp	r3, #12
 8008390:	d12f      	bne.n	80083f2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008392:	f7ff fa89 	bl	80078a8 <LL_RCC_PLL_GetMainSource>
 8008396:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b02      	cmp	r3, #2
 800839c:	d003      	beq.n	80083a6 <HAL_RCC_GetSysClockFreq+0xde>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b03      	cmp	r3, #3
 80083a2:	d003      	beq.n	80083ac <HAL_RCC_GetSysClockFreq+0xe4>
 80083a4:	e00d      	b.n	80083c2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80083a6:	4b16      	ldr	r3, [pc, #88]	; (8008400 <HAL_RCC_GetSysClockFreq+0x138>)
 80083a8:	60fb      	str	r3, [r7, #12]
        break;
 80083aa:	e00d      	b.n	80083c8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80083ac:	f7ff f86a 	bl	8007484 <LL_RCC_HSE_IsEnabledDiv2>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d102      	bne.n	80083bc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80083b6:	4b12      	ldr	r3, [pc, #72]	; (8008400 <HAL_RCC_GetSysClockFreq+0x138>)
 80083b8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80083ba:	e005      	b.n	80083c8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80083bc:	4b11      	ldr	r3, [pc, #68]	; (8008404 <HAL_RCC_GetSysClockFreq+0x13c>)
 80083be:	60fb      	str	r3, [r7, #12]
        break;
 80083c0:	e002      	b.n	80083c8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	60fb      	str	r3, [r7, #12]
        break;
 80083c6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80083c8:	f7ff fa4c 	bl	8007864 <LL_RCC_PLL_GetN>
 80083cc:	4602      	mov	r2, r0
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	fb03 f402 	mul.w	r4, r3, r2
 80083d4:	f7ff fa5d 	bl	8007892 <LL_RCC_PLL_GetDivider>
 80083d8:	4603      	mov	r3, r0
 80083da:	091b      	lsrs	r3, r3, #4
 80083dc:	3301      	adds	r3, #1
 80083de:	fbb4 f4f3 	udiv	r4, r4, r3
 80083e2:	f7ff fa4b 	bl	800787c <LL_RCC_PLL_GetR>
 80083e6:	4603      	mov	r3, r0
 80083e8:	0f5b      	lsrs	r3, r3, #29
 80083ea:	3301      	adds	r3, #1
 80083ec:	fbb4 f3f3 	udiv	r3, r4, r3
 80083f0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80083f2:	697b      	ldr	r3, [r7, #20]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	371c      	adds	r7, #28
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd90      	pop	{r4, r7, pc}
 80083fc:	08021a08 	.word	0x08021a08
 8008400:	00f42400 	.word	0x00f42400
 8008404:	01e84800 	.word	0x01e84800

08008408 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008408:	b598      	push	{r3, r4, r7, lr}
 800840a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800840c:	f7ff ff5c 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 8008410:	4604      	mov	r4, r0
 8008412:	f7ff f9cc 	bl	80077ae <LL_RCC_GetAHBPrescaler>
 8008416:	4603      	mov	r3, r0
 8008418:	091b      	lsrs	r3, r3, #4
 800841a:	f003 030f 	and.w	r3, r3, #15
 800841e:	4a03      	ldr	r2, [pc, #12]	; (800842c <HAL_RCC_GetHCLKFreq+0x24>)
 8008420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008424:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008428:	4618      	mov	r0, r3
 800842a:	bd98      	pop	{r3, r4, r7, pc}
 800842c:	080219a8 	.word	0x080219a8

08008430 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008430:	b598      	push	{r3, r4, r7, lr}
 8008432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008434:	f7ff ffe8 	bl	8008408 <HAL_RCC_GetHCLKFreq>
 8008438:	4604      	mov	r4, r0
 800843a:	f7ff f9d0 	bl	80077de <LL_RCC_GetAPB1Prescaler>
 800843e:	4603      	mov	r3, r0
 8008440:	0a1b      	lsrs	r3, r3, #8
 8008442:	4a03      	ldr	r2, [pc, #12]	; (8008450 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008448:	fa24 f303 	lsr.w	r3, r4, r3
}
 800844c:	4618      	mov	r0, r3
 800844e:	bd98      	pop	{r3, r4, r7, pc}
 8008450:	080219e8 	.word	0x080219e8

08008454 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008454:	b598      	push	{r3, r4, r7, lr}
 8008456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008458:	f7ff ffd6 	bl	8008408 <HAL_RCC_GetHCLKFreq>
 800845c:	4604      	mov	r4, r0
 800845e:	f7ff f9c9 	bl	80077f4 <LL_RCC_GetAPB2Prescaler>
 8008462:	4603      	mov	r3, r0
 8008464:	0adb      	lsrs	r3, r3, #11
 8008466:	4a03      	ldr	r2, [pc, #12]	; (8008474 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800846c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008470:	4618      	mov	r0, r3
 8008472:	bd98      	pop	{r3, r4, r7, pc}
 8008474:	080219e8 	.word	0x080219e8

08008478 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008478:	b590      	push	{r4, r7, lr}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	091b      	lsrs	r3, r3, #4
 8008484:	f003 030f 	and.w	r3, r3, #15
 8008488:	4a10      	ldr	r2, [pc, #64]	; (80084cc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800848a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800848e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8008490:	f7ff f998 	bl	80077c4 <LL_RCC_GetAHB3Prescaler>
 8008494:	4603      	mov	r3, r0
 8008496:	091b      	lsrs	r3, r3, #4
 8008498:	f003 030f 	and.w	r3, r3, #15
 800849c:	4a0c      	ldr	r2, [pc, #48]	; (80084d0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800849e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	4a09      	ldr	r2, [pc, #36]	; (80084d4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80084ae:	fba2 2303 	umull	r2, r3, r2, r3
 80084b2:	0c9c      	lsrs	r4, r3, #18
 80084b4:	f7fe ff3e 	bl	8007334 <HAL_PWREx_GetVoltageRange>
 80084b8:	4603      	mov	r3, r0
 80084ba:	4619      	mov	r1, r3
 80084bc:	4620      	mov	r0, r4
 80084be:	f000 f80b 	bl	80084d8 <RCC_SetFlashLatency>
 80084c2:	4603      	mov	r3, r0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd90      	pop	{r4, r7, pc}
 80084cc:	08021a08 	.word	0x08021a08
 80084d0:	080219a8 	.word	0x080219a8
 80084d4:	431bde83 	.word	0x431bde83

080084d8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b08e      	sub	sp, #56	; 0x38
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80084e2:	4a3a      	ldr	r2, [pc, #232]	; (80085cc <RCC_SetFlashLatency+0xf4>)
 80084e4:	f107 0320 	add.w	r3, r7, #32
 80084e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084ec:	6018      	str	r0, [r3, #0]
 80084ee:	3304      	adds	r3, #4
 80084f0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80084f2:	4a37      	ldr	r2, [pc, #220]	; (80085d0 <RCC_SetFlashLatency+0xf8>)
 80084f4:	f107 0318 	add.w	r3, r7, #24
 80084f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084fc:	6018      	str	r0, [r3, #0]
 80084fe:	3304      	adds	r3, #4
 8008500:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8008502:	4a34      	ldr	r2, [pc, #208]	; (80085d4 <RCC_SetFlashLatency+0xfc>)
 8008504:	f107 030c 	add.w	r3, r7, #12
 8008508:	ca07      	ldmia	r2, {r0, r1, r2}
 800850a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800850e:	2300      	movs	r3, #0
 8008510:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008518:	d11b      	bne.n	8008552 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800851a:	2300      	movs	r3, #0
 800851c:	633b      	str	r3, [r7, #48]	; 0x30
 800851e:	e014      	b.n	800854a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008522:	005b      	lsls	r3, r3, #1
 8008524:	3338      	adds	r3, #56	; 0x38
 8008526:	443b      	add	r3, r7
 8008528:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800852c:	461a      	mov	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4293      	cmp	r3, r2
 8008532:	d807      	bhi.n	8008544 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	3338      	adds	r3, #56	; 0x38
 800853a:	443b      	add	r3, r7
 800853c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008540:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008542:	e021      	b.n	8008588 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008546:	3301      	adds	r3, #1
 8008548:	633b      	str	r3, [r7, #48]	; 0x30
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	2b02      	cmp	r3, #2
 800854e:	d9e7      	bls.n	8008520 <RCC_SetFlashLatency+0x48>
 8008550:	e01a      	b.n	8008588 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008552:	2300      	movs	r3, #0
 8008554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008556:	e014      	b.n	8008582 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855a:	005b      	lsls	r3, r3, #1
 800855c:	3338      	adds	r3, #56	; 0x38
 800855e:	443b      	add	r3, r7
 8008560:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8008564:	461a      	mov	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4293      	cmp	r3, r2
 800856a:	d807      	bhi.n	800857c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800856c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	3338      	adds	r3, #56	; 0x38
 8008572:	443b      	add	r3, r7
 8008574:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008578:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800857a:	e005      	b.n	8008588 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	3301      	adds	r3, #1
 8008580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008584:	2b02      	cmp	r3, #2
 8008586:	d9e7      	bls.n	8008558 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008588:	4b13      	ldr	r3, [pc, #76]	; (80085d8 <RCC_SetFlashLatency+0x100>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f023 0207 	bic.w	r2, r3, #7
 8008590:	4911      	ldr	r1, [pc, #68]	; (80085d8 <RCC_SetFlashLatency+0x100>)
 8008592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008594:	4313      	orrs	r3, r2
 8008596:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008598:	f7fa fdb6 	bl	8003108 <HAL_GetTick>
 800859c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800859e:	e008      	b.n	80085b2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80085a0:	f7fa fdb2 	bl	8003108 <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d901      	bls.n	80085b2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e007      	b.n	80085c2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80085b2:	4b09      	ldr	r3, [pc, #36]	; (80085d8 <RCC_SetFlashLatency+0x100>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085bc:	429a      	cmp	r2, r3
 80085be:	d1ef      	bne.n	80085a0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3738      	adds	r7, #56	; 0x38
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	08021094 	.word	0x08021094
 80085d0:	0802109c 	.word	0x0802109c
 80085d4:	080210a4 	.word	0x080210a4
 80085d8:	58004000 	.word	0x58004000

080085dc <LL_RCC_LSE_IsReady>:
{
 80085dc:	b480      	push	{r7}
 80085de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80085e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e8:	f003 0302 	and.w	r3, r3, #2
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d101      	bne.n	80085f4 <LL_RCC_LSE_IsReady+0x18>
 80085f0:	2301      	movs	r3, #1
 80085f2:	e000      	b.n	80085f6 <LL_RCC_LSE_IsReady+0x1a>
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bc80      	pop	{r7}
 80085fc:	4770      	bx	lr

080085fe <LL_RCC_SetUSARTClockSource>:
{
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8008606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800860a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	0c1b      	lsrs	r3, r3, #16
 8008612:	43db      	mvns	r3, r3
 8008614:	401a      	ands	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	b29b      	uxth	r3, r3
 800861a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800861e:	4313      	orrs	r3, r2
 8008620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	bc80      	pop	{r7}
 800862c:	4770      	bx	lr

0800862e <LL_RCC_SetI2SClockSource>:
{
 800862e:	b480      	push	{r7}
 8008630:	b083      	sub	sp, #12
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8008636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800863a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800863e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4313      	orrs	r3, r2
 800864a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800864e:	bf00      	nop
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	bc80      	pop	{r7}
 8008656:	4770      	bx	lr

08008658 <LL_RCC_SetLPUARTClockSource>:
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008668:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800866c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4313      	orrs	r3, r2
 8008674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	bc80      	pop	{r7}
 8008680:	4770      	bx	lr

08008682 <LL_RCC_SetI2CClockSource>:
{
 8008682:	b480      	push	{r7}
 8008684:	b083      	sub	sp, #12
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800868a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800868e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	091b      	lsrs	r3, r3, #4
 8008696:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800869a:	43db      	mvns	r3, r3
 800869c:	401a      	ands	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80086a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086aa:	4313      	orrs	r3, r2
 80086ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bc80      	pop	{r7}
 80086b8:	4770      	bx	lr

080086ba <LL_RCC_SetLPTIMClockSource>:
{
 80086ba:	b480      	push	{r7}
 80086bc:	b083      	sub	sp, #12
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80086c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	0c1b      	lsrs	r3, r3, #16
 80086ce:	041b      	lsls	r3, r3, #16
 80086d0:	43db      	mvns	r3, r3
 80086d2:	401a      	ands	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	041b      	lsls	r3, r3, #16
 80086d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086dc:	4313      	orrs	r3, r2
 80086de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr

080086ec <LL_RCC_SetRNGClockSource>:
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80086f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086fc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008700:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4313      	orrs	r3, r2
 8008708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	bc80      	pop	{r7}
 8008714:	4770      	bx	lr

08008716 <LL_RCC_SetADCClockSource>:
{
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800871e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008726:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800872a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4313      	orrs	r3, r2
 8008732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008736:	bf00      	nop
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	bc80      	pop	{r7}
 800873e:	4770      	bx	lr

08008740 <LL_RCC_SetRTCClockSource>:
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800874c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008750:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008754:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4313      	orrs	r3, r2
 800875c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	bc80      	pop	{r7}
 8008768:	4770      	bx	lr

0800876a <LL_RCC_GetRTCClockSource>:
{
 800876a:	b480      	push	{r7}
 800876c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800876e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008776:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800877a:	4618      	mov	r0, r3
 800877c:	46bd      	mov	sp, r7
 800877e:	bc80      	pop	{r7}
 8008780:	4770      	bx	lr

08008782 <LL_RCC_ForceBackupDomainReset>:
{
 8008782:	b480      	push	{r7}
 8008784:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800878a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800878e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800879a:	bf00      	nop
 800879c:	46bd      	mov	sp, r7
 800879e:	bc80      	pop	{r7}
 80087a0:	4770      	bx	lr

080087a2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80087a2:	b480      	push	{r7}
 80087a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80087a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80087ba:	bf00      	nop
 80087bc:	46bd      	mov	sp, r7
 80087be:	bc80      	pop	{r7}
 80087c0:	4770      	bx	lr
	...

080087c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80087cc:	2300      	movs	r3, #0
 80087ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80087d0:	2300      	movs	r3, #0
 80087d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80087d4:	2300      	movs	r3, #0
 80087d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d058      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80087e4:	f7fe fd64 	bl	80072b0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087e8:	f7fa fc8e 	bl	8003108 <HAL_GetTick>
 80087ec:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80087ee:	e009      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087f0:	f7fa fc8a 	bl	8003108 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d902      	bls.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	74fb      	strb	r3, [r7, #19]
        break;
 8008802:	e006      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008804:	4b7b      	ldr	r3, [pc, #492]	; (80089f4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800880c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008810:	d1ee      	bne.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8008812:	7cfb      	ldrb	r3, [r7, #19]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d13c      	bne.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8008818:	f7ff ffa7 	bl	800876a <LL_RCC_GetRTCClockSource>
 800881c:	4602      	mov	r2, r0
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008822:	429a      	cmp	r2, r3
 8008824:	d00f      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800882a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800882e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008832:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008834:	f7ff ffa5 	bl	8008782 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008838:	f7ff ffb3 	bl	80087a2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800883c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d014      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008850:	f7fa fc5a 	bl	8003108 <HAL_GetTick>
 8008854:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8008856:	e00b      	b.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008858:	f7fa fc56 	bl	8003108 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	f241 3288 	movw	r2, #5000	; 0x1388
 8008866:	4293      	cmp	r3, r2
 8008868:	d902      	bls.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	74fb      	strb	r3, [r7, #19]
            break;
 800886e:	e004      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8008870:	f7ff feb4 	bl	80085dc <LL_RCC_LSE_IsReady>
 8008874:	4603      	mov	r3, r0
 8008876:	2b01      	cmp	r3, #1
 8008878:	d1ee      	bne.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800887a:	7cfb      	ldrb	r3, [r7, #19]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d105      	bne.n	800888c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008884:	4618      	mov	r0, r3
 8008886:	f7ff ff5b 	bl	8008740 <LL_RCC_SetRTCClockSource>
 800888a:	e004      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800888c:	7cfb      	ldrb	r3, [r7, #19]
 800888e:	74bb      	strb	r3, [r7, #18]
 8008890:	e001      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008892:	7cfb      	ldrb	r3, [r7, #19]
 8008894:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d004      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7ff fea9 	bl	80085fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0302 	and.w	r3, r3, #2
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d004      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	4618      	mov	r0, r3
 80088be:	f7ff fe9e 	bl	80085fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0320 	and.w	r3, r3, #32
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d004      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7ff fec0 	bl	8008658 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d004      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a1b      	ldr	r3, [r3, #32]
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7ff fee6 	bl	80086ba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d004      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff fedb 	bl	80086ba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800890c:	2b00      	cmp	r3, #0
 800890e:	d004      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008914:	4618      	mov	r0, r3
 8008916:	f7ff fed0 	bl	80086ba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008922:	2b00      	cmp	r3, #0
 8008924:	d004      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	4618      	mov	r0, r3
 800892c:	f7ff fea9 	bl	8008682 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008938:	2b00      	cmp	r3, #0
 800893a:	d004      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	4618      	mov	r0, r3
 8008942:	f7ff fe9e 	bl	8008682 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800894e:	2b00      	cmp	r3, #0
 8008950:	d004      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	69db      	ldr	r3, [r3, #28]
 8008956:	4618      	mov	r0, r3
 8008958:	f7ff fe93 	bl	8008682 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0310 	and.w	r3, r3, #16
 8008964:	2b00      	cmp	r3, #0
 8008966:	d011      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	4618      	mov	r0, r3
 800896e:	f7ff fe5e 	bl	800862e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800897a:	d107      	bne.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800897c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800898a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d010      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899c:	4618      	mov	r0, r3
 800899e:	f7ff fea5 	bl	80086ec <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d107      	bne.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80089aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089b8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d011      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7ff fea3 	bl	8008716 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089d8:	d107      	bne.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80089da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089e8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80089ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3718      	adds	r7, #24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	58000400 	.word	0x58000400

080089f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d068      	beq.n	8008adc <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d106      	bne.n	8008a24 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f7f9 ffb8 	bl	8002994 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2202      	movs	r2, #2
 8008a28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a2c:	4b2e      	ldr	r3, [pc, #184]	; (8008ae8 <HAL_RTC_Init+0xf0>)
 8008a2e:	22ca      	movs	r2, #202	; 0xca
 8008a30:	625a      	str	r2, [r3, #36]	; 0x24
 8008a32:	4b2d      	ldr	r3, [pc, #180]	; (8008ae8 <HAL_RTC_Init+0xf0>)
 8008a34:	2253      	movs	r2, #83	; 0x53
 8008a36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fa0f 	bl	8008e5c <RTC_EnterInitMode>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d13f      	bne.n	8008ac8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008a48:	4b27      	ldr	r3, [pc, #156]	; (8008ae8 <HAL_RTC_Init+0xf0>)
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	4a26      	ldr	r2, [pc, #152]	; (8008ae8 <HAL_RTC_Init+0xf0>)
 8008a4e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a56:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008a58:	4b23      	ldr	r3, [pc, #140]	; (8008ae8 <HAL_RTC_Init+0xf0>)
 8008a5a:	699a      	ldr	r2, [r3, #24]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6859      	ldr	r1, [r3, #4]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	4319      	orrs	r1, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	430b      	orrs	r3, r1
 8008a6c:	491e      	ldr	r1, [pc, #120]	; (8008ae8 <HAL_RTC_Init+0xf0>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68da      	ldr	r2, [r3, #12]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	041b      	lsls	r3, r3, #16
 8008a7c:	491a      	ldr	r1, [pc, #104]	; (8008ae8 <HAL_RTC_Init+0xf0>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008a82:	4b19      	ldr	r3, [pc, #100]	; (8008ae8 <HAL_RTC_Init+0xf0>)
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a92:	430b      	orrs	r3, r1
 8008a94:	4914      	ldr	r1, [pc, #80]	; (8008ae8 <HAL_RTC_Init+0xf0>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fa12 	bl	8008ec4 <RTC_ExitInitMode>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10e      	bne.n	8008ac8 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8008aaa:	4b0f      	ldr	r3, [pc, #60]	; (8008ae8 <HAL_RTC_Init+0xf0>)
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a19      	ldr	r1, [r3, #32]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	4319      	orrs	r1, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	430b      	orrs	r3, r1
 8008ac2:	4909      	ldr	r1, [pc, #36]	; (8008ae8 <HAL_RTC_Init+0xf0>)
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ac8:	4b07      	ldr	r3, [pc, #28]	; (8008ae8 <HAL_RTC_Init+0xf0>)
 8008aca:	22ff      	movs	r2, #255	; 0xff
 8008acc:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d103      	bne.n	8008adc <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	40002800 	.word	0x40002800

08008aec <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008aec:	b590      	push	{r4, r7, lr}
 8008aee:	b087      	sub	sp, #28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d101      	bne.n	8008b0a <HAL_RTC_SetAlarm_IT+0x1e>
 8008b06:	2302      	movs	r3, #2
 8008b08:	e0f3      	b.n	8008cf2 <HAL_RTC_SetAlarm_IT+0x206>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2202      	movs	r2, #2
 8008b16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8008b1a:	4b78      	ldr	r3, [pc, #480]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b22:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b2a:	d06a      	beq.n	8008c02 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d13a      	bne.n	8008ba8 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008b32:	4b72      	ldr	r3, [pc, #456]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d102      	bne.n	8008b44 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2200      	movs	r2, #0
 8008b42:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 f9f5 	bl	8008f40 <RTC_ByteToBcd2>
 8008b56:	4603      	mov	r3, r0
 8008b58:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	785b      	ldrb	r3, [r3, #1]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 f9ee 	bl	8008f40 <RTC_ByteToBcd2>
 8008b64:	4603      	mov	r3, r0
 8008b66:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008b68:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	789b      	ldrb	r3, [r3, #2]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 f9e6 	bl	8008f40 <RTC_ByteToBcd2>
 8008b74:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008b76:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	78db      	ldrb	r3, [r3, #3]
 8008b7e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008b80:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 f9d8 	bl	8008f40 <RTC_ByteToBcd2>
 8008b90:	4603      	mov	r3, r0
 8008b92:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008b94:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008b9c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	617b      	str	r3, [r7, #20]
 8008ba6:	e02c      	b.n	8008c02 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8008bb0:	d00d      	beq.n	8008bce <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bba:	d008      	beq.n	8008bce <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008bbc:	4b4f      	ldr	r3, [pc, #316]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d102      	bne.n	8008bce <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	785b      	ldrb	r3, [r3, #1]
 8008bd8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008bda:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008be0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	78db      	ldrb	r3, [r3, #3]
 8008be6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008be8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008bf0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008bf2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008bf8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c02:	4b3e      	ldr	r3, [pc, #248]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008c04:	22ca      	movs	r2, #202	; 0xca
 8008c06:	625a      	str	r2, [r3, #36]	; 0x24
 8008c08:	4b3c      	ldr	r3, [pc, #240]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008c0a:	2253      	movs	r2, #83	; 0x53
 8008c0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c16:	d12c      	bne.n	8008c72 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008c18:	4b38      	ldr	r3, [pc, #224]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	4a37      	ldr	r2, [pc, #220]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008c1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008c22:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008c24:	4b35      	ldr	r3, [pc, #212]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008c26:	2201      	movs	r2, #1
 8008c28:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c30:	d107      	bne.n	8008c42 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	699a      	ldr	r2, [r3, #24]
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	4930      	ldr	r1, [pc, #192]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	644b      	str	r3, [r1, #68]	; 0x44
 8008c40:	e006      	b.n	8008c50 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008c42:	4a2e      	ldr	r2, [pc, #184]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8008c48:	4a2c      	ldr	r2, [pc, #176]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008c50:	4a2a      	ldr	r2, [pc, #168]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5c:	f043 0201 	orr.w	r2, r3, #1
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008c64:	4b25      	ldr	r3, [pc, #148]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	4a24      	ldr	r2, [pc, #144]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008c6a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8008c6e:	6193      	str	r3, [r2, #24]
 8008c70:	e02b      	b.n	8008cca <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008c72:	4b22      	ldr	r3, [pc, #136]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	4a21      	ldr	r2, [pc, #132]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008c78:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8008c7c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008c7e:	4b1f      	ldr	r3, [pc, #124]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008c80:	2202      	movs	r2, #2
 8008c82:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c8a:	d107      	bne.n	8008c9c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	699a      	ldr	r2, [r3, #24]
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	4919      	ldr	r1, [pc, #100]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008c9a:	e006      	b.n	8008caa <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8008c9c:	4a17      	ldr	r2, [pc, #92]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8008ca2:	4a16      	ldr	r2, [pc, #88]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8008caa:	4a14      	ldr	r2, [pc, #80]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb6:	f043 0202 	orr.w	r2, r3, #2
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008cbe:	4b0f      	ldr	r3, [pc, #60]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	4a0e      	ldr	r2, [pc, #56]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008cc4:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8008cc8:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008cca:	4b0d      	ldr	r3, [pc, #52]	; (8008d00 <HAL_RTC_SetAlarm_IT+0x214>)
 8008ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cd0:	4a0b      	ldr	r2, [pc, #44]	; (8008d00 <HAL_RTC_SetAlarm_IT+0x214>)
 8008cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cd6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cda:	4b08      	ldr	r3, [pc, #32]	; (8008cfc <HAL_RTC_SetAlarm_IT+0x210>)
 8008cdc:	22ff      	movs	r2, #255	; 0xff
 8008cde:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	371c      	adds	r7, #28
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd90      	pop	{r4, r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	40002800 	.word	0x40002800
 8008d00:	58000800 	.word	0x58000800

08008d04 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d101      	bne.n	8008d1c <HAL_RTC_DeactivateAlarm+0x18>
 8008d18:	2302      	movs	r3, #2
 8008d1a:	e048      	b.n	8008dae <HAL_RTC_DeactivateAlarm+0xaa>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2202      	movs	r2, #2
 8008d28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d2c:	4b22      	ldr	r3, [pc, #136]	; (8008db8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008d2e:	22ca      	movs	r2, #202	; 0xca
 8008d30:	625a      	str	r2, [r3, #36]	; 0x24
 8008d32:	4b21      	ldr	r3, [pc, #132]	; (8008db8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008d34:	2253      	movs	r2, #83	; 0x53
 8008d36:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d3e:	d115      	bne.n	8008d6c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008d40:	4b1d      	ldr	r3, [pc, #116]	; (8008db8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	4a1c      	ldr	r2, [pc, #112]	; (8008db8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008d46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008d4a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8008d4c:	4b1a      	ldr	r3, [pc, #104]	; (8008db8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d50:	4a19      	ldr	r2, [pc, #100]	; (8008db8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008d52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d56:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5c:	f023 0201 	bic.w	r2, r3, #1
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008d64:	4b14      	ldr	r3, [pc, #80]	; (8008db8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008d66:	2201      	movs	r2, #1
 8008d68:	65da      	str	r2, [r3, #92]	; 0x5c
 8008d6a:	e014      	b.n	8008d96 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008d6c:	4b12      	ldr	r3, [pc, #72]	; (8008db8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	4a11      	ldr	r2, [pc, #68]	; (8008db8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008d72:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8008d76:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8008d78:	4b0f      	ldr	r3, [pc, #60]	; (8008db8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d7c:	4a0e      	ldr	r2, [pc, #56]	; (8008db8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008d7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d82:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d88:	f023 0202 	bic.w	r2, r3, #2
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008d90:	4b09      	ldr	r3, [pc, #36]	; (8008db8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008d92:	2202      	movs	r2, #2
 8008d94:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d96:	4b08      	ldr	r3, [pc, #32]	; (8008db8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008d98:	22ff      	movs	r2, #255	; 0xff
 8008d9a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bc80      	pop	{r7}
 8008db6:	4770      	bx	lr
 8008db8:	40002800 	.word	0x40002800

08008dbc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8008dc4:	4b11      	ldr	r3, [pc, #68]	; (8008e0c <HAL_RTC_AlarmIRQHandler+0x50>)
 8008dc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dcc:	4013      	ands	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d005      	beq.n	8008de6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008dda:	4b0c      	ldr	r3, [pc, #48]	; (8008e0c <HAL_RTC_AlarmIRQHandler+0x50>)
 8008ddc:	2201      	movs	r2, #1
 8008dde:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f7fa fc1a 	bl	800361a <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f003 0302 	and.w	r3, r3, #2
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d005      	beq.n	8008dfc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008df0:	4b06      	ldr	r3, [pc, #24]	; (8008e0c <HAL_RTC_AlarmIRQHandler+0x50>)
 8008df2:	2202      	movs	r2, #2
 8008df4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f94a 	bl	8009090 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008e04:	bf00      	nop
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	40002800 	.word	0x40002800

08008e10 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008e18:	4b0f      	ldr	r3, [pc, #60]	; (8008e58 <HAL_RTC_WaitForSynchro+0x48>)
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	4a0e      	ldr	r2, [pc, #56]	; (8008e58 <HAL_RTC_WaitForSynchro+0x48>)
 8008e1e:	f023 0320 	bic.w	r3, r3, #32
 8008e22:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008e24:	f7fa f970 	bl	8003108 <HAL_GetTick>
 8008e28:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008e2a:	e009      	b.n	8008e40 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e2c:	f7fa f96c 	bl	8003108 <HAL_GetTick>
 8008e30:	4602      	mov	r2, r0
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e3a:	d901      	bls.n	8008e40 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e006      	b.n	8008e4e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008e40:	4b05      	ldr	r3, [pc, #20]	; (8008e58 <HAL_RTC_WaitForSynchro+0x48>)
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	f003 0320 	and.w	r3, r3, #32
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d0ef      	beq.n	8008e2c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	40002800 	.word	0x40002800

08008e5c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008e68:	4b15      	ldr	r3, [pc, #84]	; (8008ec0 <RTC_EnterInitMode+0x64>)
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d120      	bne.n	8008eb6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008e74:	4b12      	ldr	r3, [pc, #72]	; (8008ec0 <RTC_EnterInitMode+0x64>)
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	4a11      	ldr	r2, [pc, #68]	; (8008ec0 <RTC_EnterInitMode+0x64>)
 8008e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e7e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008e80:	f7fa f942 	bl	8003108 <HAL_GetTick>
 8008e84:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008e86:	e00d      	b.n	8008ea4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008e88:	f7fa f93e 	bl	8003108 <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e96:	d905      	bls.n	8008ea4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2203      	movs	r2, #3
 8008ea0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008ea4:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <RTC_EnterInitMode+0x64>)
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d102      	bne.n	8008eb6 <RTC_EnterInitMode+0x5a>
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	d1e8      	bne.n	8008e88 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	40002800 	.word	0x40002800

08008ec4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008ed0:	4b1a      	ldr	r3, [pc, #104]	; (8008f3c <RTC_ExitInitMode+0x78>)
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	4a19      	ldr	r2, [pc, #100]	; (8008f3c <RTC_ExitInitMode+0x78>)
 8008ed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eda:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008edc:	4b17      	ldr	r3, [pc, #92]	; (8008f3c <RTC_ExitInitMode+0x78>)
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	f003 0320 	and.w	r3, r3, #32
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10c      	bne.n	8008f02 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7ff ff91 	bl	8008e10 <HAL_RTC_WaitForSynchro>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d01e      	beq.n	8008f32 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2203      	movs	r2, #3
 8008ef8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008efc:	2303      	movs	r3, #3
 8008efe:	73fb      	strb	r3, [r7, #15]
 8008f00:	e017      	b.n	8008f32 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008f02:	4b0e      	ldr	r3, [pc, #56]	; (8008f3c <RTC_ExitInitMode+0x78>)
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	4a0d      	ldr	r2, [pc, #52]	; (8008f3c <RTC_ExitInitMode+0x78>)
 8008f08:	f023 0320 	bic.w	r3, r3, #32
 8008f0c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7ff ff7e 	bl	8008e10 <HAL_RTC_WaitForSynchro>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d005      	beq.n	8008f26 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2203      	movs	r2, #3
 8008f1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008f26:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <RTC_ExitInitMode+0x78>)
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	4a04      	ldr	r2, [pc, #16]	; (8008f3c <RTC_ExitInitMode+0x78>)
 8008f2c:	f043 0320 	orr.w	r3, r3, #32
 8008f30:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	40002800 	.word	0x40002800

08008f40 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8008f4e:	79fb      	ldrb	r3, [r7, #7]
 8008f50:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008f52:	e005      	b.n	8008f60 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	3301      	adds	r3, #1
 8008f58:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8008f5a:	7afb      	ldrb	r3, [r7, #11]
 8008f5c:	3b0a      	subs	r3, #10
 8008f5e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008f60:	7afb      	ldrb	r3, [r7, #11]
 8008f62:	2b09      	cmp	r3, #9
 8008f64:	d8f6      	bhi.n	8008f54 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	011b      	lsls	r3, r3, #4
 8008f6c:	b2da      	uxtb	r2, r3
 8008f6e:	7afb      	ldrb	r3, [r7, #11]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	b2db      	uxtb	r3, r3
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bc80      	pop	{r7}
 8008f7c:	4770      	bx	lr
	...

08008f80 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d101      	bne.n	8008f96 <HAL_RTCEx_EnableBypassShadow+0x16>
 8008f92:	2302      	movs	r3, #2
 8008f94:	e01f      	b.n	8008fd6 <HAL_RTCEx_EnableBypassShadow+0x56>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fa6:	4b0e      	ldr	r3, [pc, #56]	; (8008fe0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008fa8:	22ca      	movs	r2, #202	; 0xca
 8008faa:	625a      	str	r2, [r3, #36]	; 0x24
 8008fac:	4b0c      	ldr	r3, [pc, #48]	; (8008fe0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008fae:	2253      	movs	r2, #83	; 0x53
 8008fb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008fb2:	4b0b      	ldr	r3, [pc, #44]	; (8008fe0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	4a0a      	ldr	r2, [pc, #40]	; (8008fe0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008fb8:	f043 0320 	orr.w	r3, r3, #32
 8008fbc:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fbe:	4b08      	ldr	r3, [pc, #32]	; (8008fe0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008fc0:	22ff      	movs	r2, #255	; 0xff
 8008fc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bc80      	pop	{r7}
 8008fde:	4770      	bx	lr
 8008fe0:	40002800 	.word	0x40002800

08008fe4 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d101      	bne.n	8008ffa <HAL_RTCEx_SetSSRU_IT+0x16>
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	e027      	b.n	800904a <HAL_RTCEx_SetSSRU_IT+0x66>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2202      	movs	r2, #2
 8009006:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800900a:	4b12      	ldr	r3, [pc, #72]	; (8009054 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800900c:	22ca      	movs	r2, #202	; 0xca
 800900e:	625a      	str	r2, [r3, #36]	; 0x24
 8009010:	4b10      	ldr	r3, [pc, #64]	; (8009054 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009012:	2253      	movs	r2, #83	; 0x53
 8009014:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8009016:	4b0f      	ldr	r3, [pc, #60]	; (8009054 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	4a0e      	ldr	r2, [pc, #56]	; (8009054 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800901c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009020:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8009022:	4b0d      	ldr	r3, [pc, #52]	; (8009058 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8009024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009028:	4a0b      	ldr	r2, [pc, #44]	; (8009058 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800902a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800902e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009032:	4b08      	ldr	r3, [pc, #32]	; (8009054 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009034:	22ff      	movs	r2, #255	; 0xff
 8009036:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	370c      	adds	r7, #12
 800904e:	46bd      	mov	sp, r7
 8009050:	bc80      	pop	{r7}
 8009052:	4770      	bx	lr
 8009054:	40002800 	.word	0x40002800
 8009058:	58000800 	.word	0x58000800

0800905c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8009064:	4b09      	ldr	r3, [pc, #36]	; (800908c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8009066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800906c:	2b00      	cmp	r3, #0
 800906e:	d005      	beq.n	800907c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8009070:	4b06      	ldr	r3, [pc, #24]	; (800908c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8009072:	2240      	movs	r2, #64	; 0x40
 8009074:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7fa fad9 	bl	800362e <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009084:	bf00      	nop
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	40002800 	.word	0x40002800

08009090 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	bc80      	pop	{r7}
 80090a0:	4770      	bx	lr
	...

080090a4 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80090b0:	4b07      	ldr	r3, [pc, #28]	; (80090d0 <HAL_RTCEx_BKUPWrite+0x2c>)
 80090b2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	4413      	add	r3, r2
 80090bc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	601a      	str	r2, [r3, #0]
}
 80090c4:	bf00      	nop
 80090c6:	371c      	adds	r7, #28
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bc80      	pop	{r7}
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	4000b100 	.word	0x4000b100

080090d4 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80090de:	4b07      	ldr	r3, [pc, #28]	; (80090fc <HAL_RTCEx_BKUPRead+0x28>)
 80090e0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	4413      	add	r3, r2
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bc80      	pop	{r7}
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	4000b100 	.word	0x4000b100

08009100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e0c6      	b.n	80092a0 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009116:	2b00      	cmp	r3, #0
 8009118:	d108      	bne.n	800912c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009122:	d009      	beq.n	8009138 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	61da      	str	r2, [r3, #28]
 800912a:	e005      	b.n	8009138 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800913e:	b2db      	uxtb	r3, r3
 8009140:	2b00      	cmp	r3, #0
 8009142:	d106      	bne.n	8009152 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f7f9 fccb 	bl	8002ae8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2202      	movs	r2, #2
 8009156:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009168:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009172:	d902      	bls.n	800917a <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009174:	2300      	movs	r3, #0
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	e002      	b.n	8009180 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800917a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800917e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009188:	d007      	beq.n	800919a <HAL_SPI_Init+0x9a>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009192:	d002      	beq.n	800919a <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80091aa:	431a      	orrs	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	691b      	ldr	r3, [r3, #16]
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	431a      	orrs	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	431a      	orrs	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091c8:	431a      	orrs	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091d2:	431a      	orrs	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a1b      	ldr	r3, [r3, #32]
 80091d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091dc:	ea42 0103 	orr.w	r1, r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	430a      	orrs	r2, r1
 80091ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091f8:	d11b      	bne.n	8009232 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10b      	bne.n	800921a <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800920a:	d903      	bls.n	8009214 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2202      	movs	r2, #2
 8009210:	631a      	str	r2, [r3, #48]	; 0x30
 8009212:	e002      	b.n	800921a <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921e:	2b02      	cmp	r3, #2
 8009220:	d107      	bne.n	8009232 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009230:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	699b      	ldr	r3, [r3, #24]
 8009236:	0c1b      	lsrs	r3, r3, #16
 8009238:	f003 0204 	and.w	r2, r3, #4
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009240:	f003 0310 	and.w	r3, r3, #16
 8009244:	431a      	orrs	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800924a:	f003 0308 	and.w	r3, r3, #8
 800924e:	431a      	orrs	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009258:	ea42 0103 	orr.w	r1, r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	430a      	orrs	r2, r1
 8009268:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009272:	d105      	bne.n	8009280 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	b292      	uxth	r2, r2
 800927e:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	69da      	ldr	r2, [r3, #28]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800928e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2201      	movs	r2, #1
 800929a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	603b      	str	r3, [r7, #0]
 80092b4:	4613      	mov	r3, r2
 80092b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80092b8:	2300      	movs	r3, #0
 80092ba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d101      	bne.n	80092ca <HAL_SPI_Transmit+0x22>
 80092c6:	2302      	movs	r3, #2
 80092c8:	e17a      	b.n	80095c0 <HAL_SPI_Transmit+0x318>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092d2:	f7f9 ff19 	bl	8003108 <HAL_GetTick>
 80092d6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80092d8:	88fb      	ldrh	r3, [r7, #6]
 80092da:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d002      	beq.n	80092ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80092e8:	2302      	movs	r3, #2
 80092ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80092ec:	e15f      	b.n	80095ae <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <HAL_SPI_Transmit+0x52>
 80092f4:	88fb      	ldrh	r3, [r7, #6]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d102      	bne.n	8009300 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80092fe:	e156      	b.n	80095ae <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2203      	movs	r2, #3
 8009304:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	88fa      	ldrh	r2, [r7, #6]
 8009318:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	88fa      	ldrh	r2, [r7, #6]
 800931e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2200      	movs	r2, #0
 800932a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2200      	movs	r2, #0
 8009340:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800934a:	d10f      	bne.n	800936c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800935a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800936a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009374:	d10f      	bne.n	8009396 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009384:	601a      	str	r2, [r3, #0]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009394:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093a0:	2b40      	cmp	r3, #64	; 0x40
 80093a2:	d007      	beq.n	80093b4 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093bc:	d94b      	bls.n	8009456 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d002      	beq.n	80093cc <HAL_SPI_Transmit+0x124>
 80093c6:	8afb      	ldrh	r3, [r7, #22]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d13e      	bne.n	800944a <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d0:	881a      	ldrh	r2, [r3, #0]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093dc:	1c9a      	adds	r2, r3, #2
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80093f0:	e02b      	b.n	800944a <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f003 0302 	and.w	r3, r3, #2
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d112      	bne.n	8009426 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009404:	881a      	ldrh	r2, [r3, #0]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009410:	1c9a      	adds	r2, r3, #2
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800941a:	b29b      	uxth	r3, r3
 800941c:	3b01      	subs	r3, #1
 800941e:	b29a      	uxth	r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009424:	e011      	b.n	800944a <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009426:	f7f9 fe6f 	bl	8003108 <HAL_GetTick>
 800942a:	4602      	mov	r2, r0
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	429a      	cmp	r2, r3
 8009434:	d803      	bhi.n	800943e <HAL_SPI_Transmit+0x196>
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943c:	d102      	bne.n	8009444 <HAL_SPI_Transmit+0x19c>
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d102      	bne.n	800944a <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8009444:	2303      	movs	r3, #3
 8009446:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009448:	e0b1      	b.n	80095ae <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800944e:	b29b      	uxth	r3, r3
 8009450:	2b00      	cmp	r3, #0
 8009452:	d1ce      	bne.n	80093f2 <HAL_SPI_Transmit+0x14a>
 8009454:	e07c      	b.n	8009550 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d002      	beq.n	8009464 <HAL_SPI_Transmit+0x1bc>
 800945e:	8afb      	ldrh	r3, [r7, #22]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d170      	bne.n	8009546 <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009468:	b29b      	uxth	r3, r3
 800946a:	2b01      	cmp	r3, #1
 800946c:	d912      	bls.n	8009494 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009472:	881a      	ldrh	r2, [r3, #0]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947e:	1c9a      	adds	r2, r3, #2
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009488:	b29b      	uxth	r3, r3
 800948a:	3b02      	subs	r3, #2
 800948c:	b29a      	uxth	r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009492:	e058      	b.n	8009546 <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	330c      	adds	r3, #12
 800949e:	7812      	ldrb	r2, [r2, #0]
 80094a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	3b01      	subs	r3, #1
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80094ba:	e044      	b.n	8009546 <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	f003 0302 	and.w	r3, r3, #2
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d12b      	bne.n	8009522 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d912      	bls.n	80094fa <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d8:	881a      	ldrh	r2, [r3, #0]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e4:	1c9a      	adds	r2, r3, #2
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	3b02      	subs	r3, #2
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094f8:	e025      	b.n	8009546 <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	330c      	adds	r3, #12
 8009504:	7812      	ldrb	r2, [r2, #0]
 8009506:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950c:	1c5a      	adds	r2, r3, #1
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009516:	b29b      	uxth	r3, r3
 8009518:	3b01      	subs	r3, #1
 800951a:	b29a      	uxth	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009520:	e011      	b.n	8009546 <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009522:	f7f9 fdf1 	bl	8003108 <HAL_GetTick>
 8009526:	4602      	mov	r2, r0
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	429a      	cmp	r2, r3
 8009530:	d803      	bhi.n	800953a <HAL_SPI_Transmit+0x292>
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009538:	d102      	bne.n	8009540 <HAL_SPI_Transmit+0x298>
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d102      	bne.n	8009546 <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8009540:	2303      	movs	r3, #3
 8009542:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009544:	e033      	b.n	80095ae <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800954a:	b29b      	uxth	r3, r3
 800954c:	2b00      	cmp	r3, #0
 800954e:	d1b5      	bne.n	80094bc <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009558:	d107      	bne.n	800956a <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009568:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800956a:	69ba      	ldr	r2, [r7, #24]
 800956c:	6839      	ldr	r1, [r7, #0]
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f000 fe6e 	bl	800a250 <SPI_EndRxTxTransaction>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d002      	beq.n	8009580 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2220      	movs	r2, #32
 800957e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10a      	bne.n	800959e <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009588:	2300      	movs	r3, #0
 800958a:	613b      	str	r3, [r7, #16]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	613b      	str	r3, [r7, #16]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	613b      	str	r3, [r7, #16]
 800959c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d002      	beq.n	80095ac <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	77fb      	strb	r3, [r7, #31]
 80095aa:	e000      	b.n	80095ae <HAL_SPI_Transmit+0x306>
  }

error:
 80095ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80095be:	7ffb      	ldrb	r3, [r7, #31]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3720      	adds	r7, #32
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b08c      	sub	sp, #48	; 0x30
 80095cc:	af02      	add	r7, sp, #8
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	603b      	str	r3, [r7, #0]
 80095d4:	4613      	mov	r3, r2
 80095d6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80095d8:	2300      	movs	r3, #0
 80095da:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80095dc:	2300      	movs	r3, #0
 80095de:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095ee:	d112      	bne.n	8009616 <HAL_SPI_Receive+0x4e>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10e      	bne.n	8009616 <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2204      	movs	r2, #4
 80095fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009600:	88fa      	ldrh	r2, [r7, #6]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	4613      	mov	r3, r2
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	68b9      	ldr	r1, [r7, #8]
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 f9c4 	bl	800999a <HAL_SPI_TransmitReceive>
 8009612:	4603      	mov	r3, r0
 8009614:	e1bd      	b.n	8009992 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800961c:	2b01      	cmp	r3, #1
 800961e:	d101      	bne.n	8009624 <HAL_SPI_Receive+0x5c>
 8009620:	2302      	movs	r3, #2
 8009622:	e1b6      	b.n	8009992 <HAL_SPI_Receive+0x3ca>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800962c:	f7f9 fd6c 	bl	8003108 <HAL_GetTick>
 8009630:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b01      	cmp	r3, #1
 800963c:	d003      	beq.n	8009646 <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 800963e:	2302      	movs	r3, #2
 8009640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8009644:	e19b      	b.n	800997e <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d002      	beq.n	8009652 <HAL_SPI_Receive+0x8a>
 800964c:	88fb      	ldrh	r3, [r7, #6]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d103      	bne.n	800965a <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8009658:	e191      	b.n	800997e <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2204      	movs	r2, #4
 800965e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	88fa      	ldrh	r2, [r7, #6]
 8009672:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	88fa      	ldrh	r2, [r7, #6]
 800967a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096a4:	d118      	bne.n	80096d8 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096b4:	601a      	str	r2, [r3, #0]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096c4:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	3b01      	subs	r3, #1
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80096e0:	d908      	bls.n	80096f4 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	685a      	ldr	r2, [r3, #4]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80096f0:	605a      	str	r2, [r3, #4]
 80096f2:	e007      	b.n	8009704 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009702:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800970c:	d10f      	bne.n	800972e <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800971c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800972c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009738:	2b40      	cmp	r3, #64	; 0x40
 800973a:	d007      	beq.n	800974c <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800974a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009754:	d869      	bhi.n	800982a <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009756:	e031      	b.n	80097bc <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	2b01      	cmp	r3, #1
 8009764:	d117      	bne.n	8009796 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f103 020c 	add.w	r2, r3, #12
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009772:	7812      	ldrb	r2, [r2, #0]
 8009774:	b2d2      	uxtb	r2, r2
 8009776:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977c:	1c5a      	adds	r2, r3, #1
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009788:	b29b      	uxth	r3, r3
 800978a:	3b01      	subs	r3, #1
 800978c:	b29a      	uxth	r2, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009794:	e012      	b.n	80097bc <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009796:	f7f9 fcb7 	bl	8003108 <HAL_GetTick>
 800979a:	4602      	mov	r2, r0
 800979c:	6a3b      	ldr	r3, [r7, #32]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	683a      	ldr	r2, [r7, #0]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d803      	bhi.n	80097ae <HAL_SPI_Receive+0x1e6>
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ac:	d102      	bne.n	80097b4 <HAL_SPI_Receive+0x1ec>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d103      	bne.n	80097bc <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 80097b4:	2303      	movs	r3, #3
 80097b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80097ba:	e0e0      	b.n	800997e <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1c7      	bne.n	8009758 <HAL_SPI_Receive+0x190>
 80097c8:	e035      	b.n	8009836 <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d115      	bne.n	8009804 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68da      	ldr	r2, [r3, #12]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e2:	b292      	uxth	r2, r2
 80097e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ea:	1c9a      	adds	r2, r3, #2
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	3b01      	subs	r3, #1
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009802:	e012      	b.n	800982a <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009804:	f7f9 fc80 	bl	8003108 <HAL_GetTick>
 8009808:	4602      	mov	r2, r0
 800980a:	6a3b      	ldr	r3, [r7, #32]
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	429a      	cmp	r2, r3
 8009812:	d803      	bhi.n	800981c <HAL_SPI_Receive+0x254>
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981a:	d102      	bne.n	8009822 <HAL_SPI_Receive+0x25a>
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d103      	bne.n	800982a <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8009822:	2303      	movs	r3, #3
 8009824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8009828:	e0a9      	b.n	800997e <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009830:	b29b      	uxth	r3, r3
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1c9      	bne.n	80097ca <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800983e:	d178      	bne.n	8009932 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800984e:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	2201      	movs	r2, #1
 8009858:	2101      	movs	r1, #1
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f000 fb82 	bl	8009f64 <SPI_WaitFlagStateUntilTimeout>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d003      	beq.n	800986e <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8009866:	2303      	movs	r3, #3
 8009868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 800986c:	e087      	b.n	800997e <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009876:	d907      	bls.n	8009888 <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68da      	ldr	r2, [r3, #12]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009882:	b292      	uxth	r2, r2
 8009884:	801a      	strh	r2, [r3, #0]
 8009886:	e008      	b.n	800989a <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f103 020c 	add.w	r2, r3, #12
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009894:	7812      	ldrb	r2, [r2, #0]
 8009896:	b2d2      	uxtb	r2, r2
 8009898:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800989a:	6a3b      	ldr	r3, [r7, #32]
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	2201      	movs	r2, #1
 80098a2:	2101      	movs	r1, #1
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f000 fb5d 	bl	8009f64 <SPI_WaitFlagStateUntilTimeout>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d009      	beq.n	80098c4 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098b4:	f043 0202 	orr.w	r2, r3, #2
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 80098c2:	e05c      	b.n	800997e <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80098cc:	d105      	bne.n	80098da <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	e02b      	b.n	8009932 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	330c      	adds	r3, #12
 80098e0:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80098ea:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80098f4:	d11d      	bne.n	8009932 <HAL_SPI_Receive+0x36a>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d119      	bne.n	8009932 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80098fe:	6a3b      	ldr	r3, [r7, #32]
 8009900:	9300      	str	r3, [sp, #0]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2201      	movs	r2, #1
 8009906:	2101      	movs	r1, #1
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f000 fb2b 	bl	8009f64 <SPI_WaitFlagStateUntilTimeout>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d009      	beq.n	8009928 <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009918:	f043 0202 	orr.w	r2, r3, #2
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8009920:	2303      	movs	r3, #3
 8009922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8009926:	e02a      	b.n	800997e <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	b2db      	uxtb	r3, r3
 800992e:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8009930:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009932:	6a3a      	ldr	r2, [r7, #32]
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f000 fc32 	bl	800a1a0 <SPI_EndRxTransaction>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d002      	beq.n	8009948 <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2220      	movs	r2, #32
 8009946:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f003 0310 	and.w	r3, r3, #16
 8009952:	2b10      	cmp	r3, #16
 8009954:	d10a      	bne.n	800996c <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800995a:	f043 0202 	orr.w	r2, r3, #2
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800996a:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009970:	2b00      	cmp	r3, #0
 8009972:	d003      	beq.n	800997c <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800997a:	e000      	b.n	800997e <HAL_SPI_Receive+0x3b6>
  }

error :
 800997c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800998e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009992:	4618      	mov	r0, r3
 8009994:	3728      	adds	r7, #40	; 0x28
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b092      	sub	sp, #72	; 0x48
 800999e:	af02      	add	r7, sp, #8
 80099a0:	60f8      	str	r0, [r7, #12]
 80099a2:	60b9      	str	r1, [r7, #8]
 80099a4:	607a      	str	r2, [r7, #4]
 80099a6:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80099a8:	2300      	movs	r3, #0
 80099aa:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80099b0:	2301      	movs	r3, #1
 80099b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d101      	bne.n	80099c8 <HAL_SPI_TransmitReceive+0x2e>
 80099c4:	2302      	movs	r3, #2
 80099c6:	e2c8      	b.n	8009f5a <HAL_SPI_TransmitReceive+0x5c0>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099d0:	f7f9 fb9a 	bl	8003108 <HAL_GetTick>
 80099d4:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80099dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 80099e6:	887b      	ldrh	r3, [r7, #2]
 80099e8:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 80099ea:	887b      	ldrh	r3, [r7, #2]
 80099ec:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80099fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d00f      	beq.n	8009a26 <HAL_SPI_TransmitReceive+0x8c>
 8009a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a0c:	d107      	bne.n	8009a1e <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d103      	bne.n	8009a1e <HAL_SPI_TransmitReceive+0x84>
 8009a16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a1a:	2b04      	cmp	r3, #4
 8009a1c:	d003      	beq.n	8009a26 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8009a1e:	2302      	movs	r3, #2
 8009a20:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8009a24:	e28f      	b.n	8009f46 <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d005      	beq.n	8009a38 <HAL_SPI_TransmitReceive+0x9e>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d002      	beq.n	8009a38 <HAL_SPI_TransmitReceive+0x9e>
 8009a32:	887b      	ldrh	r3, [r7, #2]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d103      	bne.n	8009a40 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8009a3e:	e282      	b.n	8009f46 <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b04      	cmp	r3, #4
 8009a4a:	d003      	beq.n	8009a54 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2205      	movs	r2, #5
 8009a50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	887a      	ldrh	r2, [r7, #2]
 8009a64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	887a      	ldrh	r2, [r7, #2]
 8009a6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	887a      	ldrh	r2, [r7, #2]
 8009a7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	887a      	ldrh	r2, [r7, #2]
 8009a80:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a96:	d10f      	bne.n	8009ab8 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009aa6:	601a      	str	r2, [r3, #0]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ab6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ac0:	d802      	bhi.n	8009ac8 <HAL_SPI_TransmitReceive+0x12e>
 8009ac2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d908      	bls.n	8009ada <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	685a      	ldr	r2, [r3, #4]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009ad6:	605a      	str	r2, [r3, #4]
 8009ad8:	e007      	b.n	8009aea <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ae8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af4:	2b40      	cmp	r3, #64	; 0x40
 8009af6:	d007      	beq.n	8009b08 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009b10:	f240 80a4 	bls.w	8009c5c <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d003      	beq.n	8009b24 <HAL_SPI_TransmitReceive+0x18a>
 8009b1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	f040 808e 	bne.w	8009c40 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b28:	881a      	ldrh	r2, [r3, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b34:	1c9a      	adds	r2, r3, #2
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	3b01      	subs	r3, #1
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b48:	e07a      	b.n	8009c40 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	f003 0302 	and.w	r3, r3, #2
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d13f      	bne.n	8009bd8 <HAL_SPI_TransmitReceive+0x23e>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d03a      	beq.n	8009bd8 <HAL_SPI_TransmitReceive+0x23e>
 8009b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d137      	bne.n	8009bd8 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6c:	881a      	ldrh	r2, [r3, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b78:	1c9a      	adds	r2, r3, #2
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	3b01      	subs	r3, #1
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d11e      	bne.n	8009bd8 <HAL_SPI_TransmitReceive+0x23e>
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ba2:	d119      	bne.n	8009bd8 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba6:	f003 0304 	and.w	r3, r3, #4
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10c      	bne.n	8009bc8 <HAL_SPI_TransmitReceive+0x22e>
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	f003 0308 	and.w	r3, r3, #8
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d007      	beq.n	8009bc8 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bc6:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009bd6:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f003 0301 	and.w	r3, r3, #1
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d11c      	bne.n	8009c20 <HAL_SPI_TransmitReceive+0x286>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d016      	beq.n	8009c20 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68da      	ldr	r2, [r3, #12]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfc:	b292      	uxth	r2, r2
 8009bfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c04:	1c9a      	adds	r2, r3, #2
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	3b01      	subs	r3, #1
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009c20:	f7f9 fa72 	bl	8003108 <HAL_GetTick>
 8009c24:	4602      	mov	r2, r0
 8009c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d807      	bhi.n	8009c40 <HAL_SPI_TransmitReceive+0x2a6>
 8009c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c36:	d003      	beq.n	8009c40 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 8009c38:	2303      	movs	r3, #3
 8009c3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8009c3e:	e182      	b.n	8009f46 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f47f af7f 	bne.w	8009b4a <HAL_SPI_TransmitReceive+0x1b0>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f47f af78 	bne.w	8009b4a <HAL_SPI_TransmitReceive+0x1b0>
 8009c5a:	e103      	b.n	8009e64 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d003      	beq.n	8009c6c <HAL_SPI_TransmitReceive+0x2d2>
 8009c64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	f040 80ef 	bne.w	8009e4a <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d912      	bls.n	8009c9c <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7a:	881a      	ldrh	r2, [r3, #0]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c86:	1c9a      	adds	r2, r3, #2
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	3b02      	subs	r3, #2
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009c9a:	e0d6      	b.n	8009e4a <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	330c      	adds	r3, #12
 8009ca6:	7812      	ldrb	r2, [r2, #0]
 8009ca8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cae:	1c5a      	adds	r2, r3, #1
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cc2:	e0c2      	b.n	8009e4a <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	f003 0302 	and.w	r3, r3, #2
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d158      	bne.n	8009d84 <HAL_SPI_TransmitReceive+0x3ea>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d053      	beq.n	8009d84 <HAL_SPI_TransmitReceive+0x3ea>
 8009cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d150      	bne.n	8009d84 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d912      	bls.n	8009d12 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf0:	881a      	ldrh	r2, [r3, #0]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfc:	1c9a      	adds	r2, r3, #2
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	3b02      	subs	r3, #2
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009d10:	e012      	b.n	8009d38 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	330c      	adds	r3, #12
 8009d1c:	7812      	ldrb	r2, [r2, #0]
 8009d1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d24:	1c5a      	adds	r2, r3, #1
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	3b01      	subs	r3, #1
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d11e      	bne.n	8009d84 <HAL_SPI_TransmitReceive+0x3ea>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d4e:	d119      	bne.n	8009d84 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	f003 0304 	and.w	r3, r3, #4
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10c      	bne.n	8009d74 <HAL_SPI_TransmitReceive+0x3da>
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	f003 0308 	and.w	r3, r3, #8
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d007      	beq.n	8009d74 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d72:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009d82:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	f003 0301 	and.w	r3, r3, #1
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d148      	bne.n	8009e24 <HAL_SPI_TransmitReceive+0x48a>
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d042      	beq.n	8009e24 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d923      	bls.n	8009df2 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68da      	ldr	r2, [r3, #12]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db4:	b292      	uxth	r2, r2
 8009db6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbc:	1c9a      	adds	r2, r3, #2
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	3b02      	subs	r3, #2
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d81f      	bhi.n	8009e20 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	685a      	ldr	r2, [r3, #4]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009dee:	605a      	str	r2, [r3, #4]
 8009df0:	e016      	b.n	8009e20 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f103 020c 	add.w	r2, r3, #12
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfe:	7812      	ldrb	r2, [r2, #0]
 8009e00:	b2d2      	uxtb	r2, r2
 8009e02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	3b01      	subs	r3, #1
 8009e18:	b29a      	uxth	r2, r3
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009e20:	2301      	movs	r3, #1
 8009e22:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009e24:	f7f9 f970 	bl	8003108 <HAL_GetTick>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d803      	bhi.n	8009e3c <HAL_SPI_TransmitReceive+0x4a2>
 8009e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e3a:	d102      	bne.n	8009e42 <HAL_SPI_TransmitReceive+0x4a8>
 8009e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d103      	bne.n	8009e4a <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8009e42:	2303      	movs	r3, #3
 8009e44:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8009e48:	e07d      	b.n	8009f46 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f47f af37 	bne.w	8009cc4 <HAL_SPI_TransmitReceive+0x32a>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f47f af30 	bne.w	8009cc4 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e6c:	d146      	bne.n	8009efc <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e74:	2201      	movs	r2, #1
 8009e76:	2101      	movs	r1, #1
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f000 f873 	bl	8009f64 <SPI_WaitFlagStateUntilTimeout>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d009      	beq.n	8009e98 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e88:	f043 0202 	orr.w	r2, r3, #2
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8009e90:	2303      	movs	r3, #3
 8009e92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 8009e96:	e056      	b.n	8009f46 <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009ea0:	d105      	bne.n	8009eae <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	e026      	b.n	8009efc <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	330c      	adds	r3, #12
 8009eb4:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009ebe:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d119      	bne.n	8009efc <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eca:	9300      	str	r3, [sp, #0]
 8009ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ece:	2201      	movs	r2, #1
 8009ed0:	2101      	movs	r1, #1
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f000 f846 	bl	8009f64 <SPI_WaitFlagStateUntilTimeout>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d009      	beq.n	8009ef2 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ee2:	f043 0202 	orr.w	r2, r3, #2
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8009eea:	2303      	movs	r3, #3
 8009eec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8009ef0:	e029      	b.n	8009f46 <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	f003 0310 	and.w	r3, r3, #16
 8009f06:	2b10      	cmp	r3, #16
 8009f08:	d10d      	bne.n	8009f26 <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f0e:	f043 0202 	orr.w	r2, r3, #2
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8009f1e:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f28:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f000 f990 	bl	800a250 <SPI_EndRxTxTransaction>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d006      	beq.n	8009f44 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2220      	movs	r2, #32
 8009f40:	661a      	str	r2, [r3, #96]	; 0x60
 8009f42:	e000      	b.n	8009f46 <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8009f44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009f56:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3740      	adds	r7, #64	; 0x40
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
	...

08009f64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b088      	sub	sp, #32
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	603b      	str	r3, [r7, #0]
 8009f70:	4613      	mov	r3, r2
 8009f72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009f74:	f7f9 f8c8 	bl	8003108 <HAL_GetTick>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7c:	1a9b      	subs	r3, r3, r2
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	4413      	add	r3, r2
 8009f82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009f84:	f7f9 f8c0 	bl	8003108 <HAL_GetTick>
 8009f88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009f8a:	4b39      	ldr	r3, [pc, #228]	; (800a070 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	015b      	lsls	r3, r3, #5
 8009f90:	0d1b      	lsrs	r3, r3, #20
 8009f92:	69fa      	ldr	r2, [r7, #28]
 8009f94:	fb02 f303 	mul.w	r3, r2, r3
 8009f98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f9a:	e054      	b.n	800a046 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa2:	d050      	beq.n	800a046 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009fa4:	f7f9 f8b0 	bl	8003108 <HAL_GetTick>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	69fa      	ldr	r2, [r7, #28]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d902      	bls.n	8009fba <SPI_WaitFlagStateUntilTimeout+0x56>
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d13d      	bne.n	800a036 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	685a      	ldr	r2, [r3, #4]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009fc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009fd2:	d111      	bne.n	8009ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fdc:	d004      	beq.n	8009fe8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fe6:	d107      	bne.n	8009ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ff6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a000:	d10f      	bne.n	800a022 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a010:	601a      	str	r2, [r3, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a020:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a032:	2303      	movs	r3, #3
 800a034:	e017      	b.n	800a066 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d101      	bne.n	800a040 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a03c:	2300      	movs	r3, #0
 800a03e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	3b01      	subs	r3, #1
 800a044:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	689a      	ldr	r2, [r3, #8]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	4013      	ands	r3, r2
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	429a      	cmp	r2, r3
 800a054:	bf0c      	ite	eq
 800a056:	2301      	moveq	r3, #1
 800a058:	2300      	movne	r3, #0
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	461a      	mov	r2, r3
 800a05e:	79fb      	ldrb	r3, [r7, #7]
 800a060:	429a      	cmp	r2, r3
 800a062:	d19b      	bne.n	8009f9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	3720      	adds	r7, #32
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	20000018 	.word	0x20000018

0800a074 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08a      	sub	sp, #40	; 0x28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
 800a080:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a082:	2300      	movs	r3, #0
 800a084:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a086:	f7f9 f83f 	bl	8003108 <HAL_GetTick>
 800a08a:	4602      	mov	r2, r0
 800a08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08e:	1a9b      	subs	r3, r3, r2
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	4413      	add	r3, r2
 800a094:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a096:	f7f9 f837 	bl	8003108 <HAL_GetTick>
 800a09a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	330c      	adds	r3, #12
 800a0a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a0a4:	4b3d      	ldr	r3, [pc, #244]	; (800a19c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	4613      	mov	r3, r2
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	4413      	add	r3, r2
 800a0ae:	00da      	lsls	r2, r3, #3
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	0d1b      	lsrs	r3, r3, #20
 800a0b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0b6:	fb02 f303 	mul.w	r3, r2, r3
 800a0ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a0bc:	e060      	b.n	800a180 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a0c4:	d107      	bne.n	800a0d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d104      	bne.n	800a0d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a0d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0dc:	d050      	beq.n	800a180 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a0de:	f7f9 f813 	bl	8003108 <HAL_GetTick>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d902      	bls.n	800a0f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d13d      	bne.n	800a170 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	685a      	ldr	r2, [r3, #4]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a102:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a10c:	d111      	bne.n	800a132 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a116:	d004      	beq.n	800a122 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a120:	d107      	bne.n	800a132 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a130:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a13a:	d10f      	bne.n	800a15c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a14a:	601a      	str	r2, [r3, #0]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a15a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a16c:	2303      	movs	r3, #3
 800a16e:	e010      	b.n	800a192 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d101      	bne.n	800a17a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a176:	2300      	movs	r3, #0
 800a178:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	3b01      	subs	r3, #1
 800a17e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	689a      	ldr	r2, [r3, #8]
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	4013      	ands	r3, r2
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d196      	bne.n	800a0be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3728      	adds	r7, #40	; 0x28
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20000018 	.word	0x20000018

0800a1a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af02      	add	r7, sp, #8
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1b4:	d111      	bne.n	800a1da <SPI_EndRxTransaction+0x3a>
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1be:	d004      	beq.n	800a1ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1c8:	d107      	bne.n	800a1da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1d8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	2180      	movs	r1, #128	; 0x80
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f7ff febd 	bl	8009f64 <SPI_WaitFlagStateUntilTimeout>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d007      	beq.n	800a200 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1f4:	f043 0220 	orr.w	r2, r3, #32
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e023      	b.n	800a248 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a208:	d11d      	bne.n	800a246 <SPI_EndRxTransaction+0xa6>
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a212:	d004      	beq.n	800a21e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a21c:	d113      	bne.n	800a246 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	9300      	str	r3, [sp, #0]
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	2200      	movs	r2, #0
 800a226:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f7ff ff22 	bl	800a074 <SPI_WaitFifoStateUntilTimeout>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d007      	beq.n	800a246 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a23a:	f043 0220 	orr.w	r2, r3, #32
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a242:	2303      	movs	r3, #3
 800a244:	e000      	b.n	800a248 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3710      	adds	r7, #16
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af02      	add	r7, sp, #8
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2200      	movs	r2, #0
 800a264:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f7ff ff03 	bl	800a074 <SPI_WaitFifoStateUntilTimeout>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d007      	beq.n	800a284 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a278:	f043 0220 	orr.w	r2, r3, #32
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a280:	2303      	movs	r3, #3
 800a282:	e027      	b.n	800a2d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	2200      	movs	r2, #0
 800a28c:	2180      	movs	r1, #128	; 0x80
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f7ff fe68 	bl	8009f64 <SPI_WaitFlagStateUntilTimeout>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d007      	beq.n	800a2aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a29e:	f043 0220 	orr.w	r2, r3, #32
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e014      	b.n	800a2d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f7ff fedc 	bl	800a074 <SPI_WaitFifoStateUntilTimeout>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d007      	beq.n	800a2d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2c6:	f043 0220 	orr.w	r2, r3, #32
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a2ce:	2303      	movs	r3, #3
 800a2d0:	e000      	b.n	800a2d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <LL_PWR_SetRadioBusyTrigger>:
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800a2e4:	4b06      	ldr	r3, [pc, #24]	; (800a300 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a2ec:	4904      	ldr	r1, [pc, #16]	; (800a300 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	608b      	str	r3, [r1, #8]
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bc80      	pop	{r7}
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	58000400 	.word	0x58000400

0800a304 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800a304:	b480      	push	{r7}
 800a306:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800a308:	4b05      	ldr	r3, [pc, #20]	; (800a320 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800a30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a30e:	4a04      	ldr	r2, [pc, #16]	; (800a320 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800a310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a318:	bf00      	nop
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bc80      	pop	{r7}
 800a31e:	4770      	bx	lr
 800a320:	58000400 	.word	0x58000400

0800a324 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800a324:	b480      	push	{r7}
 800a326:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800a328:	4b05      	ldr	r3, [pc, #20]	; (800a340 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800a32a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a32e:	4a04      	ldr	r2, [pc, #16]	; (800a340 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800a330:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a338:	bf00      	nop
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bc80      	pop	{r7}
 800a33e:	4770      	bx	lr
 800a340:	58000400 	.word	0x58000400

0800a344 <LL_PWR_ClearFlag_RFBUSY>:
{
 800a344:	b480      	push	{r7}
 800a346:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800a348:	4b03      	ldr	r3, [pc, #12]	; (800a358 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800a34a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a34e:	619a      	str	r2, [r3, #24]
}
 800a350:	bf00      	nop
 800a352:	46bd      	mov	sp, r7
 800a354:	bc80      	pop	{r7}
 800a356:	4770      	bx	lr
 800a358:	58000400 	.word	0x58000400

0800a35c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800a35c:	b480      	push	{r7}
 800a35e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800a360:	4b06      	ldr	r3, [pc, #24]	; (800a37c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	f003 0302 	and.w	r3, r3, #2
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d101      	bne.n	800a370 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800a36c:	2301      	movs	r3, #1
 800a36e:	e000      	b.n	800a372 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	46bd      	mov	sp, r7
 800a376:	bc80      	pop	{r7}
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	58000400 	.word	0x58000400

0800a380 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 800a380:	b480      	push	{r7}
 800a382:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800a384:	4b06      	ldr	r3, [pc, #24]	; (800a3a0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800a386:	695b      	ldr	r3, [r3, #20]
 800a388:	f003 0304 	and.w	r3, r3, #4
 800a38c:	2b04      	cmp	r3, #4
 800a38e:	d101      	bne.n	800a394 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800a390:	2301      	movs	r3, #1
 800a392:	e000      	b.n	800a396 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	46bd      	mov	sp, r7
 800a39a:	bc80      	pop	{r7}
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	58000400 	.word	0x58000400

0800a3a4 <LL_RCC_RF_DisableReset>:
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800a3a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a3b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a3b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800a3bc:	bf00      	nop
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bc80      	pop	{r7}
 800a3c2:	4770      	bx	lr

0800a3c4 <LL_RCC_IsRFUnderReset>:
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800a3c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3d8:	d101      	bne.n	800a3de <LL_RCC_IsRFUnderReset+0x1a>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e000      	b.n	800a3e0 <LL_RCC_IsRFUnderReset+0x1c>
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bc80      	pop	{r7}
 800a3e6:	4770      	bx	lr

0800a3e8 <LL_EXTI_EnableIT_32_63>:
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a3f0:	4b06      	ldr	r3, [pc, #24]	; (800a40c <LL_EXTI_EnableIT_32_63+0x24>)
 800a3f2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a3f6:	4905      	ldr	r1, [pc, #20]	; (800a40c <LL_EXTI_EnableIT_32_63+0x24>)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	bc80      	pop	{r7}
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	58000800 	.word	0x58000800

0800a410 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d103      	bne.n	800a426 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	73fb      	strb	r3, [r7, #15]
    return status;
 800a422:	7bfb      	ldrb	r3, [r7, #15]
 800a424:	e04b      	b.n	800a4be <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	799b      	ldrb	r3, [r3, #6]
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b00      	cmp	r3, #0
 800a432:	d105      	bne.n	800a440 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f7f8 fcbc 	bl	8002db8 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2202      	movs	r2, #2
 800a444:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 800a446:	f7ff ffad 	bl	800a3a4 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a44a:	4b1f      	ldr	r3, [pc, #124]	; (800a4c8 <HAL_SUBGHZ_Init+0xb8>)
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	4613      	mov	r3, r2
 800a450:	00db      	lsls	r3, r3, #3
 800a452:	1a9b      	subs	r3, r3, r2
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	0cdb      	lsrs	r3, r3, #19
 800a458:	2264      	movs	r2, #100	; 0x64
 800a45a:	fb02 f303 	mul.w	r3, r2, r3
 800a45e:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d105      	bne.n	800a472 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2201      	movs	r2, #1
 800a46e:	609a      	str	r2, [r3, #8]
      break;
 800a470:	e007      	b.n	800a482 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	3b01      	subs	r3, #1
 800a476:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 800a478:	f7ff ffa4 	bl	800a3c4 <LL_RCC_IsRFUnderReset>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1ee      	bne.n	800a460 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800a482:	f7ff ff3f 	bl	800a304 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800a486:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a48a:	f7ff ffad 	bl	800a3e8 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800a48e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a492:	f7ff ff23 	bl	800a2dc <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800a496:	f7ff ff55 	bl	800a344 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800a49a:	7bfb      	ldrb	r3, [r7, #15]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10a      	bne.n	800a4b6 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f000 faad 	bl	800aa04 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	719a      	strb	r2, [r3, #6]

  return status;
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	20000018 	.word	0x20000018

0800a4cc <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	607a      	str	r2, [r7, #4]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	460b      	mov	r3, r1
 800a4da:	817b      	strh	r3, [r7, #10]
 800a4dc:	4613      	mov	r3, r2
 800a4de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	799b      	ldrb	r3, [r3, #6]
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d14a      	bne.n	800a580 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	795b      	ldrb	r3, [r3, #5]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d101      	bne.n	800a4f6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800a4f2:	2302      	movs	r3, #2
 800a4f4:	e045      	b.n	800a582 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2202      	movs	r2, #2
 800a500:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f000 fb4c 	bl	800aba0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a508:	f7ff ff0c 	bl	800a324 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800a50c:	210d      	movs	r1, #13
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f000 fa98 	bl	800aa44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800a514:	897b      	ldrh	r3, [r7, #10]
 800a516:	0a1b      	lsrs	r3, r3, #8
 800a518:	b29b      	uxth	r3, r3
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	4619      	mov	r1, r3
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f000 fa90 	bl	800aa44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800a524:	897b      	ldrh	r3, [r7, #10]
 800a526:	b2db      	uxtb	r3, r3
 800a528:	4619      	mov	r1, r3
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f000 fa8a 	bl	800aa44 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a530:	2300      	movs	r3, #0
 800a532:	82bb      	strh	r3, [r7, #20]
 800a534:	e00a      	b.n	800a54c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a536:	8abb      	ldrh	r3, [r7, #20]
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	4413      	add	r3, r2
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	4619      	mov	r1, r3
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f000 fa7f 	bl	800aa44 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a546:	8abb      	ldrh	r3, [r7, #20]
 800a548:	3301      	adds	r3, #1
 800a54a:	82bb      	strh	r3, [r7, #20]
 800a54c:	8aba      	ldrh	r2, [r7, #20]
 800a54e:	893b      	ldrh	r3, [r7, #8]
 800a550:	429a      	cmp	r2, r3
 800a552:	d3f0      	bcc.n	800a536 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a554:	f7ff fed6 	bl	800a304 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f000 fb45 	bl	800abe8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d002      	beq.n	800a56c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	75fb      	strb	r3, [r7, #23]
 800a56a:	e001      	b.n	800a570 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a56c:	2300      	movs	r3, #0
 800a56e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2201      	movs	r2, #1
 800a574:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	715a      	strb	r2, [r3, #5]

    return status;
 800a57c:	7dfb      	ldrb	r3, [r7, #23]
 800a57e:	e000      	b.n	800a582 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a580:	2302      	movs	r3, #2
  }
}
 800a582:	4618      	mov	r0, r3
 800a584:	3718      	adds	r7, #24
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b088      	sub	sp, #32
 800a58e:	af00      	add	r7, sp, #0
 800a590:	60f8      	str	r0, [r7, #12]
 800a592:	607a      	str	r2, [r7, #4]
 800a594:	461a      	mov	r2, r3
 800a596:	460b      	mov	r3, r1
 800a598:	817b      	strh	r3, [r7, #10]
 800a59a:	4613      	mov	r3, r2
 800a59c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	799b      	ldrb	r3, [r3, #6]
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d14a      	bne.n	800a642 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	795b      	ldrb	r3, [r3, #5]
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d101      	bne.n	800a5b8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	e045      	b.n	800a644 <HAL_SUBGHZ_ReadRegisters+0xba>
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f000 faee 	bl	800aba0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a5c4:	f7ff feae 	bl	800a324 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800a5c8:	211d      	movs	r1, #29
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f000 fa3a 	bl	800aa44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800a5d0:	897b      	ldrh	r3, [r7, #10]
 800a5d2:	0a1b      	lsrs	r3, r3, #8
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	4619      	mov	r1, r3
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f000 fa32 	bl	800aa44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800a5e0:	897b      	ldrh	r3, [r7, #10]
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f000 fa2c 	bl	800aa44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f000 fa28 	bl	800aa44 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	82fb      	strh	r3, [r7, #22]
 800a5f8:	e009      	b.n	800a60e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a5fa:	69b9      	ldr	r1, [r7, #24]
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	f000 fa77 	bl	800aaf0 <SUBGHZSPI_Receive>
      pData++;
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	3301      	adds	r3, #1
 800a606:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a608:	8afb      	ldrh	r3, [r7, #22]
 800a60a:	3301      	adds	r3, #1
 800a60c:	82fb      	strh	r3, [r7, #22]
 800a60e:	8afa      	ldrh	r2, [r7, #22]
 800a610:	893b      	ldrh	r3, [r7, #8]
 800a612:	429a      	cmp	r2, r3
 800a614:	d3f1      	bcc.n	800a5fa <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a616:	f7ff fe75 	bl	800a304 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f000 fae4 	bl	800abe8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d002      	beq.n	800a62e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	77fb      	strb	r3, [r7, #31]
 800a62c:	e001      	b.n	800a632 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800a62e:	2300      	movs	r3, #0
 800a630:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2201      	movs	r2, #1
 800a636:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	715a      	strb	r2, [r3, #5]

    return status;
 800a63e:	7ffb      	ldrb	r3, [r7, #31]
 800a640:	e000      	b.n	800a644 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800a642:	2302      	movs	r3, #2
  }
}
 800a644:	4618      	mov	r0, r3
 800a646:	3720      	adds	r7, #32
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b086      	sub	sp, #24
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	607a      	str	r2, [r7, #4]
 800a656:	461a      	mov	r2, r3
 800a658:	460b      	mov	r3, r1
 800a65a:	72fb      	strb	r3, [r7, #11]
 800a65c:	4613      	mov	r3, r2
 800a65e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	799b      	ldrb	r3, [r3, #6]
 800a664:	b2db      	uxtb	r3, r3
 800a666:	2b01      	cmp	r3, #1
 800a668:	d14a      	bne.n	800a700 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	795b      	ldrb	r3, [r3, #5]
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d101      	bne.n	800a676 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800a672:	2302      	movs	r3, #2
 800a674:	e045      	b.n	800a702 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2201      	movs	r2, #1
 800a67a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f000 fa8f 	bl	800aba0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800a682:	7afb      	ldrb	r3, [r7, #11]
 800a684:	2b84      	cmp	r3, #132	; 0x84
 800a686:	d002      	beq.n	800a68e <HAL_SUBGHZ_ExecSetCmd+0x42>
 800a688:	7afb      	ldrb	r3, [r7, #11]
 800a68a:	2b94      	cmp	r3, #148	; 0x94
 800a68c:	d103      	bne.n	800a696 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2201      	movs	r2, #1
 800a692:	711a      	strb	r2, [r3, #4]
 800a694:	e002      	b.n	800a69c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a69c:	f7ff fe42 	bl	800a324 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a6a0:	7afb      	ldrb	r3, [r7, #11]
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 f9cd 	bl	800aa44 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	82bb      	strh	r3, [r7, #20]
 800a6ae:	e00a      	b.n	800a6c6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a6b0:	8abb      	ldrh	r3, [r7, #20]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f000 f9c2 	bl	800aa44 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a6c0:	8abb      	ldrh	r3, [r7, #20]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	82bb      	strh	r3, [r7, #20]
 800a6c6:	8aba      	ldrh	r2, [r7, #20]
 800a6c8:	893b      	ldrh	r3, [r7, #8]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d3f0      	bcc.n	800a6b0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a6ce:	f7ff fe19 	bl	800a304 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800a6d2:	7afb      	ldrb	r3, [r7, #11]
 800a6d4:	2b84      	cmp	r3, #132	; 0x84
 800a6d6:	d002      	beq.n	800a6de <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 fa85 	bl	800abe8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d002      	beq.n	800a6ec <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	75fb      	strb	r3, [r7, #23]
 800a6ea:	e001      	b.n	800a6f0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	715a      	strb	r2, [r3, #5]

    return status;
 800a6fc:	7dfb      	ldrb	r3, [r7, #23]
 800a6fe:	e000      	b.n	800a702 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a700:	2302      	movs	r3, #2
  }
}
 800a702:	4618      	mov	r0, r3
 800a704:	3718      	adds	r7, #24
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b088      	sub	sp, #32
 800a70e:	af00      	add	r7, sp, #0
 800a710:	60f8      	str	r0, [r7, #12]
 800a712:	607a      	str	r2, [r7, #4]
 800a714:	461a      	mov	r2, r3
 800a716:	460b      	mov	r3, r1
 800a718:	72fb      	strb	r3, [r7, #11]
 800a71a:	4613      	mov	r3, r2
 800a71c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	799b      	ldrb	r3, [r3, #6]
 800a726:	b2db      	uxtb	r3, r3
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d13d      	bne.n	800a7a8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	795b      	ldrb	r3, [r3, #5]
 800a730:	2b01      	cmp	r3, #1
 800a732:	d101      	bne.n	800a738 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800a734:	2302      	movs	r3, #2
 800a736:	e038      	b.n	800a7aa <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2201      	movs	r2, #1
 800a73c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a73e:	68f8      	ldr	r0, [r7, #12]
 800a740:	f000 fa2e 	bl	800aba0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a744:	f7ff fdee 	bl	800a324 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a748:	7afb      	ldrb	r3, [r7, #11]
 800a74a:	4619      	mov	r1, r3
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f000 f979 	bl	800aa44 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a752:	2100      	movs	r1, #0
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f000 f975 	bl	800aa44 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a75a:	2300      	movs	r3, #0
 800a75c:	82fb      	strh	r3, [r7, #22]
 800a75e:	e009      	b.n	800a774 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a760:	69b9      	ldr	r1, [r7, #24]
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f000 f9c4 	bl	800aaf0 <SUBGHZSPI_Receive>
      pData++;
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	3301      	adds	r3, #1
 800a76c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a76e:	8afb      	ldrh	r3, [r7, #22]
 800a770:	3301      	adds	r3, #1
 800a772:	82fb      	strh	r3, [r7, #22]
 800a774:	8afa      	ldrh	r2, [r7, #22]
 800a776:	893b      	ldrh	r3, [r7, #8]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d3f1      	bcc.n	800a760 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a77c:	f7ff fdc2 	bl	800a304 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f000 fa31 	bl	800abe8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d002      	beq.n	800a794 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	77fb      	strb	r3, [r7, #31]
 800a792:	e001      	b.n	800a798 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800a794:	2300      	movs	r3, #0
 800a796:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2201      	movs	r2, #1
 800a79c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	715a      	strb	r2, [r3, #5]

    return status;
 800a7a4:	7ffb      	ldrb	r3, [r7, #31]
 800a7a6:	e000      	b.n	800a7aa <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a7a8:	2302      	movs	r3, #2
  }
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3720      	adds	r7, #32
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b086      	sub	sp, #24
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	60f8      	str	r0, [r7, #12]
 800a7ba:	607a      	str	r2, [r7, #4]
 800a7bc:	461a      	mov	r2, r3
 800a7be:	460b      	mov	r3, r1
 800a7c0:	72fb      	strb	r3, [r7, #11]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	799b      	ldrb	r3, [r3, #6]
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d13e      	bne.n	800a84e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	795b      	ldrb	r3, [r3, #5]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d101      	bne.n	800a7dc <HAL_SUBGHZ_WriteBuffer+0x2a>
 800a7d8:	2302      	movs	r3, #2
 800a7da:	e039      	b.n	800a850 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f000 f9dc 	bl	800aba0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a7e8:	f7ff fd9c 	bl	800a324 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800a7ec:	210e      	movs	r1, #14
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f000 f928 	bl	800aa44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a7f4:	7afb      	ldrb	r3, [r7, #11]
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f000 f923 	bl	800aa44 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a7fe:	2300      	movs	r3, #0
 800a800:	82bb      	strh	r3, [r7, #20]
 800a802:	e00a      	b.n	800a81a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a804:	8abb      	ldrh	r3, [r7, #20]
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	4413      	add	r3, r2
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	4619      	mov	r1, r3
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f000 f918 	bl	800aa44 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a814:	8abb      	ldrh	r3, [r7, #20]
 800a816:	3301      	adds	r3, #1
 800a818:	82bb      	strh	r3, [r7, #20]
 800a81a:	8aba      	ldrh	r2, [r7, #20]
 800a81c:	893b      	ldrh	r3, [r7, #8]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d3f0      	bcc.n	800a804 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a822:	f7ff fd6f 	bl	800a304 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f000 f9de 	bl	800abe8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d002      	beq.n	800a83a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	75fb      	strb	r3, [r7, #23]
 800a838:	e001      	b.n	800a83e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800a83a:	2300      	movs	r3, #0
 800a83c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2201      	movs	r2, #1
 800a842:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	715a      	strb	r2, [r3, #5]

    return status;
 800a84a:	7dfb      	ldrb	r3, [r7, #23]
 800a84c:	e000      	b.n	800a850 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a84e:	2302      	movs	r3, #2
  }
}
 800a850:	4618      	mov	r0, r3
 800a852:	3718      	adds	r7, #24
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b088      	sub	sp, #32
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	607a      	str	r2, [r7, #4]
 800a862:	461a      	mov	r2, r3
 800a864:	460b      	mov	r3, r1
 800a866:	72fb      	strb	r3, [r7, #11]
 800a868:	4613      	mov	r3, r2
 800a86a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	799b      	ldrb	r3, [r3, #6]
 800a874:	b2db      	uxtb	r3, r3
 800a876:	2b01      	cmp	r3, #1
 800a878:	d141      	bne.n	800a8fe <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	795b      	ldrb	r3, [r3, #5]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d101      	bne.n	800a886 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800a882:	2302      	movs	r3, #2
 800a884:	e03c      	b.n	800a900 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2201      	movs	r2, #1
 800a88a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 f987 	bl	800aba0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a892:	f7ff fd47 	bl	800a324 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800a896:	211e      	movs	r1, #30
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 f8d3 	bl	800aa44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a89e:	7afb      	ldrb	r3, [r7, #11]
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f000 f8ce 	bl	800aa44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f000 f8ca 	bl	800aa44 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	82fb      	strh	r3, [r7, #22]
 800a8b4:	e009      	b.n	800a8ca <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a8b6:	69b9      	ldr	r1, [r7, #24]
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f000 f919 	bl	800aaf0 <SUBGHZSPI_Receive>
      pData++;
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a8c4:	8afb      	ldrh	r3, [r7, #22]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	82fb      	strh	r3, [r7, #22]
 800a8ca:	8afa      	ldrh	r2, [r7, #22]
 800a8cc:	893b      	ldrh	r3, [r7, #8]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d3f1      	bcc.n	800a8b6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a8d2:	f7ff fd17 	bl	800a304 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f000 f986 	bl	800abe8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	77fb      	strb	r3, [r7, #31]
 800a8e8:	e001      	b.n	800a8ee <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	715a      	strb	r2, [r3, #5]

    return status;
 800a8fa:	7ffb      	ldrb	r3, [r7, #31]
 800a8fc:	e000      	b.n	800a900 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a8fe:	2302      	movs	r3, #2
  }
}
 800a900:	4618      	mov	r0, r3
 800a902:	3720      	adds	r7, #32
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800a910:	2300      	movs	r3, #0
 800a912:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800a914:	f107 020c 	add.w	r2, r7, #12
 800a918:	2302      	movs	r3, #2
 800a91a:	2112      	movs	r1, #18
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7ff fef4 	bl	800a70a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800a922:	7b3b      	ldrb	r3, [r7, #12]
 800a924:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800a926:	89fb      	ldrh	r3, [r7, #14]
 800a928:	021b      	lsls	r3, r3, #8
 800a92a:	b21a      	sxth	r2, r3
 800a92c:	7b7b      	ldrb	r3, [r7, #13]
 800a92e:	b21b      	sxth	r3, r3
 800a930:	4313      	orrs	r3, r2
 800a932:	b21b      	sxth	r3, r3
 800a934:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800a936:	89fb      	ldrh	r3, [r7, #14]
 800a938:	f003 0301 	and.w	r3, r3, #1
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d002      	beq.n	800a946 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f014 fd3f 	bl	801f3c4 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800a946:	89fb      	ldrh	r3, [r7, #14]
 800a948:	085b      	lsrs	r3, r3, #1
 800a94a:	f003 0301 	and.w	r3, r3, #1
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d002      	beq.n	800a958 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f014 fd44 	bl	801f3e0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800a958:	89fb      	ldrh	r3, [r7, #14]
 800a95a:	089b      	lsrs	r3, r3, #2
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	2b00      	cmp	r3, #0
 800a962:	d002      	beq.n	800a96a <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f014 fd93 	bl	801f490 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800a96a:	89fb      	ldrh	r3, [r7, #14]
 800a96c:	08db      	lsrs	r3, r3, #3
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	d002      	beq.n	800a97c <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f014 fd98 	bl	801f4ac <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800a97c:	89fb      	ldrh	r3, [r7, #14]
 800a97e:	091b      	lsrs	r3, r3, #4
 800a980:	f003 0301 	and.w	r3, r3, #1
 800a984:	2b00      	cmp	r3, #0
 800a986:	d002      	beq.n	800a98e <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f014 fd9d 	bl	801f4c8 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800a98e:	89fb      	ldrh	r3, [r7, #14]
 800a990:	095b      	lsrs	r3, r3, #5
 800a992:	f003 0301 	and.w	r3, r3, #1
 800a996:	2b00      	cmp	r3, #0
 800a998:	d002      	beq.n	800a9a0 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f014 fd6a 	bl	801f474 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800a9a0:	89fb      	ldrh	r3, [r7, #14]
 800a9a2:	099b      	lsrs	r3, r3, #6
 800a9a4:	f003 0301 	and.w	r3, r3, #1
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f014 fd25 	bl	801f3fc <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800a9b2:	89fb      	ldrh	r3, [r7, #14]
 800a9b4:	09db      	lsrs	r3, r3, #7
 800a9b6:	f003 0301 	and.w	r3, r3, #1
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00e      	beq.n	800a9dc <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800a9be:	89fb      	ldrh	r3, [r7, #14]
 800a9c0:	0a1b      	lsrs	r3, r3, #8
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d004      	beq.n	800a9d4 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800a9ca:	2101      	movs	r1, #1
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f014 fd23 	bl	801f418 <HAL_SUBGHZ_CADStatusCallback>
 800a9d2:	e003      	b.n	800a9dc <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f014 fd1e 	bl	801f418 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800a9dc:	89fb      	ldrh	r3, [r7, #14]
 800a9de:	0a5b      	lsrs	r3, r3, #9
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d002      	beq.n	800a9ee <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f014 fd33 	bl	801f454 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 800a9ee:	f107 020c 	add.w	r2, r7, #12
 800a9f2:	2302      	movs	r3, #2
 800a9f4:	2102      	movs	r1, #2
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff fe28 	bl	800a64c <HAL_SUBGHZ_ExecSetCmd>
}
 800a9fc:	bf00      	nop
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800aa0c:	4b0c      	ldr	r3, [pc, #48]	; (800aa40 <SUBGHZSPI_Init+0x3c>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a0b      	ldr	r2, [pc, #44]	; (800aa40 <SUBGHZSPI_Init+0x3c>)
 800aa12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa16:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800aa18:	4a09      	ldr	r2, [pc, #36]	; (800aa40 <SUBGHZSPI_Init+0x3c>)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800aa20:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800aa22:	4b07      	ldr	r3, [pc, #28]	; (800aa40 <SUBGHZSPI_Init+0x3c>)
 800aa24:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800aa28:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800aa2a:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <SUBGHZSPI_Init+0x3c>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a04      	ldr	r2, [pc, #16]	; (800aa40 <SUBGHZSPI_Init+0x3c>)
 800aa30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa34:	6013      	str	r3, [r2, #0]
}
 800aa36:	bf00      	nop
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bc80      	pop	{r7}
 800aa3e:	4770      	bx	lr
 800aa40:	58010000 	.word	0x58010000

0800aa44 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800aa50:	2300      	movs	r3, #0
 800aa52:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800aa54:	4b23      	ldr	r3, [pc, #140]	; (800aae4 <SUBGHZSPI_Transmit+0xa0>)
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	00db      	lsls	r3, r3, #3
 800aa5c:	1a9b      	subs	r3, r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	0cdb      	lsrs	r3, r3, #19
 800aa62:	2264      	movs	r2, #100	; 0x64
 800aa64:	fb02 f303 	mul.w	r3, r2, r3
 800aa68:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d105      	bne.n	800aa7c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	609a      	str	r2, [r3, #8]
      break;
 800aa7a:	e008      	b.n	800aa8e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800aa82:	4b19      	ldr	r3, [pc, #100]	; (800aae8 <SUBGHZSPI_Transmit+0xa4>)
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	f003 0302 	and.w	r3, r3, #2
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d1ed      	bne.n	800aa6a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800aa8e:	4b17      	ldr	r3, [pc, #92]	; (800aaec <SUBGHZSPI_Transmit+0xa8>)
 800aa90:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	78fa      	ldrb	r2, [r7, #3]
 800aa96:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800aa98:	4b12      	ldr	r3, [pc, #72]	; (800aae4 <SUBGHZSPI_Transmit+0xa0>)
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	1a9b      	subs	r3, r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	0cdb      	lsrs	r3, r3, #19
 800aaa6:	2264      	movs	r2, #100	; 0x64
 800aaa8:	fb02 f303 	mul.w	r3, r2, r3
 800aaac:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d105      	bne.n	800aac0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	609a      	str	r2, [r3, #8]
      break;
 800aabe:	e008      	b.n	800aad2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	3b01      	subs	r3, #1
 800aac4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800aac6:	4b08      	ldr	r3, [pc, #32]	; (800aae8 <SUBGHZSPI_Transmit+0xa4>)
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	f003 0301 	and.w	r3, r3, #1
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d1ed      	bne.n	800aaae <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800aad2:	4b05      	ldr	r3, [pc, #20]	; (800aae8 <SUBGHZSPI_Transmit+0xa4>)
 800aad4:	68db      	ldr	r3, [r3, #12]

  return status;
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	371c      	adds	r7, #28
 800aadc:	46bd      	mov	sp, r7
 800aade:	bc80      	pop	{r7}
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	20000018 	.word	0x20000018
 800aae8:	58010000 	.word	0x58010000
 800aaec:	5801000c 	.word	0x5801000c

0800aaf0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b087      	sub	sp, #28
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800aafe:	4b25      	ldr	r3, [pc, #148]	; (800ab94 <SUBGHZSPI_Receive+0xa4>)
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	4613      	mov	r3, r2
 800ab04:	00db      	lsls	r3, r3, #3
 800ab06:	1a9b      	subs	r3, r3, r2
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	0cdb      	lsrs	r3, r3, #19
 800ab0c:	2264      	movs	r2, #100	; 0x64
 800ab0e:	fb02 f303 	mul.w	r3, r2, r3
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d105      	bne.n	800ab26 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	609a      	str	r2, [r3, #8]
      break;
 800ab24:	e008      	b.n	800ab38 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800ab2c:	4b1a      	ldr	r3, [pc, #104]	; (800ab98 <SUBGHZSPI_Receive+0xa8>)
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	f003 0302 	and.w	r3, r3, #2
 800ab34:	2b02      	cmp	r3, #2
 800ab36:	d1ed      	bne.n	800ab14 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800ab38:	4b18      	ldr	r3, [pc, #96]	; (800ab9c <SUBGHZSPI_Receive+0xac>)
 800ab3a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	22ff      	movs	r2, #255	; 0xff
 800ab40:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800ab42:	4b14      	ldr	r3, [pc, #80]	; (800ab94 <SUBGHZSPI_Receive+0xa4>)
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	4613      	mov	r3, r2
 800ab48:	00db      	lsls	r3, r3, #3
 800ab4a:	1a9b      	subs	r3, r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	0cdb      	lsrs	r3, r3, #19
 800ab50:	2264      	movs	r2, #100	; 0x64
 800ab52:	fb02 f303 	mul.w	r3, r2, r3
 800ab56:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d105      	bne.n	800ab6a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2201      	movs	r2, #1
 800ab66:	609a      	str	r2, [r3, #8]
      break;
 800ab68:	e008      	b.n	800ab7c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800ab70:	4b09      	ldr	r3, [pc, #36]	; (800ab98 <SUBGHZSPI_Receive+0xa8>)
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	f003 0301 	and.w	r3, r3, #1
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d1ed      	bne.n	800ab58 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800ab7c:	4b06      	ldr	r3, [pc, #24]	; (800ab98 <SUBGHZSPI_Receive+0xa8>)
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	b2da      	uxtb	r2, r3
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	701a      	strb	r2, [r3, #0]

  return status;
 800ab86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	371c      	adds	r7, #28
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bc80      	pop	{r7}
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	20000018 	.word	0x20000018
 800ab98:	58010000 	.word	0x58010000
 800ab9c:	5801000c 	.word	0x5801000c

0800aba0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	791b      	ldrb	r3, [r3, #4]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d111      	bne.n	800abd4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800abb0:	4b0c      	ldr	r3, [pc, #48]	; (800abe4 <SUBGHZ_CheckDeviceReady+0x44>)
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	4613      	mov	r3, r2
 800abb6:	005b      	lsls	r3, r3, #1
 800abb8:	4413      	add	r3, r2
 800abba:	00db      	lsls	r3, r3, #3
 800abbc:	0c1b      	lsrs	r3, r3, #16
 800abbe:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800abc0:	f7ff fbb0 	bl	800a324 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	3b01      	subs	r3, #1
 800abc8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1f9      	bne.n	800abc4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800abd0:	f7ff fb98 	bl	800a304 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 f807 	bl	800abe8 <SUBGHZ_WaitOnBusy>
 800abda:	4603      	mov	r3, r0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	20000018 	.word	0x20000018

0800abe8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b086      	sub	sp, #24
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800abf0:	2300      	movs	r3, #0
 800abf2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800abf4:	4b12      	ldr	r3, [pc, #72]	; (800ac40 <SUBGHZ_WaitOnBusy+0x58>)
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	4613      	mov	r3, r2
 800abfa:	005b      	lsls	r3, r3, #1
 800abfc:	4413      	add	r3, r2
 800abfe:	00db      	lsls	r3, r3, #3
 800ac00:	0d1b      	lsrs	r3, r3, #20
 800ac02:	2264      	movs	r2, #100	; 0x64
 800ac04:	fb02 f303 	mul.w	r3, r2, r3
 800ac08:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800ac0a:	f7ff fbb9 	bl	800a380 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800ac0e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d105      	bne.n	800ac22 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2202      	movs	r2, #2
 800ac1e:	609a      	str	r2, [r3, #8]
      break;
 800ac20:	e009      	b.n	800ac36 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	3b01      	subs	r3, #1
 800ac26:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800ac28:	f7ff fb98 	bl	800a35c <LL_PWR_IsActiveFlag_RFBUSYS>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	4013      	ands	r3, r2
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d0e9      	beq.n	800ac0a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800ac36:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3718      	adds	r7, #24
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	20000018 	.word	0x20000018

0800ac44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d101      	bne.n	800ac56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ac52:	2301      	movs	r3, #1
 800ac54:	e049      	b.n	800acea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d106      	bne.n	800ac70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f7f8 fb48 	bl	8003300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	3304      	adds	r3, #4
 800ac80:	4619      	mov	r1, r3
 800ac82:	4610      	mov	r0, r2
 800ac84:	f000 f9c6 	bl	800b014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2201      	movs	r2, #1
 800ace4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3708      	adds	r7, #8
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
	...

0800acf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d001      	beq.n	800ad0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e036      	b.n	800ad7a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2202      	movs	r2, #2
 800ad10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	68da      	ldr	r2, [r3, #12]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f042 0201 	orr.w	r2, r2, #1
 800ad22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a16      	ldr	r2, [pc, #88]	; (800ad84 <HAL_TIM_Base_Start_IT+0x90>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d004      	beq.n	800ad38 <HAL_TIM_Base_Start_IT+0x44>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad36:	d115      	bne.n	800ad64 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	689a      	ldr	r2, [r3, #8]
 800ad3e:	4b12      	ldr	r3, [pc, #72]	; (800ad88 <HAL_TIM_Base_Start_IT+0x94>)
 800ad40:	4013      	ands	r3, r2
 800ad42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2b06      	cmp	r3, #6
 800ad48:	d015      	beq.n	800ad76 <HAL_TIM_Base_Start_IT+0x82>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad50:	d011      	beq.n	800ad76 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f042 0201 	orr.w	r2, r2, #1
 800ad60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad62:	e008      	b.n	800ad76 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f042 0201 	orr.w	r2, r2, #1
 800ad72:	601a      	str	r2, [r3, #0]
 800ad74:	e000      	b.n	800ad78 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3714      	adds	r7, #20
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bc80      	pop	{r7}
 800ad82:	4770      	bx	lr
 800ad84:	40012c00 	.word	0x40012c00
 800ad88:	00010007 	.word	0x00010007

0800ad8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	f003 0302 	and.w	r3, r3, #2
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	d122      	bne.n	800ade8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	f003 0302 	and.w	r3, r3, #2
 800adac:	2b02      	cmp	r3, #2
 800adae:	d11b      	bne.n	800ade8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f06f 0202 	mvn.w	r2, #2
 800adb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2201      	movs	r2, #1
 800adbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	699b      	ldr	r3, [r3, #24]
 800adc6:	f003 0303 	and.w	r3, r3, #3
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d003      	beq.n	800add6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 f904 	bl	800afdc <HAL_TIM_IC_CaptureCallback>
 800add4:	e005      	b.n	800ade2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f8f7 	bl	800afca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 f906 	bl	800afee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	f003 0304 	and.w	r3, r3, #4
 800adf2:	2b04      	cmp	r3, #4
 800adf4:	d122      	bne.n	800ae3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	f003 0304 	and.w	r3, r3, #4
 800ae00:	2b04      	cmp	r3, #4
 800ae02:	d11b      	bne.n	800ae3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f06f 0204 	mvn.w	r2, #4
 800ae0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2202      	movs	r2, #2
 800ae12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	699b      	ldr	r3, [r3, #24]
 800ae1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d003      	beq.n	800ae2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f8da 	bl	800afdc <HAL_TIM_IC_CaptureCallback>
 800ae28:	e005      	b.n	800ae36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f8cd 	bl	800afca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 f8dc 	bl	800afee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	f003 0308 	and.w	r3, r3, #8
 800ae46:	2b08      	cmp	r3, #8
 800ae48:	d122      	bne.n	800ae90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	f003 0308 	and.w	r3, r3, #8
 800ae54:	2b08      	cmp	r3, #8
 800ae56:	d11b      	bne.n	800ae90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f06f 0208 	mvn.w	r2, #8
 800ae60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2204      	movs	r2, #4
 800ae66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	69db      	ldr	r3, [r3, #28]
 800ae6e:	f003 0303 	and.w	r3, r3, #3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f8b0 	bl	800afdc <HAL_TIM_IC_CaptureCallback>
 800ae7c:	e005      	b.n	800ae8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f8a3 	bl	800afca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 f8b2 	bl	800afee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	691b      	ldr	r3, [r3, #16]
 800ae96:	f003 0310 	and.w	r3, r3, #16
 800ae9a:	2b10      	cmp	r3, #16
 800ae9c:	d122      	bne.n	800aee4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	f003 0310 	and.w	r3, r3, #16
 800aea8:	2b10      	cmp	r3, #16
 800aeaa:	d11b      	bne.n	800aee4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f06f 0210 	mvn.w	r2, #16
 800aeb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2208      	movs	r2, #8
 800aeba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	69db      	ldr	r3, [r3, #28]
 800aec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f886 	bl	800afdc <HAL_TIM_IC_CaptureCallback>
 800aed0:	e005      	b.n	800aede <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 f879 	bl	800afca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 f888 	bl	800afee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	f003 0301 	and.w	r3, r3, #1
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d10e      	bne.n	800af10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	f003 0301 	and.w	r3, r3, #1
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d107      	bne.n	800af10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f06f 0201 	mvn.w	r2, #1
 800af08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f7f7 fbfa 	bl	8002704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af1a:	2b80      	cmp	r3, #128	; 0x80
 800af1c:	d10e      	bne.n	800af3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af28:	2b80      	cmp	r3, #128	; 0x80
 800af2a:	d107      	bne.n	800af3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800af34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f8d7 	bl	800b0ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af4a:	d10e      	bne.n	800af6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af56:	2b80      	cmp	r3, #128	; 0x80
 800af58:	d107      	bne.n	800af6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800af62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 f8c9 	bl	800b0fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af74:	2b40      	cmp	r3, #64	; 0x40
 800af76:	d10e      	bne.n	800af96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af82:	2b40      	cmp	r3, #64	; 0x40
 800af84:	d107      	bne.n	800af96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 f835 	bl	800b000 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	f003 0320 	and.w	r3, r3, #32
 800afa0:	2b20      	cmp	r3, #32
 800afa2:	d10e      	bne.n	800afc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	f003 0320 	and.w	r3, r3, #32
 800afae:	2b20      	cmp	r3, #32
 800afb0:	d107      	bne.n	800afc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f06f 0220 	mvn.w	r2, #32
 800afba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f88b 	bl	800b0d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800afc2:	bf00      	nop
 800afc4:	3708      	adds	r7, #8
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800afca:	b480      	push	{r7}
 800afcc:	b083      	sub	sp, #12
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800afd2:	bf00      	nop
 800afd4:	370c      	adds	r7, #12
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bc80      	pop	{r7}
 800afda:	4770      	bx	lr

0800afdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800afe4:	bf00      	nop
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	bc80      	pop	{r7}
 800afec:	4770      	bx	lr

0800afee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800afee:	b480      	push	{r7}
 800aff0:	b083      	sub	sp, #12
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aff6:	bf00      	nop
 800aff8:	370c      	adds	r7, #12
 800affa:	46bd      	mov	sp, r7
 800affc:	bc80      	pop	{r7}
 800affe:	4770      	bx	lr

0800b000 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b008:	bf00      	nop
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bc80      	pop	{r7}
 800b010:	4770      	bx	lr
	...

0800b014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a29      	ldr	r2, [pc, #164]	; (800b0cc <TIM_Base_SetConfig+0xb8>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d003      	beq.n	800b034 <TIM_Base_SetConfig+0x20>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b032:	d108      	bne.n	800b046 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b03a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	4313      	orrs	r3, r2
 800b044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	4a20      	ldr	r2, [pc, #128]	; (800b0cc <TIM_Base_SetConfig+0xb8>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d00b      	beq.n	800b066 <TIM_Base_SetConfig+0x52>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b054:	d007      	beq.n	800b066 <TIM_Base_SetConfig+0x52>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4a1d      	ldr	r2, [pc, #116]	; (800b0d0 <TIM_Base_SetConfig+0xbc>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d003      	beq.n	800b066 <TIM_Base_SetConfig+0x52>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4a1c      	ldr	r2, [pc, #112]	; (800b0d4 <TIM_Base_SetConfig+0xc0>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d108      	bne.n	800b078 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b06c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	68fa      	ldr	r2, [r7, #12]
 800b074:	4313      	orrs	r3, r2
 800b076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	695b      	ldr	r3, [r3, #20]
 800b082:	4313      	orrs	r3, r2
 800b084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	689a      	ldr	r2, [r3, #8]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4a0b      	ldr	r2, [pc, #44]	; (800b0cc <TIM_Base_SetConfig+0xb8>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d007      	beq.n	800b0b4 <TIM_Base_SetConfig+0xa0>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4a0a      	ldr	r2, [pc, #40]	; (800b0d0 <TIM_Base_SetConfig+0xbc>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d003      	beq.n	800b0b4 <TIM_Base_SetConfig+0xa0>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a09      	ldr	r2, [pc, #36]	; (800b0d4 <TIM_Base_SetConfig+0xc0>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d103      	bne.n	800b0bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	691a      	ldr	r2, [r3, #16]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	615a      	str	r2, [r3, #20]
}
 800b0c2:	bf00      	nop
 800b0c4:	3714      	adds	r7, #20
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bc80      	pop	{r7}
 800b0ca:	4770      	bx	lr
 800b0cc:	40012c00 	.word	0x40012c00
 800b0d0:	40014400 	.word	0x40014400
 800b0d4:	40014800 	.word	0x40014800

0800b0d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b0e0:	bf00      	nop
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bc80      	pop	{r7}
 800b0e8:	4770      	bx	lr

0800b0ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b0ea:	b480      	push	{r7}
 800b0ec:	b083      	sub	sp, #12
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b0f2:	bf00      	nop
 800b0f4:	370c      	adds	r7, #12
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bc80      	pop	{r7}
 800b0fa:	4770      	bx	lr

0800b0fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b104:	bf00      	nop
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	bc80      	pop	{r7}
 800b10c:	4770      	bx	lr

0800b10e <LL_RCC_GetUSARTClockSource>:
{
 800b10e:	b480      	push	{r7}
 800b110:	b083      	sub	sp, #12
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800b116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b11a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	401a      	ands	r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	041b      	lsls	r3, r3, #16
 800b126:	4313      	orrs	r3, r2
}
 800b128:	4618      	mov	r0, r3
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bc80      	pop	{r7}
 800b130:	4770      	bx	lr

0800b132 <LL_RCC_GetLPUARTClockSource>:
{
 800b132:	b480      	push	{r7}
 800b134:	b083      	sub	sp, #12
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800b13a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b13e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4013      	ands	r3, r2
}
 800b146:	4618      	mov	r0, r3
 800b148:	370c      	adds	r7, #12
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bc80      	pop	{r7}
 800b14e:	4770      	bx	lr

0800b150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d101      	bne.n	800b162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b15e:	2301      	movs	r3, #1
 800b160:	e042      	b.n	800b1e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d106      	bne.n	800b17a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f7f8 fc51 	bl	8003a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2224      	movs	r2, #36	; 0x24
 800b17e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f022 0201 	bic.w	r2, r2, #1
 800b190:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fcde 	bl	800bb54 <UART_SetConfig>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d101      	bne.n	800b1a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e022      	b.n	800b1e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d002      	beq.n	800b1b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 ff46 	bl	800c03c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	685a      	ldr	r2, [r3, #4]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	689a      	ldr	r2, [r3, #8]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b1ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f042 0201 	orr.w	r2, r2, #1
 800b1de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 ffcc 	bl	800c17e <UART_CheckIdleState>
 800b1e6:	4603      	mov	r3, r0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b08a      	sub	sp, #40	; 0x28
 800b1f4:	af02      	add	r7, sp, #8
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	603b      	str	r3, [r7, #0]
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b206:	2b20      	cmp	r3, #32
 800b208:	f040 8083 	bne.w	800b312 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d002      	beq.n	800b218 <HAL_UART_Transmit+0x28>
 800b212:	88fb      	ldrh	r3, [r7, #6]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d101      	bne.n	800b21c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b218:	2301      	movs	r3, #1
 800b21a:	e07b      	b.n	800b314 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b222:	2b01      	cmp	r3, #1
 800b224:	d101      	bne.n	800b22a <HAL_UART_Transmit+0x3a>
 800b226:	2302      	movs	r3, #2
 800b228:	e074      	b.n	800b314 <HAL_UART_Transmit+0x124>
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2201      	movs	r2, #1
 800b22e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2200      	movs	r2, #0
 800b236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2221      	movs	r2, #33	; 0x21
 800b23e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b242:	f7f7 ff61 	bl	8003108 <HAL_GetTick>
 800b246:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	88fa      	ldrh	r2, [r7, #6]
 800b24c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	88fa      	ldrh	r2, [r7, #6]
 800b254:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b260:	d108      	bne.n	800b274 <HAL_UART_Transmit+0x84>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	691b      	ldr	r3, [r3, #16]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d104      	bne.n	800b274 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b26a:	2300      	movs	r3, #0
 800b26c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	61bb      	str	r3, [r7, #24]
 800b272:	e003      	b.n	800b27c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b278:	2300      	movs	r3, #0
 800b27a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b284:	e02c      	b.n	800b2e0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	9300      	str	r3, [sp, #0]
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	2200      	movs	r2, #0
 800b28e:	2180      	movs	r1, #128	; 0x80
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f000 ffbf 	bl	800c214 <UART_WaitOnFlagUntilTimeout>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d001      	beq.n	800b2a0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b29c:	2303      	movs	r3, #3
 800b29e:	e039      	b.n	800b314 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d10b      	bne.n	800b2be <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	881b      	ldrh	r3, [r3, #0]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	3302      	adds	r3, #2
 800b2ba:	61bb      	str	r3, [r7, #24]
 800b2bc:	e007      	b.n	800b2ce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	781a      	ldrb	r2, [r3, #0]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	b29a      	uxth	r2, r3
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1cc      	bne.n	800b286 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	2140      	movs	r1, #64	; 0x40
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f000 ff8c 	bl	800c214 <UART_WaitOnFlagUntilTimeout>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d001      	beq.n	800b306 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b302:	2303      	movs	r3, #3
 800b304:	e006      	b.n	800b314 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2220      	movs	r2, #32
 800b30a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b30e:	2300      	movs	r3, #0
 800b310:	e000      	b.n	800b314 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b312:	2302      	movs	r3, #2
  }
}
 800b314:	4618      	mov	r0, r3
 800b316:	3720      	adds	r7, #32
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b08a      	sub	sp, #40	; 0x28
 800b320:	af00      	add	r7, sp, #0
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	4613      	mov	r3, r2
 800b328:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b330:	2b20      	cmp	r3, #32
 800b332:	d142      	bne.n	800b3ba <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d002      	beq.n	800b340 <HAL_UART_Receive_IT+0x24>
 800b33a:	88fb      	ldrh	r3, [r7, #6]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d101      	bne.n	800b344 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	e03b      	b.n	800b3bc <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d101      	bne.n	800b352 <HAL_UART_Receive_IT+0x36>
 800b34e:	2302      	movs	r3, #2
 800b350:	e034      	b.n	800b3bc <HAL_UART_Receive_IT+0xa0>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2201      	movs	r2, #1
 800b356:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2200      	movs	r2, #0
 800b35e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a17      	ldr	r2, [pc, #92]	; (800b3c4 <HAL_UART_Receive_IT+0xa8>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d01f      	beq.n	800b3aa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b374:	2b00      	cmp	r3, #0
 800b376:	d018      	beq.n	800b3aa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	e853 3f00 	ldrex	r3, [r3]
 800b384:	613b      	str	r3, [r7, #16]
   return(result);
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b38c:	627b      	str	r3, [r7, #36]	; 0x24
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	461a      	mov	r2, r3
 800b394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b396:	623b      	str	r3, [r7, #32]
 800b398:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39a:	69f9      	ldr	r1, [r7, #28]
 800b39c:	6a3a      	ldr	r2, [r7, #32]
 800b39e:	e841 2300 	strex	r3, r2, [r1]
 800b3a2:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1e6      	bne.n	800b378 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800b3aa:	88fb      	ldrh	r3, [r7, #6]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	68b9      	ldr	r1, [r7, #8]
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f000 fff7 	bl	800c3a4 <UART_Start_Receive_IT>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	e000      	b.n	800b3bc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b3ba:	2302      	movs	r3, #2
  }
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3728      	adds	r7, #40	; 0x28
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	40008000 	.word	0x40008000

0800b3c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b08a      	sub	sp, #40	; 0x28
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3dc:	2b20      	cmp	r3, #32
 800b3de:	d17a      	bne.n	800b4d6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d002      	beq.n	800b3ec <HAL_UART_Transmit_DMA+0x24>
 800b3e6:	88fb      	ldrh	r3, [r7, #6]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d101      	bne.n	800b3f0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e073      	b.n	800b4d8 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d101      	bne.n	800b3fe <HAL_UART_Transmit_DMA+0x36>
 800b3fa:	2302      	movs	r3, #2
 800b3fc:	e06c      	b.n	800b4d8 <HAL_UART_Transmit_DMA+0x110>
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2201      	movs	r2, #1
 800b402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	88fa      	ldrh	r2, [r7, #6]
 800b410:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	88fa      	ldrh	r2, [r7, #6]
 800b418:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2221      	movs	r2, #33	; 0x21
 800b428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b430:	2b00      	cmp	r3, #0
 800b432:	d02c      	beq.n	800b48e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b438:	4a29      	ldr	r2, [pc, #164]	; (800b4e0 <HAL_UART_Transmit_DMA+0x118>)
 800b43a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b440:	4a28      	ldr	r2, [pc, #160]	; (800b4e4 <HAL_UART_Transmit_DMA+0x11c>)
 800b442:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b448:	4a27      	ldr	r2, [pc, #156]	; (800b4e8 <HAL_UART_Transmit_DMA+0x120>)
 800b44a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b450:	2200      	movs	r2, #0
 800b452:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b45c:	4619      	mov	r1, r3
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	3328      	adds	r3, #40	; 0x28
 800b464:	461a      	mov	r2, r3
 800b466:	88fb      	ldrh	r3, [r7, #6]
 800b468:	f7fa f99e 	bl	80057a8 <HAL_DMA_Start_IT>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00d      	beq.n	800b48e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2210      	movs	r2, #16
 800b476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2200      	movs	r2, #0
 800b47e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2220      	movs	r2, #32
 800b486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	e024      	b.n	800b4d8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2240      	movs	r2, #64	; 0x40
 800b494:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2200      	movs	r2, #0
 800b49a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3308      	adds	r3, #8
 800b4a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	e853 3f00 	ldrex	r3, [r3]
 800b4ac:	613b      	str	r3, [r7, #16]
   return(result);
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4b4:	627b      	str	r3, [r7, #36]	; 0x24
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	3308      	adds	r3, #8
 800b4bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4be:	623a      	str	r2, [r7, #32]
 800b4c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c2:	69f9      	ldr	r1, [r7, #28]
 800b4c4:	6a3a      	ldr	r2, [r7, #32]
 800b4c6:	e841 2300 	strex	r3, r2, [r1]
 800b4ca:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1e5      	bne.n	800b49e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	e000      	b.n	800b4d8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800b4d6:	2302      	movs	r3, #2
  }
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3728      	adds	r7, #40	; 0x28
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	0800c88f 	.word	0x0800c88f
 800b4e4:	0800c929 	.word	0x0800c929
 800b4e8:	0800caa3 	.word	0x0800caa3

0800b4ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b0ba      	sub	sp, #232	; 0xe8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	69db      	ldr	r3, [r3, #28]
 800b4fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b512:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b516:	f640 030f 	movw	r3, #2063	; 0x80f
 800b51a:	4013      	ands	r3, r2
 800b51c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b520:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b524:	2b00      	cmp	r3, #0
 800b526:	d11b      	bne.n	800b560 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b52c:	f003 0320 	and.w	r3, r3, #32
 800b530:	2b00      	cmp	r3, #0
 800b532:	d015      	beq.n	800b560 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b538:	f003 0320 	and.w	r3, r3, #32
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d105      	bne.n	800b54c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d009      	beq.n	800b560 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b550:	2b00      	cmp	r3, #0
 800b552:	f000 82d6 	beq.w	800bb02 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	4798      	blx	r3
      }
      return;
 800b55e:	e2d0      	b.n	800bb02 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b560:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b564:	2b00      	cmp	r3, #0
 800b566:	f000 811f 	beq.w	800b7a8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b56a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b56e:	4b8b      	ldr	r3, [pc, #556]	; (800b79c <HAL_UART_IRQHandler+0x2b0>)
 800b570:	4013      	ands	r3, r2
 800b572:	2b00      	cmp	r3, #0
 800b574:	d106      	bne.n	800b584 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b576:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b57a:	4b89      	ldr	r3, [pc, #548]	; (800b7a0 <HAL_UART_IRQHandler+0x2b4>)
 800b57c:	4013      	ands	r3, r2
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f000 8112 	beq.w	800b7a8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b588:	f003 0301 	and.w	r3, r3, #1
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d011      	beq.n	800b5b4 <HAL_UART_IRQHandler+0xc8>
 800b590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00b      	beq.n	800b5b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5aa:	f043 0201 	orr.w	r2, r3, #1
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5b8:	f003 0302 	and.w	r3, r3, #2
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d011      	beq.n	800b5e4 <HAL_UART_IRQHandler+0xf8>
 800b5c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5c4:	f003 0301 	and.w	r3, r3, #1
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00b      	beq.n	800b5e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2202      	movs	r2, #2
 800b5d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5da:	f043 0204 	orr.w	r2, r3, #4
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5e8:	f003 0304 	and.w	r3, r3, #4
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d011      	beq.n	800b614 <HAL_UART_IRQHandler+0x128>
 800b5f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5f4:	f003 0301 	and.w	r3, r3, #1
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00b      	beq.n	800b614 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2204      	movs	r2, #4
 800b602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b60a:	f043 0202 	orr.w	r2, r3, #2
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b618:	f003 0308 	and.w	r3, r3, #8
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d017      	beq.n	800b650 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b624:	f003 0320 	and.w	r3, r3, #32
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d105      	bne.n	800b638 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b62c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b630:	4b5a      	ldr	r3, [pc, #360]	; (800b79c <HAL_UART_IRQHandler+0x2b0>)
 800b632:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00b      	beq.n	800b650 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2208      	movs	r2, #8
 800b63e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b646:	f043 0208 	orr.w	r2, r3, #8
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d012      	beq.n	800b682 <HAL_UART_IRQHandler+0x196>
 800b65c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b660:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00c      	beq.n	800b682 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b670:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b678:	f043 0220 	orr.w	r2, r3, #32
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f000 823c 	beq.w	800bb06 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b692:	f003 0320 	and.w	r3, r3, #32
 800b696:	2b00      	cmp	r3, #0
 800b698:	d013      	beq.n	800b6c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b69a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b69e:	f003 0320 	and.w	r3, r3, #32
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d105      	bne.n	800b6b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b6a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d007      	beq.n	800b6c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d003      	beq.n	800b6c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6d6:	2b40      	cmp	r3, #64	; 0x40
 800b6d8:	d005      	beq.n	800b6e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b6da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d04f      	beq.n	800b786 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f001 f86c 	bl	800c7c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f6:	2b40      	cmp	r3, #64	; 0x40
 800b6f8:	d141      	bne.n	800b77e <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	3308      	adds	r3, #8
 800b700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b704:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b708:	e853 3f00 	ldrex	r3, [r3]
 800b70c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	3308      	adds	r3, #8
 800b722:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b726:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b72a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b732:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b736:	e841 2300 	strex	r3, r2, [r1]
 800b73a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b73e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d1d9      	bne.n	800b6fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d013      	beq.n	800b776 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b752:	4a14      	ldr	r2, [pc, #80]	; (800b7a4 <HAL_UART_IRQHandler+0x2b8>)
 800b754:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7fa f900 	bl	8005960 <HAL_DMA_Abort_IT>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d017      	beq.n	800b796 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b770:	4610      	mov	r0, r2
 800b772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b774:	e00f      	b.n	800b796 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 f9e2 	bl	800bb40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b77c:	e00b      	b.n	800b796 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f9de 	bl	800bb40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b784:	e007      	b.n	800b796 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 f9da 	bl	800bb40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b794:	e1b7      	b.n	800bb06 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b796:	bf00      	nop
    return;
 800b798:	e1b5      	b.n	800bb06 <HAL_UART_IRQHandler+0x61a>
 800b79a:	bf00      	nop
 800b79c:	10000001 	.word	0x10000001
 800b7a0:	04000120 	.word	0x04000120
 800b7a4:	0800cb23 	.word	0x0800cb23

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	f040 814a 	bne.w	800ba46 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800b7b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7b6:	f003 0310 	and.w	r3, r3, #16
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f000 8143 	beq.w	800ba46 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800b7c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7c4:	f003 0310 	and.w	r3, r3, #16
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f000 813c 	beq.w	800ba46 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2210      	movs	r2, #16
 800b7d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7e0:	2b40      	cmp	r3, #64	; 0x40
 800b7e2:	f040 80b5 	bne.w	800b950 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800b7f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	f000 8187 	beq.w	800bb0a <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b806:	429a      	cmp	r2, r3
 800b808:	f080 817f 	bcs.w	800bb0a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b812:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f003 0320 	and.w	r3, r3, #32
 800b822:	2b00      	cmp	r3, #0
 800b824:	f040 8086 	bne.w	800b934 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b830:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b834:	e853 3f00 	ldrex	r3, [r3]
 800b838:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b83c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b844:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	461a      	mov	r2, r3
 800b84e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b852:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b856:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b85a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b85e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b862:	e841 2300 	strex	r3, r2, [r1]
 800b866:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b86a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1da      	bne.n	800b828 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	3308      	adds	r3, #8
 800b878:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b87c:	e853 3f00 	ldrex	r3, [r3]
 800b880:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b884:	f023 0301 	bic.w	r3, r3, #1
 800b888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	3308      	adds	r3, #8
 800b892:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b896:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b89a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b89e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b8a2:	e841 2300 	strex	r3, r2, [r1]
 800b8a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b8a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1e1      	bne.n	800b872 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3308      	adds	r3, #8
 800b8b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8b8:	e853 3f00 	ldrex	r3, [r3]
 800b8bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b8be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	3308      	adds	r3, #8
 800b8ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b8d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b8d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b8d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b8da:	e841 2300 	strex	r3, r2, [r1]
 800b8de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b8e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d1e3      	bne.n	800b8ae <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2220      	movs	r2, #32
 800b8ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8fc:	e853 3f00 	ldrex	r3, [r3]
 800b900:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b904:	f023 0310 	bic.w	r3, r3, #16
 800b908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	461a      	mov	r2, r3
 800b912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b916:	65bb      	str	r3, [r7, #88]	; 0x58
 800b918:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b91a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b91c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b91e:	e841 2300 	strex	r3, r2, [r1]
 800b922:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b926:	2b00      	cmp	r3, #0
 800b928:	d1e4      	bne.n	800b8f4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b92e:	4618      	mov	r0, r3
 800b930:	f7f9 ffb8 	bl	80058a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b940:	b29b      	uxth	r3, r3
 800b942:	1ad3      	subs	r3, r2, r3
 800b944:	b29b      	uxth	r3, r3
 800b946:	4619      	mov	r1, r3
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f7f6 fe6b 	bl	8002624 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b94e:	e0dc      	b.n	800bb0a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	1ad3      	subs	r3, r2, r3
 800b960:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f000 80ce 	beq.w	800bb0e <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800b972:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b976:	2b00      	cmp	r3, #0
 800b978:	f000 80c9 	beq.w	800bb0e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b984:	e853 3f00 	ldrex	r3, [r3]
 800b988:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b98c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b990:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	461a      	mov	r2, r3
 800b99a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b99e:	647b      	str	r3, [r7, #68]	; 0x44
 800b9a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9a6:	e841 2300 	strex	r3, r2, [r1]
 800b9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1e4      	bne.n	800b97c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	3308      	adds	r3, #8
 800b9b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9bc:	e853 3f00 	ldrex	r3, [r3]
 800b9c0:	623b      	str	r3, [r7, #32]
   return(result);
 800b9c2:	6a3b      	ldr	r3, [r7, #32]
 800b9c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9c8:	f023 0301 	bic.w	r3, r3, #1
 800b9cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	3308      	adds	r3, #8
 800b9d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b9da:	633a      	str	r2, [r7, #48]	; 0x30
 800b9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9e2:	e841 2300 	strex	r3, r2, [r1]
 800b9e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d1e1      	bne.n	800b9b2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2220      	movs	r2, #32
 800b9f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	e853 3f00 	ldrex	r3, [r3]
 800ba0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f023 0310 	bic.w	r3, r3, #16
 800ba16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	461a      	mov	r2, r3
 800ba20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ba24:	61fb      	str	r3, [r7, #28]
 800ba26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba28:	69b9      	ldr	r1, [r7, #24]
 800ba2a:	69fa      	ldr	r2, [r7, #28]
 800ba2c:	e841 2300 	strex	r3, r2, [r1]
 800ba30:	617b      	str	r3, [r7, #20]
   return(result);
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d1e4      	bne.n	800ba02 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f7f6 fdf0 	bl	8002624 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800ba44:	e063      	b.n	800bb0e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ba46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00e      	beq.n	800ba70 <HAL_UART_IRQHandler+0x584>
 800ba52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d008      	beq.n	800ba70 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ba66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f001 fcf7 	bl	800d45c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ba6e:	e051      	b.n	800bb14 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ba70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d014      	beq.n	800baa6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ba7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d105      	bne.n	800ba94 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ba88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d008      	beq.n	800baa6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d03a      	beq.n	800bb12 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	4798      	blx	r3
    }
    return;
 800baa4:	e035      	b.n	800bb12 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800baa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d009      	beq.n	800bac6 <HAL_UART_IRQHandler+0x5da>
 800bab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baba:	2b00      	cmp	r3, #0
 800babc:	d003      	beq.n	800bac6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f001 f845 	bl	800cb4e <UART_EndTransmit_IT>
    return;
 800bac4:	e026      	b.n	800bb14 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d009      	beq.n	800bae6 <HAL_UART_IRQHandler+0x5fa>
 800bad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bad6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bada:	2b00      	cmp	r3, #0
 800badc:	d003      	beq.n	800bae6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f001 fcce 	bl	800d480 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bae4:	e016      	b.n	800bb14 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d010      	beq.n	800bb14 <HAL_UART_IRQHandler+0x628>
 800baf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	da0c      	bge.n	800bb14 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f001 fcb7 	bl	800d46e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb00:	e008      	b.n	800bb14 <HAL_UART_IRQHandler+0x628>
      return;
 800bb02:	bf00      	nop
 800bb04:	e006      	b.n	800bb14 <HAL_UART_IRQHandler+0x628>
    return;
 800bb06:	bf00      	nop
 800bb08:	e004      	b.n	800bb14 <HAL_UART_IRQHandler+0x628>
      return;
 800bb0a:	bf00      	nop
 800bb0c:	e002      	b.n	800bb14 <HAL_UART_IRQHandler+0x628>
      return;
 800bb0e:	bf00      	nop
 800bb10:	e000      	b.n	800bb14 <HAL_UART_IRQHandler+0x628>
    return;
 800bb12:	bf00      	nop
  }
}
 800bb14:	37e8      	adds	r7, #232	; 0xe8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop

0800bb1c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bb24:	bf00      	nop
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bc80      	pop	{r7}
 800bb2c:	4770      	bx	lr

0800bb2e <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bb2e:	b480      	push	{r7}
 800bb30:	b083      	sub	sp, #12
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bb36:	bf00      	nop
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bc80      	pop	{r7}
 800bb3e:	4770      	bx	lr

0800bb40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bb48:	bf00      	nop
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bc80      	pop	{r7}
 800bb50:	4770      	bx	lr
	...

0800bb54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb58:	b08c      	sub	sp, #48	; 0x30
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	689a      	ldr	r2, [r3, #8]
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	691b      	ldr	r3, [r3, #16]
 800bb6c:	431a      	orrs	r2, r3
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	695b      	ldr	r3, [r3, #20]
 800bb72:	431a      	orrs	r2, r3
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	69db      	ldr	r3, [r3, #28]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	4b94      	ldr	r3, [pc, #592]	; (800bdd4 <UART_SetConfig+0x280>)
 800bb84:	4013      	ands	r3, r2
 800bb86:	697a      	ldr	r2, [r7, #20]
 800bb88:	6812      	ldr	r2, [r2, #0]
 800bb8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb8c:	430b      	orrs	r3, r1
 800bb8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	68da      	ldr	r2, [r3, #12]
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	430a      	orrs	r2, r1
 800bba4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	699b      	ldr	r3, [r3, #24]
 800bbaa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a89      	ldr	r2, [pc, #548]	; (800bdd8 <UART_SetConfig+0x284>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d004      	beq.n	800bbc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	6a1b      	ldr	r3, [r3, #32]
 800bbba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800bbca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	6812      	ldr	r2, [r2, #0]
 800bbd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbd4:	430b      	orrs	r3, r1
 800bbd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbde:	f023 010f 	bic.w	r1, r3, #15
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	430a      	orrs	r2, r1
 800bbec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a7a      	ldr	r2, [pc, #488]	; (800bddc <UART_SetConfig+0x288>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d127      	bne.n	800bc48 <UART_SetConfig+0xf4>
 800bbf8:	2003      	movs	r0, #3
 800bbfa:	f7ff fa88 	bl	800b10e <LL_RCC_GetUSARTClockSource>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800bc04:	2b03      	cmp	r3, #3
 800bc06:	d81b      	bhi.n	800bc40 <UART_SetConfig+0xec>
 800bc08:	a201      	add	r2, pc, #4	; (adr r2, 800bc10 <UART_SetConfig+0xbc>)
 800bc0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc0e:	bf00      	nop
 800bc10:	0800bc21 	.word	0x0800bc21
 800bc14:	0800bc31 	.word	0x0800bc31
 800bc18:	0800bc29 	.word	0x0800bc29
 800bc1c:	0800bc39 	.word	0x0800bc39
 800bc20:	2301      	movs	r3, #1
 800bc22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc26:	e080      	b.n	800bd2a <UART_SetConfig+0x1d6>
 800bc28:	2302      	movs	r3, #2
 800bc2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc2e:	e07c      	b.n	800bd2a <UART_SetConfig+0x1d6>
 800bc30:	2304      	movs	r3, #4
 800bc32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc36:	e078      	b.n	800bd2a <UART_SetConfig+0x1d6>
 800bc38:	2308      	movs	r3, #8
 800bc3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc3e:	e074      	b.n	800bd2a <UART_SetConfig+0x1d6>
 800bc40:	2310      	movs	r3, #16
 800bc42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc46:	e070      	b.n	800bd2a <UART_SetConfig+0x1d6>
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4a64      	ldr	r2, [pc, #400]	; (800bde0 <UART_SetConfig+0x28c>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d138      	bne.n	800bcc4 <UART_SetConfig+0x170>
 800bc52:	200c      	movs	r0, #12
 800bc54:	f7ff fa5b 	bl	800b10e <LL_RCC_GetUSARTClockSource>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800bc5e:	2b0c      	cmp	r3, #12
 800bc60:	d82c      	bhi.n	800bcbc <UART_SetConfig+0x168>
 800bc62:	a201      	add	r2, pc, #4	; (adr r2, 800bc68 <UART_SetConfig+0x114>)
 800bc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc68:	0800bc9d 	.word	0x0800bc9d
 800bc6c:	0800bcbd 	.word	0x0800bcbd
 800bc70:	0800bcbd 	.word	0x0800bcbd
 800bc74:	0800bcbd 	.word	0x0800bcbd
 800bc78:	0800bcad 	.word	0x0800bcad
 800bc7c:	0800bcbd 	.word	0x0800bcbd
 800bc80:	0800bcbd 	.word	0x0800bcbd
 800bc84:	0800bcbd 	.word	0x0800bcbd
 800bc88:	0800bca5 	.word	0x0800bca5
 800bc8c:	0800bcbd 	.word	0x0800bcbd
 800bc90:	0800bcbd 	.word	0x0800bcbd
 800bc94:	0800bcbd 	.word	0x0800bcbd
 800bc98:	0800bcb5 	.word	0x0800bcb5
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bca2:	e042      	b.n	800bd2a <UART_SetConfig+0x1d6>
 800bca4:	2302      	movs	r3, #2
 800bca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcaa:	e03e      	b.n	800bd2a <UART_SetConfig+0x1d6>
 800bcac:	2304      	movs	r3, #4
 800bcae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcb2:	e03a      	b.n	800bd2a <UART_SetConfig+0x1d6>
 800bcb4:	2308      	movs	r3, #8
 800bcb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcba:	e036      	b.n	800bd2a <UART_SetConfig+0x1d6>
 800bcbc:	2310      	movs	r3, #16
 800bcbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcc2:	e032      	b.n	800bd2a <UART_SetConfig+0x1d6>
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a43      	ldr	r2, [pc, #268]	; (800bdd8 <UART_SetConfig+0x284>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d12a      	bne.n	800bd24 <UART_SetConfig+0x1d0>
 800bcce:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800bcd2:	f7ff fa2e 	bl	800b132 <LL_RCC_GetLPUARTClockSource>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bcdc:	d01a      	beq.n	800bd14 <UART_SetConfig+0x1c0>
 800bcde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bce2:	d81b      	bhi.n	800bd1c <UART_SetConfig+0x1c8>
 800bce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bce8:	d00c      	beq.n	800bd04 <UART_SetConfig+0x1b0>
 800bcea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcee:	d815      	bhi.n	800bd1c <UART_SetConfig+0x1c8>
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d003      	beq.n	800bcfc <UART_SetConfig+0x1a8>
 800bcf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcf8:	d008      	beq.n	800bd0c <UART_SetConfig+0x1b8>
 800bcfa:	e00f      	b.n	800bd1c <UART_SetConfig+0x1c8>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd02:	e012      	b.n	800bd2a <UART_SetConfig+0x1d6>
 800bd04:	2302      	movs	r3, #2
 800bd06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd0a:	e00e      	b.n	800bd2a <UART_SetConfig+0x1d6>
 800bd0c:	2304      	movs	r3, #4
 800bd0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd12:	e00a      	b.n	800bd2a <UART_SetConfig+0x1d6>
 800bd14:	2308      	movs	r3, #8
 800bd16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd1a:	e006      	b.n	800bd2a <UART_SetConfig+0x1d6>
 800bd1c:	2310      	movs	r3, #16
 800bd1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd22:	e002      	b.n	800bd2a <UART_SetConfig+0x1d6>
 800bd24:	2310      	movs	r3, #16
 800bd26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a2a      	ldr	r2, [pc, #168]	; (800bdd8 <UART_SetConfig+0x284>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	f040 80a4 	bne.w	800be7e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bd36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd3a:	2b08      	cmp	r3, #8
 800bd3c:	d823      	bhi.n	800bd86 <UART_SetConfig+0x232>
 800bd3e:	a201      	add	r2, pc, #4	; (adr r2, 800bd44 <UART_SetConfig+0x1f0>)
 800bd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd44:	0800bd69 	.word	0x0800bd69
 800bd48:	0800bd87 	.word	0x0800bd87
 800bd4c:	0800bd71 	.word	0x0800bd71
 800bd50:	0800bd87 	.word	0x0800bd87
 800bd54:	0800bd77 	.word	0x0800bd77
 800bd58:	0800bd87 	.word	0x0800bd87
 800bd5c:	0800bd87 	.word	0x0800bd87
 800bd60:	0800bd87 	.word	0x0800bd87
 800bd64:	0800bd7f 	.word	0x0800bd7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd68:	f7fc fb62 	bl	8008430 <HAL_RCC_GetPCLK1Freq>
 800bd6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd6e:	e010      	b.n	800bd92 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd70:	4b1c      	ldr	r3, [pc, #112]	; (800bde4 <UART_SetConfig+0x290>)
 800bd72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd74:	e00d      	b.n	800bd92 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd76:	f7fc faa7 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 800bd7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd7c:	e009      	b.n	800bd92 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd84:	e005      	b.n	800bd92 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800bd86:	2300      	movs	r3, #0
 800bd88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bd90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f000 8137 	beq.w	800c008 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9e:	4a12      	ldr	r2, [pc, #72]	; (800bde8 <UART_SetConfig+0x294>)
 800bda0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bda4:	461a      	mov	r2, r3
 800bda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	685a      	ldr	r2, [r3, #4]
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	005b      	lsls	r3, r3, #1
 800bdb6:	4413      	add	r3, r2
 800bdb8:	69ba      	ldr	r2, [r7, #24]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d305      	bcc.n	800bdca <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bdc4:	69ba      	ldr	r2, [r7, #24]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d910      	bls.n	800bdec <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bdd0:	e11a      	b.n	800c008 <UART_SetConfig+0x4b4>
 800bdd2:	bf00      	nop
 800bdd4:	cfff69f3 	.word	0xcfff69f3
 800bdd8:	40008000 	.word	0x40008000
 800bddc:	40013800 	.word	0x40013800
 800bde0:	40004400 	.word	0x40004400
 800bde4:	00f42400 	.word	0x00f42400
 800bde8:	08021a98 	.word	0x08021a98
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdee:	2200      	movs	r2, #0
 800bdf0:	60bb      	str	r3, [r7, #8]
 800bdf2:	60fa      	str	r2, [r7, #12]
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf8:	4a8e      	ldr	r2, [pc, #568]	; (800c034 <UART_SetConfig+0x4e0>)
 800bdfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	2200      	movs	r2, #0
 800be02:	603b      	str	r3, [r7, #0]
 800be04:	607a      	str	r2, [r7, #4]
 800be06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800be0e:	f7f5 f9a3 	bl	8001158 <__aeabi_uldivmod>
 800be12:	4602      	mov	r2, r0
 800be14:	460b      	mov	r3, r1
 800be16:	4610      	mov	r0, r2
 800be18:	4619      	mov	r1, r3
 800be1a:	f04f 0200 	mov.w	r2, #0
 800be1e:	f04f 0300 	mov.w	r3, #0
 800be22:	020b      	lsls	r3, r1, #8
 800be24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800be28:	0202      	lsls	r2, r0, #8
 800be2a:	6979      	ldr	r1, [r7, #20]
 800be2c:	6849      	ldr	r1, [r1, #4]
 800be2e:	0849      	lsrs	r1, r1, #1
 800be30:	2000      	movs	r0, #0
 800be32:	460c      	mov	r4, r1
 800be34:	4605      	mov	r5, r0
 800be36:	eb12 0804 	adds.w	r8, r2, r4
 800be3a:	eb43 0905 	adc.w	r9, r3, r5
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	469a      	mov	sl, r3
 800be46:	4693      	mov	fp, r2
 800be48:	4652      	mov	r2, sl
 800be4a:	465b      	mov	r3, fp
 800be4c:	4640      	mov	r0, r8
 800be4e:	4649      	mov	r1, r9
 800be50:	f7f5 f982 	bl	8001158 <__aeabi_uldivmod>
 800be54:	4602      	mov	r2, r0
 800be56:	460b      	mov	r3, r1
 800be58:	4613      	mov	r3, r2
 800be5a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800be5c:	6a3b      	ldr	r3, [r7, #32]
 800be5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be62:	d308      	bcc.n	800be76 <UART_SetConfig+0x322>
 800be64:	6a3b      	ldr	r3, [r7, #32]
 800be66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be6a:	d204      	bcs.n	800be76 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	6a3a      	ldr	r2, [r7, #32]
 800be72:	60da      	str	r2, [r3, #12]
 800be74:	e0c8      	b.n	800c008 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800be76:	2301      	movs	r3, #1
 800be78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800be7c:	e0c4      	b.n	800c008 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	69db      	ldr	r3, [r3, #28]
 800be82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be86:	d168      	bne.n	800bf5a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800be88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be8c:	2b08      	cmp	r3, #8
 800be8e:	d828      	bhi.n	800bee2 <UART_SetConfig+0x38e>
 800be90:	a201      	add	r2, pc, #4	; (adr r2, 800be98 <UART_SetConfig+0x344>)
 800be92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be96:	bf00      	nop
 800be98:	0800bebd 	.word	0x0800bebd
 800be9c:	0800bec5 	.word	0x0800bec5
 800bea0:	0800becd 	.word	0x0800becd
 800bea4:	0800bee3 	.word	0x0800bee3
 800bea8:	0800bed3 	.word	0x0800bed3
 800beac:	0800bee3 	.word	0x0800bee3
 800beb0:	0800bee3 	.word	0x0800bee3
 800beb4:	0800bee3 	.word	0x0800bee3
 800beb8:	0800bedb 	.word	0x0800bedb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bebc:	f7fc fab8 	bl	8008430 <HAL_RCC_GetPCLK1Freq>
 800bec0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bec2:	e014      	b.n	800beee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bec4:	f7fc fac6 	bl	8008454 <HAL_RCC_GetPCLK2Freq>
 800bec8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800beca:	e010      	b.n	800beee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800becc:	4b5a      	ldr	r3, [pc, #360]	; (800c038 <UART_SetConfig+0x4e4>)
 800bece:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bed0:	e00d      	b.n	800beee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bed2:	f7fc f9f9 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 800bed6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bed8:	e009      	b.n	800beee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800beda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bede:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bee0:	e005      	b.n	800beee <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800bee2:	2300      	movs	r3, #0
 800bee4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800beec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f000 8089 	beq.w	800c008 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befa:	4a4e      	ldr	r2, [pc, #312]	; (800c034 <UART_SetConfig+0x4e0>)
 800befc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf00:	461a      	mov	r2, r3
 800bf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf04:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf08:	005a      	lsls	r2, r3, #1
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	085b      	lsrs	r3, r3, #1
 800bf10:	441a      	add	r2, r3
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf1e:	6a3b      	ldr	r3, [r7, #32]
 800bf20:	2b0f      	cmp	r3, #15
 800bf22:	d916      	bls.n	800bf52 <UART_SetConfig+0x3fe>
 800bf24:	6a3b      	ldr	r3, [r7, #32]
 800bf26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf2a:	d212      	bcs.n	800bf52 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf2c:	6a3b      	ldr	r3, [r7, #32]
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	f023 030f 	bic.w	r3, r3, #15
 800bf34:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf36:	6a3b      	ldr	r3, [r7, #32]
 800bf38:	085b      	lsrs	r3, r3, #1
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	f003 0307 	and.w	r3, r3, #7
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	8bfb      	ldrh	r3, [r7, #30]
 800bf44:	4313      	orrs	r3, r2
 800bf46:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	8bfa      	ldrh	r2, [r7, #30]
 800bf4e:	60da      	str	r2, [r3, #12]
 800bf50:	e05a      	b.n	800c008 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800bf52:	2301      	movs	r3, #1
 800bf54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bf58:	e056      	b.n	800c008 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf5e:	2b08      	cmp	r3, #8
 800bf60:	d827      	bhi.n	800bfb2 <UART_SetConfig+0x45e>
 800bf62:	a201      	add	r2, pc, #4	; (adr r2, 800bf68 <UART_SetConfig+0x414>)
 800bf64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf68:	0800bf8d 	.word	0x0800bf8d
 800bf6c:	0800bf95 	.word	0x0800bf95
 800bf70:	0800bf9d 	.word	0x0800bf9d
 800bf74:	0800bfb3 	.word	0x0800bfb3
 800bf78:	0800bfa3 	.word	0x0800bfa3
 800bf7c:	0800bfb3 	.word	0x0800bfb3
 800bf80:	0800bfb3 	.word	0x0800bfb3
 800bf84:	0800bfb3 	.word	0x0800bfb3
 800bf88:	0800bfab 	.word	0x0800bfab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf8c:	f7fc fa50 	bl	8008430 <HAL_RCC_GetPCLK1Freq>
 800bf90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bf92:	e014      	b.n	800bfbe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf94:	f7fc fa5e 	bl	8008454 <HAL_RCC_GetPCLK2Freq>
 800bf98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bf9a:	e010      	b.n	800bfbe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf9c:	4b26      	ldr	r3, [pc, #152]	; (800c038 <UART_SetConfig+0x4e4>)
 800bf9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bfa0:	e00d      	b.n	800bfbe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bfa2:	f7fc f991 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 800bfa6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bfa8:	e009      	b.n	800bfbe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bfb0:	e005      	b.n	800bfbe <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bfbc:	bf00      	nop
    }

    if (pclk != 0U)
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d021      	beq.n	800c008 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc8:	4a1a      	ldr	r2, [pc, #104]	; (800c034 <UART_SetConfig+0x4e0>)
 800bfca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfce:	461a      	mov	r2, r3
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd2:	fbb3 f2f2 	udiv	r2, r3, r2
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	085b      	lsrs	r3, r3, #1
 800bfdc:	441a      	add	r2, r3
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfea:	6a3b      	ldr	r3, [r7, #32]
 800bfec:	2b0f      	cmp	r3, #15
 800bfee:	d908      	bls.n	800c002 <UART_SetConfig+0x4ae>
 800bff0:	6a3b      	ldr	r3, [r7, #32]
 800bff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bff6:	d204      	bcs.n	800c002 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	6a3a      	ldr	r2, [r7, #32]
 800bffe:	60da      	str	r2, [r3, #12]
 800c000:	e002      	b.n	800c008 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800c002:	2301      	movs	r3, #1
 800c004:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	2201      	movs	r2, #1
 800c014:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	2200      	movs	r2, #0
 800c01c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	2200      	movs	r2, #0
 800c022:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c024:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3730      	adds	r7, #48	; 0x30
 800c02c:	46bd      	mov	sp, r7
 800c02e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c032:	bf00      	nop
 800c034:	08021a98 	.word	0x08021a98
 800c038:	00f42400 	.word	0x00f42400

0800c03c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c048:	f003 0301 	and.w	r3, r3, #1
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00a      	beq.n	800c066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	430a      	orrs	r2, r1
 800c064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c06a:	f003 0302 	and.w	r3, r3, #2
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d00a      	beq.n	800c088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	430a      	orrs	r2, r1
 800c086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c08c:	f003 0304 	and.w	r3, r3, #4
 800c090:	2b00      	cmp	r3, #0
 800c092:	d00a      	beq.n	800c0aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	430a      	orrs	r2, r1
 800c0a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ae:	f003 0308 	and.w	r3, r3, #8
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00a      	beq.n	800c0cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	430a      	orrs	r2, r1
 800c0ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0d0:	f003 0310 	and.w	r3, r3, #16
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00a      	beq.n	800c0ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	430a      	orrs	r2, r1
 800c0ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0f2:	f003 0320 	and.w	r3, r3, #32
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00a      	beq.n	800c110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	689b      	ldr	r3, [r3, #8]
 800c100:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	430a      	orrs	r2, r1
 800c10e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d01a      	beq.n	800c152 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	430a      	orrs	r2, r1
 800c130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c13a:	d10a      	bne.n	800c152 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	430a      	orrs	r2, r1
 800c150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00a      	beq.n	800c174 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	430a      	orrs	r2, r1
 800c172:	605a      	str	r2, [r3, #4]
  }
}
 800c174:	bf00      	nop
 800c176:	370c      	adds	r7, #12
 800c178:	46bd      	mov	sp, r7
 800c17a:	bc80      	pop	{r7}
 800c17c:	4770      	bx	lr

0800c17e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b086      	sub	sp, #24
 800c182:	af02      	add	r7, sp, #8
 800c184:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c18e:	f7f6 ffbb 	bl	8003108 <HAL_GetTick>
 800c192:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f003 0308 	and.w	r3, r3, #8
 800c19e:	2b08      	cmp	r3, #8
 800c1a0:	d10e      	bne.n	800c1c0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c1a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c1a6:	9300      	str	r3, [sp, #0]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 f82f 	bl	800c214 <UART_WaitOnFlagUntilTimeout>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d001      	beq.n	800c1c0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1bc:	2303      	movs	r3, #3
 800c1be:	e025      	b.n	800c20c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f003 0304 	and.w	r3, r3, #4
 800c1ca:	2b04      	cmp	r3, #4
 800c1cc:	d10e      	bne.n	800c1ec <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c1ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 f819 	bl	800c214 <UART_WaitOnFlagUntilTimeout>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d001      	beq.n	800c1ec <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1e8:	2303      	movs	r3, #3
 800c1ea:	e00f      	b.n	800c20c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2220      	movs	r2, #32
 800c1f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2220      	movs	r2, #32
 800c1f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b09c      	sub	sp, #112	; 0x70
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	603b      	str	r3, [r7, #0]
 800c220:	4613      	mov	r3, r2
 800c222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c224:	e0a9      	b.n	800c37a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c226:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c22c:	f000 80a5 	beq.w	800c37a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c230:	f7f6 ff6a 	bl	8003108 <HAL_GetTick>
 800c234:	4602      	mov	r2, r0
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	1ad3      	subs	r3, r2, r3
 800c23a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d302      	bcc.n	800c246 <UART_WaitOnFlagUntilTimeout+0x32>
 800c240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c242:	2b00      	cmp	r3, #0
 800c244:	d140      	bne.n	800c2c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c24c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c24e:	e853 3f00 	ldrex	r3, [r3]
 800c252:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c256:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c25a:	667b      	str	r3, [r7, #100]	; 0x64
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	461a      	mov	r2, r3
 800c262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c264:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c266:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c268:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c26a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c26c:	e841 2300 	strex	r3, r2, [r1]
 800c270:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1e6      	bne.n	800c246 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	3308      	adds	r3, #8
 800c27e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c282:	e853 3f00 	ldrex	r3, [r3]
 800c286:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28a:	f023 0301 	bic.w	r3, r3, #1
 800c28e:	663b      	str	r3, [r7, #96]	; 0x60
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	3308      	adds	r3, #8
 800c296:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c298:	64ba      	str	r2, [r7, #72]	; 0x48
 800c29a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c29c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c29e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2a0:	e841 2300 	strex	r3, r2, [r1]
 800c2a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c2a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d1e5      	bne.n	800c278 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2220      	movs	r2, #32
 800c2b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2220      	movs	r2, #32
 800c2b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c2c4:	2303      	movs	r3, #3
 800c2c6:	e069      	b.n	800c39c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f003 0304 	and.w	r3, r3, #4
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d051      	beq.n	800c37a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	69db      	ldr	r3, [r3, #28]
 800c2dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2e4:	d149      	bne.n	800c37a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c2ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f8:	e853 3f00 	ldrex	r3, [r3]
 800c2fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c300:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c304:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	461a      	mov	r2, r3
 800c30c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c30e:	637b      	str	r3, [r7, #52]	; 0x34
 800c310:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c316:	e841 2300 	strex	r3, r2, [r1]
 800c31a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1e6      	bne.n	800c2f0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	3308      	adds	r3, #8
 800c328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	e853 3f00 	ldrex	r3, [r3]
 800c330:	613b      	str	r3, [r7, #16]
   return(result);
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	f023 0301 	bic.w	r3, r3, #1
 800c338:	66bb      	str	r3, [r7, #104]	; 0x68
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	3308      	adds	r3, #8
 800c340:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c342:	623a      	str	r2, [r7, #32]
 800c344:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c346:	69f9      	ldr	r1, [r7, #28]
 800c348:	6a3a      	ldr	r2, [r7, #32]
 800c34a:	e841 2300 	strex	r3, r2, [r1]
 800c34e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c350:	69bb      	ldr	r3, [r7, #24]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d1e5      	bne.n	800c322 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2220      	movs	r2, #32
 800c35a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2220      	movs	r2, #32
 800c362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2220      	movs	r2, #32
 800c36a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2200      	movs	r2, #0
 800c372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c376:	2303      	movs	r3, #3
 800c378:	e010      	b.n	800c39c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	69da      	ldr	r2, [r3, #28]
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	4013      	ands	r3, r2
 800c384:	68ba      	ldr	r2, [r7, #8]
 800c386:	429a      	cmp	r2, r3
 800c388:	bf0c      	ite	eq
 800c38a:	2301      	moveq	r3, #1
 800c38c:	2300      	movne	r3, #0
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	461a      	mov	r2, r3
 800c392:	79fb      	ldrb	r3, [r7, #7]
 800c394:	429a      	cmp	r2, r3
 800c396:	f43f af46 	beq.w	800c226 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3770      	adds	r7, #112	; 0x70
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b0a3      	sub	sp, #140	; 0x8c
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	68ba      	ldr	r2, [r7, #8]
 800c3b6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	88fa      	ldrh	r2, [r7, #6]
 800c3bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	88fa      	ldrh	r2, [r7, #6]
 800c3c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3d6:	d10e      	bne.n	800c3f6 <UART_Start_Receive_IT+0x52>
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	691b      	ldr	r3, [r3, #16]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d105      	bne.n	800c3ec <UART_Start_Receive_IT+0x48>
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c3e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c3ea:	e02d      	b.n	800c448 <UART_Start_Receive_IT+0xa4>
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	22ff      	movs	r2, #255	; 0xff
 800c3f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c3f4:	e028      	b.n	800c448 <UART_Start_Receive_IT+0xa4>
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d10d      	bne.n	800c41a <UART_Start_Receive_IT+0x76>
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	691b      	ldr	r3, [r3, #16]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d104      	bne.n	800c410 <UART_Start_Receive_IT+0x6c>
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	22ff      	movs	r2, #255	; 0xff
 800c40a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c40e:	e01b      	b.n	800c448 <UART_Start_Receive_IT+0xa4>
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	227f      	movs	r2, #127	; 0x7f
 800c414:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c418:	e016      	b.n	800c448 <UART_Start_Receive_IT+0xa4>
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	689b      	ldr	r3, [r3, #8]
 800c41e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c422:	d10d      	bne.n	800c440 <UART_Start_Receive_IT+0x9c>
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	691b      	ldr	r3, [r3, #16]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d104      	bne.n	800c436 <UART_Start_Receive_IT+0x92>
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	227f      	movs	r2, #127	; 0x7f
 800c430:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c434:	e008      	b.n	800c448 <UART_Start_Receive_IT+0xa4>
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	223f      	movs	r2, #63	; 0x3f
 800c43a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c43e:	e003      	b.n	800c448 <UART_Start_Receive_IT+0xa4>
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2200      	movs	r2, #0
 800c444:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2200      	movs	r2, #0
 800c44c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2222      	movs	r2, #34	; 0x22
 800c454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	3308      	adds	r3, #8
 800c45e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c462:	e853 3f00 	ldrex	r3, [r3]
 800c466:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c46a:	f043 0301 	orr.w	r3, r3, #1
 800c46e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	3308      	adds	r3, #8
 800c478:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c47c:	673a      	str	r2, [r7, #112]	; 0x70
 800c47e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c480:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c482:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c484:	e841 2300 	strex	r3, r2, [r1]
 800c488:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800c48a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d1e3      	bne.n	800c458 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c498:	d153      	bne.n	800c542 <UART_Start_Receive_IT+0x19e>
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c4a0:	88fa      	ldrh	r2, [r7, #6]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d34d      	bcc.n	800c542 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	689b      	ldr	r3, [r3, #8]
 800c4aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4ae:	d107      	bne.n	800c4c0 <UART_Start_Receive_IT+0x11c>
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	691b      	ldr	r3, [r3, #16]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d103      	bne.n	800c4c0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	4a4a      	ldr	r2, [pc, #296]	; (800c5e4 <UART_Start_Receive_IT+0x240>)
 800c4bc:	671a      	str	r2, [r3, #112]	; 0x70
 800c4be:	e002      	b.n	800c4c6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	4a49      	ldr	r2, [pc, #292]	; (800c5e8 <UART_Start_Receive_IT+0x244>)
 800c4c4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	691b      	ldr	r3, [r3, #16]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d01a      	beq.n	800c50c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4de:	e853 3f00 	ldrex	r3, [r3]
 800c4e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c4e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c4f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c4fa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c4fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c500:	e841 2300 	strex	r3, r2, [r1]
 800c504:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d1e4      	bne.n	800c4d6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	3308      	adds	r3, #8
 800c512:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c516:	e853 3f00 	ldrex	r3, [r3]
 800c51a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c522:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	3308      	adds	r3, #8
 800c52a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c52c:	64ba      	str	r2, [r7, #72]	; 0x48
 800c52e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c530:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c532:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c534:	e841 2300 	strex	r3, r2, [r1]
 800c538:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c53a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1e5      	bne.n	800c50c <UART_Start_Receive_IT+0x168>
 800c540:	e04a      	b.n	800c5d8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	689b      	ldr	r3, [r3, #8]
 800c546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c54a:	d107      	bne.n	800c55c <UART_Start_Receive_IT+0x1b8>
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	691b      	ldr	r3, [r3, #16]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d103      	bne.n	800c55c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	4a25      	ldr	r2, [pc, #148]	; (800c5ec <UART_Start_Receive_IT+0x248>)
 800c558:	671a      	str	r2, [r3, #112]	; 0x70
 800c55a:	e002      	b.n	800c562 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	4a24      	ldr	r2, [pc, #144]	; (800c5f0 <UART_Start_Receive_IT+0x24c>)
 800c560:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2200      	movs	r2, #0
 800c566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	691b      	ldr	r3, [r3, #16]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d019      	beq.n	800c5a6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57a:	e853 3f00 	ldrex	r3, [r3]
 800c57e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c582:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c586:	677b      	str	r3, [r7, #116]	; 0x74
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	461a      	mov	r2, r3
 800c58e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c590:	637b      	str	r3, [r7, #52]	; 0x34
 800c592:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c594:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c598:	e841 2300 	strex	r3, r2, [r1]
 800c59c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d1e6      	bne.n	800c572 <UART_Start_Receive_IT+0x1ce>
 800c5a4:	e018      	b.n	800c5d8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	e853 3f00 	ldrex	r3, [r3]
 800c5b2:	613b      	str	r3, [r7, #16]
   return(result);
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	f043 0320 	orr.w	r3, r3, #32
 800c5ba:	67bb      	str	r3, [r7, #120]	; 0x78
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5c4:	623b      	str	r3, [r7, #32]
 800c5c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c8:	69f9      	ldr	r1, [r7, #28]
 800c5ca:	6a3a      	ldr	r2, [r7, #32]
 800c5cc:	e841 2300 	strex	r3, r2, [r1]
 800c5d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d1e6      	bne.n	800c5a6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800c5d8:	2300      	movs	r3, #0
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	378c      	adds	r7, #140	; 0x8c
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bc80      	pop	{r7}
 800c5e2:	4770      	bx	lr
 800c5e4:	0800d15d 	.word	0x0800d15d
 800c5e8:	0800ce65 	.word	0x0800ce65
 800c5ec:	0800cd05 	.word	0x0800cd05
 800c5f0:	0800cba5 	.word	0x0800cba5

0800c5f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b096      	sub	sp, #88	; 0x58
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	4613      	mov	r3, r2
 800c600:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	68ba      	ldr	r2, [r7, #8]
 800c606:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	88fa      	ldrh	r2, [r7, #6]
 800c60c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2200      	movs	r2, #0
 800c614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2222      	movs	r2, #34	; 0x22
 800c61c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c624:	2b00      	cmp	r3, #0
 800c626:	d02c      	beq.n	800c682 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c62c:	4a42      	ldr	r2, [pc, #264]	; (800c738 <UART_Start_Receive_DMA+0x144>)
 800c62e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c634:	4a41      	ldr	r2, [pc, #260]	; (800c73c <UART_Start_Receive_DMA+0x148>)
 800c636:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c63c:	4a40      	ldr	r2, [pc, #256]	; (800c740 <UART_Start_Receive_DMA+0x14c>)
 800c63e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c644:	2200      	movs	r2, #0
 800c646:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	3324      	adds	r3, #36	; 0x24
 800c652:	4619      	mov	r1, r3
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c658:	461a      	mov	r2, r3
 800c65a:	88fb      	ldrh	r3, [r7, #6]
 800c65c:	f7f9 f8a4 	bl	80057a8 <HAL_DMA_Start_IT>
 800c660:	4603      	mov	r3, r0
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00d      	beq.n	800c682 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2210      	movs	r2, #16
 800c66a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2200      	movs	r2, #0
 800c672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2220      	movs	r2, #32
 800c67a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	e055      	b.n	800c72e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2200      	movs	r2, #0
 800c686:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d018      	beq.n	800c6c4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c69a:	e853 3f00 	ldrex	r3, [r3]
 800c69e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6a6:	657b      	str	r3, [r7, #84]	; 0x54
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6b2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c6b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6b8:	e841 2300 	strex	r3, r2, [r1]
 800c6bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c6be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1e6      	bne.n	800c692 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	3308      	adds	r3, #8
 800c6ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ce:	e853 3f00 	ldrex	r3, [r3]
 800c6d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d6:	f043 0301 	orr.w	r3, r3, #1
 800c6da:	653b      	str	r3, [r7, #80]	; 0x50
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	3308      	adds	r3, #8
 800c6e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c6e4:	637a      	str	r2, [r7, #52]	; 0x34
 800c6e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c6ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6ec:	e841 2300 	strex	r3, r2, [r1]
 800c6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1e5      	bne.n	800c6c4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	3308      	adds	r3, #8
 800c6fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	e853 3f00 	ldrex	r3, [r3]
 800c706:	613b      	str	r3, [r7, #16]
   return(result);
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c70e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	3308      	adds	r3, #8
 800c716:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c718:	623a      	str	r2, [r7, #32]
 800c71a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71c:	69f9      	ldr	r1, [r7, #28]
 800c71e:	6a3a      	ldr	r2, [r7, #32]
 800c720:	e841 2300 	strex	r3, r2, [r1]
 800c724:	61bb      	str	r3, [r7, #24]
   return(result);
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d1e5      	bne.n	800c6f8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800c72c:	2300      	movs	r3, #0
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3758      	adds	r7, #88	; 0x58
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	0800c945 	.word	0x0800c945
 800c73c:	0800ca6b 	.word	0x0800ca6b
 800c740:	0800caa3 	.word	0x0800caa3

0800c744 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c744:	b480      	push	{r7}
 800c746:	b08f      	sub	sp, #60	; 0x3c
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c752:	6a3b      	ldr	r3, [r7, #32]
 800c754:	e853 3f00 	ldrex	r3, [r3]
 800c758:	61fb      	str	r3, [r7, #28]
   return(result);
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c760:	637b      	str	r3, [r7, #52]	; 0x34
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	461a      	mov	r2, r3
 800c768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c76a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c76c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c772:	e841 2300 	strex	r3, r2, [r1]
 800c776:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d1e6      	bne.n	800c74c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	3308      	adds	r3, #8
 800c784:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	e853 3f00 	ldrex	r3, [r3]
 800c78c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c794:	633b      	str	r3, [r7, #48]	; 0x30
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3308      	adds	r3, #8
 800c79c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c79e:	61ba      	str	r2, [r7, #24]
 800c7a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a2:	6979      	ldr	r1, [r7, #20]
 800c7a4:	69ba      	ldr	r2, [r7, #24]
 800c7a6:	e841 2300 	strex	r3, r2, [r1]
 800c7aa:	613b      	str	r3, [r7, #16]
   return(result);
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d1e5      	bne.n	800c77e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2220      	movs	r2, #32
 800c7b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800c7ba:	bf00      	nop
 800c7bc:	373c      	adds	r7, #60	; 0x3c
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bc80      	pop	{r7}
 800c7c2:	4770      	bx	lr

0800c7c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b095      	sub	sp, #84	; 0x54
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7d4:	e853 3f00 	ldrex	r3, [r3]
 800c7d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c7e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7ea:	643b      	str	r3, [r7, #64]	; 0x40
 800c7ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c7f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7f2:	e841 2300 	strex	r3, r2, [r1]
 800c7f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d1e6      	bne.n	800c7cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	3308      	adds	r3, #8
 800c804:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c806:	6a3b      	ldr	r3, [r7, #32]
 800c808:	e853 3f00 	ldrex	r3, [r3]
 800c80c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c814:	f023 0301 	bic.w	r3, r3, #1
 800c818:	64bb      	str	r3, [r7, #72]	; 0x48
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	3308      	adds	r3, #8
 800c820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c822:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c824:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c826:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c82a:	e841 2300 	strex	r3, r2, [r1]
 800c82e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c832:	2b00      	cmp	r3, #0
 800c834:	d1e3      	bne.n	800c7fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d118      	bne.n	800c870 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	e853 3f00 	ldrex	r3, [r3]
 800c84a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	f023 0310 	bic.w	r3, r3, #16
 800c852:	647b      	str	r3, [r7, #68]	; 0x44
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	461a      	mov	r2, r3
 800c85a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c85c:	61bb      	str	r3, [r7, #24]
 800c85e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c860:	6979      	ldr	r1, [r7, #20]
 800c862:	69ba      	ldr	r2, [r7, #24]
 800c864:	e841 2300 	strex	r3, r2, [r1]
 800c868:	613b      	str	r3, [r7, #16]
   return(result);
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d1e6      	bne.n	800c83e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2220      	movs	r2, #32
 800c874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c884:	bf00      	nop
 800c886:	3754      	adds	r7, #84	; 0x54
 800c888:	46bd      	mov	sp, r7
 800c88a:	bc80      	pop	{r7}
 800c88c:	4770      	bx	lr

0800c88e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b090      	sub	sp, #64	; 0x40
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c89a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f003 0320 	and.w	r3, r3, #32
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d137      	bne.n	800c91a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c8aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c8b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	3308      	adds	r3, #8
 800c8b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8bc:	e853 3f00 	ldrex	r3, [r3]
 800c8c0:	623b      	str	r3, [r7, #32]
   return(result);
 800c8c2:	6a3b      	ldr	r3, [r7, #32]
 800c8c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	3308      	adds	r3, #8
 800c8d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8d2:	633a      	str	r2, [r7, #48]	; 0x30
 800c8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8da:	e841 2300 	strex	r3, r2, [r1]
 800c8de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d1e5      	bne.n	800c8b2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	e853 3f00 	ldrex	r3, [r3]
 800c8f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8fa:	637b      	str	r3, [r7, #52]	; 0x34
 800c8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	461a      	mov	r2, r3
 800c902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c904:	61fb      	str	r3, [r7, #28]
 800c906:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c908:	69b9      	ldr	r1, [r7, #24]
 800c90a:	69fa      	ldr	r2, [r7, #28]
 800c90c:	e841 2300 	strex	r3, r2, [r1]
 800c910:	617b      	str	r3, [r7, #20]
   return(result);
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d1e6      	bne.n	800c8e6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c918:	e002      	b.n	800c920 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c91a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c91c:	f7f7 fac2 	bl	8003ea4 <HAL_UART_TxCpltCallback>
}
 800c920:	bf00      	nop
 800c922:	3740      	adds	r7, #64	; 0x40
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c934:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f7ff f8f0 	bl	800bb1c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c93c:	bf00      	nop
 800c93e:	3710      	adds	r7, #16
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b09c      	sub	sp, #112	; 0x70
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c950:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f003 0320 	and.w	r3, r3, #32
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d171      	bne.n	800ca44 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c962:	2200      	movs	r2, #0
 800c964:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c96e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c970:	e853 3f00 	ldrex	r3, [r3]
 800c974:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c97c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c97e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	461a      	mov	r2, r3
 800c984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c986:	65bb      	str	r3, [r7, #88]	; 0x58
 800c988:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c98a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c98c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c98e:	e841 2300 	strex	r3, r2, [r1]
 800c992:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c996:	2b00      	cmp	r3, #0
 800c998:	d1e6      	bne.n	800c968 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c99a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	3308      	adds	r3, #8
 800c9a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a4:	e853 3f00 	ldrex	r3, [r3]
 800c9a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ac:	f023 0301 	bic.w	r3, r3, #1
 800c9b0:	667b      	str	r3, [r7, #100]	; 0x64
 800c9b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	3308      	adds	r3, #8
 800c9b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c9ba:	647a      	str	r2, [r7, #68]	; 0x44
 800c9bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c9c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9c2:	e841 2300 	strex	r3, r2, [r1]
 800c9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c9c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d1e5      	bne.n	800c99a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	3308      	adds	r3, #8
 800c9d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d8:	e853 3f00 	ldrex	r3, [r3]
 800c9dc:	623b      	str	r3, [r7, #32]
   return(result);
 800c9de:	6a3b      	ldr	r3, [r7, #32]
 800c9e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9e4:	663b      	str	r3, [r7, #96]	; 0x60
 800c9e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	3308      	adds	r3, #8
 800c9ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c9ee:	633a      	str	r2, [r7, #48]	; 0x30
 800c9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9f6:	e841 2300 	strex	r3, r2, [r1]
 800c9fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d1e5      	bne.n	800c9ce <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ca02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca04:	2220      	movs	r2, #32
 800ca06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d118      	bne.n	800ca44 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	e853 3f00 	ldrex	r3, [r3]
 800ca1e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f023 0310 	bic.w	r3, r3, #16
 800ca26:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca30:	61fb      	str	r3, [r7, #28]
 800ca32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca34:	69b9      	ldr	r1, [r7, #24]
 800ca36:	69fa      	ldr	r2, [r7, #28]
 800ca38:	e841 2300 	strex	r3, r2, [r1]
 800ca3c:	617b      	str	r3, [r7, #20]
   return(result);
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d1e6      	bne.n	800ca12 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d107      	bne.n	800ca5c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ca52:	4619      	mov	r1, r3
 800ca54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ca56:	f7f5 fde5 	bl	8002624 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ca5a:	e002      	b.n	800ca62 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ca5c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ca5e:	f7f7 fa37 	bl	8003ed0 <HAL_UART_RxCpltCallback>
}
 800ca62:	bf00      	nop
 800ca64:	3770      	adds	r7, #112	; 0x70
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b084      	sub	sp, #16
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca76:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d109      	bne.n	800ca94 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ca86:	085b      	lsrs	r3, r3, #1
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f7f5 fdc9 	bl	8002624 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ca92:	e002      	b.n	800ca9a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ca94:	68f8      	ldr	r0, [r7, #12]
 800ca96:	f7ff f84a 	bl	800bb2e <HAL_UART_RxHalfCpltCallback>
}
 800ca9a:	bf00      	nop
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b086      	sub	sp, #24
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caae:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cab6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cabe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caca:	2b80      	cmp	r3, #128	; 0x80
 800cacc:	d109      	bne.n	800cae2 <UART_DMAError+0x40>
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	2b21      	cmp	r3, #33	; 0x21
 800cad2:	d106      	bne.n	800cae2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800cadc:	6978      	ldr	r0, [r7, #20]
 800cade:	f7ff fe31 	bl	800c744 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caec:	2b40      	cmp	r3, #64	; 0x40
 800caee:	d109      	bne.n	800cb04 <UART_DMAError+0x62>
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2b22      	cmp	r3, #34	; 0x22
 800caf4:	d106      	bne.n	800cb04 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	2200      	movs	r2, #0
 800cafa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800cafe:	6978      	ldr	r0, [r7, #20]
 800cb00:	f7ff fe60 	bl	800c7c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb0a:	f043 0210 	orr.w	r2, r3, #16
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cb14:	6978      	ldr	r0, [r7, #20]
 800cb16:	f7ff f813 	bl	800bb40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb1a:	bf00      	nop
 800cb1c:	3718      	adds	r7, #24
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}

0800cb22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b084      	sub	sp, #16
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2200      	movs	r2, #0
 800cb34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f7fe fffd 	bl	800bb40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb46:	bf00      	nop
 800cb48:	3710      	adds	r7, #16
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b088      	sub	sp, #32
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	e853 3f00 	ldrex	r3, [r3]
 800cb62:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb6a:	61fb      	str	r3, [r7, #28]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	461a      	mov	r2, r3
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	61bb      	str	r3, [r7, #24]
 800cb76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb78:	6979      	ldr	r1, [r7, #20]
 800cb7a:	69ba      	ldr	r2, [r7, #24]
 800cb7c:	e841 2300 	strex	r3, r2, [r1]
 800cb80:	613b      	str	r3, [r7, #16]
   return(result);
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d1e6      	bne.n	800cb56 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2220      	movs	r2, #32
 800cb8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f7f7 f984 	bl	8003ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb9c:	bf00      	nop
 800cb9e:	3720      	adds	r7, #32
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b096      	sub	sp, #88	; 0x58
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cbb2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbbc:	2b22      	cmp	r3, #34	; 0x22
 800cbbe:	f040 8095 	bne.w	800ccec <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cbcc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800cbd0:	b2d9      	uxtb	r1, r3
 800cbd2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cbd6:	b2da      	uxtb	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbdc:	400a      	ands	r2, r1
 800cbde:	b2d2      	uxtb	r2, r2
 800cbe0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbe6:	1c5a      	adds	r2, r3, #1
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	3b01      	subs	r3, #1
 800cbf6:	b29a      	uxth	r2, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d178      	bne.n	800ccfc <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc12:	e853 3f00 	ldrex	r3, [r3]
 800cc16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cc18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc1e:	653b      	str	r3, [r7, #80]	; 0x50
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	461a      	mov	r2, r3
 800cc26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc28:	647b      	str	r3, [r7, #68]	; 0x44
 800cc2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc30:	e841 2300 	strex	r3, r2, [r1]
 800cc34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cc36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d1e6      	bne.n	800cc0a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	3308      	adds	r3, #8
 800cc42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc46:	e853 3f00 	ldrex	r3, [r3]
 800cc4a:	623b      	str	r3, [r7, #32]
   return(result);
 800cc4c:	6a3b      	ldr	r3, [r7, #32]
 800cc4e:	f023 0301 	bic.w	r3, r3, #1
 800cc52:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	3308      	adds	r3, #8
 800cc5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc5c:	633a      	str	r2, [r7, #48]	; 0x30
 800cc5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc64:	e841 2300 	strex	r3, r2, [r1]
 800cc68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d1e5      	bne.n	800cc3c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2220      	movs	r2, #32
 800cc74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d12e      	bne.n	800cce4 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	e853 3f00 	ldrex	r3, [r3]
 800cc98:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	f023 0310 	bic.w	r3, r3, #16
 800cca0:	64bb      	str	r3, [r7, #72]	; 0x48
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	461a      	mov	r2, r3
 800cca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccaa:	61fb      	str	r3, [r7, #28]
 800ccac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccae:	69b9      	ldr	r1, [r7, #24]
 800ccb0:	69fa      	ldr	r2, [r7, #28]
 800ccb2:	e841 2300 	strex	r3, r2, [r1]
 800ccb6:	617b      	str	r3, [r7, #20]
   return(result);
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1e6      	bne.n	800cc8c <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	69db      	ldr	r3, [r3, #28]
 800ccc4:	f003 0310 	and.w	r3, r3, #16
 800ccc8:	2b10      	cmp	r3, #16
 800ccca:	d103      	bne.n	800ccd4 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	2210      	movs	r2, #16
 800ccd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ccda:	4619      	mov	r1, r3
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7f5 fca1 	bl	8002624 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cce2:	e00b      	b.n	800ccfc <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f7f7 f8f3 	bl	8003ed0 <HAL_UART_RxCpltCallback>
}
 800ccea:	e007      	b.n	800ccfc <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	699a      	ldr	r2, [r3, #24]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f042 0208 	orr.w	r2, r2, #8
 800ccfa:	619a      	str	r2, [r3, #24]
}
 800ccfc:	bf00      	nop
 800ccfe:	3758      	adds	r7, #88	; 0x58
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b096      	sub	sp, #88	; 0x58
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cd12:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd1c:	2b22      	cmp	r3, #34	; 0x22
 800cd1e:	f040 8095 	bne.w	800ce4c <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd28:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd30:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800cd32:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800cd36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cd3a:	4013      	ands	r3, r2
 800cd3c:	b29a      	uxth	r2, r3
 800cd3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd40:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd46:	1c9a      	adds	r2, r3, #2
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	3b01      	subs	r3, #1
 800cd56:	b29a      	uxth	r2, r3
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d178      	bne.n	800ce5c <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd72:	e853 3f00 	ldrex	r3, [r3]
 800cd76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cd7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	461a      	mov	r2, r3
 800cd86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd88:	643b      	str	r3, [r7, #64]	; 0x40
 800cd8a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cd8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd90:	e841 2300 	strex	r3, r2, [r1]
 800cd94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d1e6      	bne.n	800cd6a <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	3308      	adds	r3, #8
 800cda2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda4:	6a3b      	ldr	r3, [r7, #32]
 800cda6:	e853 3f00 	ldrex	r3, [r3]
 800cdaa:	61fb      	str	r3, [r7, #28]
   return(result);
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	f023 0301 	bic.w	r3, r3, #1
 800cdb2:	64bb      	str	r3, [r7, #72]	; 0x48
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	3308      	adds	r3, #8
 800cdba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cdbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdc4:	e841 2300 	strex	r3, r2, [r1]
 800cdc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d1e5      	bne.n	800cd9c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2220      	movs	r2, #32
 800cdd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d12e      	bne.n	800ce44 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2200      	movs	r2, #0
 800cdea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	e853 3f00 	ldrex	r3, [r3]
 800cdf8:	60bb      	str	r3, [r7, #8]
   return(result);
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	f023 0310 	bic.w	r3, r3, #16
 800ce00:	647b      	str	r3, [r7, #68]	; 0x44
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	461a      	mov	r2, r3
 800ce08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce0a:	61bb      	str	r3, [r7, #24]
 800ce0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce0e:	6979      	ldr	r1, [r7, #20]
 800ce10:	69ba      	ldr	r2, [r7, #24]
 800ce12:	e841 2300 	strex	r3, r2, [r1]
 800ce16:	613b      	str	r3, [r7, #16]
   return(result);
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d1e6      	bne.n	800cdec <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	69db      	ldr	r3, [r3, #28]
 800ce24:	f003 0310 	and.w	r3, r3, #16
 800ce28:	2b10      	cmp	r3, #16
 800ce2a:	d103      	bne.n	800ce34 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2210      	movs	r2, #16
 800ce32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f7f5 fbf1 	bl	8002624 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ce42:	e00b      	b.n	800ce5c <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f7f7 f843 	bl	8003ed0 <HAL_UART_RxCpltCallback>
}
 800ce4a:	e007      	b.n	800ce5c <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	699a      	ldr	r2, [r3, #24]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f042 0208 	orr.w	r2, r2, #8
 800ce5a:	619a      	str	r2, [r3, #24]
}
 800ce5c:	bf00      	nop
 800ce5e:	3758      	adds	r7, #88	; 0x58
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b0a6      	sub	sp, #152	; 0x98
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ce72:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	69db      	ldr	r3, [r3, #28]
 800ce7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce9a:	2b22      	cmp	r3, #34	; 0x22
 800ce9c:	f040 814f 	bne.w	800d13e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cea6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ceaa:	e0f6      	b.n	800d09a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ceb6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800ceba:	b2d9      	uxtb	r1, r3
 800cebc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800cec0:	b2da      	uxtb	r2, r3
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cec6:	400a      	ands	r2, r1
 800cec8:	b2d2      	uxtb	r2, r2
 800ceca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ced0:	1c5a      	adds	r2, r3, #1
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cedc:	b29b      	uxth	r3, r3
 800cede:	3b01      	subs	r3, #1
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	69db      	ldr	r3, [r3, #28]
 800ceee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cef2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cef6:	f003 0307 	and.w	r3, r3, #7
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d053      	beq.n	800cfa6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cefe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf02:	f003 0301 	and.w	r3, r3, #1
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d011      	beq.n	800cf2e <UART_RxISR_8BIT_FIFOEN+0xca>
 800cf0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cf0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d00b      	beq.n	800cf2e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf24:	f043 0201 	orr.w	r2, r3, #1
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf32:	f003 0302 	and.w	r3, r3, #2
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d011      	beq.n	800cf5e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800cf3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cf3e:	f003 0301 	and.w	r3, r3, #1
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d00b      	beq.n	800cf5e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	2202      	movs	r2, #2
 800cf4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf54:	f043 0204 	orr.w	r2, r3, #4
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf62:	f003 0304 	and.w	r3, r3, #4
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d011      	beq.n	800cf8e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800cf6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cf6e:	f003 0301 	and.w	r3, r3, #1
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00b      	beq.n	800cf8e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2204      	movs	r2, #4
 800cf7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf84:	f043 0202 	orr.w	r2, r3, #2
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d006      	beq.n	800cfa6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f7fe fdd1 	bl	800bb40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d173      	bne.n	800d09a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfba:	e853 3f00 	ldrex	r3, [r3]
 800cfbe:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800cfc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cfc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cfd4:	66bb      	str	r3, [r7, #104]	; 0x68
 800cfd6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfd8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cfda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cfdc:	e841 2300 	strex	r3, r2, [r1]
 800cfe0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cfe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d1e4      	bne.n	800cfb2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	3308      	adds	r3, #8
 800cfee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cff2:	e853 3f00 	ldrex	r3, [r3]
 800cff6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cffe:	f023 0301 	bic.w	r3, r3, #1
 800d002:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	3308      	adds	r3, #8
 800d00a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d00c:	657a      	str	r2, [r7, #84]	; 0x54
 800d00e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d010:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d012:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d014:	e841 2300 	strex	r3, r2, [r1]
 800d018:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d01a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1e3      	bne.n	800cfe8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2220      	movs	r2, #32
 800d024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d032:	2b01      	cmp	r3, #1
 800d034:	d12e      	bne.n	800d094 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2200      	movs	r2, #0
 800d03a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d044:	e853 3f00 	ldrex	r3, [r3]
 800d048:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04c:	f023 0310 	bic.w	r3, r3, #16
 800d050:	67bb      	str	r3, [r7, #120]	; 0x78
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	461a      	mov	r2, r3
 800d058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d05a:	643b      	str	r3, [r7, #64]	; 0x40
 800d05c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d05e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d060:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d062:	e841 2300 	strex	r3, r2, [r1]
 800d066:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d1e6      	bne.n	800d03c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	69db      	ldr	r3, [r3, #28]
 800d074:	f003 0310 	and.w	r3, r3, #16
 800d078:	2b10      	cmp	r3, #16
 800d07a:	d103      	bne.n	800d084 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	2210      	movs	r2, #16
 800d082:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d08a:	4619      	mov	r1, r3
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f7f5 fac9 	bl	8002624 <HAL_UARTEx_RxEventCallback>
 800d092:	e002      	b.n	800d09a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f7f6 ff1b 	bl	8003ed0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d09a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d006      	beq.n	800d0b0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800d0a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d0a6:	f003 0320 	and.w	r3, r3, #32
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	f47f aefe 	bne.w	800ceac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d0ba:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d045      	beq.n	800d14e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d0c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d23e      	bcs.n	800d14e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	3308      	adds	r3, #8
 800d0d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0d8:	6a3b      	ldr	r3, [r7, #32]
 800d0da:	e853 3f00 	ldrex	r3, [r3]
 800d0de:	61fb      	str	r3, [r7, #28]
   return(result);
 800d0e0:	69fb      	ldr	r3, [r7, #28]
 800d0e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0e6:	673b      	str	r3, [r7, #112]	; 0x70
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	3308      	adds	r3, #8
 800d0ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d0f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d0f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0f8:	e841 2300 	strex	r3, r2, [r1]
 800d0fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d100:	2b00      	cmp	r3, #0
 800d102:	d1e5      	bne.n	800d0d0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	4a14      	ldr	r2, [pc, #80]	; (800d158 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800d108:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	e853 3f00 	ldrex	r3, [r3]
 800d116:	60bb      	str	r3, [r7, #8]
   return(result);
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	f043 0320 	orr.w	r3, r3, #32
 800d11e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	461a      	mov	r2, r3
 800d126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d128:	61bb      	str	r3, [r7, #24]
 800d12a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d12c:	6979      	ldr	r1, [r7, #20]
 800d12e:	69ba      	ldr	r2, [r7, #24]
 800d130:	e841 2300 	strex	r3, r2, [r1]
 800d134:	613b      	str	r3, [r7, #16]
   return(result);
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d1e6      	bne.n	800d10a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d13c:	e007      	b.n	800d14e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	699a      	ldr	r2, [r3, #24]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f042 0208 	orr.w	r2, r2, #8
 800d14c:	619a      	str	r2, [r3, #24]
}
 800d14e:	bf00      	nop
 800d150:	3798      	adds	r7, #152	; 0x98
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	0800cba5 	.word	0x0800cba5

0800d15c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b0a8      	sub	sp, #160	; 0xa0
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d16a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	69db      	ldr	r3, [r3, #28]
 800d174:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d192:	2b22      	cmp	r3, #34	; 0x22
 800d194:	f040 8153 	bne.w	800d43e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d19e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d1a2:	e0fa      	b.n	800d39a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1aa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800d1b6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800d1ba:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800d1be:	4013      	ands	r3, r2
 800d1c0:	b29a      	uxth	r2, r3
 800d1c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d1c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1cc:	1c9a      	adds	r2, r3, #2
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	3b01      	subs	r3, #1
 800d1dc:	b29a      	uxth	r2, r3
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	69db      	ldr	r3, [r3, #28]
 800d1ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d1ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d1f2:	f003 0307 	and.w	r3, r3, #7
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d053      	beq.n	800d2a2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d1fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d1fe:	f003 0301 	and.w	r3, r3, #1
 800d202:	2b00      	cmp	r3, #0
 800d204:	d011      	beq.n	800d22a <UART_RxISR_16BIT_FIFOEN+0xce>
 800d206:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d20a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d00b      	beq.n	800d22a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2201      	movs	r2, #1
 800d218:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d220:	f043 0201 	orr.w	r2, r3, #1
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d22a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d22e:	f003 0302 	and.w	r3, r3, #2
 800d232:	2b00      	cmp	r3, #0
 800d234:	d011      	beq.n	800d25a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d236:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d23a:	f003 0301 	and.w	r3, r3, #1
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00b      	beq.n	800d25a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2202      	movs	r2, #2
 800d248:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d250:	f043 0204 	orr.w	r2, r3, #4
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d25a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d25e:	f003 0304 	and.w	r3, r3, #4
 800d262:	2b00      	cmp	r3, #0
 800d264:	d011      	beq.n	800d28a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d266:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d26a:	f003 0301 	and.w	r3, r3, #1
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00b      	beq.n	800d28a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	2204      	movs	r2, #4
 800d278:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d280:	f043 0202 	orr.w	r2, r3, #2
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d290:	2b00      	cmp	r3, #0
 800d292:	d006      	beq.n	800d2a2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f7fe fc53 	bl	800bb40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2200      	movs	r2, #0
 800d29e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d175      	bne.n	800d39a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2b6:	e853 3f00 	ldrex	r3, [r3]
 800d2ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d2bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d2d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d2d2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d2d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d2d8:	e841 2300 	strex	r3, r2, [r1]
 800d2dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d2de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d1e4      	bne.n	800d2ae <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	3308      	adds	r3, #8
 800d2ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2ee:	e853 3f00 	ldrex	r3, [r3]
 800d2f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d2f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d2fa:	f023 0301 	bic.w	r3, r3, #1
 800d2fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	3308      	adds	r3, #8
 800d308:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d30c:	65ba      	str	r2, [r7, #88]	; 0x58
 800d30e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d310:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d312:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d314:	e841 2300 	strex	r3, r2, [r1]
 800d318:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d31a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d1e1      	bne.n	800d2e4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2220      	movs	r2, #32
 800d324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d332:	2b01      	cmp	r3, #1
 800d334:	d12e      	bne.n	800d394 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2200      	movs	r2, #0
 800d33a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d344:	e853 3f00 	ldrex	r3, [r3]
 800d348:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d34c:	f023 0310 	bic.w	r3, r3, #16
 800d350:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	461a      	mov	r2, r3
 800d358:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d35a:	647b      	str	r3, [r7, #68]	; 0x44
 800d35c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d35e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d362:	e841 2300 	strex	r3, r2, [r1]
 800d366:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d1e6      	bne.n	800d33c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	69db      	ldr	r3, [r3, #28]
 800d374:	f003 0310 	and.w	r3, r3, #16
 800d378:	2b10      	cmp	r3, #16
 800d37a:	d103      	bne.n	800d384 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	2210      	movs	r2, #16
 800d382:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d38a:	4619      	mov	r1, r3
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f7f5 f949 	bl	8002624 <HAL_UARTEx_RxEventCallback>
 800d392:	e002      	b.n	800d39a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f7f6 fd9b 	bl	8003ed0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d39a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d006      	beq.n	800d3b0 <UART_RxISR_16BIT_FIFOEN+0x254>
 800d3a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d3a6:	f003 0320 	and.w	r3, r3, #32
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f47f aefa 	bne.w	800d1a4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3b6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d3ba:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d045      	beq.n	800d44e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d3c8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d23e      	bcs.n	800d44e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	3308      	adds	r3, #8
 800d3d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3da:	e853 3f00 	ldrex	r3, [r3]
 800d3de:	623b      	str	r3, [r7, #32]
   return(result);
 800d3e0:	6a3b      	ldr	r3, [r7, #32]
 800d3e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d3e6:	677b      	str	r3, [r7, #116]	; 0x74
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	3308      	adds	r3, #8
 800d3ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d3f0:	633a      	str	r2, [r7, #48]	; 0x30
 800d3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3f8:	e841 2300 	strex	r3, r2, [r1]
 800d3fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d400:	2b00      	cmp	r3, #0
 800d402:	d1e5      	bne.n	800d3d0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	4a14      	ldr	r2, [pc, #80]	; (800d458 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800d408:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	e853 3f00 	ldrex	r3, [r3]
 800d416:	60fb      	str	r3, [r7, #12]
   return(result);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f043 0320 	orr.w	r3, r3, #32
 800d41e:	673b      	str	r3, [r7, #112]	; 0x70
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	461a      	mov	r2, r3
 800d426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d428:	61fb      	str	r3, [r7, #28]
 800d42a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d42c:	69b9      	ldr	r1, [r7, #24]
 800d42e:	69fa      	ldr	r2, [r7, #28]
 800d430:	e841 2300 	strex	r3, r2, [r1]
 800d434:	617b      	str	r3, [r7, #20]
   return(result);
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d1e6      	bne.n	800d40a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d43c:	e007      	b.n	800d44e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	699a      	ldr	r2, [r3, #24]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f042 0208 	orr.w	r2, r2, #8
 800d44c:	619a      	str	r2, [r3, #24]
}
 800d44e:	bf00      	nop
 800d450:	37a0      	adds	r7, #160	; 0xa0
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	0800cd05 	.word	0x0800cd05

0800d45c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d464:	bf00      	nop
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	bc80      	pop	{r7}
 800d46c:	4770      	bx	lr

0800d46e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d46e:	b480      	push	{r7}
 800d470:	b083      	sub	sp, #12
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d476:	bf00      	nop
 800d478:	370c      	adds	r7, #12
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bc80      	pop	{r7}
 800d47e:	4770      	bx	lr

0800d480 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d488:	bf00      	nop
 800d48a:	370c      	adds	r7, #12
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bc80      	pop	{r7}
 800d490:	4770      	bx	lr

0800d492 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800d492:	b580      	push	{r7, lr}
 800d494:	b088      	sub	sp, #32
 800d496:	af02      	add	r7, sp, #8
 800d498:	60f8      	str	r0, [r7, #12]
 800d49a:	1d3b      	adds	r3, r7, #4
 800d49c:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d101      	bne.n	800d4b2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800d4ae:	2302      	movs	r3, #2
 800d4b0:	e046      	b.n	800d540 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2224      	movs	r2, #36	; 0x24
 800d4be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	681a      	ldr	r2, [r3, #0]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f022 0201 	bic.w	r2, r2, #1
 800d4d0:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	689b      	ldr	r3, [r3, #8]
 800d4d8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	430a      	orrs	r2, r1
 800d4e4:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d105      	bne.n	800d4f8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800d4ec:	1d3b      	adds	r3, r7, #4
 800d4ee:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d4f2:	68f8      	ldr	r0, [r7, #12]
 800d4f4:	f000 f9a5 	bl	800d842 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f042 0201 	orr.w	r2, r2, #1
 800d506:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d508:	f7f5 fdfe 	bl	8003108 <HAL_GetTick>
 800d50c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d50e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d512:	9300      	str	r3, [sp, #0]
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	2200      	movs	r2, #0
 800d518:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d51c:	68f8      	ldr	r0, [r7, #12]
 800d51e:	f7fe fe79 	bl	800c214 <UART_WaitOnFlagUntilTimeout>
 800d522:	4603      	mov	r3, r0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d002      	beq.n	800d52e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800d528:	2303      	movs	r3, #3
 800d52a:	75fb      	strb	r3, [r7, #23]
 800d52c:	e003      	b.n	800d536 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2220      	movs	r2, #32
 800d532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2200      	movs	r2, #0
 800d53a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800d53e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d540:	4618      	mov	r0, r3
 800d542:	3718      	adds	r7, #24
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800d548:	b480      	push	{r7}
 800d54a:	b089      	sub	sp, #36	; 0x24
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d556:	2b01      	cmp	r3, #1
 800d558:	d101      	bne.n	800d55e <HAL_UARTEx_EnableStopMode+0x16>
 800d55a:	2302      	movs	r3, #2
 800d55c:	e021      	b.n	800d5a2 <HAL_UARTEx_EnableStopMode+0x5a>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2201      	movs	r2, #1
 800d562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	e853 3f00 	ldrex	r3, [r3]
 800d572:	60bb      	str	r3, [r7, #8]
   return(result);
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	f043 0302 	orr.w	r3, r3, #2
 800d57a:	61fb      	str	r3, [r7, #28]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	461a      	mov	r2, r3
 800d582:	69fb      	ldr	r3, [r7, #28]
 800d584:	61bb      	str	r3, [r7, #24]
 800d586:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d588:	6979      	ldr	r1, [r7, #20]
 800d58a:	69ba      	ldr	r2, [r7, #24]
 800d58c:	e841 2300 	strex	r3, r2, [r1]
 800d590:	613b      	str	r3, [r7, #16]
   return(result);
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d1e6      	bne.n	800d566 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d5a0:	2300      	movs	r3, #0
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3724      	adds	r7, #36	; 0x24
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bc80      	pop	{r7}
 800d5aa:	4770      	bx	lr

0800d5ac <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	d101      	bne.n	800d5c2 <HAL_UARTEx_EnableFifoMode+0x16>
 800d5be:	2302      	movs	r3, #2
 800d5c0:	e02b      	b.n	800d61a <HAL_UARTEx_EnableFifoMode+0x6e>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2224      	movs	r2, #36	; 0x24
 800d5ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f022 0201 	bic.w	r2, r2, #1
 800d5e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d5f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800d5f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	68fa      	ldr	r2, [r7, #12]
 800d600:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 f940 	bl	800d888 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2220      	movs	r2, #32
 800d60c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2200      	movs	r2, #0
 800d614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d618:	2300      	movs	r3, #0
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3710      	adds	r7, #16
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}

0800d622 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d622:	b480      	push	{r7}
 800d624:	b085      	sub	sp, #20
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d630:	2b01      	cmp	r3, #1
 800d632:	d101      	bne.n	800d638 <HAL_UARTEx_DisableFifoMode+0x16>
 800d634:	2302      	movs	r3, #2
 800d636:	e027      	b.n	800d688 <HAL_UARTEx_DisableFifoMode+0x66>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2201      	movs	r2, #1
 800d63c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2224      	movs	r2, #36	; 0x24
 800d644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f022 0201 	bic.w	r2, r2, #1
 800d65e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d666:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2200      	movs	r2, #0
 800d66c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	68fa      	ldr	r2, [r7, #12]
 800d674:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2220      	movs	r2, #32
 800d67a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2200      	movs	r2, #0
 800d682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d686:	2300      	movs	r3, #0
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3714      	adds	r7, #20
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bc80      	pop	{r7}
 800d690:	4770      	bx	lr

0800d692 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b084      	sub	sp, #16
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
 800d69a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d101      	bne.n	800d6aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d6a6:	2302      	movs	r3, #2
 800d6a8:	e02d      	b.n	800d706 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2224      	movs	r2, #36	; 0x24
 800d6b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f022 0201 	bic.w	r2, r2, #1
 800d6d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	689b      	ldr	r3, [r3, #8]
 800d6d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	683a      	ldr	r2, [r7, #0]
 800d6e2:	430a      	orrs	r2, r1
 800d6e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f000 f8ce 	bl	800d888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	68fa      	ldr	r2, [r7, #12]
 800d6f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2220      	movs	r2, #32
 800d6f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d704:	2300      	movs	r3, #0
}
 800d706:	4618      	mov	r0, r3
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}

0800d70e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d70e:	b580      	push	{r7, lr}
 800d710:	b084      	sub	sp, #16
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
 800d716:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d101      	bne.n	800d726 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d722:	2302      	movs	r3, #2
 800d724:	e02d      	b.n	800d782 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2201      	movs	r2, #1
 800d72a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2224      	movs	r2, #36	; 0x24
 800d732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f022 0201 	bic.w	r2, r2, #1
 800d74c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	689b      	ldr	r3, [r3, #8]
 800d754:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	683a      	ldr	r2, [r7, #0]
 800d75e:	430a      	orrs	r2, r1
 800d760:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 f890 	bl	800d888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	68fa      	ldr	r2, [r7, #12]
 800d76e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2220      	movs	r2, #32
 800d774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2200      	movs	r2, #0
 800d77c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d780:	2300      	movs	r3, #0
}
 800d782:	4618      	mov	r0, r3
 800d784:	3710      	adds	r7, #16
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b08c      	sub	sp, #48	; 0x30
 800d78e:	af00      	add	r7, sp, #0
 800d790:	60f8      	str	r0, [r7, #12]
 800d792:	60b9      	str	r1, [r7, #8]
 800d794:	4613      	mov	r3, r2
 800d796:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d79e:	2b20      	cmp	r3, #32
 800d7a0:	d14a      	bne.n	800d838 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d002      	beq.n	800d7ae <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800d7a8:	88fb      	ldrh	r3, [r7, #6]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d101      	bne.n	800d7b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	e043      	b.n	800d83a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	d101      	bne.n	800d7c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800d7bc:	2302      	movs	r3, #2
 800d7be:	e03c      	b.n	800d83a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800d7ce:	88fb      	ldrh	r3, [r7, #6]
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	68b9      	ldr	r1, [r7, #8]
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f7fe ff0d 	bl	800c5f4 <UART_Start_Receive_DMA>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800d7e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d124      	bne.n	800d832 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d11d      	bne.n	800d82c <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	2210      	movs	r2, #16
 800d7f6:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7fe:	69bb      	ldr	r3, [r7, #24]
 800d800:	e853 3f00 	ldrex	r3, [r3]
 800d804:	617b      	str	r3, [r7, #20]
   return(result);
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	f043 0310 	orr.w	r3, r3, #16
 800d80c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	461a      	mov	r2, r3
 800d814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d816:	627b      	str	r3, [r7, #36]	; 0x24
 800d818:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d81a:	6a39      	ldr	r1, [r7, #32]
 800d81c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d81e:	e841 2300 	strex	r3, r2, [r1]
 800d822:	61fb      	str	r3, [r7, #28]
   return(result);
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d1e6      	bne.n	800d7f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800d82a:	e002      	b.n	800d832 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800d82c:	2301      	movs	r3, #1
 800d82e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800d832:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d836:	e000      	b.n	800d83a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800d838:	2302      	movs	r3, #2
  }
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3730      	adds	r7, #48	; 0x30
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800d842:	b480      	push	{r7}
 800d844:	b085      	sub	sp, #20
 800d846:	af00      	add	r7, sp, #0
 800d848:	60f8      	str	r0, [r7, #12]
 800d84a:	1d3b      	adds	r3, r7, #4
 800d84c:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	f023 0210 	bic.w	r2, r3, #16
 800d85a:	893b      	ldrh	r3, [r7, #8]
 800d85c:	4619      	mov	r1, r3
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	430a      	orrs	r2, r1
 800d864:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800d870:	7abb      	ldrb	r3, [r7, #10]
 800d872:	061a      	lsls	r2, r3, #24
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	430a      	orrs	r2, r1
 800d87a:	605a      	str	r2, [r3, #4]
}
 800d87c:	bf00      	nop
 800d87e:	3714      	adds	r7, #20
 800d880:	46bd      	mov	sp, r7
 800d882:	bc80      	pop	{r7}
 800d884:	4770      	bx	lr
	...

0800d888 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d888:	b480      	push	{r7}
 800d88a:	b085      	sub	sp, #20
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d894:	2b00      	cmp	r3, #0
 800d896:	d108      	bne.n	800d8aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d8a8:	e031      	b.n	800d90e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d8aa:	2308      	movs	r3, #8
 800d8ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d8ae:	2308      	movs	r3, #8
 800d8b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	0e5b      	lsrs	r3, r3, #25
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	f003 0307 	and.w	r3, r3, #7
 800d8c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	689b      	ldr	r3, [r3, #8]
 800d8c8:	0f5b      	lsrs	r3, r3, #29
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	f003 0307 	and.w	r3, r3, #7
 800d8d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d8d2:	7bbb      	ldrb	r3, [r7, #14]
 800d8d4:	7b3a      	ldrb	r2, [r7, #12]
 800d8d6:	4910      	ldr	r1, [pc, #64]	; (800d918 <UARTEx_SetNbDataToProcess+0x90>)
 800d8d8:	5c8a      	ldrb	r2, [r1, r2]
 800d8da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d8de:	7b3a      	ldrb	r2, [r7, #12]
 800d8e0:	490e      	ldr	r1, [pc, #56]	; (800d91c <UARTEx_SetNbDataToProcess+0x94>)
 800d8e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d8e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d8e8:	b29a      	uxth	r2, r3
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d8f0:	7bfb      	ldrb	r3, [r7, #15]
 800d8f2:	7b7a      	ldrb	r2, [r7, #13]
 800d8f4:	4908      	ldr	r1, [pc, #32]	; (800d918 <UARTEx_SetNbDataToProcess+0x90>)
 800d8f6:	5c8a      	ldrb	r2, [r1, r2]
 800d8f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d8fc:	7b7a      	ldrb	r2, [r7, #13]
 800d8fe:	4907      	ldr	r1, [pc, #28]	; (800d91c <UARTEx_SetNbDataToProcess+0x94>)
 800d900:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d902:	fb93 f3f2 	sdiv	r3, r3, r2
 800d906:	b29a      	uxth	r2, r3
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d90e:	bf00      	nop
 800d910:	3714      	adds	r7, #20
 800d912:	46bd      	mov	sp, r7
 800d914:	bc80      	pop	{r7}
 800d916:	4770      	bx	lr
 800d918:	08021ab0 	.word	0x08021ab0
 800d91c:	08021ab8 	.word	0x08021ab8

0800d920 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800d924:	f7f5 fa90 	bl	8002e48 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800d928:	f000 f820 	bl	800d96c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800d92c:	bf00      	nop
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800d934:	f04f 30ff 	mov.w	r0, #4294967295
 800d938:	f012 fbb8 	bl	80200ac <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800d93c:	bf00      	nop
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800d940:	b480      	push	{r7}
 800d942:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d944:	f3bf 8f4f 	dsb	sy
}
 800d948:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d94a:	4b06      	ldr	r3, [pc, #24]	; (800d964 <__NVIC_SystemReset+0x24>)
 800d94c:	68db      	ldr	r3, [r3, #12]
 800d94e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d952:	4904      	ldr	r1, [pc, #16]	; (800d964 <__NVIC_SystemReset+0x24>)
 800d954:	4b04      	ldr	r3, [pc, #16]	; (800d968 <__NVIC_SystemReset+0x28>)
 800d956:	4313      	orrs	r3, r2
 800d958:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d95a:	f3bf 8f4f 	dsb	sy
}
 800d95e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800d960:	bf00      	nop
 800d962:	e7fd      	b.n	800d960 <__NVIC_SystemReset+0x20>
 800d964:	e000ed00 	.word	0xe000ed00
 800d968:	05fa0004 	.word	0x05fa0004

0800d96c <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b086      	sub	sp, #24
 800d970:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800d972:	2300      	movs	r3, #0
 800d974:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800d976:	2300      	movs	r3, #0
 800d978:	9302      	str	r3, [sp, #8]
 800d97a:	2302      	movs	r3, #2
 800d97c:	9301      	str	r3, [sp, #4]
 800d97e:	2301      	movs	r3, #1
 800d980:	9300      	str	r3, [sp, #0]
 800d982:	4b5a      	ldr	r3, [pc, #360]	; (800daec <LoRaWAN_Init+0x180>)
 800d984:	2200      	movs	r2, #0
 800d986:	2100      	movs	r1, #0
 800d988:	2002      	movs	r0, #2
 800d98a:	f012 ffdd 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800d98e:	2300      	movs	r3, #0
 800d990:	9302      	str	r3, [sp, #8]
 800d992:	2304      	movs	r3, #4
 800d994:	9301      	str	r3, [sp, #4]
 800d996:	2302      	movs	r3, #2
 800d998:	9300      	str	r3, [sp, #0]
 800d99a:	4b55      	ldr	r3, [pc, #340]	; (800daf0 <LoRaWAN_Init+0x184>)
 800d99c:	2200      	movs	r2, #0
 800d99e:	2100      	movs	r1, #0
 800d9a0:	2002      	movs	r0, #2
 800d9a2:	f012 ffd1 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	9302      	str	r3, [sp, #8]
 800d9aa:	2302      	movs	r3, #2
 800d9ac:	9301      	str	r3, [sp, #4]
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	9300      	str	r3, [sp, #0]
 800d9b2:	4b50      	ldr	r3, [pc, #320]	; (800daf4 <LoRaWAN_Init+0x188>)
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	2100      	movs	r1, #0
 800d9b8:	2002      	movs	r0, #2
 800d9ba:	f012 ffc5 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800d9be:	1d3b      	adds	r3, r7, #4
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	2000      	movs	r0, #0
 800d9c4:	f003 f9f8 	bl	8010db8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	0e1b      	lsrs	r3, r3, #24
 800d9cc:	b2db      	uxtb	r3, r3
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	0c1b      	lsrs	r3, r3, #16
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	0a1b      	lsrs	r3, r3, #8
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	9302      	str	r3, [sp, #8]
 800d9e0:	9101      	str	r1, [sp, #4]
 800d9e2:	9200      	str	r2, [sp, #0]
 800d9e4:	4b44      	ldr	r3, [pc, #272]	; (800daf8 <LoRaWAN_Init+0x18c>)
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	2002      	movs	r0, #2
 800d9ec:	f012 ffac 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800d9f0:	1d3b      	adds	r3, r7, #4
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	2001      	movs	r0, #1
 800d9f6:	f003 f9df 	bl	8010db8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	0e1b      	lsrs	r3, r3, #24
 800d9fe:	b2db      	uxtb	r3, r3
 800da00:	461a      	mov	r2, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	0c1b      	lsrs	r3, r3, #16
 800da06:	b2db      	uxtb	r3, r3
 800da08:	4619      	mov	r1, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	0a1b      	lsrs	r3, r3, #8
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	b2c0      	uxtb	r0, r0
 800da14:	9003      	str	r0, [sp, #12]
 800da16:	9302      	str	r3, [sp, #8]
 800da18:	9101      	str	r1, [sp, #4]
 800da1a:	9200      	str	r2, [sp, #0]
 800da1c:	4b37      	ldr	r3, [pc, #220]	; (800dafc <LoRaWAN_Init+0x190>)
 800da1e:	2200      	movs	r2, #0
 800da20:	2100      	movs	r1, #0
 800da22:	2002      	movs	r0, #2
 800da24:	f012 ff90 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800da28:	2300      	movs	r3, #0
 800da2a:	9300      	str	r3, [sp, #0]
 800da2c:	4b34      	ldr	r3, [pc, #208]	; (800db00 <LoRaWAN_Init+0x194>)
 800da2e:	2200      	movs	r2, #0
 800da30:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800da34:	4833      	ldr	r0, [pc, #204]	; (800db04 <LoRaWAN_Init+0x198>)
 800da36:	f012 fcd9 	bl	80203ec <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800da3a:	2300      	movs	r3, #0
 800da3c:	9300      	str	r3, [sp, #0]
 800da3e:	4b32      	ldr	r3, [pc, #200]	; (800db08 <LoRaWAN_Init+0x19c>)
 800da40:	2200      	movs	r2, #0
 800da42:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800da46:	4831      	ldr	r0, [pc, #196]	; (800db0c <LoRaWAN_Init+0x1a0>)
 800da48:	f012 fcd0 	bl	80203ec <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800da4c:	2300      	movs	r3, #0
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	4b2f      	ldr	r3, [pc, #188]	; (800db10 <LoRaWAN_Init+0x1a4>)
 800da52:	2201      	movs	r2, #1
 800da54:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800da58:	482e      	ldr	r0, [pc, #184]	; (800db14 <LoRaWAN_Init+0x1a8>)
 800da5a:	f012 fcc7 	bl	80203ec <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800da5e:	2300      	movs	r3, #0
 800da60:	9300      	str	r3, [sp, #0]
 800da62:	4b2d      	ldr	r3, [pc, #180]	; (800db18 <LoRaWAN_Init+0x1ac>)
 800da64:	2200      	movs	r2, #0
 800da66:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800da6a:	482c      	ldr	r0, [pc, #176]	; (800db1c <LoRaWAN_Init+0x1b0>)
 800da6c:	f012 fcbe 	bl	80203ec <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800da70:	4a2b      	ldr	r2, [pc, #172]	; (800db20 <LoRaWAN_Init+0x1b4>)
 800da72:	2100      	movs	r1, #0
 800da74:	2001      	movs	r0, #1
 800da76:	f012 fc15 	bl	80202a4 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800da7a:	4a2a      	ldr	r2, [pc, #168]	; (800db24 <LoRaWAN_Init+0x1b8>)
 800da7c:	2100      	movs	r1, #0
 800da7e:	2002      	movs	r0, #2
 800da80:	f012 fc10 	bl	80202a4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800da84:	4a28      	ldr	r2, [pc, #160]	; (800db28 <LoRaWAN_Init+0x1bc>)
 800da86:	2100      	movs	r1, #0
 800da88:	2004      	movs	r0, #4
 800da8a:	f012 fc0b 	bl	80202a4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800da8e:	4a27      	ldr	r2, [pc, #156]	; (800db2c <LoRaWAN_Init+0x1c0>)
 800da90:	2100      	movs	r1, #0
 800da92:	2008      	movs	r0, #8
 800da94:	f012 fc06 	bl	80202a4 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800da98:	f000 fcc6 	bl	800e428 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800da9c:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 800daa0:	4823      	ldr	r0, [pc, #140]	; (800db30 <LoRaWAN_Init+0x1c4>)
 800daa2:	f002 f993 	bl	800fdcc <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800daa6:	4823      	ldr	r0, [pc, #140]	; (800db34 <LoRaWAN_Init+0x1c8>)
 800daa8:	f002 f9dc 	bl	800fe64 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800daac:	4819      	ldr	r0, [pc, #100]	; (800db14 <LoRaWAN_Init+0x1a8>)
 800daae:	f012 fcd3 	bl	8020458 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800dab2:	4b21      	ldr	r3, [pc, #132]	; (800db38 <LoRaWAN_Init+0x1cc>)
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	4a21      	ldr	r2, [pc, #132]	; (800db3c <LoRaWAN_Init+0x1d0>)
 800dab8:	7812      	ldrb	r2, [r2, #0]
 800daba:	4611      	mov	r1, r2
 800dabc:	4618      	mov	r0, r3
 800dabe:	f002 fb27 	bl	8010110 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800dac2:	4b1f      	ldr	r3, [pc, #124]	; (800db40 <LoRaWAN_Init+0x1d4>)
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d10b      	bne.n	800dae2 <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800daca:	4b1e      	ldr	r3, [pc, #120]	; (800db44 <LoRaWAN_Init+0x1d8>)
 800dacc:	6819      	ldr	r1, [r3, #0]
 800dace:	2300      	movs	r3, #0
 800dad0:	9300      	str	r3, [sp, #0]
 800dad2:	4b1d      	ldr	r3, [pc, #116]	; (800db48 <LoRaWAN_Init+0x1dc>)
 800dad4:	2200      	movs	r2, #0
 800dad6:	481d      	ldr	r0, [pc, #116]	; (800db4c <LoRaWAN_Init+0x1e0>)
 800dad8:	f012 fc88 	bl	80203ec <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800dadc:	481b      	ldr	r0, [pc, #108]	; (800db4c <LoRaWAN_Init+0x1e0>)
 800dade:	f012 fcbb 	bl	8020458 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800dae2:	bf00      	nop
 800dae4:	3708      	adds	r7, #8
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	080210d0 	.word	0x080210d0
 800daf0:	080210f4 	.word	0x080210f4
 800daf4:	08021114 	.word	0x08021114
 800daf8:	08021134 	.word	0x08021134
 800dafc:	08021158 	.word	0x08021158
 800db00:	0800df21 	.word	0x0800df21
 800db04:	20000c30 	.word	0x20000c30
 800db08:	0800df33 	.word	0x0800df33
 800db0c:	20000c48 	.word	0x20000c48
 800db10:	0800df45 	.word	0x0800df45
 800db14:	20000c60 	.word	0x20000c60
 800db18:	0800e2f1 	.word	0x0800e2f1
 800db1c:	20000b24 	.word	0x20000b24
 800db20:	080100ed 	.word	0x080100ed
 800db24:	0800dc9d 	.word	0x0800dc9d
 800db28:	0800e315 	.word	0x0800e315
 800db2c:	0800e271 	.word	0x0800e271
 800db30:	20000040 	.word	0x20000040
 800db34:	2000008c 	.word	0x2000008c
 800db38:	2000003c 	.word	0x2000003c
 800db3c:	2000003d 	.word	0x2000003d
 800db40:	20000b08 	.word	0x20000b08
 800db44:	200000a0 	.word	0x200000a0
 800db48:	0800defd 	.word	0x0800defd
 800db4c:	20000b0c 	.word	0x20000b0c

0800db50 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800db50:	b5b0      	push	{r4, r5, r7, lr}
 800db52:	b08a      	sub	sp, #40	; 0x28
 800db54:	af06      	add	r7, sp, #24
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
 uint8_t RxPort = 0;
 800db5a:	2300      	movs	r3, #0
 800db5c:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	f000 8088 	beq.w	800dc76 <OnRxData+0x126>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800db66:	4846      	ldr	r0, [pc, #280]	; (800dc80 <OnRxData+0x130>)
 800db68:	f012 fc76 	bl	8020458 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d057      	beq.n	800dc24 <OnRxData+0xd4>
    {
      if (appData != NULL)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d054      	beq.n	800dc24 <OnRxData+0xd4>
      {
        RxPort = appData->Port;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d04d      	beq.n	800dc24 <OnRxData+0xd4>
        {
    switch (appData->Port)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	2b02      	cmp	r3, #2
 800db8e:	d021      	beq.n	800dbd4 <OnRxData+0x84>
 800db90:	2b03      	cmp	r3, #3
 800db92:	d149      	bne.n	800dc28 <OnRxData+0xd8>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	785b      	ldrb	r3, [r3, #1]
 800db98:	2b01      	cmp	r3, #1
 800db9a:	d117      	bne.n	800dbcc <OnRxData+0x7c>
        {
          switch (appData->Buffer[0])
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	2b02      	cmp	r3, #2
 800dba4:	d00e      	beq.n	800dbc4 <OnRxData+0x74>
 800dba6:	2b02      	cmp	r3, #2
 800dba8:	dc12      	bgt.n	800dbd0 <OnRxData+0x80>
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d002      	beq.n	800dbb4 <OnRxData+0x64>
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d004      	beq.n	800dbbc <OnRxData+0x6c>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800dbb2:	e00d      	b.n	800dbd0 <OnRxData+0x80>
              LmHandlerRequestClass(CLASS_A);
 800dbb4:	2000      	movs	r0, #0
 800dbb6:	f002 fc97 	bl	80104e8 <LmHandlerRequestClass>
              break;
 800dbba:	e00a      	b.n	800dbd2 <OnRxData+0x82>
              LmHandlerRequestClass(CLASS_B);
 800dbbc:	2001      	movs	r0, #1
 800dbbe:	f002 fc93 	bl	80104e8 <LmHandlerRequestClass>
              break;
 800dbc2:	e006      	b.n	800dbd2 <OnRxData+0x82>
              LmHandlerRequestClass(CLASS_C);
 800dbc4:	2002      	movs	r0, #2
 800dbc6:	f002 fc8f 	bl	80104e8 <LmHandlerRequestClass>
              break;
 800dbca:	e002      	b.n	800dbd2 <OnRxData+0x82>
          }
        }
 800dbcc:	bf00      	nop
 800dbce:	e02e      	b.n	800dc2e <OnRxData+0xde>
              break;
 800dbd0:	bf00      	nop
        break;
 800dbd2:	e02c      	b.n	800dc2e <OnRxData+0xde>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	785b      	ldrb	r3, [r3, #1]
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d127      	bne.n	800dc2c <OnRxData+0xdc>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	f003 0301 	and.w	r3, r3, #1
 800dbe6:	b2da      	uxtb	r2, r3
 800dbe8:	4b26      	ldr	r3, [pc, #152]	; (800dc84 <OnRxData+0x134>)
 800dbea:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800dbec:	4b25      	ldr	r3, [pc, #148]	; (800dc84 <OnRxData+0x134>)
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d10b      	bne.n	800dc0c <OnRxData+0xbc>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800dbf4:	4b24      	ldr	r3, [pc, #144]	; (800dc88 <OnRxData+0x138>)
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	2100      	movs	r1, #0
 800dbfa:	2003      	movs	r0, #3
 800dbfc:	f012 fea4 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800dc00:	2201      	movs	r2, #1
 800dc02:	2120      	movs	r1, #32
 800dc04:	4821      	ldr	r0, [pc, #132]	; (800dc8c <OnRxData+0x13c>)
 800dc06:	f7f8 fd9d 	bl	8006744 <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800dc0a:	e00f      	b.n	800dc2c <OnRxData+0xdc>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800dc0c:	4b20      	ldr	r3, [pc, #128]	; (800dc90 <OnRxData+0x140>)
 800dc0e:	2200      	movs	r2, #0
 800dc10:	2100      	movs	r1, #0
 800dc12:	2003      	movs	r0, #3
 800dc14:	f012 fe98 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800dc18:	2200      	movs	r2, #0
 800dc1a:	2120      	movs	r1, #32
 800dc1c:	481b      	ldr	r0, [pc, #108]	; (800dc8c <OnRxData+0x13c>)
 800dc1e:	f7f8 fd91 	bl	8006744 <HAL_GPIO_WritePin>
        break;
 800dc22:	e003      	b.n	800dc2c <OnRxData+0xdc>

      default:

        break;
    }
  }
 800dc24:	bf00      	nop
 800dc26:	e002      	b.n	800dc2e <OnRxData+0xde>
        break;
 800dc28:	bf00      	nop
 800dc2a:	e000      	b.n	800dc2e <OnRxData+0xde>
        break;
 800dc2c:	bf00      	nop
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	7c1b      	ldrb	r3, [r3, #16]
 800dc32:	2b05      	cmp	r3, #5
 800dc34:	d81f      	bhi.n	800dc76 <OnRxData+0x126>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	68db      	ldr	r3, [r3, #12]
 800dc3a:	7bfa      	ldrb	r2, [r7, #15]
 800dc3c:	6839      	ldr	r1, [r7, #0]
 800dc3e:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800dc42:	460c      	mov	r4, r1
 800dc44:	6839      	ldr	r1, [r7, #0]
 800dc46:	7c09      	ldrb	r1, [r1, #16]
 800dc48:	4608      	mov	r0, r1
 800dc4a:	4912      	ldr	r1, [pc, #72]	; (800dc94 <OnRxData+0x144>)
 800dc4c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800dc50:	6838      	ldr	r0, [r7, #0]
 800dc52:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800dc56:	4605      	mov	r5, r0
 800dc58:	6838      	ldr	r0, [r7, #0]
 800dc5a:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800dc5e:	9005      	str	r0, [sp, #20]
 800dc60:	9504      	str	r5, [sp, #16]
 800dc62:	9103      	str	r1, [sp, #12]
 800dc64:	9402      	str	r4, [sp, #8]
 800dc66:	9201      	str	r2, [sp, #4]
 800dc68:	9300      	str	r3, [sp, #0]
 800dc6a:	4b0b      	ldr	r3, [pc, #44]	; (800dc98 <OnRxData+0x148>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	2100      	movs	r1, #0
 800dc70:	2003      	movs	r0, #3
 800dc72:	f012 fe69 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800dc76:	bf00      	nop
 800dc78:	3710      	adds	r7, #16
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bdb0      	pop	{r4, r5, r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	20000c48 	.word	0x20000c48
 800dc84:	20000c2e 	.word	0x20000c2e
 800dc88:	0802117c 	.word	0x0802117c
 800dc8c:	48000400 	.word	0x48000400
 800dc90:	08021188 	.word	0x08021188
 800dc94:	20000024 	.word	0x20000024
 800dc98:	08021194 	.word	0x08021194

0800dc9c <SendTxData>:

static void SendTxData(void)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b08c      	sub	sp, #48	; 0x30
 800dca0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800dca2:	23ff      	movs	r3, #255	; 0xff
 800dca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t batteryLevel = GetBatteryLevel();
 800dca8:	f7f5 f902 	bl	8002eb0 <GetBatteryLevel>
 800dcac:	4603      	mov	r3, r0
 800dcae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	627b      	str	r3, [r7, #36]	; 0x24


  uint16_t pressure = 0;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	843b      	strh	r3, [r7, #32]

  uint32_t i = 0;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	61fb      	str	r3, [r7, #28]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800dcbe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dcc2:	9300      	str	r3, [sp, #0]
 800dcc4:	4b7d      	ldr	r3, [pc, #500]	; (800debc <SendTxData+0x220>)
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	2100      	movs	r1, #0
 800dcca:	2002      	movs	r0, #2
 800dccc:	f012 fe3c 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7f3 f9fa 	bl	80010cc <__aeabi_f2iz>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	b21b      	sxth	r3, r3
 800dcdc:	9300      	str	r3, [sp, #0]
 800dcde:	4b78      	ldr	r3, [pc, #480]	; (800dec0 <SendTxData+0x224>)
 800dce0:	2201      	movs	r2, #1
 800dce2:	2100      	movs	r1, #0
 800dce4:	2002      	movs	r0, #2
 800dce6:	f012 fe2f 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800dcea:	4b76      	ldr	r3, [pc, #472]	; (800dec4 <SendTxData+0x228>)
 800dcec:	2202      	movs	r2, #2
 800dcee:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = PM2_5/100;
 800dcf0:	4b75      	ldr	r3, [pc, #468]	; (800dec8 <SendTxData+0x22c>)
 800dcf2:	881b      	ldrh	r3, [r3, #0]
 800dcf4:	4a75      	ldr	r2, [pc, #468]	; (800decc <SendTxData+0x230>)
 800dcf6:	fba2 2303 	umull	r2, r3, r2, r3
 800dcfa:	095b      	lsrs	r3, r3, #5
 800dcfc:	b298      	uxth	r0, r3
 800dcfe:	4b71      	ldr	r3, [pc, #452]	; (800dec4 <SendTxData+0x228>)
 800dd00:	685a      	ldr	r2, [r3, #4]
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	1c59      	adds	r1, r3, #1
 800dd06:	61f9      	str	r1, [r7, #28]
 800dd08:	4413      	add	r3, r2
 800dd0a:	b2c2      	uxtb	r2, r0
 800dd0c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM2_5%100;
 800dd0e:	4b6e      	ldr	r3, [pc, #440]	; (800dec8 <SendTxData+0x22c>)
 800dd10:	881b      	ldrh	r3, [r3, #0]
 800dd12:	4a6e      	ldr	r2, [pc, #440]	; (800decc <SendTxData+0x230>)
 800dd14:	fba2 1203 	umull	r1, r2, r2, r3
 800dd18:	0952      	lsrs	r2, r2, #5
 800dd1a:	2164      	movs	r1, #100	; 0x64
 800dd1c:	fb01 f202 	mul.w	r2, r1, r2
 800dd20:	1a9b      	subs	r3, r3, r2
 800dd22:	b298      	uxth	r0, r3
 800dd24:	4b67      	ldr	r3, [pc, #412]	; (800dec4 <SendTxData+0x228>)
 800dd26:	685a      	ldr	r2, [r3, #4]
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	1c59      	adds	r1, r3, #1
 800dd2c:	61f9      	str	r1, [r7, #28]
 800dd2e:	4413      	add	r3, r2
 800dd30:	b2c2      	uxtb	r2, r0
 800dd32:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temp*100.0));
 800dd34:	4b66      	ldr	r3, [pc, #408]	; (800ded0 <SendTxData+0x234>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7f2 fb89 	bl	8000450 <__aeabi_f2d>
 800dd3e:	f04f 0200 	mov.w	r2, #0
 800dd42:	4b64      	ldr	r3, [pc, #400]	; (800ded4 <SendTxData+0x238>)
 800dd44:	f7f2 fbdc 	bl	8000500 <__aeabi_dmul>
 800dd48:	4602      	mov	r2, r0
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	4610      	mov	r0, r2
 800dd4e:	4619      	mov	r1, r3
 800dd50:	f7f2 fe70 	bl	8000a34 <__aeabi_d2iz>
 800dd54:	4603      	mov	r3, r0
 800dd56:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800dd58:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800dd5c:	4a5b      	ldr	r2, [pc, #364]	; (800decc <SendTxData+0x230>)
 800dd5e:	fb82 1203 	smull	r1, r2, r2, r3
 800dd62:	1152      	asrs	r2, r2, #5
 800dd64:	17db      	asrs	r3, r3, #31
 800dd66:	1ad3      	subs	r3, r2, r3
 800dd68:	b218      	sxth	r0, r3
 800dd6a:	4b56      	ldr	r3, [pc, #344]	; (800dec4 <SendTxData+0x228>)
 800dd6c:	685a      	ldr	r2, [r3, #4]
 800dd6e:	69fb      	ldr	r3, [r7, #28]
 800dd70:	1c59      	adds	r1, r3, #1
 800dd72:	61f9      	str	r1, [r7, #28]
 800dd74:	4413      	add	r3, r2
 800dd76:	b2c2      	uxtb	r2, r0
 800dd78:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800dd7a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800dd7e:	4a53      	ldr	r2, [pc, #332]	; (800decc <SendTxData+0x230>)
 800dd80:	fb82 1203 	smull	r1, r2, r2, r3
 800dd84:	1151      	asrs	r1, r2, #5
 800dd86:	17da      	asrs	r2, r3, #31
 800dd88:	1a8a      	subs	r2, r1, r2
 800dd8a:	2164      	movs	r1, #100	; 0x64
 800dd8c:	fb01 f202 	mul.w	r2, r1, r2
 800dd90:	1a9b      	subs	r3, r3, r2
 800dd92:	b218      	sxth	r0, r3
 800dd94:	4b4b      	ldr	r3, [pc, #300]	; (800dec4 <SendTxData+0x228>)
 800dd96:	685a      	ldr	r2, [r3, #4]
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	1c59      	adds	r1, r3, #1
 800dd9c:	61f9      	str	r1, [r7, #28]
 800dd9e:	4413      	add	r3, r2
 800dda0:	b2c2      	uxtb	r2, r0
 800dda2:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800dda4:	4b4c      	ldr	r3, [pc, #304]	; (800ded8 <SendTxData+0x23c>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7f2 fb51 	bl	8000450 <__aeabi_f2d>
 800ddae:	f04f 0200 	mov.w	r2, #0
 800ddb2:	4b48      	ldr	r3, [pc, #288]	; (800ded4 <SendTxData+0x238>)
 800ddb4:	f7f2 fba4 	bl	8000500 <__aeabi_dmul>
 800ddb8:	4602      	mov	r2, r0
 800ddba:	460b      	mov	r3, r1
 800ddbc:	4610      	mov	r0, r2
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	f7f2 fe38 	bl	8000a34 <__aeabi_d2iz>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800ddc8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ddcc:	4a3f      	ldr	r2, [pc, #252]	; (800decc <SendTxData+0x230>)
 800ddce:	fb82 1203 	smull	r1, r2, r2, r3
 800ddd2:	1152      	asrs	r2, r2, #5
 800ddd4:	17db      	asrs	r3, r3, #31
 800ddd6:	1ad3      	subs	r3, r2, r3
 800ddd8:	b218      	sxth	r0, r3
 800ddda:	4b3a      	ldr	r3, [pc, #232]	; (800dec4 <SendTxData+0x228>)
 800dddc:	685a      	ldr	r2, [r3, #4]
 800ddde:	69fb      	ldr	r3, [r7, #28]
 800dde0:	1c59      	adds	r1, r3, #1
 800dde2:	61f9      	str	r1, [r7, #28]
 800dde4:	4413      	add	r3, r2
 800dde6:	b2c2      	uxtb	r2, r0
 800dde8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800ddea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ddee:	4a37      	ldr	r2, [pc, #220]	; (800decc <SendTxData+0x230>)
 800ddf0:	fb82 1203 	smull	r1, r2, r2, r3
 800ddf4:	1151      	asrs	r1, r2, #5
 800ddf6:	17da      	asrs	r2, r3, #31
 800ddf8:	1a8a      	subs	r2, r1, r2
 800ddfa:	2164      	movs	r1, #100	; 0x64
 800ddfc:	fb01 f202 	mul.w	r2, r1, r2
 800de00:	1a9b      	subs	r3, r3, r2
 800de02:	b218      	sxth	r0, r3
 800de04:	4b2f      	ldr	r3, [pc, #188]	; (800dec4 <SendTxData+0x228>)
 800de06:	685a      	ldr	r2, [r3, #4]
 800de08:	69fb      	ldr	r3, [r7, #28]
 800de0a:	1c59      	adds	r1, r3, #1
 800de0c:	61f9      	str	r1, [r7, #28]
 800de0e:	4413      	add	r3, r2
 800de10:	b2c2      	uxtb	r2, r0
 800de12:	701a      	strb	r2, [r3, #0]


  AppData.BufferSize = i;
 800de14:	69fb      	ldr	r3, [r7, #28]
 800de16:	b2da      	uxtb	r2, r3
 800de18:	4b2a      	ldr	r3, [pc, #168]	; (800dec4 <SendTxData+0x228>)
 800de1a:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800de1c:	4b2f      	ldr	r3, [pc, #188]	; (800dedc <SendTxData+0x240>)
 800de1e:	7a5b      	ldrb	r3, [r3, #9]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d007      	beq.n	800de34 <SendTxData+0x198>
 800de24:	f002 f9f4 	bl	8010210 <LmHandlerJoinStatus>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d102      	bne.n	800de34 <SendTxData+0x198>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800de2e:	482b      	ldr	r0, [pc, #172]	; (800dedc <SendTxData+0x240>)
 800de30:	f012 fb80 	bl	8020534 <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800de34:	4b2a      	ldr	r3, [pc, #168]	; (800dee0 <SendTxData+0x244>)
 800de36:	78db      	ldrb	r3, [r3, #3]
 800de38:	2200      	movs	r2, #0
 800de3a:	4619      	mov	r1, r3
 800de3c:	4821      	ldr	r0, [pc, #132]	; (800dec4 <SendTxData+0x228>)
 800de3e:	f002 fa03 	bl	8010248 <LmHandlerSend>
 800de42:	4603      	mov	r3, r0
 800de44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (LORAMAC_HANDLER_SUCCESS == status)
 800de48:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d106      	bne.n	800de5e <SendTxData+0x1c2>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800de50:	4b24      	ldr	r3, [pc, #144]	; (800dee4 <SendTxData+0x248>)
 800de52:	2201      	movs	r2, #1
 800de54:	2100      	movs	r1, #0
 800de56:	2001      	movs	r0, #1
 800de58:	f012 fd76 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
 800de5c:	e016      	b.n	800de8c <SendTxData+0x1f0>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800de5e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800de62:	f113 0f06 	cmn.w	r3, #6
 800de66:	d111      	bne.n	800de8c <SendTxData+0x1f0>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800de68:	f002 f948 	bl	80100fc <LmHandlerGetDutyCycleWaitTime>
 800de6c:	6278      	str	r0, [r7, #36]	; 0x24
    if (nextTxIn > 0)
 800de6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de70:	2b00      	cmp	r3, #0
 800de72:	d00b      	beq.n	800de8c <SendTxData+0x1f0>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800de74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de76:	4a1c      	ldr	r2, [pc, #112]	; (800dee8 <SendTxData+0x24c>)
 800de78:	fba2 2303 	umull	r2, r3, r2, r3
 800de7c:	099b      	lsrs	r3, r3, #6
 800de7e:	9300      	str	r3, [sp, #0]
 800de80:	4b1a      	ldr	r3, [pc, #104]	; (800deec <SendTxData+0x250>)
 800de82:	2201      	movs	r2, #1
 800de84:	2100      	movs	r1, #0
 800de86:	2001      	movs	r0, #1
 800de88:	f012 fd5e 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
  }
  }

  if (EventType == TX_ON_TIMER)
 800de8c:	4b18      	ldr	r3, [pc, #96]	; (800def0 <SendTxData+0x254>)
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d10f      	bne.n	800deb4 <SendTxData+0x218>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800de94:	4817      	ldr	r0, [pc, #92]	; (800def4 <SendTxData+0x258>)
 800de96:	f012 fb4d 	bl	8020534 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800de9a:	4b17      	ldr	r3, [pc, #92]	; (800def8 <SendTxData+0x25c>)
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea0:	4293      	cmp	r3, r2
 800dea2:	bf38      	it	cc
 800dea4:	4613      	movcc	r3, r2
 800dea6:	4619      	mov	r1, r3
 800dea8:	4812      	ldr	r0, [pc, #72]	; (800def4 <SendTxData+0x258>)
 800deaa:	f012 fbb3 	bl	8020614 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800deae:	4811      	ldr	r0, [pc, #68]	; (800def4 <SendTxData+0x258>)
 800deb0:	f012 fad2 	bl	8020458 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800deb4:	bf00      	nop
 800deb6:	3728      	adds	r7, #40	; 0x28
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}
 800debc:	080211dc 	.word	0x080211dc
 800dec0:	080211e8 	.word	0x080211e8
 800dec4:	200000a4 	.word	0x200000a4
 800dec8:	20000698 	.word	0x20000698
 800decc:	51eb851f 	.word	0x51eb851f
 800ded0:	2000069c 	.word	0x2000069c
 800ded4:	40590000 	.word	0x40590000
 800ded8:	200006a0 	.word	0x200006a0
 800dedc:	20000c60 	.word	0x20000c60
 800dee0:	2000008c 	.word	0x2000008c
 800dee4:	080211f4 	.word	0x080211f4
 800dee8:	10624dd3 	.word	0x10624dd3
 800deec:	08021204 	.word	0x08021204
 800def0:	20000b08 	.word	0x20000b08
 800def4:	20000b0c 	.word	0x20000b0c
 800def8:	200000a0 	.word	0x200000a0

0800defc <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800df04:	2100      	movs	r1, #0
 800df06:	2002      	movs	r0, #2
 800df08:	f012 f9ee 	bl	80202e8 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800df0c:	4803      	ldr	r0, [pc, #12]	; (800df1c <OnTxTimerEvent+0x20>)
 800df0e:	f012 faa3 	bl	8020458 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800df12:	bf00      	nop
 800df14:	3708      	adds	r7, #8
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	20000b0c 	.word	0x20000b0c

0800df20 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800df20:	b480      	push	{r7}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800df28:	bf00      	nop
 800df2a:	370c      	adds	r7, #12
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bc80      	pop	{r7}
 800df30:	4770      	bx	lr

0800df32 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800df32:	b480      	push	{r7}
 800df34:	b083      	sub	sp, #12
 800df36:	af00      	add	r7, sp, #0
 800df38:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800df3a:	bf00      	nop
 800df3c:	370c      	adds	r7, #12
 800df3e:	46bd      	mov	sp, r7
 800df40:	bc80      	pop	{r7}
 800df42:	4770      	bx	lr

0800df44 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800df4c:	bf00      	nop
 800df4e:	370c      	adds	r7, #12
 800df50:	46bd      	mov	sp, r7
 800df52:	bc80      	pop	{r7}
 800df54:	4770      	bx	lr
	...

0800df58 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b086      	sub	sp, #24
 800df5c:	af04      	add	r7, sp, #16
 800df5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d041      	beq.n	800dfea <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d03d      	beq.n	800dfea <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800df6e:	4821      	ldr	r0, [pc, #132]	; (800dff4 <OnTxData+0x9c>)
 800df70:	f012 fa72 	bl	8020458 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800df74:	4b20      	ldr	r3, [pc, #128]	; (800dff8 <OnTxData+0xa0>)
 800df76:	2200      	movs	r2, #0
 800df78:	2100      	movs	r1, #0
 800df7a:	2002      	movs	r0, #2
 800df7c:	f012 fce4 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	687a      	ldr	r2, [r7, #4]
 800df86:	7c12      	ldrb	r2, [r2, #16]
 800df88:	4611      	mov	r1, r2
 800df8a:	687a      	ldr	r2, [r7, #4]
 800df8c:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800df90:	4610      	mov	r0, r2
 800df92:	687a      	ldr	r2, [r7, #4]
 800df94:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800df98:	9203      	str	r2, [sp, #12]
 800df9a:	9002      	str	r0, [sp, #8]
 800df9c:	9101      	str	r1, [sp, #4]
 800df9e:	9300      	str	r3, [sp, #0]
 800dfa0:	4b16      	ldr	r3, [pc, #88]	; (800dffc <OnTxData+0xa4>)
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	2100      	movs	r1, #0
 800dfa6:	2003      	movs	r0, #3
 800dfa8:	f012 fcce 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800dfac:	4b14      	ldr	r3, [pc, #80]	; (800e000 <OnTxData+0xa8>)
 800dfae:	2200      	movs	r2, #0
 800dfb0:	2100      	movs	r1, #0
 800dfb2:	2003      	movs	r0, #3
 800dfb4:	f012 fcc8 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	7a1b      	ldrb	r3, [r3, #8]
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	d10e      	bne.n	800dfde <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	7a5b      	ldrb	r3, [r3, #9]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d001      	beq.n	800dfcc <OnTxData+0x74>
 800dfc8:	4b0e      	ldr	r3, [pc, #56]	; (800e004 <OnTxData+0xac>)
 800dfca:	e000      	b.n	800dfce <OnTxData+0x76>
 800dfcc:	4b0e      	ldr	r3, [pc, #56]	; (800e008 <OnTxData+0xb0>)
 800dfce:	9300      	str	r3, [sp, #0]
 800dfd0:	4b0e      	ldr	r3, [pc, #56]	; (800e00c <OnTxData+0xb4>)
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	2003      	movs	r0, #3
 800dfd8:	f012 fcb6 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800dfdc:	e005      	b.n	800dfea <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800dfde:	4b0c      	ldr	r3, [pc, #48]	; (800e010 <OnTxData+0xb8>)
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	2100      	movs	r1, #0
 800dfe4:	2003      	movs	r0, #3
 800dfe6:	f012 fcaf 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
}
 800dfea:	bf00      	nop
 800dfec:	3708      	adds	r7, #8
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	20000c30 	.word	0x20000c30
 800dff8:	08021224 	.word	0x08021224
 800dffc:	08021258 	.word	0x08021258
 800e000:	0802128c 	.word	0x0802128c
 800e004:	0802129c 	.word	0x0802129c
 800e008:	080212a0 	.word	0x080212a0
 800e00c:	080212a8 	.word	0x080212a8
 800e010:	080212bc 	.word	0x080212bc

0800e014 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d035      	beq.n	800e08e <OnJoinRequest+0x7a>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d11a      	bne.n	800e062 <OnJoinRequest+0x4e>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800e02c:	481a      	ldr	r0, [pc, #104]	; (800e098 <OnJoinRequest+0x84>)
 800e02e:	f012 fa81 	bl	8020534 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800e032:	4b1a      	ldr	r3, [pc, #104]	; (800e09c <OnJoinRequest+0x88>)
 800e034:	2200      	movs	r2, #0
 800e036:	2100      	movs	r1, #0
 800e038:	2002      	movs	r0, #2
 800e03a:	f012 fc85 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	799b      	ldrb	r3, [r3, #6]
 800e042:	2b01      	cmp	r3, #1
 800e044:	d106      	bne.n	800e054 <OnJoinRequest+0x40>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800e046:	4b16      	ldr	r3, [pc, #88]	; (800e0a0 <OnJoinRequest+0x8c>)
 800e048:	2200      	movs	r2, #0
 800e04a:	2100      	movs	r1, #0
 800e04c:	2002      	movs	r0, #2
 800e04e:	f012 fc7b 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800e052:	e01c      	b.n	800e08e <OnJoinRequest+0x7a>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800e054:	4b13      	ldr	r3, [pc, #76]	; (800e0a4 <OnJoinRequest+0x90>)
 800e056:	2200      	movs	r2, #0
 800e058:	2100      	movs	r1, #0
 800e05a:	2002      	movs	r0, #2
 800e05c:	f012 fc74 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
}
 800e060:	e015      	b.n	800e08e <OnJoinRequest+0x7a>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800e062:	4b11      	ldr	r3, [pc, #68]	; (800e0a8 <OnJoinRequest+0x94>)
 800e064:	2200      	movs	r2, #0
 800e066:	2100      	movs	r1, #0
 800e068:	2002      	movs	r0, #2
 800e06a:	f012 fc6d 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	799b      	ldrb	r3, [r3, #6]
 800e072:	2b02      	cmp	r3, #2
 800e074:	d10b      	bne.n	800e08e <OnJoinRequest+0x7a>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800e076:	4b0d      	ldr	r3, [pc, #52]	; (800e0ac <OnJoinRequest+0x98>)
 800e078:	2200      	movs	r2, #0
 800e07a:	2100      	movs	r1, #0
 800e07c:	2002      	movs	r0, #2
 800e07e:	f012 fc63 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800e082:	4b0b      	ldr	r3, [pc, #44]	; (800e0b0 <OnJoinRequest+0x9c>)
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	2101      	movs	r1, #1
 800e088:	4618      	mov	r0, r3
 800e08a:	f002 f841 	bl	8010110 <LmHandlerJoin>
}
 800e08e:	bf00      	nop
 800e090:	3708      	adds	r7, #8
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	20000c60 	.word	0x20000c60
 800e09c:	080212cc 	.word	0x080212cc
 800e0a0:	080212e4 	.word	0x080212e4
 800e0a4:	08021304 	.word	0x08021304
 800e0a8:	08021324 	.word	0x08021324
 800e0ac:	08021340 	.word	0x08021340
 800e0b0:	2000003c 	.word	0x2000003c

0800e0b4 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800e0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0b6:	b093      	sub	sp, #76	; 0x4c
 800e0b8:	af0c      	add	r7, sp, #48	; 0x30
 800e0ba:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d056      	beq.n	800e170 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	785b      	ldrb	r3, [r3, #1]
 800e0c6:	2b02      	cmp	r3, #2
 800e0c8:	d008      	beq.n	800e0dc <OnBeaconStatusChange+0x28>
 800e0ca:	2b03      	cmp	r3, #3
 800e0cc:	d049      	beq.n	800e162 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800e0ce:	4b2b      	ldr	r3, [pc, #172]	; (800e17c <OnBeaconStatusChange+0xc8>)
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	2100      	movs	r1, #0
 800e0d4:	2002      	movs	r0, #2
 800e0d6:	f012 fc37 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800e0da:	e04a      	b.n	800e172 <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	7c1b      	ldrb	r3, [r3, #16]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e0e8:	461c      	mov	r4, r3
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800e0f0:	461d      	mov	r5, r3
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	68db      	ldr	r3, [r3, #12]
 800e0f6:	697a      	ldr	r2, [r7, #20]
 800e0f8:	6852      	ldr	r2, [r2, #4]
 800e0fa:	6979      	ldr	r1, [r7, #20]
 800e0fc:	7d49      	ldrb	r1, [r1, #21]
 800e0fe:	460e      	mov	r6, r1
 800e100:	6979      	ldr	r1, [r7, #20]
 800e102:	7d89      	ldrb	r1, [r1, #22]
 800e104:	6139      	str	r1, [r7, #16]
 800e106:	6979      	ldr	r1, [r7, #20]
 800e108:	7dc9      	ldrb	r1, [r1, #23]
 800e10a:	60f9      	str	r1, [r7, #12]
 800e10c:	6979      	ldr	r1, [r7, #20]
 800e10e:	7e09      	ldrb	r1, [r1, #24]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	6979      	ldr	r1, [r7, #20]
 800e114:	7e49      	ldrb	r1, [r1, #25]
 800e116:	6079      	str	r1, [r7, #4]
 800e118:	6979      	ldr	r1, [r7, #20]
 800e11a:	7e89      	ldrb	r1, [r1, #26]
 800e11c:	6039      	str	r1, [r7, #0]
 800e11e:	6979      	ldr	r1, [r7, #20]
 800e120:	7ec9      	ldrb	r1, [r1, #27]
 800e122:	910b      	str	r1, [sp, #44]	; 0x2c
 800e124:	f8d7 c000 	ldr.w	ip, [r7]
 800e128:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800e12c:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800e130:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e134:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800e138:	f8cd c020 	str.w	ip, [sp, #32]
 800e13c:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800e140:	f8cd c01c 	str.w	ip, [sp, #28]
 800e144:	6939      	ldr	r1, [r7, #16]
 800e146:	9106      	str	r1, [sp, #24]
 800e148:	9605      	str	r6, [sp, #20]
 800e14a:	9204      	str	r2, [sp, #16]
 800e14c:	9303      	str	r3, [sp, #12]
 800e14e:	9502      	str	r5, [sp, #8]
 800e150:	9401      	str	r4, [sp, #4]
 800e152:	9000      	str	r0, [sp, #0]
 800e154:	4b0a      	ldr	r3, [pc, #40]	; (800e180 <OnBeaconStatusChange+0xcc>)
 800e156:	2200      	movs	r2, #0
 800e158:	2100      	movs	r1, #0
 800e15a:	2002      	movs	r0, #2
 800e15c:	f012 fbf4 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800e160:	e007      	b.n	800e172 <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800e162:	4b08      	ldr	r3, [pc, #32]	; (800e184 <OnBeaconStatusChange+0xd0>)
 800e164:	2200      	movs	r2, #0
 800e166:	2100      	movs	r1, #0
 800e168:	2002      	movs	r0, #2
 800e16a:	f012 fbed 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800e16e:	e000      	b.n	800e172 <OnBeaconStatusChange+0xbe>
      }
    }
  }
 800e170:	bf00      	nop
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800e172:	bf00      	nop
 800e174:	371c      	adds	r7, #28
 800e176:	46bd      	mov	sp, r7
 800e178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e17a:	bf00      	nop
 800e17c:	08021364 	.word	0x08021364
 800e180:	0802137c 	.word	0x0802137c
 800e184:	080213f0 	.word	0x080213f0

0800e188 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b084      	sub	sp, #16
 800e18c:	af02      	add	r7, sp, #8
 800e18e:	4603      	mov	r3, r0
 800e190:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800e192:	79fb      	ldrb	r3, [r7, #7]
 800e194:	4a06      	ldr	r2, [pc, #24]	; (800e1b0 <OnClassChange+0x28>)
 800e196:	5cd3      	ldrb	r3, [r2, r3]
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	4b06      	ldr	r3, [pc, #24]	; (800e1b4 <OnClassChange+0x2c>)
 800e19c:	2200      	movs	r2, #0
 800e19e:	2100      	movs	r1, #0
 800e1a0:	2002      	movs	r0, #2
 800e1a2:	f012 fbd1 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800e1a6:	bf00      	nop
 800e1a8:	3708      	adds	r7, #8
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	0802142c 	.word	0x0802142c
 800e1b4:	08021410 	.word	0x08021410

0800e1b8 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800e1bc:	2100      	movs	r1, #0
 800e1be:	2001      	movs	r0, #1
 800e1c0:	f012 f892 	bl	80202e8 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800e1c4:	bf00      	nop
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800e1d0:	4a0d      	ldr	r2, [pc, #52]	; (800e208 <OnTxPeriodicityChanged+0x40>)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800e1d6:	4b0c      	ldr	r3, [pc, #48]	; (800e208 <OnTxPeriodicityChanged+0x40>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d103      	bne.n	800e1e6 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800e1de:	4b0a      	ldr	r3, [pc, #40]	; (800e208 <OnTxPeriodicityChanged+0x40>)
 800e1e0:	f242 7210 	movw	r2, #10000	; 0x2710
 800e1e4:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800e1e6:	4809      	ldr	r0, [pc, #36]	; (800e20c <OnTxPeriodicityChanged+0x44>)
 800e1e8:	f012 f9a4 	bl	8020534 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800e1ec:	4b06      	ldr	r3, [pc, #24]	; (800e208 <OnTxPeriodicityChanged+0x40>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	4806      	ldr	r0, [pc, #24]	; (800e20c <OnTxPeriodicityChanged+0x44>)
 800e1f4:	f012 fa0e 	bl	8020614 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800e1f8:	4804      	ldr	r0, [pc, #16]	; (800e20c <OnTxPeriodicityChanged+0x44>)
 800e1fa:	f012 f92d 	bl	8020458 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800e1fe:	bf00      	nop
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	200000a0 	.word	0x200000a0
 800e20c:	20000b0c 	.word	0x20000b0c

0800e210 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800e210:	b480      	push	{r7}
 800e212:	b083      	sub	sp, #12
 800e214:	af00      	add	r7, sp, #0
 800e216:	4603      	mov	r3, r0
 800e218:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800e21a:	4a04      	ldr	r2, [pc, #16]	; (800e22c <OnTxFrameCtrlChanged+0x1c>)
 800e21c:	79fb      	ldrb	r3, [r7, #7]
 800e21e:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800e220:	bf00      	nop
 800e222:	370c      	adds	r7, #12
 800e224:	46bd      	mov	sp, r7
 800e226:	bc80      	pop	{r7}
 800e228:	4770      	bx	lr
 800e22a:	bf00      	nop
 800e22c:	2000008c 	.word	0x2000008c

0800e230 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800e230:	b480      	push	{r7}
 800e232:	b083      	sub	sp, #12
 800e234:	af00      	add	r7, sp, #0
 800e236:	4603      	mov	r3, r0
 800e238:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800e23a:	4a04      	ldr	r2, [pc, #16]	; (800e24c <OnPingSlotPeriodicityChanged+0x1c>)
 800e23c:	79fb      	ldrb	r3, [r7, #7]
 800e23e:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800e240:	bf00      	nop
 800e242:	370c      	adds	r7, #12
 800e244:	46bd      	mov	sp, r7
 800e246:	bc80      	pop	{r7}
 800e248:	4770      	bx	lr
 800e24a:	bf00      	nop
 800e24c:	2000008c 	.word	0x2000008c

0800e250 <OnSystemReset>:

static void OnSystemReset(void)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800e254:	f002 fde1 	bl	8010e1a <LmHandlerHalt>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d106      	bne.n	800e26c <OnSystemReset+0x1c>
 800e25e:	f001 ffd7 	bl	8010210 <LmHandlerJoinStatus>
 800e262:	4603      	mov	r3, r0
 800e264:	2b01      	cmp	r3, #1
 800e266:	d101      	bne.n	800e26c <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800e268:	f7ff fb6a 	bl	800d940 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800e26c:	bf00      	nop
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <StopJoin>:

static void StopJoin(void)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800e274:	4817      	ldr	r0, [pc, #92]	; (800e2d4 <StopJoin+0x64>)
 800e276:	f012 f95d 	bl	8020534 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800e27a:	f002 fdc1 	bl	8010e00 <LmHandlerStop>
 800e27e:	4603      	mov	r3, r0
 800e280:	2b00      	cmp	r3, #0
 800e282:	d006      	beq.n	800e292 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800e284:	4b14      	ldr	r3, [pc, #80]	; (800e2d8 <StopJoin+0x68>)
 800e286:	2200      	movs	r2, #0
 800e288:	2100      	movs	r1, #0
 800e28a:	2002      	movs	r0, #2
 800e28c:	f012 fb5c 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
 800e290:	e01a      	b.n	800e2c8 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800e292:	4b12      	ldr	r3, [pc, #72]	; (800e2dc <StopJoin+0x6c>)
 800e294:	2200      	movs	r2, #0
 800e296:	2100      	movs	r1, #0
 800e298:	2002      	movs	r0, #2
 800e29a:	f012 fb55 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800e29e:	4b10      	ldr	r3, [pc, #64]	; (800e2e0 <StopJoin+0x70>)
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800e2a4:	4b0f      	ldr	r3, [pc, #60]	; (800e2e4 <StopJoin+0x74>)
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	2100      	movs	r1, #0
 800e2aa:	2002      	movs	r0, #2
 800e2ac:	f012 fb4c 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800e2b0:	480d      	ldr	r0, [pc, #52]	; (800e2e8 <StopJoin+0x78>)
 800e2b2:	f001 fdd7 	bl	800fe64 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800e2b6:	4b0a      	ldr	r3, [pc, #40]	; (800e2e0 <StopJoin+0x70>)
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	2101      	movs	r1, #1
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f001 ff27 	bl	8010110 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800e2c2:	4804      	ldr	r0, [pc, #16]	; (800e2d4 <StopJoin+0x64>)
 800e2c4:	f012 f8c8 	bl	8020458 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800e2c8:	4808      	ldr	r0, [pc, #32]	; (800e2ec <StopJoin+0x7c>)
 800e2ca:	f012 f8c5 	bl	8020458 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800e2ce:	bf00      	nop
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	20000b0c 	.word	0x20000b0c
 800e2d8:	08021430 	.word	0x08021430
 800e2dc:	08021450 	.word	0x08021450
 800e2e0:	2000003c 	.word	0x2000003c
 800e2e4:	08021464 	.word	0x08021464
 800e2e8:	2000008c 	.word	0x2000008c
 800e2ec:	20000b24 	.word	0x20000b24

0800e2f0 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800e2f8:	4b05      	ldr	r3, [pc, #20]	; (800e310 <OnStopJoinTimerEvent+0x20>)
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	2b02      	cmp	r3, #2
 800e2fe:	d103      	bne.n	800e308 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800e300:	2100      	movs	r1, #0
 800e302:	2008      	movs	r0, #8
 800e304:	f011 fff0 	bl	80202e8 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800e308:	bf00      	nop
 800e30a:	3708      	adds	r7, #8
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	2000003c 	.word	0x2000003c

0800e314 <StoreContext>:

static void StoreContext(void)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b082      	sub	sp, #8
 800e318:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800e31a:	23ff      	movs	r3, #255	; 0xff
 800e31c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800e31e:	f002 fd89 	bl	8010e34 <LmHandlerNvmDataStore>
 800e322:	4603      	mov	r3, r0
 800e324:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800e326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e32a:	f113 0f08 	cmn.w	r3, #8
 800e32e:	d106      	bne.n	800e33e <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800e330:	4b0a      	ldr	r3, [pc, #40]	; (800e35c <StoreContext+0x48>)
 800e332:	2200      	movs	r2, #0
 800e334:	2100      	movs	r1, #0
 800e336:	2002      	movs	r0, #2
 800e338:	f012 fb06 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800e33c:	e00a      	b.n	800e354 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800e33e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e346:	d105      	bne.n	800e354 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800e348:	4b05      	ldr	r3, [pc, #20]	; (800e360 <StoreContext+0x4c>)
 800e34a:	2200      	movs	r2, #0
 800e34c:	2100      	movs	r1, #0
 800e34e:	2002      	movs	r0, #2
 800e350:	f012 fafa 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
}
 800e354:	bf00      	nop
 800e356:	3708      	adds	r7, #8
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	08021484 	.word	0x08021484
 800e360:	0802149c 	.word	0x0802149c

0800e364 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	4603      	mov	r3, r0
 800e36c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800e36e:	79fb      	ldrb	r3, [r7, #7]
 800e370:	2b01      	cmp	r3, #1
 800e372:	d106      	bne.n	800e382 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800e374:	4b08      	ldr	r3, [pc, #32]	; (800e398 <OnNvmDataChange+0x34>)
 800e376:	2200      	movs	r2, #0
 800e378:	2100      	movs	r1, #0
 800e37a:	2002      	movs	r0, #2
 800e37c:	f012 fae4 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800e380:	e005      	b.n	800e38e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800e382:	4b06      	ldr	r3, [pc, #24]	; (800e39c <OnNvmDataChange+0x38>)
 800e384:	2200      	movs	r2, #0
 800e386:	2100      	movs	r1, #0
 800e388:	2002      	movs	r0, #2
 800e38a:	f012 fadd 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
}
 800e38e:	bf00      	nop
 800e390:	3708      	adds	r7, #8
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}
 800e396:	bf00      	nop
 800e398:	080214b4 	.word	0x080214b4
 800e39c:	080214c8 	.word	0x080214c8

0800e3a0 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b082      	sub	sp, #8
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800e3aa:	f7f7 fd7f 	bl	8005eac <HAL_FLASH_Unlock>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d11c      	bne.n	800e3ee <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800e3b4:	4b10      	ldr	r3, [pc, #64]	; (800e3f8 <OnStoreContextRequest+0x58>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	029a      	lsls	r2, r3, #10
 800e3ba:	4b10      	ldr	r3, [pc, #64]	; (800e3fc <OnStoreContextRequest+0x5c>)
 800e3bc:	4013      	ands	r3, r2
 800e3be:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800e3c2:	fbb2 f1f3 	udiv	r1, r2, r3
 800e3c6:	fb01 f303 	mul.w	r3, r1, r3
 800e3ca:	1ad3      	subs	r3, r2, r3
 800e3cc:	0adb      	lsrs	r3, r3, #11
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	2101      	movs	r1, #1
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7f3 fd8f 	bl	8001ef6 <FLASH_IF_EraseByPages>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d105      	bne.n	800e3ea <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800e3de:	2300      	movs	r3, #0
 800e3e0:	683a      	ldr	r2, [r7, #0]
 800e3e2:	6879      	ldr	r1, [r7, #4]
 800e3e4:	4806      	ldr	r0, [pc, #24]	; (800e400 <OnStoreContextRequest+0x60>)
 800e3e6:	f7f3 fca5 	bl	8001d34 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800e3ea:	f7f7 fd81 	bl	8005ef0 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800e3ee:	bf00      	nop
 800e3f0:	3708      	adds	r7, #8
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	1fff75e0 	.word	0x1fff75e0
 800e3fc:	03fffc00 	.word	0x03fffc00
 800e400:	0803f000 	.word	0x0803f000

0800e404 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b082      	sub	sp, #8
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	b29b      	uxth	r3, r3
 800e412:	461a      	mov	r2, r3
 800e414:	4903      	ldr	r1, [pc, #12]	; (800e424 <OnRestoreContextRequest+0x20>)
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f011 fa46 	bl	801f8a8 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800e41c:	bf00      	nop
 800e41e:	3708      	adds	r7, #8
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	0803f000 	.word	0x0803f000

0800e428 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800e42c:	4b16      	ldr	r3, [pc, #88]	; (800e488 <LoraInfo_Init+0x60>)
 800e42e:	2200      	movs	r2, #0
 800e430:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800e432:	4b15      	ldr	r3, [pc, #84]	; (800e488 <LoraInfo_Init+0x60>)
 800e434:	2200      	movs	r2, #0
 800e436:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800e438:	4b13      	ldr	r3, [pc, #76]	; (800e488 <LoraInfo_Init+0x60>)
 800e43a:	2200      	movs	r2, #0
 800e43c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800e43e:	4b12      	ldr	r3, [pc, #72]	; (800e488 <LoraInfo_Init+0x60>)
 800e440:	2200      	movs	r2, #0
 800e442:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800e444:	4b10      	ldr	r3, [pc, #64]	; (800e488 <LoraInfo_Init+0x60>)
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	f043 0320 	orr.w	r3, r3, #32
 800e44c:	4a0e      	ldr	r2, [pc, #56]	; (800e488 <LoraInfo_Init+0x60>)
 800e44e:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800e450:	4b0d      	ldr	r3, [pc, #52]	; (800e488 <LoraInfo_Init+0x60>)
 800e452:	685b      	ldr	r3, [r3, #4]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d10c      	bne.n	800e472 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800e458:	4b0c      	ldr	r3, [pc, #48]	; (800e48c <LoraInfo_Init+0x64>)
 800e45a:	2200      	movs	r2, #0
 800e45c:	2100      	movs	r1, #0
 800e45e:	2000      	movs	r0, #0
 800e460:	f012 fa72 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800e464:	bf00      	nop
 800e466:	f012 fa5d 	bl	8020924 <UTIL_ADV_TRACE_IsBufferEmpty>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d1fa      	bne.n	800e466 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800e470:	e7fe      	b.n	800e470 <LoraInfo_Init+0x48>
  }

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  loraInfo.ClassB = 1;
 800e472:	4b05      	ldr	r3, [pc, #20]	; (800e488 <LoraInfo_Init+0x60>)
 800e474:	2201      	movs	r2, #1
 800e476:	609a      	str	r2, [r3, #8]
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800e478:	4b03      	ldr	r3, [pc, #12]	; (800e488 <LoraInfo_Init+0x60>)
 800e47a:	2200      	movs	r2, #0
 800e47c:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800e47e:	4b02      	ldr	r3, [pc, #8]	; (800e488 <LoraInfo_Init+0x60>)
 800e480:	2203      	movs	r2, #3
 800e482:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800e484:	bf00      	nop
 800e486:	bd80      	pop	{r7, pc}
 800e488:	20000c78 	.word	0x20000c78
 800e48c:	080214dc 	.word	0x080214dc

0800e490 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800e490:	b480      	push	{r7}
 800e492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800e494:	4b02      	ldr	r3, [pc, #8]	; (800e4a0 <LoraInfo_GetPtr+0x10>)
}
 800e496:	4618      	mov	r0, r3
 800e498:	46bd      	mov	sp, r7
 800e49a:	bc80      	pop	{r7}
 800e49c:	4770      	bx	lr
 800e49e:	bf00      	nop
 800e4a0:	20000c78 	.word	0x20000c78

0800e4a4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800e4a8:	f7f5 fd75 	bl	8003f96 <BSP_RADIO_Init>
 800e4ac:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800e4b2:	b580      	push	{r7, lr}
 800e4b4:	b082      	sub	sp, #8
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800e4bc:	79fb      	ldrb	r3, [r7, #7]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7f5 fd9a 	bl	8003ff8 <BSP_RADIO_ConfigRFSwitch>
 800e4c4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3708      	adds	r7, #8
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}

0800e4ce <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800e4d2:	f7f5 fddf 	bl	8004094 <BSP_RADIO_GetTxConfig>
 800e4d6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	bd80      	pop	{r7, pc}

0800e4dc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800e4e0:	f7f5 fddf 	bl	80040a2 <BSP_RADIO_IsTCXO>
 800e4e4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	bd80      	pop	{r7, pc}

0800e4ea <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800e4ea:	b580      	push	{r7, lr}
 800e4ec:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800e4ee:	f7f5 fddf 	bl	80040b0 <BSP_RADIO_IsDCDC>
 800e4f2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	4603      	mov	r3, r0
 800e500:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800e502:	79fb      	ldrb	r3, [r7, #7]
 800e504:	4618      	mov	r0, r3
 800e506:	f7f5 fdda 	bl	80040be <BSP_RADIO_GetRFOMaxPowerConfig>
 800e50a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3708      	adds	r7, #8
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	33f1      	adds	r3, #241	; 0xf1
 800e520:	2210      	movs	r2, #16
 800e522:	2100      	movs	r1, #0
 800e524:	4618      	mov	r0, r3
 800e526:	f00d fef5 	bl	801c314 <memset1>
    ctx->M_n = 0;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2200      	movs	r2, #0
 800e52e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	22f0      	movs	r2, #240	; 0xf0
 800e536:	2100      	movs	r1, #0
 800e538:	4618      	mov	r0, r3
 800e53a:	f00d feeb 	bl	801c314 <memset1>
}
 800e53e:	bf00      	nop
 800e540:	3708      	adds	r7, #8
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}

0800e546 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800e546:	b580      	push	{r7, lr}
 800e548:	b082      	sub	sp, #8
 800e54a:	af00      	add	r7, sp, #0
 800e54c:	6078      	str	r0, [r7, #4]
 800e54e:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	461a      	mov	r2, r3
 800e554:	2110      	movs	r1, #16
 800e556:	6838      	ldr	r0, [r7, #0]
 800e558:	f000 fe5c 	bl	800f214 <lorawan_aes_set_key>
}
 800e55c:	bf00      	nop
 800e55e:	3708      	adds	r7, #8
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b08c      	sub	sp, #48	; 0x30
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	60b9      	str	r1, [r7, #8]
 800e56e:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e576:	2b00      	cmp	r3, #0
 800e578:	f000 80a1 	beq.w	800e6be <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e582:	f1c3 0310 	rsb	r3, r3, #16
 800e586:	687a      	ldr	r2, [r7, #4]
 800e588:	4293      	cmp	r3, r2
 800e58a:	bf28      	it	cs
 800e58c:	4613      	movcs	r3, r2
 800e58e:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f203 1201 	addw	r2, r3, #257	; 0x101
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e59c:	4413      	add	r3, r2
 800e59e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5a0:	b292      	uxth	r2, r2
 800e5a2:	68b9      	ldr	r1, [r7, #8]
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f00d fe7a 	bl	801c29e <memcpy1>
        ctx->M_n += mlen;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800e5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b2:	441a      	add	r2, r3
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e5c0:	2b0f      	cmp	r3, #15
 800e5c2:	f240 808d 	bls.w	800e6e0 <AES_CMAC_Update+0x17c>
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	f000 8088 	beq.w	800e6e0 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5d4:	e015      	b.n	800e602 <AES_CMAC_Update+0x9e>
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5da:	4413      	add	r3, r2
 800e5dc:	33f1      	adds	r3, #241	; 0xf1
 800e5de:	781a      	ldrb	r2, [r3, #0]
 800e5e0:	68f9      	ldr	r1, [r7, #12]
 800e5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e4:	440b      	add	r3, r1
 800e5e6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	4053      	eors	r3, r2
 800e5ee:	b2d9      	uxtb	r1, r3
 800e5f0:	68fa      	ldr	r2, [r7, #12]
 800e5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f4:	4413      	add	r3, r2
 800e5f6:	33f1      	adds	r3, #241	; 0xf1
 800e5f8:	460a      	mov	r2, r1
 800e5fa:	701a      	strb	r2, [r3, #0]
 800e5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fe:	3301      	adds	r3, #1
 800e600:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e604:	2b0f      	cmp	r3, #15
 800e606:	dde6      	ble.n	800e5d6 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800e60e:	f107 0314 	add.w	r3, r7, #20
 800e612:	2210      	movs	r2, #16
 800e614:	4618      	mov	r0, r3
 800e616:	f00d fe42 	bl	801c29e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e61a:	68fa      	ldr	r2, [r7, #12]
 800e61c:	f107 0114 	add.w	r1, r7, #20
 800e620:	f107 0314 	add.w	r3, r7, #20
 800e624:	4618      	mov	r0, r3
 800e626:	f000 fed3 	bl	800f3d0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	33f1      	adds	r3, #241	; 0xf1
 800e62e:	f107 0114 	add.w	r1, r7, #20
 800e632:	2210      	movs	r2, #16
 800e634:	4618      	mov	r0, r3
 800e636:	f00d fe32 	bl	801c29e <memcpy1>

        data += mlen;
 800e63a:	68ba      	ldr	r2, [r7, #8]
 800e63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63e:	4413      	add	r3, r2
 800e640:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e646:	1ad3      	subs	r3, r2, r3
 800e648:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800e64a:	e038      	b.n	800e6be <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800e64c:	2300      	movs	r3, #0
 800e64e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e650:	e013      	b.n	800e67a <AES_CMAC_Update+0x116>
 800e652:	68fa      	ldr	r2, [r7, #12]
 800e654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e656:	4413      	add	r3, r2
 800e658:	33f1      	adds	r3, #241	; 0xf1
 800e65a:	781a      	ldrb	r2, [r3, #0]
 800e65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65e:	68b9      	ldr	r1, [r7, #8]
 800e660:	440b      	add	r3, r1
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	4053      	eors	r3, r2
 800e666:	b2d9      	uxtb	r1, r3
 800e668:	68fa      	ldr	r2, [r7, #12]
 800e66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66c:	4413      	add	r3, r2
 800e66e:	33f1      	adds	r3, #241	; 0xf1
 800e670:	460a      	mov	r2, r1
 800e672:	701a      	strb	r2, [r3, #0]
 800e674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e676:	3301      	adds	r3, #1
 800e678:	62bb      	str	r3, [r7, #40]	; 0x28
 800e67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67c:	2b0f      	cmp	r3, #15
 800e67e:	dde8      	ble.n	800e652 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800e686:	f107 0314 	add.w	r3, r7, #20
 800e68a:	2210      	movs	r2, #16
 800e68c:	4618      	mov	r0, r3
 800e68e:	f00d fe06 	bl	801c29e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	f107 0114 	add.w	r1, r7, #20
 800e698:	f107 0314 	add.w	r3, r7, #20
 800e69c:	4618      	mov	r0, r3
 800e69e:	f000 fe97 	bl	800f3d0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	33f1      	adds	r3, #241	; 0xf1
 800e6a6:	f107 0114 	add.w	r1, r7, #20
 800e6aa:	2210      	movs	r2, #16
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f00d fdf6 	bl	801c29e <memcpy1>

        data += 16;
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	3310      	adds	r3, #16
 800e6b6:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	3b10      	subs	r3, #16
 800e6bc:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2b10      	cmp	r3, #16
 800e6c2:	d8c3      	bhi.n	800e64c <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	b292      	uxth	r2, r2
 800e6ce:	68b9      	ldr	r1, [r7, #8]
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f00d fde4 	bl	801c29e <memcpy1>
    ctx->M_n = len;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	687a      	ldr	r2, [r7, #4]
 800e6da:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800e6de:	e000      	b.n	800e6e2 <AES_CMAC_Update+0x17e>
            return;
 800e6e0:	bf00      	nop
}
 800e6e2:	3730      	adds	r7, #48	; 0x30
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b092      	sub	sp, #72	; 0x48
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800e6f2:	f107 031c 	add.w	r3, r7, #28
 800e6f6:	2210      	movs	r2, #16
 800e6f8:	2100      	movs	r1, #0
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f00d fe0a 	bl	801c314 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800e700:	683a      	ldr	r2, [r7, #0]
 800e702:	f107 011c 	add.w	r1, r7, #28
 800e706:	f107 031c 	add.w	r3, r7, #28
 800e70a:	4618      	mov	r0, r3
 800e70c:	f000 fe60 	bl	800f3d0 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800e710:	7f3b      	ldrb	r3, [r7, #28]
 800e712:	b25b      	sxtb	r3, r3
 800e714:	2b00      	cmp	r3, #0
 800e716:	da30      	bge.n	800e77a <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800e718:	2300      	movs	r3, #0
 800e71a:	647b      	str	r3, [r7, #68]	; 0x44
 800e71c:	e01b      	b.n	800e756 <AES_CMAC_Final+0x6e>
 800e71e:	f107 021c 	add.w	r2, r7, #28
 800e722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e724:	4413      	add	r3, r2
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	005b      	lsls	r3, r3, #1
 800e72a:	b25a      	sxtb	r2, r3
 800e72c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e72e:	3301      	adds	r3, #1
 800e730:	3348      	adds	r3, #72	; 0x48
 800e732:	443b      	add	r3, r7
 800e734:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e738:	09db      	lsrs	r3, r3, #7
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	b25b      	sxtb	r3, r3
 800e73e:	4313      	orrs	r3, r2
 800e740:	b25b      	sxtb	r3, r3
 800e742:	b2d9      	uxtb	r1, r3
 800e744:	f107 021c 	add.w	r2, r7, #28
 800e748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e74a:	4413      	add	r3, r2
 800e74c:	460a      	mov	r2, r1
 800e74e:	701a      	strb	r2, [r3, #0]
 800e750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e752:	3301      	adds	r3, #1
 800e754:	647b      	str	r3, [r7, #68]	; 0x44
 800e756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e758:	2b0e      	cmp	r3, #14
 800e75a:	dde0      	ble.n	800e71e <AES_CMAC_Final+0x36>
 800e75c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e760:	005b      	lsls	r3, r3, #1
 800e762:	b2db      	uxtb	r3, r3
 800e764:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800e768:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e76c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800e770:	43db      	mvns	r3, r3
 800e772:	b2db      	uxtb	r3, r3
 800e774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e778:	e027      	b.n	800e7ca <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800e77a:	2300      	movs	r3, #0
 800e77c:	643b      	str	r3, [r7, #64]	; 0x40
 800e77e:	e01b      	b.n	800e7b8 <AES_CMAC_Final+0xd0>
 800e780:	f107 021c 	add.w	r2, r7, #28
 800e784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e786:	4413      	add	r3, r2
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	005b      	lsls	r3, r3, #1
 800e78c:	b25a      	sxtb	r2, r3
 800e78e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e790:	3301      	adds	r3, #1
 800e792:	3348      	adds	r3, #72	; 0x48
 800e794:	443b      	add	r3, r7
 800e796:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e79a:	09db      	lsrs	r3, r3, #7
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	b25b      	sxtb	r3, r3
 800e7a0:	4313      	orrs	r3, r2
 800e7a2:	b25b      	sxtb	r3, r3
 800e7a4:	b2d9      	uxtb	r1, r3
 800e7a6:	f107 021c 	add.w	r2, r7, #28
 800e7aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7ac:	4413      	add	r3, r2
 800e7ae:	460a      	mov	r2, r1
 800e7b0:	701a      	strb	r2, [r3, #0]
 800e7b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	643b      	str	r3, [r7, #64]	; 0x40
 800e7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7ba:	2b0e      	cmp	r3, #14
 800e7bc:	dde0      	ble.n	800e780 <AES_CMAC_Final+0x98>
 800e7be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e7c2:	005b      	lsls	r3, r3, #1
 800e7c4:	b2db      	uxtb	r3, r3
 800e7c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e7d0:	2b10      	cmp	r3, #16
 800e7d2:	d11d      	bne.n	800e810 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e7d8:	e016      	b.n	800e808 <AES_CMAC_Final+0x120>
 800e7da:	683a      	ldr	r2, [r7, #0]
 800e7dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7de:	4413      	add	r3, r2
 800e7e0:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e7e4:	781a      	ldrb	r2, [r3, #0]
 800e7e6:	f107 011c 	add.w	r1, r7, #28
 800e7ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ec:	440b      	add	r3, r1
 800e7ee:	781b      	ldrb	r3, [r3, #0]
 800e7f0:	4053      	eors	r3, r2
 800e7f2:	b2d9      	uxtb	r1, r3
 800e7f4:	683a      	ldr	r2, [r7, #0]
 800e7f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7f8:	4413      	add	r3, r2
 800e7fa:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e7fe:	460a      	mov	r2, r1
 800e800:	701a      	strb	r2, [r3, #0]
 800e802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e804:	3301      	adds	r3, #1
 800e806:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e80a:	2b0f      	cmp	r3, #15
 800e80c:	dde5      	ble.n	800e7da <AES_CMAC_Final+0xf2>
 800e80e:	e096      	b.n	800e93e <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800e810:	7f3b      	ldrb	r3, [r7, #28]
 800e812:	b25b      	sxtb	r3, r3
 800e814:	2b00      	cmp	r3, #0
 800e816:	da30      	bge.n	800e87a <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800e818:	2300      	movs	r3, #0
 800e81a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e81c:	e01b      	b.n	800e856 <AES_CMAC_Final+0x16e>
 800e81e:	f107 021c 	add.w	r2, r7, #28
 800e822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e824:	4413      	add	r3, r2
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	005b      	lsls	r3, r3, #1
 800e82a:	b25a      	sxtb	r2, r3
 800e82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82e:	3301      	adds	r3, #1
 800e830:	3348      	adds	r3, #72	; 0x48
 800e832:	443b      	add	r3, r7
 800e834:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e838:	09db      	lsrs	r3, r3, #7
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	b25b      	sxtb	r3, r3
 800e83e:	4313      	orrs	r3, r2
 800e840:	b25b      	sxtb	r3, r3
 800e842:	b2d9      	uxtb	r1, r3
 800e844:	f107 021c 	add.w	r2, r7, #28
 800e848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84a:	4413      	add	r3, r2
 800e84c:	460a      	mov	r2, r1
 800e84e:	701a      	strb	r2, [r3, #0]
 800e850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e852:	3301      	adds	r3, #1
 800e854:	63bb      	str	r3, [r7, #56]	; 0x38
 800e856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e858:	2b0e      	cmp	r3, #14
 800e85a:	dde0      	ble.n	800e81e <AES_CMAC_Final+0x136>
 800e85c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e860:	005b      	lsls	r3, r3, #1
 800e862:	b2db      	uxtb	r3, r3
 800e864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800e868:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e86c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800e870:	43db      	mvns	r3, r3
 800e872:	b2db      	uxtb	r3, r3
 800e874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e878:	e027      	b.n	800e8ca <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800e87a:	2300      	movs	r3, #0
 800e87c:	637b      	str	r3, [r7, #52]	; 0x34
 800e87e:	e01b      	b.n	800e8b8 <AES_CMAC_Final+0x1d0>
 800e880:	f107 021c 	add.w	r2, r7, #28
 800e884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e886:	4413      	add	r3, r2
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	005b      	lsls	r3, r3, #1
 800e88c:	b25a      	sxtb	r2, r3
 800e88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e890:	3301      	adds	r3, #1
 800e892:	3348      	adds	r3, #72	; 0x48
 800e894:	443b      	add	r3, r7
 800e896:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e89a:	09db      	lsrs	r3, r3, #7
 800e89c:	b2db      	uxtb	r3, r3
 800e89e:	b25b      	sxtb	r3, r3
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	b25b      	sxtb	r3, r3
 800e8a4:	b2d9      	uxtb	r1, r3
 800e8a6:	f107 021c 	add.w	r2, r7, #28
 800e8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8ac:	4413      	add	r3, r2
 800e8ae:	460a      	mov	r2, r1
 800e8b0:	701a      	strb	r2, [r3, #0]
 800e8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	637b      	str	r3, [r7, #52]	; 0x34
 800e8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8ba:	2b0e      	cmp	r3, #14
 800e8bc:	dde0      	ble.n	800e880 <AES_CMAC_Final+0x198>
 800e8be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e8c2:	005b      	lsls	r3, r3, #1
 800e8c4:	b2db      	uxtb	r3, r3
 800e8c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e8d0:	683a      	ldr	r2, [r7, #0]
 800e8d2:	4413      	add	r3, r2
 800e8d4:	2280      	movs	r2, #128	; 0x80
 800e8d6:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e8da:	e007      	b.n	800e8ec <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e8e2:	683a      	ldr	r2, [r7, #0]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e8f2:	1c5a      	adds	r2, r3, #1
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e900:	2b0f      	cmp	r3, #15
 800e902:	d9eb      	bls.n	800e8dc <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800e904:	2300      	movs	r3, #0
 800e906:	633b      	str	r3, [r7, #48]	; 0x30
 800e908:	e016      	b.n	800e938 <AES_CMAC_Final+0x250>
 800e90a:	683a      	ldr	r2, [r7, #0]
 800e90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90e:	4413      	add	r3, r2
 800e910:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e914:	781a      	ldrb	r2, [r3, #0]
 800e916:	f107 011c 	add.w	r1, r7, #28
 800e91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e91c:	440b      	add	r3, r1
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	4053      	eors	r3, r2
 800e922:	b2d9      	uxtb	r1, r3
 800e924:	683a      	ldr	r2, [r7, #0]
 800e926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e928:	4413      	add	r3, r2
 800e92a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e92e:	460a      	mov	r2, r1
 800e930:	701a      	strb	r2, [r3, #0]
 800e932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e934:	3301      	adds	r3, #1
 800e936:	633b      	str	r3, [r7, #48]	; 0x30
 800e938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e93a:	2b0f      	cmp	r3, #15
 800e93c:	dde5      	ble.n	800e90a <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800e93e:	2300      	movs	r3, #0
 800e940:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e942:	e015      	b.n	800e970 <AES_CMAC_Final+0x288>
 800e944:	683a      	ldr	r2, [r7, #0]
 800e946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e948:	4413      	add	r3, r2
 800e94a:	33f1      	adds	r3, #241	; 0xf1
 800e94c:	781a      	ldrb	r2, [r3, #0]
 800e94e:	6839      	ldr	r1, [r7, #0]
 800e950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e952:	440b      	add	r3, r1
 800e954:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	4053      	eors	r3, r2
 800e95c:	b2d9      	uxtb	r1, r3
 800e95e:	683a      	ldr	r2, [r7, #0]
 800e960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e962:	4413      	add	r3, r2
 800e964:	33f1      	adds	r3, #241	; 0xf1
 800e966:	460a      	mov	r2, r1
 800e968:	701a      	strb	r2, [r3, #0]
 800e96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96c:	3301      	adds	r3, #1
 800e96e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e972:	2b0f      	cmp	r3, #15
 800e974:	dde6      	ble.n	800e944 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800e97c:	f107 030c 	add.w	r3, r7, #12
 800e980:	2210      	movs	r2, #16
 800e982:	4618      	mov	r0, r3
 800e984:	f00d fc8b 	bl	801c29e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800e988:	683a      	ldr	r2, [r7, #0]
 800e98a:	f107 030c 	add.w	r3, r7, #12
 800e98e:	6879      	ldr	r1, [r7, #4]
 800e990:	4618      	mov	r0, r3
 800e992:	f000 fd1d 	bl	800f3d0 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800e996:	f107 031c 	add.w	r3, r7, #28
 800e99a:	2210      	movs	r2, #16
 800e99c:	2100      	movs	r1, #0
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f00d fcb8 	bl	801c314 <memset1>
}
 800e9a4:	bf00      	nop
 800e9a6:	3748      	adds	r7, #72	; 0x48
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b083      	sub	sp, #12
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
 800e9b4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	781a      	ldrb	r2, [r3, #0]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	683a      	ldr	r2, [r7, #0]
 800e9c4:	7852      	ldrb	r2, [r2, #1]
 800e9c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	3302      	adds	r3, #2
 800e9cc:	683a      	ldr	r2, [r7, #0]
 800e9ce:	7892      	ldrb	r2, [r2, #2]
 800e9d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	3303      	adds	r3, #3
 800e9d6:	683a      	ldr	r2, [r7, #0]
 800e9d8:	78d2      	ldrb	r2, [r2, #3]
 800e9da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	3304      	adds	r3, #4
 800e9e0:	683a      	ldr	r2, [r7, #0]
 800e9e2:	7912      	ldrb	r2, [r2, #4]
 800e9e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	3305      	adds	r3, #5
 800e9ea:	683a      	ldr	r2, [r7, #0]
 800e9ec:	7952      	ldrb	r2, [r2, #5]
 800e9ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	3306      	adds	r3, #6
 800e9f4:	683a      	ldr	r2, [r7, #0]
 800e9f6:	7992      	ldrb	r2, [r2, #6]
 800e9f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	3307      	adds	r3, #7
 800e9fe:	683a      	ldr	r2, [r7, #0]
 800ea00:	79d2      	ldrb	r2, [r2, #7]
 800ea02:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	3308      	adds	r3, #8
 800ea08:	683a      	ldr	r2, [r7, #0]
 800ea0a:	7a12      	ldrb	r2, [r2, #8]
 800ea0c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	3309      	adds	r3, #9
 800ea12:	683a      	ldr	r2, [r7, #0]
 800ea14:	7a52      	ldrb	r2, [r2, #9]
 800ea16:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	330a      	adds	r3, #10
 800ea1c:	683a      	ldr	r2, [r7, #0]
 800ea1e:	7a92      	ldrb	r2, [r2, #10]
 800ea20:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	330b      	adds	r3, #11
 800ea26:	683a      	ldr	r2, [r7, #0]
 800ea28:	7ad2      	ldrb	r2, [r2, #11]
 800ea2a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	330c      	adds	r3, #12
 800ea30:	683a      	ldr	r2, [r7, #0]
 800ea32:	7b12      	ldrb	r2, [r2, #12]
 800ea34:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	330d      	adds	r3, #13
 800ea3a:	683a      	ldr	r2, [r7, #0]
 800ea3c:	7b52      	ldrb	r2, [r2, #13]
 800ea3e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	330e      	adds	r3, #14
 800ea44:	683a      	ldr	r2, [r7, #0]
 800ea46:	7b92      	ldrb	r2, [r2, #14]
 800ea48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	330f      	adds	r3, #15
 800ea4e:	683a      	ldr	r2, [r7, #0]
 800ea50:	7bd2      	ldrb	r2, [r2, #15]
 800ea52:	701a      	strb	r2, [r3, #0]
#endif
}
 800ea54:	bf00      	nop
 800ea56:	370c      	adds	r7, #12
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bc80      	pop	{r7}
 800ea5c:	4770      	bx	lr

0800ea5e <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800ea5e:	b480      	push	{r7}
 800ea60:	b085      	sub	sp, #20
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	60f8      	str	r0, [r7, #12]
 800ea66:	60b9      	str	r1, [r7, #8]
 800ea68:	4613      	mov	r3, r2
 800ea6a:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800ea6c:	e007      	b.n	800ea7e <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800ea6e:	68ba      	ldr	r2, [r7, #8]
 800ea70:	1c53      	adds	r3, r2, #1
 800ea72:	60bb      	str	r3, [r7, #8]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	1c59      	adds	r1, r3, #1
 800ea78:	60f9      	str	r1, [r7, #12]
 800ea7a:	7812      	ldrb	r2, [r2, #0]
 800ea7c:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800ea7e:	79fb      	ldrb	r3, [r7, #7]
 800ea80:	1e5a      	subs	r2, r3, #1
 800ea82:	71fa      	strb	r2, [r7, #7]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d1f2      	bne.n	800ea6e <copy_block_nn+0x10>
}
 800ea88:	bf00      	nop
 800ea8a:	bf00      	nop
 800ea8c:	3714      	adds	r7, #20
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bc80      	pop	{r7}
 800ea92:	4770      	bx	lr

0800ea94 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800ea94:	b480      	push	{r7}
 800ea96:	b083      	sub	sp, #12
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	781a      	ldrb	r2, [r3, #0]
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	4053      	eors	r3, r2
 800eaa8:	b2da      	uxtb	r2, r3
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	3301      	adds	r3, #1
 800eab2:	7819      	ldrb	r1, [r3, #0]
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	3301      	adds	r3, #1
 800eab8:	781a      	ldrb	r2, [r3, #0]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	3301      	adds	r3, #1
 800eabe:	404a      	eors	r2, r1
 800eac0:	b2d2      	uxtb	r2, r2
 800eac2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	3302      	adds	r3, #2
 800eac8:	7819      	ldrb	r1, [r3, #0]
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	3302      	adds	r3, #2
 800eace:	781a      	ldrb	r2, [r3, #0]
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	3302      	adds	r3, #2
 800ead4:	404a      	eors	r2, r1
 800ead6:	b2d2      	uxtb	r2, r2
 800ead8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	3303      	adds	r3, #3
 800eade:	7819      	ldrb	r1, [r3, #0]
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	3303      	adds	r3, #3
 800eae4:	781a      	ldrb	r2, [r3, #0]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	3303      	adds	r3, #3
 800eaea:	404a      	eors	r2, r1
 800eaec:	b2d2      	uxtb	r2, r2
 800eaee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	3304      	adds	r3, #4
 800eaf4:	7819      	ldrb	r1, [r3, #0]
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	3304      	adds	r3, #4
 800eafa:	781a      	ldrb	r2, [r3, #0]
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	3304      	adds	r3, #4
 800eb00:	404a      	eors	r2, r1
 800eb02:	b2d2      	uxtb	r2, r2
 800eb04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	3305      	adds	r3, #5
 800eb0a:	7819      	ldrb	r1, [r3, #0]
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	3305      	adds	r3, #5
 800eb10:	781a      	ldrb	r2, [r3, #0]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	3305      	adds	r3, #5
 800eb16:	404a      	eors	r2, r1
 800eb18:	b2d2      	uxtb	r2, r2
 800eb1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	3306      	adds	r3, #6
 800eb20:	7819      	ldrb	r1, [r3, #0]
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	3306      	adds	r3, #6
 800eb26:	781a      	ldrb	r2, [r3, #0]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	3306      	adds	r3, #6
 800eb2c:	404a      	eors	r2, r1
 800eb2e:	b2d2      	uxtb	r2, r2
 800eb30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	3307      	adds	r3, #7
 800eb36:	7819      	ldrb	r1, [r3, #0]
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	3307      	adds	r3, #7
 800eb3c:	781a      	ldrb	r2, [r3, #0]
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	3307      	adds	r3, #7
 800eb42:	404a      	eors	r2, r1
 800eb44:	b2d2      	uxtb	r2, r2
 800eb46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	3308      	adds	r3, #8
 800eb4c:	7819      	ldrb	r1, [r3, #0]
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	3308      	adds	r3, #8
 800eb52:	781a      	ldrb	r2, [r3, #0]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	3308      	adds	r3, #8
 800eb58:	404a      	eors	r2, r1
 800eb5a:	b2d2      	uxtb	r2, r2
 800eb5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	3309      	adds	r3, #9
 800eb62:	7819      	ldrb	r1, [r3, #0]
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	3309      	adds	r3, #9
 800eb68:	781a      	ldrb	r2, [r3, #0]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	3309      	adds	r3, #9
 800eb6e:	404a      	eors	r2, r1
 800eb70:	b2d2      	uxtb	r2, r2
 800eb72:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	330a      	adds	r3, #10
 800eb78:	7819      	ldrb	r1, [r3, #0]
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	330a      	adds	r3, #10
 800eb7e:	781a      	ldrb	r2, [r3, #0]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	330a      	adds	r3, #10
 800eb84:	404a      	eors	r2, r1
 800eb86:	b2d2      	uxtb	r2, r2
 800eb88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	330b      	adds	r3, #11
 800eb8e:	7819      	ldrb	r1, [r3, #0]
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	330b      	adds	r3, #11
 800eb94:	781a      	ldrb	r2, [r3, #0]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	330b      	adds	r3, #11
 800eb9a:	404a      	eors	r2, r1
 800eb9c:	b2d2      	uxtb	r2, r2
 800eb9e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	330c      	adds	r3, #12
 800eba4:	7819      	ldrb	r1, [r3, #0]
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	330c      	adds	r3, #12
 800ebaa:	781a      	ldrb	r2, [r3, #0]
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	330c      	adds	r3, #12
 800ebb0:	404a      	eors	r2, r1
 800ebb2:	b2d2      	uxtb	r2, r2
 800ebb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	330d      	adds	r3, #13
 800ebba:	7819      	ldrb	r1, [r3, #0]
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	330d      	adds	r3, #13
 800ebc0:	781a      	ldrb	r2, [r3, #0]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	330d      	adds	r3, #13
 800ebc6:	404a      	eors	r2, r1
 800ebc8:	b2d2      	uxtb	r2, r2
 800ebca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	330e      	adds	r3, #14
 800ebd0:	7819      	ldrb	r1, [r3, #0]
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	330e      	adds	r3, #14
 800ebd6:	781a      	ldrb	r2, [r3, #0]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	330e      	adds	r3, #14
 800ebdc:	404a      	eors	r2, r1
 800ebde:	b2d2      	uxtb	r2, r2
 800ebe0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	330f      	adds	r3, #15
 800ebe6:	7819      	ldrb	r1, [r3, #0]
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	330f      	adds	r3, #15
 800ebec:	781a      	ldrb	r2, [r3, #0]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	330f      	adds	r3, #15
 800ebf2:	404a      	eors	r2, r1
 800ebf4:	b2d2      	uxtb	r2, r2
 800ebf6:	701a      	strb	r2, [r3, #0]
#endif
}
 800ebf8:	bf00      	nop
 800ebfa:	370c      	adds	r7, #12
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bc80      	pop	{r7}
 800ec00:	4770      	bx	lr

0800ec02 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800ec02:	b480      	push	{r7}
 800ec04:	b085      	sub	sp, #20
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	60f8      	str	r0, [r7, #12]
 800ec0a:	60b9      	str	r1, [r7, #8]
 800ec0c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	781a      	ldrb	r2, [r3, #0]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	4053      	eors	r3, r2
 800ec18:	b2da      	uxtb	r2, r3
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	3301      	adds	r3, #1
 800ec22:	7819      	ldrb	r1, [r3, #0]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	3301      	adds	r3, #1
 800ec28:	781a      	ldrb	r2, [r3, #0]
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	404a      	eors	r2, r1
 800ec30:	b2d2      	uxtb	r2, r2
 800ec32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	3302      	adds	r3, #2
 800ec38:	7819      	ldrb	r1, [r3, #0]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	3302      	adds	r3, #2
 800ec3e:	781a      	ldrb	r2, [r3, #0]
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	3302      	adds	r3, #2
 800ec44:	404a      	eors	r2, r1
 800ec46:	b2d2      	uxtb	r2, r2
 800ec48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	3303      	adds	r3, #3
 800ec4e:	7819      	ldrb	r1, [r3, #0]
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	3303      	adds	r3, #3
 800ec54:	781a      	ldrb	r2, [r3, #0]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	3303      	adds	r3, #3
 800ec5a:	404a      	eors	r2, r1
 800ec5c:	b2d2      	uxtb	r2, r2
 800ec5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	3304      	adds	r3, #4
 800ec64:	7819      	ldrb	r1, [r3, #0]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	3304      	adds	r3, #4
 800ec6a:	781a      	ldrb	r2, [r3, #0]
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	3304      	adds	r3, #4
 800ec70:	404a      	eors	r2, r1
 800ec72:	b2d2      	uxtb	r2, r2
 800ec74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	3305      	adds	r3, #5
 800ec7a:	7819      	ldrb	r1, [r3, #0]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	3305      	adds	r3, #5
 800ec80:	781a      	ldrb	r2, [r3, #0]
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	3305      	adds	r3, #5
 800ec86:	404a      	eors	r2, r1
 800ec88:	b2d2      	uxtb	r2, r2
 800ec8a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	3306      	adds	r3, #6
 800ec90:	7819      	ldrb	r1, [r3, #0]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	3306      	adds	r3, #6
 800ec96:	781a      	ldrb	r2, [r3, #0]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	3306      	adds	r3, #6
 800ec9c:	404a      	eors	r2, r1
 800ec9e:	b2d2      	uxtb	r2, r2
 800eca0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	3307      	adds	r3, #7
 800eca6:	7819      	ldrb	r1, [r3, #0]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	3307      	adds	r3, #7
 800ecac:	781a      	ldrb	r2, [r3, #0]
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	3307      	adds	r3, #7
 800ecb2:	404a      	eors	r2, r1
 800ecb4:	b2d2      	uxtb	r2, r2
 800ecb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	3308      	adds	r3, #8
 800ecbc:	7819      	ldrb	r1, [r3, #0]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	3308      	adds	r3, #8
 800ecc2:	781a      	ldrb	r2, [r3, #0]
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	3308      	adds	r3, #8
 800ecc8:	404a      	eors	r2, r1
 800ecca:	b2d2      	uxtb	r2, r2
 800eccc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	3309      	adds	r3, #9
 800ecd2:	7819      	ldrb	r1, [r3, #0]
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	3309      	adds	r3, #9
 800ecd8:	781a      	ldrb	r2, [r3, #0]
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	3309      	adds	r3, #9
 800ecde:	404a      	eors	r2, r1
 800ece0:	b2d2      	uxtb	r2, r2
 800ece2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	330a      	adds	r3, #10
 800ece8:	7819      	ldrb	r1, [r3, #0]
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	330a      	adds	r3, #10
 800ecee:	781a      	ldrb	r2, [r3, #0]
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	330a      	adds	r3, #10
 800ecf4:	404a      	eors	r2, r1
 800ecf6:	b2d2      	uxtb	r2, r2
 800ecf8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	330b      	adds	r3, #11
 800ecfe:	7819      	ldrb	r1, [r3, #0]
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	330b      	adds	r3, #11
 800ed04:	781a      	ldrb	r2, [r3, #0]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	330b      	adds	r3, #11
 800ed0a:	404a      	eors	r2, r1
 800ed0c:	b2d2      	uxtb	r2, r2
 800ed0e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	330c      	adds	r3, #12
 800ed14:	7819      	ldrb	r1, [r3, #0]
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	330c      	adds	r3, #12
 800ed1a:	781a      	ldrb	r2, [r3, #0]
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	330c      	adds	r3, #12
 800ed20:	404a      	eors	r2, r1
 800ed22:	b2d2      	uxtb	r2, r2
 800ed24:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	330d      	adds	r3, #13
 800ed2a:	7819      	ldrb	r1, [r3, #0]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	330d      	adds	r3, #13
 800ed30:	781a      	ldrb	r2, [r3, #0]
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	330d      	adds	r3, #13
 800ed36:	404a      	eors	r2, r1
 800ed38:	b2d2      	uxtb	r2, r2
 800ed3a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	330e      	adds	r3, #14
 800ed40:	7819      	ldrb	r1, [r3, #0]
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	330e      	adds	r3, #14
 800ed46:	781a      	ldrb	r2, [r3, #0]
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	330e      	adds	r3, #14
 800ed4c:	404a      	eors	r2, r1
 800ed4e:	b2d2      	uxtb	r2, r2
 800ed50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	330f      	adds	r3, #15
 800ed56:	7819      	ldrb	r1, [r3, #0]
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	330f      	adds	r3, #15
 800ed5c:	781a      	ldrb	r2, [r3, #0]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	330f      	adds	r3, #15
 800ed62:	404a      	eors	r2, r1
 800ed64:	b2d2      	uxtb	r2, r2
 800ed66:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800ed68:	bf00      	nop
 800ed6a:	3714      	adds	r7, #20
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bc80      	pop	{r7}
 800ed70:	4770      	bx	lr

0800ed72 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800ed72:	b580      	push	{r7, lr}
 800ed74:	b082      	sub	sp, #8
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	6078      	str	r0, [r7, #4]
 800ed7a:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800ed7c:	6839      	ldr	r1, [r7, #0]
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f7ff fe88 	bl	800ea94 <xor_block>
}
 800ed84:	bf00      	nop
 800ed86:	3708      	adds	r7, #8
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800ed8c:	b480      	push	{r7}
 800ed8e:	b085      	sub	sp, #20
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	461a      	mov	r2, r3
 800ed9a:	4b48      	ldr	r3, [pc, #288]	; (800eebc <shift_sub_rows+0x130>)
 800ed9c:	5c9a      	ldrb	r2, [r3, r2]
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	701a      	strb	r2, [r3, #0]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	3304      	adds	r3, #4
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	4619      	mov	r1, r3
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	3304      	adds	r3, #4
 800edae:	4a43      	ldr	r2, [pc, #268]	; (800eebc <shift_sub_rows+0x130>)
 800edb0:	5c52      	ldrb	r2, [r2, r1]
 800edb2:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	3308      	adds	r3, #8
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	4619      	mov	r1, r3
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	3308      	adds	r3, #8
 800edc0:	4a3e      	ldr	r2, [pc, #248]	; (800eebc <shift_sub_rows+0x130>)
 800edc2:	5c52      	ldrb	r2, [r2, r1]
 800edc4:	701a      	strb	r2, [r3, #0]
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	330c      	adds	r3, #12
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	4619      	mov	r1, r3
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	330c      	adds	r3, #12
 800edd2:	4a3a      	ldr	r2, [pc, #232]	; (800eebc <shift_sub_rows+0x130>)
 800edd4:	5c52      	ldrb	r2, [r2, r1]
 800edd6:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	785b      	ldrb	r3, [r3, #1]
 800eddc:	73fb      	strb	r3, [r7, #15]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	3305      	adds	r3, #5
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	4619      	mov	r1, r3
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	3301      	adds	r3, #1
 800edea:	4a34      	ldr	r2, [pc, #208]	; (800eebc <shift_sub_rows+0x130>)
 800edec:	5c52      	ldrb	r2, [r2, r1]
 800edee:	701a      	strb	r2, [r3, #0]
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	3309      	adds	r3, #9
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	4619      	mov	r1, r3
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	3305      	adds	r3, #5
 800edfc:	4a2f      	ldr	r2, [pc, #188]	; (800eebc <shift_sub_rows+0x130>)
 800edfe:	5c52      	ldrb	r2, [r2, r1]
 800ee00:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	330d      	adds	r3, #13
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	4619      	mov	r1, r3
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	3309      	adds	r3, #9
 800ee0e:	4a2b      	ldr	r2, [pc, #172]	; (800eebc <shift_sub_rows+0x130>)
 800ee10:	5c52      	ldrb	r2, [r2, r1]
 800ee12:	701a      	strb	r2, [r3, #0]
 800ee14:	7bfa      	ldrb	r2, [r7, #15]
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	330d      	adds	r3, #13
 800ee1a:	4928      	ldr	r1, [pc, #160]	; (800eebc <shift_sub_rows+0x130>)
 800ee1c:	5c8a      	ldrb	r2, [r1, r2]
 800ee1e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	789b      	ldrb	r3, [r3, #2]
 800ee24:	73fb      	strb	r3, [r7, #15]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	330a      	adds	r3, #10
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	3302      	adds	r3, #2
 800ee32:	4a22      	ldr	r2, [pc, #136]	; (800eebc <shift_sub_rows+0x130>)
 800ee34:	5c52      	ldrb	r2, [r2, r1]
 800ee36:	701a      	strb	r2, [r3, #0]
 800ee38:	7bfa      	ldrb	r2, [r7, #15]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	330a      	adds	r3, #10
 800ee3e:	491f      	ldr	r1, [pc, #124]	; (800eebc <shift_sub_rows+0x130>)
 800ee40:	5c8a      	ldrb	r2, [r1, r2]
 800ee42:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	799b      	ldrb	r3, [r3, #6]
 800ee48:	73fb      	strb	r3, [r7, #15]
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	330e      	adds	r3, #14
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	4619      	mov	r1, r3
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	3306      	adds	r3, #6
 800ee56:	4a19      	ldr	r2, [pc, #100]	; (800eebc <shift_sub_rows+0x130>)
 800ee58:	5c52      	ldrb	r2, [r2, r1]
 800ee5a:	701a      	strb	r2, [r3, #0]
 800ee5c:	7bfa      	ldrb	r2, [r7, #15]
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	330e      	adds	r3, #14
 800ee62:	4916      	ldr	r1, [pc, #88]	; (800eebc <shift_sub_rows+0x130>)
 800ee64:	5c8a      	ldrb	r2, [r1, r2]
 800ee66:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	7bdb      	ldrb	r3, [r3, #15]
 800ee6c:	73fb      	strb	r3, [r7, #15]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	330b      	adds	r3, #11
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	4619      	mov	r1, r3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	330f      	adds	r3, #15
 800ee7a:	4a10      	ldr	r2, [pc, #64]	; (800eebc <shift_sub_rows+0x130>)
 800ee7c:	5c52      	ldrb	r2, [r2, r1]
 800ee7e:	701a      	strb	r2, [r3, #0]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	3307      	adds	r3, #7
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	4619      	mov	r1, r3
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	330b      	adds	r3, #11
 800ee8c:	4a0b      	ldr	r2, [pc, #44]	; (800eebc <shift_sub_rows+0x130>)
 800ee8e:	5c52      	ldrb	r2, [r2, r1]
 800ee90:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	3303      	adds	r3, #3
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	4619      	mov	r1, r3
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	3307      	adds	r3, #7
 800ee9e:	4a07      	ldr	r2, [pc, #28]	; (800eebc <shift_sub_rows+0x130>)
 800eea0:	5c52      	ldrb	r2, [r2, r1]
 800eea2:	701a      	strb	r2, [r3, #0]
 800eea4:	7bfa      	ldrb	r2, [r7, #15]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	3303      	adds	r3, #3
 800eeaa:	4904      	ldr	r1, [pc, #16]	; (800eebc <shift_sub_rows+0x130>)
 800eeac:	5c8a      	ldrb	r2, [r1, r2]
 800eeae:	701a      	strb	r2, [r3, #0]
}
 800eeb0:	bf00      	nop
 800eeb2:	3714      	adds	r7, #20
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bc80      	pop	{r7}
 800eeb8:	4770      	bx	lr
 800eeba:	bf00      	nop
 800eebc:	08021ac0 	.word	0x08021ac0

0800eec0 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b086      	sub	sp, #24
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800eec8:	f107 0308 	add.w	r3, r7, #8
 800eecc:	6879      	ldr	r1, [r7, #4]
 800eece:	4618      	mov	r0, r3
 800eed0:	f7ff fd6c 	bl	800e9ac <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800eed4:	7a3b      	ldrb	r3, [r7, #8]
 800eed6:	461a      	mov	r2, r3
 800eed8:	4b9a      	ldr	r3, [pc, #616]	; (800f144 <mix_sub_columns+0x284>)
 800eeda:	5c9a      	ldrb	r2, [r3, r2]
 800eedc:	7b7b      	ldrb	r3, [r7, #13]
 800eede:	4619      	mov	r1, r3
 800eee0:	4b99      	ldr	r3, [pc, #612]	; (800f148 <mix_sub_columns+0x288>)
 800eee2:	5c5b      	ldrb	r3, [r3, r1]
 800eee4:	4053      	eors	r3, r2
 800eee6:	b2da      	uxtb	r2, r3
 800eee8:	7cbb      	ldrb	r3, [r7, #18]
 800eeea:	4619      	mov	r1, r3
 800eeec:	4b97      	ldr	r3, [pc, #604]	; (800f14c <mix_sub_columns+0x28c>)
 800eeee:	5c5b      	ldrb	r3, [r3, r1]
 800eef0:	4053      	eors	r3, r2
 800eef2:	b2da      	uxtb	r2, r3
 800eef4:	7dfb      	ldrb	r3, [r7, #23]
 800eef6:	4619      	mov	r1, r3
 800eef8:	4b94      	ldr	r3, [pc, #592]	; (800f14c <mix_sub_columns+0x28c>)
 800eefa:	5c5b      	ldrb	r3, [r3, r1]
 800eefc:	4053      	eors	r3, r2
 800eefe:	b2da      	uxtb	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800ef04:	7a3b      	ldrb	r3, [r7, #8]
 800ef06:	461a      	mov	r2, r3
 800ef08:	4b90      	ldr	r3, [pc, #576]	; (800f14c <mix_sub_columns+0x28c>)
 800ef0a:	5c9a      	ldrb	r2, [r3, r2]
 800ef0c:	7b7b      	ldrb	r3, [r7, #13]
 800ef0e:	4619      	mov	r1, r3
 800ef10:	4b8c      	ldr	r3, [pc, #560]	; (800f144 <mix_sub_columns+0x284>)
 800ef12:	5c5b      	ldrb	r3, [r3, r1]
 800ef14:	4053      	eors	r3, r2
 800ef16:	b2da      	uxtb	r2, r3
 800ef18:	7cbb      	ldrb	r3, [r7, #18]
 800ef1a:	4619      	mov	r1, r3
 800ef1c:	4b8a      	ldr	r3, [pc, #552]	; (800f148 <mix_sub_columns+0x288>)
 800ef1e:	5c5b      	ldrb	r3, [r3, r1]
 800ef20:	4053      	eors	r3, r2
 800ef22:	b2d9      	uxtb	r1, r3
 800ef24:	7dfb      	ldrb	r3, [r7, #23]
 800ef26:	461a      	mov	r2, r3
 800ef28:	4b88      	ldr	r3, [pc, #544]	; (800f14c <mix_sub_columns+0x28c>)
 800ef2a:	5c9a      	ldrb	r2, [r3, r2]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	3301      	adds	r3, #1
 800ef30:	404a      	eors	r2, r1
 800ef32:	b2d2      	uxtb	r2, r2
 800ef34:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800ef36:	7a3b      	ldrb	r3, [r7, #8]
 800ef38:	461a      	mov	r2, r3
 800ef3a:	4b84      	ldr	r3, [pc, #528]	; (800f14c <mix_sub_columns+0x28c>)
 800ef3c:	5c9a      	ldrb	r2, [r3, r2]
 800ef3e:	7b7b      	ldrb	r3, [r7, #13]
 800ef40:	4619      	mov	r1, r3
 800ef42:	4b82      	ldr	r3, [pc, #520]	; (800f14c <mix_sub_columns+0x28c>)
 800ef44:	5c5b      	ldrb	r3, [r3, r1]
 800ef46:	4053      	eors	r3, r2
 800ef48:	b2da      	uxtb	r2, r3
 800ef4a:	7cbb      	ldrb	r3, [r7, #18]
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	4b7d      	ldr	r3, [pc, #500]	; (800f144 <mix_sub_columns+0x284>)
 800ef50:	5c5b      	ldrb	r3, [r3, r1]
 800ef52:	4053      	eors	r3, r2
 800ef54:	b2d9      	uxtb	r1, r3
 800ef56:	7dfb      	ldrb	r3, [r7, #23]
 800ef58:	461a      	mov	r2, r3
 800ef5a:	4b7b      	ldr	r3, [pc, #492]	; (800f148 <mix_sub_columns+0x288>)
 800ef5c:	5c9a      	ldrb	r2, [r3, r2]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	3302      	adds	r3, #2
 800ef62:	404a      	eors	r2, r1
 800ef64:	b2d2      	uxtb	r2, r2
 800ef66:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ef68:	7a3b      	ldrb	r3, [r7, #8]
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	4b76      	ldr	r3, [pc, #472]	; (800f148 <mix_sub_columns+0x288>)
 800ef6e:	5c9a      	ldrb	r2, [r3, r2]
 800ef70:	7b7b      	ldrb	r3, [r7, #13]
 800ef72:	4619      	mov	r1, r3
 800ef74:	4b75      	ldr	r3, [pc, #468]	; (800f14c <mix_sub_columns+0x28c>)
 800ef76:	5c5b      	ldrb	r3, [r3, r1]
 800ef78:	4053      	eors	r3, r2
 800ef7a:	b2da      	uxtb	r2, r3
 800ef7c:	7cbb      	ldrb	r3, [r7, #18]
 800ef7e:	4619      	mov	r1, r3
 800ef80:	4b72      	ldr	r3, [pc, #456]	; (800f14c <mix_sub_columns+0x28c>)
 800ef82:	5c5b      	ldrb	r3, [r3, r1]
 800ef84:	4053      	eors	r3, r2
 800ef86:	b2d9      	uxtb	r1, r3
 800ef88:	7dfb      	ldrb	r3, [r7, #23]
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	4b6d      	ldr	r3, [pc, #436]	; (800f144 <mix_sub_columns+0x284>)
 800ef8e:	5c9a      	ldrb	r2, [r3, r2]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	3303      	adds	r3, #3
 800ef94:	404a      	eors	r2, r1
 800ef96:	b2d2      	uxtb	r2, r2
 800ef98:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800ef9a:	7b3b      	ldrb	r3, [r7, #12]
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	4b69      	ldr	r3, [pc, #420]	; (800f144 <mix_sub_columns+0x284>)
 800efa0:	5c9a      	ldrb	r2, [r3, r2]
 800efa2:	7c7b      	ldrb	r3, [r7, #17]
 800efa4:	4619      	mov	r1, r3
 800efa6:	4b68      	ldr	r3, [pc, #416]	; (800f148 <mix_sub_columns+0x288>)
 800efa8:	5c5b      	ldrb	r3, [r3, r1]
 800efaa:	4053      	eors	r3, r2
 800efac:	b2da      	uxtb	r2, r3
 800efae:	7dbb      	ldrb	r3, [r7, #22]
 800efb0:	4619      	mov	r1, r3
 800efb2:	4b66      	ldr	r3, [pc, #408]	; (800f14c <mix_sub_columns+0x28c>)
 800efb4:	5c5b      	ldrb	r3, [r3, r1]
 800efb6:	4053      	eors	r3, r2
 800efb8:	b2d9      	uxtb	r1, r3
 800efba:	7afb      	ldrb	r3, [r7, #11]
 800efbc:	461a      	mov	r2, r3
 800efbe:	4b63      	ldr	r3, [pc, #396]	; (800f14c <mix_sub_columns+0x28c>)
 800efc0:	5c9a      	ldrb	r2, [r3, r2]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	3304      	adds	r3, #4
 800efc6:	404a      	eors	r2, r1
 800efc8:	b2d2      	uxtb	r2, r2
 800efca:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800efcc:	7b3b      	ldrb	r3, [r7, #12]
 800efce:	461a      	mov	r2, r3
 800efd0:	4b5e      	ldr	r3, [pc, #376]	; (800f14c <mix_sub_columns+0x28c>)
 800efd2:	5c9a      	ldrb	r2, [r3, r2]
 800efd4:	7c7b      	ldrb	r3, [r7, #17]
 800efd6:	4619      	mov	r1, r3
 800efd8:	4b5a      	ldr	r3, [pc, #360]	; (800f144 <mix_sub_columns+0x284>)
 800efda:	5c5b      	ldrb	r3, [r3, r1]
 800efdc:	4053      	eors	r3, r2
 800efde:	b2da      	uxtb	r2, r3
 800efe0:	7dbb      	ldrb	r3, [r7, #22]
 800efe2:	4619      	mov	r1, r3
 800efe4:	4b58      	ldr	r3, [pc, #352]	; (800f148 <mix_sub_columns+0x288>)
 800efe6:	5c5b      	ldrb	r3, [r3, r1]
 800efe8:	4053      	eors	r3, r2
 800efea:	b2d9      	uxtb	r1, r3
 800efec:	7afb      	ldrb	r3, [r7, #11]
 800efee:	461a      	mov	r2, r3
 800eff0:	4b56      	ldr	r3, [pc, #344]	; (800f14c <mix_sub_columns+0x28c>)
 800eff2:	5c9a      	ldrb	r2, [r3, r2]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	3305      	adds	r3, #5
 800eff8:	404a      	eors	r2, r1
 800effa:	b2d2      	uxtb	r2, r2
 800effc:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800effe:	7b3b      	ldrb	r3, [r7, #12]
 800f000:	461a      	mov	r2, r3
 800f002:	4b52      	ldr	r3, [pc, #328]	; (800f14c <mix_sub_columns+0x28c>)
 800f004:	5c9a      	ldrb	r2, [r3, r2]
 800f006:	7c7b      	ldrb	r3, [r7, #17]
 800f008:	4619      	mov	r1, r3
 800f00a:	4b50      	ldr	r3, [pc, #320]	; (800f14c <mix_sub_columns+0x28c>)
 800f00c:	5c5b      	ldrb	r3, [r3, r1]
 800f00e:	4053      	eors	r3, r2
 800f010:	b2da      	uxtb	r2, r3
 800f012:	7dbb      	ldrb	r3, [r7, #22]
 800f014:	4619      	mov	r1, r3
 800f016:	4b4b      	ldr	r3, [pc, #300]	; (800f144 <mix_sub_columns+0x284>)
 800f018:	5c5b      	ldrb	r3, [r3, r1]
 800f01a:	4053      	eors	r3, r2
 800f01c:	b2d9      	uxtb	r1, r3
 800f01e:	7afb      	ldrb	r3, [r7, #11]
 800f020:	461a      	mov	r2, r3
 800f022:	4b49      	ldr	r3, [pc, #292]	; (800f148 <mix_sub_columns+0x288>)
 800f024:	5c9a      	ldrb	r2, [r3, r2]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	3306      	adds	r3, #6
 800f02a:	404a      	eors	r2, r1
 800f02c:	b2d2      	uxtb	r2, r2
 800f02e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800f030:	7b3b      	ldrb	r3, [r7, #12]
 800f032:	461a      	mov	r2, r3
 800f034:	4b44      	ldr	r3, [pc, #272]	; (800f148 <mix_sub_columns+0x288>)
 800f036:	5c9a      	ldrb	r2, [r3, r2]
 800f038:	7c7b      	ldrb	r3, [r7, #17]
 800f03a:	4619      	mov	r1, r3
 800f03c:	4b43      	ldr	r3, [pc, #268]	; (800f14c <mix_sub_columns+0x28c>)
 800f03e:	5c5b      	ldrb	r3, [r3, r1]
 800f040:	4053      	eors	r3, r2
 800f042:	b2da      	uxtb	r2, r3
 800f044:	7dbb      	ldrb	r3, [r7, #22]
 800f046:	4619      	mov	r1, r3
 800f048:	4b40      	ldr	r3, [pc, #256]	; (800f14c <mix_sub_columns+0x28c>)
 800f04a:	5c5b      	ldrb	r3, [r3, r1]
 800f04c:	4053      	eors	r3, r2
 800f04e:	b2d9      	uxtb	r1, r3
 800f050:	7afb      	ldrb	r3, [r7, #11]
 800f052:	461a      	mov	r2, r3
 800f054:	4b3b      	ldr	r3, [pc, #236]	; (800f144 <mix_sub_columns+0x284>)
 800f056:	5c9a      	ldrb	r2, [r3, r2]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	3307      	adds	r3, #7
 800f05c:	404a      	eors	r2, r1
 800f05e:	b2d2      	uxtb	r2, r2
 800f060:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800f062:	7c3b      	ldrb	r3, [r7, #16]
 800f064:	461a      	mov	r2, r3
 800f066:	4b37      	ldr	r3, [pc, #220]	; (800f144 <mix_sub_columns+0x284>)
 800f068:	5c9a      	ldrb	r2, [r3, r2]
 800f06a:	7d7b      	ldrb	r3, [r7, #21]
 800f06c:	4619      	mov	r1, r3
 800f06e:	4b36      	ldr	r3, [pc, #216]	; (800f148 <mix_sub_columns+0x288>)
 800f070:	5c5b      	ldrb	r3, [r3, r1]
 800f072:	4053      	eors	r3, r2
 800f074:	b2da      	uxtb	r2, r3
 800f076:	7abb      	ldrb	r3, [r7, #10]
 800f078:	4619      	mov	r1, r3
 800f07a:	4b34      	ldr	r3, [pc, #208]	; (800f14c <mix_sub_columns+0x28c>)
 800f07c:	5c5b      	ldrb	r3, [r3, r1]
 800f07e:	4053      	eors	r3, r2
 800f080:	b2d9      	uxtb	r1, r3
 800f082:	7bfb      	ldrb	r3, [r7, #15]
 800f084:	461a      	mov	r2, r3
 800f086:	4b31      	ldr	r3, [pc, #196]	; (800f14c <mix_sub_columns+0x28c>)
 800f088:	5c9a      	ldrb	r2, [r3, r2]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	3308      	adds	r3, #8
 800f08e:	404a      	eors	r2, r1
 800f090:	b2d2      	uxtb	r2, r2
 800f092:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800f094:	7c3b      	ldrb	r3, [r7, #16]
 800f096:	461a      	mov	r2, r3
 800f098:	4b2c      	ldr	r3, [pc, #176]	; (800f14c <mix_sub_columns+0x28c>)
 800f09a:	5c9a      	ldrb	r2, [r3, r2]
 800f09c:	7d7b      	ldrb	r3, [r7, #21]
 800f09e:	4619      	mov	r1, r3
 800f0a0:	4b28      	ldr	r3, [pc, #160]	; (800f144 <mix_sub_columns+0x284>)
 800f0a2:	5c5b      	ldrb	r3, [r3, r1]
 800f0a4:	4053      	eors	r3, r2
 800f0a6:	b2da      	uxtb	r2, r3
 800f0a8:	7abb      	ldrb	r3, [r7, #10]
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	4b26      	ldr	r3, [pc, #152]	; (800f148 <mix_sub_columns+0x288>)
 800f0ae:	5c5b      	ldrb	r3, [r3, r1]
 800f0b0:	4053      	eors	r3, r2
 800f0b2:	b2d9      	uxtb	r1, r3
 800f0b4:	7bfb      	ldrb	r3, [r7, #15]
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	4b24      	ldr	r3, [pc, #144]	; (800f14c <mix_sub_columns+0x28c>)
 800f0ba:	5c9a      	ldrb	r2, [r3, r2]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	3309      	adds	r3, #9
 800f0c0:	404a      	eors	r2, r1
 800f0c2:	b2d2      	uxtb	r2, r2
 800f0c4:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800f0c6:	7c3b      	ldrb	r3, [r7, #16]
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	4b20      	ldr	r3, [pc, #128]	; (800f14c <mix_sub_columns+0x28c>)
 800f0cc:	5c9a      	ldrb	r2, [r3, r2]
 800f0ce:	7d7b      	ldrb	r3, [r7, #21]
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	4b1e      	ldr	r3, [pc, #120]	; (800f14c <mix_sub_columns+0x28c>)
 800f0d4:	5c5b      	ldrb	r3, [r3, r1]
 800f0d6:	4053      	eors	r3, r2
 800f0d8:	b2da      	uxtb	r2, r3
 800f0da:	7abb      	ldrb	r3, [r7, #10]
 800f0dc:	4619      	mov	r1, r3
 800f0de:	4b19      	ldr	r3, [pc, #100]	; (800f144 <mix_sub_columns+0x284>)
 800f0e0:	5c5b      	ldrb	r3, [r3, r1]
 800f0e2:	4053      	eors	r3, r2
 800f0e4:	b2d9      	uxtb	r1, r3
 800f0e6:	7bfb      	ldrb	r3, [r7, #15]
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	4b17      	ldr	r3, [pc, #92]	; (800f148 <mix_sub_columns+0x288>)
 800f0ec:	5c9a      	ldrb	r2, [r3, r2]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	330a      	adds	r3, #10
 800f0f2:	404a      	eors	r2, r1
 800f0f4:	b2d2      	uxtb	r2, r2
 800f0f6:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800f0f8:	7c3b      	ldrb	r3, [r7, #16]
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	4b12      	ldr	r3, [pc, #72]	; (800f148 <mix_sub_columns+0x288>)
 800f0fe:	5c9a      	ldrb	r2, [r3, r2]
 800f100:	7d7b      	ldrb	r3, [r7, #21]
 800f102:	4619      	mov	r1, r3
 800f104:	4b11      	ldr	r3, [pc, #68]	; (800f14c <mix_sub_columns+0x28c>)
 800f106:	5c5b      	ldrb	r3, [r3, r1]
 800f108:	4053      	eors	r3, r2
 800f10a:	b2da      	uxtb	r2, r3
 800f10c:	7abb      	ldrb	r3, [r7, #10]
 800f10e:	4619      	mov	r1, r3
 800f110:	4b0e      	ldr	r3, [pc, #56]	; (800f14c <mix_sub_columns+0x28c>)
 800f112:	5c5b      	ldrb	r3, [r3, r1]
 800f114:	4053      	eors	r3, r2
 800f116:	b2d9      	uxtb	r1, r3
 800f118:	7bfb      	ldrb	r3, [r7, #15]
 800f11a:	461a      	mov	r2, r3
 800f11c:	4b09      	ldr	r3, [pc, #36]	; (800f144 <mix_sub_columns+0x284>)
 800f11e:	5c9a      	ldrb	r2, [r3, r2]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	330b      	adds	r3, #11
 800f124:	404a      	eors	r2, r1
 800f126:	b2d2      	uxtb	r2, r2
 800f128:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800f12a:	7d3b      	ldrb	r3, [r7, #20]
 800f12c:	461a      	mov	r2, r3
 800f12e:	4b05      	ldr	r3, [pc, #20]	; (800f144 <mix_sub_columns+0x284>)
 800f130:	5c9a      	ldrb	r2, [r3, r2]
 800f132:	7a7b      	ldrb	r3, [r7, #9]
 800f134:	4619      	mov	r1, r3
 800f136:	4b04      	ldr	r3, [pc, #16]	; (800f148 <mix_sub_columns+0x288>)
 800f138:	5c5b      	ldrb	r3, [r3, r1]
 800f13a:	4053      	eors	r3, r2
 800f13c:	b2da      	uxtb	r2, r3
 800f13e:	7bbb      	ldrb	r3, [r7, #14]
 800f140:	4619      	mov	r1, r3
 800f142:	e005      	b.n	800f150 <mix_sub_columns+0x290>
 800f144:	08021bc0 	.word	0x08021bc0
 800f148:	08021cc0 	.word	0x08021cc0
 800f14c:	08021ac0 	.word	0x08021ac0
 800f150:	4b2d      	ldr	r3, [pc, #180]	; (800f208 <mix_sub_columns+0x348>)
 800f152:	5c5b      	ldrb	r3, [r3, r1]
 800f154:	4053      	eors	r3, r2
 800f156:	b2d9      	uxtb	r1, r3
 800f158:	7cfb      	ldrb	r3, [r7, #19]
 800f15a:	461a      	mov	r2, r3
 800f15c:	4b2a      	ldr	r3, [pc, #168]	; (800f208 <mix_sub_columns+0x348>)
 800f15e:	5c9a      	ldrb	r2, [r3, r2]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	330c      	adds	r3, #12
 800f164:	404a      	eors	r2, r1
 800f166:	b2d2      	uxtb	r2, r2
 800f168:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800f16a:	7d3b      	ldrb	r3, [r7, #20]
 800f16c:	461a      	mov	r2, r3
 800f16e:	4b26      	ldr	r3, [pc, #152]	; (800f208 <mix_sub_columns+0x348>)
 800f170:	5c9a      	ldrb	r2, [r3, r2]
 800f172:	7a7b      	ldrb	r3, [r7, #9]
 800f174:	4619      	mov	r1, r3
 800f176:	4b25      	ldr	r3, [pc, #148]	; (800f20c <mix_sub_columns+0x34c>)
 800f178:	5c5b      	ldrb	r3, [r3, r1]
 800f17a:	4053      	eors	r3, r2
 800f17c:	b2da      	uxtb	r2, r3
 800f17e:	7bbb      	ldrb	r3, [r7, #14]
 800f180:	4619      	mov	r1, r3
 800f182:	4b23      	ldr	r3, [pc, #140]	; (800f210 <mix_sub_columns+0x350>)
 800f184:	5c5b      	ldrb	r3, [r3, r1]
 800f186:	4053      	eors	r3, r2
 800f188:	b2d9      	uxtb	r1, r3
 800f18a:	7cfb      	ldrb	r3, [r7, #19]
 800f18c:	461a      	mov	r2, r3
 800f18e:	4b1e      	ldr	r3, [pc, #120]	; (800f208 <mix_sub_columns+0x348>)
 800f190:	5c9a      	ldrb	r2, [r3, r2]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	330d      	adds	r3, #13
 800f196:	404a      	eors	r2, r1
 800f198:	b2d2      	uxtb	r2, r2
 800f19a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800f19c:	7d3b      	ldrb	r3, [r7, #20]
 800f19e:	461a      	mov	r2, r3
 800f1a0:	4b19      	ldr	r3, [pc, #100]	; (800f208 <mix_sub_columns+0x348>)
 800f1a2:	5c9a      	ldrb	r2, [r3, r2]
 800f1a4:	7a7b      	ldrb	r3, [r7, #9]
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	4b17      	ldr	r3, [pc, #92]	; (800f208 <mix_sub_columns+0x348>)
 800f1aa:	5c5b      	ldrb	r3, [r3, r1]
 800f1ac:	4053      	eors	r3, r2
 800f1ae:	b2da      	uxtb	r2, r3
 800f1b0:	7bbb      	ldrb	r3, [r7, #14]
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	4b15      	ldr	r3, [pc, #84]	; (800f20c <mix_sub_columns+0x34c>)
 800f1b6:	5c5b      	ldrb	r3, [r3, r1]
 800f1b8:	4053      	eors	r3, r2
 800f1ba:	b2d9      	uxtb	r1, r3
 800f1bc:	7cfb      	ldrb	r3, [r7, #19]
 800f1be:	461a      	mov	r2, r3
 800f1c0:	4b13      	ldr	r3, [pc, #76]	; (800f210 <mix_sub_columns+0x350>)
 800f1c2:	5c9a      	ldrb	r2, [r3, r2]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	330e      	adds	r3, #14
 800f1c8:	404a      	eors	r2, r1
 800f1ca:	b2d2      	uxtb	r2, r2
 800f1cc:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800f1ce:	7d3b      	ldrb	r3, [r7, #20]
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	4b0f      	ldr	r3, [pc, #60]	; (800f210 <mix_sub_columns+0x350>)
 800f1d4:	5c9a      	ldrb	r2, [r3, r2]
 800f1d6:	7a7b      	ldrb	r3, [r7, #9]
 800f1d8:	4619      	mov	r1, r3
 800f1da:	4b0b      	ldr	r3, [pc, #44]	; (800f208 <mix_sub_columns+0x348>)
 800f1dc:	5c5b      	ldrb	r3, [r3, r1]
 800f1de:	4053      	eors	r3, r2
 800f1e0:	b2da      	uxtb	r2, r3
 800f1e2:	7bbb      	ldrb	r3, [r7, #14]
 800f1e4:	4619      	mov	r1, r3
 800f1e6:	4b08      	ldr	r3, [pc, #32]	; (800f208 <mix_sub_columns+0x348>)
 800f1e8:	5c5b      	ldrb	r3, [r3, r1]
 800f1ea:	4053      	eors	r3, r2
 800f1ec:	b2d9      	uxtb	r1, r3
 800f1ee:	7cfb      	ldrb	r3, [r7, #19]
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	4b06      	ldr	r3, [pc, #24]	; (800f20c <mix_sub_columns+0x34c>)
 800f1f4:	5c9a      	ldrb	r2, [r3, r2]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	330f      	adds	r3, #15
 800f1fa:	404a      	eors	r2, r1
 800f1fc:	b2d2      	uxtb	r2, r2
 800f1fe:	701a      	strb	r2, [r3, #0]
  }
 800f200:	bf00      	nop
 800f202:	3718      	adds	r7, #24
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}
 800f208:	08021ac0 	.word	0x08021ac0
 800f20c:	08021bc0 	.word	0x08021bc0
 800f210:	08021cc0 	.word	0x08021cc0

0800f214 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b086      	sub	sp, #24
 800f218:	af00      	add	r7, sp, #0
 800f21a:	60f8      	str	r0, [r7, #12]
 800f21c:	460b      	mov	r3, r1
 800f21e:	607a      	str	r2, [r7, #4]
 800f220:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800f222:	7afb      	ldrb	r3, [r7, #11]
 800f224:	3b10      	subs	r3, #16
 800f226:	2b10      	cmp	r3, #16
 800f228:	bf8c      	ite	hi
 800f22a:	2201      	movhi	r2, #1
 800f22c:	2200      	movls	r2, #0
 800f22e:	b2d2      	uxtb	r2, r2
 800f230:	2a00      	cmp	r2, #0
 800f232:	d10d      	bne.n	800f250 <lorawan_aes_set_key+0x3c>
 800f234:	2201      	movs	r2, #1
 800f236:	fa02 f303 	lsl.w	r3, r2, r3
 800f23a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800f23e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f242:	2b00      	cmp	r3, #0
 800f244:	bf14      	ite	ne
 800f246:	2301      	movne	r3, #1
 800f248:	2300      	moveq	r3, #0
 800f24a:	b2db      	uxtb	r3, r3
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d105      	bne.n	800f25c <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2200      	movs	r2, #0
 800f254:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800f258:	23ff      	movs	r3, #255	; 0xff
 800f25a:	e0b2      	b.n	800f3c2 <lorawan_aes_set_key+0x1ae>
        break;
 800f25c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	7afa      	ldrb	r2, [r7, #11]
 800f262:	68f9      	ldr	r1, [r7, #12]
 800f264:	4618      	mov	r0, r3
 800f266:	f7ff fbfa 	bl	800ea5e <copy_block_nn>
    hi = (keylen + 28) << 2;
 800f26a:	7afb      	ldrb	r3, [r7, #11]
 800f26c:	331c      	adds	r3, #28
 800f26e:	b2db      	uxtb	r3, r3
 800f270:	009b      	lsls	r3, r3, #2
 800f272:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800f274:	7c7b      	ldrb	r3, [r7, #17]
 800f276:	091b      	lsrs	r3, r3, #4
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	3b01      	subs	r3, #1
 800f27c:	b2da      	uxtb	r2, r3
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800f284:	7afb      	ldrb	r3, [r7, #11]
 800f286:	75fb      	strb	r3, [r7, #23]
 800f288:	2301      	movs	r3, #1
 800f28a:	75bb      	strb	r3, [r7, #22]
 800f28c:	e093      	b.n	800f3b6 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800f28e:	7dfb      	ldrb	r3, [r7, #23]
 800f290:	3b04      	subs	r3, #4
 800f292:	687a      	ldr	r2, [r7, #4]
 800f294:	5cd3      	ldrb	r3, [r2, r3]
 800f296:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800f298:	7dfb      	ldrb	r3, [r7, #23]
 800f29a:	3b03      	subs	r3, #3
 800f29c:	687a      	ldr	r2, [r7, #4]
 800f29e:	5cd3      	ldrb	r3, [r2, r3]
 800f2a0:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800f2a2:	7dfb      	ldrb	r3, [r7, #23]
 800f2a4:	3b02      	subs	r3, #2
 800f2a6:	687a      	ldr	r2, [r7, #4]
 800f2a8:	5cd3      	ldrb	r3, [r2, r3]
 800f2aa:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800f2ac:	7dfb      	ldrb	r3, [r7, #23]
 800f2ae:	3b01      	subs	r3, #1
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	5cd3      	ldrb	r3, [r2, r3]
 800f2b4:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800f2b6:	7dfb      	ldrb	r3, [r7, #23]
 800f2b8:	7afa      	ldrb	r2, [r7, #11]
 800f2ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800f2be:	fb01 f202 	mul.w	r2, r1, r2
 800f2c2:	1a9b      	subs	r3, r3, r2
 800f2c4:	b2db      	uxtb	r3, r3
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d127      	bne.n	800f31a <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800f2ca:	7d7b      	ldrb	r3, [r7, #21]
 800f2cc:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800f2ce:	7d3b      	ldrb	r3, [r7, #20]
 800f2d0:	4a3e      	ldr	r2, [pc, #248]	; (800f3cc <lorawan_aes_set_key+0x1b8>)
 800f2d2:	5cd2      	ldrb	r2, [r2, r3]
 800f2d4:	7dbb      	ldrb	r3, [r7, #22]
 800f2d6:	4053      	eors	r3, r2
 800f2d8:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800f2da:	7cfb      	ldrb	r3, [r7, #19]
 800f2dc:	4a3b      	ldr	r2, [pc, #236]	; (800f3cc <lorawan_aes_set_key+0x1b8>)
 800f2de:	5cd3      	ldrb	r3, [r2, r3]
 800f2e0:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800f2e2:	7cbb      	ldrb	r3, [r7, #18]
 800f2e4:	4a39      	ldr	r2, [pc, #228]	; (800f3cc <lorawan_aes_set_key+0x1b8>)
 800f2e6:	5cd3      	ldrb	r3, [r2, r3]
 800f2e8:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800f2ea:	7c3b      	ldrb	r3, [r7, #16]
 800f2ec:	4a37      	ldr	r2, [pc, #220]	; (800f3cc <lorawan_aes_set_key+0x1b8>)
 800f2ee:	5cd3      	ldrb	r3, [r2, r3]
 800f2f0:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800f2f2:	7dbb      	ldrb	r3, [r7, #22]
 800f2f4:	005b      	lsls	r3, r3, #1
 800f2f6:	b25a      	sxtb	r2, r3
 800f2f8:	7dbb      	ldrb	r3, [r7, #22]
 800f2fa:	09db      	lsrs	r3, r3, #7
 800f2fc:	b2db      	uxtb	r3, r3
 800f2fe:	4619      	mov	r1, r3
 800f300:	0049      	lsls	r1, r1, #1
 800f302:	440b      	add	r3, r1
 800f304:	4619      	mov	r1, r3
 800f306:	00c8      	lsls	r0, r1, #3
 800f308:	4619      	mov	r1, r3
 800f30a:	4603      	mov	r3, r0
 800f30c:	440b      	add	r3, r1
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	b25b      	sxtb	r3, r3
 800f312:	4053      	eors	r3, r2
 800f314:	b25b      	sxtb	r3, r3
 800f316:	75bb      	strb	r3, [r7, #22]
 800f318:	e01c      	b.n	800f354 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800f31a:	7afb      	ldrb	r3, [r7, #11]
 800f31c:	2b18      	cmp	r3, #24
 800f31e:	d919      	bls.n	800f354 <lorawan_aes_set_key+0x140>
 800f320:	7dfb      	ldrb	r3, [r7, #23]
 800f322:	7afa      	ldrb	r2, [r7, #11]
 800f324:	fbb3 f1f2 	udiv	r1, r3, r2
 800f328:	fb01 f202 	mul.w	r2, r1, r2
 800f32c:	1a9b      	subs	r3, r3, r2
 800f32e:	b2db      	uxtb	r3, r3
 800f330:	2b10      	cmp	r3, #16
 800f332:	d10f      	bne.n	800f354 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800f334:	7d7b      	ldrb	r3, [r7, #21]
 800f336:	4a25      	ldr	r2, [pc, #148]	; (800f3cc <lorawan_aes_set_key+0x1b8>)
 800f338:	5cd3      	ldrb	r3, [r2, r3]
 800f33a:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800f33c:	7d3b      	ldrb	r3, [r7, #20]
 800f33e:	4a23      	ldr	r2, [pc, #140]	; (800f3cc <lorawan_aes_set_key+0x1b8>)
 800f340:	5cd3      	ldrb	r3, [r2, r3]
 800f342:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800f344:	7cfb      	ldrb	r3, [r7, #19]
 800f346:	4a21      	ldr	r2, [pc, #132]	; (800f3cc <lorawan_aes_set_key+0x1b8>)
 800f348:	5cd3      	ldrb	r3, [r2, r3]
 800f34a:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800f34c:	7cbb      	ldrb	r3, [r7, #18]
 800f34e:	4a1f      	ldr	r2, [pc, #124]	; (800f3cc <lorawan_aes_set_key+0x1b8>)
 800f350:	5cd3      	ldrb	r3, [r2, r3]
 800f352:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800f354:	7dfa      	ldrb	r2, [r7, #23]
 800f356:	7afb      	ldrb	r3, [r7, #11]
 800f358:	1ad3      	subs	r3, r2, r3
 800f35a:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800f35c:	7c3b      	ldrb	r3, [r7, #16]
 800f35e:	687a      	ldr	r2, [r7, #4]
 800f360:	5cd1      	ldrb	r1, [r2, r3]
 800f362:	7dfb      	ldrb	r3, [r7, #23]
 800f364:	7d7a      	ldrb	r2, [r7, #21]
 800f366:	404a      	eors	r2, r1
 800f368:	b2d1      	uxtb	r1, r2
 800f36a:	687a      	ldr	r2, [r7, #4]
 800f36c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800f36e:	7c3b      	ldrb	r3, [r7, #16]
 800f370:	3301      	adds	r3, #1
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	5cd1      	ldrb	r1, [r2, r3]
 800f376:	7dfb      	ldrb	r3, [r7, #23]
 800f378:	3301      	adds	r3, #1
 800f37a:	7d3a      	ldrb	r2, [r7, #20]
 800f37c:	404a      	eors	r2, r1
 800f37e:	b2d1      	uxtb	r1, r2
 800f380:	687a      	ldr	r2, [r7, #4]
 800f382:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800f384:	7c3b      	ldrb	r3, [r7, #16]
 800f386:	3302      	adds	r3, #2
 800f388:	687a      	ldr	r2, [r7, #4]
 800f38a:	5cd1      	ldrb	r1, [r2, r3]
 800f38c:	7dfb      	ldrb	r3, [r7, #23]
 800f38e:	3302      	adds	r3, #2
 800f390:	7cfa      	ldrb	r2, [r7, #19]
 800f392:	404a      	eors	r2, r1
 800f394:	b2d1      	uxtb	r1, r2
 800f396:	687a      	ldr	r2, [r7, #4]
 800f398:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800f39a:	7c3b      	ldrb	r3, [r7, #16]
 800f39c:	3303      	adds	r3, #3
 800f39e:	687a      	ldr	r2, [r7, #4]
 800f3a0:	5cd1      	ldrb	r1, [r2, r3]
 800f3a2:	7dfb      	ldrb	r3, [r7, #23]
 800f3a4:	3303      	adds	r3, #3
 800f3a6:	7cba      	ldrb	r2, [r7, #18]
 800f3a8:	404a      	eors	r2, r1
 800f3aa:	b2d1      	uxtb	r1, r2
 800f3ac:	687a      	ldr	r2, [r7, #4]
 800f3ae:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800f3b0:	7dfb      	ldrb	r3, [r7, #23]
 800f3b2:	3304      	adds	r3, #4
 800f3b4:	75fb      	strb	r3, [r7, #23]
 800f3b6:	7dfa      	ldrb	r2, [r7, #23]
 800f3b8:	7c7b      	ldrb	r3, [r7, #17]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	f4ff af67 	bcc.w	800f28e <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800f3c0:	2300      	movs	r3, #0
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3718      	adds	r7, #24
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
 800f3ca:	bf00      	nop
 800f3cc:	08021ac0 	.word	0x08021ac0

0800f3d0 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b08a      	sub	sp, #40	; 0x28
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	60f8      	str	r0, [r7, #12]
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d038      	beq.n	800f458 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800f3e6:	687a      	ldr	r2, [r7, #4]
 800f3e8:	f107 0314 	add.w	r3, r7, #20
 800f3ec:	68f9      	ldr	r1, [r7, #12]
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7ff fc07 	bl	800ec02 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f3fa:	e014      	b.n	800f426 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800f3fc:	f107 0314 	add.w	r3, r7, #20
 800f400:	4618      	mov	r0, r3
 800f402:	f7ff fd5d 	bl	800eec0 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f40c:	0112      	lsls	r2, r2, #4
 800f40e:	441a      	add	r2, r3
 800f410:	f107 0314 	add.w	r3, r7, #20
 800f414:	4611      	mov	r1, r2
 800f416:	4618      	mov	r0, r3
 800f418:	f7ff fcab 	bl	800ed72 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800f41c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f420:	3301      	adds	r3, #1
 800f422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800f42c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f430:	429a      	cmp	r2, r3
 800f432:	d3e3      	bcc.n	800f3fc <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800f434:	f107 0314 	add.w	r3, r7, #20
 800f438:	4618      	mov	r0, r3
 800f43a:	f7ff fca7 	bl	800ed8c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f444:	0112      	lsls	r2, r2, #4
 800f446:	441a      	add	r2, r3
 800f448:	f107 0314 	add.w	r3, r7, #20
 800f44c:	4619      	mov	r1, r3
 800f44e:	68b8      	ldr	r0, [r7, #8]
 800f450:	f7ff fbd7 	bl	800ec02 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800f454:	2300      	movs	r3, #0
 800f456:	e000      	b.n	800f45a <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800f458:	23ff      	movs	r3, #255	; 0xff
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3728      	adds	r7, #40	; 0x28
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
	...

0800f464 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800f464:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f466:	b09d      	sub	sp, #116	; 0x74
 800f468:	af10      	add	r7, sp, #64	; 0x40
 800f46a:	4603      	mov	r3, r0
 800f46c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800f470:	2306      	movs	r3, #6
 800f472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800f476:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f47a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f47e:	4611      	mov	r1, r2
 800f480:	4618      	mov	r0, r3
 800f482:	f000 f9a7 	bl	800f7d4 <SecureElementGetKeyByID>
 800f486:	4603      	mov	r3, r0
 800f488:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800f48c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f490:	2b00      	cmp	r3, #0
 800f492:	f040 80b0 	bne.w	800f5f6 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800f496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d106      	bne.n	800f4ac <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800f49e:	4b58      	ldr	r3, [pc, #352]	; (800f600 <PrintKey+0x19c>)
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	2100      	movs	r1, #0
 800f4a4:	2002      	movs	r0, #2
 800f4a6:	f011 fa4f 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
 800f4aa:	e056      	b.n	800f55a <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800f4ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4b0:	2b01      	cmp	r3, #1
 800f4b2:	d106      	bne.n	800f4c2 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800f4b4:	4b53      	ldr	r3, [pc, #332]	; (800f604 <PrintKey+0x1a0>)
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	2100      	movs	r1, #0
 800f4ba:	2002      	movs	r0, #2
 800f4bc:	f011 fa44 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
 800f4c0:	e04b      	b.n	800f55a <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800f4c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4c6:	2b03      	cmp	r3, #3
 800f4c8:	d106      	bne.n	800f4d8 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800f4ca:	4b4f      	ldr	r3, [pc, #316]	; (800f608 <PrintKey+0x1a4>)
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	2100      	movs	r1, #0
 800f4d0:	2002      	movs	r0, #2
 800f4d2:	f011 fa39 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
 800f4d6:	e040      	b.n	800f55a <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800f4d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4dc:	2b02      	cmp	r3, #2
 800f4de:	d106      	bne.n	800f4ee <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800f4e0:	4b4a      	ldr	r3, [pc, #296]	; (800f60c <PrintKey+0x1a8>)
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	2002      	movs	r0, #2
 800f4e8:	f011 fa2e 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
 800f4ec:	e035      	b.n	800f55a <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800f4ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4f2:	2b04      	cmp	r3, #4
 800f4f4:	d106      	bne.n	800f504 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800f4f6:	4b46      	ldr	r3, [pc, #280]	; (800f610 <PrintKey+0x1ac>)
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	2100      	movs	r1, #0
 800f4fc:	2002      	movs	r0, #2
 800f4fe:	f011 fa23 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
 800f502:	e02a      	b.n	800f55a <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800f504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f508:	2b7f      	cmp	r3, #127	; 0x7f
 800f50a:	d106      	bne.n	800f51a <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800f50c:	4b41      	ldr	r3, [pc, #260]	; (800f614 <PrintKey+0x1b0>)
 800f50e:	2200      	movs	r2, #0
 800f510:	2100      	movs	r1, #0
 800f512:	2002      	movs	r0, #2
 800f514:	f011 fa18 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
 800f518:	e01f      	b.n	800f55a <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800f51a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f51e:	2b80      	cmp	r3, #128	; 0x80
 800f520:	d106      	bne.n	800f530 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800f522:	4b3d      	ldr	r3, [pc, #244]	; (800f618 <PrintKey+0x1b4>)
 800f524:	2200      	movs	r2, #0
 800f526:	2100      	movs	r1, #0
 800f528:	2002      	movs	r0, #2
 800f52a:	f011 fa0d 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
 800f52e:	e014      	b.n	800f55a <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800f530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f534:	2b81      	cmp	r3, #129	; 0x81
 800f536:	d106      	bne.n	800f546 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800f538:	4b38      	ldr	r3, [pc, #224]	; (800f61c <PrintKey+0x1b8>)
 800f53a:	2200      	movs	r2, #0
 800f53c:	2100      	movs	r1, #0
 800f53e:	2002      	movs	r0, #2
 800f540:	f011 fa02 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
 800f544:	e009      	b.n	800f55a <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800f546:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f54a:	2b82      	cmp	r3, #130	; 0x82
 800f54c:	d105      	bne.n	800f55a <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800f54e:	4b34      	ldr	r3, [pc, #208]	; (800f620 <PrintKey+0x1bc>)
 800f550:	2200      	movs	r2, #0
 800f552:	2100      	movs	r1, #0
 800f554:	2002      	movs	r0, #2
 800f556:	f011 f9f7 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800f55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55c:	785b      	ldrb	r3, [r3, #1]
 800f55e:	4618      	mov	r0, r3
 800f560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f562:	789b      	ldrb	r3, [r3, #2]
 800f564:	461c      	mov	r4, r3
 800f566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f568:	78db      	ldrb	r3, [r3, #3]
 800f56a:	461d      	mov	r5, r3
 800f56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56e:	791b      	ldrb	r3, [r3, #4]
 800f570:	461e      	mov	r6, r3
 800f572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f574:	795b      	ldrb	r3, [r3, #5]
 800f576:	623b      	str	r3, [r7, #32]
 800f578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57a:	799b      	ldrb	r3, [r3, #6]
 800f57c:	61fb      	str	r3, [r7, #28]
 800f57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f580:	79db      	ldrb	r3, [r3, #7]
 800f582:	61bb      	str	r3, [r7, #24]
 800f584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f586:	7a1b      	ldrb	r3, [r3, #8]
 800f588:	617b      	str	r3, [r7, #20]
 800f58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58c:	7a5b      	ldrb	r3, [r3, #9]
 800f58e:	613b      	str	r3, [r7, #16]
 800f590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f592:	7a9b      	ldrb	r3, [r3, #10]
 800f594:	60fb      	str	r3, [r7, #12]
 800f596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f598:	7adb      	ldrb	r3, [r3, #11]
 800f59a:	60bb      	str	r3, [r7, #8]
 800f59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f59e:	7b1b      	ldrb	r3, [r3, #12]
 800f5a0:	607b      	str	r3, [r7, #4]
 800f5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a4:	7b5b      	ldrb	r3, [r3, #13]
 800f5a6:	603b      	str	r3, [r7, #0]
 800f5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5aa:	7b9b      	ldrb	r3, [r3, #14]
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b0:	7bdb      	ldrb	r3, [r3, #15]
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b6:	7c1b      	ldrb	r3, [r3, #16]
 800f5b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5ba:	920e      	str	r2, [sp, #56]	; 0x38
 800f5bc:	910d      	str	r1, [sp, #52]	; 0x34
 800f5be:	683a      	ldr	r2, [r7, #0]
 800f5c0:	920c      	str	r2, [sp, #48]	; 0x30
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	920b      	str	r2, [sp, #44]	; 0x2c
 800f5c6:	68ba      	ldr	r2, [r7, #8]
 800f5c8:	920a      	str	r2, [sp, #40]	; 0x28
 800f5ca:	68fa      	ldr	r2, [r7, #12]
 800f5cc:	9209      	str	r2, [sp, #36]	; 0x24
 800f5ce:	693a      	ldr	r2, [r7, #16]
 800f5d0:	9208      	str	r2, [sp, #32]
 800f5d2:	697a      	ldr	r2, [r7, #20]
 800f5d4:	9207      	str	r2, [sp, #28]
 800f5d6:	69ba      	ldr	r2, [r7, #24]
 800f5d8:	9206      	str	r2, [sp, #24]
 800f5da:	69fa      	ldr	r2, [r7, #28]
 800f5dc:	9205      	str	r2, [sp, #20]
 800f5de:	6a3b      	ldr	r3, [r7, #32]
 800f5e0:	9304      	str	r3, [sp, #16]
 800f5e2:	9603      	str	r6, [sp, #12]
 800f5e4:	9502      	str	r5, [sp, #8]
 800f5e6:	9401      	str	r4, [sp, #4]
 800f5e8:	9000      	str	r0, [sp, #0]
 800f5ea:	4b0e      	ldr	r3, [pc, #56]	; (800f624 <PrintKey+0x1c0>)
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	2100      	movs	r1, #0
 800f5f0:	2002      	movs	r0, #2
 800f5f2:	f011 f9a9 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800f5f6:	bf00      	nop
 800f5f8:	3734      	adds	r7, #52	; 0x34
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5fe:	bf00      	nop
 800f600:	0802152c 	.word	0x0802152c
 800f604:	08021544 	.word	0x08021544
 800f608:	0802155c 	.word	0x0802155c
 800f60c:	08021574 	.word	0x08021574
 800f610:	0802158c 	.word	0x0802158c
 800f614:	080215a4 	.word	0x080215a4
 800f618:	080215bc 	.word	0x080215bc
 800f61c:	080215d4 	.word	0x080215d4
 800f620:	080215ec 	.word	0x080215ec
 800f624:	08021604 	.word	0x08021604

0800f628 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800f628:	b480      	push	{r7}
 800f62a:	b085      	sub	sp, #20
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	4603      	mov	r3, r0
 800f630:	6039      	str	r1, [r7, #0]
 800f632:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f634:	2300      	movs	r3, #0
 800f636:	73fb      	strb	r3, [r7, #15]
 800f638:	e01a      	b.n	800f670 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f63a:	4b12      	ldr	r3, [pc, #72]	; (800f684 <GetKeyByID+0x5c>)
 800f63c:	6819      	ldr	r1, [r3, #0]
 800f63e:	7bfa      	ldrb	r2, [r7, #15]
 800f640:	4613      	mov	r3, r2
 800f642:	011b      	lsls	r3, r3, #4
 800f644:	4413      	add	r3, r2
 800f646:	440b      	add	r3, r1
 800f648:	3310      	adds	r3, #16
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	79fa      	ldrb	r2, [r7, #7]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d10b      	bne.n	800f66a <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800f652:	4b0c      	ldr	r3, [pc, #48]	; (800f684 <GetKeyByID+0x5c>)
 800f654:	6819      	ldr	r1, [r3, #0]
 800f656:	7bfa      	ldrb	r2, [r7, #15]
 800f658:	4613      	mov	r3, r2
 800f65a:	011b      	lsls	r3, r3, #4
 800f65c:	4413      	add	r3, r2
 800f65e:	3310      	adds	r3, #16
 800f660:	18ca      	adds	r2, r1, r3
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f666:	2300      	movs	r3, #0
 800f668:	e006      	b.n	800f678 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f66a:	7bfb      	ldrb	r3, [r7, #15]
 800f66c:	3301      	adds	r3, #1
 800f66e:	73fb      	strb	r3, [r7, #15]
 800f670:	7bfb      	ldrb	r3, [r7, #15]
 800f672:	2b09      	cmp	r3, #9
 800f674:	d9e1      	bls.n	800f63a <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f676:	2303      	movs	r3, #3
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3714      	adds	r7, #20
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bc80      	pop	{r7}
 800f680:	4770      	bx	lr
 800f682:	bf00      	nop
 800f684:	20000c88 	.word	0x20000c88

0800f688 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800f688:	b590      	push	{r4, r7, lr}
 800f68a:	b0d1      	sub	sp, #324	; 0x144
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800f692:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800f696:	6020      	str	r0, [r4, #0]
 800f698:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800f69c:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800f6a0:	6001      	str	r1, [r0, #0]
 800f6a2:	4619      	mov	r1, r3
 800f6a4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f6a8:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800f6ac:	801a      	strh	r2, [r3, #0]
 800f6ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f6b2:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800f6b6:	460a      	mov	r2, r1
 800f6b8:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800f6ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f6be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d003      	beq.n	800f6d0 <ComputeCmac+0x48>
 800f6c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d101      	bne.n	800f6d4 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f6d0:	2302      	movs	r3, #2
 800f6d2:	e05c      	b.n	800f78e <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800f6d4:	f107 0314 	add.w	r3, r7, #20
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7fe ff1b 	bl	800e514 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800f6de:	f107 0210 	add.w	r2, r7, #16
 800f6e2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f6e6:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	4611      	mov	r1, r2
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7ff ff9a 	bl	800f628 <GetKeyByID>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f6fa:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d143      	bne.n	800f78a <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800f702:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	1c5a      	adds	r2, r3, #1
 800f70e:	f107 0314 	add.w	r3, r7, #20
 800f712:	4611      	mov	r1, r2
 800f714:	4618      	mov	r0, r3
 800f716:	f7fe ff16 	bl	800e546 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800f71a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f71e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d009      	beq.n	800f73c <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800f728:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f72c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800f730:	f107 0014 	add.w	r0, r7, #20
 800f734:	2210      	movs	r2, #16
 800f736:	6819      	ldr	r1, [r3, #0]
 800f738:	f7fe ff14 	bl	800e564 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800f73c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f740:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800f744:	881a      	ldrh	r2, [r3, #0]
 800f746:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f74a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800f74e:	f107 0014 	add.w	r0, r7, #20
 800f752:	6819      	ldr	r1, [r3, #0]
 800f754:	f7fe ff06 	bl	800e564 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800f758:	f107 0214 	add.w	r2, r7, #20
 800f75c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800f760:	4611      	mov	r1, r2
 800f762:	4618      	mov	r0, r3
 800f764:	f7fe ffc0 	bl	800e6e8 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800f768:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800f76c:	061a      	lsls	r2, r3, #24
 800f76e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800f772:	041b      	lsls	r3, r3, #16
 800f774:	431a      	orrs	r2, r3
 800f776:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800f77a:	021b      	lsls	r3, r3, #8
 800f77c:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800f77e:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800f782:	431a      	orrs	r2, r3
 800f784:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800f788:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800f78a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800f78e:	4618      	mov	r0, r3
 800f790:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800f794:	46bd      	mov	sp, r7
 800f796:	bd90      	pop	{r4, r7, pc}

0800f798 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d101      	bne.n	800f7ac <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f7a8:	2302      	movs	r3, #2
 800f7aa:	e00a      	b.n	800f7c2 <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800f7ac:	4a07      	ldr	r2, [pc, #28]	; (800f7cc <SecureElementInit+0x34>)
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800f7b2:	4b06      	ldr	r3, [pc, #24]	; (800f7cc <SecureElementInit+0x34>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	22c0      	movs	r2, #192	; 0xc0
 800f7b8:	4905      	ldr	r1, [pc, #20]	; (800f7d0 <SecureElementInit+0x38>)
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f00c fd6f 	bl	801c29e <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800f7c0:	2300      	movs	r3, #0
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3708      	adds	r7, #8
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	20000c88 	.word	0x20000c88
 800f7d0:	08021f54 	.word	0x08021f54

0800f7d4 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b085      	sub	sp, #20
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	4603      	mov	r3, r0
 800f7dc:	6039      	str	r1, [r7, #0]
 800f7de:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	73fb      	strb	r3, [r7, #15]
 800f7e4:	e01a      	b.n	800f81c <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800f7e6:	4b12      	ldr	r3, [pc, #72]	; (800f830 <SecureElementGetKeyByID+0x5c>)
 800f7e8:	6819      	ldr	r1, [r3, #0]
 800f7ea:	7bfa      	ldrb	r2, [r7, #15]
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	011b      	lsls	r3, r3, #4
 800f7f0:	4413      	add	r3, r2
 800f7f2:	440b      	add	r3, r1
 800f7f4:	3310      	adds	r3, #16
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	79fa      	ldrb	r2, [r7, #7]
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	d10b      	bne.n	800f816 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800f7fe:	4b0c      	ldr	r3, [pc, #48]	; (800f830 <SecureElementGetKeyByID+0x5c>)
 800f800:	6819      	ldr	r1, [r3, #0]
 800f802:	7bfa      	ldrb	r2, [r7, #15]
 800f804:	4613      	mov	r3, r2
 800f806:	011b      	lsls	r3, r3, #4
 800f808:	4413      	add	r3, r2
 800f80a:	3310      	adds	r3, #16
 800f80c:	18ca      	adds	r2, r1, r3
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f812:	2300      	movs	r3, #0
 800f814:	e006      	b.n	800f824 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800f816:	7bfb      	ldrb	r3, [r7, #15]
 800f818:	3301      	adds	r3, #1
 800f81a:	73fb      	strb	r3, [r7, #15]
 800f81c:	7bfb      	ldrb	r3, [r7, #15]
 800f81e:	2b09      	cmp	r3, #9
 800f820:	d9e1      	bls.n	800f7e6 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f822:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800f824:	4618      	mov	r0, r3
 800f826:	3714      	adds	r7, #20
 800f828:	46bd      	mov	sp, r7
 800f82a:	bc80      	pop	{r7}
 800f82c:	4770      	bx	lr
 800f82e:	bf00      	nop
 800f830:	20000c88 	.word	0x20000c88

0800f834 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800f834:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f836:	b08b      	sub	sp, #44	; 0x2c
 800f838:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800f83a:	4b3f      	ldr	r3, [pc, #252]	; (800f938 <SecureElementPrintKeys+0x104>)
 800f83c:	2200      	movs	r2, #0
 800f83e:	2100      	movs	r1, #0
 800f840:	2002      	movs	r0, #2
 800f842:	f011 f881 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800f846:	2000      	movs	r0, #0
 800f848:	f7ff fe0c 	bl	800f464 <PrintKey>
    PrintKey(NWK_KEY);
 800f84c:	2001      	movs	r0, #1
 800f84e:	f7ff fe09 	bl	800f464 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800f852:	4b3a      	ldr	r3, [pc, #232]	; (800f93c <SecureElementPrintKeys+0x108>)
 800f854:	2200      	movs	r2, #0
 800f856:	2100      	movs	r1, #0
 800f858:	2002      	movs	r0, #2
 800f85a:	f011 f875 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800f85e:	2003      	movs	r0, #3
 800f860:	f7ff fe00 	bl	800f464 <PrintKey>
    PrintKey(NWK_S_KEY);
 800f864:	2002      	movs	r0, #2
 800f866:	f7ff fdfd 	bl	800f464 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800f86a:	4b35      	ldr	r3, [pc, #212]	; (800f940 <SecureElementPrintKeys+0x10c>)
 800f86c:	2200      	movs	r2, #0
 800f86e:	2100      	movs	r1, #0
 800f870:	2002      	movs	r0, #2
 800f872:	f011 f869 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800f876:	4b33      	ldr	r3, [pc, #204]	; (800f944 <SecureElementPrintKeys+0x110>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	461a      	mov	r2, r3
 800f87e:	4b31      	ldr	r3, [pc, #196]	; (800f944 <SecureElementPrintKeys+0x110>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	785b      	ldrb	r3, [r3, #1]
 800f884:	4619      	mov	r1, r3
 800f886:	4b2f      	ldr	r3, [pc, #188]	; (800f944 <SecureElementPrintKeys+0x110>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	789b      	ldrb	r3, [r3, #2]
 800f88c:	4618      	mov	r0, r3
 800f88e:	4b2d      	ldr	r3, [pc, #180]	; (800f944 <SecureElementPrintKeys+0x110>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	78db      	ldrb	r3, [r3, #3]
 800f894:	461c      	mov	r4, r3
 800f896:	4b2b      	ldr	r3, [pc, #172]	; (800f944 <SecureElementPrintKeys+0x110>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	791b      	ldrb	r3, [r3, #4]
 800f89c:	461d      	mov	r5, r3
 800f89e:	4b29      	ldr	r3, [pc, #164]	; (800f944 <SecureElementPrintKeys+0x110>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	795b      	ldrb	r3, [r3, #5]
 800f8a4:	461e      	mov	r6, r3
 800f8a6:	4b27      	ldr	r3, [pc, #156]	; (800f944 <SecureElementPrintKeys+0x110>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	799b      	ldrb	r3, [r3, #6]
 800f8ac:	607b      	str	r3, [r7, #4]
 800f8ae:	4b25      	ldr	r3, [pc, #148]	; (800f944 <SecureElementPrintKeys+0x110>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	79db      	ldrb	r3, [r3, #7]
 800f8b4:	9307      	str	r3, [sp, #28]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	9306      	str	r3, [sp, #24]
 800f8ba:	9605      	str	r6, [sp, #20]
 800f8bc:	9504      	str	r5, [sp, #16]
 800f8be:	9403      	str	r4, [sp, #12]
 800f8c0:	9002      	str	r0, [sp, #8]
 800f8c2:	9101      	str	r1, [sp, #4]
 800f8c4:	9200      	str	r2, [sp, #0]
 800f8c6:	4b20      	ldr	r3, [pc, #128]	; (800f948 <SecureElementPrintKeys+0x114>)
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	2100      	movs	r1, #0
 800f8cc:	2002      	movs	r0, #2
 800f8ce:	f011 f83b 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800f8d2:	4b1c      	ldr	r3, [pc, #112]	; (800f944 <SecureElementPrintKeys+0x110>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	7a1b      	ldrb	r3, [r3, #8]
 800f8d8:	461a      	mov	r2, r3
 800f8da:	4b1a      	ldr	r3, [pc, #104]	; (800f944 <SecureElementPrintKeys+0x110>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	7a5b      	ldrb	r3, [r3, #9]
 800f8e0:	4619      	mov	r1, r3
 800f8e2:	4b18      	ldr	r3, [pc, #96]	; (800f944 <SecureElementPrintKeys+0x110>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	7a9b      	ldrb	r3, [r3, #10]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	4b16      	ldr	r3, [pc, #88]	; (800f944 <SecureElementPrintKeys+0x110>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	7adb      	ldrb	r3, [r3, #11]
 800f8f0:	461c      	mov	r4, r3
 800f8f2:	4b14      	ldr	r3, [pc, #80]	; (800f944 <SecureElementPrintKeys+0x110>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	7b1b      	ldrb	r3, [r3, #12]
 800f8f8:	461d      	mov	r5, r3
 800f8fa:	4b12      	ldr	r3, [pc, #72]	; (800f944 <SecureElementPrintKeys+0x110>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	7b5b      	ldrb	r3, [r3, #13]
 800f900:	461e      	mov	r6, r3
 800f902:	4b10      	ldr	r3, [pc, #64]	; (800f944 <SecureElementPrintKeys+0x110>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	7b9b      	ldrb	r3, [r3, #14]
 800f908:	607b      	str	r3, [r7, #4]
 800f90a:	4b0e      	ldr	r3, [pc, #56]	; (800f944 <SecureElementPrintKeys+0x110>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	7bdb      	ldrb	r3, [r3, #15]
 800f910:	9307      	str	r3, [sp, #28]
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	9306      	str	r3, [sp, #24]
 800f916:	9605      	str	r6, [sp, #20]
 800f918:	9504      	str	r5, [sp, #16]
 800f91a:	9403      	str	r4, [sp, #12]
 800f91c:	9002      	str	r0, [sp, #8]
 800f91e:	9101      	str	r1, [sp, #4]
 800f920:	9200      	str	r2, [sp, #0]
 800f922:	4b0a      	ldr	r3, [pc, #40]	; (800f94c <SecureElementPrintKeys+0x118>)
 800f924:	2200      	movs	r2, #0
 800f926:	2100      	movs	r1, #0
 800f928:	2002      	movs	r0, #2
 800f92a:	f011 f80d 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800f92e:	2300      	movs	r3, #0
}
 800f930:	4618      	mov	r0, r3
 800f932:	370c      	adds	r7, #12
 800f934:	46bd      	mov	sp, r7
 800f936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f938:	08021658 	.word	0x08021658
 800f93c:	08021670 	.word	0x08021670
 800f940:	08021688 	.word	0x08021688
 800f944:	20000c88 	.word	0x20000c88
 800f948:	080216a0 	.word	0x080216a0
 800f94c:	080216e0 	.word	0x080216e0

0800f950 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800f950:	b580      	push	{r7, lr}
 800f952:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800f954:	2004      	movs	r0, #4
 800f956:	f7ff fd85 	bl	800f464 <PrintKey>
    PrintKey(MC_KE_KEY);
 800f95a:	207f      	movs	r0, #127	; 0x7f
 800f95c:	f7ff fd82 	bl	800f464 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800f960:	2002      	movs	r0, #2
 800f962:	f7ff fd7f 	bl	800f464 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800f966:	2003      	movs	r0, #3
 800f968:	f7ff fd7c 	bl	800f464 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800f96c:	2300      	movs	r3, #0
}
 800f96e:	4618      	mov	r0, r3
 800f970:	bd80      	pop	{r7, pc}
	...

0800f974 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b088      	sub	sp, #32
 800f978:	af00      	add	r7, sp, #0
 800f97a:	4603      	mov	r3, r0
 800f97c:	6039      	str	r1, [r7, #0]
 800f97e:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d101      	bne.n	800f98a <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f986:	2302      	movs	r3, #2
 800f988:	e04c      	b.n	800fa24 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f98a:	2300      	movs	r3, #0
 800f98c:	77fb      	strb	r3, [r7, #31]
 800f98e:	e045      	b.n	800fa1c <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f990:	4b26      	ldr	r3, [pc, #152]	; (800fa2c <SecureElementSetKey+0xb8>)
 800f992:	6819      	ldr	r1, [r3, #0]
 800f994:	7ffa      	ldrb	r2, [r7, #31]
 800f996:	4613      	mov	r3, r2
 800f998:	011b      	lsls	r3, r3, #4
 800f99a:	4413      	add	r3, r2
 800f99c:	440b      	add	r3, r1
 800f99e:	3310      	adds	r3, #16
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	79fa      	ldrb	r2, [r7, #7]
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d136      	bne.n	800fa16 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800f9a8:	79fb      	ldrb	r3, [r7, #7]
 800f9aa:	2b80      	cmp	r3, #128	; 0x80
 800f9ac:	d123      	bne.n	800f9f6 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800f9ae:	2306      	movs	r3, #6
 800f9b0:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	60fb      	str	r3, [r7, #12]
 800f9b6:	f107 0310 	add.w	r3, r7, #16
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	601a      	str	r2, [r3, #0]
 800f9be:	605a      	str	r2, [r3, #4]
 800f9c0:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800f9c2:	f107 030c 	add.w	r3, r7, #12
 800f9c6:	227f      	movs	r2, #127	; 0x7f
 800f9c8:	2110      	movs	r1, #16
 800f9ca:	6838      	ldr	r0, [r7, #0]
 800f9cc:	f000 f87d 	bl	800faca <SecureElementAesEncrypt>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800f9d4:	4b15      	ldr	r3, [pc, #84]	; (800fa2c <SecureElementSetKey+0xb8>)
 800f9d6:	6819      	ldr	r1, [r3, #0]
 800f9d8:	7ffa      	ldrb	r2, [r7, #31]
 800f9da:	4613      	mov	r3, r2
 800f9dc:	011b      	lsls	r3, r3, #4
 800f9de:	4413      	add	r3, r2
 800f9e0:	3310      	adds	r3, #16
 800f9e2:	440b      	add	r3, r1
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	f107 010c 	add.w	r1, r7, #12
 800f9ea:	2210      	movs	r2, #16
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f00c fc56 	bl	801c29e <memcpy1>
                return retval;
 800f9f2:	7fbb      	ldrb	r3, [r7, #30]
 800f9f4:	e016      	b.n	800fa24 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800f9f6:	4b0d      	ldr	r3, [pc, #52]	; (800fa2c <SecureElementSetKey+0xb8>)
 800f9f8:	6819      	ldr	r1, [r3, #0]
 800f9fa:	7ffa      	ldrb	r2, [r7, #31]
 800f9fc:	4613      	mov	r3, r2
 800f9fe:	011b      	lsls	r3, r3, #4
 800fa00:	4413      	add	r3, r2
 800fa02:	3310      	adds	r3, #16
 800fa04:	440b      	add	r3, r1
 800fa06:	3301      	adds	r3, #1
 800fa08:	2210      	movs	r2, #16
 800fa0a:	6839      	ldr	r1, [r7, #0]
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f00c fc46 	bl	801c29e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800fa12:	2300      	movs	r3, #0
 800fa14:	e006      	b.n	800fa24 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fa16:	7ffb      	ldrb	r3, [r7, #31]
 800fa18:	3301      	adds	r3, #1
 800fa1a:	77fb      	strb	r3, [r7, #31]
 800fa1c:	7ffb      	ldrb	r3, [r7, #31]
 800fa1e:	2b09      	cmp	r3, #9
 800fa20:	d9b6      	bls.n	800f990 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fa22:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3720      	adds	r7, #32
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}
 800fa2c:	20000c88 	.word	0x20000c88

0800fa30 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b086      	sub	sp, #24
 800fa34:	af02      	add	r7, sp, #8
 800fa36:	60f8      	str	r0, [r7, #12]
 800fa38:	60b9      	str	r1, [r7, #8]
 800fa3a:	4611      	mov	r1, r2
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	460b      	mov	r3, r1
 800fa40:	80fb      	strh	r3, [r7, #6]
 800fa42:	4613      	mov	r3, r2
 800fa44:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800fa46:	797b      	ldrb	r3, [r7, #5]
 800fa48:	2b7e      	cmp	r3, #126	; 0x7e
 800fa4a:	d901      	bls.n	800fa50 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fa4c:	2303      	movs	r3, #3
 800fa4e:	e009      	b.n	800fa64 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800fa50:	7979      	ldrb	r1, [r7, #5]
 800fa52:	88fa      	ldrh	r2, [r7, #6]
 800fa54:	69bb      	ldr	r3, [r7, #24]
 800fa56:	9300      	str	r3, [sp, #0]
 800fa58:	460b      	mov	r3, r1
 800fa5a:	68b9      	ldr	r1, [r7, #8]
 800fa5c:	68f8      	ldr	r0, [r7, #12]
 800fa5e:	f7ff fe13 	bl	800f688 <ComputeCmac>
 800fa62:	4603      	mov	r3, r0
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	3710      	adds	r7, #16
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}

0800fa6c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b088      	sub	sp, #32
 800fa70:	af02      	add	r7, sp, #8
 800fa72:	60f8      	str	r0, [r7, #12]
 800fa74:	607a      	str	r2, [r7, #4]
 800fa76:	461a      	mov	r2, r3
 800fa78:	460b      	mov	r3, r1
 800fa7a:	817b      	strh	r3, [r7, #10]
 800fa7c:	4613      	mov	r3, r2
 800fa7e:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d101      	bne.n	800fa8a <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800fa86:	2302      	movs	r3, #2
 800fa88:	e01b      	b.n	800fac2 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800fa8a:	2306      	movs	r3, #6
 800fa8c:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800fa92:	7a79      	ldrb	r1, [r7, #9]
 800fa94:	897a      	ldrh	r2, [r7, #10]
 800fa96:	f107 0310 	add.w	r3, r7, #16
 800fa9a:	9300      	str	r3, [sp, #0]
 800fa9c:	460b      	mov	r3, r1
 800fa9e:	68f9      	ldr	r1, [r7, #12]
 800faa0:	2000      	movs	r0, #0
 800faa2:	f7ff fdf1 	bl	800f688 <ComputeCmac>
 800faa6:	4603      	mov	r3, r0
 800faa8:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800faaa:	7dfb      	ldrb	r3, [r7, #23]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d001      	beq.n	800fab4 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800fab0:	7dfb      	ldrb	r3, [r7, #23]
 800fab2:	e006      	b.n	800fac2 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	687a      	ldr	r2, [r7, #4]
 800fab8:	429a      	cmp	r2, r3
 800faba:	d001      	beq.n	800fac0 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800fabc:	2301      	movs	r3, #1
 800fabe:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800fac0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3718      	adds	r7, #24
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}

0800faca <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800faca:	b580      	push	{r7, lr}
 800facc:	b0c2      	sub	sp, #264	; 0x108
 800face:	af00      	add	r7, sp, #0
 800fad0:	60f8      	str	r0, [r7, #12]
 800fad2:	4608      	mov	r0, r1
 800fad4:	4611      	mov	r1, r2
 800fad6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800fada:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800fade:	6013      	str	r3, [r2, #0]
 800fae0:	4603      	mov	r3, r0
 800fae2:	817b      	strh	r3, [r7, #10]
 800fae4:	460b      	mov	r3, r1
 800fae6:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d006      	beq.n	800fafc <SecureElementAesEncrypt+0x32>
 800faee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d101      	bne.n	800fb00 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800fafc:	2302      	movs	r3, #2
 800fafe:	e046      	b.n	800fb8e <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800fb00:	897b      	ldrh	r3, [r7, #10]
 800fb02:	f003 030f 	and.w	r3, r3, #15
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d001      	beq.n	800fb10 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800fb0c:	2305      	movs	r3, #5
 800fb0e:	e03e      	b.n	800fb8e <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800fb10:	f107 0314 	add.w	r3, r7, #20
 800fb14:	22f0      	movs	r2, #240	; 0xf0
 800fb16:	2100      	movs	r1, #0
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f00c fbfb 	bl	801c314 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800fb1e:	f107 0210 	add.w	r2, r7, #16
 800fb22:	7a7b      	ldrb	r3, [r7, #9]
 800fb24:	4611      	mov	r1, r2
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7ff fd7e 	bl	800f628 <GetKeyByID>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800fb32:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d127      	bne.n	800fb8a <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800fb3a:	693b      	ldr	r3, [r7, #16]
 800fb3c:	3301      	adds	r3, #1
 800fb3e:	f107 0214 	add.w	r2, r7, #20
 800fb42:	2110      	movs	r1, #16
 800fb44:	4618      	mov	r0, r3
 800fb46:	f7ff fb65 	bl	800f214 <lorawan_aes_set_key>

        uint8_t block = 0;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800fb50:	e018      	b.n	800fb84 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800fb52:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800fb56:	68fa      	ldr	r2, [r7, #12]
 800fb58:	18d0      	adds	r0, r2, r3
 800fb5a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800fb5e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800fb62:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800fb66:	6812      	ldr	r2, [r2, #0]
 800fb68:	4413      	add	r3, r2
 800fb6a:	f107 0214 	add.w	r2, r7, #20
 800fb6e:	4619      	mov	r1, r3
 800fb70:	f7ff fc2e 	bl	800f3d0 <lorawan_aes_encrypt>
            block = block + 16;
 800fb74:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800fb78:	3310      	adds	r3, #16
 800fb7a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800fb7e:	897b      	ldrh	r3, [r7, #10]
 800fb80:	3b10      	subs	r3, #16
 800fb82:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800fb84:	897b      	ldrh	r3, [r7, #10]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d1e3      	bne.n	800fb52 <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800fb8a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b088      	sub	sp, #32
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	460b      	mov	r3, r1
 800fba2:	70fb      	strb	r3, [r7, #3]
 800fba4:	4613      	mov	r3, r2
 800fba6:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d101      	bne.n	800fbb2 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800fbae:	2302      	movs	r3, #2
 800fbb0:	e02e      	b.n	800fc10 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800fbb2:	2306      	movs	r3, #6
 800fbb4:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800fbb6:	78bb      	ldrb	r3, [r7, #2]
 800fbb8:	2b7f      	cmp	r3, #127	; 0x7f
 800fbba:	d104      	bne.n	800fbc6 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800fbbc:	78fb      	ldrb	r3, [r7, #3]
 800fbbe:	2b04      	cmp	r3, #4
 800fbc0:	d001      	beq.n	800fbc6 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fbc2:	2303      	movs	r3, #3
 800fbc4:	e024      	b.n	800fc10 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	60fb      	str	r3, [r7, #12]
 800fbca:	f107 0310 	add.w	r3, r7, #16
 800fbce:	2200      	movs	r2, #0
 800fbd0:	601a      	str	r2, [r3, #0]
 800fbd2:	605a      	str	r2, [r3, #4]
 800fbd4:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800fbd6:	f107 030c 	add.w	r3, r7, #12
 800fbda:	78fa      	ldrb	r2, [r7, #3]
 800fbdc:	2110      	movs	r1, #16
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f7ff ff73 	bl	800faca <SecureElementAesEncrypt>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800fbe8:	7ffb      	ldrb	r3, [r7, #31]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d001      	beq.n	800fbf2 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800fbee:	7ffb      	ldrb	r3, [r7, #31]
 800fbf0:	e00e      	b.n	800fc10 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800fbf2:	f107 020c 	add.w	r2, r7, #12
 800fbf6:	78bb      	ldrb	r3, [r7, #2]
 800fbf8:	4611      	mov	r1, r2
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7ff feba 	bl	800f974 <SecureElementSetKey>
 800fc00:	4603      	mov	r3, r0
 800fc02:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800fc04:	7ffb      	ldrb	r3, [r7, #31]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d001      	beq.n	800fc0e <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800fc0a:	7ffb      	ldrb	r3, [r7, #31]
 800fc0c:	e000      	b.n	800fc10 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800fc0e:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3720      	adds	r7, #32
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b086      	sub	sp, #24
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	60b9      	str	r1, [r7, #8]
 800fc20:	607b      	str	r3, [r7, #4]
 800fc22:	4603      	mov	r3, r0
 800fc24:	73fb      	strb	r3, [r7, #15]
 800fc26:	4613      	mov	r3, r2
 800fc28:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d005      	beq.n	800fc3c <SecureElementProcessJoinAccept+0x24>
 800fc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d002      	beq.n	800fc3c <SecureElementProcessJoinAccept+0x24>
 800fc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d101      	bne.n	800fc40 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800fc3c:	2302      	movs	r3, #2
 800fc3e:	e064      	b.n	800fd0a <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800fc40:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc44:	2b21      	cmp	r3, #33	; 0x21
 800fc46:	d901      	bls.n	800fc4c <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800fc48:	2305      	movs	r3, #5
 800fc4a:	e05e      	b.n	800fd0a <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800fc50:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	461a      	mov	r2, r3
 800fc58:	6879      	ldr	r1, [r7, #4]
 800fc5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc5c:	f00c fb1f 	bl	801c29e <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	1c58      	adds	r0, r3, #1
 800fc64:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc68:	b29b      	uxth	r3, r3
 800fc6a:	3b01      	subs	r3, #1
 800fc6c:	b299      	uxth	r1, r3
 800fc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc70:	3301      	adds	r3, #1
 800fc72:	7dfa      	ldrb	r2, [r7, #23]
 800fc74:	f7ff ff29 	bl	800faca <SecureElementAesEncrypt>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d001      	beq.n	800fc82 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800fc7e:	2307      	movs	r3, #7
 800fc80:	e043      	b.n	800fd0a <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800fc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc84:	330b      	adds	r3, #11
 800fc86:	781b      	ldrb	r3, [r3, #0]
 800fc88:	09db      	lsrs	r3, r3, #7
 800fc8a:	b2da      	uxtb	r2, r3
 800fc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc8e:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800fc90:	2300      	movs	r3, #0
 800fc92:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800fc94:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc98:	3b04      	subs	r3, #4
 800fc9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc9c:	4413      	add	r3, r2
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800fca2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fca6:	3b03      	subs	r3, #3
 800fca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcaa:	4413      	add	r3, r2
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	021b      	lsls	r3, r3, #8
 800fcb0:	693a      	ldr	r2, [r7, #16]
 800fcb2:	4313      	orrs	r3, r2
 800fcb4:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800fcb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fcba:	3b02      	subs	r3, #2
 800fcbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcbe:	4413      	add	r3, r2
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	041b      	lsls	r3, r3, #16
 800fcc4:	693a      	ldr	r2, [r7, #16]
 800fcc6:	4313      	orrs	r3, r2
 800fcc8:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800fcca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fcce:	3b01      	subs	r3, #1
 800fcd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcd2:	4413      	add	r3, r2
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	061b      	lsls	r3, r3, #24
 800fcd8:	693a      	ldr	r2, [r7, #16]
 800fcda:	4313      	orrs	r3, r2
 800fcdc:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800fcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d10e      	bne.n	800fd04 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800fce6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fcea:	b29b      	uxth	r3, r3
 800fcec:	3b04      	subs	r3, #4
 800fcee:	b299      	uxth	r1, r3
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	693a      	ldr	r2, [r7, #16]
 800fcf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fcf6:	f7ff feb9 	bl	800fa6c <SecureElementVerifyAesCmac>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d003      	beq.n	800fd08 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800fd00:	2301      	movs	r3, #1
 800fd02:	e002      	b.n	800fd0a <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800fd04:	2304      	movs	r3, #4
 800fd06:	e000      	b.n	800fd0a <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800fd08:	2300      	movs	r3, #0
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3718      	adds	r7, #24
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
	...

0800fd14 <SecureElementRandomNumber>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b082      	sub	sp, #8
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d101      	bne.n	800fd26 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800fd22:	2302      	movs	r3, #2
 800fd24:	e006      	b.n	800fd34 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800fd26:	4b05      	ldr	r3, [pc, #20]	; (800fd3c <SecureElementRandomNumber+0x28>)
 800fd28:	695b      	ldr	r3, [r3, #20]
 800fd2a:	4798      	blx	r3
 800fd2c:	4602      	mov	r2, r0
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800fd32:	2300      	movs	r3, #0
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3708      	adds	r7, #8
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}
 800fd3c:	08021e08 	.word	0x08021e08

0800fd40 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d101      	bne.n	800fd52 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800fd4e:	2302      	movs	r3, #2
 800fd50:	e007      	b.n	800fd62 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800fd52:	4b06      	ldr	r3, [pc, #24]	; (800fd6c <SecureElementSetDevEui+0x2c>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	2208      	movs	r2, #8
 800fd58:	6879      	ldr	r1, [r7, #4]
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f00c fa9f 	bl	801c29e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800fd60:	2300      	movs	r3, #0
}
 800fd62:	4618      	mov	r0, r3
 800fd64:	3708      	adds	r7, #8
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}
 800fd6a:	bf00      	nop
 800fd6c:	20000c88 	.word	0x20000c88

0800fd70 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800fd70:	b480      	push	{r7}
 800fd72:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800fd74:	4b02      	ldr	r3, [pc, #8]	; (800fd80 <SecureElementGetDevEui+0x10>)
 800fd76:	681b      	ldr	r3, [r3, #0]
}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bc80      	pop	{r7}
 800fd7e:	4770      	bx	lr
 800fd80:	20000c88 	.word	0x20000c88

0800fd84 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b082      	sub	sp, #8
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d101      	bne.n	800fd96 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800fd92:	2302      	movs	r3, #2
 800fd94:	e008      	b.n	800fda8 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800fd96:	4b06      	ldr	r3, [pc, #24]	; (800fdb0 <SecureElementSetJoinEui+0x2c>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	3308      	adds	r3, #8
 800fd9c:	2208      	movs	r2, #8
 800fd9e:	6879      	ldr	r1, [r7, #4]
 800fda0:	4618      	mov	r0, r3
 800fda2:	f00c fa7c 	bl	801c29e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800fda6:	2300      	movs	r3, #0
}
 800fda8:	4618      	mov	r0, r3
 800fdaa:	3708      	adds	r7, #8
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	20000c88 	.word	0x20000c88

0800fdb4 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800fdb8:	4b03      	ldr	r3, [pc, #12]	; (800fdc8 <SecureElementGetJoinEui+0x14>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	3308      	adds	r3, #8
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bc80      	pop	{r7}
 800fdc4:	4770      	bx	lr
 800fdc6:	bf00      	nop
 800fdc8:	20000c88 	.word	0x20000c88

0800fdcc <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800fdd6:	4a1a      	ldr	r2, [pc, #104]	; (800fe40 <LmHandlerInit+0x74>)
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800fddc:	4b19      	ldr	r3, [pc, #100]	; (800fe44 <LmHandlerInit+0x78>)
 800fdde:	4a1a      	ldr	r2, [pc, #104]	; (800fe48 <LmHandlerInit+0x7c>)
 800fde0:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800fde2:	4b18      	ldr	r3, [pc, #96]	; (800fe44 <LmHandlerInit+0x78>)
 800fde4:	4a19      	ldr	r2, [pc, #100]	; (800fe4c <LmHandlerInit+0x80>)
 800fde6:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800fde8:	4b16      	ldr	r3, [pc, #88]	; (800fe44 <LmHandlerInit+0x78>)
 800fdea:	4a19      	ldr	r2, [pc, #100]	; (800fe50 <LmHandlerInit+0x84>)
 800fdec:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800fdee:	4b15      	ldr	r3, [pc, #84]	; (800fe44 <LmHandlerInit+0x78>)
 800fdf0:	4a18      	ldr	r2, [pc, #96]	; (800fe54 <LmHandlerInit+0x88>)
 800fdf2:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800fdf4:	4b12      	ldr	r3, [pc, #72]	; (800fe40 <LmHandlerInit+0x74>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	4a17      	ldr	r2, [pc, #92]	; (800fe58 <LmHandlerInit+0x8c>)
 800fdfc:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800fdfe:	4b10      	ldr	r3, [pc, #64]	; (800fe40 <LmHandlerInit+0x74>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	685b      	ldr	r3, [r3, #4]
 800fe04:	4a14      	ldr	r2, [pc, #80]	; (800fe58 <LmHandlerInit+0x8c>)
 800fe06:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800fe08:	4b0d      	ldr	r3, [pc, #52]	; (800fe40 <LmHandlerInit+0x74>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	689b      	ldr	r3, [r3, #8]
 800fe0e:	4a12      	ldr	r2, [pc, #72]	; (800fe58 <LmHandlerInit+0x8c>)
 800fe10:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800fe12:	4b11      	ldr	r3, [pc, #68]	; (800fe58 <LmHandlerInit+0x8c>)
 800fe14:	4a11      	ldr	r2, [pc, #68]	; (800fe5c <LmHandlerInit+0x90>)
 800fe16:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800fe18:	4b09      	ldr	r3, [pc, #36]	; (800fe40 <LmHandlerInit+0x74>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	699b      	ldr	r3, [r3, #24]
 800fe1e:	4a0e      	ldr	r2, [pc, #56]	; (800fe58 <LmHandlerInit+0x8c>)
 800fe20:	6113      	str	r3, [r2, #16]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800fe22:	490f      	ldr	r1, [pc, #60]	; (800fe60 <LmHandlerInit+0x94>)
 800fe24:	2000      	movs	r0, #0
 800fe26:	f000 fe8f 	bl	8010b48 <LmHandlerPackageRegister>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d002      	beq.n	800fe36 <LmHandlerInit+0x6a>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe30:	f04f 33ff 	mov.w	r3, #4294967295
 800fe34:	e000      	b.n	800fe38 <LmHandlerInit+0x6c>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800fe36:	2300      	movs	r3, #0
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3708      	adds	r7, #8
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}
 800fe40:	20000cb4 	.word	0x20000cb4
 800fe44:	20000cb8 	.word	0x20000cb8
 800fe48:	080106dd 	.word	0x080106dd
 800fe4c:	08010745 	.word	0x08010745
 800fe50:	08010821 	.word	0x08010821
 800fe54:	08010999 	.word	0x08010999
 800fe58:	20000cc8 	.word	0x20000cc8
 800fe5c:	08010ee5 	.word	0x08010ee5
 800fe60:	200000c4 	.word	0x200000c4

0800fe64 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b094      	sub	sp, #80	; 0x50
 800fe68:	af04      	add	r7, sp, #16
 800fe6a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800fe6c:	2214      	movs	r2, #20
 800fe6e:	6879      	ldr	r1, [r7, #4]
 800fe70:	4890      	ldr	r0, [pc, #576]	; (80100b4 <LmHandlerConfigure+0x250>)
 800fe72:	f00f fd19 	bl	801f8a8 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
 800fe76:	4b90      	ldr	r3, [pc, #576]	; (80100b8 <LmHandlerConfigure+0x254>)
 800fe78:	2200      	movs	r2, #0
 800fe7a:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800fe7c:	f7fe fb08 	bl	800e490 <LoraInfo_GetPtr>
 800fe80:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800fe82:	4b8c      	ldr	r3, [pc, #560]	; (80100b4 <LmHandlerConfigure+0x250>)
 800fe84:	781b      	ldrb	r3, [r3, #0]
 800fe86:	461a      	mov	r2, r3
 800fe88:	2301      	movs	r3, #1
 800fe8a:	4093      	lsls	r3, r2
 800fe8c:	461a      	mov	r2, r3
 800fe8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	4013      	ands	r3, r2
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d106      	bne.n	800fea6 <LmHandlerConfigure+0x42>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800fe98:	4b88      	ldr	r3, [pc, #544]	; (80100bc <LmHandlerConfigure+0x258>)
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	2100      	movs	r1, #0
 800fe9e:	2000      	movs	r0, #0
 800fea0:	f010 fd52 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800fea4:	e7fe      	b.n	800fea4 <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800fea6:	4b83      	ldr	r3, [pc, #524]	; (80100b4 <LmHandlerConfigure+0x250>)
 800fea8:	781b      	ldrb	r3, [r3, #0]
 800feaa:	461a      	mov	r2, r3
 800feac:	4984      	ldr	r1, [pc, #528]	; (80100c0 <LmHandlerConfigure+0x25c>)
 800feae:	4885      	ldr	r0, [pc, #532]	; (80100c4 <LmHandlerConfigure+0x260>)
 800feb0:	f004 fcfe 	bl	80148b0 <LoRaMacInitialization>
 800feb4:	4603      	mov	r3, r0
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d002      	beq.n	800fec0 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800feba:	f04f 33ff 	mov.w	r3, #4294967295
 800febe:	e0f5      	b.n	80100ac <LmHandlerConfigure+0x248>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800fec0:	2326      	movs	r3, #38	; 0x26
 800fec2:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800fec4:	f107 0318 	add.w	r3, r7, #24
 800fec8:	4618      	mov	r0, r3
 800feca:	f005 fa15 	bl	80152f8 <LoRaMacMibSetRequestConfirm>
 800fece:	4603      	mov	r3, r0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d103      	bne.n	800fedc <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800fed4:	4b7c      	ldr	r3, [pc, #496]	; (80100c8 <LmHandlerConfigure+0x264>)
 800fed6:	2201      	movs	r2, #1
 800fed8:	701a      	strb	r2, [r3, #0]
 800feda:	e02a      	b.n	800ff32 <LmHandlerConfigure+0xce>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800fedc:	2327      	movs	r3, #39	; 0x27
 800fede:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800fee0:	4b7a      	ldr	r3, [pc, #488]	; (80100cc <LmHandlerConfigure+0x268>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	691b      	ldr	r3, [r3, #16]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d00c      	beq.n	800ff04 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800feea:	f107 0318 	add.w	r3, r7, #24
 800feee:	4618      	mov	r0, r3
 800fef0:	f005 f87c 	bl	8014fec <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800fef4:	4b75      	ldr	r3, [pc, #468]	; (80100cc <LmHandlerConfigure+0x268>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	691b      	ldr	r3, [r3, #16]
 800fefa:	69fa      	ldr	r2, [r7, #28]
 800fefc:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 800ff00:	4610      	mov	r0, r2
 800ff02:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800ff04:	2326      	movs	r3, #38	; 0x26
 800ff06:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800ff08:	f107 0318 	add.w	r3, r7, #24
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f005 f9f3 	bl	80152f8 <LoRaMacMibSetRequestConfirm>
 800ff12:	4603      	mov	r3, r0
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d10c      	bne.n	800ff32 <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800ff18:	2301      	movs	r3, #1
 800ff1a:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800ff1c:	f107 0318 	add.w	r3, r7, #24
 800ff20:	4618      	mov	r0, r3
 800ff22:	f005 f863 	bl	8014fec <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800ff26:	7f3b      	ldrb	r3, [r7, #28]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d002      	beq.n	800ff32 <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800ff2c:	4b66      	ldr	r3, [pc, #408]	; (80100c8 <LmHandlerConfigure+0x264>)
 800ff2e:	2201      	movs	r2, #1
 800ff30:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800ff32:	4b65      	ldr	r3, [pc, #404]	; (80100c8 <LmHandlerConfigure+0x264>)
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d02a      	beq.n	800ff90 <LmHandlerConfigure+0x12c>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800ff3a:	4b64      	ldr	r3, [pc, #400]	; (80100cc <LmHandlerConfigure+0x268>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	69db      	ldr	r3, [r3, #28]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d004      	beq.n	800ff4e <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800ff44:	4b61      	ldr	r3, [pc, #388]	; (80100cc <LmHandlerConfigure+0x268>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	69db      	ldr	r3, [r3, #28]
 800ff4a:	2000      	movs	r0, #0
 800ff4c:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800ff4e:	2306      	movs	r3, #6
 800ff50:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800ff52:	f107 0318 	add.w	r3, r7, #24
 800ff56:	4618      	mov	r0, r3
 800ff58:	f005 f848 	bl	8014fec <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	4a5c      	ldr	r2, [pc, #368]	; (80100d0 <LmHandlerConfigure+0x26c>)
 800ff60:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800ff62:	2326      	movs	r3, #38	; 0x26
 800ff64:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800ff66:	f107 0318 	add.w	r3, r7, #24
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f005 f83e 	bl	8014fec <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ff76:	4b4f      	ldr	r3, [pc, #316]	; (80100b4 <LmHandlerConfigure+0x250>)
 800ff78:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800ff7a:	69fb      	ldr	r3, [r7, #28]
 800ff7c:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800ff80:	4b4c      	ldr	r3, [pc, #304]	; (80100b4 <LmHandlerConfigure+0x250>)
 800ff82:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800ff84:	69fb      	ldr	r3, [r7, #28]
 800ff86:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800ff8a:	4b4a      	ldr	r3, [pc, #296]	; (80100b4 <LmHandlerConfigure+0x250>)
 800ff8c:	709a      	strb	r2, [r3, #2]
 800ff8e:	e019      	b.n	800ffc4 <LmHandlerConfigure+0x160>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800ff90:	2305      	movs	r3, #5
 800ff92:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800ff94:	2300      	movs	r3, #0
 800ff96:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ff98:	f107 0318 	add.w	r3, r7, #24
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f005 f9ab 	bl	80152f8 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800ffa2:	4b4a      	ldr	r3, [pc, #296]	; (80100cc <LmHandlerConfigure+0x268>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	68db      	ldr	r3, [r3, #12]
 800ffa8:	4798      	blx	r3
 800ffaa:	4603      	mov	r3, r0
 800ffac:	4a48      	ldr	r2, [pc, #288]	; (80100d0 <LmHandlerConfigure+0x26c>)
 800ffae:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800ffb0:	2306      	movs	r3, #6
 800ffb2:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800ffb4:	4b46      	ldr	r3, [pc, #280]	; (80100d0 <LmHandlerConfigure+0x26c>)
 800ffb6:	695b      	ldr	r3, [r3, #20]
 800ffb8:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ffba:	f107 0318 	add.w	r3, r7, #24
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f005 f99a 	bl	80152f8 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800ffc4:	2302      	movs	r3, #2
 800ffc6:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ffc8:	f107 0318 	add.w	r3, r7, #24
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f005 f80d 	bl	8014fec <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800ffd2:	69fb      	ldr	r3, [r7, #28]
 800ffd4:	2208      	movs	r2, #8
 800ffd6:	4619      	mov	r1, r3
 800ffd8:	483d      	ldr	r0, [pc, #244]	; (80100d0 <LmHandlerConfigure+0x26c>)
 800ffda:	f00c f960 	bl	801c29e <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800ffde:	2303      	movs	r3, #3
 800ffe0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ffe2:	f107 0318 	add.w	r3, r7, #24
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f005 f800 	bl	8014fec <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800ffec:	69fb      	ldr	r3, [r7, #28]
 800ffee:	2208      	movs	r2, #8
 800fff0:	4619      	mov	r1, r3
 800fff2:	4838      	ldr	r0, [pc, #224]	; (80100d4 <LmHandlerConfigure+0x270>)
 800fff4:	f00c f953 	bl	801c29e <memcpy1>

    SecureElementPrintKeys();
 800fff8:	f7ff fc1c 	bl	800f834 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800fffc:	4b36      	ldr	r3, [pc, #216]	; (80100d8 <LmHandlerConfigure+0x274>)
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	461a      	mov	r2, r3
 8010002:	4b36      	ldr	r3, [pc, #216]	; (80100dc <LmHandlerConfigure+0x278>)
 8010004:	781b      	ldrb	r3, [r3, #0]
 8010006:	4619      	mov	r1, r3
 8010008:	4b35      	ldr	r3, [pc, #212]	; (80100e0 <LmHandlerConfigure+0x27c>)
 801000a:	781b      	ldrb	r3, [r3, #0]
 801000c:	4618      	mov	r0, r3
 801000e:	4b35      	ldr	r3, [pc, #212]	; (80100e4 <LmHandlerConfigure+0x280>)
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	9303      	str	r3, [sp, #12]
 8010014:	9002      	str	r0, [sp, #8]
 8010016:	9101      	str	r1, [sp, #4]
 8010018:	9200      	str	r2, [sp, #0]
 801001a:	4b33      	ldr	r3, [pc, #204]	; (80100e8 <LmHandlerConfigure+0x284>)
 801001c:	2200      	movs	r2, #0
 801001e:	2100      	movs	r1, #0
 8010020:	2002      	movs	r0, #2
 8010022:	f010 fc91 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 8010026:	230f      	movs	r3, #15
 8010028:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 801002a:	2301      	movs	r3, #1
 801002c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801002e:	f107 0318 	add.w	r3, r7, #24
 8010032:	4618      	mov	r0, r3
 8010034:	f005 f960 	bl	80152f8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 8010038:	2310      	movs	r3, #16
 801003a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 801003c:	2300      	movs	r3, #0
 801003e:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8010040:	f107 0318 	add.w	r3, r7, #24
 8010044:	4618      	mov	r0, r3
 8010046:	f005 f957 	bl	80152f8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 801004a:	2304      	movs	r3, #4
 801004c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 801004e:	4b19      	ldr	r3, [pc, #100]	; (80100b4 <LmHandlerConfigure+0x250>)
 8010050:	789b      	ldrb	r3, [r3, #2]
 8010052:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8010054:	f107 0318 	add.w	r3, r7, #24
 8010058:	4618      	mov	r0, r3
 801005a:	f005 f94d 	bl	80152f8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 801005e:	2337      	movs	r3, #55	; 0x37
 8010060:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 8010062:	4b14      	ldr	r3, [pc, #80]	; (80100b4 <LmHandlerConfigure+0x250>)
 8010064:	691b      	ldr	r3, [r3, #16]
 8010066:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8010068:	f107 0318 	add.w	r3, r7, #24
 801006c:	4618      	mov	r0, r3
 801006e:	f005 f943 	bl	80152f8 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010072:	230f      	movs	r3, #15
 8010074:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8010076:	4b0f      	ldr	r3, [pc, #60]	; (80100b4 <LmHandlerConfigure+0x250>)
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	f107 0210 	add.w	r2, r7, #16
 801007e:	4611      	mov	r1, r2
 8010080:	4618      	mov	r0, r3
 8010082:	f009 fd61 	bl	8019b48 <RegionGetPhyParam>
 8010086:	4603      	mov	r3, r0
 8010088:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2b00      	cmp	r3, #0
 801008e:	bf14      	ite	ne
 8010090:	2301      	movne	r3, #1
 8010092:	2300      	moveq	r3, #0
 8010094:	b2da      	uxtb	r2, r3
 8010096:	4b07      	ldr	r3, [pc, #28]	; (80100b4 <LmHandlerConfigure+0x250>)
 8010098:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 801009a:	2014      	movs	r0, #20
 801009c:	f000 fb06 	bl	80106ac <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 80100a0:	4b04      	ldr	r3, [pc, #16]	; (80100b4 <LmHandlerConfigure+0x250>)
 80100a2:	799b      	ldrb	r3, [r3, #6]
 80100a4:	4618      	mov	r0, r3
 80100a6:	f005 feb7 	bl	8015e18 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 80100aa:	2300      	movs	r3, #0
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	3740      	adds	r7, #64	; 0x40
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	20000ca0 	.word	0x20000ca0
 80100b8:	20000cf8 	.word	0x20000cf8
 80100bc:	08021720 	.word	0x08021720
 80100c0:	20000cc8 	.word	0x20000cc8
 80100c4:	20000cb8 	.word	0x20000cb8
 80100c8:	20000df2 	.word	0x20000df2
 80100cc:	20000cb4 	.word	0x20000cb4
 80100d0:	200000ac 	.word	0x200000ac
 80100d4:	200000b4 	.word	0x200000b4
 80100d8:	200000c3 	.word	0x200000c3
 80100dc:	200000c2 	.word	0x200000c2
 80100e0:	200000c1 	.word	0x200000c1
 80100e4:	200000c0 	.word	0x200000c0
 80100e8:	0802176c 	.word	0x0802176c

080100ec <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 80100f0:	f002 fbb0 	bl	8012854 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 80100f4:	f000 fe2c 	bl	8010d50 <LmHandlerPackagesProcess>
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 80100f8:	bf00      	nop
 80100fa:	bd80      	pop	{r7, pc}

080100fc <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 80100fc:	b480      	push	{r7}
 80100fe:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 8010100:	4b02      	ldr	r3, [pc, #8]	; (801010c <LmHandlerGetDutyCycleWaitTime+0x10>)
 8010102:	681b      	ldr	r3, [r3, #0]
}
 8010104:	4618      	mov	r0, r3
 8010106:	46bd      	mov	sp, r7
 8010108:	bc80      	pop	{r7}
 801010a:	4770      	bx	lr
 801010c:	20000cfc 	.word	0x20000cfc

08010110 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b090      	sub	sp, #64	; 0x40
 8010114:	af00      	add	r7, sp, #0
 8010116:	4603      	mov	r3, r0
 8010118:	460a      	mov	r2, r1
 801011a:	71fb      	strb	r3, [r7, #7]
 801011c:	4613      	mov	r3, r2
 801011e:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 8010120:	2301      	movs	r3, #1
 8010122:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8010126:	4b35      	ldr	r3, [pc, #212]	; (80101fc <LmHandlerJoin+0xec>)
 8010128:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801012c:	b2db      	uxtb	r3, r3
 801012e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 8010132:	79fb      	ldrb	r3, [r7, #7]
 8010134:	2b02      	cmp	r3, #2
 8010136:	d110      	bne.n	801015a <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8010138:	2302      	movs	r3, #2
 801013a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 801013e:	4b30      	ldr	r3, [pc, #192]	; (8010200 <LmHandlerJoin+0xf0>)
 8010140:	2202      	movs	r2, #2
 8010142:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8010144:	4a2e      	ldr	r2, [pc, #184]	; (8010200 <LmHandlerJoin+0xf0>)
 8010146:	79bb      	ldrb	r3, [r7, #6]
 8010148:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 801014a:	f004 fe65 	bl	8014e18 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 801014e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010152:	4618      	mov	r0, r3
 8010154:	f005 fc2a 	bl	80159ac <LoRaMacMlmeRequest>
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 8010158:	e04b      	b.n	80101f2 <LmHandlerJoin+0xe2>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 801015a:	2301      	movs	r3, #1
 801015c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8010160:	4b27      	ldr	r3, [pc, #156]	; (8010200 <LmHandlerJoin+0xf0>)
 8010162:	2201      	movs	r2, #1
 8010164:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8010166:	4b25      	ldr	r3, [pc, #148]	; (80101fc <LmHandlerJoin+0xec>)
 8010168:	f993 2004 	ldrsb.w	r2, [r3, #4]
 801016c:	4b24      	ldr	r3, [pc, #144]	; (8010200 <LmHandlerJoin+0xf0>)
 801016e:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8010170:	4b23      	ldr	r3, [pc, #140]	; (8010200 <LmHandlerJoin+0xf0>)
 8010172:	2200      	movs	r2, #0
 8010174:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 8010176:	4a22      	ldr	r2, [pc, #136]	; (8010200 <LmHandlerJoin+0xf0>)
 8010178:	79bb      	ldrb	r3, [r7, #6]
 801017a:	71d3      	strb	r3, [r2, #7]
        if (CtxRestoreDone == false)
 801017c:	4b21      	ldr	r3, [pc, #132]	; (8010204 <LmHandlerJoin+0xf4>)
 801017e:	781b      	ldrb	r3, [r3, #0]
 8010180:	f083 0301 	eor.w	r3, r3, #1
 8010184:	b2db      	uxtb	r3, r3
 8010186:	2b00      	cmp	r3, #0
 8010188:	d01e      	beq.n	80101c8 <LmHandlerJoin+0xb8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 801018a:	231e      	movs	r3, #30
 801018c:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 801018e:	4b1b      	ldr	r3, [pc, #108]	; (80101fc <LmHandlerJoin+0xec>)
 8010190:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010194:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010196:	f107 0308 	add.w	r3, r7, #8
 801019a:	4618      	mov	r0, r3
 801019c:	f005 f8ac 	bl	80152f8 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 80101a0:	231f      	movs	r3, #31
 80101a2:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 80101a4:	4b15      	ldr	r3, [pc, #84]	; (80101fc <LmHandlerJoin+0xec>)
 80101a6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80101aa:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80101ac:	f107 0308 	add.w	r3, r7, #8
 80101b0:	4618      	mov	r0, r3
 80101b2:	f005 f8a1 	bl	80152f8 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80101b6:	2328      	movs	r3, #40	; 0x28
 80101b8:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80101ba:	4b13      	ldr	r3, [pc, #76]	; (8010208 <LmHandlerJoin+0xf8>)
 80101bc:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 80101be:	f107 0308 	add.w	r3, r7, #8
 80101c2:	4618      	mov	r0, r3
 80101c4:	f005 f898 	bl	80152f8 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 80101c8:	f004 fe26 	bl	8014e18 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 80101cc:	2301      	movs	r3, #1
 80101ce:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80101d0:	2301      	movs	r3, #1
 80101d2:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80101d4:	f107 0308 	add.w	r3, r7, #8
 80101d8:	4618      	mov	r0, r3
 80101da:	f005 f88d 	bl	80152f8 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80101de:	4b0b      	ldr	r3, [pc, #44]	; (801020c <LmHandlerJoin+0xfc>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e4:	4806      	ldr	r0, [pc, #24]	; (8010200 <LmHandlerJoin+0xf0>)
 80101e6:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80101e8:	4b04      	ldr	r3, [pc, #16]	; (80101fc <LmHandlerJoin+0xec>)
 80101ea:	785b      	ldrb	r3, [r3, #1]
 80101ec:	4618      	mov	r0, r3
 80101ee:	f000 f97b 	bl	80104e8 <LmHandlerRequestClass>
}
 80101f2:	bf00      	nop
 80101f4:	3740      	adds	r7, #64	; 0x40
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop
 80101fc:	20000ca0 	.word	0x20000ca0
 8010200:	200000d0 	.word	0x200000d0
 8010204:	20000df2 	.word	0x20000df2
 8010208:	01000300 	.word	0x01000300
 801020c:	20000cb4 	.word	0x20000cb4

08010210 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b08a      	sub	sp, #40	; 0x28
 8010214:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8010216:	2301      	movs	r3, #1
 8010218:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 801021a:	463b      	mov	r3, r7
 801021c:	4618      	mov	r0, r3
 801021e:	f004 fee5 	bl	8014fec <LoRaMacMibGetRequestConfirm>
 8010222:	4603      	mov	r3, r0
 8010224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 8010228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801022c:	2b00      	cmp	r3, #0
 801022e:	d106      	bne.n	801023e <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010230:	793b      	ldrb	r3, [r7, #4]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d101      	bne.n	801023a <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 8010236:	2300      	movs	r3, #0
 8010238:	e002      	b.n	8010240 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 801023a:	2301      	movs	r3, #1
 801023c:	e000      	b.n	8010240 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 801023e:	2300      	movs	r3, #0
    }
}
 8010240:	4618      	mov	r0, r3
 8010242:	3728      	adds	r7, #40	; 0x28
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b08a      	sub	sp, #40	; 0x28
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	460b      	mov	r3, r1
 8010252:	70fb      	strb	r3, [r7, #3]
 8010254:	4613      	mov	r3, r2
 8010256:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8010258:	23ff      	movs	r3, #255	; 0xff
 801025a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 801025e:	f002 f887 	bl	8012370 <LoRaMacIsBusy>
 8010262:	4603      	mov	r3, r0
 8010264:	2b00      	cmp	r3, #0
 8010266:	d002      	beq.n	801026e <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010268:	f06f 0301 	mvn.w	r3, #1
 801026c:	e0b6      	b.n	80103dc <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 801026e:	f7ff ffcf 	bl	8010210 <LmHandlerJoinStatus>
 8010272:	4603      	mov	r3, r0
 8010274:	2b01      	cmp	r3, #1
 8010276:	d00a      	beq.n	801028e <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8010278:	4b5a      	ldr	r3, [pc, #360]	; (80103e4 <LmHandlerSend+0x19c>)
 801027a:	799b      	ldrb	r3, [r3, #6]
 801027c:	4a59      	ldr	r2, [pc, #356]	; (80103e4 <LmHandlerSend+0x19c>)
 801027e:	79d2      	ldrb	r2, [r2, #7]
 8010280:	4611      	mov	r1, r2
 8010282:	4618      	mov	r0, r3
 8010284:	f7ff ff44 	bl	8010110 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010288:	f06f 0302 	mvn.w	r3, #2
 801028c:	e0a6      	b.n	80103dc <LmHandlerSend+0x194>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 801028e:	4b56      	ldr	r3, [pc, #344]	; (80103e8 <LmHandlerSend+0x1a0>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	68db      	ldr	r3, [r3, #12]
 8010294:	4798      	blx	r3
 8010296:	4603      	mov	r3, r0
 8010298:	2b00      	cmp	r3, #0
 801029a:	d00d      	beq.n	80102b8 <LmHandlerSend+0x70>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	781a      	ldrb	r2, [r3, #0]
 80102a0:	4b51      	ldr	r3, [pc, #324]	; (80103e8 <LmHandlerSend+0x1a0>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	781b      	ldrb	r3, [r3, #0]
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d006      	beq.n	80102b8 <LmHandlerSend+0x70>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d002      	beq.n	80102b8 <LmHandlerSend+0x70>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 80102b2:	f06f 0303 	mvn.w	r3, #3
 80102b6:	e091      	b.n	80103dc <LmHandlerSend+0x194>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 80102b8:	4a4c      	ldr	r2, [pc, #304]	; (80103ec <LmHandlerSend+0x1a4>)
 80102ba:	78fb      	ldrb	r3, [r7, #3]
 80102bc:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 80102be:	78fb      	ldrb	r3, [r7, #3]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	bf14      	ite	ne
 80102c4:	2301      	movne	r3, #1
 80102c6:	2300      	moveq	r3, #0
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80102cc:	4b48      	ldr	r3, [pc, #288]	; (80103f0 <LmHandlerSend+0x1a8>)
 80102ce:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80102d2:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	785b      	ldrb	r3, [r3, #1]
 80102d8:	f107 020c 	add.w	r2, r7, #12
 80102dc:	4611      	mov	r1, r2
 80102de:	4618      	mov	r0, r3
 80102e0:	f004 fdfc 	bl	8014edc <LoRaMacQueryTxPossible>
 80102e4:	4603      	mov	r3, r0
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d009      	beq.n	80102fe <LmHandlerSend+0xb6>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 80102ea:	2300      	movs	r3, #0
 80102ec:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80102ee:	2300      	movs	r3, #0
 80102f0:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80102f2:	2300      	movs	r3, #0
 80102f4:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 80102f6:	23f9      	movs	r3, #249	; 0xf9
 80102f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80102fc:	e009      	b.n	8010312 <LmHandlerSend+0xca>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	785b      	ldrb	r3, [r3, #1]
 8010308:	b29b      	uxth	r3, r3
 801030a:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 8010312:	4b36      	ldr	r3, [pc, #216]	; (80103ec <LmHandlerSend+0x1a4>)
 8010314:	687a      	ldr	r2, [r7, #4]
 8010316:	3310      	adds	r3, #16
 8010318:	e892 0003 	ldmia.w	r2, {r0, r1}
 801031c:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8010320:	4b33      	ldr	r3, [pc, #204]	; (80103f0 <LmHandlerSend+0x1a8>)
 8010322:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8010326:	4b31      	ldr	r3, [pc, #196]	; (80103ec <LmHandlerSend+0x1a4>)
 8010328:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 801032a:	78ba      	ldrb	r2, [r7, #2]
 801032c:	f107 0310 	add.w	r3, r7, #16
 8010330:	4611      	mov	r1, r2
 8010332:	4618      	mov	r0, r3
 8010334:	f005 fc7a 	bl	8015c2c <LoRaMacMcpsRequest>
 8010338:	4603      	mov	r3, r0
 801033a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 801033e:	6a3b      	ldr	r3, [r7, #32]
 8010340:	4a2c      	ldr	r2, [pc, #176]	; (80103f4 <LmHandlerSend+0x1ac>)
 8010342:	6013      	str	r3, [r2, #0]

    switch (status)
 8010344:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010348:	2b11      	cmp	r3, #17
 801034a:	d840      	bhi.n	80103ce <LmHandlerSend+0x186>
 801034c:	a201      	add	r2, pc, #4	; (adr r2, 8010354 <LmHandlerSend+0x10c>)
 801034e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010352:	bf00      	nop
 8010354:	0801039d 	.word	0x0801039d
 8010358:	080103af 	.word	0x080103af
 801035c:	080103cf 	.word	0x080103cf
 8010360:	080103cf 	.word	0x080103cf
 8010364:	080103cf 	.word	0x080103cf
 8010368:	080103cf 	.word	0x080103cf
 801036c:	080103cf 	.word	0x080103cf
 8010370:	080103b7 	.word	0x080103b7
 8010374:	080103cf 	.word	0x080103cf
 8010378:	080103cf 	.word	0x080103cf
 801037c:	080103cf 	.word	0x080103cf
 8010380:	080103c7 	.word	0x080103c7
 8010384:	080103cf 	.word	0x080103cf
 8010388:	080103cf 	.word	0x080103cf
 801038c:	080103af 	.word	0x080103af
 8010390:	080103af 	.word	0x080103af
 8010394:	080103af 	.word	0x080103af
 8010398:	080103bf 	.word	0x080103bf
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 801039c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80103a0:	f113 0f07 	cmn.w	r3, #7
 80103a4:	d017      	beq.n	80103d6 <LmHandlerSend+0x18e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 80103a6:	2300      	movs	r3, #0
 80103a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 80103ac:	e013      	b.n	80103d6 <LmHandlerSend+0x18e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 80103ae:	23fe      	movs	r3, #254	; 0xfe
 80103b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80103b4:	e010      	b.n	80103d8 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80103b6:	23fd      	movs	r3, #253	; 0xfd
 80103b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80103bc:	e00c      	b.n	80103d8 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80103be:	23fb      	movs	r3, #251	; 0xfb
 80103c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80103c4:	e008      	b.n	80103d8 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 80103c6:	23fa      	movs	r3, #250	; 0xfa
 80103c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80103cc:	e004      	b.n	80103d8 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80103ce:	23ff      	movs	r3, #255	; 0xff
 80103d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80103d4:	e000      	b.n	80103d8 <LmHandlerSend+0x190>
            break;
 80103d6:	bf00      	nop
    }

    return lmhStatus;
 80103d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3728      	adds	r7, #40	; 0x28
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}
 80103e4:	200000d0 	.word	0x200000d0
 80103e8:	20000c8c 	.word	0x20000c8c
 80103ec:	200000d8 	.word	0x200000d8
 80103f0:	20000ca0 	.word	0x20000ca0
 80103f4:	20000cfc 	.word	0x20000cfc

080103f8 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b086      	sub	sp, #24
 80103fc:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 80103fe:	230a      	movs	r3, #10
 8010400:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 8010402:	463b      	mov	r3, r7
 8010404:	4618      	mov	r0, r3
 8010406:	f005 fad1 	bl	80159ac <LoRaMacMlmeRequest>
 801040a:	4603      	mov	r3, r0
 801040c:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	4a06      	ldr	r2, [pc, #24]	; (801042c <LmHandlerDeviceTimeReq+0x34>)
 8010412:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 8010414:	7dfb      	ldrb	r3, [r7, #23]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d101      	bne.n	801041e <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 801041a:	2300      	movs	r3, #0
 801041c:	e001      	b.n	8010422 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 801041e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8010422:	4618      	mov	r0, r3
 8010424:	3718      	adds	r7, #24
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
 801042a:	bf00      	nop
 801042c:	20000cfc 	.word	0x20000cfc

08010430 <LmHandlerBeaconReq>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static LmHandlerErrorStatus_t LmHandlerBeaconReq( void )
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b086      	sub	sp, #24
 8010434:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_BEACON_ACQUISITION;
 8010436:	230c      	movs	r3, #12
 8010438:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 801043a:	463b      	mov	r3, r7
 801043c:	4618      	mov	r0, r3
 801043e:	f005 fab5 	bl	80159ac <LoRaMacMlmeRequest>
 8010442:	4603      	mov	r3, r0
 8010444:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	4a06      	ldr	r2, [pc, #24]	; (8010464 <LmHandlerBeaconReq+0x34>)
 801044a:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 801044c:	7dfb      	ldrb	r3, [r7, #23]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d101      	bne.n	8010456 <LmHandlerBeaconReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010452:	2300      	movs	r3, #0
 8010454:	e001      	b.n	801045a <LmHandlerBeaconReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8010456:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 801045a:	4618      	mov	r0, r3
 801045c:	3718      	adds	r7, #24
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}
 8010462:	bf00      	nop
 8010464:	20000cfc 	.word	0x20000cfc

08010468 <LmHandlerPingSlotReq>:
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b08a      	sub	sp, #40	; 0x28
 801046c:	af00      	add	r7, sp, #0
 801046e:	4603      	mov	r3, r0
 8010470:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_PING_SLOT_INFO;
 8010472:	230d      	movs	r3, #13
 8010474:	743b      	strb	r3, [r7, #16]
    mlmeReq.Req.PingSlotInfo.PingSlot.Fields.Periodicity = periodicity;
 8010476:	79fb      	ldrb	r3, [r7, #7]
 8010478:	f003 0307 	and.w	r3, r3, #7
 801047c:	b2da      	uxtb	r2, r3
 801047e:	7d3b      	ldrb	r3, [r7, #20]
 8010480:	f362 0302 	bfi	r3, r2, #0, #3
 8010484:	753b      	strb	r3, [r7, #20]
    mlmeReq.Req.PingSlotInfo.PingSlot.Fields.RFU = 0;
 8010486:	7d3b      	ldrb	r3, [r7, #20]
 8010488:	f36f 03c7 	bfc	r3, #3, #5
 801048c:	753b      	strb	r3, [r7, #20]

    status = LoRaMacMlmeRequest( &mlmeReq );
 801048e:	f107 0310 	add.w	r3, r7, #16
 8010492:	4618      	mov	r0, r3
 8010494:	f005 fa8a 	bl	80159ac <LoRaMacMlmeRequest>
 8010498:	4603      	mov	r3, r0
 801049a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 801049e:	6a3b      	ldr	r3, [r7, #32]
 80104a0:	4a0f      	ldr	r2, [pc, #60]	; (80104e0 <LmHandlerPingSlotReq+0x78>)
 80104a2:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 80104a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d112      	bne.n	80104d2 <LmHandlerPingSlotReq+0x6a>
    {
        LmHandlerParams.PingSlotPeriodicity = periodicity;
 80104ac:	4a0d      	ldr	r2, [pc, #52]	; (80104e4 <LmHandlerPingSlotReq+0x7c>)
 80104ae:	79fb      	ldrb	r3, [r7, #7]
 80104b0:	7313      	strb	r3, [r2, #12]
        // Send an empty message
        LmHandlerAppData_t appData =
 80104b2:	2300      	movs	r3, #0
 80104b4:	723b      	strb	r3, [r7, #8]
 80104b6:	2300      	movs	r3, #0
 80104b8:	727b      	strb	r3, [r7, #9]
 80104ba:	2300      	movs	r3, #0
 80104bc:	60fb      	str	r3, [r7, #12]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
 80104be:	4b09      	ldr	r3, [pc, #36]	; (80104e4 <LmHandlerPingSlotReq+0x7c>)
 80104c0:	78d9      	ldrb	r1, [r3, #3]
 80104c2:	f107 0308 	add.w	r3, r7, #8
 80104c6:	2200      	movs	r2, #0
 80104c8:	4618      	mov	r0, r3
 80104ca:	f7ff febd 	bl	8010248 <LmHandlerSend>
 80104ce:	4603      	mov	r3, r0
 80104d0:	e001      	b.n	80104d6 <LmHandlerPingSlotReq+0x6e>
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 80104d2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	3728      	adds	r7, #40	; 0x28
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}
 80104de:	bf00      	nop
 80104e0:	20000cfc 	.word	0x20000cfc
 80104e4:	20000ca0 	.word	0x20000ca0

080104e8 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b08c      	sub	sp, #48	; 0x30
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	4603      	mov	r3, r0
 80104f0:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80104f2:	2300      	movs	r3, #0
 80104f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 80104f8:	f001 ff3a 	bl	8012370 <LoRaMacIsBusy>
 80104fc:	4603      	mov	r3, r0
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d002      	beq.n	8010508 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010502:	f06f 0301 	mvn.w	r3, #1
 8010506:	e080      	b.n	801060a <LmHandlerRequestClass+0x122>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8010508:	f7ff fe82 	bl	8010210 <LmHandlerJoinStatus>
 801050c:	4603      	mov	r3, r0
 801050e:	2b01      	cmp	r3, #1
 8010510:	d002      	beq.n	8010518 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010512:	f06f 0302 	mvn.w	r3, #2
 8010516:	e078      	b.n	801060a <LmHandlerRequestClass+0x122>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8010518:	2300      	movs	r3, #0
 801051a:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 801051c:	f107 0308 	add.w	r3, r7, #8
 8010520:	4618      	mov	r0, r3
 8010522:	f004 fd63 	bl	8014fec <LoRaMacMibGetRequestConfirm>
 8010526:	4603      	mov	r3, r0
 8010528:	2b00      	cmp	r3, #0
 801052a:	d002      	beq.n	8010532 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 801052c:	f04f 33ff 	mov.w	r3, #4294967295
 8010530:	e06b      	b.n	801060a <LmHandlerRequestClass+0x122>
    }
    currentClass = mibReq.Param.Class;
 8010532:	7b3b      	ldrb	r3, [r7, #12]
 8010534:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 8010538:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801053c:	79fb      	ldrb	r3, [r7, #7]
 801053e:	429a      	cmp	r2, r3
 8010540:	d05a      	beq.n	80105f8 <LmHandlerRequestClass+0x110>
    {
        switch( newClass )
 8010542:	79fb      	ldrb	r3, [r7, #7]
 8010544:	2b02      	cmp	r3, #2
 8010546:	d035      	beq.n	80105b4 <LmHandlerRequestClass+0xcc>
 8010548:	2b02      	cmp	r3, #2
 801054a:	dc57      	bgt.n	80105fc <LmHandlerRequestClass+0x114>
 801054c:	2b00      	cmp	r3, #0
 801054e:	d002      	beq.n	8010556 <LmHandlerRequestClass+0x6e>
 8010550:	2b01      	cmp	r3, #1
 8010552:	d01e      	beq.n	8010592 <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 8010554:	e052      	b.n	80105fc <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 8010556:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801055a:	2b00      	cmp	r3, #0
 801055c:	d050      	beq.n	8010600 <LmHandlerRequestClass+0x118>
                    mibReq.Param.Class = newClass;
 801055e:	79fb      	ldrb	r3, [r7, #7]
 8010560:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8010562:	f107 0308 	add.w	r3, r7, #8
 8010566:	4618      	mov	r0, r3
 8010568:	f004 fec6 	bl	80152f8 <LoRaMacMibSetRequestConfirm>
 801056c:	4603      	mov	r3, r0
 801056e:	2b00      	cmp	r3, #0
 8010570:	d10b      	bne.n	801058a <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8010572:	4b28      	ldr	r3, [pc, #160]	; (8010614 <LmHandlerRequestClass+0x12c>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010578:	2b00      	cmp	r3, #0
 801057a:	d041      	beq.n	8010600 <LmHandlerRequestClass+0x118>
                            LmHandlerCallbacks->OnClassChange( newClass );
 801057c:	4b25      	ldr	r3, [pc, #148]	; (8010614 <LmHandlerRequestClass+0x12c>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010582:	79fa      	ldrb	r2, [r7, #7]
 8010584:	4610      	mov	r0, r2
 8010586:	4798      	blx	r3
            break;
 8010588:	e03a      	b.n	8010600 <LmHandlerRequestClass+0x118>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 801058a:	23ff      	movs	r3, #255	; 0xff
 801058c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8010590:	e036      	b.n	8010600 <LmHandlerRequestClass+0x118>
                if( currentClass != CLASS_A )
 8010592:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010596:	2b00      	cmp	r3, #0
 8010598:	d003      	beq.n	80105a2 <LmHandlerRequestClass+0xba>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 801059a:	23ff      	movs	r3, #255	; 0xff
 801059c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 80105a0:	e031      	b.n	8010606 <LmHandlerRequestClass+0x11e>
                    errorStatus = LmHandlerDeviceTimeReq( );
 80105a2:	f7ff ff29 	bl	80103f8 <LmHandlerDeviceTimeReq>
 80105a6:	4603      	mov	r3, r0
 80105a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    IsClassBSwitchPending = true;
 80105ac:	4b1a      	ldr	r3, [pc, #104]	; (8010618 <LmHandlerRequestClass+0x130>)
 80105ae:	2201      	movs	r2, #1
 80105b0:	701a      	strb	r2, [r3, #0]
            break;
 80105b2:	e028      	b.n	8010606 <LmHandlerRequestClass+0x11e>
                if( currentClass != CLASS_A )
 80105b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d003      	beq.n	80105c4 <LmHandlerRequestClass+0xdc>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 80105bc:	23ff      	movs	r3, #255	; 0xff
 80105be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 80105c2:	e01f      	b.n	8010604 <LmHandlerRequestClass+0x11c>
                    mibReq.Param.Class = newClass;
 80105c4:	79fb      	ldrb	r3, [r7, #7]
 80105c6:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 80105c8:	f107 0308 	add.w	r3, r7, #8
 80105cc:	4618      	mov	r0, r3
 80105ce:	f004 fe93 	bl	80152f8 <LoRaMacMibSetRequestConfirm>
 80105d2:	4603      	mov	r3, r0
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d10b      	bne.n	80105f0 <LmHandlerRequestClass+0x108>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80105d8:	4b0e      	ldr	r3, [pc, #56]	; (8010614 <LmHandlerRequestClass+0x12c>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d010      	beq.n	8010604 <LmHandlerRequestClass+0x11c>
                            LmHandlerCallbacks->OnClassChange( newClass );
 80105e2:	4b0c      	ldr	r3, [pc, #48]	; (8010614 <LmHandlerRequestClass+0x12c>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105e8:	79fa      	ldrb	r2, [r7, #7]
 80105ea:	4610      	mov	r0, r2
 80105ec:	4798      	blx	r3
            break;
 80105ee:	e009      	b.n	8010604 <LmHandlerRequestClass+0x11c>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80105f0:	23ff      	movs	r3, #255	; 0xff
 80105f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 80105f6:	e005      	b.n	8010604 <LmHandlerRequestClass+0x11c>
        }
    }
 80105f8:	bf00      	nop
 80105fa:	e004      	b.n	8010606 <LmHandlerRequestClass+0x11e>
            break;
 80105fc:	bf00      	nop
 80105fe:	e002      	b.n	8010606 <LmHandlerRequestClass+0x11e>
            break;
 8010600:	bf00      	nop
 8010602:	e000      	b.n	8010606 <LmHandlerRequestClass+0x11e>
            break;
 8010604:	bf00      	nop
    return errorStatus;
 8010606:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 801060a:	4618      	mov	r0, r3
 801060c:	3730      	adds	r7, #48	; 0x30
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}
 8010612:	bf00      	nop
 8010614:	20000cb4 	.word	0x20000cb4
 8010618:	20000cf8 	.word	0x20000cf8

0801061c <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b08c      	sub	sp, #48	; 0x30
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d102      	bne.n	8010630 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 801062a:	f04f 33ff 	mov.w	r3, #4294967295
 801062e:	e010      	b.n	8010652 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8010630:	2300      	movs	r3, #0
 8010632:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8010634:	f107 030c 	add.w	r3, r7, #12
 8010638:	4618      	mov	r0, r3
 801063a:	f004 fcd7 	bl	8014fec <LoRaMacMibGetRequestConfirm>
 801063e:	4603      	mov	r3, r0
 8010640:	2b00      	cmp	r3, #0
 8010642:	d002      	beq.n	801064a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010644:	f04f 33ff 	mov.w	r3, #4294967295
 8010648:	e003      	b.n	8010652 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 801064a:	7c3a      	ldrb	r2, [r7, #16]
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8010650:	2300      	movs	r3, #0
}
 8010652:	4618      	mov	r0, r3
 8010654:	3730      	adds	r7, #48	; 0x30
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
	...

0801065c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b08c      	sub	sp, #48	; 0x30
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d102      	bne.n	8010670 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 801066a:	f04f 33ff 	mov.w	r3, #4294967295
 801066e:	e016      	b.n	801069e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 8010670:	231f      	movs	r3, #31
 8010672:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8010674:	f107 030c 	add.w	r3, r7, #12
 8010678:	4618      	mov	r0, r3
 801067a:	f004 fcb7 	bl	8014fec <LoRaMacMibGetRequestConfirm>
 801067e:	4603      	mov	r3, r0
 8010680:	2b00      	cmp	r3, #0
 8010682:	d002      	beq.n	801068a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010684:	f04f 33ff 	mov.w	r3, #4294967295
 8010688:	e009      	b.n	801069e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 801068a:	f997 2010 	ldrsb.w	r2, [r7, #16]
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f993 2000 	ldrsb.w	r2, [r3]
 8010698:	4b03      	ldr	r3, [pc, #12]	; (80106a8 <LmHandlerGetTxDatarate+0x4c>)
 801069a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 801069c:	2300      	movs	r3, #0
}
 801069e:	4618      	mov	r0, r3
 80106a0:	3730      	adds	r7, #48	; 0x30
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	20000ca0 	.word	0x20000ca0

080106ac <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b08c      	sub	sp, #48	; 0x30
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 80106b4:	2322      	movs	r3, #34	; 0x22
 80106b6:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80106bc:	f107 030c 	add.w	r3, r7, #12
 80106c0:	4618      	mov	r0, r3
 80106c2:	f004 fe19 	bl	80152f8 <LoRaMacMibSetRequestConfirm>
 80106c6:	4603      	mov	r3, r0
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d002      	beq.n	80106d2 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 80106cc:	f04f 33ff 	mov.w	r3, #4294967295
 80106d0:	e000      	b.n	80106d4 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 80106d2:	2300      	movs	r3, #0
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3730      	adds	r7, #48	; 0x30
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}

080106dc <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b082      	sub	sp, #8
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 80106e4:	4b15      	ldr	r3, [pc, #84]	; (801073c <McpsConfirm+0x60>)
 80106e6:	2201      	movs	r2, #1
 80106e8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	785a      	ldrb	r2, [r3, #1]
 80106ee:	4b13      	ldr	r3, [pc, #76]	; (801073c <McpsConfirm+0x60>)
 80106f0:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	789b      	ldrb	r3, [r3, #2]
 80106f6:	b25a      	sxtb	r2, r3
 80106f8:	4b10      	ldr	r3, [pc, #64]	; (801073c <McpsConfirm+0x60>)
 80106fa:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	68db      	ldr	r3, [r3, #12]
 8010700:	4a0e      	ldr	r2, [pc, #56]	; (801073c <McpsConfirm+0x60>)
 8010702:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f993 2003 	ldrsb.w	r2, [r3, #3]
 801070a:	4b0c      	ldr	r3, [pc, #48]	; (801073c <McpsConfirm+0x60>)
 801070c:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	691b      	ldr	r3, [r3, #16]
 8010712:	b2da      	uxtb	r2, r3
 8010714:	4b09      	ldr	r3, [pc, #36]	; (801073c <McpsConfirm+0x60>)
 8010716:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	791b      	ldrb	r3, [r3, #4]
 801071c:	461a      	mov	r2, r3
 801071e:	4b07      	ldr	r3, [pc, #28]	; (801073c <McpsConfirm+0x60>)
 8010720:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 8010722:	4b07      	ldr	r3, [pc, #28]	; (8010740 <McpsConfirm+0x64>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010728:	4804      	ldr	r0, [pc, #16]	; (801073c <McpsConfirm+0x60>)
 801072a:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 801072c:	6879      	ldr	r1, [r7, #4]
 801072e:	2000      	movs	r0, #0
 8010730:	f000 fa7a 	bl	8010c28 <LmHandlerPackagesNotify>
}
 8010734:	bf00      	nop
 8010736:	3708      	adds	r7, #8
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}
 801073c:	200000d8 	.word	0x200000d8
 8010740:	20000cb4 	.word	0x20000cb4

08010744 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b088      	sub	sp, #32
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 801074e:	2300      	movs	r3, #0
 8010750:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 8010752:	4b31      	ldr	r3, [pc, #196]	; (8010818 <McpsIndication+0xd4>)
 8010754:	2201      	movs	r2, #1
 8010756:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	785a      	ldrb	r2, [r3, #1]
 801075c:	4b2e      	ldr	r3, [pc, #184]	; (8010818 <McpsIndication+0xd4>)
 801075e:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8010760:	4b2d      	ldr	r3, [pc, #180]	; (8010818 <McpsIndication+0xd4>)
 8010762:	785b      	ldrb	r3, [r3, #1]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d153      	bne.n	8010810 <McpsIndication+0xcc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	791b      	ldrb	r3, [r3, #4]
 801076c:	b25a      	sxtb	r2, r3
 801076e:	4b2a      	ldr	r3, [pc, #168]	; (8010818 <McpsIndication+0xd4>)
 8010770:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010778:	b25a      	sxtb	r2, r3
 801077a:	4b27      	ldr	r3, [pc, #156]	; (8010818 <McpsIndication+0xd4>)
 801077c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8010784:	4b24      	ldr	r3, [pc, #144]	; (8010818 <McpsIndication+0xd4>)
 8010786:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	78da      	ldrb	r2, [r3, #3]
 801078c:	4b22      	ldr	r3, [pc, #136]	; (8010818 <McpsIndication+0xd4>)
 801078e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	691b      	ldr	r3, [r3, #16]
 8010794:	4a20      	ldr	r2, [pc, #128]	; (8010818 <McpsIndication+0xd4>)
 8010796:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	78db      	ldrb	r3, [r3, #3]
 801079c:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	7b1b      	ldrb	r3, [r3, #12]
 80107a2:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	689b      	ldr	r3, [r3, #8]
 80107a8:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 80107aa:	4b1c      	ldr	r3, [pc, #112]	; (801081c <McpsIndication+0xd8>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107b0:	f107 0218 	add.w	r2, r7, #24
 80107b4:	4918      	ldr	r1, [pc, #96]	; (8010818 <McpsIndication+0xd4>)
 80107b6:	4610      	mov	r0, r2
 80107b8:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 80107ba:	4b18      	ldr	r3, [pc, #96]	; (801081c <McpsIndication+0xd8>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d007      	beq.n	80107d4 <McpsIndication+0x90>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	7e1b      	ldrb	r3, [r3, #24]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d003      	beq.n	80107d4 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 80107cc:	4b13      	ldr	r3, [pc, #76]	; (801081c <McpsIndication+0xd8>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107d2:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 80107d4:	6879      	ldr	r1, [r7, #4]
 80107d6:	2001      	movs	r0, #1
 80107d8:	f000 fa26 	bl	8010c28 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 80107dc:	f107 0317 	add.w	r3, r7, #23
 80107e0:	4618      	mov	r0, r3
 80107e2:	f7ff ff1b 	bl	801061c <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	795b      	ldrb	r3, [r3, #5]
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	d111      	bne.n	8010812 <McpsIndication+0xce>
 80107ee:	7dfb      	ldrb	r3, [r7, #23]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d10e      	bne.n	8010812 <McpsIndication+0xce>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 80107f4:	2300      	movs	r3, #0
 80107f6:	733b      	strb	r3, [r7, #12]
 80107f8:	2300      	movs	r3, #0
 80107fa:	737b      	strb	r3, [r7, #13]
 80107fc:	2300      	movs	r3, #0
 80107fe:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 8010800:	f107 030c 	add.w	r3, r7, #12
 8010804:	2201      	movs	r2, #1
 8010806:	2100      	movs	r1, #0
 8010808:	4618      	mov	r0, r3
 801080a:	f7ff fd1d 	bl	8010248 <LmHandlerSend>
 801080e:	e000      	b.n	8010812 <McpsIndication+0xce>
        return;
 8010810:	bf00      	nop
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 8010812:	3720      	adds	r7, #32
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}
 8010818:	200000f4 	.word	0x200000f4
 801081c:	20000cb4 	.word	0x20000cb4

08010820 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b08c      	sub	sp, #48	; 0x30
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 8010828:	4b53      	ldr	r3, [pc, #332]	; (8010978 <MlmeConfirm+0x158>)
 801082a:	2200      	movs	r2, #0
 801082c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	785a      	ldrb	r2, [r3, #1]
 8010832:	4b51      	ldr	r3, [pc, #324]	; (8010978 <MlmeConfirm+0x158>)
 8010834:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8010836:	4b51      	ldr	r3, [pc, #324]	; (801097c <MlmeConfirm+0x15c>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801083c:	484e      	ldr	r0, [pc, #312]	; (8010978 <MlmeConfirm+0x158>)
 801083e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8010840:	6879      	ldr	r1, [r7, #4]
 8010842:	2002      	movs	r0, #2
 8010844:	f000 f9f0 	bl	8010c28 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	3b01      	subs	r3, #1
 801084e:	2b0c      	cmp	r3, #12
 8010850:	f200 8088 	bhi.w	8010964 <MlmeConfirm+0x144>
 8010854:	a201      	add	r2, pc, #4	; (adr r2, 801085c <MlmeConfirm+0x3c>)
 8010856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801085a:	bf00      	nop
 801085c:	08010891 	.word	0x08010891
 8010860:	08010965 	.word	0x08010965
 8010864:	08010965 	.word	0x08010965
 8010868:	080108e3 	.word	0x080108e3
 801086c:	08010965 	.word	0x08010965
 8010870:	08010965 	.word	0x08010965
 8010874:	08010965 	.word	0x08010965
 8010878:	08010965 	.word	0x08010965
 801087c:	08010965 	.word	0x08010965
 8010880:	080108fb 	.word	0x080108fb
 8010884:	08010965 	.word	0x08010965
 8010888:	08010909 	.word	0x08010909
 801088c:	08010923 	.word	0x08010923
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 8010890:	2306      	movs	r3, #6
 8010892:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8010894:	f107 030c 	add.w	r3, r7, #12
 8010898:	4618      	mov	r0, r3
 801089a:	f004 fba7 	bl	8014fec <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 801089e:	693b      	ldr	r3, [r7, #16]
 80108a0:	4a37      	ldr	r2, [pc, #220]	; (8010980 <MlmeConfirm+0x160>)
 80108a2:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80108a4:	4837      	ldr	r0, [pc, #220]	; (8010984 <MlmeConfirm+0x164>)
 80108a6:	f7ff fed9 	bl	801065c <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	785b      	ldrb	r3, [r3, #1]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d108      	bne.n	80108c4 <MlmeConfirm+0xa4>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80108b2:	4b35      	ldr	r3, [pc, #212]	; (8010988 <MlmeConfirm+0x168>)
 80108b4:	2200      	movs	r2, #0
 80108b6:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80108b8:	4b34      	ldr	r3, [pc, #208]	; (801098c <MlmeConfirm+0x16c>)
 80108ba:	785b      	ldrb	r3, [r3, #1]
 80108bc:	4618      	mov	r0, r3
 80108be:	f7ff fe13 	bl	80104e8 <LmHandlerRequestClass>
 80108c2:	e002      	b.n	80108ca <MlmeConfirm+0xaa>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80108c4:	4b30      	ldr	r3, [pc, #192]	; (8010988 <MlmeConfirm+0x168>)
 80108c6:	22ff      	movs	r2, #255	; 0xff
 80108c8:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80108ca:	4b2c      	ldr	r3, [pc, #176]	; (801097c <MlmeConfirm+0x15c>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108d0:	482d      	ldr	r0, [pc, #180]	; (8010988 <MlmeConfirm+0x168>)
 80108d2:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	785b      	ldrb	r3, [r3, #1]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d145      	bne.n	8010968 <MlmeConfirm+0x148>
            {
                SecureElementPrintSessionKeys();
 80108dc:	f7ff f838 	bl	800f950 <SecureElementPrintSessionKeys>
            }
        }
        break;
 80108e0:	e042      	b.n	8010968 <MlmeConfirm+0x148>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 80108e2:	4b2b      	ldr	r3, [pc, #172]	; (8010990 <MlmeConfirm+0x170>)
 80108e4:	2201      	movs	r2, #1
 80108e6:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	7a1a      	ldrb	r2, [r3, #8]
 80108ec:	4b28      	ldr	r3, [pc, #160]	; (8010990 <MlmeConfirm+0x170>)
 80108ee:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	7a5a      	ldrb	r2, [r3, #9]
 80108f4:	4b26      	ldr	r3, [pc, #152]	; (8010990 <MlmeConfirm+0x170>)
 80108f6:	74da      	strb	r2, [r3, #19]
        }
        break;
 80108f8:	e039      	b.n	801096e <MlmeConfirm+0x14e>
    case MLME_DEVICE_TIME:
        {
#if ( LORAMAC_CLASSB_ENABLED == 1 )
            if( IsClassBSwitchPending == true )
 80108fa:	4b26      	ldr	r3, [pc, #152]	; (8010994 <MlmeConfirm+0x174>)
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d034      	beq.n	801096c <MlmeConfirm+0x14c>
            {
                LmHandlerBeaconReq( );
 8010902:	f7ff fd95 	bl	8010430 <LmHandlerBeaconReq>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
 8010906:	e031      	b.n	801096c <MlmeConfirm+0x14c>
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	785b      	ldrb	r3, [r3, #1]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d105      	bne.n	801091c <MlmeConfirm+0xfc>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8010910:	4b1e      	ldr	r3, [pc, #120]	; (801098c <MlmeConfirm+0x16c>)
 8010912:	7b1b      	ldrb	r3, [r3, #12]
 8010914:	4618      	mov	r0, r3
 8010916:	f7ff fda7 	bl	8010468 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 801091a:	e028      	b.n	801096e <MlmeConfirm+0x14e>
                LmHandlerDeviceTimeReq( );
 801091c:	f7ff fd6c 	bl	80103f8 <LmHandlerDeviceTimeReq>
        break;
 8010920:	e025      	b.n	801096e <MlmeConfirm+0x14e>
    case MLME_PING_SLOT_INFO:
        {
#if ( LORAMAC_CLASSB_ENABLED == 1 )
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	785b      	ldrb	r3, [r3, #1]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d116      	bne.n	8010958 <MlmeConfirm+0x138>
            {
                MibRequestConfirm_t mibReq;

                // Class B is now activated
                mibReq.Type = MIB_DEVICE_CLASS;
 801092a:	2300      	movs	r3, #0
 801092c:	733b      	strb	r3, [r7, #12]
                mibReq.Param.Class = CLASS_B;
 801092e:	2301      	movs	r3, #1
 8010930:	743b      	strb	r3, [r7, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8010932:	f107 030c 	add.w	r3, r7, #12
 8010936:	4618      	mov	r0, r3
 8010938:	f004 fcde 	bl	80152f8 <LoRaMacMibSetRequestConfirm>
                // Notify upper layer
                if (LmHandlerCallbacks->OnClassChange != NULL)
 801093c:	4b0f      	ldr	r3, [pc, #60]	; (801097c <MlmeConfirm+0x15c>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010942:	2b00      	cmp	r3, #0
 8010944:	d004      	beq.n	8010950 <MlmeConfirm+0x130>
                {
                    LmHandlerCallbacks->OnClassChange( CLASS_B );
 8010946:	4b0d      	ldr	r3, [pc, #52]	; (801097c <MlmeConfirm+0x15c>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801094c:	2001      	movs	r0, #1
 801094e:	4798      	blx	r3
                }
                IsClassBSwitchPending = false;
 8010950:	4b10      	ldr	r3, [pc, #64]	; (8010994 <MlmeConfirm+0x174>)
 8010952:	2200      	movs	r2, #0
 8010954:	701a      	strb	r2, [r3, #0]
            {
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
 8010956:	e00a      	b.n	801096e <MlmeConfirm+0x14e>
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8010958:	4b0c      	ldr	r3, [pc, #48]	; (801098c <MlmeConfirm+0x16c>)
 801095a:	7b1b      	ldrb	r3, [r3, #12]
 801095c:	4618      	mov	r0, r3
 801095e:	f7ff fd83 	bl	8010468 <LmHandlerPingSlotReq>
        break;
 8010962:	e004      	b.n	801096e <MlmeConfirm+0x14e>
    default:
        break;
 8010964:	bf00      	nop
 8010966:	e002      	b.n	801096e <MlmeConfirm+0x14e>
        break;
 8010968:	bf00      	nop
 801096a:	e000      	b.n	801096e <MlmeConfirm+0x14e>
        break;
 801096c:	bf00      	nop
    }
}
 801096e:	bf00      	nop
 8010970:	3730      	adds	r7, #48	; 0x30
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}
 8010976:	bf00      	nop
 8010978:	200000d8 	.word	0x200000d8
 801097c:	20000cb4 	.word	0x20000cb4
 8010980:	200000ac 	.word	0x200000ac
 8010984:	200000d4 	.word	0x200000d4
 8010988:	200000d0 	.word	0x200000d0
 801098c:	20000ca0 	.word	0x20000ca0
 8010990:	200000f4 	.word	0x200000f4
 8010994:	20000cf8 	.word	0x20000cf8

08010998 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 8010998:	b5b0      	push	{r4, r5, r7, lr}
 801099a:	b08e      	sub	sp, #56	; 0x38
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 80109a2:	4b64      	ldr	r3, [pc, #400]	; (8010b34 <MlmeIndication+0x19c>)
 80109a4:	2200      	movs	r2, #0
 80109a6:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	785a      	ldrb	r2, [r3, #1]
 80109ac:	4b61      	ldr	r3, [pc, #388]	; (8010b34 <MlmeIndication+0x19c>)
 80109ae:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	789b      	ldrb	r3, [r3, #2]
 80109b4:	b25a      	sxtb	r2, r3
 80109b6:	4b5f      	ldr	r3, [pc, #380]	; (8010b34 <MlmeIndication+0x19c>)
 80109b8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80109c0:	b25a      	sxtb	r2, r3
 80109c2:	4b5c      	ldr	r3, [pc, #368]	; (8010b34 <MlmeIndication+0x19c>)
 80109c4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80109cc:	4b59      	ldr	r3, [pc, #356]	; (8010b34 <MlmeIndication+0x19c>)
 80109ce:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80109d0:	683b      	ldr	r3, [r7, #0]
 80109d2:	78da      	ldrb	r2, [r3, #3]
 80109d4:	4b57      	ldr	r3, [pc, #348]	; (8010b34 <MlmeIndication+0x19c>)
 80109d6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	685b      	ldr	r3, [r3, #4]
 80109dc:	4a55      	ldr	r2, [pc, #340]	; (8010b34 <MlmeIndication+0x19c>)
 80109de:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	781b      	ldrb	r3, [r3, #0]
 80109e4:	2b0b      	cmp	r3, #11
 80109e6:	d009      	beq.n	80109fc <MlmeIndication+0x64>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	2b0f      	cmp	r3, #15
 80109ee:	d005      	beq.n	80109fc <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80109f0:	4b51      	ldr	r3, [pc, #324]	; (8010b38 <MlmeIndication+0x1a0>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109f6:	494f      	ldr	r1, [pc, #316]	; (8010b34 <MlmeIndication+0x19c>)
 80109f8:	2000      	movs	r0, #0
 80109fa:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 80109fc:	6879      	ldr	r1, [r7, #4]
 80109fe:	2003      	movs	r0, #3
 8010a00:	f000 f912 	bl	8010c28 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	781b      	ldrb	r3, [r3, #0]
 8010a08:	2b0f      	cmp	r3, #15
 8010a0a:	d021      	beq.n	8010a50 <MlmeIndication+0xb8>
 8010a0c:	2b0f      	cmp	r3, #15
 8010a0e:	f300 8087 	bgt.w	8010b20 <MlmeIndication+0x188>
 8010a12:	2b07      	cmp	r3, #7
 8010a14:	d002      	beq.n	8010a1c <MlmeIndication+0x84>
 8010a16:	2b0b      	cmp	r3, #11
 8010a18:	d048      	beq.n	8010aac <MlmeIndication+0x114>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 8010a1a:	e081      	b.n	8010b20 <MlmeIndication+0x188>
            LmHandlerAppData_t appData =
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8010a22:	2300      	movs	r3, #0
 8010a24:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8010a28:	2300      	movs	r3, #0
 8010a2a:	637b      	str	r3, [r7, #52]	; 0x34
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 8010a2c:	4b43      	ldr	r3, [pc, #268]	; (8010b3c <MlmeIndication+0x1a4>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	68db      	ldr	r3, [r3, #12]
 8010a32:	4798      	blx	r3
 8010a34:	4603      	mov	r3, r0
 8010a36:	f083 0301 	eor.w	r3, r3, #1
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d071      	beq.n	8010b24 <MlmeIndication+0x18c>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 8010a40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010a44:	2201      	movs	r2, #1
 8010a46:	2100      	movs	r1, #0
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7ff fbfd 	bl	8010248 <LmHandlerSend>
        break;
 8010a4e:	e069      	b.n	8010b24 <MlmeIndication+0x18c>
            mibReq.Type = MIB_DEVICE_CLASS;
 8010a50:	2300      	movs	r3, #0
 8010a52:	733b      	strb	r3, [r7, #12]
            mibReq.Param.Class = CLASS_A;
 8010a54:	2300      	movs	r3, #0
 8010a56:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010a58:	f107 030c 	add.w	r3, r7, #12
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f004 fc4b 	bl	80152f8 <LoRaMacMibSetRequestConfirm>
            BeaconParams.State = LORAMAC_HANDLER_BEACON_LOST;
 8010a62:	4b37      	ldr	r3, [pc, #220]	; (8010b40 <MlmeIndication+0x1a8>)
 8010a64:	2201      	movs	r2, #1
 8010a66:	705a      	strb	r2, [r3, #1]
            BeaconParams.Info.Time.Seconds = 0;
 8010a68:	4b35      	ldr	r3, [pc, #212]	; (8010b40 <MlmeIndication+0x1a8>)
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	605a      	str	r2, [r3, #4]
            BeaconParams.Info.GwSpecific.InfoDesc = 0;
 8010a6e:	4b34      	ldr	r3, [pc, #208]	; (8010b40 <MlmeIndication+0x1a8>)
 8010a70:	2200      	movs	r2, #0
 8010a72:	755a      	strb	r2, [r3, #21]
            UTIL_MEM_set_8( BeaconParams.Info.GwSpecific.Info, 0, 6 );
 8010a74:	2206      	movs	r2, #6
 8010a76:	2100      	movs	r1, #0
 8010a78:	4832      	ldr	r0, [pc, #200]	; (8010b44 <MlmeIndication+0x1ac>)
 8010a7a:	f00e ff34 	bl	801f8e6 <UTIL_MEM_set_8>
            if (LmHandlerCallbacks->OnClassChange != NULL)
 8010a7e:	4b2e      	ldr	r3, [pc, #184]	; (8010b38 <MlmeIndication+0x1a0>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d004      	beq.n	8010a92 <MlmeIndication+0xfa>
                LmHandlerCallbacks->OnClassChange( CLASS_A );
 8010a88:	4b2b      	ldr	r3, [pc, #172]	; (8010b38 <MlmeIndication+0x1a0>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a8e:	2000      	movs	r0, #0
 8010a90:	4798      	blx	r3
            if (LmHandlerCallbacks->OnBeaconStatusChange != NULL)
 8010a92:	4b29      	ldr	r3, [pc, #164]	; (8010b38 <MlmeIndication+0x1a0>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d004      	beq.n	8010aa6 <MlmeIndication+0x10e>
                LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 8010a9c:	4b26      	ldr	r3, [pc, #152]	; (8010b38 <MlmeIndication+0x1a0>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aa2:	4827      	ldr	r0, [pc, #156]	; (8010b40 <MlmeIndication+0x1a8>)
 8010aa4:	4798      	blx	r3
            LmHandlerDeviceTimeReq( );
 8010aa6:	f7ff fca7 	bl	80103f8 <LmHandlerDeviceTimeReq>
        break;
 8010aaa:	e03e      	b.n	8010b2a <MlmeIndication+0x192>
            if( mlmeIndication->Status == LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	785b      	ldrb	r3, [r3, #1]
 8010ab0:	2b0e      	cmp	r3, #14
 8010ab2:	d118      	bne.n	8010ae6 <MlmeIndication+0x14e>
                BeaconParams.State = LORAMAC_HANDLER_BEACON_RX;
 8010ab4:	4b22      	ldr	r3, [pc, #136]	; (8010b40 <MlmeIndication+0x1a8>)
 8010ab6:	2202      	movs	r2, #2
 8010ab8:	705a      	strb	r2, [r3, #1]
                BeaconParams.Info = mlmeIndication->BeaconInfo;
 8010aba:	4a21      	ldr	r2, [pc, #132]	; (8010b40 <MlmeIndication+0x1a8>)
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	1d14      	adds	r4, r2, #4
 8010ac0:	f103 0508 	add.w	r5, r3, #8
 8010ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ac8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010acc:	e884 0003 	stmia.w	r4, {r0, r1}
                if (LmHandlerCallbacks->OnBeaconStatusChange != NULL)
 8010ad0:	4b19      	ldr	r3, [pc, #100]	; (8010b38 <MlmeIndication+0x1a0>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d026      	beq.n	8010b28 <MlmeIndication+0x190>
                    LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 8010ada:	4b17      	ldr	r3, [pc, #92]	; (8010b38 <MlmeIndication+0x1a0>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ae0:	4817      	ldr	r0, [pc, #92]	; (8010b40 <MlmeIndication+0x1a8>)
 8010ae2:	4798      	blx	r3
        break;
 8010ae4:	e020      	b.n	8010b28 <MlmeIndication+0x190>
            else if ( mlmeIndication->Status == LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND )
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	785b      	ldrb	r3, [r3, #1]
 8010aea:	2b10      	cmp	r3, #16
 8010aec:	d11c      	bne.n	8010b28 <MlmeIndication+0x190>
                BeaconParams.State = LORAMAC_HANDLER_BEACON_NRX;
 8010aee:	4b14      	ldr	r3, [pc, #80]	; (8010b40 <MlmeIndication+0x1a8>)
 8010af0:	2203      	movs	r2, #3
 8010af2:	705a      	strb	r2, [r3, #1]
                BeaconParams.Info = mlmeIndication->BeaconInfo;
 8010af4:	4a12      	ldr	r2, [pc, #72]	; (8010b40 <MlmeIndication+0x1a8>)
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	1d14      	adds	r4, r2, #4
 8010afa:	f103 0508 	add.w	r5, r3, #8
 8010afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010b06:	e884 0003 	stmia.w	r4, {r0, r1}
                if (LmHandlerCallbacks->OnBeaconStatusChange != NULL)
 8010b0a:	4b0b      	ldr	r3, [pc, #44]	; (8010b38 <MlmeIndication+0x1a0>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d009      	beq.n	8010b28 <MlmeIndication+0x190>
                    LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 8010b14:	4b08      	ldr	r3, [pc, #32]	; (8010b38 <MlmeIndication+0x1a0>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b1a:	4809      	ldr	r0, [pc, #36]	; (8010b40 <MlmeIndication+0x1a8>)
 8010b1c:	4798      	blx	r3
        break;
 8010b1e:	e003      	b.n	8010b28 <MlmeIndication+0x190>
        break;
 8010b20:	bf00      	nop
 8010b22:	e002      	b.n	8010b2a <MlmeIndication+0x192>
        break;
 8010b24:	bf00      	nop
 8010b26:	e000      	b.n	8010b2a <MlmeIndication+0x192>
        break;
 8010b28:	bf00      	nop
    }
}
 8010b2a:	bf00      	nop
 8010b2c:	3738      	adds	r7, #56	; 0x38
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bdb0      	pop	{r4, r5, r7, pc}
 8010b32:	bf00      	nop
 8010b34:	200000f4 	.word	0x200000f4
 8010b38:	20000cb4 	.word	0x20000cb4
 8010b3c:	20000c8c 	.word	0x20000c8c
 8010b40:	20000cdc 	.word	0x20000cdc
 8010b44:	20000cf2 	.word	0x20000cf2

08010b48 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b084      	sub	sp, #16
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	4603      	mov	r3, r0
 8010b50:	6039      	str	r1, [r7, #0]
 8010b52:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 8010b54:	2300      	movs	r3, #0
 8010b56:	60fb      	str	r3, [r7, #12]
    switch( id )
 8010b58:	79fb      	ldrb	r3, [r7, #7]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d103      	bne.n	8010b66 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 8010b5e:	f000 f9db 	bl	8010f18 <LmhpCompliancePackageFactory>
 8010b62:	60f8      	str	r0, [r7, #12]
            break;
 8010b64:	e000      	b.n	8010b68 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 8010b66:	bf00      	nop
        }
    }
    if( package != NULL )
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d02b      	beq.n	8010bc6 <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 8010b6e:	79fb      	ldrb	r3, [r7, #7]
 8010b70:	4918      	ldr	r1, [pc, #96]	; (8010bd4 <LmHandlerPackageRegister+0x8c>)
 8010b72:	68fa      	ldr	r2, [r7, #12]
 8010b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8010b78:	79fb      	ldrb	r3, [r7, #7]
 8010b7a:	4a16      	ldr	r2, [pc, #88]	; (8010bd4 <LmHandlerPackageRegister+0x8c>)
 8010b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b80:	4a15      	ldr	r2, [pc, #84]	; (8010bd8 <LmHandlerPackageRegister+0x90>)
 8010b82:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8010b84:	79fb      	ldrb	r3, [r7, #7]
 8010b86:	4a13      	ldr	r2, [pc, #76]	; (8010bd4 <LmHandlerPackageRegister+0x8c>)
 8010b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b8c:	4a13      	ldr	r2, [pc, #76]	; (8010bdc <LmHandlerPackageRegister+0x94>)
 8010b8e:	62da      	str	r2, [r3, #44]	; 0x2c
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8010b90:	79fb      	ldrb	r3, [r7, #7]
 8010b92:	4a10      	ldr	r2, [pc, #64]	; (8010bd4 <LmHandlerPackageRegister+0x8c>)
 8010b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b98:	4a11      	ldr	r2, [pc, #68]	; (8010be0 <LmHandlerPackageRegister+0x98>)
 8010b9a:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8010b9c:	4b11      	ldr	r3, [pc, #68]	; (8010be4 <LmHandlerPackageRegister+0x9c>)
 8010b9e:	681a      	ldr	r2, [r3, #0]
 8010ba0:	79fb      	ldrb	r3, [r7, #7]
 8010ba2:	490c      	ldr	r1, [pc, #48]	; (8010bd4 <LmHandlerPackageRegister+0x8c>)
 8010ba4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010ba8:	6992      	ldr	r2, [r2, #24]
 8010baa:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8010bac:	79fb      	ldrb	r3, [r7, #7]
 8010bae:	4a09      	ldr	r2, [pc, #36]	; (8010bd4 <LmHandlerPackageRegister+0x8c>)
 8010bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010bb4:	685b      	ldr	r3, [r3, #4]
 8010bb6:	4a0c      	ldr	r2, [pc, #48]	; (8010be8 <LmHandlerPackageRegister+0xa0>)
 8010bb8:	6851      	ldr	r1, [r2, #4]
 8010bba:	4a0b      	ldr	r2, [pc, #44]	; (8010be8 <LmHandlerPackageRegister+0xa0>)
 8010bbc:	7852      	ldrb	r2, [r2, #1]
 8010bbe:	6838      	ldr	r0, [r7, #0]
 8010bc0:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	e001      	b.n	8010bca <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8010bc6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3710      	adds	r7, #16
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	20000c8c 	.word	0x20000c8c
 8010bd8:	08010111 	.word	0x08010111
 8010bdc:	08010249 	.word	0x08010249
 8010be0:	080103f9 	.word	0x080103f9
 8010be4:	20000cb4 	.word	0x20000cb4
 8010be8:	20000108 	.word	0x20000108

08010bec <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b082      	sub	sp, #8
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8010bf6:	79fb      	ldrb	r3, [r7, #7]
 8010bf8:	2b04      	cmp	r3, #4
 8010bfa:	d80e      	bhi.n	8010c1a <LmHandlerPackageIsInitialized+0x2e>
 8010bfc:	79fb      	ldrb	r3, [r7, #7]
 8010bfe:	4a09      	ldr	r2, [pc, #36]	; (8010c24 <LmHandlerPackageIsInitialized+0x38>)
 8010c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c04:	689b      	ldr	r3, [r3, #8]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d007      	beq.n	8010c1a <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8010c0a:	79fb      	ldrb	r3, [r7, #7]
 8010c0c:	4a05      	ldr	r2, [pc, #20]	; (8010c24 <LmHandlerPackageIsInitialized+0x38>)
 8010c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c12:	689b      	ldr	r3, [r3, #8]
 8010c14:	4798      	blx	r3
 8010c16:	4603      	mov	r3, r0
 8010c18:	e000      	b.n	8010c1c <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 8010c1a:	2300      	movs	r3, #0
    }
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3708      	adds	r7, #8
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	20000c8c 	.word	0x20000c8c

08010c28 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b084      	sub	sp, #16
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	4603      	mov	r3, r0
 8010c30:	6039      	str	r1, [r7, #0]
 8010c32:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010c34:	2300      	movs	r3, #0
 8010c36:	73fb      	strb	r3, [r7, #15]
 8010c38:	e07e      	b.n	8010d38 <LmHandlerPackagesNotify+0x110>
    {
        if( LmHandlerPackages[i] != NULL )
 8010c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c3e:	4a43      	ldr	r2, [pc, #268]	; (8010d4c <LmHandlerPackagesNotify+0x124>)
 8010c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d066      	beq.n	8010d16 <LmHandlerPackagesNotify+0xee>
        {
            switch( notifyType )
 8010c48:	79fb      	ldrb	r3, [r7, #7]
 8010c4a:	2b03      	cmp	r3, #3
 8010c4c:	d865      	bhi.n	8010d1a <LmHandlerPackagesNotify+0xf2>
 8010c4e:	a201      	add	r2, pc, #4	; (adr r2, 8010c54 <LmHandlerPackagesNotify+0x2c>)
 8010c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c54:	08010c65 	.word	0x08010c65
 8010c58:	08010c87 	.word	0x08010c87
 8010c5c:	08010cd3 	.word	0x08010cd3
 8010c60:	08010cf5 	.word	0x08010cf5
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8010c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c68:	4a38      	ldr	r2, [pc, #224]	; (8010d4c <LmHandlerPackagesNotify+0x124>)
 8010c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c6e:	699b      	ldr	r3, [r3, #24]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d054      	beq.n	8010d1e <LmHandlerPackagesNotify+0xf6>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8010c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c78:	4a34      	ldr	r2, [pc, #208]	; (8010d4c <LmHandlerPackagesNotify+0x124>)
 8010c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c7e:	699b      	ldr	r3, [r3, #24]
 8010c80:	6838      	ldr	r0, [r7, #0]
 8010c82:	4798      	blx	r3
                    }
                    break;
 8010c84:	e04b      	b.n	8010d1e <LmHandlerPackagesNotify+0xf6>
                }
                case PACKAGE_MCPS_INDICATION:
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8010c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c8a:	4a30      	ldr	r2, [pc, #192]	; (8010d4c <LmHandlerPackagesNotify+0x124>)
 8010c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c90:	69db      	ldr	r3, [r3, #28]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d045      	beq.n	8010d22 <LmHandlerPackagesNotify+0xfa>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8010c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c9a:	4a2c      	ldr	r2, [pc, #176]	; (8010d4c <LmHandlerPackagesNotify+0x124>)
 8010c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ca0:	781a      	ldrb	r2, [r3, #0]
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	d00a      	beq.n	8010cc0 <LmHandlerPackagesNotify+0x98>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8010caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d137      	bne.n	8010d22 <LmHandlerPackagesNotify+0xfa>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 8010cb2:	4b26      	ldr	r3, [pc, #152]	; (8010d4c <LmHandlerPackagesNotify+0x124>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	4798      	blx	r3
 8010cba:	4603      	mov	r3, r0
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d030      	beq.n	8010d22 <LmHandlerPackagesNotify+0xfa>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8010cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cc4:	4a21      	ldr	r2, [pc, #132]	; (8010d4c <LmHandlerPackagesNotify+0x124>)
 8010cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cca:	69db      	ldr	r3, [r3, #28]
 8010ccc:	6838      	ldr	r0, [r7, #0]
 8010cce:	4798      	blx	r3
                    }
                    break;
 8010cd0:	e027      	b.n	8010d22 <LmHandlerPackagesNotify+0xfa>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8010cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cd6:	4a1d      	ldr	r2, [pc, #116]	; (8010d4c <LmHandlerPackagesNotify+0x124>)
 8010cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cdc:	6a1b      	ldr	r3, [r3, #32]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d021      	beq.n	8010d26 <LmHandlerPackagesNotify+0xfe>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8010ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ce6:	4a19      	ldr	r2, [pc, #100]	; (8010d4c <LmHandlerPackagesNotify+0x124>)
 8010ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cec:	6a1b      	ldr	r3, [r3, #32]
 8010cee:	6838      	ldr	r0, [r7, #0]
 8010cf0:	4798      	blx	r3
                    }
                    break;
 8010cf2:	e018      	b.n	8010d26 <LmHandlerPackagesNotify+0xfe>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8010cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cf8:	4a14      	ldr	r2, [pc, #80]	; (8010d4c <LmHandlerPackagesNotify+0x124>)
 8010cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d012      	beq.n	8010d2a <LmHandlerPackagesNotify+0x102>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8010d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d08:	4a10      	ldr	r2, [pc, #64]	; (8010d4c <LmHandlerPackagesNotify+0x124>)
 8010d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d10:	6838      	ldr	r0, [r7, #0]
 8010d12:	4798      	blx	r3
                    }
                    break;
 8010d14:	e009      	b.n	8010d2a <LmHandlerPackagesNotify+0x102>
                default:
                {
                    break;
                }
            }
        }
 8010d16:	bf00      	nop
 8010d18:	e008      	b.n	8010d2c <LmHandlerPackagesNotify+0x104>
                    break;
 8010d1a:	bf00      	nop
 8010d1c:	e006      	b.n	8010d2c <LmHandlerPackagesNotify+0x104>
                    break;
 8010d1e:	bf00      	nop
 8010d20:	e004      	b.n	8010d2c <LmHandlerPackagesNotify+0x104>
                    break;
 8010d22:	bf00      	nop
 8010d24:	e002      	b.n	8010d2c <LmHandlerPackagesNotify+0x104>
                    break;
 8010d26:	bf00      	nop
 8010d28:	e000      	b.n	8010d2c <LmHandlerPackagesNotify+0x104>
                    break;
 8010d2a:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d30:	b2db      	uxtb	r3, r3
 8010d32:	3301      	adds	r3, #1
 8010d34:	b2db      	uxtb	r3, r3
 8010d36:	73fb      	strb	r3, [r7, #15]
 8010d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d3c:	2b04      	cmp	r3, #4
 8010d3e:	f77f af7c 	ble.w	8010c3a <LmHandlerPackagesNotify+0x12>
    }
}
 8010d42:	bf00      	nop
 8010d44:	bf00      	nop
 8010d46:	3710      	adds	r7, #16
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}
 8010d4c:	20000c8c 	.word	0x20000c8c

08010d50 <LmHandlerPackagesProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b082      	sub	sp, #8
 8010d54:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010d56:	2300      	movs	r3, #0
 8010d58:	71fb      	strb	r3, [r7, #7]
 8010d5a:	e022      	b.n	8010da2 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8010d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d60:	4a14      	ldr	r2, [pc, #80]	; (8010db4 <LmHandlerPackagesProcess+0x64>)
 8010d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d015      	beq.n	8010d96 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8010d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d6e:	4a11      	ldr	r2, [pc, #68]	; (8010db4 <LmHandlerPackagesProcess+0x64>)
 8010d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d74:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d00d      	beq.n	8010d96 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8010d7a:	79fb      	ldrb	r3, [r7, #7]
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7ff ff35 	bl	8010bec <LmHandlerPackageIsInitialized>
 8010d82:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d006      	beq.n	8010d96 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 8010d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d8c:	4a09      	ldr	r2, [pc, #36]	; (8010db4 <LmHandlerPackagesProcess+0x64>)
 8010d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d92:	691b      	ldr	r3, [r3, #16]
 8010d94:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d9a:	b2db      	uxtb	r3, r3
 8010d9c:	3301      	adds	r3, #1
 8010d9e:	b2db      	uxtb	r3, r3
 8010da0:	71fb      	strb	r3, [r7, #7]
 8010da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010da6:	2b04      	cmp	r3, #4
 8010da8:	ddd8      	ble.n	8010d5c <LmHandlerPackagesProcess+0xc>
        }
    }
}
 8010daa:	bf00      	nop
 8010dac:	bf00      	nop
 8010dae:	3708      	adds	r7, #8
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}
 8010db4:	20000c8c 	.word	0x20000c8c

08010db8 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	6039      	str	r1, [r7, #0]
 8010dc2:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 8010dc4:	683b      	ldr	r3, [r7, #0]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d102      	bne.n	8010dd0 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 8010dca:	f04f 33ff 	mov.w	r3, #4294967295
 8010dce:	e00e      	b.n	8010dee <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 8010dd0:	79fb      	ldrb	r3, [r7, #7]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d002      	beq.n	8010ddc <LmHandlerGetVersion+0x24>
 8010dd6:	2b01      	cmp	r3, #1
 8010dd8:	d004      	beq.n	8010de4 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 8010dda:	e007      	b.n	8010dec <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	4a06      	ldr	r2, [pc, #24]	; (8010df8 <LmHandlerGetVersion+0x40>)
 8010de0:	601a      	str	r2, [r3, #0]
            break;
 8010de2:	e003      	b.n	8010dec <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	4a05      	ldr	r2, [pc, #20]	; (8010dfc <LmHandlerGetVersion+0x44>)
 8010de8:	601a      	str	r2, [r3, #0]
            break;
 8010dea:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 8010dec:	2300      	movs	r3, #0
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	370c      	adds	r7, #12
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bc80      	pop	{r7}
 8010df6:	4770      	bx	lr
 8010df8:	01000300 	.word	0x01000300
 8010dfc:	01010003 	.word	0x01010003

08010e00 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 8010e04:	f005 f826 	bl	8015e54 <LoRaMacDeInitialization>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d101      	bne.n	8010e12 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	e001      	b.n	8010e16 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010e12:	f06f 0301 	mvn.w	r3, #1
    }
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	bd80      	pop	{r7, pc}

08010e1a <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 8010e1a:	b580      	push	{r7, lr}
 8010e1c:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 8010e1e:	f004 f825 	bl	8014e6c <LoRaMacHalt>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d101      	bne.n	8010e2c <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	e001      	b.n	8010e30 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010e2c:	f06f 0301 	mvn.w	r3, #1
    }
}
 8010e30:	4618      	mov	r0, r3
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b08e      	sub	sp, #56	; 0x38
 8010e38:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 8010e40:	2300      	movs	r3, #0
 8010e42:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 8010e44:	f7ff ffe9 	bl	8010e1a <LmHandlerHalt>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 8010e4e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d12f      	bne.n	8010eb6 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 8010e56:	f000 f84f 	bl	8010ef8 <NvmDataMgmtStoreBegin>
 8010e5a:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 8010e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5e:	f113 0f02 	cmn.w	r3, #2
 8010e62:	d103      	bne.n	8010e6c <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8010e64:	23f8      	movs	r3, #248	; 0xf8
 8010e66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010e6a:	e01c      	b.n	8010ea6 <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 8010e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d104      	bne.n	8010e7c <LmHandlerNvmDataStore+0x48>
 8010e72:	4b1b      	ldr	r3, [pc, #108]	; (8010ee0 <LmHandlerNvmDataStore+0xac>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	695b      	ldr	r3, [r3, #20]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d103      	bne.n	8010e84 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8010e7c:	23ff      	movs	r3, #255	; 0xff
 8010e7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010e82:	e010      	b.n	8010ea6 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 8010e84:	2326      	movs	r3, #38	; 0x26
 8010e86:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 8010e88:	1d3b      	adds	r3, r7, #4
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f004 f8ae 	bl	8014fec <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 8010e94:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 8010e98:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 8010e9a:	4b11      	ldr	r3, [pc, #68]	; (8010ee0 <LmHandlerNvmDataStore+0xac>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	695b      	ldr	r3, [r3, #20]
 8010ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010ea2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ea4:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 8010ea6:	f000 f82f 	bl	8010f08 <NvmDataMgmtStoreEnd>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d002      	beq.n	8010eb6 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8010eb0:	23ff      	movs	r3, #255	; 0xff
 8010eb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 8010eb6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d109      	bne.n	8010ed2 <LmHandlerNvmDataStore+0x9e>
 8010ebe:	4b08      	ldr	r3, [pc, #32]	; (8010ee0 <LmHandlerNvmDataStore+0xac>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	69db      	ldr	r3, [r3, #28]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d004      	beq.n	8010ed2 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 8010ec8:	4b05      	ldr	r3, [pc, #20]	; (8010ee0 <LmHandlerNvmDataStore+0xac>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	69db      	ldr	r3, [r3, #28]
 8010ece:	2001      	movs	r0, #1
 8010ed0:	4798      	blx	r3
    }

    return lmhStatus;
 8010ed2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3738      	adds	r7, #56	; 0x38
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}
 8010ede:	bf00      	nop
 8010ee0:	20000cb4 	.word	0x20000cb4

08010ee4 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 8010ee4:	b480      	push	{r7}
 8010ee6:	b083      	sub	sp, #12
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	4603      	mov	r3, r0
 8010eec:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8010eee:	bf00      	nop
 8010ef0:	370c      	adds	r7, #12
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bc80      	pop	{r7}
 8010ef6:	4770      	bx	lr

08010ef8 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 8010ef8:	b480      	push	{r7}
 8010efa:	af00      	add	r7, sp, #0
    {
        return NVM_DATA_NOT_AVAILABLE;
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 8010efc:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bc80      	pop	{r7}
 8010f06:	4770      	bx	lr

08010f08 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 8010f08:	b480      	push	{r7}
 8010f0a:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 8010f0c:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010f10:	4618      	mov	r0, r3
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bc80      	pop	{r7}
 8010f16:	4770      	bx	lr

08010f18 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 8010f18:	b480      	push	{r7}
 8010f1a:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 8010f1c:	4b02      	ldr	r3, [pc, #8]	; (8010f28 <LmhpCompliancePackageFactory+0x10>)
}
 8010f1e:	4618      	mov	r0, r3
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bc80      	pop	{r7}
 8010f24:	4770      	bx	lr
 8010f26:	bf00      	nop
 8010f28:	20000110 	.word	0x20000110

08010f2c <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 8010f2c:	b480      	push	{r7}
 8010f2e:	b085      	sub	sp, #20
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	60f8      	str	r0, [r7, #12]
 8010f34:	60b9      	str	r1, [r7, #8]
 8010f36:	4613      	mov	r3, r2
 8010f38:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d00f      	beq.n	8010f60 <LmhpComplianceInit+0x34>
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d00c      	beq.n	8010f60 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 8010f46:	4a0c      	ldr	r2, [pc, #48]	; (8010f78 <LmhpComplianceInit+0x4c>)
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 8010f4c:	4a0b      	ldr	r2, [pc, #44]	; (8010f7c <LmhpComplianceInit+0x50>)
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8010f52:	4a0a      	ldr	r2, [pc, #40]	; (8010f7c <LmhpComplianceInit+0x50>)
 8010f54:	79fb      	ldrb	r3, [r7, #7]
 8010f56:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 8010f58:	4b08      	ldr	r3, [pc, #32]	; (8010f7c <LmhpComplianceInit+0x50>)
 8010f5a:	2201      	movs	r2, #1
 8010f5c:	701a      	strb	r2, [r3, #0]
 8010f5e:	e006      	b.n	8010f6e <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 8010f60:	4b05      	ldr	r3, [pc, #20]	; (8010f78 <LmhpComplianceInit+0x4c>)
 8010f62:	2200      	movs	r2, #0
 8010f64:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 8010f66:	4b05      	ldr	r3, [pc, #20]	; (8010f7c <LmhpComplianceInit+0x50>)
 8010f68:	2200      	movs	r2, #0
 8010f6a:	701a      	strb	r2, [r3, #0]
    }
}
 8010f6c:	bf00      	nop
 8010f6e:	bf00      	nop
 8010f70:	3714      	adds	r7, #20
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bc80      	pop	{r7}
 8010f76:	4770      	bx	lr
 8010f78:	20000e20 	.word	0x20000e20
 8010f7c:	20000e0c 	.word	0x20000e0c

08010f80 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 8010f80:	b480      	push	{r7}
 8010f82:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 8010f84:	4b02      	ldr	r3, [pc, #8]	; (8010f90 <LmhpComplianceIsInitialized+0x10>)
 8010f86:	781b      	ldrb	r3, [r3, #0]
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bc80      	pop	{r7}
 8010f8e:	4770      	bx	lr
 8010f90:	20000e0c 	.word	0x20000e0c

08010f94 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 8010f94:	b480      	push	{r7}
 8010f96:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8010f98:	4b07      	ldr	r3, [pc, #28]	; (8010fb8 <LmhpComplianceIsRunning+0x24>)
 8010f9a:	781b      	ldrb	r3, [r3, #0]
 8010f9c:	f083 0301 	eor.w	r3, r3, #1
 8010fa0:	b2db      	uxtb	r3, r3
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d001      	beq.n	8010faa <LmhpComplianceIsRunning+0x16>
    {
        return false;
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	e001      	b.n	8010fae <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 8010faa:	4b03      	ldr	r3, [pc, #12]	; (8010fb8 <LmhpComplianceIsRunning+0x24>)
 8010fac:	785b      	ldrb	r3, [r3, #1]
}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bc80      	pop	{r7}
 8010fb4:	4770      	bx	lr
 8010fb6:	bf00      	nop
 8010fb8:	20000e0c 	.word	0x20000e0c

08010fbc <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 8010fbc:	b480      	push	{r7}
 8010fbe:	b083      	sub	sp, #12
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 8010fc4:	4b0f      	ldr	r3, [pc, #60]	; (8011004 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	f083 0301 	eor.w	r3, r3, #1
 8010fcc:	b2db      	uxtb	r3, r3
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d112      	bne.n	8010ff8 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 8010fd2:	4b0c      	ldr	r3, [pc, #48]	; (8011004 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010fd4:	785b      	ldrb	r3, [r3, #1]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d00f      	beq.n	8010ffa <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 8010fde:	2b01      	cmp	r3, #1
 8010fe0:	d10b      	bne.n	8010ffa <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d007      	beq.n	8010ffa <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 8010fea:	4b06      	ldr	r3, [pc, #24]	; (8011004 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010fec:	899b      	ldrh	r3, [r3, #12]
 8010fee:	3301      	adds	r3, #1
 8010ff0:	b29a      	uxth	r2, r3
 8010ff2:	4b04      	ldr	r3, [pc, #16]	; (8011004 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010ff4:	819a      	strh	r2, [r3, #12]
 8010ff6:	e000      	b.n	8010ffa <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 8010ff8:	bf00      	nop
    }
}
 8010ffa:	370c      	adds	r7, #12
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bc80      	pop	{r7}
 8011000:	4770      	bx	lr
 8011002:	bf00      	nop
 8011004:	20000e0c 	.word	0x20000e0c

08011008 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8011008:	b480      	push	{r7}
 801100a:	b083      	sub	sp, #12
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8011010:	4b12      	ldr	r3, [pc, #72]	; (801105c <LmhpComplianceOnMlmeConfirm+0x54>)
 8011012:	781b      	ldrb	r3, [r3, #0]
 8011014:	f083 0301 	eor.w	r3, r3, #1
 8011018:	b2db      	uxtb	r3, r3
 801101a:	2b00      	cmp	r3, #0
 801101c:	d116      	bne.n	801104c <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 801101e:	4b0f      	ldr	r3, [pc, #60]	; (801105c <LmhpComplianceOnMlmeConfirm+0x54>)
 8011020:	785b      	ldrb	r3, [r3, #1]
 8011022:	f083 0301 	eor.w	r3, r3, #1
 8011026:	b2db      	uxtb	r3, r3
 8011028:	2b00      	cmp	r3, #0
 801102a:	d111      	bne.n	8011050 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	781b      	ldrb	r3, [r3, #0]
 8011030:	2b04      	cmp	r3, #4
 8011032:	d10e      	bne.n	8011052 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 8011034:	4b09      	ldr	r3, [pc, #36]	; (801105c <LmhpComplianceOnMlmeConfirm+0x54>)
 8011036:	2201      	movs	r2, #1
 8011038:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	7a1a      	ldrb	r2, [r3, #8]
 801103e:	4b07      	ldr	r3, [pc, #28]	; (801105c <LmhpComplianceOnMlmeConfirm+0x54>)
 8011040:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	7a5a      	ldrb	r2, [r3, #9]
 8011046:	4b05      	ldr	r3, [pc, #20]	; (801105c <LmhpComplianceOnMlmeConfirm+0x54>)
 8011048:	741a      	strb	r2, [r3, #16]
 801104a:	e002      	b.n	8011052 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 801104c:	bf00      	nop
 801104e:	e000      	b.n	8011052 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 8011050:	bf00      	nop
    }
}
 8011052:	370c      	adds	r7, #12
 8011054:	46bd      	mov	sp, r7
 8011056:	bc80      	pop	{r7}
 8011058:	4770      	bx	lr
 801105a:	bf00      	nop
 801105c:	20000e0c 	.word	0x20000e0c

08011060 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b082      	sub	sp, #8
 8011064:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8011066:	4b33      	ldr	r3, [pc, #204]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 8011068:	781b      	ldrb	r3, [r3, #0]
 801106a:	f083 0301 	eor.w	r3, r3, #1
 801106e:	b2db      	uxtb	r3, r3
 8011070:	2b00      	cmp	r3, #0
 8011072:	d002      	beq.n	801107a <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 8011074:	f04f 33ff 	mov.w	r3, #4294967295
 8011078:	e057      	b.n	801112a <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.IsRunning == false )
 801107a:	4b2e      	ldr	r3, [pc, #184]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 801107c:	785b      	ldrb	r3, [r3, #1]
 801107e:	f083 0301 	eor.w	r3, r3, #1
 8011082:	b2db      	uxtb	r3, r3
 8011084:	2b00      	cmp	r3, #0
 8011086:	d001      	beq.n	801108c <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8011088:	2300      	movs	r3, #0
 801108a:	e04e      	b.n	801112a <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.LinkCheck == true )
 801108c:	4b29      	ldr	r3, [pc, #164]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 801108e:	7b9b      	ldrb	r3, [r3, #14]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d019      	beq.n	80110c8 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 8011094:	4b27      	ldr	r3, [pc, #156]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 8011096:	2200      	movs	r2, #0
 8011098:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 801109a:	4b26      	ldr	r3, [pc, #152]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 801109c:	2203      	movs	r2, #3
 801109e:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 80110a0:	4b24      	ldr	r3, [pc, #144]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 80110a2:	689b      	ldr	r3, [r3, #8]
 80110a4:	2205      	movs	r2, #5
 80110a6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 80110a8:	4b22      	ldr	r3, [pc, #136]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 80110aa:	689b      	ldr	r3, [r3, #8]
 80110ac:	3301      	adds	r3, #1
 80110ae:	4a21      	ldr	r2, [pc, #132]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 80110b0:	7bd2      	ldrb	r2, [r2, #15]
 80110b2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 80110b4:	4b1f      	ldr	r3, [pc, #124]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 80110b6:	689b      	ldr	r3, [r3, #8]
 80110b8:	3302      	adds	r3, #2
 80110ba:	4a1e      	ldr	r2, [pc, #120]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 80110bc:	7c12      	ldrb	r2, [r2, #16]
 80110be:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 80110c0:	4b1c      	ldr	r3, [pc, #112]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 80110c2:	2201      	movs	r2, #1
 80110c4:	709a      	strb	r2, [r3, #2]
 80110c6:	e01c      	b.n	8011102 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 80110c8:	4b1a      	ldr	r3, [pc, #104]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 80110ca:	789b      	ldrb	r3, [r3, #2]
 80110cc:	2b01      	cmp	r3, #1
 80110ce:	d005      	beq.n	80110dc <LmhpComplianceTxProcess+0x7c>
 80110d0:	2b04      	cmp	r3, #4
 80110d2:	d116      	bne.n	8011102 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 80110d4:	4b17      	ldr	r3, [pc, #92]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 80110d6:	2201      	movs	r2, #1
 80110d8:	709a      	strb	r2, [r3, #2]
            break;
 80110da:	e012      	b.n	8011102 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 80110dc:	4b15      	ldr	r3, [pc, #84]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 80110de:	2202      	movs	r2, #2
 80110e0:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 80110e2:	4b14      	ldr	r3, [pc, #80]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 80110e4:	899b      	ldrh	r3, [r3, #12]
 80110e6:	0a1b      	lsrs	r3, r3, #8
 80110e8:	b29a      	uxth	r2, r3
 80110ea:	4b12      	ldr	r3, [pc, #72]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 80110ec:	689b      	ldr	r3, [r3, #8]
 80110ee:	b2d2      	uxtb	r2, r2
 80110f0:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 80110f2:	4b10      	ldr	r3, [pc, #64]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 80110f4:	899a      	ldrh	r2, [r3, #12]
 80110f6:	4b0f      	ldr	r3, [pc, #60]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 80110f8:	689b      	ldr	r3, [r3, #8]
 80110fa:	3301      	adds	r3, #1
 80110fc:	b2d2      	uxtb	r2, r2
 80110fe:	701a      	strb	r2, [r3, #0]
            break;
 8011100:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 8011102:	23e0      	movs	r3, #224	; 0xe0
 8011104:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 8011106:	4b0b      	ldr	r3, [pc, #44]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 8011108:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 801110a:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 801110c:	4b09      	ldr	r3, [pc, #36]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 801110e:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 8011110:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 8011112:	4809      	ldr	r0, [pc, #36]	; (8011138 <LmhpComplianceTxProcess+0xd8>)
 8011114:	f00f f9a0 	bl	8020458 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 8011118:	4b08      	ldr	r3, [pc, #32]	; (801113c <LmhpComplianceTxProcess+0xdc>)
 801111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801111c:	4a05      	ldr	r2, [pc, #20]	; (8011134 <LmhpComplianceTxProcess+0xd4>)
 801111e:	78d2      	ldrb	r2, [r2, #3]
 8011120:	4611      	mov	r1, r2
 8011122:	4638      	mov	r0, r7
 8011124:	2201      	movs	r2, #1
 8011126:	4798      	blx	r3
 8011128:	4603      	mov	r3, r0
}
 801112a:	4618      	mov	r0, r3
 801112c:	3708      	adds	r7, #8
 801112e:	46bd      	mov	sp, r7
 8011130:	bd80      	pop	{r7, pc}
 8011132:	bf00      	nop
 8011134:	20000e0c 	.word	0x20000e0c
 8011138:	20000df4 	.word	0x20000df4
 801113c:	20000110 	.word	0x20000110

08011140 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b0a2      	sub	sp, #136	; 0x88
 8011144:	af02      	add	r7, sp, #8
 8011146:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8011148:	4ba3      	ldr	r3, [pc, #652]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 801114a:	781b      	ldrb	r3, [r3, #0]
 801114c:	f083 0301 	eor.w	r3, r3, #1
 8011150:	b2db      	uxtb	r3, r3
 8011152:	2b00      	cmp	r3, #0
 8011154:	f040 81c2 	bne.w	80114dc <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	7b5b      	ldrb	r3, [r3, #13]
 801115c:	f083 0301 	eor.w	r3, r3, #1
 8011160:	b2db      	uxtb	r3, r3
 8011162:	2b00      	cmp	r3, #0
 8011164:	f040 81bc 	bne.w	80114e0 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 8011168:	4b9b      	ldr	r3, [pc, #620]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 801116a:	785b      	ldrb	r3, [r3, #1]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d00c      	beq.n	801118a <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	7b9b      	ldrb	r3, [r3, #14]
 8011174:	f083 0301 	eor.w	r3, r3, #1
 8011178:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 801117a:	2b00      	cmp	r3, #0
 801117c:	d005      	beq.n	801118a <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 801117e:	4b96      	ldr	r3, [pc, #600]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8011180:	899b      	ldrh	r3, [r3, #12]
 8011182:	3301      	adds	r3, #1
 8011184:	b29a      	uxth	r2, r3
 8011186:	4b94      	ldr	r3, [pc, #592]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8011188:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	78db      	ldrb	r3, [r3, #3]
 801118e:	2be0      	cmp	r3, #224	; 0xe0
 8011190:	f040 81a8 	bne.w	80114e4 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8011194:	4b90      	ldr	r3, [pc, #576]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8011196:	785b      	ldrb	r3, [r3, #1]
 8011198:	f083 0301 	eor.w	r3, r3, #1
 801119c:	b2db      	uxtb	r3, r3
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d060      	beq.n	8011264 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	7b1b      	ldrb	r3, [r3, #12]
 80111a6:	2b04      	cmp	r3, #4
 80111a8:	f040 81a1 	bne.w	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	689b      	ldr	r3, [r3, #8]
 80111b0:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80111b2:	2b01      	cmp	r3, #1
 80111b4:	f040 819b 	bne.w	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	689b      	ldr	r3, [r3, #8]
 80111bc:	3301      	adds	r3, #1
 80111be:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80111c0:	2b01      	cmp	r3, #1
 80111c2:	f040 8194 	bne.w	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	689b      	ldr	r3, [r3, #8]
 80111ca:	3302      	adds	r3, #2
 80111cc:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80111ce:	2b01      	cmp	r3, #1
 80111d0:	f040 818d 	bne.w	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	689b      	ldr	r3, [r3, #8]
 80111d8:	3303      	adds	r3, #3
 80111da:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80111dc:	2b01      	cmp	r3, #1
 80111de:	f040 8186 	bne.w	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 80111e2:	4b7d      	ldr	r3, [pc, #500]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 80111e4:	2200      	movs	r2, #0
 80111e6:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 80111e8:	4b7b      	ldr	r3, [pc, #492]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 80111ea:	22e0      	movs	r2, #224	; 0xe0
 80111ec:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 80111ee:	4b7a      	ldr	r3, [pc, #488]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 80111f0:	2202      	movs	r2, #2
 80111f2:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 80111f4:	4b78      	ldr	r3, [pc, #480]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 80111f6:	2200      	movs	r2, #0
 80111f8:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 80111fa:	4b77      	ldr	r3, [pc, #476]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 80111fc:	2200      	movs	r2, #0
 80111fe:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8011200:	4b75      	ldr	r3, [pc, #468]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8011202:	2200      	movs	r2, #0
 8011204:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8011206:	4b74      	ldr	r3, [pc, #464]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8011208:	2200      	movs	r2, #0
 801120a:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 801120c:	4b72      	ldr	r3, [pc, #456]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 801120e:	2201      	movs	r2, #1
 8011210:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8011212:	4b71      	ldr	r3, [pc, #452]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8011214:	2201      	movs	r2, #1
 8011216:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 8011218:	2304      	movs	r3, #4
 801121a:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 801121c:	2301      	movs	r3, #1
 801121e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8011220:	f107 0308 	add.w	r3, r7, #8
 8011224:	4618      	mov	r0, r3
 8011226:	f004 f867 	bl	80152f8 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 801122a:	2000      	movs	r0, #0
 801122c:	f004 fdf4 	bl	8015e18 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8011230:	4b6a      	ldr	r3, [pc, #424]	; (80113dc <LmhpComplianceOnMcpsIndication+0x29c>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d003      	beq.n	8011242 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 801123a:	4b68      	ldr	r3, [pc, #416]	; (80113dc <LmhpComplianceOnMcpsIndication+0x29c>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	685b      	ldr	r3, [r3, #4]
 8011240:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8011242:	2300      	movs	r3, #0
 8011244:	9300      	str	r3, [sp, #0]
 8011246:	4b66      	ldr	r3, [pc, #408]	; (80113e0 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8011248:	2200      	movs	r2, #0
 801124a:	f04f 31ff 	mov.w	r1, #4294967295
 801124e:	4865      	ldr	r0, [pc, #404]	; (80113e4 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8011250:	f00f f8cc 	bl	80203ec <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8011254:	f241 3188 	movw	r1, #5000	; 0x1388
 8011258:	4862      	ldr	r0, [pc, #392]	; (80113e4 <LmhpComplianceOnMcpsIndication+0x2a4>)
 801125a:	f00f f9db 	bl	8020614 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 801125e:	f7ff feff 	bl	8011060 <LmhpComplianceTxProcess>
 8011262:	e144      	b.n	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	689b      	ldr	r3, [r3, #8]
 8011268:	781a      	ldrb	r2, [r3, #0]
 801126a:	4b5b      	ldr	r3, [pc, #364]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 801126c:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 801126e:	4b5a      	ldr	r3, [pc, #360]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8011270:	789b      	ldrb	r3, [r3, #2]
 8011272:	2b0a      	cmp	r3, #10
 8011274:	f200 8138 	bhi.w	80114e8 <LmhpComplianceOnMcpsIndication+0x3a8>
 8011278:	a201      	add	r2, pc, #4	; (adr r2, 8011280 <LmhpComplianceOnMcpsIndication+0x140>)
 801127a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801127e:	bf00      	nop
 8011280:	080112ad 	.word	0x080112ad
 8011284:	080112f7 	.word	0x080112f7
 8011288:	080112ff 	.word	0x080112ff
 801128c:	0801130d 	.word	0x0801130d
 8011290:	0801131b 	.word	0x0801131b
 8011294:	08011373 	.word	0x08011373
 8011298:	08011385 	.word	0x08011385
 801129c:	080113ed 	.word	0x080113ed
 80112a0:	08011495 	.word	0x08011495
 80112a4:	080114a7 	.word	0x080114a7
 80112a8:	080114c1 	.word	0x080114c1
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 80112ac:	484d      	ldr	r0, [pc, #308]	; (80113e4 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80112ae:	f00f f941 	bl	8020534 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 80112b2:	4b49      	ldr	r3, [pc, #292]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 80112b4:	2200      	movs	r2, #0
 80112b6:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 80112b8:	4b47      	ldr	r3, [pc, #284]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 80112ba:	2200      	movs	r2, #0
 80112bc:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 80112be:	2304      	movs	r3, #4
 80112c0:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80112c2:	4b46      	ldr	r3, [pc, #280]	; (80113dc <LmhpComplianceOnMcpsIndication+0x29c>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	781b      	ldrb	r3, [r3, #0]
 80112c8:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80112ca:	f107 0308 	add.w	r3, r7, #8
 80112ce:	4618      	mov	r0, r3
 80112d0:	f004 f812 	bl	80152f8 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80112d4:	4b41      	ldr	r3, [pc, #260]	; (80113dc <LmhpComplianceOnMcpsIndication+0x29c>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	785b      	ldrb	r3, [r3, #1]
 80112da:	4618      	mov	r0, r3
 80112dc:	f004 fd9c 	bl	8015e18 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 80112e0:	4b3e      	ldr	r3, [pc, #248]	; (80113dc <LmhpComplianceOnMcpsIndication+0x29c>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	689b      	ldr	r3, [r3, #8]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	f000 8100 	beq.w	80114ec <LmhpComplianceOnMcpsIndication+0x3ac>
                {
                    LmhpComplianceParams->StartPeripherals( );
 80112ec:	4b3b      	ldr	r3, [pc, #236]	; (80113dc <LmhpComplianceOnMcpsIndication+0x29c>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	689b      	ldr	r3, [r3, #8]
 80112f2:	4798      	blx	r3
                }
            }
            break;
 80112f4:	e0fa      	b.n	80114ec <LmhpComplianceOnMcpsIndication+0x3ac>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 80112f6:	4b38      	ldr	r3, [pc, #224]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 80112f8:	2202      	movs	r2, #2
 80112fa:	719a      	strb	r2, [r3, #6]
            break;
 80112fc:	e0f7      	b.n	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 80112fe:	4b36      	ldr	r3, [pc, #216]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8011300:	2201      	movs	r2, #1
 8011302:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8011304:	4b34      	ldr	r3, [pc, #208]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8011306:	2201      	movs	r2, #1
 8011308:	709a      	strb	r2, [r3, #2]
            break;
 801130a:	e0f0      	b.n	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 801130c:	4b32      	ldr	r3, [pc, #200]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 801130e:	2200      	movs	r2, #0
 8011310:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8011312:	4b31      	ldr	r3, [pc, #196]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8011314:	2201      	movs	r2, #1
 8011316:	709a      	strb	r2, [r3, #2]
            break;
 8011318:	e0e9      	b.n	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	7b1a      	ldrb	r2, [r3, #12]
 801131e:	4b2e      	ldr	r3, [pc, #184]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8011320:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 8011322:	4b2d      	ldr	r3, [pc, #180]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8011324:	689b      	ldr	r3, [r3, #8]
 8011326:	2204      	movs	r2, #4
 8011328:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 801132a:	2301      	movs	r3, #1
 801132c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8011330:	e012      	b.n	8011358 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	689a      	ldr	r2, [r3, #8]
 8011336:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801133a:	4413      	add	r3, r2
 801133c:	781a      	ldrb	r2, [r3, #0]
 801133e:	4b26      	ldr	r3, [pc, #152]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8011340:	6899      	ldr	r1, [r3, #8]
 8011342:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011346:	440b      	add	r3, r1
 8011348:	3201      	adds	r2, #1
 801134a:	b2d2      	uxtb	r2, r2
 801134c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 801134e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011352:	3301      	adds	r3, #1
 8011354:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8011358:	4b1f      	ldr	r3, [pc, #124]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 801135a:	795a      	ldrb	r2, [r3, #5]
 801135c:	4b1e      	ldr	r3, [pc, #120]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 801135e:	799b      	ldrb	r3, [r3, #6]
 8011360:	4293      	cmp	r3, r2
 8011362:	bf28      	it	cs
 8011364:	4613      	movcs	r3, r2
 8011366:	b2db      	uxtb	r3, r3
 8011368:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 801136c:	429a      	cmp	r2, r3
 801136e:	d3e0      	bcc.n	8011332 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 8011370:	e0bd      	b.n	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 8011372:	2304      	movs	r3, #4
 8011374:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 8011378:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801137c:	4618      	mov	r0, r3
 801137e:	f004 fb15 	bl	80159ac <LoRaMacMlmeRequest>
            }
            break;
 8011382:	e0b4      	b.n	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 8011384:	4817      	ldr	r0, [pc, #92]	; (80113e4 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8011386:	f00f f8d5 	bl	8020534 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 801138a:	4b13      	ldr	r3, [pc, #76]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 801138c:	2200      	movs	r2, #0
 801138e:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8011390:	4b11      	ldr	r3, [pc, #68]	; (80113d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8011392:	2200      	movs	r2, #0
 8011394:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 8011396:	2304      	movs	r3, #4
 8011398:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 801139a:	4b10      	ldr	r3, [pc, #64]	; (80113dc <LmhpComplianceOnMcpsIndication+0x29c>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	781b      	ldrb	r3, [r3, #0]
 80113a0:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80113a2:	f107 0308 	add.w	r3, r7, #8
 80113a6:	4618      	mov	r0, r3
 80113a8:	f003 ffa6 	bl	80152f8 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80113ac:	4b0b      	ldr	r3, [pc, #44]	; (80113dc <LmhpComplianceOnMcpsIndication+0x29c>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	785b      	ldrb	r3, [r3, #1]
 80113b2:	4618      	mov	r0, r3
 80113b4:	f004 fd30 	bl	8015e18 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 80113b8:	4b08      	ldr	r3, [pc, #32]	; (80113dc <LmhpComplianceOnMcpsIndication+0x29c>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	689b      	ldr	r3, [r3, #8]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d003      	beq.n	80113ca <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 80113c2:	4b06      	ldr	r3, [pc, #24]	; (80113dc <LmhpComplianceOnMcpsIndication+0x29c>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	689b      	ldr	r3, [r3, #8]
 80113c8:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 80113ca:	4b07      	ldr	r3, [pc, #28]	; (80113e8 <LmhpComplianceOnMcpsIndication+0x2a8>)
 80113cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ce:	2101      	movs	r1, #1
 80113d0:	2002      	movs	r0, #2
 80113d2:	4798      	blx	r3
            }
            break;
 80113d4:	e08b      	b.n	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
 80113d6:	bf00      	nop
 80113d8:	20000e0c 	.word	0x20000e0c
 80113dc:	20000e20 	.word	0x20000e20
 80113e0:	08011505 	.word	0x08011505
 80113e4:	20000df4 	.word	0x20000df4
 80113e8:	20000110 	.word	0x20000110
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	7b1b      	ldrb	r3, [r3, #12]
 80113f0:	2b03      	cmp	r3, #3
 80113f2:	d113      	bne.n	801141c <LmhpComplianceOnMcpsIndication+0x2dc>
                {
                    mlmeReq.Type = MLME_TXCW;
 80113f4:	2305      	movs	r3, #5
 80113f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	689b      	ldr	r3, [r3, #8]
 80113fe:	3301      	adds	r3, #1
 8011400:	781b      	ldrb	r3, [r3, #0]
 8011402:	021b      	lsls	r3, r3, #8
 8011404:	b21a      	sxth	r2, r3
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	689b      	ldr	r3, [r3, #8]
 801140a:	3302      	adds	r3, #2
 801140c:	781b      	ldrb	r3, [r3, #0]
 801140e:	b21b      	sxth	r3, r3
 8011410:	4313      	orrs	r3, r2
 8011412:	b21b      	sxth	r3, r3
 8011414:	b29b      	uxth	r3, r3
 8011416:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 801141a:	e032      	b.n	8011482 <LmhpComplianceOnMcpsIndication+0x342>
                }
                else if( mcpsIndication->BufferSize == 7 )
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	7b1b      	ldrb	r3, [r3, #12]
 8011420:	2b07      	cmp	r3, #7
 8011422:	d12e      	bne.n	8011482 <LmhpComplianceOnMcpsIndication+0x342>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 8011424:	2306      	movs	r3, #6
 8011426:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	689b      	ldr	r3, [r3, #8]
 801142e:	3301      	adds	r3, #1
 8011430:	781b      	ldrb	r3, [r3, #0]
 8011432:	021b      	lsls	r3, r3, #8
 8011434:	b21a      	sxth	r2, r3
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	689b      	ldr	r3, [r3, #8]
 801143a:	3302      	adds	r3, #2
 801143c:	781b      	ldrb	r3, [r3, #0]
 801143e:	b21b      	sxth	r3, r3
 8011440:	4313      	orrs	r3, r2
 8011442:	b21b      	sxth	r3, r3
 8011444:	b29b      	uxth	r3, r3
 8011446:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	689b      	ldr	r3, [r3, #8]
 801144e:	3303      	adds	r3, #3
 8011450:	781b      	ldrb	r3, [r3, #0]
 8011452:	041a      	lsls	r2, r3, #16
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	689b      	ldr	r3, [r3, #8]
 8011458:	3304      	adds	r3, #4
 801145a:	781b      	ldrb	r3, [r3, #0]
 801145c:	021b      	lsls	r3, r3, #8
 801145e:	4313      	orrs	r3, r2
 8011460:	687a      	ldr	r2, [r7, #4]
 8011462:	6892      	ldr	r2, [r2, #8]
 8011464:	3205      	adds	r2, #5
 8011466:	7812      	ldrb	r2, [r2, #0]
 8011468:	4313      	orrs	r3, r2
 801146a:	461a      	mov	r2, r3
 801146c:	2364      	movs	r3, #100	; 0x64
 801146e:	fb02 f303 	mul.w	r3, r2, r3
 8011472:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	689b      	ldr	r3, [r3, #8]
 8011478:	3306      	adds	r3, #6
 801147a:	781b      	ldrb	r3, [r3, #0]
 801147c:	b25b      	sxtb	r3, r3
 801147e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 8011482:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011486:	4618      	mov	r0, r3
 8011488:	f004 fa90 	bl	80159ac <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 801148c:	4b19      	ldr	r3, [pc, #100]	; (80114f4 <LmhpComplianceOnMcpsIndication+0x3b4>)
 801148e:	2201      	movs	r2, #1
 8011490:	709a      	strb	r2, [r3, #2]
            }
            break;
 8011492:	e02c      	b.n	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 8011494:	230a      	movs	r3, #10
 8011496:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 801149a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801149e:	4618      	mov	r0, r3
 80114a0:	f004 fa84 	bl	80159ac <LoRaMacMlmeRequest>
            }
            break;
 80114a4:	e023      	b.n	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 80114a6:	2300      	movs	r3, #0
 80114a8:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	689b      	ldr	r3, [r3, #8]
 80114ae:	3301      	adds	r3, #1
 80114b0:	781b      	ldrb	r3, [r3, #0]
 80114b2:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80114b4:	f107 0308 	add.w	r3, r7, #8
 80114b8:	4618      	mov	r0, r3
 80114ba:	f003 ff1d 	bl	80152f8 <LoRaMacMibSetRequestConfirm>
            }
            break;
 80114be:	e016      	b.n	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 80114c0:	230d      	movs	r3, #13
 80114c2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	689b      	ldr	r3, [r3, #8]
 80114ca:	785b      	ldrb	r3, [r3, #1]
 80114cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 80114d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80114d4:	4618      	mov	r0, r3
 80114d6:	f004 fa69 	bl	80159ac <LoRaMacMlmeRequest>
            }
            break;
 80114da:	e008      	b.n	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 80114dc:	bf00      	nop
 80114de:	e006      	b.n	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 80114e0:	bf00      	nop
 80114e2:	e004      	b.n	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 80114e4:	bf00      	nop
 80114e6:	e002      	b.n	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
        default:
            break;
 80114e8:	bf00      	nop
 80114ea:	e000      	b.n	80114ee <LmhpComplianceOnMcpsIndication+0x3ae>
            break;
 80114ec:	bf00      	nop
        }
    }
}
 80114ee:	3780      	adds	r7, #128	; 0x80
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}
 80114f4:	20000e0c 	.word	0x20000e0c

080114f8 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 80114f8:	b480      	push	{r7}
 80114fa:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 80114fc:	bf00      	nop
 80114fe:	46bd      	mov	sp, r7
 8011500:	bc80      	pop	{r7}
 8011502:	4770      	bx	lr

08011504 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b082      	sub	sp, #8
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 801150c:	f7ff fda8 	bl	8011060 <LmhpComplianceTxProcess>
}
 8011510:	bf00      	nop
 8011512:	3708      	adds	r7, #8
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}

08011518 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 8011518:	b590      	push	{r4, r7, lr}
 801151a:	b083      	sub	sp, #12
 801151c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 801151e:	f00f f923 	bl	8020768 <UTIL_TIMER_GetCurrentTime>
 8011522:	4603      	mov	r3, r0
 8011524:	4a16      	ldr	r2, [pc, #88]	; (8011580 <OnRadioTxDone+0x68>)
 8011526:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8011528:	4c16      	ldr	r4, [pc, #88]	; (8011584 <OnRadioTxDone+0x6c>)
 801152a:	463b      	mov	r3, r7
 801152c:	4618      	mov	r0, r3
 801152e:	f00e fa95 	bl	801fa5c <SysTimeGet>
 8011532:	f504 734e 	add.w	r3, r4, #824	; 0x338
 8011536:	463a      	mov	r2, r7
 8011538:	e892 0003 	ldmia.w	r2, {r0, r1}
 801153c:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8011540:	4a11      	ldr	r2, [pc, #68]	; (8011588 <OnRadioTxDone+0x70>)
 8011542:	7813      	ldrb	r3, [r2, #0]
 8011544:	f043 0310 	orr.w	r3, r3, #16
 8011548:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 801154a:	4b0e      	ldr	r3, [pc, #56]	; (8011584 <OnRadioTxDone+0x6c>)
 801154c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011550:	2b00      	cmp	r3, #0
 8011552:	d00a      	beq.n	801156a <OnRadioTxDone+0x52>
 8011554:	4b0b      	ldr	r3, [pc, #44]	; (8011584 <OnRadioTxDone+0x6c>)
 8011556:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801155a:	691b      	ldr	r3, [r3, #16]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d004      	beq.n	801156a <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8011560:	4b08      	ldr	r3, [pc, #32]	; (8011584 <OnRadioTxDone+0x6c>)
 8011562:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011566:	691b      	ldr	r3, [r3, #16]
 8011568:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 801156a:	4b08      	ldr	r3, [pc, #32]	; (801158c <OnRadioTxDone+0x74>)
 801156c:	2201      	movs	r2, #1
 801156e:	2100      	movs	r1, #0
 8011570:	2002      	movs	r0, #2
 8011572:	f00f f9e9 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
}
 8011576:	bf00      	nop
 8011578:	370c      	adds	r7, #12
 801157a:	46bd      	mov	sp, r7
 801157c:	bd90      	pop	{r4, r7, pc}
 801157e:	bf00      	nop
 8011580:	20002184 	.word	0x20002184
 8011584:	20000e24 	.word	0x20000e24
 8011588:	20002180 	.word	0x20002180
 801158c:	08021798 	.word	0x08021798

08011590 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b084      	sub	sp, #16
 8011594:	af00      	add	r7, sp, #0
 8011596:	60f8      	str	r0, [r7, #12]
 8011598:	4608      	mov	r0, r1
 801159a:	4611      	mov	r1, r2
 801159c:	461a      	mov	r2, r3
 801159e:	4603      	mov	r3, r0
 80115a0:	817b      	strh	r3, [r7, #10]
 80115a2:	460b      	mov	r3, r1
 80115a4:	813b      	strh	r3, [r7, #8]
 80115a6:	4613      	mov	r3, r2
 80115a8:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80115aa:	f00f f8dd 	bl	8020768 <UTIL_TIMER_GetCurrentTime>
 80115ae:	4603      	mov	r3, r0
 80115b0:	4a16      	ldr	r2, [pc, #88]	; (801160c <OnRadioRxDone+0x7c>)
 80115b2:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 80115b4:	4a15      	ldr	r2, [pc, #84]	; (801160c <OnRadioRxDone+0x7c>)
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 80115ba:	4a14      	ldr	r2, [pc, #80]	; (801160c <OnRadioRxDone+0x7c>)
 80115bc:	897b      	ldrh	r3, [r7, #10]
 80115be:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 80115c0:	4a12      	ldr	r2, [pc, #72]	; (801160c <OnRadioRxDone+0x7c>)
 80115c2:	893b      	ldrh	r3, [r7, #8]
 80115c4:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 80115c6:	4a11      	ldr	r2, [pc, #68]	; (801160c <OnRadioRxDone+0x7c>)
 80115c8:	79fb      	ldrb	r3, [r7, #7]
 80115ca:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 80115cc:	4a10      	ldr	r2, [pc, #64]	; (8011610 <OnRadioRxDone+0x80>)
 80115ce:	7813      	ldrb	r3, [r2, #0]
 80115d0:	f043 0308 	orr.w	r3, r3, #8
 80115d4:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80115d6:	4b0f      	ldr	r3, [pc, #60]	; (8011614 <OnRadioRxDone+0x84>)
 80115d8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d00a      	beq.n	80115f6 <OnRadioRxDone+0x66>
 80115e0:	4b0c      	ldr	r3, [pc, #48]	; (8011614 <OnRadioRxDone+0x84>)
 80115e2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80115e6:	691b      	ldr	r3, [r3, #16]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d004      	beq.n	80115f6 <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80115ec:	4b09      	ldr	r3, [pc, #36]	; (8011614 <OnRadioRxDone+0x84>)
 80115ee:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80115f2:	691b      	ldr	r3, [r3, #16]
 80115f4:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 80115f6:	4b08      	ldr	r3, [pc, #32]	; (8011618 <OnRadioRxDone+0x88>)
 80115f8:	2201      	movs	r2, #1
 80115fa:	2100      	movs	r1, #0
 80115fc:	2002      	movs	r0, #2
 80115fe:	f00f f9a3 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
}
 8011602:	bf00      	nop
 8011604:	3710      	adds	r7, #16
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}
 801160a:	bf00      	nop
 801160c:	20002188 	.word	0x20002188
 8011610:	20002180 	.word	0x20002180
 8011614:	20000e24 	.word	0x20000e24
 8011618:	080217a8 	.word	0x080217a8

0801161c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 801161c:	b580      	push	{r7, lr}
 801161e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8011620:	4a0e      	ldr	r2, [pc, #56]	; (801165c <OnRadioTxTimeout+0x40>)
 8011622:	7813      	ldrb	r3, [r2, #0]
 8011624:	f043 0304 	orr.w	r3, r3, #4
 8011628:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 801162a:	4b0d      	ldr	r3, [pc, #52]	; (8011660 <OnRadioTxTimeout+0x44>)
 801162c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011630:	2b00      	cmp	r3, #0
 8011632:	d00a      	beq.n	801164a <OnRadioTxTimeout+0x2e>
 8011634:	4b0a      	ldr	r3, [pc, #40]	; (8011660 <OnRadioTxTimeout+0x44>)
 8011636:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801163a:	691b      	ldr	r3, [r3, #16]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d004      	beq.n	801164a <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8011640:	4b07      	ldr	r3, [pc, #28]	; (8011660 <OnRadioTxTimeout+0x44>)
 8011642:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011646:	691b      	ldr	r3, [r3, #16]
 8011648:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 801164a:	4b06      	ldr	r3, [pc, #24]	; (8011664 <OnRadioTxTimeout+0x48>)
 801164c:	2201      	movs	r2, #1
 801164e:	2100      	movs	r1, #0
 8011650:	2002      	movs	r0, #2
 8011652:	f00f f979 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
}
 8011656:	bf00      	nop
 8011658:	bd80      	pop	{r7, pc}
 801165a:	bf00      	nop
 801165c:	20002180 	.word	0x20002180
 8011660:	20000e24 	.word	0x20000e24
 8011664:	080217b8 	.word	0x080217b8

08011668 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8011668:	b580      	push	{r7, lr}
 801166a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 801166c:	4a0b      	ldr	r2, [pc, #44]	; (801169c <OnRadioRxError+0x34>)
 801166e:	7813      	ldrb	r3, [r2, #0]
 8011670:	f043 0302 	orr.w	r3, r3, #2
 8011674:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8011676:	4b0a      	ldr	r3, [pc, #40]	; (80116a0 <OnRadioRxError+0x38>)
 8011678:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801167c:	2b00      	cmp	r3, #0
 801167e:	d00a      	beq.n	8011696 <OnRadioRxError+0x2e>
 8011680:	4b07      	ldr	r3, [pc, #28]	; (80116a0 <OnRadioRxError+0x38>)
 8011682:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011686:	691b      	ldr	r3, [r3, #16]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d004      	beq.n	8011696 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801168c:	4b04      	ldr	r3, [pc, #16]	; (80116a0 <OnRadioRxError+0x38>)
 801168e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011692:	691b      	ldr	r3, [r3, #16]
 8011694:	4798      	blx	r3
    }
}
 8011696:	bf00      	nop
 8011698:	bd80      	pop	{r7, pc}
 801169a:	bf00      	nop
 801169c:	20002180 	.word	0x20002180
 80116a0:	20000e24 	.word	0x20000e24

080116a4 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80116a8:	4a0e      	ldr	r2, [pc, #56]	; (80116e4 <OnRadioRxTimeout+0x40>)
 80116aa:	7813      	ldrb	r3, [r2, #0]
 80116ac:	f043 0301 	orr.w	r3, r3, #1
 80116b0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80116b2:	4b0d      	ldr	r3, [pc, #52]	; (80116e8 <OnRadioRxTimeout+0x44>)
 80116b4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d00a      	beq.n	80116d2 <OnRadioRxTimeout+0x2e>
 80116bc:	4b0a      	ldr	r3, [pc, #40]	; (80116e8 <OnRadioRxTimeout+0x44>)
 80116be:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80116c2:	691b      	ldr	r3, [r3, #16]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d004      	beq.n	80116d2 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80116c8:	4b07      	ldr	r3, [pc, #28]	; (80116e8 <OnRadioRxTimeout+0x44>)
 80116ca:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80116ce:	691b      	ldr	r3, [r3, #16]
 80116d0:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 80116d2:	4b06      	ldr	r3, [pc, #24]	; (80116ec <OnRadioRxTimeout+0x48>)
 80116d4:	2201      	movs	r2, #1
 80116d6:	2100      	movs	r1, #0
 80116d8:	2002      	movs	r0, #2
 80116da:	f00f f935 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
}
 80116de:	bf00      	nop
 80116e0:	bd80      	pop	{r7, pc}
 80116e2:	bf00      	nop
 80116e4:	20002180 	.word	0x20002180
 80116e8:	20000e24 	.word	0x20000e24
 80116ec:	080217c8 	.word	0x080217c8

080116f0 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 80116f0:	b480      	push	{r7}
 80116f2:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80116f4:	4b08      	ldr	r3, [pc, #32]	; (8011718 <UpdateRxSlotIdleState+0x28>)
 80116f6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80116fa:	2b02      	cmp	r3, #2
 80116fc:	d004      	beq.n	8011708 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80116fe:	4b07      	ldr	r3, [pc, #28]	; (801171c <UpdateRxSlotIdleState+0x2c>)
 8011700:	2206      	movs	r2, #6
 8011702:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8011706:	e003      	b.n	8011710 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011708:	4b04      	ldr	r3, [pc, #16]	; (801171c <UpdateRxSlotIdleState+0x2c>)
 801170a:	2202      	movs	r2, #2
 801170c:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
}
 8011710:	bf00      	nop
 8011712:	46bd      	mov	sp, r7
 8011714:	bc80      	pop	{r7}
 8011716:	4770      	bx	lr
 8011718:	20001330 	.word	0x20001330
 801171c:	20000e24 	.word	0x20000e24

08011720 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b08e      	sub	sp, #56	; 0x38
 8011724:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011726:	4b44      	ldr	r3, [pc, #272]	; (8011838 <ProcessRadioTxDone+0x118>)
 8011728:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801172c:	2b02      	cmp	r3, #2
 801172e:	d002      	beq.n	8011736 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8011730:	4b42      	ldr	r3, [pc, #264]	; (801183c <ProcessRadioTxDone+0x11c>)
 8011732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011734:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8011736:	4b42      	ldr	r3, [pc, #264]	; (8011840 <ProcessRadioTxDone+0x120>)
 8011738:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 801173c:	4619      	mov	r1, r3
 801173e:	4841      	ldr	r0, [pc, #260]	; (8011844 <ProcessRadioTxDone+0x124>)
 8011740:	f00e ff68 	bl	8020614 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8011744:	483f      	ldr	r0, [pc, #252]	; (8011844 <ProcessRadioTxDone+0x124>)
 8011746:	f00e fe87 	bl	8020458 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 801174a:	4b3d      	ldr	r3, [pc, #244]	; (8011840 <ProcessRadioTxDone+0x120>)
 801174c:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8011750:	4619      	mov	r1, r3
 8011752:	483d      	ldr	r0, [pc, #244]	; (8011848 <ProcessRadioTxDone+0x128>)
 8011754:	f00e ff5e 	bl	8020614 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8011758:	483b      	ldr	r0, [pc, #236]	; (8011848 <ProcessRadioTxDone+0x128>)
 801175a:	f00e fe7d 	bl	8020458 <UTIL_TIMER_Start>
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 801175e:	4b36      	ldr	r3, [pc, #216]	; (8011838 <ProcessRadioTxDone+0x118>)
 8011760:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011764:	2b02      	cmp	r3, #2
 8011766:	d004      	beq.n	8011772 <ProcessRadioTxDone+0x52>
 8011768:	4b35      	ldr	r3, [pc, #212]	; (8011840 <ProcessRadioTxDone+0x120>)
 801176a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801176e:	2b00      	cmp	r3, #0
 8011770:	d019      	beq.n	80117a6 <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8011772:	2316      	movs	r3, #22
 8011774:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011778:	4b2f      	ldr	r3, [pc, #188]	; (8011838 <ProcessRadioTxDone+0x118>)
 801177a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801177e:	f107 0220 	add.w	r2, r7, #32
 8011782:	4611      	mov	r1, r2
 8011784:	4618      	mov	r0, r3
 8011786:	f008 f9df 	bl	8019b48 <RegionGetPhyParam>
 801178a:	4603      	mov	r3, r0
 801178c:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 801178e:	4b2c      	ldr	r3, [pc, #176]	; (8011840 <ProcessRadioTxDone+0x120>)
 8011790:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8011794:	69fb      	ldr	r3, [r7, #28]
 8011796:	4413      	add	r3, r2
 8011798:	4619      	mov	r1, r3
 801179a:	482c      	ldr	r0, [pc, #176]	; (801184c <ProcessRadioTxDone+0x12c>)
 801179c:	f00e ff3a 	bl	8020614 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 80117a0:	482a      	ldr	r0, [pc, #168]	; (801184c <ProcessRadioTxDone+0x12c>)
 80117a2:	f00e fe59 	bl	8020458 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 80117a6:	4b2a      	ldr	r3, [pc, #168]	; (8011850 <ProcessRadioTxDone+0x130>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	4a23      	ldr	r2, [pc, #140]	; (8011838 <ProcessRadioTxDone+0x118>)
 80117ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 80117ae:	4b24      	ldr	r3, [pc, #144]	; (8011840 <ProcessRadioTxDone+0x120>)
 80117b0:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 80117b4:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80117b6:	4b26      	ldr	r3, [pc, #152]	; (8011850 <ProcessRadioTxDone+0x130>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80117bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80117c0:	4618      	mov	r0, r3
 80117c2:	f00e f983 	bl	801facc <SysTimeGetMcuTime>
 80117c6:	4638      	mov	r0, r7
 80117c8:	4b1b      	ldr	r3, [pc, #108]	; (8011838 <ProcessRadioTxDone+0x118>)
 80117ca:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80117ce:	9200      	str	r2, [sp, #0]
 80117d0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80117d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80117d8:	ca06      	ldmia	r2, {r1, r2}
 80117da:	f00e f8d8 	bl	801f98e <SysTimeSub>
 80117de:	f107 0314 	add.w	r3, r7, #20
 80117e2:	463a      	mov	r2, r7
 80117e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117e8:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80117ec:	4b14      	ldr	r3, [pc, #80]	; (8011840 <ProcessRadioTxDone+0x120>)
 80117ee:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80117f2:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 80117f4:	2301      	movs	r3, #1
 80117f6:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80117f8:	4b0f      	ldr	r3, [pc, #60]	; (8011838 <ProcessRadioTxDone+0x118>)
 80117fa:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d101      	bne.n	8011806 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 8011802:	2300      	movs	r3, #0
 8011804:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8011806:	4b0c      	ldr	r3, [pc, #48]	; (8011838 <ProcessRadioTxDone+0x118>)
 8011808:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801180c:	f107 0208 	add.w	r2, r7, #8
 8011810:	4611      	mov	r1, r2
 8011812:	4618      	mov	r0, r3
 8011814:	f008 f9b0 	bl	8019b78 <RegionSetBandTxDone>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8011818:	4b09      	ldr	r3, [pc, #36]	; (8011840 <ProcessRadioTxDone+0x120>)
 801181a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801181e:	f083 0301 	eor.w	r3, r3, #1
 8011822:	b2db      	uxtb	r3, r3
 8011824:	2b00      	cmp	r3, #0
 8011826:	d003      	beq.n	8011830 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011828:	4b05      	ldr	r3, [pc, #20]	; (8011840 <ProcessRadioTxDone+0x120>)
 801182a:	2200      	movs	r2, #0
 801182c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
#endif /* LORAMAC_VERSION */
}
 8011830:	bf00      	nop
 8011832:	3730      	adds	r7, #48	; 0x30
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}
 8011838:	20001330 	.word	0x20001330
 801183c:	08021e08 	.word	0x08021e08
 8011840:	20000e24 	.word	0x20000e24
 8011844:	200011a4 	.word	0x200011a4
 8011848:	200011bc 	.word	0x200011bc
 801184c:	2000121c 	.word	0x2000121c
 8011850:	20002184 	.word	0x20002184

08011854 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8011854:	b580      	push	{r7, lr}
 8011856:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8011858:	4b10      	ldr	r3, [pc, #64]	; (801189c <PrepareRxDoneAbort+0x48>)
 801185a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801185e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011862:	4a0e      	ldr	r2, [pc, #56]	; (801189c <PrepareRxDoneAbort+0x48>)
 8011864:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8011868:	4b0c      	ldr	r3, [pc, #48]	; (801189c <PrepareRxDoneAbort+0x48>)
 801186a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801186e:	2b00      	cmp	r3, #0
 8011870:	d002      	beq.n	8011878 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 8011872:	2000      	movs	r0, #0
 8011874:	f001 f8f2 	bl	8012a5c <OnAckTimeoutTimerEvent>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8011878:	4a08      	ldr	r2, [pc, #32]	; (801189c <PrepareRxDoneAbort+0x48>)
 801187a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801187e:	f043 0302 	orr.w	r3, r3, #2
 8011882:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011886:	4a05      	ldr	r2, [pc, #20]	; (801189c <PrepareRxDoneAbort+0x48>)
 8011888:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801188c:	f043 0320 	orr.w	r3, r3, #32
 8011890:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

    UpdateRxSlotIdleState( );
 8011894:	f7ff ff2c 	bl	80116f0 <UpdateRxSlotIdleState>
}
 8011898:	bf00      	nop
 801189a:	bd80      	pop	{r7, pc}
 801189c:	20000e24 	.word	0x20000e24

080118a0 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 80118a0:	b5b0      	push	{r4, r5, r7, lr}
 80118a2:	b0a6      	sub	sp, #152	; 0x98
 80118a4:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80118a6:	2313      	movs	r3, #19
 80118a8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 80118ac:	4bb9      	ldr	r3, [pc, #740]	; (8011b94 <ProcessRadioRxDone+0x2f4>)
 80118ae:	685b      	ldr	r3, [r3, #4]
 80118b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 80118b2:	4bb8      	ldr	r3, [pc, #736]	; (8011b94 <ProcessRadioRxDone+0x2f4>)
 80118b4:	891b      	ldrh	r3, [r3, #8]
 80118b6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 80118ba:	4bb6      	ldr	r3, [pc, #728]	; (8011b94 <ProcessRadioRxDone+0x2f4>)
 80118bc:	895b      	ldrh	r3, [r3, #10]
 80118be:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 80118c2:	4bb4      	ldr	r3, [pc, #720]	; (8011b94 <ProcessRadioRxDone+0x2f4>)
 80118c4:	7b1b      	ldrb	r3, [r3, #12]
 80118c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 80118ca:	2300      	movs	r3, #0
 80118cc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 80118d0:	2300      	movs	r3, #0
 80118d2:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80118d4:	4bb0      	ldr	r3, [pc, #704]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 80118d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80118da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 80118de:	2300      	movs	r3, #0
 80118e0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 80118e4:	2301      	movs	r3, #1
 80118e6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 80118ea:	4bac      	ldr	r3, [pc, #688]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 80118ec:	2200      	movs	r2, #0
 80118ee:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 80118f2:	4aaa      	ldr	r2, [pc, #680]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 80118f4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80118f8:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    MacCtx.RxStatus.Snr = snr;
 80118fc:	4aa7      	ldr	r2, [pc, #668]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 80118fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011902:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8011906:	4ba5      	ldr	r3, [pc, #660]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 8011908:	f893 2484 	ldrb.w	r2, [r3, #1156]	; 0x484
 801190c:	4ba3      	ldr	r3, [pc, #652]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 801190e:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
    MacCtx.McpsIndication.Port = 0;
 8011912:	4ba2      	ldr	r3, [pc, #648]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 8011914:	2200      	movs	r2, #0
 8011916:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 801191a:	4ba0      	ldr	r3, [pc, #640]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 801191c:	2200      	movs	r2, #0
 801191e:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 8011922:	4b9e      	ldr	r3, [pc, #632]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 8011924:	2200      	movs	r2, #0
 8011926:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 801192a:	4b9c      	ldr	r3, [pc, #624]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 801192c:	2200      	movs	r2, #0
 801192e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 8011932:	4b9a      	ldr	r3, [pc, #616]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 8011934:	2200      	movs	r2, #0
 8011936:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 801193a:	4b98      	ldr	r3, [pc, #608]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 801193c:	2200      	movs	r2, #0
 801193e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 8011942:	4b96      	ldr	r3, [pc, #600]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 8011944:	2200      	movs	r2, #0
 8011946:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 801194a:	4b94      	ldr	r3, [pc, #592]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 801194c:	2200      	movs	r2, #0
 801194e:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8011952:	4b92      	ldr	r3, [pc, #584]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 8011954:	2200      	movs	r2, #0
 8011956:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 801195a:	4b90      	ldr	r3, [pc, #576]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 801195c:	2200      	movs	r2, #0
 801195e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8011962:	4b8e      	ldr	r3, [pc, #568]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 8011964:	2200      	movs	r2, #0
 8011966:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 801196a:	4b8d      	ldr	r3, [pc, #564]	; (8011ba0 <ProcessRadioRxDone+0x300>)
 801196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801196e:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011970:	488c      	ldr	r0, [pc, #560]	; (8011ba4 <ProcessRadioRxDone+0x304>)
 8011972:	f00e fddf 	bl	8020534 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8011976:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801197a:	4619      	mov	r1, r3
 801197c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801197e:	f005 fd0b 	bl	8017398 <LoRaMacClassBRxBeacon>
 8011982:	4603      	mov	r3, r0
 8011984:	2b00      	cmp	r3, #0
 8011986:	d00a      	beq.n	801199e <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8011988:	4a84      	ldr	r2, [pc, #528]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 801198a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801198e:	f8a2 3476 	strh.w	r3, [r2, #1142]	; 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8011992:	4a82      	ldr	r2, [pc, #520]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 8011994:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011998:	f882 3478 	strb.w	r3, [r2, #1144]	; 0x478
        return;
 801199c:	e3c7      	b.n	801212e <ProcessRadioRxDone+0x88e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801199e:	4b7e      	ldr	r3, [pc, #504]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 80119a0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80119a4:	2b01      	cmp	r3, #1
 80119a6:	d11e      	bne.n	80119e6 <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80119a8:	f005 fe8a 	bl	80176c0 <LoRaMacClassBIsPingExpected>
 80119ac:	4603      	mov	r3, r0
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d00a      	beq.n	80119c8 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80119b2:	2000      	movs	r0, #0
 80119b4:	f005 f856 	bl	8016a64 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80119b8:	2000      	movs	r0, #0
 80119ba:	f005 fa89 	bl	8016ed0 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80119be:	4b77      	ldr	r3, [pc, #476]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 80119c0:	2204      	movs	r2, #4
 80119c2:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 80119c6:	e00e      	b.n	80119e6 <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80119c8:	f005 fe8a 	bl	80176e0 <LoRaMacClassBIsMulticastExpected>
 80119cc:	4603      	mov	r3, r0
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d009      	beq.n	80119e6 <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80119d2:	2000      	movs	r0, #0
 80119d4:	f005 f856 	bl	8016a84 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80119d8:	2000      	movs	r0, #0
 80119da:	f005 fb83 	bl	80170e4 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80119de:	4b6f      	ldr	r3, [pc, #444]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 80119e0:	2205      	movs	r2, #5
 80119e2:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 80119e6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80119ea:	1c5a      	adds	r2, r3, #1
 80119ec:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 80119f0:	461a      	mov	r2, r3
 80119f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80119f4:	4413      	add	r3, r2
 80119f6:	781b      	ldrb	r3, [r3, #0]
 80119f8:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 80119fc:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8011a00:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011a04:	b2db      	uxtb	r3, r3
 8011a06:	3b01      	subs	r3, #1
 8011a08:	2b06      	cmp	r3, #6
 8011a0a:	f200 836a 	bhi.w	80120e2 <ProcessRadioRxDone+0x842>
 8011a0e:	a201      	add	r2, pc, #4	; (adr r2, 8011a14 <ProcessRadioRxDone+0x174>)
 8011a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a14:	08011a31 	.word	0x08011a31
 8011a18:	080120e3 	.word	0x080120e3
 8011a1c:	08011bb1 	.word	0x08011bb1
 8011a20:	080120e3 	.word	0x080120e3
 8011a24:	08011ba9 	.word	0x08011ba9
 8011a28:	080120e3 	.word	0x080120e3
 8011a2c:	08012089 	.word	0x08012089
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8011a30:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011a34:	2b10      	cmp	r3, #16
 8011a36:	d806      	bhi.n	8011a46 <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011a38:	4b58      	ldr	r3, [pc, #352]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 8011a3a:	2201      	movs	r2, #1
 8011a3c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011a40:	f7ff ff08 	bl	8011854 <PrepareRxDoneAbort>
                return;
 8011a44:	e373      	b.n	801212e <ProcessRadioRxDone+0x88e>
            }
            macMsgJoinAccept.Buffer = payload;
 8011a46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011a48:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 8011a4a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011a4e:	b2db      	uxtb	r3, r3
 8011a50:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011a52:	4b51      	ldr	r3, [pc, #324]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011a54:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d006      	beq.n	8011a6a <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011a5c:	4b4f      	ldr	r3, [pc, #316]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 8011a5e:	2201      	movs	r2, #1
 8011a60:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011a64:	f7ff fef6 	bl	8011854 <PrepareRxDoneAbort>
                return;
 8011a68:	e361      	b.n	801212e <ProcessRadioRxDone+0x88e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8011a6a:	f7fe f9a3 	bl	800fdb4 <SecureElementGetJoinEui>
 8011a6e:	4601      	mov	r1, r0
 8011a70:	f107 0308 	add.w	r3, r7, #8
 8011a74:	461a      	mov	r2, r3
 8011a76:	20ff      	movs	r0, #255	; 0xff
 8011a78:	f007 faea 	bl	8019050 <LoRaMacCryptoHandleJoinAccept>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8011a82:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d172      	bne.n	8011b70 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8011a8a:	7c7b      	ldrb	r3, [r7, #17]
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	4b42      	ldr	r3, [pc, #264]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011a90:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8011a94:	4b40      	ldr	r3, [pc, #256]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011a96:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8011a9a:	7cbb      	ldrb	r3, [r7, #18]
 8011a9c:	021b      	lsls	r3, r3, #8
 8011a9e:	4313      	orrs	r3, r2
 8011aa0:	4a3d      	ldr	r2, [pc, #244]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011aa2:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8011aa6:	4b3c      	ldr	r3, [pc, #240]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011aa8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8011aac:	7cfb      	ldrb	r3, [r7, #19]
 8011aae:	041b      	lsls	r3, r3, #16
 8011ab0:	4313      	orrs	r3, r2
 8011ab2:	4a39      	ldr	r2, [pc, #228]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011ab4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	4a37      	ldr	r2, [pc, #220]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011abc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8011ac0:	7e3b      	ldrb	r3, [r7, #24]
 8011ac2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8011ac6:	b2db      	uxtb	r3, r3
 8011ac8:	461a      	mov	r2, r3
 8011aca:	4b33      	ldr	r3, [pc, #204]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011acc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8011ad0:	7e3b      	ldrb	r3, [r7, #24]
 8011ad2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011ad6:	b2db      	uxtb	r3, r3
 8011ad8:	461a      	mov	r2, r3
 8011ada:	4b2f      	ldr	r3, [pc, #188]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011adc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8011ae0:	7e3b      	ldrb	r3, [r7, #24]
 8011ae2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011ae6:	b2db      	uxtb	r3, r3
 8011ae8:	461a      	mov	r2, r3
 8011aea:	4b2b      	ldr	r3, [pc, #172]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011aec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8011af0:	7e7b      	ldrb	r3, [r7, #25]
 8011af2:	461a      	mov	r2, r3
 8011af4:	4b28      	ldr	r3, [pc, #160]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011af6:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8011af8:	4b27      	ldr	r3, [pc, #156]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d102      	bne.n	8011b06 <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8011b00:	4b25      	ldr	r3, [pc, #148]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011b02:	2201      	movs	r2, #1
 8011b04:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8011b06:	4b24      	ldr	r3, [pc, #144]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011b0e:	fb02 f303 	mul.w	r3, r2, r3
 8011b12:	4a21      	ldr	r2, [pc, #132]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011b14:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8011b16:	4b20      	ldr	r3, [pc, #128]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b1a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8011b1e:	4a1e      	ldr	r2, [pc, #120]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011b20:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8011b22:	4b1d      	ldr	r3, [pc, #116]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011b24:	2200      	movs	r2, #0
 8011b26:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8011b2a:	f107 0308 	add.w	r3, r7, #8
 8011b2e:	3312      	adds	r3, #18
 8011b30:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8011b32:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011b36:	b2db      	uxtb	r3, r3
 8011b38:	3b11      	subs	r3, #17
 8011b3a:	b2db      	uxtb	r3, r3
 8011b3c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8011b40:	4b15      	ldr	r3, [pc, #84]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011b42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b46:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8011b4a:	4611      	mov	r1, r2
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f008 f84d 	bl	8019bec <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8011b52:	4b11      	ldr	r3, [pc, #68]	; (8011b98 <ProcessRadioRxDone+0x2f8>)
 8011b54:	2202      	movs	r2, #2
 8011b56:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011b5a:	2001      	movs	r0, #1
 8011b5c:	f006 fd70 	bl	8018640 <LoRaMacConfirmQueueIsCmdActive>
 8011b60:	4603      	mov	r3, r0
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d00e      	beq.n	8011b84 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8011b66:	2101      	movs	r1, #1
 8011b68:	2000      	movs	r0, #0
 8011b6a:	f006 fcdd 	bl	8018528 <LoRaMacConfirmQueueSetStatus>
 8011b6e:	e009      	b.n	8011b84 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011b70:	2001      	movs	r0, #1
 8011b72:	f006 fd65 	bl	8018640 <LoRaMacConfirmQueueIsCmdActive>
 8011b76:	4603      	mov	r3, r0
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d003      	beq.n	8011b84 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8011b7c:	2101      	movs	r1, #1
 8011b7e:	2007      	movs	r0, #7
 8011b80:	f006 fcd2 	bl	8018528 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8011b84:	4a05      	ldr	r2, [pc, #20]	; (8011b9c <ProcessRadioRxDone+0x2fc>)
 8011b86:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011b8a:	f043 0308 	orr.w	r3, r3, #8
 8011b8e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 8011b92:	e2ad      	b.n	80120f0 <ProcessRadioRxDone+0x850>
 8011b94:	20002188 	.word	0x20002188
 8011b98:	20001330 	.word	0x20001330
 8011b9c:	20000e24 	.word	0x20000e24
 8011ba0:	08021e08 	.word	0x08021e08
 8011ba4:	200011bc 	.word	0x200011bc
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8011ba8:	4bb0      	ldr	r3, [pc, #704]	; (8011e6c <ProcessRadioRxDone+0x5cc>)
 8011baa:	2201      	movs	r2, #1
 8011bac:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011bb0:	4baf      	ldr	r3, [pc, #700]	; (8011e70 <ProcessRadioRxDone+0x5d0>)
 8011bb2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011bb6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8011bba:	4bac      	ldr	r3, [pc, #688]	; (8011e6c <ProcessRadioRxDone+0x5cc>)
 8011bbc:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8011bc0:	b25b      	sxtb	r3, r3
 8011bc2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8011bc6:	230d      	movs	r3, #13
 8011bc8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8011bcc:	4ba8      	ldr	r3, [pc, #672]	; (8011e70 <ProcessRadioRxDone+0x5d0>)
 8011bce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d002      	beq.n	8011bdc <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8011bd6:	230e      	movs	r3, #14
 8011bd8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011bdc:	4ba4      	ldr	r3, [pc, #656]	; (8011e70 <ProcessRadioRxDone+0x5d0>)
 8011bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011be2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8011be6:	4611      	mov	r1, r2
 8011be8:	4618      	mov	r0, r3
 8011bea:	f007 ffad 	bl	8019b48 <RegionGetPhyParam>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8011bf2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011bf6:	3b0d      	subs	r3, #13
 8011bf8:	b29b      	uxth	r3, r3
 8011bfa:	b21b      	sxth	r3, r3
 8011bfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011c00:	b21a      	sxth	r2, r3
 8011c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c04:	b21b      	sxth	r3, r3
 8011c06:	429a      	cmp	r2, r3
 8011c08:	dc03      	bgt.n	8011c12 <ProcessRadioRxDone+0x372>
 8011c0a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011c0e:	2b0b      	cmp	r3, #11
 8011c10:	d806      	bhi.n	8011c20 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011c12:	4b96      	ldr	r3, [pc, #600]	; (8011e6c <ProcessRadioRxDone+0x5cc>)
 8011c14:	2201      	movs	r2, #1
 8011c16:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011c1a:	f7ff fe1b 	bl	8011854 <PrepareRxDoneAbort>
                return;
 8011c1e:	e286      	b.n	801212e <ProcessRadioRxDone+0x88e>
            }
            macMsgData.Buffer = payload;
 8011c20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011c22:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 8011c24:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011c28:	b2db      	uxtb	r3, r3
 8011c2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8011c2e:	4b91      	ldr	r3, [pc, #580]	; (8011e74 <ProcessRadioRxDone+0x5d4>)
 8011c30:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8011c32:	23ff      	movs	r3, #255	; 0xff
 8011c34:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8011c38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f007 fd06 	bl	801964e <LoRaMacParserData>
 8011c42:	4603      	mov	r3, r0
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d006      	beq.n	8011c56 <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011c48:	4b88      	ldr	r3, [pc, #544]	; (8011e6c <ProcessRadioRxDone+0x5cc>)
 8011c4a:	2201      	movs	r2, #1
 8011c4c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011c50:	f7ff fe00 	bl	8011854 <PrepareRxDoneAbort>
                return;
 8011c54:	e26b      	b.n	801212e <ProcessRadioRxDone+0x88e>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8011c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c58:	4a84      	ldr	r2, [pc, #528]	; (8011e6c <ProcessRadioRxDone+0x5cc>)
 8011c5a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8011c5e:	1cba      	adds	r2, r7, #2
 8011c60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011c64:	4611      	mov	r1, r2
 8011c66:	4618      	mov	r0, r3
 8011c68:	f002 fc9e 	bl	80145a8 <DetermineFrameType>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d006      	beq.n	8011c80 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011c72:	4b7e      	ldr	r3, [pc, #504]	; (8011e6c <ProcessRadioRxDone+0x5cc>)
 8011c74:	2201      	movs	r2, #1
 8011c76:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011c7a:	f7ff fdeb 	bl	8011854 <PrepareRxDoneAbort>
                return;
 8011c7e:	e256      	b.n	801212e <ProcessRadioRxDone+0x88e>
            }

            //Check if it is a multicast message
            multicast = 0;
 8011c80:	2300      	movs	r3, #0
 8011c82:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 8011c86:	2300      	movs	r3, #0
 8011c88:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8011c90:	e049      	b.n	8011d26 <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8011c92:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011c96:	4a76      	ldr	r2, [pc, #472]	; (8011e70 <ProcessRadioRxDone+0x5d0>)
 8011c98:	212c      	movs	r1, #44	; 0x2c
 8011c9a:	fb01 f303 	mul.w	r3, r1, r3
 8011c9e:	4413      	add	r3, r2
 8011ca0:	33dc      	adds	r3, #220	; 0xdc
 8011ca2:	681a      	ldr	r2, [r3, #0]
 8011ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d138      	bne.n	8011d1c <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8011caa:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011cae:	4a70      	ldr	r2, [pc, #448]	; (8011e70 <ProcessRadioRxDone+0x5d0>)
 8011cb0:	212c      	movs	r1, #44	; 0x2c
 8011cb2:	fb01 f303 	mul.w	r3, r1, r3
 8011cb6:	4413      	add	r3, r2
 8011cb8:	33da      	adds	r3, #218	; 0xda
 8011cba:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d02d      	beq.n	8011d1c <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8011cc6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011cca:	4a69      	ldr	r2, [pc, #420]	; (8011e70 <ProcessRadioRxDone+0x5d0>)
 8011ccc:	212c      	movs	r1, #44	; 0x2c
 8011cce:	fb01 f303 	mul.w	r3, r1, r3
 8011cd2:	4413      	add	r3, r2
 8011cd4:	33db      	adds	r3, #219	; 0xdb
 8011cd6:	781b      	ldrb	r3, [r3, #0]
 8011cd8:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8011cdc:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011ce0:	4a63      	ldr	r2, [pc, #396]	; (8011e70 <ProcessRadioRxDone+0x5d0>)
 8011ce2:	212c      	movs	r1, #44	; 0x2c
 8011ce4:	fb01 f303 	mul.w	r3, r1, r3
 8011ce8:	4413      	add	r3, r2
 8011cea:	33f8      	adds	r3, #248	; 0xf8
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8011cf2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011cf6:	4a5e      	ldr	r2, [pc, #376]	; (8011e70 <ProcessRadioRxDone+0x5d0>)
 8011cf8:	212c      	movs	r1, #44	; 0x2c
 8011cfa:	fb01 f303 	mul.w	r3, r1, r3
 8011cfe:	4413      	add	r3, r2
 8011d00:	33dc      	adds	r3, #220	; 0xdc
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011d08:	4b59      	ldr	r3, [pc, #356]	; (8011e70 <ProcessRadioRxDone+0x5d0>)
 8011d0a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011d0e:	2b02      	cmp	r3, #2
 8011d10:	d10e      	bne.n	8011d30 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8011d12:	4b56      	ldr	r3, [pc, #344]	; (8011e6c <ProcessRadioRxDone+0x5cc>)
 8011d14:	2203      	movs	r2, #3
 8011d16:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
                    }
                    break;
 8011d1a:	e009      	b.n	8011d30 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011d1c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011d20:	3301      	adds	r3, #1
 8011d22:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8011d26:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d0b1      	beq.n	8011c92 <ProcessRadioRxDone+0x3f2>
 8011d2e:	e000      	b.n	8011d32 <ProcessRadioRxDone+0x492>
                    break;
 8011d30:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8011d32:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8011d36:	2b01      	cmp	r3, #1
 8011d38:	d117      	bne.n	8011d6a <ProcessRadioRxDone+0x4ca>
 8011d3a:	78bb      	ldrb	r3, [r7, #2]
 8011d3c:	2b03      	cmp	r3, #3
 8011d3e:	d10d      	bne.n	8011d5c <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8011d40:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011d44:	f003 0320 	and.w	r3, r3, #32
 8011d48:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d106      	bne.n	8011d5c <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 8011d4e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d56:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d006      	beq.n	8011d6a <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011d5c:	4b43      	ldr	r3, [pc, #268]	; (8011e6c <ProcessRadioRxDone+0x5cc>)
 8011d5e:	2201      	movs	r2, #1
 8011d60:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011d64:	f7ff fd76 	bl	8011854 <PrepareRxDoneAbort>
                return;
 8011d68:	e1e1      	b.n	801212e <ProcessRadioRxDone+0x88e>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8011d6a:	2315      	movs	r3, #21
 8011d6c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d70:	4b3f      	ldr	r3, [pc, #252]	; (8011e70 <ProcessRadioRxDone+0x5d0>)
 8011d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d76:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8011d7a:	4611      	mov	r1, r2
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f007 fee3 	bl	8019b48 <RegionGetPhyParam>
 8011d82:	4603      	mov	r3, r0
 8011d84:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 8011d86:	78b9      	ldrb	r1, [r7, #2]
 8011d88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d8a:	b29b      	uxth	r3, r3
 8011d8c:	4d38      	ldr	r5, [pc, #224]	; (8011e70 <ProcessRadioRxDone+0x5d0>)
 8011d8e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8011d92:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 8011d96:	1d3a      	adds	r2, r7, #4
 8011d98:	9202      	str	r2, [sp, #8]
 8011d9a:	1cfa      	adds	r2, r7, #3
 8011d9c:	9201      	str	r2, [sp, #4]
 8011d9e:	9300      	str	r3, [sp, #0]
 8011da0:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 8011da4:	4622      	mov	r2, r4
 8011da6:	f000 fe8f 	bl	8012ac8 <GetFCntDown>
 8011daa:	4603      	mov	r3, r0
 8011dac:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011db0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d035      	beq.n	8011e24 <ProcessRadioRxDone+0x584>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8011db8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011dbc:	2b07      	cmp	r3, #7
 8011dbe:	d119      	bne.n	8011df4 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8011dc0:	4b2a      	ldr	r3, [pc, #168]	; (8011e6c <ProcessRadioRxDone+0x5cc>)
 8011dc2:	2208      	movs	r2, #8
 8011dc4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8011dc8:	4b29      	ldr	r3, [pc, #164]	; (8011e70 <ProcessRadioRxDone+0x5d0>)
 8011dca:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d11d      	bne.n	8011e0e <ProcessRadioRxDone+0x56e>
 8011dd2:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8011dd6:	f023 031f 	bic.w	r3, r3, #31
 8011dda:	b2db      	uxtb	r3, r3
 8011ddc:	2ba0      	cmp	r3, #160	; 0xa0
 8011dde:	d116      	bne.n	8011e0e <ProcessRadioRxDone+0x56e>
 8011de0:	4b23      	ldr	r3, [pc, #140]	; (8011e70 <ProcessRadioRxDone+0x5d0>)
 8011de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d111      	bne.n	8011e0e <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 8011dea:	4b21      	ldr	r3, [pc, #132]	; (8011e70 <ProcessRadioRxDone+0x5d0>)
 8011dec:	2201      	movs	r2, #1
 8011dee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8011df2:	e00c      	b.n	8011e0e <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8011df4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011df8:	2b08      	cmp	r3, #8
 8011dfa:	d104      	bne.n	8011e06 <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8011dfc:	4b1b      	ldr	r3, [pc, #108]	; (8011e6c <ProcessRadioRxDone+0x5cc>)
 8011dfe:	220a      	movs	r2, #10
 8011e00:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8011e04:	e003      	b.n	8011e0e <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011e06:	4b19      	ldr	r3, [pc, #100]	; (8011e6c <ProcessRadioRxDone+0x5cc>)
 8011e08:	2201      	movs	r2, #1
 8011e0a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	4a16      	ldr	r2, [pc, #88]	; (8011e6c <ProcessRadioRxDone+0x5cc>)
 8011e12:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	4a14      	ldr	r2, [pc, #80]	; (8011e6c <ProcessRadioRxDone+0x5cc>)
 8011e1a:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
                PrepareRxDoneAbort( );
 8011e1e:	f7ff fd19 	bl	8011854 <PrepareRxDoneAbort>
                return;
 8011e22:	e184      	b.n	801212e <ProcessRadioRxDone+0x88e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8011e24:	78fa      	ldrb	r2, [r7, #3]
 8011e26:	6879      	ldr	r1, [r7, #4]
 8011e28:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 8011e2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011e30:	9300      	str	r3, [sp, #0]
 8011e32:	460b      	mov	r3, r1
 8011e34:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8011e38:	f007 fa56 	bl	80192e8 <LoRaMacCryptoUnsecureMessage>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011e42:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d016      	beq.n	8011e78 <ProcessRadioRxDone+0x5d8>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8011e4a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011e4e:	2b02      	cmp	r3, #2
 8011e50:	d104      	bne.n	8011e5c <ProcessRadioRxDone+0x5bc>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8011e52:	4b06      	ldr	r3, [pc, #24]	; (8011e6c <ProcessRadioRxDone+0x5cc>)
 8011e54:	220b      	movs	r2, #11
 8011e56:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8011e5a:	e003      	b.n	8011e64 <ProcessRadioRxDone+0x5c4>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8011e5c:	4b03      	ldr	r3, [pc, #12]	; (8011e6c <ProcessRadioRxDone+0x5cc>)
 8011e5e:	220c      	movs	r2, #12
 8011e60:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 8011e64:	f7ff fcf6 	bl	8011854 <PrepareRxDoneAbort>
                return;
 8011e68:	e161      	b.n	801212e <ProcessRadioRxDone+0x88e>
 8011e6a:	bf00      	nop
 8011e6c:	20000e24 	.word	0x20000e24
 8011e70:	20001330 	.word	0x20001330
 8011e74:	2000105c 	.word	0x2000105c
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011e78:	4bae      	ldr	r3, [pc, #696]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 8011e80:	4aac      	ldr	r2, [pc, #688]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011e82:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8011e86:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8011e8a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011e8e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8011e92:	b2db      	uxtb	r3, r3
 8011e94:	461a      	mov	r2, r3
 8011e96:	4ba7      	ldr	r3, [pc, #668]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011e98:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 8011e9c:	4ba5      	ldr	r3, [pc, #660]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 8011ea4:	4ba3      	ldr	r3, [pc, #652]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	4aa1      	ldr	r2, [pc, #644]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011eb0:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	4a9f      	ldr	r2, [pc, #636]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011eb8:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8011ebc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011ec0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011ec4:	b2db      	uxtb	r3, r3
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	bf14      	ite	ne
 8011eca:	2301      	movne	r3, #1
 8011ecc:	2300      	moveq	r3, #0
 8011ece:	b2da      	uxtb	r2, r3
 8011ed0:	4b98      	ldr	r3, [pc, #608]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011ed2:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011ed6:	4b97      	ldr	r3, [pc, #604]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011ed8:	2200      	movs	r2, #0
 8011eda:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8011ede:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011ee2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011ee6:	b2db      	uxtb	r3, r3
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	bf14      	ite	ne
 8011eec:	2301      	movne	r3, #1
 8011eee:	2300      	moveq	r3, #0
 8011ef0:	b2da      	uxtb	r2, r3
 8011ef2:	4b90      	ldr	r3, [pc, #576]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011ef4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011ef8:	4b8e      	ldr	r3, [pc, #568]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011efa:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d004      	beq.n	8011f0c <ProcessRadioRxDone+0x66c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011f02:	4b8c      	ldr	r3, [pc, #560]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011f04:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011f08:	2b01      	cmp	r3, #1
 8011f0a:	d102      	bne.n	8011f12 <ProcessRadioRxDone+0x672>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8011f0c:	4b8a      	ldr	r3, [pc, #552]	; (8012138 <ProcessRadioRxDone+0x898>)
 8011f0e:	2200      	movs	r2, #0
 8011f10:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8011f12:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8011f16:	2b01      	cmp	r3, #1
 8011f18:	d104      	bne.n	8011f24 <ProcessRadioRxDone+0x684>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8011f1a:	4b86      	ldr	r3, [pc, #536]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011f1c:	2202      	movs	r2, #2
 8011f1e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8011f22:	e01f      	b.n	8011f64 <ProcessRadioRxDone+0x6c4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8011f24:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8011f28:	f023 031f 	bic.w	r3, r3, #31
 8011f2c:	b2db      	uxtb	r3, r3
 8011f2e:	2ba0      	cmp	r3, #160	; 0xa0
 8011f30:	d110      	bne.n	8011f54 <ProcessRadioRxDone+0x6b4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8011f32:	4b81      	ldr	r3, [pc, #516]	; (8012138 <ProcessRadioRxDone+0x898>)
 8011f34:	2201      	movs	r2, #1
 8011f36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011f3a:	4b7f      	ldr	r3, [pc, #508]	; (8012138 <ProcessRadioRxDone+0x898>)
 8011f3c:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d102      	bne.n	8011f4a <ProcessRadioRxDone+0x6aa>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8011f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f46:	4a7c      	ldr	r2, [pc, #496]	; (8012138 <ProcessRadioRxDone+0x898>)
 8011f48:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8011f4a:	4b7a      	ldr	r3, [pc, #488]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011f4c:	2201      	movs	r2, #1
 8011f4e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8011f52:	e007      	b.n	8011f64 <ProcessRadioRxDone+0x6c4>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8011f54:	4b78      	ldr	r3, [pc, #480]	; (8012138 <ProcessRadioRxDone+0x898>)
 8011f56:	2200      	movs	r2, #0
 8011f58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8011f5c:	4b75      	ldr	r3, [pc, #468]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011f5e:	2200      	movs	r2, #0
 8011f60:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8011f64:	4b73      	ldr	r3, [pc, #460]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011f66:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8011f6a:	4a72      	ldr	r2, [pc, #456]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011f6c:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 8011f70:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 8011f74:	4618      	mov	r0, r3
 8011f76:	f001 fee9 	bl	8013d4c <RemoveMacCommands>

            switch( fType )
 8011f7a:	78bb      	ldrb	r3, [r7, #2]
 8011f7c:	2b03      	cmp	r3, #3
 8011f7e:	d874      	bhi.n	801206a <ProcessRadioRxDone+0x7ca>
 8011f80:	a201      	add	r2, pc, #4	; (adr r2, 8011f88 <ProcessRadioRxDone+0x6e8>)
 8011f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f86:	bf00      	nop
 8011f88:	08011f99 	.word	0x08011f99
 8011f8c:	08011fe9 	.word	0x08011fe9
 8011f90:	0801201f 	.word	0x0801201f
 8011f94:	08012045 	.word	0x08012045
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011f98:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011f9c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011fa0:	b2db      	uxtb	r3, r3
 8011fa2:	461c      	mov	r4, r3
 8011fa4:	4b63      	ldr	r3, [pc, #396]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011fa6:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8011faa:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8011fae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011fb2:	f102 0010 	add.w	r0, r2, #16
 8011fb6:	9300      	str	r3, [sp, #0]
 8011fb8:	460b      	mov	r3, r1
 8011fba:	4622      	mov	r2, r4
 8011fbc:	2100      	movs	r1, #0
 8011fbe:	f000 fee5 	bl	8012d8c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011fc2:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8011fc6:	4b5b      	ldr	r3, [pc, #364]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011fc8:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011fce:	4a59      	ldr	r2, [pc, #356]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011fd0:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011fd4:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8011fd8:	4b56      	ldr	r3, [pc, #344]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011fda:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8011fde:	4b55      	ldr	r3, [pc, #340]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011fe0:	2201      	movs	r2, #1
 8011fe2:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8011fe6:	e047      	b.n	8012078 <ProcessRadioRxDone+0x7d8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011fe8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011fec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011ff0:	b2db      	uxtb	r3, r3
 8011ff2:	461c      	mov	r4, r3
 8011ff4:	4b4f      	ldr	r3, [pc, #316]	; (8012134 <ProcessRadioRxDone+0x894>)
 8011ff6:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8011ffa:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8011ffe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012002:	f102 0010 	add.w	r0, r2, #16
 8012006:	9300      	str	r3, [sp, #0]
 8012008:	460b      	mov	r3, r1
 801200a:	4622      	mov	r2, r4
 801200c:	2100      	movs	r1, #0
 801200e:	f000 febd 	bl	8012d8c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8012012:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8012016:	4b47      	ldr	r3, [pc, #284]	; (8012134 <ProcessRadioRxDone+0x894>)
 8012018:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 801201c:	e02c      	b.n	8012078 <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 801201e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012020:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8012024:	4b43      	ldr	r3, [pc, #268]	; (8012134 <ProcessRadioRxDone+0x894>)
 8012026:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 801202a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 801202e:	9300      	str	r3, [sp, #0]
 8012030:	460b      	mov	r3, r1
 8012032:	2100      	movs	r1, #0
 8012034:	f000 feaa 	bl	8012d8c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8012038:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801203c:	4b3d      	ldr	r3, [pc, #244]	; (8012134 <ProcessRadioRxDone+0x894>)
 801203e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 8012042:	e019      	b.n	8012078 <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8012044:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8012048:	4b3a      	ldr	r3, [pc, #232]	; (8012134 <ProcessRadioRxDone+0x894>)
 801204a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 801204e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012050:	4a38      	ldr	r2, [pc, #224]	; (8012134 <ProcessRadioRxDone+0x894>)
 8012052:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8012056:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 801205a:	4b36      	ldr	r3, [pc, #216]	; (8012134 <ProcessRadioRxDone+0x894>)
 801205c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8012060:	4b34      	ldr	r3, [pc, #208]	; (8012134 <ProcessRadioRxDone+0x894>)
 8012062:	2201      	movs	r2, #1
 8012064:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8012068:	e006      	b.n	8012078 <ProcessRadioRxDone+0x7d8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801206a:	4b32      	ldr	r3, [pc, #200]	; (8012134 <ProcessRadioRxDone+0x894>)
 801206c:	2201      	movs	r2, #1
 801206e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 8012072:	f7ff fbef 	bl	8011854 <PrepareRxDoneAbort>
                    break;
 8012076:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8012078:	4a2e      	ldr	r2, [pc, #184]	; (8012134 <ProcessRadioRxDone+0x894>)
 801207a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801207e:	f043 0302 	orr.w	r3, r3, #2
 8012082:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

            break;
 8012086:	e033      	b.n	80120f0 <ProcessRadioRxDone+0x850>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8012088:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801208c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801208e:	18d1      	adds	r1, r2, r3
 8012090:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012094:	b29b      	uxth	r3, r3
 8012096:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 801209a:	1ad3      	subs	r3, r2, r3
 801209c:	b29b      	uxth	r3, r3
 801209e:	461a      	mov	r2, r3
 80120a0:	4826      	ldr	r0, [pc, #152]	; (801213c <ProcessRadioRxDone+0x89c>)
 80120a2:	f00a f8fc 	bl	801c29e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80120a6:	4b23      	ldr	r3, [pc, #140]	; (8012134 <ProcessRadioRxDone+0x894>)
 80120a8:	2203      	movs	r2, #3
 80120aa:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80120ae:	4b21      	ldr	r3, [pc, #132]	; (8012134 <ProcessRadioRxDone+0x894>)
 80120b0:	2200      	movs	r2, #0
 80120b2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80120b6:	4b1f      	ldr	r3, [pc, #124]	; (8012134 <ProcessRadioRxDone+0x894>)
 80120b8:	4a20      	ldr	r2, [pc, #128]	; (801213c <ProcessRadioRxDone+0x89c>)
 80120ba:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80120be:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80120c2:	b2da      	uxtb	r2, r3
 80120c4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80120c8:	1ad3      	subs	r3, r2, r3
 80120ca:	b2da      	uxtb	r2, r3
 80120cc:	4b19      	ldr	r3, [pc, #100]	; (8012134 <ProcessRadioRxDone+0x894>)
 80120ce:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 80120d2:	4a18      	ldr	r2, [pc, #96]	; (8012134 <ProcessRadioRxDone+0x894>)
 80120d4:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80120d8:	f043 0302 	orr.w	r3, r3, #2
 80120dc:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 80120e0:	e006      	b.n	80120f0 <ProcessRadioRxDone+0x850>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80120e2:	4b14      	ldr	r3, [pc, #80]	; (8012134 <ProcessRadioRxDone+0x894>)
 80120e4:	2201      	movs	r2, #1
 80120e6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 80120ea:	f7ff fbb3 	bl	8011854 <PrepareRxDoneAbort>
            break;
 80120ee:	bf00      	nop
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 80120f0:	4b10      	ldr	r3, [pc, #64]	; (8012134 <ProcessRadioRxDone+0x894>)
 80120f2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d008      	beq.n	801210c <ProcessRadioRxDone+0x86c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80120fa:	4b0e      	ldr	r3, [pc, #56]	; (8012134 <ProcessRadioRxDone+0x894>)
 80120fc:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8012100:	2b00      	cmp	r3, #0
 8012102:	d00b      	beq.n	801211c <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 8012104:	2000      	movs	r0, #0
 8012106:	f000 fca9 	bl	8012a5c <OnAckTimeoutTimerEvent>
 801210a:	e007      	b.n	801211c <ProcessRadioRxDone+0x87c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 801210c:	4b0a      	ldr	r3, [pc, #40]	; (8012138 <ProcessRadioRxDone+0x898>)
 801210e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012112:	2b02      	cmp	r3, #2
 8012114:	d102      	bne.n	801211c <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 8012116:	2000      	movs	r0, #0
 8012118:	f000 fca0 	bl	8012a5c <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 801211c:	4a05      	ldr	r2, [pc, #20]	; (8012134 <ProcessRadioRxDone+0x894>)
 801211e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8012122:	f043 0320 	orr.w	r3, r3, #32
 8012126:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 801212a:	f7ff fae1 	bl	80116f0 <UpdateRxSlotIdleState>
}
 801212e:	3788      	adds	r7, #136	; 0x88
 8012130:	46bd      	mov	sp, r7
 8012132:	bdb0      	pop	{r4, r5, r7, pc}
 8012134:	20000e24 	.word	0x20000e24
 8012138:	20001330 	.word	0x20001330
 801213c:	2000105c 	.word	0x2000105c

08012140 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8012140:	b580      	push	{r7, lr}
 8012142:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8012144:	4b11      	ldr	r3, [pc, #68]	; (801218c <ProcessRadioTxTimeout+0x4c>)
 8012146:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801214a:	2b02      	cmp	r3, #2
 801214c:	d002      	beq.n	8012154 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 801214e:	4b10      	ldr	r3, [pc, #64]	; (8012190 <ProcessRadioTxTimeout+0x50>)
 8012150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012152:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8012154:	f7ff facc 	bl	80116f0 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8012158:	4b0e      	ldr	r3, [pc, #56]	; (8012194 <ProcessRadioTxTimeout+0x54>)
 801215a:	2202      	movs	r2, #2
 801215c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8012160:	2002      	movs	r0, #2
 8012162:	f006 fa39 	bl	80185d8 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8012166:	4b0b      	ldr	r3, [pc, #44]	; (8012194 <ProcessRadioTxTimeout+0x54>)
 8012168:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801216c:	2b00      	cmp	r3, #0
 801216e:	d003      	beq.n	8012178 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 8012170:	4b08      	ldr	r3, [pc, #32]	; (8012194 <ProcessRadioTxTimeout+0x54>)
 8012172:	2201      	movs	r2, #1
 8012174:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8012178:	4a06      	ldr	r2, [pc, #24]	; (8012194 <ProcessRadioTxTimeout+0x54>)
 801217a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801217e:	f043 0320 	orr.w	r3, r3, #32
 8012182:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
}
 8012186:	bf00      	nop
 8012188:	bd80      	pop	{r7, pc}
 801218a:	bf00      	nop
 801218c:	20001330 	.word	0x20001330
 8012190:	08021e08 	.word	0x08021e08
 8012194:	20000e24 	.word	0x20000e24

08012198 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b084      	sub	sp, #16
 801219c:	af00      	add	r7, sp, #0
 801219e:	4603      	mov	r3, r0
 80121a0:	460a      	mov	r2, r1
 80121a2:	71fb      	strb	r3, [r7, #7]
 80121a4:	4613      	mov	r3, r2
 80121a6:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 80121a8:	2300      	movs	r3, #0
 80121aa:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80121ac:	4b40      	ldr	r3, [pc, #256]	; (80122b0 <HandleRadioRxErrorTimeout+0x118>)
 80121ae:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80121b2:	2b02      	cmp	r3, #2
 80121b4:	d002      	beq.n	80121bc <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 80121b6:	4b3f      	ldr	r3, [pc, #252]	; (80122b4 <HandleRadioRxErrorTimeout+0x11c>)
 80121b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ba:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80121bc:	f005 fa68 	bl	8017690 <LoRaMacClassBIsBeaconExpected>
 80121c0:	4603      	mov	r3, r0
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d007      	beq.n	80121d6 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80121c6:	2002      	movs	r0, #2
 80121c8:	f004 fc16 	bl	80169f8 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80121cc:	2000      	movs	r0, #0
 80121ce:	f004 fc7f 	bl	8016ad0 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 80121d2:	2301      	movs	r3, #1
 80121d4:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80121d6:	4b36      	ldr	r3, [pc, #216]	; (80122b0 <HandleRadioRxErrorTimeout+0x118>)
 80121d8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80121dc:	2b01      	cmp	r3, #1
 80121de:	d119      	bne.n	8012214 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80121e0:	f005 fa6e 	bl	80176c0 <LoRaMacClassBIsPingExpected>
 80121e4:	4603      	mov	r3, r0
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d007      	beq.n	80121fa <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80121ea:	2000      	movs	r0, #0
 80121ec:	f004 fc3a 	bl	8016a64 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80121f0:	2000      	movs	r0, #0
 80121f2:	f004 fe6d 	bl	8016ed0 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80121f6:	2301      	movs	r3, #1
 80121f8:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80121fa:	f005 fa71 	bl	80176e0 <LoRaMacClassBIsMulticastExpected>
 80121fe:	4603      	mov	r3, r0
 8012200:	2b00      	cmp	r3, #0
 8012202:	d007      	beq.n	8012214 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8012204:	2000      	movs	r0, #0
 8012206:	f004 fc3d 	bl	8016a84 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 801220a:	2000      	movs	r0, #0
 801220c:	f004 ff6a 	bl	80170e4 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8012210:	2301      	movs	r3, #1
 8012212:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8012214:	7bfb      	ldrb	r3, [r7, #15]
 8012216:	f083 0301 	eor.w	r3, r3, #1
 801221a:	b2db      	uxtb	r3, r3
 801221c:	2b00      	cmp	r3, #0
 801221e:	d040      	beq.n	80122a2 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8012220:	4b25      	ldr	r3, [pc, #148]	; (80122b8 <HandleRadioRxErrorTimeout+0x120>)
 8012222:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8012226:	2b00      	cmp	r3, #0
 8012228:	d122      	bne.n	8012270 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 801222a:	4b23      	ldr	r3, [pc, #140]	; (80122b8 <HandleRadioRxErrorTimeout+0x120>)
 801222c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8012230:	2b00      	cmp	r3, #0
 8012232:	d003      	beq.n	801223c <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8012234:	4a20      	ldr	r2, [pc, #128]	; (80122b8 <HandleRadioRxErrorTimeout+0x120>)
 8012236:	79fb      	ldrb	r3, [r7, #7]
 8012238:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 801223c:	79fb      	ldrb	r3, [r7, #7]
 801223e:	4618      	mov	r0, r3
 8012240:	f006 f9ca 	bl	80185d8 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8012244:	4b1a      	ldr	r3, [pc, #104]	; (80122b0 <HandleRadioRxErrorTimeout+0x118>)
 8012246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012248:	4618      	mov	r0, r3
 801224a:	f00e fa9f 	bl	802078c <UTIL_TIMER_GetElapsedTime>
 801224e:	4602      	mov	r2, r0
 8012250:	4b19      	ldr	r3, [pc, #100]	; (80122b8 <HandleRadioRxErrorTimeout+0x120>)
 8012252:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8012256:	429a      	cmp	r2, r3
 8012258:	d323      	bcc.n	80122a2 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 801225a:	4818      	ldr	r0, [pc, #96]	; (80122bc <HandleRadioRxErrorTimeout+0x124>)
 801225c:	f00e f96a 	bl	8020534 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8012260:	4a15      	ldr	r2, [pc, #84]	; (80122b8 <HandleRadioRxErrorTimeout+0x120>)
 8012262:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8012266:	f043 0320 	orr.w	r3, r3, #32
 801226a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 801226e:	e018      	b.n	80122a2 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8012270:	4b11      	ldr	r3, [pc, #68]	; (80122b8 <HandleRadioRxErrorTimeout+0x120>)
 8012272:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8012276:	2b00      	cmp	r3, #0
 8012278:	d003      	beq.n	8012282 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 801227a:	4a0f      	ldr	r2, [pc, #60]	; (80122b8 <HandleRadioRxErrorTimeout+0x120>)
 801227c:	79bb      	ldrb	r3, [r7, #6]
 801227e:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8012282:	79bb      	ldrb	r3, [r7, #6]
 8012284:	4618      	mov	r0, r3
 8012286:	f006 f9a7 	bl	80185d8 <LoRaMacConfirmQueueSetStatusCmn>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801228a:	4b09      	ldr	r3, [pc, #36]	; (80122b0 <HandleRadioRxErrorTimeout+0x118>)
 801228c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012290:	2b02      	cmp	r3, #2
 8012292:	d006      	beq.n	80122a2 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 8012294:	4a08      	ldr	r2, [pc, #32]	; (80122b8 <HandleRadioRxErrorTimeout+0x120>)
 8012296:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801229a:	f043 0320 	orr.w	r3, r3, #32
 801229e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 80122a2:	f7ff fa25 	bl	80116f0 <UpdateRxSlotIdleState>
}
 80122a6:	bf00      	nop
 80122a8:	3710      	adds	r7, #16
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}
 80122ae:	bf00      	nop
 80122b0:	20001330 	.word	0x20001330
 80122b4:	08021e08 	.word	0x08021e08
 80122b8:	20000e24 	.word	0x20000e24
 80122bc:	200011bc 	.word	0x200011bc

080122c0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80122c4:	2106      	movs	r1, #6
 80122c6:	2005      	movs	r0, #5
 80122c8:	f7ff ff66 	bl	8012198 <HandleRadioRxErrorTimeout>
}
 80122cc:	bf00      	nop
 80122ce:	bd80      	pop	{r7, pc}

080122d0 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 80122d4:	2104      	movs	r1, #4
 80122d6:	2003      	movs	r0, #3
 80122d8:	f7ff ff5e 	bl	8012198 <HandleRadioRxErrorTimeout>
}
 80122dc:	bf00      	nop
 80122de:	bd80      	pop	{r7, pc}

080122e0 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b084      	sub	sp, #16
 80122e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80122e6:	f3ef 8310 	mrs	r3, PRIMASK
 80122ea:	607b      	str	r3, [r7, #4]
  return(result);
 80122ec:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 80122ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80122f0:	b672      	cpsid	i
}
 80122f2:	bf00      	nop
    events = LoRaMacRadioEvents;
 80122f4:	4b1d      	ldr	r3, [pc, #116]	; (801236c <LoRaMacHandleIrqEvents+0x8c>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 80122fa:	4b1c      	ldr	r3, [pc, #112]	; (801236c <LoRaMacHandleIrqEvents+0x8c>)
 80122fc:	2200      	movs	r2, #0
 80122fe:	601a      	str	r2, [r3, #0]
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012304:	68bb      	ldr	r3, [r7, #8]
 8012306:	f383 8810 	msr	PRIMASK, r3
}
 801230a:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d027      	beq.n	8012362 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8012312:	783b      	ldrb	r3, [r7, #0]
 8012314:	f003 0310 	and.w	r3, r3, #16
 8012318:	b2db      	uxtb	r3, r3
 801231a:	2b00      	cmp	r3, #0
 801231c:	d001      	beq.n	8012322 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 801231e:	f7ff f9ff 	bl	8011720 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8012322:	783b      	ldrb	r3, [r7, #0]
 8012324:	f003 0308 	and.w	r3, r3, #8
 8012328:	b2db      	uxtb	r3, r3
 801232a:	2b00      	cmp	r3, #0
 801232c:	d001      	beq.n	8012332 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 801232e:	f7ff fab7 	bl	80118a0 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8012332:	783b      	ldrb	r3, [r7, #0]
 8012334:	f003 0304 	and.w	r3, r3, #4
 8012338:	b2db      	uxtb	r3, r3
 801233a:	2b00      	cmp	r3, #0
 801233c:	d001      	beq.n	8012342 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 801233e:	f7ff feff 	bl	8012140 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8012342:	783b      	ldrb	r3, [r7, #0]
 8012344:	f003 0302 	and.w	r3, r3, #2
 8012348:	b2db      	uxtb	r3, r3
 801234a:	2b00      	cmp	r3, #0
 801234c:	d001      	beq.n	8012352 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 801234e:	f7ff ffb7 	bl	80122c0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8012352:	783b      	ldrb	r3, [r7, #0]
 8012354:	f003 0301 	and.w	r3, r3, #1
 8012358:	b2db      	uxtb	r3, r3
 801235a:	2b00      	cmp	r3, #0
 801235c:	d001      	beq.n	8012362 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 801235e:	f7ff ffb7 	bl	80122d0 <ProcessRadioRxTimeout>
        }
    }
}
 8012362:	bf00      	nop
 8012364:	3710      	adds	r7, #16
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}
 801236a:	bf00      	nop
 801236c:	20002180 	.word	0x20002180

08012370 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8012370:	b480      	push	{r7}
 8012372:	af00      	add	r7, sp, #0
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8012374:	4b08      	ldr	r3, [pc, #32]	; (8012398 <LoRaMacIsBusy+0x28>)
 8012376:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801237a:	2b00      	cmp	r3, #0
 801237c:	d106      	bne.n	801238c <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 801237e:	4b06      	ldr	r3, [pc, #24]	; (8012398 <LoRaMacIsBusy+0x28>)
 8012380:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8012384:	2b01      	cmp	r3, #1
 8012386:	d101      	bne.n	801238c <LoRaMacIsBusy+0x1c>
    {
        return false;
 8012388:	2300      	movs	r3, #0
 801238a:	e000      	b.n	801238e <LoRaMacIsBusy+0x1e>
    }
    return true;
 801238c:	2301      	movs	r3, #1
}
 801238e:	4618      	mov	r0, r3
 8012390:	46bd      	mov	sp, r7
 8012392:	bc80      	pop	{r7}
 8012394:	4770      	bx	lr
 8012396:	bf00      	nop
 8012398:	20000e24 	.word	0x20000e24

0801239c <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 801239c:	b480      	push	{r7}
 801239e:	b083      	sub	sp, #12
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	4603      	mov	r3, r0
 80123a4:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 80123a6:	4a04      	ldr	r2, [pc, #16]	; (80123b8 <LoRaMacEnableRequests+0x1c>)
 80123a8:	79fb      	ldrb	r3, [r7, #7]
 80123aa:	f882 3486 	strb.w	r3, [r2, #1158]	; 0x486
}
 80123ae:	bf00      	nop
 80123b0:	370c      	adds	r7, #12
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bc80      	pop	{r7}
 80123b6:	4770      	bx	lr
 80123b8:	20000e24 	.word	0x20000e24

080123bc <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b082      	sub	sp, #8
 80123c0:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 80123c2:	4b2c      	ldr	r3, [pc, #176]	; (8012474 <LoRaMacHandleRequestEvents+0xb8>)
 80123c4:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80123c8:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 80123ca:	4b2a      	ldr	r3, [pc, #168]	; (8012474 <LoRaMacHandleRequestEvents+0xb8>)
 80123cc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d14a      	bne.n	801246a <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80123d4:	4b27      	ldr	r3, [pc, #156]	; (8012474 <LoRaMacHandleRequestEvents+0xb8>)
 80123d6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80123da:	f003 0301 	and.w	r3, r3, #1
 80123de:	b2db      	uxtb	r3, r3
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d006      	beq.n	80123f2 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80123e4:	4a23      	ldr	r2, [pc, #140]	; (8012474 <LoRaMacHandleRequestEvents+0xb8>)
 80123e6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80123ea:	f36f 0300 	bfc	r3, #0, #1
 80123ee:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80123f2:	4b20      	ldr	r3, [pc, #128]	; (8012474 <LoRaMacHandleRequestEvents+0xb8>)
 80123f4:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80123f8:	f003 0304 	and.w	r3, r3, #4
 80123fc:	b2db      	uxtb	r3, r3
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d006      	beq.n	8012410 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012402:	4a1c      	ldr	r2, [pc, #112]	; (8012474 <LoRaMacHandleRequestEvents+0xb8>)
 8012404:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8012408:	f36f 0382 	bfc	r3, #2, #1
 801240c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012410:	2001      	movs	r0, #1
 8012412:	f7ff ffc3 	bl	801239c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8012416:	793b      	ldrb	r3, [r7, #4]
 8012418:	f003 0301 	and.w	r3, r3, #1
 801241c:	b2db      	uxtb	r3, r3
 801241e:	2b00      	cmp	r3, #0
 8012420:	d005      	beq.n	801242e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8012422:	4b14      	ldr	r3, [pc, #80]	; (8012474 <LoRaMacHandleRequestEvents+0xb8>)
 8012424:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	4813      	ldr	r0, [pc, #76]	; (8012478 <LoRaMacHandleRequestEvents+0xbc>)
 801242c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 801242e:	793b      	ldrb	r3, [r7, #4]
 8012430:	f003 0304 	and.w	r3, r3, #4
 8012434:	b2db      	uxtb	r3, r3
 8012436:	2b00      	cmp	r3, #0
 8012438:	d00e      	beq.n	8012458 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 801243a:	4810      	ldr	r0, [pc, #64]	; (801247c <LoRaMacHandleRequestEvents+0xc0>)
 801243c:	f006 f91a 	bl	8018674 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8012440:	f006 f964 	bl	801870c <LoRaMacConfirmQueueGetCnt>
 8012444:	4603      	mov	r3, r0
 8012446:	2b00      	cmp	r3, #0
 8012448:	d006      	beq.n	8012458 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 801244a:	4a0a      	ldr	r2, [pc, #40]	; (8012474 <LoRaMacHandleRequestEvents+0xb8>)
 801244c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8012450:	f043 0304 	orr.w	r3, r3, #4
 8012454:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8012458:	f005 f9d6 	bl	8017808 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 801245c:	4a05      	ldr	r2, [pc, #20]	; (8012474 <LoRaMacHandleRequestEvents+0xb8>)
 801245e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8012462:	f36f 1345 	bfc	r3, #5, #1
 8012466:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
}
 801246a:	bf00      	nop
 801246c:	3708      	adds	r7, #8
 801246e:	46bd      	mov	sp, r7
 8012470:	bd80      	pop	{r7, pc}
 8012472:	bf00      	nop
 8012474:	20000e24 	.word	0x20000e24
 8012478:	2000125c 	.word	0x2000125c
 801247c:	20001270 	.word	0x20001270

08012480 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b082      	sub	sp, #8
 8012484:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 8012486:	4b07      	ldr	r3, [pc, #28]	; (80124a4 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 8012488:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801248c:	2b00      	cmp	r3, #0
 801248e:	d105      	bne.n	801249c <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 8012490:	2300      	movs	r3, #0
 8012492:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8012494:	1dfb      	adds	r3, r7, #7
 8012496:	4618      	mov	r0, r3
 8012498:	f005 fed2 	bl	8018240 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 801249c:	bf00      	nop
 801249e:	3708      	adds	r7, #8
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	20000e24 	.word	0x20000e24

080124a8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80124ac:	4b16      	ldr	r3, [pc, #88]	; (8012508 <LoRaMacHandleIndicationEvents+0x60>)
 80124ae:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80124b2:	f003 0308 	and.w	r3, r3, #8
 80124b6:	b2db      	uxtb	r3, r3
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d00d      	beq.n	80124d8 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80124bc:	4a12      	ldr	r2, [pc, #72]	; (8012508 <LoRaMacHandleIndicationEvents+0x60>)
 80124be:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80124c2:	f36f 03c3 	bfc	r3, #3, #1
 80124c6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80124ca:	4b0f      	ldr	r3, [pc, #60]	; (8012508 <LoRaMacHandleIndicationEvents+0x60>)
 80124cc:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80124d0:	68db      	ldr	r3, [r3, #12]
 80124d2:	490e      	ldr	r1, [pc, #56]	; (801250c <LoRaMacHandleIndicationEvents+0x64>)
 80124d4:	480e      	ldr	r0, [pc, #56]	; (8012510 <LoRaMacHandleIndicationEvents+0x68>)
 80124d6:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80124d8:	4b0b      	ldr	r3, [pc, #44]	; (8012508 <LoRaMacHandleIndicationEvents+0x60>)
 80124da:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80124de:	f003 0302 	and.w	r3, r3, #2
 80124e2:	b2db      	uxtb	r3, r3
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d00d      	beq.n	8012504 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80124e8:	4a07      	ldr	r2, [pc, #28]	; (8012508 <LoRaMacHandleIndicationEvents+0x60>)
 80124ea:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80124ee:	f36f 0341 	bfc	r3, #1, #1
 80124f2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 80124f6:	4b04      	ldr	r3, [pc, #16]	; (8012508 <LoRaMacHandleIndicationEvents+0x60>)
 80124f8:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80124fc:	685b      	ldr	r3, [r3, #4]
 80124fe:	4903      	ldr	r1, [pc, #12]	; (801250c <LoRaMacHandleIndicationEvents+0x64>)
 8012500:	4804      	ldr	r0, [pc, #16]	; (8012514 <LoRaMacHandleIndicationEvents+0x6c>)
 8012502:	4798      	blx	r3
    }
}
 8012504:	bf00      	nop
 8012506:	bd80      	pop	{r7, pc}
 8012508:	20000e24 	.word	0x20000e24
 801250c:	200012a4 	.word	0x200012a4
 8012510:	20001284 	.word	0x20001284
 8012514:	20001240 	.word	0x20001240

08012518 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b082      	sub	sp, #8
 801251c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 801251e:	4b32      	ldr	r3, [pc, #200]	; (80125e8 <LoRaMacHandleMcpsRequest+0xd0>)
 8012520:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8012524:	f003 0301 	and.w	r3, r3, #1
 8012528:	b2db      	uxtb	r3, r3
 801252a:	2b00      	cmp	r3, #0
 801252c:	d058      	beq.n	80125e0 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 801252e:	2300      	movs	r3, #0
 8012530:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8012532:	2300      	movs	r3, #0
 8012534:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8012536:	4b2c      	ldr	r3, [pc, #176]	; (80125e8 <LoRaMacHandleMcpsRequest+0xd0>)
 8012538:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 801253c:	2b00      	cmp	r3, #0
 801253e:	d004      	beq.n	801254a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8012540:	4b29      	ldr	r3, [pc, #164]	; (80125e8 <LoRaMacHandleMcpsRequest+0xd0>)
 8012542:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8012546:	2b03      	cmp	r3, #3
 8012548:	d104      	bne.n	8012554 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 801254a:	f002 f87b 	bl	8014644 <CheckRetransUnconfirmedUplink>
 801254e:	4603      	mov	r3, r0
 8012550:	71fb      	strb	r3, [r7, #7]
 8012552:	e020      	b.n	8012596 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8012554:	4b24      	ldr	r3, [pc, #144]	; (80125e8 <LoRaMacHandleMcpsRequest+0xd0>)
 8012556:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 801255a:	2b01      	cmp	r3, #1
 801255c:	d11b      	bne.n	8012596 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 801255e:	4b22      	ldr	r3, [pc, #136]	; (80125e8 <LoRaMacHandleMcpsRequest+0xd0>)
 8012560:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 8012564:	2b00      	cmp	r3, #0
 8012566:	d014      	beq.n	8012592 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8012568:	f002 f898 	bl	801469c <CheckRetransConfirmedUplink>
 801256c:	4603      	mov	r3, r0
 801256e:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8012570:	4b1e      	ldr	r3, [pc, #120]	; (80125ec <LoRaMacHandleMcpsRequest+0xd4>)
 8012572:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8012576:	2b00      	cmp	r3, #0
 8012578:	d10d      	bne.n	8012596 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 801257a:	79fb      	ldrb	r3, [r7, #7]
 801257c:	f083 0301 	eor.w	r3, r3, #1
 8012580:	b2db      	uxtb	r3, r3
 8012582:	2b00      	cmp	r3, #0
 8012584:	d002      	beq.n	801258c <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 8012586:	f002 f905 	bl	8014794 <AckTimeoutRetriesProcess>
 801258a:	e004      	b.n	8012596 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 801258c:	f002 f940 	bl	8014810 <AckTimeoutRetriesFinalize>
 8012590:	e001      	b.n	8012596 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8012592:	2301      	movs	r3, #1
 8012594:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8012596:	79fb      	ldrb	r3, [r7, #7]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d00d      	beq.n	80125b8 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 801259c:	4814      	ldr	r0, [pc, #80]	; (80125f0 <LoRaMacHandleMcpsRequest+0xd8>)
 801259e:	f00d ffc9 	bl	8020534 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80125a2:	4b11      	ldr	r3, [pc, #68]	; (80125e8 <LoRaMacHandleMcpsRequest+0xd0>)
 80125a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80125a8:	f023 0320 	bic.w	r3, r3, #32
 80125ac:	4a0e      	ldr	r2, [pc, #56]	; (80125e8 <LoRaMacHandleMcpsRequest+0xd0>)
 80125ae:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 80125b2:	f002 f895 	bl	80146e0 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 80125b6:	e013      	b.n	80125e0 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 80125b8:	79bb      	ldrb	r3, [r7, #6]
 80125ba:	f083 0301 	eor.w	r3, r3, #1
 80125be:	b2db      	uxtb	r3, r3
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d00d      	beq.n	80125e0 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80125c4:	4a08      	ldr	r2, [pc, #32]	; (80125e8 <LoRaMacHandleMcpsRequest+0xd0>)
 80125c6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80125ca:	f36f 1345 	bfc	r3, #5, #1
 80125ce:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 80125d2:	4b05      	ldr	r3, [pc, #20]	; (80125e8 <LoRaMacHandleMcpsRequest+0xd0>)
 80125d4:	2200      	movs	r2, #0
 80125d6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 80125da:	2000      	movs	r0, #0
 80125dc:	f000 f994 	bl	8012908 <OnTxDelayedTimerEvent>
}
 80125e0:	bf00      	nop
 80125e2:	3708      	adds	r7, #8
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}
 80125e8:	20000e24 	.word	0x20000e24
 80125ec:	20001330 	.word	0x20001330
 80125f0:	2000118c 	.word	0x2000118c

080125f4 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80125f8:	4b1b      	ldr	r3, [pc, #108]	; (8012668 <LoRaMacHandleMlmeRequest+0x74>)
 80125fa:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80125fe:	f003 0304 	and.w	r3, r3, #4
 8012602:	b2db      	uxtb	r3, r3
 8012604:	2b00      	cmp	r3, #0
 8012606:	d02c      	beq.n	8012662 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8012608:	2001      	movs	r0, #1
 801260a:	f006 f819 	bl	8018640 <LoRaMacConfirmQueueIsCmdActive>
 801260e:	4603      	mov	r3, r0
 8012610:	2b00      	cmp	r3, #0
 8012612:	d012      	beq.n	801263a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8012614:	2001      	movs	r0, #1
 8012616:	f005 ffb5 	bl	8018584 <LoRaMacConfirmQueueGetStatus>
 801261a:	4603      	mov	r3, r0
 801261c:	2b00      	cmp	r3, #0
 801261e:	d103      	bne.n	8012628 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8012620:	4b11      	ldr	r3, [pc, #68]	; (8012668 <LoRaMacHandleMlmeRequest+0x74>)
 8012622:	2200      	movs	r2, #0
 8012624:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012628:	4b0f      	ldr	r3, [pc, #60]	; (8012668 <LoRaMacHandleMlmeRequest+0x74>)
 801262a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801262e:	f023 0302 	bic.w	r3, r3, #2
 8012632:	4a0d      	ldr	r2, [pc, #52]	; (8012668 <LoRaMacHandleMlmeRequest+0x74>)
 8012634:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8012638:	e013      	b.n	8012662 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 801263a:	2005      	movs	r0, #5
 801263c:	f006 f800 	bl	8018640 <LoRaMacConfirmQueueIsCmdActive>
 8012640:	4603      	mov	r3, r0
 8012642:	2b00      	cmp	r3, #0
 8012644:	d105      	bne.n	8012652 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8012646:	2006      	movs	r0, #6
 8012648:	f005 fffa 	bl	8018640 <LoRaMacConfirmQueueIsCmdActive>
 801264c:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 801264e:	2b00      	cmp	r3, #0
 8012650:	d007      	beq.n	8012662 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012652:	4b05      	ldr	r3, [pc, #20]	; (8012668 <LoRaMacHandleMlmeRequest+0x74>)
 8012654:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012658:	f023 0302 	bic.w	r3, r3, #2
 801265c:	4a02      	ldr	r2, [pc, #8]	; (8012668 <LoRaMacHandleMlmeRequest+0x74>)
 801265e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8012662:	bf00      	nop
 8012664:	bd80      	pop	{r7, pc}
 8012666:	bf00      	nop
 8012668:	20000e24 	.word	0x20000e24

0801266c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 801266c:	b580      	push	{r7, lr}
 801266e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8012670:	200c      	movs	r0, #12
 8012672:	f005 ffe5 	bl	8018640 <LoRaMacConfirmQueueIsCmdActive>
 8012676:	4603      	mov	r3, r0
 8012678:	2b00      	cmp	r3, #0
 801267a:	d019      	beq.n	80126b0 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 801267c:	4b0e      	ldr	r3, [pc, #56]	; (80126b8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801267e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8012682:	f003 0301 	and.w	r3, r3, #1
 8012686:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8012688:	2b00      	cmp	r3, #0
 801268a:	d111      	bne.n	80126b0 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 801268c:	4b0a      	ldr	r3, [pc, #40]	; (80126b8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801268e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8012692:	f003 0304 	and.w	r3, r3, #4
 8012696:	b2db      	uxtb	r3, r3
 8012698:	2b00      	cmp	r3, #0
 801269a:	d009      	beq.n	80126b0 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801269c:	4b06      	ldr	r3, [pc, #24]	; (80126b8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801269e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80126a2:	f023 0302 	bic.w	r3, r3, #2
 80126a6:	4a04      	ldr	r2, [pc, #16]	; (80126b8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80126a8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 80126ac:	2301      	movs	r3, #1
 80126ae:	e000      	b.n	80126b2 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 80126b0:	2300      	movs	r3, #0
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	bd80      	pop	{r7, pc}
 80126b6:	bf00      	nop
 80126b8:	20000e24 	.word	0x20000e24

080126bc <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 80126bc:	b480      	push	{r7}
 80126be:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80126c0:	4b0d      	ldr	r3, [pc, #52]	; (80126f8 <LoRaMacCheckForRxAbort+0x3c>)
 80126c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80126c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d00f      	beq.n	80126ee <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 80126ce:	4b0a      	ldr	r3, [pc, #40]	; (80126f8 <LoRaMacCheckForRxAbort+0x3c>)
 80126d0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80126d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80126d8:	4a07      	ldr	r2, [pc, #28]	; (80126f8 <LoRaMacCheckForRxAbort+0x3c>)
 80126da:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80126de:	4b06      	ldr	r3, [pc, #24]	; (80126f8 <LoRaMacCheckForRxAbort+0x3c>)
 80126e0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80126e4:	f023 0302 	bic.w	r3, r3, #2
 80126e8:	4a03      	ldr	r2, [pc, #12]	; (80126f8 <LoRaMacCheckForRxAbort+0x3c>)
 80126ea:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 80126ee:	bf00      	nop
 80126f0:	46bd      	mov	sp, r7
 80126f2:	bc80      	pop	{r7}
 80126f4:	4770      	bx	lr
 80126f6:	bf00      	nop
 80126f8:	20000e24 	.word	0x20000e24

080126fc <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b084      	sub	sp, #16
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8012704:	2300      	movs	r3, #0
 8012706:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8012708:	2300      	movs	r3, #0
 801270a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 801270c:	4b50      	ldr	r3, [pc, #320]	; (8012850 <LoRaMacHandleNvm+0x154>)
 801270e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012712:	2b00      	cmp	r3, #0
 8012714:	f040 8098 	bne.w	8012848 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	2124      	movs	r1, #36	; 0x24
 801271c:	4618      	mov	r0, r3
 801271e:	f009 fe13 	bl	801c348 <Crc32>
 8012722:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012728:	68ba      	ldr	r2, [r7, #8]
 801272a:	429a      	cmp	r2, r3
 801272c:	d006      	beq.n	801273c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	68ba      	ldr	r2, [r7, #8]
 8012732:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8012734:	89fb      	ldrh	r3, [r7, #14]
 8012736:	f043 0301 	orr.w	r3, r3, #1
 801273a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	3328      	adds	r3, #40	; 0x28
 8012740:	2114      	movs	r1, #20
 8012742:	4618      	mov	r0, r3
 8012744:	f009 fe00 	bl	801c348 <Crc32>
 8012748:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801274e:	68ba      	ldr	r2, [r7, #8]
 8012750:	429a      	cmp	r2, r3
 8012752:	d006      	beq.n	8012762 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	68ba      	ldr	r2, [r7, #8]
 8012758:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 801275a:	89fb      	ldrh	r3, [r7, #14]
 801275c:	f043 0302 	orr.w	r3, r3, #2
 8012760:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	3340      	adds	r3, #64	; 0x40
 8012766:	21dc      	movs	r1, #220	; 0xdc
 8012768:	4618      	mov	r0, r3
 801276a:	f009 fded 	bl	801c348 <Crc32>
 801276e:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012776:	68ba      	ldr	r2, [r7, #8]
 8012778:	429a      	cmp	r2, r3
 801277a:	d007      	beq.n	801278c <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	68ba      	ldr	r2, [r7, #8]
 8012780:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8012784:	89fb      	ldrh	r3, [r7, #14]
 8012786:	f043 0304 	orr.w	r3, r3, #4
 801278a:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8012792:	21bc      	movs	r1, #188	; 0xbc
 8012794:	4618      	mov	r0, r3
 8012796:	f009 fdd7 	bl	801c348 <Crc32>
 801279a:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80127a2:	68ba      	ldr	r2, [r7, #8]
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d007      	beq.n	80127b8 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	68ba      	ldr	r2, [r7, #8]
 80127ac:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80127b0:	89fb      	ldrh	r3, [r7, #14]
 80127b2:	f043 0308 	orr.w	r3, r3, #8
 80127b6:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80127be:	2190      	movs	r1, #144	; 0x90
 80127c0:	4618      	mov	r0, r3
 80127c2:	f009 fdc1 	bl	801c348 <Crc32>
 80127c6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80127ce:	68ba      	ldr	r2, [r7, #8]
 80127d0:	429a      	cmp	r2, r3
 80127d2:	d007      	beq.n	80127e4 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	68ba      	ldr	r2, [r7, #8]
 80127d8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 80127dc:	89fb      	ldrh	r3, [r7, #14]
 80127de:	f043 0310 	orr.w	r3, r3, #16
 80127e2:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f503 731d 	add.w	r3, r3, #628	; 0x274
 80127ea:	f44f 6193 	mov.w	r1, #1176	; 0x498
 80127ee:	4618      	mov	r0, r3
 80127f0:	f009 fdaa 	bl	801c348 <Crc32>
 80127f4:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 80127fc:	68ba      	ldr	r2, [r7, #8]
 80127fe:	429a      	cmp	r2, r3
 8012800:	d007      	beq.n	8012812 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	68ba      	ldr	r2, [r7, #8]
 8012806:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 801280a:	89fb      	ldrh	r3, [r7, #14]
 801280c:	f043 0320 	orr.w	r3, r3, #32
 8012810:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 8012818:	2114      	movs	r1, #20
 801281a:	4618      	mov	r0, r3
 801281c:	f009 fd94 	bl	801c348 <Crc32>
 8012820:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 8012828:	68ba      	ldr	r2, [r7, #8]
 801282a:	429a      	cmp	r2, r3
 801282c:	d007      	beq.n	801283e <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	68ba      	ldr	r2, [r7, #8]
 8012832:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8012836:	89fb      	ldrh	r3, [r7, #14]
 8012838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801283c:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 801283e:	89fb      	ldrh	r3, [r7, #14]
 8012840:	4618      	mov	r0, r3
 8012842:	f001 ff89 	bl	8014758 <CallNvmDataChangeCallback>
 8012846:	e000      	b.n	801284a <LoRaMacHandleNvm+0x14e>
        return;
 8012848:	bf00      	nop
}
 801284a:	3710      	adds	r7, #16
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}
 8012850:	20000e24 	.word	0x20000e24

08012854 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b082      	sub	sp, #8
 8012858:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 801285a:	2300      	movs	r3, #0
 801285c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 801285e:	f7ff fd3f 	bl	80122e0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8012862:	f005 fa77 	bl	8017d54 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8012866:	4b26      	ldr	r3, [pc, #152]	; (8012900 <LoRaMacProcess+0xac>)
 8012868:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801286c:	f003 0320 	and.w	r3, r3, #32
 8012870:	b2db      	uxtb	r3, r3
 8012872:	2b00      	cmp	r3, #0
 8012874:	d025      	beq.n	80128c2 <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8012876:	2000      	movs	r0, #0
 8012878:	f7ff fd90 	bl	801239c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 801287c:	f7ff ff1e 	bl	80126bc <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8012880:	f001 fffa 	bl	8014878 <IsRequestPending>
 8012884:	4603      	mov	r3, r0
 8012886:	2b00      	cmp	r3, #0
 8012888:	d006      	beq.n	8012898 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 801288a:	f7ff feef 	bl	801266c <LoRaMacCheckForBeaconAcquisition>
 801288e:	4603      	mov	r3, r0
 8012890:	461a      	mov	r2, r3
 8012892:	79fb      	ldrb	r3, [r7, #7]
 8012894:	4313      	orrs	r3, r2
 8012896:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8012898:	79fb      	ldrb	r3, [r7, #7]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d103      	bne.n	80128a6 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 801289e:	f7ff fea9 	bl	80125f4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 80128a2:	f7ff fe39 	bl	8012518 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 80128a6:	f7ff fd89 	bl	80123bc <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 80128aa:	f7ff fde9 	bl	8012480 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80128ae:	2001      	movs	r0, #1
 80128b0:	f7ff fd74 	bl	801239c <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80128b4:	4a12      	ldr	r2, [pc, #72]	; (8012900 <LoRaMacProcess+0xac>)
 80128b6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80128ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128be:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    LoRaMacHandleIndicationEvents( );
 80128c2:	f7ff fdf1 	bl	80124a8 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 80128c6:	4b0e      	ldr	r3, [pc, #56]	; (8012900 <LoRaMacProcess+0xac>)
 80128c8:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80128cc:	2b02      	cmp	r3, #2
 80128ce:	d101      	bne.n	80128d4 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 80128d0:	f001 fb7e 	bl	8013fd0 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 80128d4:	4b0a      	ldr	r3, [pc, #40]	; (8012900 <LoRaMacProcess+0xac>)
 80128d6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80128da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128de:	b2db      	uxtb	r3, r3
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d009      	beq.n	80128f8 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 80128e4:	4a06      	ldr	r2, [pc, #24]	; (8012900 <LoRaMacProcess+0xac>)
 80128e6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80128ea:	f36f 1386 	bfc	r3, #6, #1
 80128ee:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        LoRaMacHandleNvm( &Nvm );
 80128f2:	4804      	ldr	r0, [pc, #16]	; (8012904 <LoRaMacProcess+0xb0>)
 80128f4:	f7ff ff02 	bl	80126fc <LoRaMacHandleNvm>
    }
}
 80128f8:	bf00      	nop
 80128fa:	3708      	adds	r7, #8
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}
 8012900:	20000e24 	.word	0x20000e24
 8012904:	20001330 	.word	0x20001330

08012908 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b082      	sub	sp, #8
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8012910:	4817      	ldr	r0, [pc, #92]	; (8012970 <OnTxDelayedTimerEvent+0x68>)
 8012912:	f00d fe0f 	bl	8020534 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8012916:	4b17      	ldr	r3, [pc, #92]	; (8012974 <OnTxDelayedTimerEvent+0x6c>)
 8012918:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801291c:	f023 0320 	bic.w	r3, r3, #32
 8012920:	4a14      	ldr	r2, [pc, #80]	; (8012974 <OnTxDelayedTimerEvent+0x6c>)
 8012922:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8012926:	2001      	movs	r0, #1
 8012928:	f001 f8e6 	bl	8013af8 <ScheduleTx>
 801292c:	4603      	mov	r3, r0
 801292e:	2b00      	cmp	r3, #0
 8012930:	d018      	beq.n	8012964 <OnTxDelayedTimerEvent+0x5c>
 8012932:	2b0b      	cmp	r3, #11
 8012934:	d016      	beq.n	8012964 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012936:	4b10      	ldr	r3, [pc, #64]	; (8012978 <OnTxDelayedTimerEvent+0x70>)
 8012938:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801293c:	b2da      	uxtb	r2, r3
 801293e:	4b0d      	ldr	r3, [pc, #52]	; (8012974 <OnTxDelayedTimerEvent+0x6c>)
 8012940:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8012944:	4b0b      	ldr	r3, [pc, #44]	; (8012974 <OnTxDelayedTimerEvent+0x6c>)
 8012946:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 801294a:	4b0a      	ldr	r3, [pc, #40]	; (8012974 <OnTxDelayedTimerEvent+0x6c>)
 801294c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8012950:	4b08      	ldr	r3, [pc, #32]	; (8012974 <OnTxDelayedTimerEvent+0x6c>)
 8012952:	2209      	movs	r2, #9
 8012954:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8012958:	2009      	movs	r0, #9
 801295a:	f005 fe3d 	bl	80185d8 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 801295e:	f001 febf 	bl	80146e0 <StopRetransmission>
            break;
 8012962:	e000      	b.n	8012966 <OnTxDelayedTimerEvent+0x5e>
            break;
 8012964:	bf00      	nop
        }
    }
}
 8012966:	bf00      	nop
 8012968:	3708      	adds	r7, #8
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}
 801296e:	bf00      	nop
 8012970:	2000118c 	.word	0x2000118c
 8012974:	20000e24 	.word	0x20000e24
 8012978:	20001330 	.word	0x20001330

0801297c <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b082      	sub	sp, #8
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8012984:	4b14      	ldr	r3, [pc, #80]	; (80129d8 <OnRxWindow1TimerEvent+0x5c>)
 8012986:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 801298a:	4b13      	ldr	r3, [pc, #76]	; (80129d8 <OnRxWindow1TimerEvent+0x5c>)
 801298c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8012990:	4b12      	ldr	r3, [pc, #72]	; (80129dc <OnRxWindow1TimerEvent+0x60>)
 8012992:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8012996:	b25a      	sxtb	r2, r3
 8012998:	4b0f      	ldr	r3, [pc, #60]	; (80129d8 <OnRxWindow1TimerEvent+0x5c>)
 801299a:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801299e:	4b0f      	ldr	r3, [pc, #60]	; (80129dc <OnRxWindow1TimerEvent+0x60>)
 80129a0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80129a4:	4b0c      	ldr	r3, [pc, #48]	; (80129d8 <OnRxWindow1TimerEvent+0x5c>)
 80129a6:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80129aa:	4b0c      	ldr	r3, [pc, #48]	; (80129dc <OnRxWindow1TimerEvent+0x60>)
 80129ac:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80129b0:	4b09      	ldr	r3, [pc, #36]	; (80129d8 <OnRxWindow1TimerEvent+0x5c>)
 80129b2:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 80129b6:	4b08      	ldr	r3, [pc, #32]	; (80129d8 <OnRxWindow1TimerEvent+0x5c>)
 80129b8:	2200      	movs	r2, #0
 80129ba:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80129be:	4b06      	ldr	r3, [pc, #24]	; (80129d8 <OnRxWindow1TimerEvent+0x5c>)
 80129c0:	2200      	movs	r2, #0
 80129c2:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80129c6:	4906      	ldr	r1, [pc, #24]	; (80129e0 <OnRxWindow1TimerEvent+0x64>)
 80129c8:	4806      	ldr	r0, [pc, #24]	; (80129e4 <OnRxWindow1TimerEvent+0x68>)
 80129ca:	f001 facd 	bl	8013f68 <RxWindowSetup>
}
 80129ce:	bf00      	nop
 80129d0:	3708      	adds	r7, #8
 80129d2:	46bd      	mov	sp, r7
 80129d4:	bd80      	pop	{r7, pc}
 80129d6:	bf00      	nop
 80129d8:	20000e24 	.word	0x20000e24
 80129dc:	20001330 	.word	0x20001330
 80129e0:	200011dc 	.word	0x200011dc
 80129e4:	200011a4 	.word	0x200011a4

080129e8 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b082      	sub	sp, #8
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80129f0:	4b16      	ldr	r3, [pc, #88]	; (8012a4c <OnRxWindow2TimerEvent+0x64>)
 80129f2:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d023      	beq.n	8012a42 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80129fa:	4b14      	ldr	r3, [pc, #80]	; (8012a4c <OnRxWindow2TimerEvent+0x64>)
 80129fc:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8012a00:	4b12      	ldr	r3, [pc, #72]	; (8012a4c <OnRxWindow2TimerEvent+0x64>)
 8012a02:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8012a06:	4b12      	ldr	r3, [pc, #72]	; (8012a50 <OnRxWindow2TimerEvent+0x68>)
 8012a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012a0a:	4a10      	ldr	r2, [pc, #64]	; (8012a4c <OnRxWindow2TimerEvent+0x64>)
 8012a0c:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012a10:	4b0f      	ldr	r3, [pc, #60]	; (8012a50 <OnRxWindow2TimerEvent+0x68>)
 8012a12:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8012a16:	4b0d      	ldr	r3, [pc, #52]	; (8012a4c <OnRxWindow2TimerEvent+0x64>)
 8012a18:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8012a1c:	4b0c      	ldr	r3, [pc, #48]	; (8012a50 <OnRxWindow2TimerEvent+0x68>)
 8012a1e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8012a22:	4b0a      	ldr	r3, [pc, #40]	; (8012a4c <OnRxWindow2TimerEvent+0x64>)
 8012a24:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8012a28:	4b08      	ldr	r3, [pc, #32]	; (8012a4c <OnRxWindow2TimerEvent+0x64>)
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012a30:	4b06      	ldr	r3, [pc, #24]	; (8012a4c <OnRxWindow2TimerEvent+0x64>)
 8012a32:	2201      	movs	r2, #1
 8012a34:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8012a38:	4906      	ldr	r1, [pc, #24]	; (8012a54 <OnRxWindow2TimerEvent+0x6c>)
 8012a3a:	4807      	ldr	r0, [pc, #28]	; (8012a58 <OnRxWindow2TimerEvent+0x70>)
 8012a3c:	f001 fa94 	bl	8013f68 <RxWindowSetup>
 8012a40:	e000      	b.n	8012a44 <OnRxWindow2TimerEvent+0x5c>
        return;
 8012a42:	bf00      	nop
}
 8012a44:	3708      	adds	r7, #8
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
 8012a4a:	bf00      	nop
 8012a4c:	20000e24 	.word	0x20000e24
 8012a50:	20001330 	.word	0x20001330
 8012a54:	200011f0 	.word	0x200011f0
 8012a58:	200011bc 	.word	0x200011bc

08012a5c <OnAckTimeoutTimerEvent>:
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b082      	sub	sp, #8
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8012a64:	4815      	ldr	r0, [pc, #84]	; (8012abc <OnAckTimeoutTimerEvent+0x60>)
 8012a66:	f00d fd65 	bl	8020534 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8012a6a:	4b15      	ldr	r3, [pc, #84]	; (8012ac0 <OnAckTimeoutTimerEvent+0x64>)
 8012a6c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d003      	beq.n	8012a7c <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 8012a74:	4b12      	ldr	r3, [pc, #72]	; (8012ac0 <OnAckTimeoutTimerEvent+0x64>)
 8012a76:	2201      	movs	r2, #1
 8012a78:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8012a7c:	4b11      	ldr	r3, [pc, #68]	; (8012ac4 <OnAckTimeoutTimerEvent+0x68>)
 8012a7e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012a82:	2b02      	cmp	r3, #2
 8012a84:	d106      	bne.n	8012a94 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8012a86:	4a0e      	ldr	r2, [pc, #56]	; (8012ac0 <OnAckTimeoutTimerEvent+0x64>)
 8012a88:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8012a8c:	f043 0320 	orr.w	r3, r3, #32
 8012a90:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8012a94:	4b0a      	ldr	r3, [pc, #40]	; (8012ac0 <OnAckTimeoutTimerEvent+0x64>)
 8012a96:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d00a      	beq.n	8012ab4 <OnAckTimeoutTimerEvent+0x58>
 8012a9e:	4b08      	ldr	r3, [pc, #32]	; (8012ac0 <OnAckTimeoutTimerEvent+0x64>)
 8012aa0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012aa4:	691b      	ldr	r3, [r3, #16]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d004      	beq.n	8012ab4 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8012aaa:	4b05      	ldr	r3, [pc, #20]	; (8012ac0 <OnAckTimeoutTimerEvent+0x64>)
 8012aac:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012ab0:	691b      	ldr	r3, [r3, #16]
 8012ab2:	4798      	blx	r3
    }
}
 8012ab4:	bf00      	nop
 8012ab6:	3708      	adds	r7, #8
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	bd80      	pop	{r7, pc}
 8012abc:	2000121c 	.word	0x2000121c
 8012ac0:	20000e24 	.word	0x20000e24
 8012ac4:	20001330 	.word	0x20001330

08012ac8 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b084      	sub	sp, #16
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	60ba      	str	r2, [r7, #8]
 8012ad0:	607b      	str	r3, [r7, #4]
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	73fb      	strb	r3, [r7, #15]
 8012ad6:	460b      	mov	r3, r1
 8012ad8:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8012ada:	68bb      	ldr	r3, [r7, #8]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d005      	beq.n	8012aec <GetFCntDown+0x24>
 8012ae0:	69fb      	ldr	r3, [r7, #28]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d002      	beq.n	8012aec <GetFCntDown+0x24>
 8012ae6:	6a3b      	ldr	r3, [r7, #32]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d101      	bne.n	8012af0 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012aec:	230a      	movs	r3, #10
 8012aee:	e029      	b.n	8012b44 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8012af0:	7bfb      	ldrb	r3, [r7, #15]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d016      	beq.n	8012b24 <GetFCntDown+0x5c>
 8012af6:	2b01      	cmp	r3, #1
 8012af8:	d118      	bne.n	8012b2c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8012afa:	79bb      	ldrb	r3, [r7, #6]
 8012afc:	2b01      	cmp	r3, #1
 8012afe:	d10d      	bne.n	8012b1c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8012b00:	7bbb      	ldrb	r3, [r7, #14]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d002      	beq.n	8012b0c <GetFCntDown+0x44>
 8012b06:	7bbb      	ldrb	r3, [r7, #14]
 8012b08:	2b03      	cmp	r3, #3
 8012b0a:	d103      	bne.n	8012b14 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8012b0c:	69fb      	ldr	r3, [r7, #28]
 8012b0e:	2202      	movs	r2, #2
 8012b10:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8012b12:	e00d      	b.n	8012b30 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8012b14:	69fb      	ldr	r3, [r7, #28]
 8012b16:	2201      	movs	r2, #1
 8012b18:	701a      	strb	r2, [r3, #0]
            break;
 8012b1a:	e009      	b.n	8012b30 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8012b1c:	69fb      	ldr	r3, [r7, #28]
 8012b1e:	2203      	movs	r2, #3
 8012b20:	701a      	strb	r2, [r3, #0]
            break;
 8012b22:	e005      	b.n	8012b30 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8012b24:	69fb      	ldr	r3, [r7, #28]
 8012b26:	2204      	movs	r2, #4
 8012b28:	701a      	strb	r2, [r3, #0]
            break;
 8012b2a:	e001      	b.n	8012b30 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012b2c:	2305      	movs	r3, #5
 8012b2e:	e009      	b.n	8012b44 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8012b30:	69fb      	ldr	r3, [r7, #28]
 8012b32:	7818      	ldrb	r0, [r3, #0]
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	89db      	ldrh	r3, [r3, #14]
 8012b38:	461a      	mov	r2, r3
 8012b3a:	8b39      	ldrh	r1, [r7, #24]
 8012b3c:	6a3b      	ldr	r3, [r7, #32]
 8012b3e:	f006 f975 	bl	8018e2c <LoRaMacCryptoGetFCntDown>
 8012b42:	4603      	mov	r3, r0
}
 8012b44:	4618      	mov	r0, r3
 8012b46:	3710      	adds	r7, #16
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}

08012b4c <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8012b4c:	b5b0      	push	{r4, r5, r7, lr}
 8012b4e:	b084      	sub	sp, #16
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	4603      	mov	r3, r0
 8012b54:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b56:	2303      	movs	r3, #3
 8012b58:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8012b5a:	4b61      	ldr	r3, [pc, #388]	; (8012ce0 <SwitchClass+0x194>)
 8012b5c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012b60:	2b02      	cmp	r3, #2
 8012b62:	f000 80a5 	beq.w	8012cb0 <SwitchClass+0x164>
 8012b66:	2b02      	cmp	r3, #2
 8012b68:	f300 80b4 	bgt.w	8012cd4 <SwitchClass+0x188>
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d003      	beq.n	8012b78 <SwitchClass+0x2c>
 8012b70:	2b01      	cmp	r3, #1
 8012b72:	f000 808f 	beq.w	8012c94 <SwitchClass+0x148>
 8012b76:	e0ad      	b.n	8012cd4 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8012b78:	79fb      	ldrb	r3, [r7, #7]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d107      	bne.n	8012b8e <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8012b7e:	4b58      	ldr	r3, [pc, #352]	; (8012ce0 <SwitchClass+0x194>)
 8012b80:	4a57      	ldr	r2, [pc, #348]	; (8012ce0 <SwitchClass+0x194>)
 8012b82:	336c      	adds	r3, #108	; 0x6c
 8012b84:	3264      	adds	r2, #100	; 0x64
 8012b86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012b8a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 8012b8e:	79fb      	ldrb	r3, [r7, #7]
 8012b90:	2b01      	cmp	r3, #1
 8012b92:	d10c      	bne.n	8012bae <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8012b94:	79fb      	ldrb	r3, [r7, #7]
 8012b96:	4618      	mov	r0, r3
 8012b98:	f004 fe58 	bl	801784c <LoRaMacClassBSwitchClass>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8012ba0:	7bfb      	ldrb	r3, [r7, #15]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d103      	bne.n	8012bae <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8012ba6:	4a4e      	ldr	r2, [pc, #312]	; (8012ce0 <SwitchClass+0x194>)
 8012ba8:	79fb      	ldrb	r3, [r7, #7]
 8012baa:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 8012bae:	79fb      	ldrb	r3, [r7, #7]
 8012bb0:	2b02      	cmp	r3, #2
 8012bb2:	f040 808a 	bne.w	8012cca <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8012bb6:	4a4a      	ldr	r2, [pc, #296]	; (8012ce0 <SwitchClass+0x194>)
 8012bb8:	79fb      	ldrb	r3, [r7, #7]
 8012bba:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8012bbe:	4a49      	ldr	r2, [pc, #292]	; (8012ce4 <SwitchClass+0x198>)
 8012bc0:	4b48      	ldr	r3, [pc, #288]	; (8012ce4 <SwitchClass+0x198>)
 8012bc2:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8012bc6:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8012bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012bce:	682b      	ldr	r3, [r5, #0]
 8012bd0:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012bd2:	4b44      	ldr	r3, [pc, #272]	; (8012ce4 <SwitchClass+0x198>)
 8012bd4:	2202      	movs	r2, #2
 8012bd6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012bda:	2300      	movs	r3, #0
 8012bdc:	73bb      	strb	r3, [r7, #14]
 8012bde:	e049      	b.n	8012c74 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8012be0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012be4:	4a3e      	ldr	r2, [pc, #248]	; (8012ce0 <SwitchClass+0x194>)
 8012be6:	212c      	movs	r1, #44	; 0x2c
 8012be8:	fb01 f303 	mul.w	r3, r1, r3
 8012bec:	4413      	add	r3, r2
 8012bee:	33da      	adds	r3, #218	; 0xda
 8012bf0:	781b      	ldrb	r3, [r3, #0]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d038      	beq.n	8012c68 <SwitchClass+0x11c>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8012bf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012bfa:	4a39      	ldr	r2, [pc, #228]	; (8012ce0 <SwitchClass+0x194>)
 8012bfc:	212c      	movs	r1, #44	; 0x2c
 8012bfe:	fb01 f303 	mul.w	r3, r1, r3
 8012c02:	4413      	add	r3, r2
 8012c04:	33f0      	adds	r3, #240	; 0xf0
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	4a35      	ldr	r2, [pc, #212]	; (8012ce0 <SwitchClass+0x194>)
 8012c0a:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8012c0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012c10:	4a33      	ldr	r2, [pc, #204]	; (8012ce0 <SwitchClass+0x194>)
 8012c12:	212c      	movs	r1, #44	; 0x2c
 8012c14:	fb01 f303 	mul.w	r3, r1, r3
 8012c18:	4413      	add	r3, r2
 8012c1a:	33f4      	adds	r3, #244	; 0xf4
 8012c1c:	f993 3000 	ldrsb.w	r3, [r3]
 8012c20:	b2da      	uxtb	r2, r3
 8012c22:	4b2f      	ldr	r3, [pc, #188]	; (8012ce0 <SwitchClass+0x194>)
 8012c24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012c28:	4b2e      	ldr	r3, [pc, #184]	; (8012ce4 <SwitchClass+0x198>)
 8012c2a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8012c2e:	4b2d      	ldr	r3, [pc, #180]	; (8012ce4 <SwitchClass+0x198>)
 8012c30:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8012c34:	4b2a      	ldr	r3, [pc, #168]	; (8012ce0 <SwitchClass+0x194>)
 8012c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c38:	4a2a      	ldr	r2, [pc, #168]	; (8012ce4 <SwitchClass+0x198>)
 8012c3a:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012c3e:	4b28      	ldr	r3, [pc, #160]	; (8012ce0 <SwitchClass+0x194>)
 8012c40:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8012c44:	4b27      	ldr	r3, [pc, #156]	; (8012ce4 <SwitchClass+0x198>)
 8012c46:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8012c4a:	4b25      	ldr	r3, [pc, #148]	; (8012ce0 <SwitchClass+0x194>)
 8012c4c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8012c50:	4b24      	ldr	r3, [pc, #144]	; (8012ce4 <SwitchClass+0x198>)
 8012c52:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8012c56:	4b23      	ldr	r3, [pc, #140]	; (8012ce4 <SwitchClass+0x198>)
 8012c58:	2203      	movs	r2, #3
 8012c5a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8012c5e:	4b21      	ldr	r3, [pc, #132]	; (8012ce4 <SwitchClass+0x198>)
 8012c60:	2201      	movs	r2, #1
 8012c62:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8012c66:	e009      	b.n	8012c7c <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012c68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012c6c:	b2db      	uxtb	r3, r3
 8012c6e:	3301      	adds	r3, #1
 8012c70:	b2db      	uxtb	r3, r3
 8012c72:	73bb      	strb	r3, [r7, #14]
 8012c74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	ddb1      	ble.n	8012be0 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8012c7c:	4b19      	ldr	r3, [pc, #100]	; (8012ce4 <SwitchClass+0x198>)
 8012c7e:	2200      	movs	r2, #0
 8012c80:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8012c84:	4b18      	ldr	r3, [pc, #96]	; (8012ce8 <SwitchClass+0x19c>)
 8012c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c88:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8012c8a:	f001 f9a1 	bl	8013fd0 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 8012c8e:	2300      	movs	r3, #0
 8012c90:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8012c92:	e01a      	b.n	8012cca <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8012c94:	79fb      	ldrb	r3, [r7, #7]
 8012c96:	4618      	mov	r0, r3
 8012c98:	f004 fdd8 	bl	801784c <LoRaMacClassBSwitchClass>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8012ca0:	7bfb      	ldrb	r3, [r7, #15]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d113      	bne.n	8012cce <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8012ca6:	4a0e      	ldr	r2, [pc, #56]	; (8012ce0 <SwitchClass+0x194>)
 8012ca8:	79fb      	ldrb	r3, [r7, #7]
 8012caa:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 8012cae:	e00e      	b.n	8012cce <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8012cb0:	79fb      	ldrb	r3, [r7, #7]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d10d      	bne.n	8012cd2 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8012cb6:	4a0a      	ldr	r2, [pc, #40]	; (8012ce0 <SwitchClass+0x194>)
 8012cb8:	79fb      	ldrb	r3, [r7, #7]
 8012cba:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8012cbe:	4b0a      	ldr	r3, [pc, #40]	; (8012ce8 <SwitchClass+0x19c>)
 8012cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cc2:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8012cc8:	e003      	b.n	8012cd2 <SwitchClass+0x186>
            break;
 8012cca:	bf00      	nop
 8012ccc:	e002      	b.n	8012cd4 <SwitchClass+0x188>
            break;
 8012cce:	bf00      	nop
 8012cd0:	e000      	b.n	8012cd4 <SwitchClass+0x188>
            break;
 8012cd2:	bf00      	nop
        }
    }

    return status;
 8012cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	3710      	adds	r7, #16
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8012cde:	bf00      	nop
 8012ce0:	20001330 	.word	0x20001330
 8012ce4:	20000e24 	.word	0x20000e24
 8012ce8:	08021e08 	.word	0x08021e08

08012cec <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b086      	sub	sp, #24
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012cf6:	4b10      	ldr	r3, [pc, #64]	; (8012d38 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012cf8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012cfc:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8012cfe:	79fb      	ldrb	r3, [r7, #7]
 8012d00:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8012d02:	230d      	movs	r3, #13
 8012d04:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8012d06:	4b0c      	ldr	r3, [pc, #48]	; (8012d38 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012d08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d001      	beq.n	8012d14 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8012d10:	230e      	movs	r3, #14
 8012d12:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d14:	4b08      	ldr	r3, [pc, #32]	; (8012d38 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012d1a:	f107 0210 	add.w	r2, r7, #16
 8012d1e:	4611      	mov	r1, r2
 8012d20:	4618      	mov	r0, r3
 8012d22:	f006 ff11 	bl	8019b48 <RegionGetPhyParam>
 8012d26:	4603      	mov	r3, r0
 8012d28:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	b2db      	uxtb	r3, r3
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3718      	adds	r7, #24
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}
 8012d36:	bf00      	nop
 8012d38:	20001330 	.word	0x20001330

08012d3c <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b084      	sub	sp, #16
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	4603      	mov	r3, r0
 8012d44:	71fb      	strb	r3, [r7, #7]
 8012d46:	460b      	mov	r3, r1
 8012d48:	71bb      	strb	r3, [r7, #6]
 8012d4a:	4613      	mov	r3, r2
 8012d4c:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8012d4e:	2300      	movs	r3, #0
 8012d50:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8012d52:	2300      	movs	r3, #0
 8012d54:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8012d56:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f7ff ffc6 	bl	8012cec <GetMaxAppPayloadWithoutFOptsLength>
 8012d60:	4603      	mov	r3, r0
 8012d62:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8012d64:	79fb      	ldrb	r3, [r7, #7]
 8012d66:	b29a      	uxth	r2, r3
 8012d68:	797b      	ldrb	r3, [r7, #5]
 8012d6a:	b29b      	uxth	r3, r3
 8012d6c:	4413      	add	r3, r2
 8012d6e:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8012d70:	89ba      	ldrh	r2, [r7, #12]
 8012d72:	89fb      	ldrh	r3, [r7, #14]
 8012d74:	429a      	cmp	r2, r3
 8012d76:	d804      	bhi.n	8012d82 <ValidatePayloadLength+0x46>
 8012d78:	89bb      	ldrh	r3, [r7, #12]
 8012d7a:	2bff      	cmp	r3, #255	; 0xff
 8012d7c:	d801      	bhi.n	8012d82 <ValidatePayloadLength+0x46>
    {
        return true;
 8012d7e:	2301      	movs	r3, #1
 8012d80:	e000      	b.n	8012d84 <ValidatePayloadLength+0x48>
    }
    return false;
 8012d82:	2300      	movs	r3, #0
}
 8012d84:	4618      	mov	r0, r3
 8012d86:	3710      	adds	r7, #16
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}

08012d8c <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8012d8c:	b590      	push	{r4, r7, lr}
 8012d8e:	b0a5      	sub	sp, #148	; 0x94
 8012d90:	af02      	add	r7, sp, #8
 8012d92:	6078      	str	r0, [r7, #4]
 8012d94:	4608      	mov	r0, r1
 8012d96:	4611      	mov	r1, r2
 8012d98:	461a      	mov	r2, r3
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	70fb      	strb	r3, [r7, #3]
 8012d9e:	460b      	mov	r3, r1
 8012da0:	70bb      	strb	r3, [r7, #2]
 8012da2:	4613      	mov	r3, r2
 8012da4:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8012da6:	2300      	movs	r3, #0
 8012da8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8012dac:	2300      	movs	r3, #0
 8012dae:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012db2:	2300      	movs	r3, #0
 8012db4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8012db8:	f000 bc6d 	b.w	8013696 <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8012dbc:	78fb      	ldrb	r3, [r7, #3]
 8012dbe:	687a      	ldr	r2, [r7, #4]
 8012dc0:	4413      	add	r3, r2
 8012dc2:	781b      	ldrb	r3, [r3, #0]
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f005 fa63 	bl	8018290 <LoRaMacCommandsGetCmdSize>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	461a      	mov	r2, r3
 8012dce:	78fb      	ldrb	r3, [r7, #3]
 8012dd0:	441a      	add	r2, r3
 8012dd2:	78bb      	ldrb	r3, [r7, #2]
 8012dd4:	429a      	cmp	r2, r3
 8012dd6:	f300 8464 	bgt.w	80136a2 <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8012dda:	78fb      	ldrb	r3, [r7, #3]
 8012ddc:	1c5a      	adds	r2, r3, #1
 8012dde:	70fa      	strb	r2, [r7, #3]
 8012de0:	461a      	mov	r2, r3
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	4413      	add	r3, r2
 8012de6:	781b      	ldrb	r3, [r3, #0]
 8012de8:	3b02      	subs	r3, #2
 8012dea:	2b11      	cmp	r3, #17
 8012dec:	f200 845b 	bhi.w	80136a6 <ProcessMacCommands+0x91a>
 8012df0:	a201      	add	r2, pc, #4	; (adr r2, 8012df8 <ProcessMacCommands+0x6c>)
 8012df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012df6:	bf00      	nop
 8012df8:	08012e41 	.word	0x08012e41
 8012dfc:	08012e83 	.word	0x08012e83
 8012e00:	08012f9f 	.word	0x08012f9f
 8012e04:	08012fdd 	.word	0x08012fdd
 8012e08:	080130c9 	.word	0x080130c9
 8012e0c:	08013125 	.word	0x08013125
 8012e10:	080131e1 	.word	0x080131e1
 8012e14:	08013237 	.word	0x08013237
 8012e18:	0801331b 	.word	0x0801331b
 8012e1c:	080136a7 	.word	0x080136a7
 8012e20:	080136a7 	.word	0x080136a7
 8012e24:	080133c1 	.word	0x080133c1
 8012e28:	080136a7 	.word	0x080136a7
 8012e2c:	080136a7 	.word	0x080136a7
 8012e30:	080134d7 	.word	0x080134d7
 8012e34:	0801350b 	.word	0x0801350b
 8012e38:	0801359b 	.word	0x0801359b
 8012e3c:	08013611 	.word	0x08013611
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8012e40:	2004      	movs	r0, #4
 8012e42:	f005 fbfd 	bl	8018640 <LoRaMacConfirmQueueIsCmdActive>
 8012e46:	4603      	mov	r3, r0
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	f000 8424 	beq.w	8013696 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8012e4e:	2104      	movs	r1, #4
 8012e50:	2000      	movs	r0, #0
 8012e52:	f005 fb69 	bl	8018528 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8012e56:	78fb      	ldrb	r3, [r7, #3]
 8012e58:	1c5a      	adds	r2, r3, #1
 8012e5a:	70fa      	strb	r2, [r7, #3]
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	4413      	add	r3, r2
 8012e62:	781a      	ldrb	r2, [r3, #0]
 8012e64:	4bac      	ldr	r3, [pc, #688]	; (8013118 <ProcessMacCommands+0x38c>)
 8012e66:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8012e6a:	78fb      	ldrb	r3, [r7, #3]
 8012e6c:	1c5a      	adds	r2, r3, #1
 8012e6e:	70fa      	strb	r2, [r7, #3]
 8012e70:	461a      	mov	r2, r3
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	4413      	add	r3, r2
 8012e76:	781a      	ldrb	r2, [r3, #0]
 8012e78:	4ba7      	ldr	r3, [pc, #668]	; (8013118 <ProcessMacCommands+0x38c>)
 8012e7a:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 8012e7e:	f000 bc0a 	b.w	8013696 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8012e82:	2300      	movs	r3, #0
 8012e84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8012e88:	2300      	movs	r3, #0
 8012e8a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 8012e8e:	2300      	movs	r3, #0
 8012e90:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8012e94:	2300      	movs	r3, #0
 8012e96:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 8012e9a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8012e9e:	f083 0301 	eor.w	r3, r3, #1
 8012ea2:	b2db      	uxtb	r3, r3
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d078      	beq.n	8012f9a <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 8012ea8:	2301      	movs	r3, #1
 8012eaa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8012eae:	78fb      	ldrb	r3, [r7, #3]
 8012eb0:	3b01      	subs	r3, #1
 8012eb2:	687a      	ldr	r2, [r7, #4]
 8012eb4:	4413      	add	r3, r2
 8012eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8012eb8:	78ba      	ldrb	r2, [r7, #2]
 8012eba:	78fb      	ldrb	r3, [r7, #3]
 8012ebc:	1ad3      	subs	r3, r2, r3
 8012ebe:	b2db      	uxtb	r3, r3
 8012ec0:	3301      	adds	r3, #1
 8012ec2:	b2db      	uxtb	r3, r3
 8012ec4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012ec8:	4b94      	ldr	r3, [pc, #592]	; (801311c <ProcessMacCommands+0x390>)
 8012eca:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8012ece:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012ed2:	4b92      	ldr	r3, [pc, #584]	; (801311c <ProcessMacCommands+0x390>)
 8012ed4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012ed8:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012edc:	4b8f      	ldr	r3, [pc, #572]	; (801311c <ProcessMacCommands+0x390>)
 8012ede:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012ee2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012ee6:	4b8d      	ldr	r3, [pc, #564]	; (801311c <ProcessMacCommands+0x390>)
 8012ee8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012eec:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012ef0:	4b8a      	ldr	r3, [pc, #552]	; (801311c <ProcessMacCommands+0x390>)
 8012ef2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8012ef6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8012efa:	4b88      	ldr	r3, [pc, #544]	; (801311c <ProcessMacCommands+0x390>)
 8012efc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8012f00:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8012f02:	4b86      	ldr	r3, [pc, #536]	; (801311c <ProcessMacCommands+0x390>)
 8012f04:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012f08:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8012f0c:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8012f10:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012f14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012f18:	9301      	str	r3, [sp, #4]
 8012f1a:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8012f1e:	9300      	str	r3, [sp, #0]
 8012f20:	4623      	mov	r3, r4
 8012f22:	f006 fece 	bl	8019cc2 <RegionLinkAdrReq>
 8012f26:	4603      	mov	r3, r0
 8012f28:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8012f2c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012f30:	f003 0307 	and.w	r3, r3, #7
 8012f34:	2b07      	cmp	r3, #7
 8012f36:	d10e      	bne.n	8012f56 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8012f38:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8012f3c:	4b77      	ldr	r3, [pc, #476]	; (801311c <ProcessMacCommands+0x390>)
 8012f3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8012f42:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8012f46:	4b75      	ldr	r3, [pc, #468]	; (801311c <ProcessMacCommands+0x390>)
 8012f48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8012f4c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8012f50:	4b72      	ldr	r3, [pc, #456]	; (801311c <ProcessMacCommands+0x390>)
 8012f52:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8012f56:	2300      	movs	r3, #0
 8012f58:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8012f5c:	e00b      	b.n	8012f76 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8012f5e:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8012f62:	2201      	movs	r2, #1
 8012f64:	4619      	mov	r1, r3
 8012f66:	2003      	movs	r0, #3
 8012f68:	f005 f842 	bl	8017ff0 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8012f6c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8012f70:	3301      	adds	r3, #1
 8012f72:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8012f76:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8012f7a:	4a69      	ldr	r2, [pc, #420]	; (8013120 <ProcessMacCommands+0x394>)
 8012f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8012f80:	089b      	lsrs	r3, r3, #2
 8012f82:	b2db      	uxtb	r3, r3
 8012f84:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	d3e8      	bcc.n	8012f5e <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 8012f8c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8012f90:	78fb      	ldrb	r3, [r7, #3]
 8012f92:	4413      	add	r3, r2
 8012f94:	b2db      	uxtb	r3, r3
 8012f96:	3b01      	subs	r3, #1
 8012f98:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8012f9a:	bf00      	nop
 8012f9c:	e37b      	b.n	8013696 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8012f9e:	78fb      	ldrb	r3, [r7, #3]
 8012fa0:	1c5a      	adds	r2, r3, #1
 8012fa2:	70fa      	strb	r2, [r7, #3]
 8012fa4:	461a      	mov	r2, r3
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	4413      	add	r3, r2
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	f003 030f 	and.w	r3, r3, #15
 8012fb0:	b2da      	uxtb	r2, r3
 8012fb2:	4b5a      	ldr	r3, [pc, #360]	; (801311c <ProcessMacCommands+0x390>)
 8012fb4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8012fb8:	4b58      	ldr	r3, [pc, #352]	; (801311c <ProcessMacCommands+0x390>)
 8012fba:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8012fbe:	461a      	mov	r2, r3
 8012fc0:	2301      	movs	r3, #1
 8012fc2:	4093      	lsls	r3, r2
 8012fc4:	b29a      	uxth	r2, r3
 8012fc6:	4b55      	ldr	r3, [pc, #340]	; (801311c <ProcessMacCommands+0x390>)
 8012fc8:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8012fcc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	4619      	mov	r1, r3
 8012fd4:	2004      	movs	r0, #4
 8012fd6:	f005 f80b 	bl	8017ff0 <LoRaMacCommandsAddCmd>
                break;
 8012fda:	e35c      	b.n	8013696 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8012fdc:	2307      	movs	r3, #7
 8012fde:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8012fe2:	78fb      	ldrb	r3, [r7, #3]
 8012fe4:	687a      	ldr	r2, [r7, #4]
 8012fe6:	4413      	add	r3, r2
 8012fe8:	781b      	ldrb	r3, [r3, #0]
 8012fea:	091b      	lsrs	r3, r3, #4
 8012fec:	b2db      	uxtb	r3, r3
 8012fee:	b25b      	sxtb	r3, r3
 8012ff0:	f003 0307 	and.w	r3, r3, #7
 8012ff4:	b25b      	sxtb	r3, r3
 8012ff6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8012ffa:	78fb      	ldrb	r3, [r7, #3]
 8012ffc:	687a      	ldr	r2, [r7, #4]
 8012ffe:	4413      	add	r3, r2
 8013000:	781b      	ldrb	r3, [r3, #0]
 8013002:	b25b      	sxtb	r3, r3
 8013004:	f003 030f 	and.w	r3, r3, #15
 8013008:	b25b      	sxtb	r3, r3
 801300a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 801300e:	78fb      	ldrb	r3, [r7, #3]
 8013010:	3301      	adds	r3, #1
 8013012:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8013014:	78fb      	ldrb	r3, [r7, #3]
 8013016:	1c5a      	adds	r2, r3, #1
 8013018:	70fa      	strb	r2, [r7, #3]
 801301a:	461a      	mov	r2, r3
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	4413      	add	r3, r2
 8013020:	781b      	ldrb	r3, [r3, #0]
 8013022:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8013024:	78fb      	ldrb	r3, [r7, #3]
 8013026:	1c5a      	adds	r2, r3, #1
 8013028:	70fa      	strb	r2, [r7, #3]
 801302a:	461a      	mov	r2, r3
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	4413      	add	r3, r2
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	021a      	lsls	r2, r3, #8
 8013034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013036:	4313      	orrs	r3, r2
 8013038:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801303a:	78fb      	ldrb	r3, [r7, #3]
 801303c:	1c5a      	adds	r2, r3, #1
 801303e:	70fa      	strb	r2, [r7, #3]
 8013040:	461a      	mov	r2, r3
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	4413      	add	r3, r2
 8013046:	781b      	ldrb	r3, [r3, #0]
 8013048:	041a      	lsls	r2, r3, #16
 801304a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801304c:	4313      	orrs	r3, r2
 801304e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8013050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013052:	2264      	movs	r2, #100	; 0x64
 8013054:	fb02 f303 	mul.w	r3, r2, r3
 8013058:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 801305a:	4b30      	ldr	r3, [pc, #192]	; (801311c <ProcessMacCommands+0x390>)
 801305c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013060:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8013064:	4611      	mov	r1, r2
 8013066:	4618      	mov	r0, r3
 8013068:	f006 fe45 	bl	8019cf6 <RegionRxParamSetupReq>
 801306c:	4603      	mov	r3, r0
 801306e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8013072:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013076:	f003 0307 	and.w	r3, r3, #7
 801307a:	2b07      	cmp	r3, #7
 801307c:	d117      	bne.n	80130ae <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 801307e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8013082:	b2da      	uxtb	r2, r3
 8013084:	4b25      	ldr	r3, [pc, #148]	; (801311c <ProcessMacCommands+0x390>)
 8013086:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 801308a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 801308e:	b2da      	uxtb	r2, r3
 8013090:	4b22      	ldr	r3, [pc, #136]	; (801311c <ProcessMacCommands+0x390>)
 8013092:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8013096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013098:	4a20      	ldr	r2, [pc, #128]	; (801311c <ProcessMacCommands+0x390>)
 801309a:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 801309c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801309e:	4a1f      	ldr	r2, [pc, #124]	; (801311c <ProcessMacCommands+0x390>)
 80130a0:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80130a2:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80130a6:	b2da      	uxtb	r2, r3
 80130a8:	4b1c      	ldr	r3, [pc, #112]	; (801311c <ProcessMacCommands+0x390>)
 80130aa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 80130ae:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80130b2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80130b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80130ba:	2201      	movs	r2, #1
 80130bc:	4619      	mov	r1, r3
 80130be:	2005      	movs	r0, #5
 80130c0:	f004 ff96 	bl	8017ff0 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 80130c4:	bf00      	nop
 80130c6:	e2e6      	b.n	8013696 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80130c8:	23ff      	movs	r3, #255	; 0xff
 80130ca:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80130ce:	4b12      	ldr	r3, [pc, #72]	; (8013118 <ProcessMacCommands+0x38c>)
 80130d0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d00d      	beq.n	80130f4 <ProcessMacCommands+0x368>
 80130d8:	4b0f      	ldr	r3, [pc, #60]	; (8013118 <ProcessMacCommands+0x38c>)
 80130da:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d007      	beq.n	80130f4 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80130e4:	4b0c      	ldr	r3, [pc, #48]	; (8013118 <ProcessMacCommands+0x38c>)
 80130e6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	4798      	blx	r3
 80130ee:	4603      	mov	r3, r0
 80130f0:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 80130f4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80130f8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80130fc:	787b      	ldrb	r3, [r7, #1]
 80130fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013102:	b2db      	uxtb	r3, r3
 8013104:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8013108:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801310c:	2202      	movs	r2, #2
 801310e:	4619      	mov	r1, r3
 8013110:	2006      	movs	r0, #6
 8013112:	f004 ff6d 	bl	8017ff0 <LoRaMacCommandsAddCmd>
                break;
 8013116:	e2be      	b.n	8013696 <ProcessMacCommands+0x90a>
 8013118:	20000e24 	.word	0x20000e24
 801311c:	20001330 	.word	0x20001330
 8013120:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8013124:	2303      	movs	r3, #3
 8013126:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 801312a:	78fb      	ldrb	r3, [r7, #3]
 801312c:	1c5a      	adds	r2, r3, #1
 801312e:	70fa      	strb	r2, [r7, #3]
 8013130:	461a      	mov	r2, r3
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	4413      	add	r3, r2
 8013136:	781b      	ldrb	r3, [r3, #0]
 8013138:	b25b      	sxtb	r3, r3
 801313a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 801313e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013142:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8013144:	78fb      	ldrb	r3, [r7, #3]
 8013146:	1c5a      	adds	r2, r3, #1
 8013148:	70fa      	strb	r2, [r7, #3]
 801314a:	461a      	mov	r2, r3
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	4413      	add	r3, r2
 8013150:	781b      	ldrb	r3, [r3, #0]
 8013152:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8013154:	78fb      	ldrb	r3, [r7, #3]
 8013156:	1c5a      	adds	r2, r3, #1
 8013158:	70fa      	strb	r2, [r7, #3]
 801315a:	461a      	mov	r2, r3
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	4413      	add	r3, r2
 8013160:	781b      	ldrb	r3, [r3, #0]
 8013162:	021a      	lsls	r2, r3, #8
 8013164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013166:	4313      	orrs	r3, r2
 8013168:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801316a:	78fb      	ldrb	r3, [r7, #3]
 801316c:	1c5a      	adds	r2, r3, #1
 801316e:	70fa      	strb	r2, [r7, #3]
 8013170:	461a      	mov	r2, r3
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	4413      	add	r3, r2
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	041a      	lsls	r2, r3, #16
 801317a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801317c:	4313      	orrs	r3, r2
 801317e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8013180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013182:	2264      	movs	r2, #100	; 0x64
 8013184:	fb02 f303 	mul.w	r3, r2, r3
 8013188:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 801318a:	2300      	movs	r3, #0
 801318c:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 801318e:	78fb      	ldrb	r3, [r7, #3]
 8013190:	1c5a      	adds	r2, r3, #1
 8013192:	70fa      	strb	r2, [r7, #3]
 8013194:	461a      	mov	r2, r3
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	4413      	add	r3, r2
 801319a:	781b      	ldrb	r3, [r3, #0]
 801319c:	b25b      	sxtb	r3, r3
 801319e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80131a2:	4b85      	ldr	r3, [pc, #532]	; (80133b8 <ProcessMacCommands+0x62c>)
 80131a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80131a8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80131ac:	4611      	mov	r1, r2
 80131ae:	4618      	mov	r0, r3
 80131b0:	f006 fdb4 	bl	8019d1c <RegionNewChannelReq>
 80131b4:	4603      	mov	r3, r0
 80131b6:	b2db      	uxtb	r3, r3
 80131b8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80131bc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80131c0:	b25b      	sxtb	r3, r3
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	db0a      	blt.n	80131dc <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 80131c6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80131ca:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80131ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80131d2:	2201      	movs	r2, #1
 80131d4:	4619      	mov	r1, r3
 80131d6:	2007      	movs	r0, #7
 80131d8:	f004 ff0a 	bl	8017ff0 <LoRaMacCommandsAddCmd>
                }
                break;
 80131dc:	bf00      	nop
 80131de:	e25a      	b.n	8013696 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 80131e0:	78fb      	ldrb	r3, [r7, #3]
 80131e2:	1c5a      	adds	r2, r3, #1
 80131e4:	70fa      	strb	r2, [r7, #3]
 80131e6:	461a      	mov	r2, r3
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	4413      	add	r3, r2
 80131ec:	781b      	ldrb	r3, [r3, #0]
 80131ee:	f003 030f 	and.w	r3, r3, #15
 80131f2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 80131f6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d104      	bne.n	8013208 <ProcessMacCommands+0x47c>
                {
                    delay++;
 80131fe:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8013202:	3301      	adds	r3, #1
 8013204:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8013208:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801320c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013210:	fb02 f303 	mul.w	r3, r2, r3
 8013214:	461a      	mov	r2, r3
 8013216:	4b68      	ldr	r3, [pc, #416]	; (80133b8 <ProcessMacCommands+0x62c>)
 8013218:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801321a:	4b67      	ldr	r3, [pc, #412]	; (80133b8 <ProcessMacCommands+0x62c>)
 801321c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801321e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8013222:	4a65      	ldr	r2, [pc, #404]	; (80133b8 <ProcessMacCommands+0x62c>)
 8013224:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8013226:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801322a:	2200      	movs	r2, #0
 801322c:	4619      	mov	r1, r3
 801322e:	2008      	movs	r0, #8
 8013230:	f004 fede 	bl	8017ff0 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 8013234:	e22f      	b.n	8013696 <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8013236:	78fb      	ldrb	r3, [r7, #3]
 8013238:	1c5a      	adds	r2, r3, #1
 801323a:	70fa      	strb	r2, [r7, #3]
 801323c:	461a      	mov	r2, r3
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	4413      	add	r3, r2
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8013248:	2300      	movs	r3, #0
 801324a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 801324e:	2300      	movs	r3, #0
 8013250:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8013254:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8013258:	f003 0320 	and.w	r3, r3, #32
 801325c:	2b00      	cmp	r3, #0
 801325e:	d002      	beq.n	8013266 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8013260:	2301      	movs	r3, #1
 8013262:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8013266:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801326a:	f003 0310 	and.w	r3, r3, #16
 801326e:	2b00      	cmp	r3, #0
 8013270:	d002      	beq.n	8013278 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8013272:	2301      	movs	r3, #1
 8013274:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8013278:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801327c:	f003 030f 	and.w	r3, r3, #15
 8013280:	b2db      	uxtb	r3, r3
 8013282:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8013286:	4b4c      	ldr	r3, [pc, #304]	; (80133b8 <ProcessMacCommands+0x62c>)
 8013288:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801328c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8013290:	4611      	mov	r1, r2
 8013292:	4618      	mov	r0, r3
 8013294:	f006 fd55 	bl	8019d42 <RegionTxParamSetupReq>
 8013298:	4603      	mov	r3, r0
 801329a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801329e:	d03a      	beq.n	8013316 <ProcessMacCommands+0x58a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80132a0:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80132a4:	4b44      	ldr	r3, [pc, #272]	; (80133b8 <ProcessMacCommands+0x62c>)
 80132a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80132aa:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80132ae:	4b42      	ldr	r3, [pc, #264]	; (80133b8 <ProcessMacCommands+0x62c>)
 80132b0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80132b4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80132b8:	461a      	mov	r2, r3
 80132ba:	4b40      	ldr	r3, [pc, #256]	; (80133bc <ProcessMacCommands+0x630>)
 80132bc:	5c9b      	ldrb	r3, [r3, r2]
 80132be:	4618      	mov	r0, r3
 80132c0:	f7ed fce6 	bl	8000c90 <__aeabi_ui2f>
 80132c4:	4603      	mov	r3, r0
 80132c6:	4a3c      	ldr	r2, [pc, #240]	; (80133b8 <ProcessMacCommands+0x62c>)
 80132c8:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80132ca:	2302      	movs	r3, #2
 80132cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80132d0:	4b39      	ldr	r3, [pc, #228]	; (80133b8 <ProcessMacCommands+0x62c>)
 80132d2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80132d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80132da:	4b37      	ldr	r3, [pc, #220]	; (80133b8 <ProcessMacCommands+0x62c>)
 80132dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80132e0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80132e4:	4611      	mov	r1, r2
 80132e6:	4618      	mov	r0, r3
 80132e8:	f006 fc2e 	bl	8019b48 <RegionGetPhyParam>
 80132ec:	4603      	mov	r3, r0
 80132ee:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80132f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132f2:	b25a      	sxtb	r2, r3
 80132f4:	4b30      	ldr	r3, [pc, #192]	; (80133b8 <ProcessMacCommands+0x62c>)
 80132f6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80132fa:	4293      	cmp	r3, r2
 80132fc:	bfb8      	it	lt
 80132fe:	4613      	movlt	r3, r2
 8013300:	b25a      	sxtb	r2, r3
 8013302:	4b2d      	ldr	r3, [pc, #180]	; (80133b8 <ProcessMacCommands+0x62c>)
 8013304:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8013308:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801330c:	2200      	movs	r2, #0
 801330e:	4619      	mov	r1, r3
 8013310:	2009      	movs	r0, #9
 8013312:	f004 fe6d 	bl	8017ff0 <LoRaMacCommandsAddCmd>
                }
                break;
 8013316:	bf00      	nop
 8013318:	e1bd      	b.n	8013696 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 801331a:	2303      	movs	r3, #3
 801331c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8013320:	78fb      	ldrb	r3, [r7, #3]
 8013322:	1c5a      	adds	r2, r3, #1
 8013324:	70fa      	strb	r2, [r7, #3]
 8013326:	461a      	mov	r2, r3
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	4413      	add	r3, r2
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8013332:	78fb      	ldrb	r3, [r7, #3]
 8013334:	1c5a      	adds	r2, r3, #1
 8013336:	70fa      	strb	r2, [r7, #3]
 8013338:	461a      	mov	r2, r3
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	4413      	add	r3, r2
 801333e:	781b      	ldrb	r3, [r3, #0]
 8013340:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8013342:	78fb      	ldrb	r3, [r7, #3]
 8013344:	1c5a      	adds	r2, r3, #1
 8013346:	70fa      	strb	r2, [r7, #3]
 8013348:	461a      	mov	r2, r3
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	4413      	add	r3, r2
 801334e:	781b      	ldrb	r3, [r3, #0]
 8013350:	021a      	lsls	r2, r3, #8
 8013352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013354:	4313      	orrs	r3, r2
 8013356:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8013358:	78fb      	ldrb	r3, [r7, #3]
 801335a:	1c5a      	adds	r2, r3, #1
 801335c:	70fa      	strb	r2, [r7, #3]
 801335e:	461a      	mov	r2, r3
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	4413      	add	r3, r2
 8013364:	781b      	ldrb	r3, [r3, #0]
 8013366:	041a      	lsls	r2, r3, #16
 8013368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801336a:	4313      	orrs	r3, r2
 801336c:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 801336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013370:	2264      	movs	r2, #100	; 0x64
 8013372:	fb02 f303 	mul.w	r3, r2, r3
 8013376:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8013378:	4b0f      	ldr	r3, [pc, #60]	; (80133b8 <ProcessMacCommands+0x62c>)
 801337a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801337e:	f107 0220 	add.w	r2, r7, #32
 8013382:	4611      	mov	r1, r2
 8013384:	4618      	mov	r0, r3
 8013386:	f006 fcef 	bl	8019d68 <RegionDlChannelReq>
 801338a:	4603      	mov	r3, r0
 801338c:	b2db      	uxtb	r3, r3
 801338e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8013392:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013396:	b25b      	sxtb	r3, r3
 8013398:	2b00      	cmp	r3, #0
 801339a:	db0a      	blt.n	80133b2 <ProcessMacCommands+0x626>
                {
                    macCmdPayload[0] = status;
 801339c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80133a0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80133a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80133a8:	2201      	movs	r2, #1
 80133aa:	4619      	mov	r1, r3
 80133ac:	200a      	movs	r0, #10
 80133ae:	f004 fe1f 	bl	8017ff0 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 80133b2:	bf00      	nop
 80133b4:	e16f      	b.n	8013696 <ProcessMacCommands+0x90a>
 80133b6:	bf00      	nop
 80133b8:	20001330 	.word	0x20001330
 80133bc:	08021dc0 	.word	0x08021dc0
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80133c0:	200a      	movs	r0, #10
 80133c2:	f005 f93d 	bl	8018640 <LoRaMacConfirmQueueIsCmdActive>
 80133c6:	4603      	mov	r3, r0
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	f000 8164 	beq.w	8013696 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80133ce:	210a      	movs	r1, #10
 80133d0:	2000      	movs	r0, #0
 80133d2:	f005 f8a9 	bl	8018528 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 80133d6:	f107 0318 	add.w	r3, r7, #24
 80133da:	2200      	movs	r2, #0
 80133dc:	601a      	str	r2, [r3, #0]
 80133de:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 80133e0:	f107 0310 	add.w	r3, r7, #16
 80133e4:	2200      	movs	r2, #0
 80133e6:	601a      	str	r2, [r3, #0]
 80133e8:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 80133ea:	f107 0308 	add.w	r3, r7, #8
 80133ee:	2200      	movs	r2, #0
 80133f0:	601a      	str	r2, [r3, #0]
 80133f2:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80133f4:	78fb      	ldrb	r3, [r7, #3]
 80133f6:	1c5a      	adds	r2, r3, #1
 80133f8:	70fa      	strb	r2, [r7, #3]
 80133fa:	461a      	mov	r2, r3
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	4413      	add	r3, r2
 8013400:	781b      	ldrb	r3, [r3, #0]
 8013402:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8013404:	78fb      	ldrb	r3, [r7, #3]
 8013406:	1c5a      	adds	r2, r3, #1
 8013408:	70fa      	strb	r2, [r7, #3]
 801340a:	461a      	mov	r2, r3
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	4413      	add	r3, r2
 8013410:	781b      	ldrb	r3, [r3, #0]
 8013412:	021a      	lsls	r2, r3, #8
 8013414:	69bb      	ldr	r3, [r7, #24]
 8013416:	4313      	orrs	r3, r2
 8013418:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 801341a:	78fb      	ldrb	r3, [r7, #3]
 801341c:	1c5a      	adds	r2, r3, #1
 801341e:	70fa      	strb	r2, [r7, #3]
 8013420:	461a      	mov	r2, r3
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	4413      	add	r3, r2
 8013426:	781b      	ldrb	r3, [r3, #0]
 8013428:	041a      	lsls	r2, r3, #16
 801342a:	69bb      	ldr	r3, [r7, #24]
 801342c:	4313      	orrs	r3, r2
 801342e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8013430:	78fb      	ldrb	r3, [r7, #3]
 8013432:	1c5a      	adds	r2, r3, #1
 8013434:	70fa      	strb	r2, [r7, #3]
 8013436:	461a      	mov	r2, r3
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	4413      	add	r3, r2
 801343c:	781b      	ldrb	r3, [r3, #0]
 801343e:	061a      	lsls	r2, r3, #24
 8013440:	69bb      	ldr	r3, [r7, #24]
 8013442:	4313      	orrs	r3, r2
 8013444:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8013446:	78fb      	ldrb	r3, [r7, #3]
 8013448:	1c5a      	adds	r2, r3, #1
 801344a:	70fa      	strb	r2, [r7, #3]
 801344c:	461a      	mov	r2, r3
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	4413      	add	r3, r2
 8013452:	781b      	ldrb	r3, [r3, #0]
 8013454:	b21b      	sxth	r3, r3
 8013456:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8013458:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801345c:	461a      	mov	r2, r3
 801345e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013462:	fb02 f303 	mul.w	r3, r2, r3
 8013466:	121b      	asrs	r3, r3, #8
 8013468:	b21b      	sxth	r3, r3
 801346a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 801346c:	f107 0310 	add.w	r3, r7, #16
 8013470:	f107 0218 	add.w	r2, r7, #24
 8013474:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013478:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 801347c:	693a      	ldr	r2, [r7, #16]
 801347e:	4b8c      	ldr	r3, [pc, #560]	; (80136b0 <ProcessMacCommands+0x924>)
 8013480:	4413      	add	r3, r2
 8013482:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8013484:	f107 0308 	add.w	r3, r7, #8
 8013488:	4618      	mov	r0, r3
 801348a:	f00c fae7 	bl	801fa5c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 801348e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8013492:	4b88      	ldr	r3, [pc, #544]	; (80136b4 <ProcessMacCommands+0x928>)
 8013494:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8013498:	9200      	str	r2, [sp, #0]
 801349a:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 801349e:	f107 0210 	add.w	r2, r7, #16
 80134a2:	ca06      	ldmia	r2, {r1, r2}
 80134a4:	f00c fa73 	bl	801f98e <SysTimeSub>
 80134a8:	f107 0010 	add.w	r0, r7, #16
 80134ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80134ae:	9300      	str	r3, [sp, #0]
 80134b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80134b2:	f107 0208 	add.w	r2, r7, #8
 80134b6:	ca06      	ldmia	r2, {r1, r2}
 80134b8:	f00c fa30 	bl	801f91c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 80134bc:	f107 0310 	add.w	r3, r7, #16
 80134c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80134c4:	f00c fa9c 	bl	801fa00 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80134c8:	f004 fb10 	bl	8017aec <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80134cc:	4b79      	ldr	r3, [pc, #484]	; (80136b4 <ProcessMacCommands+0x928>)
 80134ce:	2201      	movs	r2, #1
 80134d0:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 80134d4:	e0df      	b.n	8013696 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80134d6:	200d      	movs	r0, #13
 80134d8:	f005 f8b2 	bl	8018640 <LoRaMacConfirmQueueIsCmdActive>
 80134dc:	4603      	mov	r3, r0
 80134de:	2b00      	cmp	r3, #0
 80134e0:	f000 80d9 	beq.w	8013696 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80134e4:	210d      	movs	r1, #13
 80134e6:	2000      	movs	r0, #0
 80134e8:	f005 f81e 	bl	8018528 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80134ec:	4b71      	ldr	r3, [pc, #452]	; (80136b4 <ProcessMacCommands+0x928>)
 80134ee:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80134f2:	2b04      	cmp	r3, #4
 80134f4:	f000 80cf 	beq.w	8013696 <ProcessMacCommands+0x90a>
 80134f8:	4b6e      	ldr	r3, [pc, #440]	; (80136b4 <ProcessMacCommands+0x928>)
 80134fa:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80134fe:	2b05      	cmp	r3, #5
 8013500:	f000 80c9 	beq.w	8013696 <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8013504:	f004 fa12 	bl	801792c <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8013508:	e0c5      	b.n	8013696 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 801350a:	2303      	movs	r3, #3
 801350c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8013510:	2300      	movs	r3, #0
 8013512:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8013514:	78fb      	ldrb	r3, [r7, #3]
 8013516:	1c5a      	adds	r2, r3, #1
 8013518:	70fa      	strb	r2, [r7, #3]
 801351a:	461a      	mov	r2, r3
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	4413      	add	r3, r2
 8013520:	781b      	ldrb	r3, [r3, #0]
 8013522:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8013524:	78fb      	ldrb	r3, [r7, #3]
 8013526:	1c5a      	adds	r2, r3, #1
 8013528:	70fa      	strb	r2, [r7, #3]
 801352a:	461a      	mov	r2, r3
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	4413      	add	r3, r2
 8013530:	781b      	ldrb	r3, [r3, #0]
 8013532:	021b      	lsls	r3, r3, #8
 8013534:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013536:	4313      	orrs	r3, r2
 8013538:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 801353a:	78fb      	ldrb	r3, [r7, #3]
 801353c:	1c5a      	adds	r2, r3, #1
 801353e:	70fa      	strb	r2, [r7, #3]
 8013540:	461a      	mov	r2, r3
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	4413      	add	r3, r2
 8013546:	781b      	ldrb	r3, [r3, #0]
 8013548:	041b      	lsls	r3, r3, #16
 801354a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801354c:	4313      	orrs	r3, r2
 801354e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8013550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013552:	2264      	movs	r2, #100	; 0x64
 8013554:	fb02 f303 	mul.w	r3, r2, r3
 8013558:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 801355a:	78fb      	ldrb	r3, [r7, #3]
 801355c:	1c5a      	adds	r2, r3, #1
 801355e:	70fa      	strb	r2, [r7, #3]
 8013560:	461a      	mov	r2, r3
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	4413      	add	r3, r2
 8013566:	781b      	ldrb	r3, [r3, #0]
 8013568:	f003 030f 	and.w	r3, r3, #15
 801356c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8013570:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013574:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8013576:	4618      	mov	r0, r3
 8013578:	f004 f9ee 	bl	8017958 <LoRaMacClassBPingSlotChannelReq>
 801357c:	4603      	mov	r3, r0
 801357e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8013582:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8013586:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 801358a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801358e:	2201      	movs	r2, #1
 8013590:	4619      	mov	r1, r3
 8013592:	2011      	movs	r0, #17
 8013594:	f004 fd2c 	bl	8017ff0 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 8013598:	e07d      	b.n	8013696 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 801359a:	200e      	movs	r0, #14
 801359c:	f005 f850 	bl	8018640 <LoRaMacConfirmQueueIsCmdActive>
 80135a0:	4603      	mov	r3, r0
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d077      	beq.n	8013696 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80135a6:	210e      	movs	r1, #14
 80135a8:	2000      	movs	r0, #0
 80135aa:	f004 ffbd 	bl	8018528 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80135ae:	2300      	movs	r3, #0
 80135b0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 80135b4:	2300      	movs	r3, #0
 80135b6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80135ba:	78fb      	ldrb	r3, [r7, #3]
 80135bc:	1c5a      	adds	r2, r3, #1
 80135be:	70fa      	strb	r2, [r7, #3]
 80135c0:	461a      	mov	r2, r3
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	4413      	add	r3, r2
 80135c6:	781b      	ldrb	r3, [r3, #0]
 80135c8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80135cc:	78fb      	ldrb	r3, [r7, #3]
 80135ce:	1c5a      	adds	r2, r3, #1
 80135d0:	70fa      	strb	r2, [r7, #3]
 80135d2:	461a      	mov	r2, r3
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	4413      	add	r3, r2
 80135d8:	781b      	ldrb	r3, [r3, #0]
 80135da:	021b      	lsls	r3, r3, #8
 80135dc:	b21a      	sxth	r2, r3
 80135de:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80135e2:	4313      	orrs	r3, r2
 80135e4:	b21b      	sxth	r3, r3
 80135e6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 80135ea:	78fb      	ldrb	r3, [r7, #3]
 80135ec:	1c5a      	adds	r2, r3, #1
 80135ee:	70fa      	strb	r2, [r7, #3]
 80135f0:	461a      	mov	r2, r3
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	4413      	add	r3, r2
 80135f6:	781b      	ldrb	r3, [r3, #0]
 80135f8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80135fc:	4b2e      	ldr	r3, [pc, #184]	; (80136b8 <ProcessMacCommands+0x92c>)
 80135fe:	681a      	ldr	r2, [r3, #0]
 8013600:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8013604:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8013608:	4618      	mov	r0, r3
 801360a:	f004 fa11 	bl	8017a30 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 801360e:	e042      	b.n	8013696 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8013610:	2300      	movs	r3, #0
 8013612:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8013616:	78fb      	ldrb	r3, [r7, #3]
 8013618:	1c5a      	adds	r2, r3, #1
 801361a:	70fa      	strb	r2, [r7, #3]
 801361c:	461a      	mov	r2, r3
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	4413      	add	r3, r2
 8013622:	781b      	ldrb	r3, [r3, #0]
 8013624:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8013628:	78fb      	ldrb	r3, [r7, #3]
 801362a:	1c5a      	adds	r2, r3, #1
 801362c:	70fa      	strb	r2, [r7, #3]
 801362e:	461a      	mov	r2, r3
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	4413      	add	r3, r2
 8013634:	781b      	ldrb	r3, [r3, #0]
 8013636:	021b      	lsls	r3, r3, #8
 8013638:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801363c:	4313      	orrs	r3, r2
 801363e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8013642:	78fb      	ldrb	r3, [r7, #3]
 8013644:	1c5a      	adds	r2, r3, #1
 8013646:	70fa      	strb	r2, [r7, #3]
 8013648:	461a      	mov	r2, r3
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	4413      	add	r3, r2
 801364e:	781b      	ldrb	r3, [r3, #0]
 8013650:	041b      	lsls	r3, r3, #16
 8013652:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013656:	4313      	orrs	r3, r2
 8013658:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 801365c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013660:	2264      	movs	r2, #100	; 0x64
 8013662:	fb02 f303 	mul.w	r3, r2, r3
 8013666:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 801366a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 801366e:	f004 fab5 	bl	8017bdc <LoRaMacClassBBeaconFreqReq>
 8013672:	4603      	mov	r3, r0
 8013674:	2b00      	cmp	r3, #0
 8013676:	d003      	beq.n	8013680 <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 8013678:	2301      	movs	r3, #1
 801367a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 801367e:	e002      	b.n	8013686 <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8013680:	2300      	movs	r3, #0
 8013682:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8013686:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801368a:	2201      	movs	r2, #1
 801368c:	4619      	mov	r1, r3
 801368e:	2013      	movs	r0, #19
 8013690:	f004 fcae 	bl	8017ff0 <LoRaMacCommandsAddCmd>
                }
                break;
 8013694:	bf00      	nop
    while( macIndex < commandsSize )
 8013696:	78fa      	ldrb	r2, [r7, #3]
 8013698:	78bb      	ldrb	r3, [r7, #2]
 801369a:	429a      	cmp	r2, r3
 801369c:	f4ff ab8e 	bcc.w	8012dbc <ProcessMacCommands+0x30>
 80136a0:	e002      	b.n	80136a8 <ProcessMacCommands+0x91c>
            return;
 80136a2:	bf00      	nop
 80136a4:	e000      	b.n	80136a8 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80136a6:	bf00      	nop
        }
    }
}
 80136a8:	378c      	adds	r7, #140	; 0x8c
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd90      	pop	{r4, r7, pc}
 80136ae:	bf00      	nop
 80136b0:	12d53d80 	.word	0x12d53d80
 80136b4:	20000e24 	.word	0x20000e24
 80136b8:	20002188 	.word	0x20002188

080136bc <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b08e      	sub	sp, #56	; 0x38
 80136c0:	af02      	add	r7, sp, #8
 80136c2:	60f8      	str	r0, [r7, #12]
 80136c4:	607a      	str	r2, [r7, #4]
 80136c6:	461a      	mov	r2, r3
 80136c8:	460b      	mov	r3, r1
 80136ca:	72fb      	strb	r3, [r7, #11]
 80136cc:	4613      	mov	r3, r2
 80136ce:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80136d0:	2303      	movs	r3, #3
 80136d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80136d6:	4b65      	ldr	r3, [pc, #404]	; (801386c <Send+0x1b0>)
 80136d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80136dc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80136e0:	4b62      	ldr	r3, [pc, #392]	; (801386c <Send+0x1b0>)
 80136e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80136e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80136ea:	4b60      	ldr	r3, [pc, #384]	; (801386c <Send+0x1b0>)
 80136ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136ee:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80136f0:	4b5e      	ldr	r3, [pc, #376]	; (801386c <Send+0x1b0>)
 80136f2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d101      	bne.n	80136fe <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80136fa:	2307      	movs	r3, #7
 80136fc:	e0b1      	b.n	8013862 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80136fe:	4b5b      	ldr	r3, [pc, #364]	; (801386c <Send+0x1b0>)
 8013700:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8013704:	2b00      	cmp	r3, #0
 8013706:	d102      	bne.n	801370e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8013708:	4b58      	ldr	r3, [pc, #352]	; (801386c <Send+0x1b0>)
 801370a:	2200      	movs	r2, #0
 801370c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 801370e:	2300      	movs	r3, #0
 8013710:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8013714:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013718:	f36f 0303 	bfc	r3, #0, #4
 801371c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8013720:	4b52      	ldr	r3, [pc, #328]	; (801386c <Send+0x1b0>)
 8013722:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8013726:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801372a:	f362 13c7 	bfi	r3, r2, #7, #1
 801372e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013732:	4b4e      	ldr	r3, [pc, #312]	; (801386c <Send+0x1b0>)
 8013734:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013738:	2b01      	cmp	r3, #1
 801373a:	d106      	bne.n	801374a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 801373c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013740:	f043 0310 	orr.w	r3, r3, #16
 8013744:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8013748:	e005      	b.n	8013756 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 801374a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801374e:	f36f 1304 	bfc	r3, #4, #1
 8013752:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8013756:	4b45      	ldr	r3, [pc, #276]	; (801386c <Send+0x1b0>)
 8013758:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801375c:	2b00      	cmp	r3, #0
 801375e:	d005      	beq.n	801376c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8013760:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013764:	f043 0320 	orr.w	r3, r3, #32
 8013768:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 801376c:	4b3f      	ldr	r3, [pc, #252]	; (801386c <Send+0x1b0>)
 801376e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8013772:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 8013774:	2301      	movs	r3, #1
 8013776:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8013778:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801377c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8013780:	b2db      	uxtb	r3, r3
 8013782:	2b00      	cmp	r3, #0
 8013784:	bf14      	ite	ne
 8013786:	2301      	movne	r3, #1
 8013788:	2300      	moveq	r3, #0
 801378a:	b2db      	uxtb	r3, r3
 801378c:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801378e:	4b37      	ldr	r3, [pc, #220]	; (801386c <Send+0x1b0>)
 8013790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013792:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8013794:	4b36      	ldr	r3, [pc, #216]	; (8013870 <Send+0x1b4>)
 8013796:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 801379a:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801379c:	4b34      	ldr	r3, [pc, #208]	; (8013870 <Send+0x1b4>)
 801379e:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 80137a2:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80137a4:	4b31      	ldr	r3, [pc, #196]	; (801386c <Send+0x1b0>)
 80137a6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80137aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80137ae:	4b2f      	ldr	r3, [pc, #188]	; (801386c <Send+0x1b0>)
 80137b0:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80137b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80137b8:	4b2c      	ldr	r3, [pc, #176]	; (801386c <Send+0x1b0>)
 80137ba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80137be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80137c2:	4b2a      	ldr	r3, [pc, #168]	; (801386c <Send+0x1b0>)
 80137c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80137c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80137cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80137d0:	f107 0014 	add.w	r0, r7, #20
 80137d4:	4a27      	ldr	r2, [pc, #156]	; (8013874 <Send+0x1b8>)
 80137d6:	4928      	ldr	r1, [pc, #160]	; (8013878 <Send+0x1bc>)
 80137d8:	f002 fc1a 	bl	8016010 <LoRaMacAdrCalcNext>
 80137dc:	4603      	mov	r3, r0
 80137de:	461a      	mov	r2, r3
 80137e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80137e4:	f362 1386 	bfi	r3, r2, #6, #1
 80137e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80137ec:	7afa      	ldrb	r2, [r7, #11]
 80137ee:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80137f2:	893b      	ldrh	r3, [r7, #8]
 80137f4:	9300      	str	r3, [sp, #0]
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	68f8      	ldr	r0, [r7, #12]
 80137fa:	f000 fc2d 	bl	8014058 <PrepareFrame>
 80137fe:	4603      	mov	r3, r0
 8013800:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8013804:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013808:	2b00      	cmp	r3, #0
 801380a:	d003      	beq.n	8013814 <Send+0x158>
 801380c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013810:	2b0a      	cmp	r3, #10
 8013812:	d107      	bne.n	8013824 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8013814:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013818:	4618      	mov	r0, r3
 801381a:	f000 f96d 	bl	8013af8 <ScheduleTx>
 801381e:	4603      	mov	r3, r0
 8013820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8013824:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013828:	2b00      	cmp	r3, #0
 801382a:	d00a      	beq.n	8013842 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 801382c:	4a0f      	ldr	r2, [pc, #60]	; (801386c <Send+0x1b0>)
 801382e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013832:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8013836:	4a0d      	ldr	r2, [pc, #52]	; (801386c <Send+0x1b0>)
 8013838:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801383c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8013840:	e00d      	b.n	801385e <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8013842:	4b0a      	ldr	r3, [pc, #40]	; (801386c <Send+0x1b0>)
 8013844:	2200      	movs	r2, #0
 8013846:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 801384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801384c:	4a07      	ldr	r2, [pc, #28]	; (801386c <Send+0x1b0>)
 801384e:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8013850:	f004 fc46 	bl	80180e0 <LoRaMacCommandsRemoveNoneStickyCmds>
 8013854:	4603      	mov	r3, r0
 8013856:	2b00      	cmp	r3, #0
 8013858:	d001      	beq.n	801385e <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801385a:	2313      	movs	r3, #19
 801385c:	e001      	b.n	8013862 <Send+0x1a6>
        }
    }
    return status;
 801385e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013862:	4618      	mov	r0, r3
 8013864:	3730      	adds	r7, #48	; 0x30
 8013866:	46bd      	mov	sp, r7
 8013868:	bd80      	pop	{r7, pc}
 801386a:	bf00      	nop
 801386c:	20001330 	.word	0x20001330
 8013870:	20000e24 	.word	0x20000e24
 8013874:	20001368 	.word	0x20001368
 8013878:	20001369 	.word	0x20001369

0801387c <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b084      	sub	sp, #16
 8013880:	af00      	add	r7, sp, #0
 8013882:	4603      	mov	r3, r0
 8013884:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013886:	2300      	movs	r3, #0
 8013888:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 801388a:	2300      	movs	r3, #0
 801388c:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 801388e:	2301      	movs	r3, #1
 8013890:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8013892:	79fb      	ldrb	r3, [r7, #7]
 8013894:	2bff      	cmp	r3, #255	; 0xff
 8013896:	d129      	bne.n	80138ec <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8013898:	2000      	movs	r0, #0
 801389a:	f7ff f957 	bl	8012b4c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 801389e:	4b1a      	ldr	r3, [pc, #104]	; (8013908 <SendReJoinReq+0x8c>)
 80138a0:	2200      	movs	r2, #0
 80138a2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80138a6:	4b18      	ldr	r3, [pc, #96]	; (8013908 <SendReJoinReq+0x8c>)
 80138a8:	4a18      	ldr	r2, [pc, #96]	; (801390c <SendReJoinReq+0x90>)
 80138aa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80138ae:	4b16      	ldr	r3, [pc, #88]	; (8013908 <SendReJoinReq+0x8c>)
 80138b0:	22ff      	movs	r2, #255	; 0xff
 80138b2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80138b6:	7b3b      	ldrb	r3, [r7, #12]
 80138b8:	f36f 1347 	bfc	r3, #5, #3
 80138bc:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80138be:	7b3a      	ldrb	r2, [r7, #12]
 80138c0:	4b11      	ldr	r3, [pc, #68]	; (8013908 <SendReJoinReq+0x8c>)
 80138c2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 80138c6:	f7fc fa75 	bl	800fdb4 <SecureElementGetJoinEui>
 80138ca:	4603      	mov	r3, r0
 80138cc:	2208      	movs	r2, #8
 80138ce:	4619      	mov	r1, r3
 80138d0:	480f      	ldr	r0, [pc, #60]	; (8013910 <SendReJoinReq+0x94>)
 80138d2:	f008 fce4 	bl	801c29e <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 80138d6:	f7fc fa4b 	bl	800fd70 <SecureElementGetDevEui>
 80138da:	4603      	mov	r3, r0
 80138dc:	2208      	movs	r2, #8
 80138de:	4619      	mov	r1, r3
 80138e0:	480c      	ldr	r0, [pc, #48]	; (8013914 <SendReJoinReq+0x98>)
 80138e2:	f008 fcdc 	bl	801c29e <memcpy1>

            allowDelayedTx = false;
 80138e6:	2300      	movs	r3, #0
 80138e8:	73fb      	strb	r3, [r7, #15]

            break;
 80138ea:	e002      	b.n	80138f2 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80138ec:	2302      	movs	r3, #2
 80138ee:	73bb      	strb	r3, [r7, #14]
            break;
 80138f0:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 80138f2:	7bfb      	ldrb	r3, [r7, #15]
 80138f4:	4618      	mov	r0, r3
 80138f6:	f000 f8ff 	bl	8013af8 <ScheduleTx>
 80138fa:	4603      	mov	r3, r0
 80138fc:	73bb      	strb	r3, [r7, #14]
    return status;
 80138fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8013900:	4618      	mov	r0, r3
 8013902:	3710      	adds	r7, #16
 8013904:	46bd      	mov	sp, r7
 8013906:	bd80      	pop	{r7, pc}
 8013908:	20000e24 	.word	0x20000e24
 801390c:	20000e26 	.word	0x20000e26
 8013910:	20000f32 	.word	0x20000f32
 8013914:	20000f3a 	.word	0x20000f3a

08013918 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8013918:	b580      	push	{r7, lr}
 801391a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 801391c:	f003 feb8 	bl	8017690 <LoRaMacClassBIsBeaconExpected>
 8013920:	4603      	mov	r3, r0
 8013922:	2b00      	cmp	r3, #0
 8013924:	d001      	beq.n	801392a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8013926:	230e      	movs	r3, #14
 8013928:	e013      	b.n	8013952 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801392a:	4b0b      	ldr	r3, [pc, #44]	; (8013958 <CheckForClassBCollision+0x40>)
 801392c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013930:	2b01      	cmp	r3, #1
 8013932:	d10d      	bne.n	8013950 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8013934:	f003 fec4 	bl	80176c0 <LoRaMacClassBIsPingExpected>
 8013938:	4603      	mov	r3, r0
 801393a:	2b00      	cmp	r3, #0
 801393c:	d001      	beq.n	8013942 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801393e:	230f      	movs	r3, #15
 8013940:	e007      	b.n	8013952 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8013942:	f003 fecd 	bl	80176e0 <LoRaMacClassBIsMulticastExpected>
 8013946:	4603      	mov	r3, r0
 8013948:	2b00      	cmp	r3, #0
 801394a:	d001      	beq.n	8013950 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801394c:	230f      	movs	r3, #15
 801394e:	e000      	b.n	8013952 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8013950:	2300      	movs	r3, #0
}
 8013952:	4618      	mov	r0, r3
 8013954:	bd80      	pop	{r7, pc}
 8013956:	bf00      	nop
 8013958:	20001330 	.word	0x20001330

0801395c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 801395c:	b590      	push	{r4, r7, lr}
 801395e:	b083      	sub	sp, #12
 8013960:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013962:	4b2d      	ldr	r3, [pc, #180]	; (8013a18 <ComputeRxWindowParameters+0xbc>)
 8013964:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8013968:	4b2b      	ldr	r3, [pc, #172]	; (8013a18 <ComputeRxWindowParameters+0xbc>)
 801396a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801396e:	4b2a      	ldr	r3, [pc, #168]	; (8013a18 <ComputeRxWindowParameters+0xbc>)
 8013970:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 8013974:	4b28      	ldr	r3, [pc, #160]	; (8013a18 <ComputeRxWindowParameters+0xbc>)
 8013976:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 801397a:	4b27      	ldr	r3, [pc, #156]	; (8013a18 <ComputeRxWindowParameters+0xbc>)
 801397c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8013980:	b25b      	sxtb	r3, r3
 8013982:	f006 fa48 	bl	8019e16 <RegionApplyDrOffset>
 8013986:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013988:	b259      	sxtb	r1, r3
 801398a:	4b23      	ldr	r3, [pc, #140]	; (8013a18 <ComputeRxWindowParameters+0xbc>)
 801398c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013990:	4b21      	ldr	r3, [pc, #132]	; (8013a18 <ComputeRxWindowParameters+0xbc>)
 8013992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013994:	4821      	ldr	r0, [pc, #132]	; (8013a1c <ComputeRxWindowParameters+0xc0>)
 8013996:	9000      	str	r0, [sp, #0]
 8013998:	4620      	mov	r0, r4
 801399a:	f006 f94c 	bl	8019c36 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801399e:	4b1e      	ldr	r3, [pc, #120]	; (8013a18 <ComputeRxWindowParameters+0xbc>)
 80139a0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80139a4:	4b1c      	ldr	r3, [pc, #112]	; (8013a18 <ComputeRxWindowParameters+0xbc>)
 80139a6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80139aa:	b259      	sxtb	r1, r3
 80139ac:	4b1a      	ldr	r3, [pc, #104]	; (8013a18 <ComputeRxWindowParameters+0xbc>)
 80139ae:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80139b2:	4b19      	ldr	r3, [pc, #100]	; (8013a18 <ComputeRxWindowParameters+0xbc>)
 80139b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139b6:	4c1a      	ldr	r4, [pc, #104]	; (8013a20 <ComputeRxWindowParameters+0xc4>)
 80139b8:	9400      	str	r4, [sp, #0]
 80139ba:	f006 f93c 	bl	8019c36 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80139be:	4b16      	ldr	r3, [pc, #88]	; (8013a18 <ComputeRxWindowParameters+0xbc>)
 80139c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139c2:	4a18      	ldr	r2, [pc, #96]	; (8013a24 <ComputeRxWindowParameters+0xc8>)
 80139c4:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80139c8:	4413      	add	r3, r2
 80139ca:	4a16      	ldr	r2, [pc, #88]	; (8013a24 <ComputeRxWindowParameters+0xc8>)
 80139cc:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80139d0:	4b11      	ldr	r3, [pc, #68]	; (8013a18 <ComputeRxWindowParameters+0xbc>)
 80139d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80139d4:	4a13      	ldr	r2, [pc, #76]	; (8013a24 <ComputeRxWindowParameters+0xc8>)
 80139d6:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 80139da:	4413      	add	r3, r2
 80139dc:	4a11      	ldr	r2, [pc, #68]	; (8013a24 <ComputeRxWindowParameters+0xc8>)
 80139de:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80139e2:	4b0d      	ldr	r3, [pc, #52]	; (8013a18 <ComputeRxWindowParameters+0xbc>)
 80139e4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d111      	bne.n	8013a10 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80139ec:	4b0a      	ldr	r3, [pc, #40]	; (8013a18 <ComputeRxWindowParameters+0xbc>)
 80139ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139f0:	4a0c      	ldr	r2, [pc, #48]	; (8013a24 <ComputeRxWindowParameters+0xc8>)
 80139f2:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80139f6:	4413      	add	r3, r2
 80139f8:	4a0a      	ldr	r2, [pc, #40]	; (8013a24 <ComputeRxWindowParameters+0xc8>)
 80139fa:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80139fe:	4b06      	ldr	r3, [pc, #24]	; (8013a18 <ComputeRxWindowParameters+0xbc>)
 8013a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013a02:	4a08      	ldr	r2, [pc, #32]	; (8013a24 <ComputeRxWindowParameters+0xc8>)
 8013a04:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8013a08:	4413      	add	r3, r2
 8013a0a:	4a06      	ldr	r2, [pc, #24]	; (8013a24 <ComputeRxWindowParameters+0xc8>)
 8013a0c:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8013a10:	bf00      	nop
 8013a12:	3704      	adds	r7, #4
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd90      	pop	{r4, r7, pc}
 8013a18:	20001330 	.word	0x20001330
 8013a1c:	200011dc 	.word	0x200011dc
 8013a20:	200011f0 	.word	0x200011f0
 8013a24:	20000e24 	.word	0x20000e24

08013a28 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b082      	sub	sp, #8
 8013a2c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8013a2e:	2300      	movs	r3, #0
 8013a30:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8013a32:	4b13      	ldr	r3, [pc, #76]	; (8013a80 <VerifyTxFrame+0x58>)
 8013a34:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d01b      	beq.n	8013a74 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013a3c:	1d3b      	adds	r3, r7, #4
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f004 fb94 	bl	801816c <LoRaMacCommandsGetSizeSerializedCmds>
 8013a44:	4603      	mov	r3, r0
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d001      	beq.n	8013a4e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013a4a:	2313      	movs	r3, #19
 8013a4c:	e013      	b.n	8013a76 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8013a4e:	4b0d      	ldr	r3, [pc, #52]	; (8013a84 <VerifyTxFrame+0x5c>)
 8013a50:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013a54:	4a0a      	ldr	r2, [pc, #40]	; (8013a80 <VerifyTxFrame+0x58>)
 8013a56:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8013a5a:	687a      	ldr	r2, [r7, #4]
 8013a5c:	b2d2      	uxtb	r2, r2
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7ff f96c 	bl	8012d3c <ValidatePayloadLength>
 8013a64:	4603      	mov	r3, r0
 8013a66:	f083 0301 	eor.w	r3, r3, #1
 8013a6a:	b2db      	uxtb	r3, r3
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d001      	beq.n	8013a74 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8013a70:	2308      	movs	r3, #8
 8013a72:	e000      	b.n	8013a76 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8013a74:	2300      	movs	r3, #0
}
 8013a76:	4618      	mov	r0, r3
 8013a78:	3708      	adds	r7, #8
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	bd80      	pop	{r7, pc}
 8013a7e:	bf00      	nop
 8013a80:	20001330 	.word	0x20001330
 8013a84:	20000e24 	.word	0x20000e24

08013a88 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b082      	sub	sp, #8
 8013a8c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8013a8e:	4b18      	ldr	r3, [pc, #96]	; (8013af0 <SerializeTxFrame+0x68>)
 8013a90:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d002      	beq.n	8013a9e <SerializeTxFrame+0x16>
 8013a98:	2b04      	cmp	r3, #4
 8013a9a:	d011      	beq.n	8013ac0 <SerializeTxFrame+0x38>
 8013a9c:	e021      	b.n	8013ae2 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8013a9e:	4815      	ldr	r0, [pc, #84]	; (8013af4 <SerializeTxFrame+0x6c>)
 8013aa0:	f005 fec9 	bl	8019836 <LoRaMacSerializerJoinRequest>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8013aa8:	79fb      	ldrb	r3, [r7, #7]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d001      	beq.n	8013ab2 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013aae:	2311      	movs	r3, #17
 8013ab0:	e01a      	b.n	8013ae8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8013ab2:	4b0f      	ldr	r3, [pc, #60]	; (8013af0 <SerializeTxFrame+0x68>)
 8013ab4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013ab8:	b29a      	uxth	r2, r3
 8013aba:	4b0d      	ldr	r3, [pc, #52]	; (8013af0 <SerializeTxFrame+0x68>)
 8013abc:	801a      	strh	r2, [r3, #0]
            break;
 8013abe:	e012      	b.n	8013ae6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8013ac0:	480c      	ldr	r0, [pc, #48]	; (8013af4 <SerializeTxFrame+0x6c>)
 8013ac2:	f005 ff3a 	bl	801993a <LoRaMacSerializerData>
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8013aca:	79fb      	ldrb	r3, [r7, #7]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d001      	beq.n	8013ad4 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013ad0:	2311      	movs	r3, #17
 8013ad2:	e009      	b.n	8013ae8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8013ad4:	4b06      	ldr	r3, [pc, #24]	; (8013af0 <SerializeTxFrame+0x68>)
 8013ad6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013ada:	b29a      	uxth	r2, r3
 8013adc:	4b04      	ldr	r3, [pc, #16]	; (8013af0 <SerializeTxFrame+0x68>)
 8013ade:	801a      	strh	r2, [r3, #0]
            break;
 8013ae0:	e001      	b.n	8013ae6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013ae2:	2303      	movs	r3, #3
 8013ae4:	e000      	b.n	8013ae8 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8013ae6:	2300      	movs	r3, #0
}
 8013ae8:	4618      	mov	r0, r3
 8013aea:	3708      	adds	r7, #8
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}
 8013af0:	20000e24 	.word	0x20000e24
 8013af4:	20000f2c 	.word	0x20000f2c

08013af8 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b090      	sub	sp, #64	; 0x40
 8013afc:	af02      	add	r7, sp, #8
 8013afe:	4603      	mov	r3, r0
 8013b00:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b02:	2303      	movs	r3, #3
 8013b04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8013b08:	f7ff ff06 	bl	8013918 <CheckForClassBCollision>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013b12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d002      	beq.n	8013b20 <ScheduleTx+0x28>
    {
        return status;
 8013b1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b1e:	e08f      	b.n	8013c40 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8013b20:	f000 f8fa 	bl	8013d18 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8013b24:	f7ff ffb0 	bl	8013a88 <SerializeTxFrame>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013b2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d002      	beq.n	8013b3c <ScheduleTx+0x44>
    {
        return status;
 8013b36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b3a:	e081      	b.n	8013c40 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8013b3c:	4b42      	ldr	r3, [pc, #264]	; (8013c48 <ScheduleTx+0x150>)
 8013b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b40:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013b42:	4b41      	ldr	r3, [pc, #260]	; (8013c48 <ScheduleTx+0x150>)
 8013b44:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013b48:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8013b4a:	4b3f      	ldr	r3, [pc, #252]	; (8013c48 <ScheduleTx+0x150>)
 8013b4c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8013b50:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8013b52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b56:	4618      	mov	r0, r3
 8013b58:	f00b ffb8 	bl	801facc <SysTimeGetMcuTime>
 8013b5c:	4638      	mov	r0, r7
 8013b5e:	4b3a      	ldr	r3, [pc, #232]	; (8013c48 <ScheduleTx+0x150>)
 8013b60:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8013b64:	9200      	str	r2, [sp, #0]
 8013b66:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8013b6a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8013b6e:	ca06      	ldmia	r2, {r1, r2}
 8013b70:	f00b ff0d 	bl	801f98e <SysTimeSub>
 8013b74:	f107 0320 	add.w	r3, r7, #32
 8013b78:	463a      	mov	r2, r7
 8013b7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b7e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8013b82:	4b31      	ldr	r3, [pc, #196]	; (8013c48 <ScheduleTx+0x150>)
 8013b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b86:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8013b88:	2300      	movs	r3, #0
 8013b8a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8013b8e:	2301      	movs	r3, #1
 8013b90:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8013b92:	4b2e      	ldr	r3, [pc, #184]	; (8013c4c <ScheduleTx+0x154>)
 8013b94:	881b      	ldrh	r3, [r3, #0]
 8013b96:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8013b98:	4b2b      	ldr	r3, [pc, #172]	; (8013c48 <ScheduleTx+0x150>)
 8013b9a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d104      	bne.n	8013bac <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8013bac:	4b26      	ldr	r3, [pc, #152]	; (8013c48 <ScheduleTx+0x150>)
 8013bae:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8013bb2:	f107 0114 	add.w	r1, r7, #20
 8013bb6:	4b26      	ldr	r3, [pc, #152]	; (8013c50 <ScheduleTx+0x158>)
 8013bb8:	9300      	str	r3, [sp, #0]
 8013bba:	4b26      	ldr	r3, [pc, #152]	; (8013c54 <ScheduleTx+0x15c>)
 8013bbc:	4a26      	ldr	r2, [pc, #152]	; (8013c58 <ScheduleTx+0x160>)
 8013bbe:	f006 f900 	bl	8019dc2 <RegionNextChannel>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8013bc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d022      	beq.n	8013c16 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8013bd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013bd4:	2b0b      	cmp	r3, #11
 8013bd6:	d11b      	bne.n	8013c10 <ScheduleTx+0x118>
 8013bd8:	7bfb      	ldrb	r3, [r7, #15]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d018      	beq.n	8013c10 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8013bde:	4b1b      	ldr	r3, [pc, #108]	; (8013c4c <ScheduleTx+0x154>)
 8013be0:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d011      	beq.n	8013c0c <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8013be8:	4b18      	ldr	r3, [pc, #96]	; (8013c4c <ScheduleTx+0x154>)
 8013bea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013bee:	f043 0320 	orr.w	r3, r3, #32
 8013bf2:	4a16      	ldr	r2, [pc, #88]	; (8013c4c <ScheduleTx+0x154>)
 8013bf4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8013bf8:	4b14      	ldr	r3, [pc, #80]	; (8013c4c <ScheduleTx+0x154>)
 8013bfa:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8013bfe:	4619      	mov	r1, r3
 8013c00:	4816      	ldr	r0, [pc, #88]	; (8013c5c <ScheduleTx+0x164>)
 8013c02:	f00c fd07 	bl	8020614 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8013c06:	4815      	ldr	r0, [pc, #84]	; (8013c5c <ScheduleTx+0x164>)
 8013c08:	f00c fc26 	bl	8020458 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	e017      	b.n	8013c40 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8013c10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013c14:	e014      	b.n	8013c40 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8013c16:	f7ff fea1 	bl	801395c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8013c1a:	f7ff ff05 	bl	8013a28 <VerifyTxFrame>
 8013c1e:	4603      	mov	r3, r0
 8013c20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013c24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d002      	beq.n	8013c32 <ScheduleTx+0x13a>
    {
        return status;
 8013c2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013c30:	e006      	b.n	8013c40 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8013c32:	4b06      	ldr	r3, [pc, #24]	; (8013c4c <ScheduleTx+0x154>)
 8013c34:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f000 fb29 	bl	8014290 <SendFrameOnChannel>
 8013c3e:	4603      	mov	r3, r0
}
 8013c40:	4618      	mov	r0, r3
 8013c42:	3738      	adds	r7, #56	; 0x38
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}
 8013c48:	20001330 	.word	0x20001330
 8013c4c:	20000e24 	.word	0x20000e24
 8013c50:	20001360 	.word	0x20001360
 8013c54:	200012ac 	.word	0x200012ac
 8013c58:	20001239 	.word	0x20001239
 8013c5c:	2000118c 	.word	0x2000118c

08013c60 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b084      	sub	sp, #16
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	4603      	mov	r3, r0
 8013c68:	460a      	mov	r2, r1
 8013c6a:	71fb      	strb	r3, [r7, #7]
 8013c6c:	4613      	mov	r3, r2
 8013c6e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013c70:	2313      	movs	r3, #19
 8013c72:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8013c74:	2300      	movs	r3, #0
 8013c76:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8013c78:	4b25      	ldr	r3, [pc, #148]	; (8013d10 <SecureFrame+0xb0>)
 8013c7a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d002      	beq.n	8013c88 <SecureFrame+0x28>
 8013c82:	2b04      	cmp	r3, #4
 8013c84:	d011      	beq.n	8013caa <SecureFrame+0x4a>
 8013c86:	e03b      	b.n	8013d00 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8013c88:	4822      	ldr	r0, [pc, #136]	; (8013d14 <SecureFrame+0xb4>)
 8013c8a:	f005 f99d 	bl	8018fc8 <LoRaMacCryptoPrepareJoinRequest>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8013c92:	7bfb      	ldrb	r3, [r7, #15]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d001      	beq.n	8013c9c <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013c98:	2311      	movs	r3, #17
 8013c9a:	e034      	b.n	8013d06 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8013c9c:	4b1c      	ldr	r3, [pc, #112]	; (8013d10 <SecureFrame+0xb0>)
 8013c9e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013ca2:	b29a      	uxth	r2, r3
 8013ca4:	4b1a      	ldr	r3, [pc, #104]	; (8013d10 <SecureFrame+0xb0>)
 8013ca6:	801a      	strh	r2, [r3, #0]
            break;
 8013ca8:	e02c      	b.n	8013d04 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013caa:	f107 0308 	add.w	r3, r7, #8
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f005 f8a4 	bl	8018dfc <LoRaMacCryptoGetFCntUp>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d001      	beq.n	8013cbe <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8013cba:	2312      	movs	r3, #18
 8013cbc:	e023      	b.n	8013d06 <SecureFrame+0xa6>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8013cbe:	4b14      	ldr	r3, [pc, #80]	; (8013d10 <SecureFrame+0xb0>)
 8013cc0:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d104      	bne.n	8013cd2 <SecureFrame+0x72>
 8013cc8:	4b11      	ldr	r3, [pc, #68]	; (8013d10 <SecureFrame+0xb0>)
 8013cca:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8013cce:	2b01      	cmp	r3, #1
 8013cd0:	d902      	bls.n	8013cd8 <SecureFrame+0x78>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8013cd2:	68bb      	ldr	r3, [r7, #8]
 8013cd4:	3b01      	subs	r3, #1
 8013cd6:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8013cd8:	68b8      	ldr	r0, [r7, #8]
 8013cda:	79ba      	ldrb	r2, [r7, #6]
 8013cdc:	79f9      	ldrb	r1, [r7, #7]
 8013cde:	4b0d      	ldr	r3, [pc, #52]	; (8013d14 <SecureFrame+0xb4>)
 8013ce0:	f005 fa8a 	bl	80191f8 <LoRaMacCryptoSecureMessage>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8013ce8:	7bfb      	ldrb	r3, [r7, #15]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d001      	beq.n	8013cf2 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013cee:	2311      	movs	r3, #17
 8013cf0:	e009      	b.n	8013d06 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8013cf2:	4b07      	ldr	r3, [pc, #28]	; (8013d10 <SecureFrame+0xb0>)
 8013cf4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013cf8:	b29a      	uxth	r2, r3
 8013cfa:	4b05      	ldr	r3, [pc, #20]	; (8013d10 <SecureFrame+0xb0>)
 8013cfc:	801a      	strh	r2, [r3, #0]
            break;
 8013cfe:	e001      	b.n	8013d04 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013d00:	2303      	movs	r3, #3
 8013d02:	e000      	b.n	8013d06 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8013d04:	2300      	movs	r3, #0
}
 8013d06:	4618      	mov	r0, r3
 8013d08:	3710      	adds	r7, #16
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bd80      	pop	{r7, pc}
 8013d0e:	bf00      	nop
 8013d10:	20000e24 	.word	0x20000e24
 8013d14:	20000f2c 	.word	0x20000f2c

08013d18 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8013d18:	b480      	push	{r7}
 8013d1a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8013d1c:	4b09      	ldr	r3, [pc, #36]	; (8013d44 <CalculateBackOff+0x2c>)
 8013d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d10a      	bne.n	8013d3a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8013d24:	4b07      	ldr	r3, [pc, #28]	; (8013d44 <CalculateBackOff+0x2c>)
 8013d26:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8013d2a:	3b01      	subs	r3, #1
 8013d2c:	4a06      	ldr	r2, [pc, #24]	; (8013d48 <CalculateBackOff+0x30>)
 8013d2e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 8013d32:	fb02 f303 	mul.w	r3, r2, r3
 8013d36:	4a03      	ldr	r2, [pc, #12]	; (8013d44 <CalculateBackOff+0x2c>)
 8013d38:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8013d3a:	bf00      	nop
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bc80      	pop	{r7}
 8013d40:	4770      	bx	lr
 8013d42:	bf00      	nop
 8013d44:	20001330 	.word	0x20001330
 8013d48:	20000e24 	.word	0x20000e24

08013d4c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b082      	sub	sp, #8
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	4603      	mov	r3, r0
 8013d54:	7139      	strb	r1, [r7, #4]
 8013d56:	71fb      	strb	r3, [r7, #7]
 8013d58:	4613      	mov	r3, r2
 8013d5a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8013d5c:	79fb      	ldrb	r3, [r7, #7]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d002      	beq.n	8013d68 <RemoveMacCommands+0x1c>
 8013d62:	79fb      	ldrb	r3, [r7, #7]
 8013d64:	2b01      	cmp	r3, #1
 8013d66:	d10d      	bne.n	8013d84 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8013d68:	79bb      	ldrb	r3, [r7, #6]
 8013d6a:	2b01      	cmp	r3, #1
 8013d6c:	d108      	bne.n	8013d80 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8013d6e:	793b      	ldrb	r3, [r7, #4]
 8013d70:	f003 0320 	and.w	r3, r3, #32
 8013d74:	b2db      	uxtb	r3, r3
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d004      	beq.n	8013d84 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8013d7a:	f004 f9d5 	bl	8018128 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8013d7e:	e001      	b.n	8013d84 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8013d80:	f004 f9d2 	bl	8018128 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8013d84:	bf00      	nop
 8013d86:	3708      	adds	r7, #8
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd80      	pop	{r7, pc}

08013d8c <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8013d8c:	b5b0      	push	{r4, r5, r7, lr}
 8013d8e:	b08e      	sub	sp, #56	; 0x38
 8013d90:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8013d92:	4b68      	ldr	r3, [pc, #416]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013d94:	2200      	movs	r2, #0
 8013d96:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8013d9a:	4b66      	ldr	r3, [pc, #408]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8013da0:	4b65      	ldr	r3, [pc, #404]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013da2:	2200      	movs	r2, #0
 8013da4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 8013da8:	4b63      	ldr	r3, [pc, #396]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013daa:	2201      	movs	r2, #1
 8013dac:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013db0:	4b61      	ldr	r3, [pc, #388]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013db2:	2201      	movs	r2, #1
 8013db4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8013db8:	4b5f      	ldr	r3, [pc, #380]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013dba:	2200      	movs	r2, #0
 8013dbc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8013dc0:	4b5c      	ldr	r3, [pc, #368]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8013dc8:	4b5a      	ldr	r3, [pc, #360]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013dca:	2201      	movs	r2, #1
 8013dcc:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013dd0:	4b58      	ldr	r3, [pc, #352]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013dd2:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8013dd6:	4b57      	ldr	r3, [pc, #348]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013dd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013ddc:	4b55      	ldr	r3, [pc, #340]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013dde:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8013de2:	4b54      	ldr	r3, [pc, #336]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013de4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8013de8:	4b52      	ldr	r3, [pc, #328]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013dea:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 8013dee:	4b51      	ldr	r3, [pc, #324]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013df0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013df4:	4b4f      	ldr	r3, [pc, #316]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013df6:	4a4f      	ldr	r2, [pc, #316]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013df8:	3364      	adds	r3, #100	; 0x64
 8013dfa:	32a8      	adds	r2, #168	; 0xa8
 8013dfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013e00:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013e04:	4b4b      	ldr	r3, [pc, #300]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013e06:	4a4b      	ldr	r2, [pc, #300]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013e08:	336c      	adds	r3, #108	; 0x6c
 8013e0a:	32b0      	adds	r2, #176	; 0xb0
 8013e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013e10:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8013e14:	4b47      	ldr	r3, [pc, #284]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013e16:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8013e1a:	4b46      	ldr	r3, [pc, #280]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013e1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8013e20:	4b44      	ldr	r3, [pc, #272]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013e22:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 8013e26:	4b43      	ldr	r3, [pc, #268]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013e28:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8013e2c:	4b41      	ldr	r3, [pc, #260]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013e2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013e32:	4a40      	ldr	r2, [pc, #256]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013e34:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013e36:	4b3f      	ldr	r3, [pc, #252]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013e38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8013e3c:	4a3d      	ldr	r2, [pc, #244]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013e3e:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 8013e40:	4b3d      	ldr	r3, [pc, #244]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013e42:	2200      	movs	r2, #0
 8013e44:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8013e48:	4b3a      	ldr	r3, [pc, #232]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8013e50:	2301      	movs	r3, #1
 8013e52:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8013e54:	4b39      	ldr	r3, [pc, #228]	; (8013f3c <ResetMacParameters+0x1b0>)
 8013e56:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013e58:	4b39      	ldr	r3, [pc, #228]	; (8013f40 <ResetMacParameters+0x1b4>)
 8013e5a:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013e5c:	4b35      	ldr	r3, [pc, #212]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013e62:	1d3a      	adds	r2, r7, #4
 8013e64:	4611      	mov	r1, r2
 8013e66:	4618      	mov	r0, r3
 8013e68:	f005 fe97 	bl	8019b9a <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8013e6c:	4b32      	ldr	r3, [pc, #200]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013e6e:	2200      	movs	r2, #0
 8013e70:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8013e74:	4b30      	ldr	r3, [pc, #192]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013e76:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8013e7a:	4b2f      	ldr	r3, [pc, #188]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013e7c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8013e80:	4b2c      	ldr	r3, [pc, #176]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013e84:	4a2c      	ldr	r2, [pc, #176]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013e86:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013e8a:	4b2a      	ldr	r3, [pc, #168]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013e8c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8013e90:	4b29      	ldr	r3, [pc, #164]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013e92:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8013e96:	4b27      	ldr	r3, [pc, #156]	; (8013f34 <ResetMacParameters+0x1a8>)
 8013e98:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8013e9c:	4b26      	ldr	r3, [pc, #152]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013e9e:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8013ea2:	4b25      	ldr	r3, [pc, #148]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8013eaa:	4b23      	ldr	r3, [pc, #140]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013eac:	2201      	movs	r2, #1
 8013eae:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8013eb2:	4a21      	ldr	r2, [pc, #132]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013eb4:	4b20      	ldr	r3, [pc, #128]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013eb6:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8013eba:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8013ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013ec2:	682b      	ldr	r3, [r5, #0]
 8013ec4:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013ec6:	4b1c      	ldr	r3, [pc, #112]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013ec8:	2201      	movs	r2, #1
 8013eca:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013ece:	4b1a      	ldr	r3, [pc, #104]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013ed0:	2202      	movs	r2, #2
 8013ed2:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8013eda:	2300      	movs	r3, #0
 8013edc:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 8013ede:	4b16      	ldr	r3, [pc, #88]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013ee0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d009      	beq.n	8013efc <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8013ee8:	4b13      	ldr	r3, [pc, #76]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013eea:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013eee:	685b      	ldr	r3, [r3, #4]
 8013ef0:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8013ef2:	4b11      	ldr	r3, [pc, #68]	; (8013f38 <ResetMacParameters+0x1ac>)
 8013ef4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013ef8:	691b      	ldr	r3, [r3, #16]
 8013efa:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8013efc:	4b11      	ldr	r3, [pc, #68]	; (8013f44 <ResetMacParameters+0x1b8>)
 8013efe:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8013f00:	4b11      	ldr	r3, [pc, #68]	; (8013f48 <ResetMacParameters+0x1bc>)
 8013f02:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8013f04:	4b11      	ldr	r3, [pc, #68]	; (8013f4c <ResetMacParameters+0x1c0>)
 8013f06:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8013f08:	4b11      	ldr	r3, [pc, #68]	; (8013f50 <ResetMacParameters+0x1c4>)
 8013f0a:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8013f0c:	4b11      	ldr	r3, [pc, #68]	; (8013f54 <ResetMacParameters+0x1c8>)
 8013f0e:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8013f10:	4b11      	ldr	r3, [pc, #68]	; (8013f58 <ResetMacParameters+0x1cc>)
 8013f12:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8013f14:	4b11      	ldr	r3, [pc, #68]	; (8013f5c <ResetMacParameters+0x1d0>)
 8013f16:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8013f18:	4b11      	ldr	r3, [pc, #68]	; (8013f60 <ResetMacParameters+0x1d4>)
 8013f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8013f1c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8013f20:	f107 0310 	add.w	r3, r7, #16
 8013f24:	4a0f      	ldr	r2, [pc, #60]	; (8013f64 <ResetMacParameters+0x1d8>)
 8013f26:	4618      	mov	r0, r3
 8013f28:	f002 fd16 	bl	8016958 <LoRaMacClassBInit>
}
 8013f2c:	bf00      	nop
 8013f2e:	3738      	adds	r7, #56	; 0x38
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bdb0      	pop	{r4, r5, r7, pc}
 8013f34:	20001330 	.word	0x20001330
 8013f38:	20000e24 	.word	0x20000e24
 8013f3c:	20001510 	.word	0x20001510
 8013f40:	200015a4 	.word	0x200015a4
 8013f44:	20001284 	.word	0x20001284
 8013f48:	20001240 	.word	0x20001240
 8013f4c:	20001270 	.word	0x20001270
 8013f50:	200012a9 	.word	0x200012a9
 8013f54:	20001404 	.word	0x20001404
 8013f58:	20001370 	.word	0x20001370
 8013f5c:	20001374 	.word	0x20001374
 8013f60:	20001408 	.word	0x20001408
 8013f64:	20001a40 	.word	0x20001a40

08013f68 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b082      	sub	sp, #8
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
 8013f70:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8013f72:	6878      	ldr	r0, [r7, #4]
 8013f74:	f00c fade 	bl	8020534 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8013f78:	4b11      	ldr	r3, [pc, #68]	; (8013fc0 <RxWindowSetup+0x58>)
 8013f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f7c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8013f7e:	4b11      	ldr	r3, [pc, #68]	; (8013fc4 <RxWindowSetup+0x5c>)
 8013f80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013f84:	4a10      	ldr	r2, [pc, #64]	; (8013fc8 <RxWindowSetup+0x60>)
 8013f86:	6839      	ldr	r1, [r7, #0]
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f005 fe6e 	bl	8019c6a <RegionRxConfig>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d010      	beq.n	8013fb6 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8013f94:	4b0d      	ldr	r3, [pc, #52]	; (8013fcc <RxWindowSetup+0x64>)
 8013f96:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 8013f9a:	4b0c      	ldr	r3, [pc, #48]	; (8013fcc <RxWindowSetup+0x64>)
 8013f9c:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8013fa0:	4b07      	ldr	r3, [pc, #28]	; (8013fc0 <RxWindowSetup+0x58>)
 8013fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013fa4:	4a07      	ldr	r2, [pc, #28]	; (8013fc4 <RxWindowSetup+0x5c>)
 8013fa6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8013fa8:	4610      	mov	r0, r2
 8013faa:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8013fac:	683b      	ldr	r3, [r7, #0]
 8013fae:	7cda      	ldrb	r2, [r3, #19]
 8013fb0:	4b06      	ldr	r3, [pc, #24]	; (8013fcc <RxWindowSetup+0x64>)
 8013fb2:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 8013fb6:	bf00      	nop
 8013fb8:	3708      	adds	r7, #8
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}
 8013fbe:	bf00      	nop
 8013fc0:	08021e08 	.word	0x08021e08
 8013fc4:	20001330 	.word	0x20001330
 8013fc8:	20001244 	.word	0x20001244
 8013fcc:	20000e24 	.word	0x20000e24

08013fd0 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8013fd0:	b590      	push	{r4, r7, lr}
 8013fd2:	b083      	sub	sp, #12
 8013fd4:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013fd6:	4b1b      	ldr	r3, [pc, #108]	; (8014044 <OpenContinuousRxCWindow+0x74>)
 8013fd8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8013fdc:	4b19      	ldr	r3, [pc, #100]	; (8014044 <OpenContinuousRxCWindow+0x74>)
 8013fde:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013fe2:	b259      	sxtb	r1, r3
 8013fe4:	4b17      	ldr	r3, [pc, #92]	; (8014044 <OpenContinuousRxCWindow+0x74>)
 8013fe6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013fea:	4b16      	ldr	r3, [pc, #88]	; (8014044 <OpenContinuousRxCWindow+0x74>)
 8013fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013fee:	4c16      	ldr	r4, [pc, #88]	; (8014048 <OpenContinuousRxCWindow+0x78>)
 8013ff0:	9400      	str	r4, [sp, #0]
 8013ff2:	f005 fe20 	bl	8019c36 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013ff6:	4b15      	ldr	r3, [pc, #84]	; (801404c <OpenContinuousRxCWindow+0x7c>)
 8013ff8:	2202      	movs	r2, #2
 8013ffa:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013ffe:	4b13      	ldr	r3, [pc, #76]	; (801404c <OpenContinuousRxCWindow+0x7c>)
 8014000:	2201      	movs	r2, #1
 8014002:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8014006:	4b0f      	ldr	r3, [pc, #60]	; (8014044 <OpenContinuousRxCWindow+0x74>)
 8014008:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801400c:	4a10      	ldr	r2, [pc, #64]	; (8014050 <OpenContinuousRxCWindow+0x80>)
 801400e:	490e      	ldr	r1, [pc, #56]	; (8014048 <OpenContinuousRxCWindow+0x78>)
 8014010:	4618      	mov	r0, r3
 8014012:	f005 fe2a 	bl	8019c6a <RegionRxConfig>
 8014016:	4603      	mov	r3, r0
 8014018:	2b00      	cmp	r3, #0
 801401a:	d00f      	beq.n	801403c <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 801401c:	4b0b      	ldr	r3, [pc, #44]	; (801404c <OpenContinuousRxCWindow+0x7c>)
 801401e:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 8014022:	4b0a      	ldr	r3, [pc, #40]	; (801404c <OpenContinuousRxCWindow+0x7c>)
 8014024:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 8014028:	4b0a      	ldr	r3, [pc, #40]	; (8014054 <OpenContinuousRxCWindow+0x84>)
 801402a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801402c:	2000      	movs	r0, #0
 801402e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8014030:	4b06      	ldr	r3, [pc, #24]	; (801404c <OpenContinuousRxCWindow+0x7c>)
 8014032:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 8014036:	4b05      	ldr	r3, [pc, #20]	; (801404c <OpenContinuousRxCWindow+0x7c>)
 8014038:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 801403c:	bf00      	nop
 801403e:	3704      	adds	r7, #4
 8014040:	46bd      	mov	sp, r7
 8014042:	bd90      	pop	{r4, r7, pc}
 8014044:	20001330 	.word	0x20001330
 8014048:	20001204 	.word	0x20001204
 801404c:	20000e24 	.word	0x20000e24
 8014050:	20001244 	.word	0x20001244
 8014054:	08021e08 	.word	0x08021e08

08014058 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b088      	sub	sp, #32
 801405c:	af00      	add	r7, sp, #0
 801405e:	60f8      	str	r0, [r7, #12]
 8014060:	60b9      	str	r1, [r7, #8]
 8014062:	603b      	str	r3, [r7, #0]
 8014064:	4613      	mov	r3, r2
 8014066:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8014068:	4b82      	ldr	r3, [pc, #520]	; (8014274 <PrepareFrame+0x21c>)
 801406a:	2200      	movs	r2, #0
 801406c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801406e:	4b81      	ldr	r3, [pc, #516]	; (8014274 <PrepareFrame+0x21c>)
 8014070:	2200      	movs	r2, #0
 8014072:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 8014076:	2300      	movs	r3, #0
 8014078:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 801407a:	2300      	movs	r3, #0
 801407c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801407e:	2300      	movs	r3, #0
 8014080:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d101      	bne.n	801408c <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8014088:	2300      	movs	r3, #0
 801408a:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 801408c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801408e:	461a      	mov	r2, r3
 8014090:	6839      	ldr	r1, [r7, #0]
 8014092:	4879      	ldr	r0, [pc, #484]	; (8014278 <PrepareFrame+0x220>)
 8014094:	f008 f903 	bl	801c29e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8014098:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801409a:	b2da      	uxtb	r2, r3
 801409c:	4b75      	ldr	r3, [pc, #468]	; (8014274 <PrepareFrame+0x21c>)
 801409e:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	781a      	ldrb	r2, [r3, #0]
 80140a6:	4b73      	ldr	r3, [pc, #460]	; (8014274 <PrepareFrame+0x21c>)
 80140a8:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	781b      	ldrb	r3, [r3, #0]
 80140ae:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80140b2:	b2db      	uxtb	r3, r3
 80140b4:	2b07      	cmp	r3, #7
 80140b6:	f000 80b9 	beq.w	801422c <PrepareFrame+0x1d4>
 80140ba:	2b07      	cmp	r3, #7
 80140bc:	f300 80d0 	bgt.w	8014260 <PrepareFrame+0x208>
 80140c0:	2b02      	cmp	r3, #2
 80140c2:	d006      	beq.n	80140d2 <PrepareFrame+0x7a>
 80140c4:	2b04      	cmp	r3, #4
 80140c6:	f040 80cb 	bne.w	8014260 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80140ca:	4b6a      	ldr	r3, [pc, #424]	; (8014274 <PrepareFrame+0x21c>)
 80140cc:	2201      	movs	r2, #1
 80140ce:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80140d2:	4b68      	ldr	r3, [pc, #416]	; (8014274 <PrepareFrame+0x21c>)
 80140d4:	2204      	movs	r2, #4
 80140d6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80140da:	4b66      	ldr	r3, [pc, #408]	; (8014274 <PrepareFrame+0x21c>)
 80140dc:	4a67      	ldr	r2, [pc, #412]	; (801427c <PrepareFrame+0x224>)
 80140de:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80140e2:	4b64      	ldr	r3, [pc, #400]	; (8014274 <PrepareFrame+0x21c>)
 80140e4:	22ff      	movs	r2, #255	; 0xff
 80140e6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	781a      	ldrb	r2, [r3, #0]
 80140ee:	4b61      	ldr	r3, [pc, #388]	; (8014274 <PrepareFrame+0x21c>)
 80140f0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80140f4:	4a5f      	ldr	r2, [pc, #380]	; (8014274 <PrepareFrame+0x21c>)
 80140f6:	79fb      	ldrb	r3, [r7, #7]
 80140f8:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80140fc:	4b60      	ldr	r3, [pc, #384]	; (8014280 <PrepareFrame+0x228>)
 80140fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8014102:	4a5c      	ldr	r2, [pc, #368]	; (8014274 <PrepareFrame+0x21c>)
 8014104:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8014108:	68bb      	ldr	r3, [r7, #8]
 801410a:	781a      	ldrb	r2, [r3, #0]
 801410c:	4b59      	ldr	r3, [pc, #356]	; (8014274 <PrepareFrame+0x21c>)
 801410e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8014112:	4b58      	ldr	r3, [pc, #352]	; (8014274 <PrepareFrame+0x21c>)
 8014114:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8014118:	4b56      	ldr	r3, [pc, #344]	; (8014274 <PrepareFrame+0x21c>)
 801411a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801411e:	4b55      	ldr	r3, [pc, #340]	; (8014274 <PrepareFrame+0x21c>)
 8014120:	4a55      	ldr	r2, [pc, #340]	; (8014278 <PrepareFrame+0x220>)
 8014122:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8014126:	f107 0318 	add.w	r3, r7, #24
 801412a:	4618      	mov	r0, r3
 801412c:	f004 fe66 	bl	8018dfc <LoRaMacCryptoGetFCntUp>
 8014130:	4603      	mov	r3, r0
 8014132:	2b00      	cmp	r3, #0
 8014134:	d001      	beq.n	801413a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8014136:	2312      	movs	r3, #18
 8014138:	e098      	b.n	801426c <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801413a:	69bb      	ldr	r3, [r7, #24]
 801413c:	b29a      	uxth	r2, r3
 801413e:	4b4d      	ldr	r3, [pc, #308]	; (8014274 <PrepareFrame+0x21c>)
 8014140:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 8014144:	4b4b      	ldr	r3, [pc, #300]	; (8014274 <PrepareFrame+0x21c>)
 8014146:	2200      	movs	r2, #0
 8014148:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 801414c:	4b49      	ldr	r3, [pc, #292]	; (8014274 <PrepareFrame+0x21c>)
 801414e:	2200      	movs	r2, #0
 8014150:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8014154:	69bb      	ldr	r3, [r7, #24]
 8014156:	4a47      	ldr	r2, [pc, #284]	; (8014274 <PrepareFrame+0x21c>)
 8014158:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801415c:	f107 0314 	add.w	r3, r7, #20
 8014160:	4618      	mov	r0, r3
 8014162:	f004 f803 	bl	801816c <LoRaMacCommandsGetSizeSerializedCmds>
 8014166:	4603      	mov	r3, r0
 8014168:	2b00      	cmp	r3, #0
 801416a:	d001      	beq.n	8014170 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801416c:	2313      	movs	r3, #19
 801416e:	e07d      	b.n	801426c <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8014170:	697b      	ldr	r3, [r7, #20]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d076      	beq.n	8014264 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8014176:	4b42      	ldr	r3, [pc, #264]	; (8014280 <PrepareFrame+0x228>)
 8014178:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801417c:	4618      	mov	r0, r3
 801417e:	f7fe fdb5 	bl	8012cec <GetMaxAppPayloadWithoutFOptsLength>
 8014182:	4603      	mov	r3, r0
 8014184:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8014186:	4b3b      	ldr	r3, [pc, #236]	; (8014274 <PrepareFrame+0x21c>)
 8014188:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801418c:	2b00      	cmp	r3, #0
 801418e:	d01d      	beq.n	80141cc <PrepareFrame+0x174>
 8014190:	697b      	ldr	r3, [r7, #20]
 8014192:	2b0f      	cmp	r3, #15
 8014194:	d81a      	bhi.n	80141cc <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8014196:	f107 0314 	add.w	r3, r7, #20
 801419a:	4a3a      	ldr	r2, [pc, #232]	; (8014284 <PrepareFrame+0x22c>)
 801419c:	4619      	mov	r1, r3
 801419e:	200f      	movs	r0, #15
 80141a0:	f003 fffa 	bl	8018198 <LoRaMacCommandsSerializeCmds>
 80141a4:	4603      	mov	r3, r0
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d001      	beq.n	80141ae <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80141aa:	2313      	movs	r3, #19
 80141ac:	e05e      	b.n	801426c <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80141ae:	697b      	ldr	r3, [r7, #20]
 80141b0:	f003 030f 	and.w	r3, r3, #15
 80141b4:	b2d9      	uxtb	r1, r3
 80141b6:	68ba      	ldr	r2, [r7, #8]
 80141b8:	7813      	ldrb	r3, [r2, #0]
 80141ba:	f361 0303 	bfi	r3, r1, #0, #4
 80141be:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	781a      	ldrb	r2, [r3, #0]
 80141c4:	4b2b      	ldr	r3, [pc, #172]	; (8014274 <PrepareFrame+0x21c>)
 80141c6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80141ca:	e04b      	b.n	8014264 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80141cc:	4b29      	ldr	r3, [pc, #164]	; (8014274 <PrepareFrame+0x21c>)
 80141ce:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d010      	beq.n	80141f8 <PrepareFrame+0x1a0>
 80141d6:	697b      	ldr	r3, [r7, #20]
 80141d8:	2b0f      	cmp	r3, #15
 80141da:	d90d      	bls.n	80141f8 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80141dc:	7ffb      	ldrb	r3, [r7, #31]
 80141de:	f107 0114 	add.w	r1, r7, #20
 80141e2:	4a29      	ldr	r2, [pc, #164]	; (8014288 <PrepareFrame+0x230>)
 80141e4:	4618      	mov	r0, r3
 80141e6:	f003 ffd7 	bl	8018198 <LoRaMacCommandsSerializeCmds>
 80141ea:	4603      	mov	r3, r0
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d001      	beq.n	80141f4 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80141f0:	2313      	movs	r3, #19
 80141f2:	e03b      	b.n	801426c <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80141f4:	230a      	movs	r3, #10
 80141f6:	e039      	b.n	801426c <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80141f8:	7ffb      	ldrb	r3, [r7, #31]
 80141fa:	f107 0114 	add.w	r1, r7, #20
 80141fe:	4a22      	ldr	r2, [pc, #136]	; (8014288 <PrepareFrame+0x230>)
 8014200:	4618      	mov	r0, r3
 8014202:	f003 ffc9 	bl	8018198 <LoRaMacCommandsSerializeCmds>
 8014206:	4603      	mov	r3, r0
 8014208:	2b00      	cmp	r3, #0
 801420a:	d001      	beq.n	8014210 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801420c:	2313      	movs	r3, #19
 801420e:	e02d      	b.n	801426c <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8014210:	4b18      	ldr	r3, [pc, #96]	; (8014274 <PrepareFrame+0x21c>)
 8014212:	2200      	movs	r2, #0
 8014214:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8014218:	4b16      	ldr	r3, [pc, #88]	; (8014274 <PrepareFrame+0x21c>)
 801421a:	4a1b      	ldr	r2, [pc, #108]	; (8014288 <PrepareFrame+0x230>)
 801421c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	b2da      	uxtb	r2, r3
 8014224:	4b13      	ldr	r3, [pc, #76]	; (8014274 <PrepareFrame+0x21c>)
 8014226:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 801422a:	e01b      	b.n	8014264 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 801422c:	683b      	ldr	r3, [r7, #0]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d01a      	beq.n	8014268 <PrepareFrame+0x210>
 8014232:	4b10      	ldr	r3, [pc, #64]	; (8014274 <PrepareFrame+0x21c>)
 8014234:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8014238:	2b00      	cmp	r3, #0
 801423a:	d015      	beq.n	8014268 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 801423c:	4813      	ldr	r0, [pc, #76]	; (801428c <PrepareFrame+0x234>)
 801423e:	4b0d      	ldr	r3, [pc, #52]	; (8014274 <PrepareFrame+0x21c>)
 8014240:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8014244:	b29b      	uxth	r3, r3
 8014246:	461a      	mov	r2, r3
 8014248:	6839      	ldr	r1, [r7, #0]
 801424a:	f008 f828 	bl	801c29e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801424e:	4b09      	ldr	r3, [pc, #36]	; (8014274 <PrepareFrame+0x21c>)
 8014250:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8014254:	b29b      	uxth	r3, r3
 8014256:	3301      	adds	r3, #1
 8014258:	b29a      	uxth	r2, r3
 801425a:	4b06      	ldr	r3, [pc, #24]	; (8014274 <PrepareFrame+0x21c>)
 801425c:	801a      	strh	r2, [r3, #0]
            }
            break;
 801425e:	e003      	b.n	8014268 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014260:	2302      	movs	r3, #2
 8014262:	e003      	b.n	801426c <PrepareFrame+0x214>
            break;
 8014264:	bf00      	nop
 8014266:	e000      	b.n	801426a <PrepareFrame+0x212>
            break;
 8014268:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 801426a:	2300      	movs	r3, #0
}
 801426c:	4618      	mov	r0, r3
 801426e:	3720      	adds	r7, #32
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}
 8014274:	20000e24 	.word	0x20000e24
 8014278:	20000f5c 	.word	0x20000f5c
 801427c:	20000e26 	.word	0x20000e26
 8014280:	20001330 	.word	0x20001330
 8014284:	20000f3c 	.word	0x20000f3c
 8014288:	200012b0 	.word	0x200012b0
 801428c:	20000e27 	.word	0x20000e27

08014290 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b08a      	sub	sp, #40	; 0x28
 8014294:	af00      	add	r7, sp, #0
 8014296:	4603      	mov	r3, r0
 8014298:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801429a:	2303      	movs	r3, #3
 801429c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80142a0:	2300      	movs	r3, #0
 80142a2:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80142a4:	79fb      	ldrb	r3, [r7, #7]
 80142a6:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80142a8:	4b47      	ldr	r3, [pc, #284]	; (80143c8 <SendFrameOnChannel+0x138>)
 80142aa:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80142ae:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80142b0:	4b45      	ldr	r3, [pc, #276]	; (80143c8 <SendFrameOnChannel+0x138>)
 80142b2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80142b6:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80142b8:	4b43      	ldr	r3, [pc, #268]	; (80143c8 <SendFrameOnChannel+0x138>)
 80142ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80142bc:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80142be:	4b42      	ldr	r3, [pc, #264]	; (80143c8 <SendFrameOnChannel+0x138>)
 80142c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80142c2:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80142c4:	4b41      	ldr	r3, [pc, #260]	; (80143cc <SendFrameOnChannel+0x13c>)
 80142c6:	881b      	ldrh	r3, [r3, #0]
 80142c8:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80142ca:	4b3f      	ldr	r3, [pc, #252]	; (80143c8 <SendFrameOnChannel+0x138>)
 80142cc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80142d0:	f107 020f 	add.w	r2, r7, #15
 80142d4:	f107 0110 	add.w	r1, r7, #16
 80142d8:	4b3d      	ldr	r3, [pc, #244]	; (80143d0 <SendFrameOnChannel+0x140>)
 80142da:	f005 fcdb 	bl	8019c94 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80142de:	4b3b      	ldr	r3, [pc, #236]	; (80143cc <SendFrameOnChannel+0x13c>)
 80142e0:	2201      	movs	r2, #1
 80142e2:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80142e6:	4b38      	ldr	r3, [pc, #224]	; (80143c8 <SendFrameOnChannel+0x138>)
 80142e8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80142ec:	b2da      	uxtb	r2, r3
 80142ee:	4b37      	ldr	r3, [pc, #220]	; (80143cc <SendFrameOnChannel+0x13c>)
 80142f0:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 80142f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80142f8:	4b34      	ldr	r3, [pc, #208]	; (80143cc <SendFrameOnChannel+0x13c>)
 80142fa:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 80142fe:	79fb      	ldrb	r3, [r7, #7]
 8014300:	4a32      	ldr	r2, [pc, #200]	; (80143cc <SendFrameOnChannel+0x13c>)
 8014302:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8014306:	4b31      	ldr	r3, [pc, #196]	; (80143cc <SendFrameOnChannel+0x13c>)
 8014308:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 801430c:	4a2f      	ldr	r2, [pc, #188]	; (80143cc <SendFrameOnChannel+0x13c>)
 801430e:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8014312:	4b2e      	ldr	r3, [pc, #184]	; (80143cc <SendFrameOnChannel+0x13c>)
 8014314:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8014318:	4a2c      	ldr	r2, [pc, #176]	; (80143cc <SendFrameOnChannel+0x13c>)
 801431a:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 801431e:	f003 fa01 	bl	8017724 <LoRaMacClassBIsBeaconModeActive>
 8014322:	4603      	mov	r3, r0
 8014324:	2b00      	cmp	r3, #0
 8014326:	d00b      	beq.n	8014340 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8014328:	4b28      	ldr	r3, [pc, #160]	; (80143cc <SendFrameOnChannel+0x13c>)
 801432a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 801432e:	4618      	mov	r0, r3
 8014330:	f003 fc88 	bl	8017c44 <LoRaMacClassBIsUplinkCollision>
 8014334:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8014336:	6a3b      	ldr	r3, [r7, #32]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d001      	beq.n	8014340 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 801433c:	2310      	movs	r3, #16
 801433e:	e03e      	b.n	80143be <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8014340:	4b21      	ldr	r3, [pc, #132]	; (80143c8 <SendFrameOnChannel+0x138>)
 8014342:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8014346:	2b01      	cmp	r3, #1
 8014348:	d101      	bne.n	801434e <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801434a:	f003 fcaf 	bl	8017cac <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 801434e:	f003 fa1f 	bl	8017790 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8014352:	4b1d      	ldr	r3, [pc, #116]	; (80143c8 <SendFrameOnChannel+0x138>)
 8014354:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014358:	b2db      	uxtb	r3, r3
 801435a:	4a1c      	ldr	r2, [pc, #112]	; (80143cc <SendFrameOnChannel+0x13c>)
 801435c:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8014360:	4611      	mov	r1, r2
 8014362:	4618      	mov	r0, r3
 8014364:	f7ff fc7c 	bl	8013c60 <SecureFrame>
 8014368:	4603      	mov	r3, r0
 801436a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 801436e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014372:	2b00      	cmp	r3, #0
 8014374:	d002      	beq.n	801437c <SendFrameOnChannel+0xec>
    {
        return status;
 8014376:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801437a:	e020      	b.n	80143be <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801437c:	4b13      	ldr	r3, [pc, #76]	; (80143cc <SendFrameOnChannel+0x13c>)
 801437e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014382:	f043 0302 	orr.w	r3, r3, #2
 8014386:	4a11      	ldr	r2, [pc, #68]	; (80143cc <SendFrameOnChannel+0x13c>)
 8014388:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 801438c:	4b0f      	ldr	r3, [pc, #60]	; (80143cc <SendFrameOnChannel+0x13c>)
 801438e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8014392:	f083 0301 	eor.w	r3, r3, #1
 8014396:	b2db      	uxtb	r3, r3
 8014398:	2b00      	cmp	r3, #0
 801439a:	d007      	beq.n	80143ac <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 801439c:	4b0b      	ldr	r3, [pc, #44]	; (80143cc <SendFrameOnChannel+0x13c>)
 801439e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80143a2:	3301      	adds	r3, #1
 80143a4:	b2da      	uxtb	r2, r3
 80143a6:	4b09      	ldr	r3, [pc, #36]	; (80143cc <SendFrameOnChannel+0x13c>)
 80143a8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80143ac:	4b09      	ldr	r3, [pc, #36]	; (80143d4 <SendFrameOnChannel+0x144>)
 80143ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143b0:	4a06      	ldr	r2, [pc, #24]	; (80143cc <SendFrameOnChannel+0x13c>)
 80143b2:	8812      	ldrh	r2, [r2, #0]
 80143b4:	b2d2      	uxtb	r2, r2
 80143b6:	4611      	mov	r1, r2
 80143b8:	4807      	ldr	r0, [pc, #28]	; (80143d8 <SendFrameOnChannel+0x148>)
 80143ba:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80143bc:	2300      	movs	r3, #0
}
 80143be:	4618      	mov	r0, r3
 80143c0:	3728      	adds	r7, #40	; 0x28
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}
 80143c6:	bf00      	nop
 80143c8:	20001330 	.word	0x20001330
 80143cc:	20000e24 	.word	0x20000e24
 80143d0:	2000123c 	.word	0x2000123c
 80143d4:	08021e08 	.word	0x08021e08
 80143d8:	20000e26 	.word	0x20000e26

080143dc <SetTxContinuousWave>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b086      	sub	sp, #24
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	4603      	mov	r3, r0
 80143e4:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 80143e6:	4b15      	ldr	r3, [pc, #84]	; (801443c <SetTxContinuousWave+0x60>)
 80143e8:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 80143ec:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80143ee:	4b14      	ldr	r3, [pc, #80]	; (8014440 <SetTxContinuousWave+0x64>)
 80143f0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80143f4:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80143f6:	4b12      	ldr	r3, [pc, #72]	; (8014440 <SetTxContinuousWave+0x64>)
 80143f8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80143fc:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80143fe:	4b10      	ldr	r3, [pc, #64]	; (8014440 <SetTxContinuousWave+0x64>)
 8014400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014402:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8014404:	4b0e      	ldr	r3, [pc, #56]	; (8014440 <SetTxContinuousWave+0x64>)
 8014406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014408:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 801440a:	88fb      	ldrh	r3, [r7, #6]
 801440c:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 801440e:	4b0c      	ldr	r3, [pc, #48]	; (8014440 <SetTxContinuousWave+0x64>)
 8014410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014414:	f107 0208 	add.w	r2, r7, #8
 8014418:	4611      	mov	r1, r2
 801441a:	4618      	mov	r0, r3
 801441c:	f005 fce9 	bl	8019df2 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8014420:	4b06      	ldr	r3, [pc, #24]	; (801443c <SetTxContinuousWave+0x60>)
 8014422:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014426:	f043 0302 	orr.w	r3, r3, #2
 801442a:	4a04      	ldr	r2, [pc, #16]	; (801443c <SetTxContinuousWave+0x60>)
 801442c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8014430:	2300      	movs	r3, #0
}
 8014432:	4618      	mov	r0, r3
 8014434:	3718      	adds	r7, #24
 8014436:	46bd      	mov	sp, r7
 8014438:	bd80      	pop	{r7, pc}
 801443a:	bf00      	nop
 801443c:	20000e24 	.word	0x20000e24
 8014440:	20001330 	.word	0x20001330

08014444 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b082      	sub	sp, #8
 8014448:	af00      	add	r7, sp, #0
 801444a:	4603      	mov	r3, r0
 801444c:	6039      	str	r1, [r7, #0]
 801444e:	80fb      	strh	r3, [r7, #6]
 8014450:	4613      	mov	r3, r2
 8014452:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8014454:	4b09      	ldr	r3, [pc, #36]	; (801447c <SetTxContinuousWave1+0x38>)
 8014456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014458:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801445c:	88fa      	ldrh	r2, [r7, #6]
 801445e:	6838      	ldr	r0, [r7, #0]
 8014460:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8014462:	4b07      	ldr	r3, [pc, #28]	; (8014480 <SetTxContinuousWave1+0x3c>)
 8014464:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014468:	f043 0302 	orr.w	r3, r3, #2
 801446c:	4a04      	ldr	r2, [pc, #16]	; (8014480 <SetTxContinuousWave1+0x3c>)
 801446e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8014472:	2300      	movs	r3, #0
}
 8014474:	4618      	mov	r0, r3
 8014476:	3708      	adds	r7, #8
 8014478:	46bd      	mov	sp, r7
 801447a:	bd80      	pop	{r7, pc}
 801447c:	08021e08 	.word	0x08021e08
 8014480:	20000e24 	.word	0x20000e24

08014484 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b082      	sub	sp, #8
 8014488:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 801448a:	2300      	movs	r3, #0
 801448c:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 801448e:	4b3e      	ldr	r3, [pc, #248]	; (8014588 <RestoreNvmData+0x104>)
 8014490:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014494:	2b01      	cmp	r3, #1
 8014496:	d001      	beq.n	801449c <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8014498:	2301      	movs	r3, #1
 801449a:	e071      	b.n	8014580 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 801449c:	2124      	movs	r1, #36	; 0x24
 801449e:	483b      	ldr	r0, [pc, #236]	; (801458c <RestoreNvmData+0x108>)
 80144a0:	f007 ff52 	bl	801c348 <Crc32>
 80144a4:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 80144a6:	4b39      	ldr	r3, [pc, #228]	; (801458c <RestoreNvmData+0x108>)
 80144a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144aa:	687a      	ldr	r2, [r7, #4]
 80144ac:	429a      	cmp	r2, r3
 80144ae:	d001      	beq.n	80144b4 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80144b0:	2317      	movs	r3, #23
 80144b2:	e065      	b.n	8014580 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 80144b4:	2114      	movs	r1, #20
 80144b6:	4836      	ldr	r0, [pc, #216]	; (8014590 <RestoreNvmData+0x10c>)
 80144b8:	f007 ff46 	bl	801c348 <Crc32>
 80144bc:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 80144be:	4b33      	ldr	r3, [pc, #204]	; (801458c <RestoreNvmData+0x108>)
 80144c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80144c2:	687a      	ldr	r2, [r7, #4]
 80144c4:	429a      	cmp	r2, r3
 80144c6:	d001      	beq.n	80144cc <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80144c8:	2317      	movs	r3, #23
 80144ca:	e059      	b.n	8014580 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 80144cc:	21dc      	movs	r1, #220	; 0xdc
 80144ce:	4831      	ldr	r0, [pc, #196]	; (8014594 <RestoreNvmData+0x110>)
 80144d0:	f007 ff3a 	bl	801c348 <Crc32>
 80144d4:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 80144d6:	4b2d      	ldr	r3, [pc, #180]	; (801458c <RestoreNvmData+0x108>)
 80144d8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80144dc:	687a      	ldr	r2, [r7, #4]
 80144de:	429a      	cmp	r2, r3
 80144e0:	d001      	beq.n	80144e6 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80144e2:	2317      	movs	r3, #23
 80144e4:	e04c      	b.n	8014580 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 80144e6:	21bc      	movs	r1, #188	; 0xbc
 80144e8:	482b      	ldr	r0, [pc, #172]	; (8014598 <RestoreNvmData+0x114>)
 80144ea:	f007 ff2d 	bl	801c348 <Crc32>
 80144ee:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 80144f0:	4b26      	ldr	r3, [pc, #152]	; (801458c <RestoreNvmData+0x108>)
 80144f2:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80144f6:	687a      	ldr	r2, [r7, #4]
 80144f8:	429a      	cmp	r2, r3
 80144fa:	d001      	beq.n	8014500 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80144fc:	2317      	movs	r3, #23
 80144fe:	e03f      	b.n	8014580 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8014500:	2190      	movs	r1, #144	; 0x90
 8014502:	4826      	ldr	r0, [pc, #152]	; (801459c <RestoreNvmData+0x118>)
 8014504:	f007 ff20 	bl	801c348 <Crc32>
 8014508:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 801450a:	4b20      	ldr	r3, [pc, #128]	; (801458c <RestoreNvmData+0x108>)
 801450c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8014510:	687a      	ldr	r2, [r7, #4]
 8014512:	429a      	cmp	r2, r3
 8014514:	d001      	beq.n	801451a <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8014516:	2317      	movs	r3, #23
 8014518:	e032      	b.n	8014580 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 801451a:	2114      	movs	r1, #20
 801451c:	4820      	ldr	r0, [pc, #128]	; (80145a0 <RestoreNvmData+0x11c>)
 801451e:	f007 ff13 	bl	801c348 <Crc32>
 8014522:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8014524:	4b19      	ldr	r3, [pc, #100]	; (801458c <RestoreNvmData+0x108>)
 8014526:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 801452a:	687a      	ldr	r2, [r7, #4]
 801452c:	429a      	cmp	r2, r3
 801452e:	d001      	beq.n	8014534 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8014530:	2317      	movs	r3, #23
 8014532:	e025      	b.n	8014580 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8014534:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8014538:	4914      	ldr	r1, [pc, #80]	; (801458c <RestoreNvmData+0x108>)
 801453a:	481a      	ldr	r0, [pc, #104]	; (80145a4 <RestoreNvmData+0x120>)
 801453c:	f007 feaf 	bl	801c29e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8014540:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8014544:	2100      	movs	r1, #0
 8014546:	4811      	ldr	r0, [pc, #68]	; (801458c <RestoreNvmData+0x108>)
 8014548:	f007 fee4 	bl	801c314 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801454c:	4b0e      	ldr	r3, [pc, #56]	; (8014588 <RestoreNvmData+0x104>)
 801454e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8014552:	4b0d      	ldr	r3, [pc, #52]	; (8014588 <RestoreNvmData+0x104>)
 8014554:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8014558:	4b12      	ldr	r3, [pc, #72]	; (80145a4 <RestoreNvmData+0x120>)
 801455a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801455c:	4a0a      	ldr	r2, [pc, #40]	; (8014588 <RestoreNvmData+0x104>)
 801455e:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014562:	4b10      	ldr	r3, [pc, #64]	; (80145a4 <RestoreNvmData+0x120>)
 8014564:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8014568:	4b07      	ldr	r3, [pc, #28]	; (8014588 <RestoreNvmData+0x104>)
 801456a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801456e:	4b06      	ldr	r3, [pc, #24]	; (8014588 <RestoreNvmData+0x104>)
 8014570:	2201      	movs	r2, #1
 8014572:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8014576:	4b04      	ldr	r3, [pc, #16]	; (8014588 <RestoreNvmData+0x104>)
 8014578:	2202      	movs	r2, #2
 801457a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    return LORAMAC_STATUS_OK;
 801457e:	2300      	movs	r3, #0
}
 8014580:	4618      	mov	r0, r3
 8014582:	3708      	adds	r7, #8
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}
 8014588:	20000e24 	.word	0x20000e24
 801458c:	20001a58 	.word	0x20001a58
 8014590:	20001a80 	.word	0x20001a80
 8014594:	20001a98 	.word	0x20001a98
 8014598:	20001b78 	.word	0x20001b78
 801459c:	20001c38 	.word	0x20001c38
 80145a0:	20002168 	.word	0x20002168
 80145a4:	20001330 	.word	0x20001330

080145a8 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80145a8:	b480      	push	{r7}
 80145aa:	b083      	sub	sp, #12
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d002      	beq.n	80145be <DetermineFrameType+0x16>
 80145b8:	683b      	ldr	r3, [r7, #0]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d101      	bne.n	80145c2 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80145be:	2303      	movs	r3, #3
 80145c0:	e03b      	b.n	801463a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	7b1b      	ldrb	r3, [r3, #12]
 80145c6:	f003 030f 	and.w	r3, r3, #15
 80145ca:	b2db      	uxtb	r3, r3
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d008      	beq.n	80145e2 <DetermineFrameType+0x3a>
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d003      	beq.n	80145e2 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80145da:	683b      	ldr	r3, [r7, #0]
 80145dc:	2200      	movs	r2, #0
 80145de:	701a      	strb	r2, [r3, #0]
 80145e0:	e02a      	b.n	8014638 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d103      	bne.n	80145f4 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	2201      	movs	r2, #1
 80145f0:	701a      	strb	r2, [r3, #0]
 80145f2:	e021      	b.n	8014638 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	7b1b      	ldrb	r3, [r3, #12]
 80145f8:	f003 030f 	and.w	r3, r3, #15
 80145fc:	b2db      	uxtb	r3, r3
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d108      	bne.n	8014614 <DetermineFrameType+0x6c>
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d103      	bne.n	8014614 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 801460c:	683b      	ldr	r3, [r7, #0]
 801460e:	2202      	movs	r2, #2
 8014610:	701a      	strb	r2, [r3, #0]
 8014612:	e011      	b.n	8014638 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	7b1b      	ldrb	r3, [r3, #12]
 8014618:	f003 030f 	and.w	r3, r3, #15
 801461c:	b2db      	uxtb	r3, r3
 801461e:	2b00      	cmp	r3, #0
 8014620:	d108      	bne.n	8014634 <DetermineFrameType+0x8c>
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014628:	2b00      	cmp	r3, #0
 801462a:	d003      	beq.n	8014634 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	2203      	movs	r2, #3
 8014630:	701a      	strb	r2, [r3, #0]
 8014632:	e001      	b.n	8014638 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8014634:	2318      	movs	r3, #24
 8014636:	e000      	b.n	801463a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8014638:	2300      	movs	r3, #0
}
 801463a:	4618      	mov	r0, r3
 801463c:	370c      	adds	r7, #12
 801463e:	46bd      	mov	sp, r7
 8014640:	bc80      	pop	{r7}
 8014642:	4770      	bx	lr

08014644 <CheckRetransUnconfirmedUplink>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8014644:	b480      	push	{r7}
 8014646:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8014648:	4b12      	ldr	r3, [pc, #72]	; (8014694 <CheckRetransUnconfirmedUplink+0x50>)
 801464a:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 801464e:	4b12      	ldr	r3, [pc, #72]	; (8014698 <CheckRetransUnconfirmedUplink+0x54>)
 8014650:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8014654:	429a      	cmp	r2, r3
 8014656:	d301      	bcc.n	801465c <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8014658:	2301      	movs	r3, #1
 801465a:	e016      	b.n	801468a <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801465c:	4b0d      	ldr	r3, [pc, #52]	; (8014694 <CheckRetransUnconfirmedUplink+0x50>)
 801465e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8014662:	f003 0302 	and.w	r3, r3, #2
 8014666:	b2db      	uxtb	r3, r3
 8014668:	2b00      	cmp	r3, #0
 801466a:	d00d      	beq.n	8014688 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 801466c:	4b0a      	ldr	r3, [pc, #40]	; (8014698 <CheckRetransUnconfirmedUplink+0x54>)
 801466e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8014672:	2b00      	cmp	r3, #0
 8014674:	d101      	bne.n	801467a <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8014676:	2301      	movs	r3, #1
 8014678:	e007      	b.n	801468a <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 801467a:	4b06      	ldr	r3, [pc, #24]	; (8014694 <CheckRetransUnconfirmedUplink+0x50>)
 801467c:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8014680:	2b00      	cmp	r3, #0
 8014682:	d101      	bne.n	8014688 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8014684:	2301      	movs	r3, #1
 8014686:	e000      	b.n	801468a <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8014688:	2300      	movs	r3, #0
}
 801468a:	4618      	mov	r0, r3
 801468c:	46bd      	mov	sp, r7
 801468e:	bc80      	pop	{r7}
 8014690:	4770      	bx	lr
 8014692:	bf00      	nop
 8014694:	20000e24 	.word	0x20000e24
 8014698:	20001330 	.word	0x20001330

0801469c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 801469c:	b480      	push	{r7}
 801469e:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 80146a0:	4b0e      	ldr	r3, [pc, #56]	; (80146dc <CheckRetransConfirmedUplink+0x40>)
 80146a2:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 80146a6:	4b0d      	ldr	r3, [pc, #52]	; (80146dc <CheckRetransConfirmedUplink+0x40>)
 80146a8:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 80146ac:	429a      	cmp	r2, r3
 80146ae:	d301      	bcc.n	80146b4 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 80146b0:	2301      	movs	r3, #1
 80146b2:	e00f      	b.n	80146d4 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80146b4:	4b09      	ldr	r3, [pc, #36]	; (80146dc <CheckRetransConfirmedUplink+0x40>)
 80146b6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80146ba:	f003 0302 	and.w	r3, r3, #2
 80146be:	b2db      	uxtb	r3, r3
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d006      	beq.n	80146d2 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80146c4:	4b05      	ldr	r3, [pc, #20]	; (80146dc <CheckRetransConfirmedUplink+0x40>)
 80146c6:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d001      	beq.n	80146d2 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 80146ce:	2301      	movs	r3, #1
 80146d0:	e000      	b.n	80146d4 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 80146d2:	2300      	movs	r3, #0
}
 80146d4:	4618      	mov	r0, r3
 80146d6:	46bd      	mov	sp, r7
 80146d8:	bc80      	pop	{r7}
 80146da:	4770      	bx	lr
 80146dc:	20000e24 	.word	0x20000e24

080146e0 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80146e0:	b480      	push	{r7}
 80146e2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80146e4:	4b1a      	ldr	r3, [pc, #104]	; (8014750 <StopRetransmission+0x70>)
 80146e6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80146ea:	f003 0302 	and.w	r3, r3, #2
 80146ee:	b2db      	uxtb	r3, r3
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d009      	beq.n	8014708 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80146f4:	4b16      	ldr	r3, [pc, #88]	; (8014750 <StopRetransmission+0x70>)
 80146f6:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d00e      	beq.n	801471c <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80146fe:	4b14      	ldr	r3, [pc, #80]	; (8014750 <StopRetransmission+0x70>)
 8014700:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8014704:	2b01      	cmp	r3, #1
 8014706:	d009      	beq.n	801471c <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8014708:	4b12      	ldr	r3, [pc, #72]	; (8014754 <StopRetransmission+0x74>)
 801470a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801470e:	2b00      	cmp	r3, #0
 8014710:	d004      	beq.n	801471c <StopRetransmission+0x3c>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8014712:	4b10      	ldr	r3, [pc, #64]	; (8014754 <StopRetransmission+0x74>)
 8014714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014716:	3301      	adds	r3, #1
 8014718:	4a0e      	ldr	r2, [pc, #56]	; (8014754 <StopRetransmission+0x74>)
 801471a:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 801471c:	4b0c      	ldr	r3, [pc, #48]	; (8014750 <StopRetransmission+0x70>)
 801471e:	2200      	movs	r2, #0
 8014720:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8014724:	4b0a      	ldr	r3, [pc, #40]	; (8014750 <StopRetransmission+0x70>)
 8014726:	2200      	movs	r2, #0
 8014728:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 801472c:	4b08      	ldr	r3, [pc, #32]	; (8014750 <StopRetransmission+0x70>)
 801472e:	2200      	movs	r2, #0
 8014730:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8014734:	4b06      	ldr	r3, [pc, #24]	; (8014750 <StopRetransmission+0x70>)
 8014736:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801473a:	f023 0302 	bic.w	r3, r3, #2
 801473e:	4a04      	ldr	r2, [pc, #16]	; (8014750 <StopRetransmission+0x70>)
 8014740:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8014744:	2301      	movs	r3, #1
}
 8014746:	4618      	mov	r0, r3
 8014748:	46bd      	mov	sp, r7
 801474a:	bc80      	pop	{r7}
 801474c:	4770      	bx	lr
 801474e:	bf00      	nop
 8014750:	20000e24 	.word	0x20000e24
 8014754:	20001330 	.word	0x20001330

08014758 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8014758:	b580      	push	{r7, lr}
 801475a:	b082      	sub	sp, #8
 801475c:	af00      	add	r7, sp, #0
 801475e:	4603      	mov	r3, r0
 8014760:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8014762:	4b0b      	ldr	r3, [pc, #44]	; (8014790 <CallNvmDataChangeCallback+0x38>)
 8014764:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014768:	2b00      	cmp	r3, #0
 801476a:	d00c      	beq.n	8014786 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 801476c:	4b08      	ldr	r3, [pc, #32]	; (8014790 <CallNvmDataChangeCallback+0x38>)
 801476e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014772:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8014774:	2b00      	cmp	r3, #0
 8014776:	d006      	beq.n	8014786 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8014778:	4b05      	ldr	r3, [pc, #20]	; (8014790 <CallNvmDataChangeCallback+0x38>)
 801477a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801477e:	68db      	ldr	r3, [r3, #12]
 8014780:	88fa      	ldrh	r2, [r7, #6]
 8014782:	4610      	mov	r0, r2
 8014784:	4798      	blx	r3
    }
}
 8014786:	bf00      	nop
 8014788:	3708      	adds	r7, #8
 801478a:	46bd      	mov	sp, r7
 801478c:	bd80      	pop	{r7, pc}
 801478e:	bf00      	nop
 8014790:	20000e24 	.word	0x20000e24

08014794 <AckTimeoutRetriesProcess>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b084      	sub	sp, #16
 8014798:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 801479a:	4b1b      	ldr	r3, [pc, #108]	; (8014808 <AckTimeoutRetriesProcess+0x74>)
 801479c:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 80147a0:	4b19      	ldr	r3, [pc, #100]	; (8014808 <AckTimeoutRetriesProcess+0x74>)
 80147a2:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80147a6:	429a      	cmp	r2, r3
 80147a8:	d229      	bcs.n	80147fe <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 80147aa:	4b17      	ldr	r3, [pc, #92]	; (8014808 <AckTimeoutRetriesProcess+0x74>)
 80147ac:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80147b0:	3301      	adds	r3, #1
 80147b2:	b2da      	uxtb	r2, r3
 80147b4:	4b14      	ldr	r3, [pc, #80]	; (8014808 <AckTimeoutRetriesProcess+0x74>)
 80147b6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 80147ba:	4b13      	ldr	r3, [pc, #76]	; (8014808 <AckTimeoutRetriesProcess+0x74>)
 80147bc:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80147c0:	f003 0301 	and.w	r3, r3, #1
 80147c4:	b2db      	uxtb	r3, r3
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d019      	beq.n	80147fe <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80147ca:	2322      	movs	r3, #34	; 0x22
 80147cc:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80147ce:	4b0f      	ldr	r3, [pc, #60]	; (801480c <AckTimeoutRetriesProcess+0x78>)
 80147d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80147d4:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80147d6:	4b0d      	ldr	r3, [pc, #52]	; (801480c <AckTimeoutRetriesProcess+0x78>)
 80147d8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80147dc:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80147de:	4b0b      	ldr	r3, [pc, #44]	; (801480c <AckTimeoutRetriesProcess+0x78>)
 80147e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80147e4:	f107 0208 	add.w	r2, r7, #8
 80147e8:	4611      	mov	r1, r2
 80147ea:	4618      	mov	r0, r3
 80147ec:	f005 f9ac 	bl	8019b48 <RegionGetPhyParam>
 80147f0:	4603      	mov	r3, r0
 80147f2:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	b25a      	sxtb	r2, r3
 80147f8:	4b04      	ldr	r3, [pc, #16]	; (801480c <AckTimeoutRetriesProcess+0x78>)
 80147fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 80147fe:	bf00      	nop
 8014800:	3710      	adds	r7, #16
 8014802:	46bd      	mov	sp, r7
 8014804:	bd80      	pop	{r7, pc}
 8014806:	bf00      	nop
 8014808:	20000e24 	.word	0x20000e24
 801480c:	20001330 	.word	0x20001330

08014810 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b084      	sub	sp, #16
 8014814:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8014816:	4b14      	ldr	r3, [pc, #80]	; (8014868 <AckTimeoutRetriesFinalize+0x58>)
 8014818:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 801481c:	f083 0301 	eor.w	r3, r3, #1
 8014820:	b2db      	uxtb	r3, r3
 8014822:	2b00      	cmp	r3, #0
 8014824:	d015      	beq.n	8014852 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8014826:	2302      	movs	r3, #2
 8014828:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 801482a:	4b10      	ldr	r3, [pc, #64]	; (801486c <AckTimeoutRetriesFinalize+0x5c>)
 801482c:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 801482e:	4b10      	ldr	r3, [pc, #64]	; (8014870 <AckTimeoutRetriesFinalize+0x60>)
 8014830:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8014832:	4b10      	ldr	r3, [pc, #64]	; (8014874 <AckTimeoutRetriesFinalize+0x64>)
 8014834:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014838:	1d3a      	adds	r2, r7, #4
 801483a:	4611      	mov	r1, r2
 801483c:	4618      	mov	r0, r3
 801483e:	f005 f9ac 	bl	8019b9a <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8014842:	4b09      	ldr	r3, [pc, #36]	; (8014868 <AckTimeoutRetriesFinalize+0x58>)
 8014844:	2200      	movs	r2, #0
 8014846:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 801484a:	4b07      	ldr	r3, [pc, #28]	; (8014868 <AckTimeoutRetriesFinalize+0x58>)
 801484c:	2200      	movs	r2, #0
 801484e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8014852:	4b05      	ldr	r3, [pc, #20]	; (8014868 <AckTimeoutRetriesFinalize+0x58>)
 8014854:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8014858:	4b03      	ldr	r3, [pc, #12]	; (8014868 <AckTimeoutRetriesFinalize+0x58>)
 801485a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 801485e:	bf00      	nop
 8014860:	3710      	adds	r7, #16
 8014862:	46bd      	mov	sp, r7
 8014864:	bd80      	pop	{r7, pc}
 8014866:	bf00      	nop
 8014868:	20000e24 	.word	0x20000e24
 801486c:	20001510 	.word	0x20001510
 8014870:	200015a4 	.word	0x200015a4
 8014874:	20001330 	.word	0x20001330

08014878 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8014878:	b480      	push	{r7}
 801487a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801487c:	4b0b      	ldr	r3, [pc, #44]	; (80148ac <IsRequestPending+0x34>)
 801487e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8014882:	f003 0304 	and.w	r3, r3, #4
 8014886:	b2db      	uxtb	r3, r3
 8014888:	2b00      	cmp	r3, #0
 801488a:	d107      	bne.n	801489c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 801488c:	4b07      	ldr	r3, [pc, #28]	; (80148ac <IsRequestPending+0x34>)
 801488e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8014892:	f003 0301 	and.w	r3, r3, #1
 8014896:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8014898:	2b00      	cmp	r3, #0
 801489a:	d001      	beq.n	80148a0 <IsRequestPending+0x28>
    {
        return 1;
 801489c:	2301      	movs	r3, #1
 801489e:	e000      	b.n	80148a2 <IsRequestPending+0x2a>
    }
    return 0;
 80148a0:	2300      	movs	r3, #0
}
 80148a2:	4618      	mov	r0, r3
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bc80      	pop	{r7}
 80148a8:	4770      	bx	lr
 80148aa:	bf00      	nop
 80148ac:	20000e24 	.word	0x20000e24

080148b0 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80148b0:	b590      	push	{r4, r7, lr}
 80148b2:	b08f      	sub	sp, #60	; 0x3c
 80148b4:	af02      	add	r7, sp, #8
 80148b6:	6178      	str	r0, [r7, #20]
 80148b8:	6139      	str	r1, [r7, #16]
 80148ba:	4613      	mov	r3, r2
 80148bc:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80148be:	697b      	ldr	r3, [r7, #20]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d002      	beq.n	80148ca <LoRaMacInitialization+0x1a>
 80148c4:	693b      	ldr	r3, [r7, #16]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d101      	bne.n	80148ce <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80148ca:	2303      	movs	r3, #3
 80148cc:	e275      	b.n	8014dba <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80148ce:	697b      	ldr	r3, [r7, #20]
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d00b      	beq.n	80148ee <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80148d6:	697b      	ldr	r3, [r7, #20]
 80148d8:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d007      	beq.n	80148ee <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80148de:	697b      	ldr	r3, [r7, #20]
 80148e0:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d003      	beq.n	80148ee <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 80148e6:	697b      	ldr	r3, [r7, #20]
 80148e8:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d101      	bne.n	80148f2 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80148ee:	2303      	movs	r3, #3
 80148f0:	e263      	b.n	8014dba <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80148f2:	7bfb      	ldrb	r3, [r7, #15]
 80148f4:	4618      	mov	r0, r3
 80148f6:	f005 f917 	bl	8019b28 <RegionIsActive>
 80148fa:	4603      	mov	r3, r0
 80148fc:	f083 0301 	eor.w	r3, r3, #1
 8014900:	b2db      	uxtb	r3, r3
 8014902:	2b00      	cmp	r3, #0
 8014904:	d001      	beq.n	801490a <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8014906:	2309      	movs	r3, #9
 8014908:	e257      	b.n	8014dba <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 801490a:	6978      	ldr	r0, [r7, #20]
 801490c:	f003 fd8e 	bl	801842c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8014910:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8014914:	2100      	movs	r1, #0
 8014916:	48c7      	ldr	r0, [pc, #796]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014918:	f007 fcfc 	bl	801c314 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 801491c:	f240 520c 	movw	r2, #1292	; 0x50c
 8014920:	2100      	movs	r1, #0
 8014922:	48c5      	ldr	r0, [pc, #788]	; (8014c38 <LoRaMacInitialization+0x388>)
 8014924:	f007 fcf6 	bl	801c314 <memset1>

    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8014928:	4bc3      	ldr	r3, [pc, #780]	; (8014c38 <LoRaMacInitialization+0x388>)
 801492a:	2201      	movs	r2, #1
 801492c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8014930:	4bc1      	ldr	r3, [pc, #772]	; (8014c38 <LoRaMacInitialization+0x388>)
 8014932:	2201      	movs	r2, #1
 8014934:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8014938:	4abe      	ldr	r2, [pc, #760]	; (8014c34 <LoRaMacInitialization+0x384>)
 801493a:	7bfb      	ldrb	r3, [r7, #15]
 801493c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8014940:	4bbc      	ldr	r3, [pc, #752]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014942:	2200      	movs	r2, #0
 8014944:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8014948:	4bba      	ldr	r3, [pc, #744]	; (8014c34 <LoRaMacInitialization+0x384>)
 801494a:	2200      	movs	r2, #0
 801494c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8014950:	4bb8      	ldr	r3, [pc, #736]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014952:	4aba      	ldr	r2, [pc, #744]	; (8014c3c <LoRaMacInitialization+0x38c>)
 8014954:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8014958:	230f      	movs	r3, #15
 801495a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801495e:	4bb5      	ldr	r3, [pc, #724]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014960:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014964:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014968:	4611      	mov	r1, r2
 801496a:	4618      	mov	r0, r3
 801496c:	f005 f8ec 	bl	8019b48 <RegionGetPhyParam>
 8014970:	4603      	mov	r3, r0
 8014972:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8014974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014976:	2b00      	cmp	r3, #0
 8014978:	bf14      	ite	ne
 801497a:	2301      	movne	r3, #1
 801497c:	2300      	moveq	r3, #0
 801497e:	b2da      	uxtb	r2, r3
 8014980:	4bac      	ldr	r3, [pc, #688]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014982:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8014986:	230a      	movs	r3, #10
 8014988:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801498c:	4ba9      	ldr	r3, [pc, #676]	; (8014c34 <LoRaMacInitialization+0x384>)
 801498e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014992:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014996:	4611      	mov	r1, r2
 8014998:	4618      	mov	r0, r3
 801499a:	f005 f8d5 	bl	8019b48 <RegionGetPhyParam>
 801499e:	4603      	mov	r3, r0
 80149a0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80149a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a4:	b25a      	sxtb	r2, r3
 80149a6:	4ba3      	ldr	r3, [pc, #652]	; (8014c34 <LoRaMacInitialization+0x384>)
 80149a8:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80149ac:	2306      	movs	r3, #6
 80149ae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80149b2:	4ba0      	ldr	r3, [pc, #640]	; (8014c34 <LoRaMacInitialization+0x384>)
 80149b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80149b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80149bc:	4611      	mov	r1, r2
 80149be:	4618      	mov	r0, r3
 80149c0:	f005 f8c2 	bl	8019b48 <RegionGetPhyParam>
 80149c4:	4603      	mov	r3, r0
 80149c6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80149c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ca:	b25a      	sxtb	r2, r3
 80149cc:	4b99      	ldr	r3, [pc, #612]	; (8014c34 <LoRaMacInitialization+0x384>)
 80149ce:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80149d2:	2310      	movs	r3, #16
 80149d4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80149d8:	4b96      	ldr	r3, [pc, #600]	; (8014c34 <LoRaMacInitialization+0x384>)
 80149da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80149de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80149e2:	4611      	mov	r1, r2
 80149e4:	4618      	mov	r0, r3
 80149e6:	f005 f8af 	bl	8019b48 <RegionGetPhyParam>
 80149ea:	4603      	mov	r3, r0
 80149ec:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80149ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149f0:	4a90      	ldr	r2, [pc, #576]	; (8014c34 <LoRaMacInitialization+0x384>)
 80149f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80149f6:	2311      	movs	r3, #17
 80149f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80149fc:	4b8d      	ldr	r3, [pc, #564]	; (8014c34 <LoRaMacInitialization+0x384>)
 80149fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014a02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014a06:	4611      	mov	r1, r2
 8014a08:	4618      	mov	r0, r3
 8014a0a:	f005 f89d 	bl	8019b48 <RegionGetPhyParam>
 8014a0e:	4603      	mov	r3, r0
 8014a10:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8014a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a14:	4a87      	ldr	r2, [pc, #540]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014a16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8014a1a:	2312      	movs	r3, #18
 8014a1c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014a20:	4b84      	ldr	r3, [pc, #528]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014a26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014a2a:	4611      	mov	r1, r2
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f005 f88b 	bl	8019b48 <RegionGetPhyParam>
 8014a32:	4603      	mov	r3, r0
 8014a34:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8014a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a38:	4a7e      	ldr	r2, [pc, #504]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014a3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8014a3e:	2313      	movs	r3, #19
 8014a40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014a44:	4b7b      	ldr	r3, [pc, #492]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014a4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014a4e:	4611      	mov	r1, r2
 8014a50:	4618      	mov	r0, r3
 8014a52:	f005 f879 	bl	8019b48 <RegionGetPhyParam>
 8014a56:	4603      	mov	r3, r0
 8014a58:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8014a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a5c:	4a75      	ldr	r2, [pc, #468]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014a5e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8014a62:	2314      	movs	r3, #20
 8014a64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014a68:	4b72      	ldr	r3, [pc, #456]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014a6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014a72:	4611      	mov	r1, r2
 8014a74:	4618      	mov	r0, r3
 8014a76:	f005 f867 	bl	8019b48 <RegionGetPhyParam>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8014a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a80:	4a6c      	ldr	r2, [pc, #432]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014a82:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8014a86:	2317      	movs	r3, #23
 8014a88:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014a8c:	4b69      	ldr	r3, [pc, #420]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014a92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014a96:	4611      	mov	r1, r2
 8014a98:	4618      	mov	r0, r3
 8014a9a:	f005 f855 	bl	8019b48 <RegionGetPhyParam>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8014aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aa4:	b2da      	uxtb	r2, r3
 8014aa6:	4b63      	ldr	r3, [pc, #396]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014aa8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8014aac:	2318      	movs	r3, #24
 8014aae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014ab2:	4b60      	ldr	r3, [pc, #384]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014ab4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014ab8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014abc:	4611      	mov	r1, r2
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f005 f842 	bl	8019b48 <RegionGetPhyParam>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8014ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aca:	4a5a      	ldr	r2, [pc, #360]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014acc:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8014ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ad2:	4a58      	ldr	r2, [pc, #352]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014ad4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8014ad8:	2319      	movs	r3, #25
 8014ada:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014ade:	4b55      	ldr	r3, [pc, #340]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014ae0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014ae4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014ae8:	4611      	mov	r1, r2
 8014aea:	4618      	mov	r0, r3
 8014aec:	f005 f82c 	bl	8019b48 <RegionGetPhyParam>
 8014af0:	4603      	mov	r3, r0
 8014af2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8014af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014af6:	b2da      	uxtb	r2, r3
 8014af8:	4b4e      	ldr	r3, [pc, #312]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014afa:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8014afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b00:	b2da      	uxtb	r2, r3
 8014b02:	4b4c      	ldr	r3, [pc, #304]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014b04:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8014b08:	231e      	movs	r3, #30
 8014b0a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014b0e:	4b49      	ldr	r3, [pc, #292]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014b10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014b14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014b18:	4611      	mov	r1, r2
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	f005 f814 	bl	8019b48 <RegionGetPhyParam>
 8014b20:	4603      	mov	r3, r0
 8014b22:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8014b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b26:	b2da      	uxtb	r2, r3
 8014b28:	4b42      	ldr	r3, [pc, #264]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014b2a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8014b2e:	231f      	movs	r3, #31
 8014b30:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014b34:	4b3f      	ldr	r3, [pc, #252]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014b36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014b3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014b3e:	4611      	mov	r1, r2
 8014b40:	4618      	mov	r0, r3
 8014b42:	f005 f801 	bl	8019b48 <RegionGetPhyParam>
 8014b46:	4603      	mov	r3, r0
 8014b48:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8014b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b4c:	b2da      	uxtb	r2, r3
 8014b4e:	4b39      	ldr	r3, [pc, #228]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014b50:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8014b54:	2320      	movs	r3, #32
 8014b56:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014b5a:	4b36      	ldr	r3, [pc, #216]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014b5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014b60:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014b64:	4611      	mov	r1, r2
 8014b66:	4618      	mov	r0, r3
 8014b68:	f004 ffee 	bl	8019b48 <RegionGetPhyParam>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8014b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b72:	4a30      	ldr	r2, [pc, #192]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014b74:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8014b78:	2321      	movs	r3, #33	; 0x21
 8014b7a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014b7e:	4b2d      	ldr	r3, [pc, #180]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014b80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014b84:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014b88:	4611      	mov	r1, r2
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	f004 ffdc 	bl	8019b48 <RegionGetPhyParam>
 8014b90:	4603      	mov	r3, r0
 8014b92:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8014b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b96:	4a27      	ldr	r2, [pc, #156]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014b98:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8014b9c:	230b      	movs	r3, #11
 8014b9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014ba2:	4b24      	ldr	r3, [pc, #144]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014ba4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014ba8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014bac:	4611      	mov	r1, r2
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f004 ffca 	bl	8019b48 <RegionGetPhyParam>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8014bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bba:	b29a      	uxth	r2, r3
 8014bbc:	4b1e      	ldr	r3, [pc, #120]	; (8014c38 <LoRaMacInitialization+0x388>)
 8014bbe:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8014bc2:	230c      	movs	r3, #12
 8014bc4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014bc8:	4b1a      	ldr	r3, [pc, #104]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014bca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014bce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014bd2:	4611      	mov	r1, r2
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f004 ffb7 	bl	8019b48 <RegionGetPhyParam>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8014bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be0:	b29a      	uxth	r2, r3
 8014be2:	4b15      	ldr	r3, [pc, #84]	; (8014c38 <LoRaMacInitialization+0x388>)
 8014be4:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8014be8:	4b12      	ldr	r3, [pc, #72]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014bea:	2201      	movs	r2, #1
 8014bec:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8014bf0:	4b10      	ldr	r3, [pc, #64]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014bf2:	220a      	movs	r2, #10
 8014bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8014bf8:	4b0e      	ldr	r3, [pc, #56]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014bfa:	2206      	movs	r2, #6
 8014bfc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8014c00:	4b0c      	ldr	r3, [pc, #48]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014c06:	4a0b      	ldr	r2, [pc, #44]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014c08:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8014c0a:	4b0a      	ldr	r3, [pc, #40]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014c0c:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8014c10:	4b08      	ldr	r3, [pc, #32]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014c12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8014c16:	4b07      	ldr	r3, [pc, #28]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014c1c:	4a05      	ldr	r2, [pc, #20]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014c1e:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8014c20:	4b04      	ldr	r3, [pc, #16]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014c26:	4a03      	ldr	r2, [pc, #12]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014c28:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8014c2a:	4b02      	ldr	r3, [pc, #8]	; (8014c34 <LoRaMacInitialization+0x384>)
 8014c2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014c30:	e006      	b.n	8014c40 <LoRaMacInitialization+0x390>
 8014c32:	bf00      	nop
 8014c34:	20001330 	.word	0x20001330
 8014c38:	20000e24 	.word	0x20000e24
 8014c3c:	01000300 	.word	0x01000300
 8014c40:	4a60      	ldr	r2, [pc, #384]	; (8014dc4 <LoRaMacInitialization+0x514>)
 8014c42:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8014c44:	4b5f      	ldr	r3, [pc, #380]	; (8014dc4 <LoRaMacInitialization+0x514>)
 8014c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014c4a:	4a5e      	ldr	r2, [pc, #376]	; (8014dc4 <LoRaMacInitialization+0x514>)
 8014c4c:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8014c4e:	4b5d      	ldr	r3, [pc, #372]	; (8014dc4 <LoRaMacInitialization+0x514>)
 8014c50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014c54:	4a5b      	ldr	r2, [pc, #364]	; (8014dc4 <LoRaMacInitialization+0x514>)
 8014c56:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8014c58:	4b5a      	ldr	r3, [pc, #360]	; (8014dc4 <LoRaMacInitialization+0x514>)
 8014c5a:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8014c5e:	4b59      	ldr	r3, [pc, #356]	; (8014dc4 <LoRaMacInitialization+0x514>)
 8014c60:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8014c64:	2300      	movs	r3, #0
 8014c66:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8014c6a:	4b57      	ldr	r3, [pc, #348]	; (8014dc8 <LoRaMacInitialization+0x518>)
 8014c6c:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8014c6e:	4b57      	ldr	r3, [pc, #348]	; (8014dcc <LoRaMacInitialization+0x51c>)
 8014c70:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8014c72:	4b54      	ldr	r3, [pc, #336]	; (8014dc4 <LoRaMacInitialization+0x514>)
 8014c74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014c78:	f107 0218 	add.w	r2, r7, #24
 8014c7c:	4611      	mov	r1, r2
 8014c7e:	4618      	mov	r0, r3
 8014c80:	f004 ff8b 	bl	8019b9a <RegionInitDefaults>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8014c84:	4a52      	ldr	r2, [pc, #328]	; (8014dd0 <LoRaMacInitialization+0x520>)
 8014c86:	693b      	ldr	r3, [r7, #16]
 8014c88:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8014c8c:	f7ff f87e 	bl	8013d8c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8014c90:	4b4c      	ldr	r3, [pc, #304]	; (8014dc4 <LoRaMacInitialization+0x514>)
 8014c92:	2201      	movs	r2, #1
 8014c94:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 8014c98:	4a4d      	ldr	r2, [pc, #308]	; (8014dd0 <LoRaMacInitialization+0x520>)
 8014c9a:	697b      	ldr	r3, [r7, #20]
 8014c9c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8014ca0:	4b4b      	ldr	r3, [pc, #300]	; (8014dd0 <LoRaMacInitialization+0x520>)
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 8014ca8:	4b49      	ldr	r3, [pc, #292]	; (8014dd0 <LoRaMacInitialization+0x520>)
 8014caa:	2201      	movs	r2, #1
 8014cac:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8014cb0:	4b44      	ldr	r3, [pc, #272]	; (8014dc4 <LoRaMacInitialization+0x514>)
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8014cb6:	4b43      	ldr	r3, [pc, #268]	; (8014dc4 <LoRaMacInitialization+0x514>)
 8014cb8:	2200      	movs	r2, #0
 8014cba:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	9300      	str	r3, [sp, #0]
 8014cc0:	4b44      	ldr	r3, [pc, #272]	; (8014dd4 <LoRaMacInitialization+0x524>)
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8014cc8:	4843      	ldr	r0, [pc, #268]	; (8014dd8 <LoRaMacInitialization+0x528>)
 8014cca:	f00b fb8f 	bl	80203ec <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8014cce:	2300      	movs	r3, #0
 8014cd0:	9300      	str	r3, [sp, #0]
 8014cd2:	4b42      	ldr	r3, [pc, #264]	; (8014ddc <LoRaMacInitialization+0x52c>)
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	f04f 31ff 	mov.w	r1, #4294967295
 8014cda:	4841      	ldr	r0, [pc, #260]	; (8014de0 <LoRaMacInitialization+0x530>)
 8014cdc:	f00b fb86 	bl	80203ec <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	9300      	str	r3, [sp, #0]
 8014ce4:	4b3f      	ldr	r3, [pc, #252]	; (8014de4 <LoRaMacInitialization+0x534>)
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8014cec:	483e      	ldr	r0, [pc, #248]	; (8014de8 <LoRaMacInitialization+0x538>)
 8014cee:	f00b fb7d 	bl	80203ec <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	9300      	str	r3, [sp, #0]
 8014cf6:	4b3d      	ldr	r3, [pc, #244]	; (8014dec <LoRaMacInitialization+0x53c>)
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	f04f 31ff 	mov.w	r1, #4294967295
 8014cfe:	483c      	ldr	r0, [pc, #240]	; (8014df0 <LoRaMacInitialization+0x540>)
 8014d00:	f00b fb74 	bl	80203ec <UTIL_TIMER_Create>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8014d04:	4c2f      	ldr	r4, [pc, #188]	; (8014dc4 <LoRaMacInitialization+0x514>)
 8014d06:	463b      	mov	r3, r7
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f00a fedf 	bl	801facc <SysTimeGetMcuTime>
 8014d0e:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8014d12:	463a      	mov	r2, r7
 8014d14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d18:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8014d1c:	4b2c      	ldr	r3, [pc, #176]	; (8014dd0 <LoRaMacInitialization+0x520>)
 8014d1e:	4a35      	ldr	r2, [pc, #212]	; (8014df4 <LoRaMacInitialization+0x544>)
 8014d20:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8014d24:	4b2a      	ldr	r3, [pc, #168]	; (8014dd0 <LoRaMacInitialization+0x520>)
 8014d26:	4a34      	ldr	r2, [pc, #208]	; (8014df8 <LoRaMacInitialization+0x548>)
 8014d28:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8014d2c:	4b28      	ldr	r3, [pc, #160]	; (8014dd0 <LoRaMacInitialization+0x520>)
 8014d2e:	4a33      	ldr	r2, [pc, #204]	; (8014dfc <LoRaMacInitialization+0x54c>)
 8014d30:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8014d34:	4b26      	ldr	r3, [pc, #152]	; (8014dd0 <LoRaMacInitialization+0x520>)
 8014d36:	4a32      	ldr	r2, [pc, #200]	; (8014e00 <LoRaMacInitialization+0x550>)
 8014d38:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8014d3c:	4b24      	ldr	r3, [pc, #144]	; (8014dd0 <LoRaMacInitialization+0x520>)
 8014d3e:	4a31      	ldr	r2, [pc, #196]	; (8014e04 <LoRaMacInitialization+0x554>)
 8014d40:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8014d44:	4b30      	ldr	r3, [pc, #192]	; (8014e08 <LoRaMacInitialization+0x558>)
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	4830      	ldr	r0, [pc, #192]	; (8014e0c <LoRaMacInitialization+0x55c>)
 8014d4a:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8014d4c:	693b      	ldr	r3, [r7, #16]
 8014d4e:	689b      	ldr	r3, [r3, #8]
 8014d50:	4619      	mov	r1, r3
 8014d52:	482f      	ldr	r0, [pc, #188]	; (8014e10 <LoRaMacInitialization+0x560>)
 8014d54:	f7fa fd20 	bl	800f798 <SecureElementInit>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d001      	beq.n	8014d62 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014d5e:	2311      	movs	r3, #17
 8014d60:	e02b      	b.n	8014dba <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8014d62:	4818      	ldr	r0, [pc, #96]	; (8014dc4 <LoRaMacInitialization+0x514>)
 8014d64:	f004 f80e 	bl	8018d84 <LoRaMacCryptoInit>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d001      	beq.n	8014d72 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014d6e:	2311      	movs	r3, #17
 8014d70:	e023      	b.n	8014dba <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8014d72:	f003 f92d 	bl	8017fd0 <LoRaMacCommandsInit>
 8014d76:	4603      	mov	r3, r0
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d001      	beq.n	8014d80 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014d7c:	2313      	movs	r3, #19
 8014d7e:	e01c      	b.n	8014dba <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8014d80:	4824      	ldr	r0, [pc, #144]	; (8014e14 <LoRaMacInitialization+0x564>)
 8014d82:	f004 f8c9 	bl	8018f18 <LoRaMacCryptoSetMulticastReference>
 8014d86:	4603      	mov	r3, r0
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d001      	beq.n	8014d90 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014d8c:	2311      	movs	r3, #17
 8014d8e:	e014      	b.n	8014dba <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8014d90:	4b1d      	ldr	r3, [pc, #116]	; (8014e08 <LoRaMacInitialization+0x558>)
 8014d92:	695b      	ldr	r3, [r3, #20]
 8014d94:	4798      	blx	r3
 8014d96:	4603      	mov	r3, r0
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f007 fa5b 	bl	801c254 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014d9e:	4b1a      	ldr	r3, [pc, #104]	; (8014e08 <LoRaMacInitialization+0x558>)
 8014da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014da2:	4a08      	ldr	r2, [pc, #32]	; (8014dc4 <LoRaMacInitialization+0x514>)
 8014da4:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8014da8:	4610      	mov	r0, r2
 8014daa:	4798      	blx	r3
    Radio.Sleep( );
 8014dac:	4b16      	ldr	r3, [pc, #88]	; (8014e08 <LoRaMacInitialization+0x558>)
 8014dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014db0:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8014db2:	2001      	movs	r0, #1
 8014db4:	f7fd faf2 	bl	801239c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8014db8:	2300      	movs	r3, #0
}
 8014dba:	4618      	mov	r0, r3
 8014dbc:	3734      	adds	r7, #52	; 0x34
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd90      	pop	{r4, r7, pc}
 8014dc2:	bf00      	nop
 8014dc4:	20001330 	.word	0x20001330
 8014dc8:	20001510 	.word	0x20001510
 8014dcc:	200015a4 	.word	0x200015a4
 8014dd0:	20000e24 	.word	0x20000e24
 8014dd4:	08012909 	.word	0x08012909
 8014dd8:	2000118c 	.word	0x2000118c
 8014ddc:	0801297d 	.word	0x0801297d
 8014de0:	200011a4 	.word	0x200011a4
 8014de4:	080129e9 	.word	0x080129e9
 8014de8:	200011bc 	.word	0x200011bc
 8014dec:	08012a5d 	.word	0x08012a5d
 8014df0:	2000121c 	.word	0x2000121c
 8014df4:	08011519 	.word	0x08011519
 8014df8:	08011591 	.word	0x08011591
 8014dfc:	08011669 	.word	0x08011669
 8014e00:	0801161d 	.word	0x0801161d
 8014e04:	080116a5 	.word	0x080116a5
 8014e08:	08021e08 	.word	0x08021e08
 8014e0c:	20001170 	.word	0x20001170
 8014e10:	20001450 	.word	0x20001450
 8014e14:	20001408 	.word	0x20001408

08014e18 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8014e18:	b480      	push	{r7}
 8014e1a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8014e1c:	4b04      	ldr	r3, [pc, #16]	; (8014e30 <LoRaMacStart+0x18>)
 8014e1e:	2200      	movs	r2, #0
 8014e20:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8014e24:	2300      	movs	r3, #0
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bc80      	pop	{r7}
 8014e2c:	4770      	bx	lr
 8014e2e:	bf00      	nop
 8014e30:	20000e24 	.word	0x20000e24

08014e34 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8014e38:	f7fd fa9a 	bl	8012370 <LoRaMacIsBusy>
 8014e3c:	4603      	mov	r3, r0
 8014e3e:	f083 0301 	eor.w	r3, r3, #1
 8014e42:	b2db      	uxtb	r3, r3
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d005      	beq.n	8014e54 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8014e48:	4b07      	ldr	r3, [pc, #28]	; (8014e68 <LoRaMacStop+0x34>)
 8014e4a:	2201      	movs	r2, #1
 8014e4c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8014e50:	2300      	movs	r3, #0
 8014e52:	e007      	b.n	8014e64 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8014e54:	4b04      	ldr	r3, [pc, #16]	; (8014e68 <LoRaMacStop+0x34>)
 8014e56:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014e5a:	2b01      	cmp	r3, #1
 8014e5c:	d101      	bne.n	8014e62 <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 8014e5e:	2300      	movs	r3, #0
 8014e60:	e000      	b.n	8014e64 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 8014e62:	2301      	movs	r3, #1
}
 8014e64:	4618      	mov	r0, r3
 8014e66:	bd80      	pop	{r7, pc}
 8014e68:	20000e24 	.word	0x20000e24

08014e6c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8014e70:	4812      	ldr	r0, [pc, #72]	; (8014ebc <LoRaMacHalt+0x50>)
 8014e72:	f00b fb5f 	bl	8020534 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8014e76:	4812      	ldr	r0, [pc, #72]	; (8014ec0 <LoRaMacHalt+0x54>)
 8014e78:	f00b fb5c 	bl	8020534 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8014e7c:	4811      	ldr	r0, [pc, #68]	; (8014ec4 <LoRaMacHalt+0x58>)
 8014e7e:	f00b fb59 	bl	8020534 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 8014e82:	4811      	ldr	r0, [pc, #68]	; (8014ec8 <LoRaMacHalt+0x5c>)
 8014e84:	f00b fb56 	bl	8020534 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8014e88:	f002 fc82 	bl	8017790 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8014e8c:	4b0f      	ldr	r3, [pc, #60]	; (8014ecc <LoRaMacHalt+0x60>)
 8014e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e90:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8014e92:	4b0f      	ldr	r3, [pc, #60]	; (8014ed0 <LoRaMacHalt+0x64>)
 8014e94:	2200      	movs	r2, #0
 8014e96:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 8014e9a:	480e      	ldr	r0, [pc, #56]	; (8014ed4 <LoRaMacHalt+0x68>)
 8014e9c:	f7fd fc2e 	bl	80126fc <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8014ea0:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8014ea4:	490b      	ldr	r1, [pc, #44]	; (8014ed4 <LoRaMacHalt+0x68>)
 8014ea6:	480c      	ldr	r0, [pc, #48]	; (8014ed8 <LoRaMacHalt+0x6c>)
 8014ea8:	f007 f9f9 	bl	801c29e <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8014eac:	4b08      	ldr	r3, [pc, #32]	; (8014ed0 <LoRaMacHalt+0x64>)
 8014eae:	2201      	movs	r2, #1
 8014eb0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8014eb4:	2300      	movs	r3, #0
}
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	bd80      	pop	{r7, pc}
 8014eba:	bf00      	nop
 8014ebc:	2000118c 	.word	0x2000118c
 8014ec0:	200011a4 	.word	0x200011a4
 8014ec4:	200011bc 	.word	0x200011bc
 8014ec8:	2000121c 	.word	0x2000121c
 8014ecc:	08021e08 	.word	0x08021e08
 8014ed0:	20000e24 	.word	0x20000e24
 8014ed4:	20001330 	.word	0x20001330
 8014ed8:	20001a58 	.word	0x20001a58

08014edc <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b08a      	sub	sp, #40	; 0x28
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	6039      	str	r1, [r7, #0]
 8014ee6:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014ee8:	4b3e      	ldr	r3, [pc, #248]	; (8014fe4 <LoRaMacQueryTxPossible+0x108>)
 8014eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eec:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014eee:	4b3d      	ldr	r3, [pc, #244]	; (8014fe4 <LoRaMacQueryTxPossible+0x108>)
 8014ef0:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8014ef4:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8014ef6:	4b3b      	ldr	r3, [pc, #236]	; (8014fe4 <LoRaMacQueryTxPossible+0x108>)
 8014ef8:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 8014efc:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8014efe:	2300      	movs	r3, #0
 8014f00:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d101      	bne.n	8014f0c <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014f08:	2303      	movs	r3, #3
 8014f0a:	e066      	b.n	8014fda <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8014f0c:	4b35      	ldr	r3, [pc, #212]	; (8014fe4 <LoRaMacQueryTxPossible+0x108>)
 8014f0e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8014f12:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8014f14:	2300      	movs	r3, #0
 8014f16:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8014f18:	4b32      	ldr	r3, [pc, #200]	; (8014fe4 <LoRaMacQueryTxPossible+0x108>)
 8014f1a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8014f1e:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014f20:	4b30      	ldr	r3, [pc, #192]	; (8014fe4 <LoRaMacQueryTxPossible+0x108>)
 8014f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f24:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8014f26:	4b30      	ldr	r3, [pc, #192]	; (8014fe8 <LoRaMacQueryTxPossible+0x10c>)
 8014f28:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8014f2c:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8014f2e:	4b2e      	ldr	r3, [pc, #184]	; (8014fe8 <LoRaMacQueryTxPossible+0x10c>)
 8014f30:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8014f34:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8014f36:	4b2b      	ldr	r3, [pc, #172]	; (8014fe4 <LoRaMacQueryTxPossible+0x108>)
 8014f38:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014f3c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014f40:	4b28      	ldr	r3, [pc, #160]	; (8014fe4 <LoRaMacQueryTxPossible+0x108>)
 8014f42:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8014f46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014f4a:	4b26      	ldr	r3, [pc, #152]	; (8014fe4 <LoRaMacQueryTxPossible+0x108>)
 8014f4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8014f50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8014f54:	4b23      	ldr	r3, [pc, #140]	; (8014fe4 <LoRaMacQueryTxPossible+0x108>)
 8014f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8014f5e:	f107 0310 	add.w	r3, r7, #16
 8014f62:	f107 020e 	add.w	r2, r7, #14
 8014f66:	f107 010f 	add.w	r1, r7, #15
 8014f6a:	f107 0014 	add.w	r0, r7, #20
 8014f6e:	f001 f84f 	bl	8016010 <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8014f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f76:	4618      	mov	r0, r3
 8014f78:	f7fd feb8 	bl	8012cec <GetMaxAppPayloadWithoutFOptsLength>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	461a      	mov	r2, r3
 8014f80:	683b      	ldr	r3, [r7, #0]
 8014f82:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8014f84:	f107 0308 	add.w	r3, r7, #8
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f003 f8ef 	bl	801816c <LoRaMacCommandsGetSizeSerializedCmds>
 8014f8e:	4603      	mov	r3, r0
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d001      	beq.n	8014f98 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014f94:	2313      	movs	r3, #19
 8014f96:	e020      	b.n	8014fda <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8014f98:	68bb      	ldr	r3, [r7, #8]
 8014f9a:	2b0f      	cmp	r3, #15
 8014f9c:	d819      	bhi.n	8014fd2 <LoRaMacQueryTxPossible+0xf6>
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	785b      	ldrb	r3, [r3, #1]
 8014fa2:	461a      	mov	r2, r3
 8014fa4:	68bb      	ldr	r3, [r7, #8]
 8014fa6:	429a      	cmp	r2, r3
 8014fa8:	d313      	bcc.n	8014fd2 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	785a      	ldrb	r2, [r3, #1]
 8014fae:	68bb      	ldr	r3, [r7, #8]
 8014fb0:	b2db      	uxtb	r3, r3
 8014fb2:	1ad3      	subs	r3, r2, r3
 8014fb4:	b2da      	uxtb	r2, r3
 8014fb6:	683b      	ldr	r3, [r7, #0]
 8014fb8:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8014fba:	683b      	ldr	r3, [r7, #0]
 8014fbc:	785b      	ldrb	r3, [r3, #1]
 8014fbe:	4619      	mov	r1, r3
 8014fc0:	79fa      	ldrb	r2, [r7, #7]
 8014fc2:	68bb      	ldr	r3, [r7, #8]
 8014fc4:	4413      	add	r3, r2
 8014fc6:	4299      	cmp	r1, r3
 8014fc8:	d301      	bcc.n	8014fce <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8014fca:	2300      	movs	r3, #0
 8014fcc:	e005      	b.n	8014fda <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8014fce:	2308      	movs	r3, #8
 8014fd0:	e003      	b.n	8014fda <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8014fd2:	683b      	ldr	r3, [r7, #0]
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8014fd8:	2308      	movs	r3, #8
    }
}
 8014fda:	4618      	mov	r0, r3
 8014fdc:	3728      	adds	r7, #40	; 0x28
 8014fde:	46bd      	mov	sp, r7
 8014fe0:	bd80      	pop	{r7, pc}
 8014fe2:	bf00      	nop
 8014fe4:	20001330 	.word	0x20001330
 8014fe8:	20000e24 	.word	0x20000e24

08014fec <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8014fec:	b590      	push	{r4, r7, lr}
 8014fee:	b087      	sub	sp, #28
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d101      	bne.n	8015002 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014ffe:	2303      	movs	r3, #3
 8015000:	e171      	b.n	80152e6 <LoRaMacMibGetRequestConfirm+0x2fa>
    }

    switch( mibGet->Type )
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	781b      	ldrb	r3, [r3, #0]
 8015006:	2b37      	cmp	r3, #55	; 0x37
 8015008:	f200 8166 	bhi.w	80152d8 <LoRaMacMibGetRequestConfirm+0x2ec>
 801500c:	a201      	add	r2, pc, #4	; (adr r2, 8015014 <LoRaMacMibGetRequestConfirm+0x28>)
 801500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015012:	bf00      	nop
 8015014:	080150f5 	.word	0x080150f5
 8015018:	08015101 	.word	0x08015101
 801501c:	0801510d 	.word	0x0801510d
 8015020:	08015119 	.word	0x08015119
 8015024:	08015125 	.word	0x08015125
 8015028:	08015131 	.word	0x08015131
 801502c:	0801513d 	.word	0x0801513d
 8015030:	080152d9 	.word	0x080152d9
 8015034:	080152d9 	.word	0x080152d9
 8015038:	080152d9 	.word	0x080152d9
 801503c:	080152d9 	.word	0x080152d9
 8015040:	080152d9 	.word	0x080152d9
 8015044:	080152d9 	.word	0x080152d9
 8015048:	080152d9 	.word	0x080152d9
 801504c:	080152d9 	.word	0x080152d9
 8015050:	08015149 	.word	0x08015149
 8015054:	08015155 	.word	0x08015155
 8015058:	08015161 	.word	0x08015161
 801505c:	08015183 	.word	0x08015183
 8015060:	08015195 	.word	0x08015195
 8015064:	080151a7 	.word	0x080151a7
 8015068:	080151b9 	.word	0x080151b9
 801506c:	080151ed 	.word	0x080151ed
 8015070:	080151cb 	.word	0x080151cb
 8015074:	0801520f 	.word	0x0801520f
 8015078:	0801521b 	.word	0x0801521b
 801507c:	08015225 	.word	0x08015225
 8015080:	0801522f 	.word	0x0801522f
 8015084:	08015239 	.word	0x08015239
 8015088:	08015243 	.word	0x08015243
 801508c:	0801524d 	.word	0x0801524d
 8015090:	08015259 	.word	0x08015259
 8015094:	08015271 	.word	0x08015271
 8015098:	08015265 	.word	0x08015265
 801509c:	0801527d 	.word	0x0801527d
 80150a0:	08015287 	.word	0x08015287
 80150a4:	08015293 	.word	0x08015293
 80150a8:	080152ad 	.word	0x080152ad
 80150ac:	0801529d 	.word	0x0801529d
 80150b0:	080152a5 	.word	0x080152a5
 80150b4:	080152d9 	.word	0x080152d9
 80150b8:	080152b9 	.word	0x080152b9
 80150bc:	080152d9 	.word	0x080152d9
 80150c0:	080152d9 	.word	0x080152d9
 80150c4:	080152d9 	.word	0x080152d9
 80150c8:	080152d9 	.word	0x080152d9
 80150cc:	080152d9 	.word	0x080152d9
 80150d0:	080152d9 	.word	0x080152d9
 80150d4:	080152d9 	.word	0x080152d9
 80150d8:	080152d9 	.word	0x080152d9
 80150dc:	080152d9 	.word	0x080152d9
 80150e0:	080152d9 	.word	0x080152d9
 80150e4:	080152d9 	.word	0x080152d9
 80150e8:	080152d9 	.word	0x080152d9
 80150ec:	080152d9 	.word	0x080152d9
 80150f0:	080152cd 	.word	0x080152cd
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80150f4:	4b7e      	ldr	r3, [pc, #504]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 80150f6:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	711a      	strb	r2, [r3, #4]
            break;
 80150fe:	e0f1      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8015100:	4b7b      	ldr	r3, [pc, #492]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 8015102:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	711a      	strb	r2, [r3, #4]
            break;
 801510a:	e0eb      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 801510c:	f7fa fe30 	bl	800fd70 <SecureElementGetDevEui>
 8015110:	4602      	mov	r2, r0
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	605a      	str	r2, [r3, #4]
            break;
 8015116:	e0e5      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8015118:	f7fa fe4c 	bl	800fdb4 <SecureElementGetJoinEui>
 801511c:	4602      	mov	r2, r0
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	605a      	str	r2, [r3, #4]
            break;
 8015122:	e0df      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8015124:	4b72      	ldr	r3, [pc, #456]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 8015126:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	711a      	strb	r2, [r3, #4]
            break;
 801512e:	e0d9      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8015130:	4b6f      	ldr	r3, [pc, #444]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 8015132:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	605a      	str	r2, [r3, #4]
            break;
 801513a:	e0d3      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 801513c:	4b6c      	ldr	r3, [pc, #432]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 801513e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	605a      	str	r2, [r3, #4]
            break;
 8015146:	e0cd      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8015148:	4b69      	ldr	r3, [pc, #420]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 801514a:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	711a      	strb	r2, [r3, #4]
            break;
 8015152:	e0c7      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8015154:	4b66      	ldr	r3, [pc, #408]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 8015156:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	711a      	strb	r2, [r3, #4]
            break;
 801515e:	e0c1      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8015160:	231d      	movs	r3, #29
 8015162:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015164:	4b62      	ldr	r3, [pc, #392]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 8015166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801516a:	f107 0210 	add.w	r2, r7, #16
 801516e:	4611      	mov	r1, r2
 8015170:	4618      	mov	r0, r3
 8015172:	f004 fce9 	bl	8019b48 <RegionGetPhyParam>
 8015176:	4603      	mov	r3, r0
 8015178:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801517a:	68fa      	ldr	r2, [r7, #12]
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	605a      	str	r2, [r3, #4]
            break;
 8015180:	e0b0      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	4a5a      	ldr	r2, [pc, #360]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 8015186:	3304      	adds	r3, #4
 8015188:	3264      	adds	r2, #100	; 0x64
 801518a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801518e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8015192:	e0a7      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	4a56      	ldr	r2, [pc, #344]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 8015198:	3304      	adds	r3, #4
 801519a:	32a8      	adds	r2, #168	; 0xa8
 801519c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80151a0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80151a4:	e09e      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	4a51      	ldr	r2, [pc, #324]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 80151aa:	3304      	adds	r3, #4
 80151ac:	326c      	adds	r2, #108	; 0x6c
 80151ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80151b2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80151b6:	e095      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	4a4d      	ldr	r2, [pc, #308]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 80151bc:	3304      	adds	r3, #4
 80151be:	32b0      	adds	r2, #176	; 0xb0
 80151c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80151c4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80151c8:	e08c      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80151ca:	231b      	movs	r3, #27
 80151cc:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80151ce:	4b48      	ldr	r3, [pc, #288]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 80151d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80151d4:	f107 0210 	add.w	r2, r7, #16
 80151d8:	4611      	mov	r1, r2
 80151da:	4618      	mov	r0, r3
 80151dc:	f004 fcb4 	bl	8019b48 <RegionGetPhyParam>
 80151e0:	4603      	mov	r3, r0
 80151e2:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80151e4:	68fa      	ldr	r2, [r7, #12]
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	605a      	str	r2, [r3, #4]
            break;
 80151ea:	e07b      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80151ec:	231a      	movs	r3, #26
 80151ee:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80151f0:	4b3f      	ldr	r3, [pc, #252]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 80151f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80151f6:	f107 0210 	add.w	r2, r7, #16
 80151fa:	4611      	mov	r1, r2
 80151fc:	4618      	mov	r0, r3
 80151fe:	f004 fca3 	bl	8019b48 <RegionGetPhyParam>
 8015202:	4603      	mov	r3, r0
 8015204:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8015206:	68fa      	ldr	r2, [r7, #12]
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	605a      	str	r2, [r3, #4]
            break;
 801520c:	e06a      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801520e:	4b38      	ldr	r3, [pc, #224]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 8015210:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	711a      	strb	r2, [r3, #4]
            break;
 8015218:	e064      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801521a:	4b35      	ldr	r3, [pc, #212]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 801521c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	605a      	str	r2, [r3, #4]
            break;
 8015222:	e05f      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8015224:	4b32      	ldr	r3, [pc, #200]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 8015226:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	605a      	str	r2, [r3, #4]
            break;
 801522c:	e05a      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 801522e:	4b30      	ldr	r3, [pc, #192]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 8015230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	605a      	str	r2, [r3, #4]
            break;
 8015236:	e055      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8015238:	4b2d      	ldr	r3, [pc, #180]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 801523a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	605a      	str	r2, [r3, #4]
            break;
 8015240:	e050      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8015242:	4b2b      	ldr	r3, [pc, #172]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 8015244:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	605a      	str	r2, [r3, #4]
            break;
 801524a:	e04b      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801524c:	4b28      	ldr	r3, [pc, #160]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 801524e:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	711a      	strb	r2, [r3, #4]
            break;
 8015256:	e045      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8015258:	4b25      	ldr	r3, [pc, #148]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 801525a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	711a      	strb	r2, [r3, #4]
            break;
 8015262:	e03f      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8015264:	4b22      	ldr	r3, [pc, #136]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 8015266:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	711a      	strb	r2, [r3, #4]
            break;
 801526e:	e039      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8015270:	4b1f      	ldr	r3, [pc, #124]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 8015272:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	711a      	strb	r2, [r3, #4]
            break;
 801527a:	e033      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 801527c:	4b1c      	ldr	r3, [pc, #112]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 801527e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	605a      	str	r2, [r3, #4]
            break;
 8015284:	e02e      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8015286:	4b1a      	ldr	r3, [pc, #104]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 8015288:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	711a      	strb	r2, [r3, #4]
            break;
 8015290:	e028      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8015292:	4b17      	ldr	r3, [pc, #92]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 8015294:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	605a      	str	r2, [r3, #4]
            break;
 801529a:	e023      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	4a14      	ldr	r2, [pc, #80]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 80152a0:	605a      	str	r2, [r3, #4]
            break;
 80152a2:	e01f      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	4a13      	ldr	r2, [pc, #76]	; (80152f4 <LoRaMacMibGetRequestConfirm+0x308>)
 80152a8:	605a      	str	r2, [r3, #4]
            break;
 80152aa:	e01b      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80152ac:	4b10      	ldr	r3, [pc, #64]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 80152ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	605a      	str	r2, [r3, #4]
            break;
 80152b6:	e015      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	4a0d      	ldr	r2, [pc, #52]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 80152bc:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 80152c0:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80152c2:	687c      	ldr	r4, [r7, #4]
 80152c4:	f004 fddc 	bl	8019e80 <RegionGetVersion>
 80152c8:	60a0      	str	r0, [r4, #8]
            break;
 80152ca:	e00b      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80152cc:	4b08      	ldr	r3, [pc, #32]	; (80152f0 <LoRaMacMibGetRequestConfirm+0x304>)
 80152ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	605a      	str	r2, [r3, #4]
            break;
 80152d6:	e005      	b.n	80152e4 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80152d8:	6878      	ldr	r0, [r7, #4]
 80152da:	f002 fae3 	bl	80178a4 <LoRaMacClassBMibGetRequestConfirm>
 80152de:	4603      	mov	r3, r0
 80152e0:	75fb      	strb	r3, [r7, #23]
            break;
 80152e2:	bf00      	nop
        }
    }
    return status;
 80152e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80152e6:	4618      	mov	r0, r3
 80152e8:	371c      	adds	r7, #28
 80152ea:	46bd      	mov	sp, r7
 80152ec:	bd90      	pop	{r4, r7, pc}
 80152ee:	bf00      	nop
 80152f0:	20001330 	.word	0x20001330
 80152f4:	20001a58 	.word	0x20001a58

080152f8 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b086      	sub	sp, #24
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8015300:	2300      	movs	r3, #0
 8015302:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d101      	bne.n	801530e <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801530a:	2303      	movs	r3, #3
 801530c:	e348      	b.n	80159a0 <LoRaMacMibSetRequestConfirm+0x6a8>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801530e:	4bb7      	ldr	r3, [pc, #732]	; (80155ec <LoRaMacMibSetRequestConfirm+0x2f4>)
 8015310:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8015314:	f003 0302 	and.w	r3, r3, #2
 8015318:	2b00      	cmp	r3, #0
 801531a:	d001      	beq.n	8015320 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 801531c:	2301      	movs	r3, #1
 801531e:	e33f      	b.n	80159a0 <LoRaMacMibSetRequestConfirm+0x6a8>
    }

    switch( mibSet->Type )
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	781b      	ldrb	r3, [r3, #0]
 8015324:	2b37      	cmp	r3, #55	; 0x37
 8015326:	f200 8319 	bhi.w	801595c <LoRaMacMibSetRequestConfirm+0x664>
 801532a:	a201      	add	r2, pc, #4	; (adr r2, 8015330 <LoRaMacMibSetRequestConfirm+0x38>)
 801532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015330:	08015411 	.word	0x08015411
 8015334:	08015421 	.word	0x08015421
 8015338:	0801543b 	.word	0x0801543b
 801533c:	08015453 	.word	0x08015453
 8015340:	0801546b 	.word	0x0801546b
 8015344:	08015477 	.word	0x08015477
 8015348:	08015483 	.word	0x08015483
 801534c:	0801548f 	.word	0x0801548f
 8015350:	080154b5 	.word	0x080154b5
 8015354:	080154db 	.word	0x080154db
 8015358:	08015501 	.word	0x08015501
 801535c:	08015527 	.word	0x08015527
 8015360:	0801554d 	.word	0x0801554d
 8015364:	08015573 	.word	0x08015573
 8015368:	08015599 	.word	0x08015599
 801536c:	080155bf 	.word	0x080155bf
 8015370:	080155df 	.word	0x080155df
 8015374:	0801595d 	.word	0x0801595d
 8015378:	080155f9 	.word	0x080155f9
 801537c:	08015669 	.word	0x08015669
 8015380:	080156a9 	.word	0x080156a9
 8015384:	0801570b 	.word	0x0801570b
 8015388:	0801577b 	.word	0x0801577b
 801538c:	0801574b 	.word	0x0801574b
 8015390:	080157ab 	.word	0x080157ab
 8015394:	080157cd 	.word	0x080157cd
 8015398:	080157d7 	.word	0x080157d7
 801539c:	080157e1 	.word	0x080157e1
 80153a0:	080157eb 	.word	0x080157eb
 80153a4:	080157f5 	.word	0x080157f5
 80153a8:	080157ff 	.word	0x080157ff
 80153ac:	08015831 	.word	0x08015831
 80153b0:	0801589d 	.word	0x0801589d
 80153b4:	0801586b 	.word	0x0801586b
 80153b8:	080158d9 	.word	0x080158d9
 80153bc:	080158ef 	.word	0x080158ef
 80153c0:	08015907 	.word	0x08015907
 80153c4:	08015911 	.word	0x08015911
 80153c8:	0801591d 	.word	0x0801591d
 80153cc:	0801595d 	.word	0x0801595d
 80153d0:	08015927 	.word	0x08015927
 80153d4:	0801595d 	.word	0x0801595d
 80153d8:	0801595d 	.word	0x0801595d
 80153dc:	0801595d 	.word	0x0801595d
 80153e0:	0801595d 	.word	0x0801595d
 80153e4:	0801595d 	.word	0x0801595d
 80153e8:	0801595d 	.word	0x0801595d
 80153ec:	0801595d 	.word	0x0801595d
 80153f0:	0801595d 	.word	0x0801595d
 80153f4:	0801595d 	.word	0x0801595d
 80153f8:	0801595d 	.word	0x0801595d
 80153fc:	0801595d 	.word	0x0801595d
 8015400:	0801595d 	.word	0x0801595d
 8015404:	0801595d 	.word	0x0801595d
 8015408:	0801595d 	.word	0x0801595d
 801540c:	08015951 	.word	0x08015951
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	791b      	ldrb	r3, [r3, #4]
 8015414:	4618      	mov	r0, r3
 8015416:	f7fd fb99 	bl	8012b4c <SwitchClass>
 801541a:	4603      	mov	r3, r0
 801541c:	75fb      	strb	r3, [r7, #23]
            break;
 801541e:	e2be      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	791b      	ldrb	r3, [r3, #4]
 8015424:	2b02      	cmp	r3, #2
 8015426:	d005      	beq.n	8015434 <LoRaMacMibSetRequestConfirm+0x13c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	791a      	ldrb	r2, [r3, #4]
 801542c:	4b70      	ldr	r3, [pc, #448]	; (80155f0 <LoRaMacMibSetRequestConfirm+0x2f8>)
 801542e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015432:	e2b4      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015434:	2303      	movs	r3, #3
 8015436:	75fb      	strb	r3, [r7, #23]
            break;
 8015438:	e2b1      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	685b      	ldr	r3, [r3, #4]
 801543e:	4618      	mov	r0, r3
 8015440:	f7fa fc7e 	bl	800fd40 <SecureElementSetDevEui>
 8015444:	4603      	mov	r3, r0
 8015446:	2b00      	cmp	r3, #0
 8015448:	f000 828e 	beq.w	8015968 <LoRaMacMibSetRequestConfirm+0x670>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801544c:	2303      	movs	r3, #3
 801544e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015450:	e28a      	b.n	8015968 <LoRaMacMibSetRequestConfirm+0x670>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	685b      	ldr	r3, [r3, #4]
 8015456:	4618      	mov	r0, r3
 8015458:	f7fa fc94 	bl	800fd84 <SecureElementSetJoinEui>
 801545c:	4603      	mov	r3, r0
 801545e:	2b00      	cmp	r3, #0
 8015460:	f000 8284 	beq.w	801596c <LoRaMacMibSetRequestConfirm+0x674>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015464:	2303      	movs	r3, #3
 8015466:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015468:	e280      	b.n	801596c <LoRaMacMibSetRequestConfirm+0x674>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	791a      	ldrb	r2, [r3, #4]
 801546e:	4b60      	ldr	r3, [pc, #384]	; (80155f0 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8015470:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 8015474:	e293      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	685b      	ldr	r3, [r3, #4]
 801547a:	4a5d      	ldr	r2, [pc, #372]	; (80155f0 <LoRaMacMibSetRequestConfirm+0x2f8>)
 801547c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 8015480:	e28d      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	685b      	ldr	r3, [r3, #4]
 8015486:	4a5a      	ldr	r2, [pc, #360]	; (80155f0 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8015488:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 801548c:	e287      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	685b      	ldr	r3, [r3, #4]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d00b      	beq.n	80154ae <LoRaMacMibSetRequestConfirm+0x1b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	685b      	ldr	r3, [r3, #4]
 801549a:	4619      	mov	r1, r3
 801549c:	2000      	movs	r0, #0
 801549e:	f003 fd63 	bl	8018f68 <LoRaMacCryptoSetKey>
 80154a2:	4603      	mov	r3, r0
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	f000 8263 	beq.w	8015970 <LoRaMacMibSetRequestConfirm+0x678>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80154aa:	2311      	movs	r3, #17
 80154ac:	e278      	b.n	80159a0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80154ae:	2303      	movs	r3, #3
 80154b0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80154b2:	e25d      	b.n	8015970 <LoRaMacMibSetRequestConfirm+0x678>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	685b      	ldr	r3, [r3, #4]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d00b      	beq.n	80154d4 <LoRaMacMibSetRequestConfirm+0x1dc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	685b      	ldr	r3, [r3, #4]
 80154c0:	4619      	mov	r1, r3
 80154c2:	2001      	movs	r0, #1
 80154c4:	f003 fd50 	bl	8018f68 <LoRaMacCryptoSetKey>
 80154c8:	4603      	mov	r3, r0
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	f000 8252 	beq.w	8015974 <LoRaMacMibSetRequestConfirm+0x67c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80154d0:	2311      	movs	r3, #17
 80154d2:	e265      	b.n	80159a0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80154d4:	2303      	movs	r3, #3
 80154d6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80154d8:	e24c      	b.n	8015974 <LoRaMacMibSetRequestConfirm+0x67c>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d00b      	beq.n	80154fa <LoRaMacMibSetRequestConfirm+0x202>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	685b      	ldr	r3, [r3, #4]
 80154e6:	4619      	mov	r1, r3
 80154e8:	2002      	movs	r0, #2
 80154ea:	f003 fd3d 	bl	8018f68 <LoRaMacCryptoSetKey>
 80154ee:	4603      	mov	r3, r0
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	f000 8241 	beq.w	8015978 <LoRaMacMibSetRequestConfirm+0x680>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80154f6:	2311      	movs	r3, #17
 80154f8:	e252      	b.n	80159a0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80154fa:	2303      	movs	r3, #3
 80154fc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80154fe:	e23b      	b.n	8015978 <LoRaMacMibSetRequestConfirm+0x680>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	685b      	ldr	r3, [r3, #4]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d00b      	beq.n	8015520 <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	685b      	ldr	r3, [r3, #4]
 801550c:	4619      	mov	r1, r3
 801550e:	2003      	movs	r0, #3
 8015510:	f003 fd2a 	bl	8018f68 <LoRaMacCryptoSetKey>
 8015514:	4603      	mov	r3, r0
 8015516:	2b00      	cmp	r3, #0
 8015518:	f000 8230 	beq.w	801597c <LoRaMacMibSetRequestConfirm+0x684>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801551c:	2311      	movs	r3, #17
 801551e:	e23f      	b.n	80159a0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015520:	2303      	movs	r3, #3
 8015522:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015524:	e22a      	b.n	801597c <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	685b      	ldr	r3, [r3, #4]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d00b      	beq.n	8015546 <LoRaMacMibSetRequestConfirm+0x24e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	685b      	ldr	r3, [r3, #4]
 8015532:	4619      	mov	r1, r3
 8015534:	207f      	movs	r0, #127	; 0x7f
 8015536:	f003 fd17 	bl	8018f68 <LoRaMacCryptoSetKey>
 801553a:	4603      	mov	r3, r0
 801553c:	2b00      	cmp	r3, #0
 801553e:	f000 821f 	beq.w	8015980 <LoRaMacMibSetRequestConfirm+0x688>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8015542:	2311      	movs	r3, #17
 8015544:	e22c      	b.n	80159a0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015546:	2303      	movs	r3, #3
 8015548:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801554a:	e219      	b.n	8015980 <LoRaMacMibSetRequestConfirm+0x688>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	685b      	ldr	r3, [r3, #4]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d00b      	beq.n	801556c <LoRaMacMibSetRequestConfirm+0x274>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	685b      	ldr	r3, [r3, #4]
 8015558:	4619      	mov	r1, r3
 801555a:	2080      	movs	r0, #128	; 0x80
 801555c:	f003 fd04 	bl	8018f68 <LoRaMacCryptoSetKey>
 8015560:	4603      	mov	r3, r0
 8015562:	2b00      	cmp	r3, #0
 8015564:	f000 820e 	beq.w	8015984 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8015568:	2311      	movs	r3, #17
 801556a:	e219      	b.n	80159a0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801556c:	2303      	movs	r3, #3
 801556e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015570:	e208      	b.n	8015984 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	685b      	ldr	r3, [r3, #4]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d00b      	beq.n	8015592 <LoRaMacMibSetRequestConfirm+0x29a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	685b      	ldr	r3, [r3, #4]
 801557e:	4619      	mov	r1, r3
 8015580:	2081      	movs	r0, #129	; 0x81
 8015582:	f003 fcf1 	bl	8018f68 <LoRaMacCryptoSetKey>
 8015586:	4603      	mov	r3, r0
 8015588:	2b00      	cmp	r3, #0
 801558a:	f000 81fd 	beq.w	8015988 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801558e:	2311      	movs	r3, #17
 8015590:	e206      	b.n	80159a0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015592:	2303      	movs	r3, #3
 8015594:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015596:	e1f7      	b.n	8015988 <LoRaMacMibSetRequestConfirm+0x690>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	685b      	ldr	r3, [r3, #4]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d00b      	beq.n	80155b8 <LoRaMacMibSetRequestConfirm+0x2c0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	685b      	ldr	r3, [r3, #4]
 80155a4:	4619      	mov	r1, r3
 80155a6:	2082      	movs	r0, #130	; 0x82
 80155a8:	f003 fcde 	bl	8018f68 <LoRaMacCryptoSetKey>
 80155ac:	4603      	mov	r3, r0
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	f000 81ec 	beq.w	801598c <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80155b4:	2311      	movs	r3, #17
 80155b6:	e1f3      	b.n	80159a0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80155b8:	2303      	movs	r3, #3
 80155ba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80155bc:	e1e6      	b.n	801598c <LoRaMacMibSetRequestConfirm+0x694>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	791a      	ldrb	r2, [r3, #4]
 80155c2:	4b0b      	ldr	r3, [pc, #44]	; (80155f0 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80155c4:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80155c8:	4b0a      	ldr	r3, [pc, #40]	; (80155f4 <LoRaMacMibSetRequestConfirm+0x2fc>)
 80155ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80155cc:	4a08      	ldr	r2, [pc, #32]	; (80155f0 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80155ce:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 80155d2:	4610      	mov	r0, r2
 80155d4:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80155d6:	4b07      	ldr	r3, [pc, #28]	; (80155f4 <LoRaMacMibSetRequestConfirm+0x2fc>)
 80155d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155da:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80155dc:	e1df      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	791a      	ldrb	r2, [r3, #4]
 80155e2:	4b03      	ldr	r3, [pc, #12]	; (80155f0 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80155e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 80155e8:	e1d9      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
 80155ea:	bf00      	nop
 80155ec:	20000e24 	.word	0x20000e24
 80155f0:	20001330 	.word	0x20001330
 80155f4:	08021e08 	.word	0x08021e08
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	7a1b      	ldrb	r3, [r3, #8]
 80155fc:	b25b      	sxtb	r3, r3
 80155fe:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8015600:	4bb3      	ldr	r3, [pc, #716]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015602:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8015606:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8015608:	4bb1      	ldr	r3, [pc, #708]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801560a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801560e:	f107 0108 	add.w	r1, r7, #8
 8015612:	2207      	movs	r2, #7
 8015614:	4618      	mov	r0, r3
 8015616:	f004 fad2 	bl	8019bbe <RegionVerify>
 801561a:	4603      	mov	r3, r0
 801561c:	f083 0301 	eor.w	r3, r3, #1
 8015620:	b2db      	uxtb	r3, r3
 8015622:	2b00      	cmp	r3, #0
 8015624:	d002      	beq.n	801562c <LoRaMacMibSetRequestConfirm+0x334>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015626:	2303      	movs	r3, #3
 8015628:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 801562a:	e1b8      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	685b      	ldr	r3, [r3, #4]
 8015630:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8015632:	4ba7      	ldr	r3, [pc, #668]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015638:	f107 0108 	add.w	r1, r7, #8
 801563c:	2200      	movs	r2, #0
 801563e:	4618      	mov	r0, r3
 8015640:	f004 fabd 	bl	8019bbe <RegionVerify>
 8015644:	4603      	mov	r3, r0
 8015646:	f083 0301 	eor.w	r3, r3, #1
 801564a:	b2db      	uxtb	r3, r3
 801564c:	2b00      	cmp	r3, #0
 801564e:	d002      	beq.n	8015656 <LoRaMacMibSetRequestConfirm+0x35e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015650:	2303      	movs	r3, #3
 8015652:	75fb      	strb	r3, [r7, #23]
            break;
 8015654:	e1a3      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8015656:	4b9e      	ldr	r3, [pc, #632]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015658:	687a      	ldr	r2, [r7, #4]
 801565a:	3364      	adds	r3, #100	; 0x64
 801565c:	3204      	adds	r2, #4
 801565e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015662:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8015666:	e19a      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	7a1b      	ldrb	r3, [r3, #8]
 801566c:	b25b      	sxtb	r3, r3
 801566e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8015670:	4b97      	ldr	r3, [pc, #604]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015672:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8015676:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8015678:	4b95      	ldr	r3, [pc, #596]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801567a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801567e:	f107 0108 	add.w	r1, r7, #8
 8015682:	2207      	movs	r2, #7
 8015684:	4618      	mov	r0, r3
 8015686:	f004 fa9a 	bl	8019bbe <RegionVerify>
 801568a:	4603      	mov	r3, r0
 801568c:	2b00      	cmp	r3, #0
 801568e:	d008      	beq.n	80156a2 <LoRaMacMibSetRequestConfirm+0x3aa>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8015690:	4b8f      	ldr	r3, [pc, #572]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015692:	687a      	ldr	r2, [r7, #4]
 8015694:	33a8      	adds	r3, #168	; 0xa8
 8015696:	3204      	adds	r2, #4
 8015698:	e892 0003 	ldmia.w	r2, {r0, r1}
 801569c:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80156a0:	e17d      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80156a2:	2303      	movs	r3, #3
 80156a4:	75fb      	strb	r3, [r7, #23]
            break;
 80156a6:	e17a      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	7a1b      	ldrb	r3, [r3, #8]
 80156ac:	b25b      	sxtb	r3, r3
 80156ae:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80156b0:	4b87      	ldr	r3, [pc, #540]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80156b2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80156b6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80156b8:	4b85      	ldr	r3, [pc, #532]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80156ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80156be:	f107 0108 	add.w	r1, r7, #8
 80156c2:	2207      	movs	r2, #7
 80156c4:	4618      	mov	r0, r3
 80156c6:	f004 fa7a 	bl	8019bbe <RegionVerify>
 80156ca:	4603      	mov	r3, r0
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d019      	beq.n	8015704 <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80156d0:	4b7f      	ldr	r3, [pc, #508]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80156d2:	687a      	ldr	r2, [r7, #4]
 80156d4:	336c      	adds	r3, #108	; 0x6c
 80156d6:	3204      	adds	r2, #4
 80156d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80156dc:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80156e0:	4b7b      	ldr	r3, [pc, #492]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80156e2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80156e6:	2b02      	cmp	r3, #2
 80156e8:	f040 8152 	bne.w	8015990 <LoRaMacMibSetRequestConfirm+0x698>
 80156ec:	4b78      	ldr	r3, [pc, #480]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80156ee:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	f000 814c 	beq.w	8015990 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80156f8:	4b76      	ldr	r3, [pc, #472]	; (80158d4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80156fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156fc:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80156fe:	f7fe fc67 	bl	8013fd0 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015702:	e145      	b.n	8015990 <LoRaMacMibSetRequestConfirm+0x698>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015704:	2303      	movs	r3, #3
 8015706:	75fb      	strb	r3, [r7, #23]
            break;
 8015708:	e142      	b.n	8015990 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	7a1b      	ldrb	r3, [r3, #8]
 801570e:	b25b      	sxtb	r3, r3
 8015710:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8015712:	4b6f      	ldr	r3, [pc, #444]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015714:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8015718:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801571a:	4b6d      	ldr	r3, [pc, #436]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801571c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015720:	f107 0108 	add.w	r1, r7, #8
 8015724:	2207      	movs	r2, #7
 8015726:	4618      	mov	r0, r3
 8015728:	f004 fa49 	bl	8019bbe <RegionVerify>
 801572c:	4603      	mov	r3, r0
 801572e:	2b00      	cmp	r3, #0
 8015730:	d008      	beq.n	8015744 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8015732:	4b67      	ldr	r3, [pc, #412]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015734:	687a      	ldr	r2, [r7, #4]
 8015736:	33b0      	adds	r3, #176	; 0xb0
 8015738:	3204      	adds	r2, #4
 801573a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801573e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015742:	e12c      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015744:	2303      	movs	r3, #3
 8015746:	75fb      	strb	r3, [r7, #23]
            break;
 8015748:	e129      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	685b      	ldr	r3, [r3, #4]
 801574e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8015750:	2301      	movs	r3, #1
 8015752:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8015754:	4b5e      	ldr	r3, [pc, #376]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801575a:	f107 020c 	add.w	r2, r7, #12
 801575e:	4611      	mov	r1, r2
 8015760:	4618      	mov	r0, r3
 8015762:	f004 fa55 	bl	8019c10 <RegionChanMaskSet>
 8015766:	4603      	mov	r3, r0
 8015768:	f083 0301 	eor.w	r3, r3, #1
 801576c:	b2db      	uxtb	r3, r3
 801576e:	2b00      	cmp	r3, #0
 8015770:	f000 8110 	beq.w	8015994 <LoRaMacMibSetRequestConfirm+0x69c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015774:	2303      	movs	r3, #3
 8015776:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015778:	e10c      	b.n	8015994 <LoRaMacMibSetRequestConfirm+0x69c>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	685b      	ldr	r3, [r3, #4]
 801577e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8015780:	2300      	movs	r3, #0
 8015782:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8015784:	4b52      	ldr	r3, [pc, #328]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801578a:	f107 020c 	add.w	r2, r7, #12
 801578e:	4611      	mov	r1, r2
 8015790:	4618      	mov	r0, r3
 8015792:	f004 fa3d 	bl	8019c10 <RegionChanMaskSet>
 8015796:	4603      	mov	r3, r0
 8015798:	f083 0301 	eor.w	r3, r3, #1
 801579c:	b2db      	uxtb	r3, r3
 801579e:	2b00      	cmp	r3, #0
 80157a0:	f000 80fa 	beq.w	8015998 <LoRaMacMibSetRequestConfirm+0x6a0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80157a4:	2303      	movs	r3, #3
 80157a6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80157a8:	e0f6      	b.n	8015998 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	791b      	ldrb	r3, [r3, #4]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d009      	beq.n	80157c6 <LoRaMacMibSetRequestConfirm+0x4ce>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80157b6:	2b0f      	cmp	r3, #15
 80157b8:	d805      	bhi.n	80157c6 <LoRaMacMibSetRequestConfirm+0x4ce>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	791a      	ldrb	r2, [r3, #4]
 80157be:	4b44      	ldr	r3, [pc, #272]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80157c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80157c4:	e0eb      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80157c6:	2303      	movs	r3, #3
 80157c8:	75fb      	strb	r3, [r7, #23]
            break;
 80157ca:	e0e8      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	685b      	ldr	r3, [r3, #4]
 80157d0:	4a3f      	ldr	r2, [pc, #252]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80157d2:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80157d4:	e0e3      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	685b      	ldr	r3, [r3, #4]
 80157da:	4a3d      	ldr	r2, [pc, #244]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80157dc:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 80157de:	e0de      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	685b      	ldr	r3, [r3, #4]
 80157e4:	4a3a      	ldr	r2, [pc, #232]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80157e6:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80157e8:	e0d9      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	685b      	ldr	r3, [r3, #4]
 80157ee:	4a38      	ldr	r2, [pc, #224]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80157f0:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80157f2:	e0d4      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	685b      	ldr	r3, [r3, #4]
 80157f8:	4a35      	ldr	r2, [pc, #212]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80157fa:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80157fc:	e0cf      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015804:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8015806:	4b32      	ldr	r3, [pc, #200]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015808:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801580c:	f107 0108 	add.w	r1, r7, #8
 8015810:	2206      	movs	r2, #6
 8015812:	4618      	mov	r0, r3
 8015814:	f004 f9d3 	bl	8019bbe <RegionVerify>
 8015818:	4603      	mov	r3, r0
 801581a:	2b00      	cmp	r3, #0
 801581c:	d005      	beq.n	801582a <LoRaMacMibSetRequestConfirm+0x532>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 801581e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015822:	4b2b      	ldr	r3, [pc, #172]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015824:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015828:	e0b9      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801582a:	2303      	movs	r3, #3
 801582c:	75fb      	strb	r3, [r7, #23]
            break;
 801582e:	e0b6      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015836:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015838:	4b25      	ldr	r3, [pc, #148]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801583a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801583e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8015840:	4b23      	ldr	r3, [pc, #140]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015846:	f107 0108 	add.w	r1, r7, #8
 801584a:	2205      	movs	r2, #5
 801584c:	4618      	mov	r0, r3
 801584e:	f004 f9b6 	bl	8019bbe <RegionVerify>
 8015852:	4603      	mov	r3, r0
 8015854:	2b00      	cmp	r3, #0
 8015856:	d005      	beq.n	8015864 <LoRaMacMibSetRequestConfirm+0x56c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8015858:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801585c:	4b1c      	ldr	r3, [pc, #112]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801585e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015862:	e09c      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015864:	2303      	movs	r3, #3
 8015866:	75fb      	strb	r3, [r7, #23]
            break;
 8015868:	e099      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015870:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8015872:	4b17      	ldr	r3, [pc, #92]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015874:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015878:	f107 0108 	add.w	r1, r7, #8
 801587c:	220a      	movs	r2, #10
 801587e:	4618      	mov	r0, r3
 8015880:	f004 f99d 	bl	8019bbe <RegionVerify>
 8015884:	4603      	mov	r3, r0
 8015886:	2b00      	cmp	r3, #0
 8015888:	d005      	beq.n	8015896 <LoRaMacMibSetRequestConfirm+0x59e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 801588a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801588e:	4b10      	ldr	r3, [pc, #64]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015890:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015894:	e083      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015896:	2303      	movs	r3, #3
 8015898:	75fb      	strb	r3, [r7, #23]
            break;
 801589a:	e080      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80158a2:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80158a4:	4b0a      	ldr	r3, [pc, #40]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80158a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80158aa:	f107 0108 	add.w	r1, r7, #8
 80158ae:	2209      	movs	r2, #9
 80158b0:	4618      	mov	r0, r3
 80158b2:	f004 f984 	bl	8019bbe <RegionVerify>
 80158b6:	4603      	mov	r3, r0
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d005      	beq.n	80158c8 <LoRaMacMibSetRequestConfirm+0x5d0>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80158bc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80158c0:	4b03      	ldr	r3, [pc, #12]	; (80158d0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80158c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80158c6:	e06a      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80158c8:	2303      	movs	r3, #3
 80158ca:	75fb      	strb	r3, [r7, #23]
            break;
 80158cc:	e067      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
 80158ce:	bf00      	nop
 80158d0:	20001330 	.word	0x20001330
 80158d4:	08021e08 	.word	0x08021e08
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	685b      	ldr	r3, [r3, #4]
 80158dc:	4a32      	ldr	r2, [pc, #200]	; (80159a8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 80158de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80158e2:	4b31      	ldr	r3, [pc, #196]	; (80159a8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 80158e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80158e8:	4a2f      	ldr	r2, [pc, #188]	; (80159a8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 80158ea:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 80158ec:	e057      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	791a      	ldrb	r2, [r3, #4]
 80158f2:	4b2d      	ldr	r3, [pc, #180]	; (80159a8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 80158f4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80158f8:	4b2b      	ldr	r3, [pc, #172]	; (80159a8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 80158fa:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80158fe:	4b2a      	ldr	r3, [pc, #168]	; (80159a8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8015900:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8015904:	e04b      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	685b      	ldr	r3, [r3, #4]
 801590a:	4a27      	ldr	r2, [pc, #156]	; (80159a8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 801590c:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 801590e:	e046      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	685b      	ldr	r3, [r3, #4]
 8015914:	4a24      	ldr	r2, [pc, #144]	; (80159a8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8015916:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 801591a:	e040      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 801591c:	f7fe fdb2 	bl	8014484 <RestoreNvmData>
 8015920:	4603      	mov	r3, r0
 8015922:	75fb      	strb	r3, [r7, #23]
            break;
 8015924:	e03b      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	799b      	ldrb	r3, [r3, #6]
 801592a:	2b01      	cmp	r3, #1
 801592c:	d80d      	bhi.n	801594a <LoRaMacMibSetRequestConfirm+0x652>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 801592e:	4a1e      	ldr	r2, [pc, #120]	; (80159a8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	685b      	ldr	r3, [r3, #4]
 8015934:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	6858      	ldr	r0, [r3, #4]
 801593c:	f003 fa4e 	bl	8018ddc <LoRaMacCryptoSetLrWanVersion>
 8015940:	4603      	mov	r3, r0
 8015942:	2b00      	cmp	r3, #0
 8015944:	d02a      	beq.n	801599c <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8015946:	2311      	movs	r3, #17
 8015948:	e02a      	b.n	80159a0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801594a:	2303      	movs	r3, #3
 801594c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801594e:	e025      	b.n	801599c <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	685b      	ldr	r3, [r3, #4]
 8015954:	4a14      	ldr	r2, [pc, #80]	; (80159a8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8015956:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 801595a:	e020      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 801595c:	6878      	ldr	r0, [r7, #4]
 801595e:	f001 ffc9 	bl	80178f4 <LoRaMacMibClassBSetRequestConfirm>
 8015962:	4603      	mov	r3, r0
 8015964:	75fb      	strb	r3, [r7, #23]
            break;
 8015966:	e01a      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015968:	bf00      	nop
 801596a:	e018      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 801596c:	bf00      	nop
 801596e:	e016      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015970:	bf00      	nop
 8015972:	e014      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015974:	bf00      	nop
 8015976:	e012      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015978:	bf00      	nop
 801597a:	e010      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 801597c:	bf00      	nop
 801597e:	e00e      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015980:	bf00      	nop
 8015982:	e00c      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015984:	bf00      	nop
 8015986:	e00a      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015988:	bf00      	nop
 801598a:	e008      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 801598c:	bf00      	nop
 801598e:	e006      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015990:	bf00      	nop
 8015992:	e004      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015994:	bf00      	nop
 8015996:	e002      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015998:	bf00      	nop
 801599a:	e000      	b.n	801599e <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 801599c:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 801599e:	7dfb      	ldrb	r3, [r7, #23]
}
 80159a0:	4618      	mov	r0, r3
 80159a2:	3718      	adds	r7, #24
 80159a4:	46bd      	mov	sp, r7
 80159a6:	bd80      	pop	{r7, pc}
 80159a8:	20001330 	.word	0x20001330

080159ac <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b086      	sub	sp, #24
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80159b4:	2302      	movs	r3, #2
 80159b6:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80159b8:	2300      	movs	r3, #0
 80159ba:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d101      	bne.n	80159c6 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80159c2:	2303      	movs	r3, #3
 80159c4:	e127      	b.n	8015c16 <LoRaMacMlmeRequest+0x26a>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80159c6:	f7fc fcd3 	bl	8012370 <LoRaMacIsBusy>
 80159ca:	4603      	mov	r3, r0
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d001      	beq.n	80159d4 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80159d0:	2301      	movs	r3, #1
 80159d2:	e120      	b.n	8015c16 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80159d4:	f002 fea6 	bl	8018724 <LoRaMacConfirmQueueIsFull>
 80159d8:	4603      	mov	r3, r0
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d001      	beq.n	80159e2 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 80159de:	2301      	movs	r3, #1
 80159e0:	e119      	b.n	8015c16 <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80159e2:	f002 fe93 	bl	801870c <LoRaMacConfirmQueueGetCnt>
 80159e6:	4603      	mov	r3, r0
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d104      	bne.n	80159f6 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80159ec:	2214      	movs	r2, #20
 80159ee:	2100      	movs	r1, #0
 80159f0:	488b      	ldr	r0, [pc, #556]	; (8015c20 <LoRaMacMlmeRequest+0x274>)
 80159f2:	f006 fc8f 	bl	801c314 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80159f6:	4b8b      	ldr	r3, [pc, #556]	; (8015c24 <LoRaMacMlmeRequest+0x278>)
 80159f8:	2201      	movs	r2, #1
 80159fa:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80159fe:	4a89      	ldr	r2, [pc, #548]	; (8015c24 <LoRaMacMlmeRequest+0x278>)
 8015a00:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8015a04:	f043 0304 	orr.w	r3, r3, #4
 8015a08:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	781b      	ldrb	r3, [r3, #0]
 8015a10:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015a12:	2301      	movs	r3, #1
 8015a14:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8015a16:	2300      	movs	r3, #0
 8015a18:	74fb      	strb	r3, [r7, #19]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	781b      	ldrb	r3, [r3, #0]
 8015a1e:	3b01      	subs	r3, #1
 8015a20:	2b0d      	cmp	r3, #13
 8015a22:	f200 80ce 	bhi.w	8015bc2 <LoRaMacMlmeRequest+0x216>
 8015a26:	a201      	add	r2, pc, #4	; (adr r2, 8015a2c <LoRaMacMlmeRequest+0x80>)
 8015a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a2c:	08015a65 	.word	0x08015a65
 8015a30:	08015bc3 	.word	0x08015bc3
 8015a34:	08015bc3 	.word	0x08015bc3
 8015a38:	08015acf 	.word	0x08015acf
 8015a3c:	08015aed 	.word	0x08015aed
 8015a40:	08015afd 	.word	0x08015afd
 8015a44:	08015bc3 	.word	0x08015bc3
 8015a48:	08015bc3 	.word	0x08015bc3
 8015a4c:	08015bc3 	.word	0x08015bc3
 8015a50:	08015b19 	.word	0x08015b19
 8015a54:	08015bc3 	.word	0x08015bc3
 8015a58:	08015b97 	.word	0x08015b97
 8015a5c:	08015b37 	.word	0x08015b37
 8015a60:	08015b79 	.word	0x08015b79
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8015a64:	4b6f      	ldr	r3, [pc, #444]	; (8015c24 <LoRaMacMlmeRequest+0x278>)
 8015a66:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8015a6a:	f003 0320 	and.w	r3, r3, #32
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d001      	beq.n	8015a76 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8015a72:	2301      	movs	r3, #1
 8015a74:	e0cf      	b.n	8015c16 <LoRaMacMlmeRequest+0x26a>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( );
 8015a76:	f7fe f989 	bl	8013d8c <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8015a7a:	4b6b      	ldr	r3, [pc, #428]	; (8015c28 <LoRaMacMlmeRequest+0x27c>)
 8015a7c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	795b      	ldrb	r3, [r3, #5]
 8015a84:	b25b      	sxtb	r3, r3
 8015a86:	2200      	movs	r2, #0
 8015a88:	4619      	mov	r1, r3
 8015a8a:	f004 f980 	bl	8019d8e <RegionAlternateDr>
 8015a8e:	4603      	mov	r3, r0
 8015a90:	461a      	mov	r2, r3
 8015a92:	4b65      	ldr	r3, [pc, #404]	; (8015c28 <LoRaMacMlmeRequest+0x27c>)
 8015a94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8015a98:	2307      	movs	r3, #7
 8015a9a:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8015a9c:	20ff      	movs	r0, #255	; 0xff
 8015a9e:	f7fd feed 	bl	801387c <SendReJoinReq>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8015aa6:	7dfb      	ldrb	r3, [r7, #23]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	f000 808c 	beq.w	8015bc6 <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8015aae:	4b5e      	ldr	r3, [pc, #376]	; (8015c28 <LoRaMacMlmeRequest+0x27c>)
 8015ab0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	795b      	ldrb	r3, [r3, #5]
 8015ab8:	b25b      	sxtb	r3, r3
 8015aba:	2201      	movs	r2, #1
 8015abc:	4619      	mov	r1, r3
 8015abe:	f004 f966 	bl	8019d8e <RegionAlternateDr>
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	461a      	mov	r2, r3
 8015ac6:	4b58      	ldr	r3, [pc, #352]	; (8015c28 <LoRaMacMlmeRequest+0x27c>)
 8015ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8015acc:	e07b      	b.n	8015bc6 <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015ace:	2300      	movs	r3, #0
 8015ad0:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015ad2:	f107 030c 	add.w	r3, r7, #12
 8015ad6:	2200      	movs	r2, #0
 8015ad8:	4619      	mov	r1, r3
 8015ada:	2002      	movs	r0, #2
 8015adc:	f002 fa88 	bl	8017ff0 <LoRaMacCommandsAddCmd>
 8015ae0:	4603      	mov	r3, r0
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d071      	beq.n	8015bca <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015ae6:	2313      	movs	r3, #19
 8015ae8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015aea:	e06e      	b.n	8015bca <LoRaMacMlmeRequest+0x21e>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	889b      	ldrh	r3, [r3, #4]
 8015af0:	4618      	mov	r0, r3
 8015af2:	f7fe fc73 	bl	80143dc <SetTxContinuousWave>
 8015af6:	4603      	mov	r3, r0
 8015af8:	75fb      	strb	r3, [r7, #23]
            break;
 8015afa:	e06d      	b.n	8015bd8 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	8898      	ldrh	r0, [r3, #4]
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	6899      	ldr	r1, [r3, #8]
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015b0a:	b2db      	uxtb	r3, r3
 8015b0c:	461a      	mov	r2, r3
 8015b0e:	f7fe fc99 	bl	8014444 <SetTxContinuousWave1>
 8015b12:	4603      	mov	r3, r0
 8015b14:	75fb      	strb	r3, [r7, #23]
            break;
 8015b16:	e05f      	b.n	8015bd8 <LoRaMacMlmeRequest+0x22c>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015b18:	2300      	movs	r3, #0
 8015b1a:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015b1c:	f107 030c 	add.w	r3, r7, #12
 8015b20:	2200      	movs	r2, #0
 8015b22:	4619      	mov	r1, r3
 8015b24:	200d      	movs	r0, #13
 8015b26:	f002 fa63 	bl	8017ff0 <LoRaMacCommandsAddCmd>
 8015b2a:	4603      	mov	r3, r0
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d04e      	beq.n	8015bce <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015b30:	2313      	movs	r3, #19
 8015b32:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015b34:	e04b      	b.n	8015bce <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8015b36:	4b3c      	ldr	r3, [pc, #240]	; (8015c28 <LoRaMacMlmeRequest+0x27c>)
 8015b38:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d148      	bne.n	8015bd2 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	791b      	ldrb	r3, [r3, #4]
 8015b44:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	791b      	ldrb	r3, [r3, #4]
 8015b4a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015b4e:	b2db      	uxtb	r3, r3
 8015b50:	4618      	mov	r0, r3
 8015b52:	f001 fdff 	bl	8017754 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8015b56:	7dbb      	ldrb	r3, [r7, #22]
 8015b58:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8015b5e:	f107 030c 	add.w	r3, r7, #12
 8015b62:	2201      	movs	r2, #1
 8015b64:	4619      	mov	r1, r3
 8015b66:	2010      	movs	r0, #16
 8015b68:	f002 fa42 	bl	8017ff0 <LoRaMacCommandsAddCmd>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d02f      	beq.n	8015bd2 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015b72:	2313      	movs	r3, #19
 8015b74:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8015b76:	e02c      	b.n	8015bd2 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015b78:	2300      	movs	r3, #0
 8015b7a:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015b7c:	f107 030c 	add.w	r3, r7, #12
 8015b80:	2200      	movs	r2, #0
 8015b82:	4619      	mov	r1, r3
 8015b84:	2012      	movs	r0, #18
 8015b86:	f002 fa33 	bl	8017ff0 <LoRaMacCommandsAddCmd>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d022      	beq.n	8015bd6 <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015b90:	2313      	movs	r3, #19
 8015b92:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015b94:	e01f      	b.n	8015bd6 <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8015b96:	2301      	movs	r3, #1
 8015b98:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8015b9a:	f000 ff83 	bl	8016aa4 <LoRaMacClassBIsAcquisitionInProgress>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	f083 0301 	eor.w	r3, r3, #1
 8015ba4:	b2db      	uxtb	r3, r3
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d008      	beq.n	8015bbc <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8015baa:	2000      	movs	r0, #0
 8015bac:	f000 ff24 	bl	80169f8 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8015bb0:	2000      	movs	r0, #0
 8015bb2:	f000 ff8d 	bl	8016ad0 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8015bba:	e00d      	b.n	8015bd8 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8015bbc:	2301      	movs	r3, #1
 8015bbe:	75fb      	strb	r3, [r7, #23]
            break;
 8015bc0:	e00a      	b.n	8015bd8 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8015bc2:	bf00      	nop
 8015bc4:	e008      	b.n	8015bd8 <LoRaMacMlmeRequest+0x22c>
            break;
 8015bc6:	bf00      	nop
 8015bc8:	e006      	b.n	8015bd8 <LoRaMacMlmeRequest+0x22c>
            break;
 8015bca:	bf00      	nop
 8015bcc:	e004      	b.n	8015bd8 <LoRaMacMlmeRequest+0x22c>
            break;
 8015bce:	bf00      	nop
 8015bd0:	e002      	b.n	8015bd8 <LoRaMacMlmeRequest+0x22c>
            break;
 8015bd2:	bf00      	nop
 8015bd4:	e000      	b.n	8015bd8 <LoRaMacMlmeRequest+0x22c>
            break;
 8015bd6:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8015bd8:	4b12      	ldr	r3, [pc, #72]	; (8015c24 <LoRaMacMlmeRequest+0x278>)
 8015bda:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8015be2:	7dfb      	ldrb	r3, [r7, #23]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d010      	beq.n	8015c0a <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8015be8:	f002 fd90 	bl	801870c <LoRaMacConfirmQueueGetCnt>
 8015bec:	4603      	mov	r3, r0
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d110      	bne.n	8015c14 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8015bf2:	4b0c      	ldr	r3, [pc, #48]	; (8015c24 <LoRaMacMlmeRequest+0x278>)
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8015bfa:	4a0a      	ldr	r2, [pc, #40]	; (8015c24 <LoRaMacMlmeRequest+0x278>)
 8015bfc:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8015c00:	f36f 0382 	bfc	r3, #2, #1
 8015c04:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8015c08:	e004      	b.n	8015c14 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8015c0a:	f107 0310 	add.w	r3, r7, #16
 8015c0e:	4618      	mov	r0, r3
 8015c10:	f002 fc2e 	bl	8018470 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8015c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c16:	4618      	mov	r0, r3
 8015c18:	3718      	adds	r7, #24
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bd80      	pop	{r7, pc}
 8015c1e:	bf00      	nop
 8015c20:	20001270 	.word	0x20001270
 8015c24:	20000e24 	.word	0x20000e24
 8015c28:	20001330 	.word	0x20001330

08015c2c <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b08c      	sub	sp, #48	; 0x30
 8015c30:	af02      	add	r7, sp, #8
 8015c32:	6078      	str	r0, [r7, #4]
 8015c34:	460b      	mov	r3, r1
 8015c36:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015c38:	2302      	movs	r3, #2
 8015c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8015c3e:	2300      	movs	r3, #0
 8015c40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8015c44:	2300      	movs	r3, #0
 8015c46:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8015c48:	2300      	movs	r3, #0
 8015c4a:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d101      	bne.n	8015c5a <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015c56:	2303      	movs	r3, #3
 8015c58:	e0d4      	b.n	8015e04 <LoRaMacMcpsRequest+0x1d8>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8015c5a:	f7fc fb89 	bl	8012370 <LoRaMacIsBusy>
 8015c5e:	4603      	mov	r3, r0
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d001      	beq.n	8015c68 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8015c64:	2301      	movs	r3, #1
 8015c66:	e0cd      	b.n	8015e04 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8015c68:	2300      	movs	r3, #0
 8015c6a:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8015c6c:	2214      	movs	r2, #20
 8015c6e:	2100      	movs	r1, #0
 8015c70:	4866      	ldr	r0, [pc, #408]	; (8015e0c <LoRaMacMcpsRequest+0x1e0>)
 8015c72:	f006 fb4f 	bl	801c314 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015c76:	4b66      	ldr	r3, [pc, #408]	; (8015e10 <LoRaMacMcpsRequest+0x1e4>)
 8015c78:	2201      	movs	r2, #1
 8015c7a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8015c7e:	4b64      	ldr	r3, [pc, #400]	; (8015e10 <LoRaMacMcpsRequest+0x1e4>)
 8015c80:	2201      	movs	r2, #1
 8015c82:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	781b      	ldrb	r3, [r3, #0]
 8015c8a:	2b03      	cmp	r3, #3
 8015c8c:	d03d      	beq.n	8015d0a <LoRaMacMcpsRequest+0xde>
 8015c8e:	2b03      	cmp	r3, #3
 8015c90:	dc4f      	bgt.n	8015d32 <LoRaMacMcpsRequest+0x106>
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d002      	beq.n	8015c9c <LoRaMacMcpsRequest+0x70>
 8015c96:	2b01      	cmp	r3, #1
 8015c98:	d019      	beq.n	8015cce <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8015c9a:	e04a      	b.n	8015d32 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8015c9c:	2301      	movs	r3, #1
 8015c9e:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8015ca0:	4b5b      	ldr	r3, [pc, #364]	; (8015e10 <LoRaMacMcpsRequest+0x1e4>)
 8015ca2:	2201      	movs	r2, #1
 8015ca4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8015ca8:	7b3b      	ldrb	r3, [r7, #12]
 8015caa:	2202      	movs	r2, #2
 8015cac:	f362 1347 	bfi	r3, r2, #5, #3
 8015cb0:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	791b      	ldrb	r3, [r3, #4]
 8015cb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	689b      	ldr	r3, [r3, #8]
 8015cbe:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	899b      	ldrh	r3, [r3, #12]
 8015cc4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	7b9b      	ldrb	r3, [r3, #14]
 8015cca:	777b      	strb	r3, [r7, #29]
            break;
 8015ccc:	e032      	b.n	8015d34 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8015cce:	2301      	movs	r3, #1
 8015cd0:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	7bdb      	ldrb	r3, [r3, #15]
 8015cd6:	2b08      	cmp	r3, #8
 8015cd8:	bf28      	it	cs
 8015cda:	2308      	movcs	r3, #8
 8015cdc:	b2da      	uxtb	r2, r3
 8015cde:	4b4c      	ldr	r3, [pc, #304]	; (8015e10 <LoRaMacMcpsRequest+0x1e4>)
 8015ce0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8015ce4:	7b3b      	ldrb	r3, [r7, #12]
 8015ce6:	2204      	movs	r2, #4
 8015ce8:	f362 1347 	bfi	r3, r2, #5, #3
 8015cec:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	791b      	ldrb	r3, [r3, #4]
 8015cf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	689b      	ldr	r3, [r3, #8]
 8015cfa:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	899b      	ldrh	r3, [r3, #12]
 8015d00:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	7b9b      	ldrb	r3, [r3, #14]
 8015d06:	777b      	strb	r3, [r7, #29]
            break;
 8015d08:	e014      	b.n	8015d34 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8015d0a:	2301      	movs	r3, #1
 8015d0c:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8015d0e:	4b40      	ldr	r3, [pc, #256]	; (8015e10 <LoRaMacMcpsRequest+0x1e4>)
 8015d10:	2201      	movs	r2, #1
 8015d12:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8015d16:	7b3b      	ldrb	r3, [r7, #12]
 8015d18:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8015d1c:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	685b      	ldr	r3, [r3, #4]
 8015d22:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	891b      	ldrh	r3, [r3, #8]
 8015d28:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	7a9b      	ldrb	r3, [r3, #10]
 8015d2e:	777b      	strb	r3, [r7, #29]
            break;
 8015d30:	e000      	b.n	8015d34 <LoRaMacMcpsRequest+0x108>
            break;
 8015d32:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015d34:	2302      	movs	r3, #2
 8015d36:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015d38:	4b36      	ldr	r3, [pc, #216]	; (8015e14 <LoRaMacMcpsRequest+0x1e8>)
 8015d3a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8015d3e:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015d40:	4b34      	ldr	r3, [pc, #208]	; (8015e14 <LoRaMacMcpsRequest+0x1e8>)
 8015d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015d46:	f107 0214 	add.w	r2, r7, #20
 8015d4a:	4611      	mov	r1, r2
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	f003 fefb 	bl	8019b48 <RegionGetPhyParam>
 8015d52:	4603      	mov	r3, r0
 8015d54:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8015d56:	693b      	ldr	r3, [r7, #16]
 8015d58:	b25b      	sxtb	r3, r3
 8015d5a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8015d5e:	4293      	cmp	r3, r2
 8015d60:	bfb8      	it	lt
 8015d62:	4613      	movlt	r3, r2
 8015d64:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8015d66:	7f3b      	ldrb	r3, [r7, #28]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d044      	beq.n	8015df6 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8015d6c:	4b29      	ldr	r3, [pc, #164]	; (8015e14 <LoRaMacMcpsRequest+0x1e8>)
 8015d6e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8015d72:	f083 0301 	eor.w	r3, r3, #1
 8015d76:	b2db      	uxtb	r3, r3
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d019      	beq.n	8015db0 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8015d7c:	7f7b      	ldrb	r3, [r7, #29]
 8015d7e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015d80:	4b24      	ldr	r3, [pc, #144]	; (8015e14 <LoRaMacMcpsRequest+0x1e8>)
 8015d82:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8015d86:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8015d88:	4b22      	ldr	r3, [pc, #136]	; (8015e14 <LoRaMacMcpsRequest+0x1e8>)
 8015d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015d8e:	f107 0108 	add.w	r1, r7, #8
 8015d92:	2205      	movs	r2, #5
 8015d94:	4618      	mov	r0, r3
 8015d96:	f003 ff12 	bl	8019bbe <RegionVerify>
 8015d9a:	4603      	mov	r3, r0
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d005      	beq.n	8015dac <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8015da0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015da4:	4b1b      	ldr	r3, [pc, #108]	; (8015e14 <LoRaMacMcpsRequest+0x1e8>)
 8015da6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8015daa:	e001      	b.n	8015db0 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8015dac:	2303      	movs	r3, #3
 8015dae:	e029      	b.n	8015e04 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8015db0:	8bfa      	ldrh	r2, [r7, #30]
 8015db2:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8015db6:	f107 000c 	add.w	r0, r7, #12
 8015dba:	78fb      	ldrb	r3, [r7, #3]
 8015dbc:	9300      	str	r3, [sp, #0]
 8015dbe:	4613      	mov	r3, r2
 8015dc0:	6a3a      	ldr	r2, [r7, #32]
 8015dc2:	f7fd fc7b 	bl	80136bc <Send>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8015dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d10c      	bne.n	8015dee <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	781a      	ldrb	r2, [r3, #0]
 8015dd8:	4b0d      	ldr	r3, [pc, #52]	; (8015e10 <LoRaMacMcpsRequest+0x1e4>)
 8015dda:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8015dde:	4a0c      	ldr	r2, [pc, #48]	; (8015e10 <LoRaMacMcpsRequest+0x1e4>)
 8015de0:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8015de4:	f043 0301 	orr.w	r3, r3, #1
 8015de8:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8015dec:	e003      	b.n	8015df6 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8015dee:	4b08      	ldr	r3, [pc, #32]	; (8015e10 <LoRaMacMcpsRequest+0x1e4>)
 8015df0:	2200      	movs	r2, #0
 8015df2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8015df6:	4b06      	ldr	r3, [pc, #24]	; (8015e10 <LoRaMacMcpsRequest+0x1e4>)
 8015df8:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	611a      	str	r2, [r3, #16]

    return status;
 8015e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8015e04:	4618      	mov	r0, r3
 8015e06:	3728      	adds	r7, #40	; 0x28
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	bd80      	pop	{r7, pc}
 8015e0c:	2000125c 	.word	0x2000125c
 8015e10:	20000e24 	.word	0x20000e24
 8015e14:	20001330 	.word	0x20001330

08015e18 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b084      	sub	sp, #16
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	4603      	mov	r3, r0
 8015e20:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8015e22:	79fb      	ldrb	r3, [r7, #7]
 8015e24:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8015e26:	4b0a      	ldr	r3, [pc, #40]	; (8015e50 <LoRaMacTestSetDutyCycleOn+0x38>)
 8015e28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015e2c:	f107 010c 	add.w	r1, r7, #12
 8015e30:	220f      	movs	r2, #15
 8015e32:	4618      	mov	r0, r3
 8015e34:	f003 fec3 	bl	8019bbe <RegionVerify>
 8015e38:	4603      	mov	r3, r0
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d003      	beq.n	8015e46 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8015e3e:	4a04      	ldr	r2, [pc, #16]	; (8015e50 <LoRaMacTestSetDutyCycleOn+0x38>)
 8015e40:	79fb      	ldrb	r3, [r7, #7]
 8015e42:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 8015e46:	bf00      	nop
 8015e48:	3710      	adds	r7, #16
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}
 8015e4e:	bf00      	nop
 8015e50:	20001330 	.word	0x20001330

08015e54 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8015e58:	f7fe ffec 	bl	8014e34 <LoRaMacStop>
 8015e5c:	4603      	mov	r3, r0
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d114      	bne.n	8015e8c <LoRaMacDeInitialization+0x38>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8015e62:	480c      	ldr	r0, [pc, #48]	; (8015e94 <LoRaMacDeInitialization+0x40>)
 8015e64:	f00a fb66 	bl	8020534 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8015e68:	480b      	ldr	r0, [pc, #44]	; (8015e98 <LoRaMacDeInitialization+0x44>)
 8015e6a:	f00a fb63 	bl	8020534 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8015e6e:	480b      	ldr	r0, [pc, #44]	; (8015e9c <LoRaMacDeInitialization+0x48>)
 8015e70:	f00a fb60 	bl	8020534 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8015e74:	480a      	ldr	r0, [pc, #40]	; (8015ea0 <LoRaMacDeInitialization+0x4c>)
 8015e76:	f00a fb5d 	bl	8020534 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8015e7a:	f001 fc89 	bl	8017790 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8015e7e:	f7fd ff85 	bl	8013d8c <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8015e82:	4b08      	ldr	r3, [pc, #32]	; (8015ea4 <LoRaMacDeInitialization+0x50>)
 8015e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e86:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8015e88:	2300      	movs	r3, #0
 8015e8a:	e000      	b.n	8015e8e <LoRaMacDeInitialization+0x3a>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8015e8c:	2301      	movs	r3, #1
    }
}
 8015e8e:	4618      	mov	r0, r3
 8015e90:	bd80      	pop	{r7, pc}
 8015e92:	bf00      	nop
 8015e94:	2000118c 	.word	0x2000118c
 8015e98:	200011a4 	.word	0x200011a4
 8015e9c:	200011bc 	.word	0x200011bc
 8015ea0:	2000121c 	.word	0x2000121c
 8015ea4:	08021e08 	.word	0x08021e08

08015ea8 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b08c      	sub	sp, #48	; 0x30
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	60f8      	str	r0, [r7, #12]
 8015eb0:	60b9      	str	r1, [r7, #8]
 8015eb2:	607a      	str	r2, [r7, #4]
 8015eb4:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	7c1b      	ldrb	r3, [r3, #16]
 8015ec0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	7c5b      	ldrb	r3, [r3, #17]
 8015ec8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	689a      	ldr	r2, [r3, #8]
 8015ed0:	683b      	ldr	r3, [r7, #0]
 8015ed2:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	795b      	ldrb	r3, [r3, #5]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	f000 808b 	beq.w	8015ff4 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8015ede:	2302      	movs	r3, #2
 8015ee0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	7c9b      	ldrb	r3, [r3, #18]
 8015ee8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	7cdb      	ldrb	r3, [r3, #19]
 8015ef0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015ef4:	4611      	mov	r1, r2
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	f003 fe26 	bl	8019b48 <RegionGetPhyParam>
 8015efc:	4603      	mov	r3, r0
 8015efe:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8015f00:	6a3b      	ldr	r3, [r7, #32]
 8015f02:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8015f06:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8015f0a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8015f0e:	4293      	cmp	r3, r2
 8015f10:	bfb8      	it	lt
 8015f12:	4613      	movlt	r3, r2
 8015f14:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8015f18:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015f1c:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8015f20:	429a      	cmp	r2, r3
 8015f22:	d106      	bne.n	8015f32 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8015f24:	683b      	ldr	r3, [r7, #0]
 8015f26:	2200      	movs	r2, #0
 8015f28:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015f30:	e060      	b.n	8015ff4 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	689b      	ldr	r3, [r3, #8]
 8015f36:	68fa      	ldr	r2, [r7, #12]
 8015f38:	8992      	ldrh	r2, [r2, #12]
 8015f3a:	4293      	cmp	r3, r2
 8015f3c:	d303      	bcc.n	8015f46 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8015f3e:	2301      	movs	r3, #1
 8015f40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015f44:	e002      	b.n	8015f4c <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8015f46:	2300      	movs	r3, #0
 8015f48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	689b      	ldr	r3, [r3, #8]
 8015f50:	68fa      	ldr	r2, [r7, #12]
 8015f52:	8992      	ldrh	r2, [r2, #12]
 8015f54:	4611      	mov	r1, r2
 8015f56:	68fa      	ldr	r2, [r7, #12]
 8015f58:	89d2      	ldrh	r2, [r2, #14]
 8015f5a:	440a      	add	r2, r1
 8015f5c:	4293      	cmp	r3, r2
 8015f5e:	d349      	bcc.n	8015ff4 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8015f60:	2308      	movs	r3, #8
 8015f62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	7cdb      	ldrb	r3, [r3, #19]
 8015f6a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015f6e:	4611      	mov	r1, r2
 8015f70:	4618      	mov	r0, r3
 8015f72:	f003 fde9 	bl	8019b48 <RegionGetPhyParam>
 8015f76:	4603      	mov	r3, r0
 8015f78:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8015f7a:	6a3b      	ldr	r3, [r7, #32]
 8015f7c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	689b      	ldr	r3, [r3, #8]
 8015f84:	68fa      	ldr	r2, [r7, #12]
 8015f86:	89d2      	ldrh	r2, [r2, #14]
 8015f88:	fbb3 f1f2 	udiv	r1, r3, r2
 8015f8c:	fb01 f202 	mul.w	r2, r1, r2
 8015f90:	1a9b      	subs	r3, r3, r2
 8015f92:	2b01      	cmp	r3, #1
 8015f94:	d12e      	bne.n	8015ff4 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8015f96:	2322      	movs	r3, #34	; 0x22
 8015f98:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8015f9c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015fa0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	7c9b      	ldrb	r3, [r3, #18]
 8015fa8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	7cdb      	ldrb	r3, [r3, #19]
 8015fb0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015fb4:	4611      	mov	r1, r2
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	f003 fdc6 	bl	8019b48 <RegionGetPhyParam>
 8015fbc:	4603      	mov	r3, r0
 8015fbe:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8015fc0:	6a3b      	ldr	r3, [r7, #32]
 8015fc2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8015fc6:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015fca:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	d110      	bne.n	8015ff4 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	791b      	ldrb	r3, [r3, #4]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d009      	beq.n	8015ff4 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015fe0:	2302      	movs	r3, #2
 8015fe2:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	7cdb      	ldrb	r3, [r3, #19]
 8015fe8:	f107 0214 	add.w	r2, r7, #20
 8015fec:	4611      	mov	r1, r2
 8015fee:	4618      	mov	r0, r3
 8015ff0:	f003 fdd3 	bl	8019b9a <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8015ff4:	68bb      	ldr	r3, [r7, #8]
 8015ff6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8015ffa:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8016002:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8016004:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016008:	4618      	mov	r0, r3
 801600a:	3730      	adds	r7, #48	; 0x30
 801600c:	46bd      	mov	sp, r7
 801600e:	bd80      	pop	{r7, pc}

08016010 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8016010:	b580      	push	{r7, lr}
 8016012:	b084      	sub	sp, #16
 8016014:	af00      	add	r7, sp, #0
 8016016:	60f8      	str	r0, [r7, #12]
 8016018:	60b9      	str	r1, [r7, #8]
 801601a:	607a      	str	r2, [r7, #4]
 801601c:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	789b      	ldrb	r3, [r3, #2]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d107      	bne.n	8016036 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8016026:	683b      	ldr	r3, [r7, #0]
 8016028:	687a      	ldr	r2, [r7, #4]
 801602a:	68b9      	ldr	r1, [r7, #8]
 801602c:	68f8      	ldr	r0, [r7, #12]
 801602e:	f7ff ff3b 	bl	8015ea8 <CalcNextV10X>
 8016032:	4603      	mov	r3, r0
 8016034:	e000      	b.n	8016038 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8016036:	2300      	movs	r3, #0
}
 8016038:	4618      	mov	r0, r3
 801603a:	3710      	adds	r7, #16
 801603c:	46bd      	mov	sp, r7
 801603e:	bd80      	pop	{r7, pc}

08016040 <TimerTempCompensation>:
 * \retval Compensated time period
 */
static TimerTime_t TimerTempCompensation( TimerTime_t period, int16_t temperature );

static TimerTime_t TimerTempCompensation( TimerTime_t period, int16_t temperature )
{
 8016040:	b590      	push	{r4, r7, lr}
 8016042:	b089      	sub	sp, #36	; 0x24
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
 8016048:	460b      	mov	r3, r1
 801604a:	807b      	strh	r3, [r7, #2]
  float k = RTC_TEMP_COEFFICIENT;
 801604c:	4b3e      	ldr	r3, [pc, #248]	; (8016148 <TimerTempCompensation+0x108>)
 801604e:	617b      	str	r3, [r7, #20]
  float kDev = RTC_TEMP_DEV_COEFFICIENT;
 8016050:	4b3e      	ldr	r3, [pc, #248]	; (801614c <TimerTempCompensation+0x10c>)
 8016052:	613b      	str	r3, [r7, #16]
  float t = RTC_TEMP_TURNOVER;
 8016054:	4b3e      	ldr	r3, [pc, #248]	; (8016150 <TimerTempCompensation+0x110>)
 8016056:	60fb      	str	r3, [r7, #12]
  float tDev = RTC_TEMP_DEV_TURNOVER;
 8016058:	4b3e      	ldr	r3, [pc, #248]	; (8016154 <TimerTempCompensation+0x114>)
 801605a:	60bb      	str	r3, [r7, #8]
  float interim = 0.0f;
 801605c:	f04f 0300 	mov.w	r3, #0
 8016060:	61fb      	str	r3, [r7, #28]
  float ppm = 0.0f;
 8016062:	f04f 0300 	mov.w	r3, #0
 8016066:	61bb      	str	r3, [r7, #24]

  if (k < 0.0f)
 8016068:	f04f 0100 	mov.w	r1, #0
 801606c:	6978      	ldr	r0, [r7, #20]
 801606e:	f7eb f805 	bl	800107c <__aeabi_fcmplt>
 8016072:	4603      	mov	r3, r0
 8016074:	2b00      	cmp	r3, #0
 8016076:	d006      	beq.n	8016086 <TimerTempCompensation+0x46>
  {
    ppm = (k - kDev);
 8016078:	6939      	ldr	r1, [r7, #16]
 801607a:	6978      	ldr	r0, [r7, #20]
 801607c:	f7ea fd56 	bl	8000b2c <__aeabi_fsub>
 8016080:	4603      	mov	r3, r0
 8016082:	61bb      	str	r3, [r7, #24]
 8016084:	e005      	b.n	8016092 <TimerTempCompensation+0x52>
  }
  else
  {
    ppm = (k + kDev);
 8016086:	6939      	ldr	r1, [r7, #16]
 8016088:	6978      	ldr	r0, [r7, #20]
 801608a:	f7ea fd51 	bl	8000b30 <__addsf3>
 801608e:	4603      	mov	r3, r0
 8016090:	61bb      	str	r3, [r7, #24]
  }
  interim = (float)temperature - (t - tDev);
 8016092:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016096:	4618      	mov	r0, r3
 8016098:	f7ea fdfe 	bl	8000c98 <__aeabi_i2f>
 801609c:	4604      	mov	r4, r0
 801609e:	68b9      	ldr	r1, [r7, #8]
 80160a0:	68f8      	ldr	r0, [r7, #12]
 80160a2:	f7ea fd43 	bl	8000b2c <__aeabi_fsub>
 80160a6:	4603      	mov	r3, r0
 80160a8:	4619      	mov	r1, r3
 80160aa:	4620      	mov	r0, r4
 80160ac:	f7ea fd3e 	bl	8000b2c <__aeabi_fsub>
 80160b0:	4603      	mov	r3, r0
 80160b2:	61fb      	str	r3, [r7, #28]
  ppm *=  interim * interim;
 80160b4:	69f9      	ldr	r1, [r7, #28]
 80160b6:	69f8      	ldr	r0, [r7, #28]
 80160b8:	f7ea fe42 	bl	8000d40 <__aeabi_fmul>
 80160bc:	4603      	mov	r3, r0
 80160be:	4619      	mov	r1, r3
 80160c0:	69b8      	ldr	r0, [r7, #24]
 80160c2:	f7ea fe3d 	bl	8000d40 <__aeabi_fmul>
 80160c6:	4603      	mov	r3, r0
 80160c8:	61bb      	str	r3, [r7, #24]

  // Calculate the drift in time
  interim = ((float) period * ppm) / 1000000.0f;
 80160ca:	6878      	ldr	r0, [r7, #4]
 80160cc:	f7ea fde0 	bl	8000c90 <__aeabi_ui2f>
 80160d0:	4603      	mov	r3, r0
 80160d2:	69b9      	ldr	r1, [r7, #24]
 80160d4:	4618      	mov	r0, r3
 80160d6:	f7ea fe33 	bl	8000d40 <__aeabi_fmul>
 80160da:	4603      	mov	r3, r0
 80160dc:	491e      	ldr	r1, [pc, #120]	; (8016158 <TimerTempCompensation+0x118>)
 80160de:	4618      	mov	r0, r3
 80160e0:	f7ea fee2 	bl	8000ea8 <__aeabi_fdiv>
 80160e4:	4603      	mov	r3, r0
 80160e6:	61fb      	str	r3, [r7, #28]
  // Calculate the resulting time period
  interim += period;
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f7ea fdd1 	bl	8000c90 <__aeabi_ui2f>
 80160ee:	4603      	mov	r3, r0
 80160f0:	4619      	mov	r1, r3
 80160f2:	69f8      	ldr	r0, [r7, #28]
 80160f4:	f7ea fd1c 	bl	8000b30 <__addsf3>
 80160f8:	4603      	mov	r3, r0
 80160fa:	61fb      	str	r3, [r7, #28]
  interim = floor(interim);
 80160fc:	69f8      	ldr	r0, [r7, #28]
 80160fe:	f7ea f9a7 	bl	8000450 <__aeabi_f2d>
 8016102:	4602      	mov	r2, r0
 8016104:	460b      	mov	r3, r1
 8016106:	4610      	mov	r0, r2
 8016108:	4619      	mov	r1, r3
 801610a:	f00a ff29 	bl	8020f60 <floor>
 801610e:	4602      	mov	r2, r0
 8016110:	460b      	mov	r3, r1
 8016112:	4610      	mov	r0, r2
 8016114:	4619      	mov	r1, r3
 8016116:	f7ea fcb5 	bl	8000a84 <__aeabi_d2f>
 801611a:	4603      	mov	r3, r0
 801611c:	61fb      	str	r3, [r7, #28]

  if (interim < 0.0f)
 801611e:	f04f 0100 	mov.w	r1, #0
 8016122:	69f8      	ldr	r0, [r7, #28]
 8016124:	f7ea ffaa 	bl	800107c <__aeabi_fcmplt>
 8016128:	4603      	mov	r3, r0
 801612a:	2b00      	cmp	r3, #0
 801612c:	d004      	beq.n	8016138 <TimerTempCompensation+0xf8>
  {
    interim = (float)period;
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	f7ea fdae 	bl	8000c90 <__aeabi_ui2f>
 8016134:	4603      	mov	r3, r0
 8016136:	61fb      	str	r3, [r7, #28]
  }

  // Calculate the resulting period
  return ( TimerTime_t ) interim;
 8016138:	69f8      	ldr	r0, [r7, #28]
 801613a:	f7ea ffed 	bl	8001118 <__aeabi_f2uiz>
 801613e:	4603      	mov	r3, r0
}
 8016140:	4618      	mov	r0, r3
 8016142:	3724      	adds	r7, #36	; 0x24
 8016144:	46bd      	mov	sp, r7
 8016146:	bd90      	pop	{r4, r7, pc}
 8016148:	bd0f5c29 	.word	0xbd0f5c29
 801614c:	3b656042 	.word	0x3b656042
 8016150:	41c80000 	.word	0x41c80000
 8016154:	40a00000 	.word	0x40a00000
 8016158:	49742400 	.word	0x49742400

0801615c <ComputePingOffset>:
 * \param [in]  address         - Frame address
 * \param [in]  pingPeriod      - Ping period of the node
 * \param [out] pingOffset      - Pseudo random ping offset
 */
static void ComputePingOffset( uint64_t beaconTime, uint32_t address, uint16_t pingPeriod, uint16_t *pingOffset )
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b08e      	sub	sp, #56	; 0x38
 8016160:	af00      	add	r7, sp, #0
 8016162:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8016166:	607a      	str	r2, [r7, #4]
 8016168:	807b      	strh	r3, [r7, #2]
    uint8_t buffer[16];
    uint8_t cipher[16];
    uint32_t result = 0;
 801616a:	2300      	movs	r3, #0
 801616c:	637b      	str	r3, [r7, #52]	; 0x34
    /* Refer to chapter 15.2 of the LoRaWAN specification v1.1. The beacon time
     * GPS time in seconds modulo 2^32
     */
    uint32_t time = ( beaconTime % ( ( ( uint64_t ) 1 ) << 32 ) );
 801616e:	68bb      	ldr	r3, [r7, #8]
 8016170:	633b      	str	r3, [r7, #48]	; 0x30

    memset1( buffer, 0, 16 );
 8016172:	f107 0320 	add.w	r3, r7, #32
 8016176:	2210      	movs	r2, #16
 8016178:	2100      	movs	r1, #0
 801617a:	4618      	mov	r0, r3
 801617c:	f006 f8ca 	bl	801c314 <memset1>
    memset1( cipher, 0, 16 );
 8016180:	f107 0310 	add.w	r3, r7, #16
 8016184:	2210      	movs	r2, #16
 8016186:	2100      	movs	r1, #0
 8016188:	4618      	mov	r0, r3
 801618a:	f006 f8c3 	bl	801c314 <memset1>

    buffer[0] = ( time ) & 0xFF;
 801618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016190:	b2db      	uxtb	r3, r3
 8016192:	f887 3020 	strb.w	r3, [r7, #32]
    buffer[1] = ( time >> 8 ) & 0xFF;
 8016196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016198:	0a1b      	lsrs	r3, r3, #8
 801619a:	b2db      	uxtb	r3, r3
 801619c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    buffer[2] = ( time >> 16 ) & 0xFF;
 80161a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161a2:	0c1b      	lsrs	r3, r3, #16
 80161a4:	b2db      	uxtb	r3, r3
 80161a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    buffer[3] = ( time >> 24 ) & 0xFF;
 80161aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ac:	0e1b      	lsrs	r3, r3, #24
 80161ae:	b2db      	uxtb	r3, r3
 80161b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    buffer[4] = ( address ) & 0xFF;
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	b2db      	uxtb	r3, r3
 80161b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    buffer[5] = ( address >> 8 ) & 0xFF;
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	0a1b      	lsrs	r3, r3, #8
 80161c0:	b2db      	uxtb	r3, r3
 80161c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    buffer[6] = ( address >> 16 ) & 0xFF;
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	0c1b      	lsrs	r3, r3, #16
 80161ca:	b2db      	uxtb	r3, r3
 80161cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    buffer[7] = ( address >> 24 ) & 0xFF;
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	0e1b      	lsrs	r3, r3, #24
 80161d4:	b2db      	uxtb	r3, r3
 80161d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    SecureElementAesEncrypt( buffer, 16, SLOT_RAND_ZERO_KEY, cipher );
 80161da:	f107 0310 	add.w	r3, r7, #16
 80161de:	f107 0020 	add.w	r0, r7, #32
 80161e2:	2283      	movs	r2, #131	; 0x83
 80161e4:	2110      	movs	r1, #16
 80161e6:	f7f9 fc70 	bl	800faca <SecureElementAesEncrypt>

    result = ( ( ( uint32_t ) cipher[0] ) + ( ( ( uint32_t ) cipher[1] ) * 256 ) );
 80161ea:	7c3b      	ldrb	r3, [r7, #16]
 80161ec:	461a      	mov	r2, r3
 80161ee:	7c7b      	ldrb	r3, [r7, #17]
 80161f0:	021b      	lsls	r3, r3, #8
 80161f2:	4413      	add	r3, r2
 80161f4:	637b      	str	r3, [r7, #52]	; 0x34

    *pingOffset = ( uint16_t )( result % pingPeriod );
 80161f6:	887a      	ldrh	r2, [r7, #2]
 80161f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80161fe:	fb01 f202 	mul.w	r2, r1, r2
 8016202:	1a9b      	subs	r3, r3, r2
 8016204:	b29a      	uxth	r2, r3
 8016206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016208:	801a      	strh	r2, [r3, #0]
}
 801620a:	bf00      	nop
 801620c:	3738      	adds	r7, #56	; 0x38
 801620e:	46bd      	mov	sp, r7
 8016210:	bd80      	pop	{r7, pc}
	...

08016214 <CalcDownlinkFrequency>:
 *                      calculate the frequency for a beacon.
 *
 * \retval The downlink frequency
 */
static uint32_t CalcDownlinkFrequency( uint8_t channel, bool isBeacon )
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b086      	sub	sp, #24
 8016218:	af00      	add	r7, sp, #0
 801621a:	4603      	mov	r3, r0
 801621c:	460a      	mov	r2, r1
 801621e:	71fb      	strb	r3, [r7, #7]
 8016220:	4613      	mov	r3, r2
 8016222:	71bb      	strb	r3, [r7, #6]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    getPhy.Attribute = PHY_PING_SLOT_CHANNEL_FREQ;
 8016224:	2335      	movs	r3, #53	; 0x35
 8016226:	743b      	strb	r3, [r7, #16]

    if( isBeacon == true )
 8016228:	79bb      	ldrb	r3, [r7, #6]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d001      	beq.n	8016232 <CalcDownlinkFrequency+0x1e>
    {
        getPhy.Attribute = PHY_BEACON_CHANNEL_FREQ;
 801622e:	2330      	movs	r3, #48	; 0x30
 8016230:	743b      	strb	r3, [r7, #16]
    }
    getPhy.Channel = channel;
 8016232:	79fb      	ldrb	r3, [r7, #7]
 8016234:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8016236:	4b08      	ldr	r3, [pc, #32]	; (8016258 <CalcDownlinkFrequency+0x44>)
 8016238:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801623c:	781b      	ldrb	r3, [r3, #0]
 801623e:	f107 0210 	add.w	r2, r7, #16
 8016242:	4611      	mov	r1, r2
 8016244:	4618      	mov	r0, r3
 8016246:	f003 fc7f 	bl	8019b48 <RegionGetPhyParam>
 801624a:	4603      	mov	r3, r0
 801624c:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 801624e:	68fb      	ldr	r3, [r7, #12]
}
 8016250:	4618      	mov	r0, r3
 8016252:	3718      	adds	r7, #24
 8016254:	46bd      	mov	sp, r7
 8016256:	bd80      	pop	{r7, pc}
 8016258:	2000219c 	.word	0x2000219c

0801625c <CalcDownlinkChannelAndFrequency>:
 *
 * \retval The downlink channel
 */
static uint32_t CalcDownlinkChannelAndFrequency( uint32_t devAddr, TimerTime_t beaconTime,
                                                 TimerTime_t beaconInterval, bool isBeacon )
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b088      	sub	sp, #32
 8016260:	af00      	add	r7, sp, #0
 8016262:	60f8      	str	r0, [r7, #12]
 8016264:	60b9      	str	r1, [r7, #8]
 8016266:	607a      	str	r2, [r7, #4]
 8016268:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    uint32_t channel = 0;
 801626a:	2300      	movs	r3, #0
 801626c:	61fb      	str	r3, [r7, #28]
    uint8_t nbChannels = 0;
 801626e:	2300      	movs	r3, #0
 8016270:	76fb      	strb	r3, [r7, #27]
    uint8_t offset = 0;
 8016272:	2300      	movs	r3, #0
 8016274:	76bb      	strb	r3, [r7, #26]

    // Default initialization - ping slot channels
    getPhy.Attribute = PHY_PING_SLOT_NB_CHANNELS;
 8016276:	2337      	movs	r3, #55	; 0x37
 8016278:	753b      	strb	r3, [r7, #20]

    if( isBeacon == true )
 801627a:	78fb      	ldrb	r3, [r7, #3]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d001      	beq.n	8016284 <CalcDownlinkChannelAndFrequency+0x28>
    {
        // Beacon channels
        getPhy.Attribute = PHY_BEACON_NB_CHANNELS;
 8016280:	2333      	movs	r3, #51	; 0x33
 8016282:	753b      	strb	r3, [r7, #20]
    }
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8016284:	4b21      	ldr	r3, [pc, #132]	; (801630c <CalcDownlinkChannelAndFrequency+0xb0>)
 8016286:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801628a:	781b      	ldrb	r3, [r3, #0]
 801628c:	f107 0214 	add.w	r2, r7, #20
 8016290:	4611      	mov	r1, r2
 8016292:	4618      	mov	r0, r3
 8016294:	f003 fc58 	bl	8019b48 <RegionGetPhyParam>
 8016298:	4603      	mov	r3, r0
 801629a:	613b      	str	r3, [r7, #16]
    nbChannels = ( uint8_t ) phyParam.Value;
 801629c:	693b      	ldr	r3, [r7, #16]
 801629e:	76fb      	strb	r3, [r7, #27]

    // nbChannels is > 1, when the channel plan requires more than one possible channel
    // defined by the calculation below.
    if( nbChannels > 1 )
 80162a0:	7efb      	ldrb	r3, [r7, #27]
 80162a2:	2b01      	cmp	r3, #1
 80162a4:	d926      	bls.n	80162f4 <CalcDownlinkChannelAndFrequency+0x98>
    {
        getPhy.Attribute = PHY_BEACON_CHANNEL_OFFSET;
 80162a6:	2334      	movs	r3, #52	; 0x34
 80162a8:	753b      	strb	r3, [r7, #20]
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 80162aa:	4b18      	ldr	r3, [pc, #96]	; (801630c <CalcDownlinkChannelAndFrequency+0xb0>)
 80162ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80162b0:	781b      	ldrb	r3, [r3, #0]
 80162b2:	f107 0214 	add.w	r2, r7, #20
 80162b6:	4611      	mov	r1, r2
 80162b8:	4618      	mov	r0, r3
 80162ba:	f003 fc45 	bl	8019b48 <RegionGetPhyParam>
 80162be:	4603      	mov	r3, r0
 80162c0:	613b      	str	r3, [r7, #16]
        offset = ( uint8_t ) phyParam.Value;
 80162c2:	693b      	ldr	r3, [r7, #16]
 80162c4:	76bb      	strb	r3, [r7, #26]

        // Calculate the channel for the next downlink
        channel = devAddr + ( beaconTime / ( beaconInterval / 1000 ) );
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	4a11      	ldr	r2, [pc, #68]	; (8016310 <CalcDownlinkChannelAndFrequency+0xb4>)
 80162ca:	fba2 2303 	umull	r2, r3, r2, r3
 80162ce:	099b      	lsrs	r3, r3, #6
 80162d0:	68ba      	ldr	r2, [r7, #8]
 80162d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80162d6:	68fa      	ldr	r2, [r7, #12]
 80162d8:	4413      	add	r3, r2
 80162da:	61fb      	str	r3, [r7, #28]
        channel = channel % nbChannels;
 80162dc:	7efa      	ldrb	r2, [r7, #27]
 80162de:	69fb      	ldr	r3, [r7, #28]
 80162e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80162e4:	fb01 f202 	mul.w	r2, r1, r2
 80162e8:	1a9b      	subs	r3, r3, r2
 80162ea:	61fb      	str	r3, [r7, #28]
        channel += offset;
 80162ec:	7ebb      	ldrb	r3, [r7, #26]
 80162ee:	69fa      	ldr	r2, [r7, #28]
 80162f0:	4413      	add	r3, r2
 80162f2:	61fb      	str	r3, [r7, #28]
    }

    // Calculate the frequency for the next downlink. This holds
    // for beacons and ping slots.
    return CalcDownlinkFrequency( channel, isBeacon );
 80162f4:	69fb      	ldr	r3, [r7, #28]
 80162f6:	b2db      	uxtb	r3, r3
 80162f8:	78fa      	ldrb	r2, [r7, #3]
 80162fa:	4611      	mov	r1, r2
 80162fc:	4618      	mov	r0, r3
 80162fe:	f7ff ff89 	bl	8016214 <CalcDownlinkFrequency>
 8016302:	4603      	mov	r3, r0
}
 8016304:	4618      	mov	r0, r3
 8016306:	3720      	adds	r7, #32
 8016308:	46bd      	mov	sp, r7
 801630a:	bd80      	pop	{r7, pc}
 801630c:	2000219c 	.word	0x2000219c
 8016310:	10624dd3 	.word	0x10624dd3

08016314 <CalculateBeaconRxWindowConfig>:
 * \param [in] rxConfig Reception parameters for the beacon window.
 *
 * \param [in] currentSymbolTimeout Current symbol timeout.
 */
static void CalculateBeaconRxWindowConfig( RxConfigParams_t* rxConfig, uint16_t currentSymbolTimeout )
{
 8016314:	b590      	push	{r4, r7, lr}
 8016316:	b089      	sub	sp, #36	; 0x24
 8016318:	af02      	add	r7, sp, #8
 801631a:	6078      	str	r0, [r7, #4]
 801631c:	460b      	mov	r3, r1
 801631e:	807b      	strh	r3, [r7, #2]
    PhyParam_t phyParam;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint32_t maxRxError = 0;
#endif /* LORAMAC_VERSION */

    rxConfig->WindowTimeout = currentSymbolTimeout;
 8016320:	887a      	ldrh	r2, [r7, #2]
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	609a      	str	r2, [r3, #8]
    rxConfig->WindowOffset = 0;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	2200      	movs	r2, #0
 801632a:	60da      	str	r2, [r3, #12]

    if( ( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 801632c:	4b19      	ldr	r3, [pc, #100]	; (8016394 <CalculateBeaconRxWindowConfig+0x80>)
 801632e:	7b1b      	ldrb	r3, [r3, #12]
 8016330:	f003 0302 	and.w	r3, r3, #2
 8016334:	b2db      	uxtb	r3, r3
 8016336:	2b00      	cmp	r3, #0
 8016338:	d106      	bne.n	8016348 <CalculateBeaconRxWindowConfig+0x34>
 801633a:	4b16      	ldr	r3, [pc, #88]	; (8016394 <CalculateBeaconRxWindowConfig+0x80>)
 801633c:	7b1b      	ldrb	r3, [r3, #12]
 801633e:	f003 0310 	and.w	r3, r3, #16
 8016342:	b2db      	uxtb	r3, r3
 8016344:	2b00      	cmp	r3, #0
 8016346:	d020      	beq.n	801638a <CalculateBeaconRxWindowConfig+0x76>
    {
        // Apply the symbol timeout only if we have acquired the beacon
        // Otherwise, take the window enlargement into account
        // Read beacon datarate
        getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 8016348:	2332      	movs	r3, #50	; 0x32
 801634a:	743b      	strb	r3, [r7, #16]
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 801634c:	4b11      	ldr	r3, [pc, #68]	; (8016394 <CalculateBeaconRxWindowConfig+0x80>)
 801634e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016352:	781b      	ldrb	r3, [r3, #0]
 8016354:	f107 0210 	add.w	r2, r7, #16
 8016358:	4611      	mov	r1, r2
 801635a:	4618      	mov	r0, r3
 801635c:	f003 fbf4 	bl	8019b48 <RegionGetPhyParam>
 8016360:	4603      	mov	r3, r0
 8016362:	60fb      	str	r3, [r7, #12]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        // Calculate downlink symbols
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8016364:	4b0b      	ldr	r3, [pc, #44]	; (8016394 <CalculateBeaconRxWindowConfig+0x80>)
 8016366:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801636a:	7818      	ldrb	r0, [r3, #0]
                                        ( int8_t )phyParam.Value, // datarate
 801636c:	68fb      	ldr	r3, [r7, #12]
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 801636e:	b259      	sxtb	r1, r3
                                        Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 8016370:	4b08      	ldr	r3, [pc, #32]	; (8016394 <CalculateBeaconRxWindowConfig+0x80>)
 8016372:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8016376:	791a      	ldrb	r2, [r3, #4]
                                        Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError,
 8016378:	4b06      	ldr	r3, [pc, #24]	; (8016394 <CalculateBeaconRxWindowConfig+0x80>)
 801637a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 801637e:	681c      	ldr	r4, [r3, #0]
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	9300      	str	r3, [sp, #0]
 8016384:	4623      	mov	r3, r4
 8016386:	f003 fc56 	bl	8019c36 <RegionComputeRxWindowParameters>
                                        Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
                                        maxRxError,
                                        rxConfig );
    }
#endif /* LORAMAC_VERSION */
}
 801638a:	bf00      	nop
 801638c:	371c      	adds	r7, #28
 801638e:	46bd      	mov	sp, r7
 8016390:	bd90      	pop	{r4, r7, pc}
 8016392:	bf00      	nop
 8016394:	2000219c 	.word	0x2000219c

08016398 <RxBeaconSetup>:
 * \param [in] activateDefaultChannel Set to true, if the function shall setup the default channel
 *
 * \param [in] symbolTimeout Symbol timeout
 */
static void RxBeaconSetup( TimerTime_t rxTime, bool activateDefaultChannel, uint16_t symbolTimeout )
{
 8016398:	b580      	push	{r7, lr}
 801639a:	b086      	sub	sp, #24
 801639c:	af00      	add	r7, sp, #0
 801639e:	6078      	str	r0, [r7, #4]
 80163a0:	460b      	mov	r3, r1
 80163a2:	70fb      	strb	r3, [r7, #3]
 80163a4:	4613      	mov	r3, r2
 80163a6:	803b      	strh	r3, [r7, #0]
    RxBeaconSetup_t rxBeaconSetup;
    uint32_t frequency = 0;
 80163a8:	2300      	movs	r3, #0
 80163aa:	617b      	str	r3, [r7, #20]

    if( activateDefaultChannel == true )
 80163ac:	78fb      	ldrb	r3, [r7, #3]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d005      	beq.n	80163be <RxBeaconSetup+0x26>
    {
        // This is the default frequency in case we don't know when the next
        // beacon will be transmitted. We select channel 0 as default.
        frequency = CalcDownlinkFrequency( 0, true );
 80163b2:	2101      	movs	r1, #1
 80163b4:	2000      	movs	r0, #0
 80163b6:	f7ff ff2d 	bl	8016214 <CalcDownlinkFrequency>
 80163ba:	6178      	str	r0, [r7, #20]
 80163bc:	e00a      	b.n	80163d4 <RxBeaconSetup+0x3c>
    }
    else
    {
        // This is the frequency according to the channel plan
        frequency = CalcDownlinkChannelAndFrequency( 0, Ctx.BeaconCtx.BeaconTime.Seconds + ( CLASSB_BEACON_INTERVAL / 1000 ),
 80163be:	4b27      	ldr	r3, [pc, #156]	; (801645c <RxBeaconSetup+0xc4>)
 80163c0:	691b      	ldr	r3, [r3, #16]
 80163c2:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80163c6:	2301      	movs	r3, #1
 80163c8:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 80163cc:	2000      	movs	r0, #0
 80163ce:	f7ff ff45 	bl	801625c <CalcDownlinkChannelAndFrequency>
 80163d2:	6178      	str	r0, [r7, #20]
                                                     CLASSB_BEACON_INTERVAL, true );
    }

    if( ClassBNvm->BeaconCtx.Ctrl.CustomFreq == 1 )
 80163d4:	4b22      	ldr	r3, [pc, #136]	; (8016460 <RxBeaconSetup+0xc8>)
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	7b1b      	ldrb	r3, [r3, #12]
 80163da:	f003 0301 	and.w	r3, r3, #1
 80163de:	b2db      	uxtb	r3, r3
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d003      	beq.n	80163ec <RxBeaconSetup+0x54>
    {
        // Set the frequency from the BeaconFreqReq
        frequency = ClassBNvm->BeaconCtx.Frequency;
 80163e4:	4b1e      	ldr	r3, [pc, #120]	; (8016460 <RxBeaconSetup+0xc8>)
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	691b      	ldr	r3, [r3, #16]
 80163ea:	617b      	str	r3, [r7, #20]
    }

    if( Ctx.BeaconCtx.Ctrl.BeaconChannelSet == 1 )
 80163ec:	4b1b      	ldr	r3, [pc, #108]	; (801645c <RxBeaconSetup+0xc4>)
 80163ee:	7b1b      	ldrb	r3, [r3, #12]
 80163f0:	f003 0308 	and.w	r3, r3, #8
 80163f4:	b2db      	uxtb	r3, r3
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d00c      	beq.n	8016414 <RxBeaconSetup+0x7c>
    {
        // Set the frequency which was provided by BeaconTimingAns MAC command
        Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 0;
 80163fa:	4a18      	ldr	r2, [pc, #96]	; (801645c <RxBeaconSetup+0xc4>)
 80163fc:	7b13      	ldrb	r3, [r2, #12]
 80163fe:	f36f 03c3 	bfc	r3, #3, #1
 8016402:	7313      	strb	r3, [r2, #12]
        frequency = CalcDownlinkFrequency( Ctx.BeaconCtx.BeaconTimingChannel, true );
 8016404:	4b15      	ldr	r3, [pc, #84]	; (801645c <RxBeaconSetup+0xc4>)
 8016406:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801640a:	2101      	movs	r1, #1
 801640c:	4618      	mov	r0, r3
 801640e:	f7ff ff01 	bl	8016214 <CalcDownlinkFrequency>
 8016412:	6178      	str	r0, [r7, #20]
    }

    rxBeaconSetup.SymbolTimeout = symbolTimeout;
 8016414:	883b      	ldrh	r3, [r7, #0]
 8016416:	813b      	strh	r3, [r7, #8]
    rxBeaconSetup.RxTime = rxTime;
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	60fb      	str	r3, [r7, #12]
    rxBeaconSetup.Frequency = frequency;
 801641c:	697b      	ldr	r3, [r7, #20]
 801641e:	613b      	str	r3, [r7, #16]

    RegionRxBeaconSetup( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &rxBeaconSetup, &Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 8016420:	4b0e      	ldr	r3, [pc, #56]	; (801645c <RxBeaconSetup+0xc4>)
 8016422:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016426:	7818      	ldrb	r0, [r3, #0]
 8016428:	4b0c      	ldr	r3, [pc, #48]	; (801645c <RxBeaconSetup+0xc4>)
 801642a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801642e:	1d1a      	adds	r2, r3, #4
 8016430:	f107 0308 	add.w	r3, r7, #8
 8016434:	4619      	mov	r1, r3
 8016436:	f003 fd0f 	bl	8019e58 <RegionRxBeaconSetup>

    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Frequency = frequency;
 801643a:	4b08      	ldr	r3, [pc, #32]	; (801645c <RxBeaconSetup+0xc4>)
 801643c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016440:	697a      	ldr	r2, [r7, #20]
 8016442:	611a      	str	r2, [r3, #16]
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Datarate = Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate;
 8016444:	4b05      	ldr	r3, [pc, #20]	; (801645c <RxBeaconSetup+0xc4>)
 8016446:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801644a:	4b04      	ldr	r3, [pc, #16]	; (801645c <RxBeaconSetup+0xc4>)
 801644c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016450:	7912      	ldrb	r2, [r2, #4]
 8016452:	751a      	strb	r2, [r3, #20]
}
 8016454:	bf00      	nop
 8016456:	3718      	adds	r7, #24
 8016458:	46bd      	mov	sp, r7
 801645a:	bd80      	pop	{r7, pc}
 801645c:	2000219c 	.word	0x2000219c
 8016460:	20002250 	.word	0x20002250

08016464 <CalcNextSlotTime>:
 * \param [out] timeOffset Time offset of the next slot, based on current time
 *
 * \retval [true: ping slot found, false: no ping slot found]
 */
static bool CalcNextSlotTime( uint16_t slotOffset, uint16_t pingPeriod, uint16_t pingNb, TimerTime_t* timeOffset )
{
 8016464:	b580      	push	{r7, lr}
 8016466:	b088      	sub	sp, #32
 8016468:	af00      	add	r7, sp, #0
 801646a:	607b      	str	r3, [r7, #4]
 801646c:	4603      	mov	r3, r0
 801646e:	81fb      	strh	r3, [r7, #14]
 8016470:	460b      	mov	r3, r1
 8016472:	81bb      	strh	r3, [r7, #12]
 8016474:	4613      	mov	r3, r2
 8016476:	817b      	strh	r3, [r7, #10]
    uint8_t currentPingSlot = 0;
 8016478:	2300      	movs	r3, #0
 801647a:	77fb      	strb	r3, [r7, #31]
    TimerTime_t slotTime = 0;
 801647c:	2300      	movs	r3, #0
 801647e:	61bb      	str	r3, [r7, #24]
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8016480:	f00a f972 	bl	8020768 <UTIL_TIMER_GetCurrentTime>
 8016484:	6178      	str	r0, [r7, #20]

    // Calculate the point in time of the last beacon even if we missed it
    slotTime = ( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) % CLASSB_BEACON_INTERVAL );
 8016486:	4b38      	ldr	r3, [pc, #224]	; (8016568 <CalcNextSlotTime+0x104>)
 8016488:	3318      	adds	r3, #24
 801648a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801648e:	f009 fb3d 	bl	801fb0c <SysTimeToMs>
 8016492:	4602      	mov	r2, r0
 8016494:	697b      	ldr	r3, [r7, #20]
 8016496:	1a9b      	subs	r3, r3, r2
 8016498:	4a34      	ldr	r2, [pc, #208]	; (801656c <CalcNextSlotTime+0x108>)
 801649a:	fba2 1203 	umull	r1, r2, r2, r3
 801649e:	0b52      	lsrs	r2, r2, #13
 80164a0:	f44f 31fa 	mov.w	r1, #128000	; 0x1f400
 80164a4:	fb01 f202 	mul.w	r2, r1, r2
 80164a8:	1a9b      	subs	r3, r3, r2
 80164aa:	61bb      	str	r3, [r7, #24]
    slotTime = currentTime - slotTime;
 80164ac:	697a      	ldr	r2, [r7, #20]
 80164ae:	69bb      	ldr	r3, [r7, #24]
 80164b0:	1ad3      	subs	r3, r2, r3
 80164b2:	61bb      	str	r3, [r7, #24]

    // Add the reserved time and the ping offset
    slotTime += CLASSB_BEACON_RESERVED;
 80164b4:	69bb      	ldr	r3, [r7, #24]
 80164b6:	f603 0348 	addw	r3, r3, #2120	; 0x848
 80164ba:	61bb      	str	r3, [r7, #24]
    slotTime += slotOffset * CLASSB_PING_SLOT_WINDOW;
 80164bc:	89fa      	ldrh	r2, [r7, #14]
 80164be:	4613      	mov	r3, r2
 80164c0:	011b      	lsls	r3, r3, #4
 80164c2:	1a9b      	subs	r3, r3, r2
 80164c4:	005b      	lsls	r3, r3, #1
 80164c6:	461a      	mov	r2, r3
 80164c8:	69bb      	ldr	r3, [r7, #24]
 80164ca:	4413      	add	r3, r2
 80164cc:	61bb      	str	r3, [r7, #24]

    if( slotTime < currentTime )
 80164ce:	69ba      	ldr	r2, [r7, #24]
 80164d0:	697b      	ldr	r3, [r7, #20]
 80164d2:	429a      	cmp	r2, r3
 80164d4:	d219      	bcs.n	801650a <CalcNextSlotTime+0xa6>
    {
        currentPingSlot = ( ( currentTime - slotTime ) /
 80164d6:	697a      	ldr	r2, [r7, #20]
 80164d8:	69bb      	ldr	r3, [r7, #24]
 80164da:	1ad1      	subs	r1, r2, r3
                          ( pingPeriod * CLASSB_PING_SLOT_WINDOW ) ) + 1;
 80164dc:	89ba      	ldrh	r2, [r7, #12]
 80164de:	4613      	mov	r3, r2
 80164e0:	011b      	lsls	r3, r3, #4
 80164e2:	1a9b      	subs	r3, r3, r2
 80164e4:	005b      	lsls	r3, r3, #1
        currentPingSlot = ( ( currentTime - slotTime ) /
 80164e6:	fbb1 f3f3 	udiv	r3, r1, r3
                          ( pingPeriod * CLASSB_PING_SLOT_WINDOW ) ) + 1;
 80164ea:	b2db      	uxtb	r3, r3
        currentPingSlot = ( ( currentTime - slotTime ) /
 80164ec:	3301      	adds	r3, #1
 80164ee:	77fb      	strb	r3, [r7, #31]
        slotTime += ( ( TimerTime_t )( currentPingSlot * pingPeriod ) *
 80164f0:	7ffb      	ldrb	r3, [r7, #31]
 80164f2:	89ba      	ldrh	r2, [r7, #12]
 80164f4:	fb02 f303 	mul.w	r3, r2, r3
 80164f8:	461a      	mov	r2, r3
 80164fa:	4613      	mov	r3, r2
 80164fc:	011b      	lsls	r3, r3, #4
 80164fe:	1a9b      	subs	r3, r3, r2
 8016500:	005b      	lsls	r3, r3, #1
 8016502:	461a      	mov	r2, r3
 8016504:	69bb      	ldr	r3, [r7, #24]
 8016506:	4413      	add	r3, r2
 8016508:	61bb      	str	r3, [r7, #24]
                    CLASSB_PING_SLOT_WINDOW );
    }

    if( currentPingSlot < pingNb )
 801650a:	7ffb      	ldrb	r3, [r7, #31]
 801650c:	b29b      	uxth	r3, r3
 801650e:	897a      	ldrh	r2, [r7, #10]
 8016510:	429a      	cmp	r2, r3
 8016512:	d923      	bls.n	801655c <CalcNextSlotTime+0xf8>
    {
        if( slotTime <= ( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - CLASSB_BEACON_GUARD - CLASSB_PING_SLOT_WINDOW ) )
 8016514:	4b14      	ldr	r3, [pc, #80]	; (8016568 <CalcNextSlotTime+0x104>)
 8016516:	3320      	adds	r3, #32
 8016518:	e893 0003 	ldmia.w	r3, {r0, r1}
 801651c:	f009 faf6 	bl	801fb0c <SysTimeToMs>
 8016520:	4603      	mov	r3, r0
 8016522:	f6a3 33d6 	subw	r3, r3, #3030	; 0xbd6
 8016526:	69ba      	ldr	r2, [r7, #24]
 8016528:	429a      	cmp	r2, r3
 801652a:	d817      	bhi.n	801655c <CalcNextSlotTime+0xf8>
        {
            // Calculate the relative ping slot time
            slotTime -= currentTime;
 801652c:	69ba      	ldr	r2, [r7, #24]
 801652e:	697b      	ldr	r3, [r7, #20]
 8016530:	1ad3      	subs	r3, r2, r3
 8016532:	61bb      	str	r3, [r7, #24]
            slotTime -= Radio.GetWakeupTime( );
 8016534:	4b0e      	ldr	r3, [pc, #56]	; (8016570 <CalcNextSlotTime+0x10c>)
 8016536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016538:	4798      	blx	r3
 801653a:	4602      	mov	r2, r0
 801653c:	69bb      	ldr	r3, [r7, #24]
 801653e:	1a9b      	subs	r3, r3, r2
 8016540:	61bb      	str	r3, [r7, #24]
            slotTime = TimerTempCompensation( slotTime, Ctx.BeaconCtx.Temperature );
 8016542:	4b09      	ldr	r3, [pc, #36]	; (8016568 <CalcNextSlotTime+0x104>)
 8016544:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016548:	4619      	mov	r1, r3
 801654a:	69b8      	ldr	r0, [r7, #24]
 801654c:	f7ff fd78 	bl	8016040 <TimerTempCompensation>
 8016550:	61b8      	str	r0, [r7, #24]
            *timeOffset = slotTime;
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	69ba      	ldr	r2, [r7, #24]
 8016556:	601a      	str	r2, [r3, #0]
            return true;
 8016558:	2301      	movs	r3, #1
 801655a:	e000      	b.n	801655e <CalcNextSlotTime+0xfa>
        }
    }
    return false;
 801655c:	2300      	movs	r3, #0
}
 801655e:	4618      	mov	r0, r3
 8016560:	3720      	adds	r7, #32
 8016562:	46bd      	mov	sp, r7
 8016564:	bd80      	pop	{r7, pc}
 8016566:	bf00      	nop
 8016568:	2000219c 	.word	0x2000219c
 801656c:	10624dd3 	.word	0x10624dd3
 8016570:	08021e08 	.word	0x08021e08

08016574 <BeaconCrc>:
 * \param [in] length Length of the data
 *
 * \retval CRC
 */
static uint16_t BeaconCrc( uint8_t *buffer, uint16_t length )
{
 8016574:	b480      	push	{r7}
 8016576:	b085      	sub	sp, #20
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
 801657c:	460b      	mov	r3, r1
 801657e:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint16_t crc = 0x0000;
 8016580:	2300      	movs	r3, #0
 8016582:	81fb      	strh	r3, [r7, #14]

    if( buffer == NULL )
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d101      	bne.n	801658e <BeaconCrc+0x1a>
    {
        return 0;
 801658a:	2300      	movs	r3, #0
 801658c:	e030      	b.n	80165f0 <BeaconCrc+0x7c>
    }

    for( uint16_t i = 0; i < length; ++i )
 801658e:	2300      	movs	r3, #0
 8016590:	81bb      	strh	r3, [r7, #12]
 8016592:	e028      	b.n	80165e6 <BeaconCrc+0x72>
    {
        crc ^= ( uint16_t ) buffer[i] << 8;
 8016594:	89bb      	ldrh	r3, [r7, #12]
 8016596:	687a      	ldr	r2, [r7, #4]
 8016598:	4413      	add	r3, r2
 801659a:	781b      	ldrb	r3, [r3, #0]
 801659c:	021b      	lsls	r3, r3, #8
 801659e:	b21a      	sxth	r2, r3
 80165a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80165a4:	4053      	eors	r3, r2
 80165a6:	b21b      	sxth	r3, r3
 80165a8:	81fb      	strh	r3, [r7, #14]
        for( uint16_t j = 0; j < 8; ++j )
 80165aa:	2300      	movs	r3, #0
 80165ac:	817b      	strh	r3, [r7, #10]
 80165ae:	e014      	b.n	80165da <BeaconCrc+0x66>
        {
            crc = ( crc & 0x8000 ) ? ( crc << 1 ) ^ polynom : ( crc << 1 );
 80165b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	da09      	bge.n	80165cc <BeaconCrc+0x58>
 80165b8:	89fb      	ldrh	r3, [r7, #14]
 80165ba:	005b      	lsls	r3, r3, #1
 80165bc:	b21a      	sxth	r2, r3
 80165be:	f241 0321 	movw	r3, #4129	; 0x1021
 80165c2:	b21b      	sxth	r3, r3
 80165c4:	4053      	eors	r3, r2
 80165c6:	b21b      	sxth	r3, r3
 80165c8:	b29b      	uxth	r3, r3
 80165ca:	e002      	b.n	80165d2 <BeaconCrc+0x5e>
 80165cc:	89fb      	ldrh	r3, [r7, #14]
 80165ce:	005b      	lsls	r3, r3, #1
 80165d0:	b29b      	uxth	r3, r3
 80165d2:	81fb      	strh	r3, [r7, #14]
        for( uint16_t j = 0; j < 8; ++j )
 80165d4:	897b      	ldrh	r3, [r7, #10]
 80165d6:	3301      	adds	r3, #1
 80165d8:	817b      	strh	r3, [r7, #10]
 80165da:	897b      	ldrh	r3, [r7, #10]
 80165dc:	2b07      	cmp	r3, #7
 80165de:	d9e7      	bls.n	80165b0 <BeaconCrc+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 80165e0:	89bb      	ldrh	r3, [r7, #12]
 80165e2:	3301      	adds	r3, #1
 80165e4:	81bb      	strh	r3, [r7, #12]
 80165e6:	89ba      	ldrh	r2, [r7, #12]
 80165e8:	887b      	ldrh	r3, [r7, #2]
 80165ea:	429a      	cmp	r2, r3
 80165ec:	d3d2      	bcc.n	8016594 <BeaconCrc+0x20>
        }
    }

    return crc;
 80165ee:	89fb      	ldrh	r3, [r7, #14]
}
 80165f0:	4618      	mov	r0, r3
 80165f2:	3714      	adds	r7, #20
 80165f4:	46bd      	mov	sp, r7
 80165f6:	bc80      	pop	{r7}
 80165f8:	4770      	bx	lr

080165fa <GetTemperature>:

static void GetTemperature( LoRaMacClassBCallback_t *callbacks, BeaconContext_t *beaconCtx )
{
 80165fa:	b580      	push	{r7, lr}
 80165fc:	b082      	sub	sp, #8
 80165fe:	af00      	add	r7, sp, #0
 8016600:	6078      	str	r0, [r7, #4]
 8016602:	6039      	str	r1, [r7, #0]
    // Measure temperature, if available
    if( ( callbacks != NULL ) && ( callbacks->GetTemperatureLevel != NULL ) )
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d00a      	beq.n	8016620 <GetTemperature+0x26>
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d006      	beq.n	8016620 <GetTemperature+0x26>
    {
        beaconCtx->Temperature = callbacks->GetTemperatureLevel( );
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	4798      	blx	r3
 8016618:	4603      	mov	r3, r0
 801661a:	461a      	mov	r2, r3
 801661c:	683b      	ldr	r3, [r7, #0]
 801661e:	805a      	strh	r2, [r3, #2]
    }
}
 8016620:	bf00      	nop
 8016622:	3708      	adds	r7, #8
 8016624:	46bd      	mov	sp, r7
 8016626:	bd80      	pop	{r7, pc}

08016628 <InitClassB>:

static void InitClassB( void )
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b084      	sub	sp, #16
 801662c:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Init events
    LoRaMacClassBEvents.Value = 0;
 801662e:	4b1f      	ldr	r3, [pc, #124]	; (80166ac <InitClassB+0x84>)
 8016630:	2200      	movs	r2, #0
 8016632:	601a      	str	r2, [r3, #0]

    // Init variables to default
    memset1( ( uint8_t* ) ClassBNvm, 0, sizeof( LoRaMacClassBNvmData_t ) );
 8016634:	4b1e      	ldr	r3, [pc, #120]	; (80166b0 <InitClassB+0x88>)
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	2218      	movs	r2, #24
 801663a:	2100      	movs	r1, #0
 801663c:	4618      	mov	r0, r3
 801663e:	f005 fe69 	bl	801c314 <memset1>
    memset1( ( uint8_t* ) &Ctx.PingSlotCtx, 0, sizeof( PingSlotContext_t ) );
 8016642:	220c      	movs	r2, #12
 8016644:	2100      	movs	r1, #0
 8016646:	481b      	ldr	r0, [pc, #108]	; (80166b4 <InitClassB+0x8c>)
 8016648:	f005 fe64 	bl	801c314 <memset1>
    memset1( ( uint8_t* ) &Ctx.BeaconCtx, 0, sizeof( BeaconContext_t ) );
 801664c:	2234      	movs	r2, #52	; 0x34
 801664e:	2100      	movs	r1, #0
 8016650:	4819      	ldr	r0, [pc, #100]	; (80166b8 <InitClassB+0x90>)
 8016652:	f005 fe5f 	bl	801c314 <memset1>

    // Setup default temperature
    Ctx.BeaconCtx.Temperature = 25.0;
 8016656:	4b17      	ldr	r3, [pc, #92]	; (80166b4 <InitClassB+0x8c>)
 8016658:	2219      	movs	r2, #25
 801665a:	81da      	strh	r2, [r3, #14]
    GetTemperature( &Ctx.LoRaMacClassBCallbacks, &Ctx.BeaconCtx );
 801665c:	4916      	ldr	r1, [pc, #88]	; (80166b8 <InitClassB+0x90>)
 801665e:	4817      	ldr	r0, [pc, #92]	; (80166bc <InitClassB+0x94>)
 8016660:	f7ff ffcb 	bl	80165fa <GetTemperature>

    // Setup default ping slot datarate
    getPhy.Attribute = PHY_PING_SLOT_CHANNEL_DR;
 8016664:	2336      	movs	r3, #54	; 0x36
 8016666:	723b      	strb	r3, [r7, #8]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8016668:	4b12      	ldr	r3, [pc, #72]	; (80166b4 <InitClassB+0x8c>)
 801666a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801666e:	781b      	ldrb	r3, [r3, #0]
 8016670:	f107 0208 	add.w	r2, r7, #8
 8016674:	4611      	mov	r1, r2
 8016676:	4618      	mov	r0, r3
 8016678:	f003 fa66 	bl	8019b48 <RegionGetPhyParam>
 801667c:	4603      	mov	r3, r0
 801667e:	607b      	str	r3, [r7, #4]
    ClassBNvm->PingSlotCtx.Datarate = ( int8_t )( phyParam.Value );
 8016680:	687a      	ldr	r2, [r7, #4]
 8016682:	4b0b      	ldr	r3, [pc, #44]	; (80166b0 <InitClassB+0x88>)
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	b252      	sxtb	r2, r2
 8016688:	721a      	strb	r2, [r3, #8]
    // Setup default FPending bit
    ClassBNvm->PingSlotCtx.FPendingSet = 0;
#endif /* LORAMAC_VERSION */

    // Setup default states
    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 801668a:	4b0a      	ldr	r3, [pc, #40]	; (80166b4 <InitClassB+0x8c>)
 801668c:	2200      	movs	r2, #0
 801668e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8016692:	4b08      	ldr	r3, [pc, #32]	; (80166b4 <InitClassB+0x8c>)
 8016694:	2200      	movs	r2, #0
 8016696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 801669a:	4b06      	ldr	r3, [pc, #24]	; (80166b4 <InitClassB+0x8c>)
 801669c:	2200      	movs	r2, #0
 801669e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 80166a2:	bf00      	nop
 80166a4:	3710      	adds	r7, #16
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bd80      	pop	{r7, pc}
 80166aa:	bf00      	nop
 80166ac:	20002198 	.word	0x20002198
 80166b0:	20002250 	.word	0x20002250
 80166b4:	2000219c 	.word	0x2000219c
 80166b8:	200021a8 	.word	0x200021a8
 80166bc:	20002228 	.word	0x20002228

080166c0 <InitClassBDefaults>:

static void InitClassBDefaults( void )
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b086      	sub	sp, #24
 80166c4:	af00      	add	r7, sp, #0
    // This function shall reset the Class B settings to default,
    // but should keep important configurations
    LoRaMacClassBBeaconNvmData_t beaconCtx = ClassBNvm->BeaconCtx;
 80166c6:	4b1b      	ldr	r3, [pc, #108]	; (8016734 <InitClassBDefaults+0x74>)
 80166c8:	681a      	ldr	r2, [r3, #0]
 80166ca:	f107 0310 	add.w	r3, r7, #16
 80166ce:	320c      	adds	r2, #12
 80166d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80166d4:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacClassBPingSlotNvmData_t pingSlotCtx = ClassBNvm->PingSlotCtx;
 80166d8:	4b16      	ldr	r3, [pc, #88]	; (8016734 <InitClassBDefaults+0x74>)
 80166da:	681a      	ldr	r2, [r3, #0]
 80166dc:	1d3b      	adds	r3, r7, #4
 80166de:	ca07      	ldmia	r2, {r0, r1, r2}
 80166e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    InitClassB( );
 80166e4:	f7ff ffa0 	bl	8016628 <InitClassB>

    // Parameters from BeaconFreqReq
    ClassBNvm->BeaconCtx.Frequency = beaconCtx.Frequency;
 80166e8:	4b12      	ldr	r3, [pc, #72]	; (8016734 <InitClassBDefaults+0x74>)
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	697a      	ldr	r2, [r7, #20]
 80166ee:	611a      	str	r2, [r3, #16]
    ClassBNvm->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 80166f0:	4b10      	ldr	r3, [pc, #64]	; (8016734 <InitClassBDefaults+0x74>)
 80166f2:	681a      	ldr	r2, [r3, #0]
 80166f4:	7c3b      	ldrb	r3, [r7, #16]
 80166f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80166fa:	b2d9      	uxtb	r1, r3
 80166fc:	7b13      	ldrb	r3, [r2, #12]
 80166fe:	f361 0300 	bfi	r3, r1, #0, #1
 8016702:	7313      	strb	r3, [r2, #12]

    // Parameters from PingSlotChannelReq
    ClassBNvm->PingSlotCtx.Ctrl.CustomFreq = pingSlotCtx.Ctrl.CustomFreq;
 8016704:	4b0b      	ldr	r3, [pc, #44]	; (8016734 <InitClassBDefaults+0x74>)
 8016706:	681a      	ldr	r2, [r3, #0]
 8016708:	793b      	ldrb	r3, [r7, #4]
 801670a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801670e:	b2d9      	uxtb	r1, r3
 8016710:	7813      	ldrb	r3, [r2, #0]
 8016712:	f361 0341 	bfi	r3, r1, #1, #1
 8016716:	7013      	strb	r3, [r2, #0]
    ClassBNvm->PingSlotCtx.Frequency = pingSlotCtx.Frequency;
 8016718:	4b06      	ldr	r3, [pc, #24]	; (8016734 <InitClassBDefaults+0x74>)
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	68ba      	ldr	r2, [r7, #8]
 801671e:	605a      	str	r2, [r3, #4]
    ClassBNvm->PingSlotCtx.Datarate = pingSlotCtx.Datarate;
 8016720:	4b04      	ldr	r3, [pc, #16]	; (8016734 <InitClassBDefaults+0x74>)
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8016728:	721a      	strb	r2, [r3, #8]
}
 801672a:	bf00      	nop
 801672c:	3718      	adds	r7, #24
 801672e:	46bd      	mov	sp, r7
 8016730:	bd80      	pop	{r7, pc}
 8016732:	bf00      	nop
 8016734:	20002250 	.word	0x20002250

08016738 <EnlargeWindowTimeout>:

static void EnlargeWindowTimeout( void )
{
 8016738:	b480      	push	{r7}
 801673a:	af00      	add	r7, sp, #0
    // Update beacon movement
    Ctx.BeaconCtx.BeaconWindowMovement *= CLASSB_WINDOW_MOVE_EXPANSION_FACTOR;
 801673c:	4b15      	ldr	r3, [pc, #84]	; (8016794 <EnlargeWindowTimeout+0x5c>)
 801673e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016740:	005b      	lsls	r3, r3, #1
 8016742:	4a14      	ldr	r2, [pc, #80]	; (8016794 <EnlargeWindowTimeout+0x5c>)
 8016744:	6313      	str	r3, [r2, #48]	; 0x30
    if( Ctx.BeaconCtx.BeaconWindowMovement > CLASSB_WINDOW_MOVE_EXPANSION_MAX )
 8016746:	4b13      	ldr	r3, [pc, #76]	; (8016794 <EnlargeWindowTimeout+0x5c>)
 8016748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801674a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801674e:	d903      	bls.n	8016758 <EnlargeWindowTimeout+0x20>
    {
        Ctx.BeaconCtx.BeaconWindowMovement = CLASSB_WINDOW_MOVE_EXPANSION_MAX;
 8016750:	4b10      	ldr	r3, [pc, #64]	; (8016794 <EnlargeWindowTimeout+0x5c>)
 8016752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016756:	631a      	str	r2, [r3, #48]	; 0x30
    }
    // Update symbol timeout
    Ctx.BeaconCtx.SymbolTimeout *= CLASSB_BEACON_SYMBOL_TO_EXPANSION_FACTOR;
 8016758:	4b0e      	ldr	r3, [pc, #56]	; (8016794 <EnlargeWindowTimeout+0x5c>)
 801675a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801675c:	005b      	lsls	r3, r3, #1
 801675e:	b29a      	uxth	r2, r3
 8016760:	4b0c      	ldr	r3, [pc, #48]	; (8016794 <EnlargeWindowTimeout+0x5c>)
 8016762:	859a      	strh	r2, [r3, #44]	; 0x2c
    if( Ctx.BeaconCtx.SymbolTimeout > CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX )
 8016764:	4b0b      	ldr	r3, [pc, #44]	; (8016794 <EnlargeWindowTimeout+0x5c>)
 8016766:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8016768:	2bff      	cmp	r3, #255	; 0xff
 801676a:	d902      	bls.n	8016772 <EnlargeWindowTimeout+0x3a>
    {
        Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX;
 801676c:	4b09      	ldr	r3, [pc, #36]	; (8016794 <EnlargeWindowTimeout+0x5c>)
 801676e:	22ff      	movs	r2, #255	; 0xff
 8016770:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
    Ctx.PingSlotCtx.SymbolTimeout *= CLASSB_BEACON_SYMBOL_TO_EXPANSION_FACTOR;
 8016772:	4b08      	ldr	r3, [pc, #32]	; (8016794 <EnlargeWindowTimeout+0x5c>)
 8016774:	88db      	ldrh	r3, [r3, #6]
 8016776:	005b      	lsls	r3, r3, #1
 8016778:	b29a      	uxth	r2, r3
 801677a:	4b06      	ldr	r3, [pc, #24]	; (8016794 <EnlargeWindowTimeout+0x5c>)
 801677c:	80da      	strh	r2, [r3, #6]
    if( Ctx.PingSlotCtx.SymbolTimeout > CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX )
 801677e:	4b05      	ldr	r3, [pc, #20]	; (8016794 <EnlargeWindowTimeout+0x5c>)
 8016780:	88db      	ldrh	r3, [r3, #6]
 8016782:	2b1e      	cmp	r3, #30
 8016784:	d902      	bls.n	801678c <EnlargeWindowTimeout+0x54>
    {
        Ctx.PingSlotCtx.SymbolTimeout = CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX;
 8016786:	4b03      	ldr	r3, [pc, #12]	; (8016794 <EnlargeWindowTimeout+0x5c>)
 8016788:	221e      	movs	r2, #30
 801678a:	80da      	strh	r2, [r3, #6]
    }
}
 801678c:	bf00      	nop
 801678e:	46bd      	mov	sp, r7
 8016790:	bc80      	pop	{r7}
 8016792:	4770      	bx	lr
 8016794:	2000219c 	.word	0x2000219c

08016798 <ResetWindowTimeout>:

static void ResetWindowTimeout( void )
{
 8016798:	b480      	push	{r7}
 801679a:	af00      	add	r7, sp, #0
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 801679c:	4b06      	ldr	r3, [pc, #24]	; (80167b8 <ResetWindowTimeout+0x20>)
 801679e:	2208      	movs	r2, #8
 80167a0:	859a      	strh	r2, [r3, #44]	; 0x2c
    Ctx.PingSlotCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 80167a2:	4b05      	ldr	r3, [pc, #20]	; (80167b8 <ResetWindowTimeout+0x20>)
 80167a4:	2208      	movs	r2, #8
 80167a6:	80da      	strh	r2, [r3, #6]
    Ctx.BeaconCtx.BeaconWindowMovement  = CLASSB_WINDOW_MOVE_DEFAULT;
 80167a8:	4b03      	ldr	r3, [pc, #12]	; (80167b8 <ResetWindowTimeout+0x20>)
 80167aa:	2202      	movs	r2, #2
 80167ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80167ae:	bf00      	nop
 80167b0:	46bd      	mov	sp, r7
 80167b2:	bc80      	pop	{r7}
 80167b4:	4770      	bx	lr
 80167b6:	bf00      	nop
 80167b8:	2000219c 	.word	0x2000219c

080167bc <CalcDelayForNextBeacon>:

static TimerTime_t CalcDelayForNextBeacon( TimerTime_t currentTime, TimerTime_t lastBeaconRx )
{
 80167bc:	b480      	push	{r7}
 80167be:	b085      	sub	sp, #20
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	6078      	str	r0, [r7, #4]
 80167c4:	6039      	str	r1, [r7, #0]
    TimerTime_t nextBeaconRxTime = 0;
 80167c6:	2300      	movs	r3, #0
 80167c8:	60fb      	str	r3, [r7, #12]

    // Calculate the point in time of the next beacon
    nextBeaconRxTime = ( ( currentTime - lastBeaconRx ) % CLASSB_BEACON_INTERVAL );
 80167ca:	687a      	ldr	r2, [r7, #4]
 80167cc:	683b      	ldr	r3, [r7, #0]
 80167ce:	1ad3      	subs	r3, r2, r3
 80167d0:	4a08      	ldr	r2, [pc, #32]	; (80167f4 <CalcDelayForNextBeacon+0x38>)
 80167d2:	fba2 1203 	umull	r1, r2, r2, r3
 80167d6:	0b52      	lsrs	r2, r2, #13
 80167d8:	f44f 31fa 	mov.w	r1, #128000	; 0x1f400
 80167dc:	fb01 f202 	mul.w	r2, r1, r2
 80167e0:	1a9b      	subs	r3, r3, r2
 80167e2:	60fb      	str	r3, [r7, #12]
    return ( CLASSB_BEACON_INTERVAL - nextBeaconRxTime );
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	f5c3 33fa 	rsb	r3, r3, #128000	; 0x1f400
}
 80167ea:	4618      	mov	r0, r3
 80167ec:	3714      	adds	r7, #20
 80167ee:	46bd      	mov	sp, r7
 80167f0:	bc80      	pop	{r7}
 80167f2:	4770      	bx	lr
 80167f4:	10624dd3 	.word	0x10624dd3

080167f8 <IndicateBeaconStatus>:

static void IndicateBeaconStatus( LoRaMacEventInfoStatus_t status )
{
 80167f8:	b480      	push	{r7}
 80167fa:	b083      	sub	sp, #12
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	4603      	mov	r3, r0
 8016800:	71fb      	strb	r3, [r7, #7]
    if( Ctx.BeaconCtx.Ctrl.ResumeBeaconing == 0 )
 8016802:	4b14      	ldr	r3, [pc, #80]	; (8016854 <IndicateBeaconStatus+0x5c>)
 8016804:	7b1b      	ldrb	r3, [r3, #12]
 8016806:	f003 0320 	and.w	r3, r3, #32
 801680a:	b2db      	uxtb	r3, r3
 801680c:	2b00      	cmp	r3, #0
 801680e:	d117      	bne.n	8016840 <IndicateBeaconStatus+0x48>
    {
        Ctx.LoRaMacClassBParams.MlmeIndication->MlmeIndication = MLME_BEACON;
 8016810:	4b10      	ldr	r3, [pc, #64]	; (8016854 <IndicateBeaconStatus+0x5c>)
 8016812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016816:	220b      	movs	r2, #11
 8016818:	701a      	strb	r2, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeIndication->Status = status;
 801681a:	4b0e      	ldr	r3, [pc, #56]	; (8016854 <IndicateBeaconStatus+0x5c>)
 801681c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016820:	79fa      	ldrb	r2, [r7, #7]
 8016822:	705a      	strb	r2, [r3, #1]
        Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeInd = 1;
 8016824:	4b0b      	ldr	r3, [pc, #44]	; (8016854 <IndicateBeaconStatus+0x5c>)
 8016826:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801682a:	7813      	ldrb	r3, [r2, #0]
 801682c:	f043 0308 	orr.w	r3, r3, #8
 8016830:	7013      	strb	r3, [r2, #0]

        Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MacDone = 1;
 8016832:	4b08      	ldr	r3, [pc, #32]	; (8016854 <IndicateBeaconStatus+0x5c>)
 8016834:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8016838:	7813      	ldrb	r3, [r2, #0]
 801683a:	f043 0320 	orr.w	r3, r3, #32
 801683e:	7013      	strb	r3, [r2, #0]
    }
    Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 0;
 8016840:	4a04      	ldr	r2, [pc, #16]	; (8016854 <IndicateBeaconStatus+0x5c>)
 8016842:	7b13      	ldrb	r3, [r2, #12]
 8016844:	f36f 1345 	bfc	r3, #5, #1
 8016848:	7313      	strb	r3, [r2, #12]
}
 801684a:	bf00      	nop
 801684c:	370c      	adds	r7, #12
 801684e:	46bd      	mov	sp, r7
 8016850:	bc80      	pop	{r7}
 8016852:	4770      	bx	lr
 8016854:	2000219c 	.word	0x2000219c

08016858 <ApplyGuardTime>:

static TimerTime_t ApplyGuardTime( TimerTime_t beaconEventTime )
{
 8016858:	b480      	push	{r7}
 801685a:	b085      	sub	sp, #20
 801685c:	af00      	add	r7, sp, #0
 801685e:	6078      	str	r0, [r7, #4]
    TimerTime_t timeGuard = beaconEventTime;
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	60fb      	str	r3, [r7, #12]

    if( timeGuard > CLASSB_BEACON_GUARD )
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801686a:	4293      	cmp	r3, r2
 801686c:	d903      	bls.n	8016876 <ApplyGuardTime+0x1e>
    {
        timeGuard -= CLASSB_BEACON_GUARD;
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8016874:	60fb      	str	r3, [r7, #12]
    }
    return timeGuard;
 8016876:	68fb      	ldr	r3, [r7, #12]
}
 8016878:	4618      	mov	r0, r3
 801687a:	3714      	adds	r7, #20
 801687c:	46bd      	mov	sp, r7
 801687e:	bc80      	pop	{r7}
 8016880:	4770      	bx	lr
	...

08016884 <UpdateBeaconState>:

static TimerTime_t UpdateBeaconState( LoRaMacEventInfoStatus_t status,
                                      TimerTime_t windowMovement, TimerTime_t currentTime )

{
 8016884:	b590      	push	{r4, r7, lr}
 8016886:	b089      	sub	sp, #36	; 0x24
 8016888:	af00      	add	r7, sp, #0
 801688a:	4603      	mov	r3, r0
 801688c:	6139      	str	r1, [r7, #16]
 801688e:	60fa      	str	r2, [r7, #12]
 8016890:	75fb      	strb	r3, [r7, #23]
    TimerTime_t beaconEventTime = 0;
 8016892:	2300      	movs	r3, #0
 8016894:	61fb      	str	r3, [r7, #28]

    // Calculate the next beacon RX time
    beaconEventTime = CalcDelayForNextBeacon( currentTime, SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) );
 8016896:	4b1f      	ldr	r3, [pc, #124]	; (8016914 <UpdateBeaconState+0x90>)
 8016898:	3318      	adds	r3, #24
 801689a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801689e:	f009 f935 	bl	801fb0c <SysTimeToMs>
 80168a2:	4603      	mov	r3, r0
 80168a4:	4619      	mov	r1, r3
 80168a6:	68f8      	ldr	r0, [r7, #12]
 80168a8:	f7ff ff88 	bl	80167bc <CalcDelayForNextBeacon>
 80168ac:	61f8      	str	r0, [r7, #28]
    Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( currentTime + beaconEventTime );
 80168ae:	68fa      	ldr	r2, [r7, #12]
 80168b0:	69fb      	ldr	r3, [r7, #28]
 80168b2:	441a      	add	r2, r3
 80168b4:	4c17      	ldr	r4, [pc, #92]	; (8016914 <UpdateBeaconState+0x90>)
 80168b6:	463b      	mov	r3, r7
 80168b8:	4611      	mov	r1, r2
 80168ba:	4618      	mov	r0, r3
 80168bc:	f009 f94e 	bl	801fb5c <SysTimeFromMs>
 80168c0:	f104 0320 	add.w	r3, r4, #32
 80168c4:	463a      	mov	r2, r7
 80168c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80168ca:	e883 0003 	stmia.w	r3, {r0, r1}

    // Take temperature compensation into account
    beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 80168ce:	4b11      	ldr	r3, [pc, #68]	; (8016914 <UpdateBeaconState+0x90>)
 80168d0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80168d4:	4619      	mov	r1, r3
 80168d6:	69f8      	ldr	r0, [r7, #28]
 80168d8:	f7ff fbb2 	bl	8016040 <TimerTempCompensation>
 80168dc:	61f8      	str	r0, [r7, #28]

    // Move the window
    if( beaconEventTime > windowMovement )
 80168de:	69fa      	ldr	r2, [r7, #28]
 80168e0:	693b      	ldr	r3, [r7, #16]
 80168e2:	429a      	cmp	r2, r3
 80168e4:	d903      	bls.n	80168ee <UpdateBeaconState+0x6a>
    {
        beaconEventTime -= windowMovement;
 80168e6:	69fa      	ldr	r2, [r7, #28]
 80168e8:	693b      	ldr	r3, [r7, #16]
 80168ea:	1ad3      	subs	r3, r2, r3
 80168ec:	61fb      	str	r3, [r7, #28]
    }
    Ctx.BeaconCtx.NextBeaconRxAdjusted = currentTime + beaconEventTime;
 80168ee:	68fa      	ldr	r2, [r7, #12]
 80168f0:	69fb      	ldr	r3, [r7, #28]
 80168f2:	4413      	add	r3, r2
 80168f4:	4a07      	ldr	r2, [pc, #28]	; (8016914 <UpdateBeaconState+0x90>)
 80168f6:	6293      	str	r3, [r2, #40]	; 0x28

    // Start the RX slot state machine for ping and multicast slots
    LoRaMacClassBStartRxSlots( );
 80168f8:	f001 fa02 	bl	8017d00 <LoRaMacClassBStartRxSlots>

    // Setup an MLME_BEACON indication to inform the upper layer
    IndicateBeaconStatus( status );
 80168fc:	7dfb      	ldrb	r3, [r7, #23]
 80168fe:	4618      	mov	r0, r3
 8016900:	f7ff ff7a 	bl	80167f8 <IndicateBeaconStatus>

    // Apply guard time
    return ApplyGuardTime( beaconEventTime );
 8016904:	69f8      	ldr	r0, [r7, #28]
 8016906:	f7ff ffa7 	bl	8016858 <ApplyGuardTime>
 801690a:	4603      	mov	r3, r0
}
 801690c:	4618      	mov	r0, r3
 801690e:	3724      	adds	r7, #36	; 0x24
 8016910:	46bd      	mov	sp, r7
 8016912:	bd90      	pop	{r4, r7, pc}
 8016914:	2000219c 	.word	0x2000219c

08016918 <CalcPingNb>:

static uint8_t CalcPingNb( uint16_t periodicity )
{
 8016918:	b480      	push	{r7}
 801691a:	b083      	sub	sp, #12
 801691c:	af00      	add	r7, sp, #0
 801691e:	4603      	mov	r3, r0
 8016920:	80fb      	strh	r3, [r7, #6]
    return 128 / ( 1 << periodicity );
 8016922:	88fb      	ldrh	r3, [r7, #6]
 8016924:	2280      	movs	r2, #128	; 0x80
 8016926:	fa42 f303 	asr.w	r3, r2, r3
 801692a:	b2db      	uxtb	r3, r3
}
 801692c:	4618      	mov	r0, r3
 801692e:	370c      	adds	r7, #12
 8016930:	46bd      	mov	sp, r7
 8016932:	bc80      	pop	{r7}
 8016934:	4770      	bx	lr

08016936 <CalcPingPeriod>:

static uint16_t CalcPingPeriod( uint8_t pingNb )
{
 8016936:	b480      	push	{r7}
 8016938:	b083      	sub	sp, #12
 801693a:	af00      	add	r7, sp, #0
 801693c:	4603      	mov	r3, r0
 801693e:	71fb      	strb	r3, [r7, #7]
    return CLASSB_BEACON_WINDOW_SLOTS / pingNb;
 8016940:	79fb      	ldrb	r3, [r7, #7]
 8016942:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016946:	fb92 f3f3 	sdiv	r3, r2, r3
 801694a:	b29b      	uxth	r3, r3
}
 801694c:	4618      	mov	r0, r3
 801694e:	370c      	adds	r7, #12
 8016950:	46bd      	mov	sp, r7
 8016952:	bc80      	pop	{r7}
 8016954:	4770      	bx	lr
	...

08016958 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8016958:	b5b0      	push	{r4, r5, r7, lr}
 801695a:	b086      	sub	sp, #24
 801695c:	af02      	add	r7, sp, #8
 801695e:	60f8      	str	r0, [r7, #12]
 8016960:	60b9      	str	r1, [r7, #8]
 8016962:	607a      	str	r2, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    // Assign non-volatile context
    if( nvm == NULL )
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d032      	beq.n	80169d0 <LoRaMacClassBInit+0x78>
    {
        return;
    }
    ClassBNvm = nvm;
 801696a:	4a1b      	ldr	r2, [pc, #108]	; (80169d8 <LoRaMacClassBInit+0x80>)
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	6013      	str	r3, [r2, #0]

    // Store callbacks
    Ctx.LoRaMacClassBCallbacks = *callbacks;
 8016970:	4b1a      	ldr	r3, [pc, #104]	; (80169dc <LoRaMacClassBInit+0x84>)
 8016972:	68ba      	ldr	r2, [r7, #8]
 8016974:	338c      	adds	r3, #140	; 0x8c
 8016976:	e892 0003 	ldmia.w	r2, {r0, r1}
 801697a:	e883 0003 	stmia.w	r3, {r0, r1}

    // Store parameter pointers
    Ctx.LoRaMacClassBParams = *classBParams;
 801697e:	4b17      	ldr	r3, [pc, #92]	; (80169dc <LoRaMacClassBInit+0x84>)
 8016980:	68fa      	ldr	r2, [r7, #12]
 8016982:	f103 0494 	add.w	r4, r3, #148	; 0x94
 8016986:	4615      	mov	r5, r2
 8016988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801698a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801698c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016990:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Initialize timers
    TimerInit( &Ctx.BeaconTimer, LoRaMacClassBBeaconTimerEvent );
 8016994:	2300      	movs	r3, #0
 8016996:	9300      	str	r3, [sp, #0]
 8016998:	4b11      	ldr	r3, [pc, #68]	; (80169e0 <LoRaMacClassBInit+0x88>)
 801699a:	2200      	movs	r2, #0
 801699c:	f04f 31ff 	mov.w	r1, #4294967295
 80169a0:	4810      	ldr	r0, [pc, #64]	; (80169e4 <LoRaMacClassBInit+0x8c>)
 80169a2:	f009 fd23 	bl	80203ec <UTIL_TIMER_Create>
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
 80169a6:	2300      	movs	r3, #0
 80169a8:	9300      	str	r3, [sp, #0]
 80169aa:	4b0f      	ldr	r3, [pc, #60]	; (80169e8 <LoRaMacClassBInit+0x90>)
 80169ac:	2200      	movs	r2, #0
 80169ae:	f04f 31ff 	mov.w	r1, #4294967295
 80169b2:	480e      	ldr	r0, [pc, #56]	; (80169ec <LoRaMacClassBInit+0x94>)
 80169b4:	f009 fd1a 	bl	80203ec <UTIL_TIMER_Create>
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );
 80169b8:	2300      	movs	r3, #0
 80169ba:	9300      	str	r3, [sp, #0]
 80169bc:	4b0c      	ldr	r3, [pc, #48]	; (80169f0 <LoRaMacClassBInit+0x98>)
 80169be:	2200      	movs	r2, #0
 80169c0:	f04f 31ff 	mov.w	r1, #4294967295
 80169c4:	480b      	ldr	r0, [pc, #44]	; (80169f4 <LoRaMacClassBInit+0x9c>)
 80169c6:	f009 fd11 	bl	80203ec <UTIL_TIMER_Create>

    InitClassB( );
 80169ca:	f7ff fe2d 	bl	8016628 <InitClassB>
 80169ce:	e000      	b.n	80169d2 <LoRaMacClassBInit+0x7a>
        return;
 80169d0:	bf00      	nop
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80169d2:	3710      	adds	r7, #16
 80169d4:	46bd      	mov	sp, r7
 80169d6:	bdb0      	pop	{r4, r5, r7, pc}
 80169d8:	20002250 	.word	0x20002250
 80169dc:	2000219c 	.word	0x2000219c
 80169e0:	08016ad1 	.word	0x08016ad1
 80169e4:	200021e0 	.word	0x200021e0
 80169e8:	08016ed1 	.word	0x08016ed1
 80169ec:	200021f8 	.word	0x200021f8
 80169f0:	080170e5 	.word	0x080170e5
 80169f4:	20002210 	.word	0x20002210

080169f8 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b082      	sub	sp, #8
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	4603      	mov	r3, r0
 8016a00:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( beaconState == BEACON_STATE_ACQUISITION )
 8016a02:	79fb      	ldrb	r3, [r7, #7]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d118      	bne.n	8016a3a <LoRaMacClassBSetBeaconState+0x42>
    {
        // If the MAC has received a time reference for the beacon,
        // apply the state BEACON_STATE_ACQUISITION_BY_TIME.
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 8016a08:	4b15      	ldr	r3, [pc, #84]	; (8016a60 <LoRaMacClassBSetBeaconState+0x68>)
 8016a0a:	7b1b      	ldrb	r3, [r3, #12]
 8016a0c:	f003 0304 	and.w	r3, r3, #4
 8016a10:	b2db      	uxtb	r3, r3
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d00c      	beq.n	8016a30 <LoRaMacClassBSetBeaconState+0x38>
            ( LoRaMacClassBIsAcquisitionPending( ) == false ) )
 8016a16:	f000 fe73 	bl	8017700 <LoRaMacClassBIsAcquisitionPending>
 8016a1a:	4603      	mov	r3, r0
 8016a1c:	f083 0301 	eor.w	r3, r3, #1
 8016a20:	b2db      	uxtb	r3, r3
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d004      	beq.n	8016a30 <LoRaMacClassBSetBeaconState+0x38>
        {
            Ctx.BeaconState = BEACON_STATE_ACQUISITION_BY_TIME;
 8016a26:	4b0e      	ldr	r3, [pc, #56]	; (8016a60 <LoRaMacClassBSetBeaconState+0x68>)
 8016a28:	2201      	movs	r2, #1
 8016a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016a2e:	e012      	b.n	8016a56 <LoRaMacClassBSetBeaconState+0x5e>
           Ctx.BeaconState = beaconState;
 8016a30:	4a0b      	ldr	r2, [pc, #44]	; (8016a60 <LoRaMacClassBSetBeaconState+0x68>)
 8016a32:	79fb      	ldrb	r3, [r7, #7]
 8016a34:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
}
 8016a38:	e00d      	b.n	8016a56 <LoRaMacClassBSetBeaconState+0x5e>
        if( ( Ctx.BeaconState != BEACON_STATE_ACQUISITION ) &&
 8016a3a:	4b09      	ldr	r3, [pc, #36]	; (8016a60 <LoRaMacClassBSetBeaconState+0x68>)
 8016a3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d008      	beq.n	8016a56 <LoRaMacClassBSetBeaconState+0x5e>
            ( Ctx.BeaconState != BEACON_STATE_ACQUISITION_BY_TIME ) )
 8016a44:	4b06      	ldr	r3, [pc, #24]	; (8016a60 <LoRaMacClassBSetBeaconState+0x68>)
 8016a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
        if( ( Ctx.BeaconState != BEACON_STATE_ACQUISITION ) &&
 8016a4a:	2b01      	cmp	r3, #1
 8016a4c:	d003      	beq.n	8016a56 <LoRaMacClassBSetBeaconState+0x5e>
            Ctx.BeaconState = beaconState;
 8016a4e:	4a04      	ldr	r2, [pc, #16]	; (8016a60 <LoRaMacClassBSetBeaconState+0x68>)
 8016a50:	79fb      	ldrb	r3, [r7, #7]
 8016a52:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
}
 8016a56:	bf00      	nop
 8016a58:	3708      	adds	r7, #8
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bd80      	pop	{r7, pc}
 8016a5e:	bf00      	nop
 8016a60:	2000219c 	.word	0x2000219c

08016a64 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8016a64:	b480      	push	{r7}
 8016a66:	b083      	sub	sp, #12
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
 8016a6e:	4a04      	ldr	r2, [pc, #16]	; (8016a80 <LoRaMacClassBSetPingSlotState+0x1c>)
 8016a70:	79fb      	ldrb	r3, [r7, #7]
 8016a72:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016a76:	bf00      	nop
 8016a78:	370c      	adds	r7, #12
 8016a7a:	46bd      	mov	sp, r7
 8016a7c:	bc80      	pop	{r7}
 8016a7e:	4770      	bx	lr
 8016a80:	2000219c 	.word	0x2000219c

08016a84 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8016a84:	b480      	push	{r7}
 8016a86:	b083      	sub	sp, #12
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
 8016a8e:	4a04      	ldr	r2, [pc, #16]	; (8016aa0 <LoRaMacClassBSetMulticastSlotState+0x1c>)
 8016a90:	79fb      	ldrb	r3, [r7, #7]
 8016a92:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016a96:	bf00      	nop
 8016a98:	370c      	adds	r7, #12
 8016a9a:	46bd      	mov	sp, r7
 8016a9c:	bc80      	pop	{r7}
 8016a9e:	4770      	bx	lr
 8016aa0:	2000219c 	.word	0x2000219c

08016aa4 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME )
 8016aa8:	4b08      	ldr	r3, [pc, #32]	; (8016acc <LoRaMacClassBIsAcquisitionInProgress+0x28>)
 8016aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016aae:	2b01      	cmp	r3, #1
 8016ab0:	d101      	bne.n	8016ab6 <LoRaMacClassBIsAcquisitionInProgress+0x12>
    {
        // In this case the acquisition is in progress, as the MAC has
        // a time reference for the next beacon RX.
        return true;
 8016ab2:	2301      	movs	r3, #1
 8016ab4:	e007      	b.n	8016ac6 <LoRaMacClassBIsAcquisitionInProgress+0x22>
    }
    if( LoRaMacClassBIsAcquisitionPending( ) == true )
 8016ab6:	f000 fe23 	bl	8017700 <LoRaMacClassBIsAcquisitionPending>
 8016aba:	4603      	mov	r3, r0
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d001      	beq.n	8016ac4 <LoRaMacClassBIsAcquisitionInProgress+0x20>
    {
        // In this case the acquisition is in progress, as the MAC
        // searches for a beacon.
        return true;
 8016ac0:	2301      	movs	r3, #1
 8016ac2:	e000      	b.n	8016ac6 <LoRaMacClassBIsAcquisitionInProgress+0x22>
    }
    return false;
 8016ac4:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	bd80      	pop	{r7, pc}
 8016aca:	bf00      	nop
 8016acc:	2000219c 	.word	0x2000219c

08016ad0 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	b082      	sub	sp, #8
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
 8016ad8:	f009 fe46 	bl	8020768 <UTIL_TIMER_GetCurrentTime>
 8016adc:	4603      	mov	r3, r0
 8016ade:	4a0b      	ldr	r2, [pc, #44]	; (8016b0c <LoRaMacClassBBeaconTimerEvent+0x3c>)
 8016ae0:	63d3      	str	r3, [r2, #60]	; 0x3c
    TimerStop( &Ctx.BeaconTimer );
 8016ae2:	480b      	ldr	r0, [pc, #44]	; (8016b10 <LoRaMacClassBBeaconTimerEvent+0x40>)
 8016ae4:	f009 fd26 	bl	8020534 <UTIL_TIMER_Stop>
    LoRaMacClassBEvents.Events.Beacon = 1;
 8016ae8:	4a0a      	ldr	r2, [pc, #40]	; (8016b14 <LoRaMacClassBBeaconTimerEvent+0x44>)
 8016aea:	7813      	ldrb	r3, [r2, #0]
 8016aec:	f043 0301 	orr.w	r3, r3, #1
 8016af0:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 8016af2:	4b06      	ldr	r3, [pc, #24]	; (8016b0c <LoRaMacClassBBeaconTimerEvent+0x3c>)
 8016af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d003      	beq.n	8016b04 <LoRaMacClassBBeaconTimerEvent+0x34>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 8016afc:	4b03      	ldr	r3, [pc, #12]	; (8016b0c <LoRaMacClassBBeaconTimerEvent+0x3c>)
 8016afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016b02:	4798      	blx	r3
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016b04:	bf00      	nop
 8016b06:	3708      	adds	r7, #8
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	bd80      	pop	{r7, pc}
 8016b0c:	2000219c 	.word	0x2000219c
 8016b10:	200021e0 	.word	0x200021e0
 8016b14:	20002198 	.word	0x20002198

08016b18 <LoRaMacClassBProcessBeacon>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static void LoRaMacClassBProcessBeacon( void )
{
 8016b18:	b590      	push	{r4, r7, lr}
 8016b1a:	b08b      	sub	sp, #44	; 0x2c
 8016b1c:	af02      	add	r7, sp, #8
    bool activateTimer = false;
 8016b1e:	2300      	movs	r3, #0
 8016b20:	77fb      	strb	r3, [r7, #31]
    TimerTime_t beaconEventTime = 1;
 8016b22:	2301      	movs	r3, #1
 8016b24:	61bb      	str	r3, [r7, #24]
    RxConfigParams_t beaconRxConfig;
    TimerTime_t currentTime = Ctx.BeaconCtx.TimeStamp;
 8016b26:	4bb3      	ldr	r3, [pc, #716]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b2a:	617b      	str	r3, [r7, #20]

    // Beacon state machine
    switch( Ctx.BeaconState )
 8016b2c:	4bb1      	ldr	r3, [pc, #708]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016b32:	2b0a      	cmp	r3, #10
 8016b34:	f200 81a8 	bhi.w	8016e88 <LoRaMacClassBProcessBeacon+0x370>
 8016b38:	a201      	add	r2, pc, #4	; (adr r2, 8016b40 <LoRaMacClassBProcessBeacon+0x28>)
 8016b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b3e:	bf00      	nop
 8016b40:	08016c6b 	.word	0x08016c6b
 8016b44:	08016b6d 	.word	0x08016b6d
 8016b48:	08016cbf 	.word	0x08016cbf
 8016b4c:	08016e89 	.word	0x08016e89
 8016b50:	08016cdb 	.word	0x08016cdb
 8016b54:	08016d25 	.word	0x08016d25
 8016b58:	08016e89 	.word	0x08016e89
 8016b5c:	08016d79 	.word	0x08016d79
 8016b60:	08016e09 	.word	0x08016e09
 8016b64:	08016e89 	.word	0x08016e89
 8016b68:	08016e27 	.word	0x08016e27
    {
        case BEACON_STATE_ACQUISITION_BY_TIME:
        {
            activateTimer = true;
 8016b6c:	2301      	movs	r3, #1
 8016b6e:	77fb      	strb	r3, [r7, #31]

            if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 8016b70:	4ba0      	ldr	r3, [pc, #640]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016b72:	7b1b      	ldrb	r3, [r3, #12]
 8016b74:	f003 0310 	and.w	r3, r3, #16
 8016b78:	b2db      	uxtb	r3, r3
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d007      	beq.n	8016b8e <LoRaMacClassBProcessBeacon+0x76>
            {
                Radio.Sleep();
 8016b7e:	4b9e      	ldr	r3, [pc, #632]	; (8016df8 <LoRaMacClassBProcessBeacon+0x2e0>)
 8016b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b82:	4798      	blx	r3
                Ctx.BeaconState = BEACON_STATE_LOST;
 8016b84:	4b9b      	ldr	r3, [pc, #620]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016b86:	220a      	movs	r2, #10
 8016b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                    Ctx.BeaconCtx.BeaconTimingDelay = 0;

                    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
                }
            }
            break;
 8016b8c:	e182      	b.n	8016e94 <LoRaMacClassBProcessBeacon+0x37c>
                ResetWindowTimeout( );
 8016b8e:	f7ff fe03 	bl	8016798 <ResetWindowTimeout>
                if( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 )
 8016b92:	4b98      	ldr	r3, [pc, #608]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016b94:	7b1b      	ldrb	r3, [r3, #12]
 8016b96:	f003 0304 	and.w	r3, r3, #4
 8016b9a:	b2db      	uxtb	r3, r3
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d056      	beq.n	8016c4e <LoRaMacClassBProcessBeacon+0x136>
                    CalculateBeaconRxWindowConfig( &beaconRxConfig, Ctx.BeaconCtx.SymbolTimeout );
 8016ba0:	4b94      	ldr	r3, [pc, #592]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016ba2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8016ba4:	463b      	mov	r3, r7
 8016ba6:	4611      	mov	r1, r2
 8016ba8:	4618      	mov	r0, r3
 8016baa:	f7ff fbb3 	bl	8016314 <CalculateBeaconRxWindowConfig>
                    if( Ctx.BeaconCtx.BeaconTimingDelay > 0 )
 8016bae:	4b91      	ldr	r3, [pc, #580]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d036      	beq.n	8016c24 <LoRaMacClassBProcessBeacon+0x10c>
                        if( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) > currentTime )
 8016bb6:	4b8f      	ldr	r3, [pc, #572]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016bb8:	3320      	adds	r3, #32
 8016bba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016bbe:	f008 ffa5 	bl	801fb0c <SysTimeToMs>
 8016bc2:	4602      	mov	r2, r0
 8016bc4:	697b      	ldr	r3, [r7, #20]
 8016bc6:	4293      	cmp	r3, r2
 8016bc8:	d21a      	bcs.n	8016c00 <LoRaMacClassBProcessBeacon+0xe8>
                            beaconEventTime = TimerTempCompensation( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTime, Ctx.BeaconCtx.Temperature );
 8016bca:	4b8a      	ldr	r3, [pc, #552]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016bcc:	3320      	adds	r3, #32
 8016bce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016bd2:	f008 ff9b 	bl	801fb0c <SysTimeToMs>
 8016bd6:	4602      	mov	r2, r0
 8016bd8:	697b      	ldr	r3, [r7, #20]
 8016bda:	1ad3      	subs	r3, r2, r3
 8016bdc:	4a85      	ldr	r2, [pc, #532]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016bde:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8016be2:	4611      	mov	r1, r2
 8016be4:	4618      	mov	r0, r3
 8016be6:	f7ff fa2b 	bl	8016040 <TimerTempCompensation>
 8016bea:	61b8      	str	r0, [r7, #24]
                            if( ( int32_t ) beaconEventTime > beaconRxConfig.WindowOffset )
 8016bec:	68fa      	ldr	r2, [r7, #12]
 8016bee:	69bb      	ldr	r3, [r7, #24]
 8016bf0:	429a      	cmp	r2, r3
 8016bf2:	da13      	bge.n	8016c1c <LoRaMacClassBProcessBeacon+0x104>
                                beaconEventTime += beaconRxConfig.WindowOffset;
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	461a      	mov	r2, r3
 8016bf8:	69bb      	ldr	r3, [r7, #24]
 8016bfa:	4413      	add	r3, r2
 8016bfc:	61bb      	str	r3, [r7, #24]
 8016bfe:	e00d      	b.n	8016c1c <LoRaMacClassBProcessBeacon+0x104>
                            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 8016c00:	4a7c      	ldr	r2, [pc, #496]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c02:	7b13      	ldrb	r3, [r2, #12]
 8016c04:	f36f 0382 	bfc	r3, #2, #1
 8016c08:	7313      	strb	r3, [r2, #12]
                            Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 0;
 8016c0a:	4a7a      	ldr	r2, [pc, #488]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c0c:	7b13      	ldrb	r3, [r2, #12]
 8016c0e:	f36f 03c3 	bfc	r3, #3, #1
 8016c12:	7313      	strb	r3, [r2, #12]
                            Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 8016c14:	4b77      	ldr	r3, [pc, #476]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c16:	2200      	movs	r2, #0
 8016c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                        Ctx.BeaconCtx.BeaconTimingDelay = 0;
 8016c1c:	4b75      	ldr	r3, [pc, #468]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c1e:	2200      	movs	r2, #0
 8016c20:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 8016c22:	e137      	b.n	8016e94 <LoRaMacClassBProcessBeacon+0x37c>
                        activateTimer = false;
 8016c24:	2300      	movs	r3, #0
 8016c26:	77fb      	strb	r3, [r7, #31]
                        Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 8016c28:	4a72      	ldr	r2, [pc, #456]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c2a:	7b13      	ldrb	r3, [r2, #12]
 8016c2c:	f36f 0382 	bfc	r3, #2, #1
 8016c30:	7313      	strb	r3, [r2, #12]
                        Ctx.BeaconCtx.Ctrl.AcquisitionPending = 1;
 8016c32:	4a70      	ldr	r2, [pc, #448]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c34:	7b13      	ldrb	r3, [r2, #12]
 8016c36:	f043 0310 	orr.w	r3, r3, #16
 8016c3a:	7313      	strb	r3, [r2, #12]
                        RxBeaconSetup( CLASSB_BEACON_RESERVED, false, beaconRxConfig.WindowTimeout );
 8016c3c:	68bb      	ldr	r3, [r7, #8]
 8016c3e:	b29b      	uxth	r3, r3
 8016c40:	461a      	mov	r2, r3
 8016c42:	2100      	movs	r1, #0
 8016c44:	f640 0048 	movw	r0, #2120	; 0x848
 8016c48:	f7ff fba6 	bl	8016398 <RxBeaconSetup>
            break;
 8016c4c:	e122      	b.n	8016e94 <LoRaMacClassBProcessBeacon+0x37c>
                    Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
 8016c4e:	4b69      	ldr	r3, [pc, #420]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c50:	2200      	movs	r2, #0
 8016c52:	621a      	str	r2, [r3, #32]
                    Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
 8016c54:	4b67      	ldr	r3, [pc, #412]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c56:	2200      	movs	r2, #0
 8016c58:	849a      	strh	r2, [r3, #36]	; 0x24
                    Ctx.BeaconCtx.BeaconTimingDelay = 0;
 8016c5a:	4b66      	ldr	r3, [pc, #408]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	639a      	str	r2, [r3, #56]	; 0x38
                    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 8016c60:	4b64      	ldr	r3, [pc, #400]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c62:	2200      	movs	r2, #0
 8016c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            break;
 8016c68:	e114      	b.n	8016e94 <LoRaMacClassBProcessBeacon+0x37c>
        }
        case BEACON_STATE_ACQUISITION:
        {
            activateTimer = true;
 8016c6a:	2301      	movs	r3, #1
 8016c6c:	77fb      	strb	r3, [r7, #31]

            if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 8016c6e:	4b61      	ldr	r3, [pc, #388]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c70:	7b1b      	ldrb	r3, [r3, #12]
 8016c72:	f003 0310 	and.w	r3, r3, #16
 8016c76:	b2db      	uxtb	r3, r3
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d007      	beq.n	8016c8c <LoRaMacClassBProcessBeacon+0x174>
            {
                Radio.Sleep();
 8016c7c:	4b5e      	ldr	r3, [pc, #376]	; (8016df8 <LoRaMacClassBProcessBeacon+0x2e0>)
 8016c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c80:	4798      	blx	r3
                Ctx.BeaconState = BEACON_STATE_LOST;
 8016c82:	4b5c      	ldr	r3, [pc, #368]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c84:	220a      	movs	r2, #10
 8016c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                // find a beacon, the state machine will stay in state BEACON_STATE_ACQUISITION.
                // This state detects that a acquisition was pending previously and will change the next
                // state to BEACON_STATE_LOST.
                RxBeaconSetup( 0, true, beaconRxConfig.WindowTimeout );
            }
            break;
 8016c8a:	e103      	b.n	8016e94 <LoRaMacClassBProcessBeacon+0x37c>
                ResetWindowTimeout( );
 8016c8c:	f7ff fd84 	bl	8016798 <ResetWindowTimeout>
                Ctx.BeaconCtx.Ctrl.AcquisitionPending = 1;
 8016c90:	4a58      	ldr	r2, [pc, #352]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016c92:	7b13      	ldrb	r3, [r2, #12]
 8016c94:	f043 0310 	orr.w	r3, r3, #16
 8016c98:	7313      	strb	r3, [r2, #12]
                beaconEventTime = CLASSB_BEACON_INTERVAL;
 8016c9a:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 8016c9e:	61bb      	str	r3, [r7, #24]
                CalculateBeaconRxWindowConfig( &beaconRxConfig, Ctx.BeaconCtx.SymbolTimeout );
 8016ca0:	4b54      	ldr	r3, [pc, #336]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016ca2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8016ca4:	463b      	mov	r3, r7
 8016ca6:	4611      	mov	r1, r2
 8016ca8:	4618      	mov	r0, r3
 8016caa:	f7ff fb33 	bl	8016314 <CalculateBeaconRxWindowConfig>
                RxBeaconSetup( 0, true, beaconRxConfig.WindowTimeout );
 8016cae:	68bb      	ldr	r3, [r7, #8]
 8016cb0:	b29b      	uxth	r3, r3
 8016cb2:	461a      	mov	r2, r3
 8016cb4:	2101      	movs	r1, #1
 8016cb6:	2000      	movs	r0, #0
 8016cb8:	f7ff fb6e 	bl	8016398 <RxBeaconSetup>
            break;
 8016cbc:	e0ea      	b.n	8016e94 <LoRaMacClassBProcessBeacon+0x37c>
        }
        case BEACON_STATE_TIMEOUT:
        {
            // We have to update the beacon time, since we missed a beacon
            Ctx.BeaconCtx.BeaconTime.Seconds += ( CLASSB_BEACON_INTERVAL / 1000 );
 8016cbe:	4b4d      	ldr	r3, [pc, #308]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016cc0:	691b      	ldr	r3, [r3, #16]
 8016cc2:	3380      	adds	r3, #128	; 0x80
 8016cc4:	4a4b      	ldr	r2, [pc, #300]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016cc6:	6113      	str	r3, [r2, #16]
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 8016cc8:	4b4a      	ldr	r3, [pc, #296]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016cca:	2200      	movs	r2, #0
 8016ccc:	829a      	strh	r2, [r3, #20]

            // Enlarge window timeouts to increase the chance to receive the next beacon
            EnlargeWindowTimeout( );
 8016cce:	f7ff fd33 	bl	8016738 <EnlargeWindowTimeout>

            // Setup next state
            Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 8016cd2:	4b48      	ldr	r3, [pc, #288]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016cd4:	2204      	movs	r2, #4
 8016cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
            // Intentional fall through
        case BEACON_STATE_REACQUISITION:
        {
            activateTimer = true;
 8016cda:	2301      	movs	r3, #1
 8016cdc:	77fb      	strb	r3, [r7, #31]

            // The beacon is no longer acquired
            Ctx.BeaconCtx.Ctrl.BeaconAcquired = 0;
 8016cde:	4a45      	ldr	r2, [pc, #276]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016ce0:	7b13      	ldrb	r3, [r2, #12]
 8016ce2:	f36f 0341 	bfc	r3, #1, #1
 8016ce6:	7313      	strb	r3, [r2, #12]

            // Verify if the maximum beacon less period has been elapsed
            if( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) > CLASSB_MAX_BEACON_LESS_PERIOD )
 8016ce8:	4b42      	ldr	r3, [pc, #264]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016cea:	3318      	adds	r3, #24
 8016cec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016cf0:	f008 ff0c 	bl	801fb0c <SysTimeToMs>
 8016cf4:	4602      	mov	r2, r0
 8016cf6:	697b      	ldr	r3, [r7, #20]
 8016cf8:	1a9b      	subs	r3, r3, r2
 8016cfa:	4a40      	ldr	r2, [pc, #256]	; (8016dfc <LoRaMacClassBProcessBeacon+0x2e4>)
 8016cfc:	4293      	cmp	r3, r2
 8016cfe:	d904      	bls.n	8016d0a <LoRaMacClassBProcessBeacon+0x1f2>
            {
                Ctx.BeaconState = BEACON_STATE_LOST;
 8016d00:	4b3c      	ldr	r3, [pc, #240]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016d02:	220a      	movs	r2, #10
 8016d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                     Ctx.BeaconCtx.BeaconWindowMovement, currentTime );

                // Setup next state
                Ctx.BeaconState = BEACON_STATE_IDLE;
            }
            break;
 8016d08:	e0c4      	b.n	8016e94 <LoRaMacClassBProcessBeacon+0x37c>
                beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND,
 8016d0a:	4b3a      	ldr	r3, [pc, #232]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d0e:	697a      	ldr	r2, [r7, #20]
 8016d10:	4619      	mov	r1, r3
 8016d12:	2010      	movs	r0, #16
 8016d14:	f7ff fdb6 	bl	8016884 <UpdateBeaconState>
 8016d18:	61b8      	str	r0, [r7, #24]
                Ctx.BeaconState = BEACON_STATE_IDLE;
 8016d1a:	4b36      	ldr	r3, [pc, #216]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016d1c:	2207      	movs	r2, #7
 8016d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            break;
 8016d22:	e0b7      	b.n	8016e94 <LoRaMacClassBProcessBeacon+0x37c>
        }
        case BEACON_STATE_LOCKED:
        {
            activateTimer = true;
 8016d24:	2301      	movs	r3, #1
 8016d26:	77fb      	strb	r3, [r7, #31]

            // We have received a beacon. Acquisition is no longer pending.
            Ctx.BeaconCtx.Ctrl.AcquisitionPending = 0;
 8016d28:	4a32      	ldr	r2, [pc, #200]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016d2a:	7b13      	ldrb	r3, [r2, #12]
 8016d2c:	f36f 1304 	bfc	r3, #4, #1
 8016d30:	7313      	strb	r3, [r2, #12]

            // Handle beacon reception
            beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED,
 8016d32:	697a      	ldr	r2, [r7, #20]
 8016d34:	2100      	movs	r1, #0
 8016d36:	200e      	movs	r0, #14
 8016d38:	f7ff fda4 	bl	8016884 <UpdateBeaconState>
 8016d3c:	61b8      	str	r0, [r7, #24]
                                                 0, currentTime );

            // Setup the MLME confirm for the MLME_BEACON_ACQUISITION
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 8016d3e:	4b2d      	ldr	r3, [pc, #180]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016d40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016d44:	781b      	ldrb	r3, [r3, #0]
 8016d46:	f003 0304 	and.w	r3, r3, #4
 8016d4a:	b2db      	uxtb	r3, r3
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d00e      	beq.n	8016d6e <LoRaMacClassBProcessBeacon+0x256>
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true )
 8016d50:	200c      	movs	r0, #12
 8016d52:	f001 fc75 	bl	8018640 <LoRaMacConfirmQueueIsCmdActive>
 8016d56:	4603      	mov	r3, r0
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d008      	beq.n	8016d6e <LoRaMacClassBProcessBeacon+0x256>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_ACQUISITION );
 8016d5c:	210c      	movs	r1, #12
 8016d5e:	2000      	movs	r0, #0
 8016d60:	f001 fbe2 	bl	8018528 <LoRaMacConfirmQueueSetStatus>
                    Ctx.LoRaMacClassBParams.MlmeConfirm->TxTimeOnAir = 0;
 8016d64:	4b23      	ldr	r3, [pc, #140]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	605a      	str	r2, [r3, #4]
                }
            }

            // Setup next state
            Ctx.BeaconState = BEACON_STATE_IDLE;
 8016d6e:	4b21      	ldr	r3, [pc, #132]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016d70:	2207      	movs	r2, #7
 8016d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            break;
 8016d76:	e08d      	b.n	8016e94 <LoRaMacClassBProcessBeacon+0x37c>
        }
        case BEACON_STATE_IDLE:
        {
            activateTimer = true;
 8016d78:	2301      	movs	r3, #1
 8016d7a:	77fb      	strb	r3, [r7, #31]
            GetTemperature( &Ctx.LoRaMacClassBCallbacks, &Ctx.BeaconCtx );
 8016d7c:	4920      	ldr	r1, [pc, #128]	; (8016e00 <LoRaMacClassBProcessBeacon+0x2e8>)
 8016d7e:	4821      	ldr	r0, [pc, #132]	; (8016e04 <LoRaMacClassBProcessBeacon+0x2ec>)
 8016d80:	f7ff fc3b 	bl	80165fa <GetTemperature>
            beaconEventTime = Ctx.BeaconCtx.NextBeaconRxAdjusted - Radio.GetWakeupTime( );
 8016d84:	4b1b      	ldr	r3, [pc, #108]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016d86:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8016d88:	4b1b      	ldr	r3, [pc, #108]	; (8016df8 <LoRaMacClassBProcessBeacon+0x2e0>)
 8016d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016d8c:	4798      	blx	r3
 8016d8e:	4603      	mov	r3, r0
 8016d90:	1ae3      	subs	r3, r4, r3
 8016d92:	61bb      	str	r3, [r7, #24]
            currentTime = TimerGetCurrentTime( );
 8016d94:	f009 fce8 	bl	8020768 <UTIL_TIMER_GetCurrentTime>
 8016d98:	6178      	str	r0, [r7, #20]

            // The goal is to calculate beaconRxConfig.WindowTimeout and beaconRxConfig.WindowOffset
            CalculateBeaconRxWindowConfig( &beaconRxConfig, Ctx.BeaconCtx.SymbolTimeout );
 8016d9a:	4b16      	ldr	r3, [pc, #88]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016d9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8016d9e:	463b      	mov	r3, r7
 8016da0:	4611      	mov	r1, r2
 8016da2:	4618      	mov	r0, r3
 8016da4:	f7ff fab6 	bl	8016314 <CalculateBeaconRxWindowConfig>

            if( beaconEventTime > currentTime )
 8016da8:	69ba      	ldr	r2, [r7, #24]
 8016daa:	697b      	ldr	r3, [r7, #20]
 8016dac:	429a      	cmp	r2, r3
 8016dae:	d919      	bls.n	8016de4 <LoRaMacClassBProcessBeacon+0x2cc>
            {
                Ctx.BeaconState = BEACON_STATE_GUARD;
 8016db0:	4b10      	ldr	r3, [pc, #64]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016db2:	2208      	movs	r2, #8
 8016db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                beaconEventTime -= currentTime;
 8016db8:	69ba      	ldr	r2, [r7, #24]
 8016dba:	697b      	ldr	r3, [r7, #20]
 8016dbc:	1ad3      	subs	r3, r2, r3
 8016dbe:	61bb      	str	r3, [r7, #24]
                beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 8016dc0:	4b0c      	ldr	r3, [pc, #48]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016dc2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016dc6:	4619      	mov	r1, r3
 8016dc8:	69b8      	ldr	r0, [r7, #24]
 8016dca:	f7ff f939 	bl	8016040 <TimerTempCompensation>
 8016dce:	61b8      	str	r0, [r7, #24]

                if( ( int32_t ) beaconEventTime > beaconRxConfig.WindowOffset )
 8016dd0:	68fa      	ldr	r2, [r7, #12]
 8016dd2:	69bb      	ldr	r3, [r7, #24]
 8016dd4:	429a      	cmp	r2, r3
 8016dd6:	da5c      	bge.n	8016e92 <LoRaMacClassBProcessBeacon+0x37a>
                {
                    // Apply the offset of the system error respectively beaconing precision setting
                    beaconEventTime += beaconRxConfig.WindowOffset;
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	461a      	mov	r2, r3
 8016ddc:	69bb      	ldr	r3, [r7, #24]
 8016dde:	4413      	add	r3, r2
 8016de0:	61bb      	str	r3, [r7, #24]
            else
            {
                Ctx.BeaconState = BEACON_STATE_REACQUISITION;
                beaconEventTime = 1;
            }
            break;
 8016de2:	e056      	b.n	8016e92 <LoRaMacClassBProcessBeacon+0x37a>
                Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 8016de4:	4b03      	ldr	r3, [pc, #12]	; (8016df4 <LoRaMacClassBProcessBeacon+0x2dc>)
 8016de6:	2204      	movs	r2, #4
 8016de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                beaconEventTime = 1;
 8016dec:	2301      	movs	r3, #1
 8016dee:	61bb      	str	r3, [r7, #24]
            break;
 8016df0:	e04f      	b.n	8016e92 <LoRaMacClassBProcessBeacon+0x37a>
 8016df2:	bf00      	nop
 8016df4:	2000219c 	.word	0x2000219c
 8016df8:	08021e08 	.word	0x08021e08
 8016dfc:	006ddd00 	.word	0x006ddd00
 8016e00:	200021a8 	.word	0x200021a8
 8016e04:	20002228 	.word	0x20002228
        }
        case BEACON_STATE_GUARD:
        {
            Ctx.BeaconState = BEACON_STATE_RX;
 8016e08:	4b2e      	ldr	r3, [pc, #184]	; (8016ec4 <LoRaMacClassBProcessBeacon+0x3ac>)
 8016e0a:	2209      	movs	r2, #9
 8016e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            // Stop slot timers
            LoRaMacClassBStopRxSlots( );
 8016e10:	f000 ff4c 	bl	8017cac <LoRaMacClassBStopRxSlots>

            // Don't use the default channel. We know on which
            // channel the next beacon will be transmitted
            RxBeaconSetup( CLASSB_BEACON_RESERVED, false, beaconRxConfig.WindowTimeout );
 8016e14:	68bb      	ldr	r3, [r7, #8]
 8016e16:	b29b      	uxth	r3, r3
 8016e18:	461a      	mov	r2, r3
 8016e1a:	2100      	movs	r1, #0
 8016e1c:	f640 0048 	movw	r0, #2120	; 0x848
 8016e20:	f7ff faba 	bl	8016398 <RxBeaconSetup>
            break;
 8016e24:	e036      	b.n	8016e94 <LoRaMacClassBProcessBeacon+0x37c>
        }
        case BEACON_STATE_LOST:
        {
            // Handle events
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 8016e26:	4b27      	ldr	r3, [pc, #156]	; (8016ec4 <LoRaMacClassBProcessBeacon+0x3ac>)
 8016e28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016e2c:	781b      	ldrb	r3, [r3, #0]
 8016e2e:	f003 0304 	and.w	r3, r3, #4
 8016e32:	b2db      	uxtb	r3, r3
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d00a      	beq.n	8016e4e <LoRaMacClassBProcessBeacon+0x336>
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true )
 8016e38:	200c      	movs	r0, #12
 8016e3a:	f001 fc01 	bl	8018640 <LoRaMacConfirmQueueIsCmdActive>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d015      	beq.n	8016e70 <LoRaMacClassBProcessBeacon+0x358>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_BEACON_ACQUISITION );
 8016e44:	210c      	movs	r1, #12
 8016e46:	2010      	movs	r0, #16
 8016e48:	f001 fb6e 	bl	8018528 <LoRaMacConfirmQueueSetStatus>
 8016e4c:	e010      	b.n	8016e70 <LoRaMacClassBProcessBeacon+0x358>
                }
            }
            else
            {
                Ctx.LoRaMacClassBParams.MlmeIndication->MlmeIndication = MLME_BEACON_LOST;
 8016e4e:	4b1d      	ldr	r3, [pc, #116]	; (8016ec4 <LoRaMacClassBProcessBeacon+0x3ac>)
 8016e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016e54:	220f      	movs	r2, #15
 8016e56:	701a      	strb	r2, [r3, #0]
                Ctx.LoRaMacClassBParams.MlmeIndication->Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8016e58:	4b1a      	ldr	r3, [pc, #104]	; (8016ec4 <LoRaMacClassBProcessBeacon+0x3ac>)
 8016e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016e5e:	2200      	movs	r2, #0
 8016e60:	705a      	strb	r2, [r3, #1]
                Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeInd = 1;
 8016e62:	4b18      	ldr	r3, [pc, #96]	; (8016ec4 <LoRaMacClassBProcessBeacon+0x3ac>)
 8016e64:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8016e68:	7813      	ldrb	r3, [r2, #0]
 8016e6a:	f043 0308 	orr.w	r3, r3, #8
 8016e6e:	7013      	strb	r3, [r2, #0]
            }

            // Stop slot timers
            LoRaMacClassBStopRxSlots( );
 8016e70:	f000 ff1c 	bl	8017cac <LoRaMacClassBStopRxSlots>

            // Initialize default state for class b
            InitClassBDefaults( );
 8016e74:	f7ff fc24 	bl	80166c0 <InitClassBDefaults>

            Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MacDone = 1;
 8016e78:	4b12      	ldr	r3, [pc, #72]	; (8016ec4 <LoRaMacClassBProcessBeacon+0x3ac>)
 8016e7a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8016e7e:	7813      	ldrb	r3, [r2, #0]
 8016e80:	f043 0320 	orr.w	r3, r3, #32
 8016e84:	7013      	strb	r3, [r2, #0]

            break;
 8016e86:	e005      	b.n	8016e94 <LoRaMacClassBProcessBeacon+0x37c>
        }
        default:
        {
            Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 8016e88:	4b0e      	ldr	r3, [pc, #56]	; (8016ec4 <LoRaMacClassBProcessBeacon+0x3ac>)
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            break;
 8016e90:	e000      	b.n	8016e94 <LoRaMacClassBProcessBeacon+0x37c>
            break;
 8016e92:	bf00      	nop
        }
    }
    MW_LOG(TS_ON, VLEVEL_H, "beacon state %d\r\n", Ctx.BeaconState);
 8016e94:	4b0b      	ldr	r3, [pc, #44]	; (8016ec4 <LoRaMacClassBProcessBeacon+0x3ac>)
 8016e96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016e9a:	9300      	str	r3, [sp, #0]
 8016e9c:	4b0a      	ldr	r3, [pc, #40]	; (8016ec8 <LoRaMacClassBProcessBeacon+0x3b0>)
 8016e9e:	2201      	movs	r2, #1
 8016ea0:	2100      	movs	r1, #0
 8016ea2:	2003      	movs	r0, #3
 8016ea4:	f009 fd50 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>

    if( activateTimer == true )
 8016ea8:	7ffb      	ldrb	r3, [r7, #31]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d006      	beq.n	8016ebc <LoRaMacClassBProcessBeacon+0x3a4>
    {
        TimerSetValue( &Ctx.BeaconTimer, beaconEventTime );
 8016eae:	69b9      	ldr	r1, [r7, #24]
 8016eb0:	4806      	ldr	r0, [pc, #24]	; (8016ecc <LoRaMacClassBProcessBeacon+0x3b4>)
 8016eb2:	f009 fbaf 	bl	8020614 <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.BeaconTimer );
 8016eb6:	4805      	ldr	r0, [pc, #20]	; (8016ecc <LoRaMacClassBProcessBeacon+0x3b4>)
 8016eb8:	f009 face 	bl	8020458 <UTIL_TIMER_Start>
    }
}
 8016ebc:	bf00      	nop
 8016ebe:	3724      	adds	r7, #36	; 0x24
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	bd90      	pop	{r4, r7, pc}
 8016ec4:	2000219c 	.word	0x2000219c
 8016ec8:	080217d8 	.word	0x080217d8
 8016ecc:	200021e0 	.word	0x200021e0

08016ed0 <LoRaMacClassBPingSlotTimerEvent>:
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	b082      	sub	sp, #8
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;
 8016ed8:	4a08      	ldr	r2, [pc, #32]	; (8016efc <LoRaMacClassBPingSlotTimerEvent+0x2c>)
 8016eda:	7813      	ldrb	r3, [r2, #0]
 8016edc:	f043 0302 	orr.w	r3, r3, #2
 8016ee0:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 8016ee2:	4b07      	ldr	r3, [pc, #28]	; (8016f00 <LoRaMacClassBPingSlotTimerEvent+0x30>)
 8016ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d003      	beq.n	8016ef4 <LoRaMacClassBPingSlotTimerEvent+0x24>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 8016eec:	4b04      	ldr	r3, [pc, #16]	; (8016f00 <LoRaMacClassBPingSlotTimerEvent+0x30>)
 8016eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ef2:	4798      	blx	r3
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016ef4:	bf00      	nop
 8016ef6:	3708      	adds	r7, #8
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	bd80      	pop	{r7, pc}
 8016efc:	20002198 	.word	0x20002198
 8016f00:	2000219c 	.word	0x2000219c

08016f04 <LoRaMacClassBProcessPingSlot>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static void LoRaMacClassBProcessPingSlot( void )
{
 8016f04:	b590      	push	{r4, r7, lr}
 8016f06:	b085      	sub	sp, #20
 8016f08:	af02      	add	r7, sp, #8
    static RxConfigParams_t pingSlotRxConfig;
    TimerTime_t pingSlotTime = 0;
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	603b      	str	r3, [r7, #0]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint32_t maxRxError = 0;
    bool slotHasPriority = false;
#endif /* LORAMAC_VERSION */

    switch( Ctx.PingSlotState )
 8016f0e:	4b6f      	ldr	r3, [pc, #444]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016f14:	2b02      	cmp	r3, #2
 8016f16:	d063      	beq.n	8016fe0 <LoRaMacClassBProcessPingSlot+0xdc>
 8016f18:	2b02      	cmp	r3, #2
 8016f1a:	f300 80cc 	bgt.w	80170b6 <LoRaMacClassBProcessPingSlot+0x1b2>
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d002      	beq.n	8016f28 <LoRaMacClassBProcessPingSlot+0x24>
 8016f22:	2b01      	cmp	r3, #1
 8016f24:	d014      	beq.n	8016f50 <LoRaMacClassBProcessPingSlot+0x4c>
 8016f26:	e0c6      	b.n	80170b6 <LoRaMacClassBProcessPingSlot+0x1b2>
    {
        case PINGSLOT_STATE_CALC_PING_OFFSET:
        {
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 8016f28:	4b68      	ldr	r3, [pc, #416]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016f2a:	691b      	ldr	r3, [r3, #16]
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	4618      	mov	r0, r3
 8016f30:	4611      	mov	r1, r2
                               *Ctx.LoRaMacClassBParams.LoRaMacDevAddr,
 8016f32:	4b66      	ldr	r3, [pc, #408]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016f34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 8016f38:	681a      	ldr	r2, [r3, #0]
                               ClassBNvm->PingSlotCtx.PingPeriod,
 8016f3a:	4b65      	ldr	r3, [pc, #404]	; (80170d0 <LoRaMacClassBProcessPingSlot+0x1cc>)
 8016f3c:	681b      	ldr	r3, [r3, #0]
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 8016f3e:	885b      	ldrh	r3, [r3, #2]
 8016f40:	4c64      	ldr	r4, [pc, #400]	; (80170d4 <LoRaMacClassBProcessPingSlot+0x1d0>)
 8016f42:	9400      	str	r4, [sp, #0]
 8016f44:	f7ff f90a 	bl	801615c <ComputePingOffset>
                               &( Ctx.PingSlotCtx.PingOffset ) );
            Ctx.PingSlotState = PINGSLOT_STATE_SET_TIMER;
 8016f48:	4b60      	ldr	r3, [pc, #384]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016f4a:	2201      	movs	r2, #1
 8016f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
            // Intentional fall through
        case PINGSLOT_STATE_SET_TIMER:
        {
            if( CalcNextSlotTime( Ctx.PingSlotCtx.PingOffset, ClassBNvm->PingSlotCtx.PingPeriod, ClassBNvm->PingSlotCtx.PingNb, &pingSlotTime ) == true )
 8016f50:	4b5e      	ldr	r3, [pc, #376]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016f52:	8898      	ldrh	r0, [r3, #4]
 8016f54:	4b5e      	ldr	r3, [pc, #376]	; (80170d0 <LoRaMacClassBProcessPingSlot+0x1cc>)
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	8859      	ldrh	r1, [r3, #2]
 8016f5a:	4b5d      	ldr	r3, [pc, #372]	; (80170d0 <LoRaMacClassBProcessPingSlot+0x1cc>)
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	785b      	ldrb	r3, [r3, #1]
 8016f60:	b29a      	uxth	r2, r3
 8016f62:	463b      	mov	r3, r7
 8016f64:	f7ff fa7e 	bl	8016464 <CalcNextSlotTime>
 8016f68:	4603      	mov	r3, r0
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	f000 80a8 	beq.w	80170c0 <LoRaMacClassBProcessPingSlot+0x1bc>
            {
                if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 )
 8016f70:	4b56      	ldr	r3, [pc, #344]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016f72:	7b1b      	ldrb	r3, [r3, #12]
 8016f74:	f003 0302 	and.w	r3, r3, #2
 8016f78:	b2db      	uxtb	r3, r3
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d023      	beq.n	8016fc6 <LoRaMacClassBProcessPingSlot+0xc2>
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    // Compute the symbol timeout. Apply it only, if the beacon is acquired
                    // Otherwise, take the enlargement of the symbols into account.
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8016f7e:	4b53      	ldr	r3, [pc, #332]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016f80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016f84:	7818      	ldrb	r0, [r3, #0]
                                                     ClassBNvm->PingSlotCtx.Datarate,
 8016f86:	4b52      	ldr	r3, [pc, #328]	; (80170d0 <LoRaMacClassBProcessPingSlot+0x1cc>)
 8016f88:	681b      	ldr	r3, [r3, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8016f8a:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 8016f8e:	4b4f      	ldr	r3, [pc, #316]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016f90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8016f94:	791a      	ldrb	r2, [r3, #4]
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError,
 8016f96:	4b4d      	ldr	r3, [pc, #308]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016f98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	4c4e      	ldr	r4, [pc, #312]	; (80170d8 <LoRaMacClassBProcessPingSlot+0x1d4>)
 8016fa0:	9400      	str	r4, [sp, #0]
 8016fa2:	f002 fe48 	bl	8019c36 <RegionComputeRxWindowParameters>
                                                     ClassBNvm->PingSlotCtx.Datarate,
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
                                                     maxRxError,
                                                     &pingSlotRxConfig );
#endif /* LORAMAC_VERSION */
                    Ctx.PingSlotCtx.SymbolTimeout = pingSlotRxConfig.WindowTimeout;
 8016fa6:	4b4c      	ldr	r3, [pc, #304]	; (80170d8 <LoRaMacClassBProcessPingSlot+0x1d4>)
 8016fa8:	689b      	ldr	r3, [r3, #8]
 8016faa:	b29a      	uxth	r2, r3
 8016fac:	4b47      	ldr	r3, [pc, #284]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016fae:	80da      	strh	r2, [r3, #6]

                    if( ( int32_t )pingSlotTime > pingSlotRxConfig.WindowOffset )
 8016fb0:	4b49      	ldr	r3, [pc, #292]	; (80170d8 <LoRaMacClassBProcessPingSlot+0x1d4>)
 8016fb2:	68db      	ldr	r3, [r3, #12]
 8016fb4:	683a      	ldr	r2, [r7, #0]
 8016fb6:	4293      	cmp	r3, r2
 8016fb8:	da05      	bge.n	8016fc6 <LoRaMacClassBProcessPingSlot+0xc2>
                    {// Apply the window offset
                        pingSlotTime += pingSlotRxConfig.WindowOffset;
 8016fba:	4b47      	ldr	r3, [pc, #284]	; (80170d8 <LoRaMacClassBProcessPingSlot+0x1d4>)
 8016fbc:	68db      	ldr	r3, [r3, #12]
 8016fbe:	461a      	mov	r2, r3
 8016fc0:	683b      	ldr	r3, [r7, #0]
 8016fc2:	4413      	add	r3, r2
 8016fc4:	603b      	str	r3, [r7, #0]
                    }
                }

                // Start the timer if the ping slot time is in range
                Ctx.PingSlotState = PINGSLOT_STATE_IDLE;
 8016fc6:	4b41      	ldr	r3, [pc, #260]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016fc8:	2202      	movs	r2, #2
 8016fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                TimerSetValue( &Ctx.PingSlotTimer, pingSlotTime );
 8016fce:	683b      	ldr	r3, [r7, #0]
 8016fd0:	4619      	mov	r1, r3
 8016fd2:	4842      	ldr	r0, [pc, #264]	; (80170dc <LoRaMacClassBProcessPingSlot+0x1d8>)
 8016fd4:	f009 fb1e 	bl	8020614 <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.PingSlotTimer );
 8016fd8:	4840      	ldr	r0, [pc, #256]	; (80170dc <LoRaMacClassBProcessPingSlot+0x1d8>)
 8016fda:	f009 fa3d 	bl	8020458 <UTIL_TIMER_Start>
            }
            break;
 8016fde:	e06f      	b.n	80170c0 <LoRaMacClassBProcessPingSlot+0x1bc>
        }
        case PINGSLOT_STATE_IDLE:
        {
            uint32_t frequency = ClassBNvm->PingSlotCtx.Frequency;
 8016fe0:	4b3b      	ldr	r3, [pc, #236]	; (80170d0 <LoRaMacClassBProcessPingSlot+0x1cc>)
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	685b      	ldr	r3, [r3, #4]
 8016fe6:	607b      	str	r3, [r7, #4]

            // Apply a custom frequency if the following bit is set
            if( ClassBNvm->PingSlotCtx.Ctrl.CustomFreq == 0 )
 8016fe8:	4b39      	ldr	r3, [pc, #228]	; (80170d0 <LoRaMacClassBProcessPingSlot+0x1cc>)
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	781b      	ldrb	r3, [r3, #0]
 8016fee:	f003 0302 	and.w	r3, r3, #2
 8016ff2:	b2db      	uxtb	r3, r3
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d10b      	bne.n	8017010 <LoRaMacClassBProcessPingSlot+0x10c>
            {
                // Restore floor plan
                frequency = CalcDownlinkChannelAndFrequency( *Ctx.LoRaMacClassBParams.LoRaMacDevAddr, Ctx.BeaconCtx.BeaconTime.Seconds,
 8016ff8:	4b34      	ldr	r3, [pc, #208]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 8016ffa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8016ffe:	6818      	ldr	r0, [r3, #0]
 8017000:	4b32      	ldr	r3, [pc, #200]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 8017002:	6919      	ldr	r1, [r3, #16]
 8017004:	2300      	movs	r3, #0
 8017006:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 801700a:	f7ff f927 	bl	801625c <CalcDownlinkChannelAndFrequency>
 801700e:	6078      	str	r0, [r7, #4]
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Open the ping slot window only, if there is no multicast ping slot
            // open. Multicast ping slots have always priority
            if( Ctx.MulticastSlotState != PINGSLOT_STATE_RX )
 8017010:	4b2e      	ldr	r3, [pc, #184]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 8017012:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017016:	2b03      	cmp	r3, #3
 8017018:	d041      	beq.n	801709e <LoRaMacClassBProcessPingSlot+0x19a>
            {
                Ctx.PingSlotState = PINGSLOT_STATE_RX;
 801701a:	4b2c      	ldr	r3, [pc, #176]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 801701c:	2203      	movs	r2, #3
 801701e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

                pingSlotRxConfig.Datarate = ClassBNvm->PingSlotCtx.Datarate;
 8017022:	4b2b      	ldr	r3, [pc, #172]	; (80170d0 <LoRaMacClassBProcessPingSlot+0x1cc>)
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801702a:	4b2b      	ldr	r3, [pc, #172]	; (80170d8 <LoRaMacClassBProcessPingSlot+0x1d4>)
 801702c:	705a      	strb	r2, [r3, #1]
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 801702e:	4b27      	ldr	r3, [pc, #156]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 8017030:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017034:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8017038:	4b27      	ldr	r3, [pc, #156]	; (80170d8 <LoRaMacClassBProcessPingSlot+0x1d4>)
 801703a:	741a      	strb	r2, [r3, #16]
                pingSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport; /* ST_WORKAROUND: keep repeater feature */
 801703c:	4b23      	ldr	r3, [pc, #140]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 801703e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017042:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8017046:	4b24      	ldr	r3, [pc, #144]	; (80170d8 <LoRaMacClassBProcessPingSlot+0x1d4>)
 8017048:	745a      	strb	r2, [r3, #17]
                pingSlotRxConfig.Frequency = frequency;
 801704a:	4a23      	ldr	r2, [pc, #140]	; (80170d8 <LoRaMacClassBProcessPingSlot+0x1d4>)
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	6053      	str	r3, [r2, #4]
                pingSlotRxConfig.RxContinuous = false;
 8017050:	4b21      	ldr	r3, [pc, #132]	; (80170d8 <LoRaMacClassBProcessPingSlot+0x1d4>)
 8017052:	2200      	movs	r2, #0
 8017054:	749a      	strb	r2, [r3, #18]
                pingSlotRxConfig.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8017056:	4b20      	ldr	r3, [pc, #128]	; (80170d8 <LoRaMacClassBProcessPingSlot+0x1d4>)
 8017058:	2204      	movs	r2, #4
 801705a:	74da      	strb	r2, [r3, #19]

                RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &pingSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 801705c:	4b1b      	ldr	r3, [pc, #108]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 801705e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017062:	7818      	ldrb	r0, [r3, #0]
 8017064:	4b19      	ldr	r3, [pc, #100]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 8017066:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801706a:	3304      	adds	r3, #4
 801706c:	461a      	mov	r2, r3
 801706e:	491a      	ldr	r1, [pc, #104]	; (80170d8 <LoRaMacClassBProcessPingSlot+0x1d4>)
 8017070:	f002 fdfb 	bl	8019c6a <RegionRxConfig>

                if( pingSlotRxConfig.RxContinuous == false )
 8017074:	4b18      	ldr	r3, [pc, #96]	; (80170d8 <LoRaMacClassBProcessPingSlot+0x1d4>)
 8017076:	7c9b      	ldrb	r3, [r3, #18]
 8017078:	f083 0301 	eor.w	r3, r3, #1
 801707c:	b2db      	uxtb	r3, r3
 801707e:	2b00      	cmp	r3, #0
 8017080:	d008      	beq.n	8017094 <LoRaMacClassBProcessPingSlot+0x190>
                {
                    Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 8017082:	4b17      	ldr	r3, [pc, #92]	; (80170e0 <LoRaMacClassBProcessPingSlot+0x1dc>)
 8017084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017086:	4a11      	ldr	r2, [pc, #68]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 8017088:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 801708c:	6892      	ldr	r2, [r2, #8]
 801708e:	4610      	mov	r0, r2
 8017090:	4798      	blx	r3
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
                TimerStart( &Ctx.PingSlotTimer );
            }
#endif /* LORAMAC_VERSION */
            break;
 8017092:	e016      	b.n	80170c2 <LoRaMacClassBProcessPingSlot+0x1be>
                    Radio.Rx( 0 ); // Continuous mode
 8017094:	4b12      	ldr	r3, [pc, #72]	; (80170e0 <LoRaMacClassBProcessPingSlot+0x1dc>)
 8017096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017098:	2000      	movs	r0, #0
 801709a:	4798      	blx	r3
            break;
 801709c:	e011      	b.n	80170c2 <LoRaMacClassBProcessPingSlot+0x1be>
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 801709e:	4b0b      	ldr	r3, [pc, #44]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 80170a0:	2200      	movs	r2, #0
 80170a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 80170a6:	211e      	movs	r1, #30
 80170a8:	480c      	ldr	r0, [pc, #48]	; (80170dc <LoRaMacClassBProcessPingSlot+0x1d8>)
 80170aa:	f009 fab3 	bl	8020614 <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.PingSlotTimer );
 80170ae:	480b      	ldr	r0, [pc, #44]	; (80170dc <LoRaMacClassBProcessPingSlot+0x1d8>)
 80170b0:	f009 f9d2 	bl	8020458 <UTIL_TIMER_Start>
            break;
 80170b4:	e005      	b.n	80170c2 <LoRaMacClassBProcessPingSlot+0x1be>
        }
        default:
        {
            Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 80170b6:	4b05      	ldr	r3, [pc, #20]	; (80170cc <LoRaMacClassBProcessPingSlot+0x1c8>)
 80170b8:	2200      	movs	r2, #0
 80170ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            break;
 80170be:	e000      	b.n	80170c2 <LoRaMacClassBProcessPingSlot+0x1be>
            break;
 80170c0:	bf00      	nop
        }
    }
}
 80170c2:	bf00      	nop
 80170c4:	370c      	adds	r7, #12
 80170c6:	46bd      	mov	sp, r7
 80170c8:	bd90      	pop	{r4, r7, pc}
 80170ca:	bf00      	nop
 80170cc:	2000219c 	.word	0x2000219c
 80170d0:	20002250 	.word	0x20002250
 80170d4:	200021a0 	.word	0x200021a0
 80170d8:	20002254 	.word	0x20002254
 80170dc:	200021f8 	.word	0x200021f8
 80170e0:	08021e08 	.word	0x08021e08

080170e4 <LoRaMacClassBMulticastSlotTimerEvent>:
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80170e4:	b580      	push	{r7, lr}
 80170e6:	b082      	sub	sp, #8
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;
 80170ec:	4a08      	ldr	r2, [pc, #32]	; (8017110 <LoRaMacClassBMulticastSlotTimerEvent+0x2c>)
 80170ee:	7813      	ldrb	r3, [r2, #0]
 80170f0:	f043 0304 	orr.w	r3, r3, #4
 80170f4:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 80170f6:	4b07      	ldr	r3, [pc, #28]	; (8017114 <LoRaMacClassBMulticastSlotTimerEvent+0x30>)
 80170f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d003      	beq.n	8017108 <LoRaMacClassBMulticastSlotTimerEvent+0x24>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 8017100:	4b04      	ldr	r3, [pc, #16]	; (8017114 <LoRaMacClassBMulticastSlotTimerEvent+0x30>)
 8017102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017106:	4798      	blx	r3
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017108:	bf00      	nop
 801710a:	3708      	adds	r7, #8
 801710c:	46bd      	mov	sp, r7
 801710e:	bd80      	pop	{r7, pc}
 8017110:	20002198 	.word	0x20002198
 8017114:	2000219c 	.word	0x2000219c

08017118 <LoRaMacClassBProcessMulticastSlot>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static void LoRaMacClassBProcessMulticastSlot( void )
{
 8017118:	b5b0      	push	{r4, r5, r7, lr}
 801711a:	b088      	sub	sp, #32
 801711c:	af02      	add	r7, sp, #8
    static RxConfigParams_t multicastSlotRxConfig;
    TimerTime_t multicastSlotTime = 0;
 801711e:	2300      	movs	r3, #0
 8017120:	617b      	str	r3, [r7, #20]
    TimerTime_t slotTime = 0;
 8017122:	2300      	movs	r3, #0
 8017124:	607b      	str	r3, [r7, #4]
    MulticastCtx_t *cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 8017126:	4b96      	ldr	r3, [pc, #600]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017128:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801712c:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint32_t maxRxError = 0;
    bool slotHasPriority = false;
#endif /* LORAMAC_VERSION */

    if( cur == NULL )
 801712e:	693b      	ldr	r3, [r7, #16]
 8017130:	2b00      	cmp	r3, #0
 8017132:	f000 811c 	beq.w	801736e <LoRaMacClassBProcessMulticastSlot+0x256>
    {
        return;
    }

    if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 8017136:	4b92      	ldr	r3, [pc, #584]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017138:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801713c:	2b03      	cmp	r3, #3
 801713e:	f000 8118 	beq.w	8017372 <LoRaMacClassBProcessMulticastSlot+0x25a>
    {
        // A multicast slot is already open
        return;
    }

    switch( Ctx.MulticastSlotState )
 8017142:	4b8f      	ldr	r3, [pc, #572]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017144:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017148:	2b02      	cmp	r3, #2
 801714a:	f000 8092 	beq.w	8017272 <LoRaMacClassBProcessMulticastSlot+0x15a>
 801714e:	2b02      	cmp	r3, #2
 8017150:	f300 8108 	bgt.w	8017364 <LoRaMacClassBProcessMulticastSlot+0x24c>
 8017154:	2b00      	cmp	r3, #0
 8017156:	d002      	beq.n	801715e <LoRaMacClassBProcessMulticastSlot+0x46>
 8017158:	2b01      	cmp	r3, #1
 801715a:	d021      	beq.n	80171a0 <LoRaMacClassBProcessMulticastSlot+0x88>
 801715c:	e102      	b.n	8017364 <LoRaMacClassBProcessMulticastSlot+0x24c>
    {
        case PINGSLOT_STATE_CALC_PING_OFFSET:
        {
            // Compute all offsets for every multicast slots
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
 801715e:	2300      	movs	r3, #0
 8017160:	73fb      	strb	r3, [r7, #15]
 8017162:	e016      	b.n	8017192 <LoRaMacClassBProcessMulticastSlot+0x7a>
            {
                ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 8017164:	4b86      	ldr	r3, [pc, #536]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017166:	691b      	ldr	r3, [r3, #16]
 8017168:	2200      	movs	r2, #0
 801716a:	461c      	mov	r4, r3
 801716c:	4615      	mov	r5, r2
 801716e:	693b      	ldr	r3, [r7, #16]
 8017170:	685a      	ldr	r2, [r3, #4]
 8017172:	693b      	ldr	r3, [r7, #16]
 8017174:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 8017176:	693b      	ldr	r3, [r7, #16]
 8017178:	3328      	adds	r3, #40	; 0x28
 801717a:	9300      	str	r3, [sp, #0]
 801717c:	460b      	mov	r3, r1
 801717e:	4620      	mov	r0, r4
 8017180:	4629      	mov	r1, r5
 8017182:	f7fe ffeb 	bl	801615c <ComputePingOffset>
                                   cur->ChannelParams.Address,
                                   cur->PingPeriod,
                                   &( cur->PingOffset ) );
                cur++;
 8017186:	693b      	ldr	r3, [r7, #16]
 8017188:	332c      	adds	r3, #44	; 0x2c
 801718a:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
 801718c:	7bfb      	ldrb	r3, [r7, #15]
 801718e:	3301      	adds	r3, #1
 8017190:	73fb      	strb	r3, [r7, #15]
 8017192:	7bfb      	ldrb	r3, [r7, #15]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d0e5      	beq.n	8017164 <LoRaMacClassBProcessMulticastSlot+0x4c>
            }
            Ctx.MulticastSlotState = PINGSLOT_STATE_SET_TIMER;
 8017198:	4b79      	ldr	r3, [pc, #484]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801719a:	2201      	movs	r2, #1
 801719c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }
            // Intentional fall through
        case PINGSLOT_STATE_SET_TIMER:
        {
            cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 80171a0:	4b77      	ldr	r3, [pc, #476]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80171a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80171a6:	613b      	str	r3, [r7, #16]
            Ctx.PingSlotCtx.NextMulticastChannel = NULL;
 80171a8:	4b75      	ldr	r3, [pc, #468]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80171aa:	2200      	movs	r2, #0
 80171ac:	609a      	str	r2, [r3, #8]

            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80171ae:	2300      	movs	r3, #0
 80171b0:	73bb      	strb	r3, [r7, #14]
 80171b2:	e01f      	b.n	80171f4 <LoRaMacClassBProcessMulticastSlot+0xdc>
            {
                // Calculate the next slot time for every multicast slot
                if( CalcNextSlotTime( cur->PingOffset, cur->PingPeriod, cur->PingNb, &slotTime ) == true )
 80171b4:	693b      	ldr	r3, [r7, #16]
 80171b6:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 80171b8:	693b      	ldr	r3, [r7, #16]
 80171ba:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 80171bc:	693b      	ldr	r3, [r7, #16]
 80171be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80171c2:	b29a      	uxth	r2, r3
 80171c4:	1d3b      	adds	r3, r7, #4
 80171c6:	f7ff f94d 	bl	8016464 <CalcNextSlotTime>
 80171ca:	4603      	mov	r3, r0
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d00b      	beq.n	80171e8 <LoRaMacClassBProcessMulticastSlot+0xd0>
                {
                    if( ( multicastSlotTime == 0 ) || ( multicastSlotTime > slotTime ) )
 80171d0:	697b      	ldr	r3, [r7, #20]
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d003      	beq.n	80171de <LoRaMacClassBProcessMulticastSlot+0xc6>
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	697a      	ldr	r2, [r7, #20]
 80171da:	429a      	cmp	r2, r3
 80171dc:	d904      	bls.n	80171e8 <LoRaMacClassBProcessMulticastSlot+0xd0>
                    {
                        // Update the slot time and the next multicast channel
                        multicastSlotTime = slotTime;
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	617b      	str	r3, [r7, #20]
                        Ctx.PingSlotCtx.NextMulticastChannel = cur;
 80171e2:	4a67      	ldr	r2, [pc, #412]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80171e4:	693b      	ldr	r3, [r7, #16]
 80171e6:	6093      	str	r3, [r2, #8]
                    }
                }
                cur++;
 80171e8:	693b      	ldr	r3, [r7, #16]
 80171ea:	332c      	adds	r3, #44	; 0x2c
 80171ec:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80171ee:	7bbb      	ldrb	r3, [r7, #14]
 80171f0:	3301      	adds	r3, #1
 80171f2:	73bb      	strb	r3, [r7, #14]
 80171f4:	7bbb      	ldrb	r3, [r7, #14]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d0dc      	beq.n	80171b4 <LoRaMacClassBProcessMulticastSlot+0x9c>
            }

            // Schedule the next multicast slot
            if( Ctx.PingSlotCtx.NextMulticastChannel != NULL )
 80171fa:	4b61      	ldr	r3, [pc, #388]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80171fc:	689b      	ldr	r3, [r3, #8]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	f000 80b9 	beq.w	8017376 <LoRaMacClassBProcessMulticastSlot+0x25e>
            {
                if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 )
 8017204:	4b5e      	ldr	r3, [pc, #376]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017206:	7b1b      	ldrb	r3, [r3, #12]
 8017208:	f003 0302 	and.w	r3, r3, #2
 801720c:	b2db      	uxtb	r3, r3
 801720e:	2b00      	cmp	r3, #0
 8017210:	d018      	beq.n	8017244 <LoRaMacClassBProcessMulticastSlot+0x12c>
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8017212:	4b5b      	ldr	r3, [pc, #364]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017214:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017218:	7818      	ldrb	r0, [r3, #0]
                                                    ClassBNvm->PingSlotCtx.Datarate,
 801721a:	4b5a      	ldr	r3, [pc, #360]	; (8017384 <LoRaMacClassBProcessMulticastSlot+0x26c>)
 801721c:	681b      	ldr	r3, [r3, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 801721e:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 8017222:	4b57      	ldr	r3, [pc, #348]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017224:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8017228:	791a      	ldrb	r2, [r3, #4]
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError,
 801722a:	4b55      	ldr	r3, [pc, #340]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801722c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	4c55      	ldr	r4, [pc, #340]	; (8017388 <LoRaMacClassBProcessMulticastSlot+0x270>)
 8017234:	9400      	str	r4, [sp, #0]
 8017236:	f002 fcfe 	bl	8019c36 <RegionComputeRxWindowParameters>
                                                    ClassBNvm->PingSlotCtx.Datarate,
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
                                                    maxRxError,
                                                    &multicastSlotRxConfig );
#endif /* LORAMAC_VERSION */
                    Ctx.PingSlotCtx.SymbolTimeout = multicastSlotRxConfig.WindowTimeout;
 801723a:	4b53      	ldr	r3, [pc, #332]	; (8017388 <LoRaMacClassBProcessMulticastSlot+0x270>)
 801723c:	689b      	ldr	r3, [r3, #8]
 801723e:	b29a      	uxth	r2, r3
 8017240:	4b4f      	ldr	r3, [pc, #316]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017242:	80da      	strh	r2, [r3, #6]
                }

                if( ( int32_t )multicastSlotTime > multicastSlotRxConfig.WindowOffset )
 8017244:	4b50      	ldr	r3, [pc, #320]	; (8017388 <LoRaMacClassBProcessMulticastSlot+0x270>)
 8017246:	68da      	ldr	r2, [r3, #12]
 8017248:	697b      	ldr	r3, [r7, #20]
 801724a:	429a      	cmp	r2, r3
 801724c:	da05      	bge.n	801725a <LoRaMacClassBProcessMulticastSlot+0x142>
                {// Apply the window offset
                    multicastSlotTime += multicastSlotRxConfig.WindowOffset;
 801724e:	4b4e      	ldr	r3, [pc, #312]	; (8017388 <LoRaMacClassBProcessMulticastSlot+0x270>)
 8017250:	68db      	ldr	r3, [r3, #12]
 8017252:	461a      	mov	r2, r3
 8017254:	697b      	ldr	r3, [r7, #20]
 8017256:	4413      	add	r3, r2
 8017258:	617b      	str	r3, [r7, #20]
                }

                // Start the timer if the ping slot time is in range
                Ctx.MulticastSlotState = PINGSLOT_STATE_IDLE;
 801725a:	4b49      	ldr	r3, [pc, #292]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801725c:	2202      	movs	r2, #2
 801725e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                TimerSetValue( &Ctx.MulticastSlotTimer, multicastSlotTime );
 8017262:	6979      	ldr	r1, [r7, #20]
 8017264:	4849      	ldr	r0, [pc, #292]	; (801738c <LoRaMacClassBProcessMulticastSlot+0x274>)
 8017266:	f009 f9d5 	bl	8020614 <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.MulticastSlotTimer );
 801726a:	4848      	ldr	r0, [pc, #288]	; (801738c <LoRaMacClassBProcessMulticastSlot+0x274>)
 801726c:	f009 f8f4 	bl	8020458 <UTIL_TIMER_Start>
            }
            break;
 8017270:	e081      	b.n	8017376 <LoRaMacClassBProcessMulticastSlot+0x25e>
        }
        case PINGSLOT_STATE_IDLE:
        {
            uint32_t frequency = 0;
 8017272:	2300      	movs	r3, #0
 8017274:	60bb      	str	r3, [r7, #8]

            // Verify if the multicast channel is valid
            if( Ctx.PingSlotCtx.NextMulticastChannel == NULL )
 8017276:	4b42      	ldr	r3, [pc, #264]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017278:	689b      	ldr	r3, [r3, #8]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d10b      	bne.n	8017296 <LoRaMacClassBProcessMulticastSlot+0x17e>
            {
                Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 801727e:	4b40      	ldr	r3, [pc, #256]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017280:	2200      	movs	r2, #0
 8017282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 8017286:	2101      	movs	r1, #1
 8017288:	4840      	ldr	r0, [pc, #256]	; (801738c <LoRaMacClassBProcessMulticastSlot+0x274>)
 801728a:	f009 f9c3 	bl	8020614 <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.MulticastSlotTimer );
 801728e:	483f      	ldr	r0, [pc, #252]	; (801738c <LoRaMacClassBProcessMulticastSlot+0x274>)
 8017290:	f009 f8e2 	bl	8020458 <UTIL_TIMER_Start>
                break;
 8017294:	e070      	b.n	8017378 <LoRaMacClassBProcessMulticastSlot+0x260>
            }

            // Apply frequency
            frequency = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Frequency;
 8017296:	4b3a      	ldr	r3, [pc, #232]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017298:	689b      	ldr	r3, [r3, #8]
 801729a:	699b      	ldr	r3, [r3, #24]
 801729c:	60bb      	str	r3, [r7, #8]

            // Restore the floor plan frequency if there is no individual frequency assigned
            if( frequency == 0 )
 801729e:	68bb      	ldr	r3, [r7, #8]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d10a      	bne.n	80172ba <LoRaMacClassBProcessMulticastSlot+0x1a2>
            {
                // Restore floor plan
                frequency = CalcDownlinkChannelAndFrequency( Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.Address,
 80172a4:	4b36      	ldr	r3, [pc, #216]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80172a6:	689b      	ldr	r3, [r3, #8]
 80172a8:	6858      	ldr	r0, [r3, #4]
 80172aa:	4b35      	ldr	r3, [pc, #212]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80172ac:	6919      	ldr	r1, [r3, #16]
 80172ae:	2300      	movs	r3, #0
 80172b0:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 80172b4:	f7fe ffd2 	bl	801625c <CalcDownlinkChannelAndFrequency>
 80172b8:	60b8      	str	r0, [r7, #8]
                                                             Ctx.BeaconCtx.BeaconTime.Seconds, CLASSB_BEACON_INTERVAL, false );
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Ctx.MulticastSlotState = PINGSLOT_STATE_RX;
 80172ba:	4b31      	ldr	r3, [pc, #196]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80172bc:	2203      	movs	r2, #3
 80172be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

            multicastSlotRxConfig.Datarate = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Datarate;
 80172c2:	4b2f      	ldr	r3, [pc, #188]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80172c4:	689b      	ldr	r3, [r3, #8]
 80172c6:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80172ca:	4b2f      	ldr	r3, [pc, #188]	; (8017388 <LoRaMacClassBProcessMulticastSlot+0x270>)
 80172cc:	705a      	strb	r2, [r3, #1]
            multicastSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 80172ce:	4b2c      	ldr	r3, [pc, #176]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80172d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80172d4:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80172d8:	4b2b      	ldr	r3, [pc, #172]	; (8017388 <LoRaMacClassBProcessMulticastSlot+0x270>)
 80172da:	741a      	strb	r2, [r3, #16]
            multicastSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport; /* ST_WORKAROUND: keep repeater feature */
 80172dc:	4b28      	ldr	r3, [pc, #160]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80172de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80172e2:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80172e6:	4b28      	ldr	r3, [pc, #160]	; (8017388 <LoRaMacClassBProcessMulticastSlot+0x270>)
 80172e8:	745a      	strb	r2, [r3, #17]
            multicastSlotRxConfig.Frequency = frequency;
 80172ea:	4a27      	ldr	r2, [pc, #156]	; (8017388 <LoRaMacClassBProcessMulticastSlot+0x270>)
 80172ec:	68bb      	ldr	r3, [r7, #8]
 80172ee:	6053      	str	r3, [r2, #4]
            multicastSlotRxConfig.RxContinuous = false;
 80172f0:	4b25      	ldr	r3, [pc, #148]	; (8017388 <LoRaMacClassBProcessMulticastSlot+0x270>)
 80172f2:	2200      	movs	r2, #0
 80172f4:	749a      	strb	r2, [r3, #18]
            multicastSlotRxConfig.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80172f6:	4b24      	ldr	r3, [pc, #144]	; (8017388 <LoRaMacClassBProcessMulticastSlot+0x270>)
 80172f8:	2205      	movs	r2, #5
 80172fa:	74da      	strb	r2, [r3, #19]

            RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &multicastSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 80172fc:	4b20      	ldr	r3, [pc, #128]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80172fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017302:	7818      	ldrb	r0, [r3, #0]
 8017304:	4b1e      	ldr	r3, [pc, #120]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017306:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801730a:	3304      	adds	r3, #4
 801730c:	461a      	mov	r2, r3
 801730e:	491e      	ldr	r1, [pc, #120]	; (8017388 <LoRaMacClassBProcessMulticastSlot+0x270>)
 8017310:	f002 fcab 	bl	8019c6a <RegionRxConfig>

            if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 8017314:	4b1a      	ldr	r3, [pc, #104]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801731a:	2b03      	cmp	r3, #3
 801731c:	d10d      	bne.n	801733a <LoRaMacClassBProcessMulticastSlot+0x222>
            {
                // Close ping slot window, if necessary. Multicast slots have priority
                Radio.Standby( );
 801731e:	4b1c      	ldr	r3, [pc, #112]	; (8017390 <LoRaMacClassBProcessMulticastSlot+0x278>)
 8017320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017322:	4798      	blx	r3
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8017324:	4b16      	ldr	r3, [pc, #88]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017326:	2200      	movs	r2, #0
 8017328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 801732c:	211e      	movs	r1, #30
 801732e:	4819      	ldr	r0, [pc, #100]	; (8017394 <LoRaMacClassBProcessMulticastSlot+0x27c>)
 8017330:	f009 f970 	bl	8020614 <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.PingSlotTimer );
 8017334:	4817      	ldr	r0, [pc, #92]	; (8017394 <LoRaMacClassBProcessMulticastSlot+0x27c>)
 8017336:	f009 f88f 	bl	8020458 <UTIL_TIMER_Start>
            }

            if( multicastSlotRxConfig.RxContinuous == false )
 801733a:	4b13      	ldr	r3, [pc, #76]	; (8017388 <LoRaMacClassBProcessMulticastSlot+0x270>)
 801733c:	7c9b      	ldrb	r3, [r3, #18]
 801733e:	f083 0301 	eor.w	r3, r3, #1
 8017342:	b2db      	uxtb	r3, r3
 8017344:	2b00      	cmp	r3, #0
 8017346:	d008      	beq.n	801735a <LoRaMacClassBProcessMulticastSlot+0x242>
            {
                Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 8017348:	4b11      	ldr	r3, [pc, #68]	; (8017390 <LoRaMacClassBProcessMulticastSlot+0x278>)
 801734a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801734c:	4a0c      	ldr	r2, [pc, #48]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801734e:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 8017352:	6892      	ldr	r2, [r2, #8]
 8017354:	4610      	mov	r0, r2
 8017356:	4798      	blx	r3
                Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
                TimerSetValue( &Ctx.MulticastSlotTimer, CLASSB_PING_SLOT_WINDOW );
                TimerStart( &Ctx.MulticastSlotTimer );
            }
#endif /* LORAMAC_VERSION */
            break;
 8017358:	e00e      	b.n	8017378 <LoRaMacClassBProcessMulticastSlot+0x260>
                Radio.Rx( 0 ); // Continuous mode
 801735a:	4b0d      	ldr	r3, [pc, #52]	; (8017390 <LoRaMacClassBProcessMulticastSlot+0x278>)
 801735c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801735e:	2000      	movs	r0, #0
 8017360:	4798      	blx	r3
            break;
 8017362:	e009      	b.n	8017378 <LoRaMacClassBProcessMulticastSlot+0x260>
        }
        default:
        {
            Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8017364:	4b06      	ldr	r3, [pc, #24]	; (8017380 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8017366:	2200      	movs	r2, #0
 8017368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            break;
 801736c:	e004      	b.n	8017378 <LoRaMacClassBProcessMulticastSlot+0x260>
        return;
 801736e:	bf00      	nop
 8017370:	e002      	b.n	8017378 <LoRaMacClassBProcessMulticastSlot+0x260>
        return;
 8017372:	bf00      	nop
 8017374:	e000      	b.n	8017378 <LoRaMacClassBProcessMulticastSlot+0x260>
            break;
 8017376:	bf00      	nop
        }
    }
}
 8017378:	3718      	adds	r7, #24
 801737a:	46bd      	mov	sp, r7
 801737c:	bdb0      	pop	{r4, r5, r7, pc}
 801737e:	bf00      	nop
 8017380:	2000219c 	.word	0x2000219c
 8017384:	20002250 	.word	0x20002250
 8017388:	20002268 	.word	0x20002268
 801738c:	20002210 	.word	0x20002210
 8017390:	08021e08 	.word	0x08021e08
 8017394:	200021f8 	.word	0x200021f8

08017398 <LoRaMacClassBRxBeacon>:
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8017398:	b590      	push	{r4, r7, lr}
 801739a:	b095      	sub	sp, #84	; 0x54
 801739c:	af04      	add	r7, sp, #16
 801739e:	6078      	str	r0, [r7, #4]
 80173a0:	460b      	mov	r3, r1
 80173a2:	807b      	strh	r3, [r7, #2]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    bool beaconProcessed = false;
 80173a4:	2300      	movs	r3, #0
 80173a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint16_t crc0 = 0;
 80173aa:	2300      	movs	r3, #0
 80173ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    uint16_t crc1 = 0;
 80173ae:	2300      	movs	r3, #0
 80173b0:	877b      	strh	r3, [r7, #58]	; 0x3a
    uint16_t beaconCrc0 = 0;
 80173b2:	2300      	movs	r3, #0
 80173b4:	873b      	strh	r3, [r7, #56]	; 0x38
    uint16_t beaconCrc1 = 0;
 80173b6:	2300      	movs	r3, #0
 80173b8:	86fb      	strh	r3, [r7, #54]	; 0x36

    getPhy.Attribute = PHY_BEACON_FORMAT;
 80173ba:	2331      	movs	r3, #49	; 0x31
 80173bc:	763b      	strb	r3, [r7, #24]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 80173be:	4bb0      	ldr	r3, [pc, #704]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 80173c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80173c4:	781b      	ldrb	r3, [r3, #0]
 80173c6:	f107 0218 	add.w	r2, r7, #24
 80173ca:	4611      	mov	r1, r2
 80173cc:	4618      	mov	r0, r3
 80173ce:	f002 fbbb 	bl	8019b48 <RegionGetPhyParam>
 80173d2:	4603      	mov	r3, r0
 80173d4:	617b      	str	r3, [r7, #20]

    // Verify if we are in the state where we expect a beacon
    if( ( Ctx.BeaconState == BEACON_STATE_RX ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 80173d6:	4baa      	ldr	r3, [pc, #680]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 80173d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80173dc:	2b09      	cmp	r3, #9
 80173de:	d007      	beq.n	80173f0 <LoRaMacClassBRxBeacon+0x58>
 80173e0:	4ba7      	ldr	r3, [pc, #668]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 80173e2:	7b1b      	ldrb	r3, [r3, #12]
 80173e4:	f003 0310 	and.w	r3, r3, #16
 80173e8:	b2db      	uxtb	r3, r3
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	f000 8142 	beq.w	8017674 <LoRaMacClassBRxBeacon+0x2dc>
    {
        if( size == phyParam.BeaconFormat.BeaconSize )
 80173f0:	7d3b      	ldrb	r3, [r7, #20]
 80173f2:	b29b      	uxth	r3, r3
 80173f4:	887a      	ldrh	r2, [r7, #2]
 80173f6:	429a      	cmp	r2, r3
 80173f8:	f040 812d 	bne.w	8017656 <LoRaMacClassBRxBeacon+0x2be>
            // Field: | RFU1 | Time | CRC1 | GwSpecific | RFU2 | CRC2 |
            //
            // Field RFU1 and RFU2 have variable sizes. It depends on the region specific implementation

            // Read CRC1 field from the frame
            beaconCrc0 = ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4] ) & 0x00FF;
 80173fc:	7d7b      	ldrb	r3, [r7, #21]
 80173fe:	3304      	adds	r3, #4
 8017400:	687a      	ldr	r2, [r7, #4]
 8017402:	4413      	add	r3, r2
 8017404:	781b      	ldrb	r3, [r3, #0]
 8017406:	873b      	strh	r3, [r7, #56]	; 0x38
            beaconCrc0 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 1] << 8 ) & 0xFF00;
 8017408:	7d7b      	ldrb	r3, [r7, #21]
 801740a:	3305      	adds	r3, #5
 801740c:	687a      	ldr	r2, [r7, #4]
 801740e:	4413      	add	r3, r2
 8017410:	781b      	ldrb	r3, [r3, #0]
 8017412:	021b      	lsls	r3, r3, #8
 8017414:	b21a      	sxth	r2, r3
 8017416:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801741a:	4313      	orrs	r3, r2
 801741c:	b21b      	sxth	r3, r3
 801741e:	873b      	strh	r3, [r7, #56]	; 0x38
            crc0 = BeaconCrc( payload, phyParam.BeaconFormat.Rfu1Size + 4 );
 8017420:	7d7b      	ldrb	r3, [r7, #21]
 8017422:	b29b      	uxth	r3, r3
 8017424:	3304      	adds	r3, #4
 8017426:	b29b      	uxth	r3, r3
 8017428:	4619      	mov	r1, r3
 801742a:	6878      	ldr	r0, [r7, #4]
 801742c:	f7ff f8a2 	bl	8016574 <BeaconCrc>
 8017430:	4603      	mov	r3, r0
 8017432:	87bb      	strh	r3, [r7, #60]	; 0x3c

            // Validate the first crc of the beacon frame
            if( crc0 == beaconCrc0 )
 8017434:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8017436:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017438:	429a      	cmp	r2, r3
 801743a:	d13b      	bne.n	80174b4 <LoRaMacClassBRxBeacon+0x11c>
            {
                // Read Time field from the frame
                Ctx.BeaconCtx.BeaconTime.Seconds  = ( ( uint32_t )payload[phyParam.BeaconFormat.Rfu1Size] ) & 0x000000FF;
 801743c:	7d7b      	ldrb	r3, [r7, #21]
 801743e:	461a      	mov	r2, r3
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	4413      	add	r3, r2
 8017444:	781b      	ldrb	r3, [r3, #0]
 8017446:	461a      	mov	r2, r3
 8017448:	4b8d      	ldr	r3, [pc, #564]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 801744a:	611a      	str	r2, [r3, #16]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 1] << 8 ) ) & 0x0000FF00;
 801744c:	4b8c      	ldr	r3, [pc, #560]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 801744e:	691a      	ldr	r2, [r3, #16]
 8017450:	7d7b      	ldrb	r3, [r7, #21]
 8017452:	3301      	adds	r3, #1
 8017454:	6879      	ldr	r1, [r7, #4]
 8017456:	440b      	add	r3, r1
 8017458:	781b      	ldrb	r3, [r3, #0]
 801745a:	021b      	lsls	r3, r3, #8
 801745c:	b29b      	uxth	r3, r3
 801745e:	4313      	orrs	r3, r2
 8017460:	4a87      	ldr	r2, [pc, #540]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 8017462:	6113      	str	r3, [r2, #16]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 2] << 16 ) ) & 0x00FF0000;
 8017464:	4b86      	ldr	r3, [pc, #536]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 8017466:	691a      	ldr	r2, [r3, #16]
 8017468:	7d7b      	ldrb	r3, [r7, #21]
 801746a:	3302      	adds	r3, #2
 801746c:	6879      	ldr	r1, [r7, #4]
 801746e:	440b      	add	r3, r1
 8017470:	781b      	ldrb	r3, [r3, #0]
 8017472:	041b      	lsls	r3, r3, #16
 8017474:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8017478:	4313      	orrs	r3, r2
 801747a:	4a81      	ldr	r2, [pc, #516]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 801747c:	6113      	str	r3, [r2, #16]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 3] << 24 ) ) & 0xFF000000;
 801747e:	4b80      	ldr	r3, [pc, #512]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 8017480:	691b      	ldr	r3, [r3, #16]
 8017482:	7d7a      	ldrb	r2, [r7, #21]
 8017484:	3203      	adds	r2, #3
 8017486:	6879      	ldr	r1, [r7, #4]
 8017488:	440a      	add	r2, r1
 801748a:	7812      	ldrb	r2, [r2, #0]
 801748c:	0612      	lsls	r2, r2, #24
 801748e:	4313      	orrs	r3, r2
 8017490:	4a7b      	ldr	r2, [pc, #492]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 8017492:	6113      	str	r3, [r2, #16]
                Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 8017494:	4b7a      	ldr	r3, [pc, #488]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 8017496:	2200      	movs	r2, #0
 8017498:	829a      	strh	r2, [r3, #20]
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Time = Ctx.BeaconCtx.BeaconTime;
 801749a:	4b79      	ldr	r3, [pc, #484]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 801749c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80174a0:	4a77      	ldr	r2, [pc, #476]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 80174a2:	3308      	adds	r3, #8
 80174a4:	3210      	adds	r2, #16
 80174a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80174aa:	e883 0003 	stmia.w	r3, {r0, r1}
                beaconProcessed = true;
 80174ae:	2301      	movs	r3, #1
 80174b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            }

            // Read CRC2 field from the frame
            beaconCrc1 = ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size] ) & 0x00FF;
 80174b4:	7d7b      	ldrb	r3, [r7, #21]
 80174b6:	330d      	adds	r3, #13
 80174b8:	7dba      	ldrb	r2, [r7, #22]
 80174ba:	4413      	add	r3, r2
 80174bc:	461a      	mov	r2, r3
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	4413      	add	r3, r2
 80174c2:	781b      	ldrb	r3, [r3, #0]
 80174c4:	86fb      	strh	r3, [r7, #54]	; 0x36
            beaconCrc1 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size + 1] << 8 ) & 0xFF00;
 80174c6:	7d7b      	ldrb	r3, [r7, #21]
 80174c8:	330d      	adds	r3, #13
 80174ca:	7dba      	ldrb	r2, [r7, #22]
 80174cc:	4413      	add	r3, r2
 80174ce:	3301      	adds	r3, #1
 80174d0:	687a      	ldr	r2, [r7, #4]
 80174d2:	4413      	add	r3, r2
 80174d4:	781b      	ldrb	r3, [r3, #0]
 80174d6:	021b      	lsls	r3, r3, #8
 80174d8:	b21a      	sxth	r2, r3
 80174da:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80174de:	4313      	orrs	r3, r2
 80174e0:	b21b      	sxth	r3, r3
 80174e2:	86fb      	strh	r3, [r7, #54]	; 0x36
            crc1 = BeaconCrc( &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2], 7 + phyParam.BeaconFormat.Rfu2Size );
 80174e4:	7d7b      	ldrb	r3, [r7, #21]
 80174e6:	3306      	adds	r3, #6
 80174e8:	687a      	ldr	r2, [r7, #4]
 80174ea:	441a      	add	r2, r3
 80174ec:	7dbb      	ldrb	r3, [r7, #22]
 80174ee:	b29b      	uxth	r3, r3
 80174f0:	3307      	adds	r3, #7
 80174f2:	b29b      	uxth	r3, r3
 80174f4:	4619      	mov	r1, r3
 80174f6:	4610      	mov	r0, r2
 80174f8:	f7ff f83c 	bl	8016574 <BeaconCrc>
 80174fc:	4603      	mov	r3, r0
 80174fe:	877b      	strh	r3, [r7, #58]	; 0x3a

            // Validate the second crc of the beacon frame
            if( crc1 == beaconCrc1 )
 8017500:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017502:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017504:	429a      	cmp	r2, r3
 8017506:	d115      	bne.n	8017534 <LoRaMacClassBRxBeacon+0x19c>
            {
                // Read GwSpecific field from the frame
                // The GwSpecific field contains 1 byte InfoDesc and 6 bytes Info
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.InfoDesc = payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2];
 8017508:	7d7b      	ldrb	r3, [r7, #21]
 801750a:	3306      	adds	r3, #6
 801750c:	687a      	ldr	r2, [r7, #4]
 801750e:	441a      	add	r2, r3
 8017510:	4b5b      	ldr	r3, [pc, #364]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 8017512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017516:	7812      	ldrb	r2, [r2, #0]
 8017518:	765a      	strb	r2, [r3, #25]
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 1], 6 );
 801751a:	4b59      	ldr	r3, [pc, #356]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 801751c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017520:	f103 001a 	add.w	r0, r3, #26
 8017524:	7d7b      	ldrb	r3, [r7, #21]
 8017526:	3307      	adds	r3, #7
 8017528:	687a      	ldr	r2, [r7, #4]
 801752a:	4413      	add	r3, r2
 801752c:	2206      	movs	r2, #6
 801752e:	4619      	mov	r1, r3
 8017530:	f004 feb5 	bl	801c29e <memcpy1>
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 2 + 1], 6 );
            }
#endif /* LORAMAC_VERSION */

            // Reset beacon variables, if one of the crc is valid
            if( beaconProcessed == true )
 8017534:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017538:	2b00      	cmp	r3, #0
 801753a:	f000 808c 	beq.w	8017656 <LoRaMacClassBRxBeacon+0x2be>
            {
                uint32_t spreadingFactor = 0;
 801753e:	2300      	movs	r3, #0
 8017540:	633b      	str	r3, [r7, #48]	; 0x30
                uint32_t bandwidth = 0;
 8017542:	2300      	movs	r3, #0
 8017544:	62fb      	str	r3, [r7, #44]	; 0x2c

                getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 8017546:	2332      	movs	r3, #50	; 0x32
 8017548:	763b      	strb	r3, [r7, #24]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 801754a:	4b4d      	ldr	r3, [pc, #308]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 801754c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017550:	781b      	ldrb	r3, [r3, #0]
 8017552:	f107 0218 	add.w	r2, r7, #24
 8017556:	4611      	mov	r1, r2
 8017558:	4618      	mov	r0, r3
 801755a:	f002 faf5 	bl	8019b48 <RegionGetPhyParam>
 801755e:	4603      	mov	r3, r0
 8017560:	617b      	str	r3, [r7, #20]

                getPhy.Attribute = PHY_SF_FROM_DR;
 8017562:	2338      	movs	r3, #56	; 0x38
 8017564:	763b      	strb	r3, [r7, #24]
                getPhy.Datarate = phyParam.Value;
 8017566:	697b      	ldr	r3, [r7, #20]
 8017568:	b25b      	sxtb	r3, r3
 801756a:	767b      	strb	r3, [r7, #25]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 801756c:	4b44      	ldr	r3, [pc, #272]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 801756e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017572:	781b      	ldrb	r3, [r3, #0]
 8017574:	f107 0218 	add.w	r2, r7, #24
 8017578:	4611      	mov	r1, r2
 801757a:	4618      	mov	r0, r3
 801757c:	f002 fae4 	bl	8019b48 <RegionGetPhyParam>
 8017580:	4603      	mov	r3, r0
 8017582:	617b      	str	r3, [r7, #20]
                spreadingFactor = phyParam.Value;
 8017584:	697b      	ldr	r3, [r7, #20]
 8017586:	633b      	str	r3, [r7, #48]	; 0x30

                getPhy.Attribute = PHY_BW_FROM_DR;
 8017588:	2339      	movs	r3, #57	; 0x39
 801758a:	763b      	strb	r3, [r7, #24]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 801758c:	4b3c      	ldr	r3, [pc, #240]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 801758e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017592:	781b      	ldrb	r3, [r3, #0]
 8017594:	f107 0218 	add.w	r2, r7, #24
 8017598:	4611      	mov	r1, r2
 801759a:	4618      	mov	r0, r3
 801759c:	f002 fad4 	bl	8019b48 <RegionGetPhyParam>
 80175a0:	4603      	mov	r3, r0
 80175a2:	617b      	str	r3, [r7, #20]
                bandwidth = phyParam.Value;
 80175a4:	697b      	ldr	r3, [r7, #20]
 80175a6:	62fb      	str	r3, [r7, #44]	; 0x2c

                TimerTime_t time = Radio.TimeOnAir( MODEM_LORA, bandwidth, spreadingFactor, 1, 10, true, size, false );
 80175a8:	4b36      	ldr	r3, [pc, #216]	; (8017684 <LoRaMacClassBRxBeacon+0x2ec>)
 80175aa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80175ac:	887b      	ldrh	r3, [r7, #2]
 80175ae:	b2db      	uxtb	r3, r3
 80175b0:	2200      	movs	r2, #0
 80175b2:	9203      	str	r2, [sp, #12]
 80175b4:	9302      	str	r3, [sp, #8]
 80175b6:	2301      	movs	r3, #1
 80175b8:	9301      	str	r3, [sp, #4]
 80175ba:	230a      	movs	r3, #10
 80175bc:	9300      	str	r3, [sp, #0]
 80175be:	2301      	movs	r3, #1
 80175c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80175c4:	2001      	movs	r0, #1
 80175c6:	47a0      	blx	r4
 80175c8:	62b8      	str	r0, [r7, #40]	; 0x28
                SysTime_t timeOnAir;
                timeOnAir.Seconds = time / 1000;
 80175ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175cc:	4a2e      	ldr	r2, [pc, #184]	; (8017688 <LoRaMacClassBRxBeacon+0x2f0>)
 80175ce:	fba2 2303 	umull	r2, r3, r2, r3
 80175d2:	099b      	lsrs	r3, r3, #6
 80175d4:	60fb      	str	r3, [r7, #12]
                timeOnAir.SubSeconds = time - timeOnAir.Seconds * 1000;
 80175d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175d8:	b29a      	uxth	r2, r3
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	b29b      	uxth	r3, r3
 80175de:	4619      	mov	r1, r3
 80175e0:	0149      	lsls	r1, r1, #5
 80175e2:	1ac9      	subs	r1, r1, r3
 80175e4:	0089      	lsls	r1, r1, #2
 80175e6:	440b      	add	r3, r1
 80175e8:	00db      	lsls	r3, r3, #3
 80175ea:	b29b      	uxth	r3, r3
 80175ec:	1ad3      	subs	r3, r2, r3
 80175ee:	b29b      	uxth	r3, r3
 80175f0:	b21b      	sxth	r3, r3
 80175f2:	823b      	strh	r3, [r7, #16]

                Ctx.BeaconCtx.LastBeaconRx = Ctx.BeaconCtx.BeaconTime;
 80175f4:	4b22      	ldr	r3, [pc, #136]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 80175f6:	4a22      	ldr	r2, [pc, #136]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 80175f8:	3318      	adds	r3, #24
 80175fa:	3210      	adds	r2, #16
 80175fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017600:	e883 0003 	stmia.w	r3, {r0, r1}
                Ctx.BeaconCtx.LastBeaconRx.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8017604:	4b1e      	ldr	r3, [pc, #120]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 8017606:	699a      	ldr	r2, [r3, #24]
 8017608:	4b20      	ldr	r3, [pc, #128]	; (801768c <LoRaMacClassBRxBeacon+0x2f4>)
 801760a:	4413      	add	r3, r2
 801760c:	4a1c      	ldr	r2, [pc, #112]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 801760e:	6193      	str	r3, [r2, #24]

                // Update system time.
                SysTimeSet( SysTimeAdd( Ctx.BeaconCtx.LastBeaconRx, timeOnAir ) );
 8017610:	f107 0020 	add.w	r0, r7, #32
 8017614:	4a1a      	ldr	r2, [pc, #104]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 8017616:	693b      	ldr	r3, [r7, #16]
 8017618:	9300      	str	r3, [sp, #0]
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	3218      	adds	r2, #24
 801761e:	ca06      	ldmia	r2, {r1, r2}
 8017620:	f008 f97c 	bl	801f91c <SysTimeAdd>
 8017624:	f107 0320 	add.w	r3, r7, #32
 8017628:	e893 0003 	ldmia.w	r3, {r0, r1}
 801762c:	f008 f9e8 	bl	801fa00 <SysTimeSet>

                Ctx.BeaconCtx.Ctrl.BeaconAcquired = 1;
 8017630:	4a13      	ldr	r2, [pc, #76]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 8017632:	7b13      	ldrb	r3, [r2, #12]
 8017634:	f043 0302 	orr.w	r3, r3, #2
 8017638:	7313      	strb	r3, [r2, #12]
                Ctx.BeaconCtx.Ctrl.BeaconMode = 1;
 801763a:	4a11      	ldr	r2, [pc, #68]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 801763c:	7b13      	ldrb	r3, [r2, #12]
 801763e:	f043 0301 	orr.w	r3, r3, #1
 8017642:	7313      	strb	r3, [r2, #12]
                ResetWindowTimeout( );
 8017644:	f7ff f8a8 	bl	8016798 <ResetWindowTimeout>
                Ctx.BeaconState = BEACON_STATE_LOCKED;
 8017648:	4b0d      	ldr	r3, [pc, #52]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 801764a:	2205      	movs	r2, #5
 801764c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

                LoRaMacClassBBeaconTimerEvent( NULL );
 8017650:	2000      	movs	r0, #0
 8017652:	f7ff fa3d 	bl	8016ad0 <LoRaMacClassBBeaconTimerEvent>
            }
        }

        if( Ctx.BeaconState == BEACON_STATE_RX )
 8017656:	4b0a      	ldr	r3, [pc, #40]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 8017658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801765c:	2b09      	cmp	r3, #9
 801765e:	d106      	bne.n	801766e <LoRaMacClassBRxBeacon+0x2d6>
        {
            Ctx.BeaconState = BEACON_STATE_TIMEOUT;
 8017660:	4b07      	ldr	r3, [pc, #28]	; (8017680 <LoRaMacClassBRxBeacon+0x2e8>)
 8017662:	2202      	movs	r2, #2
 8017664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            LoRaMacClassBBeaconTimerEvent( NULL );
 8017668:	2000      	movs	r0, #0
 801766a:	f7ff fa31 	bl	8016ad0 <LoRaMacClassBBeaconTimerEvent>
        // If it receives a frame which is
        // 1. not a beacon or
        // 2. a beacon with a crc fail
        // the MAC shall ignore the frame completely. Thus, the function must always return true, even if no
        // valid beacon has been received.
        beaconProcessed = true;
 801766e:	2301      	movs	r3, #1
 8017670:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    return beaconProcessed;
 8017674:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017678:	4618      	mov	r0, r3
 801767a:	3744      	adds	r7, #68	; 0x44
 801767c:	46bd      	mov	sp, r7
 801767e:	bd90      	pop	{r4, r7, pc}
 8017680:	2000219c 	.word	0x2000219c
 8017684:	08021e08 	.word	0x08021e08
 8017688:	10624dd3 	.word	0x10624dd3
 801768c:	12d53d80 	.word	0x12d53d80

08017690 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8017690:	b480      	push	{r7}
 8017692:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 8017694:	4b09      	ldr	r3, [pc, #36]	; (80176bc <LoRaMacClassBIsBeaconExpected+0x2c>)
 8017696:	7b1b      	ldrb	r3, [r3, #12]
 8017698:	f003 0310 	and.w	r3, r3, #16
 801769c:	b2db      	uxtb	r3, r3
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d104      	bne.n	80176ac <LoRaMacClassBIsBeaconExpected+0x1c>
        ( Ctx.BeaconState == BEACON_STATE_RX ) )
 80176a2:	4b06      	ldr	r3, [pc, #24]	; (80176bc <LoRaMacClassBIsBeaconExpected+0x2c>)
 80176a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 80176a8:	2b09      	cmp	r3, #9
 80176aa:	d101      	bne.n	80176b0 <LoRaMacClassBIsBeaconExpected+0x20>
    {
        return true;
 80176ac:	2301      	movs	r3, #1
 80176ae:	e000      	b.n	80176b2 <LoRaMacClassBIsBeaconExpected+0x22>
    }
    return false;
 80176b0:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80176b2:	4618      	mov	r0, r3
 80176b4:	46bd      	mov	sp, r7
 80176b6:	bc80      	pop	{r7}
 80176b8:	4770      	bx	lr
 80176ba:	bf00      	nop
 80176bc:	2000219c 	.word	0x2000219c

080176c0 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80176c0:	b480      	push	{r7}
 80176c2:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 80176c4:	4b05      	ldr	r3, [pc, #20]	; (80176dc <LoRaMacClassBIsPingExpected+0x1c>)
 80176c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80176ca:	2b03      	cmp	r3, #3
 80176cc:	d101      	bne.n	80176d2 <LoRaMacClassBIsPingExpected+0x12>
    {
        return true;
 80176ce:	2301      	movs	r3, #1
 80176d0:	e000      	b.n	80176d4 <LoRaMacClassBIsPingExpected+0x14>
    }
    return false;
 80176d2:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80176d4:	4618      	mov	r0, r3
 80176d6:	46bd      	mov	sp, r7
 80176d8:	bc80      	pop	{r7}
 80176da:	4770      	bx	lr
 80176dc:	2000219c 	.word	0x2000219c

080176e0 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80176e0:	b480      	push	{r7}
 80176e2:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 80176e4:	4b05      	ldr	r3, [pc, #20]	; (80176fc <LoRaMacClassBIsMulticastExpected+0x1c>)
 80176e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80176ea:	2b03      	cmp	r3, #3
 80176ec:	d101      	bne.n	80176f2 <LoRaMacClassBIsMulticastExpected+0x12>
    {
        return true;
 80176ee:	2301      	movs	r3, #1
 80176f0:	e000      	b.n	80176f4 <LoRaMacClassBIsMulticastExpected+0x14>
    }
    return false;
 80176f2:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80176f4:	4618      	mov	r0, r3
 80176f6:	46bd      	mov	sp, r7
 80176f8:	bc80      	pop	{r7}
 80176fa:	4770      	bx	lr
 80176fc:	2000219c 	.word	0x2000219c

08017700 <LoRaMacClassBIsAcquisitionPending>:

bool LoRaMacClassBIsAcquisitionPending( void )
{
 8017700:	b480      	push	{r7}
 8017702:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 8017704:	4b06      	ldr	r3, [pc, #24]	; (8017720 <LoRaMacClassBIsAcquisitionPending+0x20>)
 8017706:	7b1b      	ldrb	r3, [r3, #12]
 8017708:	f003 0310 	and.w	r3, r3, #16
 801770c:	b2db      	uxtb	r3, r3
 801770e:	2b00      	cmp	r3, #0
 8017710:	d001      	beq.n	8017716 <LoRaMacClassBIsAcquisitionPending+0x16>
    {
        return true;
 8017712:	2301      	movs	r3, #1
 8017714:	e000      	b.n	8017718 <LoRaMacClassBIsAcquisitionPending+0x18>
    }
    return false;
 8017716:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017718:	4618      	mov	r0, r3
 801771a:	46bd      	mov	sp, r7
 801771c:	bc80      	pop	{r7}
 801771e:	4770      	bx	lr
 8017720:	2000219c 	.word	0x2000219c

08017724 <LoRaMacClassBIsBeaconModeActive>:

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8017724:	b480      	push	{r7}
 8017726:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 8017728:	4b09      	ldr	r3, [pc, #36]	; (8017750 <LoRaMacClassBIsBeaconModeActive+0x2c>)
 801772a:	7b1b      	ldrb	r3, [r3, #12]
 801772c:	f003 0301 	and.w	r3, r3, #1
 8017730:	b2db      	uxtb	r3, r3
 8017732:	2b00      	cmp	r3, #0
 8017734:	d104      	bne.n	8017740 <LoRaMacClassBIsBeaconModeActive+0x1c>
        ( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME ) )
 8017736:	4b06      	ldr	r3, [pc, #24]	; (8017750 <LoRaMacClassBIsBeaconModeActive+0x2c>)
 8017738:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 801773c:	2b01      	cmp	r3, #1
 801773e:	d101      	bne.n	8017744 <LoRaMacClassBIsBeaconModeActive+0x20>
    {
        return true;
 8017740:	2301      	movs	r3, #1
 8017742:	e000      	b.n	8017746 <LoRaMacClassBIsBeaconModeActive+0x22>
    }
    return false;
 8017744:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017746:	4618      	mov	r0, r3
 8017748:	46bd      	mov	sp, r7
 801774a:	bc80      	pop	{r7}
 801774c:	4770      	bx	lr
 801774e:	bf00      	nop
 8017750:	2000219c 	.word	0x2000219c

08017754 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8017754:	b590      	push	{r4, r7, lr}
 8017756:	b083      	sub	sp, #12
 8017758:	af00      	add	r7, sp, #0
 801775a:	4603      	mov	r3, r0
 801775c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
 801775e:	79fb      	ldrb	r3, [r7, #7]
 8017760:	b29b      	uxth	r3, r3
 8017762:	4a0a      	ldr	r2, [pc, #40]	; (801778c <LoRaMacClassBSetPingSlotInfo+0x38>)
 8017764:	6814      	ldr	r4, [r2, #0]
 8017766:	4618      	mov	r0, r3
 8017768:	f7ff f8d6 	bl	8016918 <CalcPingNb>
 801776c:	4603      	mov	r3, r0
 801776e:	7063      	strb	r3, [r4, #1]
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
 8017770:	4b06      	ldr	r3, [pc, #24]	; (801778c <LoRaMacClassBSetPingSlotInfo+0x38>)
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	785b      	ldrb	r3, [r3, #1]
 8017776:	4a05      	ldr	r2, [pc, #20]	; (801778c <LoRaMacClassBSetPingSlotInfo+0x38>)
 8017778:	6814      	ldr	r4, [r2, #0]
 801777a:	4618      	mov	r0, r3
 801777c:	f7ff f8db 	bl	8016936 <CalcPingPeriod>
 8017780:	4603      	mov	r3, r0
 8017782:	8063      	strh	r3, [r4, #2]
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017784:	bf00      	nop
 8017786:	370c      	adds	r7, #12
 8017788:	46bd      	mov	sp, r7
 801778a:	bd90      	pop	{r4, r7, pc}
 801778c:	20002250 	.word	0x20002250

08017790 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8017790:	b580      	push	{r7, lr}
 8017792:	b084      	sub	sp, #16
 8017794:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 )
 8017796:	4b19      	ldr	r3, [pc, #100]	; (80177fc <LoRaMacClassBHaltBeaconing+0x6c>)
 8017798:	7b1b      	ldrb	r3, [r3, #12]
 801779a:	f003 0301 	and.w	r3, r3, #1
 801779e:	b2db      	uxtb	r3, r3
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d027      	beq.n	80177f4 <LoRaMacClassBHaltBeaconing+0x64>
    {
        if( ( Ctx.BeaconState == BEACON_STATE_TIMEOUT ) ||
 80177a4:	4b15      	ldr	r3, [pc, #84]	; (80177fc <LoRaMacClassBHaltBeaconing+0x6c>)
 80177a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80177aa:	2b02      	cmp	r3, #2
 80177ac:	d004      	beq.n	80177b8 <LoRaMacClassBHaltBeaconing+0x28>
            ( Ctx.BeaconState == BEACON_STATE_LOST ) )
 80177ae:	4b13      	ldr	r3, [pc, #76]	; (80177fc <LoRaMacClassBHaltBeaconing+0x6c>)
 80177b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
        if( ( Ctx.BeaconState == BEACON_STATE_TIMEOUT ) ||
 80177b4:	2b0a      	cmp	r3, #10
 80177b6:	d102      	bne.n	80177be <LoRaMacClassBHaltBeaconing+0x2e>
        {
            // Update the state machine before halt
            LoRaMacClassBBeaconTimerEvent( NULL );
 80177b8:	2000      	movs	r0, #0
 80177ba:	f7ff f989 	bl	8016ad0 <LoRaMacClassBBeaconTimerEvent>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80177be:	f3ef 8310 	mrs	r3, PRIMASK
 80177c2:	607b      	str	r3, [r7, #4]
  return(result);
 80177c4:	687b      	ldr	r3, [r7, #4]
        }

        CRITICAL_SECTION_BEGIN( );
 80177c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80177c8:	b672      	cpsid	i
}
 80177ca:	bf00      	nop
        LoRaMacClassBEvents.Events.Beacon = 0;
 80177cc:	4a0c      	ldr	r2, [pc, #48]	; (8017800 <LoRaMacClassBHaltBeaconing+0x70>)
 80177ce:	7813      	ldrb	r3, [r2, #0]
 80177d0:	f36f 0300 	bfc	r3, #0, #1
 80177d4:	7013      	strb	r3, [r2, #0]
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80177da:	68bb      	ldr	r3, [r7, #8]
 80177dc:	f383 8810 	msr	PRIMASK, r3
}
 80177e0:	bf00      	nop
        CRITICAL_SECTION_END( );

        // Halt ping slot state machine
        TimerStop( &Ctx.BeaconTimer );
 80177e2:	4808      	ldr	r0, [pc, #32]	; (8017804 <LoRaMacClassBHaltBeaconing+0x74>)
 80177e4:	f008 fea6 	bl	8020534 <UTIL_TIMER_Stop>

        // Halt beacon state machine
        Ctx.BeaconState = BEACON_STATE_HALT;
 80177e8:	4b04      	ldr	r3, [pc, #16]	; (80177fc <LoRaMacClassBHaltBeaconing+0x6c>)
 80177ea:	2206      	movs	r2, #6
 80177ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
 80177f0:	f000 fa5c 	bl	8017cac <LoRaMacClassBStopRxSlots>
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80177f4:	bf00      	nop
 80177f6:	3710      	adds	r7, #16
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd80      	pop	{r7, pc}
 80177fc:	2000219c 	.word	0x2000219c
 8017800:	20002198 	.word	0x20002198
 8017804:	200021e0 	.word	0x200021e0

08017808 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8017808:	b580      	push	{r7, lr}
 801780a:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconState == BEACON_STATE_HALT )
 801780c:	4b0e      	ldr	r3, [pc, #56]	; (8017848 <LoRaMacClassBResumeBeaconing+0x40>)
 801780e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017812:	2b06      	cmp	r3, #6
 8017814:	d116      	bne.n	8017844 <LoRaMacClassBResumeBeaconing+0x3c>
    {
        Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 1;
 8017816:	4a0c      	ldr	r2, [pc, #48]	; (8017848 <LoRaMacClassBResumeBeaconing+0x40>)
 8017818:	7b13      	ldrb	r3, [r2, #12]
 801781a:	f043 0320 	orr.w	r3, r3, #32
 801781e:	7313      	strb	r3, [r2, #12]

        // Set default state
        Ctx.BeaconState = BEACON_STATE_LOCKED;
 8017820:	4b09      	ldr	r3, [pc, #36]	; (8017848 <LoRaMacClassBResumeBeaconing+0x40>)
 8017822:	2205      	movs	r2, #5
 8017824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 0 )
 8017828:	4b07      	ldr	r3, [pc, #28]	; (8017848 <LoRaMacClassBResumeBeaconing+0x40>)
 801782a:	7b1b      	ldrb	r3, [r3, #12]
 801782c:	f003 0302 	and.w	r3, r3, #2
 8017830:	b2db      	uxtb	r3, r3
 8017832:	2b00      	cmp	r3, #0
 8017834:	d103      	bne.n	801783e <LoRaMacClassBResumeBeaconing+0x36>
        {
            // Set the default state for beacon less operation
            Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 8017836:	4b04      	ldr	r3, [pc, #16]	; (8017848 <LoRaMacClassBResumeBeaconing+0x40>)
 8017838:	2204      	movs	r2, #4
 801783a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
 801783e:	2000      	movs	r0, #0
 8017840:	f7ff f946 	bl	8016ad0 <LoRaMacClassBBeaconTimerEvent>
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017844:	bf00      	nop
 8017846:	bd80      	pop	{r7, pc}
 8017848:	2000219c 	.word	0x2000219c

0801784c <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801784c:	b580      	push	{r7, lr}
 801784e:	b082      	sub	sp, #8
 8017850:	af00      	add	r7, sp, #0
 8017852:	4603      	mov	r3, r0
 8017854:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( nextClass == CLASS_B )
 8017856:	79fb      	ldrb	r3, [r7, #7]
 8017858:	2b01      	cmp	r3, #1
 801785a:	d110      	bne.n	801787e <LoRaMacClassBSwitchClass+0x32>
    {// Switch to from class a to class b
        if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) && ( ClassBNvm->PingSlotCtx.Ctrl.Assigned == 1 ) )
 801785c:	4b0f      	ldr	r3, [pc, #60]	; (801789c <LoRaMacClassBSwitchClass+0x50>)
 801785e:	7b1b      	ldrb	r3, [r3, #12]
 8017860:	f003 0301 	and.w	r3, r3, #1
 8017864:	b2db      	uxtb	r3, r3
 8017866:	2b00      	cmp	r3, #0
 8017868:	d009      	beq.n	801787e <LoRaMacClassBSwitchClass+0x32>
 801786a:	4b0d      	ldr	r3, [pc, #52]	; (80178a0 <LoRaMacClassBSwitchClass+0x54>)
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	781b      	ldrb	r3, [r3, #0]
 8017870:	f003 0301 	and.w	r3, r3, #1
 8017874:	b2db      	uxtb	r3, r3
 8017876:	2b00      	cmp	r3, #0
 8017878:	d001      	beq.n	801787e <LoRaMacClassBSwitchClass+0x32>
        {
            return LORAMAC_STATUS_OK;
 801787a:	2300      	movs	r3, #0
 801787c:	e009      	b.n	8017892 <LoRaMacClassBSwitchClass+0x46>
        }
    }
    if( nextClass == CLASS_A )
 801787e:	79fb      	ldrb	r3, [r7, #7]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d105      	bne.n	8017890 <LoRaMacClassBSwitchClass+0x44>
    {// Switch from class b to class a
        LoRaMacClassBHaltBeaconing( );
 8017884:	f7ff ff84 	bl	8017790 <LoRaMacClassBHaltBeaconing>

        // Initialize default state for class b
        InitClassBDefaults( );
 8017888:	f7fe ff1a 	bl	80166c0 <InitClassBDefaults>

        return LORAMAC_STATUS_OK;
 801788c:	2300      	movs	r3, #0
 801788e:	e000      	b.n	8017892 <LoRaMacClassBSwitchClass+0x46>
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8017890:	2302      	movs	r3, #2
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017892:	4618      	mov	r0, r3
 8017894:	3708      	adds	r7, #8
 8017896:	46bd      	mov	sp, r7
 8017898:	bd80      	pop	{r7, pc}
 801789a:	bf00      	nop
 801789c:	2000219c 	.word	0x2000219c
 80178a0:	20002250 	.word	0x20002250

080178a4 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80178a4:	b480      	push	{r7}
 80178a6:	b085      	sub	sp, #20
 80178a8:	af00      	add	r7, sp, #0
 80178aa:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80178ac:	2300      	movs	r3, #0
 80178ae:	73fb      	strb	r3, [r7, #15]

    switch( mibGet->Type )
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	781b      	ldrb	r3, [r3, #0]
 80178b4:	2b36      	cmp	r3, #54	; 0x36
 80178b6:	d002      	beq.n	80178be <LoRaMacClassBMibGetRequestConfirm+0x1a>
 80178b8:	2b38      	cmp	r3, #56	; 0x38
 80178ba:	d007      	beq.n	80178cc <LoRaMacClassBMibGetRequestConfirm+0x28>
 80178bc:	e00c      	b.n	80178d8 <LoRaMacClassBMibGetRequestConfirm+0x34>
    {
        case MIB_PING_SLOT_DATARATE:
        {
            mibGet->Param.PingSlotDatarate = ClassBNvm->PingSlotCtx.Datarate;
 80178be:	4b0b      	ldr	r3, [pc, #44]	; (80178ec <LoRaMacClassBMibGetRequestConfirm+0x48>)
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	711a      	strb	r2, [r3, #4]
            break;
 80178ca:	e008      	b.n	80178de <LoRaMacClassBMibGetRequestConfirm+0x3a>
        }
        case MIB_BEACON_STATE:
        {
            mibGet->Param.BeaconState = Ctx.BeaconState;
 80178cc:	4b08      	ldr	r3, [pc, #32]	; (80178f0 <LoRaMacClassBMibGetRequestConfirm+0x4c>)
 80178ce:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	711a      	strb	r2, [r3, #4]
            break;
 80178d6:	e002      	b.n	80178de <LoRaMacClassBMibGetRequestConfirm+0x3a>
        }
        default:
        {
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80178d8:	2302      	movs	r3, #2
 80178da:	73fb      	strb	r3, [r7, #15]
            break;
 80178dc:	bf00      	nop
        }
    }
    return status;
 80178de:	7bfb      	ldrb	r3, [r7, #15]
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80178e0:	4618      	mov	r0, r3
 80178e2:	3714      	adds	r7, #20
 80178e4:	46bd      	mov	sp, r7
 80178e6:	bc80      	pop	{r7}
 80178e8:	4770      	bx	lr
 80178ea:	bf00      	nop
 80178ec:	20002250 	.word	0x20002250
 80178f0:	2000219c 	.word	0x2000219c

080178f4 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80178f4:	b480      	push	{r7}
 80178f6:	b085      	sub	sp, #20
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80178fc:	2300      	movs	r3, #0
 80178fe:	73fb      	strb	r3, [r7, #15]

    switch( mibSet->Type )
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	781b      	ldrb	r3, [r3, #0]
 8017904:	2b36      	cmp	r3, #54	; 0x36
 8017906:	d106      	bne.n	8017916 <LoRaMacMibClassBSetRequestConfirm+0x22>
    {
        case MIB_PING_SLOT_DATARATE:
        {
            ClassBNvm->PingSlotCtx.Datarate = mibSet->Param.PingSlotDatarate;
 8017908:	4b07      	ldr	r3, [pc, #28]	; (8017928 <LoRaMacMibClassBSetRequestConfirm+0x34>)
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	687a      	ldr	r2, [r7, #4]
 801790e:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8017912:	721a      	strb	r2, [r3, #8]
            break;
 8017914:	e002      	b.n	801791c <LoRaMacMibClassBSetRequestConfirm+0x28>
        }
        default:
        {
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8017916:	2302      	movs	r3, #2
 8017918:	73fb      	strb	r3, [r7, #15]
            break;
 801791a:	bf00      	nop
        }
    }
    return status;
 801791c:	7bfb      	ldrb	r3, [r7, #15]
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801791e:	4618      	mov	r0, r3
 8017920:	3714      	adds	r7, #20
 8017922:	46bd      	mov	sp, r7
 8017924:	bc80      	pop	{r7}
 8017926:	4770      	bx	lr
 8017928:	20002250 	.word	0x20002250

0801792c <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 801792c:	b580      	push	{r7, lr}
 801792e:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8017930:	200d      	movs	r0, #13
 8017932:	f000 fe85 	bl	8018640 <LoRaMacConfirmQueueIsCmdActive>
 8017936:	4603      	mov	r3, r0
 8017938:	2b00      	cmp	r3, #0
 801793a:	d009      	beq.n	8017950 <LoRaMacClassBPingSlotInfoAns+0x24>
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 801793c:	210d      	movs	r1, #13
 801793e:	2000      	movs	r0, #0
 8017940:	f000 fdf2 	bl	8018528 <LoRaMacConfirmQueueSetStatus>
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
 8017944:	4b03      	ldr	r3, [pc, #12]	; (8017954 <LoRaMacClassBPingSlotInfoAns+0x28>)
 8017946:	681a      	ldr	r2, [r3, #0]
 8017948:	7813      	ldrb	r3, [r2, #0]
 801794a:	f043 0301 	orr.w	r3, r3, #1
 801794e:	7013      	strb	r3, [r2, #0]
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017950:	bf00      	nop
 8017952:	bd80      	pop	{r7, pc}
 8017954:	20002250 	.word	0x20002250

08017958 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b084      	sub	sp, #16
 801795c:	af00      	add	r7, sp, #0
 801795e:	4603      	mov	r3, r0
 8017960:	6039      	str	r1, [r7, #0]
 8017962:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    uint8_t status = 0x03;
 8017964:	2303      	movs	r3, #3
 8017966:	73fb      	strb	r3, [r7, #15]
    VerifyParams_t verify;
    bool isCustomFreq = false;
 8017968:	2300      	movs	r3, #0
 801796a:	73bb      	strb	r3, [r7, #14]

    if( frequency != 0 )
 801796c:	683b      	ldr	r3, [r7, #0]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d017      	beq.n	80179a2 <LoRaMacClassBPingSlotChannelReq+0x4a>
    {
        isCustomFreq = true;
 8017972:	2301      	movs	r3, #1
 8017974:	73bb      	strb	r3, [r7, #14]
        verify.Frequency = frequency;
 8017976:	683b      	ldr	r3, [r7, #0]
 8017978:	60bb      	str	r3, [r7, #8]
        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == false )
 801797a:	4b2b      	ldr	r3, [pc, #172]	; (8017a28 <LoRaMacClassBPingSlotChannelReq+0xd0>)
 801797c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017980:	781b      	ldrb	r3, [r3, #0]
 8017982:	f107 0108 	add.w	r1, r7, #8
 8017986:	2200      	movs	r2, #0
 8017988:	4618      	mov	r0, r3
 801798a:	f002 f918 	bl	8019bbe <RegionVerify>
 801798e:	4603      	mov	r3, r0
 8017990:	f083 0301 	eor.w	r3, r3, #1
 8017994:	b2db      	uxtb	r3, r3
 8017996:	2b00      	cmp	r3, #0
 8017998:	d003      	beq.n	80179a2 <LoRaMacClassBPingSlotChannelReq+0x4a>
        {
            status &= 0xFE; // Channel frequency KO
 801799a:	7bfb      	ldrb	r3, [r7, #15]
 801799c:	f023 0301 	bic.w	r3, r3, #1
 80179a0:	73fb      	strb	r3, [r7, #15]
        }
    }

    verify.DatarateParams.Datarate = datarate;
 80179a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80179a6:	723b      	strb	r3, [r7, #8]
    verify.DatarateParams.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 80179a8:	4b1f      	ldr	r3, [pc, #124]	; (8017a28 <LoRaMacClassBPingSlotChannelReq+0xd0>)
 80179aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80179ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80179b2:	727b      	strb	r3, [r7, #9]

    if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_RX_DR ) == false )
 80179b4:	4b1c      	ldr	r3, [pc, #112]	; (8017a28 <LoRaMacClassBPingSlotChannelReq+0xd0>)
 80179b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80179ba:	781b      	ldrb	r3, [r3, #0]
 80179bc:	f107 0108 	add.w	r1, r7, #8
 80179c0:	2207      	movs	r2, #7
 80179c2:	4618      	mov	r0, r3
 80179c4:	f002 f8fb 	bl	8019bbe <RegionVerify>
 80179c8:	4603      	mov	r3, r0
 80179ca:	f083 0301 	eor.w	r3, r3, #1
 80179ce:	b2db      	uxtb	r3, r3
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d003      	beq.n	80179dc <LoRaMacClassBPingSlotChannelReq+0x84>
    {
        status &= 0xFD; // Datarate range KO
 80179d4:	7bfb      	ldrb	r3, [r7, #15]
 80179d6:	f023 0302 	bic.w	r3, r3, #2
 80179da:	73fb      	strb	r3, [r7, #15]
    }

    if( status == 0x03 )
 80179dc:	7bfb      	ldrb	r3, [r7, #15]
 80179de:	2b03      	cmp	r3, #3
 80179e0:	d11c      	bne.n	8017a1c <LoRaMacClassBPingSlotChannelReq+0xc4>
    {
        if( isCustomFreq == true )
 80179e2:	7bbb      	ldrb	r3, [r7, #14]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d00a      	beq.n	80179fe <LoRaMacClassBPingSlotChannelReq+0xa6>
        {
            ClassBNvm->PingSlotCtx.Ctrl.CustomFreq = 1;
 80179e8:	4b10      	ldr	r3, [pc, #64]	; (8017a2c <LoRaMacClassBPingSlotChannelReq+0xd4>)
 80179ea:	681a      	ldr	r2, [r3, #0]
 80179ec:	7813      	ldrb	r3, [r2, #0]
 80179ee:	f043 0302 	orr.w	r3, r3, #2
 80179f2:	7013      	strb	r3, [r2, #0]
            ClassBNvm->PingSlotCtx.Frequency = frequency;
 80179f4:	4b0d      	ldr	r3, [pc, #52]	; (8017a2c <LoRaMacClassBPingSlotChannelReq+0xd4>)
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	683a      	ldr	r2, [r7, #0]
 80179fa:	605a      	str	r2, [r3, #4]
 80179fc:	e009      	b.n	8017a12 <LoRaMacClassBPingSlotChannelReq+0xba>
        }
        else
        {
            ClassBNvm->PingSlotCtx.Ctrl.CustomFreq = 0;
 80179fe:	4b0b      	ldr	r3, [pc, #44]	; (8017a2c <LoRaMacClassBPingSlotChannelReq+0xd4>)
 8017a00:	681a      	ldr	r2, [r3, #0]
 8017a02:	7813      	ldrb	r3, [r2, #0]
 8017a04:	f36f 0341 	bfc	r3, #1, #1
 8017a08:	7013      	strb	r3, [r2, #0]
            ClassBNvm->PingSlotCtx.Frequency = 0;
 8017a0a:	4b08      	ldr	r3, [pc, #32]	; (8017a2c <LoRaMacClassBPingSlotChannelReq+0xd4>)
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	2200      	movs	r2, #0
 8017a10:	605a      	str	r2, [r3, #4]
        }
        ClassBNvm->PingSlotCtx.Datarate = datarate;
 8017a12:	4b06      	ldr	r3, [pc, #24]	; (8017a2c <LoRaMacClassBPingSlotChannelReq+0xd4>)
 8017a14:	681b      	ldr	r3, [r3, #0]
 8017a16:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017a1a:	721a      	strb	r2, [r3, #8]
    }

    return status;
 8017a1c:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017a1e:	4618      	mov	r0, r3
 8017a20:	3710      	adds	r7, #16
 8017a22:	46bd      	mov	sp, r7
 8017a24:	bd80      	pop	{r7, pc}
 8017a26:	bf00      	nop
 8017a28:	2000219c 	.word	0x2000219c
 8017a2c:	20002250 	.word	0x20002250

08017a30 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8017a30:	b590      	push	{r4, r7, lr}
 8017a32:	b085      	sub	sp, #20
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	4603      	mov	r3, r0
 8017a38:	60ba      	str	r2, [r7, #8]
 8017a3a:	81fb      	strh	r3, [r7, #14]
 8017a3c:	460b      	mov	r3, r1
 8017a3e:	737b      	strb	r3, [r7, #13]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.BeaconCtx.BeaconTimingDelay = ( CLASSB_BEACON_DELAY_BEACON_TIMING_ANS * beaconTimingDelay );
 8017a40:	89fa      	ldrh	r2, [r7, #14]
 8017a42:	4613      	mov	r3, r2
 8017a44:	011b      	lsls	r3, r3, #4
 8017a46:	1a9b      	subs	r3, r3, r2
 8017a48:	005b      	lsls	r3, r3, #1
 8017a4a:	461a      	mov	r2, r3
 8017a4c:	4b26      	ldr	r3, [pc, #152]	; (8017ae8 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017a4e:	639a      	str	r2, [r3, #56]	; 0x38
    Ctx.BeaconCtx.BeaconTimingChannel = beaconTimingChannel;
 8017a50:	4a25      	ldr	r2, [pc, #148]	; (8017ae8 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017a52:	7b7b      	ldrb	r3, [r7, #13]
 8017a54:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34

    if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8017a58:	200e      	movs	r0, #14
 8017a5a:	f000 fdf1 	bl	8018640 <LoRaMacConfirmQueueIsCmdActive>
 8017a5e:	4603      	mov	r3, r0
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d03c      	beq.n	8017ade <LoRaMacClassBBeaconTimingAns+0xae>
    {
        if( Ctx.BeaconCtx.BeaconTimingDelay > CLASSB_BEACON_INTERVAL )
 8017a64:	4b20      	ldr	r3, [pc, #128]	; (8017ae8 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a68:	f5b3 3ffa 	cmp.w	r3, #128000	; 0x1f400
 8017a6c:	d90b      	bls.n	8017a86 <LoRaMacClassBBeaconTimingAns+0x56>
        {
            // We missed the beacon already
            Ctx.BeaconCtx.BeaconTimingDelay = 0;
 8017a6e:	4b1e      	ldr	r3, [pc, #120]	; (8017ae8 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017a70:	2200      	movs	r2, #0
 8017a72:	639a      	str	r2, [r3, #56]	; 0x38
            Ctx.BeaconCtx.BeaconTimingChannel = 0;
 8017a74:	4b1c      	ldr	r3, [pc, #112]	; (8017ae8 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017a76:	2200      	movs	r2, #0
 8017a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_BEACON_TIMING );
 8017a7c:	210e      	movs	r1, #14
 8017a7e:	2010      	movs	r0, #16
 8017a80:	f000 fd52 	bl	8018528 <LoRaMacConfirmQueueSetStatus>
 8017a84:	e01e      	b.n	8017ac4 <LoRaMacClassBBeaconTimingAns+0x94>
        }
        else
        {
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 8017a86:	4a18      	ldr	r2, [pc, #96]	; (8017ae8 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017a88:	7b13      	ldrb	r3, [r2, #12]
 8017a8a:	f043 0304 	orr.w	r3, r3, #4
 8017a8e:	7313      	strb	r3, [r2, #12]
            Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 1;
 8017a90:	4a15      	ldr	r2, [pc, #84]	; (8017ae8 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017a92:	7b13      	ldrb	r3, [r2, #12]
 8017a94:	f043 0308 	orr.w	r3, r3, #8
 8017a98:	7313      	strb	r3, [r2, #12]
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
 8017a9a:	4b13      	ldr	r3, [pc, #76]	; (8017ae8 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017a9e:	68bb      	ldr	r3, [r7, #8]
 8017aa0:	441a      	add	r2, r3
 8017aa2:	4c11      	ldr	r4, [pc, #68]	; (8017ae8 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017aa4:	463b      	mov	r3, r7
 8017aa6:	4611      	mov	r1, r2
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	f008 f857 	bl	801fb5c <SysTimeFromMs>
 8017aae:	f104 0320 	add.w	r3, r4, #32
 8017ab2:	463a      	mov	r2, r7
 8017ab4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017ab8:	e883 0003 	stmia.w	r3, {r0, r1}
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8017abc:	210e      	movs	r1, #14
 8017abe:	2000      	movs	r0, #0
 8017ac0:	f000 fd32 	bl	8018528 <LoRaMacConfirmQueueSetStatus>
        }

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
 8017ac4:	4b08      	ldr	r3, [pc, #32]	; (8017ae8 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017aca:	4a07      	ldr	r2, [pc, #28]	; (8017ae8 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017acc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8017ace:	60da      	str	r2, [r3, #12]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
 8017ad0:	4b05      	ldr	r3, [pc, #20]	; (8017ae8 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017ad2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017ad6:	4a04      	ldr	r2, [pc, #16]	; (8017ae8 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8017ad8:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8017adc:	741a      	strb	r2, [r3, #16]
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017ade:	bf00      	nop
 8017ae0:	3714      	adds	r7, #20
 8017ae2:	46bd      	mov	sp, r7
 8017ae4:	bd90      	pop	{r4, r7, pc}
 8017ae6:	bf00      	nop
 8017ae8:	2000219c 	.word	0x2000219c

08017aec <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8017aec:	b590      	push	{r4, r7, lr}
 8017aee:	b08b      	sub	sp, #44	; 0x2c
 8017af0:	af02      	add	r7, sp, #8
#if ( LORAMAC_CLASSB_ENABLED == 1 )

    SysTime_t nextBeacon = SysTimeGet( );
 8017af2:	f107 0314 	add.w	r3, r7, #20
 8017af6:	4618      	mov	r0, r3
 8017af8:	f007 ffb0 	bl	801fa5c <SysTimeGet>
    uint32_t currentTimeMs = SysTimeToMs( nextBeacon );
 8017afc:	f107 0314 	add.w	r3, r7, #20
 8017b00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017b04:	f008 f802 	bl	801fb0c <SysTimeToMs>
 8017b08:	61f8      	str	r0, [r7, #28]

    nextBeacon.Seconds = nextBeacon.Seconds + ( 128 - ( nextBeacon.Seconds % 128 ) );
 8017b0a:	697b      	ldr	r3, [r7, #20]
 8017b0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8017b10:	3380      	adds	r3, #128	; 0x80
 8017b12:	617b      	str	r3, [r7, #20]
    nextBeacon.SubSeconds = 0;
 8017b14:	2300      	movs	r3, #0
 8017b16:	833b      	strh	r3, [r7, #24]

    Ctx.BeaconCtx.NextBeaconRx = nextBeacon;
 8017b18:	4b2e      	ldr	r3, [pc, #184]	; (8017bd4 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017b1a:	3320      	adds	r3, #32
 8017b1c:	f107 0214 	add.w	r2, r7, #20
 8017b20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017b24:	e883 0003 	stmia.w	r3, {r0, r1}
    Ctx.BeaconCtx.LastBeaconRx = SysTimeSub( Ctx.BeaconCtx.NextBeaconRx, ( SysTime_t ){ .Seconds = CLASSB_BEACON_INTERVAL / 1000, .SubSeconds = 0 } );
 8017b28:	2380      	movs	r3, #128	; 0x80
 8017b2a:	60fb      	str	r3, [r7, #12]
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	823b      	strh	r3, [r7, #16]
 8017b30:	4c28      	ldr	r4, [pc, #160]	; (8017bd4 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017b32:	4638      	mov	r0, r7
 8017b34:	4a27      	ldr	r2, [pc, #156]	; (8017bd4 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017b36:	693b      	ldr	r3, [r7, #16]
 8017b38:	9300      	str	r3, [sp, #0]
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	3220      	adds	r2, #32
 8017b3e:	ca06      	ldmia	r2, {r1, r2}
 8017b40:	f007 ff25 	bl	801f98e <SysTimeSub>
 8017b44:	f104 0318 	add.w	r3, r4, #24
 8017b48:	463a      	mov	r2, r7
 8017b4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017b4e:	e883 0003 	stmia.w	r3, {r0, r1}

    if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8017b52:	200a      	movs	r0, #10
 8017b54:	f000 fd74 	bl	8018640 <LoRaMacConfirmQueueIsCmdActive>
 8017b58:	4603      	mov	r3, r0
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d036      	beq.n	8017bcc <LoRaMacClassBDeviceTimeAns+0xe0>
    {
        if( currentTimeMs > SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) )
 8017b5e:	4b1d      	ldr	r3, [pc, #116]	; (8017bd4 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017b60:	3320      	adds	r3, #32
 8017b62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017b66:	f007 ffd1 	bl	801fb0c <SysTimeToMs>
 8017b6a:	4602      	mov	r2, r0
 8017b6c:	69fb      	ldr	r3, [r7, #28]
 8017b6e:	4293      	cmp	r3, r2
 8017b70:	d910      	bls.n	8017b94 <LoRaMacClassBDeviceTimeAns+0xa8>
        {
            // We missed the beacon already
            Ctx.BeaconCtx.LastBeaconRx.Seconds = 0;
 8017b72:	4b18      	ldr	r3, [pc, #96]	; (8017bd4 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017b74:	2200      	movs	r2, #0
 8017b76:	619a      	str	r2, [r3, #24]
            Ctx.BeaconCtx.LastBeaconRx.SubSeconds = 0;
 8017b78:	4b16      	ldr	r3, [pc, #88]	; (8017bd4 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017b7a:	2200      	movs	r2, #0
 8017b7c:	839a      	strh	r2, [r3, #28]
            Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
 8017b7e:	4b15      	ldr	r3, [pc, #84]	; (8017bd4 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017b80:	2200      	movs	r2, #0
 8017b82:	621a      	str	r2, [r3, #32]
            Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
 8017b84:	4b13      	ldr	r3, [pc, #76]	; (8017bd4 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017b86:	2200      	movs	r2, #0
 8017b88:	849a      	strh	r2, [r3, #36]	; 0x24
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_DEVICE_TIME );
 8017b8a:	210a      	movs	r1, #10
 8017b8c:	2010      	movs	r0, #16
 8017b8e:	f000 fccb 	bl	8018528 <LoRaMacConfirmQueueSetStatus>
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017b92:	e01b      	b.n	8017bcc <LoRaMacClassBDeviceTimeAns+0xe0>
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 8017b94:	4a0f      	ldr	r2, [pc, #60]	; (8017bd4 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017b96:	7b13      	ldrb	r3, [r2, #12]
 8017b98:	f043 0304 	orr.w	r3, r3, #4
 8017b9c:	7313      	strb	r3, [r2, #12]
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 8017b9e:	4b0d      	ldr	r3, [pc, #52]	; (8017bd4 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017ba0:	3320      	adds	r3, #32
 8017ba2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017ba6:	f007 ffb1 	bl	801fb0c <SysTimeToMs>
 8017baa:	4602      	mov	r2, r0
 8017bac:	69fb      	ldr	r3, [r7, #28]
 8017bae:	1ad3      	subs	r3, r2, r3
 8017bb0:	4a08      	ldr	r2, [pc, #32]	; (8017bd4 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017bb2:	6393      	str	r3, [r2, #56]	; 0x38
            Ctx.BeaconCtx.BeaconTime.Seconds = nextBeacon.Seconds - UNIX_GPS_EPOCH_OFFSET - 128;
 8017bb4:	697a      	ldr	r2, [r7, #20]
 8017bb6:	4b08      	ldr	r3, [pc, #32]	; (8017bd8 <LoRaMacClassBDeviceTimeAns+0xec>)
 8017bb8:	4413      	add	r3, r2
 8017bba:	4a06      	ldr	r2, [pc, #24]	; (8017bd4 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017bbc:	6113      	str	r3, [r2, #16]
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 8017bbe:	4b05      	ldr	r3, [pc, #20]	; (8017bd4 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	829a      	strh	r2, [r3, #20]
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8017bc4:	210a      	movs	r1, #10
 8017bc6:	2000      	movs	r0, #0
 8017bc8:	f000 fcae 	bl	8018528 <LoRaMacConfirmQueueSetStatus>
}
 8017bcc:	bf00      	nop
 8017bce:	3724      	adds	r7, #36	; 0x24
 8017bd0:	46bd      	mov	sp, r7
 8017bd2:	bd90      	pop	{r4, r7, pc}
 8017bd4:	2000219c 	.word	0x2000219c
 8017bd8:	ed2ac200 	.word	0xed2ac200

08017bdc <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8017bdc:	b580      	push	{r7, lr}
 8017bde:	b084      	sub	sp, #16
 8017be0:	af00      	add	r7, sp, #0
 8017be2:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    VerifyParams_t verify;

    if( frequency != 0 )
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d01a      	beq.n	8017c20 <LoRaMacClassBBeaconFreqReq+0x44>
    {
        verify.Frequency = frequency;
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	60fb      	str	r3, [r7, #12]

        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == true )
 8017bee:	4b13      	ldr	r3, [pc, #76]	; (8017c3c <LoRaMacClassBBeaconFreqReq+0x60>)
 8017bf0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017bf4:	781b      	ldrb	r3, [r3, #0]
 8017bf6:	f107 010c 	add.w	r1, r7, #12
 8017bfa:	2200      	movs	r2, #0
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	f001 ffde 	bl	8019bbe <RegionVerify>
 8017c02:	4603      	mov	r3, r0
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d013      	beq.n	8017c30 <LoRaMacClassBBeaconFreqReq+0x54>
        {
            ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 1;
 8017c08:	4b0d      	ldr	r3, [pc, #52]	; (8017c40 <LoRaMacClassBBeaconFreqReq+0x64>)
 8017c0a:	681a      	ldr	r2, [r3, #0]
 8017c0c:	7b13      	ldrb	r3, [r2, #12]
 8017c0e:	f043 0301 	orr.w	r3, r3, #1
 8017c12:	7313      	strb	r3, [r2, #12]
            ClassBNvm->BeaconCtx.Frequency = frequency;
 8017c14:	4b0a      	ldr	r3, [pc, #40]	; (8017c40 <LoRaMacClassBBeaconFreqReq+0x64>)
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	687a      	ldr	r2, [r7, #4]
 8017c1a:	611a      	str	r2, [r3, #16]
            return true;
 8017c1c:	2301      	movs	r3, #1
 8017c1e:	e008      	b.n	8017c32 <LoRaMacClassBBeaconFreqReq+0x56>
        }
    }
    else
    {
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
 8017c20:	4b07      	ldr	r3, [pc, #28]	; (8017c40 <LoRaMacClassBBeaconFreqReq+0x64>)
 8017c22:	681a      	ldr	r2, [r3, #0]
 8017c24:	7b13      	ldrb	r3, [r2, #12]
 8017c26:	f36f 0300 	bfc	r3, #0, #1
 8017c2a:	7313      	strb	r3, [r2, #12]
        return true;
 8017c2c:	2301      	movs	r3, #1
 8017c2e:	e000      	b.n	8017c32 <LoRaMacClassBBeaconFreqReq+0x56>
    }
    return false;
 8017c30:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017c32:	4618      	mov	r0, r3
 8017c34:	3710      	adds	r7, #16
 8017c36:	46bd      	mov	sp, r7
 8017c38:	bd80      	pop	{r7, pc}
 8017c3a:	bf00      	nop
 8017c3c:	2000219c 	.word	0x2000219c
 8017c40:	20002250 	.word	0x20002250

08017c44 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b086      	sub	sp, #24
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017c4c:	f008 fd8c 	bl	8020768 <UTIL_TIMER_GetCurrentTime>
 8017c50:	6178      	str	r0, [r7, #20]
    TimerTime_t beaconReserved = 0;
 8017c52:	2300      	movs	r3, #0
 8017c54:	613b      	str	r3, [r7, #16]
    TimerTime_t nextBeacon = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx );
 8017c56:	4b14      	ldr	r3, [pc, #80]	; (8017ca8 <LoRaMacClassBIsUplinkCollision+0x64>)
 8017c58:	3320      	adds	r3, #32
 8017c5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017c5e:	f007 ff55 	bl	801fb0c <SysTimeToMs>
 8017c62:	60f8      	str	r0, [r7, #12]

    beaconReserved = nextBeacon -
                     CLASSB_BEACON_GUARD -
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay1 -
 8017c64:	4b10      	ldr	r3, [pc, #64]	; (8017ca8 <LoRaMacClassBIsUplinkCollision+0x64>)
 8017c66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017c6a:	68db      	ldr	r3, [r3, #12]
                     CLASSB_BEACON_GUARD -
 8017c6c:	68fa      	ldr	r2, [r7, #12]
 8017c6e:	1ad2      	subs	r2, r2, r3
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay2 -
 8017c70:	4b0d      	ldr	r3, [pc, #52]	; (8017ca8 <LoRaMacClassBIsUplinkCollision+0x64>)
 8017c72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017c76:	691b      	ldr	r3, [r3, #16]
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay1 -
 8017c78:	1ad2      	subs	r2, r2, r3
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay2 -
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	1ad3      	subs	r3, r2, r3
    beaconReserved = nextBeacon -
 8017c7e:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8017c82:	613b      	str	r3, [r7, #16]
                     txTimeOnAir;

    // Check if the next beacon will be received during the next uplink.
    if( ( currentTime >= beaconReserved ) && ( currentTime < ( nextBeacon + CLASSB_BEACON_RESERVED ) ) )
 8017c84:	697a      	ldr	r2, [r7, #20]
 8017c86:	693b      	ldr	r3, [r7, #16]
 8017c88:	429a      	cmp	r2, r3
 8017c8a:	d308      	bcc.n	8017c9e <LoRaMacClassBIsUplinkCollision+0x5a>
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	f603 0348 	addw	r3, r3, #2120	; 0x848
 8017c92:	697a      	ldr	r2, [r7, #20]
 8017c94:	429a      	cmp	r2, r3
 8017c96:	d202      	bcs.n	8017c9e <LoRaMacClassBIsUplinkCollision+0x5a>
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
 8017c98:	f640 0348 	movw	r3, #2120	; 0x848
 8017c9c:	e000      	b.n	8017ca0 <LoRaMacClassBIsUplinkCollision+0x5c>
    }
    return 0;
 8017c9e:	2300      	movs	r3, #0
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	3718      	adds	r7, #24
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	bd80      	pop	{r7, pc}
 8017ca8:	2000219c 	.word	0x2000219c

08017cac <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	b084      	sub	sp, #16
 8017cb0:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    TimerStop( &Ctx.PingSlotTimer );
 8017cb2:	4810      	ldr	r0, [pc, #64]	; (8017cf4 <LoRaMacClassBStopRxSlots+0x48>)
 8017cb4:	f008 fc3e 	bl	8020534 <UTIL_TIMER_Stop>
    TimerStop( &Ctx.MulticastSlotTimer );
 8017cb8:	480f      	ldr	r0, [pc, #60]	; (8017cf8 <LoRaMacClassBStopRxSlots+0x4c>)
 8017cba:	f008 fc3b 	bl	8020534 <UTIL_TIMER_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8017cc2:	607b      	str	r3, [r7, #4]
  return(result);
 8017cc4:	687b      	ldr	r3, [r7, #4]

    CRITICAL_SECTION_BEGIN( );
 8017cc6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8017cc8:	b672      	cpsid	i
}
 8017cca:	bf00      	nop
    LoRaMacClassBEvents.Events.PingSlot = 0;
 8017ccc:	4a0b      	ldr	r2, [pc, #44]	; (8017cfc <LoRaMacClassBStopRxSlots+0x50>)
 8017cce:	7813      	ldrb	r3, [r2, #0]
 8017cd0:	f36f 0341 	bfc	r3, #1, #1
 8017cd4:	7013      	strb	r3, [r2, #0]
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
 8017cd6:	4a09      	ldr	r2, [pc, #36]	; (8017cfc <LoRaMacClassBStopRxSlots+0x50>)
 8017cd8:	7813      	ldrb	r3, [r2, #0]
 8017cda:	f36f 0382 	bfc	r3, #2, #1
 8017cde:	7013      	strb	r3, [r2, #0]
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ce4:	68bb      	ldr	r3, [r7, #8]
 8017ce6:	f383 8810 	msr	PRIMASK, r3
}
 8017cea:	bf00      	nop
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017cec:	bf00      	nop
 8017cee:	3710      	adds	r7, #16
 8017cf0:	46bd      	mov	sp, r7
 8017cf2:	bd80      	pop	{r7, pc}
 8017cf4:	200021f8 	.word	0x200021f8
 8017cf8:	20002210 	.word	0x20002210
 8017cfc:	20002198 	.word	0x20002198

08017d00 <LoRaMacClassBStartRxSlots>:

void LoRaMacClassBStartRxSlots( void )
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ClassBNvm->PingSlotCtx.Ctrl.Assigned == 1 )
 8017d04:	4b0f      	ldr	r3, [pc, #60]	; (8017d44 <LoRaMacClassBStartRxSlots+0x44>)
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	781b      	ldrb	r3, [r3, #0]
 8017d0a:	f003 0301 	and.w	r3, r3, #1
 8017d0e:	b2db      	uxtb	r3, r3
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d015      	beq.n	8017d40 <LoRaMacClassBStartRxSlots+0x40>
    {
        Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8017d14:	4b0c      	ldr	r3, [pc, #48]	; (8017d48 <LoRaMacClassBStartRxSlots+0x48>)
 8017d16:	2200      	movs	r2, #0
 8017d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        TimerSetValue( &Ctx.PingSlotTimer, 1 );
 8017d1c:	2101      	movs	r1, #1
 8017d1e:	480b      	ldr	r0, [pc, #44]	; (8017d4c <LoRaMacClassBStartRxSlots+0x4c>)
 8017d20:	f008 fc78 	bl	8020614 <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.PingSlotTimer );
 8017d24:	4809      	ldr	r0, [pc, #36]	; (8017d4c <LoRaMacClassBStartRxSlots+0x4c>)
 8017d26:	f008 fb97 	bl	8020458 <UTIL_TIMER_Start>

        Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8017d2a:	4b07      	ldr	r3, [pc, #28]	; (8017d48 <LoRaMacClassBStartRxSlots+0x48>)
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 8017d32:	2101      	movs	r1, #1
 8017d34:	4806      	ldr	r0, [pc, #24]	; (8017d50 <LoRaMacClassBStartRxSlots+0x50>)
 8017d36:	f008 fc6d 	bl	8020614 <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.MulticastSlotTimer );
 8017d3a:	4805      	ldr	r0, [pc, #20]	; (8017d50 <LoRaMacClassBStartRxSlots+0x50>)
 8017d3c:	f008 fb8c 	bl	8020458 <UTIL_TIMER_Start>
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017d40:	bf00      	nop
 8017d42:	bd80      	pop	{r7, pc}
 8017d44:	20002250 	.word	0x20002250
 8017d48:	2000219c 	.word	0x2000219c
 8017d4c:	200021f8 	.word	0x200021f8
 8017d50:	20002210 	.word	0x20002210

08017d54 <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	b084      	sub	sp, #16
 8017d58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8017d5e:	607b      	str	r3, [r7, #4]
  return(result);
 8017d60:	687b      	ldr	r3, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8017d62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8017d64:	b672      	cpsid	i
}
 8017d66:	bf00      	nop
    events = LoRaMacClassBEvents;
 8017d68:	4b15      	ldr	r3, [pc, #84]	; (8017dc0 <LoRaMacClassBProcess+0x6c>)
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	603b      	str	r3, [r7, #0]
    LoRaMacClassBEvents.Value = 0;
 8017d6e:	4b14      	ldr	r3, [pc, #80]	; (8017dc0 <LoRaMacClassBProcess+0x6c>)
 8017d70:	2200      	movs	r2, #0
 8017d72:	601a      	str	r2, [r3, #0]
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d78:	68bb      	ldr	r3, [r7, #8]
 8017d7a:	f383 8810 	msr	PRIMASK, r3
}
 8017d7e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8017d80:	683b      	ldr	r3, [r7, #0]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d017      	beq.n	8017db6 <LoRaMacClassBProcess+0x62>
    {
        if( events.Events.Beacon == 1 )
 8017d86:	783b      	ldrb	r3, [r7, #0]
 8017d88:	f003 0301 	and.w	r3, r3, #1
 8017d8c:	b2db      	uxtb	r3, r3
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d001      	beq.n	8017d96 <LoRaMacClassBProcess+0x42>
        {
            LoRaMacClassBProcessBeacon( );
 8017d92:	f7fe fec1 	bl	8016b18 <LoRaMacClassBProcessBeacon>
        }
        if( events.Events.PingSlot == 1 )
 8017d96:	783b      	ldrb	r3, [r7, #0]
 8017d98:	f003 0302 	and.w	r3, r3, #2
 8017d9c:	b2db      	uxtb	r3, r3
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d001      	beq.n	8017da6 <LoRaMacClassBProcess+0x52>
        {
            LoRaMacClassBProcessPingSlot( );
 8017da2:	f7ff f8af 	bl	8016f04 <LoRaMacClassBProcessPingSlot>
        }
        if( events.Events.MulticastSlot == 1 )
 8017da6:	783b      	ldrb	r3, [r7, #0]
 8017da8:	f003 0304 	and.w	r3, r3, #4
 8017dac:	b2db      	uxtb	r3, r3
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d001      	beq.n	8017db6 <LoRaMacClassBProcess+0x62>
        {
            LoRaMacClassBProcessMulticastSlot( );
 8017db2:	f7ff f9b1 	bl	8017118 <LoRaMacClassBProcessMulticastSlot>
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017db6:	bf00      	nop
 8017db8:	3710      	adds	r7, #16
 8017dba:	46bd      	mov	sp, r7
 8017dbc:	bd80      	pop	{r7, pc}
 8017dbe:	bf00      	nop
 8017dc0:	20002198 	.word	0x20002198

08017dc4 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8017dc4:	b480      	push	{r7}
 8017dc6:	b085      	sub	sp, #20
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	81fb      	strh	r3, [r7, #14]
 8017dd4:	e00a      	b.n	8017dec <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8017dd6:	89fb      	ldrh	r3, [r7, #14]
 8017dd8:	68ba      	ldr	r2, [r7, #8]
 8017dda:	4413      	add	r3, r2
 8017ddc:	781b      	ldrb	r3, [r3, #0]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d001      	beq.n	8017de6 <IsSlotFree+0x22>
        {
            return false;
 8017de2:	2300      	movs	r3, #0
 8017de4:	e006      	b.n	8017df4 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8017de6:	89fb      	ldrh	r3, [r7, #14]
 8017de8:	3301      	adds	r3, #1
 8017dea:	81fb      	strh	r3, [r7, #14]
 8017dec:	89fb      	ldrh	r3, [r7, #14]
 8017dee:	2b0f      	cmp	r3, #15
 8017df0:	d9f1      	bls.n	8017dd6 <IsSlotFree+0x12>
        }
    }
    return true;
 8017df2:	2301      	movs	r3, #1
}
 8017df4:	4618      	mov	r0, r3
 8017df6:	3714      	adds	r7, #20
 8017df8:	46bd      	mov	sp, r7
 8017dfa:	bc80      	pop	{r7}
 8017dfc:	4770      	bx	lr
	...

08017e00 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8017e00:	b580      	push	{r7, lr}
 8017e02:	b082      	sub	sp, #8
 8017e04:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8017e06:	2300      	movs	r3, #0
 8017e08:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8017e0a:	e007      	b.n	8017e1c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8017e0c:	79fb      	ldrb	r3, [r7, #7]
 8017e0e:	3301      	adds	r3, #1
 8017e10:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8017e12:	79fb      	ldrb	r3, [r7, #7]
 8017e14:	2b0f      	cmp	r3, #15
 8017e16:	d101      	bne.n	8017e1c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8017e18:	2300      	movs	r3, #0
 8017e1a:	e012      	b.n	8017e42 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8017e1c:	79fb      	ldrb	r3, [r7, #7]
 8017e1e:	011b      	lsls	r3, r3, #4
 8017e20:	3308      	adds	r3, #8
 8017e22:	4a0a      	ldr	r2, [pc, #40]	; (8017e4c <MallocNewMacCommandSlot+0x4c>)
 8017e24:	4413      	add	r3, r2
 8017e26:	4618      	mov	r0, r3
 8017e28:	f7ff ffcc 	bl	8017dc4 <IsSlotFree>
 8017e2c:	4603      	mov	r3, r0
 8017e2e:	f083 0301 	eor.w	r3, r3, #1
 8017e32:	b2db      	uxtb	r3, r3
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d1e9      	bne.n	8017e0c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8017e38:	79fb      	ldrb	r3, [r7, #7]
 8017e3a:	011b      	lsls	r3, r3, #4
 8017e3c:	3308      	adds	r3, #8
 8017e3e:	4a03      	ldr	r2, [pc, #12]	; (8017e4c <MallocNewMacCommandSlot+0x4c>)
 8017e40:	4413      	add	r3, r2
}
 8017e42:	4618      	mov	r0, r3
 8017e44:	3708      	adds	r7, #8
 8017e46:	46bd      	mov	sp, r7
 8017e48:	bd80      	pop	{r7, pc}
 8017e4a:	bf00      	nop
 8017e4c:	2000227c 	.word	0x2000227c

08017e50 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8017e50:	b580      	push	{r7, lr}
 8017e52:	b082      	sub	sp, #8
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d101      	bne.n	8017e62 <FreeMacCommandSlot+0x12>
    {
        return false;
 8017e5e:	2300      	movs	r3, #0
 8017e60:	e005      	b.n	8017e6e <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8017e62:	2210      	movs	r2, #16
 8017e64:	2100      	movs	r1, #0
 8017e66:	6878      	ldr	r0, [r7, #4]
 8017e68:	f004 fa54 	bl	801c314 <memset1>

    return true;
 8017e6c:	2301      	movs	r3, #1
}
 8017e6e:	4618      	mov	r0, r3
 8017e70:	3708      	adds	r7, #8
 8017e72:	46bd      	mov	sp, r7
 8017e74:	bd80      	pop	{r7, pc}

08017e76 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8017e76:	b480      	push	{r7}
 8017e78:	b083      	sub	sp, #12
 8017e7a:	af00      	add	r7, sp, #0
 8017e7c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d101      	bne.n	8017e88 <LinkedListInit+0x12>
    {
        return false;
 8017e84:	2300      	movs	r3, #0
 8017e86:	e006      	b.n	8017e96 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	2200      	movs	r2, #0
 8017e92:	605a      	str	r2, [r3, #4]

    return true;
 8017e94:	2301      	movs	r3, #1
}
 8017e96:	4618      	mov	r0, r3
 8017e98:	370c      	adds	r7, #12
 8017e9a:	46bd      	mov	sp, r7
 8017e9c:	bc80      	pop	{r7}
 8017e9e:	4770      	bx	lr

08017ea0 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8017ea0:	b480      	push	{r7}
 8017ea2:	b083      	sub	sp, #12
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	6078      	str	r0, [r7, #4]
 8017ea8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d002      	beq.n	8017eb6 <LinkedListAdd+0x16>
 8017eb0:	683b      	ldr	r3, [r7, #0]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d101      	bne.n	8017eba <LinkedListAdd+0x1a>
    {
        return false;
 8017eb6:	2300      	movs	r3, #0
 8017eb8:	e015      	b.n	8017ee6 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d102      	bne.n	8017ec8 <LinkedListAdd+0x28>
    {
        list->First = element;
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	683a      	ldr	r2, [r7, #0]
 8017ec6:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	685b      	ldr	r3, [r3, #4]
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d003      	beq.n	8017ed8 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	685b      	ldr	r3, [r3, #4]
 8017ed4:	683a      	ldr	r2, [r7, #0]
 8017ed6:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8017ed8:	683b      	ldr	r3, [r7, #0]
 8017eda:	2200      	movs	r2, #0
 8017edc:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	683a      	ldr	r2, [r7, #0]
 8017ee2:	605a      	str	r2, [r3, #4]

    return true;
 8017ee4:	2301      	movs	r3, #1
}
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	370c      	adds	r7, #12
 8017eea:	46bd      	mov	sp, r7
 8017eec:	bc80      	pop	{r7}
 8017eee:	4770      	bx	lr

08017ef0 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8017ef0:	b480      	push	{r7}
 8017ef2:	b085      	sub	sp, #20
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	6078      	str	r0, [r7, #4]
 8017ef8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d002      	beq.n	8017f06 <LinkedListGetPrevious+0x16>
 8017f00:	683b      	ldr	r3, [r7, #0]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d101      	bne.n	8017f0a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8017f06:	2300      	movs	r3, #0
 8017f08:	e016      	b.n	8017f38 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8017f10:	683a      	ldr	r2, [r7, #0]
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	429a      	cmp	r2, r3
 8017f16:	d00c      	beq.n	8017f32 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8017f18:	e002      	b.n	8017f20 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	681b      	ldr	r3, [r3, #0]
 8017f1e:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d007      	beq.n	8017f36 <LinkedListGetPrevious+0x46>
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	683a      	ldr	r2, [r7, #0]
 8017f2c:	429a      	cmp	r2, r3
 8017f2e:	d1f4      	bne.n	8017f1a <LinkedListGetPrevious+0x2a>
 8017f30:	e001      	b.n	8017f36 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8017f32:	2300      	movs	r3, #0
 8017f34:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8017f36:	68fb      	ldr	r3, [r7, #12]
}
 8017f38:	4618      	mov	r0, r3
 8017f3a:	3714      	adds	r7, #20
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bc80      	pop	{r7}
 8017f40:	4770      	bx	lr

08017f42 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8017f42:	b580      	push	{r7, lr}
 8017f44:	b084      	sub	sp, #16
 8017f46:	af00      	add	r7, sp, #0
 8017f48:	6078      	str	r0, [r7, #4]
 8017f4a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d002      	beq.n	8017f58 <LinkedListRemove+0x16>
 8017f52:	683b      	ldr	r3, [r7, #0]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d101      	bne.n	8017f5c <LinkedListRemove+0x1a>
    {
        return false;
 8017f58:	2300      	movs	r3, #0
 8017f5a:	e020      	b.n	8017f9e <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8017f5c:	6839      	ldr	r1, [r7, #0]
 8017f5e:	6878      	ldr	r0, [r7, #4]
 8017f60:	f7ff ffc6 	bl	8017ef0 <LinkedListGetPrevious>
 8017f64:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	683a      	ldr	r2, [r7, #0]
 8017f6c:	429a      	cmp	r2, r3
 8017f6e:	d103      	bne.n	8017f78 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8017f70:	683b      	ldr	r3, [r7, #0]
 8017f72:	681a      	ldr	r2, [r3, #0]
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	685b      	ldr	r3, [r3, #4]
 8017f7c:	683a      	ldr	r2, [r7, #0]
 8017f7e:	429a      	cmp	r2, r3
 8017f80:	d102      	bne.n	8017f88 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	68fa      	ldr	r2, [r7, #12]
 8017f86:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d003      	beq.n	8017f96 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8017f8e:	683b      	ldr	r3, [r7, #0]
 8017f90:	681a      	ldr	r2, [r3, #0]
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8017f96:	683b      	ldr	r3, [r7, #0]
 8017f98:	2200      	movs	r2, #0
 8017f9a:	601a      	str	r2, [r3, #0]

    return true;
 8017f9c:	2301      	movs	r3, #1
}
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	3710      	adds	r7, #16
 8017fa2:	46bd      	mov	sp, r7
 8017fa4:	bd80      	pop	{r7, pc}

08017fa6 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8017fa6:	b480      	push	{r7}
 8017fa8:	b083      	sub	sp, #12
 8017faa:	af00      	add	r7, sp, #0
 8017fac:	4603      	mov	r3, r0
 8017fae:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8017fb0:	79fb      	ldrb	r3, [r7, #7]
 8017fb2:	2b05      	cmp	r3, #5
 8017fb4:	d004      	beq.n	8017fc0 <IsSticky+0x1a>
 8017fb6:	2b05      	cmp	r3, #5
 8017fb8:	db04      	blt.n	8017fc4 <IsSticky+0x1e>
 8017fba:	3b08      	subs	r3, #8
 8017fbc:	2b02      	cmp	r3, #2
 8017fbe:	d801      	bhi.n	8017fc4 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8017fc0:	2301      	movs	r3, #1
 8017fc2:	e000      	b.n	8017fc6 <IsSticky+0x20>
        default:
            return false;
 8017fc4:	2300      	movs	r3, #0
    }
}
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	370c      	adds	r7, #12
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	bc80      	pop	{r7}
 8017fce:	4770      	bx	lr

08017fd0 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8017fd4:	22fc      	movs	r2, #252	; 0xfc
 8017fd6:	2100      	movs	r1, #0
 8017fd8:	4804      	ldr	r0, [pc, #16]	; (8017fec <LoRaMacCommandsInit+0x1c>)
 8017fda:	f004 f99b 	bl	801c314 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8017fde:	4803      	ldr	r0, [pc, #12]	; (8017fec <LoRaMacCommandsInit+0x1c>)
 8017fe0:	f7ff ff49 	bl	8017e76 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8017fe4:	2300      	movs	r3, #0
}
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	bd80      	pop	{r7, pc}
 8017fea:	bf00      	nop
 8017fec:	2000227c 	.word	0x2000227c

08017ff0 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	b086      	sub	sp, #24
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	60b9      	str	r1, [r7, #8]
 8017ffa:	607a      	str	r2, [r7, #4]
 8017ffc:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8017ffe:	68bb      	ldr	r3, [r7, #8]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d101      	bne.n	8018008 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8018004:	2301      	movs	r3, #1
 8018006:	e033      	b.n	8018070 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8018008:	f7ff fefa 	bl	8017e00 <MallocNewMacCommandSlot>
 801800c:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801800e:	697b      	ldr	r3, [r7, #20]
 8018010:	2b00      	cmp	r3, #0
 8018012:	d101      	bne.n	8018018 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8018014:	2302      	movs	r3, #2
 8018016:	e02b      	b.n	8018070 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8018018:	6979      	ldr	r1, [r7, #20]
 801801a:	4817      	ldr	r0, [pc, #92]	; (8018078 <LoRaMacCommandsAddCmd+0x88>)
 801801c:	f7ff ff40 	bl	8017ea0 <LinkedListAdd>
 8018020:	4603      	mov	r3, r0
 8018022:	f083 0301 	eor.w	r3, r3, #1
 8018026:	b2db      	uxtb	r3, r3
 8018028:	2b00      	cmp	r3, #0
 801802a:	d001      	beq.n	8018030 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 801802c:	2305      	movs	r3, #5
 801802e:	e01f      	b.n	8018070 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8018030:	697b      	ldr	r3, [r7, #20]
 8018032:	7bfa      	ldrb	r2, [r7, #15]
 8018034:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8018036:	697b      	ldr	r3, [r7, #20]
 8018038:	687a      	ldr	r2, [r7, #4]
 801803a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 801803c:	697b      	ldr	r3, [r7, #20]
 801803e:	3305      	adds	r3, #5
 8018040:	687a      	ldr	r2, [r7, #4]
 8018042:	b292      	uxth	r2, r2
 8018044:	68b9      	ldr	r1, [r7, #8]
 8018046:	4618      	mov	r0, r3
 8018048:	f004 f929 	bl	801c29e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 801804c:	7bfb      	ldrb	r3, [r7, #15]
 801804e:	4618      	mov	r0, r3
 8018050:	f7ff ffa9 	bl	8017fa6 <IsSticky>
 8018054:	4603      	mov	r3, r0
 8018056:	461a      	mov	r2, r3
 8018058:	697b      	ldr	r3, [r7, #20]
 801805a:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 801805c:	4b06      	ldr	r3, [pc, #24]	; (8018078 <LoRaMacCommandsAddCmd+0x88>)
 801805e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	4413      	add	r3, r2
 8018066:	3301      	adds	r3, #1
 8018068:	4a03      	ldr	r2, [pc, #12]	; (8018078 <LoRaMacCommandsAddCmd+0x88>)
 801806a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 801806e:	2300      	movs	r3, #0
}
 8018070:	4618      	mov	r0, r3
 8018072:	3718      	adds	r7, #24
 8018074:	46bd      	mov	sp, r7
 8018076:	bd80      	pop	{r7, pc}
 8018078:	2000227c 	.word	0x2000227c

0801807c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 801807c:	b580      	push	{r7, lr}
 801807e:	b082      	sub	sp, #8
 8018080:	af00      	add	r7, sp, #0
 8018082:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	2b00      	cmp	r3, #0
 8018088:	d101      	bne.n	801808e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801808a:	2301      	movs	r3, #1
 801808c:	e021      	b.n	80180d2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 801808e:	6879      	ldr	r1, [r7, #4]
 8018090:	4812      	ldr	r0, [pc, #72]	; (80180dc <LoRaMacCommandsRemoveCmd+0x60>)
 8018092:	f7ff ff56 	bl	8017f42 <LinkedListRemove>
 8018096:	4603      	mov	r3, r0
 8018098:	f083 0301 	eor.w	r3, r3, #1
 801809c:	b2db      	uxtb	r3, r3
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d001      	beq.n	80180a6 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80180a2:	2303      	movs	r3, #3
 80180a4:	e015      	b.n	80180d2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80180a6:	4b0d      	ldr	r3, [pc, #52]	; (80180dc <LoRaMacCommandsRemoveCmd+0x60>)
 80180a8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	689b      	ldr	r3, [r3, #8]
 80180b0:	1ad3      	subs	r3, r2, r3
 80180b2:	3b01      	subs	r3, #1
 80180b4:	4a09      	ldr	r2, [pc, #36]	; (80180dc <LoRaMacCommandsRemoveCmd+0x60>)
 80180b6:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80180ba:	6878      	ldr	r0, [r7, #4]
 80180bc:	f7ff fec8 	bl	8017e50 <FreeMacCommandSlot>
 80180c0:	4603      	mov	r3, r0
 80180c2:	f083 0301 	eor.w	r3, r3, #1
 80180c6:	b2db      	uxtb	r3, r3
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d001      	beq.n	80180d0 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80180cc:	2305      	movs	r3, #5
 80180ce:	e000      	b.n	80180d2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80180d0:	2300      	movs	r3, #0
}
 80180d2:	4618      	mov	r0, r3
 80180d4:	3708      	adds	r7, #8
 80180d6:	46bd      	mov	sp, r7
 80180d8:	bd80      	pop	{r7, pc}
 80180da:	bf00      	nop
 80180dc:	2000227c 	.word	0x2000227c

080180e0 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80180e0:	b580      	push	{r7, lr}
 80180e2:	b082      	sub	sp, #8
 80180e4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80180e6:	4b0f      	ldr	r3, [pc, #60]	; (8018124 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80180ec:	e012      	b.n	8018114 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	7b1b      	ldrb	r3, [r3, #12]
 80180f2:	f083 0301 	eor.w	r3, r3, #1
 80180f6:	b2db      	uxtb	r3, r3
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d008      	beq.n	801810e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8018102:	6878      	ldr	r0, [r7, #4]
 8018104:	f7ff ffba 	bl	801807c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8018108:	683b      	ldr	r3, [r7, #0]
 801810a:	607b      	str	r3, [r7, #4]
 801810c:	e002      	b.n	8018114 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d1e9      	bne.n	80180ee <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801811a:	2300      	movs	r3, #0
}
 801811c:	4618      	mov	r0, r3
 801811e:	3708      	adds	r7, #8
 8018120:	46bd      	mov	sp, r7
 8018122:	bd80      	pop	{r7, pc}
 8018124:	2000227c 	.word	0x2000227c

08018128 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8018128:	b580      	push	{r7, lr}
 801812a:	b082      	sub	sp, #8
 801812c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801812e:	4b0e      	ldr	r3, [pc, #56]	; (8018168 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8018134:	e00f      	b.n	8018156 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	791b      	ldrb	r3, [r3, #4]
 8018140:	4618      	mov	r0, r3
 8018142:	f7ff ff30 	bl	8017fa6 <IsSticky>
 8018146:	4603      	mov	r3, r0
 8018148:	2b00      	cmp	r3, #0
 801814a:	d002      	beq.n	8018152 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 801814c:	6878      	ldr	r0, [r7, #4]
 801814e:	f7ff ff95 	bl	801807c <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8018152:	683b      	ldr	r3, [r7, #0]
 8018154:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d1ec      	bne.n	8018136 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801815c:	2300      	movs	r3, #0
}
 801815e:	4618      	mov	r0, r3
 8018160:	3708      	adds	r7, #8
 8018162:	46bd      	mov	sp, r7
 8018164:	bd80      	pop	{r7, pc}
 8018166:	bf00      	nop
 8018168:	2000227c 	.word	0x2000227c

0801816c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 801816c:	b480      	push	{r7}
 801816e:	b083      	sub	sp, #12
 8018170:	af00      	add	r7, sp, #0
 8018172:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d101      	bne.n	801817e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801817a:	2301      	movs	r3, #1
 801817c:	e005      	b.n	801818a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 801817e:	4b05      	ldr	r3, [pc, #20]	; (8018194 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8018180:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8018188:	2300      	movs	r3, #0
}
 801818a:	4618      	mov	r0, r3
 801818c:	370c      	adds	r7, #12
 801818e:	46bd      	mov	sp, r7
 8018190:	bc80      	pop	{r7}
 8018192:	4770      	bx	lr
 8018194:	2000227c 	.word	0x2000227c

08018198 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8018198:	b580      	push	{r7, lr}
 801819a:	b088      	sub	sp, #32
 801819c:	af00      	add	r7, sp, #0
 801819e:	60f8      	str	r0, [r7, #12]
 80181a0:	60b9      	str	r1, [r7, #8]
 80181a2:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80181a4:	4b25      	ldr	r3, [pc, #148]	; (801823c <LoRaMacCommandsSerializeCmds+0xa4>)
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80181aa:	2300      	movs	r3, #0
 80181ac:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d002      	beq.n	80181ba <LoRaMacCommandsSerializeCmds+0x22>
 80181b4:	68bb      	ldr	r3, [r7, #8]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d126      	bne.n	8018208 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80181ba:	2301      	movs	r3, #1
 80181bc:	e039      	b.n	8018232 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80181be:	7efb      	ldrb	r3, [r7, #27]
 80181c0:	68fa      	ldr	r2, [r7, #12]
 80181c2:	1ad2      	subs	r2, r2, r3
 80181c4:	69fb      	ldr	r3, [r7, #28]
 80181c6:	689b      	ldr	r3, [r3, #8]
 80181c8:	3301      	adds	r3, #1
 80181ca:	429a      	cmp	r2, r3
 80181cc:	d320      	bcc.n	8018210 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80181ce:	7efb      	ldrb	r3, [r7, #27]
 80181d0:	1c5a      	adds	r2, r3, #1
 80181d2:	76fa      	strb	r2, [r7, #27]
 80181d4:	461a      	mov	r2, r3
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	4413      	add	r3, r2
 80181da:	69fa      	ldr	r2, [r7, #28]
 80181dc:	7912      	ldrb	r2, [r2, #4]
 80181de:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80181e0:	7efb      	ldrb	r3, [r7, #27]
 80181e2:	687a      	ldr	r2, [r7, #4]
 80181e4:	18d0      	adds	r0, r2, r3
 80181e6:	69fb      	ldr	r3, [r7, #28]
 80181e8:	1d59      	adds	r1, r3, #5
 80181ea:	69fb      	ldr	r3, [r7, #28]
 80181ec:	689b      	ldr	r3, [r3, #8]
 80181ee:	b29b      	uxth	r3, r3
 80181f0:	461a      	mov	r2, r3
 80181f2:	f004 f854 	bl	801c29e <memcpy1>
            itr += curElement->PayloadSize;
 80181f6:	69fb      	ldr	r3, [r7, #28]
 80181f8:	689b      	ldr	r3, [r3, #8]
 80181fa:	b2da      	uxtb	r2, r3
 80181fc:	7efb      	ldrb	r3, [r7, #27]
 80181fe:	4413      	add	r3, r2
 8018200:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8018202:	69fb      	ldr	r3, [r7, #28]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8018208:	69fb      	ldr	r3, [r7, #28]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d1d7      	bne.n	80181be <LoRaMacCommandsSerializeCmds+0x26>
 801820e:	e009      	b.n	8018224 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8018210:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8018212:	e007      	b.n	8018224 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8018214:	69fb      	ldr	r3, [r7, #28]
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801821a:	69f8      	ldr	r0, [r7, #28]
 801821c:	f7ff ff2e 	bl	801807c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8018220:	697b      	ldr	r3, [r7, #20]
 8018222:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8018224:	69fb      	ldr	r3, [r7, #28]
 8018226:	2b00      	cmp	r3, #0
 8018228:	d1f4      	bne.n	8018214 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801822a:	68b8      	ldr	r0, [r7, #8]
 801822c:	f7ff ff9e 	bl	801816c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8018230:	2300      	movs	r3, #0
}
 8018232:	4618      	mov	r0, r3
 8018234:	3720      	adds	r7, #32
 8018236:	46bd      	mov	sp, r7
 8018238:	bd80      	pop	{r7, pc}
 801823a:	bf00      	nop
 801823c:	2000227c 	.word	0x2000227c

08018240 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8018240:	b480      	push	{r7}
 8018242:	b085      	sub	sp, #20
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d101      	bne.n	8018252 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801824e:	2301      	movs	r3, #1
 8018250:	e016      	b.n	8018280 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8018252:	4b0e      	ldr	r3, [pc, #56]	; (801828c <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	2200      	movs	r2, #0
 801825c:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 801825e:	e00b      	b.n	8018278 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	7b1b      	ldrb	r3, [r3, #12]
 8018264:	2b00      	cmp	r3, #0
 8018266:	d004      	beq.n	8018272 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	2201      	movs	r2, #1
 801826c:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 801826e:	2300      	movs	r3, #0
 8018270:	e006      	b.n	8018280 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d1f0      	bne.n	8018260 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801827e:	2300      	movs	r3, #0
}
 8018280:	4618      	mov	r0, r3
 8018282:	3714      	adds	r7, #20
 8018284:	46bd      	mov	sp, r7
 8018286:	bc80      	pop	{r7}
 8018288:	4770      	bx	lr
 801828a:	bf00      	nop
 801828c:	2000227c 	.word	0x2000227c

08018290 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8018290:	b480      	push	{r7}
 8018292:	b085      	sub	sp, #20
 8018294:	af00      	add	r7, sp, #0
 8018296:	4603      	mov	r3, r0
 8018298:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801829a:	2300      	movs	r3, #0
 801829c:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 801829e:	79fb      	ldrb	r3, [r7, #7]
 80182a0:	3b02      	subs	r3, #2
 80182a2:	2b11      	cmp	r3, #17
 80182a4:	d850      	bhi.n	8018348 <LoRaMacCommandsGetCmdSize+0xb8>
 80182a6:	a201      	add	r2, pc, #4	; (adr r2, 80182ac <LoRaMacCommandsGetCmdSize+0x1c>)
 80182a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80182ac:	080182f5 	.word	0x080182f5
 80182b0:	080182fb 	.word	0x080182fb
 80182b4:	08018301 	.word	0x08018301
 80182b8:	08018307 	.word	0x08018307
 80182bc:	0801830d 	.word	0x0801830d
 80182c0:	08018313 	.word	0x08018313
 80182c4:	08018319 	.word	0x08018319
 80182c8:	0801831f 	.word	0x0801831f
 80182cc:	08018325 	.word	0x08018325
 80182d0:	08018349 	.word	0x08018349
 80182d4:	08018349 	.word	0x08018349
 80182d8:	0801832b 	.word	0x0801832b
 80182dc:	08018349 	.word	0x08018349
 80182e0:	08018349 	.word	0x08018349
 80182e4:	08018331 	.word	0x08018331
 80182e8:	08018337 	.word	0x08018337
 80182ec:	0801833d 	.word	0x0801833d
 80182f0:	08018343 	.word	0x08018343
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80182f4:	2303      	movs	r3, #3
 80182f6:	73fb      	strb	r3, [r7, #15]
            break;
 80182f8:	e027      	b.n	801834a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80182fa:	2305      	movs	r3, #5
 80182fc:	73fb      	strb	r3, [r7, #15]
            break;
 80182fe:	e024      	b.n	801834a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8018300:	2302      	movs	r3, #2
 8018302:	73fb      	strb	r3, [r7, #15]
            break;
 8018304:	e021      	b.n	801834a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8018306:	2305      	movs	r3, #5
 8018308:	73fb      	strb	r3, [r7, #15]
            break;
 801830a:	e01e      	b.n	801834a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 801830c:	2301      	movs	r3, #1
 801830e:	73fb      	strb	r3, [r7, #15]
            break;
 8018310:	e01b      	b.n	801834a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8018312:	2306      	movs	r3, #6
 8018314:	73fb      	strb	r3, [r7, #15]
            break;
 8018316:	e018      	b.n	801834a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8018318:	2302      	movs	r3, #2
 801831a:	73fb      	strb	r3, [r7, #15]
            break;
 801831c:	e015      	b.n	801834a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 801831e:	2302      	movs	r3, #2
 8018320:	73fb      	strb	r3, [r7, #15]
            break;
 8018322:	e012      	b.n	801834a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8018324:	2305      	movs	r3, #5
 8018326:	73fb      	strb	r3, [r7, #15]
            break;
 8018328:	e00f      	b.n	801834a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801832a:	2306      	movs	r3, #6
 801832c:	73fb      	strb	r3, [r7, #15]
            break;
 801832e:	e00c      	b.n	801834a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8018330:	2301      	movs	r3, #1
 8018332:	73fb      	strb	r3, [r7, #15]
            break;
 8018334:	e009      	b.n	801834a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8018336:	2305      	movs	r3, #5
 8018338:	73fb      	strb	r3, [r7, #15]
            break;
 801833a:	e006      	b.n	801834a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 801833c:	2304      	movs	r3, #4
 801833e:	73fb      	strb	r3, [r7, #15]
            break;
 8018340:	e003      	b.n	801834a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8018342:	2304      	movs	r3, #4
 8018344:	73fb      	strb	r3, [r7, #15]
            break;
 8018346:	e000      	b.n	801834a <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8018348:	bf00      	nop
        }
    }
    return cidSize;
 801834a:	7bfb      	ldrb	r3, [r7, #15]
}
 801834c:	4618      	mov	r0, r3
 801834e:	3714      	adds	r7, #20
 8018350:	46bd      	mov	sp, r7
 8018352:	bc80      	pop	{r7}
 8018354:	4770      	bx	lr
 8018356:	bf00      	nop

08018358 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8018358:	b480      	push	{r7}
 801835a:	b083      	sub	sp, #12
 801835c:	af00      	add	r7, sp, #0
 801835e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	4a07      	ldr	r2, [pc, #28]	; (8018380 <IncreaseBufferPointer+0x28>)
 8018364:	4293      	cmp	r3, r2
 8018366:	d102      	bne.n	801836e <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8018368:	4b06      	ldr	r3, [pc, #24]	; (8018384 <IncreaseBufferPointer+0x2c>)
 801836a:	607b      	str	r3, [r7, #4]
 801836c:	e002      	b.n	8018374 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	3304      	adds	r3, #4
 8018372:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8018374:	687b      	ldr	r3, [r7, #4]
}
 8018376:	4618      	mov	r0, r3
 8018378:	370c      	adds	r7, #12
 801837a:	46bd      	mov	sp, r7
 801837c:	bc80      	pop	{r7}
 801837e:	4770      	bx	lr
 8018380:	20002394 	.word	0x20002394
 8018384:	20002384 	.word	0x20002384

08018388 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8018388:	b480      	push	{r7}
 801838a:	b083      	sub	sp, #12
 801838c:	af00      	add	r7, sp, #0
 801838e:	4603      	mov	r3, r0
 8018390:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8018392:	79fb      	ldrb	r3, [r7, #7]
 8018394:	2b00      	cmp	r3, #0
 8018396:	d101      	bne.n	801839c <IsListEmpty+0x14>
    {
        return true;
 8018398:	2301      	movs	r3, #1
 801839a:	e000      	b.n	801839e <IsListEmpty+0x16>
    }
    return false;
 801839c:	2300      	movs	r3, #0
}
 801839e:	4618      	mov	r0, r3
 80183a0:	370c      	adds	r7, #12
 80183a2:	46bd      	mov	sp, r7
 80183a4:	bc80      	pop	{r7}
 80183a6:	4770      	bx	lr

080183a8 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80183a8:	b480      	push	{r7}
 80183aa:	b083      	sub	sp, #12
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	4603      	mov	r3, r0
 80183b0:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80183b2:	79fb      	ldrb	r3, [r7, #7]
 80183b4:	2b04      	cmp	r3, #4
 80183b6:	d901      	bls.n	80183bc <IsListFull+0x14>
    {
        return true;
 80183b8:	2301      	movs	r3, #1
 80183ba:	e000      	b.n	80183be <IsListFull+0x16>
    }
    return false;
 80183bc:	2300      	movs	r3, #0
}
 80183be:	4618      	mov	r0, r3
 80183c0:	370c      	adds	r7, #12
 80183c2:	46bd      	mov	sp, r7
 80183c4:	bc80      	pop	{r7}
 80183c6:	4770      	bx	lr

080183c8 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b086      	sub	sp, #24
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	4603      	mov	r3, r0
 80183d0:	60b9      	str	r1, [r7, #8]
 80183d2:	607a      	str	r2, [r7, #4]
 80183d4:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80183d6:	68bb      	ldr	r3, [r7, #8]
 80183d8:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80183da:	4b13      	ldr	r3, [pc, #76]	; (8018428 <GetElement+0x60>)
 80183dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80183e0:	4618      	mov	r0, r3
 80183e2:	f7ff ffd1 	bl	8018388 <IsListEmpty>
 80183e6:	4603      	mov	r3, r0
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d001      	beq.n	80183f0 <GetElement+0x28>
    {
        return NULL;
 80183ec:	2300      	movs	r3, #0
 80183ee:	e017      	b.n	8018420 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80183f0:	2300      	movs	r3, #0
 80183f2:	74fb      	strb	r3, [r7, #19]
 80183f4:	e00d      	b.n	8018412 <GetElement+0x4a>
    {
        if( element->Request == request )
 80183f6:	697b      	ldr	r3, [r7, #20]
 80183f8:	781b      	ldrb	r3, [r3, #0]
 80183fa:	7bfa      	ldrb	r2, [r7, #15]
 80183fc:	429a      	cmp	r2, r3
 80183fe:	d101      	bne.n	8018404 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8018400:	697b      	ldr	r3, [r7, #20]
 8018402:	e00d      	b.n	8018420 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8018404:	6978      	ldr	r0, [r7, #20]
 8018406:	f7ff ffa7 	bl	8018358 <IncreaseBufferPointer>
 801840a:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 801840c:	7cfb      	ldrb	r3, [r7, #19]
 801840e:	3301      	adds	r3, #1
 8018410:	74fb      	strb	r3, [r7, #19]
 8018412:	4b05      	ldr	r3, [pc, #20]	; (8018428 <GetElement+0x60>)
 8018414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018418:	7cfa      	ldrb	r2, [r7, #19]
 801841a:	429a      	cmp	r2, r3
 801841c:	d3eb      	bcc.n	80183f6 <GetElement+0x2e>
    }

    return NULL;
 801841e:	2300      	movs	r3, #0
}
 8018420:	4618      	mov	r0, r3
 8018422:	3718      	adds	r7, #24
 8018424:	46bd      	mov	sp, r7
 8018426:	bd80      	pop	{r7, pc}
 8018428:	20002378 	.word	0x20002378

0801842c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 801842c:	b580      	push	{r7, lr}
 801842e:	b082      	sub	sp, #8
 8018430:	af00      	add	r7, sp, #0
 8018432:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8018434:	4a0c      	ldr	r2, [pc, #48]	; (8018468 <LoRaMacConfirmQueueInit+0x3c>)
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801843a:	4b0b      	ldr	r3, [pc, #44]	; (8018468 <LoRaMacConfirmQueueInit+0x3c>)
 801843c:	2200      	movs	r2, #0
 801843e:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8018442:	4b09      	ldr	r3, [pc, #36]	; (8018468 <LoRaMacConfirmQueueInit+0x3c>)
 8018444:	4a09      	ldr	r2, [pc, #36]	; (801846c <LoRaMacConfirmQueueInit+0x40>)
 8018446:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8018448:	4b07      	ldr	r3, [pc, #28]	; (8018468 <LoRaMacConfirmQueueInit+0x3c>)
 801844a:	4a08      	ldr	r2, [pc, #32]	; (801846c <LoRaMacConfirmQueueInit+0x40>)
 801844c:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 801844e:	2214      	movs	r2, #20
 8018450:	21ff      	movs	r1, #255	; 0xff
 8018452:	4806      	ldr	r0, [pc, #24]	; (801846c <LoRaMacConfirmQueueInit+0x40>)
 8018454:	f003 ff5e 	bl	801c314 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8018458:	4b03      	ldr	r3, [pc, #12]	; (8018468 <LoRaMacConfirmQueueInit+0x3c>)
 801845a:	2201      	movs	r2, #1
 801845c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8018460:	bf00      	nop
 8018462:	3708      	adds	r7, #8
 8018464:	46bd      	mov	sp, r7
 8018466:	bd80      	pop	{r7, pc}
 8018468:	20002378 	.word	0x20002378
 801846c:	20002384 	.word	0x20002384

08018470 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8018470:	b580      	push	{r7, lr}
 8018472:	b082      	sub	sp, #8
 8018474:	af00      	add	r7, sp, #0
 8018476:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8018478:	4b19      	ldr	r3, [pc, #100]	; (80184e0 <LoRaMacConfirmQueueAdd+0x70>)
 801847a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801847e:	4618      	mov	r0, r3
 8018480:	f7ff ff92 	bl	80183a8 <IsListFull>
 8018484:	4603      	mov	r3, r0
 8018486:	2b00      	cmp	r3, #0
 8018488:	d001      	beq.n	801848e <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801848a:	2300      	movs	r3, #0
 801848c:	e023      	b.n	80184d6 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 801848e:	4b14      	ldr	r3, [pc, #80]	; (80184e0 <LoRaMacConfirmQueueAdd+0x70>)
 8018490:	689b      	ldr	r3, [r3, #8]
 8018492:	687a      	ldr	r2, [r7, #4]
 8018494:	7812      	ldrb	r2, [r2, #0]
 8018496:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8018498:	4b11      	ldr	r3, [pc, #68]	; (80184e0 <LoRaMacConfirmQueueAdd+0x70>)
 801849a:	689b      	ldr	r3, [r3, #8]
 801849c:	687a      	ldr	r2, [r7, #4]
 801849e:	7852      	ldrb	r2, [r2, #1]
 80184a0:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80184a2:	4b0f      	ldr	r3, [pc, #60]	; (80184e0 <LoRaMacConfirmQueueAdd+0x70>)
 80184a4:	689b      	ldr	r3, [r3, #8]
 80184a6:	687a      	ldr	r2, [r7, #4]
 80184a8:	78d2      	ldrb	r2, [r2, #3]
 80184aa:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 80184ac:	4b0c      	ldr	r3, [pc, #48]	; (80184e0 <LoRaMacConfirmQueueAdd+0x70>)
 80184ae:	689b      	ldr	r3, [r3, #8]
 80184b0:	2200      	movs	r2, #0
 80184b2:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80184b4:	4b0a      	ldr	r3, [pc, #40]	; (80184e0 <LoRaMacConfirmQueueAdd+0x70>)
 80184b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80184ba:	3301      	adds	r3, #1
 80184bc:	b2da      	uxtb	r2, r3
 80184be:	4b08      	ldr	r3, [pc, #32]	; (80184e0 <LoRaMacConfirmQueueAdd+0x70>)
 80184c0:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80184c4:	4b06      	ldr	r3, [pc, #24]	; (80184e0 <LoRaMacConfirmQueueAdd+0x70>)
 80184c6:	689b      	ldr	r3, [r3, #8]
 80184c8:	4618      	mov	r0, r3
 80184ca:	f7ff ff45 	bl	8018358 <IncreaseBufferPointer>
 80184ce:	4603      	mov	r3, r0
 80184d0:	4a03      	ldr	r2, [pc, #12]	; (80184e0 <LoRaMacConfirmQueueAdd+0x70>)
 80184d2:	6093      	str	r3, [r2, #8]

    return true;
 80184d4:	2301      	movs	r3, #1
}
 80184d6:	4618      	mov	r0, r3
 80184d8:	3708      	adds	r7, #8
 80184da:	46bd      	mov	sp, r7
 80184dc:	bd80      	pop	{r7, pc}
 80184de:	bf00      	nop
 80184e0:	20002378 	.word	0x20002378

080184e4 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80184e4:	b580      	push	{r7, lr}
 80184e6:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80184e8:	4b0e      	ldr	r3, [pc, #56]	; (8018524 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80184ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80184ee:	4618      	mov	r0, r3
 80184f0:	f7ff ff4a 	bl	8018388 <IsListEmpty>
 80184f4:	4603      	mov	r3, r0
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d001      	beq.n	80184fe <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 80184fa:	2300      	movs	r3, #0
 80184fc:	e010      	b.n	8018520 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 80184fe:	4b09      	ldr	r3, [pc, #36]	; (8018524 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8018500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018504:	3b01      	subs	r3, #1
 8018506:	b2da      	uxtb	r2, r3
 8018508:	4b06      	ldr	r3, [pc, #24]	; (8018524 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801850a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801850e:	4b05      	ldr	r3, [pc, #20]	; (8018524 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8018510:	685b      	ldr	r3, [r3, #4]
 8018512:	4618      	mov	r0, r3
 8018514:	f7ff ff20 	bl	8018358 <IncreaseBufferPointer>
 8018518:	4603      	mov	r3, r0
 801851a:	4a02      	ldr	r2, [pc, #8]	; (8018524 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801851c:	6053      	str	r3, [r2, #4]

    return true;
 801851e:	2301      	movs	r3, #1
}
 8018520:	4618      	mov	r0, r3
 8018522:	bd80      	pop	{r7, pc}
 8018524:	20002378 	.word	0x20002378

08018528 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8018528:	b580      	push	{r7, lr}
 801852a:	b084      	sub	sp, #16
 801852c:	af00      	add	r7, sp, #0
 801852e:	4603      	mov	r3, r0
 8018530:	460a      	mov	r2, r1
 8018532:	71fb      	strb	r3, [r7, #7]
 8018534:	4613      	mov	r3, r2
 8018536:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8018538:	2300      	movs	r3, #0
 801853a:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801853c:	4b10      	ldr	r3, [pc, #64]	; (8018580 <LoRaMacConfirmQueueSetStatus+0x58>)
 801853e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018542:	4618      	mov	r0, r3
 8018544:	f7ff ff20 	bl	8018388 <IsListEmpty>
 8018548:	4603      	mov	r3, r0
 801854a:	f083 0301 	eor.w	r3, r3, #1
 801854e:	b2db      	uxtb	r3, r3
 8018550:	2b00      	cmp	r3, #0
 8018552:	d011      	beq.n	8018578 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8018554:	4b0a      	ldr	r3, [pc, #40]	; (8018580 <LoRaMacConfirmQueueSetStatus+0x58>)
 8018556:	6859      	ldr	r1, [r3, #4]
 8018558:	4b09      	ldr	r3, [pc, #36]	; (8018580 <LoRaMacConfirmQueueSetStatus+0x58>)
 801855a:	689a      	ldr	r2, [r3, #8]
 801855c:	79bb      	ldrb	r3, [r7, #6]
 801855e:	4618      	mov	r0, r3
 8018560:	f7ff ff32 	bl	80183c8 <GetElement>
 8018564:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8018566:	68fb      	ldr	r3, [r7, #12]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d005      	beq.n	8018578 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	79fa      	ldrb	r2, [r7, #7]
 8018570:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	2201      	movs	r2, #1
 8018576:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8018578:	bf00      	nop
 801857a:	3710      	adds	r7, #16
 801857c:	46bd      	mov	sp, r7
 801857e:	bd80      	pop	{r7, pc}
 8018580:	20002378 	.word	0x20002378

08018584 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8018584:	b580      	push	{r7, lr}
 8018586:	b084      	sub	sp, #16
 8018588:	af00      	add	r7, sp, #0
 801858a:	4603      	mov	r3, r0
 801858c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 801858e:	2300      	movs	r3, #0
 8018590:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8018592:	4b10      	ldr	r3, [pc, #64]	; (80185d4 <LoRaMacConfirmQueueGetStatus+0x50>)
 8018594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018598:	4618      	mov	r0, r3
 801859a:	f7ff fef5 	bl	8018388 <IsListEmpty>
 801859e:	4603      	mov	r3, r0
 80185a0:	f083 0301 	eor.w	r3, r3, #1
 80185a4:	b2db      	uxtb	r3, r3
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d00e      	beq.n	80185c8 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80185aa:	4b0a      	ldr	r3, [pc, #40]	; (80185d4 <LoRaMacConfirmQueueGetStatus+0x50>)
 80185ac:	6859      	ldr	r1, [r3, #4]
 80185ae:	4b09      	ldr	r3, [pc, #36]	; (80185d4 <LoRaMacConfirmQueueGetStatus+0x50>)
 80185b0:	689a      	ldr	r2, [r3, #8]
 80185b2:	79fb      	ldrb	r3, [r7, #7]
 80185b4:	4618      	mov	r0, r3
 80185b6:	f7ff ff07 	bl	80183c8 <GetElement>
 80185ba:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d002      	beq.n	80185c8 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	785b      	ldrb	r3, [r3, #1]
 80185c6:	e000      	b.n	80185ca <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80185c8:	2301      	movs	r3, #1
}
 80185ca:	4618      	mov	r0, r3
 80185cc:	3710      	adds	r7, #16
 80185ce:	46bd      	mov	sp, r7
 80185d0:	bd80      	pop	{r7, pc}
 80185d2:	bf00      	nop
 80185d4:	20002378 	.word	0x20002378

080185d8 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80185d8:	b580      	push	{r7, lr}
 80185da:	b084      	sub	sp, #16
 80185dc:	af00      	add	r7, sp, #0
 80185de:	4603      	mov	r3, r0
 80185e0:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80185e2:	4b16      	ldr	r3, [pc, #88]	; (801863c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80185e4:	685b      	ldr	r3, [r3, #4]
 80185e6:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 80185e8:	4a14      	ldr	r2, [pc, #80]	; (801863c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80185ea:	79fb      	ldrb	r3, [r7, #7]
 80185ec:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80185f0:	4b12      	ldr	r3, [pc, #72]	; (801863c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80185f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80185f6:	4618      	mov	r0, r3
 80185f8:	f7ff fec6 	bl	8018388 <IsListEmpty>
 80185fc:	4603      	mov	r3, r0
 80185fe:	f083 0301 	eor.w	r3, r3, #1
 8018602:	b2db      	uxtb	r3, r3
 8018604:	2b00      	cmp	r3, #0
 8018606:	d015      	beq.n	8018634 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	79fa      	ldrb	r2, [r7, #7]
 801860c:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	78db      	ldrb	r3, [r3, #3]
 8018612:	f083 0301 	eor.w	r3, r3, #1
 8018616:	b2db      	uxtb	r3, r3
 8018618:	2b00      	cmp	r3, #0
 801861a:	d002      	beq.n	8018622 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	2201      	movs	r2, #1
 8018620:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8018622:	68f8      	ldr	r0, [r7, #12]
 8018624:	f7ff fe98 	bl	8018358 <IncreaseBufferPointer>
 8018628:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801862a:	4b04      	ldr	r3, [pc, #16]	; (801863c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801862c:	689b      	ldr	r3, [r3, #8]
 801862e:	68fa      	ldr	r2, [r7, #12]
 8018630:	429a      	cmp	r2, r3
 8018632:	d1e9      	bne.n	8018608 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8018634:	bf00      	nop
 8018636:	3710      	adds	r7, #16
 8018638:	46bd      	mov	sp, r7
 801863a:	bd80      	pop	{r7, pc}
 801863c:	20002378 	.word	0x20002378

08018640 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8018640:	b580      	push	{r7, lr}
 8018642:	b082      	sub	sp, #8
 8018644:	af00      	add	r7, sp, #0
 8018646:	4603      	mov	r3, r0
 8018648:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801864a:	4b09      	ldr	r3, [pc, #36]	; (8018670 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801864c:	6859      	ldr	r1, [r3, #4]
 801864e:	4b08      	ldr	r3, [pc, #32]	; (8018670 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8018650:	689a      	ldr	r2, [r3, #8]
 8018652:	79fb      	ldrb	r3, [r7, #7]
 8018654:	4618      	mov	r0, r3
 8018656:	f7ff feb7 	bl	80183c8 <GetElement>
 801865a:	4603      	mov	r3, r0
 801865c:	2b00      	cmp	r3, #0
 801865e:	d001      	beq.n	8018664 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8018660:	2301      	movs	r3, #1
 8018662:	e000      	b.n	8018666 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8018664:	2300      	movs	r3, #0
}
 8018666:	4618      	mov	r0, r3
 8018668:	3708      	adds	r7, #8
 801866a:	46bd      	mov	sp, r7
 801866c:	bd80      	pop	{r7, pc}
 801866e:	bf00      	nop
 8018670:	20002378 	.word	0x20002378

08018674 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8018674:	b580      	push	{r7, lr}
 8018676:	b084      	sub	sp, #16
 8018678:	af00      	add	r7, sp, #0
 801867a:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 801867c:	4b22      	ldr	r3, [pc, #136]	; (8018708 <LoRaMacConfirmQueueHandleCb+0x94>)
 801867e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018682:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8018684:	2300      	movs	r3, #0
 8018686:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8018688:	2300      	movs	r3, #0
 801868a:	73fb      	strb	r3, [r7, #15]
 801868c:	e032      	b.n	80186f4 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 801868e:	4b1e      	ldr	r3, [pc, #120]	; (8018708 <LoRaMacConfirmQueueHandleCb+0x94>)
 8018690:	685b      	ldr	r3, [r3, #4]
 8018692:	781a      	ldrb	r2, [r3, #0]
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8018698:	4b1b      	ldr	r3, [pc, #108]	; (8018708 <LoRaMacConfirmQueueHandleCb+0x94>)
 801869a:	685b      	ldr	r3, [r3, #4]
 801869c:	785a      	ldrb	r2, [r3, #1]
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80186a2:	4b19      	ldr	r3, [pc, #100]	; (8018708 <LoRaMacConfirmQueueHandleCb+0x94>)
 80186a4:	685b      	ldr	r3, [r3, #4]
 80186a6:	789b      	ldrb	r3, [r3, #2]
 80186a8:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80186aa:	7b7b      	ldrb	r3, [r7, #13]
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d005      	beq.n	80186bc <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80186b0:	4b15      	ldr	r3, [pc, #84]	; (8018708 <LoRaMacConfirmQueueHandleCb+0x94>)
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	689b      	ldr	r3, [r3, #8]
 80186b6:	6878      	ldr	r0, [r7, #4]
 80186b8:	4798      	blx	r3
 80186ba:	e00b      	b.n	80186d4 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80186bc:	4b12      	ldr	r3, [pc, #72]	; (8018708 <LoRaMacConfirmQueueHandleCb+0x94>)
 80186be:	685b      	ldr	r3, [r3, #4]
 80186c0:	781b      	ldrb	r3, [r3, #0]
 80186c2:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80186c4:	4b10      	ldr	r3, [pc, #64]	; (8018708 <LoRaMacConfirmQueueHandleCb+0x94>)
 80186c6:	685b      	ldr	r3, [r3, #4]
 80186c8:	785b      	ldrb	r3, [r3, #1]
 80186ca:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80186cc:	4b0e      	ldr	r3, [pc, #56]	; (8018708 <LoRaMacConfirmQueueHandleCb+0x94>)
 80186ce:	685b      	ldr	r3, [r3, #4]
 80186d0:	78db      	ldrb	r3, [r3, #3]
 80186d2:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80186d4:	f7ff ff06 	bl	80184e4 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80186d8:	7b7b      	ldrb	r3, [r7, #13]
 80186da:	f083 0301 	eor.w	r3, r3, #1
 80186de:	b2db      	uxtb	r3, r3
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d004      	beq.n	80186ee <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80186e4:	f107 0308 	add.w	r3, r7, #8
 80186e8:	4618      	mov	r0, r3
 80186ea:	f7ff fec1 	bl	8018470 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80186ee:	7bfb      	ldrb	r3, [r7, #15]
 80186f0:	3301      	adds	r3, #1
 80186f2:	73fb      	strb	r3, [r7, #15]
 80186f4:	7bfa      	ldrb	r2, [r7, #15]
 80186f6:	7bbb      	ldrb	r3, [r7, #14]
 80186f8:	429a      	cmp	r2, r3
 80186fa:	d3c8      	bcc.n	801868e <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 80186fc:	bf00      	nop
 80186fe:	bf00      	nop
 8018700:	3710      	adds	r7, #16
 8018702:	46bd      	mov	sp, r7
 8018704:	bd80      	pop	{r7, pc}
 8018706:	bf00      	nop
 8018708:	20002378 	.word	0x20002378

0801870c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 801870c:	b480      	push	{r7}
 801870e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8018710:	4b03      	ldr	r3, [pc, #12]	; (8018720 <LoRaMacConfirmQueueGetCnt+0x14>)
 8018712:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8018716:	4618      	mov	r0, r3
 8018718:	46bd      	mov	sp, r7
 801871a:	bc80      	pop	{r7}
 801871c:	4770      	bx	lr
 801871e:	bf00      	nop
 8018720:	20002378 	.word	0x20002378

08018724 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8018724:	b580      	push	{r7, lr}
 8018726:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8018728:	4b06      	ldr	r3, [pc, #24]	; (8018744 <LoRaMacConfirmQueueIsFull+0x20>)
 801872a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801872e:	4618      	mov	r0, r3
 8018730:	f7ff fe3a 	bl	80183a8 <IsListFull>
 8018734:	4603      	mov	r3, r0
 8018736:	2b00      	cmp	r3, #0
 8018738:	d001      	beq.n	801873e <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801873a:	2301      	movs	r3, #1
 801873c:	e000      	b.n	8018740 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 801873e:	2300      	movs	r3, #0
    }
}
 8018740:	4618      	mov	r0, r3
 8018742:	bd80      	pop	{r7, pc}
 8018744:	20002378 	.word	0x20002378

08018748 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8018748:	b580      	push	{r7, lr}
 801874a:	b08e      	sub	sp, #56	; 0x38
 801874c:	af00      	add	r7, sp, #0
 801874e:	60f8      	str	r0, [r7, #12]
 8018750:	607b      	str	r3, [r7, #4]
 8018752:	460b      	mov	r3, r1
 8018754:	817b      	strh	r3, [r7, #10]
 8018756:	4613      	mov	r3, r2
 8018758:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	2b00      	cmp	r3, #0
 801875e:	d101      	bne.n	8018764 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018760:	230a      	movs	r3, #10
 8018762:	e086      	b.n	8018872 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8018764:	2300      	movs	r3, #0
 8018766:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 801876a:	2301      	movs	r3, #1
 801876c:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 801876e:	2300      	movs	r3, #0
 8018770:	623b      	str	r3, [r7, #32]
 8018772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018776:	2200      	movs	r2, #0
 8018778:	601a      	str	r2, [r3, #0]
 801877a:	605a      	str	r2, [r3, #4]
 801877c:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 801877e:	2300      	movs	r3, #0
 8018780:	613b      	str	r3, [r7, #16]
 8018782:	f107 0314 	add.w	r3, r7, #20
 8018786:	2200      	movs	r2, #0
 8018788:	601a      	str	r2, [r3, #0]
 801878a:	605a      	str	r2, [r3, #4]
 801878c:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 801878e:	2301      	movs	r3, #1
 8018790:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8018792:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8018796:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	b2db      	uxtb	r3, r3
 801879c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	0a1b      	lsrs	r3, r3, #8
 80187a2:	b2db      	uxtb	r3, r3
 80187a4:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	0c1b      	lsrs	r3, r3, #16
 80187aa:	b2db      	uxtb	r3, r3
 80187ac:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	0e1b      	lsrs	r3, r3, #24
 80187b2:	b2db      	uxtb	r3, r3
 80187b4:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80187b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187b8:	b2db      	uxtb	r3, r3
 80187ba:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80187bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187be:	0a1b      	lsrs	r3, r3, #8
 80187c0:	b2db      	uxtb	r3, r3
 80187c2:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80187c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187c6:	0c1b      	lsrs	r3, r3, #16
 80187c8:	b2db      	uxtb	r3, r3
 80187ca:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80187cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187ce:	0e1b      	lsrs	r3, r3, #24
 80187d0:	b2db      	uxtb	r3, r3
 80187d2:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 80187d4:	e048      	b.n	8018868 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 80187d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80187d8:	b2db      	uxtb	r3, r3
 80187da:	77fb      	strb	r3, [r7, #31]
        ctr++;
 80187dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80187de:	3301      	adds	r3, #1
 80187e0:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80187e2:	f107 0320 	add.w	r3, r7, #32
 80187e6:	7a7a      	ldrb	r2, [r7, #9]
 80187e8:	f107 0010 	add.w	r0, r7, #16
 80187ec:	2110      	movs	r1, #16
 80187ee:	f7f7 f96c 	bl	800faca <SecureElementAesEncrypt>
 80187f2:	4603      	mov	r3, r0
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d001      	beq.n	80187fc <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80187f8:	230f      	movs	r3, #15
 80187fa:	e03a      	b.n	8018872 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80187fc:	2300      	movs	r3, #0
 80187fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018802:	e01e      	b.n	8018842 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8018804:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8018808:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801880c:	4413      	add	r3, r2
 801880e:	461a      	mov	r2, r3
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	4413      	add	r3, r2
 8018814:	7819      	ldrb	r1, [r3, #0]
 8018816:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801881a:	3338      	adds	r3, #56	; 0x38
 801881c:	443b      	add	r3, r7
 801881e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8018822:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8018826:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801882a:	4403      	add	r3, r0
 801882c:	4618      	mov	r0, r3
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	4403      	add	r3, r0
 8018832:	404a      	eors	r2, r1
 8018834:	b2d2      	uxtb	r2, r2
 8018836:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8018838:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801883c:	3301      	adds	r3, #1
 801883e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018842:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8018846:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801884a:	2a10      	cmp	r2, #16
 801884c:	bfa8      	it	ge
 801884e:	2210      	movge	r2, #16
 8018850:	b212      	sxth	r2, r2
 8018852:	4293      	cmp	r3, r2
 8018854:	dbd6      	blt.n	8018804 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8018856:	897b      	ldrh	r3, [r7, #10]
 8018858:	3b10      	subs	r3, #16
 801885a:	b29b      	uxth	r3, r3
 801885c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801885e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018862:	3310      	adds	r3, #16
 8018864:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8018868:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801886c:	2b00      	cmp	r3, #0
 801886e:	dcb2      	bgt.n	80187d6 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8018870:	2300      	movs	r3, #0
}
 8018872:	4618      	mov	r0, r3
 8018874:	3738      	adds	r7, #56	; 0x38
 8018876:	46bd      	mov	sp, r7
 8018878:	bd80      	pop	{r7, pc}

0801887a <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801887a:	b490      	push	{r4, r7}
 801887c:	b082      	sub	sp, #8
 801887e:	af00      	add	r7, sp, #0
 8018880:	4604      	mov	r4, r0
 8018882:	4608      	mov	r0, r1
 8018884:	4611      	mov	r1, r2
 8018886:	461a      	mov	r2, r3
 8018888:	4623      	mov	r3, r4
 801888a:	80fb      	strh	r3, [r7, #6]
 801888c:	4603      	mov	r3, r0
 801888e:	717b      	strb	r3, [r7, #5]
 8018890:	460b      	mov	r3, r1
 8018892:	713b      	strb	r3, [r7, #4]
 8018894:	4613      	mov	r3, r2
 8018896:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8018898:	69bb      	ldr	r3, [r7, #24]
 801889a:	2b00      	cmp	r3, #0
 801889c:	d101      	bne.n	80188a2 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801889e:	230a      	movs	r3, #10
 80188a0:	e04e      	b.n	8018940 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80188a2:	69bb      	ldr	r3, [r7, #24]
 80188a4:	2249      	movs	r2, #73	; 0x49
 80188a6:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 80188a8:	69bb      	ldr	r3, [r7, #24]
 80188aa:	3301      	adds	r3, #1
 80188ac:	2200      	movs	r2, #0
 80188ae:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80188b0:	69bb      	ldr	r3, [r7, #24]
 80188b2:	3302      	adds	r3, #2
 80188b4:	2200      	movs	r2, #0
 80188b6:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80188b8:	69bb      	ldr	r3, [r7, #24]
 80188ba:	3303      	adds	r3, #3
 80188bc:	2200      	movs	r2, #0
 80188be:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80188c0:	69bb      	ldr	r3, [r7, #24]
 80188c2:	3304      	adds	r3, #4
 80188c4:	2200      	movs	r2, #0
 80188c6:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80188c8:	69bb      	ldr	r3, [r7, #24]
 80188ca:	3305      	adds	r3, #5
 80188cc:	78fa      	ldrb	r2, [r7, #3]
 80188ce:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80188d0:	69bb      	ldr	r3, [r7, #24]
 80188d2:	3306      	adds	r3, #6
 80188d4:	693a      	ldr	r2, [r7, #16]
 80188d6:	b2d2      	uxtb	r2, r2
 80188d8:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80188da:	693b      	ldr	r3, [r7, #16]
 80188dc:	0a1a      	lsrs	r2, r3, #8
 80188de:	69bb      	ldr	r3, [r7, #24]
 80188e0:	3307      	adds	r3, #7
 80188e2:	b2d2      	uxtb	r2, r2
 80188e4:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80188e6:	693b      	ldr	r3, [r7, #16]
 80188e8:	0c1a      	lsrs	r2, r3, #16
 80188ea:	69bb      	ldr	r3, [r7, #24]
 80188ec:	3308      	adds	r3, #8
 80188ee:	b2d2      	uxtb	r2, r2
 80188f0:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80188f2:	693b      	ldr	r3, [r7, #16]
 80188f4:	0e1a      	lsrs	r2, r3, #24
 80188f6:	69bb      	ldr	r3, [r7, #24]
 80188f8:	3309      	adds	r3, #9
 80188fa:	b2d2      	uxtb	r2, r2
 80188fc:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 80188fe:	69bb      	ldr	r3, [r7, #24]
 8018900:	330a      	adds	r3, #10
 8018902:	697a      	ldr	r2, [r7, #20]
 8018904:	b2d2      	uxtb	r2, r2
 8018906:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8018908:	697b      	ldr	r3, [r7, #20]
 801890a:	0a1a      	lsrs	r2, r3, #8
 801890c:	69bb      	ldr	r3, [r7, #24]
 801890e:	330b      	adds	r3, #11
 8018910:	b2d2      	uxtb	r2, r2
 8018912:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8018914:	697b      	ldr	r3, [r7, #20]
 8018916:	0c1a      	lsrs	r2, r3, #16
 8018918:	69bb      	ldr	r3, [r7, #24]
 801891a:	330c      	adds	r3, #12
 801891c:	b2d2      	uxtb	r2, r2
 801891e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8018920:	697b      	ldr	r3, [r7, #20]
 8018922:	0e1a      	lsrs	r2, r3, #24
 8018924:	69bb      	ldr	r3, [r7, #24]
 8018926:	330d      	adds	r3, #13
 8018928:	b2d2      	uxtb	r2, r2
 801892a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801892c:	69bb      	ldr	r3, [r7, #24]
 801892e:	330e      	adds	r3, #14
 8018930:	2200      	movs	r2, #0
 8018932:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8018934:	69bb      	ldr	r3, [r7, #24]
 8018936:	330f      	adds	r3, #15
 8018938:	88fa      	ldrh	r2, [r7, #6]
 801893a:	b2d2      	uxtb	r2, r2
 801893c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801893e:	2300      	movs	r3, #0
}
 8018940:	4618      	mov	r0, r3
 8018942:	3708      	adds	r7, #8
 8018944:	46bd      	mov	sp, r7
 8018946:	bc90      	pop	{r4, r7}
 8018948:	4770      	bx	lr

0801894a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801894a:	b590      	push	{r4, r7, lr}
 801894c:	b08b      	sub	sp, #44	; 0x2c
 801894e:	af04      	add	r7, sp, #16
 8018950:	6078      	str	r0, [r7, #4]
 8018952:	4608      	mov	r0, r1
 8018954:	4611      	mov	r1, r2
 8018956:	461a      	mov	r2, r3
 8018958:	4603      	mov	r3, r0
 801895a:	807b      	strh	r3, [r7, #2]
 801895c:	460b      	mov	r3, r1
 801895e:	707b      	strb	r3, [r7, #1]
 8018960:	4613      	mov	r3, r2
 8018962:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	2b00      	cmp	r3, #0
 8018968:	d002      	beq.n	8018970 <ComputeCmacB0+0x26>
 801896a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801896c:	2b00      	cmp	r3, #0
 801896e:	d101      	bne.n	8018974 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018970:	230a      	movs	r3, #10
 8018972:	e024      	b.n	80189be <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8018974:	887b      	ldrh	r3, [r7, #2]
 8018976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801897a:	d901      	bls.n	8018980 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801897c:	230e      	movs	r3, #14
 801897e:	e01e      	b.n	80189be <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8018980:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8018984:	783a      	ldrb	r2, [r7, #0]
 8018986:	7879      	ldrb	r1, [r7, #1]
 8018988:	8878      	ldrh	r0, [r7, #2]
 801898a:	f107 0308 	add.w	r3, r7, #8
 801898e:	9302      	str	r3, [sp, #8]
 8018990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018992:	9301      	str	r3, [sp, #4]
 8018994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018996:	9300      	str	r3, [sp, #0]
 8018998:	4623      	mov	r3, r4
 801899a:	f7ff ff6e 	bl	801887a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801899e:	7879      	ldrb	r1, [r7, #1]
 80189a0:	887a      	ldrh	r2, [r7, #2]
 80189a2:	f107 0008 	add.w	r0, r7, #8
 80189a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189a8:	9300      	str	r3, [sp, #0]
 80189aa:	460b      	mov	r3, r1
 80189ac:	6879      	ldr	r1, [r7, #4]
 80189ae:	f7f7 f83f 	bl	800fa30 <SecureElementComputeAesCmac>
 80189b2:	4603      	mov	r3, r0
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d001      	beq.n	80189bc <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80189b8:	230f      	movs	r3, #15
 80189ba:	e000      	b.n	80189be <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80189bc:	2300      	movs	r3, #0
}
 80189be:	4618      	mov	r0, r3
 80189c0:	371c      	adds	r7, #28
 80189c2:	46bd      	mov	sp, r7
 80189c4:	bd90      	pop	{r4, r7, pc}

080189c6 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80189c6:	b590      	push	{r4, r7, lr}
 80189c8:	b0cd      	sub	sp, #308	; 0x134
 80189ca:	af04      	add	r7, sp, #16
 80189cc:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80189d0:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 80189d4:	6020      	str	r0, [r4, #0]
 80189d6:	460c      	mov	r4, r1
 80189d8:	4610      	mov	r0, r2
 80189da:	4619      	mov	r1, r3
 80189dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80189e0:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80189e4:	4622      	mov	r2, r4
 80189e6:	801a      	strh	r2, [r3, #0]
 80189e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80189ec:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80189f0:	4602      	mov	r2, r0
 80189f2:	701a      	strb	r2, [r3, #0]
 80189f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80189f8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80189fc:	460a      	mov	r2, r1
 80189fe:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8018a00:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018a04:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d101      	bne.n	8018a12 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018a0e:	230a      	movs	r3, #10
 8018a10:	e063      	b.n	8018ada <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8018a12:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018a16:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8018a1a:	881b      	ldrh	r3, [r3, #0]
 8018a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018a20:	d901      	bls.n	8018a26 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8018a22:	230e      	movs	r3, #14
 8018a24:	e059      	b.n	8018ada <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8018a26:	f107 030c 	add.w	r3, r7, #12
 8018a2a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8018a2e:	2100      	movs	r1, #0
 8018a30:	4618      	mov	r0, r3
 8018a32:	f003 fc6f 	bl	801c314 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8018a36:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8018a3a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018a3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8018a42:	781a      	ldrb	r2, [r3, #0]
 8018a44:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018a48:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8018a4c:	7819      	ldrb	r1, [r3, #0]
 8018a4e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018a52:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8018a56:	8818      	ldrh	r0, [r3, #0]
 8018a58:	f107 030c 	add.w	r3, r7, #12
 8018a5c:	9302      	str	r3, [sp, #8]
 8018a5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8018a62:	9301      	str	r3, [sp, #4]
 8018a64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8018a68:	9300      	str	r3, [sp, #0]
 8018a6a:	4623      	mov	r3, r4
 8018a6c:	f7ff ff05 	bl	801887a <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8018a70:	f107 030c 	add.w	r3, r7, #12
 8018a74:	3310      	adds	r3, #16
 8018a76:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8018a7a:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8018a7e:	8812      	ldrh	r2, [r2, #0]
 8018a80:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8018a84:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8018a88:	6809      	ldr	r1, [r1, #0]
 8018a8a:	4618      	mov	r0, r3
 8018a8c:	f003 fc07 	bl	801c29e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8018a90:	2306      	movs	r3, #6
 8018a92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8018a96:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018a9a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8018a9e:	881b      	ldrh	r3, [r3, #0]
 8018aa0:	3310      	adds	r3, #16
 8018aa2:	b299      	uxth	r1, r3
 8018aa4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018aa8:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8018aac:	781b      	ldrb	r3, [r3, #0]
 8018aae:	f107 000c 	add.w	r0, r7, #12
 8018ab2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8018ab6:	f7f6 ffd9 	bl	800fa6c <SecureElementVerifyAesCmac>
 8018aba:	4603      	mov	r3, r0
 8018abc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8018ac0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d101      	bne.n	8018acc <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8018ac8:	2300      	movs	r3, #0
 8018aca:	e006      	b.n	8018ada <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8018acc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8018ad0:	2b01      	cmp	r3, #1
 8018ad2:	d101      	bne.n	8018ad8 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8018ad4:	2301      	movs	r3, #1
 8018ad6:	e000      	b.n	8018ada <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018ad8:	230f      	movs	r3, #15
}
 8018ada:	4618      	mov	r0, r3
 8018adc:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8018ae0:	46bd      	mov	sp, r7
 8018ae2:	bd90      	pop	{r4, r7, pc}

08018ae4 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8018ae4:	b480      	push	{r7}
 8018ae6:	b085      	sub	sp, #20
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	4603      	mov	r3, r0
 8018aec:	6039      	str	r1, [r7, #0]
 8018aee:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8018af0:	2300      	movs	r3, #0
 8018af2:	73fb      	strb	r3, [r7, #15]
 8018af4:	e011      	b.n	8018b1a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8018af6:	7bfb      	ldrb	r3, [r7, #15]
 8018af8:	4a0c      	ldr	r2, [pc, #48]	; (8018b2c <GetKeyAddrItem+0x48>)
 8018afa:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8018afe:	79fa      	ldrb	r2, [r7, #7]
 8018b00:	429a      	cmp	r2, r3
 8018b02:	d107      	bne.n	8018b14 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8018b04:	7bfb      	ldrb	r3, [r7, #15]
 8018b06:	009b      	lsls	r3, r3, #2
 8018b08:	4a08      	ldr	r2, [pc, #32]	; (8018b2c <GetKeyAddrItem+0x48>)
 8018b0a:	441a      	add	r2, r3
 8018b0c:	683b      	ldr	r3, [r7, #0]
 8018b0e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8018b10:	2300      	movs	r3, #0
 8018b12:	e006      	b.n	8018b22 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8018b14:	7bfb      	ldrb	r3, [r7, #15]
 8018b16:	3301      	adds	r3, #1
 8018b18:	73fb      	strb	r3, [r7, #15]
 8018b1a:	7bfb      	ldrb	r3, [r7, #15]
 8018b1c:	2b01      	cmp	r3, #1
 8018b1e:	d9ea      	bls.n	8018af6 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8018b20:	230c      	movs	r3, #12
}
 8018b22:	4618      	mov	r0, r3
 8018b24:	3714      	adds	r7, #20
 8018b26:	46bd      	mov	sp, r7
 8018b28:	bc80      	pop	{r7}
 8018b2a:	4770      	bx	lr
 8018b2c:	20000148 	.word	0x20000148

08018b30 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b088      	sub	sp, #32
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	60b9      	str	r1, [r7, #8]
 8018b38:	607a      	str	r2, [r7, #4]
 8018b3a:	461a      	mov	r2, r3
 8018b3c:	4603      	mov	r3, r0
 8018b3e:	73fb      	strb	r3, [r7, #15]
 8018b40:	4613      	mov	r3, r2
 8018b42:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8018b44:	2300      	movs	r3, #0
 8018b46:	613b      	str	r3, [r7, #16]
 8018b48:	f107 0314 	add.w	r3, r7, #20
 8018b4c:	2200      	movs	r2, #0
 8018b4e:	601a      	str	r2, [r3, #0]
 8018b50:	605a      	str	r2, [r3, #4]
 8018b52:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8018b54:	7bfb      	ldrb	r3, [r7, #15]
 8018b56:	2b02      	cmp	r3, #2
 8018b58:	d002      	beq.n	8018b60 <DeriveSessionKey10x+0x30>
 8018b5a:	2b03      	cmp	r3, #3
 8018b5c:	d003      	beq.n	8018b66 <DeriveSessionKey10x+0x36>
 8018b5e:	e005      	b.n	8018b6c <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8018b60:	2301      	movs	r3, #1
 8018b62:	743b      	strb	r3, [r7, #16]
            break;
 8018b64:	e004      	b.n	8018b70 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8018b66:	2302      	movs	r3, #2
 8018b68:	743b      	strb	r3, [r7, #16]
            break;
 8018b6a:	e001      	b.n	8018b70 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8018b6c:	230b      	movs	r3, #11
 8018b6e:	e02a      	b.n	8018bc6 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8018b70:	68bb      	ldr	r3, [r7, #8]
 8018b72:	b2db      	uxtb	r3, r3
 8018b74:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8018b76:	68bb      	ldr	r3, [r7, #8]
 8018b78:	0a1b      	lsrs	r3, r3, #8
 8018b7a:	b2db      	uxtb	r3, r3
 8018b7c:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8018b7e:	68bb      	ldr	r3, [r7, #8]
 8018b80:	0c1b      	lsrs	r3, r3, #16
 8018b82:	b2db      	uxtb	r3, r3
 8018b84:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	b2db      	uxtb	r3, r3
 8018b8a:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	0a1b      	lsrs	r3, r3, #8
 8018b90:	b2db      	uxtb	r3, r3
 8018b92:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	0c1b      	lsrs	r3, r3, #16
 8018b98:	b2db      	uxtb	r3, r3
 8018b9a:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8018b9c:	89bb      	ldrh	r3, [r7, #12]
 8018b9e:	b2db      	uxtb	r3, r3
 8018ba0:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8018ba2:	89bb      	ldrh	r3, [r7, #12]
 8018ba4:	0a1b      	lsrs	r3, r3, #8
 8018ba6:	b29b      	uxth	r3, r3
 8018ba8:	b2db      	uxtb	r3, r3
 8018baa:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8018bac:	7bfa      	ldrb	r2, [r7, #15]
 8018bae:	f107 0310 	add.w	r3, r7, #16
 8018bb2:	2101      	movs	r1, #1
 8018bb4:	4618      	mov	r0, r3
 8018bb6:	f7f6 ffef 	bl	800fb98 <SecureElementDeriveAndStoreKey>
 8018bba:	4603      	mov	r3, r0
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d001      	beq.n	8018bc4 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018bc0:	230f      	movs	r3, #15
 8018bc2:	e000      	b.n	8018bc6 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8018bc4:	2300      	movs	r3, #0
}
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	3720      	adds	r7, #32
 8018bca:	46bd      	mov	sp, r7
 8018bcc:	bd80      	pop	{r7, pc}
	...

08018bd0 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8018bd0:	b480      	push	{r7}
 8018bd2:	b083      	sub	sp, #12
 8018bd4:	af00      	add	r7, sp, #0
 8018bd6:	4603      	mov	r3, r0
 8018bd8:	6039      	str	r1, [r7, #0]
 8018bda:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8018bdc:	683b      	ldr	r3, [r7, #0]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d101      	bne.n	8018be6 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018be2:	230a      	movs	r3, #10
 8018be4:	e03b      	b.n	8018c5e <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8018be6:	79fb      	ldrb	r3, [r7, #7]
 8018be8:	3b01      	subs	r3, #1
 8018bea:	2b03      	cmp	r3, #3
 8018bec:	d834      	bhi.n	8018c58 <GetLastFcntDown+0x88>
 8018bee:	a201      	add	r2, pc, #4	; (adr r2, 8018bf4 <GetLastFcntDown+0x24>)
 8018bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bf4:	08018c05 	.word	0x08018c05
 8018bf8:	08018c1d 	.word	0x08018c1d
 8018bfc:	08018c35 	.word	0x08018c35
 8018c00:	08018c4d 	.word	0x08018c4d
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8018c04:	4b18      	ldr	r3, [pc, #96]	; (8018c68 <GetLastFcntDown+0x98>)
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	691a      	ldr	r2, [r3, #16]
 8018c0a:	683b      	ldr	r3, [r7, #0]
 8018c0c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8018c0e:	4b16      	ldr	r3, [pc, #88]	; (8018c68 <GetLastFcntDown+0x98>)
 8018c10:	681a      	ldr	r2, [r3, #0]
 8018c12:	4b15      	ldr	r3, [pc, #84]	; (8018c68 <GetLastFcntDown+0x98>)
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	6912      	ldr	r2, [r2, #16]
 8018c18:	621a      	str	r2, [r3, #32]
            break;
 8018c1a:	e01f      	b.n	8018c5c <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8018c1c:	4b12      	ldr	r3, [pc, #72]	; (8018c68 <GetLastFcntDown+0x98>)
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	695a      	ldr	r2, [r3, #20]
 8018c22:	683b      	ldr	r3, [r7, #0]
 8018c24:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8018c26:	4b10      	ldr	r3, [pc, #64]	; (8018c68 <GetLastFcntDown+0x98>)
 8018c28:	681a      	ldr	r2, [r3, #0]
 8018c2a:	4b0f      	ldr	r3, [pc, #60]	; (8018c68 <GetLastFcntDown+0x98>)
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	6952      	ldr	r2, [r2, #20]
 8018c30:	621a      	str	r2, [r3, #32]
            break;
 8018c32:	e013      	b.n	8018c5c <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8018c34:	4b0c      	ldr	r3, [pc, #48]	; (8018c68 <GetLastFcntDown+0x98>)
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	699a      	ldr	r2, [r3, #24]
 8018c3a:	683b      	ldr	r3, [r7, #0]
 8018c3c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8018c3e:	4b0a      	ldr	r3, [pc, #40]	; (8018c68 <GetLastFcntDown+0x98>)
 8018c40:	681a      	ldr	r2, [r3, #0]
 8018c42:	4b09      	ldr	r3, [pc, #36]	; (8018c68 <GetLastFcntDown+0x98>)
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	6992      	ldr	r2, [r2, #24]
 8018c48:	621a      	str	r2, [r3, #32]
            break;
 8018c4a:	e007      	b.n	8018c5c <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8018c4c:	4b06      	ldr	r3, [pc, #24]	; (8018c68 <GetLastFcntDown+0x98>)
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	69da      	ldr	r2, [r3, #28]
 8018c52:	683b      	ldr	r3, [r7, #0]
 8018c54:	601a      	str	r2, [r3, #0]
            break;
 8018c56:	e001      	b.n	8018c5c <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8018c58:	2305      	movs	r3, #5
 8018c5a:	e000      	b.n	8018c5e <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8018c5c:	2300      	movs	r3, #0
}
 8018c5e:	4618      	mov	r0, r3
 8018c60:	370c      	adds	r7, #12
 8018c62:	46bd      	mov	sp, r7
 8018c64:	bc80      	pop	{r7}
 8018c66:	4770      	bx	lr
 8018c68:	2000239c 	.word	0x2000239c

08018c6c <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	b084      	sub	sp, #16
 8018c70:	af00      	add	r7, sp, #0
 8018c72:	4603      	mov	r3, r0
 8018c74:	6039      	str	r1, [r7, #0]
 8018c76:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8018c78:	2300      	movs	r3, #0
 8018c7a:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8018c7c:	f107 020c 	add.w	r2, r7, #12
 8018c80:	79fb      	ldrb	r3, [r7, #7]
 8018c82:	4611      	mov	r1, r2
 8018c84:	4618      	mov	r0, r3
 8018c86:	f7ff ffa3 	bl	8018bd0 <GetLastFcntDown>
 8018c8a:	4603      	mov	r3, r0
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d001      	beq.n	8018c94 <CheckFCntDown+0x28>
    {
        return false;
 8018c90:	2300      	movs	r3, #0
 8018c92:	e00a      	b.n	8018caa <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8018c94:	68fb      	ldr	r3, [r7, #12]
 8018c96:	683a      	ldr	r2, [r7, #0]
 8018c98:	429a      	cmp	r2, r3
 8018c9a:	d803      	bhi.n	8018ca4 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8018c9c:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8018c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ca2:	d101      	bne.n	8018ca8 <CheckFCntDown+0x3c>
    {
        return true;
 8018ca4:	2301      	movs	r3, #1
 8018ca6:	e000      	b.n	8018caa <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8018ca8:	2300      	movs	r3, #0
    }
}
 8018caa:	4618      	mov	r0, r3
 8018cac:	3710      	adds	r7, #16
 8018cae:	46bd      	mov	sp, r7
 8018cb0:	bd80      	pop	{r7, pc}
	...

08018cb4 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8018cb4:	b480      	push	{r7}
 8018cb6:	b083      	sub	sp, #12
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	4603      	mov	r3, r0
 8018cbc:	6039      	str	r1, [r7, #0]
 8018cbe:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8018cc0:	79fb      	ldrb	r3, [r7, #7]
 8018cc2:	3b01      	subs	r3, #1
 8018cc4:	2b03      	cmp	r3, #3
 8018cc6:	d81f      	bhi.n	8018d08 <UpdateFCntDown+0x54>
 8018cc8:	a201      	add	r2, pc, #4	; (adr r2, 8018cd0 <UpdateFCntDown+0x1c>)
 8018cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018cce:	bf00      	nop
 8018cd0:	08018ce1 	.word	0x08018ce1
 8018cd4:	08018ceb 	.word	0x08018ceb
 8018cd8:	08018cf5 	.word	0x08018cf5
 8018cdc:	08018cff 	.word	0x08018cff
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8018ce0:	4b0c      	ldr	r3, [pc, #48]	; (8018d14 <UpdateFCntDown+0x60>)
 8018ce2:	681b      	ldr	r3, [r3, #0]
 8018ce4:	683a      	ldr	r2, [r7, #0]
 8018ce6:	611a      	str	r2, [r3, #16]
            break;
 8018ce8:	e00f      	b.n	8018d0a <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8018cea:	4b0a      	ldr	r3, [pc, #40]	; (8018d14 <UpdateFCntDown+0x60>)
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	683a      	ldr	r2, [r7, #0]
 8018cf0:	615a      	str	r2, [r3, #20]
            break;
 8018cf2:	e00a      	b.n	8018d0a <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8018cf4:	4b07      	ldr	r3, [pc, #28]	; (8018d14 <UpdateFCntDown+0x60>)
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	683a      	ldr	r2, [r7, #0]
 8018cfa:	619a      	str	r2, [r3, #24]
            break;
 8018cfc:	e005      	b.n	8018d0a <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8018cfe:	4b05      	ldr	r3, [pc, #20]	; (8018d14 <UpdateFCntDown+0x60>)
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	683a      	ldr	r2, [r7, #0]
 8018d04:	61da      	str	r2, [r3, #28]
            break;
 8018d06:	e000      	b.n	8018d0a <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8018d08:	bf00      	nop
    }
}
 8018d0a:	bf00      	nop
 8018d0c:	370c      	adds	r7, #12
 8018d0e:	46bd      	mov	sp, r7
 8018d10:	bc80      	pop	{r7}
 8018d12:	4770      	bx	lr
 8018d14:	2000239c 	.word	0x2000239c

08018d18 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8018d18:	b480      	push	{r7}
 8018d1a:	b083      	sub	sp, #12
 8018d1c:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8018d1e:	4b18      	ldr	r3, [pc, #96]	; (8018d80 <ResetFCnts+0x68>)
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	2200      	movs	r2, #0
 8018d24:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8018d26:	4b16      	ldr	r3, [pc, #88]	; (8018d80 <ResetFCnts+0x68>)
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8018d2e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8018d30:	4b13      	ldr	r3, [pc, #76]	; (8018d80 <ResetFCnts+0x68>)
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	f04f 32ff 	mov.w	r2, #4294967295
 8018d38:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8018d3a:	4b11      	ldr	r3, [pc, #68]	; (8018d80 <ResetFCnts+0x68>)
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8018d42:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8018d44:	4b0e      	ldr	r3, [pc, #56]	; (8018d80 <ResetFCnts+0x68>)
 8018d46:	681a      	ldr	r2, [r3, #0]
 8018d48:	4b0d      	ldr	r3, [pc, #52]	; (8018d80 <ResetFCnts+0x68>)
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	6992      	ldr	r2, [r2, #24]
 8018d4e:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8018d50:	2300      	movs	r3, #0
 8018d52:	607b      	str	r3, [r7, #4]
 8018d54:	e00b      	b.n	8018d6e <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8018d56:	4b0a      	ldr	r3, [pc, #40]	; (8018d80 <ResetFCnts+0x68>)
 8018d58:	681a      	ldr	r2, [r3, #0]
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	3306      	adds	r3, #6
 8018d5e:	009b      	lsls	r3, r3, #2
 8018d60:	4413      	add	r3, r2
 8018d62:	f04f 32ff 	mov.w	r2, #4294967295
 8018d66:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	3301      	adds	r3, #1
 8018d6c:	607b      	str	r3, [r7, #4]
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	ddf0      	ble.n	8018d56 <ResetFCnts+0x3e>
    }
}
 8018d74:	bf00      	nop
 8018d76:	bf00      	nop
 8018d78:	370c      	adds	r7, #12
 8018d7a:	46bd      	mov	sp, r7
 8018d7c:	bc80      	pop	{r7}
 8018d7e:	4770      	bx	lr
 8018d80:	2000239c 	.word	0x2000239c

08018d84 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8018d84:	b580      	push	{r7, lr}
 8018d86:	b082      	sub	sp, #8
 8018d88:	af00      	add	r7, sp, #0
 8018d8a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d101      	bne.n	8018d96 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8018d92:	2309      	movs	r3, #9
 8018d94:	e01c      	b.n	8018dd0 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8018d96:	4a10      	ldr	r2, [pc, #64]	; (8018dd8 <LoRaMacCryptoInit+0x54>)
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8018d9c:	4b0e      	ldr	r3, [pc, #56]	; (8018dd8 <LoRaMacCryptoInit+0x54>)
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	2228      	movs	r2, #40	; 0x28
 8018da2:	2100      	movs	r1, #0
 8018da4:	4618      	mov	r0, r3
 8018da6:	f003 fab5 	bl	801c314 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8018daa:	4b0b      	ldr	r3, [pc, #44]	; (8018dd8 <LoRaMacCryptoInit+0x54>)
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	2201      	movs	r2, #1
 8018db0:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8018db2:	4b09      	ldr	r3, [pc, #36]	; (8018dd8 <LoRaMacCryptoInit+0x54>)
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	2201      	movs	r2, #1
 8018db8:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8018dba:	4b07      	ldr	r3, [pc, #28]	; (8018dd8 <LoRaMacCryptoInit+0x54>)
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	2201      	movs	r2, #1
 8018dc0:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8018dc2:	4b05      	ldr	r3, [pc, #20]	; (8018dd8 <LoRaMacCryptoInit+0x54>)
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	2200      	movs	r2, #0
 8018dc8:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8018dca:	f7ff ffa5 	bl	8018d18 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8018dce:	2300      	movs	r3, #0
}
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	3708      	adds	r7, #8
 8018dd4:	46bd      	mov	sp, r7
 8018dd6:	bd80      	pop	{r7, pc}
 8018dd8:	2000239c 	.word	0x2000239c

08018ddc <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8018ddc:	b480      	push	{r7}
 8018dde:	b083      	sub	sp, #12
 8018de0:	af00      	add	r7, sp, #0
 8018de2:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8018de4:	4b04      	ldr	r3, [pc, #16]	; (8018df8 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	687a      	ldr	r2, [r7, #4]
 8018dea:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8018dec:	2300      	movs	r3, #0
}
 8018dee:	4618      	mov	r0, r3
 8018df0:	370c      	adds	r7, #12
 8018df2:	46bd      	mov	sp, r7
 8018df4:	bc80      	pop	{r7}
 8018df6:	4770      	bx	lr
 8018df8:	2000239c 	.word	0x2000239c

08018dfc <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8018dfc:	b480      	push	{r7}
 8018dfe:	b083      	sub	sp, #12
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d101      	bne.n	8018e0e <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018e0a:	230a      	movs	r3, #10
 8018e0c:	e006      	b.n	8018e1c <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8018e0e:	4b06      	ldr	r3, [pc, #24]	; (8018e28 <LoRaMacCryptoGetFCntUp+0x2c>)
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	68db      	ldr	r3, [r3, #12]
 8018e14:	1c5a      	adds	r2, r3, #1
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8018e1a:	2300      	movs	r3, #0
}
 8018e1c:	4618      	mov	r0, r3
 8018e1e:	370c      	adds	r7, #12
 8018e20:	46bd      	mov	sp, r7
 8018e22:	bc80      	pop	{r7}
 8018e24:	4770      	bx	lr
 8018e26:	bf00      	nop
 8018e28:	2000239c 	.word	0x2000239c

08018e2c <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8018e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018e30:	b08a      	sub	sp, #40	; 0x28
 8018e32:	af00      	add	r7, sp, #0
 8018e34:	613a      	str	r2, [r7, #16]
 8018e36:	60fb      	str	r3, [r7, #12]
 8018e38:	4603      	mov	r3, r0
 8018e3a:	75fb      	strb	r3, [r7, #23]
 8018e3c:	460b      	mov	r3, r1
 8018e3e:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8018e40:	2300      	movs	r3, #0
 8018e42:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8018e44:	2300      	movs	r3, #0
 8018e46:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8018e48:	2313      	movs	r3, #19
 8018e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d101      	bne.n	8018e58 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018e54:	230a      	movs	r3, #10
 8018e56:	e057      	b.n	8018f08 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8018e58:	f107 021c 	add.w	r2, r7, #28
 8018e5c:	7dfb      	ldrb	r3, [r7, #23]
 8018e5e:	4611      	mov	r1, r2
 8018e60:	4618      	mov	r0, r3
 8018e62:	f7ff feb5 	bl	8018bd0 <GetLastFcntDown>
 8018e66:	4603      	mov	r3, r0
 8018e68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8018e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d002      	beq.n	8018e7a <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8018e74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018e78:	e046      	b.n	8018f08 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8018e7a:	69fb      	ldr	r3, [r7, #28]
 8018e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e80:	d103      	bne.n	8018e8a <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	693a      	ldr	r2, [r7, #16]
 8018e86:	601a      	str	r2, [r3, #0]
 8018e88:	e01e      	b.n	8018ec8 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8018e8a:	69fb      	ldr	r3, [r7, #28]
 8018e8c:	b29b      	uxth	r3, r3
 8018e8e:	693a      	ldr	r2, [r7, #16]
 8018e90:	1ad3      	subs	r3, r2, r3
 8018e92:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 8018e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	dd05      	ble.n	8018ea6 <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8018e9a:	69fa      	ldr	r2, [r7, #28]
 8018e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e9e:	441a      	add	r2, r3
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	601a      	str	r2, [r3, #0]
 8018ea4:	e010      	b.n	8018ec8 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8018ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d104      	bne.n	8018eb6 <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8018eac:	69fa      	ldr	r2, [r7, #28]
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8018eb2:	2307      	movs	r3, #7
 8018eb4:	e028      	b.n	8018f08 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8018eb6:	69fb      	ldr	r3, [r7, #28]
 8018eb8:	0c1b      	lsrs	r3, r3, #16
 8018eba:	041b      	lsls	r3, r3, #16
 8018ebc:	693a      	ldr	r2, [r7, #16]
 8018ebe:	4413      	add	r3, r2
 8018ec0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8018ec8:	4b12      	ldr	r3, [pc, #72]	; (8018f14 <LoRaMacCryptoGetFCntDown+0xe8>)
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	789b      	ldrb	r3, [r3, #2]
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d119      	bne.n	8018f06 <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8018ed2:	68fb      	ldr	r3, [r7, #12]
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	2200      	movs	r2, #0
 8018ed8:	603b      	str	r3, [r7, #0]
 8018eda:	607a      	str	r2, [r7, #4]
 8018edc:	69fb      	ldr	r3, [r7, #28]
 8018ede:	2200      	movs	r2, #0
 8018ee0:	469a      	mov	sl, r3
 8018ee2:	4693      	mov	fp, r2
 8018ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018ee8:	4611      	mov	r1, r2
 8018eea:	ebb1 040a 	subs.w	r4, r1, sl
 8018eee:	eb63 050b 	sbc.w	r5, r3, fp
 8018ef2:	8abb      	ldrh	r3, [r7, #20]
 8018ef4:	2200      	movs	r2, #0
 8018ef6:	4698      	mov	r8, r3
 8018ef8:	4691      	mov	r9, r2
 8018efa:	4544      	cmp	r4, r8
 8018efc:	eb75 0309 	sbcs.w	r3, r5, r9
 8018f00:	db01      	blt.n	8018f06 <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8018f02:	2308      	movs	r3, #8
 8018f04:	e000      	b.n	8018f08 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8018f06:	2300      	movs	r3, #0
}
 8018f08:	4618      	mov	r0, r3
 8018f0a:	3728      	adds	r7, #40	; 0x28
 8018f0c:	46bd      	mov	sp, r7
 8018f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018f12:	bf00      	nop
 8018f14:	2000239c 	.word	0x2000239c

08018f18 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8018f18:	b480      	push	{r7}
 8018f1a:	b085      	sub	sp, #20
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d101      	bne.n	8018f2a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018f26:	230a      	movs	r3, #10
 8018f28:	e017      	b.n	8018f5a <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8018f2a:	2300      	movs	r3, #0
 8018f2c:	60fb      	str	r3, [r7, #12]
 8018f2e:	e010      	b.n	8018f52 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8018f30:	4b0c      	ldr	r3, [pc, #48]	; (8018f64 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8018f32:	6819      	ldr	r1, [r3, #0]
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	222c      	movs	r2, #44	; 0x2c
 8018f38:	fb02 f303 	mul.w	r3, r2, r3
 8018f3c:	687a      	ldr	r2, [r7, #4]
 8018f3e:	4413      	add	r3, r2
 8018f40:	68fa      	ldr	r2, [r7, #12]
 8018f42:	3206      	adds	r2, #6
 8018f44:	0092      	lsls	r2, r2, #2
 8018f46:	440a      	add	r2, r1
 8018f48:	3204      	adds	r2, #4
 8018f4a:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	3301      	adds	r3, #1
 8018f50:	60fb      	str	r3, [r7, #12]
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	ddeb      	ble.n	8018f30 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8018f58:	2300      	movs	r3, #0
}
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	3714      	adds	r7, #20
 8018f5e:	46bd      	mov	sp, r7
 8018f60:	bc80      	pop	{r7}
 8018f62:	4770      	bx	lr
 8018f64:	2000239c 	.word	0x2000239c

08018f68 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8018f68:	b580      	push	{r7, lr}
 8018f6a:	b082      	sub	sp, #8
 8018f6c:	af00      	add	r7, sp, #0
 8018f6e:	4603      	mov	r3, r0
 8018f70:	6039      	str	r1, [r7, #0]
 8018f72:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8018f74:	79fb      	ldrb	r3, [r7, #7]
 8018f76:	6839      	ldr	r1, [r7, #0]
 8018f78:	4618      	mov	r0, r3
 8018f7a:	f7f6 fcfb 	bl	800f974 <SecureElementSetKey>
 8018f7e:	4603      	mov	r3, r0
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d001      	beq.n	8018f88 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018f84:	230f      	movs	r3, #15
 8018f86:	e018      	b.n	8018fba <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8018f88:	79fb      	ldrb	r3, [r7, #7]
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d114      	bne.n	8018fb8 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8018f8e:	4b0d      	ldr	r3, [pc, #52]	; (8018fc4 <LoRaMacCryptoSetKey+0x5c>)
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	789b      	ldrb	r3, [r3, #2]
 8018f94:	79fa      	ldrb	r2, [r7, #7]
 8018f96:	4611      	mov	r1, r2
 8018f98:	4618      	mov	r0, r3
 8018f9a:	f000 fa3f 	bl	801941c <LoRaMacCryptoDeriveMcRootKey>
 8018f9e:	4603      	mov	r3, r0
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d001      	beq.n	8018fa8 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018fa4:	230f      	movs	r3, #15
 8018fa6:	e008      	b.n	8018fba <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8018fa8:	2004      	movs	r0, #4
 8018faa:	f000 fa62 	bl	8019472 <LoRaMacCryptoDeriveMcKEKey>
 8018fae:	4603      	mov	r3, r0
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d001      	beq.n	8018fb8 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018fb4:	230f      	movs	r3, #15
 8018fb6:	e000      	b.n	8018fba <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8018fb8:	2300      	movs	r3, #0
}
 8018fba:	4618      	mov	r0, r3
 8018fbc:	3708      	adds	r7, #8
 8018fbe:	46bd      	mov	sp, r7
 8018fc0:	bd80      	pop	{r7, pc}
 8018fc2:	bf00      	nop
 8018fc4:	2000239c 	.word	0x2000239c

08018fc8 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8018fc8:	b580      	push	{r7, lr}
 8018fca:	b086      	sub	sp, #24
 8018fcc:	af02      	add	r7, sp, #8
 8018fce:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d101      	bne.n	8018fda <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018fd6:	230a      	movs	r3, #10
 8018fd8:	e033      	b.n	8019042 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8018fda:	2301      	movs	r3, #1
 8018fdc:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8018fde:	2300      	movs	r3, #0
 8018fe0:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8018fe2:	f107 0308 	add.w	r3, r7, #8
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	f7f6 fe94 	bl	800fd14 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8018fec:	68ba      	ldr	r2, [r7, #8]
 8018fee:	4b17      	ldr	r3, [pc, #92]	; (801904c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	b292      	uxth	r2, r2
 8018ff4:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8018ff6:	4b15      	ldr	r3, [pc, #84]	; (801904c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	889a      	ldrh	r2, [r3, #4]
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8019000:	6878      	ldr	r0, [r7, #4]
 8019002:	f000 fc18 	bl	8019836 <LoRaMacSerializerJoinRequest>
 8019006:	4603      	mov	r3, r0
 8019008:	2b00      	cmp	r3, #0
 801900a:	d001      	beq.n	8019010 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801900c:	2311      	movs	r3, #17
 801900e:	e018      	b.n	8019042 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	6819      	ldr	r1, [r3, #0]
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	3318      	adds	r3, #24
 8019018:	7bfa      	ldrb	r2, [r7, #15]
 801901a:	9300      	str	r3, [sp, #0]
 801901c:	4613      	mov	r3, r2
 801901e:	2213      	movs	r2, #19
 8019020:	2000      	movs	r0, #0
 8019022:	f7f6 fd05 	bl	800fa30 <SecureElementComputeAesCmac>
 8019026:	4603      	mov	r3, r0
 8019028:	2b00      	cmp	r3, #0
 801902a:	d001      	beq.n	8019030 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801902c:	230f      	movs	r3, #15
 801902e:	e008      	b.n	8019042 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8019030:	6878      	ldr	r0, [r7, #4]
 8019032:	f000 fc00 	bl	8019836 <LoRaMacSerializerJoinRequest>
 8019036:	4603      	mov	r3, r0
 8019038:	2b00      	cmp	r3, #0
 801903a:	d001      	beq.n	8019040 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801903c:	2311      	movs	r3, #17
 801903e:	e000      	b.n	8019042 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8019040:	2300      	movs	r3, #0
}
 8019042:	4618      	mov	r0, r3
 8019044:	3710      	adds	r7, #16
 8019046:	46bd      	mov	sp, r7
 8019048:	bd80      	pop	{r7, pc}
 801904a:	bf00      	nop
 801904c:	2000239c 	.word	0x2000239c

08019050 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8019050:	b590      	push	{r4, r7, lr}
 8019052:	b097      	sub	sp, #92	; 0x5c
 8019054:	af04      	add	r7, sp, #16
 8019056:	4603      	mov	r3, r0
 8019058:	60b9      	str	r1, [r7, #8]
 801905a:	607a      	str	r2, [r7, #4]
 801905c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	2b00      	cmp	r3, #0
 8019062:	d002      	beq.n	801906a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8019064:	68bb      	ldr	r3, [r7, #8]
 8019066:	2b00      	cmp	r3, #0
 8019068:	d101      	bne.n	801906e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801906a:	230a      	movs	r3, #10
 801906c:	e0bd      	b.n	80191ea <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801906e:	2313      	movs	r3, #19
 8019070:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8019074:	2300      	movs	r3, #0
 8019076:	61bb      	str	r3, [r7, #24]
 8019078:	f107 031c 	add.w	r3, r7, #28
 801907c:	221d      	movs	r2, #29
 801907e:	2100      	movs	r1, #0
 8019080:	4618      	mov	r0, r3
 8019082:	f007 fefd 	bl	8020e80 <memset>
    uint8_t versionMinor         = 0;
 8019086:	2300      	movs	r3, #0
 8019088:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801908a:	4b5a      	ldr	r3, [pc, #360]	; (80191f4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	889b      	ldrh	r3, [r3, #4]
 8019090:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	681c      	ldr	r4, [r3, #0]
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	791b      	ldrb	r3, [r3, #4]
 801909c:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80190a0:	7bf8      	ldrb	r0, [r7, #15]
 80190a2:	f107 0217 	add.w	r2, r7, #23
 80190a6:	9202      	str	r2, [sp, #8]
 80190a8:	f107 0218 	add.w	r2, r7, #24
 80190ac:	9201      	str	r2, [sp, #4]
 80190ae:	9300      	str	r3, [sp, #0]
 80190b0:	4623      	mov	r3, r4
 80190b2:	460a      	mov	r2, r1
 80190b4:	68b9      	ldr	r1, [r7, #8]
 80190b6:	f7f6 fdaf 	bl	800fc18 <SecureElementProcessJoinAccept>
 80190ba:	4603      	mov	r3, r0
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d001      	beq.n	80190c4 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80190c0:	230f      	movs	r3, #15
 80190c2:	e092      	b.n	80191ea <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	6818      	ldr	r0, [r3, #0]
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	791b      	ldrb	r3, [r3, #4]
 80190cc:	b29a      	uxth	r2, r3
 80190ce:	f107 0318 	add.w	r3, r7, #24
 80190d2:	4619      	mov	r1, r3
 80190d4:	f003 f8e3 	bl	801c29e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80190d8:	6878      	ldr	r0, [r7, #4]
 80190da:	f000 f9ed 	bl	80194b8 <LoRaMacParserJoinAccept>
 80190de:	4603      	mov	r3, r0
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d001      	beq.n	80190e8 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80190e4:	2310      	movs	r3, #16
 80190e6:	e080      	b.n	80191ea <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	799b      	ldrb	r3, [r3, #6]
 80190ec:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	79db      	ldrb	r3, [r3, #7]
 80190f2:	021b      	lsls	r3, r3, #8
 80190f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80190f6:	4313      	orrs	r3, r2
 80190f8:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	7a1b      	ldrb	r3, [r3, #8]
 80190fe:	041b      	lsls	r3, r3, #16
 8019100:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019102:	4313      	orrs	r3, r2
 8019104:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8019106:	4b3b      	ldr	r3, [pc, #236]	; (80191f4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	689b      	ldr	r3, [r3, #8]
 801910c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801910e:	429a      	cmp	r2, r3
 8019110:	d010      	beq.n	8019134 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8019112:	4b38      	ldr	r3, [pc, #224]	; (80191f4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8019114:	681b      	ldr	r3, [r3, #0]
 8019116:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019118:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 801911a:	7dfb      	ldrb	r3, [r7, #23]
 801911c:	2100      	movs	r1, #0
 801911e:	4618      	mov	r0, r3
 8019120:	f000 f97c 	bl	801941c <LoRaMacCryptoDeriveMcRootKey>
 8019124:	4603      	mov	r3, r0
 8019126:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801912a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801912e:	2b00      	cmp	r3, #0
 8019130:	d005      	beq.n	801913e <LoRaMacCryptoHandleJoinAccept+0xee>
 8019132:	e001      	b.n	8019138 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8019134:	2303      	movs	r3, #3
 8019136:	e058      	b.n	80191ea <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8019138:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801913c:	e055      	b.n	80191ea <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 801913e:	2004      	movs	r0, #4
 8019140:	f000 f997 	bl	8019472 <LoRaMacCryptoDeriveMcKEKey>
 8019144:	4603      	mov	r3, r0
 8019146:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801914a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801914e:	2b00      	cmp	r3, #0
 8019150:	d002      	beq.n	8019158 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8019152:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019156:	e048      	b.n	80191ea <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	7a5b      	ldrb	r3, [r3, #9]
 801915c:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	7a9b      	ldrb	r3, [r3, #10]
 8019162:	021b      	lsls	r3, r3, #8
 8019164:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019166:	4313      	orrs	r3, r2
 8019168:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	7adb      	ldrb	r3, [r3, #11]
 801916e:	041b      	lsls	r3, r3, #16
 8019170:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019172:	4313      	orrs	r3, r2
 8019174:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8019176:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801917a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801917c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801917e:	2003      	movs	r0, #3
 8019180:	f7ff fcd6 	bl	8018b30 <DeriveSessionKey10x>
 8019184:	4603      	mov	r3, r0
 8019186:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801918a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801918e:	2b00      	cmp	r3, #0
 8019190:	d002      	beq.n	8019198 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8019192:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019196:	e028      	b.n	80191ea <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8019198:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801919c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801919e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80191a0:	2002      	movs	r0, #2
 80191a2:	f7ff fcc5 	bl	8018b30 <DeriveSessionKey10x>
 80191a6:	4603      	mov	r3, r0
 80191a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80191ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d002      	beq.n	80191ba <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 80191b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80191b8:	e017      	b.n	80191ea <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80191ba:	4b0e      	ldr	r3, [pc, #56]	; (80191f4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	7dfa      	ldrb	r2, [r7, #23]
 80191c0:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 80191c2:	4b0c      	ldr	r3, [pc, #48]	; (80191f4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	2200      	movs	r2, #0
 80191c8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80191ca:	4b0a      	ldr	r3, [pc, #40]	; (80191f4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	f04f 32ff 	mov.w	r2, #4294967295
 80191d2:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80191d4:	4b07      	ldr	r3, [pc, #28]	; (80191f4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80191d6:	681b      	ldr	r3, [r3, #0]
 80191d8:	f04f 32ff 	mov.w	r2, #4294967295
 80191dc:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80191de:	4b05      	ldr	r3, [pc, #20]	; (80191f4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	f04f 32ff 	mov.w	r2, #4294967295
 80191e6:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80191e8:	2300      	movs	r3, #0
}
 80191ea:	4618      	mov	r0, r3
 80191ec:	374c      	adds	r7, #76	; 0x4c
 80191ee:	46bd      	mov	sp, r7
 80191f0:	bd90      	pop	{r4, r7, pc}
 80191f2:	bf00      	nop
 80191f4:	2000239c 	.word	0x2000239c

080191f8 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80191f8:	b590      	push	{r4, r7, lr}
 80191fa:	b08b      	sub	sp, #44	; 0x2c
 80191fc:	af04      	add	r7, sp, #16
 80191fe:	60f8      	str	r0, [r7, #12]
 8019200:	607b      	str	r3, [r7, #4]
 8019202:	460b      	mov	r3, r1
 8019204:	72fb      	strb	r3, [r7, #11]
 8019206:	4613      	mov	r3, r2
 8019208:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801920a:	2313      	movs	r3, #19
 801920c:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801920e:	2303      	movs	r3, #3
 8019210:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	2b00      	cmp	r3, #0
 8019216:	d101      	bne.n	801921c <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8019218:	230a      	movs	r3, #10
 801921a:	e05f      	b.n	80192dc <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 801921c:	4b31      	ldr	r3, [pc, #196]	; (80192e4 <LoRaMacCryptoSecureMessage+0xec>)
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	68db      	ldr	r3, [r3, #12]
 8019222:	68fa      	ldr	r2, [r7, #12]
 8019224:	429a      	cmp	r2, r3
 8019226:	d201      	bcs.n	801922c <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8019228:	2306      	movs	r3, #6
 801922a:	e057      	b.n	80192dc <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019232:	2b00      	cmp	r3, #0
 8019234:	d101      	bne.n	801923a <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8019236:	2302      	movs	r3, #2
 8019238:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 801923a:	4b2a      	ldr	r3, [pc, #168]	; (80192e4 <LoRaMacCryptoSecureMessage+0xec>)
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	68db      	ldr	r3, [r3, #12]
 8019240:	68fa      	ldr	r2, [r7, #12]
 8019242:	429a      	cmp	r2, r3
 8019244:	d916      	bls.n	8019274 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019250:	b219      	sxth	r1, r3
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	689c      	ldr	r4, [r3, #8]
 8019256:	7dfa      	ldrb	r2, [r7, #23]
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	9301      	str	r3, [sp, #4]
 801925c:	2300      	movs	r3, #0
 801925e:	9300      	str	r3, [sp, #0]
 8019260:	4623      	mov	r3, r4
 8019262:	f7ff fa71 	bl	8018748 <PayloadEncrypt>
 8019266:	4603      	mov	r3, r0
 8019268:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801926a:	7dbb      	ldrb	r3, [r7, #22]
 801926c:	2b00      	cmp	r3, #0
 801926e:	d001      	beq.n	8019274 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8019270:	7dbb      	ldrb	r3, [r7, #22]
 8019272:	e033      	b.n	80192dc <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8019274:	6878      	ldr	r0, [r7, #4]
 8019276:	f000 fb60 	bl	801993a <LoRaMacSerializerData>
 801927a:	4603      	mov	r3, r0
 801927c:	2b00      	cmp	r3, #0
 801927e:	d001      	beq.n	8019284 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8019280:	2311      	movs	r3, #17
 8019282:	e02b      	b.n	80192dc <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8019284:	2302      	movs	r3, #2
 8019286:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	6818      	ldr	r0, [r3, #0]
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	791b      	ldrb	r3, [r3, #4]
 8019290:	b29b      	uxth	r3, r3
 8019292:	3b04      	subs	r3, #4
 8019294:	b299      	uxth	r1, r3
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	689b      	ldr	r3, [r3, #8]
 801929a:	687a      	ldr	r2, [r7, #4]
 801929c:	322c      	adds	r2, #44	; 0x2c
 801929e:	7dfc      	ldrb	r4, [r7, #23]
 80192a0:	9203      	str	r2, [sp, #12]
 80192a2:	68fa      	ldr	r2, [r7, #12]
 80192a4:	9202      	str	r2, [sp, #8]
 80192a6:	9301      	str	r3, [sp, #4]
 80192a8:	2300      	movs	r3, #0
 80192aa:	9300      	str	r3, [sp, #0]
 80192ac:	2300      	movs	r3, #0
 80192ae:	4622      	mov	r2, r4
 80192b0:	f7ff fb4b 	bl	801894a <ComputeCmacB0>
 80192b4:	4603      	mov	r3, r0
 80192b6:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80192b8:	7dbb      	ldrb	r3, [r7, #22]
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	d001      	beq.n	80192c2 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 80192be:	7dbb      	ldrb	r3, [r7, #22]
 80192c0:	e00c      	b.n	80192dc <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80192c2:	6878      	ldr	r0, [r7, #4]
 80192c4:	f000 fb39 	bl	801993a <LoRaMacSerializerData>
 80192c8:	4603      	mov	r3, r0
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d001      	beq.n	80192d2 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80192ce:	2311      	movs	r3, #17
 80192d0:	e004      	b.n	80192dc <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80192d2:	4b04      	ldr	r3, [pc, #16]	; (80192e4 <LoRaMacCryptoSecureMessage+0xec>)
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	68fa      	ldr	r2, [r7, #12]
 80192d8:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80192da:	2300      	movs	r3, #0
}
 80192dc:	4618      	mov	r0, r3
 80192de:	371c      	adds	r7, #28
 80192e0:	46bd      	mov	sp, r7
 80192e2:	bd90      	pop	{r4, r7, pc}
 80192e4:	2000239c 	.word	0x2000239c

080192e8 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80192e8:	b590      	push	{r4, r7, lr}
 80192ea:	b08b      	sub	sp, #44	; 0x2c
 80192ec:	af04      	add	r7, sp, #16
 80192ee:	60b9      	str	r1, [r7, #8]
 80192f0:	607b      	str	r3, [r7, #4]
 80192f2:	4603      	mov	r3, r0
 80192f4:	73fb      	strb	r3, [r7, #15]
 80192f6:	4613      	mov	r3, r2
 80192f8:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80192fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d101      	bne.n	8019304 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8019300:	230a      	movs	r3, #10
 8019302:	e084      	b.n	801940e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8019304:	7bbb      	ldrb	r3, [r7, #14]
 8019306:	6879      	ldr	r1, [r7, #4]
 8019308:	4618      	mov	r0, r3
 801930a:	f7ff fcaf 	bl	8018c6c <CheckFCntDown>
 801930e:	4603      	mov	r3, r0
 8019310:	f083 0301 	eor.w	r3, r3, #1
 8019314:	b2db      	uxtb	r3, r3
 8019316:	2b00      	cmp	r3, #0
 8019318:	d001      	beq.n	801931e <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801931a:	2306      	movs	r3, #6
 801931c:	e077      	b.n	801940e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801931e:	2313      	movs	r3, #19
 8019320:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8019322:	2303      	movs	r3, #3
 8019324:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8019326:	2302      	movs	r3, #2
 8019328:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801932a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801932c:	f000 f98f 	bl	801964e <LoRaMacParserData>
 8019330:	4603      	mov	r3, r0
 8019332:	2b00      	cmp	r3, #0
 8019334:	d001      	beq.n	801933a <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8019336:	2310      	movs	r3, #16
 8019338:	e069      	b.n	801940e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 801933a:	f107 0210 	add.w	r2, r7, #16
 801933e:	7bfb      	ldrb	r3, [r7, #15]
 8019340:	4611      	mov	r1, r2
 8019342:	4618      	mov	r0, r3
 8019344:	f7ff fbce 	bl	8018ae4 <GetKeyAddrItem>
 8019348:	4603      	mov	r3, r0
 801934a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801934c:	7d7b      	ldrb	r3, [r7, #21]
 801934e:	2b00      	cmp	r3, #0
 8019350:	d001      	beq.n	8019356 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8019352:	7d7b      	ldrb	r3, [r7, #21]
 8019354:	e05b      	b.n	801940e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8019356:	693b      	ldr	r3, [r7, #16]
 8019358:	785b      	ldrb	r3, [r3, #1]
 801935a:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 801935c:	693b      	ldr	r3, [r7, #16]
 801935e:	789b      	ldrb	r3, [r3, #2]
 8019360:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8019362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019364:	689b      	ldr	r3, [r3, #8]
 8019366:	68ba      	ldr	r2, [r7, #8]
 8019368:	429a      	cmp	r2, r3
 801936a:	d001      	beq.n	8019370 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 801936c:	2302      	movs	r3, #2
 801936e:	e04e      	b.n	801940e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8019370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019372:	7b1b      	ldrb	r3, [r3, #12]
 8019374:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8019378:	b2db      	uxtb	r3, r3
 801937a:	2b00      	cmp	r3, #0
 801937c:	bf14      	ite	ne
 801937e:	2301      	movne	r3, #1
 8019380:	2300      	moveq	r3, #0
 8019382:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8019384:	4b24      	ldr	r3, [pc, #144]	; (8019418 <LoRaMacCryptoUnsecureMessage+0x130>)
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	789b      	ldrb	r3, [r3, #2]
 801938a:	2b00      	cmp	r3, #0
 801938c:	d101      	bne.n	8019392 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801938e:	2300      	movs	r3, #0
 8019390:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8019392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019394:	6818      	ldr	r0, [r3, #0]
 8019396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019398:	791b      	ldrb	r3, [r3, #4]
 801939a:	b29b      	uxth	r3, r3
 801939c:	3b04      	subs	r3, #4
 801939e:	b299      	uxth	r1, r3
 80193a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80193a4:	7dbc      	ldrb	r4, [r7, #22]
 80193a6:	7d3a      	ldrb	r2, [r7, #20]
 80193a8:	9303      	str	r3, [sp, #12]
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	9302      	str	r3, [sp, #8]
 80193ae:	68bb      	ldr	r3, [r7, #8]
 80193b0:	9301      	str	r3, [sp, #4]
 80193b2:	2301      	movs	r3, #1
 80193b4:	9300      	str	r3, [sp, #0]
 80193b6:	4623      	mov	r3, r4
 80193b8:	f7ff fb05 	bl	80189c6 <VerifyCmacB0>
 80193bc:	4603      	mov	r3, r0
 80193be:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80193c0:	7d7b      	ldrb	r3, [r7, #21]
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d001      	beq.n	80193ca <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 80193c6:	7d7b      	ldrb	r3, [r7, #21]
 80193c8:	e021      	b.n	801940e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80193ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d101      	bne.n	80193d8 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80193d4:	2302      	movs	r3, #2
 80193d6:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80193d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193da:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80193dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80193e2:	b219      	sxth	r1, r3
 80193e4:	7dfa      	ldrb	r2, [r7, #23]
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	9301      	str	r3, [sp, #4]
 80193ea:	2301      	movs	r3, #1
 80193ec:	9300      	str	r3, [sp, #0]
 80193ee:	68bb      	ldr	r3, [r7, #8]
 80193f0:	f7ff f9aa 	bl	8018748 <PayloadEncrypt>
 80193f4:	4603      	mov	r3, r0
 80193f6:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80193f8:	7d7b      	ldrb	r3, [r7, #21]
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d001      	beq.n	8019402 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 80193fe:	7d7b      	ldrb	r3, [r7, #21]
 8019400:	e005      	b.n	801940e <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8019402:	7bbb      	ldrb	r3, [r7, #14]
 8019404:	6879      	ldr	r1, [r7, #4]
 8019406:	4618      	mov	r0, r3
 8019408:	f7ff fc54 	bl	8018cb4 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 801940c:	2300      	movs	r3, #0
}
 801940e:	4618      	mov	r0, r3
 8019410:	371c      	adds	r7, #28
 8019412:	46bd      	mov	sp, r7
 8019414:	bd90      	pop	{r4, r7, pc}
 8019416:	bf00      	nop
 8019418:	2000239c 	.word	0x2000239c

0801941c <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 801941c:	b580      	push	{r7, lr}
 801941e:	b086      	sub	sp, #24
 8019420:	af00      	add	r7, sp, #0
 8019422:	4603      	mov	r3, r0
 8019424:	460a      	mov	r2, r1
 8019426:	71fb      	strb	r3, [r7, #7]
 8019428:	4613      	mov	r3, r2
 801942a:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 801942c:	79bb      	ldrb	r3, [r7, #6]
 801942e:	2b00      	cmp	r3, #0
 8019430:	d001      	beq.n	8019436 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8019432:	230b      	movs	r3, #11
 8019434:	e019      	b.n	801946a <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8019436:	2300      	movs	r3, #0
 8019438:	60bb      	str	r3, [r7, #8]
 801943a:	f107 030c 	add.w	r3, r7, #12
 801943e:	2200      	movs	r2, #0
 8019440:	601a      	str	r2, [r3, #0]
 8019442:	605a      	str	r2, [r3, #4]
 8019444:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8019446:	79fb      	ldrb	r3, [r7, #7]
 8019448:	2b01      	cmp	r3, #1
 801944a:	d101      	bne.n	8019450 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 801944c:	2320      	movs	r3, #32
 801944e:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8019450:	79b9      	ldrb	r1, [r7, #6]
 8019452:	f107 0308 	add.w	r3, r7, #8
 8019456:	2204      	movs	r2, #4
 8019458:	4618      	mov	r0, r3
 801945a:	f7f6 fb9d 	bl	800fb98 <SecureElementDeriveAndStoreKey>
 801945e:	4603      	mov	r3, r0
 8019460:	2b00      	cmp	r3, #0
 8019462:	d001      	beq.n	8019468 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8019464:	230f      	movs	r3, #15
 8019466:	e000      	b.n	801946a <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8019468:	2300      	movs	r3, #0
}
 801946a:	4618      	mov	r0, r3
 801946c:	3718      	adds	r7, #24
 801946e:	46bd      	mov	sp, r7
 8019470:	bd80      	pop	{r7, pc}

08019472 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8019472:	b580      	push	{r7, lr}
 8019474:	b086      	sub	sp, #24
 8019476:	af00      	add	r7, sp, #0
 8019478:	4603      	mov	r3, r0
 801947a:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 801947c:	79fb      	ldrb	r3, [r7, #7]
 801947e:	2b04      	cmp	r3, #4
 8019480:	d001      	beq.n	8019486 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8019482:	230b      	movs	r3, #11
 8019484:	e014      	b.n	80194b0 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8019486:	2300      	movs	r3, #0
 8019488:	60bb      	str	r3, [r7, #8]
 801948a:	f107 030c 	add.w	r3, r7, #12
 801948e:	2200      	movs	r2, #0
 8019490:	601a      	str	r2, [r3, #0]
 8019492:	605a      	str	r2, [r3, #4]
 8019494:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8019496:	79f9      	ldrb	r1, [r7, #7]
 8019498:	f107 0308 	add.w	r3, r7, #8
 801949c:	227f      	movs	r2, #127	; 0x7f
 801949e:	4618      	mov	r0, r3
 80194a0:	f7f6 fb7a 	bl	800fb98 <SecureElementDeriveAndStoreKey>
 80194a4:	4603      	mov	r3, r0
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d001      	beq.n	80194ae <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80194aa:	230f      	movs	r3, #15
 80194ac:	e000      	b.n	80194b0 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80194ae:	2300      	movs	r3, #0
}
 80194b0:	4618      	mov	r0, r3
 80194b2:	3718      	adds	r7, #24
 80194b4:	46bd      	mov	sp, r7
 80194b6:	bd80      	pop	{r7, pc}

080194b8 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80194b8:	b580      	push	{r7, lr}
 80194ba:	b084      	sub	sp, #16
 80194bc:	af00      	add	r7, sp, #0
 80194be:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d003      	beq.n	80194ce <LoRaMacParserJoinAccept+0x16>
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d101      	bne.n	80194d2 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80194ce:	2302      	movs	r3, #2
 80194d0:	e0b9      	b.n	8019646 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80194d2:	2300      	movs	r3, #0
 80194d4:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	681a      	ldr	r2, [r3, #0]
 80194da:	89fb      	ldrh	r3, [r7, #14]
 80194dc:	1c59      	adds	r1, r3, #1
 80194de:	81f9      	strh	r1, [r7, #14]
 80194e0:	4413      	add	r3, r2
 80194e2:	781a      	ldrb	r2, [r3, #0]
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	1d98      	adds	r0, r3, #6
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	681a      	ldr	r2, [r3, #0]
 80194f0:	89fb      	ldrh	r3, [r7, #14]
 80194f2:	4413      	add	r3, r2
 80194f4:	2203      	movs	r2, #3
 80194f6:	4619      	mov	r1, r3
 80194f8:	f002 fed1 	bl	801c29e <memcpy1>
    bufItr = bufItr + 3;
 80194fc:	89fb      	ldrh	r3, [r7, #14]
 80194fe:	3303      	adds	r3, #3
 8019500:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	f103 0009 	add.w	r0, r3, #9
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	681a      	ldr	r2, [r3, #0]
 801950c:	89fb      	ldrh	r3, [r7, #14]
 801950e:	4413      	add	r3, r2
 8019510:	2203      	movs	r2, #3
 8019512:	4619      	mov	r1, r3
 8019514:	f002 fec3 	bl	801c29e <memcpy1>
    bufItr = bufItr + 3;
 8019518:	89fb      	ldrh	r3, [r7, #14]
 801951a:	3303      	adds	r3, #3
 801951c:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	681a      	ldr	r2, [r3, #0]
 8019522:	89fb      	ldrh	r3, [r7, #14]
 8019524:	1c59      	adds	r1, r3, #1
 8019526:	81f9      	strh	r1, [r7, #14]
 8019528:	4413      	add	r3, r2
 801952a:	781b      	ldrb	r3, [r3, #0]
 801952c:	461a      	mov	r2, r3
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	681a      	ldr	r2, [r3, #0]
 8019536:	89fb      	ldrh	r3, [r7, #14]
 8019538:	1c59      	adds	r1, r3, #1
 801953a:	81f9      	strh	r1, [r7, #14]
 801953c:	4413      	add	r3, r2
 801953e:	781b      	ldrb	r3, [r3, #0]
 8019540:	021a      	lsls	r2, r3, #8
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	68db      	ldr	r3, [r3, #12]
 8019546:	431a      	orrs	r2, r3
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	681a      	ldr	r2, [r3, #0]
 8019550:	89fb      	ldrh	r3, [r7, #14]
 8019552:	1c59      	adds	r1, r3, #1
 8019554:	81f9      	strh	r1, [r7, #14]
 8019556:	4413      	add	r3, r2
 8019558:	781b      	ldrb	r3, [r3, #0]
 801955a:	041a      	lsls	r2, r3, #16
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	68db      	ldr	r3, [r3, #12]
 8019560:	431a      	orrs	r2, r3
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	681a      	ldr	r2, [r3, #0]
 801956a:	89fb      	ldrh	r3, [r7, #14]
 801956c:	1c59      	adds	r1, r3, #1
 801956e:	81f9      	strh	r1, [r7, #14]
 8019570:	4413      	add	r3, r2
 8019572:	781b      	ldrb	r3, [r3, #0]
 8019574:	061a      	lsls	r2, r3, #24
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	68db      	ldr	r3, [r3, #12]
 801957a:	431a      	orrs	r2, r3
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	681a      	ldr	r2, [r3, #0]
 8019584:	89fb      	ldrh	r3, [r7, #14]
 8019586:	1c59      	adds	r1, r3, #1
 8019588:	81f9      	strh	r1, [r7, #14]
 801958a:	4413      	add	r3, r2
 801958c:	781a      	ldrb	r2, [r3, #0]
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	681a      	ldr	r2, [r3, #0]
 8019596:	89fb      	ldrh	r3, [r7, #14]
 8019598:	1c59      	adds	r1, r3, #1
 801959a:	81f9      	strh	r1, [r7, #14]
 801959c:	4413      	add	r3, r2
 801959e:	781a      	ldrb	r2, [r3, #0]
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	791b      	ldrb	r3, [r3, #4]
 80195a8:	1f1a      	subs	r2, r3, #4
 80195aa:	89fb      	ldrh	r3, [r7, #14]
 80195ac:	1ad3      	subs	r3, r2, r3
 80195ae:	2b10      	cmp	r3, #16
 80195b0:	d10e      	bne.n	80195d0 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	f103 0012 	add.w	r0, r3, #18
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	681a      	ldr	r2, [r3, #0]
 80195bc:	89fb      	ldrh	r3, [r7, #14]
 80195be:	4413      	add	r3, r2
 80195c0:	2210      	movs	r2, #16
 80195c2:	4619      	mov	r1, r3
 80195c4:	f002 fe6b 	bl	801c29e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80195c8:	89fb      	ldrh	r3, [r7, #14]
 80195ca:	3310      	adds	r3, #16
 80195cc:	81fb      	strh	r3, [r7, #14]
 80195ce:	e008      	b.n	80195e2 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	791b      	ldrb	r3, [r3, #4]
 80195d4:	1f1a      	subs	r2, r3, #4
 80195d6:	89fb      	ldrh	r3, [r7, #14]
 80195d8:	1ad3      	subs	r3, r2, r3
 80195da:	2b00      	cmp	r3, #0
 80195dc:	dd01      	ble.n	80195e2 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80195de:	2301      	movs	r3, #1
 80195e0:	e031      	b.n	8019646 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	681a      	ldr	r2, [r3, #0]
 80195e6:	89fb      	ldrh	r3, [r7, #14]
 80195e8:	1c59      	adds	r1, r3, #1
 80195ea:	81f9      	strh	r1, [r7, #14]
 80195ec:	4413      	add	r3, r2
 80195ee:	781b      	ldrb	r3, [r3, #0]
 80195f0:	461a      	mov	r2, r3
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	681a      	ldr	r2, [r3, #0]
 80195fa:	89fb      	ldrh	r3, [r7, #14]
 80195fc:	1c59      	adds	r1, r3, #1
 80195fe:	81f9      	strh	r1, [r7, #14]
 8019600:	4413      	add	r3, r2
 8019602:	781b      	ldrb	r3, [r3, #0]
 8019604:	021a      	lsls	r2, r3, #8
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801960a:	431a      	orrs	r2, r3
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	681a      	ldr	r2, [r3, #0]
 8019614:	89fb      	ldrh	r3, [r7, #14]
 8019616:	1c59      	adds	r1, r3, #1
 8019618:	81f9      	strh	r1, [r7, #14]
 801961a:	4413      	add	r3, r2
 801961c:	781b      	ldrb	r3, [r3, #0]
 801961e:	041a      	lsls	r2, r3, #16
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019624:	431a      	orrs	r2, r3
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	681a      	ldr	r2, [r3, #0]
 801962e:	89fb      	ldrh	r3, [r7, #14]
 8019630:	1c59      	adds	r1, r3, #1
 8019632:	81f9      	strh	r1, [r7, #14]
 8019634:	4413      	add	r3, r2
 8019636:	781b      	ldrb	r3, [r3, #0]
 8019638:	061a      	lsls	r2, r3, #24
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801963e:	431a      	orrs	r2, r3
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8019644:	2300      	movs	r3, #0
}
 8019646:	4618      	mov	r0, r3
 8019648:	3710      	adds	r7, #16
 801964a:	46bd      	mov	sp, r7
 801964c:	bd80      	pop	{r7, pc}

0801964e <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801964e:	b580      	push	{r7, lr}
 8019650:	b084      	sub	sp, #16
 8019652:	af00      	add	r7, sp, #0
 8019654:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	2b00      	cmp	r3, #0
 801965a:	d003      	beq.n	8019664 <LoRaMacParserData+0x16>
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	2b00      	cmp	r3, #0
 8019662:	d101      	bne.n	8019668 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8019664:	2302      	movs	r3, #2
 8019666:	e0e2      	b.n	801982e <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8019668:	2300      	movs	r3, #0
 801966a:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	681a      	ldr	r2, [r3, #0]
 8019670:	89fb      	ldrh	r3, [r7, #14]
 8019672:	1c59      	adds	r1, r3, #1
 8019674:	81f9      	strh	r1, [r7, #14]
 8019676:	4413      	add	r3, r2
 8019678:	781a      	ldrb	r2, [r3, #0]
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	681a      	ldr	r2, [r3, #0]
 8019682:	89fb      	ldrh	r3, [r7, #14]
 8019684:	1c59      	adds	r1, r3, #1
 8019686:	81f9      	strh	r1, [r7, #14]
 8019688:	4413      	add	r3, r2
 801968a:	781b      	ldrb	r3, [r3, #0]
 801968c:	461a      	mov	r2, r3
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	681a      	ldr	r2, [r3, #0]
 8019696:	89fb      	ldrh	r3, [r7, #14]
 8019698:	1c59      	adds	r1, r3, #1
 801969a:	81f9      	strh	r1, [r7, #14]
 801969c:	4413      	add	r3, r2
 801969e:	781b      	ldrb	r3, [r3, #0]
 80196a0:	021a      	lsls	r2, r3, #8
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	689b      	ldr	r3, [r3, #8]
 80196a6:	431a      	orrs	r2, r3
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	681a      	ldr	r2, [r3, #0]
 80196b0:	89fb      	ldrh	r3, [r7, #14]
 80196b2:	1c59      	adds	r1, r3, #1
 80196b4:	81f9      	strh	r1, [r7, #14]
 80196b6:	4413      	add	r3, r2
 80196b8:	781b      	ldrb	r3, [r3, #0]
 80196ba:	041a      	lsls	r2, r3, #16
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	689b      	ldr	r3, [r3, #8]
 80196c0:	431a      	orrs	r2, r3
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	681a      	ldr	r2, [r3, #0]
 80196ca:	89fb      	ldrh	r3, [r7, #14]
 80196cc:	1c59      	adds	r1, r3, #1
 80196ce:	81f9      	strh	r1, [r7, #14]
 80196d0:	4413      	add	r3, r2
 80196d2:	781b      	ldrb	r3, [r3, #0]
 80196d4:	061a      	lsls	r2, r3, #24
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	689b      	ldr	r3, [r3, #8]
 80196da:	431a      	orrs	r2, r3
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	681a      	ldr	r2, [r3, #0]
 80196e4:	89fb      	ldrh	r3, [r7, #14]
 80196e6:	1c59      	adds	r1, r3, #1
 80196e8:	81f9      	strh	r1, [r7, #14]
 80196ea:	4413      	add	r3, r2
 80196ec:	781a      	ldrb	r2, [r3, #0]
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	681a      	ldr	r2, [r3, #0]
 80196f6:	89fb      	ldrh	r3, [r7, #14]
 80196f8:	1c59      	adds	r1, r3, #1
 80196fa:	81f9      	strh	r1, [r7, #14]
 80196fc:	4413      	add	r3, r2
 80196fe:	781b      	ldrb	r3, [r3, #0]
 8019700:	b29a      	uxth	r2, r3
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	681a      	ldr	r2, [r3, #0]
 801970a:	89fb      	ldrh	r3, [r7, #14]
 801970c:	1c59      	adds	r1, r3, #1
 801970e:	81f9      	strh	r1, [r7, #14]
 8019710:	4413      	add	r3, r2
 8019712:	781b      	ldrb	r3, [r3, #0]
 8019714:	0219      	lsls	r1, r3, #8
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	89db      	ldrh	r3, [r3, #14]
 801971a:	b21a      	sxth	r2, r3
 801971c:	b20b      	sxth	r3, r1
 801971e:	4313      	orrs	r3, r2
 8019720:	b21b      	sxth	r3, r3
 8019722:	b29a      	uxth	r2, r3
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	f103 0010 	add.w	r0, r3, #16
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	681a      	ldr	r2, [r3, #0]
 8019732:	89fb      	ldrh	r3, [r7, #14]
 8019734:	18d1      	adds	r1, r2, r3
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	7b1b      	ldrb	r3, [r3, #12]
 801973a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801973e:	b2db      	uxtb	r3, r3
 8019740:	b29b      	uxth	r3, r3
 8019742:	461a      	mov	r2, r3
 8019744:	f002 fdab 	bl	801c29e <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	7b1b      	ldrb	r3, [r3, #12]
 801974c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8019750:	b2db      	uxtb	r3, r3
 8019752:	b29a      	uxth	r2, r3
 8019754:	89fb      	ldrh	r3, [r7, #14]
 8019756:	4413      	add	r3, r2
 8019758:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	2200      	movs	r2, #0
 801975e:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	2200      	movs	r2, #0
 8019766:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	791b      	ldrb	r3, [r3, #4]
 801976e:	461a      	mov	r2, r3
 8019770:	89fb      	ldrh	r3, [r7, #14]
 8019772:	1ad3      	subs	r3, r2, r3
 8019774:	2b04      	cmp	r3, #4
 8019776:	dd28      	ble.n	80197ca <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	681a      	ldr	r2, [r3, #0]
 801977c:	89fb      	ldrh	r3, [r7, #14]
 801977e:	1c59      	adds	r1, r3, #1
 8019780:	81f9      	strh	r1, [r7, #14]
 8019782:	4413      	add	r3, r2
 8019784:	781a      	ldrb	r2, [r3, #0]
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	791a      	ldrb	r2, [r3, #4]
 8019790:	89fb      	ldrh	r3, [r7, #14]
 8019792:	b2db      	uxtb	r3, r3
 8019794:	1ad3      	subs	r3, r2, r3
 8019796:	b2db      	uxtb	r3, r3
 8019798:	3b04      	subs	r3, #4
 801979a:	b2da      	uxtb	r2, r3
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	681a      	ldr	r2, [r3, #0]
 80197aa:	89fb      	ldrh	r3, [r7, #14]
 80197ac:	18d1      	adds	r1, r2, r3
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80197b4:	b29b      	uxth	r3, r3
 80197b6:	461a      	mov	r2, r3
 80197b8:	f002 fd71 	bl	801c29e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80197c2:	b29a      	uxth	r2, r3
 80197c4:	89fb      	ldrh	r3, [r7, #14]
 80197c6:	4413      	add	r3, r2
 80197c8:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	681a      	ldr	r2, [r3, #0]
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	791b      	ldrb	r3, [r3, #4]
 80197d2:	3b04      	subs	r3, #4
 80197d4:	4413      	add	r3, r2
 80197d6:	781b      	ldrb	r3, [r3, #0]
 80197d8:	461a      	mov	r2, r3
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	6819      	ldr	r1, [r3, #0]
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	791b      	ldrb	r3, [r3, #4]
 80197ea:	3b03      	subs	r3, #3
 80197ec:	440b      	add	r3, r1
 80197ee:	781b      	ldrb	r3, [r3, #0]
 80197f0:	021b      	lsls	r3, r3, #8
 80197f2:	431a      	orrs	r2, r3
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	6819      	ldr	r1, [r3, #0]
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	791b      	ldrb	r3, [r3, #4]
 8019804:	3b02      	subs	r3, #2
 8019806:	440b      	add	r3, r1
 8019808:	781b      	ldrb	r3, [r3, #0]
 801980a:	041b      	lsls	r3, r3, #16
 801980c:	431a      	orrs	r2, r3
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	6819      	ldr	r1, [r3, #0]
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	791b      	ldrb	r3, [r3, #4]
 801981e:	3b01      	subs	r3, #1
 8019820:	440b      	add	r3, r1
 8019822:	781b      	ldrb	r3, [r3, #0]
 8019824:	061b      	lsls	r3, r3, #24
 8019826:	431a      	orrs	r2, r3
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801982c:	2300      	movs	r3, #0
}
 801982e:	4618      	mov	r0, r3
 8019830:	3710      	adds	r7, #16
 8019832:	46bd      	mov	sp, r7
 8019834:	bd80      	pop	{r7, pc}

08019836 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8019836:	b580      	push	{r7, lr}
 8019838:	b084      	sub	sp, #16
 801983a:	af00      	add	r7, sp, #0
 801983c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	2b00      	cmp	r3, #0
 8019842:	d003      	beq.n	801984c <LoRaMacSerializerJoinRequest+0x16>
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	2b00      	cmp	r3, #0
 801984a:	d101      	bne.n	8019850 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801984c:	2301      	movs	r3, #1
 801984e:	e070      	b.n	8019932 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8019850:	2300      	movs	r3, #0
 8019852:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	791b      	ldrb	r3, [r3, #4]
 8019858:	2b16      	cmp	r3, #22
 801985a:	d801      	bhi.n	8019860 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801985c:	2302      	movs	r3, #2
 801985e:	e068      	b.n	8019932 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	681a      	ldr	r2, [r3, #0]
 8019864:	89fb      	ldrh	r3, [r7, #14]
 8019866:	1c59      	adds	r1, r3, #1
 8019868:	81f9      	strh	r1, [r7, #14]
 801986a:	4413      	add	r3, r2
 801986c:	687a      	ldr	r2, [r7, #4]
 801986e:	7952      	ldrb	r2, [r2, #5]
 8019870:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	681a      	ldr	r2, [r3, #0]
 8019876:	89fb      	ldrh	r3, [r7, #14]
 8019878:	18d0      	adds	r0, r2, r3
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	3306      	adds	r3, #6
 801987e:	2208      	movs	r2, #8
 8019880:	4619      	mov	r1, r3
 8019882:	f002 fd27 	bl	801c2d4 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8019886:	89fb      	ldrh	r3, [r7, #14]
 8019888:	3308      	adds	r3, #8
 801988a:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	681a      	ldr	r2, [r3, #0]
 8019890:	89fb      	ldrh	r3, [r7, #14]
 8019892:	18d0      	adds	r0, r2, r3
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	330e      	adds	r3, #14
 8019898:	2208      	movs	r2, #8
 801989a:	4619      	mov	r1, r3
 801989c:	f002 fd1a 	bl	801c2d4 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80198a0:	89fb      	ldrh	r3, [r7, #14]
 80198a2:	3308      	adds	r3, #8
 80198a4:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	8ad9      	ldrh	r1, [r3, #22]
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	681a      	ldr	r2, [r3, #0]
 80198ae:	89fb      	ldrh	r3, [r7, #14]
 80198b0:	1c58      	adds	r0, r3, #1
 80198b2:	81f8      	strh	r0, [r7, #14]
 80198b4:	4413      	add	r3, r2
 80198b6:	b2ca      	uxtb	r2, r1
 80198b8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	8adb      	ldrh	r3, [r3, #22]
 80198be:	0a1b      	lsrs	r3, r3, #8
 80198c0:	b299      	uxth	r1, r3
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	681a      	ldr	r2, [r3, #0]
 80198c6:	89fb      	ldrh	r3, [r7, #14]
 80198c8:	1c58      	adds	r0, r3, #1
 80198ca:	81f8      	strh	r0, [r7, #14]
 80198cc:	4413      	add	r3, r2
 80198ce:	b2ca      	uxtb	r2, r1
 80198d0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	6999      	ldr	r1, [r3, #24]
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	681a      	ldr	r2, [r3, #0]
 80198da:	89fb      	ldrh	r3, [r7, #14]
 80198dc:	1c58      	adds	r0, r3, #1
 80198de:	81f8      	strh	r0, [r7, #14]
 80198e0:	4413      	add	r3, r2
 80198e2:	b2ca      	uxtb	r2, r1
 80198e4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	699b      	ldr	r3, [r3, #24]
 80198ea:	0a19      	lsrs	r1, r3, #8
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	681a      	ldr	r2, [r3, #0]
 80198f0:	89fb      	ldrh	r3, [r7, #14]
 80198f2:	1c58      	adds	r0, r3, #1
 80198f4:	81f8      	strh	r0, [r7, #14]
 80198f6:	4413      	add	r3, r2
 80198f8:	b2ca      	uxtb	r2, r1
 80198fa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	699b      	ldr	r3, [r3, #24]
 8019900:	0c19      	lsrs	r1, r3, #16
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	681a      	ldr	r2, [r3, #0]
 8019906:	89fb      	ldrh	r3, [r7, #14]
 8019908:	1c58      	adds	r0, r3, #1
 801990a:	81f8      	strh	r0, [r7, #14]
 801990c:	4413      	add	r3, r2
 801990e:	b2ca      	uxtb	r2, r1
 8019910:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	699b      	ldr	r3, [r3, #24]
 8019916:	0e19      	lsrs	r1, r3, #24
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	681a      	ldr	r2, [r3, #0]
 801991c:	89fb      	ldrh	r3, [r7, #14]
 801991e:	1c58      	adds	r0, r3, #1
 8019920:	81f8      	strh	r0, [r7, #14]
 8019922:	4413      	add	r3, r2
 8019924:	b2ca      	uxtb	r2, r1
 8019926:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8019928:	89fb      	ldrh	r3, [r7, #14]
 801992a:	b2da      	uxtb	r2, r3
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8019930:	2300      	movs	r3, #0
}
 8019932:	4618      	mov	r0, r3
 8019934:	3710      	adds	r7, #16
 8019936:	46bd      	mov	sp, r7
 8019938:	bd80      	pop	{r7, pc}

0801993a <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 801993a:	b580      	push	{r7, lr}
 801993c:	b084      	sub	sp, #16
 801993e:	af00      	add	r7, sp, #0
 8019940:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	2b00      	cmp	r3, #0
 8019946:	d003      	beq.n	8019950 <LoRaMacSerializerData+0x16>
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	2b00      	cmp	r3, #0
 801994e:	d101      	bne.n	8019954 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8019950:	2301      	movs	r3, #1
 8019952:	e0e5      	b.n	8019b20 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8019954:	2300      	movs	r3, #0
 8019956:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8019958:	2308      	movs	r3, #8
 801995a:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	7b1b      	ldrb	r3, [r3, #12]
 8019960:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8019964:	b2db      	uxtb	r3, r3
 8019966:	b29a      	uxth	r2, r3
 8019968:	89bb      	ldrh	r3, [r7, #12]
 801996a:	4413      	add	r3, r2
 801996c:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019974:	2b00      	cmp	r3, #0
 8019976:	d002      	beq.n	801997e <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8019978:	89bb      	ldrh	r3, [r7, #12]
 801997a:	3301      	adds	r3, #1
 801997c:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019984:	b29a      	uxth	r2, r3
 8019986:	89bb      	ldrh	r3, [r7, #12]
 8019988:	4413      	add	r3, r2
 801998a:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 801998c:	89bb      	ldrh	r3, [r7, #12]
 801998e:	3304      	adds	r3, #4
 8019990:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	791b      	ldrb	r3, [r3, #4]
 8019996:	b29b      	uxth	r3, r3
 8019998:	89ba      	ldrh	r2, [r7, #12]
 801999a:	429a      	cmp	r2, r3
 801999c:	d901      	bls.n	80199a2 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801999e:	2302      	movs	r3, #2
 80199a0:	e0be      	b.n	8019b20 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	681a      	ldr	r2, [r3, #0]
 80199a6:	89fb      	ldrh	r3, [r7, #14]
 80199a8:	1c59      	adds	r1, r3, #1
 80199aa:	81f9      	strh	r1, [r7, #14]
 80199ac:	4413      	add	r3, r2
 80199ae:	687a      	ldr	r2, [r7, #4]
 80199b0:	7952      	ldrb	r2, [r2, #5]
 80199b2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	6899      	ldr	r1, [r3, #8]
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	681a      	ldr	r2, [r3, #0]
 80199bc:	89fb      	ldrh	r3, [r7, #14]
 80199be:	1c58      	adds	r0, r3, #1
 80199c0:	81f8      	strh	r0, [r7, #14]
 80199c2:	4413      	add	r3, r2
 80199c4:	b2ca      	uxtb	r2, r1
 80199c6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	689b      	ldr	r3, [r3, #8]
 80199cc:	0a19      	lsrs	r1, r3, #8
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	681a      	ldr	r2, [r3, #0]
 80199d2:	89fb      	ldrh	r3, [r7, #14]
 80199d4:	1c58      	adds	r0, r3, #1
 80199d6:	81f8      	strh	r0, [r7, #14]
 80199d8:	4413      	add	r3, r2
 80199da:	b2ca      	uxtb	r2, r1
 80199dc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	689b      	ldr	r3, [r3, #8]
 80199e2:	0c19      	lsrs	r1, r3, #16
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	681a      	ldr	r2, [r3, #0]
 80199e8:	89fb      	ldrh	r3, [r7, #14]
 80199ea:	1c58      	adds	r0, r3, #1
 80199ec:	81f8      	strh	r0, [r7, #14]
 80199ee:	4413      	add	r3, r2
 80199f0:	b2ca      	uxtb	r2, r1
 80199f2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	689b      	ldr	r3, [r3, #8]
 80199f8:	0e19      	lsrs	r1, r3, #24
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	681a      	ldr	r2, [r3, #0]
 80199fe:	89fb      	ldrh	r3, [r7, #14]
 8019a00:	1c58      	adds	r0, r3, #1
 8019a02:	81f8      	strh	r0, [r7, #14]
 8019a04:	4413      	add	r3, r2
 8019a06:	b2ca      	uxtb	r2, r1
 8019a08:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	681a      	ldr	r2, [r3, #0]
 8019a0e:	89fb      	ldrh	r3, [r7, #14]
 8019a10:	1c59      	adds	r1, r3, #1
 8019a12:	81f9      	strh	r1, [r7, #14]
 8019a14:	4413      	add	r3, r2
 8019a16:	687a      	ldr	r2, [r7, #4]
 8019a18:	7b12      	ldrb	r2, [r2, #12]
 8019a1a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	89d9      	ldrh	r1, [r3, #14]
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	681a      	ldr	r2, [r3, #0]
 8019a24:	89fb      	ldrh	r3, [r7, #14]
 8019a26:	1c58      	adds	r0, r3, #1
 8019a28:	81f8      	strh	r0, [r7, #14]
 8019a2a:	4413      	add	r3, r2
 8019a2c:	b2ca      	uxtb	r2, r1
 8019a2e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	89db      	ldrh	r3, [r3, #14]
 8019a34:	0a1b      	lsrs	r3, r3, #8
 8019a36:	b299      	uxth	r1, r3
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	681a      	ldr	r2, [r3, #0]
 8019a3c:	89fb      	ldrh	r3, [r7, #14]
 8019a3e:	1c58      	adds	r0, r3, #1
 8019a40:	81f8      	strh	r0, [r7, #14]
 8019a42:	4413      	add	r3, r2
 8019a44:	b2ca      	uxtb	r2, r1
 8019a46:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	681a      	ldr	r2, [r3, #0]
 8019a4c:	89fb      	ldrh	r3, [r7, #14]
 8019a4e:	18d0      	adds	r0, r2, r3
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	f103 0110 	add.w	r1, r3, #16
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	7b1b      	ldrb	r3, [r3, #12]
 8019a5a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8019a5e:	b2db      	uxtb	r3, r3
 8019a60:	b29b      	uxth	r3, r3
 8019a62:	461a      	mov	r2, r3
 8019a64:	f002 fc1b 	bl	801c29e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	7b1b      	ldrb	r3, [r3, #12]
 8019a6c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8019a70:	b2db      	uxtb	r3, r3
 8019a72:	b29a      	uxth	r2, r3
 8019a74:	89fb      	ldrh	r3, [r7, #14]
 8019a76:	4413      	add	r3, r2
 8019a78:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d009      	beq.n	8019a98 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	681a      	ldr	r2, [r3, #0]
 8019a88:	89fb      	ldrh	r3, [r7, #14]
 8019a8a:	1c59      	adds	r1, r3, #1
 8019a8c:	81f9      	strh	r1, [r7, #14]
 8019a8e:	4413      	add	r3, r2
 8019a90:	687a      	ldr	r2, [r7, #4]
 8019a92:	f892 2020 	ldrb.w	r2, [r2, #32]
 8019a96:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	681a      	ldr	r2, [r3, #0]
 8019a9c:	89fb      	ldrh	r3, [r7, #14]
 8019a9e:	18d0      	adds	r0, r2, r3
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019aaa:	b29b      	uxth	r3, r3
 8019aac:	461a      	mov	r2, r3
 8019aae:	f002 fbf6 	bl	801c29e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019ab8:	b29a      	uxth	r2, r3
 8019aba:	89fb      	ldrh	r3, [r7, #14]
 8019abc:	4413      	add	r3, r2
 8019abe:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	681a      	ldr	r2, [r3, #0]
 8019ac8:	89fb      	ldrh	r3, [r7, #14]
 8019aca:	1c58      	adds	r0, r3, #1
 8019acc:	81f8      	strh	r0, [r7, #14]
 8019ace:	4413      	add	r3, r2
 8019ad0:	b2ca      	uxtb	r2, r1
 8019ad2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ad8:	0a19      	lsrs	r1, r3, #8
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	681a      	ldr	r2, [r3, #0]
 8019ade:	89fb      	ldrh	r3, [r7, #14]
 8019ae0:	1c58      	adds	r0, r3, #1
 8019ae2:	81f8      	strh	r0, [r7, #14]
 8019ae4:	4413      	add	r3, r2
 8019ae6:	b2ca      	uxtb	r2, r1
 8019ae8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019aee:	0c19      	lsrs	r1, r3, #16
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	681a      	ldr	r2, [r3, #0]
 8019af4:	89fb      	ldrh	r3, [r7, #14]
 8019af6:	1c58      	adds	r0, r3, #1
 8019af8:	81f8      	strh	r0, [r7, #14]
 8019afa:	4413      	add	r3, r2
 8019afc:	b2ca      	uxtb	r2, r1
 8019afe:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b04:	0e19      	lsrs	r1, r3, #24
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	681a      	ldr	r2, [r3, #0]
 8019b0a:	89fb      	ldrh	r3, [r7, #14]
 8019b0c:	1c58      	adds	r0, r3, #1
 8019b0e:	81f8      	strh	r0, [r7, #14]
 8019b10:	4413      	add	r3, r2
 8019b12:	b2ca      	uxtb	r2, r1
 8019b14:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8019b16:	89fb      	ldrh	r3, [r7, #14]
 8019b18:	b2da      	uxtb	r2, r3
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8019b1e:	2300      	movs	r3, #0
}
 8019b20:	4618      	mov	r0, r3
 8019b22:	3710      	adds	r7, #16
 8019b24:	46bd      	mov	sp, r7
 8019b26:	bd80      	pop	{r7, pc}

08019b28 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8019b28:	b480      	push	{r7}
 8019b2a:	b083      	sub	sp, #12
 8019b2c:	af00      	add	r7, sp, #0
 8019b2e:	4603      	mov	r3, r0
 8019b30:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019b32:	79fb      	ldrb	r3, [r7, #7]
 8019b34:	2b05      	cmp	r3, #5
 8019b36:	d101      	bne.n	8019b3c <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8019b38:	2301      	movs	r3, #1
 8019b3a:	e000      	b.n	8019b3e <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8019b3c:	2300      	movs	r3, #0
        }
    }
}
 8019b3e:	4618      	mov	r0, r3
 8019b40:	370c      	adds	r7, #12
 8019b42:	46bd      	mov	sp, r7
 8019b44:	bc80      	pop	{r7}
 8019b46:	4770      	bx	lr

08019b48 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8019b48:	b580      	push	{r7, lr}
 8019b4a:	b084      	sub	sp, #16
 8019b4c:	af00      	add	r7, sp, #0
 8019b4e:	4603      	mov	r3, r0
 8019b50:	6039      	str	r1, [r7, #0]
 8019b52:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8019b54:	2300      	movs	r3, #0
 8019b56:	60bb      	str	r3, [r7, #8]
    switch( region )
 8019b58:	79fb      	ldrb	r3, [r7, #7]
 8019b5a:	2b05      	cmp	r3, #5
 8019b5c:	d105      	bne.n	8019b6a <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8019b5e:	6838      	ldr	r0, [r7, #0]
 8019b60:	f001 fa08 	bl	801af74 <RegionEU868GetPhyParam>
 8019b64:	4603      	mov	r3, r0
 8019b66:	60fb      	str	r3, [r7, #12]
 8019b68:	e001      	b.n	8019b6e <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8019b6a:	68bb      	ldr	r3, [r7, #8]
 8019b6c:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8019b6e:	68fb      	ldr	r3, [r7, #12]
 8019b70:	4618      	mov	r0, r3
 8019b72:	3710      	adds	r7, #16
 8019b74:	46bd      	mov	sp, r7
 8019b76:	bd80      	pop	{r7, pc}

08019b78 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8019b78:	b580      	push	{r7, lr}
 8019b7a:	b082      	sub	sp, #8
 8019b7c:	af00      	add	r7, sp, #0
 8019b7e:	4603      	mov	r3, r0
 8019b80:	6039      	str	r1, [r7, #0]
 8019b82:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019b84:	79fb      	ldrb	r3, [r7, #7]
 8019b86:	2b05      	cmp	r3, #5
 8019b88:	d103      	bne.n	8019b92 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8019b8a:	6838      	ldr	r0, [r7, #0]
 8019b8c:	f001 fb3e 	bl	801b20c <RegionEU868SetBandTxDone>
 8019b90:	e000      	b.n	8019b94 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8019b92:	bf00      	nop
        }
    }
}
 8019b94:	3708      	adds	r7, #8
 8019b96:	46bd      	mov	sp, r7
 8019b98:	bd80      	pop	{r7, pc}

08019b9a <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8019b9a:	b580      	push	{r7, lr}
 8019b9c:	b082      	sub	sp, #8
 8019b9e:	af00      	add	r7, sp, #0
 8019ba0:	4603      	mov	r3, r0
 8019ba2:	6039      	str	r1, [r7, #0]
 8019ba4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019ba6:	79fb      	ldrb	r3, [r7, #7]
 8019ba8:	2b05      	cmp	r3, #5
 8019baa:	d103      	bne.n	8019bb4 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8019bac:	6838      	ldr	r0, [r7, #0]
 8019bae:	f001 fb59 	bl	801b264 <RegionEU868InitDefaults>
 8019bb2:	e000      	b.n	8019bb6 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8019bb4:	bf00      	nop
        }
    }
}
 8019bb6:	bf00      	nop
 8019bb8:	3708      	adds	r7, #8
 8019bba:	46bd      	mov	sp, r7
 8019bbc:	bd80      	pop	{r7, pc}

08019bbe <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8019bbe:	b580      	push	{r7, lr}
 8019bc0:	b082      	sub	sp, #8
 8019bc2:	af00      	add	r7, sp, #0
 8019bc4:	4603      	mov	r3, r0
 8019bc6:	6039      	str	r1, [r7, #0]
 8019bc8:	71fb      	strb	r3, [r7, #7]
 8019bca:	4613      	mov	r3, r2
 8019bcc:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8019bce:	79fb      	ldrb	r3, [r7, #7]
 8019bd0:	2b05      	cmp	r3, #5
 8019bd2:	d106      	bne.n	8019be2 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8019bd4:	79bb      	ldrb	r3, [r7, #6]
 8019bd6:	4619      	mov	r1, r3
 8019bd8:	6838      	ldr	r0, [r7, #0]
 8019bda:	f001 fbe1 	bl	801b3a0 <RegionEU868Verify>
 8019bde:	4603      	mov	r3, r0
 8019be0:	e000      	b.n	8019be4 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8019be2:	2300      	movs	r3, #0
        }
    }
}
 8019be4:	4618      	mov	r0, r3
 8019be6:	3708      	adds	r7, #8
 8019be8:	46bd      	mov	sp, r7
 8019bea:	bd80      	pop	{r7, pc}

08019bec <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8019bec:	b580      	push	{r7, lr}
 8019bee:	b082      	sub	sp, #8
 8019bf0:	af00      	add	r7, sp, #0
 8019bf2:	4603      	mov	r3, r0
 8019bf4:	6039      	str	r1, [r7, #0]
 8019bf6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019bf8:	79fb      	ldrb	r3, [r7, #7]
 8019bfa:	2b05      	cmp	r3, #5
 8019bfc:	d103      	bne.n	8019c06 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8019bfe:	6838      	ldr	r0, [r7, #0]
 8019c00:	f001 fc4a 	bl	801b498 <RegionEU868ApplyCFList>
 8019c04:	e000      	b.n	8019c08 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8019c06:	bf00      	nop
        }
    }
}
 8019c08:	bf00      	nop
 8019c0a:	3708      	adds	r7, #8
 8019c0c:	46bd      	mov	sp, r7
 8019c0e:	bd80      	pop	{r7, pc}

08019c10 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8019c10:	b580      	push	{r7, lr}
 8019c12:	b082      	sub	sp, #8
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	4603      	mov	r3, r0
 8019c18:	6039      	str	r1, [r7, #0]
 8019c1a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019c1c:	79fb      	ldrb	r3, [r7, #7]
 8019c1e:	2b05      	cmp	r3, #5
 8019c20:	d104      	bne.n	8019c2c <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8019c22:	6838      	ldr	r0, [r7, #0]
 8019c24:	f001 fcac 	bl	801b580 <RegionEU868ChanMaskSet>
 8019c28:	4603      	mov	r3, r0
 8019c2a:	e000      	b.n	8019c2e <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8019c2c:	2300      	movs	r3, #0
        }
    }
}
 8019c2e:	4618      	mov	r0, r3
 8019c30:	3708      	adds	r7, #8
 8019c32:	46bd      	mov	sp, r7
 8019c34:	bd80      	pop	{r7, pc}

08019c36 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019c36:	b580      	push	{r7, lr}
 8019c38:	b082      	sub	sp, #8
 8019c3a:	af00      	add	r7, sp, #0
 8019c3c:	603b      	str	r3, [r7, #0]
 8019c3e:	4603      	mov	r3, r0
 8019c40:	71fb      	strb	r3, [r7, #7]
 8019c42:	460b      	mov	r3, r1
 8019c44:	71bb      	strb	r3, [r7, #6]
 8019c46:	4613      	mov	r3, r2
 8019c48:	717b      	strb	r3, [r7, #5]
    switch( region )
 8019c4a:	79fb      	ldrb	r3, [r7, #7]
 8019c4c:	2b05      	cmp	r3, #5
 8019c4e:	d107      	bne.n	8019c60 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8019c50:	7979      	ldrb	r1, [r7, #5]
 8019c52:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8019c56:	693b      	ldr	r3, [r7, #16]
 8019c58:	683a      	ldr	r2, [r7, #0]
 8019c5a:	f001 fcbb 	bl	801b5d4 <RegionEU868ComputeRxWindowParameters>
 8019c5e:	e000      	b.n	8019c62 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8019c60:	bf00      	nop
        }
    }
}
 8019c62:	bf00      	nop
 8019c64:	3708      	adds	r7, #8
 8019c66:	46bd      	mov	sp, r7
 8019c68:	bd80      	pop	{r7, pc}

08019c6a <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8019c6a:	b580      	push	{r7, lr}
 8019c6c:	b084      	sub	sp, #16
 8019c6e:	af00      	add	r7, sp, #0
 8019c70:	4603      	mov	r3, r0
 8019c72:	60b9      	str	r1, [r7, #8]
 8019c74:	607a      	str	r2, [r7, #4]
 8019c76:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8019c78:	7bfb      	ldrb	r3, [r7, #15]
 8019c7a:	2b05      	cmp	r3, #5
 8019c7c:	d105      	bne.n	8019c8a <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8019c7e:	6879      	ldr	r1, [r7, #4]
 8019c80:	68b8      	ldr	r0, [r7, #8]
 8019c82:	f001 fd01 	bl	801b688 <RegionEU868RxConfig>
 8019c86:	4603      	mov	r3, r0
 8019c88:	e000      	b.n	8019c8c <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8019c8a:	2300      	movs	r3, #0
        }
    }
}
 8019c8c:	4618      	mov	r0, r3
 8019c8e:	3710      	adds	r7, #16
 8019c90:	46bd      	mov	sp, r7
 8019c92:	bd80      	pop	{r7, pc}

08019c94 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8019c94:	b580      	push	{r7, lr}
 8019c96:	b084      	sub	sp, #16
 8019c98:	af00      	add	r7, sp, #0
 8019c9a:	60b9      	str	r1, [r7, #8]
 8019c9c:	607a      	str	r2, [r7, #4]
 8019c9e:	603b      	str	r3, [r7, #0]
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8019ca4:	7bfb      	ldrb	r3, [r7, #15]
 8019ca6:	2b05      	cmp	r3, #5
 8019ca8:	d106      	bne.n	8019cb8 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8019caa:	683a      	ldr	r2, [r7, #0]
 8019cac:	6879      	ldr	r1, [r7, #4]
 8019cae:	68b8      	ldr	r0, [r7, #8]
 8019cb0:	f001 fdba 	bl	801b828 <RegionEU868TxConfig>
 8019cb4:	4603      	mov	r3, r0
 8019cb6:	e000      	b.n	8019cba <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8019cb8:	2300      	movs	r3, #0
        }
    }
}
 8019cba:	4618      	mov	r0, r3
 8019cbc:	3710      	adds	r7, #16
 8019cbe:	46bd      	mov	sp, r7
 8019cc0:	bd80      	pop	{r7, pc}

08019cc2 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019cc2:	b580      	push	{r7, lr}
 8019cc4:	b086      	sub	sp, #24
 8019cc6:	af02      	add	r7, sp, #8
 8019cc8:	60b9      	str	r1, [r7, #8]
 8019cca:	607a      	str	r2, [r7, #4]
 8019ccc:	603b      	str	r3, [r7, #0]
 8019cce:	4603      	mov	r3, r0
 8019cd0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8019cd2:	7bfb      	ldrb	r3, [r7, #15]
 8019cd4:	2b05      	cmp	r3, #5
 8019cd6:	d109      	bne.n	8019cec <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8019cd8:	69fb      	ldr	r3, [r7, #28]
 8019cda:	9300      	str	r3, [sp, #0]
 8019cdc:	69bb      	ldr	r3, [r7, #24]
 8019cde:	683a      	ldr	r2, [r7, #0]
 8019ce0:	6879      	ldr	r1, [r7, #4]
 8019ce2:	68b8      	ldr	r0, [r7, #8]
 8019ce4:	f001 fe70 	bl	801b9c8 <RegionEU868LinkAdrReq>
 8019ce8:	4603      	mov	r3, r0
 8019cea:	e000      	b.n	8019cee <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8019cec:	2300      	movs	r3, #0
        }
    }
}
 8019cee:	4618      	mov	r0, r3
 8019cf0:	3710      	adds	r7, #16
 8019cf2:	46bd      	mov	sp, r7
 8019cf4:	bd80      	pop	{r7, pc}

08019cf6 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019cf6:	b580      	push	{r7, lr}
 8019cf8:	b082      	sub	sp, #8
 8019cfa:	af00      	add	r7, sp, #0
 8019cfc:	4603      	mov	r3, r0
 8019cfe:	6039      	str	r1, [r7, #0]
 8019d00:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019d02:	79fb      	ldrb	r3, [r7, #7]
 8019d04:	2b05      	cmp	r3, #5
 8019d06:	d104      	bne.n	8019d12 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8019d08:	6838      	ldr	r0, [r7, #0]
 8019d0a:	f001 ff7f 	bl	801bc0c <RegionEU868RxParamSetupReq>
 8019d0e:	4603      	mov	r3, r0
 8019d10:	e000      	b.n	8019d14 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8019d12:	2300      	movs	r3, #0
        }
    }
}
 8019d14:	4618      	mov	r0, r3
 8019d16:	3708      	adds	r7, #8
 8019d18:	46bd      	mov	sp, r7
 8019d1a:	bd80      	pop	{r7, pc}

08019d1c <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8019d1c:	b580      	push	{r7, lr}
 8019d1e:	b082      	sub	sp, #8
 8019d20:	af00      	add	r7, sp, #0
 8019d22:	4603      	mov	r3, r0
 8019d24:	6039      	str	r1, [r7, #0]
 8019d26:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019d28:	79fb      	ldrb	r3, [r7, #7]
 8019d2a:	2b05      	cmp	r3, #5
 8019d2c:	d104      	bne.n	8019d38 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8019d2e:	6838      	ldr	r0, [r7, #0]
 8019d30:	f001 ffaa 	bl	801bc88 <RegionEU868NewChannelReq>
 8019d34:	4603      	mov	r3, r0
 8019d36:	e000      	b.n	8019d3a <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8019d38:	2300      	movs	r3, #0
        }
    }
}
 8019d3a:	4618      	mov	r0, r3
 8019d3c:	3708      	adds	r7, #8
 8019d3e:	46bd      	mov	sp, r7
 8019d40:	bd80      	pop	{r7, pc}

08019d42 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8019d42:	b580      	push	{r7, lr}
 8019d44:	b082      	sub	sp, #8
 8019d46:	af00      	add	r7, sp, #0
 8019d48:	4603      	mov	r3, r0
 8019d4a:	6039      	str	r1, [r7, #0]
 8019d4c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019d4e:	79fb      	ldrb	r3, [r7, #7]
 8019d50:	2b05      	cmp	r3, #5
 8019d52:	d104      	bne.n	8019d5e <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8019d54:	6838      	ldr	r0, [r7, #0]
 8019d56:	f001 fff5 	bl	801bd44 <RegionEU868TxParamSetupReq>
 8019d5a:	4603      	mov	r3, r0
 8019d5c:	e000      	b.n	8019d60 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8019d5e:	2300      	movs	r3, #0
        }
    }
}
 8019d60:	4618      	mov	r0, r3
 8019d62:	3708      	adds	r7, #8
 8019d64:	46bd      	mov	sp, r7
 8019d66:	bd80      	pop	{r7, pc}

08019d68 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8019d68:	b580      	push	{r7, lr}
 8019d6a:	b082      	sub	sp, #8
 8019d6c:	af00      	add	r7, sp, #0
 8019d6e:	4603      	mov	r3, r0
 8019d70:	6039      	str	r1, [r7, #0]
 8019d72:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019d74:	79fb      	ldrb	r3, [r7, #7]
 8019d76:	2b05      	cmp	r3, #5
 8019d78:	d104      	bne.n	8019d84 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8019d7a:	6838      	ldr	r0, [r7, #0]
 8019d7c:	f001 ffee 	bl	801bd5c <RegionEU868DlChannelReq>
 8019d80:	4603      	mov	r3, r0
 8019d82:	e000      	b.n	8019d86 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8019d84:	2300      	movs	r3, #0
        }
    }
}
 8019d86:	4618      	mov	r0, r3
 8019d88:	3708      	adds	r7, #8
 8019d8a:	46bd      	mov	sp, r7
 8019d8c:	bd80      	pop	{r7, pc}

08019d8e <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8019d8e:	b580      	push	{r7, lr}
 8019d90:	b082      	sub	sp, #8
 8019d92:	af00      	add	r7, sp, #0
 8019d94:	4603      	mov	r3, r0
 8019d96:	71fb      	strb	r3, [r7, #7]
 8019d98:	460b      	mov	r3, r1
 8019d9a:	71bb      	strb	r3, [r7, #6]
 8019d9c:	4613      	mov	r3, r2
 8019d9e:	717b      	strb	r3, [r7, #5]
    switch( region )
 8019da0:	79fb      	ldrb	r3, [r7, #7]
 8019da2:	2b05      	cmp	r3, #5
 8019da4:	d108      	bne.n	8019db8 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8019da6:	797a      	ldrb	r2, [r7, #5]
 8019da8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019dac:	4611      	mov	r1, r2
 8019dae:	4618      	mov	r0, r3
 8019db0:	f002 f818 	bl	801bde4 <RegionEU868AlternateDr>
 8019db4:	4603      	mov	r3, r0
 8019db6:	e000      	b.n	8019dba <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8019db8:	2300      	movs	r3, #0
        }
    }
}
 8019dba:	4618      	mov	r0, r3
 8019dbc:	3708      	adds	r7, #8
 8019dbe:	46bd      	mov	sp, r7
 8019dc0:	bd80      	pop	{r7, pc}

08019dc2 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019dc2:	b580      	push	{r7, lr}
 8019dc4:	b084      	sub	sp, #16
 8019dc6:	af00      	add	r7, sp, #0
 8019dc8:	60b9      	str	r1, [r7, #8]
 8019dca:	607a      	str	r2, [r7, #4]
 8019dcc:	603b      	str	r3, [r7, #0]
 8019dce:	4603      	mov	r3, r0
 8019dd0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8019dd2:	7bfb      	ldrb	r3, [r7, #15]
 8019dd4:	2b05      	cmp	r3, #5
 8019dd6:	d107      	bne.n	8019de8 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8019dd8:	69bb      	ldr	r3, [r7, #24]
 8019dda:	683a      	ldr	r2, [r7, #0]
 8019ddc:	6879      	ldr	r1, [r7, #4]
 8019dde:	68b8      	ldr	r0, [r7, #8]
 8019de0:	f002 f810 	bl	801be04 <RegionEU868NextChannel>
 8019de4:	4603      	mov	r3, r0
 8019de6:	e000      	b.n	8019dea <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8019de8:	2309      	movs	r3, #9
        }
    }
}
 8019dea:	4618      	mov	r0, r3
 8019dec:	3710      	adds	r7, #16
 8019dee:	46bd      	mov	sp, r7
 8019df0:	bd80      	pop	{r7, pc}

08019df2 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8019df2:	b580      	push	{r7, lr}
 8019df4:	b082      	sub	sp, #8
 8019df6:	af00      	add	r7, sp, #0
 8019df8:	4603      	mov	r3, r0
 8019dfa:	6039      	str	r1, [r7, #0]
 8019dfc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019dfe:	79fb      	ldrb	r3, [r7, #7]
 8019e00:	2b05      	cmp	r3, #5
 8019e02:	d103      	bne.n	8019e0c <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8019e04:	6838      	ldr	r0, [r7, #0]
 8019e06:	f002 f977 	bl	801c0f8 <RegionEU868SetContinuousWave>
 8019e0a:	e000      	b.n	8019e0e <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8019e0c:	bf00      	nop
        }
    }
}
 8019e0e:	bf00      	nop
 8019e10:	3708      	adds	r7, #8
 8019e12:	46bd      	mov	sp, r7
 8019e14:	bd80      	pop	{r7, pc}

08019e16 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019e16:	b590      	push	{r4, r7, lr}
 8019e18:	b083      	sub	sp, #12
 8019e1a:	af00      	add	r7, sp, #0
 8019e1c:	4604      	mov	r4, r0
 8019e1e:	4608      	mov	r0, r1
 8019e20:	4611      	mov	r1, r2
 8019e22:	461a      	mov	r2, r3
 8019e24:	4623      	mov	r3, r4
 8019e26:	71fb      	strb	r3, [r7, #7]
 8019e28:	4603      	mov	r3, r0
 8019e2a:	71bb      	strb	r3, [r7, #6]
 8019e2c:	460b      	mov	r3, r1
 8019e2e:	717b      	strb	r3, [r7, #5]
 8019e30:	4613      	mov	r3, r2
 8019e32:	713b      	strb	r3, [r7, #4]
    switch( region )
 8019e34:	79fb      	ldrb	r3, [r7, #7]
 8019e36:	2b05      	cmp	r3, #5
 8019e38:	d109      	bne.n	8019e4e <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8019e3a:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8019e3e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8019e42:	79bb      	ldrb	r3, [r7, #6]
 8019e44:	4618      	mov	r0, r3
 8019e46:	f002 f9a5 	bl	801c194 <RegionEU868ApplyDrOffset>
 8019e4a:	4603      	mov	r3, r0
 8019e4c:	e000      	b.n	8019e50 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8019e4e:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8019e50:	4618      	mov	r0, r3
 8019e52:	370c      	adds	r7, #12
 8019e54:	46bd      	mov	sp, r7
 8019e56:	bd90      	pop	{r4, r7, pc}

08019e58 <RegionRxBeaconSetup>:

void RegionRxBeaconSetup( LoRaMacRegion_t region, RxBeaconSetup_t* rxBeaconSetup, uint8_t* outDr )
{
 8019e58:	b580      	push	{r7, lr}
 8019e5a:	b084      	sub	sp, #16
 8019e5c:	af00      	add	r7, sp, #0
 8019e5e:	4603      	mov	r3, r0
 8019e60:	60b9      	str	r1, [r7, #8]
 8019e62:	607a      	str	r2, [r7, #4]
 8019e64:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8019e66:	7bfb      	ldrb	r3, [r7, #15]
 8019e68:	2b05      	cmp	r3, #5
 8019e6a:	d104      	bne.n	8019e76 <RegionRxBeaconSetup+0x1e>
        AS923_RX_BEACON_SETUP( );
        AU915_RX_BEACON_SETUP( );
        CN470_RX_BEACON_SETUP( );
        CN779_RX_BEACON_SETUP( );
        EU433_RX_BEACON_SETUP( );
        EU868_RX_BEACON_SETUP( );
 8019e6c:	6879      	ldr	r1, [r7, #4]
 8019e6e:	68b8      	ldr	r0, [r7, #8]
 8019e70:	f002 f9aa 	bl	801c1c8 <RegionEU868RxBeaconSetup>
 8019e74:	e000      	b.n	8019e78 <RegionRxBeaconSetup+0x20>
        IN865_RX_BEACON_SETUP( );
        US915_RX_BEACON_SETUP( );
        RU864_RX_BEACON_SETUP( );
        default:
        {
            break;
 8019e76:	bf00      	nop
        }
    }
}
 8019e78:	bf00      	nop
 8019e7a:	3710      	adds	r7, #16
 8019e7c:	46bd      	mov	sp, r7
 8019e7e:	bd80      	pop	{r7, pc}

08019e80 <RegionGetVersion>:

Version_t RegionGetVersion( void )
{
 8019e80:	b480      	push	{r7}
 8019e82:	b083      	sub	sp, #12
 8019e84:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8019e86:	4b04      	ldr	r3, [pc, #16]	; (8019e98 <RegionGetVersion+0x18>)
 8019e88:	607b      	str	r3, [r7, #4]

    return version;
 8019e8a:	687b      	ldr	r3, [r7, #4]
}
 8019e8c:	4618      	mov	r0, r3
 8019e8e:	370c      	adds	r7, #12
 8019e90:	46bd      	mov	sp, r7
 8019e92:	bc80      	pop	{r7}
 8019e94:	4770      	bx	lr
 8019e96:	bf00      	nop
 8019e98:	01010003 	.word	0x01010003

08019e9c <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8019e9c:	b480      	push	{r7}
 8019e9e:	b087      	sub	sp, #28
 8019ea0:	af00      	add	r7, sp, #0
 8019ea2:	60f8      	str	r0, [r7, #12]
 8019ea4:	4608      	mov	r0, r1
 8019ea6:	4639      	mov	r1, r7
 8019ea8:	e881 000c 	stmia.w	r1, {r2, r3}
 8019eac:	4603      	mov	r3, r0
 8019eae:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	881b      	ldrh	r3, [r3, #0]
 8019eb4:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8019eb6:	7afb      	ldrb	r3, [r7, #11]
 8019eb8:	f083 0301 	eor.w	r3, r3, #1
 8019ebc:	b2db      	uxtb	r3, r3
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d01b      	beq.n	8019efa <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8019ec2:	f242 7310 	movw	r3, #10000	; 0x2710
 8019ec6:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8019ec8:	683b      	ldr	r3, [r7, #0]
 8019eca:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8019ece:	d202      	bcs.n	8019ed6 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8019ed0:	2364      	movs	r3, #100	; 0x64
 8019ed2:	82bb      	strh	r3, [r7, #20]
 8019ed4:	e00b      	b.n	8019eee <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8019ed6:	683b      	ldr	r3, [r7, #0]
 8019ed8:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8019edc:	4293      	cmp	r3, r2
 8019ede:	d803      	bhi.n	8019ee8 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8019ee0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019ee4:	82bb      	strh	r3, [r7, #20]
 8019ee6:	e002      	b.n	8019eee <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8019ee8:	f242 7310 	movw	r3, #10000	; 0x2710
 8019eec:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8019eee:	8aba      	ldrh	r2, [r7, #20]
 8019ef0:	8afb      	ldrh	r3, [r7, #22]
 8019ef2:	4293      	cmp	r3, r2
 8019ef4:	bf38      	it	cc
 8019ef6:	4613      	movcc	r3, r2
 8019ef8:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8019efa:	8afb      	ldrh	r3, [r7, #22]
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d101      	bne.n	8019f04 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8019f00:	2301      	movs	r3, #1
 8019f02:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8019f04:	8afb      	ldrh	r3, [r7, #22]
}
 8019f06:	4618      	mov	r0, r3
 8019f08:	371c      	adds	r7, #28
 8019f0a:	46bd      	mov	sp, r7
 8019f0c:	bc80      	pop	{r7}
 8019f0e:	4770      	bx	lr

08019f10 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8019f10:	b580      	push	{r7, lr}
 8019f12:	b08e      	sub	sp, #56	; 0x38
 8019f14:	af02      	add	r7, sp, #8
 8019f16:	60f8      	str	r0, [r7, #12]
 8019f18:	4608      	mov	r0, r1
 8019f1a:	4639      	mov	r1, r7
 8019f1c:	e881 000c 	stmia.w	r1, {r2, r3}
 8019f20:	4603      	mov	r3, r0
 8019f22:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	881b      	ldrh	r3, [r3, #0]
 8019f28:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8019f2a:	4b4b      	ldr	r3, [pc, #300]	; (801a058 <SetMaxTimeCredits+0x148>)
 8019f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8019f2e:	463b      	mov	r3, r7
 8019f30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019f34:	f005 fdea 	bl	801fb0c <SysTimeToMs>
 8019f38:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8019f3a:	f107 0314 	add.w	r3, r7, #20
 8019f3e:	2200      	movs	r2, #0
 8019f40:	601a      	str	r2, [r3, #0]
 8019f42:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8019f44:	7af9      	ldrb	r1, [r7, #11]
 8019f46:	463b      	mov	r3, r7
 8019f48:	cb0c      	ldmia	r3, {r2, r3}
 8019f4a:	68f8      	ldr	r0, [r7, #12]
 8019f4c:	f7ff ffa6 	bl	8019e9c <GetDutyCycle>
 8019f50:	4603      	mov	r3, r0
 8019f52:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8019f54:	7afb      	ldrb	r3, [r7, #11]
 8019f56:	f083 0301 	eor.w	r3, r3, #1
 8019f5a:	b2db      	uxtb	r3, r3
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d062      	beq.n	801a026 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8019f60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019f62:	2b64      	cmp	r3, #100	; 0x64
 8019f64:	d105      	bne.n	8019f72 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8019f66:	4b3c      	ldr	r3, [pc, #240]	; (801a058 <SetMaxTimeCredits+0x148>)
 8019f68:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f6e:	609a      	str	r2, [r3, #8]
 8019f70:	e00b      	b.n	8019f8a <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8019f72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019f74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019f78:	d105      	bne.n	8019f86 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8019f7a:	4b38      	ldr	r3, [pc, #224]	; (801a05c <SetMaxTimeCredits+0x14c>)
 8019f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f82:	609a      	str	r2, [r3, #8]
 8019f84:	e001      	b.n	8019f8a <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8019f86:	4b36      	ldr	r3, [pc, #216]	; (801a060 <SetMaxTimeCredits+0x150>)
 8019f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	689a      	ldr	r2, [r3, #8]
 8019f8e:	f107 031c 	add.w	r3, r7, #28
 8019f92:	4611      	mov	r1, r2
 8019f94:	4618      	mov	r0, r3
 8019f96:	f005 fde1 	bl	801fb5c <SysTimeFromMs>
 8019f9a:	f107 0014 	add.w	r0, r7, #20
 8019f9e:	6a3b      	ldr	r3, [r7, #32]
 8019fa0:	9300      	str	r3, [sp, #0]
 8019fa2:	69fb      	ldr	r3, [r7, #28]
 8019fa4:	463a      	mov	r2, r7
 8019fa6:	ca06      	ldmia	r2, {r1, r2}
 8019fa8:	f005 fcf1 	bl	801f98e <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8019fac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8019fb0:	f083 0301 	eor.w	r3, r3, #1
 8019fb4:	b2db      	uxtb	r3, r3
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d006      	beq.n	8019fc8 <SetMaxTimeCredits+0xb8>
 8019fba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019fbe:	f083 0301 	eor.w	r3, r3, #1
 8019fc2:	b2db      	uxtb	r3, r3
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d108      	bne.n	8019fda <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8019fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fce:	429a      	cmp	r2, r3
 8019fd0:	d103      	bne.n	8019fda <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8019fd2:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8019fd4:	4a23      	ldr	r2, [pc, #140]	; (801a064 <SetMaxTimeCredits+0x154>)
 8019fd6:	4293      	cmp	r3, r2
 8019fd8:	d92f      	bls.n	801a03a <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8019fda:	68fb      	ldr	r3, [r7, #12]
 8019fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fde:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8019fe0:	683b      	ldr	r3, [r7, #0]
 8019fe2:	4a21      	ldr	r2, [pc, #132]	; (801a068 <SetMaxTimeCredits+0x158>)
 8019fe4:	4293      	cmp	r3, r2
 8019fe6:	d928      	bls.n	801a03a <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8019fe8:	683b      	ldr	r3, [r7, #0]
 8019fea:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8019fee:	3b30      	subs	r3, #48	; 0x30
 8019ff0:	4a1e      	ldr	r2, [pc, #120]	; (801a06c <SetMaxTimeCredits+0x15c>)
 8019ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8019ff6:	0c1b      	lsrs	r3, r3, #16
 8019ff8:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8019ffa:	697b      	ldr	r3, [r7, #20]
 8019ffc:	4a1c      	ldr	r2, [pc, #112]	; (801a070 <SetMaxTimeCredits+0x160>)
 8019ffe:	fb02 f303 	mul.w	r3, r2, r3
 801a002:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801a004:	697b      	ldr	r3, [r7, #20]
 801a006:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801a00a:	3330      	adds	r3, #48	; 0x30
 801a00c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801a00e:	2300      	movs	r3, #0
 801a010:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801a012:	f107 0314 	add.w	r3, r7, #20
 801a016:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a01a:	f005 fd77 	bl	801fb0c <SysTimeToMs>
 801a01e:	4602      	mov	r2, r0
 801a020:	68fb      	ldr	r3, [r7, #12]
 801a022:	609a      	str	r2, [r3, #8]
 801a024:	e009      	b.n	801a03a <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 801a026:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801a02a:	f083 0301 	eor.w	r3, r3, #1
 801a02e:	b2db      	uxtb	r3, r3
 801a030:	2b00      	cmp	r3, #0
 801a032:	d002      	beq.n	801a03a <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 801a034:	68fb      	ldr	r3, [r7, #12]
 801a036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a038:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	685b      	ldr	r3, [r3, #4]
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d102      	bne.n	801a048 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 801a042:	68fb      	ldr	r3, [r7, #12]
 801a044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a046:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 801a048:	68fb      	ldr	r3, [r7, #12]
 801a04a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a04c:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801a04e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 801a050:	4618      	mov	r0, r3
 801a052:	3730      	adds	r7, #48	; 0x30
 801a054:	46bd      	mov	sp, r7
 801a056:	bd80      	pop	{r7, pc}
 801a058:	001b7740 	.word	0x001b7740
 801a05c:	0112a880 	.word	0x0112a880
 801a060:	02932e00 	.word	0x02932e00
 801a064:	0001517f 	.word	0x0001517f
 801a068:	0001ec2f 	.word	0x0001ec2f
 801a06c:	c22e4507 	.word	0xc22e4507
 801a070:	00015180 	.word	0x00015180

0801a074 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 801a074:	b580      	push	{r7, lr}
 801a076:	b086      	sub	sp, #24
 801a078:	af02      	add	r7, sp, #8
 801a07a:	6078      	str	r0, [r7, #4]
 801a07c:	4608      	mov	r0, r1
 801a07e:	4611      	mov	r1, r2
 801a080:	461a      	mov	r2, r3
 801a082:	4603      	mov	r3, r0
 801a084:	70fb      	strb	r3, [r7, #3]
 801a086:	460b      	mov	r3, r1
 801a088:	70bb      	strb	r3, [r7, #2]
 801a08a:	4613      	mov	r3, r2
 801a08c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801a08e:	78f9      	ldrb	r1, [r7, #3]
 801a090:	787b      	ldrb	r3, [r7, #1]
 801a092:	9301      	str	r3, [sp, #4]
 801a094:	78bb      	ldrb	r3, [r7, #2]
 801a096:	9300      	str	r3, [sp, #0]
 801a098:	f107 0318 	add.w	r3, r7, #24
 801a09c:	cb0c      	ldmia	r3, {r2, r3}
 801a09e:	6878      	ldr	r0, [r7, #4]
 801a0a0:	f7ff ff36 	bl	8019f10 <SetMaxTimeCredits>
 801a0a4:	4603      	mov	r3, r0
 801a0a6:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 801a0a8:	78fb      	ldrb	r3, [r7, #3]
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d00a      	beq.n	801a0c4 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	685b      	ldr	r3, [r3, #4]
 801a0b2:	4618      	mov	r0, r3
 801a0b4:	f006 fb6a 	bl	802078c <UTIL_TIMER_GetElapsedTime>
 801a0b8:	4602      	mov	r2, r0
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	68db      	ldr	r3, [r3, #12]
 801a0be:	441a      	add	r2, r3
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	68da      	ldr	r2, [r3, #12]
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	691b      	ldr	r3, [r3, #16]
 801a0cc:	429a      	cmp	r2, r3
 801a0ce:	d903      	bls.n	801a0d8 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	691a      	ldr	r2, [r3, #16]
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	6a3a      	ldr	r2, [r7, #32]
 801a0dc:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801a0de:	89fb      	ldrh	r3, [r7, #14]
}
 801a0e0:	4618      	mov	r0, r3
 801a0e2:	3710      	adds	r7, #16
 801a0e4:	46bd      	mov	sp, r7
 801a0e6:	bd80      	pop	{r7, pc}

0801a0e8 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 801a0e8:	b480      	push	{r7}
 801a0ea:	b085      	sub	sp, #20
 801a0ec:	af00      	add	r7, sp, #0
 801a0ee:	4603      	mov	r3, r0
 801a0f0:	460a      	mov	r2, r1
 801a0f2:	80fb      	strh	r3, [r7, #6]
 801a0f4:	4613      	mov	r3, r2
 801a0f6:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 801a0f8:	2300      	movs	r3, #0
 801a0fa:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 801a0fc:	2300      	movs	r3, #0
 801a0fe:	73bb      	strb	r3, [r7, #14]
 801a100:	e011      	b.n	801a126 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801a102:	88fa      	ldrh	r2, [r7, #6]
 801a104:	7bbb      	ldrb	r3, [r7, #14]
 801a106:	2101      	movs	r1, #1
 801a108:	fa01 f303 	lsl.w	r3, r1, r3
 801a10c:	401a      	ands	r2, r3
 801a10e:	7bbb      	ldrb	r3, [r7, #14]
 801a110:	2101      	movs	r1, #1
 801a112:	fa01 f303 	lsl.w	r3, r1, r3
 801a116:	429a      	cmp	r2, r3
 801a118:	d102      	bne.n	801a120 <CountChannels+0x38>
        {
            nbActiveBits++;
 801a11a:	7bfb      	ldrb	r3, [r7, #15]
 801a11c:	3301      	adds	r3, #1
 801a11e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 801a120:	7bbb      	ldrb	r3, [r7, #14]
 801a122:	3301      	adds	r3, #1
 801a124:	73bb      	strb	r3, [r7, #14]
 801a126:	7bba      	ldrb	r2, [r7, #14]
 801a128:	797b      	ldrb	r3, [r7, #5]
 801a12a:	429a      	cmp	r2, r3
 801a12c:	d3e9      	bcc.n	801a102 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801a12e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a130:	4618      	mov	r0, r3
 801a132:	3714      	adds	r7, #20
 801a134:	46bd      	mov	sp, r7
 801a136:	bc80      	pop	{r7}
 801a138:	4770      	bx	lr

0801a13a <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801a13a:	b580      	push	{r7, lr}
 801a13c:	b084      	sub	sp, #16
 801a13e:	af00      	add	r7, sp, #0
 801a140:	6039      	str	r1, [r7, #0]
 801a142:	4611      	mov	r1, r2
 801a144:	461a      	mov	r2, r3
 801a146:	4603      	mov	r3, r0
 801a148:	71fb      	strb	r3, [r7, #7]
 801a14a:	460b      	mov	r3, r1
 801a14c:	71bb      	strb	r3, [r7, #6]
 801a14e:	4613      	mov	r3, r2
 801a150:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801a152:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801a156:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801a15a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a15e:	4618      	mov	r0, r3
 801a160:	f000 f85d 	bl	801a21e <RegionCommonValueInRange>
 801a164:	4603      	mov	r3, r0
 801a166:	2b00      	cmp	r3, #0
 801a168:	d101      	bne.n	801a16e <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801a16a:	2300      	movs	r3, #0
 801a16c:	e053      	b.n	801a216 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801a16e:	2300      	movs	r3, #0
 801a170:	73fb      	strb	r3, [r7, #15]
 801a172:	2300      	movs	r3, #0
 801a174:	73bb      	strb	r3, [r7, #14]
 801a176:	e049      	b.n	801a20c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801a178:	2300      	movs	r3, #0
 801a17a:	737b      	strb	r3, [r7, #13]
 801a17c:	e03d      	b.n	801a1fa <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801a17e:	7bbb      	ldrb	r3, [r7, #14]
 801a180:	005b      	lsls	r3, r3, #1
 801a182:	683a      	ldr	r2, [r7, #0]
 801a184:	4413      	add	r3, r2
 801a186:	881b      	ldrh	r3, [r3, #0]
 801a188:	461a      	mov	r2, r3
 801a18a:	7b7b      	ldrb	r3, [r7, #13]
 801a18c:	fa42 f303 	asr.w	r3, r2, r3
 801a190:	f003 0301 	and.w	r3, r3, #1
 801a194:	2b00      	cmp	r3, #0
 801a196:	d02d      	beq.n	801a1f4 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801a198:	7bfa      	ldrb	r2, [r7, #15]
 801a19a:	7b7b      	ldrb	r3, [r7, #13]
 801a19c:	4413      	add	r3, r2
 801a19e:	461a      	mov	r2, r3
 801a1a0:	4613      	mov	r3, r2
 801a1a2:	005b      	lsls	r3, r3, #1
 801a1a4:	4413      	add	r3, r2
 801a1a6:	009b      	lsls	r3, r3, #2
 801a1a8:	461a      	mov	r2, r3
 801a1aa:	69fb      	ldr	r3, [r7, #28]
 801a1ac:	4413      	add	r3, r2
 801a1ae:	7a1b      	ldrb	r3, [r3, #8]
 801a1b0:	f343 0303 	sbfx	r3, r3, #0, #4
 801a1b4:	b25b      	sxtb	r3, r3
 801a1b6:	f003 030f 	and.w	r3, r3, #15
 801a1ba:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801a1bc:	7bfa      	ldrb	r2, [r7, #15]
 801a1be:	7b7b      	ldrb	r3, [r7, #13]
 801a1c0:	4413      	add	r3, r2
 801a1c2:	461a      	mov	r2, r3
 801a1c4:	4613      	mov	r3, r2
 801a1c6:	005b      	lsls	r3, r3, #1
 801a1c8:	4413      	add	r3, r2
 801a1ca:	009b      	lsls	r3, r3, #2
 801a1cc:	461a      	mov	r2, r3
 801a1ce:	69fb      	ldr	r3, [r7, #28]
 801a1d0:	4413      	add	r3, r2
 801a1d2:	7a1b      	ldrb	r3, [r3, #8]
 801a1d4:	f343 1303 	sbfx	r3, r3, #4, #4
 801a1d8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801a1da:	f003 030f 	and.w	r3, r3, #15
 801a1de:	b25a      	sxtb	r2, r3
 801a1e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a1e4:	4618      	mov	r0, r3
 801a1e6:	f000 f81a 	bl	801a21e <RegionCommonValueInRange>
 801a1ea:	4603      	mov	r3, r0
 801a1ec:	2b01      	cmp	r3, #1
 801a1ee:	d101      	bne.n	801a1f4 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 801a1f0:	2301      	movs	r3, #1
 801a1f2:	e010      	b.n	801a216 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 801a1f4:	7b7b      	ldrb	r3, [r7, #13]
 801a1f6:	3301      	adds	r3, #1
 801a1f8:	737b      	strb	r3, [r7, #13]
 801a1fa:	7b7b      	ldrb	r3, [r7, #13]
 801a1fc:	2b0f      	cmp	r3, #15
 801a1fe:	d9be      	bls.n	801a17e <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801a200:	7bfb      	ldrb	r3, [r7, #15]
 801a202:	3310      	adds	r3, #16
 801a204:	73fb      	strb	r3, [r7, #15]
 801a206:	7bbb      	ldrb	r3, [r7, #14]
 801a208:	3301      	adds	r3, #1
 801a20a:	73bb      	strb	r3, [r7, #14]
 801a20c:	7bfa      	ldrb	r2, [r7, #15]
 801a20e:	79fb      	ldrb	r3, [r7, #7]
 801a210:	429a      	cmp	r2, r3
 801a212:	d3b1      	bcc.n	801a178 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 801a214:	2300      	movs	r3, #0
}
 801a216:	4618      	mov	r0, r3
 801a218:	3710      	adds	r7, #16
 801a21a:	46bd      	mov	sp, r7
 801a21c:	bd80      	pop	{r7, pc}

0801a21e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801a21e:	b480      	push	{r7}
 801a220:	b083      	sub	sp, #12
 801a222:	af00      	add	r7, sp, #0
 801a224:	4603      	mov	r3, r0
 801a226:	71fb      	strb	r3, [r7, #7]
 801a228:	460b      	mov	r3, r1
 801a22a:	71bb      	strb	r3, [r7, #6]
 801a22c:	4613      	mov	r3, r2
 801a22e:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 801a230:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801a234:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a238:	429a      	cmp	r2, r3
 801a23a:	db07      	blt.n	801a24c <RegionCommonValueInRange+0x2e>
 801a23c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801a240:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801a244:	429a      	cmp	r2, r3
 801a246:	dc01      	bgt.n	801a24c <RegionCommonValueInRange+0x2e>
    {
        return 1;
 801a248:	2301      	movs	r3, #1
 801a24a:	e000      	b.n	801a24e <RegionCommonValueInRange+0x30>
    }
    return 0;
 801a24c:	2300      	movs	r3, #0
}
 801a24e:	4618      	mov	r0, r3
 801a250:	370c      	adds	r7, #12
 801a252:	46bd      	mov	sp, r7
 801a254:	bc80      	pop	{r7}
 801a256:	4770      	bx	lr

0801a258 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 801a258:	b480      	push	{r7}
 801a25a:	b085      	sub	sp, #20
 801a25c:	af00      	add	r7, sp, #0
 801a25e:	6078      	str	r0, [r7, #4]
 801a260:	460b      	mov	r3, r1
 801a262:	70fb      	strb	r3, [r7, #3]
 801a264:	4613      	mov	r3, r2
 801a266:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 801a268:	78fb      	ldrb	r3, [r7, #3]
 801a26a:	091b      	lsrs	r3, r3, #4
 801a26c:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801a26e:	78bb      	ldrb	r3, [r7, #2]
 801a270:	091b      	lsrs	r3, r3, #4
 801a272:	b2db      	uxtb	r3, r3
 801a274:	7bfa      	ldrb	r2, [r7, #15]
 801a276:	429a      	cmp	r2, r3
 801a278:	d803      	bhi.n	801a282 <RegionCommonChanDisable+0x2a>
 801a27a:	78fa      	ldrb	r2, [r7, #3]
 801a27c:	78bb      	ldrb	r3, [r7, #2]
 801a27e:	429a      	cmp	r2, r3
 801a280:	d301      	bcc.n	801a286 <RegionCommonChanDisable+0x2e>
    {
        return false;
 801a282:	2300      	movs	r3, #0
 801a284:	e017      	b.n	801a2b6 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801a286:	7bfb      	ldrb	r3, [r7, #15]
 801a288:	005b      	lsls	r3, r3, #1
 801a28a:	687a      	ldr	r2, [r7, #4]
 801a28c:	4413      	add	r3, r2
 801a28e:	881b      	ldrh	r3, [r3, #0]
 801a290:	b21a      	sxth	r2, r3
 801a292:	78fb      	ldrb	r3, [r7, #3]
 801a294:	f003 030f 	and.w	r3, r3, #15
 801a298:	2101      	movs	r1, #1
 801a29a:	fa01 f303 	lsl.w	r3, r1, r3
 801a29e:	b21b      	sxth	r3, r3
 801a2a0:	43db      	mvns	r3, r3
 801a2a2:	b21b      	sxth	r3, r3
 801a2a4:	4013      	ands	r3, r2
 801a2a6:	b219      	sxth	r1, r3
 801a2a8:	7bfb      	ldrb	r3, [r7, #15]
 801a2aa:	005b      	lsls	r3, r3, #1
 801a2ac:	687a      	ldr	r2, [r7, #4]
 801a2ae:	4413      	add	r3, r2
 801a2b0:	b28a      	uxth	r2, r1
 801a2b2:	801a      	strh	r2, [r3, #0]

    return true;
 801a2b4:	2301      	movs	r3, #1
}
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	3714      	adds	r7, #20
 801a2ba:	46bd      	mov	sp, r7
 801a2bc:	bc80      	pop	{r7}
 801a2be:	4770      	bx	lr

0801a2c0 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 801a2c0:	b580      	push	{r7, lr}
 801a2c2:	b084      	sub	sp, #16
 801a2c4:	af00      	add	r7, sp, #0
 801a2c6:	6078      	str	r0, [r7, #4]
 801a2c8:	460b      	mov	r3, r1
 801a2ca:	70fb      	strb	r3, [r7, #3]
 801a2cc:	4613      	mov	r3, r2
 801a2ce:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 801a2d0:	2300      	movs	r3, #0
 801a2d2:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d101      	bne.n	801a2de <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801a2da:	2300      	movs	r3, #0
 801a2dc:	e018      	b.n	801a310 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801a2de:	78fb      	ldrb	r3, [r7, #3]
 801a2e0:	73bb      	strb	r3, [r7, #14]
 801a2e2:	e010      	b.n	801a306 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801a2e4:	7bbb      	ldrb	r3, [r7, #14]
 801a2e6:	005b      	lsls	r3, r3, #1
 801a2e8:	687a      	ldr	r2, [r7, #4]
 801a2ea:	4413      	add	r3, r2
 801a2ec:	881b      	ldrh	r3, [r3, #0]
 801a2ee:	2110      	movs	r1, #16
 801a2f0:	4618      	mov	r0, r3
 801a2f2:	f7ff fef9 	bl	801a0e8 <CountChannels>
 801a2f6:	4603      	mov	r3, r0
 801a2f8:	461a      	mov	r2, r3
 801a2fa:	7bfb      	ldrb	r3, [r7, #15]
 801a2fc:	4413      	add	r3, r2
 801a2fe:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801a300:	7bbb      	ldrb	r3, [r7, #14]
 801a302:	3301      	adds	r3, #1
 801a304:	73bb      	strb	r3, [r7, #14]
 801a306:	7bba      	ldrb	r2, [r7, #14]
 801a308:	78bb      	ldrb	r3, [r7, #2]
 801a30a:	429a      	cmp	r2, r3
 801a30c:	d3ea      	bcc.n	801a2e4 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801a30e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a310:	4618      	mov	r0, r3
 801a312:	3710      	adds	r7, #16
 801a314:	46bd      	mov	sp, r7
 801a316:	bd80      	pop	{r7, pc}

0801a318 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 801a318:	b480      	push	{r7}
 801a31a:	b087      	sub	sp, #28
 801a31c:	af00      	add	r7, sp, #0
 801a31e:	60f8      	str	r0, [r7, #12]
 801a320:	60b9      	str	r1, [r7, #8]
 801a322:	4613      	mov	r3, r2
 801a324:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801a326:	68fb      	ldr	r3, [r7, #12]
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d016      	beq.n	801a35a <RegionCommonChanMaskCopy+0x42>
 801a32c:	68bb      	ldr	r3, [r7, #8]
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d013      	beq.n	801a35a <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801a332:	2300      	movs	r3, #0
 801a334:	75fb      	strb	r3, [r7, #23]
 801a336:	e00c      	b.n	801a352 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 801a338:	7dfb      	ldrb	r3, [r7, #23]
 801a33a:	005b      	lsls	r3, r3, #1
 801a33c:	68ba      	ldr	r2, [r7, #8]
 801a33e:	441a      	add	r2, r3
 801a340:	7dfb      	ldrb	r3, [r7, #23]
 801a342:	005b      	lsls	r3, r3, #1
 801a344:	68f9      	ldr	r1, [r7, #12]
 801a346:	440b      	add	r3, r1
 801a348:	8812      	ldrh	r2, [r2, #0]
 801a34a:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 801a34c:	7dfb      	ldrb	r3, [r7, #23]
 801a34e:	3301      	adds	r3, #1
 801a350:	75fb      	strb	r3, [r7, #23]
 801a352:	7dfa      	ldrb	r2, [r7, #23]
 801a354:	79fb      	ldrb	r3, [r7, #7]
 801a356:	429a      	cmp	r2, r3
 801a358:	d3ee      	bcc.n	801a338 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 801a35a:	bf00      	nop
 801a35c:	371c      	adds	r7, #28
 801a35e:	46bd      	mov	sp, r7
 801a360:	bc80      	pop	{r7}
 801a362:	4770      	bx	lr

0801a364 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801a364:	b082      	sub	sp, #8
 801a366:	b580      	push	{r7, lr}
 801a368:	b086      	sub	sp, #24
 801a36a:	af00      	add	r7, sp, #0
 801a36c:	60f8      	str	r0, [r7, #12]
 801a36e:	60b9      	str	r1, [r7, #8]
 801a370:	627b      	str	r3, [r7, #36]	; 0x24
 801a372:	4613      	mov	r3, r2
 801a374:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801a376:	79f9      	ldrb	r1, [r7, #7]
 801a378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a37c:	cb0c      	ldmia	r3, {r2, r3}
 801a37e:	68f8      	ldr	r0, [r7, #12]
 801a380:	f7ff fd8c 	bl	8019e9c <GetDutyCycle>
 801a384:	4603      	mov	r3, r0
 801a386:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 801a388:	68fb      	ldr	r3, [r7, #12]
 801a38a:	68da      	ldr	r2, [r3, #12]
 801a38c:	8afb      	ldrh	r3, [r7, #22]
 801a38e:	68b9      	ldr	r1, [r7, #8]
 801a390:	fb01 f303 	mul.w	r3, r1, r3
 801a394:	429a      	cmp	r2, r3
 801a396:	d909      	bls.n	801a3ac <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 801a398:	68fb      	ldr	r3, [r7, #12]
 801a39a:	68da      	ldr	r2, [r3, #12]
 801a39c:	8afb      	ldrh	r3, [r7, #22]
 801a39e:	68b9      	ldr	r1, [r7, #8]
 801a3a0:	fb01 f303 	mul.w	r3, r1, r3
 801a3a4:	1ad2      	subs	r2, r2, r3
 801a3a6:	68fb      	ldr	r3, [r7, #12]
 801a3a8:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801a3aa:	e002      	b.n	801a3b2 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 801a3ac:	68fb      	ldr	r3, [r7, #12]
 801a3ae:	2200      	movs	r2, #0
 801a3b0:	60da      	str	r2, [r3, #12]
}
 801a3b2:	bf00      	nop
 801a3b4:	3718      	adds	r7, #24
 801a3b6:	46bd      	mov	sp, r7
 801a3b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a3bc:	b002      	add	sp, #8
 801a3be:	4770      	bx	lr

0801a3c0 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801a3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a3c2:	b08f      	sub	sp, #60	; 0x3c
 801a3c4:	af04      	add	r7, sp, #16
 801a3c6:	6039      	str	r1, [r7, #0]
 801a3c8:	4611      	mov	r1, r2
 801a3ca:	461a      	mov	r2, r3
 801a3cc:	4603      	mov	r3, r0
 801a3ce:	71fb      	strb	r3, [r7, #7]
 801a3d0:	460b      	mov	r3, r1
 801a3d2:	71bb      	strb	r3, [r7, #6]
 801a3d4:	4613      	mov	r3, r2
 801a3d6:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 801a3d8:	f04f 33ff 	mov.w	r3, #4294967295
 801a3dc:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801a3de:	f006 f9c3 	bl	8020768 <UTIL_TIMER_GetCurrentTime>
 801a3e2:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 801a3e4:	2300      	movs	r3, #0
 801a3e6:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 801a3e8:	2301      	movs	r3, #1
 801a3ea:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 801a3ec:	2300      	movs	r3, #0
 801a3ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801a3f2:	2300      	movs	r3, #0
 801a3f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801a3f8:	e0ba      	b.n	801a570 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801a3fa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a3fe:	4613      	mov	r3, r2
 801a400:	005b      	lsls	r3, r3, #1
 801a402:	4413      	add	r3, r2
 801a404:	00db      	lsls	r3, r3, #3
 801a406:	461a      	mov	r2, r3
 801a408:	683b      	ldr	r3, [r7, #0]
 801a40a:	189c      	adds	r4, r3, r2
 801a40c:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 801a410:	797a      	ldrb	r2, [r7, #5]
 801a412:	79fd      	ldrb	r5, [r7, #7]
 801a414:	69fb      	ldr	r3, [r7, #28]
 801a416:	9302      	str	r3, [sp, #8]
 801a418:	46ec      	mov	ip, sp
 801a41a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801a41e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a422:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a426:	4633      	mov	r3, r6
 801a428:	4629      	mov	r1, r5
 801a42a:	4620      	mov	r0, r4
 801a42c:	f7ff fe22 	bl	801a074 <UpdateTimeCredits>
 801a430:	4603      	mov	r3, r0
 801a432:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 801a434:	8afa      	ldrh	r2, [r7, #22]
 801a436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a438:	fb02 f303 	mul.w	r3, r2, r3
 801a43c:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801a43e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a442:	4613      	mov	r3, r2
 801a444:	005b      	lsls	r3, r3, #1
 801a446:	4413      	add	r3, r2
 801a448:	00db      	lsls	r3, r3, #3
 801a44a:	461a      	mov	r2, r3
 801a44c:	683b      	ldr	r3, [r7, #0]
 801a44e:	4413      	add	r3, r2
 801a450:	68db      	ldr	r3, [r3, #12]
 801a452:	69ba      	ldr	r2, [r7, #24]
 801a454:	429a      	cmp	r2, r3
 801a456:	d308      	bcc.n	801a46a <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801a458:	797b      	ldrb	r3, [r7, #5]
 801a45a:	f083 0301 	eor.w	r3, r3, #1
 801a45e:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801a460:	2b00      	cmp	r3, #0
 801a462:	d013      	beq.n	801a48c <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801a464:	79fb      	ldrb	r3, [r7, #7]
 801a466:	2b00      	cmp	r3, #0
 801a468:	d010      	beq.n	801a48c <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 801a46a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a46e:	4613      	mov	r3, r2
 801a470:	005b      	lsls	r3, r3, #1
 801a472:	4413      	add	r3, r2
 801a474:	00db      	lsls	r3, r3, #3
 801a476:	461a      	mov	r2, r3
 801a478:	683b      	ldr	r3, [r7, #0]
 801a47a:	4413      	add	r3, r2
 801a47c:	2201      	movs	r2, #1
 801a47e:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 801a480:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a484:	3301      	adds	r3, #1
 801a486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801a48a:	e06c      	b.n	801a566 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 801a48c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a490:	4613      	mov	r3, r2
 801a492:	005b      	lsls	r3, r3, #1
 801a494:	4413      	add	r3, r2
 801a496:	00db      	lsls	r3, r3, #3
 801a498:	461a      	mov	r2, r3
 801a49a:	683b      	ldr	r3, [r7, #0]
 801a49c:	4413      	add	r3, r2
 801a49e:	2200      	movs	r2, #0
 801a4a0:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 801a4a2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a4a6:	4613      	mov	r3, r2
 801a4a8:	005b      	lsls	r3, r3, #1
 801a4aa:	4413      	add	r3, r2
 801a4ac:	00db      	lsls	r3, r3, #3
 801a4ae:	461a      	mov	r2, r3
 801a4b0:	683b      	ldr	r3, [r7, #0]
 801a4b2:	4413      	add	r3, r2
 801a4b4:	691b      	ldr	r3, [r3, #16]
 801a4b6:	69ba      	ldr	r2, [r7, #24]
 801a4b8:	429a      	cmp	r2, r3
 801a4ba:	d215      	bcs.n	801a4e8 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801a4bc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a4c0:	4613      	mov	r3, r2
 801a4c2:	005b      	lsls	r3, r3, #1
 801a4c4:	4413      	add	r3, r2
 801a4c6:	00db      	lsls	r3, r3, #3
 801a4c8:	461a      	mov	r2, r3
 801a4ca:	683b      	ldr	r3, [r7, #0]
 801a4cc:	4413      	add	r3, r2
 801a4ce:	68db      	ldr	r3, [r3, #12]
 801a4d0:	69ba      	ldr	r2, [r7, #24]
 801a4d2:	1ad3      	subs	r3, r2, r3
 801a4d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a4d6:	4293      	cmp	r3, r2
 801a4d8:	bf28      	it	cs
 801a4da:	4613      	movcs	r3, r2
 801a4dc:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801a4de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a4e2:	3301      	adds	r3, #1
 801a4e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 801a4e8:	79fb      	ldrb	r3, [r7, #7]
 801a4ea:	f083 0301 	eor.w	r3, r3, #1
 801a4ee:	b2db      	uxtb	r3, r3
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d038      	beq.n	801a566 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 801a4f4:	2300      	movs	r3, #0
 801a4f6:	60fb      	str	r3, [r7, #12]
 801a4f8:	2300      	movs	r3, #0
 801a4fa:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 801a4fc:	8afb      	ldrh	r3, [r7, #22]
 801a4fe:	2b64      	cmp	r3, #100	; 0x64
 801a500:	d103      	bne.n	801a50a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801a502:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801a506:	60fb      	str	r3, [r7, #12]
 801a508:	e009      	b.n	801a51e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801a50a:	8afb      	ldrh	r3, [r7, #22]
 801a50c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a510:	d103      	bne.n	801a51a <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801a512:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 801a516:	60fb      	str	r3, [r7, #12]
 801a518:	e001      	b.n	801a51e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801a51a:	4b1e      	ldr	r3, [pc, #120]	; (801a594 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801a51c:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801a51e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a520:	4a1c      	ldr	r2, [pc, #112]	; (801a594 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801a522:	4293      	cmp	r3, r2
 801a524:	d90e      	bls.n	801a544 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801a526:	68fa      	ldr	r2, [r7, #12]
 801a528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a52a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801a52e:	3b30      	subs	r3, #48	; 0x30
 801a530:	4919      	ldr	r1, [pc, #100]	; (801a598 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801a532:	fba1 1303 	umull	r1, r3, r1, r3
 801a536:	0c1b      	lsrs	r3, r3, #16
 801a538:	3301      	adds	r3, #1
 801a53a:	4918      	ldr	r1, [pc, #96]	; (801a59c <RegionCommonUpdateBandTimeOff+0x1dc>)
 801a53c:	fb01 f303 	mul.w	r3, r1, r3
 801a540:	4413      	add	r3, r2
 801a542:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801a544:	f107 000c 	add.w	r0, r7, #12
 801a548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a54a:	9300      	str	r3, [sp, #0]
 801a54c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a54e:	f107 020c 	add.w	r2, r7, #12
 801a552:	ca06      	ldmia	r2, {r1, r2}
 801a554:	f005 fa1b 	bl	801f98e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 801a558:	f107 030c 	add.w	r3, r7, #12
 801a55c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a560:	f005 fad4 	bl	801fb0c <SysTimeToMs>
 801a564:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801a566:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a56a:	3301      	adds	r3, #1
 801a56c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801a570:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a574:	79bb      	ldrb	r3, [r7, #6]
 801a576:	429a      	cmp	r2, r3
 801a578:	f4ff af3f 	bcc.w	801a3fa <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 801a57c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a580:	2b00      	cmp	r3, #0
 801a582:	d102      	bne.n	801a58a <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 801a584:	f04f 33ff 	mov.w	r3, #4294967295
 801a588:	e000      	b.n	801a58c <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 801a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a58c:	4618      	mov	r0, r3
 801a58e:	372c      	adds	r7, #44	; 0x2c
 801a590:	46bd      	mov	sp, r7
 801a592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a594:	0001ec30 	.word	0x0001ec30
 801a598:	c22e4507 	.word	0xc22e4507
 801a59c:	00015180 	.word	0x00015180

0801a5a0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 801a5a0:	b480      	push	{r7}
 801a5a2:	b085      	sub	sp, #20
 801a5a4:	af00      	add	r7, sp, #0
 801a5a6:	6078      	str	r0, [r7, #4]
 801a5a8:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801a5aa:	2300      	movs	r3, #0
 801a5ac:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	781b      	ldrb	r3, [r3, #0]
 801a5b2:	2b03      	cmp	r3, #3
 801a5b4:	d13f      	bne.n	801a636 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	3301      	adds	r3, #1
 801a5ba:	781b      	ldrb	r3, [r3, #0]
 801a5bc:	b25a      	sxtb	r2, r3
 801a5be:	683b      	ldr	r3, [r7, #0]
 801a5c0:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801a5c2:	683b      	ldr	r3, [r7, #0]
 801a5c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a5c8:	f003 030f 	and.w	r3, r3, #15
 801a5cc:	b25a      	sxtb	r2, r3
 801a5ce:	683b      	ldr	r3, [r7, #0]
 801a5d0:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801a5d2:	683b      	ldr	r3, [r7, #0]
 801a5d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a5d8:	b2db      	uxtb	r3, r3
 801a5da:	091b      	lsrs	r3, r3, #4
 801a5dc:	b2db      	uxtb	r3, r3
 801a5de:	b25a      	sxtb	r2, r3
 801a5e0:	683b      	ldr	r3, [r7, #0]
 801a5e2:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	3302      	adds	r3, #2
 801a5e8:	781b      	ldrb	r3, [r3, #0]
 801a5ea:	b29a      	uxth	r2, r3
 801a5ec:	683b      	ldr	r3, [r7, #0]
 801a5ee:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 801a5f0:	683b      	ldr	r3, [r7, #0]
 801a5f2:	889b      	ldrh	r3, [r3, #4]
 801a5f4:	b21a      	sxth	r2, r3
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	3303      	adds	r3, #3
 801a5fa:	781b      	ldrb	r3, [r3, #0]
 801a5fc:	021b      	lsls	r3, r3, #8
 801a5fe:	b21b      	sxth	r3, r3
 801a600:	4313      	orrs	r3, r2
 801a602:	b21b      	sxth	r3, r3
 801a604:	b29a      	uxth	r2, r3
 801a606:	683b      	ldr	r3, [r7, #0]
 801a608:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	791a      	ldrb	r2, [r3, #4]
 801a60e:	683b      	ldr	r3, [r7, #0]
 801a610:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801a612:	683b      	ldr	r3, [r7, #0]
 801a614:	781b      	ldrb	r3, [r3, #0]
 801a616:	091b      	lsrs	r3, r3, #4
 801a618:	b2db      	uxtb	r3, r3
 801a61a:	f003 0307 	and.w	r3, r3, #7
 801a61e:	b2da      	uxtb	r2, r3
 801a620:	683b      	ldr	r3, [r7, #0]
 801a622:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801a624:	683b      	ldr	r3, [r7, #0]
 801a626:	781b      	ldrb	r3, [r3, #0]
 801a628:	f003 030f 	and.w	r3, r3, #15
 801a62c:	b2da      	uxtb	r2, r3
 801a62e:	683b      	ldr	r3, [r7, #0]
 801a630:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801a632:	2305      	movs	r3, #5
 801a634:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801a636:	7bfb      	ldrb	r3, [r7, #15]
}
 801a638:	4618      	mov	r0, r3
 801a63a:	3714      	adds	r7, #20
 801a63c:	46bd      	mov	sp, r7
 801a63e:	bc80      	pop	{r7}
 801a640:	4770      	bx	lr

0801a642 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801a642:	b5b0      	push	{r4, r5, r7, lr}
 801a644:	b088      	sub	sp, #32
 801a646:	af02      	add	r7, sp, #8
 801a648:	60f8      	str	r0, [r7, #12]
 801a64a:	60b9      	str	r1, [r7, #8]
 801a64c:	607a      	str	r2, [r7, #4]
 801a64e:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 801a650:	68fb      	ldr	r3, [r7, #12]
 801a652:	791b      	ldrb	r3, [r3, #4]
 801a654:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	799b      	ldrb	r3, [r3, #6]
 801a65a:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	79db      	ldrb	r3, [r3, #7]
 801a660:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801a662:	68fb      	ldr	r3, [r7, #12]
 801a664:	7a1b      	ldrb	r3, [r3, #8]
 801a666:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	795b      	ldrb	r3, [r3, #5]
 801a66c:	f083 0301 	eor.w	r3, r3, #1
 801a670:	b2db      	uxtb	r3, r3
 801a672:	2b00      	cmp	r3, #0
 801a674:	d008      	beq.n	801a688 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	7adb      	ldrb	r3, [r3, #11]
 801a67a:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 801a67c:	68fb      	ldr	r3, [r7, #12]
 801a67e:	7a5b      	ldrb	r3, [r3, #9]
 801a680:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 801a682:	68fb      	ldr	r3, [r7, #12]
 801a684:	7a9b      	ldrb	r3, [r3, #10]
 801a686:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 801a688:	7dfb      	ldrb	r3, [r7, #23]
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d04a      	beq.n	801a724 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 801a68e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801a692:	2b0f      	cmp	r3, #15
 801a694:	d103      	bne.n	801a69e <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 801a696:	68fb      	ldr	r3, [r7, #12]
 801a698:	7a5b      	ldrb	r3, [r3, #9]
 801a69a:	75bb      	strb	r3, [r7, #22]
 801a69c:	e01d      	b.n	801a6da <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	7b18      	ldrb	r0, [r3, #12]
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	6919      	ldr	r1, [r3, #16]
 801a6a6:	68fb      	ldr	r3, [r7, #12]
 801a6a8:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801a6ac:	68fb      	ldr	r3, [r7, #12]
 801a6ae:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801a6b2:	68fa      	ldr	r2, [r7, #12]
 801a6b4:	6992      	ldr	r2, [r2, #24]
 801a6b6:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801a6ba:	9201      	str	r2, [sp, #4]
 801a6bc:	9300      	str	r3, [sp, #0]
 801a6be:	462b      	mov	r3, r5
 801a6c0:	4622      	mov	r2, r4
 801a6c2:	f7ff fd3a 	bl	801a13a <RegionCommonChanVerifyDr>
 801a6c6:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 801a6c8:	f083 0301 	eor.w	r3, r3, #1
 801a6cc:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d003      	beq.n	801a6da <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 801a6d2:	7dfb      	ldrb	r3, [r7, #23]
 801a6d4:	f023 0302 	bic.w	r3, r3, #2
 801a6d8:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801a6da:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801a6de:	2b0f      	cmp	r3, #15
 801a6e0:	d103      	bne.n	801a6ea <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 801a6e2:	68fb      	ldr	r3, [r7, #12]
 801a6e4:	7a9b      	ldrb	r3, [r3, #10]
 801a6e6:	757b      	strb	r3, [r7, #21]
 801a6e8:	e01c      	b.n	801a724 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801a6ea:	68fb      	ldr	r3, [r7, #12]
 801a6ec:	f993 101d 	ldrsb.w	r1, [r3, #29]
 801a6f0:	68fb      	ldr	r3, [r7, #12]
 801a6f2:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801a6f6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801a6fa:	4618      	mov	r0, r3
 801a6fc:	f7ff fd8f 	bl	801a21e <RegionCommonValueInRange>
 801a700:	4603      	mov	r3, r0
 801a702:	2b00      	cmp	r3, #0
 801a704:	d10e      	bne.n	801a724 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801a706:	68fb      	ldr	r3, [r7, #12]
 801a708:	f993 301d 	ldrsb.w	r3, [r3, #29]
 801a70c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 801a710:	429a      	cmp	r2, r3
 801a712:	da03      	bge.n	801a71c <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801a714:	68fb      	ldr	r3, [r7, #12]
 801a716:	7f5b      	ldrb	r3, [r3, #29]
 801a718:	757b      	strb	r3, [r7, #21]
 801a71a:	e003      	b.n	801a724 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801a71c:	7dfb      	ldrb	r3, [r7, #23]
 801a71e:	f023 0304 	bic.w	r3, r3, #4
 801a722:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801a724:	7dfb      	ldrb	r3, [r7, #23]
 801a726:	2b07      	cmp	r3, #7
 801a728:	d105      	bne.n	801a736 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801a72a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d101      	bne.n	801a736 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 801a732:	2301      	movs	r3, #1
 801a734:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801a736:	68bb      	ldr	r3, [r7, #8]
 801a738:	7dba      	ldrb	r2, [r7, #22]
 801a73a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	7d7a      	ldrb	r2, [r7, #21]
 801a740:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801a742:	7d3a      	ldrb	r2, [r7, #20]
 801a744:	683b      	ldr	r3, [r7, #0]
 801a746:	701a      	strb	r2, [r3, #0]

    return status;
 801a748:	7dfb      	ldrb	r3, [r7, #23]
}
 801a74a:	4618      	mov	r0, r3
 801a74c:	3718      	adds	r7, #24
 801a74e:	46bd      	mov	sp, r7
 801a750:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a754 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 801a754:	b480      	push	{r7}
 801a756:	b083      	sub	sp, #12
 801a758:	af00      	add	r7, sp, #0
 801a75a:	4603      	mov	r3, r0
 801a75c:	6039      	str	r1, [r7, #0]
 801a75e:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 801a760:	79fb      	ldrb	r3, [r7, #7]
 801a762:	4a06      	ldr	r2, [pc, #24]	; (801a77c <RegionCommonComputeSymbolTimeLoRa+0x28>)
 801a764:	fa02 f303 	lsl.w	r3, r2, r3
 801a768:	461a      	mov	r2, r3
 801a76a:	683b      	ldr	r3, [r7, #0]
 801a76c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801a770:	4618      	mov	r0, r3
 801a772:	370c      	adds	r7, #12
 801a774:	46bd      	mov	sp, r7
 801a776:	bc80      	pop	{r7}
 801a778:	4770      	bx	lr
 801a77a:	bf00      	nop
 801a77c:	000f4240 	.word	0x000f4240

0801a780 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 801a780:	b480      	push	{r7}
 801a782:	b083      	sub	sp, #12
 801a784:	af00      	add	r7, sp, #0
 801a786:	4603      	mov	r3, r0
 801a788:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 801a78a:	79fb      	ldrb	r3, [r7, #7]
 801a78c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a790:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801a794:	4618      	mov	r0, r3
 801a796:	370c      	adds	r7, #12
 801a798:	46bd      	mov	sp, r7
 801a79a:	bc80      	pop	{r7}
 801a79c:	4770      	bx	lr
	...

0801a7a0 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 801a7a0:	b480      	push	{r7}
 801a7a2:	b085      	sub	sp, #20
 801a7a4:	af00      	add	r7, sp, #0
 801a7a6:	60f8      	str	r0, [r7, #12]
 801a7a8:	607a      	str	r2, [r7, #4]
 801a7aa:	603b      	str	r3, [r7, #0]
 801a7ac:	460b      	mov	r3, r1
 801a7ae:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 801a7b0:	7afa      	ldrb	r2, [r7, #11]
 801a7b2:	7afb      	ldrb	r3, [r7, #11]
 801a7b4:	3b04      	subs	r3, #4
 801a7b6:	4619      	mov	r1, r3
 801a7b8:	68fb      	ldr	r3, [r7, #12]
 801a7ba:	fb03 f101 	mul.w	r1, r3, r1
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a7c4:	fb00 f303 	mul.w	r3, r0, r3
 801a7c8:	440b      	add	r3, r1
 801a7ca:	005b      	lsls	r3, r3, #1
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d013      	beq.n	801a7f8 <RegionCommonComputeRxWindowParameters+0x58>
 801a7d0:	7afb      	ldrb	r3, [r7, #11]
 801a7d2:	3b04      	subs	r3, #4
 801a7d4:	4619      	mov	r1, r3
 801a7d6:	68fb      	ldr	r3, [r7, #12]
 801a7d8:	fb03 f101 	mul.w	r1, r3, r1
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a7e2:	fb00 f303 	mul.w	r3, r0, r3
 801a7e6:	440b      	add	r3, r1
 801a7e8:	0059      	lsls	r1, r3, #1
 801a7ea:	68fb      	ldr	r3, [r7, #12]
 801a7ec:	440b      	add	r3, r1
 801a7ee:	1e59      	subs	r1, r3, #1
 801a7f0:	68fb      	ldr	r3, [r7, #12]
 801a7f2:	fbb1 f3f3 	udiv	r3, r1, r3
 801a7f6:	e00f      	b.n	801a818 <RegionCommonComputeRxWindowParameters+0x78>
 801a7f8:	7afb      	ldrb	r3, [r7, #11]
 801a7fa:	3b04      	subs	r3, #4
 801a7fc:	4619      	mov	r1, r3
 801a7fe:	68fb      	ldr	r3, [r7, #12]
 801a800:	fb03 f101 	mul.w	r1, r3, r1
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a80a:	fb00 f303 	mul.w	r3, r0, r3
 801a80e:	440b      	add	r3, r1
 801a810:	0059      	lsls	r1, r3, #1
 801a812:	68fb      	ldr	r3, [r7, #12]
 801a814:	fbb1 f3f3 	udiv	r3, r1, r3
 801a818:	429a      	cmp	r2, r3
 801a81a:	bf38      	it	cc
 801a81c:	461a      	movcc	r2, r3
 801a81e:	69bb      	ldr	r3, [r7, #24]
 801a820:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801a822:	68fb      	ldr	r3, [r7, #12]
 801a824:	009b      	lsls	r3, r3, #2
 801a826:	4619      	mov	r1, r3
 801a828:	69bb      	ldr	r3, [r7, #24]
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	68fa      	ldr	r2, [r7, #12]
 801a82e:	fb02 f303 	mul.w	r3, r2, r3
 801a832:	2b00      	cmp	r3, #0
 801a834:	d007      	beq.n	801a846 <RegionCommonComputeRxWindowParameters+0xa6>
 801a836:	69bb      	ldr	r3, [r7, #24]
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	68fa      	ldr	r2, [r7, #12]
 801a83c:	fb02 f303 	mul.w	r3, r2, r3
 801a840:	3301      	adds	r3, #1
 801a842:	085b      	lsrs	r3, r3, #1
 801a844:	e005      	b.n	801a852 <RegionCommonComputeRxWindowParameters+0xb2>
 801a846:	69bb      	ldr	r3, [r7, #24]
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	68fa      	ldr	r2, [r7, #12]
 801a84c:	fb02 f303 	mul.w	r3, r2, r3
 801a850:	085b      	lsrs	r3, r3, #1
 801a852:	1acb      	subs	r3, r1, r3
 801a854:	683a      	ldr	r2, [r7, #0]
 801a856:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a85a:	fb01 f202 	mul.w	r2, r1, r2
 801a85e:	1a9b      	subs	r3, r3, r2
 801a860:	2b00      	cmp	r3, #0
 801a862:	dd27      	ble.n	801a8b4 <RegionCommonComputeRxWindowParameters+0x114>
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	009b      	lsls	r3, r3, #2
 801a868:	4619      	mov	r1, r3
 801a86a:	69bb      	ldr	r3, [r7, #24]
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	68fa      	ldr	r2, [r7, #12]
 801a870:	fb02 f303 	mul.w	r3, r2, r3
 801a874:	2b00      	cmp	r3, #0
 801a876:	d007      	beq.n	801a888 <RegionCommonComputeRxWindowParameters+0xe8>
 801a878:	69bb      	ldr	r3, [r7, #24]
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	68fa      	ldr	r2, [r7, #12]
 801a87e:	fb02 f303 	mul.w	r3, r2, r3
 801a882:	3301      	adds	r3, #1
 801a884:	085b      	lsrs	r3, r3, #1
 801a886:	e005      	b.n	801a894 <RegionCommonComputeRxWindowParameters+0xf4>
 801a888:	69bb      	ldr	r3, [r7, #24]
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	68fa      	ldr	r2, [r7, #12]
 801a88e:	fb02 f303 	mul.w	r3, r2, r3
 801a892:	085b      	lsrs	r3, r3, #1
 801a894:	1acb      	subs	r3, r1, r3
 801a896:	683a      	ldr	r2, [r7, #0]
 801a898:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a89c:	fb01 f202 	mul.w	r2, r1, r2
 801a8a0:	1a9b      	subs	r3, r3, r2
 801a8a2:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 801a8a6:	4a19      	ldr	r2, [pc, #100]	; (801a90c <RegionCommonComputeRxWindowParameters+0x16c>)
 801a8a8:	fb82 1203 	smull	r1, r2, r2, r3
 801a8ac:	1192      	asrs	r2, r2, #6
 801a8ae:	17db      	asrs	r3, r3, #31
 801a8b0:	1ad3      	subs	r3, r2, r3
 801a8b2:	e024      	b.n	801a8fe <RegionCommonComputeRxWindowParameters+0x15e>
 801a8b4:	68fb      	ldr	r3, [r7, #12]
 801a8b6:	009b      	lsls	r3, r3, #2
 801a8b8:	4619      	mov	r1, r3
 801a8ba:	69bb      	ldr	r3, [r7, #24]
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	68fa      	ldr	r2, [r7, #12]
 801a8c0:	fb02 f303 	mul.w	r3, r2, r3
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d007      	beq.n	801a8d8 <RegionCommonComputeRxWindowParameters+0x138>
 801a8c8:	69bb      	ldr	r3, [r7, #24]
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	68fa      	ldr	r2, [r7, #12]
 801a8ce:	fb02 f303 	mul.w	r3, r2, r3
 801a8d2:	3301      	adds	r3, #1
 801a8d4:	085b      	lsrs	r3, r3, #1
 801a8d6:	e005      	b.n	801a8e4 <RegionCommonComputeRxWindowParameters+0x144>
 801a8d8:	69bb      	ldr	r3, [r7, #24]
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	68fa      	ldr	r2, [r7, #12]
 801a8de:	fb02 f303 	mul.w	r3, r2, r3
 801a8e2:	085b      	lsrs	r3, r3, #1
 801a8e4:	1acb      	subs	r3, r1, r3
 801a8e6:	683a      	ldr	r2, [r7, #0]
 801a8e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a8ec:	fb01 f202 	mul.w	r2, r1, r2
 801a8f0:	1a9b      	subs	r3, r3, r2
 801a8f2:	4a06      	ldr	r2, [pc, #24]	; (801a90c <RegionCommonComputeRxWindowParameters+0x16c>)
 801a8f4:	fb82 1203 	smull	r1, r2, r2, r3
 801a8f8:	1192      	asrs	r2, r2, #6
 801a8fa:	17db      	asrs	r3, r3, #31
 801a8fc:	1ad3      	subs	r3, r2, r3
 801a8fe:	69fa      	ldr	r2, [r7, #28]
 801a900:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801a902:	bf00      	nop
 801a904:	3714      	adds	r7, #20
 801a906:	46bd      	mov	sp, r7
 801a908:	bc80      	pop	{r7}
 801a90a:	4770      	bx	lr
 801a90c:	10624dd3 	.word	0x10624dd3

0801a910 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 801a910:	b580      	push	{r7, lr}
 801a912:	b086      	sub	sp, #24
 801a914:	af00      	add	r7, sp, #0
 801a916:	4603      	mov	r3, r0
 801a918:	60b9      	str	r1, [r7, #8]
 801a91a:	607a      	str	r2, [r7, #4]
 801a91c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801a91e:	2300      	movs	r3, #0
 801a920:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801a922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a926:	005b      	lsls	r3, r3, #1
 801a928:	4618      	mov	r0, r3
 801a92a:	f7e6 f9b1 	bl	8000c90 <__aeabi_ui2f>
 801a92e:	4603      	mov	r3, r0
 801a930:	4619      	mov	r1, r3
 801a932:	68b8      	ldr	r0, [r7, #8]
 801a934:	f7e6 f8fa 	bl	8000b2c <__aeabi_fsub>
 801a938:	4603      	mov	r3, r0
 801a93a:	6879      	ldr	r1, [r7, #4]
 801a93c:	4618      	mov	r0, r3
 801a93e:	f7e6 f8f5 	bl	8000b2c <__aeabi_fsub>
 801a942:	4603      	mov	r3, r0
 801a944:	4618      	mov	r0, r3
 801a946:	f7e5 fd83 	bl	8000450 <__aeabi_f2d>
 801a94a:	4602      	mov	r2, r0
 801a94c:	460b      	mov	r3, r1
 801a94e:	4610      	mov	r0, r2
 801a950:	4619      	mov	r1, r3
 801a952:	f006 fb05 	bl	8020f60 <floor>
 801a956:	4602      	mov	r2, r0
 801a958:	460b      	mov	r3, r1
 801a95a:	4610      	mov	r0, r2
 801a95c:	4619      	mov	r1, r3
 801a95e:	f7e6 f869 	bl	8000a34 <__aeabi_d2iz>
 801a962:	4603      	mov	r3, r0
 801a964:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801a966:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a96a:	4618      	mov	r0, r3
 801a96c:	3718      	adds	r7, #24
 801a96e:	46bd      	mov	sp, r7
 801a970:	bd80      	pop	{r7, pc}
	...

0801a974 <RegionCommonRxBeaconSetup>:

void RegionCommonRxBeaconSetup( RegionCommonRxBeaconSetupParams_t* rxBeaconSetupParams )
{
 801a974:	b5b0      	push	{r4, r5, r7, lr}
 801a976:	b08e      	sub	sp, #56	; 0x38
 801a978:	af0a      	add	r7, sp, #40	; 0x28
 801a97a:	6078      	str	r0, [r7, #4]
    bool rxContinuous = true;
 801a97c:	2301      	movs	r3, #1
 801a97e:	73fb      	strb	r3, [r7, #15]
    uint8_t datarate;

    // Set the radio into sleep mode
    Radio.Sleep( );
 801a980:	4b29      	ldr	r3, [pc, #164]	; (801aa28 <RegionCommonRxBeaconSetup+0xb4>)
 801a982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a984:	4798      	blx	r3

    // Setup frequency and payload length
    Radio.SetChannel( rxBeaconSetupParams->Frequency );
 801a986:	4b28      	ldr	r3, [pc, #160]	; (801aa28 <RegionCommonRxBeaconSetup+0xb4>)
 801a988:	68db      	ldr	r3, [r3, #12]
 801a98a:	687a      	ldr	r2, [r7, #4]
 801a98c:	6852      	ldr	r2, [r2, #4]
 801a98e:	4610      	mov	r0, r2
 801a990:	4798      	blx	r3
    Radio.SetMaxPayloadLength( MODEM_LORA, rxBeaconSetupParams->BeaconSize );
 801a992:	4b25      	ldr	r3, [pc, #148]	; (801aa28 <RegionCommonRxBeaconSetup+0xb4>)
 801a994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a996:	687a      	ldr	r2, [r7, #4]
 801a998:	7a12      	ldrb	r2, [r2, #8]
 801a99a:	4611      	mov	r1, r2
 801a99c:	2001      	movs	r0, #1
 801a99e:	4798      	blx	r3

    // Check the RX continuous mode
    if( rxBeaconSetupParams->RxTime != 0 )
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	68db      	ldr	r3, [r3, #12]
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d001      	beq.n	801a9ac <RegionCommonRxBeaconSetup+0x38>
    {
        rxContinuous = false;
 801a9a8:	2300      	movs	r3, #0
 801a9aa:	73fb      	strb	r3, [r7, #15]
    }

    // Get region specific datarate
    datarate = rxBeaconSetupParams->Datarates[rxBeaconSetupParams->BeaconDatarate];
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	681b      	ldr	r3, [r3, #0]
 801a9b0:	687a      	ldr	r2, [r7, #4]
 801a9b2:	7a52      	ldrb	r2, [r2, #9]
 801a9b4:	4413      	add	r3, r2
 801a9b6:	781b      	ldrb	r3, [r3, #0]
 801a9b8:	73bb      	strb	r3, [r7, #14]

    // Setup radio
    Radio.SetRxConfig( MODEM_LORA, rxBeaconSetupParams->BeaconChannelBW, datarate,
 801a9ba:	4b1b      	ldr	r3, [pc, #108]	; (801aa28 <RegionCommonRxBeaconSetup+0xb4>)
 801a9bc:	699c      	ldr	r4, [r3, #24]
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	7a9b      	ldrb	r3, [r3, #10]
 801a9c2:	461d      	mov	r5, r3
 801a9c4:	7bb8      	ldrb	r0, [r7, #14]
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	8a1b      	ldrh	r3, [r3, #16]
 801a9ca:	687a      	ldr	r2, [r7, #4]
 801a9cc:	7a12      	ldrb	r2, [r2, #8]
 801a9ce:	7bf9      	ldrb	r1, [r7, #15]
 801a9d0:	9109      	str	r1, [sp, #36]	; 0x24
 801a9d2:	2100      	movs	r1, #0
 801a9d4:	9108      	str	r1, [sp, #32]
 801a9d6:	2100      	movs	r1, #0
 801a9d8:	9107      	str	r1, [sp, #28]
 801a9da:	2100      	movs	r1, #0
 801a9dc:	9106      	str	r1, [sp, #24]
 801a9de:	2100      	movs	r1, #0
 801a9e0:	9105      	str	r1, [sp, #20]
 801a9e2:	9204      	str	r2, [sp, #16]
 801a9e4:	2201      	movs	r2, #1
 801a9e6:	9203      	str	r2, [sp, #12]
 801a9e8:	9302      	str	r3, [sp, #8]
 801a9ea:	230a      	movs	r3, #10
 801a9ec:	9301      	str	r3, [sp, #4]
 801a9ee:	2300      	movs	r3, #0
 801a9f0:	9300      	str	r3, [sp, #0]
 801a9f2:	2301      	movs	r3, #1
 801a9f4:	4602      	mov	r2, r0
 801a9f6:	4629      	mov	r1, r5
 801a9f8:	2001      	movs	r0, #1
 801a9fa:	47a0      	blx	r4
                       1, 0, 10, rxBeaconSetupParams->SymbolTimeout, true, rxBeaconSetupParams->BeaconSize, false, 0, 0, false, rxContinuous );

    Radio.Rx( rxBeaconSetupParams->RxTime );
 801a9fc:	4b0a      	ldr	r3, [pc, #40]	; (801aa28 <RegionCommonRxBeaconSetup+0xb4>)
 801a9fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aa00:	687a      	ldr	r2, [r7, #4]
 801aa02:	68d2      	ldr	r2, [r2, #12]
 801aa04:	4610      	mov	r0, r2
 801aa06:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Beacon parameters */
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	685b      	ldr	r3, [r3, #4]
 801aa0c:	687a      	ldr	r2, [r7, #4]
 801aa0e:	7a52      	ldrb	r2, [r2, #9]
 801aa10:	9201      	str	r2, [sp, #4]
 801aa12:	9300      	str	r3, [sp, #0]
 801aa14:	4b05      	ldr	r3, [pc, #20]	; (801aa2c <RegionCommonRxBeaconSetup+0xb8>)
 801aa16:	2201      	movs	r2, #1
 801aa18:	2100      	movs	r1, #0
 801aa1a:	2002      	movs	r0, #2
 801aa1c:	f005 ff94 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
    /* ST_WORKAROUND_END */
}
 801aa20:	bf00      	nop
 801aa22:	3710      	adds	r7, #16
 801aa24:	46bd      	mov	sp, r7
 801aa26:	bdb0      	pop	{r4, r5, r7, pc}
 801aa28:	08021e08 	.word	0x08021e08
 801aa2c:	0802180c 	.word	0x0802180c

0801aa30 <RegionCommonCountNbOfEnabledChannels>:

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801aa30:	b590      	push	{r4, r7, lr}
 801aa32:	b087      	sub	sp, #28
 801aa34:	af00      	add	r7, sp, #0
 801aa36:	60f8      	str	r0, [r7, #12]
 801aa38:	60b9      	str	r1, [r7, #8]
 801aa3a:	607a      	str	r2, [r7, #4]
 801aa3c:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 801aa3e:	2300      	movs	r3, #0
 801aa40:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 801aa42:	2300      	movs	r3, #0
 801aa44:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801aa46:	2300      	movs	r3, #0
 801aa48:	757b      	strb	r3, [r7, #21]
 801aa4a:	2300      	movs	r3, #0
 801aa4c:	753b      	strb	r3, [r7, #20]
 801aa4e:	e09c      	b.n	801ab8a <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801aa50:	2300      	movs	r3, #0
 801aa52:	74fb      	strb	r3, [r7, #19]
 801aa54:	e08f      	b.n	801ab76 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	685a      	ldr	r2, [r3, #4]
 801aa5a:	7d3b      	ldrb	r3, [r7, #20]
 801aa5c:	005b      	lsls	r3, r3, #1
 801aa5e:	4413      	add	r3, r2
 801aa60:	881b      	ldrh	r3, [r3, #0]
 801aa62:	461a      	mov	r2, r3
 801aa64:	7cfb      	ldrb	r3, [r7, #19]
 801aa66:	fa42 f303 	asr.w	r3, r2, r3
 801aa6a:	f003 0301 	and.w	r3, r3, #1
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d07e      	beq.n	801ab70 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801aa72:	68fb      	ldr	r3, [r7, #12]
 801aa74:	689a      	ldr	r2, [r3, #8]
 801aa76:	7d79      	ldrb	r1, [r7, #21]
 801aa78:	7cfb      	ldrb	r3, [r7, #19]
 801aa7a:	440b      	add	r3, r1
 801aa7c:	4619      	mov	r1, r3
 801aa7e:	460b      	mov	r3, r1
 801aa80:	005b      	lsls	r3, r3, #1
 801aa82:	440b      	add	r3, r1
 801aa84:	009b      	lsls	r3, r3, #2
 801aa86:	4413      	add	r3, r2
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	d06b      	beq.n	801ab66 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801aa8e:	68fb      	ldr	r3, [r7, #12]
 801aa90:	781b      	ldrb	r3, [r3, #0]
 801aa92:	f083 0301 	eor.w	r3, r3, #1
 801aa96:	b2db      	uxtb	r3, r3
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d011      	beq.n	801aac0 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d00d      	beq.n	801aac0 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	695a      	ldr	r2, [r3, #20]
 801aaa8:	7d3b      	ldrb	r3, [r7, #20]
 801aaaa:	005b      	lsls	r3, r3, #1
 801aaac:	4413      	add	r3, r2
 801aaae:	881b      	ldrh	r3, [r3, #0]
 801aab0:	461a      	mov	r2, r3
 801aab2:	7cfb      	ldrb	r3, [r7, #19]
 801aab4:	fa42 f303 	asr.w	r3, r2, r3
 801aab8:	f003 0301 	and.w	r3, r3, #1
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	d054      	beq.n	801ab6a <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801aac0:	68fb      	ldr	r3, [r7, #12]
 801aac2:	785b      	ldrb	r3, [r3, #1]
 801aac4:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801aac6:	68fb      	ldr	r3, [r7, #12]
 801aac8:	689a      	ldr	r2, [r3, #8]
 801aaca:	7d79      	ldrb	r1, [r7, #21]
 801aacc:	7cfb      	ldrb	r3, [r7, #19]
 801aace:	440b      	add	r3, r1
 801aad0:	4619      	mov	r1, r3
 801aad2:	460b      	mov	r3, r1
 801aad4:	005b      	lsls	r3, r3, #1
 801aad6:	440b      	add	r3, r1
 801aad8:	009b      	lsls	r3, r3, #2
 801aada:	4413      	add	r3, r2
 801aadc:	7a1b      	ldrb	r3, [r3, #8]
 801aade:	f343 0303 	sbfx	r3, r3, #0, #4
 801aae2:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801aae4:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801aae6:	68fb      	ldr	r3, [r7, #12]
 801aae8:	689a      	ldr	r2, [r3, #8]
 801aaea:	7d79      	ldrb	r1, [r7, #21]
 801aaec:	7cfb      	ldrb	r3, [r7, #19]
 801aaee:	440b      	add	r3, r1
 801aaf0:	4619      	mov	r1, r3
 801aaf2:	460b      	mov	r3, r1
 801aaf4:	005b      	lsls	r3, r3, #1
 801aaf6:	440b      	add	r3, r1
 801aaf8:	009b      	lsls	r3, r3, #2
 801aafa:	4413      	add	r3, r2
 801aafc:	7a1b      	ldrb	r3, [r3, #8]
 801aafe:	f343 1303 	sbfx	r3, r3, #4, #4
 801ab02:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801ab04:	461a      	mov	r2, r3
 801ab06:	4621      	mov	r1, r4
 801ab08:	f7ff fb89 	bl	801a21e <RegionCommonValueInRange>
 801ab0c:	4603      	mov	r3, r0
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d02d      	beq.n	801ab6e <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801ab12:	68fb      	ldr	r3, [r7, #12]
 801ab14:	68da      	ldr	r2, [r3, #12]
 801ab16:	68fb      	ldr	r3, [r7, #12]
 801ab18:	6899      	ldr	r1, [r3, #8]
 801ab1a:	7d78      	ldrb	r0, [r7, #21]
 801ab1c:	7cfb      	ldrb	r3, [r7, #19]
 801ab1e:	4403      	add	r3, r0
 801ab20:	4618      	mov	r0, r3
 801ab22:	4603      	mov	r3, r0
 801ab24:	005b      	lsls	r3, r3, #1
 801ab26:	4403      	add	r3, r0
 801ab28:	009b      	lsls	r3, r3, #2
 801ab2a:	440b      	add	r3, r1
 801ab2c:	7a5b      	ldrb	r3, [r3, #9]
 801ab2e:	4619      	mov	r1, r3
 801ab30:	460b      	mov	r3, r1
 801ab32:	005b      	lsls	r3, r3, #1
 801ab34:	440b      	add	r3, r1
 801ab36:	00db      	lsls	r3, r3, #3
 801ab38:	4413      	add	r3, r2
 801ab3a:	7d1b      	ldrb	r3, [r3, #20]
 801ab3c:	f083 0301 	eor.w	r3, r3, #1
 801ab40:	b2db      	uxtb	r3, r3
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d003      	beq.n	801ab4e <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 801ab46:	7dbb      	ldrb	r3, [r7, #22]
 801ab48:	3301      	adds	r3, #1
 801ab4a:	75bb      	strb	r3, [r7, #22]
                    continue;
 801ab4c:	e010      	b.n	801ab70 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 801ab4e:	7dfb      	ldrb	r3, [r7, #23]
 801ab50:	1c5a      	adds	r2, r3, #1
 801ab52:	75fa      	strb	r2, [r7, #23]
 801ab54:	461a      	mov	r2, r3
 801ab56:	68bb      	ldr	r3, [r7, #8]
 801ab58:	4413      	add	r3, r2
 801ab5a:	7d79      	ldrb	r1, [r7, #21]
 801ab5c:	7cfa      	ldrb	r2, [r7, #19]
 801ab5e:	440a      	add	r2, r1
 801ab60:	b2d2      	uxtb	r2, r2
 801ab62:	701a      	strb	r2, [r3, #0]
 801ab64:	e004      	b.n	801ab70 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801ab66:	bf00      	nop
 801ab68:	e002      	b.n	801ab70 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 801ab6a:	bf00      	nop
 801ab6c:	e000      	b.n	801ab70 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801ab6e:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801ab70:	7cfb      	ldrb	r3, [r7, #19]
 801ab72:	3301      	adds	r3, #1
 801ab74:	74fb      	strb	r3, [r7, #19]
 801ab76:	7cfb      	ldrb	r3, [r7, #19]
 801ab78:	2b0f      	cmp	r3, #15
 801ab7a:	f67f af6c 	bls.w	801aa56 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801ab7e:	7d7b      	ldrb	r3, [r7, #21]
 801ab80:	3310      	adds	r3, #16
 801ab82:	757b      	strb	r3, [r7, #21]
 801ab84:	7d3b      	ldrb	r3, [r7, #20]
 801ab86:	3301      	adds	r3, #1
 801ab88:	753b      	strb	r3, [r7, #20]
 801ab8a:	7d7b      	ldrb	r3, [r7, #21]
 801ab8c:	b29a      	uxth	r2, r3
 801ab8e:	68fb      	ldr	r3, [r7, #12]
 801ab90:	8a1b      	ldrh	r3, [r3, #16]
 801ab92:	429a      	cmp	r2, r3
 801ab94:	f4ff af5c 	bcc.w	801aa50 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	7dfa      	ldrb	r2, [r7, #23]
 801ab9c:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801ab9e:	683b      	ldr	r3, [r7, #0]
 801aba0:	7dba      	ldrb	r2, [r7, #22]
 801aba2:	701a      	strb	r2, [r3, #0]
}
 801aba4:	bf00      	nop
 801aba6:	371c      	adds	r7, #28
 801aba8:	46bd      	mov	sp, r7
 801abaa:	bd90      	pop	{r4, r7, pc}

0801abac <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801abac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abae:	b08b      	sub	sp, #44	; 0x2c
 801abb0:	af04      	add	r7, sp, #16
 801abb2:	60f8      	str	r0, [r7, #12]
 801abb4:	60b9      	str	r1, [r7, #8]
 801abb6:	607a      	str	r2, [r7, #4]
 801abb8:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801abba:	68fb      	ldr	r3, [r7, #12]
 801abbc:	685b      	ldr	r3, [r3, #4]
 801abbe:	4618      	mov	r0, r3
 801abc0:	f005 fde4 	bl	802078c <UTIL_TIMER_GetElapsedTime>
 801abc4:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801abc6:	68fb      	ldr	r3, [r7, #12]
 801abc8:	681a      	ldr	r2, [r3, #0]
 801abca:	697b      	ldr	r3, [r7, #20]
 801abcc:	1ad2      	subs	r2, r2, r3
 801abce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801abd0:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 801abd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801abd4:	2201      	movs	r2, #1
 801abd6:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801abd8:	683b      	ldr	r3, [r7, #0]
 801abda:	2200      	movs	r2, #0
 801abdc:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801abde:	68fb      	ldr	r3, [r7, #12]
 801abe0:	685b      	ldr	r3, [r3, #4]
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d004      	beq.n	801abf0 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801abe6:	68fb      	ldr	r3, [r7, #12]
 801abe8:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801abea:	697a      	ldr	r2, [r7, #20]
 801abec:	429a      	cmp	r2, r3
 801abee:	d32b      	bcc.n	801ac48 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801abf0:	68bb      	ldr	r3, [r7, #8]
 801abf2:	2200      	movs	r2, #0
 801abf4:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801abf6:	68fb      	ldr	r3, [r7, #12]
 801abf8:	69db      	ldr	r3, [r3, #28]
 801abfa:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801ac00:	68dd      	ldr	r5, [r3, #12]
 801ac02:	68fb      	ldr	r3, [r7, #12]
 801ac04:	7a5e      	ldrb	r6, [r3, #9]
 801ac06:	68fb      	ldr	r3, [r7, #12]
 801ac08:	f893 c008 	ldrb.w	ip, [r3, #8]
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	7d1b      	ldrb	r3, [r3, #20]
 801ac10:	68fa      	ldr	r2, [r7, #12]
 801ac12:	6992      	ldr	r2, [r2, #24]
 801ac14:	9203      	str	r2, [sp, #12]
 801ac16:	68fa      	ldr	r2, [r7, #12]
 801ac18:	f10d 0e04 	add.w	lr, sp, #4
 801ac1c:	320c      	adds	r2, #12
 801ac1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ac22:	e88e 0003 	stmia.w	lr, {r0, r1}
 801ac26:	9300      	str	r3, [sp, #0]
 801ac28:	4663      	mov	r3, ip
 801ac2a:	4632      	mov	r2, r6
 801ac2c:	4629      	mov	r1, r5
 801ac2e:	4620      	mov	r0, r4
 801ac30:	f7ff fbc6 	bl	801a3c0 <RegionCommonUpdateBandTimeOff>
 801ac34:	4602      	mov	r2, r0
 801ac36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac38:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 801ac3a:	68fb      	ldr	r3, [r7, #12]
 801ac3c:	69d8      	ldr	r0, [r3, #28]
 801ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac40:	683a      	ldr	r2, [r7, #0]
 801ac42:	6879      	ldr	r1, [r7, #4]
 801ac44:	f7ff fef4 	bl	801aa30 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801ac48:	683b      	ldr	r3, [r7, #0]
 801ac4a:	781b      	ldrb	r3, [r3, #0]
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d004      	beq.n	801ac5a <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801ac50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac52:	2200      	movs	r2, #0
 801ac54:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801ac56:	2300      	movs	r3, #0
 801ac58:	e006      	b.n	801ac68 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 801ac5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac5c:	781b      	ldrb	r3, [r3, #0]
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d001      	beq.n	801ac66 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801ac62:	230b      	movs	r3, #11
 801ac64:	e000      	b.n	801ac68 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801ac66:	230c      	movs	r3, #12
    }
}
 801ac68:	4618      	mov	r0, r3
 801ac6a:	371c      	adds	r7, #28
 801ac6c:	46bd      	mov	sp, r7
 801ac6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ac70 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801ac70:	b5b0      	push	{r4, r5, r7, lr}
 801ac72:	b086      	sub	sp, #24
 801ac74:	af02      	add	r7, sp, #8
 801ac76:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	781b      	ldrb	r3, [r3, #0]
 801ac7c:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	f993 2000 	ldrsb.w	r2, [r3]
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801ac8a:	429a      	cmp	r2, r3
 801ac8c:	d103      	bne.n	801ac96 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801ac94:	e026      	b.n	801ace4 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 801ac96:	7bfb      	ldrb	r3, [r7, #15]
 801ac98:	3b01      	subs	r3, #1
 801ac9a:	b2db      	uxtb	r3, r3
 801ac9c:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801aca4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801aca8:	429a      	cmp	r2, r3
 801acaa:	d019      	beq.n	801ace0 <RegionCommonGetNextLowerTxDr+0x70>
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	78d8      	ldrb	r0, [r3, #3]
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	6859      	ldr	r1, [r3, #4]
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	f993 5002 	ldrsb.w	r5, [r3, #2]
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801acc0:	687a      	ldr	r2, [r7, #4]
 801acc2:	6892      	ldr	r2, [r2, #8]
 801acc4:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801acc8:	9201      	str	r2, [sp, #4]
 801acca:	9300      	str	r3, [sp, #0]
 801accc:	462b      	mov	r3, r5
 801acce:	4622      	mov	r2, r4
 801acd0:	f7ff fa33 	bl	801a13a <RegionCommonChanVerifyDr>
 801acd4:	4603      	mov	r3, r0
 801acd6:	f083 0301 	eor.w	r3, r3, #1
 801acda:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d1da      	bne.n	801ac96 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801ace0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801ace4:	4618      	mov	r0, r3
 801ace6:	3710      	adds	r7, #16
 801ace8:	46bd      	mov	sp, r7
 801acea:	bdb0      	pop	{r4, r5, r7, pc}

0801acec <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801acec:	b480      	push	{r7}
 801acee:	b083      	sub	sp, #12
 801acf0:	af00      	add	r7, sp, #0
 801acf2:	4603      	mov	r3, r0
 801acf4:	460a      	mov	r2, r1
 801acf6:	71fb      	strb	r3, [r7, #7]
 801acf8:	4613      	mov	r3, r2
 801acfa:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801acfc:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801ad00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ad04:	4293      	cmp	r3, r2
 801ad06:	bfb8      	it	lt
 801ad08:	4613      	movlt	r3, r2
 801ad0a:	b25b      	sxtb	r3, r3
}
 801ad0c:	4618      	mov	r0, r3
 801ad0e:	370c      	adds	r7, #12
 801ad10:	46bd      	mov	sp, r7
 801ad12:	bc80      	pop	{r7}
 801ad14:	4770      	bx	lr
	...

0801ad18 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801ad18:	b480      	push	{r7}
 801ad1a:	b083      	sub	sp, #12
 801ad1c:	af00      	add	r7, sp, #0
 801ad1e:	6078      	str	r0, [r7, #4]
 801ad20:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	009b      	lsls	r3, r3, #2
 801ad26:	683a      	ldr	r2, [r7, #0]
 801ad28:	4413      	add	r3, r2
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	4a07      	ldr	r2, [pc, #28]	; (801ad4c <RegionCommonGetBandwidth+0x34>)
 801ad2e:	4293      	cmp	r3, r2
 801ad30:	d004      	beq.n	801ad3c <RegionCommonGetBandwidth+0x24>
 801ad32:	4a07      	ldr	r2, [pc, #28]	; (801ad50 <RegionCommonGetBandwidth+0x38>)
 801ad34:	4293      	cmp	r3, r2
 801ad36:	d003      	beq.n	801ad40 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 801ad38:	2300      	movs	r3, #0
 801ad3a:	e002      	b.n	801ad42 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 801ad3c:	2301      	movs	r3, #1
 801ad3e:	e000      	b.n	801ad42 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 801ad40:	2302      	movs	r3, #2
    }
}
 801ad42:	4618      	mov	r0, r3
 801ad44:	370c      	adds	r7, #12
 801ad46:	46bd      	mov	sp, r7
 801ad48:	bc80      	pop	{r7}
 801ad4a:	4770      	bx	lr
 801ad4c:	0003d090 	.word	0x0003d090
 801ad50:	0007a120 	.word	0x0007a120

0801ad54 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 801ad54:	b580      	push	{r7, lr}
 801ad56:	b086      	sub	sp, #24
 801ad58:	af04      	add	r7, sp, #16
 801ad5a:	4603      	mov	r3, r0
 801ad5c:	6039      	str	r1, [r7, #0]
 801ad5e:	71fb      	strb	r3, [r7, #7]
 801ad60:	4613      	mov	r3, r2
 801ad62:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 801ad64:	79fb      	ldrb	r3, [r7, #7]
 801ad66:	2b05      	cmp	r3, #5
 801ad68:	d810      	bhi.n	801ad8c <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801ad6a:	79fb      	ldrb	r3, [r7, #7]
 801ad6c:	4a0f      	ldr	r2, [pc, #60]	; (801adac <RegionCommonRxConfigPrint+0x58>)
 801ad6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ad72:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801ad76:	9202      	str	r2, [sp, #8]
 801ad78:	683a      	ldr	r2, [r7, #0]
 801ad7a:	9201      	str	r2, [sp, #4]
 801ad7c:	9300      	str	r3, [sp, #0]
 801ad7e:	4b0c      	ldr	r3, [pc, #48]	; (801adb0 <RegionCommonRxConfigPrint+0x5c>)
 801ad80:	2201      	movs	r2, #1
 801ad82:	2100      	movs	r1, #0
 801ad84:	2002      	movs	r0, #2
 801ad86:	f005 fddf 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801ad8a:	e00a      	b.n	801ada2 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801ad8c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ad90:	9301      	str	r3, [sp, #4]
 801ad92:	683b      	ldr	r3, [r7, #0]
 801ad94:	9300      	str	r3, [sp, #0]
 801ad96:	4b07      	ldr	r3, [pc, #28]	; (801adb4 <RegionCommonRxConfigPrint+0x60>)
 801ad98:	2201      	movs	r2, #1
 801ad9a:	2100      	movs	r1, #0
 801ad9c:	2002      	movs	r0, #2
 801ad9e:	f005 fdd3 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
}
 801ada2:	bf00      	nop
 801ada4:	3708      	adds	r7, #8
 801ada6:	46bd      	mov	sp, r7
 801ada8:	bd80      	pop	{r7, pc}
 801adaa:	bf00      	nop
 801adac:	20000150 	.word	0x20000150
 801adb0:	0802182c 	.word	0x0802182c
 801adb4:	0802184c 	.word	0x0802184c

0801adb8 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801adb8:	b580      	push	{r7, lr}
 801adba:	b084      	sub	sp, #16
 801adbc:	af02      	add	r7, sp, #8
 801adbe:	6078      	str	r0, [r7, #4]
 801adc0:	460b      	mov	r3, r1
 801adc2:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801adc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801adc8:	9301      	str	r3, [sp, #4]
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	9300      	str	r3, [sp, #0]
 801adce:	4b05      	ldr	r3, [pc, #20]	; (801ade4 <RegionCommonTxConfigPrint+0x2c>)
 801add0:	2201      	movs	r2, #1
 801add2:	2100      	movs	r1, #0
 801add4:	2002      	movs	r0, #2
 801add6:	f005 fdb7 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
}
 801adda:	bf00      	nop
 801addc:	3708      	adds	r7, #8
 801adde:	46bd      	mov	sp, r7
 801ade0:	bd80      	pop	{r7, pc}
 801ade2:	bf00      	nop
 801ade4:	08021868 	.word	0x08021868

0801ade8 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801ade8:	b580      	push	{r7, lr}
 801adea:	b082      	sub	sp, #8
 801adec:	af00      	add	r7, sp, #0
 801adee:	6078      	str	r0, [r7, #4]
 801adf0:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801adf2:	4b2d      	ldr	r3, [pc, #180]	; (801aea8 <VerifyRfFreq+0xc0>)
 801adf4:	6a1b      	ldr	r3, [r3, #32]
 801adf6:	6878      	ldr	r0, [r7, #4]
 801adf8:	4798      	blx	r3
 801adfa:	4603      	mov	r3, r0
 801adfc:	f083 0301 	eor.w	r3, r3, #1
 801ae00:	b2db      	uxtb	r3, r3
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	d001      	beq.n	801ae0a <VerifyRfFreq+0x22>
    {
        return false;
 801ae06:	2300      	movs	r3, #0
 801ae08:	e04a      	b.n	801aea0 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	4a27      	ldr	r2, [pc, #156]	; (801aeac <VerifyRfFreq+0xc4>)
 801ae0e:	4293      	cmp	r3, r2
 801ae10:	d307      	bcc.n	801ae22 <VerifyRfFreq+0x3a>
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	4a26      	ldr	r2, [pc, #152]	; (801aeb0 <VerifyRfFreq+0xc8>)
 801ae16:	4293      	cmp	r3, r2
 801ae18:	d803      	bhi.n	801ae22 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801ae1a:	683b      	ldr	r3, [r7, #0]
 801ae1c:	2202      	movs	r2, #2
 801ae1e:	701a      	strb	r2, [r3, #0]
 801ae20:	e03d      	b.n	801ae9e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	4a22      	ldr	r2, [pc, #136]	; (801aeb0 <VerifyRfFreq+0xc8>)
 801ae26:	4293      	cmp	r3, r2
 801ae28:	d907      	bls.n	801ae3a <VerifyRfFreq+0x52>
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	4a21      	ldr	r2, [pc, #132]	; (801aeb4 <VerifyRfFreq+0xcc>)
 801ae2e:	4293      	cmp	r3, r2
 801ae30:	d803      	bhi.n	801ae3a <VerifyRfFreq+0x52>
    {
        *band = 0;
 801ae32:	683b      	ldr	r3, [r7, #0]
 801ae34:	2200      	movs	r2, #0
 801ae36:	701a      	strb	r2, [r3, #0]
 801ae38:	e031      	b.n	801ae9e <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	4a1d      	ldr	r2, [pc, #116]	; (801aeb4 <VerifyRfFreq+0xcc>)
 801ae3e:	4293      	cmp	r3, r2
 801ae40:	d907      	bls.n	801ae52 <VerifyRfFreq+0x6a>
 801ae42:	687b      	ldr	r3, [r7, #4]
 801ae44:	4a1c      	ldr	r2, [pc, #112]	; (801aeb8 <VerifyRfFreq+0xd0>)
 801ae46:	4293      	cmp	r3, r2
 801ae48:	d803      	bhi.n	801ae52 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801ae4a:	683b      	ldr	r3, [r7, #0]
 801ae4c:	2201      	movs	r2, #1
 801ae4e:	701a      	strb	r2, [r3, #0]
 801ae50:	e025      	b.n	801ae9e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	4a19      	ldr	r2, [pc, #100]	; (801aebc <VerifyRfFreq+0xd4>)
 801ae56:	4293      	cmp	r3, r2
 801ae58:	d907      	bls.n	801ae6a <VerifyRfFreq+0x82>
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	4a18      	ldr	r2, [pc, #96]	; (801aec0 <VerifyRfFreq+0xd8>)
 801ae5e:	4293      	cmp	r3, r2
 801ae60:	d803      	bhi.n	801ae6a <VerifyRfFreq+0x82>
    {
        *band = 5;
 801ae62:	683b      	ldr	r3, [r7, #0]
 801ae64:	2205      	movs	r2, #5
 801ae66:	701a      	strb	r2, [r3, #0]
 801ae68:	e019      	b.n	801ae9e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	4a15      	ldr	r2, [pc, #84]	; (801aec4 <VerifyRfFreq+0xdc>)
 801ae6e:	4293      	cmp	r3, r2
 801ae70:	d907      	bls.n	801ae82 <VerifyRfFreq+0x9a>
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	4a14      	ldr	r2, [pc, #80]	; (801aec8 <VerifyRfFreq+0xe0>)
 801ae76:	4293      	cmp	r3, r2
 801ae78:	d803      	bhi.n	801ae82 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801ae7a:	683b      	ldr	r3, [r7, #0]
 801ae7c:	2203      	movs	r2, #3
 801ae7e:	701a      	strb	r2, [r3, #0]
 801ae80:	e00d      	b.n	801ae9e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	4a11      	ldr	r2, [pc, #68]	; (801aecc <VerifyRfFreq+0xe4>)
 801ae86:	4293      	cmp	r3, r2
 801ae88:	d307      	bcc.n	801ae9a <VerifyRfFreq+0xb2>
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	4a10      	ldr	r2, [pc, #64]	; (801aed0 <VerifyRfFreq+0xe8>)
 801ae8e:	4293      	cmp	r3, r2
 801ae90:	d803      	bhi.n	801ae9a <VerifyRfFreq+0xb2>
    {
        *band = 4;
 801ae92:	683b      	ldr	r3, [r7, #0]
 801ae94:	2204      	movs	r2, #4
 801ae96:	701a      	strb	r2, [r3, #0]
 801ae98:	e001      	b.n	801ae9e <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801ae9a:	2300      	movs	r3, #0
 801ae9c:	e000      	b.n	801aea0 <VerifyRfFreq+0xb8>
    }
    return true;
 801ae9e:	2301      	movs	r3, #1
}
 801aea0:	4618      	mov	r0, r3
 801aea2:	3708      	adds	r7, #8
 801aea4:	46bd      	mov	sp, r7
 801aea6:	bd80      	pop	{r7, pc}
 801aea8:	08021e08 	.word	0x08021e08
 801aeac:	337055c0 	.word	0x337055c0
 801aeb0:	338eda3f 	.word	0x338eda3f
 801aeb4:	33bca100 	.word	0x33bca100
 801aeb8:	33c5c8c0 	.word	0x33c5c8c0
 801aebc:	33c74f5f 	.word	0x33c74f5f
 801aec0:	33cef080 	.word	0x33cef080
 801aec4:	33d1fdbf 	.word	0x33d1fdbf
 801aec8:	33d5ce50 	.word	0x33d5ce50
 801aecc:	33d691a0 	.word	0x33d691a0
 801aed0:	33db2580 	.word	0x33db2580

0801aed4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801aed4:	b590      	push	{r4, r7, lr}
 801aed6:	b08b      	sub	sp, #44	; 0x2c
 801aed8:	af04      	add	r7, sp, #16
 801aeda:	4603      	mov	r3, r0
 801aedc:	460a      	mov	r2, r1
 801aede:	71fb      	strb	r3, [r7, #7]
 801aee0:	4613      	mov	r3, r2
 801aee2:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 801aee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801aee8:	4a1f      	ldr	r2, [pc, #124]	; (801af68 <GetTimeOnAir+0x94>)
 801aeea:	5cd3      	ldrb	r3, [r2, r3]
 801aeec:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801aeee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801aef2:	491e      	ldr	r1, [pc, #120]	; (801af6c <GetTimeOnAir+0x98>)
 801aef4:	4618      	mov	r0, r3
 801aef6:	f7ff ff0f 	bl	801ad18 <RegionCommonGetBandwidth>
 801aefa:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 801aefc:	2300      	movs	r3, #0
 801aefe:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 801af00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801af04:	2b07      	cmp	r3, #7
 801af06:	d118      	bne.n	801af3a <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801af08:	4b19      	ldr	r3, [pc, #100]	; (801af70 <GetTimeOnAir+0x9c>)
 801af0a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801af0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801af10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801af14:	fb02 f303 	mul.w	r3, r2, r3
 801af18:	4619      	mov	r1, r3
 801af1a:	88bb      	ldrh	r3, [r7, #4]
 801af1c:	b2db      	uxtb	r3, r3
 801af1e:	2201      	movs	r2, #1
 801af20:	9203      	str	r2, [sp, #12]
 801af22:	9302      	str	r3, [sp, #8]
 801af24:	2300      	movs	r3, #0
 801af26:	9301      	str	r3, [sp, #4]
 801af28:	2305      	movs	r3, #5
 801af2a:	9300      	str	r3, [sp, #0]
 801af2c:	2300      	movs	r3, #0
 801af2e:	460a      	mov	r2, r1
 801af30:	68f9      	ldr	r1, [r7, #12]
 801af32:	2000      	movs	r0, #0
 801af34:	47a0      	blx	r4
 801af36:	6178      	str	r0, [r7, #20]
 801af38:	e011      	b.n	801af5e <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801af3a:	4b0d      	ldr	r3, [pc, #52]	; (801af70 <GetTimeOnAir+0x9c>)
 801af3c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801af3e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801af42:	88bb      	ldrh	r3, [r7, #4]
 801af44:	b2db      	uxtb	r3, r3
 801af46:	2101      	movs	r1, #1
 801af48:	9103      	str	r1, [sp, #12]
 801af4a:	9302      	str	r3, [sp, #8]
 801af4c:	2300      	movs	r3, #0
 801af4e:	9301      	str	r3, [sp, #4]
 801af50:	2308      	movs	r3, #8
 801af52:	9300      	str	r3, [sp, #0]
 801af54:	2301      	movs	r3, #1
 801af56:	68f9      	ldr	r1, [r7, #12]
 801af58:	2001      	movs	r0, #1
 801af5a:	47a0      	blx	r4
 801af5c:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 801af5e:	697b      	ldr	r3, [r7, #20]
}
 801af60:	4618      	mov	r0, r3
 801af62:	371c      	adds	r7, #28
 801af64:	46bd      	mov	sp, r7
 801af66:	bd90      	pop	{r4, r7, pc}
 801af68:	08021dd0 	.word	0x08021dd0
 801af6c:	08021dd8 	.word	0x08021dd8
 801af70:	08021e08 	.word	0x08021e08

0801af74 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b088      	sub	sp, #32
 801af78:	af00      	add	r7, sp, #0
 801af7a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801af7c:	2300      	movs	r3, #0
 801af7e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	781b      	ldrb	r3, [r3, #0]
 801af84:	3b01      	subs	r3, #1
 801af86:	2b38      	cmp	r3, #56	; 0x38
 801af88:	f200 8128 	bhi.w	801b1dc <RegionEU868GetPhyParam+0x268>
 801af8c:	a201      	add	r2, pc, #4	; (adr r2, 801af94 <RegionEU868GetPhyParam+0x20>)
 801af8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af92:	bf00      	nop
 801af94:	0801b079 	.word	0x0801b079
 801af98:	0801b07f 	.word	0x0801b07f
 801af9c:	0801b1dd 	.word	0x0801b1dd
 801afa0:	0801b1dd 	.word	0x0801b1dd
 801afa4:	0801b1dd 	.word	0x0801b1dd
 801afa8:	0801b085 	.word	0x0801b085
 801afac:	0801b1dd 	.word	0x0801b1dd
 801afb0:	0801b0bf 	.word	0x0801b0bf
 801afb4:	0801b1dd 	.word	0x0801b1dd
 801afb8:	0801b0c5 	.word	0x0801b0c5
 801afbc:	0801b0cb 	.word	0x0801b0cb
 801afc0:	0801b0d1 	.word	0x0801b0d1
 801afc4:	0801b0d7 	.word	0x0801b0d7
 801afc8:	0801b0e7 	.word	0x0801b0e7
 801afcc:	0801b0f7 	.word	0x0801b0f7
 801afd0:	0801b0fd 	.word	0x0801b0fd
 801afd4:	0801b105 	.word	0x0801b105
 801afd8:	0801b10d 	.word	0x0801b10d
 801afdc:	0801b115 	.word	0x0801b115
 801afe0:	0801b11d 	.word	0x0801b11d
 801afe4:	0801b125 	.word	0x0801b125
 801afe8:	0801b12d 	.word	0x0801b12d
 801afec:	0801b141 	.word	0x0801b141
 801aff0:	0801b147 	.word	0x0801b147
 801aff4:	0801b14d 	.word	0x0801b14d
 801aff8:	0801b153 	.word	0x0801b153
 801affc:	0801b15f 	.word	0x0801b15f
 801b000:	0801b16b 	.word	0x0801b16b
 801b004:	0801b171 	.word	0x0801b171
 801b008:	0801b179 	.word	0x0801b179
 801b00c:	0801b17f 	.word	0x0801b17f
 801b010:	0801b185 	.word	0x0801b185
 801b014:	0801b18d 	.word	0x0801b18d
 801b018:	0801b08b 	.word	0x0801b08b
 801b01c:	0801b1dd 	.word	0x0801b1dd
 801b020:	0801b1dd 	.word	0x0801b1dd
 801b024:	0801b1dd 	.word	0x0801b1dd
 801b028:	0801b1dd 	.word	0x0801b1dd
 801b02c:	0801b1dd 	.word	0x0801b1dd
 801b030:	0801b1dd 	.word	0x0801b1dd
 801b034:	0801b1dd 	.word	0x0801b1dd
 801b038:	0801b1dd 	.word	0x0801b1dd
 801b03c:	0801b1dd 	.word	0x0801b1dd
 801b040:	0801b1dd 	.word	0x0801b1dd
 801b044:	0801b1dd 	.word	0x0801b1dd
 801b048:	0801b1dd 	.word	0x0801b1dd
 801b04c:	0801b1dd 	.word	0x0801b1dd
 801b050:	0801b193 	.word	0x0801b193
 801b054:	0801b199 	.word	0x0801b199
 801b058:	0801b1a7 	.word	0x0801b1a7
 801b05c:	0801b1dd 	.word	0x0801b1dd
 801b060:	0801b1dd 	.word	0x0801b1dd
 801b064:	0801b1ad 	.word	0x0801b1ad
 801b068:	0801b1b3 	.word	0x0801b1b3
 801b06c:	0801b1dd 	.word	0x0801b1dd
 801b070:	0801b1b9 	.word	0x0801b1b9
 801b074:	0801b1c9 	.word	0x0801b1c9
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 801b078:	2300      	movs	r3, #0
 801b07a:	61bb      	str	r3, [r7, #24]
            break;
 801b07c:	e0af      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801b07e:	2300      	movs	r3, #0
 801b080:	61bb      	str	r3, [r7, #24]
            break;
 801b082:	e0ac      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 801b084:	2300      	movs	r3, #0
 801b086:	61bb      	str	r3, [r7, #24]
            break;
 801b088:	e0a9      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801b090:	733b      	strb	r3, [r7, #12]
 801b092:	2307      	movs	r3, #7
 801b094:	737b      	strb	r3, [r7, #13]
 801b096:	2300      	movs	r3, #0
 801b098:	73bb      	strb	r3, [r7, #14]
 801b09a:	2310      	movs	r3, #16
 801b09c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801b09e:	4b53      	ldr	r3, [pc, #332]	; (801b1ec <RegionEU868GetPhyParam+0x278>)
 801b0a0:	681b      	ldr	r3, [r3, #0]
 801b0a2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801b0a6:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801b0a8:	4b50      	ldr	r3, [pc, #320]	; (801b1ec <RegionEU868GetPhyParam+0x278>)
 801b0aa:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801b0ac:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801b0ae:	f107 030c 	add.w	r3, r7, #12
 801b0b2:	4618      	mov	r0, r3
 801b0b4:	f7ff fddc 	bl	801ac70 <RegionCommonGetNextLowerTxDr>
 801b0b8:	4603      	mov	r3, r0
 801b0ba:	61bb      	str	r3, [r7, #24]
            break;
 801b0bc:	e08f      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801b0be:	2300      	movs	r3, #0
 801b0c0:	61bb      	str	r3, [r7, #24]
            break;
 801b0c2:	e08c      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 801b0c4:	2300      	movs	r3, #0
 801b0c6:	61bb      	str	r3, [r7, #24]
            break;
 801b0c8:	e089      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801b0ca:	2340      	movs	r3, #64	; 0x40
 801b0cc:	61bb      	str	r3, [r7, #24]
            break;
 801b0ce:	e086      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801b0d0:	2320      	movs	r3, #32
 801b0d2:	61bb      	str	r3, [r7, #24]
            break;
 801b0d4:	e083      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b0dc:	461a      	mov	r2, r3
 801b0de:	4b44      	ldr	r3, [pc, #272]	; (801b1f0 <RegionEU868GetPhyParam+0x27c>)
 801b0e0:	5c9b      	ldrb	r3, [r3, r2]
 801b0e2:	61bb      	str	r3, [r7, #24]
            break;
 801b0e4:	e07b      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b0ec:	461a      	mov	r2, r3
 801b0ee:	4b41      	ldr	r3, [pc, #260]	; (801b1f4 <RegionEU868GetPhyParam+0x280>)
 801b0f0:	5c9b      	ldrb	r3, [r3, r2]
 801b0f2:	61bb      	str	r3, [r7, #24]
            break;
 801b0f4:	e073      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801b0f6:	2301      	movs	r3, #1
 801b0f8:	61bb      	str	r3, [r7, #24]
            break;
 801b0fa:	e070      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801b0fc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801b100:	61bb      	str	r3, [r7, #24]
            break;
 801b102:	e06c      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801b104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801b108:	61bb      	str	r3, [r7, #24]
            break;
 801b10a:	e068      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801b10c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801b110:	61bb      	str	r3, [r7, #24]
            break;
 801b112:	e064      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801b114:	f241 3388 	movw	r3, #5000	; 0x1388
 801b118:	61bb      	str	r3, [r7, #24]
            break;
 801b11a:	e060      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801b11c:	f241 7370 	movw	r3, #6000	; 0x1770
 801b120:	61bb      	str	r3, [r7, #24]
            break;
 801b122:	e05c      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801b124:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801b128:	61bb      	str	r3, [r7, #24]
            break;
 801b12a:	e058      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801b12c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801b130:	4831      	ldr	r0, [pc, #196]	; (801b1f8 <RegionEU868GetPhyParam+0x284>)
 801b132:	f001 f89d 	bl	801c270 <randr>
 801b136:	4603      	mov	r3, r0
 801b138:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801b13c:	61bb      	str	r3, [r7, #24]
            break;
 801b13e:	e04e      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801b140:	2300      	movs	r3, #0
 801b142:	61bb      	str	r3, [r7, #24]
            break;
 801b144:	e04b      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801b146:	4b2d      	ldr	r3, [pc, #180]	; (801b1fc <RegionEU868GetPhyParam+0x288>)
 801b148:	61bb      	str	r3, [r7, #24]
            break;
 801b14a:	e048      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 801b14c:	2300      	movs	r3, #0
 801b14e:	61bb      	str	r3, [r7, #24]
            break;
 801b150:	e045      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801b152:	4b26      	ldr	r3, [pc, #152]	; (801b1ec <RegionEU868GetPhyParam+0x278>)
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801b15a:	61bb      	str	r3, [r7, #24]
            break;
 801b15c:	e03f      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801b15e:	4b23      	ldr	r3, [pc, #140]	; (801b1ec <RegionEU868GetPhyParam+0x278>)
 801b160:	681b      	ldr	r3, [r3, #0]
 801b162:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801b166:	61bb      	str	r3, [r7, #24]
            break;
 801b168:	e039      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801b16a:	2310      	movs	r3, #16
 801b16c:	61bb      	str	r3, [r7, #24]
            break;
 801b16e:	e036      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801b170:	4b1e      	ldr	r3, [pc, #120]	; (801b1ec <RegionEU868GetPhyParam+0x278>)
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	61bb      	str	r3, [r7, #24]
            break;
 801b176:	e032      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 801b178:	2300      	movs	r3, #0
 801b17a:	61bb      	str	r3, [r7, #24]
            break;
 801b17c:	e02f      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801b17e:	2300      	movs	r3, #0
 801b180:	61bb      	str	r3, [r7, #24]
            break;
 801b182:	e02c      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 801b184:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 801b188:	61bb      	str	r3, [r7, #24]
            break;
 801b18a:	e028      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801b18c:	4b1c      	ldr	r3, [pc, #112]	; (801b200 <RegionEU868GetPhyParam+0x28c>)
 801b18e:	61bb      	str	r3, [r7, #24]
            break;
 801b190:	e025      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801b192:	4b1a      	ldr	r3, [pc, #104]	; (801b1fc <RegionEU868GetPhyParam+0x288>)
 801b194:	61bb      	str	r3, [r7, #24]
            break;
 801b196:	e022      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801b198:	2311      	movs	r3, #17
 801b19a:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801b19c:	2302      	movs	r3, #2
 801b19e:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 801b1a0:	2300      	movs	r3, #0
 801b1a2:	76bb      	strb	r3, [r7, #26]
            break;
 801b1a4:	e01b      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801b1a6:	2303      	movs	r3, #3
 801b1a8:	61bb      	str	r3, [r7, #24]
            break;
 801b1aa:	e018      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 801b1ac:	4b13      	ldr	r3, [pc, #76]	; (801b1fc <RegionEU868GetPhyParam+0x288>)
 801b1ae:	61bb      	str	r3, [r7, #24]
            break;
 801b1b0:	e015      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801b1b2:	2303      	movs	r3, #3
 801b1b4:	61bb      	str	r3, [r7, #24]
            break;
 801b1b6:	e012      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b1be:	461a      	mov	r2, r3
 801b1c0:	4b10      	ldr	r3, [pc, #64]	; (801b204 <RegionEU868GetPhyParam+0x290>)
 801b1c2:	5c9b      	ldrb	r3, [r3, r2]
 801b1c4:	61bb      	str	r3, [r7, #24]
            break;
 801b1c6:	e00a      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b1ce:	490e      	ldr	r1, [pc, #56]	; (801b208 <RegionEU868GetPhyParam+0x294>)
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	f7ff fda1 	bl	801ad18 <RegionCommonGetBandwidth>
 801b1d6:	4603      	mov	r3, r0
 801b1d8:	61bb      	str	r3, [r7, #24]
            break;
 801b1da:	e000      	b.n	801b1de <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 801b1dc:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 801b1de:	69bb      	ldr	r3, [r7, #24]
 801b1e0:	61fb      	str	r3, [r7, #28]
 801b1e2:	69fb      	ldr	r3, [r7, #28]
}
 801b1e4:	4618      	mov	r0, r3
 801b1e6:	3720      	adds	r7, #32
 801b1e8:	46bd      	mov	sp, r7
 801b1ea:	bd80      	pop	{r7, pc}
 801b1ec:	200023a4 	.word	0x200023a4
 801b1f0:	08021df8 	.word	0x08021df8
 801b1f4:	08021e00 	.word	0x08021e00
 801b1f8:	fffffc18 	.word	0xfffffc18
 801b1fc:	33d3e608 	.word	0x33d3e608
 801b200:	4009999a 	.word	0x4009999a
 801b204:	08021dd0 	.word	0x08021dd0
 801b208:	08021dd8 	.word	0x08021dd8

0801b20c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801b20c:	b590      	push	{r4, r7, lr}
 801b20e:	b085      	sub	sp, #20
 801b210:	af02      	add	r7, sp, #8
 801b212:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801b214:	4b11      	ldr	r3, [pc, #68]	; (801b25c <RegionEU868SetBandTxDone+0x50>)
 801b216:	681a      	ldr	r2, [r3, #0]
 801b218:	4b11      	ldr	r3, [pc, #68]	; (801b260 <RegionEU868SetBandTxDone+0x54>)
 801b21a:	6819      	ldr	r1, [r3, #0]
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	781b      	ldrb	r3, [r3, #0]
 801b220:	4618      	mov	r0, r3
 801b222:	4603      	mov	r3, r0
 801b224:	005b      	lsls	r3, r3, #1
 801b226:	4403      	add	r3, r0
 801b228:	009b      	lsls	r3, r3, #2
 801b22a:	440b      	add	r3, r1
 801b22c:	3309      	adds	r3, #9
 801b22e:	781b      	ldrb	r3, [r3, #0]
 801b230:	4619      	mov	r1, r3
 801b232:	460b      	mov	r3, r1
 801b234:	005b      	lsls	r3, r3, #1
 801b236:	440b      	add	r3, r1
 801b238:	00db      	lsls	r3, r3, #3
 801b23a:	18d0      	adds	r0, r2, r3
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	6899      	ldr	r1, [r3, #8]
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	785c      	ldrb	r4, [r3, #1]
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	691a      	ldr	r2, [r3, #16]
 801b248:	9200      	str	r2, [sp, #0]
 801b24a:	68db      	ldr	r3, [r3, #12]
 801b24c:	4622      	mov	r2, r4
 801b24e:	f7ff f889 	bl	801a364 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 801b252:	bf00      	nop
 801b254:	370c      	adds	r7, #12
 801b256:	46bd      	mov	sp, r7
 801b258:	bd90      	pop	{r4, r7, pc}
 801b25a:	bf00      	nop
 801b25c:	200023a0 	.word	0x200023a0
 801b260:	200023a4 	.word	0x200023a4

0801b264 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 801b264:	b580      	push	{r7, lr}
 801b266:	b0b0      	sub	sp, #192	; 0xc0
 801b268:	af00      	add	r7, sp, #0
 801b26a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 801b26c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b270:	2290      	movs	r2, #144	; 0x90
 801b272:	2100      	movs	r1, #0
 801b274:	4618      	mov	r0, r3
 801b276:	f005 fe03 	bl	8020e80 <memset>
 801b27a:	2364      	movs	r3, #100	; 0x64
 801b27c:	863b      	strh	r3, [r7, #48]	; 0x30
 801b27e:	2364      	movs	r3, #100	; 0x64
 801b280:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801b288:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 801b28c:	230a      	movs	r3, #10
 801b28e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 801b292:	2364      	movs	r3, #100	; 0x64
 801b294:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 801b298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801b29c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	7a1b      	ldrb	r3, [r3, #8]
 801b2a4:	2b02      	cmp	r3, #2
 801b2a6:	d05e      	beq.n	801b366 <RegionEU868InitDefaults+0x102>
 801b2a8:	2b02      	cmp	r3, #2
 801b2aa:	dc6b      	bgt.n	801b384 <RegionEU868InitDefaults+0x120>
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d002      	beq.n	801b2b6 <RegionEU868InitDefaults+0x52>
 801b2b0:	2b01      	cmp	r3, #1
 801b2b2:	d03f      	beq.n	801b334 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 801b2b4:	e066      	b.n	801b384 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d063      	beq.n	801b386 <RegionEU868InitDefaults+0x122>
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	685b      	ldr	r3, [r3, #4]
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d05f      	beq.n	801b386 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	4a30      	ldr	r2, [pc, #192]	; (801b38c <RegionEU868InitDefaults+0x128>)
 801b2cc:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	685b      	ldr	r3, [r3, #4]
 801b2d2:	4a2f      	ldr	r2, [pc, #188]	; (801b390 <RegionEU868InitDefaults+0x12c>)
 801b2d4:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801b2d6:	4b2d      	ldr	r3, [pc, #180]	; (801b38c <RegionEU868InitDefaults+0x128>)
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	4618      	mov	r0, r3
 801b2dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b2e0:	2290      	movs	r2, #144	; 0x90
 801b2e2:	4619      	mov	r1, r3
 801b2e4:	f000 ffdb 	bl	801c29e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 801b2e8:	4b29      	ldr	r3, [pc, #164]	; (801b390 <RegionEU868InitDefaults+0x12c>)
 801b2ea:	681b      	ldr	r3, [r3, #0]
 801b2ec:	4a29      	ldr	r2, [pc, #164]	; (801b394 <RegionEU868InitDefaults+0x130>)
 801b2ee:	ca07      	ldmia	r2, {r0, r1, r2}
 801b2f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 801b2f4:	4b26      	ldr	r3, [pc, #152]	; (801b390 <RegionEU868InitDefaults+0x12c>)
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	4a27      	ldr	r2, [pc, #156]	; (801b398 <RegionEU868InitDefaults+0x134>)
 801b2fa:	330c      	adds	r3, #12
 801b2fc:	ca07      	ldmia	r2, {r0, r1, r2}
 801b2fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 801b302:	4b23      	ldr	r3, [pc, #140]	; (801b390 <RegionEU868InitDefaults+0x12c>)
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	4a25      	ldr	r2, [pc, #148]	; (801b39c <RegionEU868InitDefaults+0x138>)
 801b308:	3318      	adds	r3, #24
 801b30a:	ca07      	ldmia	r2, {r0, r1, r2}
 801b30c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801b310:	4b1f      	ldr	r3, [pc, #124]	; (801b390 <RegionEU868InitDefaults+0x12c>)
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	2207      	movs	r2, #7
 801b316:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801b31a:	4b1d      	ldr	r3, [pc, #116]	; (801b390 <RegionEU868InitDefaults+0x12c>)
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801b322:	4b1b      	ldr	r3, [pc, #108]	; (801b390 <RegionEU868InitDefaults+0x12c>)
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801b32a:	2201      	movs	r2, #1
 801b32c:	4619      	mov	r1, r3
 801b32e:	f7fe fff3 	bl	801a318 <RegionCommonChanMaskCopy>
 801b332:	e028      	b.n	801b386 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801b334:	4b16      	ldr	r3, [pc, #88]	; (801b390 <RegionEU868InitDefaults+0x12c>)
 801b336:	681b      	ldr	r3, [r3, #0]
 801b338:	2200      	movs	r2, #0
 801b33a:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801b33c:	4b14      	ldr	r3, [pc, #80]	; (801b390 <RegionEU868InitDefaults+0x12c>)
 801b33e:	681b      	ldr	r3, [r3, #0]
 801b340:	2200      	movs	r2, #0
 801b342:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801b344:	4b12      	ldr	r3, [pc, #72]	; (801b390 <RegionEU868InitDefaults+0x12c>)
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	2200      	movs	r2, #0
 801b34a:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801b34c:	4b10      	ldr	r3, [pc, #64]	; (801b390 <RegionEU868InitDefaults+0x12c>)
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801b354:	4b0e      	ldr	r3, [pc, #56]	; (801b390 <RegionEU868InitDefaults+0x12c>)
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801b35c:	2201      	movs	r2, #1
 801b35e:	4619      	mov	r1, r3
 801b360:	f7fe ffda 	bl	801a318 <RegionCommonChanMaskCopy>
            break;
 801b364:	e00f      	b.n	801b386 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801b366:	4b0a      	ldr	r3, [pc, #40]	; (801b390 <RegionEU868InitDefaults+0x12c>)
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 801b36e:	4b08      	ldr	r3, [pc, #32]	; (801b390 <RegionEU868InitDefaults+0x12c>)
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 801b376:	4b06      	ldr	r3, [pc, #24]	; (801b390 <RegionEU868InitDefaults+0x12c>)
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	430a      	orrs	r2, r1
 801b37c:	b292      	uxth	r2, r2
 801b37e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 801b382:	e000      	b.n	801b386 <RegionEU868InitDefaults+0x122>
            break;
 801b384:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801b386:	37c0      	adds	r7, #192	; 0xc0
 801b388:	46bd      	mov	sp, r7
 801b38a:	bd80      	pop	{r7, pc}
 801b38c:	200023a0 	.word	0x200023a0
 801b390:	200023a4 	.word	0x200023a4
 801b394:	08021884 	.word	0x08021884
 801b398:	08021890 	.word	0x08021890
 801b39c:	0802189c 	.word	0x0802189c

0801b3a0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801b3a0:	b580      	push	{r7, lr}
 801b3a2:	b084      	sub	sp, #16
 801b3a4:	af00      	add	r7, sp, #0
 801b3a6:	6078      	str	r0, [r7, #4]
 801b3a8:	460b      	mov	r3, r1
 801b3aa:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 801b3ac:	78fb      	ldrb	r3, [r7, #3]
 801b3ae:	2b0f      	cmp	r3, #15
 801b3b0:	d86c      	bhi.n	801b48c <RegionEU868Verify+0xec>
 801b3b2:	a201      	add	r2, pc, #4	; (adr r2, 801b3b8 <RegionEU868Verify+0x18>)
 801b3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b3b8:	0801b3f9 	.word	0x0801b3f9
 801b3bc:	0801b48d 	.word	0x0801b48d
 801b3c0:	0801b48d 	.word	0x0801b48d
 801b3c4:	0801b48d 	.word	0x0801b48d
 801b3c8:	0801b48d 	.word	0x0801b48d
 801b3cc:	0801b411 	.word	0x0801b411
 801b3d0:	0801b42f 	.word	0x0801b42f
 801b3d4:	0801b44d 	.word	0x0801b44d
 801b3d8:	0801b48d 	.word	0x0801b48d
 801b3dc:	0801b46b 	.word	0x0801b46b
 801b3e0:	0801b46b 	.word	0x0801b46b
 801b3e4:	0801b48d 	.word	0x0801b48d
 801b3e8:	0801b48d 	.word	0x0801b48d
 801b3ec:	0801b48d 	.word	0x0801b48d
 801b3f0:	0801b48d 	.word	0x0801b48d
 801b3f4:	0801b489 	.word	0x0801b489
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 801b3f8:	2300      	movs	r3, #0
 801b3fa:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	681b      	ldr	r3, [r3, #0]
 801b400:	f107 020f 	add.w	r2, r7, #15
 801b404:	4611      	mov	r1, r2
 801b406:	4618      	mov	r0, r3
 801b408:	f7ff fcee 	bl	801ade8 <VerifyRfFreq>
 801b40c:	4603      	mov	r3, r0
 801b40e:	e03e      	b.n	801b48e <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	f993 3000 	ldrsb.w	r3, [r3]
 801b416:	2207      	movs	r2, #7
 801b418:	2100      	movs	r1, #0
 801b41a:	4618      	mov	r0, r3
 801b41c:	f7fe feff 	bl	801a21e <RegionCommonValueInRange>
 801b420:	4603      	mov	r3, r0
 801b422:	2b00      	cmp	r3, #0
 801b424:	bf14      	ite	ne
 801b426:	2301      	movne	r3, #1
 801b428:	2300      	moveq	r3, #0
 801b42a:	b2db      	uxtb	r3, r3
 801b42c:	e02f      	b.n	801b48e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	f993 3000 	ldrsb.w	r3, [r3]
 801b434:	2205      	movs	r2, #5
 801b436:	2100      	movs	r1, #0
 801b438:	4618      	mov	r0, r3
 801b43a:	f7fe fef0 	bl	801a21e <RegionCommonValueInRange>
 801b43e:	4603      	mov	r3, r0
 801b440:	2b00      	cmp	r3, #0
 801b442:	bf14      	ite	ne
 801b444:	2301      	movne	r3, #1
 801b446:	2300      	moveq	r3, #0
 801b448:	b2db      	uxtb	r3, r3
 801b44a:	e020      	b.n	801b48e <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	f993 3000 	ldrsb.w	r3, [r3]
 801b452:	2207      	movs	r2, #7
 801b454:	2100      	movs	r1, #0
 801b456:	4618      	mov	r0, r3
 801b458:	f7fe fee1 	bl	801a21e <RegionCommonValueInRange>
 801b45c:	4603      	mov	r3, r0
 801b45e:	2b00      	cmp	r3, #0
 801b460:	bf14      	ite	ne
 801b462:	2301      	movne	r3, #1
 801b464:	2300      	moveq	r3, #0
 801b466:	b2db      	uxtb	r3, r3
 801b468:	e011      	b.n	801b48e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	f993 3000 	ldrsb.w	r3, [r3]
 801b470:	2207      	movs	r2, #7
 801b472:	2100      	movs	r1, #0
 801b474:	4618      	mov	r0, r3
 801b476:	f7fe fed2 	bl	801a21e <RegionCommonValueInRange>
 801b47a:	4603      	mov	r3, r0
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	bf14      	ite	ne
 801b480:	2301      	movne	r3, #1
 801b482:	2300      	moveq	r3, #0
 801b484:	b2db      	uxtb	r3, r3
 801b486:	e002      	b.n	801b48e <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 801b488:	2301      	movs	r3, #1
 801b48a:	e000      	b.n	801b48e <RegionEU868Verify+0xee>
        }
        default:
            return false;
 801b48c:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801b48e:	4618      	mov	r0, r3
 801b490:	3710      	adds	r7, #16
 801b492:	46bd      	mov	sp, r7
 801b494:	bd80      	pop	{r7, pc}
 801b496:	bf00      	nop

0801b498 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801b498:	b580      	push	{r7, lr}
 801b49a:	b08a      	sub	sp, #40	; 0x28
 801b49c:	af00      	add	r7, sp, #0
 801b49e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801b4a0:	2350      	movs	r3, #80	; 0x50
 801b4a2:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	791b      	ldrb	r3, [r3, #4]
 801b4aa:	2b10      	cmp	r3, #16
 801b4ac:	d162      	bne.n	801b574 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	330f      	adds	r3, #15
 801b4b4:	781b      	ldrb	r3, [r3, #0]
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d15e      	bne.n	801b578 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801b4ba:	2300      	movs	r3, #0
 801b4bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b4c0:	2303      	movs	r3, #3
 801b4c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b4c6:	e050      	b.n	801b56a <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 801b4c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b4cc:	2b07      	cmp	r3, #7
 801b4ce:	d824      	bhi.n	801b51a <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	681a      	ldr	r2, [r3, #0]
 801b4d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b4d8:	4413      	add	r3, r2
 801b4da:	781b      	ldrb	r3, [r3, #0]
 801b4dc:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801b4de:	69ba      	ldr	r2, [r7, #24]
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	6819      	ldr	r1, [r3, #0]
 801b4e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b4e8:	3301      	adds	r3, #1
 801b4ea:	440b      	add	r3, r1
 801b4ec:	781b      	ldrb	r3, [r3, #0]
 801b4ee:	021b      	lsls	r3, r3, #8
 801b4f0:	4313      	orrs	r3, r2
 801b4f2:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801b4f4:	69ba      	ldr	r2, [r7, #24]
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	6819      	ldr	r1, [r3, #0]
 801b4fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b4fe:	3302      	adds	r3, #2
 801b500:	440b      	add	r3, r1
 801b502:	781b      	ldrb	r3, [r3, #0]
 801b504:	041b      	lsls	r3, r3, #16
 801b506:	4313      	orrs	r3, r2
 801b508:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801b50a:	69bb      	ldr	r3, [r7, #24]
 801b50c:	2264      	movs	r2, #100	; 0x64
 801b50e:	fb02 f303 	mul.w	r3, r2, r3
 801b512:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801b514:	2300      	movs	r3, #0
 801b516:	61fb      	str	r3, [r7, #28]
 801b518:	e006      	b.n	801b528 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801b51a:	2300      	movs	r3, #0
 801b51c:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801b51e:	2300      	movs	r3, #0
 801b520:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 801b524:	2300      	movs	r3, #0
 801b526:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 801b528:	69bb      	ldr	r3, [r7, #24]
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d00b      	beq.n	801b546 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 801b52e:	f107 0318 	add.w	r3, r7, #24
 801b532:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 801b534:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b538:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801b53a:	f107 0310 	add.w	r3, r7, #16
 801b53e:	4618      	mov	r0, r3
 801b540:	f000 fd0e 	bl	801bf60 <RegionEU868ChannelAdd>
 801b544:	e007      	b.n	801b556 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801b546:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b54a:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 801b54c:	f107 030c 	add.w	r3, r7, #12
 801b550:	4618      	mov	r0, r3
 801b552:	f000 fda7 	bl	801c0a4 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801b556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b55a:	3303      	adds	r3, #3
 801b55c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b560:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b564:	3301      	adds	r3, #1
 801b566:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b56a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b56e:	2b0f      	cmp	r3, #15
 801b570:	d9aa      	bls.n	801b4c8 <RegionEU868ApplyCFList+0x30>
 801b572:	e002      	b.n	801b57a <RegionEU868ApplyCFList+0xe2>
        return;
 801b574:	bf00      	nop
 801b576:	e000      	b.n	801b57a <RegionEU868ApplyCFList+0xe2>
        return;
 801b578:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801b57a:	3728      	adds	r7, #40	; 0x28
 801b57c:	46bd      	mov	sp, r7
 801b57e:	bd80      	pop	{r7, pc}

0801b580 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801b580:	b580      	push	{r7, lr}
 801b582:	b082      	sub	sp, #8
 801b584:	af00      	add	r7, sp, #0
 801b586:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	791b      	ldrb	r3, [r3, #4]
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d002      	beq.n	801b596 <RegionEU868ChanMaskSet+0x16>
 801b590:	2b01      	cmp	r3, #1
 801b592:	d00b      	beq.n	801b5ac <RegionEU868ChanMaskSet+0x2c>
 801b594:	e015      	b.n	801b5c2 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801b596:	4b0e      	ldr	r3, [pc, #56]	; (801b5d0 <RegionEU868ChanMaskSet+0x50>)
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	2201      	movs	r2, #1
 801b5a4:	4619      	mov	r1, r3
 801b5a6:	f7fe feb7 	bl	801a318 <RegionCommonChanMaskCopy>
            break;
 801b5aa:	e00c      	b.n	801b5c6 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801b5ac:	4b08      	ldr	r3, [pc, #32]	; (801b5d0 <RegionEU868ChanMaskSet+0x50>)
 801b5ae:	681b      	ldr	r3, [r3, #0]
 801b5b0:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	681b      	ldr	r3, [r3, #0]
 801b5b8:	2201      	movs	r2, #1
 801b5ba:	4619      	mov	r1, r3
 801b5bc:	f7fe feac 	bl	801a318 <RegionCommonChanMaskCopy>
            break;
 801b5c0:	e001      	b.n	801b5c6 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 801b5c2:	2300      	movs	r3, #0
 801b5c4:	e000      	b.n	801b5c8 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 801b5c6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801b5c8:	4618      	mov	r0, r3
 801b5ca:	3708      	adds	r7, #8
 801b5cc:	46bd      	mov	sp, r7
 801b5ce:	bd80      	pop	{r7, pc}
 801b5d0:	200023a4 	.word	0x200023a4

0801b5d4 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801b5d4:	b580      	push	{r7, lr}
 801b5d6:	b088      	sub	sp, #32
 801b5d8:	af02      	add	r7, sp, #8
 801b5da:	60ba      	str	r2, [r7, #8]
 801b5dc:	607b      	str	r3, [r7, #4]
 801b5de:	4603      	mov	r3, r0
 801b5e0:	73fb      	strb	r3, [r7, #15]
 801b5e2:	460b      	mov	r3, r1
 801b5e4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801b5ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b5ee:	2b07      	cmp	r3, #7
 801b5f0:	bfa8      	it	ge
 801b5f2:	2307      	movge	r3, #7
 801b5f4:	b25a      	sxtb	r2, r3
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b600:	491e      	ldr	r1, [pc, #120]	; (801b67c <RegionEU868ComputeRxWindowParameters+0xa8>)
 801b602:	4618      	mov	r0, r3
 801b604:	f7ff fb88 	bl	801ad18 <RegionCommonGetBandwidth>
 801b608:	4603      	mov	r3, r0
 801b60a:	b2da      	uxtb	r2, r3
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b616:	2b07      	cmp	r3, #7
 801b618:	d10a      	bne.n	801b630 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b620:	461a      	mov	r2, r3
 801b622:	4b17      	ldr	r3, [pc, #92]	; (801b680 <RegionEU868ComputeRxWindowParameters+0xac>)
 801b624:	5c9b      	ldrb	r3, [r3, r2]
 801b626:	4618      	mov	r0, r3
 801b628:	f7ff f8aa 	bl	801a780 <RegionCommonComputeSymbolTimeFsk>
 801b62c:	6178      	str	r0, [r7, #20]
 801b62e:	e011      	b.n	801b654 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b636:	461a      	mov	r2, r3
 801b638:	4b11      	ldr	r3, [pc, #68]	; (801b680 <RegionEU868ComputeRxWindowParameters+0xac>)
 801b63a:	5c9a      	ldrb	r2, [r3, r2]
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b642:	4619      	mov	r1, r3
 801b644:	4b0d      	ldr	r3, [pc, #52]	; (801b67c <RegionEU868ComputeRxWindowParameters+0xa8>)
 801b646:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b64a:	4619      	mov	r1, r3
 801b64c:	4610      	mov	r0, r2
 801b64e:	f7ff f881 	bl	801a754 <RegionCommonComputeSymbolTimeLoRa>
 801b652:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801b654:	4b0b      	ldr	r3, [pc, #44]	; (801b684 <RegionEU868ComputeRxWindowParameters+0xb0>)
 801b656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b658:	4798      	blx	r3
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	3308      	adds	r3, #8
 801b65e:	687a      	ldr	r2, [r7, #4]
 801b660:	320c      	adds	r2, #12
 801b662:	7bb9      	ldrb	r1, [r7, #14]
 801b664:	9201      	str	r2, [sp, #4]
 801b666:	9300      	str	r3, [sp, #0]
 801b668:	4603      	mov	r3, r0
 801b66a:	68ba      	ldr	r2, [r7, #8]
 801b66c:	6978      	ldr	r0, [r7, #20]
 801b66e:	f7ff f897 	bl	801a7a0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 801b672:	bf00      	nop
 801b674:	3718      	adds	r7, #24
 801b676:	46bd      	mov	sp, r7
 801b678:	bd80      	pop	{r7, pc}
 801b67a:	bf00      	nop
 801b67c:	08021dd8 	.word	0x08021dd8
 801b680:	08021dd0 	.word	0x08021dd0
 801b684:	08021e08 	.word	0x08021e08

0801b688 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801b688:	b5b0      	push	{r4, r5, r7, lr}
 801b68a:	b090      	sub	sp, #64	; 0x40
 801b68c:	af0a      	add	r7, sp, #40	; 0x28
 801b68e:	6078      	str	r0, [r7, #4]
 801b690:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	785b      	ldrb	r3, [r3, #1]
 801b696:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801b698:	2300      	movs	r3, #0
 801b69a:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 801b69c:	2300      	movs	r3, #0
 801b69e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	685b      	ldr	r3, [r3, #4]
 801b6a4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801b6a6:	4b5a      	ldr	r3, [pc, #360]	; (801b810 <RegionEU868RxConfig+0x188>)
 801b6a8:	685b      	ldr	r3, [r3, #4]
 801b6aa:	4798      	blx	r3
 801b6ac:	4603      	mov	r3, r0
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d001      	beq.n	801b6b6 <RegionEU868RxConfig+0x2e>
    {
        return false;
 801b6b2:	2300      	movs	r3, #0
 801b6b4:	e0a8      	b.n	801b808 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	7cdb      	ldrb	r3, [r3, #19]
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d126      	bne.n	801b70c <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801b6be:	4b55      	ldr	r3, [pc, #340]	; (801b814 <RegionEU868RxConfig+0x18c>)
 801b6c0:	681a      	ldr	r2, [r3, #0]
 801b6c2:	687b      	ldr	r3, [r7, #4]
 801b6c4:	781b      	ldrb	r3, [r3, #0]
 801b6c6:	4619      	mov	r1, r3
 801b6c8:	460b      	mov	r3, r1
 801b6ca:	005b      	lsls	r3, r3, #1
 801b6cc:	440b      	add	r3, r1
 801b6ce:	009b      	lsls	r3, r3, #2
 801b6d0:	4413      	add	r3, r2
 801b6d2:	681b      	ldr	r3, [r3, #0]
 801b6d4:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801b6d6:	4b4f      	ldr	r3, [pc, #316]	; (801b814 <RegionEU868RxConfig+0x18c>)
 801b6d8:	681a      	ldr	r2, [r3, #0]
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	781b      	ldrb	r3, [r3, #0]
 801b6de:	4619      	mov	r1, r3
 801b6e0:	460b      	mov	r3, r1
 801b6e2:	005b      	lsls	r3, r3, #1
 801b6e4:	440b      	add	r3, r1
 801b6e6:	009b      	lsls	r3, r3, #2
 801b6e8:	4413      	add	r3, r2
 801b6ea:	3304      	adds	r3, #4
 801b6ec:	681b      	ldr	r3, [r3, #0]
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d00c      	beq.n	801b70c <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801b6f2:	4b48      	ldr	r3, [pc, #288]	; (801b814 <RegionEU868RxConfig+0x18c>)
 801b6f4:	681a      	ldr	r2, [r3, #0]
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	781b      	ldrb	r3, [r3, #0]
 801b6fa:	4619      	mov	r1, r3
 801b6fc:	460b      	mov	r3, r1
 801b6fe:	005b      	lsls	r3, r3, #1
 801b700:	440b      	add	r3, r1
 801b702:	009b      	lsls	r3, r3, #2
 801b704:	4413      	add	r3, r2
 801b706:	3304      	adds	r3, #4
 801b708:	681b      	ldr	r3, [r3, #0]
 801b70a:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 801b70c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b710:	4a41      	ldr	r2, [pc, #260]	; (801b818 <RegionEU868RxConfig+0x190>)
 801b712:	5cd3      	ldrb	r3, [r2, r3]
 801b714:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801b716:	4b3e      	ldr	r3, [pc, #248]	; (801b810 <RegionEU868RxConfig+0x188>)
 801b718:	68db      	ldr	r3, [r3, #12]
 801b71a:	6938      	ldr	r0, [r7, #16]
 801b71c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801b71e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b722:	2b07      	cmp	r3, #7
 801b724:	d128      	bne.n	801b778 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801b726:	2300      	movs	r3, #0
 801b728:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801b72a:	4b39      	ldr	r3, [pc, #228]	; (801b810 <RegionEU868RxConfig+0x188>)
 801b72c:	699c      	ldr	r4, [r3, #24]
 801b72e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b732:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b736:	fb02 f303 	mul.w	r3, r2, r3
 801b73a:	4619      	mov	r1, r3
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	689b      	ldr	r3, [r3, #8]
 801b740:	b29b      	uxth	r3, r3
 801b742:	687a      	ldr	r2, [r7, #4]
 801b744:	7c92      	ldrb	r2, [r2, #18]
 801b746:	7df8      	ldrb	r0, [r7, #23]
 801b748:	9209      	str	r2, [sp, #36]	; 0x24
 801b74a:	2200      	movs	r2, #0
 801b74c:	9208      	str	r2, [sp, #32]
 801b74e:	2200      	movs	r2, #0
 801b750:	9207      	str	r2, [sp, #28]
 801b752:	2200      	movs	r2, #0
 801b754:	9206      	str	r2, [sp, #24]
 801b756:	2201      	movs	r2, #1
 801b758:	9205      	str	r2, [sp, #20]
 801b75a:	2200      	movs	r2, #0
 801b75c:	9204      	str	r2, [sp, #16]
 801b75e:	2200      	movs	r2, #0
 801b760:	9203      	str	r2, [sp, #12]
 801b762:	9302      	str	r3, [sp, #8]
 801b764:	2305      	movs	r3, #5
 801b766:	9301      	str	r3, [sp, #4]
 801b768:	4b2c      	ldr	r3, [pc, #176]	; (801b81c <RegionEU868RxConfig+0x194>)
 801b76a:	9300      	str	r3, [sp, #0]
 801b76c:	2300      	movs	r3, #0
 801b76e:	460a      	mov	r2, r1
 801b770:	f24c 3150 	movw	r1, #50000	; 0xc350
 801b774:	47a0      	blx	r4
 801b776:	e024      	b.n	801b7c2 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 801b778:	2301      	movs	r3, #1
 801b77a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801b77c:	4b24      	ldr	r3, [pc, #144]	; (801b810 <RegionEU868RxConfig+0x188>)
 801b77e:	699c      	ldr	r4, [r3, #24]
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	789b      	ldrb	r3, [r3, #2]
 801b784:	461d      	mov	r5, r3
 801b786:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	689b      	ldr	r3, [r3, #8]
 801b78e:	b29b      	uxth	r3, r3
 801b790:	687a      	ldr	r2, [r7, #4]
 801b792:	7c92      	ldrb	r2, [r2, #18]
 801b794:	7df8      	ldrb	r0, [r7, #23]
 801b796:	9209      	str	r2, [sp, #36]	; 0x24
 801b798:	2201      	movs	r2, #1
 801b79a:	9208      	str	r2, [sp, #32]
 801b79c:	2200      	movs	r2, #0
 801b79e:	9207      	str	r2, [sp, #28]
 801b7a0:	2200      	movs	r2, #0
 801b7a2:	9206      	str	r2, [sp, #24]
 801b7a4:	2200      	movs	r2, #0
 801b7a6:	9205      	str	r2, [sp, #20]
 801b7a8:	2200      	movs	r2, #0
 801b7aa:	9204      	str	r2, [sp, #16]
 801b7ac:	2200      	movs	r2, #0
 801b7ae:	9203      	str	r2, [sp, #12]
 801b7b0:	9302      	str	r3, [sp, #8]
 801b7b2:	2308      	movs	r3, #8
 801b7b4:	9301      	str	r3, [sp, #4]
 801b7b6:	2300      	movs	r3, #0
 801b7b8:	9300      	str	r3, [sp, #0]
 801b7ba:	2301      	movs	r3, #1
 801b7bc:	460a      	mov	r2, r1
 801b7be:	4629      	mov	r1, r5
 801b7c0:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	7c5b      	ldrb	r3, [r3, #17]
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d005      	beq.n	801b7d6 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801b7ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b7ce:	4a14      	ldr	r2, [pc, #80]	; (801b820 <RegionEU868RxConfig+0x198>)
 801b7d0:	5cd3      	ldrb	r3, [r2, r3]
 801b7d2:	75bb      	strb	r3, [r7, #22]
 801b7d4:	e004      	b.n	801b7e0 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801b7d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b7da:	4a12      	ldr	r2, [pc, #72]	; (801b824 <RegionEU868RxConfig+0x19c>)
 801b7dc:	5cd3      	ldrb	r3, [r2, r3]
 801b7de:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801b7e0:	4b0b      	ldr	r3, [pc, #44]	; (801b810 <RegionEU868RxConfig+0x188>)
 801b7e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b7e4:	7dba      	ldrb	r2, [r7, #22]
 801b7e6:	320d      	adds	r2, #13
 801b7e8:	b2d1      	uxtb	r1, r2
 801b7ea:	7dfa      	ldrb	r2, [r7, #23]
 801b7ec:	4610      	mov	r0, r2
 801b7ee:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	7cdb      	ldrb	r3, [r3, #19]
 801b7f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801b7f8:	6939      	ldr	r1, [r7, #16]
 801b7fa:	4618      	mov	r0, r3
 801b7fc:	f7ff faaa 	bl	801ad54 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 801b800:	683b      	ldr	r3, [r7, #0]
 801b802:	7bfa      	ldrb	r2, [r7, #15]
 801b804:	701a      	strb	r2, [r3, #0]
    return true;
 801b806:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801b808:	4618      	mov	r0, r3
 801b80a:	3718      	adds	r7, #24
 801b80c:	46bd      	mov	sp, r7
 801b80e:	bdb0      	pop	{r4, r5, r7, pc}
 801b810:	08021e08 	.word	0x08021e08
 801b814:	200023a4 	.word	0x200023a4
 801b818:	08021dd0 	.word	0x08021dd0
 801b81c:	00014585 	.word	0x00014585
 801b820:	08021e00 	.word	0x08021e00
 801b824:	08021df8 	.word	0x08021df8

0801b828 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801b828:	b590      	push	{r4, r7, lr}
 801b82a:	b093      	sub	sp, #76	; 0x4c
 801b82c:	af0a      	add	r7, sp, #40	; 0x28
 801b82e:	60f8      	str	r0, [r7, #12]
 801b830:	60b9      	str	r1, [r7, #8]
 801b832:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801b834:	68fb      	ldr	r3, [r7, #12]
 801b836:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b83a:	461a      	mov	r2, r3
 801b83c:	4b5d      	ldr	r3, [pc, #372]	; (801b9b4 <RegionEU868TxConfig+0x18c>)
 801b83e:	5c9b      	ldrb	r3, [r3, r2]
 801b840:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801b842:	68fb      	ldr	r3, [r7, #12]
 801b844:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801b848:	4b5b      	ldr	r3, [pc, #364]	; (801b9b8 <RegionEU868TxConfig+0x190>)
 801b84a:	681a      	ldr	r2, [r3, #0]
 801b84c:	4b5b      	ldr	r3, [pc, #364]	; (801b9bc <RegionEU868TxConfig+0x194>)
 801b84e:	6819      	ldr	r1, [r3, #0]
 801b850:	68fb      	ldr	r3, [r7, #12]
 801b852:	781b      	ldrb	r3, [r3, #0]
 801b854:	461c      	mov	r4, r3
 801b856:	4623      	mov	r3, r4
 801b858:	005b      	lsls	r3, r3, #1
 801b85a:	4423      	add	r3, r4
 801b85c:	009b      	lsls	r3, r3, #2
 801b85e:	440b      	add	r3, r1
 801b860:	3309      	adds	r3, #9
 801b862:	781b      	ldrb	r3, [r3, #0]
 801b864:	4619      	mov	r1, r3
 801b866:	460b      	mov	r3, r1
 801b868:	005b      	lsls	r3, r3, #1
 801b86a:	440b      	add	r3, r1
 801b86c:	00db      	lsls	r3, r3, #3
 801b86e:	4413      	add	r3, r2
 801b870:	3302      	adds	r3, #2
 801b872:	f993 3000 	ldrsb.w	r3, [r3]
 801b876:	4619      	mov	r1, r3
 801b878:	f7ff fa38 	bl	801acec <RegionCommonLimitTxPower>
 801b87c:	4603      	mov	r3, r0
 801b87e:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 801b880:	68fb      	ldr	r3, [r7, #12]
 801b882:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b886:	494e      	ldr	r1, [pc, #312]	; (801b9c0 <RegionEU868TxConfig+0x198>)
 801b888:	4618      	mov	r0, r3
 801b88a:	f7ff fa45 	bl	801ad18 <RegionCommonGetBandwidth>
 801b88e:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801b890:	2300      	movs	r3, #0
 801b892:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801b894:	68fb      	ldr	r3, [r7, #12]
 801b896:	6859      	ldr	r1, [r3, #4]
 801b898:	68fb      	ldr	r3, [r7, #12]
 801b89a:	689a      	ldr	r2, [r3, #8]
 801b89c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	f7ff f835 	bl	801a910 <RegionCommonComputeTxPower>
 801b8a6:	4603      	mov	r3, r0
 801b8a8:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801b8aa:	4b46      	ldr	r3, [pc, #280]	; (801b9c4 <RegionEU868TxConfig+0x19c>)
 801b8ac:	68da      	ldr	r2, [r3, #12]
 801b8ae:	4b43      	ldr	r3, [pc, #268]	; (801b9bc <RegionEU868TxConfig+0x194>)
 801b8b0:	6819      	ldr	r1, [r3, #0]
 801b8b2:	68fb      	ldr	r3, [r7, #12]
 801b8b4:	781b      	ldrb	r3, [r3, #0]
 801b8b6:	4618      	mov	r0, r3
 801b8b8:	4603      	mov	r3, r0
 801b8ba:	005b      	lsls	r3, r3, #1
 801b8bc:	4403      	add	r3, r0
 801b8be:	009b      	lsls	r3, r3, #2
 801b8c0:	440b      	add	r3, r1
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	4618      	mov	r0, r3
 801b8c6:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801b8c8:	68fb      	ldr	r3, [r7, #12]
 801b8ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b8ce:	2b07      	cmp	r3, #7
 801b8d0:	d124      	bne.n	801b91c <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801b8d2:	2300      	movs	r3, #0
 801b8d4:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801b8d6:	4b3b      	ldr	r3, [pc, #236]	; (801b9c4 <RegionEU868TxConfig+0x19c>)
 801b8d8:	69dc      	ldr	r4, [r3, #28]
 801b8da:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801b8de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b8e2:	fb02 f303 	mul.w	r3, r2, r3
 801b8e6:	461a      	mov	r2, r3
 801b8e8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801b8ec:	7ff8      	ldrb	r0, [r7, #31]
 801b8ee:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801b8f2:	9308      	str	r3, [sp, #32]
 801b8f4:	2300      	movs	r3, #0
 801b8f6:	9307      	str	r3, [sp, #28]
 801b8f8:	2300      	movs	r3, #0
 801b8fa:	9306      	str	r3, [sp, #24]
 801b8fc:	2300      	movs	r3, #0
 801b8fe:	9305      	str	r3, [sp, #20]
 801b900:	2301      	movs	r3, #1
 801b902:	9304      	str	r3, [sp, #16]
 801b904:	2300      	movs	r3, #0
 801b906:	9303      	str	r3, [sp, #12]
 801b908:	2305      	movs	r3, #5
 801b90a:	9302      	str	r3, [sp, #8]
 801b90c:	2300      	movs	r3, #0
 801b90e:	9301      	str	r3, [sp, #4]
 801b910:	9200      	str	r2, [sp, #0]
 801b912:	69bb      	ldr	r3, [r7, #24]
 801b914:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801b918:	47a0      	blx	r4
 801b91a:	e01d      	b.n	801b958 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 801b91c:	2301      	movs	r3, #1
 801b91e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801b920:	4b28      	ldr	r3, [pc, #160]	; (801b9c4 <RegionEU868TxConfig+0x19c>)
 801b922:	69dc      	ldr	r4, [r3, #28]
 801b924:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801b928:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801b92c:	7ff8      	ldrb	r0, [r7, #31]
 801b92e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801b932:	9208      	str	r2, [sp, #32]
 801b934:	2200      	movs	r2, #0
 801b936:	9207      	str	r2, [sp, #28]
 801b938:	2200      	movs	r2, #0
 801b93a:	9206      	str	r2, [sp, #24]
 801b93c:	2200      	movs	r2, #0
 801b93e:	9205      	str	r2, [sp, #20]
 801b940:	2201      	movs	r2, #1
 801b942:	9204      	str	r2, [sp, #16]
 801b944:	2200      	movs	r2, #0
 801b946:	9203      	str	r2, [sp, #12]
 801b948:	2208      	movs	r2, #8
 801b94a:	9202      	str	r2, [sp, #8]
 801b94c:	2201      	movs	r2, #1
 801b94e:	9201      	str	r2, [sp, #4]
 801b950:	9300      	str	r3, [sp, #0]
 801b952:	69bb      	ldr	r3, [r7, #24]
 801b954:	2200      	movs	r2, #0
 801b956:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801b958:	4b18      	ldr	r3, [pc, #96]	; (801b9bc <RegionEU868TxConfig+0x194>)
 801b95a:	681a      	ldr	r2, [r3, #0]
 801b95c:	68fb      	ldr	r3, [r7, #12]
 801b95e:	781b      	ldrb	r3, [r3, #0]
 801b960:	4619      	mov	r1, r3
 801b962:	460b      	mov	r3, r1
 801b964:	005b      	lsls	r3, r3, #1
 801b966:	440b      	add	r3, r1
 801b968:	009b      	lsls	r3, r3, #2
 801b96a:	4413      	add	r3, r2
 801b96c:	681a      	ldr	r2, [r3, #0]
 801b96e:	68fb      	ldr	r3, [r7, #12]
 801b970:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b974:	4619      	mov	r1, r3
 801b976:	4610      	mov	r0, r2
 801b978:	f7ff fa1e 	bl	801adb8 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801b97c:	68fb      	ldr	r3, [r7, #12]
 801b97e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801b982:	68fb      	ldr	r3, [r7, #12]
 801b984:	899b      	ldrh	r3, [r3, #12]
 801b986:	4619      	mov	r1, r3
 801b988:	4610      	mov	r0, r2
 801b98a:	f7ff faa3 	bl	801aed4 <GetTimeOnAir>
 801b98e:	4602      	mov	r2, r0
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801b994:	4b0b      	ldr	r3, [pc, #44]	; (801b9c4 <RegionEU868TxConfig+0x19c>)
 801b996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b998:	68fa      	ldr	r2, [r7, #12]
 801b99a:	8992      	ldrh	r2, [r2, #12]
 801b99c:	b2d1      	uxtb	r1, r2
 801b99e:	7ffa      	ldrb	r2, [r7, #31]
 801b9a0:	4610      	mov	r0, r2
 801b9a2:	4798      	blx	r3

    *txPower = txPowerLimited;
 801b9a4:	68bb      	ldr	r3, [r7, #8]
 801b9a6:	7f7a      	ldrb	r2, [r7, #29]
 801b9a8:	701a      	strb	r2, [r3, #0]
    return true;
 801b9aa:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801b9ac:	4618      	mov	r0, r3
 801b9ae:	3724      	adds	r7, #36	; 0x24
 801b9b0:	46bd      	mov	sp, r7
 801b9b2:	bd90      	pop	{r4, r7, pc}
 801b9b4:	08021dd0 	.word	0x08021dd0
 801b9b8:	200023a0 	.word	0x200023a0
 801b9bc:	200023a4 	.word	0x200023a4
 801b9c0:	08021dd8 	.word	0x08021dd8
 801b9c4:	08021e08 	.word	0x08021e08

0801b9c8 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801b9c8:	b590      	push	{r4, r7, lr}
 801b9ca:	b093      	sub	sp, #76	; 0x4c
 801b9cc:	af00      	add	r7, sp, #0
 801b9ce:	60f8      	str	r0, [r7, #12]
 801b9d0:	60b9      	str	r1, [r7, #8]
 801b9d2:	607a      	str	r2, [r7, #4]
 801b9d4:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801b9d6:	2307      	movs	r3, #7
 801b9d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801b9dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b9e0:	2200      	movs	r2, #0
 801b9e2:	601a      	str	r2, [r3, #0]
 801b9e4:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801b9e6:	2300      	movs	r3, #0
 801b9e8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 801b9ec:	2300      	movs	r3, #0
 801b9ee:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 801b9f2:	2300      	movs	r3, #0
 801b9f4:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801b9f6:	e085      	b.n	801bb04 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801b9f8:	68fb      	ldr	r3, [r7, #12]
 801b9fa:	685a      	ldr	r2, [r3, #4]
 801b9fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801ba00:	4413      	add	r3, r2
 801ba02:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801ba06:	4611      	mov	r1, r2
 801ba08:	4618      	mov	r0, r3
 801ba0a:	f7fe fdc9 	bl	801a5a0 <RegionCommonParseLinkAdrReq>
 801ba0e:	4603      	mov	r3, r0
 801ba10:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 801ba14:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d07b      	beq.n	801bb14 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801ba1c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801ba20:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801ba24:	4413      	add	r3, r2
 801ba26:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801ba2a:	2307      	movs	r3, #7
 801ba2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 801ba30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ba34:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801ba36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d109      	bne.n	801ba52 <RegionEU868LinkAdrReq+0x8a>
 801ba3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d106      	bne.n	801ba52 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 801ba44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801ba48:	f023 0301 	bic.w	r3, r3, #1
 801ba4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801ba50:	e058      	b.n	801bb04 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801ba52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d003      	beq.n	801ba62 <RegionEU868LinkAdrReq+0x9a>
 801ba5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801ba5e:	2b05      	cmp	r3, #5
 801ba60:	d903      	bls.n	801ba6a <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801ba62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801ba66:	2b06      	cmp	r3, #6
 801ba68:	d906      	bls.n	801ba78 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801ba6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801ba6e:	f023 0301 	bic.w	r3, r3, #1
 801ba72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801ba76:	e045      	b.n	801bb04 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801ba78:	2300      	movs	r3, #0
 801ba7a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801ba7e:	e03d      	b.n	801bafc <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801ba80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801ba84:	2b06      	cmp	r3, #6
 801ba86:	d118      	bne.n	801baba <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801ba88:	4b5f      	ldr	r3, [pc, #380]	; (801bc08 <RegionEU868LinkAdrReq+0x240>)
 801ba8a:	6819      	ldr	r1, [r3, #0]
 801ba8c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801ba90:	4613      	mov	r3, r2
 801ba92:	005b      	lsls	r3, r3, #1
 801ba94:	4413      	add	r3, r2
 801ba96:	009b      	lsls	r3, r3, #2
 801ba98:	440b      	add	r3, r1
 801ba9a:	681b      	ldr	r3, [r3, #0]
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	d028      	beq.n	801baf2 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 801baa0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801baa4:	2201      	movs	r2, #1
 801baa6:	fa02 f303 	lsl.w	r3, r2, r3
 801baaa:	b21a      	sxth	r2, r3
 801baac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801baae:	b21b      	sxth	r3, r3
 801bab0:	4313      	orrs	r3, r2
 801bab2:	b21b      	sxth	r3, r3
 801bab4:	b29b      	uxth	r3, r3
 801bab6:	877b      	strh	r3, [r7, #58]	; 0x3a
 801bab8:	e01b      	b.n	801baf2 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801baba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801babc:	461a      	mov	r2, r3
 801babe:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801bac2:	fa42 f303 	asr.w	r3, r2, r3
 801bac6:	f003 0301 	and.w	r3, r3, #1
 801baca:	2b00      	cmp	r3, #0
 801bacc:	d011      	beq.n	801baf2 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801bace:	4b4e      	ldr	r3, [pc, #312]	; (801bc08 <RegionEU868LinkAdrReq+0x240>)
 801bad0:	6819      	ldr	r1, [r3, #0]
 801bad2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801bad6:	4613      	mov	r3, r2
 801bad8:	005b      	lsls	r3, r3, #1
 801bada:	4413      	add	r3, r2
 801badc:	009b      	lsls	r3, r3, #2
 801bade:	440b      	add	r3, r1
 801bae0:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	d105      	bne.n	801baf2 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801bae6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801baea:	f023 0301 	bic.w	r3, r3, #1
 801baee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801baf2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801baf6:	3301      	adds	r3, #1
 801baf8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801bafc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801bb00:	2b0f      	cmp	r3, #15
 801bb02:	d9bd      	bls.n	801ba80 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801bb04:	68fb      	ldr	r3, [r7, #12]
 801bb06:	7a1b      	ldrb	r3, [r3, #8]
 801bb08:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801bb0c:	429a      	cmp	r2, r3
 801bb0e:	f4ff af73 	bcc.w	801b9f8 <RegionEU868LinkAdrReq+0x30>
 801bb12:	e000      	b.n	801bb16 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 801bb14:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801bb16:	2302      	movs	r3, #2
 801bb18:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801bb1c:	68fb      	ldr	r3, [r7, #12]
 801bb1e:	7a5b      	ldrb	r3, [r3, #9]
 801bb20:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 801bb24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801bb28:	4618      	mov	r0, r3
 801bb2a:	f7ff fa23 	bl	801af74 <RegionEU868GetPhyParam>
 801bb2e:	4603      	mov	r3, r0
 801bb30:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 801bb32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801bb36:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801bb38:	68fb      	ldr	r3, [r7, #12]
 801bb3a:	7a9b      	ldrb	r3, [r3, #10]
 801bb3c:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801bb3e:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 801bb42:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801bb44:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 801bb48:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801bb4a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801bb4e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801bb50:	68fb      	ldr	r3, [r7, #12]
 801bb52:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801bb56:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801bb58:	68fb      	ldr	r3, [r7, #12]
 801bb5a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801bb5e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801bb60:	68fb      	ldr	r3, [r7, #12]
 801bb62:	7b5b      	ldrb	r3, [r3, #13]
 801bb64:	b25b      	sxtb	r3, r3
 801bb66:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 801bb68:	2310      	movs	r3, #16
 801bb6a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801bb6c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 801bb70:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801bb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb74:	b25b      	sxtb	r3, r3
 801bb76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801bb7a:	2307      	movs	r3, #7
 801bb7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801bb80:	4b21      	ldr	r3, [pc, #132]	; (801bc08 <RegionEU868LinkAdrReq+0x240>)
 801bb82:	681b      	ldr	r3, [r3, #0]
 801bb84:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801bb86:	2307      	movs	r3, #7
 801bb88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801bb8c:	2300      	movs	r3, #0
 801bb8e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801bb92:	68fb      	ldr	r3, [r7, #12]
 801bb94:	681b      	ldr	r3, [r3, #0]
 801bb96:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801bb98:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801bb9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801bba0:	1c9a      	adds	r2, r3, #2
 801bba2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801bba6:	1c59      	adds	r1, r3, #1
 801bba8:	f107 0010 	add.w	r0, r7, #16
 801bbac:	4623      	mov	r3, r4
 801bbae:	f7fe fd48 	bl	801a642 <RegionCommonLinkAdrReqVerifyParams>
 801bbb2:	4603      	mov	r3, r0
 801bbb4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801bbb8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801bbbc:	2b07      	cmp	r3, #7
 801bbbe:	d10d      	bne.n	801bbdc <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801bbc0:	4b11      	ldr	r3, [pc, #68]	; (801bc08 <RegionEU868LinkAdrReq+0x240>)
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801bbc8:	220c      	movs	r2, #12
 801bbca:	2100      	movs	r1, #0
 801bbcc:	4618      	mov	r0, r3
 801bbce:	f000 fba1 	bl	801c314 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801bbd2:	4b0d      	ldr	r3, [pc, #52]	; (801bc08 <RegionEU868LinkAdrReq+0x240>)
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801bbd8:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801bbdc:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 801bbe0:	68bb      	ldr	r3, [r7, #8]
 801bbe2:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801bbe4:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801bbec:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801bbf0:	683b      	ldr	r3, [r7, #0]
 801bbf2:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801bbf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bbf6:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801bbfa:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 801bbfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801bc00:	4618      	mov	r0, r3
 801bc02:	374c      	adds	r7, #76	; 0x4c
 801bc04:	46bd      	mov	sp, r7
 801bc06:	bd90      	pop	{r4, r7, pc}
 801bc08:	200023a4 	.word	0x200023a4

0801bc0c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801bc0c:	b580      	push	{r7, lr}
 801bc0e:	b084      	sub	sp, #16
 801bc10:	af00      	add	r7, sp, #0
 801bc12:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801bc14:	2307      	movs	r3, #7
 801bc16:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801bc18:	2300      	movs	r3, #0
 801bc1a:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	685b      	ldr	r3, [r3, #4]
 801bc20:	f107 020e 	add.w	r2, r7, #14
 801bc24:	4611      	mov	r1, r2
 801bc26:	4618      	mov	r0, r3
 801bc28:	f7ff f8de 	bl	801ade8 <VerifyRfFreq>
 801bc2c:	4603      	mov	r3, r0
 801bc2e:	f083 0301 	eor.w	r3, r3, #1
 801bc32:	b2db      	uxtb	r3, r3
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	d003      	beq.n	801bc40 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 801bc38:	7bfb      	ldrb	r3, [r7, #15]
 801bc3a:	f023 0301 	bic.w	r3, r3, #1
 801bc3e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	f993 3000 	ldrsb.w	r3, [r3]
 801bc46:	2207      	movs	r2, #7
 801bc48:	2100      	movs	r1, #0
 801bc4a:	4618      	mov	r0, r3
 801bc4c:	f7fe fae7 	bl	801a21e <RegionCommonValueInRange>
 801bc50:	4603      	mov	r3, r0
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	d103      	bne.n	801bc5e <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 801bc56:	7bfb      	ldrb	r3, [r7, #15]
 801bc58:	f023 0302 	bic.w	r3, r3, #2
 801bc5c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801bc64:	2205      	movs	r2, #5
 801bc66:	2100      	movs	r1, #0
 801bc68:	4618      	mov	r0, r3
 801bc6a:	f7fe fad8 	bl	801a21e <RegionCommonValueInRange>
 801bc6e:	4603      	mov	r3, r0
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	d103      	bne.n	801bc7c <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801bc74:	7bfb      	ldrb	r3, [r7, #15]
 801bc76:	f023 0304 	bic.w	r3, r3, #4
 801bc7a:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 801bc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 801bc7e:	4618      	mov	r0, r3
 801bc80:	3710      	adds	r7, #16
 801bc82:	46bd      	mov	sp, r7
 801bc84:	bd80      	pop	{r7, pc}
	...

0801bc88 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801bc88:	b580      	push	{r7, lr}
 801bc8a:	b086      	sub	sp, #24
 801bc8c:	af00      	add	r7, sp, #0
 801bc8e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801bc90:	2303      	movs	r3, #3
 801bc92:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	681b      	ldr	r3, [r3, #0]
 801bc98:	681b      	ldr	r3, [r3, #0]
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d114      	bne.n	801bcc8 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801bca4:	b2db      	uxtb	r3, r3
 801bca6:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 801bca8:	f107 0308 	add.w	r3, r7, #8
 801bcac:	4618      	mov	r0, r3
 801bcae:	f000 f9f9 	bl	801c0a4 <RegionEU868ChannelsRemove>
 801bcb2:	4603      	mov	r3, r0
 801bcb4:	f083 0301 	eor.w	r3, r3, #1
 801bcb8:	b2db      	uxtb	r3, r3
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	d03b      	beq.n	801bd36 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801bcbe:	7dfb      	ldrb	r3, [r7, #23]
 801bcc0:	f023 0303 	bic.w	r3, r3, #3
 801bcc4:	75fb      	strb	r3, [r7, #23]
 801bcc6:	e036      	b.n	801bd36 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	681b      	ldr	r3, [r3, #0]
 801bccc:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801bcd4:	b2db      	uxtb	r3, r3
 801bcd6:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 801bcd8:	f107 030c 	add.w	r3, r7, #12
 801bcdc:	4618      	mov	r0, r3
 801bcde:	f000 f93f 	bl	801bf60 <RegionEU868ChannelAdd>
 801bce2:	4603      	mov	r3, r0
 801bce4:	2b06      	cmp	r3, #6
 801bce6:	d820      	bhi.n	801bd2a <RegionEU868NewChannelReq+0xa2>
 801bce8:	a201      	add	r2, pc, #4	; (adr r2, 801bcf0 <RegionEU868NewChannelReq+0x68>)
 801bcea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bcee:	bf00      	nop
 801bcf0:	0801bd35 	.word	0x0801bd35
 801bcf4:	0801bd2b 	.word	0x0801bd2b
 801bcf8:	0801bd2b 	.word	0x0801bd2b
 801bcfc:	0801bd2b 	.word	0x0801bd2b
 801bd00:	0801bd0d 	.word	0x0801bd0d
 801bd04:	0801bd17 	.word	0x0801bd17
 801bd08:	0801bd21 	.word	0x0801bd21
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 801bd0c:	7dfb      	ldrb	r3, [r7, #23]
 801bd0e:	f023 0301 	bic.w	r3, r3, #1
 801bd12:	75fb      	strb	r3, [r7, #23]
                break;
 801bd14:	e00f      	b.n	801bd36 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801bd16:	7dfb      	ldrb	r3, [r7, #23]
 801bd18:	f023 0302 	bic.w	r3, r3, #2
 801bd1c:	75fb      	strb	r3, [r7, #23]
                break;
 801bd1e:	e00a      	b.n	801bd36 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 801bd20:	7dfb      	ldrb	r3, [r7, #23]
 801bd22:	f023 0303 	bic.w	r3, r3, #3
 801bd26:	75fb      	strb	r3, [r7, #23]
                break;
 801bd28:	e005      	b.n	801bd36 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801bd2a:	7dfb      	ldrb	r3, [r7, #23]
 801bd2c:	f023 0303 	bic.w	r3, r3, #3
 801bd30:	75fb      	strb	r3, [r7, #23]
                break;
 801bd32:	e000      	b.n	801bd36 <RegionEU868NewChannelReq+0xae>
                break;
 801bd34:	bf00      	nop
            }
        }
    }

    return status;
 801bd36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bd3a:	4618      	mov	r0, r3
 801bd3c:	3718      	adds	r7, #24
 801bd3e:	46bd      	mov	sp, r7
 801bd40:	bd80      	pop	{r7, pc}
 801bd42:	bf00      	nop

0801bd44 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801bd44:	b480      	push	{r7}
 801bd46:	b083      	sub	sp, #12
 801bd48:	af00      	add	r7, sp, #0
 801bd4a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801bd4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bd50:	4618      	mov	r0, r3
 801bd52:	370c      	adds	r7, #12
 801bd54:	46bd      	mov	sp, r7
 801bd56:	bc80      	pop	{r7}
 801bd58:	4770      	bx	lr
	...

0801bd5c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801bd5c:	b580      	push	{r7, lr}
 801bd5e:	b084      	sub	sp, #16
 801bd60:	af00      	add	r7, sp, #0
 801bd62:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801bd64:	2303      	movs	r3, #3
 801bd66:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801bd68:	2300      	movs	r3, #0
 801bd6a:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	685b      	ldr	r3, [r3, #4]
 801bd70:	f107 020e 	add.w	r2, r7, #14
 801bd74:	4611      	mov	r1, r2
 801bd76:	4618      	mov	r0, r3
 801bd78:	f7ff f836 	bl	801ade8 <VerifyRfFreq>
 801bd7c:	4603      	mov	r3, r0
 801bd7e:	f083 0301 	eor.w	r3, r3, #1
 801bd82:	b2db      	uxtb	r3, r3
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d003      	beq.n	801bd90 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 801bd88:	7bfb      	ldrb	r3, [r7, #15]
 801bd8a:	f023 0301 	bic.w	r3, r3, #1
 801bd8e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801bd90:	4b13      	ldr	r3, [pc, #76]	; (801bde0 <RegionEU868DlChannelReq+0x84>)
 801bd92:	681a      	ldr	r2, [r3, #0]
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	781b      	ldrb	r3, [r3, #0]
 801bd98:	4619      	mov	r1, r3
 801bd9a:	460b      	mov	r3, r1
 801bd9c:	005b      	lsls	r3, r3, #1
 801bd9e:	440b      	add	r3, r1
 801bda0:	009b      	lsls	r3, r3, #2
 801bda2:	4413      	add	r3, r2
 801bda4:	681b      	ldr	r3, [r3, #0]
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	d103      	bne.n	801bdb2 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 801bdaa:	7bfb      	ldrb	r3, [r7, #15]
 801bdac:	f023 0302 	bic.w	r3, r3, #2
 801bdb0:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801bdb2:	7bfb      	ldrb	r3, [r7, #15]
 801bdb4:	2b03      	cmp	r3, #3
 801bdb6:	d10d      	bne.n	801bdd4 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801bdb8:	4b09      	ldr	r3, [pc, #36]	; (801bde0 <RegionEU868DlChannelReq+0x84>)
 801bdba:	6819      	ldr	r1, [r3, #0]
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	781b      	ldrb	r3, [r3, #0]
 801bdc0:	4618      	mov	r0, r3
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	685a      	ldr	r2, [r3, #4]
 801bdc6:	4603      	mov	r3, r0
 801bdc8:	005b      	lsls	r3, r3, #1
 801bdca:	4403      	add	r3, r0
 801bdcc:	009b      	lsls	r3, r3, #2
 801bdce:	440b      	add	r3, r1
 801bdd0:	3304      	adds	r3, #4
 801bdd2:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 801bdd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bdd8:	4618      	mov	r0, r3
 801bdda:	3710      	adds	r7, #16
 801bddc:	46bd      	mov	sp, r7
 801bdde:	bd80      	pop	{r7, pc}
 801bde0:	200023a4 	.word	0x200023a4

0801bde4 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801bde4:	b480      	push	{r7}
 801bde6:	b083      	sub	sp, #12
 801bde8:	af00      	add	r7, sp, #0
 801bdea:	4603      	mov	r3, r0
 801bdec:	460a      	mov	r2, r1
 801bdee:	71fb      	strb	r3, [r7, #7]
 801bdf0:	4613      	mov	r3, r2
 801bdf2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 801bdf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 801bdf8:	4618      	mov	r0, r3
 801bdfa:	370c      	adds	r7, #12
 801bdfc:	46bd      	mov	sp, r7
 801bdfe:	bc80      	pop	{r7}
 801be00:	4770      	bx	lr
	...

0801be04 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801be04:	b580      	push	{r7, lr}
 801be06:	b09a      	sub	sp, #104	; 0x68
 801be08:	af02      	add	r7, sp, #8
 801be0a:	60f8      	str	r0, [r7, #12]
 801be0c:	60b9      	str	r1, [r7, #8]
 801be0e:	607a      	str	r2, [r7, #4]
 801be10:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 801be12:	2300      	movs	r3, #0
 801be14:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 801be18:	2300      	movs	r3, #0
 801be1a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801be1e:	2300      	movs	r3, #0
 801be20:	64fb      	str	r3, [r7, #76]	; 0x4c
 801be22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801be26:	2200      	movs	r2, #0
 801be28:	601a      	str	r2, [r3, #0]
 801be2a:	605a      	str	r2, [r3, #4]
 801be2c:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801be2e:	230c      	movs	r3, #12
 801be30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 801be34:	2307      	movs	r3, #7
 801be36:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801be38:	4b47      	ldr	r3, [pc, #284]	; (801bf58 <RegionEU868NextChannel+0x154>)
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801be40:	2201      	movs	r2, #1
 801be42:	2100      	movs	r1, #0
 801be44:	4618      	mov	r0, r3
 801be46:	f7fe fa3b 	bl	801a2c0 <RegionCommonCountChannels>
 801be4a:	4603      	mov	r3, r0
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d10a      	bne.n	801be66 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801be50:	4b41      	ldr	r3, [pc, #260]	; (801bf58 <RegionEU868NextChannel+0x154>)
 801be52:	681b      	ldr	r3, [r3, #0]
 801be54:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 801be58:	4b3f      	ldr	r3, [pc, #252]	; (801bf58 <RegionEU868NextChannel+0x154>)
 801be5a:	681b      	ldr	r3, [r3, #0]
 801be5c:	f042 0207 	orr.w	r2, r2, #7
 801be60:	b292      	uxth	r2, r2
 801be62:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801be66:	68fb      	ldr	r3, [r7, #12]
 801be68:	7a5b      	ldrb	r3, [r3, #9]
 801be6a:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801be6c:	68fb      	ldr	r3, [r7, #12]
 801be6e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801be72:	b2db      	uxtb	r3, r3
 801be74:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801be76:	4b38      	ldr	r3, [pc, #224]	; (801bf58 <RegionEU868NextChannel+0x154>)
 801be78:	681b      	ldr	r3, [r3, #0]
 801be7a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801be7e:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801be80:	4b35      	ldr	r3, [pc, #212]	; (801bf58 <RegionEU868NextChannel+0x154>)
 801be82:	681b      	ldr	r3, [r3, #0]
 801be84:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801be86:	4b35      	ldr	r3, [pc, #212]	; (801bf5c <RegionEU868NextChannel+0x158>)
 801be88:	681b      	ldr	r3, [r3, #0]
 801be8a:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801be8c:	2310      	movs	r3, #16
 801be8e:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 801be90:	f107 0312 	add.w	r3, r7, #18
 801be94:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801be96:	68fb      	ldr	r3, [r7, #12]
 801be98:	681b      	ldr	r3, [r3, #0]
 801be9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801be9c:	68fb      	ldr	r3, [r7, #12]
 801be9e:	685b      	ldr	r3, [r3, #4]
 801bea0:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801bea2:	68fb      	ldr	r3, [r7, #12]
 801bea4:	7a9b      	ldrb	r3, [r3, #10]
 801bea6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801beaa:	2306      	movs	r3, #6
 801beac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801beb0:	68fa      	ldr	r2, [r7, #12]
 801beb2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801beb6:	320c      	adds	r2, #12
 801beb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bebc:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801bec0:	68fb      	ldr	r3, [r7, #12]
 801bec2:	7d1b      	ldrb	r3, [r3, #20]
 801bec4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801bec8:	68fb      	ldr	r3, [r7, #12]
 801beca:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801bece:	68fb      	ldr	r3, [r7, #12]
 801bed0:	8adb      	ldrh	r3, [r3, #22]
 801bed2:	4619      	mov	r1, r3
 801bed4:	4610      	mov	r0, r2
 801bed6:	f7fe fffd 	bl	801aed4 <GetTimeOnAir>
 801beda:	4603      	mov	r3, r0
 801bedc:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801bede:	f107 0314 	add.w	r3, r7, #20
 801bee2:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801bee4:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 801bee8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801beec:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	9301      	str	r3, [sp, #4]
 801bef4:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 801bef8:	9300      	str	r3, [sp, #0]
 801befa:	460b      	mov	r3, r1
 801befc:	6839      	ldr	r1, [r7, #0]
 801befe:	f7fe fe55 	bl	801abac <RegionCommonIdentifyChannels>
 801bf02:	4603      	mov	r3, r0
 801bf04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801bf08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	d10e      	bne.n	801bf2e <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801bf10:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801bf14:	3b01      	subs	r3, #1
 801bf16:	4619      	mov	r1, r3
 801bf18:	2000      	movs	r0, #0
 801bf1a:	f000 f9a9 	bl	801c270 <randr>
 801bf1e:	4603      	mov	r3, r0
 801bf20:	3360      	adds	r3, #96	; 0x60
 801bf22:	443b      	add	r3, r7
 801bf24:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801bf28:	68bb      	ldr	r3, [r7, #8]
 801bf2a:	701a      	strb	r2, [r3, #0]
 801bf2c:	e00e      	b.n	801bf4c <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801bf2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801bf32:	2b0c      	cmp	r3, #12
 801bf34:	d10a      	bne.n	801bf4c <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801bf36:	4b08      	ldr	r3, [pc, #32]	; (801bf58 <RegionEU868NextChannel+0x154>)
 801bf38:	681b      	ldr	r3, [r3, #0]
 801bf3a:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 801bf3e:	4b06      	ldr	r3, [pc, #24]	; (801bf58 <RegionEU868NextChannel+0x154>)
 801bf40:	681b      	ldr	r3, [r3, #0]
 801bf42:	f042 0207 	orr.w	r2, r2, #7
 801bf46:	b292      	uxth	r2, r2
 801bf48:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 801bf4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801bf50:	4618      	mov	r0, r3
 801bf52:	3760      	adds	r7, #96	; 0x60
 801bf54:	46bd      	mov	sp, r7
 801bf56:	bd80      	pop	{r7, pc}
 801bf58:	200023a4 	.word	0x200023a4
 801bf5c:	200023a0 	.word	0x200023a0

0801bf60 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801bf60:	b580      	push	{r7, lr}
 801bf62:	b084      	sub	sp, #16
 801bf64:	af00      	add	r7, sp, #0
 801bf66:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801bf68:	2300      	movs	r3, #0
 801bf6a:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 801bf6c:	2300      	movs	r3, #0
 801bf6e:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 801bf70:	2300      	movs	r3, #0
 801bf72:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	791b      	ldrb	r3, [r3, #4]
 801bf78:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801bf7a:	7b7b      	ldrb	r3, [r7, #13]
 801bf7c:	2b02      	cmp	r3, #2
 801bf7e:	d801      	bhi.n	801bf84 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801bf80:	2306      	movs	r3, #6
 801bf82:	e089      	b.n	801c098 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 801bf84:	7b7b      	ldrb	r3, [r7, #13]
 801bf86:	2b0f      	cmp	r3, #15
 801bf88:	d901      	bls.n	801bf8e <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801bf8a:	2303      	movs	r3, #3
 801bf8c:	e084      	b.n	801c098 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	681b      	ldr	r3, [r3, #0]
 801bf92:	7a1b      	ldrb	r3, [r3, #8]
 801bf94:	f343 0303 	sbfx	r3, r3, #0, #4
 801bf98:	b25b      	sxtb	r3, r3
 801bf9a:	2207      	movs	r2, #7
 801bf9c:	2100      	movs	r1, #0
 801bf9e:	4618      	mov	r0, r3
 801bfa0:	f7fe f93d 	bl	801a21e <RegionCommonValueInRange>
 801bfa4:	4603      	mov	r3, r0
 801bfa6:	2b00      	cmp	r3, #0
 801bfa8:	d101      	bne.n	801bfae <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801bfaa:	2301      	movs	r3, #1
 801bfac:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	681b      	ldr	r3, [r3, #0]
 801bfb2:	7a1b      	ldrb	r3, [r3, #8]
 801bfb4:	f343 1303 	sbfx	r3, r3, #4, #4
 801bfb8:	b25b      	sxtb	r3, r3
 801bfba:	2207      	movs	r2, #7
 801bfbc:	2100      	movs	r1, #0
 801bfbe:	4618      	mov	r0, r3
 801bfc0:	f7fe f92d 	bl	801a21e <RegionCommonValueInRange>
 801bfc4:	4603      	mov	r3, r0
 801bfc6:	2b00      	cmp	r3, #0
 801bfc8:	d101      	bne.n	801bfce <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801bfca:	2301      	movs	r3, #1
 801bfcc:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	681b      	ldr	r3, [r3, #0]
 801bfd2:	7a1b      	ldrb	r3, [r3, #8]
 801bfd4:	f343 0303 	sbfx	r3, r3, #0, #4
 801bfd8:	b25a      	sxtb	r2, r3
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	681b      	ldr	r3, [r3, #0]
 801bfde:	7a1b      	ldrb	r3, [r3, #8]
 801bfe0:	f343 1303 	sbfx	r3, r3, #4, #4
 801bfe4:	b25b      	sxtb	r3, r3
 801bfe6:	429a      	cmp	r2, r3
 801bfe8:	dd01      	ble.n	801bfee <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801bfea:	2301      	movs	r3, #1
 801bfec:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801bfee:	7bbb      	ldrb	r3, [r7, #14]
 801bff0:	f083 0301 	eor.w	r3, r3, #1
 801bff4:	b2db      	uxtb	r3, r3
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d010      	beq.n	801c01c <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801bffa:	687b      	ldr	r3, [r7, #4]
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	681b      	ldr	r3, [r3, #0]
 801c000:	f107 020c 	add.w	r2, r7, #12
 801c004:	4611      	mov	r1, r2
 801c006:	4618      	mov	r0, r3
 801c008:	f7fe feee 	bl	801ade8 <VerifyRfFreq>
 801c00c:	4603      	mov	r3, r0
 801c00e:	f083 0301 	eor.w	r3, r3, #1
 801c012:	b2db      	uxtb	r3, r3
 801c014:	2b00      	cmp	r3, #0
 801c016:	d001      	beq.n	801c01c <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801c018:	2301      	movs	r3, #1
 801c01a:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801c01c:	7bfb      	ldrb	r3, [r7, #15]
 801c01e:	2b00      	cmp	r3, #0
 801c020:	d004      	beq.n	801c02c <RegionEU868ChannelAdd+0xcc>
 801c022:	7bbb      	ldrb	r3, [r7, #14]
 801c024:	2b00      	cmp	r3, #0
 801c026:	d001      	beq.n	801c02c <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801c028:	2306      	movs	r3, #6
 801c02a:	e035      	b.n	801c098 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 801c02c:	7bfb      	ldrb	r3, [r7, #15]
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d001      	beq.n	801c036 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801c032:	2305      	movs	r3, #5
 801c034:	e030      	b.n	801c098 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801c036:	7bbb      	ldrb	r3, [r7, #14]
 801c038:	2b00      	cmp	r3, #0
 801c03a:	d001      	beq.n	801c040 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801c03c:	2304      	movs	r3, #4
 801c03e:	e02b      	b.n	801c098 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 801c040:	4b17      	ldr	r3, [pc, #92]	; (801c0a0 <RegionEU868ChannelAdd+0x140>)
 801c042:	6819      	ldr	r1, [r3, #0]
 801c044:	7b7a      	ldrb	r2, [r7, #13]
 801c046:	4613      	mov	r3, r2
 801c048:	005b      	lsls	r3, r3, #1
 801c04a:	4413      	add	r3, r2
 801c04c:	009b      	lsls	r3, r3, #2
 801c04e:	18c8      	adds	r0, r1, r3
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	681b      	ldr	r3, [r3, #0]
 801c054:	220c      	movs	r2, #12
 801c056:	4619      	mov	r1, r3
 801c058:	f000 f921 	bl	801c29e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801c05c:	4b10      	ldr	r3, [pc, #64]	; (801c0a0 <RegionEU868ChannelAdd+0x140>)
 801c05e:	6819      	ldr	r1, [r3, #0]
 801c060:	7b7a      	ldrb	r2, [r7, #13]
 801c062:	7b38      	ldrb	r0, [r7, #12]
 801c064:	4613      	mov	r3, r2
 801c066:	005b      	lsls	r3, r3, #1
 801c068:	4413      	add	r3, r2
 801c06a:	009b      	lsls	r3, r3, #2
 801c06c:	440b      	add	r3, r1
 801c06e:	3309      	adds	r3, #9
 801c070:	4602      	mov	r2, r0
 801c072:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 801c074:	4b0a      	ldr	r3, [pc, #40]	; (801c0a0 <RegionEU868ChannelAdd+0x140>)
 801c076:	681b      	ldr	r3, [r3, #0]
 801c078:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 801c07c:	b21a      	sxth	r2, r3
 801c07e:	7b7b      	ldrb	r3, [r7, #13]
 801c080:	2101      	movs	r1, #1
 801c082:	fa01 f303 	lsl.w	r3, r1, r3
 801c086:	b21b      	sxth	r3, r3
 801c088:	4313      	orrs	r3, r2
 801c08a:	b21a      	sxth	r2, r3
 801c08c:	4b04      	ldr	r3, [pc, #16]	; (801c0a0 <RegionEU868ChannelAdd+0x140>)
 801c08e:	681b      	ldr	r3, [r3, #0]
 801c090:	b292      	uxth	r2, r2
 801c092:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 801c096:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801c098:	4618      	mov	r0, r3
 801c09a:	3710      	adds	r7, #16
 801c09c:	46bd      	mov	sp, r7
 801c09e:	bd80      	pop	{r7, pc}
 801c0a0:	200023a4 	.word	0x200023a4

0801c0a4 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 801c0a4:	b580      	push	{r7, lr}
 801c0a6:	b086      	sub	sp, #24
 801c0a8:	af00      	add	r7, sp, #0
 801c0aa:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	781b      	ldrb	r3, [r3, #0]
 801c0b0:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801c0b2:	7dfb      	ldrb	r3, [r7, #23]
 801c0b4:	2b02      	cmp	r3, #2
 801c0b6:	d801      	bhi.n	801c0bc <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 801c0b8:	2300      	movs	r3, #0
 801c0ba:	e016      	b.n	801c0ea <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801c0bc:	4b0d      	ldr	r3, [pc, #52]	; (801c0f4 <RegionEU868ChannelsRemove+0x50>)
 801c0be:	6819      	ldr	r1, [r3, #0]
 801c0c0:	7dfa      	ldrb	r2, [r7, #23]
 801c0c2:	4613      	mov	r3, r2
 801c0c4:	005b      	lsls	r3, r3, #1
 801c0c6:	4413      	add	r3, r2
 801c0c8:	009b      	lsls	r3, r3, #2
 801c0ca:	440b      	add	r3, r1
 801c0cc:	461a      	mov	r2, r3
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	6013      	str	r3, [r2, #0]
 801c0d2:	6053      	str	r3, [r2, #4]
 801c0d4:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801c0d6:	4b07      	ldr	r3, [pc, #28]	; (801c0f4 <RegionEU868ChannelsRemove+0x50>)
 801c0d8:	681b      	ldr	r3, [r3, #0]
 801c0da:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801c0de:	7df9      	ldrb	r1, [r7, #23]
 801c0e0:	2210      	movs	r2, #16
 801c0e2:	4618      	mov	r0, r3
 801c0e4:	f7fe f8b8 	bl	801a258 <RegionCommonChanDisable>
 801c0e8:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801c0ea:	4618      	mov	r0, r3
 801c0ec:	3718      	adds	r7, #24
 801c0ee:	46bd      	mov	sp, r7
 801c0f0:	bd80      	pop	{r7, pc}
 801c0f2:	bf00      	nop
 801c0f4:	200023a4 	.word	0x200023a4

0801c0f8 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801c0f8:	b590      	push	{r4, r7, lr}
 801c0fa:	b085      	sub	sp, #20
 801c0fc:	af00      	add	r7, sp, #0
 801c0fe:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801c106:	4b20      	ldr	r3, [pc, #128]	; (801c188 <RegionEU868SetContinuousWave+0x90>)
 801c108:	681a      	ldr	r2, [r3, #0]
 801c10a:	4b20      	ldr	r3, [pc, #128]	; (801c18c <RegionEU868SetContinuousWave+0x94>)
 801c10c:	6819      	ldr	r1, [r3, #0]
 801c10e:	687b      	ldr	r3, [r7, #4]
 801c110:	781b      	ldrb	r3, [r3, #0]
 801c112:	461c      	mov	r4, r3
 801c114:	4623      	mov	r3, r4
 801c116:	005b      	lsls	r3, r3, #1
 801c118:	4423      	add	r3, r4
 801c11a:	009b      	lsls	r3, r3, #2
 801c11c:	440b      	add	r3, r1
 801c11e:	3309      	adds	r3, #9
 801c120:	781b      	ldrb	r3, [r3, #0]
 801c122:	4619      	mov	r1, r3
 801c124:	460b      	mov	r3, r1
 801c126:	005b      	lsls	r3, r3, #1
 801c128:	440b      	add	r3, r1
 801c12a:	00db      	lsls	r3, r3, #3
 801c12c:	4413      	add	r3, r2
 801c12e:	3302      	adds	r3, #2
 801c130:	f993 3000 	ldrsb.w	r3, [r3]
 801c134:	4619      	mov	r1, r3
 801c136:	f7fe fdd9 	bl	801acec <RegionCommonLimitTxPower>
 801c13a:	4603      	mov	r3, r0
 801c13c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801c13e:	2300      	movs	r3, #0
 801c140:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801c142:	4b12      	ldr	r3, [pc, #72]	; (801c18c <RegionEU868SetContinuousWave+0x94>)
 801c144:	681a      	ldr	r2, [r3, #0]
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	781b      	ldrb	r3, [r3, #0]
 801c14a:	4619      	mov	r1, r3
 801c14c:	460b      	mov	r3, r1
 801c14e:	005b      	lsls	r3, r3, #1
 801c150:	440b      	add	r3, r1
 801c152:	009b      	lsls	r3, r3, #2
 801c154:	4413      	add	r3, r2
 801c156:	681b      	ldr	r3, [r3, #0]
 801c158:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	6859      	ldr	r1, [r3, #4]
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	689a      	ldr	r2, [r3, #8]
 801c162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c166:	4618      	mov	r0, r3
 801c168:	f7fe fbd2 	bl	801a910 <RegionCommonComputeTxPower>
 801c16c:	4603      	mov	r3, r0
 801c16e:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801c170:	4b07      	ldr	r3, [pc, #28]	; (801c190 <RegionEU868SetContinuousWave+0x98>)
 801c172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c174:	687a      	ldr	r2, [r7, #4]
 801c176:	8992      	ldrh	r2, [r2, #12]
 801c178:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801c17c:	68b8      	ldr	r0, [r7, #8]
 801c17e:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 801c180:	bf00      	nop
 801c182:	3714      	adds	r7, #20
 801c184:	46bd      	mov	sp, r7
 801c186:	bd90      	pop	{r4, r7, pc}
 801c188:	200023a0 	.word	0x200023a0
 801c18c:	200023a4 	.word	0x200023a4
 801c190:	08021e08 	.word	0x08021e08

0801c194 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801c194:	b480      	push	{r7}
 801c196:	b085      	sub	sp, #20
 801c198:	af00      	add	r7, sp, #0
 801c19a:	4603      	mov	r3, r0
 801c19c:	71fb      	strb	r3, [r7, #7]
 801c19e:	460b      	mov	r3, r1
 801c1a0:	71bb      	strb	r3, [r7, #6]
 801c1a2:	4613      	mov	r3, r2
 801c1a4:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801c1a6:	79ba      	ldrb	r2, [r7, #6]
 801c1a8:	797b      	ldrb	r3, [r7, #5]
 801c1aa:	1ad3      	subs	r3, r2, r3
 801c1ac:	b2db      	uxtb	r3, r3
 801c1ae:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801c1b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	da01      	bge.n	801c1bc <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 801c1b8:	2300      	movs	r3, #0
 801c1ba:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801c1bc:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801c1be:	4618      	mov	r0, r3
 801c1c0:	3714      	adds	r7, #20
 801c1c2:	46bd      	mov	sp, r7
 801c1c4:	bc80      	pop	{r7}
 801c1c6:	4770      	bx	lr

0801c1c8 <RegionEU868RxBeaconSetup>:

void RegionEU868RxBeaconSetup( RxBeaconSetup_t* rxBeaconSetup, uint8_t* outDr )
{
 801c1c8:	b580      	push	{r7, lr}
 801c1ca:	b088      	sub	sp, #32
 801c1cc:	af00      	add	r7, sp, #0
 801c1ce:	6078      	str	r0, [r7, #4]
 801c1d0:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RegionCommonRxBeaconSetupParams_t regionCommonRxBeaconSetup;

    regionCommonRxBeaconSetup.Datarates = DataratesEU868;
 801c1d2:	4b0e      	ldr	r3, [pc, #56]	; (801c20c <RegionEU868RxBeaconSetup+0x44>)
 801c1d4:	60fb      	str	r3, [r7, #12]
    regionCommonRxBeaconSetup.Frequency = rxBeaconSetup->Frequency;
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	689b      	ldr	r3, [r3, #8]
 801c1da:	613b      	str	r3, [r7, #16]
    regionCommonRxBeaconSetup.BeaconSize = EU868_BEACON_SIZE;
 801c1dc:	2311      	movs	r3, #17
 801c1de:	753b      	strb	r3, [r7, #20]
    regionCommonRxBeaconSetup.BeaconDatarate = EU868_BEACON_CHANNEL_DR;
 801c1e0:	2303      	movs	r3, #3
 801c1e2:	757b      	strb	r3, [r7, #21]
    regionCommonRxBeaconSetup.BeaconChannelBW = EU868_BEACON_CHANNEL_BW;
 801c1e4:	2300      	movs	r3, #0
 801c1e6:	75bb      	strb	r3, [r7, #22]
    regionCommonRxBeaconSetup.RxTime = rxBeaconSetup->RxTime;
 801c1e8:	687b      	ldr	r3, [r7, #4]
 801c1ea:	685b      	ldr	r3, [r3, #4]
 801c1ec:	61bb      	str	r3, [r7, #24]
    regionCommonRxBeaconSetup.SymbolTimeout = rxBeaconSetup->SymbolTimeout;
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	881b      	ldrh	r3, [r3, #0]
 801c1f2:	83bb      	strh	r3, [r7, #28]

    RegionCommonRxBeaconSetup( &regionCommonRxBeaconSetup );
 801c1f4:	f107 030c 	add.w	r3, r7, #12
 801c1f8:	4618      	mov	r0, r3
 801c1fa:	f7fe fbbb 	bl	801a974 <RegionCommonRxBeaconSetup>

    // Store downlink datarate
    *outDr = EU868_BEACON_CHANNEL_DR;
 801c1fe:	683b      	ldr	r3, [r7, #0]
 801c200:	2203      	movs	r2, #3
 801c202:	701a      	strb	r2, [r3, #0]
#endif /* REGION_EU868 */
}
 801c204:	bf00      	nop
 801c206:	3720      	adds	r7, #32
 801c208:	46bd      	mov	sp, r7
 801c20a:	bd80      	pop	{r7, pc}
 801c20c:	08021dd0 	.word	0x08021dd0

0801c210 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801c210:	b480      	push	{r7}
 801c212:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801c214:	4b0d      	ldr	r3, [pc, #52]	; (801c24c <rand1+0x3c>)
 801c216:	681b      	ldr	r3, [r3, #0]
 801c218:	4a0d      	ldr	r2, [pc, #52]	; (801c250 <rand1+0x40>)
 801c21a:	fb02 f303 	mul.w	r3, r2, r3
 801c21e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c222:	3339      	adds	r3, #57	; 0x39
 801c224:	4a09      	ldr	r2, [pc, #36]	; (801c24c <rand1+0x3c>)
 801c226:	6013      	str	r3, [r2, #0]
 801c228:	4b08      	ldr	r3, [pc, #32]	; (801c24c <rand1+0x3c>)
 801c22a:	681a      	ldr	r2, [r3, #0]
 801c22c:	2303      	movs	r3, #3
 801c22e:	fba3 1302 	umull	r1, r3, r3, r2
 801c232:	1ad1      	subs	r1, r2, r3
 801c234:	0849      	lsrs	r1, r1, #1
 801c236:	440b      	add	r3, r1
 801c238:	0f99      	lsrs	r1, r3, #30
 801c23a:	460b      	mov	r3, r1
 801c23c:	07db      	lsls	r3, r3, #31
 801c23e:	1a5b      	subs	r3, r3, r1
 801c240:	1ad1      	subs	r1, r2, r3
 801c242:	460b      	mov	r3, r1
}
 801c244:	4618      	mov	r0, r3
 801c246:	46bd      	mov	sp, r7
 801c248:	bc80      	pop	{r7}
 801c24a:	4770      	bx	lr
 801c24c:	20000168 	.word	0x20000168
 801c250:	41c64e6d 	.word	0x41c64e6d

0801c254 <srand1>:

void srand1( uint32_t seed )
{
 801c254:	b480      	push	{r7}
 801c256:	b083      	sub	sp, #12
 801c258:	af00      	add	r7, sp, #0
 801c25a:	6078      	str	r0, [r7, #4]
    next = seed;
 801c25c:	4a03      	ldr	r2, [pc, #12]	; (801c26c <srand1+0x18>)
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	6013      	str	r3, [r2, #0]
}
 801c262:	bf00      	nop
 801c264:	370c      	adds	r7, #12
 801c266:	46bd      	mov	sp, r7
 801c268:	bc80      	pop	{r7}
 801c26a:	4770      	bx	lr
 801c26c:	20000168 	.word	0x20000168

0801c270 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801c270:	b580      	push	{r7, lr}
 801c272:	b082      	sub	sp, #8
 801c274:	af00      	add	r7, sp, #0
 801c276:	6078      	str	r0, [r7, #4]
 801c278:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801c27a:	f7ff ffc9 	bl	801c210 <rand1>
 801c27e:	4602      	mov	r2, r0
 801c280:	6839      	ldr	r1, [r7, #0]
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	1acb      	subs	r3, r1, r3
 801c286:	3301      	adds	r3, #1
 801c288:	fb92 f1f3 	sdiv	r1, r2, r3
 801c28c:	fb01 f303 	mul.w	r3, r1, r3
 801c290:	1ad2      	subs	r2, r2, r3
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	4413      	add	r3, r2
}
 801c296:	4618      	mov	r0, r3
 801c298:	3708      	adds	r7, #8
 801c29a:	46bd      	mov	sp, r7
 801c29c:	bd80      	pop	{r7, pc}

0801c29e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801c29e:	b480      	push	{r7}
 801c2a0:	b085      	sub	sp, #20
 801c2a2:	af00      	add	r7, sp, #0
 801c2a4:	60f8      	str	r0, [r7, #12]
 801c2a6:	60b9      	str	r1, [r7, #8]
 801c2a8:	4613      	mov	r3, r2
 801c2aa:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801c2ac:	e007      	b.n	801c2be <memcpy1+0x20>
    {
        *dst++ = *src++;
 801c2ae:	68ba      	ldr	r2, [r7, #8]
 801c2b0:	1c53      	adds	r3, r2, #1
 801c2b2:	60bb      	str	r3, [r7, #8]
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	1c59      	adds	r1, r3, #1
 801c2b8:	60f9      	str	r1, [r7, #12]
 801c2ba:	7812      	ldrb	r2, [r2, #0]
 801c2bc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801c2be:	88fb      	ldrh	r3, [r7, #6]
 801c2c0:	1e5a      	subs	r2, r3, #1
 801c2c2:	80fa      	strh	r2, [r7, #6]
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	d1f2      	bne.n	801c2ae <memcpy1+0x10>
    }
}
 801c2c8:	bf00      	nop
 801c2ca:	bf00      	nop
 801c2cc:	3714      	adds	r7, #20
 801c2ce:	46bd      	mov	sp, r7
 801c2d0:	bc80      	pop	{r7}
 801c2d2:	4770      	bx	lr

0801c2d4 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801c2d4:	b480      	push	{r7}
 801c2d6:	b085      	sub	sp, #20
 801c2d8:	af00      	add	r7, sp, #0
 801c2da:	60f8      	str	r0, [r7, #12]
 801c2dc:	60b9      	str	r1, [r7, #8]
 801c2de:	4613      	mov	r3, r2
 801c2e0:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801c2e2:	88fb      	ldrh	r3, [r7, #6]
 801c2e4:	3b01      	subs	r3, #1
 801c2e6:	68fa      	ldr	r2, [r7, #12]
 801c2e8:	4413      	add	r3, r2
 801c2ea:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801c2ec:	e007      	b.n	801c2fe <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801c2ee:	68ba      	ldr	r2, [r7, #8]
 801c2f0:	1c53      	adds	r3, r2, #1
 801c2f2:	60bb      	str	r3, [r7, #8]
 801c2f4:	68fb      	ldr	r3, [r7, #12]
 801c2f6:	1e59      	subs	r1, r3, #1
 801c2f8:	60f9      	str	r1, [r7, #12]
 801c2fa:	7812      	ldrb	r2, [r2, #0]
 801c2fc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801c2fe:	88fb      	ldrh	r3, [r7, #6]
 801c300:	1e5a      	subs	r2, r3, #1
 801c302:	80fa      	strh	r2, [r7, #6]
 801c304:	2b00      	cmp	r3, #0
 801c306:	d1f2      	bne.n	801c2ee <memcpyr+0x1a>
    }
}
 801c308:	bf00      	nop
 801c30a:	bf00      	nop
 801c30c:	3714      	adds	r7, #20
 801c30e:	46bd      	mov	sp, r7
 801c310:	bc80      	pop	{r7}
 801c312:	4770      	bx	lr

0801c314 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801c314:	b480      	push	{r7}
 801c316:	b083      	sub	sp, #12
 801c318:	af00      	add	r7, sp, #0
 801c31a:	6078      	str	r0, [r7, #4]
 801c31c:	460b      	mov	r3, r1
 801c31e:	70fb      	strb	r3, [r7, #3]
 801c320:	4613      	mov	r3, r2
 801c322:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801c324:	e004      	b.n	801c330 <memset1+0x1c>
    {
        *dst++ = value;
 801c326:	687b      	ldr	r3, [r7, #4]
 801c328:	1c5a      	adds	r2, r3, #1
 801c32a:	607a      	str	r2, [r7, #4]
 801c32c:	78fa      	ldrb	r2, [r7, #3]
 801c32e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801c330:	883b      	ldrh	r3, [r7, #0]
 801c332:	1e5a      	subs	r2, r3, #1
 801c334:	803a      	strh	r2, [r7, #0]
 801c336:	2b00      	cmp	r3, #0
 801c338:	d1f5      	bne.n	801c326 <memset1+0x12>
    }
}
 801c33a:	bf00      	nop
 801c33c:	bf00      	nop
 801c33e:	370c      	adds	r7, #12
 801c340:	46bd      	mov	sp, r7
 801c342:	bc80      	pop	{r7}
 801c344:	4770      	bx	lr
	...

0801c348 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801c348:	b480      	push	{r7}
 801c34a:	b085      	sub	sp, #20
 801c34c:	af00      	add	r7, sp, #0
 801c34e:	6078      	str	r0, [r7, #4]
 801c350:	460b      	mov	r3, r1
 801c352:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801c354:	f04f 33ff 	mov.w	r3, #4294967295
 801c358:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801c35a:	687b      	ldr	r3, [r7, #4]
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	d101      	bne.n	801c364 <Crc32+0x1c>
    {
        return 0;
 801c360:	2300      	movs	r3, #0
 801c362:	e026      	b.n	801c3b2 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801c364:	2300      	movs	r3, #0
 801c366:	817b      	strh	r3, [r7, #10]
 801c368:	e01d      	b.n	801c3a6 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801c36a:	897b      	ldrh	r3, [r7, #10]
 801c36c:	687a      	ldr	r2, [r7, #4]
 801c36e:	4413      	add	r3, r2
 801c370:	781b      	ldrb	r3, [r3, #0]
 801c372:	461a      	mov	r2, r3
 801c374:	68fb      	ldr	r3, [r7, #12]
 801c376:	4053      	eors	r3, r2
 801c378:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801c37a:	2300      	movs	r3, #0
 801c37c:	813b      	strh	r3, [r7, #8]
 801c37e:	e00c      	b.n	801c39a <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801c380:	68fb      	ldr	r3, [r7, #12]
 801c382:	085a      	lsrs	r2, r3, #1
 801c384:	68fb      	ldr	r3, [r7, #12]
 801c386:	f003 0301 	and.w	r3, r3, #1
 801c38a:	425b      	negs	r3, r3
 801c38c:	490b      	ldr	r1, [pc, #44]	; (801c3bc <Crc32+0x74>)
 801c38e:	400b      	ands	r3, r1
 801c390:	4053      	eors	r3, r2
 801c392:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801c394:	893b      	ldrh	r3, [r7, #8]
 801c396:	3301      	adds	r3, #1
 801c398:	813b      	strh	r3, [r7, #8]
 801c39a:	893b      	ldrh	r3, [r7, #8]
 801c39c:	2b07      	cmp	r3, #7
 801c39e:	d9ef      	bls.n	801c380 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801c3a0:	897b      	ldrh	r3, [r7, #10]
 801c3a2:	3301      	adds	r3, #1
 801c3a4:	817b      	strh	r3, [r7, #10]
 801c3a6:	897a      	ldrh	r2, [r7, #10]
 801c3a8:	887b      	ldrh	r3, [r7, #2]
 801c3aa:	429a      	cmp	r2, r3
 801c3ac:	d3dd      	bcc.n	801c36a <Crc32+0x22>
        }
    }

    return ~crc;
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	43db      	mvns	r3, r3
}
 801c3b2:	4618      	mov	r0, r3
 801c3b4:	3714      	adds	r7, #20
 801c3b6:	46bd      	mov	sp, r7
 801c3b8:	bc80      	pop	{r7}
 801c3ba:	4770      	bx	lr
 801c3bc:	edb88320 	.word	0xedb88320

0801c3c0 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801c3c0:	b580      	push	{r7, lr}
 801c3c2:	b084      	sub	sp, #16
 801c3c4:	af02      	add	r7, sp, #8
 801c3c6:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801c3c8:	4a24      	ldr	r2, [pc, #144]	; (801c45c <RadioInit+0x9c>)
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801c3ce:	4b24      	ldr	r3, [pc, #144]	; (801c460 <RadioInit+0xa0>)
 801c3d0:	2200      	movs	r2, #0
 801c3d2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801c3d4:	4b22      	ldr	r3, [pc, #136]	; (801c460 <RadioInit+0xa0>)
 801c3d6:	2200      	movs	r2, #0
 801c3d8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801c3da:	4b21      	ldr	r3, [pc, #132]	; (801c460 <RadioInit+0xa0>)
 801c3dc:	2200      	movs	r2, #0
 801c3de:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801c3e0:	4b1f      	ldr	r3, [pc, #124]	; (801c460 <RadioInit+0xa0>)
 801c3e2:	2200      	movs	r2, #0
 801c3e4:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 801c3e6:	481f      	ldr	r0, [pc, #124]	; (801c464 <RadioInit+0xa4>)
 801c3e8:	f001 ff88 	bl	801e2fc <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801c3ec:	4b1c      	ldr	r3, [pc, #112]	; (801c460 <RadioInit+0xa0>)
 801c3ee:	2200      	movs	r2, #0
 801c3f0:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801c3f2:	4b1b      	ldr	r3, [pc, #108]	; (801c460 <RadioInit+0xa0>)
 801c3f4:	2200      	movs	r2, #0
 801c3f6:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 801c3f8:	f002 fa16 	bl	801e828 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801c3fc:	2100      	movs	r1, #0
 801c3fe:	2000      	movs	r0, #0
 801c400:	f002 fdde 	bl	801efc0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801c404:	2204      	movs	r2, #4
 801c406:	2100      	movs	r1, #0
 801c408:	2001      	movs	r0, #1
 801c40a:	f002 fb9b 	bl	801eb44 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801c40e:	2300      	movs	r3, #0
 801c410:	2200      	movs	r2, #0
 801c412:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c416:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801c41a:	f002 facb 	bl	801e9b4 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801c41e:	f000 fe83 	bl	801d128 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801c422:	2300      	movs	r3, #0
 801c424:	9300      	str	r3, [sp, #0]
 801c426:	4b10      	ldr	r3, [pc, #64]	; (801c468 <RadioInit+0xa8>)
 801c428:	2200      	movs	r2, #0
 801c42a:	f04f 31ff 	mov.w	r1, #4294967295
 801c42e:	480f      	ldr	r0, [pc, #60]	; (801c46c <RadioInit+0xac>)
 801c430:	f003 ffdc 	bl	80203ec <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801c434:	2300      	movs	r3, #0
 801c436:	9300      	str	r3, [sp, #0]
 801c438:	4b0d      	ldr	r3, [pc, #52]	; (801c470 <RadioInit+0xb0>)
 801c43a:	2200      	movs	r2, #0
 801c43c:	f04f 31ff 	mov.w	r1, #4294967295
 801c440:	480c      	ldr	r0, [pc, #48]	; (801c474 <RadioInit+0xb4>)
 801c442:	f003 ffd3 	bl	80203ec <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801c446:	4809      	ldr	r0, [pc, #36]	; (801c46c <RadioInit+0xac>)
 801c448:	f004 f874 	bl	8020534 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801c44c:	4809      	ldr	r0, [pc, #36]	; (801c474 <RadioInit+0xb4>)
 801c44e:	f004 f871 	bl	8020534 <UTIL_TIMER_Stop>
}
 801c452:	bf00      	nop
 801c454:	3708      	adds	r7, #8
 801c456:	46bd      	mov	sp, r7
 801c458:	bd80      	pop	{r7, pc}
 801c45a:	bf00      	nop
 801c45c:	200024a8 	.word	0x200024a8
 801c460:	200024ac 	.word	0x200024ac
 801c464:	0801d515 	.word	0x0801d515
 801c468:	0801d49d 	.word	0x0801d49d
 801c46c:	20002508 	.word	0x20002508
 801c470:	0801d4b1 	.word	0x0801d4b1
 801c474:	20002520 	.word	0x20002520

0801c478 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801c478:	b580      	push	{r7, lr}
 801c47a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801c47c:	f001 ff80 	bl	801e380 <SUBGRF_GetOperatingMode>
 801c480:	4603      	mov	r3, r0
 801c482:	2b07      	cmp	r3, #7
 801c484:	d00a      	beq.n	801c49c <RadioGetStatus+0x24>
 801c486:	2b07      	cmp	r3, #7
 801c488:	dc0a      	bgt.n	801c4a0 <RadioGetStatus+0x28>
 801c48a:	2b04      	cmp	r3, #4
 801c48c:	d002      	beq.n	801c494 <RadioGetStatus+0x1c>
 801c48e:	2b05      	cmp	r3, #5
 801c490:	d002      	beq.n	801c498 <RadioGetStatus+0x20>
 801c492:	e005      	b.n	801c4a0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801c494:	2302      	movs	r3, #2
 801c496:	e004      	b.n	801c4a2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801c498:	2301      	movs	r3, #1
 801c49a:	e002      	b.n	801c4a2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801c49c:	2303      	movs	r3, #3
 801c49e:	e000      	b.n	801c4a2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801c4a0:	2300      	movs	r3, #0
    }
}
 801c4a2:	4618      	mov	r0, r3
 801c4a4:	bd80      	pop	{r7, pc}
	...

0801c4a8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801c4a8:	b580      	push	{r7, lr}
 801c4aa:	b082      	sub	sp, #8
 801c4ac:	af00      	add	r7, sp, #0
 801c4ae:	4603      	mov	r3, r0
 801c4b0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801c4b2:	4a2a      	ldr	r2, [pc, #168]	; (801c55c <RadioSetModem+0xb4>)
 801c4b4:	79fb      	ldrb	r3, [r7, #7]
 801c4b6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801c4b8:	79fb      	ldrb	r3, [r7, #7]
 801c4ba:	4618      	mov	r0, r3
 801c4bc:	f003 f943 	bl	801f746 <RFW_SetRadioModem>
    switch( modem )
 801c4c0:	79fb      	ldrb	r3, [r7, #7]
 801c4c2:	2b05      	cmp	r3, #5
 801c4c4:	d80e      	bhi.n	801c4e4 <RadioSetModem+0x3c>
 801c4c6:	a201      	add	r2, pc, #4	; (adr r2, 801c4cc <RadioSetModem+0x24>)
 801c4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c4cc:	0801c4f3 	.word	0x0801c4f3
 801c4d0:	0801c501 	.word	0x0801c501
 801c4d4:	0801c4e5 	.word	0x0801c4e5
 801c4d8:	0801c527 	.word	0x0801c527
 801c4dc:	0801c535 	.word	0x0801c535
 801c4e0:	0801c543 	.word	0x0801c543
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801c4e4:	2003      	movs	r0, #3
 801c4e6:	f002 fb07 	bl	801eaf8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801c4ea:	4b1c      	ldr	r3, [pc, #112]	; (801c55c <RadioSetModem+0xb4>)
 801c4ec:	2200      	movs	r2, #0
 801c4ee:	735a      	strb	r2, [r3, #13]
        break;
 801c4f0:	e02f      	b.n	801c552 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801c4f2:	2000      	movs	r0, #0
 801c4f4:	f002 fb00 	bl	801eaf8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801c4f8:	4b18      	ldr	r3, [pc, #96]	; (801c55c <RadioSetModem+0xb4>)
 801c4fa:	2200      	movs	r2, #0
 801c4fc:	735a      	strb	r2, [r3, #13]
        break;
 801c4fe:	e028      	b.n	801c552 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801c500:	2001      	movs	r0, #1
 801c502:	f002 faf9 	bl	801eaf8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801c506:	4b15      	ldr	r3, [pc, #84]	; (801c55c <RadioSetModem+0xb4>)
 801c508:	7b5a      	ldrb	r2, [r3, #13]
 801c50a:	4b14      	ldr	r3, [pc, #80]	; (801c55c <RadioSetModem+0xb4>)
 801c50c:	7b1b      	ldrb	r3, [r3, #12]
 801c50e:	429a      	cmp	r2, r3
 801c510:	d01e      	beq.n	801c550 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801c512:	4b12      	ldr	r3, [pc, #72]	; (801c55c <RadioSetModem+0xb4>)
 801c514:	7b1a      	ldrb	r2, [r3, #12]
 801c516:	4b11      	ldr	r3, [pc, #68]	; (801c55c <RadioSetModem+0xb4>)
 801c518:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801c51a:	4b10      	ldr	r3, [pc, #64]	; (801c55c <RadioSetModem+0xb4>)
 801c51c:	7b5b      	ldrb	r3, [r3, #13]
 801c51e:	4618      	mov	r0, r3
 801c520:	f000 ff86 	bl	801d430 <RadioSetPublicNetwork>
        }
        break;
 801c524:	e014      	b.n	801c550 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801c526:	2002      	movs	r0, #2
 801c528:	f002 fae6 	bl	801eaf8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801c52c:	4b0b      	ldr	r3, [pc, #44]	; (801c55c <RadioSetModem+0xb4>)
 801c52e:	2200      	movs	r2, #0
 801c530:	735a      	strb	r2, [r3, #13]
        break;
 801c532:	e00e      	b.n	801c552 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801c534:	2002      	movs	r0, #2
 801c536:	f002 fadf 	bl	801eaf8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801c53a:	4b08      	ldr	r3, [pc, #32]	; (801c55c <RadioSetModem+0xb4>)
 801c53c:	2200      	movs	r2, #0
 801c53e:	735a      	strb	r2, [r3, #13]
        break;
 801c540:	e007      	b.n	801c552 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801c542:	2000      	movs	r0, #0
 801c544:	f002 fad8 	bl	801eaf8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801c548:	4b04      	ldr	r3, [pc, #16]	; (801c55c <RadioSetModem+0xb4>)
 801c54a:	2200      	movs	r2, #0
 801c54c:	735a      	strb	r2, [r3, #13]
        break;
 801c54e:	e000      	b.n	801c552 <RadioSetModem+0xaa>
        break;
 801c550:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801c552:	bf00      	nop
 801c554:	3708      	adds	r7, #8
 801c556:	46bd      	mov	sp, r7
 801c558:	bd80      	pop	{r7, pc}
 801c55a:	bf00      	nop
 801c55c:	200024ac 	.word	0x200024ac

0801c560 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801c560:	b580      	push	{r7, lr}
 801c562:	b082      	sub	sp, #8
 801c564:	af00      	add	r7, sp, #0
 801c566:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801c568:	6878      	ldr	r0, [r7, #4]
 801c56a:	f002 fa7f 	bl	801ea6c <SUBGRF_SetRfFrequency>
}
 801c56e:	bf00      	nop
 801c570:	3708      	adds	r7, #8
 801c572:	46bd      	mov	sp, r7
 801c574:	bd80      	pop	{r7, pc}

0801c576 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801c576:	b580      	push	{r7, lr}
 801c578:	b090      	sub	sp, #64	; 0x40
 801c57a:	af0a      	add	r7, sp, #40	; 0x28
 801c57c:	60f8      	str	r0, [r7, #12]
 801c57e:	60b9      	str	r1, [r7, #8]
 801c580:	603b      	str	r3, [r7, #0]
 801c582:	4613      	mov	r3, r2
 801c584:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801c586:	2301      	movs	r3, #1
 801c588:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801c58a:	2300      	movs	r3, #0
 801c58c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801c58e:	2300      	movs	r3, #0
 801c590:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801c592:	f000 fddc 	bl	801d14e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801c596:	2000      	movs	r0, #0
 801c598:	f7ff ff86 	bl	801c4a8 <RadioSetModem>

    RadioSetChannel( freq );
 801c59c:	68f8      	ldr	r0, [r7, #12]
 801c59e:	f7ff ffdf 	bl	801c560 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801c5a2:	2301      	movs	r3, #1
 801c5a4:	9309      	str	r3, [sp, #36]	; 0x24
 801c5a6:	2300      	movs	r3, #0
 801c5a8:	9308      	str	r3, [sp, #32]
 801c5aa:	2300      	movs	r3, #0
 801c5ac:	9307      	str	r3, [sp, #28]
 801c5ae:	2300      	movs	r3, #0
 801c5b0:	9306      	str	r3, [sp, #24]
 801c5b2:	2300      	movs	r3, #0
 801c5b4:	9305      	str	r3, [sp, #20]
 801c5b6:	2300      	movs	r3, #0
 801c5b8:	9304      	str	r3, [sp, #16]
 801c5ba:	2300      	movs	r3, #0
 801c5bc:	9303      	str	r3, [sp, #12]
 801c5be:	2300      	movs	r3, #0
 801c5c0:	9302      	str	r3, [sp, #8]
 801c5c2:	2303      	movs	r3, #3
 801c5c4:	9301      	str	r3, [sp, #4]
 801c5c6:	68bb      	ldr	r3, [r7, #8]
 801c5c8:	9300      	str	r3, [sp, #0]
 801c5ca:	2300      	movs	r3, #0
 801c5cc:	f44f 7216 	mov.w	r2, #600	; 0x258
 801c5d0:	68b9      	ldr	r1, [r7, #8]
 801c5d2:	2000      	movs	r0, #0
 801c5d4:	f000 f83c 	bl	801c650 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801c5d8:	2000      	movs	r0, #0
 801c5da:	f000 fdbf 	bl	801d15c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801c5de:	f000 ff55 	bl	801d48c <RadioGetWakeupTime>
 801c5e2:	4603      	mov	r3, r0
 801c5e4:	4618      	mov	r0, r3
 801c5e6:	f7e6 fda3 	bl	8003130 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801c5ea:	f004 f8bd 	bl	8020768 <UTIL_TIMER_GetCurrentTime>
 801c5ee:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801c5f0:	e00d      	b.n	801c60e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801c5f2:	2000      	movs	r0, #0
 801c5f4:	f000 fe9a 	bl	801d32c <RadioRssi>
 801c5f8:	4603      	mov	r3, r0
 801c5fa:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801c5fc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801c600:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c604:	429a      	cmp	r2, r3
 801c606:	dd02      	ble.n	801c60e <RadioIsChannelFree+0x98>
        {
            status = false;
 801c608:	2300      	movs	r3, #0
 801c60a:	75fb      	strb	r3, [r7, #23]
            break;
 801c60c:	e006      	b.n	801c61c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801c60e:	6938      	ldr	r0, [r7, #16]
 801c610:	f004 f8bc 	bl	802078c <UTIL_TIMER_GetElapsedTime>
 801c614:	4602      	mov	r2, r0
 801c616:	683b      	ldr	r3, [r7, #0]
 801c618:	4293      	cmp	r3, r2
 801c61a:	d8ea      	bhi.n	801c5f2 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801c61c:	f000 fd97 	bl	801d14e <RadioStandby>

    return status;
 801c620:	7dfb      	ldrb	r3, [r7, #23]
}
 801c622:	4618      	mov	r0, r3
 801c624:	3718      	adds	r7, #24
 801c626:	46bd      	mov	sp, r7
 801c628:	bd80      	pop	{r7, pc}

0801c62a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801c62a:	b580      	push	{r7, lr}
 801c62c:	b082      	sub	sp, #8
 801c62e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801c630:	2300      	movs	r3, #0
 801c632:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801c634:	2300      	movs	r3, #0
 801c636:	2200      	movs	r2, #0
 801c638:	2100      	movs	r1, #0
 801c63a:	2000      	movs	r0, #0
 801c63c:	f002 f9ba 	bl	801e9b4 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801c640:	f001 ff6f 	bl	801e522 <SUBGRF_GetRandom>
 801c644:	6078      	str	r0, [r7, #4]

    return rnd;
 801c646:	687b      	ldr	r3, [r7, #4]
}
 801c648:	4618      	mov	r0, r3
 801c64a:	3708      	adds	r7, #8
 801c64c:	46bd      	mov	sp, r7
 801c64e:	bd80      	pop	{r7, pc}

0801c650 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801c650:	b580      	push	{r7, lr}
 801c652:	b08a      	sub	sp, #40	; 0x28
 801c654:	af00      	add	r7, sp, #0
 801c656:	60b9      	str	r1, [r7, #8]
 801c658:	607a      	str	r2, [r7, #4]
 801c65a:	461a      	mov	r2, r3
 801c65c:	4603      	mov	r3, r0
 801c65e:	73fb      	strb	r3, [r7, #15]
 801c660:	4613      	mov	r3, r2
 801c662:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801c664:	4ab9      	ldr	r2, [pc, #740]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c666:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801c66a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801c66c:	f003 f829 	bl	801f6c2 <RFW_DeInit>
    if( rxContinuous == true )
 801c670:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801c674:	2b00      	cmp	r3, #0
 801c676:	d001      	beq.n	801c67c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801c678:	2300      	movs	r3, #0
 801c67a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801c67c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801c680:	2b00      	cmp	r3, #0
 801c682:	d004      	beq.n	801c68e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801c684:	4ab2      	ldr	r2, [pc, #712]	; (801c950 <RadioSetRxConfig+0x300>)
 801c686:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801c68a:	7013      	strb	r3, [r2, #0]
 801c68c:	e002      	b.n	801c694 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801c68e:	4bb0      	ldr	r3, [pc, #704]	; (801c950 <RadioSetRxConfig+0x300>)
 801c690:	22ff      	movs	r2, #255	; 0xff
 801c692:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801c694:	7bfb      	ldrb	r3, [r7, #15]
 801c696:	2b05      	cmp	r3, #5
 801c698:	d009      	beq.n	801c6ae <RadioSetRxConfig+0x5e>
 801c69a:	2b05      	cmp	r3, #5
 801c69c:	f300 81ca 	bgt.w	801ca34 <RadioSetRxConfig+0x3e4>
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	f000 80bf 	beq.w	801c824 <RadioSetRxConfig+0x1d4>
 801c6a6:	2b01      	cmp	r3, #1
 801c6a8:	f000 8124 	beq.w	801c8f4 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801c6ac:	e1c2      	b.n	801ca34 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801c6ae:	2001      	movs	r0, #1
 801c6b0:	f002 f87c 	bl	801e7ac <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801c6b4:	4ba5      	ldr	r3, [pc, #660]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c6b6:	2200      	movs	r2, #0
 801c6b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801c6bc:	4aa3      	ldr	r2, [pc, #652]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801c6c2:	4ba2      	ldr	r3, [pc, #648]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c6c4:	2209      	movs	r2, #9
 801c6c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801c6ca:	4ba0      	ldr	r3, [pc, #640]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c6cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 801c6d0:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801c6d2:	68b8      	ldr	r0, [r7, #8]
 801c6d4:	f002 ff28 	bl	801f528 <SUBGRF_GetFskBandwidthRegValue>
 801c6d8:	4603      	mov	r3, r0
 801c6da:	461a      	mov	r2, r3
 801c6dc:	4b9b      	ldr	r3, [pc, #620]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c6de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801c6e2:	4b9a      	ldr	r3, [pc, #616]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c6e4:	2200      	movs	r2, #0
 801c6e6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801c6e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c6ea:	00db      	lsls	r3, r3, #3
 801c6ec:	b29a      	uxth	r2, r3
 801c6ee:	4b97      	ldr	r3, [pc, #604]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c6f0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801c6f2:	4b96      	ldr	r3, [pc, #600]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c6f4:	2200      	movs	r2, #0
 801c6f6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801c6f8:	4b94      	ldr	r3, [pc, #592]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c6fa:	2210      	movs	r2, #16
 801c6fc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801c6fe:	4b93      	ldr	r3, [pc, #588]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c700:	2200      	movs	r2, #0
 801c702:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801c704:	4b91      	ldr	r3, [pc, #580]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c706:	2200      	movs	r2, #0
 801c708:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801c70a:	4b91      	ldr	r3, [pc, #580]	; (801c950 <RadioSetRxConfig+0x300>)
 801c70c:	781a      	ldrb	r2, [r3, #0]
 801c70e:	4b8f      	ldr	r3, [pc, #572]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c710:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801c712:	4b8e      	ldr	r3, [pc, #568]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c714:	2201      	movs	r2, #1
 801c716:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801c718:	4b8c      	ldr	r3, [pc, #560]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c71a:	2200      	movs	r2, #0
 801c71c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801c71e:	2005      	movs	r0, #5
 801c720:	f7ff fec2 	bl	801c4a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c724:	488b      	ldr	r0, [pc, #556]	; (801c954 <RadioSetRxConfig+0x304>)
 801c726:	f002 fadb 	bl	801ece0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c72a:	488b      	ldr	r0, [pc, #556]	; (801c958 <RadioSetRxConfig+0x308>)
 801c72c:	f002 fbaa 	bl	801ee84 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801c730:	4a8a      	ldr	r2, [pc, #552]	; (801c95c <RadioSetRxConfig+0x30c>)
 801c732:	f107 031c 	add.w	r3, r7, #28
 801c736:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c73a:	e883 0003 	stmia.w	r3, {r0, r1}
 801c73e:	f107 031c 	add.w	r3, r7, #28
 801c742:	4618      	mov	r0, r3
 801c744:	f001 fe6b 	bl	801e41e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801c748:	f240 10ff 	movw	r0, #511	; 0x1ff
 801c74c:	f001 feb6 	bl	801e4bc <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801c750:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801c754:	f000 fe09 	bl	801d36a <RadioRead>
 801c758:	4603      	mov	r3, r0
 801c75a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801c75e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c762:	f023 0310 	bic.w	r3, r3, #16
 801c766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801c76a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c76e:	4619      	mov	r1, r3
 801c770:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801c774:	f000 fde7 	bl	801d346 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801c778:	2104      	movs	r1, #4
 801c77a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801c77e:	f000 fde2 	bl	801d346 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801c782:	f640 009b 	movw	r0, #2203	; 0x89b
 801c786:	f000 fdf0 	bl	801d36a <RadioRead>
 801c78a:	4603      	mov	r3, r0
 801c78c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801c790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c794:	f023 031c 	bic.w	r3, r3, #28
 801c798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801c79c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c7a0:	f043 0308 	orr.w	r3, r3, #8
 801c7a4:	b2db      	uxtb	r3, r3
 801c7a6:	4619      	mov	r1, r3
 801c7a8:	f640 009b 	movw	r0, #2203	; 0x89b
 801c7ac:	f000 fdcb 	bl	801d346 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801c7b0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801c7b4:	f000 fdd9 	bl	801d36a <RadioRead>
 801c7b8:	4603      	mov	r3, r0
 801c7ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801c7be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c7c2:	f023 0318 	bic.w	r3, r3, #24
 801c7c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801c7ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c7ce:	f043 0318 	orr.w	r3, r3, #24
 801c7d2:	b2db      	uxtb	r3, r3
 801c7d4:	4619      	mov	r1, r3
 801c7d6:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801c7da:	f000 fdb4 	bl	801d346 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801c7de:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801c7e2:	f000 fdc2 	bl	801d36a <RadioRead>
 801c7e6:	4603      	mov	r3, r0
 801c7e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801c7ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c7f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c7f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801c7f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c7fc:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801c800:	b2db      	uxtb	r3, r3
 801c802:	4619      	mov	r1, r3
 801c804:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801c808:	f000 fd9d 	bl	801d346 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801c80c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801c80e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801c812:	fb02 f303 	mul.w	r3, r2, r3
 801c816:	461a      	mov	r2, r3
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	fbb2 f3f3 	udiv	r3, r2, r3
 801c81e:	4a4b      	ldr	r2, [pc, #300]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c820:	6093      	str	r3, [r2, #8]
            break;
 801c822:	e108      	b.n	801ca36 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801c824:	2000      	movs	r0, #0
 801c826:	f001 ffc1 	bl	801e7ac <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801c82a:	4b48      	ldr	r3, [pc, #288]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c82c:	2200      	movs	r2, #0
 801c82e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801c832:	4a46      	ldr	r2, [pc, #280]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c834:	687b      	ldr	r3, [r7, #4]
 801c836:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801c838:	4b44      	ldr	r3, [pc, #272]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c83a:	220b      	movs	r2, #11
 801c83c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801c840:	68b8      	ldr	r0, [r7, #8]
 801c842:	f002 fe71 	bl	801f528 <SUBGRF_GetFskBandwidthRegValue>
 801c846:	4603      	mov	r3, r0
 801c848:	461a      	mov	r2, r3
 801c84a:	4b40      	ldr	r3, [pc, #256]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c84c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801c850:	4b3e      	ldr	r3, [pc, #248]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c852:	2200      	movs	r2, #0
 801c854:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801c856:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c858:	00db      	lsls	r3, r3, #3
 801c85a:	b29a      	uxth	r2, r3
 801c85c:	4b3b      	ldr	r3, [pc, #236]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c85e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801c860:	4b3a      	ldr	r3, [pc, #232]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c862:	2204      	movs	r2, #4
 801c864:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801c866:	4b39      	ldr	r3, [pc, #228]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c868:	2218      	movs	r2, #24
 801c86a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801c86c:	4b37      	ldr	r3, [pc, #220]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c86e:	2200      	movs	r2, #0
 801c870:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801c872:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801c876:	f083 0301 	eor.w	r3, r3, #1
 801c87a:	b2db      	uxtb	r3, r3
 801c87c:	461a      	mov	r2, r3
 801c87e:	4b33      	ldr	r3, [pc, #204]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c880:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801c882:	4b33      	ldr	r3, [pc, #204]	; (801c950 <RadioSetRxConfig+0x300>)
 801c884:	781a      	ldrb	r2, [r3, #0]
 801c886:	4b31      	ldr	r3, [pc, #196]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c888:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801c88a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801c88e:	2b00      	cmp	r3, #0
 801c890:	d003      	beq.n	801c89a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801c892:	4b2e      	ldr	r3, [pc, #184]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c894:	22f2      	movs	r2, #242	; 0xf2
 801c896:	75da      	strb	r2, [r3, #23]
 801c898:	e002      	b.n	801c8a0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801c89a:	4b2c      	ldr	r3, [pc, #176]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c89c:	2201      	movs	r2, #1
 801c89e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801c8a0:	4b2a      	ldr	r3, [pc, #168]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c8a2:	2201      	movs	r2, #1
 801c8a4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801c8a6:	f000 fc52 	bl	801d14e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801c8aa:	2000      	movs	r0, #0
 801c8ac:	f7ff fdfc 	bl	801c4a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c8b0:	4828      	ldr	r0, [pc, #160]	; (801c954 <RadioSetRxConfig+0x304>)
 801c8b2:	f002 fa15 	bl	801ece0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c8b6:	4828      	ldr	r0, [pc, #160]	; (801c958 <RadioSetRxConfig+0x308>)
 801c8b8:	f002 fae4 	bl	801ee84 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801c8bc:	4a28      	ldr	r2, [pc, #160]	; (801c960 <RadioSetRxConfig+0x310>)
 801c8be:	f107 0314 	add.w	r3, r7, #20
 801c8c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c8c6:	e883 0003 	stmia.w	r3, {r0, r1}
 801c8ca:	f107 0314 	add.w	r3, r7, #20
 801c8ce:	4618      	mov	r0, r3
 801c8d0:	f001 fda5 	bl	801e41e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801c8d4:	f240 10ff 	movw	r0, #511	; 0x1ff
 801c8d8:	f001 fdf0 	bl	801e4bc <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801c8dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801c8de:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801c8e2:	fb02 f303 	mul.w	r3, r2, r3
 801c8e6:	461a      	mov	r2, r3
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	fbb2 f3f3 	udiv	r3, r2, r3
 801c8ee:	4a17      	ldr	r2, [pc, #92]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c8f0:	6093      	str	r3, [r2, #8]
            break;
 801c8f2:	e0a0      	b.n	801ca36 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801c8f4:	2000      	movs	r0, #0
 801c8f6:	f001 ff59 	bl	801e7ac <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801c8fa:	4b14      	ldr	r3, [pc, #80]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c8fc:	2201      	movs	r2, #1
 801c8fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	b2da      	uxtb	r2, r3
 801c906:	4b11      	ldr	r3, [pc, #68]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c908:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801c90c:	4a15      	ldr	r2, [pc, #84]	; (801c964 <RadioSetRxConfig+0x314>)
 801c90e:	68bb      	ldr	r3, [r7, #8]
 801c910:	4413      	add	r3, r2
 801c912:	781a      	ldrb	r2, [r3, #0]
 801c914:	4b0d      	ldr	r3, [pc, #52]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801c91a:	4a0c      	ldr	r2, [pc, #48]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c91c:	7bbb      	ldrb	r3, [r7, #14]
 801c91e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801c922:	68bb      	ldr	r3, [r7, #8]
 801c924:	2b00      	cmp	r3, #0
 801c926:	d105      	bne.n	801c934 <RadioSetRxConfig+0x2e4>
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	2b0b      	cmp	r3, #11
 801c92c:	d008      	beq.n	801c940 <RadioSetRxConfig+0x2f0>
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	2b0c      	cmp	r3, #12
 801c932:	d005      	beq.n	801c940 <RadioSetRxConfig+0x2f0>
 801c934:	68bb      	ldr	r3, [r7, #8]
 801c936:	2b01      	cmp	r3, #1
 801c938:	d116      	bne.n	801c968 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801c93a:	687b      	ldr	r3, [r7, #4]
 801c93c:	2b0c      	cmp	r3, #12
 801c93e:	d113      	bne.n	801c968 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801c940:	4b02      	ldr	r3, [pc, #8]	; (801c94c <RadioSetRxConfig+0x2fc>)
 801c942:	2201      	movs	r2, #1
 801c944:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801c948:	e012      	b.n	801c970 <RadioSetRxConfig+0x320>
 801c94a:	bf00      	nop
 801c94c:	200024ac 	.word	0x200024ac
 801c950:	2000016c 	.word	0x2000016c
 801c954:	200024e4 	.word	0x200024e4
 801c958:	200024ba 	.word	0x200024ba
 801c95c:	080218a8 	.word	0x080218a8
 801c960:	080218b0 	.word	0x080218b0
 801c964:	08021e8c 	.word	0x08021e8c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801c968:	4b35      	ldr	r3, [pc, #212]	; (801ca40 <RadioSetRxConfig+0x3f0>)
 801c96a:	2200      	movs	r2, #0
 801c96c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801c970:	4b33      	ldr	r3, [pc, #204]	; (801ca40 <RadioSetRxConfig+0x3f0>)
 801c972:	2201      	movs	r2, #1
 801c974:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801c976:	4b32      	ldr	r3, [pc, #200]	; (801ca40 <RadioSetRxConfig+0x3f0>)
 801c978:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c97c:	2b05      	cmp	r3, #5
 801c97e:	d004      	beq.n	801c98a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801c980:	4b2f      	ldr	r3, [pc, #188]	; (801ca40 <RadioSetRxConfig+0x3f0>)
 801c982:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801c986:	2b06      	cmp	r3, #6
 801c988:	d10a      	bne.n	801c9a0 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801c98a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c98c:	2b0b      	cmp	r3, #11
 801c98e:	d803      	bhi.n	801c998 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801c990:	4b2b      	ldr	r3, [pc, #172]	; (801ca40 <RadioSetRxConfig+0x3f0>)
 801c992:	220c      	movs	r2, #12
 801c994:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801c996:	e006      	b.n	801c9a6 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801c998:	4a29      	ldr	r2, [pc, #164]	; (801ca40 <RadioSetRxConfig+0x3f0>)
 801c99a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c99c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801c99e:	e002      	b.n	801c9a6 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801c9a0:	4a27      	ldr	r2, [pc, #156]	; (801ca40 <RadioSetRxConfig+0x3f0>)
 801c9a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c9a4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801c9a6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801c9aa:	4b25      	ldr	r3, [pc, #148]	; (801ca40 <RadioSetRxConfig+0x3f0>)
 801c9ac:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801c9ae:	4b25      	ldr	r3, [pc, #148]	; (801ca44 <RadioSetRxConfig+0x3f4>)
 801c9b0:	781a      	ldrb	r2, [r3, #0]
 801c9b2:	4b23      	ldr	r3, [pc, #140]	; (801ca40 <RadioSetRxConfig+0x3f0>)
 801c9b4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801c9b6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801c9ba:	4b21      	ldr	r3, [pc, #132]	; (801ca40 <RadioSetRxConfig+0x3f0>)
 801c9bc:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801c9c0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801c9c4:	4b1e      	ldr	r3, [pc, #120]	; (801ca40 <RadioSetRxConfig+0x3f0>)
 801c9c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801c9ca:	f000 fbc0 	bl	801d14e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801c9ce:	2001      	movs	r0, #1
 801c9d0:	f7ff fd6a 	bl	801c4a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c9d4:	481c      	ldr	r0, [pc, #112]	; (801ca48 <RadioSetRxConfig+0x3f8>)
 801c9d6:	f002 f983 	bl	801ece0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c9da:	481c      	ldr	r0, [pc, #112]	; (801ca4c <RadioSetRxConfig+0x3fc>)
 801c9dc:	f002 fa52 	bl	801ee84 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801c9e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801c9e2:	b2db      	uxtb	r3, r3
 801c9e4:	4618      	mov	r0, r3
 801c9e6:	f001 fef0 	bl	801e7ca <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801c9ea:	4b15      	ldr	r3, [pc, #84]	; (801ca40 <RadioSetRxConfig+0x3f0>)
 801c9ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801c9f0:	2b01      	cmp	r3, #1
 801c9f2:	d10d      	bne.n	801ca10 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801c9f4:	f240 7036 	movw	r0, #1846	; 0x736
 801c9f8:	f002 fba0 	bl	801f13c <SUBGRF_ReadRegister>
 801c9fc:	4603      	mov	r3, r0
 801c9fe:	f023 0304 	bic.w	r3, r3, #4
 801ca02:	b2db      	uxtb	r3, r3
 801ca04:	4619      	mov	r1, r3
 801ca06:	f240 7036 	movw	r0, #1846	; 0x736
 801ca0a:	f002 fb83 	bl	801f114 <SUBGRF_WriteRegister>
 801ca0e:	e00c      	b.n	801ca2a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801ca10:	f240 7036 	movw	r0, #1846	; 0x736
 801ca14:	f002 fb92 	bl	801f13c <SUBGRF_ReadRegister>
 801ca18:	4603      	mov	r3, r0
 801ca1a:	f043 0304 	orr.w	r3, r3, #4
 801ca1e:	b2db      	uxtb	r3, r3
 801ca20:	4619      	mov	r1, r3
 801ca22:	f240 7036 	movw	r0, #1846	; 0x736
 801ca26:	f002 fb75 	bl	801f114 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801ca2a:	4b05      	ldr	r3, [pc, #20]	; (801ca40 <RadioSetRxConfig+0x3f0>)
 801ca2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ca30:	609a      	str	r2, [r3, #8]
            break;
 801ca32:	e000      	b.n	801ca36 <RadioSetRxConfig+0x3e6>
            break;
 801ca34:	bf00      	nop
    }
}
 801ca36:	bf00      	nop
 801ca38:	3728      	adds	r7, #40	; 0x28
 801ca3a:	46bd      	mov	sp, r7
 801ca3c:	bd80      	pop	{r7, pc}
 801ca3e:	bf00      	nop
 801ca40:	200024ac 	.word	0x200024ac
 801ca44:	2000016c 	.word	0x2000016c
 801ca48:	200024e4 	.word	0x200024e4
 801ca4c:	200024ba 	.word	0x200024ba

0801ca50 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801ca50:	b580      	push	{r7, lr}
 801ca52:	b086      	sub	sp, #24
 801ca54:	af00      	add	r7, sp, #0
 801ca56:	60ba      	str	r2, [r7, #8]
 801ca58:	607b      	str	r3, [r7, #4]
 801ca5a:	4603      	mov	r3, r0
 801ca5c:	73fb      	strb	r3, [r7, #15]
 801ca5e:	460b      	mov	r3, r1
 801ca60:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801ca62:	f002 fe2e 	bl	801f6c2 <RFW_DeInit>
    switch( modem )
 801ca66:	7bfb      	ldrb	r3, [r7, #15]
 801ca68:	2b04      	cmp	r3, #4
 801ca6a:	f000 80c7 	beq.w	801cbfc <RadioSetTxConfig+0x1ac>
 801ca6e:	2b04      	cmp	r3, #4
 801ca70:	f300 80d6 	bgt.w	801cc20 <RadioSetTxConfig+0x1d0>
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	d002      	beq.n	801ca7e <RadioSetTxConfig+0x2e>
 801ca78:	2b01      	cmp	r3, #1
 801ca7a:	d059      	beq.n	801cb30 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801ca7c:	e0d0      	b.n	801cc20 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801ca7e:	4b74      	ldr	r3, [pc, #464]	; (801cc50 <RadioSetTxConfig+0x200>)
 801ca80:	2200      	movs	r2, #0
 801ca82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801ca86:	4a72      	ldr	r2, [pc, #456]	; (801cc50 <RadioSetTxConfig+0x200>)
 801ca88:	6a3b      	ldr	r3, [r7, #32]
 801ca8a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801ca8c:	4b70      	ldr	r3, [pc, #448]	; (801cc50 <RadioSetTxConfig+0x200>)
 801ca8e:	220b      	movs	r2, #11
 801ca90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801ca94:	6878      	ldr	r0, [r7, #4]
 801ca96:	f002 fd47 	bl	801f528 <SUBGRF_GetFskBandwidthRegValue>
 801ca9a:	4603      	mov	r3, r0
 801ca9c:	461a      	mov	r2, r3
 801ca9e:	4b6c      	ldr	r3, [pc, #432]	; (801cc50 <RadioSetTxConfig+0x200>)
 801caa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801caa4:	4a6a      	ldr	r2, [pc, #424]	; (801cc50 <RadioSetTxConfig+0x200>)
 801caa6:	68bb      	ldr	r3, [r7, #8]
 801caa8:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801caaa:	4b69      	ldr	r3, [pc, #420]	; (801cc50 <RadioSetTxConfig+0x200>)
 801caac:	2200      	movs	r2, #0
 801caae:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801cab0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801cab2:	00db      	lsls	r3, r3, #3
 801cab4:	b29a      	uxth	r2, r3
 801cab6:	4b66      	ldr	r3, [pc, #408]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cab8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801caba:	4b65      	ldr	r3, [pc, #404]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cabc:	2204      	movs	r2, #4
 801cabe:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801cac0:	4b63      	ldr	r3, [pc, #396]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cac2:	2218      	movs	r2, #24
 801cac4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801cac6:	4b62      	ldr	r3, [pc, #392]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cac8:	2200      	movs	r2, #0
 801caca:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801cacc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801cad0:	f083 0301 	eor.w	r3, r3, #1
 801cad4:	b2db      	uxtb	r3, r3
 801cad6:	461a      	mov	r2, r3
 801cad8:	4b5d      	ldr	r3, [pc, #372]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cada:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801cadc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d003      	beq.n	801caec <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801cae4:	4b5a      	ldr	r3, [pc, #360]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cae6:	22f2      	movs	r2, #242	; 0xf2
 801cae8:	75da      	strb	r2, [r3, #23]
 801caea:	e002      	b.n	801caf2 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801caec:	4b58      	ldr	r3, [pc, #352]	; (801cc50 <RadioSetTxConfig+0x200>)
 801caee:	2201      	movs	r2, #1
 801caf0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801caf2:	4b57      	ldr	r3, [pc, #348]	; (801cc50 <RadioSetTxConfig+0x200>)
 801caf4:	2201      	movs	r2, #1
 801caf6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801caf8:	f000 fb29 	bl	801d14e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801cafc:	2000      	movs	r0, #0
 801cafe:	f7ff fcd3 	bl	801c4a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801cb02:	4854      	ldr	r0, [pc, #336]	; (801cc54 <RadioSetTxConfig+0x204>)
 801cb04:	f002 f8ec 	bl	801ece0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801cb08:	4853      	ldr	r0, [pc, #332]	; (801cc58 <RadioSetTxConfig+0x208>)
 801cb0a:	f002 f9bb 	bl	801ee84 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801cb0e:	4a53      	ldr	r2, [pc, #332]	; (801cc5c <RadioSetTxConfig+0x20c>)
 801cb10:	f107 0310 	add.w	r3, r7, #16
 801cb14:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cb18:	e883 0003 	stmia.w	r3, {r0, r1}
 801cb1c:	f107 0310 	add.w	r3, r7, #16
 801cb20:	4618      	mov	r0, r3
 801cb22:	f001 fc7c 	bl	801e41e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801cb26:	f240 10ff 	movw	r0, #511	; 0x1ff
 801cb2a:	f001 fcc7 	bl	801e4bc <SUBGRF_SetWhiteningSeed>
            break;
 801cb2e:	e078      	b.n	801cc22 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801cb30:	4b47      	ldr	r3, [pc, #284]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cb32:	2201      	movs	r2, #1
 801cb34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801cb38:	6a3b      	ldr	r3, [r7, #32]
 801cb3a:	b2da      	uxtb	r2, r3
 801cb3c:	4b44      	ldr	r3, [pc, #272]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cb3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801cb42:	4a47      	ldr	r2, [pc, #284]	; (801cc60 <RadioSetTxConfig+0x210>)
 801cb44:	687b      	ldr	r3, [r7, #4]
 801cb46:	4413      	add	r3, r2
 801cb48:	781a      	ldrb	r2, [r3, #0]
 801cb4a:	4b41      	ldr	r3, [pc, #260]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cb4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801cb50:	4a3f      	ldr	r2, [pc, #252]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cb52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801cb56:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d105      	bne.n	801cb6c <RadioSetTxConfig+0x11c>
 801cb60:	6a3b      	ldr	r3, [r7, #32]
 801cb62:	2b0b      	cmp	r3, #11
 801cb64:	d008      	beq.n	801cb78 <RadioSetTxConfig+0x128>
 801cb66:	6a3b      	ldr	r3, [r7, #32]
 801cb68:	2b0c      	cmp	r3, #12
 801cb6a:	d005      	beq.n	801cb78 <RadioSetTxConfig+0x128>
 801cb6c:	687b      	ldr	r3, [r7, #4]
 801cb6e:	2b01      	cmp	r3, #1
 801cb70:	d107      	bne.n	801cb82 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801cb72:	6a3b      	ldr	r3, [r7, #32]
 801cb74:	2b0c      	cmp	r3, #12
 801cb76:	d104      	bne.n	801cb82 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801cb78:	4b35      	ldr	r3, [pc, #212]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cb7a:	2201      	movs	r2, #1
 801cb7c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801cb80:	e003      	b.n	801cb8a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801cb82:	4b33      	ldr	r3, [pc, #204]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cb84:	2200      	movs	r2, #0
 801cb86:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801cb8a:	4b31      	ldr	r3, [pc, #196]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cb8c:	2201      	movs	r2, #1
 801cb8e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801cb90:	4b2f      	ldr	r3, [pc, #188]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cb92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801cb96:	2b05      	cmp	r3, #5
 801cb98:	d004      	beq.n	801cba4 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801cb9a:	4b2d      	ldr	r3, [pc, #180]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cb9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801cba0:	2b06      	cmp	r3, #6
 801cba2:	d10a      	bne.n	801cbba <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801cba4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801cba6:	2b0b      	cmp	r3, #11
 801cba8:	d803      	bhi.n	801cbb2 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801cbaa:	4b29      	ldr	r3, [pc, #164]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cbac:	220c      	movs	r2, #12
 801cbae:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801cbb0:	e006      	b.n	801cbc0 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801cbb2:	4a27      	ldr	r2, [pc, #156]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cbb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801cbb6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801cbb8:	e002      	b.n	801cbc0 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801cbba:	4a25      	ldr	r2, [pc, #148]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cbbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801cbbe:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801cbc0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801cbc4:	4b22      	ldr	r3, [pc, #136]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cbc6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801cbc8:	4b26      	ldr	r3, [pc, #152]	; (801cc64 <RadioSetTxConfig+0x214>)
 801cbca:	781a      	ldrb	r2, [r3, #0]
 801cbcc:	4b20      	ldr	r3, [pc, #128]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cbce:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801cbd0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801cbd4:	4b1e      	ldr	r3, [pc, #120]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cbd6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801cbda:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801cbde:	4b1c      	ldr	r3, [pc, #112]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cbe0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801cbe4:	f000 fab3 	bl	801d14e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801cbe8:	2001      	movs	r0, #1
 801cbea:	f7ff fc5d 	bl	801c4a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801cbee:	4819      	ldr	r0, [pc, #100]	; (801cc54 <RadioSetTxConfig+0x204>)
 801cbf0:	f002 f876 	bl	801ece0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801cbf4:	4818      	ldr	r0, [pc, #96]	; (801cc58 <RadioSetTxConfig+0x208>)
 801cbf6:	f002 f945 	bl	801ee84 <SUBGRF_SetPacketParams>
            break;
 801cbfa:	e012      	b.n	801cc22 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801cbfc:	2004      	movs	r0, #4
 801cbfe:	f7ff fc53 	bl	801c4a8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801cc02:	4b13      	ldr	r3, [pc, #76]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cc04:	2202      	movs	r2, #2
 801cc06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801cc0a:	4a11      	ldr	r2, [pc, #68]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cc0c:	6a3b      	ldr	r3, [r7, #32]
 801cc0e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801cc10:	4b0f      	ldr	r3, [pc, #60]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cc12:	2216      	movs	r2, #22
 801cc14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801cc18:	480e      	ldr	r0, [pc, #56]	; (801cc54 <RadioSetTxConfig+0x204>)
 801cc1a:	f002 f861 	bl	801ece0 <SUBGRF_SetModulationParams>
            break;
 801cc1e:	e000      	b.n	801cc22 <RadioSetTxConfig+0x1d2>
            break;
 801cc20:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801cc22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801cc26:	4618      	mov	r0, r3
 801cc28:	f002 fb90 	bl	801f34c <SUBGRF_SetRfTxPower>
 801cc2c:	4603      	mov	r3, r0
 801cc2e:	461a      	mov	r2, r3
 801cc30:	4b07      	ldr	r3, [pc, #28]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cc32:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 801cc36:	4b06      	ldr	r3, [pc, #24]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cc38:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801cc3c:	4618      	mov	r0, r3
 801cc3e:	f002 fd54 	bl	801f6ea <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801cc42:	4a03      	ldr	r2, [pc, #12]	; (801cc50 <RadioSetTxConfig+0x200>)
 801cc44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cc46:	6053      	str	r3, [r2, #4]
}
 801cc48:	bf00      	nop
 801cc4a:	3718      	adds	r7, #24
 801cc4c:	46bd      	mov	sp, r7
 801cc4e:	bd80      	pop	{r7, pc}
 801cc50:	200024ac 	.word	0x200024ac
 801cc54:	200024e4 	.word	0x200024e4
 801cc58:	200024ba 	.word	0x200024ba
 801cc5c:	080218b0 	.word	0x080218b0
 801cc60:	08021e8c 	.word	0x08021e8c
 801cc64:	2000016c 	.word	0x2000016c

0801cc68 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801cc68:	b480      	push	{r7}
 801cc6a:	b083      	sub	sp, #12
 801cc6c:	af00      	add	r7, sp, #0
 801cc6e:	6078      	str	r0, [r7, #4]
    return true;
 801cc70:	2301      	movs	r3, #1
}
 801cc72:	4618      	mov	r0, r3
 801cc74:	370c      	adds	r7, #12
 801cc76:	46bd      	mov	sp, r7
 801cc78:	bc80      	pop	{r7}
 801cc7a:	4770      	bx	lr

0801cc7c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801cc7c:	b480      	push	{r7}
 801cc7e:	b085      	sub	sp, #20
 801cc80:	af00      	add	r7, sp, #0
 801cc82:	4603      	mov	r3, r0
 801cc84:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801cc86:	2300      	movs	r3, #0
 801cc88:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801cc8a:	79fb      	ldrb	r3, [r7, #7]
 801cc8c:	2b0a      	cmp	r3, #10
 801cc8e:	d83e      	bhi.n	801cd0e <RadioGetLoRaBandwidthInHz+0x92>
 801cc90:	a201      	add	r2, pc, #4	; (adr r2, 801cc98 <RadioGetLoRaBandwidthInHz+0x1c>)
 801cc92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cc96:	bf00      	nop
 801cc98:	0801ccc5 	.word	0x0801ccc5
 801cc9c:	0801ccd5 	.word	0x0801ccd5
 801cca0:	0801cce5 	.word	0x0801cce5
 801cca4:	0801ccf5 	.word	0x0801ccf5
 801cca8:	0801ccfd 	.word	0x0801ccfd
 801ccac:	0801cd03 	.word	0x0801cd03
 801ccb0:	0801cd09 	.word	0x0801cd09
 801ccb4:	0801cd0f 	.word	0x0801cd0f
 801ccb8:	0801cccd 	.word	0x0801cccd
 801ccbc:	0801ccdd 	.word	0x0801ccdd
 801ccc0:	0801cced 	.word	0x0801cced
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801ccc4:	f641 6384 	movw	r3, #7812	; 0x1e84
 801ccc8:	60fb      	str	r3, [r7, #12]
        break;
 801ccca:	e020      	b.n	801cd0e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801cccc:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801ccd0:	60fb      	str	r3, [r7, #12]
        break;
 801ccd2:	e01c      	b.n	801cd0e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801ccd4:	f643 5309 	movw	r3, #15625	; 0x3d09
 801ccd8:	60fb      	str	r3, [r7, #12]
        break;
 801ccda:	e018      	b.n	801cd0e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801ccdc:	f245 1361 	movw	r3, #20833	; 0x5161
 801cce0:	60fb      	str	r3, [r7, #12]
        break;
 801cce2:	e014      	b.n	801cd0e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801cce4:	f647 2312 	movw	r3, #31250	; 0x7a12
 801cce8:	60fb      	str	r3, [r7, #12]
        break;
 801ccea:	e010      	b.n	801cd0e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801ccec:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801ccf0:	60fb      	str	r3, [r7, #12]
        break;
 801ccf2:	e00c      	b.n	801cd0e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801ccf4:	f24f 4324 	movw	r3, #62500	; 0xf424
 801ccf8:	60fb      	str	r3, [r7, #12]
        break;
 801ccfa:	e008      	b.n	801cd0e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801ccfc:	4b07      	ldr	r3, [pc, #28]	; (801cd1c <RadioGetLoRaBandwidthInHz+0xa0>)
 801ccfe:	60fb      	str	r3, [r7, #12]
        break;
 801cd00:	e005      	b.n	801cd0e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801cd02:	4b07      	ldr	r3, [pc, #28]	; (801cd20 <RadioGetLoRaBandwidthInHz+0xa4>)
 801cd04:	60fb      	str	r3, [r7, #12]
        break;
 801cd06:	e002      	b.n	801cd0e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801cd08:	4b06      	ldr	r3, [pc, #24]	; (801cd24 <RadioGetLoRaBandwidthInHz+0xa8>)
 801cd0a:	60fb      	str	r3, [r7, #12]
        break;
 801cd0c:	bf00      	nop
    }

    return bandwidthInHz;
 801cd0e:	68fb      	ldr	r3, [r7, #12]
}
 801cd10:	4618      	mov	r0, r3
 801cd12:	3714      	adds	r7, #20
 801cd14:	46bd      	mov	sp, r7
 801cd16:	bc80      	pop	{r7}
 801cd18:	4770      	bx	lr
 801cd1a:	bf00      	nop
 801cd1c:	0001e848 	.word	0x0001e848
 801cd20:	0003d090 	.word	0x0003d090
 801cd24:	0007a120 	.word	0x0007a120

0801cd28 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801cd28:	b480      	push	{r7}
 801cd2a:	b083      	sub	sp, #12
 801cd2c:	af00      	add	r7, sp, #0
 801cd2e:	6078      	str	r0, [r7, #4]
 801cd30:	4608      	mov	r0, r1
 801cd32:	4611      	mov	r1, r2
 801cd34:	461a      	mov	r2, r3
 801cd36:	4603      	mov	r3, r0
 801cd38:	70fb      	strb	r3, [r7, #3]
 801cd3a:	460b      	mov	r3, r1
 801cd3c:	803b      	strh	r3, [r7, #0]
 801cd3e:	4613      	mov	r3, r2
 801cd40:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 801cd42:	883b      	ldrh	r3, [r7, #0]
 801cd44:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801cd46:	78ba      	ldrb	r2, [r7, #2]
 801cd48:	f082 0201 	eor.w	r2, r2, #1
 801cd4c:	b2d2      	uxtb	r2, r2
 801cd4e:	2a00      	cmp	r2, #0
 801cd50:	d001      	beq.n	801cd56 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801cd52:	2208      	movs	r2, #8
 801cd54:	e000      	b.n	801cd58 <RadioGetGfskTimeOnAirNumerator+0x30>
 801cd56:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801cd58:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801cd5a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801cd5e:	7c3b      	ldrb	r3, [r7, #16]
 801cd60:	7d39      	ldrb	r1, [r7, #20]
 801cd62:	2900      	cmp	r1, #0
 801cd64:	d001      	beq.n	801cd6a <RadioGetGfskTimeOnAirNumerator+0x42>
 801cd66:	2102      	movs	r1, #2
 801cd68:	e000      	b.n	801cd6c <RadioGetGfskTimeOnAirNumerator+0x44>
 801cd6a:	2100      	movs	r1, #0
 801cd6c:	440b      	add	r3, r1
 801cd6e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801cd70:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 801cd72:	4618      	mov	r0, r3
 801cd74:	370c      	adds	r7, #12
 801cd76:	46bd      	mov	sp, r7
 801cd78:	bc80      	pop	{r7}
 801cd7a:	4770      	bx	lr

0801cd7c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801cd7c:	b480      	push	{r7}
 801cd7e:	b08b      	sub	sp, #44	; 0x2c
 801cd80:	af00      	add	r7, sp, #0
 801cd82:	60f8      	str	r0, [r7, #12]
 801cd84:	60b9      	str	r1, [r7, #8]
 801cd86:	4611      	mov	r1, r2
 801cd88:	461a      	mov	r2, r3
 801cd8a:	460b      	mov	r3, r1
 801cd8c:	71fb      	strb	r3, [r7, #7]
 801cd8e:	4613      	mov	r3, r2
 801cd90:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801cd92:	79fb      	ldrb	r3, [r7, #7]
 801cd94:	3304      	adds	r3, #4
 801cd96:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801cd98:	2300      	movs	r3, #0
 801cd9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801cd9e:	68bb      	ldr	r3, [r7, #8]
 801cda0:	2b05      	cmp	r3, #5
 801cda2:	d002      	beq.n	801cdaa <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801cda4:	68bb      	ldr	r3, [r7, #8]
 801cda6:	2b06      	cmp	r3, #6
 801cda8:	d104      	bne.n	801cdb4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801cdaa:	88bb      	ldrh	r3, [r7, #4]
 801cdac:	2b0b      	cmp	r3, #11
 801cdae:	d801      	bhi.n	801cdb4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801cdb0:	230c      	movs	r3, #12
 801cdb2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801cdb4:	68fb      	ldr	r3, [r7, #12]
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	d105      	bne.n	801cdc6 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801cdba:	68bb      	ldr	r3, [r7, #8]
 801cdbc:	2b0b      	cmp	r3, #11
 801cdbe:	d008      	beq.n	801cdd2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801cdc0:	68bb      	ldr	r3, [r7, #8]
 801cdc2:	2b0c      	cmp	r3, #12
 801cdc4:	d005      	beq.n	801cdd2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801cdc6:	68fb      	ldr	r3, [r7, #12]
 801cdc8:	2b01      	cmp	r3, #1
 801cdca:	d105      	bne.n	801cdd8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801cdcc:	68bb      	ldr	r3, [r7, #8]
 801cdce:	2b0c      	cmp	r3, #12
 801cdd0:	d102      	bne.n	801cdd8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801cdd2:	2301      	movs	r3, #1
 801cdd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801cdd8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801cddc:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801cdde:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801cde2:	2a00      	cmp	r2, #0
 801cde4:	d001      	beq.n	801cdea <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801cde6:	2210      	movs	r2, #16
 801cde8:	e000      	b.n	801cdec <RadioGetLoRaTimeOnAirNumerator+0x70>
 801cdea:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801cdec:	4413      	add	r3, r2
 801cdee:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801cdf0:	68bb      	ldr	r3, [r7, #8]
 801cdf2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801cdf4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801cdf6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801cdfa:	2a00      	cmp	r2, #0
 801cdfc:	d001      	beq.n	801ce02 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801cdfe:	2200      	movs	r2, #0
 801ce00:	e000      	b.n	801ce04 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801ce02:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801ce04:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801ce06:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801ce08:	68bb      	ldr	r3, [r7, #8]
 801ce0a:	2b06      	cmp	r3, #6
 801ce0c:	d803      	bhi.n	801ce16 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801ce0e:	68bb      	ldr	r3, [r7, #8]
 801ce10:	009b      	lsls	r3, r3, #2
 801ce12:	623b      	str	r3, [r7, #32]
 801ce14:	e00e      	b.n	801ce34 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801ce16:	69fb      	ldr	r3, [r7, #28]
 801ce18:	3308      	adds	r3, #8
 801ce1a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801ce1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ce20:	2b00      	cmp	r3, #0
 801ce22:	d004      	beq.n	801ce2e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801ce24:	68bb      	ldr	r3, [r7, #8]
 801ce26:	3b02      	subs	r3, #2
 801ce28:	009b      	lsls	r3, r3, #2
 801ce2a:	623b      	str	r3, [r7, #32]
 801ce2c:	e002      	b.n	801ce34 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801ce2e:	68bb      	ldr	r3, [r7, #8]
 801ce30:	009b      	lsls	r3, r3, #2
 801ce32:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801ce34:	69fb      	ldr	r3, [r7, #28]
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	da01      	bge.n	801ce3e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801ce3a:	2300      	movs	r3, #0
 801ce3c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801ce3e:	69fa      	ldr	r2, [r7, #28]
 801ce40:	6a3b      	ldr	r3, [r7, #32]
 801ce42:	4413      	add	r3, r2
 801ce44:	1e5a      	subs	r2, r3, #1
 801ce46:	6a3b      	ldr	r3, [r7, #32]
 801ce48:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce4c:	697a      	ldr	r2, [r7, #20]
 801ce4e:	fb03 f202 	mul.w	r2, r3, r2
 801ce52:	88bb      	ldrh	r3, [r7, #4]
 801ce54:	4413      	add	r3, r2
    int32_t intermediate =
 801ce56:	330c      	adds	r3, #12
 801ce58:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801ce5a:	68bb      	ldr	r3, [r7, #8]
 801ce5c:	2b06      	cmp	r3, #6
 801ce5e:	d802      	bhi.n	801ce66 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801ce60:	69bb      	ldr	r3, [r7, #24]
 801ce62:	3302      	adds	r3, #2
 801ce64:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801ce66:	69bb      	ldr	r3, [r7, #24]
 801ce68:	009b      	lsls	r3, r3, #2
 801ce6a:	1c5a      	adds	r2, r3, #1
 801ce6c:	68bb      	ldr	r3, [r7, #8]
 801ce6e:	3b02      	subs	r3, #2
 801ce70:	fa02 f303 	lsl.w	r3, r2, r3
}
 801ce74:	4618      	mov	r0, r3
 801ce76:	372c      	adds	r7, #44	; 0x2c
 801ce78:	46bd      	mov	sp, r7
 801ce7a:	bc80      	pop	{r7}
 801ce7c:	4770      	bx	lr
	...

0801ce80 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801ce80:	b580      	push	{r7, lr}
 801ce82:	b08a      	sub	sp, #40	; 0x28
 801ce84:	af04      	add	r7, sp, #16
 801ce86:	60b9      	str	r1, [r7, #8]
 801ce88:	607a      	str	r2, [r7, #4]
 801ce8a:	461a      	mov	r2, r3
 801ce8c:	4603      	mov	r3, r0
 801ce8e:	73fb      	strb	r3, [r7, #15]
 801ce90:	4613      	mov	r3, r2
 801ce92:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801ce94:	2300      	movs	r3, #0
 801ce96:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801ce98:	2301      	movs	r3, #1
 801ce9a:	613b      	str	r3, [r7, #16]

    switch( modem )
 801ce9c:	7bfb      	ldrb	r3, [r7, #15]
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	d002      	beq.n	801cea8 <RadioTimeOnAir+0x28>
 801cea2:	2b01      	cmp	r3, #1
 801cea4:	d017      	beq.n	801ced6 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801cea6:	e035      	b.n	801cf14 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801cea8:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801ceac:	8c3a      	ldrh	r2, [r7, #32]
 801ceae:	7bb9      	ldrb	r1, [r7, #14]
 801ceb0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ceb4:	9301      	str	r3, [sp, #4]
 801ceb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ceba:	9300      	str	r3, [sp, #0]
 801cebc:	4603      	mov	r3, r0
 801cebe:	6878      	ldr	r0, [r7, #4]
 801cec0:	f7ff ff32 	bl	801cd28 <RadioGetGfskTimeOnAirNumerator>
 801cec4:	4603      	mov	r3, r0
 801cec6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ceca:	fb02 f303 	mul.w	r3, r2, r3
 801cece:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	613b      	str	r3, [r7, #16]
        break;
 801ced4:	e01e      	b.n	801cf14 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801ced6:	8c39      	ldrh	r1, [r7, #32]
 801ced8:	7bba      	ldrb	r2, [r7, #14]
 801ceda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801cede:	9302      	str	r3, [sp, #8]
 801cee0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801cee4:	9301      	str	r3, [sp, #4]
 801cee6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ceea:	9300      	str	r3, [sp, #0]
 801ceec:	460b      	mov	r3, r1
 801ceee:	6879      	ldr	r1, [r7, #4]
 801cef0:	68b8      	ldr	r0, [r7, #8]
 801cef2:	f7ff ff43 	bl	801cd7c <RadioGetLoRaTimeOnAirNumerator>
 801cef6:	4603      	mov	r3, r0
 801cef8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cefc:	fb02 f303 	mul.w	r3, r2, r3
 801cf00:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801cf02:	4a0a      	ldr	r2, [pc, #40]	; (801cf2c <RadioTimeOnAir+0xac>)
 801cf04:	68bb      	ldr	r3, [r7, #8]
 801cf06:	4413      	add	r3, r2
 801cf08:	781b      	ldrb	r3, [r3, #0]
 801cf0a:	4618      	mov	r0, r3
 801cf0c:	f7ff feb6 	bl	801cc7c <RadioGetLoRaBandwidthInHz>
 801cf10:	6138      	str	r0, [r7, #16]
        break;
 801cf12:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 801cf14:	697a      	ldr	r2, [r7, #20]
 801cf16:	693b      	ldr	r3, [r7, #16]
 801cf18:	4413      	add	r3, r2
 801cf1a:	1e5a      	subs	r2, r3, #1
 801cf1c:	693b      	ldr	r3, [r7, #16]
 801cf1e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801cf22:	4618      	mov	r0, r3
 801cf24:	3718      	adds	r7, #24
 801cf26:	46bd      	mov	sp, r7
 801cf28:	bd80      	pop	{r7, pc}
 801cf2a:	bf00      	nop
 801cf2c:	08021e8c 	.word	0x08021e8c

0801cf30 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 801cf30:	b580      	push	{r7, lr}
 801cf32:	b084      	sub	sp, #16
 801cf34:	af00      	add	r7, sp, #0
 801cf36:	6078      	str	r0, [r7, #4]
 801cf38:	460b      	mov	r3, r1
 801cf3a:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801cf3c:	2300      	movs	r3, #0
 801cf3e:	2200      	movs	r2, #0
 801cf40:	f240 2101 	movw	r1, #513	; 0x201
 801cf44:	f240 2001 	movw	r0, #513	; 0x201
 801cf48:	f001 fd34 	bl	801e9b4 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801cf4c:	4b71      	ldr	r3, [pc, #452]	; (801d114 <RadioSend+0x1e4>)
 801cf4e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801cf52:	2101      	movs	r1, #1
 801cf54:	4618      	mov	r0, r3
 801cf56:	f002 f9d1 	bl	801f2fc <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801cf5a:	4b6e      	ldr	r3, [pc, #440]	; (801d114 <RadioSend+0x1e4>)
 801cf5c:	781b      	ldrb	r3, [r3, #0]
 801cf5e:	2b01      	cmp	r3, #1
 801cf60:	d112      	bne.n	801cf88 <RadioSend+0x58>
 801cf62:	4b6c      	ldr	r3, [pc, #432]	; (801d114 <RadioSend+0x1e4>)
 801cf64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801cf68:	2b06      	cmp	r3, #6
 801cf6a:	d10d      	bne.n	801cf88 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801cf6c:	f640 0089 	movw	r0, #2185	; 0x889
 801cf70:	f002 f8e4 	bl	801f13c <SUBGRF_ReadRegister>
 801cf74:	4603      	mov	r3, r0
 801cf76:	f023 0304 	bic.w	r3, r3, #4
 801cf7a:	b2db      	uxtb	r3, r3
 801cf7c:	4619      	mov	r1, r3
 801cf7e:	f640 0089 	movw	r0, #2185	; 0x889
 801cf82:	f002 f8c7 	bl	801f114 <SUBGRF_WriteRegister>
 801cf86:	e00c      	b.n	801cfa2 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801cf88:	f640 0089 	movw	r0, #2185	; 0x889
 801cf8c:	f002 f8d6 	bl	801f13c <SUBGRF_ReadRegister>
 801cf90:	4603      	mov	r3, r0
 801cf92:	f043 0304 	orr.w	r3, r3, #4
 801cf96:	b2db      	uxtb	r3, r3
 801cf98:	4619      	mov	r1, r3
 801cf9a:	f640 0089 	movw	r0, #2185	; 0x889
 801cf9e:	f002 f8b9 	bl	801f114 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 801cfa2:	4b5c      	ldr	r3, [pc, #368]	; (801d114 <RadioSend+0x1e4>)
 801cfa4:	781b      	ldrb	r3, [r3, #0]
 801cfa6:	2b04      	cmp	r3, #4
 801cfa8:	f200 80a7 	bhi.w	801d0fa <RadioSend+0x1ca>
 801cfac:	a201      	add	r2, pc, #4	; (adr r2, 801cfb4 <RadioSend+0x84>)
 801cfae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cfb2:	bf00      	nop
 801cfb4:	0801cfe3 	.word	0x0801cfe3
 801cfb8:	0801cfc9 	.word	0x0801cfc9
 801cfbc:	0801cfe3 	.word	0x0801cfe3
 801cfc0:	0801d043 	.word	0x0801d043
 801cfc4:	0801d063 	.word	0x0801d063
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801cfc8:	4a52      	ldr	r2, [pc, #328]	; (801d114 <RadioSend+0x1e4>)
 801cfca:	78fb      	ldrb	r3, [r7, #3]
 801cfcc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801cfce:	4852      	ldr	r0, [pc, #328]	; (801d118 <RadioSend+0x1e8>)
 801cfd0:	f001 ff58 	bl	801ee84 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801cfd4:	78fb      	ldrb	r3, [r7, #3]
 801cfd6:	2200      	movs	r2, #0
 801cfd8:	4619      	mov	r1, r3
 801cfda:	6878      	ldr	r0, [r7, #4]
 801cfdc:	f001 fa0c 	bl	801e3f8 <SUBGRF_SendPayload>
            break;
 801cfe0:	e08c      	b.n	801d0fc <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801cfe2:	f002 fb74 	bl	801f6ce <RFW_Is_Init>
 801cfe6:	4603      	mov	r3, r0
 801cfe8:	2b01      	cmp	r3, #1
 801cfea:	d11d      	bne.n	801d028 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801cfec:	f107 020d 	add.w	r2, r7, #13
 801cff0:	78fb      	ldrb	r3, [r7, #3]
 801cff2:	4619      	mov	r1, r3
 801cff4:	6878      	ldr	r0, [r7, #4]
 801cff6:	f002 fb82 	bl	801f6fe <RFW_TransmitInit>
 801cffa:	4603      	mov	r3, r0
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	d10c      	bne.n	801d01a <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801d000:	7b7a      	ldrb	r2, [r7, #13]
 801d002:	4b44      	ldr	r3, [pc, #272]	; (801d114 <RadioSend+0x1e4>)
 801d004:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d006:	4844      	ldr	r0, [pc, #272]	; (801d118 <RadioSend+0x1e8>)
 801d008:	f001 ff3c 	bl	801ee84 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 801d00c:	7b7b      	ldrb	r3, [r7, #13]
 801d00e:	2200      	movs	r2, #0
 801d010:	4619      	mov	r1, r3
 801d012:	6878      	ldr	r0, [r7, #4]
 801d014:	f001 f9f0 	bl	801e3f8 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801d018:	e070      	b.n	801d0fc <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801d01a:	4b40      	ldr	r3, [pc, #256]	; (801d11c <RadioSend+0x1ec>)
 801d01c:	2201      	movs	r2, #1
 801d01e:	2100      	movs	r1, #0
 801d020:	2002      	movs	r0, #2
 801d022:	f003 fc91 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
 801d026:	e072      	b.n	801d10e <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801d028:	4a3a      	ldr	r2, [pc, #232]	; (801d114 <RadioSend+0x1e4>)
 801d02a:	78fb      	ldrb	r3, [r7, #3]
 801d02c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d02e:	483a      	ldr	r0, [pc, #232]	; (801d118 <RadioSend+0x1e8>)
 801d030:	f001 ff28 	bl	801ee84 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 801d034:	78fb      	ldrb	r3, [r7, #3]
 801d036:	2200      	movs	r2, #0
 801d038:	4619      	mov	r1, r3
 801d03a:	6878      	ldr	r0, [r7, #4]
 801d03c:	f001 f9dc 	bl	801e3f8 <SUBGRF_SendPayload>
            break;
 801d040:	e05c      	b.n	801d0fc <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801d042:	4b34      	ldr	r3, [pc, #208]	; (801d114 <RadioSend+0x1e4>)
 801d044:	2202      	movs	r2, #2
 801d046:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801d048:	4a32      	ldr	r2, [pc, #200]	; (801d114 <RadioSend+0x1e4>)
 801d04a:	78fb      	ldrb	r3, [r7, #3]
 801d04c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d04e:	4832      	ldr	r0, [pc, #200]	; (801d118 <RadioSend+0x1e8>)
 801d050:	f001 ff18 	bl	801ee84 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801d054:	78fb      	ldrb	r3, [r7, #3]
 801d056:	2200      	movs	r2, #0
 801d058:	4619      	mov	r1, r3
 801d05a:	6878      	ldr	r0, [r7, #4]
 801d05c:	f001 f9cc 	bl	801e3f8 <SUBGRF_SendPayload>
            break;
 801d060:	e04c      	b.n	801d0fc <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801d062:	78fb      	ldrb	r3, [r7, #3]
 801d064:	461a      	mov	r2, r3
 801d066:	6879      	ldr	r1, [r7, #4]
 801d068:	482d      	ldr	r0, [pc, #180]	; (801d120 <RadioSend+0x1f0>)
 801d06a:	f000 fcbc 	bl	801d9e6 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801d06e:	4b29      	ldr	r3, [pc, #164]	; (801d114 <RadioSend+0x1e4>)
 801d070:	2202      	movs	r2, #2
 801d072:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801d074:	78fb      	ldrb	r3, [r7, #3]
 801d076:	3301      	adds	r3, #1
 801d078:	b2da      	uxtb	r2, r3
 801d07a:	4b26      	ldr	r3, [pc, #152]	; (801d114 <RadioSend+0x1e4>)
 801d07c:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d07e:	4826      	ldr	r0, [pc, #152]	; (801d118 <RadioSend+0x1e8>)
 801d080:	f001 ff00 	bl	801ee84 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801d084:	2100      	movs	r1, #0
 801d086:	20f1      	movs	r0, #241	; 0xf1
 801d088:	f000 f95d 	bl	801d346 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801d08c:	2100      	movs	r1, #0
 801d08e:	20f0      	movs	r0, #240	; 0xf0
 801d090:	f000 f959 	bl	801d346 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801d094:	4b1f      	ldr	r3, [pc, #124]	; (801d114 <RadioSend+0x1e4>)
 801d096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d098:	2b64      	cmp	r3, #100	; 0x64
 801d09a:	d108      	bne.n	801d0ae <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801d09c:	2170      	movs	r1, #112	; 0x70
 801d09e:	20f3      	movs	r0, #243	; 0xf3
 801d0a0:	f000 f951 	bl	801d346 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801d0a4:	211d      	movs	r1, #29
 801d0a6:	20f2      	movs	r0, #242	; 0xf2
 801d0a8:	f000 f94d 	bl	801d346 <RadioWrite>
 801d0ac:	e007      	b.n	801d0be <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801d0ae:	21e1      	movs	r1, #225	; 0xe1
 801d0b0:	20f3      	movs	r0, #243	; 0xf3
 801d0b2:	f000 f948 	bl	801d346 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801d0b6:	2104      	movs	r1, #4
 801d0b8:	20f2      	movs	r0, #242	; 0xf2
 801d0ba:	f000 f944 	bl	801d346 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801d0be:	78fb      	ldrb	r3, [r7, #3]
 801d0c0:	b29b      	uxth	r3, r3
 801d0c2:	00db      	lsls	r3, r3, #3
 801d0c4:	b29b      	uxth	r3, r3
 801d0c6:	3302      	adds	r3, #2
 801d0c8:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801d0ca:	89fb      	ldrh	r3, [r7, #14]
 801d0cc:	0a1b      	lsrs	r3, r3, #8
 801d0ce:	b29b      	uxth	r3, r3
 801d0d0:	b2db      	uxtb	r3, r3
 801d0d2:	4619      	mov	r1, r3
 801d0d4:	20f4      	movs	r0, #244	; 0xf4
 801d0d6:	f000 f936 	bl	801d346 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801d0da:	89fb      	ldrh	r3, [r7, #14]
 801d0dc:	b2db      	uxtb	r3, r3
 801d0de:	4619      	mov	r1, r3
 801d0e0:	20f5      	movs	r0, #245	; 0xf5
 801d0e2:	f000 f930 	bl	801d346 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 801d0e6:	78fb      	ldrb	r3, [r7, #3]
 801d0e8:	3301      	adds	r3, #1
 801d0ea:	b2db      	uxtb	r3, r3
 801d0ec:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801d0f0:	4619      	mov	r1, r3
 801d0f2:	480b      	ldr	r0, [pc, #44]	; (801d120 <RadioSend+0x1f0>)
 801d0f4:	f001 f980 	bl	801e3f8 <SUBGRF_SendPayload>
            break;
 801d0f8:	e000      	b.n	801d0fc <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801d0fa:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801d0fc:	4b05      	ldr	r3, [pc, #20]	; (801d114 <RadioSend+0x1e4>)
 801d0fe:	685b      	ldr	r3, [r3, #4]
 801d100:	4619      	mov	r1, r3
 801d102:	4808      	ldr	r0, [pc, #32]	; (801d124 <RadioSend+0x1f4>)
 801d104:	f003 fa86 	bl	8020614 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801d108:	4806      	ldr	r0, [pc, #24]	; (801d124 <RadioSend+0x1f4>)
 801d10a:	f003 f9a5 	bl	8020458 <UTIL_TIMER_Start>
}
 801d10e:	3710      	adds	r7, #16
 801d110:	46bd      	mov	sp, r7
 801d112:	bd80      	pop	{r7, pc}
 801d114:	200024ac 	.word	0x200024ac
 801d118:	200024ba 	.word	0x200024ba
 801d11c:	080218b8 	.word	0x080218b8
 801d120:	200023a8 	.word	0x200023a8
 801d124:	20002508 	.word	0x20002508

0801d128 <RadioSleep>:

static void RadioSleep( void )
{
 801d128:	b580      	push	{r7, lr}
 801d12a:	b082      	sub	sp, #8
 801d12c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801d12e:	2300      	movs	r3, #0
 801d130:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801d132:	793b      	ldrb	r3, [r7, #4]
 801d134:	f043 0304 	orr.w	r3, r3, #4
 801d138:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801d13a:	7938      	ldrb	r0, [r7, #4]
 801d13c:	f001 fa38 	bl	801e5b0 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801d140:	2002      	movs	r0, #2
 801d142:	f7e5 fff5 	bl	8003130 <HAL_Delay>
}
 801d146:	bf00      	nop
 801d148:	3708      	adds	r7, #8
 801d14a:	46bd      	mov	sp, r7
 801d14c:	bd80      	pop	{r7, pc}

0801d14e <RadioStandby>:

static void RadioStandby( void )
{
 801d14e:	b580      	push	{r7, lr}
 801d150:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801d152:	2000      	movs	r0, #0
 801d154:	f001 fa5e 	bl	801e614 <SUBGRF_SetStandby>
}
 801d158:	bf00      	nop
 801d15a:	bd80      	pop	{r7, pc}

0801d15c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801d15c:	b580      	push	{r7, lr}
 801d15e:	b082      	sub	sp, #8
 801d160:	af00      	add	r7, sp, #0
 801d162:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 801d164:	f002 fab3 	bl	801f6ce <RFW_Is_Init>
 801d168:	4603      	mov	r3, r0
 801d16a:	2b01      	cmp	r3, #1
 801d16c:	d102      	bne.n	801d174 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801d16e:	f002 fad6 	bl	801f71e <RFW_ReceiveInit>
 801d172:	e007      	b.n	801d184 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801d174:	2300      	movs	r3, #0
 801d176:	2200      	movs	r2, #0
 801d178:	f240 2162 	movw	r1, #610	; 0x262
 801d17c:	f240 2062 	movw	r0, #610	; 0x262
 801d180:	f001 fc18 	bl	801e9b4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	2b00      	cmp	r3, #0
 801d188:	d006      	beq.n	801d198 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801d18a:	6879      	ldr	r1, [r7, #4]
 801d18c:	4811      	ldr	r0, [pc, #68]	; (801d1d4 <RadioRx+0x78>)
 801d18e:	f003 fa41 	bl	8020614 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801d192:	4810      	ldr	r0, [pc, #64]	; (801d1d4 <RadioRx+0x78>)
 801d194:	f003 f960 	bl	8020458 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801d198:	4b0f      	ldr	r3, [pc, #60]	; (801d1d8 <RadioRx+0x7c>)
 801d19a:	2200      	movs	r2, #0
 801d19c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801d19e:	4b0e      	ldr	r3, [pc, #56]	; (801d1d8 <RadioRx+0x7c>)
 801d1a0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d1a4:	2100      	movs	r1, #0
 801d1a6:	4618      	mov	r0, r3
 801d1a8:	f002 f8a8 	bl	801f2fc <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801d1ac:	4b0a      	ldr	r3, [pc, #40]	; (801d1d8 <RadioRx+0x7c>)
 801d1ae:	785b      	ldrb	r3, [r3, #1]
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	d004      	beq.n	801d1be <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801d1b4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801d1b8:	f001 fa68 	bl	801e68c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801d1bc:	e005      	b.n	801d1ca <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801d1be:	4b06      	ldr	r3, [pc, #24]	; (801d1d8 <RadioRx+0x7c>)
 801d1c0:	689b      	ldr	r3, [r3, #8]
 801d1c2:	019b      	lsls	r3, r3, #6
 801d1c4:	4618      	mov	r0, r3
 801d1c6:	f001 fa61 	bl	801e68c <SUBGRF_SetRx>
}
 801d1ca:	bf00      	nop
 801d1cc:	3708      	adds	r7, #8
 801d1ce:	46bd      	mov	sp, r7
 801d1d0:	bd80      	pop	{r7, pc}
 801d1d2:	bf00      	nop
 801d1d4:	20002520 	.word	0x20002520
 801d1d8:	200024ac 	.word	0x200024ac

0801d1dc <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801d1dc:	b580      	push	{r7, lr}
 801d1de:	b082      	sub	sp, #8
 801d1e0:	af00      	add	r7, sp, #0
 801d1e2:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 801d1e4:	f002 fa73 	bl	801f6ce <RFW_Is_Init>
 801d1e8:	4603      	mov	r3, r0
 801d1ea:	2b01      	cmp	r3, #1
 801d1ec:	d102      	bne.n	801d1f4 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801d1ee:	f002 fa96 	bl	801f71e <RFW_ReceiveInit>
 801d1f2:	e007      	b.n	801d204 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801d1f4:	2300      	movs	r3, #0
 801d1f6:	2200      	movs	r2, #0
 801d1f8:	f240 2162 	movw	r1, #610	; 0x262
 801d1fc:	f240 2062 	movw	r0, #610	; 0x262
 801d200:	f001 fbd8 	bl	801e9b4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801d204:	687b      	ldr	r3, [r7, #4]
 801d206:	2b00      	cmp	r3, #0
 801d208:	d006      	beq.n	801d218 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801d20a:	6879      	ldr	r1, [r7, #4]
 801d20c:	4811      	ldr	r0, [pc, #68]	; (801d254 <RadioRxBoosted+0x78>)
 801d20e:	f003 fa01 	bl	8020614 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801d212:	4810      	ldr	r0, [pc, #64]	; (801d254 <RadioRxBoosted+0x78>)
 801d214:	f003 f920 	bl	8020458 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801d218:	4b0f      	ldr	r3, [pc, #60]	; (801d258 <RadioRxBoosted+0x7c>)
 801d21a:	2200      	movs	r2, #0
 801d21c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801d21e:	4b0e      	ldr	r3, [pc, #56]	; (801d258 <RadioRxBoosted+0x7c>)
 801d220:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d224:	2100      	movs	r1, #0
 801d226:	4618      	mov	r0, r3
 801d228:	f002 f868 	bl	801f2fc <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801d22c:	4b0a      	ldr	r3, [pc, #40]	; (801d258 <RadioRxBoosted+0x7c>)
 801d22e:	785b      	ldrb	r3, [r3, #1]
 801d230:	2b00      	cmp	r3, #0
 801d232:	d004      	beq.n	801d23e <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801d234:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801d238:	f001 fa48 	bl	801e6cc <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801d23c:	e005      	b.n	801d24a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801d23e:	4b06      	ldr	r3, [pc, #24]	; (801d258 <RadioRxBoosted+0x7c>)
 801d240:	689b      	ldr	r3, [r3, #8]
 801d242:	019b      	lsls	r3, r3, #6
 801d244:	4618      	mov	r0, r3
 801d246:	f001 fa41 	bl	801e6cc <SUBGRF_SetRxBoosted>
}
 801d24a:	bf00      	nop
 801d24c:	3708      	adds	r7, #8
 801d24e:	46bd      	mov	sp, r7
 801d250:	bd80      	pop	{r7, pc}
 801d252:	bf00      	nop
 801d254:	20002520 	.word	0x20002520
 801d258:	200024ac 	.word	0x200024ac

0801d25c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801d25c:	b580      	push	{r7, lr}
 801d25e:	b082      	sub	sp, #8
 801d260:	af00      	add	r7, sp, #0
 801d262:	6078      	str	r0, [r7, #4]
 801d264:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801d266:	687b      	ldr	r3, [r7, #4]
 801d268:	005a      	lsls	r2, r3, #1
 801d26a:	683b      	ldr	r3, [r7, #0]
 801d26c:	4413      	add	r3, r2
 801d26e:	4a0c      	ldr	r2, [pc, #48]	; (801d2a0 <RadioSetRxDutyCycle+0x44>)
 801d270:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801d272:	2300      	movs	r3, #0
 801d274:	2200      	movs	r2, #0
 801d276:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d27a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801d27e:	f001 fb99 	bl	801e9b4 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801d282:	4b07      	ldr	r3, [pc, #28]	; (801d2a0 <RadioSetRxDutyCycle+0x44>)
 801d284:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d288:	2100      	movs	r1, #0
 801d28a:	4618      	mov	r0, r3
 801d28c:	f002 f836 	bl	801f2fc <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801d290:	6839      	ldr	r1, [r7, #0]
 801d292:	6878      	ldr	r0, [r7, #4]
 801d294:	f001 fa3e 	bl	801e714 <SUBGRF_SetRxDutyCycle>
}
 801d298:	bf00      	nop
 801d29a:	3708      	adds	r7, #8
 801d29c:	46bd      	mov	sp, r7
 801d29e:	bd80      	pop	{r7, pc}
 801d2a0:	200024ac 	.word	0x200024ac

0801d2a4 <RadioStartCad>:

static void RadioStartCad( void )
{
 801d2a4:	b580      	push	{r7, lr}
 801d2a6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801d2a8:	4b09      	ldr	r3, [pc, #36]	; (801d2d0 <RadioStartCad+0x2c>)
 801d2aa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d2ae:	2100      	movs	r1, #0
 801d2b0:	4618      	mov	r0, r3
 801d2b2:	f002 f823 	bl	801f2fc <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801d2b6:	2300      	movs	r3, #0
 801d2b8:	2200      	movs	r2, #0
 801d2ba:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801d2be:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801d2c2:	f001 fb77 	bl	801e9b4 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801d2c6:	f001 fa51 	bl	801e76c <SUBGRF_SetCad>
}
 801d2ca:	bf00      	nop
 801d2cc:	bd80      	pop	{r7, pc}
 801d2ce:	bf00      	nop
 801d2d0:	200024ac 	.word	0x200024ac

0801d2d4 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801d2d4:	b580      	push	{r7, lr}
 801d2d6:	b084      	sub	sp, #16
 801d2d8:	af00      	add	r7, sp, #0
 801d2da:	6078      	str	r0, [r7, #4]
 801d2dc:	460b      	mov	r3, r1
 801d2de:	70fb      	strb	r3, [r7, #3]
 801d2e0:	4613      	mov	r3, r2
 801d2e2:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801d2e4:	883b      	ldrh	r3, [r7, #0]
 801d2e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d2ea:	fb02 f303 	mul.w	r3, r2, r3
 801d2ee:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801d2f0:	6878      	ldr	r0, [r7, #4]
 801d2f2:	f001 fbbb 	bl	801ea6c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801d2f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d2fa:	4618      	mov	r0, r3
 801d2fc:	f002 f826 	bl	801f34c <SUBGRF_SetRfTxPower>
 801d300:	4603      	mov	r3, r0
 801d302:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801d304:	7afb      	ldrb	r3, [r7, #11]
 801d306:	2101      	movs	r1, #1
 801d308:	4618      	mov	r0, r3
 801d30a:	f001 fff7 	bl	801f2fc <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801d30e:	f001 fa3b 	bl	801e788 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801d312:	68f9      	ldr	r1, [r7, #12]
 801d314:	4804      	ldr	r0, [pc, #16]	; (801d328 <RadioSetTxContinuousWave+0x54>)
 801d316:	f003 f97d 	bl	8020614 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801d31a:	4803      	ldr	r0, [pc, #12]	; (801d328 <RadioSetTxContinuousWave+0x54>)
 801d31c:	f003 f89c 	bl	8020458 <UTIL_TIMER_Start>
}
 801d320:	bf00      	nop
 801d322:	3710      	adds	r7, #16
 801d324:	46bd      	mov	sp, r7
 801d326:	bd80      	pop	{r7, pc}
 801d328:	20002508 	.word	0x20002508

0801d32c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801d32c:	b580      	push	{r7, lr}
 801d32e:	b082      	sub	sp, #8
 801d330:	af00      	add	r7, sp, #0
 801d332:	4603      	mov	r3, r0
 801d334:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801d336:	f001 fe5a 	bl	801efee <SUBGRF_GetRssiInst>
 801d33a:	4603      	mov	r3, r0
 801d33c:	b21b      	sxth	r3, r3
}
 801d33e:	4618      	mov	r0, r3
 801d340:	3708      	adds	r7, #8
 801d342:	46bd      	mov	sp, r7
 801d344:	bd80      	pop	{r7, pc}

0801d346 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801d346:	b580      	push	{r7, lr}
 801d348:	b082      	sub	sp, #8
 801d34a:	af00      	add	r7, sp, #0
 801d34c:	4603      	mov	r3, r0
 801d34e:	460a      	mov	r2, r1
 801d350:	80fb      	strh	r3, [r7, #6]
 801d352:	4613      	mov	r3, r2
 801d354:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801d356:	797a      	ldrb	r2, [r7, #5]
 801d358:	88fb      	ldrh	r3, [r7, #6]
 801d35a:	4611      	mov	r1, r2
 801d35c:	4618      	mov	r0, r3
 801d35e:	f001 fed9 	bl	801f114 <SUBGRF_WriteRegister>
}
 801d362:	bf00      	nop
 801d364:	3708      	adds	r7, #8
 801d366:	46bd      	mov	sp, r7
 801d368:	bd80      	pop	{r7, pc}

0801d36a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801d36a:	b580      	push	{r7, lr}
 801d36c:	b082      	sub	sp, #8
 801d36e:	af00      	add	r7, sp, #0
 801d370:	4603      	mov	r3, r0
 801d372:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801d374:	88fb      	ldrh	r3, [r7, #6]
 801d376:	4618      	mov	r0, r3
 801d378:	f001 fee0 	bl	801f13c <SUBGRF_ReadRegister>
 801d37c:	4603      	mov	r3, r0
}
 801d37e:	4618      	mov	r0, r3
 801d380:	3708      	adds	r7, #8
 801d382:	46bd      	mov	sp, r7
 801d384:	bd80      	pop	{r7, pc}

0801d386 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801d386:	b580      	push	{r7, lr}
 801d388:	b082      	sub	sp, #8
 801d38a:	af00      	add	r7, sp, #0
 801d38c:	4603      	mov	r3, r0
 801d38e:	6039      	str	r1, [r7, #0]
 801d390:	80fb      	strh	r3, [r7, #6]
 801d392:	4613      	mov	r3, r2
 801d394:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801d396:	797b      	ldrb	r3, [r7, #5]
 801d398:	b29a      	uxth	r2, r3
 801d39a:	88fb      	ldrh	r3, [r7, #6]
 801d39c:	6839      	ldr	r1, [r7, #0]
 801d39e:	4618      	mov	r0, r3
 801d3a0:	f001 fee0 	bl	801f164 <SUBGRF_WriteRegisters>
}
 801d3a4:	bf00      	nop
 801d3a6:	3708      	adds	r7, #8
 801d3a8:	46bd      	mov	sp, r7
 801d3aa:	bd80      	pop	{r7, pc}

0801d3ac <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801d3ac:	b580      	push	{r7, lr}
 801d3ae:	b082      	sub	sp, #8
 801d3b0:	af00      	add	r7, sp, #0
 801d3b2:	4603      	mov	r3, r0
 801d3b4:	6039      	str	r1, [r7, #0]
 801d3b6:	80fb      	strh	r3, [r7, #6]
 801d3b8:	4613      	mov	r3, r2
 801d3ba:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801d3bc:	797b      	ldrb	r3, [r7, #5]
 801d3be:	b29a      	uxth	r2, r3
 801d3c0:	88fb      	ldrh	r3, [r7, #6]
 801d3c2:	6839      	ldr	r1, [r7, #0]
 801d3c4:	4618      	mov	r0, r3
 801d3c6:	f001 feef 	bl	801f1a8 <SUBGRF_ReadRegisters>
}
 801d3ca:	bf00      	nop
 801d3cc:	3708      	adds	r7, #8
 801d3ce:	46bd      	mov	sp, r7
 801d3d0:	bd80      	pop	{r7, pc}
	...

0801d3d4 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801d3d4:	b580      	push	{r7, lr}
 801d3d6:	b082      	sub	sp, #8
 801d3d8:	af00      	add	r7, sp, #0
 801d3da:	4603      	mov	r3, r0
 801d3dc:	460a      	mov	r2, r1
 801d3de:	71fb      	strb	r3, [r7, #7]
 801d3e0:	4613      	mov	r3, r2
 801d3e2:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801d3e4:	79fb      	ldrb	r3, [r7, #7]
 801d3e6:	2b01      	cmp	r3, #1
 801d3e8:	d10a      	bne.n	801d400 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801d3ea:	4a0e      	ldr	r2, [pc, #56]	; (801d424 <RadioSetMaxPayloadLength+0x50>)
 801d3ec:	79bb      	ldrb	r3, [r7, #6]
 801d3ee:	7013      	strb	r3, [r2, #0]
 801d3f0:	4b0c      	ldr	r3, [pc, #48]	; (801d424 <RadioSetMaxPayloadLength+0x50>)
 801d3f2:	781a      	ldrb	r2, [r3, #0]
 801d3f4:	4b0c      	ldr	r3, [pc, #48]	; (801d428 <RadioSetMaxPayloadLength+0x54>)
 801d3f6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d3f8:	480c      	ldr	r0, [pc, #48]	; (801d42c <RadioSetMaxPayloadLength+0x58>)
 801d3fa:	f001 fd43 	bl	801ee84 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801d3fe:	e00d      	b.n	801d41c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801d400:	4b09      	ldr	r3, [pc, #36]	; (801d428 <RadioSetMaxPayloadLength+0x54>)
 801d402:	7d5b      	ldrb	r3, [r3, #21]
 801d404:	2b01      	cmp	r3, #1
 801d406:	d109      	bne.n	801d41c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801d408:	4a06      	ldr	r2, [pc, #24]	; (801d424 <RadioSetMaxPayloadLength+0x50>)
 801d40a:	79bb      	ldrb	r3, [r7, #6]
 801d40c:	7013      	strb	r3, [r2, #0]
 801d40e:	4b05      	ldr	r3, [pc, #20]	; (801d424 <RadioSetMaxPayloadLength+0x50>)
 801d410:	781a      	ldrb	r2, [r3, #0]
 801d412:	4b05      	ldr	r3, [pc, #20]	; (801d428 <RadioSetMaxPayloadLength+0x54>)
 801d414:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d416:	4805      	ldr	r0, [pc, #20]	; (801d42c <RadioSetMaxPayloadLength+0x58>)
 801d418:	f001 fd34 	bl	801ee84 <SUBGRF_SetPacketParams>
}
 801d41c:	bf00      	nop
 801d41e:	3708      	adds	r7, #8
 801d420:	46bd      	mov	sp, r7
 801d422:	bd80      	pop	{r7, pc}
 801d424:	2000016c 	.word	0x2000016c
 801d428:	200024ac 	.word	0x200024ac
 801d42c:	200024ba 	.word	0x200024ba

0801d430 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801d430:	b580      	push	{r7, lr}
 801d432:	b082      	sub	sp, #8
 801d434:	af00      	add	r7, sp, #0
 801d436:	4603      	mov	r3, r0
 801d438:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801d43a:	4a13      	ldr	r2, [pc, #76]	; (801d488 <RadioSetPublicNetwork+0x58>)
 801d43c:	79fb      	ldrb	r3, [r7, #7]
 801d43e:	7313      	strb	r3, [r2, #12]
 801d440:	4b11      	ldr	r3, [pc, #68]	; (801d488 <RadioSetPublicNetwork+0x58>)
 801d442:	7b1a      	ldrb	r2, [r3, #12]
 801d444:	4b10      	ldr	r3, [pc, #64]	; (801d488 <RadioSetPublicNetwork+0x58>)
 801d446:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801d448:	2001      	movs	r0, #1
 801d44a:	f7ff f82d 	bl	801c4a8 <RadioSetModem>
    if( enable == true )
 801d44e:	79fb      	ldrb	r3, [r7, #7]
 801d450:	2b00      	cmp	r3, #0
 801d452:	d00a      	beq.n	801d46a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801d454:	2134      	movs	r1, #52	; 0x34
 801d456:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801d45a:	f001 fe5b 	bl	801f114 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801d45e:	2144      	movs	r1, #68	; 0x44
 801d460:	f240 7041 	movw	r0, #1857	; 0x741
 801d464:	f001 fe56 	bl	801f114 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801d468:	e009      	b.n	801d47e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801d46a:	2114      	movs	r1, #20
 801d46c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801d470:	f001 fe50 	bl	801f114 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801d474:	2124      	movs	r1, #36	; 0x24
 801d476:	f240 7041 	movw	r0, #1857	; 0x741
 801d47a:	f001 fe4b 	bl	801f114 <SUBGRF_WriteRegister>
}
 801d47e:	bf00      	nop
 801d480:	3708      	adds	r7, #8
 801d482:	46bd      	mov	sp, r7
 801d484:	bd80      	pop	{r7, pc}
 801d486:	bf00      	nop
 801d488:	200024ac 	.word	0x200024ac

0801d48c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801d48c:	b580      	push	{r7, lr}
 801d48e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801d490:	f001 ff90 	bl	801f3b4 <SUBGRF_GetRadioWakeUpTime>
 801d494:	4603      	mov	r3, r0
 801d496:	3303      	adds	r3, #3
}
 801d498:	4618      	mov	r0, r3
 801d49a:	bd80      	pop	{r7, pc}

0801d49c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801d49c:	b580      	push	{r7, lr}
 801d49e:	b082      	sub	sp, #8
 801d4a0:	af00      	add	r7, sp, #0
 801d4a2:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801d4a4:	f000 f80e 	bl	801d4c4 <RadioOnTxTimeoutProcess>
}
 801d4a8:	bf00      	nop
 801d4aa:	3708      	adds	r7, #8
 801d4ac:	46bd      	mov	sp, r7
 801d4ae:	bd80      	pop	{r7, pc}

0801d4b0 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801d4b0:	b580      	push	{r7, lr}
 801d4b2:	b082      	sub	sp, #8
 801d4b4:	af00      	add	r7, sp, #0
 801d4b6:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801d4b8:	f000 f818 	bl	801d4ec <RadioOnRxTimeoutProcess>
}
 801d4bc:	bf00      	nop
 801d4be:	3708      	adds	r7, #8
 801d4c0:	46bd      	mov	sp, r7
 801d4c2:	bd80      	pop	{r7, pc}

0801d4c4 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801d4c4:	b580      	push	{r7, lr}
 801d4c6:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801d4c8:	4b07      	ldr	r3, [pc, #28]	; (801d4e8 <RadioOnTxTimeoutProcess+0x24>)
 801d4ca:	681b      	ldr	r3, [r3, #0]
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	d008      	beq.n	801d4e2 <RadioOnTxTimeoutProcess+0x1e>
 801d4d0:	4b05      	ldr	r3, [pc, #20]	; (801d4e8 <RadioOnTxTimeoutProcess+0x24>)
 801d4d2:	681b      	ldr	r3, [r3, #0]
 801d4d4:	685b      	ldr	r3, [r3, #4]
 801d4d6:	2b00      	cmp	r3, #0
 801d4d8:	d003      	beq.n	801d4e2 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801d4da:	4b03      	ldr	r3, [pc, #12]	; (801d4e8 <RadioOnTxTimeoutProcess+0x24>)
 801d4dc:	681b      	ldr	r3, [r3, #0]
 801d4de:	685b      	ldr	r3, [r3, #4]
 801d4e0:	4798      	blx	r3
    }
}
 801d4e2:	bf00      	nop
 801d4e4:	bd80      	pop	{r7, pc}
 801d4e6:	bf00      	nop
 801d4e8:	200024a8 	.word	0x200024a8

0801d4ec <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801d4ec:	b580      	push	{r7, lr}
 801d4ee:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801d4f0:	4b07      	ldr	r3, [pc, #28]	; (801d510 <RadioOnRxTimeoutProcess+0x24>)
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	d008      	beq.n	801d50a <RadioOnRxTimeoutProcess+0x1e>
 801d4f8:	4b05      	ldr	r3, [pc, #20]	; (801d510 <RadioOnRxTimeoutProcess+0x24>)
 801d4fa:	681b      	ldr	r3, [r3, #0]
 801d4fc:	68db      	ldr	r3, [r3, #12]
 801d4fe:	2b00      	cmp	r3, #0
 801d500:	d003      	beq.n	801d50a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801d502:	4b03      	ldr	r3, [pc, #12]	; (801d510 <RadioOnRxTimeoutProcess+0x24>)
 801d504:	681b      	ldr	r3, [r3, #0]
 801d506:	68db      	ldr	r3, [r3, #12]
 801d508:	4798      	blx	r3
    }
}
 801d50a:	bf00      	nop
 801d50c:	bd80      	pop	{r7, pc}
 801d50e:	bf00      	nop
 801d510:	200024a8 	.word	0x200024a8

0801d514 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801d514:	b580      	push	{r7, lr}
 801d516:	b082      	sub	sp, #8
 801d518:	af00      	add	r7, sp, #0
 801d51a:	4603      	mov	r3, r0
 801d51c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801d51e:	4a05      	ldr	r2, [pc, #20]	; (801d534 <RadioOnDioIrq+0x20>)
 801d520:	88fb      	ldrh	r3, [r7, #6]
 801d522:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801d526:	f000 f807 	bl	801d538 <RadioIrqProcess>
}
 801d52a:	bf00      	nop
 801d52c:	3708      	adds	r7, #8
 801d52e:	46bd      	mov	sp, r7
 801d530:	bd80      	pop	{r7, pc}
 801d532:	bf00      	nop
 801d534:	200024ac 	.word	0x200024ac

0801d538 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801d538:	b590      	push	{r4, r7, lr}
 801d53a:	b083      	sub	sp, #12
 801d53c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801d53e:	2300      	movs	r3, #0
 801d540:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801d542:	2300      	movs	r3, #0
 801d544:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801d546:	4ba8      	ldr	r3, [pc, #672]	; (801d7e8 <RadioIrqProcess+0x2b0>)
 801d548:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801d54c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d550:	f000 810c 	beq.w	801d76c <RadioIrqProcess+0x234>
 801d554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d558:	f300 81e8 	bgt.w	801d92c <RadioIrqProcess+0x3f4>
 801d55c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d560:	f000 80f0 	beq.w	801d744 <RadioIrqProcess+0x20c>
 801d564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d568:	f300 81e0 	bgt.w	801d92c <RadioIrqProcess+0x3f4>
 801d56c:	2b80      	cmp	r3, #128	; 0x80
 801d56e:	f000 80d5 	beq.w	801d71c <RadioIrqProcess+0x1e4>
 801d572:	2b80      	cmp	r3, #128	; 0x80
 801d574:	f300 81da 	bgt.w	801d92c <RadioIrqProcess+0x3f4>
 801d578:	2b20      	cmp	r3, #32
 801d57a:	dc49      	bgt.n	801d610 <RadioIrqProcess+0xd8>
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	f340 81d5 	ble.w	801d92c <RadioIrqProcess+0x3f4>
 801d582:	3b01      	subs	r3, #1
 801d584:	2b1f      	cmp	r3, #31
 801d586:	f200 81d1 	bhi.w	801d92c <RadioIrqProcess+0x3f4>
 801d58a:	a201      	add	r2, pc, #4	; (adr r2, 801d590 <RadioIrqProcess+0x58>)
 801d58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d590:	0801d619 	.word	0x0801d619
 801d594:	0801d653 	.word	0x0801d653
 801d598:	0801d92d 	.word	0x0801d92d
 801d59c:	0801d809 	.word	0x0801d809
 801d5a0:	0801d92d 	.word	0x0801d92d
 801d5a4:	0801d92d 	.word	0x0801d92d
 801d5a8:	0801d92d 	.word	0x0801d92d
 801d5ac:	0801d885 	.word	0x0801d885
 801d5b0:	0801d92d 	.word	0x0801d92d
 801d5b4:	0801d92d 	.word	0x0801d92d
 801d5b8:	0801d92d 	.word	0x0801d92d
 801d5bc:	0801d92d 	.word	0x0801d92d
 801d5c0:	0801d92d 	.word	0x0801d92d
 801d5c4:	0801d92d 	.word	0x0801d92d
 801d5c8:	0801d92d 	.word	0x0801d92d
 801d5cc:	0801d8a1 	.word	0x0801d8a1
 801d5d0:	0801d92d 	.word	0x0801d92d
 801d5d4:	0801d92d 	.word	0x0801d92d
 801d5d8:	0801d92d 	.word	0x0801d92d
 801d5dc:	0801d92d 	.word	0x0801d92d
 801d5e0:	0801d92d 	.word	0x0801d92d
 801d5e4:	0801d92d 	.word	0x0801d92d
 801d5e8:	0801d92d 	.word	0x0801d92d
 801d5ec:	0801d92d 	.word	0x0801d92d
 801d5f0:	0801d92d 	.word	0x0801d92d
 801d5f4:	0801d92d 	.word	0x0801d92d
 801d5f8:	0801d92d 	.word	0x0801d92d
 801d5fc:	0801d92d 	.word	0x0801d92d
 801d600:	0801d92d 	.word	0x0801d92d
 801d604:	0801d92d 	.word	0x0801d92d
 801d608:	0801d92d 	.word	0x0801d92d
 801d60c:	0801d8af 	.word	0x0801d8af
 801d610:	2b40      	cmp	r3, #64	; 0x40
 801d612:	f000 816d 	beq.w	801d8f0 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801d616:	e189      	b.n	801d92c <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801d618:	4874      	ldr	r0, [pc, #464]	; (801d7ec <RadioIrqProcess+0x2b4>)
 801d61a:	f002 ff8b 	bl	8020534 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801d61e:	2000      	movs	r0, #0
 801d620:	f000 fff8 	bl	801e614 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801d624:	f002 f85a 	bl	801f6dc <RFW_Is_LongPacketModeEnabled>
 801d628:	4603      	mov	r3, r0
 801d62a:	2b01      	cmp	r3, #1
 801d62c:	d101      	bne.n	801d632 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801d62e:	f002 f87e 	bl	801f72e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801d632:	4b6f      	ldr	r3, [pc, #444]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d634:	681b      	ldr	r3, [r3, #0]
 801d636:	2b00      	cmp	r3, #0
 801d638:	f000 817a 	beq.w	801d930 <RadioIrqProcess+0x3f8>
 801d63c:	4b6c      	ldr	r3, [pc, #432]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d63e:	681b      	ldr	r3, [r3, #0]
 801d640:	681b      	ldr	r3, [r3, #0]
 801d642:	2b00      	cmp	r3, #0
 801d644:	f000 8174 	beq.w	801d930 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801d648:	4b69      	ldr	r3, [pc, #420]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d64a:	681b      	ldr	r3, [r3, #0]
 801d64c:	681b      	ldr	r3, [r3, #0]
 801d64e:	4798      	blx	r3
        break;
 801d650:	e16e      	b.n	801d930 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801d652:	4868      	ldr	r0, [pc, #416]	; (801d7f4 <RadioIrqProcess+0x2bc>)
 801d654:	f002 ff6e 	bl	8020534 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801d658:	4b63      	ldr	r3, [pc, #396]	; (801d7e8 <RadioIrqProcess+0x2b0>)
 801d65a:	785b      	ldrb	r3, [r3, #1]
 801d65c:	f083 0301 	eor.w	r3, r3, #1
 801d660:	b2db      	uxtb	r3, r3
 801d662:	2b00      	cmp	r3, #0
 801d664:	d014      	beq.n	801d690 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801d666:	2000      	movs	r0, #0
 801d668:	f000 ffd4 	bl	801e614 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801d66c:	2100      	movs	r1, #0
 801d66e:	f640 1002 	movw	r0, #2306	; 0x902
 801d672:	f001 fd4f 	bl	801f114 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801d676:	f640 1044 	movw	r0, #2372	; 0x944
 801d67a:	f001 fd5f 	bl	801f13c <SUBGRF_ReadRegister>
 801d67e:	4603      	mov	r3, r0
 801d680:	f043 0302 	orr.w	r3, r3, #2
 801d684:	b2db      	uxtb	r3, r3
 801d686:	4619      	mov	r1, r3
 801d688:	f640 1044 	movw	r0, #2372	; 0x944
 801d68c:	f001 fd42 	bl	801f114 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801d690:	1dfb      	adds	r3, r7, #7
 801d692:	22ff      	movs	r2, #255	; 0xff
 801d694:	4619      	mov	r1, r3
 801d696:	4858      	ldr	r0, [pc, #352]	; (801d7f8 <RadioIrqProcess+0x2c0>)
 801d698:	f000 fe8c 	bl	801e3b4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801d69c:	4857      	ldr	r0, [pc, #348]	; (801d7fc <RadioIrqProcess+0x2c4>)
 801d69e:	f001 fce7 	bl	801f070 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801d6a2:	4b53      	ldr	r3, [pc, #332]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d6a4:	681b      	ldr	r3, [r3, #0]
 801d6a6:	2b00      	cmp	r3, #0
 801d6a8:	d036      	beq.n	801d718 <RadioIrqProcess+0x1e0>
 801d6aa:	4b51      	ldr	r3, [pc, #324]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d6ac:	681b      	ldr	r3, [r3, #0]
 801d6ae:	689b      	ldr	r3, [r3, #8]
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	d031      	beq.n	801d718 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 801d6b4:	4b4c      	ldr	r3, [pc, #304]	; (801d7e8 <RadioIrqProcess+0x2b0>)
 801d6b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801d6ba:	2b01      	cmp	r3, #1
 801d6bc:	d10e      	bne.n	801d6dc <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801d6be:	4b4c      	ldr	r3, [pc, #304]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d6c0:	681b      	ldr	r3, [r3, #0]
 801d6c2:	689c      	ldr	r4, [r3, #8]
 801d6c4:	79fb      	ldrb	r3, [r7, #7]
 801d6c6:	b299      	uxth	r1, r3
 801d6c8:	4b47      	ldr	r3, [pc, #284]	; (801d7e8 <RadioIrqProcess+0x2b0>)
 801d6ca:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801d6ce:	b21a      	sxth	r2, r3
 801d6d0:	4b45      	ldr	r3, [pc, #276]	; (801d7e8 <RadioIrqProcess+0x2b0>)
 801d6d2:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801d6d6:	4848      	ldr	r0, [pc, #288]	; (801d7f8 <RadioIrqProcess+0x2c0>)
 801d6d8:	47a0      	blx	r4
                break;
 801d6da:	e01e      	b.n	801d71a <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801d6dc:	4b42      	ldr	r3, [pc, #264]	; (801d7e8 <RadioIrqProcess+0x2b0>)
 801d6de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d6e0:	463a      	mov	r2, r7
 801d6e2:	4611      	mov	r1, r2
 801d6e4:	4618      	mov	r0, r3
 801d6e6:	f001 ff47 	bl	801f578 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801d6ea:	4b41      	ldr	r3, [pc, #260]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d6ec:	681b      	ldr	r3, [r3, #0]
 801d6ee:	689c      	ldr	r4, [r3, #8]
 801d6f0:	79fb      	ldrb	r3, [r7, #7]
 801d6f2:	b299      	uxth	r1, r3
 801d6f4:	4b3c      	ldr	r3, [pc, #240]	; (801d7e8 <RadioIrqProcess+0x2b0>)
 801d6f6:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801d6fa:	b218      	sxth	r0, r3
 801d6fc:	683b      	ldr	r3, [r7, #0]
 801d6fe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801d702:	4a3f      	ldr	r2, [pc, #252]	; (801d800 <RadioIrqProcess+0x2c8>)
 801d704:	fb82 c203 	smull	ip, r2, r2, r3
 801d708:	1192      	asrs	r2, r2, #6
 801d70a:	17db      	asrs	r3, r3, #31
 801d70c:	1ad3      	subs	r3, r2, r3
 801d70e:	b25b      	sxtb	r3, r3
 801d710:	4602      	mov	r2, r0
 801d712:	4839      	ldr	r0, [pc, #228]	; (801d7f8 <RadioIrqProcess+0x2c0>)
 801d714:	47a0      	blx	r4
                break;
 801d716:	e000      	b.n	801d71a <RadioIrqProcess+0x1e2>
        }
 801d718:	bf00      	nop
        break;
 801d71a:	e118      	b.n	801d94e <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 801d71c:	2000      	movs	r0, #0
 801d71e:	f000 ff79 	bl	801e614 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801d722:	4b33      	ldr	r3, [pc, #204]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d724:	681b      	ldr	r3, [r3, #0]
 801d726:	2b00      	cmp	r3, #0
 801d728:	f000 8104 	beq.w	801d934 <RadioIrqProcess+0x3fc>
 801d72c:	4b30      	ldr	r3, [pc, #192]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d72e:	681b      	ldr	r3, [r3, #0]
 801d730:	699b      	ldr	r3, [r3, #24]
 801d732:	2b00      	cmp	r3, #0
 801d734:	f000 80fe 	beq.w	801d934 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 801d738:	4b2d      	ldr	r3, [pc, #180]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d73a:	681b      	ldr	r3, [r3, #0]
 801d73c:	699b      	ldr	r3, [r3, #24]
 801d73e:	2000      	movs	r0, #0
 801d740:	4798      	blx	r3
        break;
 801d742:	e0f7      	b.n	801d934 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801d744:	2000      	movs	r0, #0
 801d746:	f000 ff65 	bl	801e614 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801d74a:	4b29      	ldr	r3, [pc, #164]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	2b00      	cmp	r3, #0
 801d750:	f000 80f2 	beq.w	801d938 <RadioIrqProcess+0x400>
 801d754:	4b26      	ldr	r3, [pc, #152]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d756:	681b      	ldr	r3, [r3, #0]
 801d758:	699b      	ldr	r3, [r3, #24]
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	f000 80ec 	beq.w	801d938 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 801d760:	4b23      	ldr	r3, [pc, #140]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d762:	681b      	ldr	r3, [r3, #0]
 801d764:	699b      	ldr	r3, [r3, #24]
 801d766:	2001      	movs	r0, #1
 801d768:	4798      	blx	r3
        break;
 801d76a:	e0e5      	b.n	801d938 <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801d76c:	4b25      	ldr	r3, [pc, #148]	; (801d804 <RadioIrqProcess+0x2cc>)
 801d76e:	2201      	movs	r2, #1
 801d770:	2100      	movs	r1, #0
 801d772:	2002      	movs	r0, #2
 801d774:	f003 f8e8 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801d778:	f000 fe02 	bl	801e380 <SUBGRF_GetOperatingMode>
 801d77c:	4603      	mov	r3, r0
 801d77e:	2b04      	cmp	r3, #4
 801d780:	d115      	bne.n	801d7ae <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 801d782:	481a      	ldr	r0, [pc, #104]	; (801d7ec <RadioIrqProcess+0x2b4>)
 801d784:	f002 fed6 	bl	8020534 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801d788:	2000      	movs	r0, #0
 801d78a:	f000 ff43 	bl	801e614 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801d78e:	4b18      	ldr	r3, [pc, #96]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d790:	681b      	ldr	r3, [r3, #0]
 801d792:	2b00      	cmp	r3, #0
 801d794:	f000 80d2 	beq.w	801d93c <RadioIrqProcess+0x404>
 801d798:	4b15      	ldr	r3, [pc, #84]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d79a:	681b      	ldr	r3, [r3, #0]
 801d79c:	685b      	ldr	r3, [r3, #4]
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	f000 80cc 	beq.w	801d93c <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 801d7a4:	4b12      	ldr	r3, [pc, #72]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d7a6:	681b      	ldr	r3, [r3, #0]
 801d7a8:	685b      	ldr	r3, [r3, #4]
 801d7aa:	4798      	blx	r3
        break;
 801d7ac:	e0c6      	b.n	801d93c <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801d7ae:	f000 fde7 	bl	801e380 <SUBGRF_GetOperatingMode>
 801d7b2:	4603      	mov	r3, r0
 801d7b4:	2b05      	cmp	r3, #5
 801d7b6:	f040 80c1 	bne.w	801d93c <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 801d7ba:	480e      	ldr	r0, [pc, #56]	; (801d7f4 <RadioIrqProcess+0x2bc>)
 801d7bc:	f002 feba 	bl	8020534 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801d7c0:	2000      	movs	r0, #0
 801d7c2:	f000 ff27 	bl	801e614 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801d7c6:	4b0a      	ldr	r3, [pc, #40]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d7c8:	681b      	ldr	r3, [r3, #0]
 801d7ca:	2b00      	cmp	r3, #0
 801d7cc:	f000 80b6 	beq.w	801d93c <RadioIrqProcess+0x404>
 801d7d0:	4b07      	ldr	r3, [pc, #28]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d7d2:	681b      	ldr	r3, [r3, #0]
 801d7d4:	68db      	ldr	r3, [r3, #12]
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	f000 80b0 	beq.w	801d93c <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 801d7dc:	4b04      	ldr	r3, [pc, #16]	; (801d7f0 <RadioIrqProcess+0x2b8>)
 801d7de:	681b      	ldr	r3, [r3, #0]
 801d7e0:	68db      	ldr	r3, [r3, #12]
 801d7e2:	4798      	blx	r3
        break;
 801d7e4:	e0aa      	b.n	801d93c <RadioIrqProcess+0x404>
 801d7e6:	bf00      	nop
 801d7e8:	200024ac 	.word	0x200024ac
 801d7ec:	20002508 	.word	0x20002508
 801d7f0:	200024a8 	.word	0x200024a8
 801d7f4:	20002520 	.word	0x20002520
 801d7f8:	200023a8 	.word	0x200023a8
 801d7fc:	200024d0 	.word	0x200024d0
 801d800:	10624dd3 	.word	0x10624dd3
 801d804:	080218d0 	.word	0x080218d0
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801d808:	4b53      	ldr	r3, [pc, #332]	; (801d958 <RadioIrqProcess+0x420>)
 801d80a:	2201      	movs	r2, #1
 801d80c:	2100      	movs	r1, #0
 801d80e:	2002      	movs	r0, #2
 801d810:	f003 f89a 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801d814:	4b51      	ldr	r3, [pc, #324]	; (801d95c <RadioIrqProcess+0x424>)
 801d816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d818:	2b00      	cmp	r3, #0
 801d81a:	f000 8091 	beq.w	801d940 <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 801d81e:	4a50      	ldr	r2, [pc, #320]	; (801d960 <RadioIrqProcess+0x428>)
 801d820:	4b4e      	ldr	r3, [pc, #312]	; (801d95c <RadioIrqProcess+0x424>)
 801d822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d824:	0c1b      	lsrs	r3, r3, #16
 801d826:	b2db      	uxtb	r3, r3
 801d828:	4619      	mov	r1, r3
 801d82a:	f640 1003 	movw	r0, #2307	; 0x903
 801d82e:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 801d830:	4a4b      	ldr	r2, [pc, #300]	; (801d960 <RadioIrqProcess+0x428>)
 801d832:	4b4a      	ldr	r3, [pc, #296]	; (801d95c <RadioIrqProcess+0x424>)
 801d834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d836:	0a1b      	lsrs	r3, r3, #8
 801d838:	b2db      	uxtb	r3, r3
 801d83a:	4619      	mov	r1, r3
 801d83c:	f640 1004 	movw	r0, #2308	; 0x904
 801d840:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 801d842:	4a47      	ldr	r2, [pc, #284]	; (801d960 <RadioIrqProcess+0x428>)
 801d844:	4b45      	ldr	r3, [pc, #276]	; (801d95c <RadioIrqProcess+0x424>)
 801d846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d848:	b2db      	uxtb	r3, r3
 801d84a:	4619      	mov	r1, r3
 801d84c:	f640 1005 	movw	r0, #2309	; 0x905
 801d850:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 801d852:	4c43      	ldr	r4, [pc, #268]	; (801d960 <RadioIrqProcess+0x428>)
 801d854:	4b43      	ldr	r3, [pc, #268]	; (801d964 <RadioIrqProcess+0x42c>)
 801d856:	f640 1002 	movw	r0, #2306	; 0x902
 801d85a:	4798      	blx	r3
 801d85c:	4603      	mov	r3, r0
 801d85e:	f043 0301 	orr.w	r3, r3, #1
 801d862:	b2db      	uxtb	r3, r3
 801d864:	4619      	mov	r1, r3
 801d866:	f640 1002 	movw	r0, #2306	; 0x902
 801d86a:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 801d86c:	4b3b      	ldr	r3, [pc, #236]	; (801d95c <RadioIrqProcess+0x424>)
 801d86e:	2200      	movs	r2, #0
 801d870:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801d872:	2300      	movs	r3, #0
 801d874:	2200      	movs	r2, #0
 801d876:	f240 2162 	movw	r1, #610	; 0x262
 801d87a:	f240 2062 	movw	r0, #610	; 0x262
 801d87e:	f001 f899 	bl	801e9b4 <SUBGRF_SetDioIrqParams>
        break;
 801d882:	e05d      	b.n	801d940 <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801d884:	4b38      	ldr	r3, [pc, #224]	; (801d968 <RadioIrqProcess+0x430>)
 801d886:	2201      	movs	r2, #1
 801d888:	2100      	movs	r1, #0
 801d88a:	2002      	movs	r0, #2
 801d88c:	f003 f85c 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801d890:	f001 ff1d 	bl	801f6ce <RFW_Is_Init>
 801d894:	4603      	mov	r3, r0
 801d896:	2b01      	cmp	r3, #1
 801d898:	d154      	bne.n	801d944 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 801d89a:	f001 ff4e 	bl	801f73a <RFW_ReceivePayload>
        break;
 801d89e:	e051      	b.n	801d944 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801d8a0:	4b32      	ldr	r3, [pc, #200]	; (801d96c <RadioIrqProcess+0x434>)
 801d8a2:	2201      	movs	r2, #1
 801d8a4:	2100      	movs	r1, #0
 801d8a6:	2002      	movs	r0, #2
 801d8a8:	f003 f84e 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801d8ac:	e04f      	b.n	801d94e <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 801d8ae:	4830      	ldr	r0, [pc, #192]	; (801d970 <RadioIrqProcess+0x438>)
 801d8b0:	f002 fe40 	bl	8020534 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801d8b4:	4b29      	ldr	r3, [pc, #164]	; (801d95c <RadioIrqProcess+0x424>)
 801d8b6:	785b      	ldrb	r3, [r3, #1]
 801d8b8:	f083 0301 	eor.w	r3, r3, #1
 801d8bc:	b2db      	uxtb	r3, r3
 801d8be:	2b00      	cmp	r3, #0
 801d8c0:	d002      	beq.n	801d8c8 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801d8c2:	2000      	movs	r0, #0
 801d8c4:	f000 fea6 	bl	801e614 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801d8c8:	4b2a      	ldr	r3, [pc, #168]	; (801d974 <RadioIrqProcess+0x43c>)
 801d8ca:	681b      	ldr	r3, [r3, #0]
 801d8cc:	2b00      	cmp	r3, #0
 801d8ce:	d03b      	beq.n	801d948 <RadioIrqProcess+0x410>
 801d8d0:	4b28      	ldr	r3, [pc, #160]	; (801d974 <RadioIrqProcess+0x43c>)
 801d8d2:	681b      	ldr	r3, [r3, #0]
 801d8d4:	68db      	ldr	r3, [r3, #12]
 801d8d6:	2b00      	cmp	r3, #0
 801d8d8:	d036      	beq.n	801d948 <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 801d8da:	4b26      	ldr	r3, [pc, #152]	; (801d974 <RadioIrqProcess+0x43c>)
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	68db      	ldr	r3, [r3, #12]
 801d8e0:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801d8e2:	4b25      	ldr	r3, [pc, #148]	; (801d978 <RadioIrqProcess+0x440>)
 801d8e4:	2201      	movs	r2, #1
 801d8e6:	2100      	movs	r1, #0
 801d8e8:	2002      	movs	r0, #2
 801d8ea:	f003 f82d 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801d8ee:	e02b      	b.n	801d948 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801d8f0:	4b22      	ldr	r3, [pc, #136]	; (801d97c <RadioIrqProcess+0x444>)
 801d8f2:	2201      	movs	r2, #1
 801d8f4:	2100      	movs	r1, #0
 801d8f6:	2002      	movs	r0, #2
 801d8f8:	f003 f826 	bl	8020948 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801d8fc:	4b17      	ldr	r3, [pc, #92]	; (801d95c <RadioIrqProcess+0x424>)
 801d8fe:	785b      	ldrb	r3, [r3, #1]
 801d900:	f083 0301 	eor.w	r3, r3, #1
 801d904:	b2db      	uxtb	r3, r3
 801d906:	2b00      	cmp	r3, #0
 801d908:	d002      	beq.n	801d910 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801d90a:	2000      	movs	r0, #0
 801d90c:	f000 fe82 	bl	801e614 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801d910:	4b18      	ldr	r3, [pc, #96]	; (801d974 <RadioIrqProcess+0x43c>)
 801d912:	681b      	ldr	r3, [r3, #0]
 801d914:	2b00      	cmp	r3, #0
 801d916:	d019      	beq.n	801d94c <RadioIrqProcess+0x414>
 801d918:	4b16      	ldr	r3, [pc, #88]	; (801d974 <RadioIrqProcess+0x43c>)
 801d91a:	681b      	ldr	r3, [r3, #0]
 801d91c:	691b      	ldr	r3, [r3, #16]
 801d91e:	2b00      	cmp	r3, #0
 801d920:	d014      	beq.n	801d94c <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 801d922:	4b14      	ldr	r3, [pc, #80]	; (801d974 <RadioIrqProcess+0x43c>)
 801d924:	681b      	ldr	r3, [r3, #0]
 801d926:	691b      	ldr	r3, [r3, #16]
 801d928:	4798      	blx	r3
        break;
 801d92a:	e00f      	b.n	801d94c <RadioIrqProcess+0x414>
        break;
 801d92c:	bf00      	nop
 801d92e:	e00e      	b.n	801d94e <RadioIrqProcess+0x416>
        break;
 801d930:	bf00      	nop
 801d932:	e00c      	b.n	801d94e <RadioIrqProcess+0x416>
        break;
 801d934:	bf00      	nop
 801d936:	e00a      	b.n	801d94e <RadioIrqProcess+0x416>
        break;
 801d938:	bf00      	nop
 801d93a:	e008      	b.n	801d94e <RadioIrqProcess+0x416>
        break;
 801d93c:	bf00      	nop
 801d93e:	e006      	b.n	801d94e <RadioIrqProcess+0x416>
        break;
 801d940:	bf00      	nop
 801d942:	e004      	b.n	801d94e <RadioIrqProcess+0x416>
        break;
 801d944:	bf00      	nop
 801d946:	e002      	b.n	801d94e <RadioIrqProcess+0x416>
        break;
 801d948:	bf00      	nop
 801d94a:	e000      	b.n	801d94e <RadioIrqProcess+0x416>
        break;
 801d94c:	bf00      	nop
    }
}
 801d94e:	bf00      	nop
 801d950:	370c      	adds	r7, #12
 801d952:	46bd      	mov	sp, r7
 801d954:	bd90      	pop	{r4, r7, pc}
 801d956:	bf00      	nop
 801d958:	080218e4 	.word	0x080218e4
 801d95c:	200024ac 	.word	0x200024ac
 801d960:	0801d347 	.word	0x0801d347
 801d964:	0801d36b 	.word	0x0801d36b
 801d968:	080218f0 	.word	0x080218f0
 801d96c:	080218fc 	.word	0x080218fc
 801d970:	20002520 	.word	0x20002520
 801d974:	200024a8 	.word	0x200024a8
 801d978:	08021908 	.word	0x08021908
 801d97c:	08021914 	.word	0x08021914

0801d980 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801d980:	b580      	push	{r7, lr}
 801d982:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801d984:	4b09      	ldr	r3, [pc, #36]	; (801d9ac <RadioTxPrbs+0x2c>)
 801d986:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d98a:	2101      	movs	r1, #1
 801d98c:	4618      	mov	r0, r3
 801d98e:	f001 fcb5 	bl	801f2fc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801d992:	4b07      	ldr	r3, [pc, #28]	; (801d9b0 <RadioTxPrbs+0x30>)
 801d994:	212d      	movs	r1, #45	; 0x2d
 801d996:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801d99a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801d99c:	f000 fefd 	bl	801e79a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801d9a0:	4804      	ldr	r0, [pc, #16]	; (801d9b4 <RadioTxPrbs+0x34>)
 801d9a2:	f000 fe53 	bl	801e64c <SUBGRF_SetTx>
}
 801d9a6:	bf00      	nop
 801d9a8:	bd80      	pop	{r7, pc}
 801d9aa:	bf00      	nop
 801d9ac:	200024ac 	.word	0x200024ac
 801d9b0:	0801d347 	.word	0x0801d347
 801d9b4:	000fffff 	.word	0x000fffff

0801d9b8 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801d9b8:	b580      	push	{r7, lr}
 801d9ba:	b084      	sub	sp, #16
 801d9bc:	af00      	add	r7, sp, #0
 801d9be:	4603      	mov	r3, r0
 801d9c0:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801d9c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d9c6:	4618      	mov	r0, r3
 801d9c8:	f001 fcc0 	bl	801f34c <SUBGRF_SetRfTxPower>
 801d9cc:	4603      	mov	r3, r0
 801d9ce:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801d9d0:	7bfb      	ldrb	r3, [r7, #15]
 801d9d2:	2101      	movs	r1, #1
 801d9d4:	4618      	mov	r0, r3
 801d9d6:	f001 fc91 	bl	801f2fc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801d9da:	f000 fed5 	bl	801e788 <SUBGRF_SetTxContinuousWave>
}
 801d9de:	bf00      	nop
 801d9e0:	3710      	adds	r7, #16
 801d9e2:	46bd      	mov	sp, r7
 801d9e4:	bd80      	pop	{r7, pc}

0801d9e6 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801d9e6:	b480      	push	{r7}
 801d9e8:	b089      	sub	sp, #36	; 0x24
 801d9ea:	af00      	add	r7, sp, #0
 801d9ec:	60f8      	str	r0, [r7, #12]
 801d9ee:	60b9      	str	r1, [r7, #8]
 801d9f0:	4613      	mov	r3, r2
 801d9f2:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801d9f4:	2300      	movs	r3, #0
 801d9f6:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801d9f8:	2300      	movs	r3, #0
 801d9fa:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801d9fc:	2300      	movs	r3, #0
 801d9fe:	61bb      	str	r3, [r7, #24]
 801da00:	e011      	b.n	801da26 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801da02:	69bb      	ldr	r3, [r7, #24]
 801da04:	68ba      	ldr	r2, [r7, #8]
 801da06:	4413      	add	r3, r2
 801da08:	781a      	ldrb	r2, [r3, #0]
 801da0a:	69bb      	ldr	r3, [r7, #24]
 801da0c:	68b9      	ldr	r1, [r7, #8]
 801da0e:	440b      	add	r3, r1
 801da10:	43d2      	mvns	r2, r2
 801da12:	b2d2      	uxtb	r2, r2
 801da14:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801da16:	69bb      	ldr	r3, [r7, #24]
 801da18:	68fa      	ldr	r2, [r7, #12]
 801da1a:	4413      	add	r3, r2
 801da1c:	2200      	movs	r2, #0
 801da1e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801da20:	69bb      	ldr	r3, [r7, #24]
 801da22:	3301      	adds	r3, #1
 801da24:	61bb      	str	r3, [r7, #24]
 801da26:	79fb      	ldrb	r3, [r7, #7]
 801da28:	69ba      	ldr	r2, [r7, #24]
 801da2a:	429a      	cmp	r2, r3
 801da2c:	dbe9      	blt.n	801da02 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801da2e:	2300      	movs	r3, #0
 801da30:	61bb      	str	r3, [r7, #24]
 801da32:	e049      	b.n	801dac8 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801da34:	69bb      	ldr	r3, [r7, #24]
 801da36:	425a      	negs	r2, r3
 801da38:	f003 0307 	and.w	r3, r3, #7
 801da3c:	f002 0207 	and.w	r2, r2, #7
 801da40:	bf58      	it	pl
 801da42:	4253      	negpl	r3, r2
 801da44:	b2db      	uxtb	r3, r3
 801da46:	f1c3 0307 	rsb	r3, r3, #7
 801da4a:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801da4c:	69bb      	ldr	r3, [r7, #24]
 801da4e:	2b00      	cmp	r3, #0
 801da50:	da00      	bge.n	801da54 <payload_integration+0x6e>
 801da52:	3307      	adds	r3, #7
 801da54:	10db      	asrs	r3, r3, #3
 801da56:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801da58:	69bb      	ldr	r3, [r7, #24]
 801da5a:	3301      	adds	r3, #1
 801da5c:	425a      	negs	r2, r3
 801da5e:	f003 0307 	and.w	r3, r3, #7
 801da62:	f002 0207 	and.w	r2, r2, #7
 801da66:	bf58      	it	pl
 801da68:	4253      	negpl	r3, r2
 801da6a:	b2db      	uxtb	r3, r3
 801da6c:	f1c3 0307 	rsb	r3, r3, #7
 801da70:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801da72:	69bb      	ldr	r3, [r7, #24]
 801da74:	3301      	adds	r3, #1
 801da76:	2b00      	cmp	r3, #0
 801da78:	da00      	bge.n	801da7c <payload_integration+0x96>
 801da7a:	3307      	adds	r3, #7
 801da7c:	10db      	asrs	r3, r3, #3
 801da7e:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801da80:	7dbb      	ldrb	r3, [r7, #22]
 801da82:	68ba      	ldr	r2, [r7, #8]
 801da84:	4413      	add	r3, r2
 801da86:	781b      	ldrb	r3, [r3, #0]
 801da88:	461a      	mov	r2, r3
 801da8a:	7dfb      	ldrb	r3, [r7, #23]
 801da8c:	fa42 f303 	asr.w	r3, r2, r3
 801da90:	b2db      	uxtb	r3, r3
 801da92:	f003 0301 	and.w	r3, r3, #1
 801da96:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801da98:	7ffa      	ldrb	r2, [r7, #31]
 801da9a:	7cfb      	ldrb	r3, [r7, #19]
 801da9c:	4053      	eors	r3, r2
 801da9e:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801daa0:	7d3b      	ldrb	r3, [r7, #20]
 801daa2:	68fa      	ldr	r2, [r7, #12]
 801daa4:	4413      	add	r3, r2
 801daa6:	781b      	ldrb	r3, [r3, #0]
 801daa8:	b25a      	sxtb	r2, r3
 801daaa:	7ff9      	ldrb	r1, [r7, #31]
 801daac:	7d7b      	ldrb	r3, [r7, #21]
 801daae:	fa01 f303 	lsl.w	r3, r1, r3
 801dab2:	b25b      	sxtb	r3, r3
 801dab4:	4313      	orrs	r3, r2
 801dab6:	b259      	sxtb	r1, r3
 801dab8:	7d3b      	ldrb	r3, [r7, #20]
 801daba:	68fa      	ldr	r2, [r7, #12]
 801dabc:	4413      	add	r3, r2
 801dabe:	b2ca      	uxtb	r2, r1
 801dac0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801dac2:	69bb      	ldr	r3, [r7, #24]
 801dac4:	3301      	adds	r3, #1
 801dac6:	61bb      	str	r3, [r7, #24]
 801dac8:	79fb      	ldrb	r3, [r7, #7]
 801daca:	00db      	lsls	r3, r3, #3
 801dacc:	69ba      	ldr	r2, [r7, #24]
 801dace:	429a      	cmp	r2, r3
 801dad0:	dbb0      	blt.n	801da34 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801dad2:	7ffb      	ldrb	r3, [r7, #31]
 801dad4:	01db      	lsls	r3, r3, #7
 801dad6:	b25a      	sxtb	r2, r3
 801dad8:	7ffb      	ldrb	r3, [r7, #31]
 801dada:	019b      	lsls	r3, r3, #6
 801dadc:	b25b      	sxtb	r3, r3
 801dade:	4313      	orrs	r3, r2
 801dae0:	b25b      	sxtb	r3, r3
 801dae2:	7ffa      	ldrb	r2, [r7, #31]
 801dae4:	2a00      	cmp	r2, #0
 801dae6:	d101      	bne.n	801daec <payload_integration+0x106>
 801dae8:	2220      	movs	r2, #32
 801daea:	e000      	b.n	801daee <payload_integration+0x108>
 801daec:	2200      	movs	r2, #0
 801daee:	4313      	orrs	r3, r2
 801daf0:	b259      	sxtb	r1, r3
 801daf2:	79fb      	ldrb	r3, [r7, #7]
 801daf4:	68fa      	ldr	r2, [r7, #12]
 801daf6:	4413      	add	r3, r2
 801daf8:	b2ca      	uxtb	r2, r1
 801dafa:	701a      	strb	r2, [r3, #0]
}
 801dafc:	bf00      	nop
 801dafe:	3724      	adds	r7, #36	; 0x24
 801db00:	46bd      	mov	sp, r7
 801db02:	bc80      	pop	{r7}
 801db04:	4770      	bx	lr
	...

0801db08 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 801db08:	b580      	push	{r7, lr}
 801db0a:	b08c      	sub	sp, #48	; 0x30
 801db0c:	af00      	add	r7, sp, #0
 801db0e:	60b9      	str	r1, [r7, #8]
 801db10:	607a      	str	r2, [r7, #4]
 801db12:	603b      	str	r3, [r7, #0]
 801db14:	4603      	mov	r3, r0
 801db16:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801db18:	2300      	movs	r3, #0
 801db1a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801db1c:	2300      	movs	r3, #0
 801db1e:	623b      	str	r3, [r7, #32]
 801db20:	2300      	movs	r3, #0
 801db22:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801db24:	f001 fdcd 	bl	801f6c2 <RFW_DeInit>

    if( rxContinuous != 0 )
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	2b00      	cmp	r3, #0
 801db2c:	d001      	beq.n	801db32 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801db2e:	2300      	movs	r3, #0
 801db30:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801db32:	687b      	ldr	r3, [r7, #4]
 801db34:	2b00      	cmp	r3, #0
 801db36:	bf14      	ite	ne
 801db38:	2301      	movne	r3, #1
 801db3a:	2300      	moveq	r3, #0
 801db3c:	b2da      	uxtb	r2, r3
 801db3e:	4ba3      	ldr	r3, [pc, #652]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801db40:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801db42:	7bfb      	ldrb	r3, [r7, #15]
 801db44:	2b00      	cmp	r3, #0
 801db46:	d003      	beq.n	801db50 <RadioSetRxGenericConfig+0x48>
 801db48:	2b01      	cmp	r3, #1
 801db4a:	f000 80dc 	beq.w	801dd06 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801db4e:	e194      	b.n	801de7a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801db50:	68bb      	ldr	r3, [r7, #8]
 801db52:	689b      	ldr	r3, [r3, #8]
 801db54:	2b00      	cmp	r3, #0
 801db56:	d003      	beq.n	801db60 <RadioSetRxGenericConfig+0x58>
 801db58:	68bb      	ldr	r3, [r7, #8]
 801db5a:	68db      	ldr	r3, [r3, #12]
 801db5c:	2b00      	cmp	r3, #0
 801db5e:	d102      	bne.n	801db66 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801db60:	f04f 33ff 	mov.w	r3, #4294967295
 801db64:	e18a      	b.n	801de7c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801db66:	68bb      	ldr	r3, [r7, #8]
 801db68:	7f9b      	ldrb	r3, [r3, #30]
 801db6a:	2b08      	cmp	r3, #8
 801db6c:	d902      	bls.n	801db74 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801db6e:	f04f 33ff 	mov.w	r3, #4294967295
 801db72:	e183      	b.n	801de7c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801db74:	68bb      	ldr	r3, [r7, #8]
 801db76:	6919      	ldr	r1, [r3, #16]
 801db78:	68bb      	ldr	r3, [r7, #8]
 801db7a:	7f9b      	ldrb	r3, [r3, #30]
 801db7c:	b29a      	uxth	r2, r3
 801db7e:	f107 0320 	add.w	r3, r7, #32
 801db82:	4618      	mov	r0, r3
 801db84:	f001 fe90 	bl	801f8a8 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801db88:	68bb      	ldr	r3, [r7, #8]
 801db8a:	681b      	ldr	r3, [r3, #0]
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	bf14      	ite	ne
 801db90:	2301      	movne	r3, #1
 801db92:	2300      	moveq	r3, #0
 801db94:	b2db      	uxtb	r3, r3
 801db96:	4618      	mov	r0, r3
 801db98:	f000 fe08 	bl	801e7ac <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801db9c:	4b8b      	ldr	r3, [pc, #556]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801db9e:	2200      	movs	r2, #0
 801dba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801dba4:	68bb      	ldr	r3, [r7, #8]
 801dba6:	689b      	ldr	r3, [r3, #8]
 801dba8:	4a88      	ldr	r2, [pc, #544]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dbaa:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801dbac:	68bb      	ldr	r3, [r7, #8]
 801dbae:	f893 2020 	ldrb.w	r2, [r3, #32]
 801dbb2:	4b86      	ldr	r3, [pc, #536]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dbb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801dbb8:	68bb      	ldr	r3, [r7, #8]
 801dbba:	685b      	ldr	r3, [r3, #4]
 801dbbc:	4618      	mov	r0, r3
 801dbbe:	f001 fcb3 	bl	801f528 <SUBGRF_GetFskBandwidthRegValue>
 801dbc2:	4603      	mov	r3, r0
 801dbc4:	461a      	mov	r2, r3
 801dbc6:	4b81      	ldr	r3, [pc, #516]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dbc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801dbcc:	4b7f      	ldr	r3, [pc, #508]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dbce:	2200      	movs	r2, #0
 801dbd0:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801dbd2:	68bb      	ldr	r3, [r7, #8]
 801dbd4:	68db      	ldr	r3, [r3, #12]
 801dbd6:	b29b      	uxth	r3, r3
 801dbd8:	00db      	lsls	r3, r3, #3
 801dbda:	b29a      	uxth	r2, r3
 801dbdc:	4b7b      	ldr	r3, [pc, #492]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dbde:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801dbe0:	68bb      	ldr	r3, [r7, #8]
 801dbe2:	7fda      	ldrb	r2, [r3, #31]
 801dbe4:	4b79      	ldr	r3, [pc, #484]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dbe6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801dbe8:	68bb      	ldr	r3, [r7, #8]
 801dbea:	7f9b      	ldrb	r3, [r3, #30]
 801dbec:	00db      	lsls	r3, r3, #3
 801dbee:	b2da      	uxtb	r2, r3
 801dbf0:	4b76      	ldr	r3, [pc, #472]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dbf2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801dbf4:	68bb      	ldr	r3, [r7, #8]
 801dbf6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801dbfa:	4b74      	ldr	r3, [pc, #464]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dbfc:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801dbfe:	68bb      	ldr	r3, [r7, #8]
 801dc00:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	d105      	bne.n	801dc14 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801dc08:	68bb      	ldr	r3, [r7, #8]
 801dc0a:	695b      	ldr	r3, [r3, #20]
 801dc0c:	b2da      	uxtb	r2, r3
 801dc0e:	4b6f      	ldr	r3, [pc, #444]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dc10:	759a      	strb	r2, [r3, #22]
 801dc12:	e00b      	b.n	801dc2c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801dc14:	68bb      	ldr	r3, [r7, #8]
 801dc16:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801dc1a:	2b02      	cmp	r3, #2
 801dc1c:	d103      	bne.n	801dc26 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801dc1e:	4b6b      	ldr	r3, [pc, #428]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dc20:	22ff      	movs	r2, #255	; 0xff
 801dc22:	759a      	strb	r2, [r3, #22]
 801dc24:	e002      	b.n	801dc2c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801dc26:	4b69      	ldr	r3, [pc, #420]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dc28:	22ff      	movs	r2, #255	; 0xff
 801dc2a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801dc2c:	68bb      	ldr	r3, [r7, #8]
 801dc2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801dc32:	2b02      	cmp	r3, #2
 801dc34:	d004      	beq.n	801dc40 <RadioSetRxGenericConfig+0x138>
 801dc36:	68bb      	ldr	r3, [r7, #8]
 801dc38:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801dc3c:	2b02      	cmp	r3, #2
 801dc3e:	d12d      	bne.n	801dc9c <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801dc40:	68bb      	ldr	r3, [r7, #8]
 801dc42:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801dc46:	2bf1      	cmp	r3, #241	; 0xf1
 801dc48:	d00c      	beq.n	801dc64 <RadioSetRxGenericConfig+0x15c>
 801dc4a:	68bb      	ldr	r3, [r7, #8]
 801dc4c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801dc50:	2bf2      	cmp	r3, #242	; 0xf2
 801dc52:	d007      	beq.n	801dc64 <RadioSetRxGenericConfig+0x15c>
 801dc54:	68bb      	ldr	r3, [r7, #8]
 801dc56:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801dc5a:	2b01      	cmp	r3, #1
 801dc5c:	d002      	beq.n	801dc64 <RadioSetRxGenericConfig+0x15c>
            return -1;
 801dc5e:	f04f 33ff 	mov.w	r3, #4294967295
 801dc62:	e10b      	b.n	801de7c <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 801dc64:	2300      	movs	r3, #0
 801dc66:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 801dc68:	68bb      	ldr	r3, [r7, #8]
 801dc6a:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801dc6c:	4b58      	ldr	r3, [pc, #352]	; (801ddd0 <RadioSetRxGenericConfig+0x2c8>)
 801dc6e:	6819      	ldr	r1, [r3, #0]
 801dc70:	f107 0314 	add.w	r3, r7, #20
 801dc74:	4a57      	ldr	r2, [pc, #348]	; (801ddd4 <RadioSetRxGenericConfig+0x2cc>)
 801dc76:	4618      	mov	r0, r3
 801dc78:	f001 fd16 	bl	801f6a8 <RFW_Init>
 801dc7c:	4603      	mov	r3, r0
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	d002      	beq.n	801dc88 <RadioSetRxGenericConfig+0x180>
            return -1;
 801dc82:	f04f 33ff 	mov.w	r3, #4294967295
 801dc86:	e0f9      	b.n	801de7c <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801dc88:	4b50      	ldr	r3, [pc, #320]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dc8a:	2200      	movs	r2, #0
 801dc8c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801dc8e:	4b4f      	ldr	r3, [pc, #316]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dc90:	2201      	movs	r2, #1
 801dc92:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801dc94:	4b4d      	ldr	r3, [pc, #308]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dc96:	2200      	movs	r2, #0
 801dc98:	755a      	strb	r2, [r3, #21]
        {
 801dc9a:	e00e      	b.n	801dcba <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801dc9c:	68bb      	ldr	r3, [r7, #8]
 801dc9e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801dca2:	4b4a      	ldr	r3, [pc, #296]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dca4:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801dca6:	68bb      	ldr	r3, [r7, #8]
 801dca8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801dcac:	4b47      	ldr	r3, [pc, #284]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dcae:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801dcb0:	68bb      	ldr	r3, [r7, #8]
 801dcb2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801dcb6:	4b45      	ldr	r3, [pc, #276]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dcb8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801dcba:	f7ff fa48 	bl	801d14e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801dcbe:	2000      	movs	r0, #0
 801dcc0:	f7fe fbf2 	bl	801c4a8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801dcc4:	4844      	ldr	r0, [pc, #272]	; (801ddd8 <RadioSetRxGenericConfig+0x2d0>)
 801dcc6:	f001 f80b 	bl	801ece0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801dcca:	4844      	ldr	r0, [pc, #272]	; (801dddc <RadioSetRxGenericConfig+0x2d4>)
 801dccc:	f001 f8da 	bl	801ee84 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801dcd0:	f107 0320 	add.w	r3, r7, #32
 801dcd4:	4618      	mov	r0, r3
 801dcd6:	f000 fba2 	bl	801e41e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801dcda:	68bb      	ldr	r3, [r7, #8]
 801dcdc:	8b9b      	ldrh	r3, [r3, #28]
 801dcde:	4618      	mov	r0, r3
 801dce0:	f000 fbec 	bl	801e4bc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801dce4:	68bb      	ldr	r3, [r7, #8]
 801dce6:	8b1b      	ldrh	r3, [r3, #24]
 801dce8:	4618      	mov	r0, r3
 801dcea:	f000 fbc7 	bl	801e47c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801dcee:	683b      	ldr	r3, [r7, #0]
 801dcf0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801dcf4:	fb03 f202 	mul.w	r2, r3, r2
 801dcf8:	68bb      	ldr	r3, [r7, #8]
 801dcfa:	689b      	ldr	r3, [r3, #8]
 801dcfc:	fbb2 f3f3 	udiv	r3, r2, r3
 801dd00:	4a32      	ldr	r2, [pc, #200]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dd02:	6093      	str	r3, [r2, #8]
        break;
 801dd04:	e0b9      	b.n	801de7a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801dd06:	68bb      	ldr	r3, [r7, #8]
 801dd08:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801dd0a:	2b00      	cmp	r3, #0
 801dd0c:	d102      	bne.n	801dd14 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801dd0e:	f04f 33ff 	mov.w	r3, #4294967295
 801dd12:	e0b3      	b.n	801de7c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801dd14:	68bb      	ldr	r3, [r7, #8]
 801dd16:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801dd1a:	2b01      	cmp	r3, #1
 801dd1c:	d104      	bne.n	801dd28 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801dd1e:	68bb      	ldr	r3, [r7, #8]
 801dd20:	695b      	ldr	r3, [r3, #20]
 801dd22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801dd26:	e002      	b.n	801dd2e <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801dd28:	23ff      	movs	r3, #255	; 0xff
 801dd2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801dd2e:	68bb      	ldr	r3, [r7, #8]
 801dd30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd32:	2b00      	cmp	r3, #0
 801dd34:	bf14      	ite	ne
 801dd36:	2301      	movne	r3, #1
 801dd38:	2300      	moveq	r3, #0
 801dd3a:	b2db      	uxtb	r3, r3
 801dd3c:	4618      	mov	r0, r3
 801dd3e:	f000 fd35 	bl	801e7ac <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801dd42:	683b      	ldr	r3, [r7, #0]
 801dd44:	b2db      	uxtb	r3, r3
 801dd46:	4618      	mov	r0, r3
 801dd48:	f000 fd3f 	bl	801e7ca <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801dd4c:	4b1f      	ldr	r3, [pc, #124]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dd4e:	2201      	movs	r2, #1
 801dd50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801dd54:	68bb      	ldr	r3, [r7, #8]
 801dd56:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801dd5a:	4b1c      	ldr	r3, [pc, #112]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dd5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801dd60:	68bb      	ldr	r3, [r7, #8]
 801dd62:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801dd66:	4b19      	ldr	r3, [pc, #100]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dd68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801dd6c:	68bb      	ldr	r3, [r7, #8]
 801dd6e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801dd72:	4b16      	ldr	r3, [pc, #88]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dd74:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801dd78:	68bb      	ldr	r3, [r7, #8]
 801dd7a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801dd7e:	2b02      	cmp	r3, #2
 801dd80:	d010      	beq.n	801dda4 <RadioSetRxGenericConfig+0x29c>
 801dd82:	2b02      	cmp	r3, #2
 801dd84:	dc2c      	bgt.n	801dde0 <RadioSetRxGenericConfig+0x2d8>
 801dd86:	2b00      	cmp	r3, #0
 801dd88:	d002      	beq.n	801dd90 <RadioSetRxGenericConfig+0x288>
 801dd8a:	2b01      	cmp	r3, #1
 801dd8c:	d005      	beq.n	801dd9a <RadioSetRxGenericConfig+0x292>
            break;
 801dd8e:	e027      	b.n	801dde0 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801dd90:	4b0e      	ldr	r3, [pc, #56]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dd92:	2200      	movs	r2, #0
 801dd94:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801dd98:	e023      	b.n	801dde2 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801dd9a:	4b0c      	ldr	r3, [pc, #48]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801dd9c:	2201      	movs	r2, #1
 801dd9e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801dda2:	e01e      	b.n	801dde2 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801dda4:	68bb      	ldr	r3, [r7, #8]
 801dda6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801ddaa:	2b0b      	cmp	r3, #11
 801ddac:	d004      	beq.n	801ddb8 <RadioSetRxGenericConfig+0x2b0>
 801ddae:	68bb      	ldr	r3, [r7, #8]
 801ddb0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801ddb4:	2b0c      	cmp	r3, #12
 801ddb6:	d104      	bne.n	801ddc2 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801ddb8:	4b04      	ldr	r3, [pc, #16]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801ddba:	2201      	movs	r2, #1
 801ddbc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ddc0:	e00f      	b.n	801dde2 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ddc2:	4b02      	ldr	r3, [pc, #8]	; (801ddcc <RadioSetRxGenericConfig+0x2c4>)
 801ddc4:	2200      	movs	r2, #0
 801ddc6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ddca:	e00a      	b.n	801dde2 <RadioSetRxGenericConfig+0x2da>
 801ddcc:	200024ac 	.word	0x200024ac
 801ddd0:	200024a8 	.word	0x200024a8
 801ddd4:	20002520 	.word	0x20002520
 801ddd8:	200024e4 	.word	0x200024e4
 801dddc:	200024ba 	.word	0x200024ba
            break;
 801dde0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801dde2:	4b28      	ldr	r3, [pc, #160]	; (801de84 <RadioSetRxGenericConfig+0x37c>)
 801dde4:	2201      	movs	r2, #1
 801dde6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801dde8:	68bb      	ldr	r3, [r7, #8]
 801ddea:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801ddec:	4b25      	ldr	r3, [pc, #148]	; (801de84 <RadioSetRxGenericConfig+0x37c>)
 801ddee:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801ddf0:	68bb      	ldr	r3, [r7, #8]
 801ddf2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801ddf6:	4b23      	ldr	r3, [pc, #140]	; (801de84 <RadioSetRxGenericConfig+0x37c>)
 801ddf8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801ddfa:	4a22      	ldr	r2, [pc, #136]	; (801de84 <RadioSetRxGenericConfig+0x37c>)
 801ddfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801de00:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801de02:	68bb      	ldr	r3, [r7, #8]
 801de04:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801de08:	4b1e      	ldr	r3, [pc, #120]	; (801de84 <RadioSetRxGenericConfig+0x37c>)
 801de0a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801de0e:	68bb      	ldr	r3, [r7, #8]
 801de10:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801de14:	4b1b      	ldr	r3, [pc, #108]	; (801de84 <RadioSetRxGenericConfig+0x37c>)
 801de16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801de1a:	f7ff f998 	bl	801d14e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801de1e:	2001      	movs	r0, #1
 801de20:	f7fe fb42 	bl	801c4a8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801de24:	4818      	ldr	r0, [pc, #96]	; (801de88 <RadioSetRxGenericConfig+0x380>)
 801de26:	f000 ff5b 	bl	801ece0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801de2a:	4818      	ldr	r0, [pc, #96]	; (801de8c <RadioSetRxGenericConfig+0x384>)
 801de2c:	f001 f82a 	bl	801ee84 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801de30:	4b14      	ldr	r3, [pc, #80]	; (801de84 <RadioSetRxGenericConfig+0x37c>)
 801de32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801de36:	2b01      	cmp	r3, #1
 801de38:	d10d      	bne.n	801de56 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801de3a:	f240 7036 	movw	r0, #1846	; 0x736
 801de3e:	f001 f97d 	bl	801f13c <SUBGRF_ReadRegister>
 801de42:	4603      	mov	r3, r0
 801de44:	f023 0304 	bic.w	r3, r3, #4
 801de48:	b2db      	uxtb	r3, r3
 801de4a:	4619      	mov	r1, r3
 801de4c:	f240 7036 	movw	r0, #1846	; 0x736
 801de50:	f001 f960 	bl	801f114 <SUBGRF_WriteRegister>
 801de54:	e00c      	b.n	801de70 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801de56:	f240 7036 	movw	r0, #1846	; 0x736
 801de5a:	f001 f96f 	bl	801f13c <SUBGRF_ReadRegister>
 801de5e:	4603      	mov	r3, r0
 801de60:	f043 0304 	orr.w	r3, r3, #4
 801de64:	b2db      	uxtb	r3, r3
 801de66:	4619      	mov	r1, r3
 801de68:	f240 7036 	movw	r0, #1846	; 0x736
 801de6c:	f001 f952 	bl	801f114 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801de70:	4b04      	ldr	r3, [pc, #16]	; (801de84 <RadioSetRxGenericConfig+0x37c>)
 801de72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801de76:	609a      	str	r2, [r3, #8]
        break;
 801de78:	bf00      	nop
    }
    return status;
 801de7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801de7c:	4618      	mov	r0, r3
 801de7e:	3730      	adds	r7, #48	; 0x30
 801de80:	46bd      	mov	sp, r7
 801de82:	bd80      	pop	{r7, pc}
 801de84:	200024ac 	.word	0x200024ac
 801de88:	200024e4 	.word	0x200024e4
 801de8c:	200024ba 	.word	0x200024ba

0801de90 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801de90:	b580      	push	{r7, lr}
 801de92:	b08e      	sub	sp, #56	; 0x38
 801de94:	af00      	add	r7, sp, #0
 801de96:	60b9      	str	r1, [r7, #8]
 801de98:	607b      	str	r3, [r7, #4]
 801de9a:	4603      	mov	r3, r0
 801de9c:	73fb      	strb	r3, [r7, #15]
 801de9e:	4613      	mov	r3, r2
 801dea0:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801dea2:	2300      	movs	r3, #0
 801dea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dea6:	2300      	movs	r3, #0
 801dea8:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801deaa:	f001 fc0a 	bl	801f6c2 <RFW_DeInit>
    switch( modem )
 801deae:	7bfb      	ldrb	r3, [r7, #15]
 801deb0:	2b03      	cmp	r3, #3
 801deb2:	f200 8204 	bhi.w	801e2be <RadioSetTxGenericConfig+0x42e>
 801deb6:	a201      	add	r2, pc, #4	; (adr r2, 801debc <RadioSetTxGenericConfig+0x2c>)
 801deb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801debc:	0801e041 	.word	0x0801e041
 801dec0:	0801e189 	.word	0x0801e189
 801dec4:	0801e281 	.word	0x0801e281
 801dec8:	0801decd 	.word	0x0801decd
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801decc:	68bb      	ldr	r3, [r7, #8]
 801dece:	7c9b      	ldrb	r3, [r3, #18]
 801ded0:	2b08      	cmp	r3, #8
 801ded2:	d902      	bls.n	801deda <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801ded4:	f04f 33ff 	mov.w	r3, #4294967295
 801ded8:	e206      	b.n	801e2e8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 801deda:	68bb      	ldr	r3, [r7, #8]
 801dedc:	6899      	ldr	r1, [r3, #8]
 801dede:	68bb      	ldr	r3, [r7, #8]
 801dee0:	7c9b      	ldrb	r3, [r3, #18]
 801dee2:	b29a      	uxth	r2, r3
 801dee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801dee8:	4618      	mov	r0, r3
 801deea:	f001 fcdd 	bl	801f8a8 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801deee:	68bb      	ldr	r3, [r7, #8]
 801def0:	681b      	ldr	r3, [r3, #0]
 801def2:	2b00      	cmp	r3, #0
 801def4:	d102      	bne.n	801defc <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801def6:	f04f 33ff 	mov.w	r3, #4294967295
 801defa:	e1f5      	b.n	801e2e8 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 801defc:	68bb      	ldr	r3, [r7, #8]
 801defe:	681b      	ldr	r3, [r3, #0]
 801df00:	f242 7210 	movw	r2, #10000	; 0x2710
 801df04:	4293      	cmp	r3, r2
 801df06:	d813      	bhi.n	801df30 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 801df08:	2302      	movs	r3, #2
 801df0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801df0e:	4b99      	ldr	r3, [pc, #612]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801df10:	2203      	movs	r2, #3
 801df12:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801df14:	4b97      	ldr	r3, [pc, #604]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801df16:	2203      	movs	r2, #3
 801df18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801df1c:	68bb      	ldr	r3, [r7, #8]
 801df1e:	681b      	ldr	r3, [r3, #0]
 801df20:	4a94      	ldr	r2, [pc, #592]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801df22:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801df24:	68bb      	ldr	r3, [r7, #8]
 801df26:	7cda      	ldrb	r2, [r3, #19]
 801df28:	4b92      	ldr	r3, [pc, #584]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801df2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801df2e:	e017      	b.n	801df60 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 801df30:	2300      	movs	r3, #0
 801df32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801df36:	4b8f      	ldr	r3, [pc, #572]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801df38:	2200      	movs	r2, #0
 801df3a:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801df3c:	4b8d      	ldr	r3, [pc, #564]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801df3e:	2200      	movs	r2, #0
 801df40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801df44:	68bb      	ldr	r3, [r7, #8]
 801df46:	681b      	ldr	r3, [r3, #0]
 801df48:	4a8a      	ldr	r2, [pc, #552]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801df4a:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801df4c:	68bb      	ldr	r3, [r7, #8]
 801df4e:	7cda      	ldrb	r2, [r3, #19]
 801df50:	4b88      	ldr	r3, [pc, #544]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801df52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 801df56:	68bb      	ldr	r3, [r7, #8]
 801df58:	681b      	ldr	r3, [r3, #0]
 801df5a:	089b      	lsrs	r3, r3, #2
 801df5c:	4a85      	ldr	r2, [pc, #532]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801df5e:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801df60:	68bb      	ldr	r3, [r7, #8]
 801df62:	685b      	ldr	r3, [r3, #4]
 801df64:	b29b      	uxth	r3, r3
 801df66:	00db      	lsls	r3, r3, #3
 801df68:	b29a      	uxth	r2, r3
 801df6a:	4b82      	ldr	r3, [pc, #520]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801df6c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801df6e:	4b81      	ldr	r3, [pc, #516]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801df70:	2204      	movs	r2, #4
 801df72:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801df74:	68bb      	ldr	r3, [r7, #8]
 801df76:	7c9b      	ldrb	r3, [r3, #18]
 801df78:	00db      	lsls	r3, r3, #3
 801df7a:	b2da      	uxtb	r2, r3
 801df7c:	4b7d      	ldr	r3, [pc, #500]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801df7e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801df80:	4b7c      	ldr	r3, [pc, #496]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801df82:	2200      	movs	r2, #0
 801df84:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801df86:	68bb      	ldr	r3, [r7, #8]
 801df88:	7d9b      	ldrb	r3, [r3, #22]
 801df8a:	2b02      	cmp	r3, #2
 801df8c:	d003      	beq.n	801df96 <RadioSetTxGenericConfig+0x106>
 801df8e:	68bb      	ldr	r3, [r7, #8]
 801df90:	7d1b      	ldrb	r3, [r3, #20]
 801df92:	2b02      	cmp	r3, #2
 801df94:	d12b      	bne.n	801dfee <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801df96:	68bb      	ldr	r3, [r7, #8]
 801df98:	7d5b      	ldrb	r3, [r3, #21]
 801df9a:	2bf1      	cmp	r3, #241	; 0xf1
 801df9c:	d00a      	beq.n	801dfb4 <RadioSetTxGenericConfig+0x124>
 801df9e:	68bb      	ldr	r3, [r7, #8]
 801dfa0:	7d5b      	ldrb	r3, [r3, #21]
 801dfa2:	2bf2      	cmp	r3, #242	; 0xf2
 801dfa4:	d006      	beq.n	801dfb4 <RadioSetTxGenericConfig+0x124>
 801dfa6:	68bb      	ldr	r3, [r7, #8]
 801dfa8:	7d5b      	ldrb	r3, [r3, #21]
 801dfaa:	2b01      	cmp	r3, #1
 801dfac:	d002      	beq.n	801dfb4 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801dfae:	f04f 33ff 	mov.w	r3, #4294967295
 801dfb2:	e199      	b.n	801e2e8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 801dfb4:	68bb      	ldr	r3, [r7, #8]
 801dfb6:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801dfb8:	2301      	movs	r3, #1
 801dfba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801dfbe:	4b6e      	ldr	r3, [pc, #440]	; (801e178 <RadioSetTxGenericConfig+0x2e8>)
 801dfc0:	6819      	ldr	r1, [r3, #0]
 801dfc2:	f107 0320 	add.w	r3, r7, #32
 801dfc6:	4a6d      	ldr	r2, [pc, #436]	; (801e17c <RadioSetTxGenericConfig+0x2ec>)
 801dfc8:	4618      	mov	r0, r3
 801dfca:	f001 fb6d 	bl	801f6a8 <RFW_Init>
 801dfce:	4603      	mov	r3, r0
 801dfd0:	2b00      	cmp	r3, #0
 801dfd2:	d002      	beq.n	801dfda <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 801dfd4:	f04f 33ff 	mov.w	r3, #4294967295
 801dfd8:	e186      	b.n	801e2e8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801dfda:	4b66      	ldr	r3, [pc, #408]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801dfdc:	2200      	movs	r2, #0
 801dfde:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801dfe0:	4b64      	ldr	r3, [pc, #400]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801dfe2:	2201      	movs	r2, #1
 801dfe4:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801dfe6:	4b63      	ldr	r3, [pc, #396]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801dfe8:	2200      	movs	r2, #0
 801dfea:	755a      	strb	r2, [r3, #21]
        {
 801dfec:	e00b      	b.n	801e006 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801dfee:	68bb      	ldr	r3, [r7, #8]
 801dff0:	7d5a      	ldrb	r2, [r3, #21]
 801dff2:	4b60      	ldr	r3, [pc, #384]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801dff4:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801dff6:	68bb      	ldr	r3, [r7, #8]
 801dff8:	7d9a      	ldrb	r2, [r3, #22]
 801dffa:	4b5e      	ldr	r3, [pc, #376]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801dffc:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801dffe:	68bb      	ldr	r3, [r7, #8]
 801e000:	7d1a      	ldrb	r2, [r3, #20]
 801e002:	4b5c      	ldr	r3, [pc, #368]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801e004:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801e006:	f7ff f8a2 	bl	801d14e <RadioStandby>
        RadioSetModem( radio_modem );
 801e00a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801e00e:	4618      	mov	r0, r3
 801e010:	f7fe fa4a 	bl	801c4a8 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801e014:	485a      	ldr	r0, [pc, #360]	; (801e180 <RadioSetTxGenericConfig+0x2f0>)
 801e016:	f000 fe63 	bl	801ece0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801e01a:	485a      	ldr	r0, [pc, #360]	; (801e184 <RadioSetTxGenericConfig+0x2f4>)
 801e01c:	f000 ff32 	bl	801ee84 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801e020:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e024:	4618      	mov	r0, r3
 801e026:	f000 f9fa 	bl	801e41e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801e02a:	68bb      	ldr	r3, [r7, #8]
 801e02c:	8a1b      	ldrh	r3, [r3, #16]
 801e02e:	4618      	mov	r0, r3
 801e030:	f000 fa44 	bl	801e4bc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 801e034:	68bb      	ldr	r3, [r7, #8]
 801e036:	899b      	ldrh	r3, [r3, #12]
 801e038:	4618      	mov	r0, r3
 801e03a:	f000 fa1f 	bl	801e47c <SUBGRF_SetCrcPolynomial>
        break;
 801e03e:	e13f      	b.n	801e2c0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801e040:	68bb      	ldr	r3, [r7, #8]
 801e042:	681b      	ldr	r3, [r3, #0]
 801e044:	2b00      	cmp	r3, #0
 801e046:	d102      	bne.n	801e04e <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801e048:	f04f 33ff 	mov.w	r3, #4294967295
 801e04c:	e14c      	b.n	801e2e8 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801e04e:	68bb      	ldr	r3, [r7, #8]
 801e050:	7c9b      	ldrb	r3, [r3, #18]
 801e052:	2b08      	cmp	r3, #8
 801e054:	d902      	bls.n	801e05c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801e056:	f04f 33ff 	mov.w	r3, #4294967295
 801e05a:	e145      	b.n	801e2e8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 801e05c:	68bb      	ldr	r3, [r7, #8]
 801e05e:	6899      	ldr	r1, [r3, #8]
 801e060:	68bb      	ldr	r3, [r7, #8]
 801e062:	7c9b      	ldrb	r3, [r3, #18]
 801e064:	b29a      	uxth	r2, r3
 801e066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e06a:	4618      	mov	r0, r3
 801e06c:	f001 fc1c 	bl	801f8a8 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801e070:	4b40      	ldr	r3, [pc, #256]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801e072:	2200      	movs	r2, #0
 801e074:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801e078:	68bb      	ldr	r3, [r7, #8]
 801e07a:	681b      	ldr	r3, [r3, #0]
 801e07c:	4a3d      	ldr	r2, [pc, #244]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801e07e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801e080:	68bb      	ldr	r3, [r7, #8]
 801e082:	7cda      	ldrb	r2, [r3, #19]
 801e084:	4b3b      	ldr	r3, [pc, #236]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801e086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801e08a:	68bb      	ldr	r3, [r7, #8]
 801e08c:	699b      	ldr	r3, [r3, #24]
 801e08e:	4a39      	ldr	r2, [pc, #228]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801e090:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801e092:	4b38      	ldr	r3, [pc, #224]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801e094:	2200      	movs	r2, #0
 801e096:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801e098:	68bb      	ldr	r3, [r7, #8]
 801e09a:	685b      	ldr	r3, [r3, #4]
 801e09c:	b29b      	uxth	r3, r3
 801e09e:	00db      	lsls	r3, r3, #3
 801e0a0:	b29a      	uxth	r2, r3
 801e0a2:	4b34      	ldr	r3, [pc, #208]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801e0a4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801e0a6:	4b33      	ldr	r3, [pc, #204]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801e0a8:	2204      	movs	r2, #4
 801e0aa:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801e0ac:	68bb      	ldr	r3, [r7, #8]
 801e0ae:	7c9b      	ldrb	r3, [r3, #18]
 801e0b0:	00db      	lsls	r3, r3, #3
 801e0b2:	b2da      	uxtb	r2, r3
 801e0b4:	4b2f      	ldr	r3, [pc, #188]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801e0b6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801e0b8:	4b2e      	ldr	r3, [pc, #184]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801e0ba:	2200      	movs	r2, #0
 801e0bc:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801e0be:	68bb      	ldr	r3, [r7, #8]
 801e0c0:	7d9b      	ldrb	r3, [r3, #22]
 801e0c2:	2b02      	cmp	r3, #2
 801e0c4:	d003      	beq.n	801e0ce <RadioSetTxGenericConfig+0x23e>
 801e0c6:	68bb      	ldr	r3, [r7, #8]
 801e0c8:	7d1b      	ldrb	r3, [r3, #20]
 801e0ca:	2b02      	cmp	r3, #2
 801e0cc:	d12a      	bne.n	801e124 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801e0ce:	68bb      	ldr	r3, [r7, #8]
 801e0d0:	7d5b      	ldrb	r3, [r3, #21]
 801e0d2:	2bf1      	cmp	r3, #241	; 0xf1
 801e0d4:	d00a      	beq.n	801e0ec <RadioSetTxGenericConfig+0x25c>
 801e0d6:	68bb      	ldr	r3, [r7, #8]
 801e0d8:	7d5b      	ldrb	r3, [r3, #21]
 801e0da:	2bf2      	cmp	r3, #242	; 0xf2
 801e0dc:	d006      	beq.n	801e0ec <RadioSetTxGenericConfig+0x25c>
 801e0de:	68bb      	ldr	r3, [r7, #8]
 801e0e0:	7d5b      	ldrb	r3, [r3, #21]
 801e0e2:	2b01      	cmp	r3, #1
 801e0e4:	d002      	beq.n	801e0ec <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801e0e6:	f04f 33ff 	mov.w	r3, #4294967295
 801e0ea:	e0fd      	b.n	801e2e8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801e0ec:	2301      	movs	r3, #1
 801e0ee:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801e0f0:	68bb      	ldr	r3, [r7, #8]
 801e0f2:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801e0f4:	4b20      	ldr	r3, [pc, #128]	; (801e178 <RadioSetTxGenericConfig+0x2e8>)
 801e0f6:	6819      	ldr	r1, [r3, #0]
 801e0f8:	f107 0314 	add.w	r3, r7, #20
 801e0fc:	4a1f      	ldr	r2, [pc, #124]	; (801e17c <RadioSetTxGenericConfig+0x2ec>)
 801e0fe:	4618      	mov	r0, r3
 801e100:	f001 fad2 	bl	801f6a8 <RFW_Init>
 801e104:	4603      	mov	r3, r0
 801e106:	2b00      	cmp	r3, #0
 801e108:	d002      	beq.n	801e110 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 801e10a:	f04f 33ff 	mov.w	r3, #4294967295
 801e10e:	e0eb      	b.n	801e2e8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801e110:	4b18      	ldr	r3, [pc, #96]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801e112:	2200      	movs	r2, #0
 801e114:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801e116:	4b17      	ldr	r3, [pc, #92]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801e118:	2201      	movs	r2, #1
 801e11a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801e11c:	4b15      	ldr	r3, [pc, #84]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801e11e:	2200      	movs	r2, #0
 801e120:	755a      	strb	r2, [r3, #21]
        {
 801e122:	e00b      	b.n	801e13c <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801e124:	68bb      	ldr	r3, [r7, #8]
 801e126:	7d5a      	ldrb	r2, [r3, #21]
 801e128:	4b12      	ldr	r3, [pc, #72]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801e12a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801e12c:	68bb      	ldr	r3, [r7, #8]
 801e12e:	7d9a      	ldrb	r2, [r3, #22]
 801e130:	4b10      	ldr	r3, [pc, #64]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801e132:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801e134:	68bb      	ldr	r3, [r7, #8]
 801e136:	7d1a      	ldrb	r2, [r3, #20]
 801e138:	4b0e      	ldr	r3, [pc, #56]	; (801e174 <RadioSetTxGenericConfig+0x2e4>)
 801e13a:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801e13c:	f7ff f807 	bl	801d14e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801e140:	2000      	movs	r0, #0
 801e142:	f7fe f9b1 	bl	801c4a8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801e146:	480e      	ldr	r0, [pc, #56]	; (801e180 <RadioSetTxGenericConfig+0x2f0>)
 801e148:	f000 fdca 	bl	801ece0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801e14c:	480d      	ldr	r0, [pc, #52]	; (801e184 <RadioSetTxGenericConfig+0x2f4>)
 801e14e:	f000 fe99 	bl	801ee84 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801e152:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e156:	4618      	mov	r0, r3
 801e158:	f000 f961 	bl	801e41e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801e15c:	68bb      	ldr	r3, [r7, #8]
 801e15e:	8a1b      	ldrh	r3, [r3, #16]
 801e160:	4618      	mov	r0, r3
 801e162:	f000 f9ab 	bl	801e4bc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801e166:	68bb      	ldr	r3, [r7, #8]
 801e168:	899b      	ldrh	r3, [r3, #12]
 801e16a:	4618      	mov	r0, r3
 801e16c:	f000 f986 	bl	801e47c <SUBGRF_SetCrcPolynomial>
        break;
 801e170:	e0a6      	b.n	801e2c0 <RadioSetTxGenericConfig+0x430>
 801e172:	bf00      	nop
 801e174:	200024ac 	.word	0x200024ac
 801e178:	200024a8 	.word	0x200024a8
 801e17c:	20002508 	.word	0x20002508
 801e180:	200024e4 	.word	0x200024e4
 801e184:	200024ba 	.word	0x200024ba
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801e188:	4b59      	ldr	r3, [pc, #356]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e18a:	2201      	movs	r2, #1
 801e18c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801e190:	68bb      	ldr	r3, [r7, #8]
 801e192:	781a      	ldrb	r2, [r3, #0]
 801e194:	4b56      	ldr	r3, [pc, #344]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801e19a:	68bb      	ldr	r3, [r7, #8]
 801e19c:	785a      	ldrb	r2, [r3, #1]
 801e19e:	4b54      	ldr	r3, [pc, #336]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e1a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801e1a4:	68bb      	ldr	r3, [r7, #8]
 801e1a6:	789a      	ldrb	r2, [r3, #2]
 801e1a8:	4b51      	ldr	r3, [pc, #324]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e1aa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801e1ae:	68bb      	ldr	r3, [r7, #8]
 801e1b0:	78db      	ldrb	r3, [r3, #3]
 801e1b2:	2b02      	cmp	r3, #2
 801e1b4:	d010      	beq.n	801e1d8 <RadioSetTxGenericConfig+0x348>
 801e1b6:	2b02      	cmp	r3, #2
 801e1b8:	dc20      	bgt.n	801e1fc <RadioSetTxGenericConfig+0x36c>
 801e1ba:	2b00      	cmp	r3, #0
 801e1bc:	d002      	beq.n	801e1c4 <RadioSetTxGenericConfig+0x334>
 801e1be:	2b01      	cmp	r3, #1
 801e1c0:	d005      	beq.n	801e1ce <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 801e1c2:	e01b      	b.n	801e1fc <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801e1c4:	4b4a      	ldr	r3, [pc, #296]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e1c6:	2200      	movs	r2, #0
 801e1c8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801e1cc:	e017      	b.n	801e1fe <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801e1ce:	4b48      	ldr	r3, [pc, #288]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e1d0:	2201      	movs	r2, #1
 801e1d2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801e1d6:	e012      	b.n	801e1fe <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801e1d8:	68bb      	ldr	r3, [r7, #8]
 801e1da:	781b      	ldrb	r3, [r3, #0]
 801e1dc:	2b0b      	cmp	r3, #11
 801e1de:	d003      	beq.n	801e1e8 <RadioSetTxGenericConfig+0x358>
 801e1e0:	68bb      	ldr	r3, [r7, #8]
 801e1e2:	781b      	ldrb	r3, [r3, #0]
 801e1e4:	2b0c      	cmp	r3, #12
 801e1e6:	d104      	bne.n	801e1f2 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801e1e8:	4b41      	ldr	r3, [pc, #260]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e1ea:	2201      	movs	r2, #1
 801e1ec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801e1f0:	e005      	b.n	801e1fe <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801e1f2:	4b3f      	ldr	r3, [pc, #252]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e1f4:	2200      	movs	r2, #0
 801e1f6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801e1fa:	e000      	b.n	801e1fe <RadioSetTxGenericConfig+0x36e>
            break;
 801e1fc:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801e1fe:	4b3c      	ldr	r3, [pc, #240]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e200:	2201      	movs	r2, #1
 801e202:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801e204:	68bb      	ldr	r3, [r7, #8]
 801e206:	889a      	ldrh	r2, [r3, #4]
 801e208:	4b39      	ldr	r3, [pc, #228]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e20a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801e20c:	68bb      	ldr	r3, [r7, #8]
 801e20e:	799a      	ldrb	r2, [r3, #6]
 801e210:	4b37      	ldr	r3, [pc, #220]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e212:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801e214:	68bb      	ldr	r3, [r7, #8]
 801e216:	79da      	ldrb	r2, [r3, #7]
 801e218:	4b35      	ldr	r3, [pc, #212]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e21a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801e21e:	68bb      	ldr	r3, [r7, #8]
 801e220:	7a1a      	ldrb	r2, [r3, #8]
 801e222:	4b33      	ldr	r3, [pc, #204]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e224:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801e228:	f7fe ff91 	bl	801d14e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801e22c:	2001      	movs	r0, #1
 801e22e:	f7fe f93b 	bl	801c4a8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801e232:	4830      	ldr	r0, [pc, #192]	; (801e2f4 <RadioSetTxGenericConfig+0x464>)
 801e234:	f000 fd54 	bl	801ece0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801e238:	482f      	ldr	r0, [pc, #188]	; (801e2f8 <RadioSetTxGenericConfig+0x468>)
 801e23a:	f000 fe23 	bl	801ee84 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801e23e:	4b2c      	ldr	r3, [pc, #176]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e240:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801e244:	2b06      	cmp	r3, #6
 801e246:	d10d      	bne.n	801e264 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801e248:	f640 0089 	movw	r0, #2185	; 0x889
 801e24c:	f000 ff76 	bl	801f13c <SUBGRF_ReadRegister>
 801e250:	4603      	mov	r3, r0
 801e252:	f023 0304 	bic.w	r3, r3, #4
 801e256:	b2db      	uxtb	r3, r3
 801e258:	4619      	mov	r1, r3
 801e25a:	f640 0089 	movw	r0, #2185	; 0x889
 801e25e:	f000 ff59 	bl	801f114 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 801e262:	e02d      	b.n	801e2c0 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801e264:	f640 0089 	movw	r0, #2185	; 0x889
 801e268:	f000 ff68 	bl	801f13c <SUBGRF_ReadRegister>
 801e26c:	4603      	mov	r3, r0
 801e26e:	f043 0304 	orr.w	r3, r3, #4
 801e272:	b2db      	uxtb	r3, r3
 801e274:	4619      	mov	r1, r3
 801e276:	f640 0089 	movw	r0, #2185	; 0x889
 801e27a:	f000 ff4b 	bl	801f114 <SUBGRF_WriteRegister>
        break;
 801e27e:	e01f      	b.n	801e2c0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801e280:	68bb      	ldr	r3, [r7, #8]
 801e282:	681b      	ldr	r3, [r3, #0]
 801e284:	2b00      	cmp	r3, #0
 801e286:	d004      	beq.n	801e292 <RadioSetTxGenericConfig+0x402>
 801e288:	68bb      	ldr	r3, [r7, #8]
 801e28a:	681b      	ldr	r3, [r3, #0]
 801e28c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801e290:	d902      	bls.n	801e298 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801e292:	f04f 33ff 	mov.w	r3, #4294967295
 801e296:	e027      	b.n	801e2e8 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801e298:	2003      	movs	r0, #3
 801e29a:	f7fe f905 	bl	801c4a8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801e29e:	4b14      	ldr	r3, [pc, #80]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e2a0:	2202      	movs	r2, #2
 801e2a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801e2a6:	68bb      	ldr	r3, [r7, #8]
 801e2a8:	681b      	ldr	r3, [r3, #0]
 801e2aa:	4a11      	ldr	r2, [pc, #68]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e2ac:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801e2ae:	4b10      	ldr	r3, [pc, #64]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e2b0:	2216      	movs	r2, #22
 801e2b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801e2b6:	480f      	ldr	r0, [pc, #60]	; (801e2f4 <RadioSetTxGenericConfig+0x464>)
 801e2b8:	f000 fd12 	bl	801ece0 <SUBGRF_SetModulationParams>
        break;
 801e2bc:	e000      	b.n	801e2c0 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801e2be:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801e2c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801e2c4:	4618      	mov	r0, r3
 801e2c6:	f001 f841 	bl	801f34c <SUBGRF_SetRfTxPower>
 801e2ca:	4603      	mov	r3, r0
 801e2cc:	461a      	mov	r2, r3
 801e2ce:	4b08      	ldr	r3, [pc, #32]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e2d0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801e2d4:	4b06      	ldr	r3, [pc, #24]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e2d6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801e2da:	4618      	mov	r0, r3
 801e2dc:	f001 fa05 	bl	801f6ea <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801e2e0:	4a03      	ldr	r2, [pc, #12]	; (801e2f0 <RadioSetTxGenericConfig+0x460>)
 801e2e2:	687b      	ldr	r3, [r7, #4]
 801e2e4:	6053      	str	r3, [r2, #4]
    return 0;
 801e2e6:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801e2e8:	4618      	mov	r0, r3
 801e2ea:	3738      	adds	r7, #56	; 0x38
 801e2ec:	46bd      	mov	sp, r7
 801e2ee:	bd80      	pop	{r7, pc}
 801e2f0:	200024ac 	.word	0x200024ac
 801e2f4:	200024e4 	.word	0x200024e4
 801e2f8:	200024ba 	.word	0x200024ba

0801e2fc <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801e2fc:	b580      	push	{r7, lr}
 801e2fe:	b084      	sub	sp, #16
 801e300:	af00      	add	r7, sp, #0
 801e302:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801e304:	687b      	ldr	r3, [r7, #4]
 801e306:	2b00      	cmp	r3, #0
 801e308:	d002      	beq.n	801e310 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801e30a:	4a1a      	ldr	r2, [pc, #104]	; (801e374 <SUBGRF_Init+0x78>)
 801e30c:	687b      	ldr	r3, [r7, #4]
 801e30e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801e310:	f7e4 fd40 	bl	8002d94 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801e314:	2002      	movs	r0, #2
 801e316:	f001 f8e5 	bl	801f4e4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801e31a:	4b17      	ldr	r3, [pc, #92]	; (801e378 <SUBGRF_Init+0x7c>)
 801e31c:	2200      	movs	r2, #0
 801e31e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801e320:	2000      	movs	r0, #0
 801e322:	f000 f977 	bl	801e614 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801e326:	f7f0 f8d9 	bl	800e4dc <RBI_IsTCXO>
 801e32a:	4603      	mov	r3, r0
 801e32c:	2b01      	cmp	r3, #1
 801e32e:	d10e      	bne.n	801e34e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801e330:	2140      	movs	r1, #64	; 0x40
 801e332:	2001      	movs	r0, #1
 801e334:	f000 fb78 	bl	801ea28 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801e338:	2100      	movs	r1, #0
 801e33a:	f640 1011 	movw	r0, #2321	; 0x911
 801e33e:	f000 fee9 	bl	801f114 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801e342:	237f      	movs	r3, #127	; 0x7f
 801e344:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801e346:	7b38      	ldrb	r0, [r7, #12]
 801e348:	f000 fa85 	bl	801e856 <SUBGRF_Calibrate>
 801e34c:	e009      	b.n	801e362 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801e34e:	2120      	movs	r1, #32
 801e350:	f640 1011 	movw	r0, #2321	; 0x911
 801e354:	f000 fede 	bl	801f114 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801e358:	2120      	movs	r1, #32
 801e35a:	f640 1012 	movw	r0, #2322	; 0x912
 801e35e:	f000 fed9 	bl	801f114 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801e362:	f7f0 f89f 	bl	800e4a4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801e366:	4b05      	ldr	r3, [pc, #20]	; (801e37c <SUBGRF_Init+0x80>)
 801e368:	2201      	movs	r2, #1
 801e36a:	701a      	strb	r2, [r3, #0]
}
 801e36c:	bf00      	nop
 801e36e:	3710      	adds	r7, #16
 801e370:	46bd      	mov	sp, r7
 801e372:	bd80      	pop	{r7, pc}
 801e374:	20002544 	.word	0x20002544
 801e378:	20002540 	.word	0x20002540
 801e37c:	20002538 	.word	0x20002538

0801e380 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801e380:	b480      	push	{r7}
 801e382:	af00      	add	r7, sp, #0
    return OperatingMode;
 801e384:	4b02      	ldr	r3, [pc, #8]	; (801e390 <SUBGRF_GetOperatingMode+0x10>)
 801e386:	781b      	ldrb	r3, [r3, #0]
}
 801e388:	4618      	mov	r0, r3
 801e38a:	46bd      	mov	sp, r7
 801e38c:	bc80      	pop	{r7}
 801e38e:	4770      	bx	lr
 801e390:	20002538 	.word	0x20002538

0801e394 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801e394:	b580      	push	{r7, lr}
 801e396:	b082      	sub	sp, #8
 801e398:	af00      	add	r7, sp, #0
 801e39a:	6078      	str	r0, [r7, #4]
 801e39c:	460b      	mov	r3, r1
 801e39e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801e3a0:	78fb      	ldrb	r3, [r7, #3]
 801e3a2:	461a      	mov	r2, r3
 801e3a4:	6879      	ldr	r1, [r7, #4]
 801e3a6:	2000      	movs	r0, #0
 801e3a8:	f000 ff20 	bl	801f1ec <SUBGRF_WriteBuffer>
}
 801e3ac:	bf00      	nop
 801e3ae:	3708      	adds	r7, #8
 801e3b0:	46bd      	mov	sp, r7
 801e3b2:	bd80      	pop	{r7, pc}

0801e3b4 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801e3b4:	b580      	push	{r7, lr}
 801e3b6:	b086      	sub	sp, #24
 801e3b8:	af00      	add	r7, sp, #0
 801e3ba:	60f8      	str	r0, [r7, #12]
 801e3bc:	60b9      	str	r1, [r7, #8]
 801e3be:	4613      	mov	r3, r2
 801e3c0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801e3c2:	2300      	movs	r3, #0
 801e3c4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801e3c6:	f107 0317 	add.w	r3, r7, #23
 801e3ca:	4619      	mov	r1, r3
 801e3cc:	68b8      	ldr	r0, [r7, #8]
 801e3ce:	f000 fe23 	bl	801f018 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801e3d2:	68bb      	ldr	r3, [r7, #8]
 801e3d4:	781b      	ldrb	r3, [r3, #0]
 801e3d6:	79fa      	ldrb	r2, [r7, #7]
 801e3d8:	429a      	cmp	r2, r3
 801e3da:	d201      	bcs.n	801e3e0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801e3dc:	2301      	movs	r3, #1
 801e3de:	e007      	b.n	801e3f0 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801e3e0:	7df8      	ldrb	r0, [r7, #23]
 801e3e2:	68bb      	ldr	r3, [r7, #8]
 801e3e4:	781b      	ldrb	r3, [r3, #0]
 801e3e6:	461a      	mov	r2, r3
 801e3e8:	68f9      	ldr	r1, [r7, #12]
 801e3ea:	f000 ff21 	bl	801f230 <SUBGRF_ReadBuffer>

    return 0;
 801e3ee:	2300      	movs	r3, #0
}
 801e3f0:	4618      	mov	r0, r3
 801e3f2:	3718      	adds	r7, #24
 801e3f4:	46bd      	mov	sp, r7
 801e3f6:	bd80      	pop	{r7, pc}

0801e3f8 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801e3f8:	b580      	push	{r7, lr}
 801e3fa:	b084      	sub	sp, #16
 801e3fc:	af00      	add	r7, sp, #0
 801e3fe:	60f8      	str	r0, [r7, #12]
 801e400:	460b      	mov	r3, r1
 801e402:	607a      	str	r2, [r7, #4]
 801e404:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801e406:	7afb      	ldrb	r3, [r7, #11]
 801e408:	4619      	mov	r1, r3
 801e40a:	68f8      	ldr	r0, [r7, #12]
 801e40c:	f7ff ffc2 	bl	801e394 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801e410:	6878      	ldr	r0, [r7, #4]
 801e412:	f000 f91b 	bl	801e64c <SUBGRF_SetTx>
}
 801e416:	bf00      	nop
 801e418:	3710      	adds	r7, #16
 801e41a:	46bd      	mov	sp, r7
 801e41c:	bd80      	pop	{r7, pc}

0801e41e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801e41e:	b580      	push	{r7, lr}
 801e420:	b082      	sub	sp, #8
 801e422:	af00      	add	r7, sp, #0
 801e424:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801e426:	2208      	movs	r2, #8
 801e428:	6879      	ldr	r1, [r7, #4]
 801e42a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801e42e:	f000 fe99 	bl	801f164 <SUBGRF_WriteRegisters>
    return 0;
 801e432:	2300      	movs	r3, #0
}
 801e434:	4618      	mov	r0, r3
 801e436:	3708      	adds	r7, #8
 801e438:	46bd      	mov	sp, r7
 801e43a:	bd80      	pop	{r7, pc}

0801e43c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801e43c:	b580      	push	{r7, lr}
 801e43e:	b084      	sub	sp, #16
 801e440:	af00      	add	r7, sp, #0
 801e442:	4603      	mov	r3, r0
 801e444:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801e446:	88fb      	ldrh	r3, [r7, #6]
 801e448:	0a1b      	lsrs	r3, r3, #8
 801e44a:	b29b      	uxth	r3, r3
 801e44c:	b2db      	uxtb	r3, r3
 801e44e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801e450:	88fb      	ldrh	r3, [r7, #6]
 801e452:	b2db      	uxtb	r3, r3
 801e454:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801e456:	f000 fb6b 	bl	801eb30 <SUBGRF_GetPacketType>
 801e45a:	4603      	mov	r3, r0
 801e45c:	2b00      	cmp	r3, #0
 801e45e:	d108      	bne.n	801e472 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801e460:	f107 030c 	add.w	r3, r7, #12
 801e464:	2202      	movs	r2, #2
 801e466:	4619      	mov	r1, r3
 801e468:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801e46c:	f000 fe7a 	bl	801f164 <SUBGRF_WriteRegisters>
            break;
 801e470:	e000      	b.n	801e474 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801e472:	bf00      	nop
    }
}
 801e474:	bf00      	nop
 801e476:	3710      	adds	r7, #16
 801e478:	46bd      	mov	sp, r7
 801e47a:	bd80      	pop	{r7, pc}

0801e47c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801e47c:	b580      	push	{r7, lr}
 801e47e:	b084      	sub	sp, #16
 801e480:	af00      	add	r7, sp, #0
 801e482:	4603      	mov	r3, r0
 801e484:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801e486:	88fb      	ldrh	r3, [r7, #6]
 801e488:	0a1b      	lsrs	r3, r3, #8
 801e48a:	b29b      	uxth	r3, r3
 801e48c:	b2db      	uxtb	r3, r3
 801e48e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801e490:	88fb      	ldrh	r3, [r7, #6]
 801e492:	b2db      	uxtb	r3, r3
 801e494:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801e496:	f000 fb4b 	bl	801eb30 <SUBGRF_GetPacketType>
 801e49a:	4603      	mov	r3, r0
 801e49c:	2b00      	cmp	r3, #0
 801e49e:	d108      	bne.n	801e4b2 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801e4a0:	f107 030c 	add.w	r3, r7, #12
 801e4a4:	2202      	movs	r2, #2
 801e4a6:	4619      	mov	r1, r3
 801e4a8:	f240 60be 	movw	r0, #1726	; 0x6be
 801e4ac:	f000 fe5a 	bl	801f164 <SUBGRF_WriteRegisters>
            break;
 801e4b0:	e000      	b.n	801e4b4 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801e4b2:	bf00      	nop
    }
}
 801e4b4:	bf00      	nop
 801e4b6:	3710      	adds	r7, #16
 801e4b8:	46bd      	mov	sp, r7
 801e4ba:	bd80      	pop	{r7, pc}

0801e4bc <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801e4bc:	b580      	push	{r7, lr}
 801e4be:	b084      	sub	sp, #16
 801e4c0:	af00      	add	r7, sp, #0
 801e4c2:	4603      	mov	r3, r0
 801e4c4:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801e4c6:	2300      	movs	r3, #0
 801e4c8:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801e4ca:	f000 fb31 	bl	801eb30 <SUBGRF_GetPacketType>
 801e4ce:	4603      	mov	r3, r0
 801e4d0:	2b00      	cmp	r3, #0
 801e4d2:	d121      	bne.n	801e518 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801e4d4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801e4d8:	f000 fe30 	bl	801f13c <SUBGRF_ReadRegister>
 801e4dc:	4603      	mov	r3, r0
 801e4de:	f023 0301 	bic.w	r3, r3, #1
 801e4e2:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801e4e4:	88fb      	ldrh	r3, [r7, #6]
 801e4e6:	0a1b      	lsrs	r3, r3, #8
 801e4e8:	b29b      	uxth	r3, r3
 801e4ea:	b25b      	sxtb	r3, r3
 801e4ec:	f003 0301 	and.w	r3, r3, #1
 801e4f0:	b25a      	sxtb	r2, r3
 801e4f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e4f6:	4313      	orrs	r3, r2
 801e4f8:	b25b      	sxtb	r3, r3
 801e4fa:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801e4fc:	7bfb      	ldrb	r3, [r7, #15]
 801e4fe:	4619      	mov	r1, r3
 801e500:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801e504:	f000 fe06 	bl	801f114 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801e508:	88fb      	ldrh	r3, [r7, #6]
 801e50a:	b2db      	uxtb	r3, r3
 801e50c:	4619      	mov	r1, r3
 801e50e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801e512:	f000 fdff 	bl	801f114 <SUBGRF_WriteRegister>
            break;
 801e516:	e000      	b.n	801e51a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801e518:	bf00      	nop
    }
}
 801e51a:	bf00      	nop
 801e51c:	3710      	adds	r7, #16
 801e51e:	46bd      	mov	sp, r7
 801e520:	bd80      	pop	{r7, pc}

0801e522 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801e522:	b580      	push	{r7, lr}
 801e524:	b082      	sub	sp, #8
 801e526:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801e528:	2300      	movs	r3, #0
 801e52a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801e52c:	2300      	movs	r3, #0
 801e52e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801e530:	2300      	movs	r3, #0
 801e532:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801e534:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801e538:	f000 fe00 	bl	801f13c <SUBGRF_ReadRegister>
 801e53c:	4603      	mov	r3, r0
 801e53e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801e540:	79fb      	ldrb	r3, [r7, #7]
 801e542:	f023 0301 	bic.w	r3, r3, #1
 801e546:	b2db      	uxtb	r3, r3
 801e548:	4619      	mov	r1, r3
 801e54a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801e54e:	f000 fde1 	bl	801f114 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801e552:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801e556:	f000 fdf1 	bl	801f13c <SUBGRF_ReadRegister>
 801e55a:	4603      	mov	r3, r0
 801e55c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801e55e:	79bb      	ldrb	r3, [r7, #6]
 801e560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e564:	b2db      	uxtb	r3, r3
 801e566:	4619      	mov	r1, r3
 801e568:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801e56c:	f000 fdd2 	bl	801f114 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801e570:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801e574:	f000 f88a 	bl	801e68c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801e578:	463b      	mov	r3, r7
 801e57a:	2204      	movs	r2, #4
 801e57c:	4619      	mov	r1, r3
 801e57e:	f640 0019 	movw	r0, #2073	; 0x819
 801e582:	f000 fe11 	bl	801f1a8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801e586:	2000      	movs	r0, #0
 801e588:	f000 f844 	bl	801e614 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801e58c:	79fb      	ldrb	r3, [r7, #7]
 801e58e:	4619      	mov	r1, r3
 801e590:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801e594:	f000 fdbe 	bl	801f114 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801e598:	79bb      	ldrb	r3, [r7, #6]
 801e59a:	4619      	mov	r1, r3
 801e59c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801e5a0:	f000 fdb8 	bl	801f114 <SUBGRF_WriteRegister>

    return number;
 801e5a4:	683b      	ldr	r3, [r7, #0]
}
 801e5a6:	4618      	mov	r0, r3
 801e5a8:	3708      	adds	r7, #8
 801e5aa:	46bd      	mov	sp, r7
 801e5ac:	bd80      	pop	{r7, pc}
	...

0801e5b0 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801e5b0:	b580      	push	{r7, lr}
 801e5b2:	b084      	sub	sp, #16
 801e5b4:	af00      	add	r7, sp, #0
 801e5b6:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801e5b8:	2000      	movs	r0, #0
 801e5ba:	f7ef ff7a 	bl	800e4b2 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801e5be:	2002      	movs	r0, #2
 801e5c0:	f000 ff90 	bl	801f4e4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801e5c4:	793b      	ldrb	r3, [r7, #4]
 801e5c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801e5ca:	b2db      	uxtb	r3, r3
 801e5cc:	009b      	lsls	r3, r3, #2
 801e5ce:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801e5d0:	793b      	ldrb	r3, [r7, #4]
 801e5d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801e5d6:	b2db      	uxtb	r3, r3
 801e5d8:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801e5da:	b25b      	sxtb	r3, r3
 801e5dc:	4313      	orrs	r3, r2
 801e5de:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801e5e0:	793b      	ldrb	r3, [r7, #4]
 801e5e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801e5e6:	b2db      	uxtb	r3, r3
 801e5e8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801e5ea:	4313      	orrs	r3, r2
 801e5ec:	b25b      	sxtb	r3, r3
 801e5ee:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801e5f0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801e5f2:	f107 030f 	add.w	r3, r7, #15
 801e5f6:	2201      	movs	r2, #1
 801e5f8:	4619      	mov	r1, r3
 801e5fa:	2084      	movs	r0, #132	; 0x84
 801e5fc:	f000 fe3a 	bl	801f274 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801e600:	4b03      	ldr	r3, [pc, #12]	; (801e610 <SUBGRF_SetSleep+0x60>)
 801e602:	2200      	movs	r2, #0
 801e604:	701a      	strb	r2, [r3, #0]
}
 801e606:	bf00      	nop
 801e608:	3710      	adds	r7, #16
 801e60a:	46bd      	mov	sp, r7
 801e60c:	bd80      	pop	{r7, pc}
 801e60e:	bf00      	nop
 801e610:	20002538 	.word	0x20002538

0801e614 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801e614:	b580      	push	{r7, lr}
 801e616:	b082      	sub	sp, #8
 801e618:	af00      	add	r7, sp, #0
 801e61a:	4603      	mov	r3, r0
 801e61c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801e61e:	1dfb      	adds	r3, r7, #7
 801e620:	2201      	movs	r2, #1
 801e622:	4619      	mov	r1, r3
 801e624:	2080      	movs	r0, #128	; 0x80
 801e626:	f000 fe25 	bl	801f274 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801e62a:	79fb      	ldrb	r3, [r7, #7]
 801e62c:	2b00      	cmp	r3, #0
 801e62e:	d103      	bne.n	801e638 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801e630:	4b05      	ldr	r3, [pc, #20]	; (801e648 <SUBGRF_SetStandby+0x34>)
 801e632:	2201      	movs	r2, #1
 801e634:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801e636:	e002      	b.n	801e63e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801e638:	4b03      	ldr	r3, [pc, #12]	; (801e648 <SUBGRF_SetStandby+0x34>)
 801e63a:	2202      	movs	r2, #2
 801e63c:	701a      	strb	r2, [r3, #0]
}
 801e63e:	bf00      	nop
 801e640:	3708      	adds	r7, #8
 801e642:	46bd      	mov	sp, r7
 801e644:	bd80      	pop	{r7, pc}
 801e646:	bf00      	nop
 801e648:	20002538 	.word	0x20002538

0801e64c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801e64c:	b580      	push	{r7, lr}
 801e64e:	b084      	sub	sp, #16
 801e650:	af00      	add	r7, sp, #0
 801e652:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801e654:	4b0c      	ldr	r3, [pc, #48]	; (801e688 <SUBGRF_SetTx+0x3c>)
 801e656:	2204      	movs	r2, #4
 801e658:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801e65a:	687b      	ldr	r3, [r7, #4]
 801e65c:	0c1b      	lsrs	r3, r3, #16
 801e65e:	b2db      	uxtb	r3, r3
 801e660:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801e662:	687b      	ldr	r3, [r7, #4]
 801e664:	0a1b      	lsrs	r3, r3, #8
 801e666:	b2db      	uxtb	r3, r3
 801e668:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801e66a:	687b      	ldr	r3, [r7, #4]
 801e66c:	b2db      	uxtb	r3, r3
 801e66e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801e670:	f107 030c 	add.w	r3, r7, #12
 801e674:	2203      	movs	r2, #3
 801e676:	4619      	mov	r1, r3
 801e678:	2083      	movs	r0, #131	; 0x83
 801e67a:	f000 fdfb 	bl	801f274 <SUBGRF_WriteCommand>
}
 801e67e:	bf00      	nop
 801e680:	3710      	adds	r7, #16
 801e682:	46bd      	mov	sp, r7
 801e684:	bd80      	pop	{r7, pc}
 801e686:	bf00      	nop
 801e688:	20002538 	.word	0x20002538

0801e68c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801e68c:	b580      	push	{r7, lr}
 801e68e:	b084      	sub	sp, #16
 801e690:	af00      	add	r7, sp, #0
 801e692:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801e694:	4b0c      	ldr	r3, [pc, #48]	; (801e6c8 <SUBGRF_SetRx+0x3c>)
 801e696:	2205      	movs	r2, #5
 801e698:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801e69a:	687b      	ldr	r3, [r7, #4]
 801e69c:	0c1b      	lsrs	r3, r3, #16
 801e69e:	b2db      	uxtb	r3, r3
 801e6a0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801e6a2:	687b      	ldr	r3, [r7, #4]
 801e6a4:	0a1b      	lsrs	r3, r3, #8
 801e6a6:	b2db      	uxtb	r3, r3
 801e6a8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801e6aa:	687b      	ldr	r3, [r7, #4]
 801e6ac:	b2db      	uxtb	r3, r3
 801e6ae:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801e6b0:	f107 030c 	add.w	r3, r7, #12
 801e6b4:	2203      	movs	r2, #3
 801e6b6:	4619      	mov	r1, r3
 801e6b8:	2082      	movs	r0, #130	; 0x82
 801e6ba:	f000 fddb 	bl	801f274 <SUBGRF_WriteCommand>
}
 801e6be:	bf00      	nop
 801e6c0:	3710      	adds	r7, #16
 801e6c2:	46bd      	mov	sp, r7
 801e6c4:	bd80      	pop	{r7, pc}
 801e6c6:	bf00      	nop
 801e6c8:	20002538 	.word	0x20002538

0801e6cc <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801e6cc:	b580      	push	{r7, lr}
 801e6ce:	b084      	sub	sp, #16
 801e6d0:	af00      	add	r7, sp, #0
 801e6d2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801e6d4:	4b0e      	ldr	r3, [pc, #56]	; (801e710 <SUBGRF_SetRxBoosted+0x44>)
 801e6d6:	2205      	movs	r2, #5
 801e6d8:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801e6da:	2197      	movs	r1, #151	; 0x97
 801e6dc:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801e6e0:	f000 fd18 	bl	801f114 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	0c1b      	lsrs	r3, r3, #16
 801e6e8:	b2db      	uxtb	r3, r3
 801e6ea:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801e6ec:	687b      	ldr	r3, [r7, #4]
 801e6ee:	0a1b      	lsrs	r3, r3, #8
 801e6f0:	b2db      	uxtb	r3, r3
 801e6f2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801e6f4:	687b      	ldr	r3, [r7, #4]
 801e6f6:	b2db      	uxtb	r3, r3
 801e6f8:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801e6fa:	f107 030c 	add.w	r3, r7, #12
 801e6fe:	2203      	movs	r2, #3
 801e700:	4619      	mov	r1, r3
 801e702:	2082      	movs	r0, #130	; 0x82
 801e704:	f000 fdb6 	bl	801f274 <SUBGRF_WriteCommand>
}
 801e708:	bf00      	nop
 801e70a:	3710      	adds	r7, #16
 801e70c:	46bd      	mov	sp, r7
 801e70e:	bd80      	pop	{r7, pc}
 801e710:	20002538 	.word	0x20002538

0801e714 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801e714:	b580      	push	{r7, lr}
 801e716:	b084      	sub	sp, #16
 801e718:	af00      	add	r7, sp, #0
 801e71a:	6078      	str	r0, [r7, #4]
 801e71c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	0c1b      	lsrs	r3, r3, #16
 801e722:	b2db      	uxtb	r3, r3
 801e724:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801e726:	687b      	ldr	r3, [r7, #4]
 801e728:	0a1b      	lsrs	r3, r3, #8
 801e72a:	b2db      	uxtb	r3, r3
 801e72c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801e72e:	687b      	ldr	r3, [r7, #4]
 801e730:	b2db      	uxtb	r3, r3
 801e732:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801e734:	683b      	ldr	r3, [r7, #0]
 801e736:	0c1b      	lsrs	r3, r3, #16
 801e738:	b2db      	uxtb	r3, r3
 801e73a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801e73c:	683b      	ldr	r3, [r7, #0]
 801e73e:	0a1b      	lsrs	r3, r3, #8
 801e740:	b2db      	uxtb	r3, r3
 801e742:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801e744:	683b      	ldr	r3, [r7, #0]
 801e746:	b2db      	uxtb	r3, r3
 801e748:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801e74a:	f107 0308 	add.w	r3, r7, #8
 801e74e:	2206      	movs	r2, #6
 801e750:	4619      	mov	r1, r3
 801e752:	2094      	movs	r0, #148	; 0x94
 801e754:	f000 fd8e 	bl	801f274 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801e758:	4b03      	ldr	r3, [pc, #12]	; (801e768 <SUBGRF_SetRxDutyCycle+0x54>)
 801e75a:	2206      	movs	r2, #6
 801e75c:	701a      	strb	r2, [r3, #0]
}
 801e75e:	bf00      	nop
 801e760:	3710      	adds	r7, #16
 801e762:	46bd      	mov	sp, r7
 801e764:	bd80      	pop	{r7, pc}
 801e766:	bf00      	nop
 801e768:	20002538 	.word	0x20002538

0801e76c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801e76c:	b580      	push	{r7, lr}
 801e76e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801e770:	2200      	movs	r2, #0
 801e772:	2100      	movs	r1, #0
 801e774:	20c5      	movs	r0, #197	; 0xc5
 801e776:	f000 fd7d 	bl	801f274 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801e77a:	4b02      	ldr	r3, [pc, #8]	; (801e784 <SUBGRF_SetCad+0x18>)
 801e77c:	2207      	movs	r2, #7
 801e77e:	701a      	strb	r2, [r3, #0]
}
 801e780:	bf00      	nop
 801e782:	bd80      	pop	{r7, pc}
 801e784:	20002538 	.word	0x20002538

0801e788 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801e788:	b580      	push	{r7, lr}
 801e78a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801e78c:	2200      	movs	r2, #0
 801e78e:	2100      	movs	r1, #0
 801e790:	20d1      	movs	r0, #209	; 0xd1
 801e792:	f000 fd6f 	bl	801f274 <SUBGRF_WriteCommand>
}
 801e796:	bf00      	nop
 801e798:	bd80      	pop	{r7, pc}

0801e79a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801e79a:	b580      	push	{r7, lr}
 801e79c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801e79e:	2200      	movs	r2, #0
 801e7a0:	2100      	movs	r1, #0
 801e7a2:	20d2      	movs	r0, #210	; 0xd2
 801e7a4:	f000 fd66 	bl	801f274 <SUBGRF_WriteCommand>
}
 801e7a8:	bf00      	nop
 801e7aa:	bd80      	pop	{r7, pc}

0801e7ac <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801e7ac:	b580      	push	{r7, lr}
 801e7ae:	b082      	sub	sp, #8
 801e7b0:	af00      	add	r7, sp, #0
 801e7b2:	4603      	mov	r3, r0
 801e7b4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801e7b6:	1dfb      	adds	r3, r7, #7
 801e7b8:	2201      	movs	r2, #1
 801e7ba:	4619      	mov	r1, r3
 801e7bc:	209f      	movs	r0, #159	; 0x9f
 801e7be:	f000 fd59 	bl	801f274 <SUBGRF_WriteCommand>
}
 801e7c2:	bf00      	nop
 801e7c4:	3708      	adds	r7, #8
 801e7c6:	46bd      	mov	sp, r7
 801e7c8:	bd80      	pop	{r7, pc}

0801e7ca <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801e7ca:	b580      	push	{r7, lr}
 801e7cc:	b084      	sub	sp, #16
 801e7ce:	af00      	add	r7, sp, #0
 801e7d0:	4603      	mov	r3, r0
 801e7d2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801e7d4:	1dfb      	adds	r3, r7, #7
 801e7d6:	2201      	movs	r2, #1
 801e7d8:	4619      	mov	r1, r3
 801e7da:	20a0      	movs	r0, #160	; 0xa0
 801e7dc:	f000 fd4a 	bl	801f274 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801e7e0:	79fb      	ldrb	r3, [r7, #7]
 801e7e2:	2b3f      	cmp	r3, #63	; 0x3f
 801e7e4:	d91c      	bls.n	801e820 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801e7e6:	79fb      	ldrb	r3, [r7, #7]
 801e7e8:	085b      	lsrs	r3, r3, #1
 801e7ea:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801e7ec:	2300      	movs	r3, #0
 801e7ee:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801e7f0:	2300      	movs	r3, #0
 801e7f2:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801e7f4:	e005      	b.n	801e802 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801e7f6:	7bfb      	ldrb	r3, [r7, #15]
 801e7f8:	089b      	lsrs	r3, r3, #2
 801e7fa:	73fb      	strb	r3, [r7, #15]
            exp++;
 801e7fc:	7bbb      	ldrb	r3, [r7, #14]
 801e7fe:	3301      	adds	r3, #1
 801e800:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801e802:	7bfb      	ldrb	r3, [r7, #15]
 801e804:	2b1f      	cmp	r3, #31
 801e806:	d8f6      	bhi.n	801e7f6 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801e808:	7bfb      	ldrb	r3, [r7, #15]
 801e80a:	00db      	lsls	r3, r3, #3
 801e80c:	b2da      	uxtb	r2, r3
 801e80e:	7bbb      	ldrb	r3, [r7, #14]
 801e810:	4413      	add	r3, r2
 801e812:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801e814:	7b7b      	ldrb	r3, [r7, #13]
 801e816:	4619      	mov	r1, r3
 801e818:	f240 7006 	movw	r0, #1798	; 0x706
 801e81c:	f000 fc7a 	bl	801f114 <SUBGRF_WriteRegister>
    }
}
 801e820:	bf00      	nop
 801e822:	3710      	adds	r7, #16
 801e824:	46bd      	mov	sp, r7
 801e826:	bd80      	pop	{r7, pc}

0801e828 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801e828:	b580      	push	{r7, lr}
 801e82a:	b082      	sub	sp, #8
 801e82c:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801e82e:	f7ef fe5c 	bl	800e4ea <RBI_IsDCDC>
 801e832:	4603      	mov	r3, r0
 801e834:	2b01      	cmp	r3, #1
 801e836:	d102      	bne.n	801e83e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801e838:	2301      	movs	r3, #1
 801e83a:	71fb      	strb	r3, [r7, #7]
 801e83c:	e001      	b.n	801e842 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801e83e:	2300      	movs	r3, #0
 801e840:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801e842:	1dfb      	adds	r3, r7, #7
 801e844:	2201      	movs	r2, #1
 801e846:	4619      	mov	r1, r3
 801e848:	2096      	movs	r0, #150	; 0x96
 801e84a:	f000 fd13 	bl	801f274 <SUBGRF_WriteCommand>
}
 801e84e:	bf00      	nop
 801e850:	3708      	adds	r7, #8
 801e852:	46bd      	mov	sp, r7
 801e854:	bd80      	pop	{r7, pc}

0801e856 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801e856:	b580      	push	{r7, lr}
 801e858:	b084      	sub	sp, #16
 801e85a:	af00      	add	r7, sp, #0
 801e85c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801e85e:	793b      	ldrb	r3, [r7, #4]
 801e860:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801e864:	b2db      	uxtb	r3, r3
 801e866:	019b      	lsls	r3, r3, #6
 801e868:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801e86a:	793b      	ldrb	r3, [r7, #4]
 801e86c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801e870:	b2db      	uxtb	r3, r3
 801e872:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801e874:	b25b      	sxtb	r3, r3
 801e876:	4313      	orrs	r3, r2
 801e878:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801e87a:	793b      	ldrb	r3, [r7, #4]
 801e87c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801e880:	b2db      	uxtb	r3, r3
 801e882:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801e884:	b25b      	sxtb	r3, r3
 801e886:	4313      	orrs	r3, r2
 801e888:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801e88a:	793b      	ldrb	r3, [r7, #4]
 801e88c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801e890:	b2db      	uxtb	r3, r3
 801e892:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801e894:	b25b      	sxtb	r3, r3
 801e896:	4313      	orrs	r3, r2
 801e898:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801e89a:	793b      	ldrb	r3, [r7, #4]
 801e89c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801e8a0:	b2db      	uxtb	r3, r3
 801e8a2:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801e8a4:	b25b      	sxtb	r3, r3
 801e8a6:	4313      	orrs	r3, r2
 801e8a8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801e8aa:	793b      	ldrb	r3, [r7, #4]
 801e8ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801e8b0:	b2db      	uxtb	r3, r3
 801e8b2:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801e8b4:	b25b      	sxtb	r3, r3
 801e8b6:	4313      	orrs	r3, r2
 801e8b8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801e8ba:	793b      	ldrb	r3, [r7, #4]
 801e8bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801e8c0:	b2db      	uxtb	r3, r3
 801e8c2:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801e8c4:	4313      	orrs	r3, r2
 801e8c6:	b25b      	sxtb	r3, r3
 801e8c8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801e8ca:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801e8cc:	f107 030f 	add.w	r3, r7, #15
 801e8d0:	2201      	movs	r2, #1
 801e8d2:	4619      	mov	r1, r3
 801e8d4:	2089      	movs	r0, #137	; 0x89
 801e8d6:	f000 fccd 	bl	801f274 <SUBGRF_WriteCommand>
}
 801e8da:	bf00      	nop
 801e8dc:	3710      	adds	r7, #16
 801e8de:	46bd      	mov	sp, r7
 801e8e0:	bd80      	pop	{r7, pc}
	...

0801e8e4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801e8e4:	b580      	push	{r7, lr}
 801e8e6:	b084      	sub	sp, #16
 801e8e8:	af00      	add	r7, sp, #0
 801e8ea:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801e8ec:	687b      	ldr	r3, [r7, #4]
 801e8ee:	4a1b      	ldr	r2, [pc, #108]	; (801e95c <SUBGRF_CalibrateImage+0x78>)
 801e8f0:	4293      	cmp	r3, r2
 801e8f2:	d904      	bls.n	801e8fe <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801e8f4:	23e1      	movs	r3, #225	; 0xe1
 801e8f6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801e8f8:	23e9      	movs	r3, #233	; 0xe9
 801e8fa:	737b      	strb	r3, [r7, #13]
 801e8fc:	e022      	b.n	801e944 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801e8fe:	687b      	ldr	r3, [r7, #4]
 801e900:	4a17      	ldr	r2, [pc, #92]	; (801e960 <SUBGRF_CalibrateImage+0x7c>)
 801e902:	4293      	cmp	r3, r2
 801e904:	d904      	bls.n	801e910 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801e906:	23d7      	movs	r3, #215	; 0xd7
 801e908:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801e90a:	23db      	movs	r3, #219	; 0xdb
 801e90c:	737b      	strb	r3, [r7, #13]
 801e90e:	e019      	b.n	801e944 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801e910:	687b      	ldr	r3, [r7, #4]
 801e912:	4a14      	ldr	r2, [pc, #80]	; (801e964 <SUBGRF_CalibrateImage+0x80>)
 801e914:	4293      	cmp	r3, r2
 801e916:	d904      	bls.n	801e922 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801e918:	23c1      	movs	r3, #193	; 0xc1
 801e91a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801e91c:	23c5      	movs	r3, #197	; 0xc5
 801e91e:	737b      	strb	r3, [r7, #13]
 801e920:	e010      	b.n	801e944 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801e922:	687b      	ldr	r3, [r7, #4]
 801e924:	4a10      	ldr	r2, [pc, #64]	; (801e968 <SUBGRF_CalibrateImage+0x84>)
 801e926:	4293      	cmp	r3, r2
 801e928:	d904      	bls.n	801e934 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801e92a:	2375      	movs	r3, #117	; 0x75
 801e92c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801e92e:	2381      	movs	r3, #129	; 0x81
 801e930:	737b      	strb	r3, [r7, #13]
 801e932:	e007      	b.n	801e944 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801e934:	687b      	ldr	r3, [r7, #4]
 801e936:	4a0d      	ldr	r2, [pc, #52]	; (801e96c <SUBGRF_CalibrateImage+0x88>)
 801e938:	4293      	cmp	r3, r2
 801e93a:	d903      	bls.n	801e944 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801e93c:	236b      	movs	r3, #107	; 0x6b
 801e93e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801e940:	236f      	movs	r3, #111	; 0x6f
 801e942:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801e944:	f107 030c 	add.w	r3, r7, #12
 801e948:	2202      	movs	r2, #2
 801e94a:	4619      	mov	r1, r3
 801e94c:	2098      	movs	r0, #152	; 0x98
 801e94e:	f000 fc91 	bl	801f274 <SUBGRF_WriteCommand>
}
 801e952:	bf00      	nop
 801e954:	3710      	adds	r7, #16
 801e956:	46bd      	mov	sp, r7
 801e958:	bd80      	pop	{r7, pc}
 801e95a:	bf00      	nop
 801e95c:	35a4e900 	.word	0x35a4e900
 801e960:	32a9f880 	.word	0x32a9f880
 801e964:	2de54480 	.word	0x2de54480
 801e968:	1b6b0b00 	.word	0x1b6b0b00
 801e96c:	1954fc40 	.word	0x1954fc40

0801e970 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801e970:	b590      	push	{r4, r7, lr}
 801e972:	b085      	sub	sp, #20
 801e974:	af00      	add	r7, sp, #0
 801e976:	4604      	mov	r4, r0
 801e978:	4608      	mov	r0, r1
 801e97a:	4611      	mov	r1, r2
 801e97c:	461a      	mov	r2, r3
 801e97e:	4623      	mov	r3, r4
 801e980:	71fb      	strb	r3, [r7, #7]
 801e982:	4603      	mov	r3, r0
 801e984:	71bb      	strb	r3, [r7, #6]
 801e986:	460b      	mov	r3, r1
 801e988:	717b      	strb	r3, [r7, #5]
 801e98a:	4613      	mov	r3, r2
 801e98c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801e98e:	79fb      	ldrb	r3, [r7, #7]
 801e990:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801e992:	79bb      	ldrb	r3, [r7, #6]
 801e994:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801e996:	797b      	ldrb	r3, [r7, #5]
 801e998:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801e99a:	793b      	ldrb	r3, [r7, #4]
 801e99c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801e99e:	f107 030c 	add.w	r3, r7, #12
 801e9a2:	2204      	movs	r2, #4
 801e9a4:	4619      	mov	r1, r3
 801e9a6:	2095      	movs	r0, #149	; 0x95
 801e9a8:	f000 fc64 	bl	801f274 <SUBGRF_WriteCommand>
}
 801e9ac:	bf00      	nop
 801e9ae:	3714      	adds	r7, #20
 801e9b0:	46bd      	mov	sp, r7
 801e9b2:	bd90      	pop	{r4, r7, pc}

0801e9b4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801e9b4:	b590      	push	{r4, r7, lr}
 801e9b6:	b085      	sub	sp, #20
 801e9b8:	af00      	add	r7, sp, #0
 801e9ba:	4604      	mov	r4, r0
 801e9bc:	4608      	mov	r0, r1
 801e9be:	4611      	mov	r1, r2
 801e9c0:	461a      	mov	r2, r3
 801e9c2:	4623      	mov	r3, r4
 801e9c4:	80fb      	strh	r3, [r7, #6]
 801e9c6:	4603      	mov	r3, r0
 801e9c8:	80bb      	strh	r3, [r7, #4]
 801e9ca:	460b      	mov	r3, r1
 801e9cc:	807b      	strh	r3, [r7, #2]
 801e9ce:	4613      	mov	r3, r2
 801e9d0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801e9d2:	88fb      	ldrh	r3, [r7, #6]
 801e9d4:	0a1b      	lsrs	r3, r3, #8
 801e9d6:	b29b      	uxth	r3, r3
 801e9d8:	b2db      	uxtb	r3, r3
 801e9da:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801e9dc:	88fb      	ldrh	r3, [r7, #6]
 801e9de:	b2db      	uxtb	r3, r3
 801e9e0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801e9e2:	88bb      	ldrh	r3, [r7, #4]
 801e9e4:	0a1b      	lsrs	r3, r3, #8
 801e9e6:	b29b      	uxth	r3, r3
 801e9e8:	b2db      	uxtb	r3, r3
 801e9ea:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801e9ec:	88bb      	ldrh	r3, [r7, #4]
 801e9ee:	b2db      	uxtb	r3, r3
 801e9f0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801e9f2:	887b      	ldrh	r3, [r7, #2]
 801e9f4:	0a1b      	lsrs	r3, r3, #8
 801e9f6:	b29b      	uxth	r3, r3
 801e9f8:	b2db      	uxtb	r3, r3
 801e9fa:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801e9fc:	887b      	ldrh	r3, [r7, #2]
 801e9fe:	b2db      	uxtb	r3, r3
 801ea00:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801ea02:	883b      	ldrh	r3, [r7, #0]
 801ea04:	0a1b      	lsrs	r3, r3, #8
 801ea06:	b29b      	uxth	r3, r3
 801ea08:	b2db      	uxtb	r3, r3
 801ea0a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801ea0c:	883b      	ldrh	r3, [r7, #0]
 801ea0e:	b2db      	uxtb	r3, r3
 801ea10:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801ea12:	f107 0308 	add.w	r3, r7, #8
 801ea16:	2208      	movs	r2, #8
 801ea18:	4619      	mov	r1, r3
 801ea1a:	2008      	movs	r0, #8
 801ea1c:	f000 fc2a 	bl	801f274 <SUBGRF_WriteCommand>
}
 801ea20:	bf00      	nop
 801ea22:	3714      	adds	r7, #20
 801ea24:	46bd      	mov	sp, r7
 801ea26:	bd90      	pop	{r4, r7, pc}

0801ea28 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801ea28:	b580      	push	{r7, lr}
 801ea2a:	b084      	sub	sp, #16
 801ea2c:	af00      	add	r7, sp, #0
 801ea2e:	4603      	mov	r3, r0
 801ea30:	6039      	str	r1, [r7, #0]
 801ea32:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801ea34:	79fb      	ldrb	r3, [r7, #7]
 801ea36:	f003 0307 	and.w	r3, r3, #7
 801ea3a:	b2db      	uxtb	r3, r3
 801ea3c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801ea3e:	683b      	ldr	r3, [r7, #0]
 801ea40:	0c1b      	lsrs	r3, r3, #16
 801ea42:	b2db      	uxtb	r3, r3
 801ea44:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801ea46:	683b      	ldr	r3, [r7, #0]
 801ea48:	0a1b      	lsrs	r3, r3, #8
 801ea4a:	b2db      	uxtb	r3, r3
 801ea4c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801ea4e:	683b      	ldr	r3, [r7, #0]
 801ea50:	b2db      	uxtb	r3, r3
 801ea52:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801ea54:	f107 030c 	add.w	r3, r7, #12
 801ea58:	2204      	movs	r2, #4
 801ea5a:	4619      	mov	r1, r3
 801ea5c:	2097      	movs	r0, #151	; 0x97
 801ea5e:	f000 fc09 	bl	801f274 <SUBGRF_WriteCommand>
}
 801ea62:	bf00      	nop
 801ea64:	3710      	adds	r7, #16
 801ea66:	46bd      	mov	sp, r7
 801ea68:	bd80      	pop	{r7, pc}
	...

0801ea6c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801ea6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801ea70:	b084      	sub	sp, #16
 801ea72:	af00      	add	r7, sp, #0
 801ea74:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801ea76:	2300      	movs	r3, #0
 801ea78:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801ea7a:	4b1d      	ldr	r3, [pc, #116]	; (801eaf0 <SUBGRF_SetRfFrequency+0x84>)
 801ea7c:	781b      	ldrb	r3, [r3, #0]
 801ea7e:	f083 0301 	eor.w	r3, r3, #1
 801ea82:	b2db      	uxtb	r3, r3
 801ea84:	2b00      	cmp	r3, #0
 801ea86:	d005      	beq.n	801ea94 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801ea88:	6878      	ldr	r0, [r7, #4]
 801ea8a:	f7ff ff2b 	bl	801e8e4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801ea8e:	4b18      	ldr	r3, [pc, #96]	; (801eaf0 <SUBGRF_SetRfFrequency+0x84>)
 801ea90:	2201      	movs	r2, #1
 801ea92:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801ea94:	687b      	ldr	r3, [r7, #4]
 801ea96:	2200      	movs	r2, #0
 801ea98:	461c      	mov	r4, r3
 801ea9a:	4615      	mov	r5, r2
 801ea9c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801eaa0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801eaa4:	4a13      	ldr	r2, [pc, #76]	; (801eaf4 <SUBGRF_SetRfFrequency+0x88>)
 801eaa6:	f04f 0300 	mov.w	r3, #0
 801eaaa:	4640      	mov	r0, r8
 801eaac:	4649      	mov	r1, r9
 801eaae:	f7e2 fb53 	bl	8001158 <__aeabi_uldivmod>
 801eab2:	4602      	mov	r2, r0
 801eab4:	460b      	mov	r3, r1
 801eab6:	4613      	mov	r3, r2
 801eab8:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801eaba:	68fb      	ldr	r3, [r7, #12]
 801eabc:	0e1b      	lsrs	r3, r3, #24
 801eabe:	b2db      	uxtb	r3, r3
 801eac0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801eac2:	68fb      	ldr	r3, [r7, #12]
 801eac4:	0c1b      	lsrs	r3, r3, #16
 801eac6:	b2db      	uxtb	r3, r3
 801eac8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801eaca:	68fb      	ldr	r3, [r7, #12]
 801eacc:	0a1b      	lsrs	r3, r3, #8
 801eace:	b2db      	uxtb	r3, r3
 801ead0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801ead2:	68fb      	ldr	r3, [r7, #12]
 801ead4:	b2db      	uxtb	r3, r3
 801ead6:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801ead8:	f107 0308 	add.w	r3, r7, #8
 801eadc:	2204      	movs	r2, #4
 801eade:	4619      	mov	r1, r3
 801eae0:	2086      	movs	r0, #134	; 0x86
 801eae2:	f000 fbc7 	bl	801f274 <SUBGRF_WriteCommand>
}
 801eae6:	bf00      	nop
 801eae8:	3710      	adds	r7, #16
 801eaea:	46bd      	mov	sp, r7
 801eaec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801eaf0:	20002540 	.word	0x20002540
 801eaf4:	01e84800 	.word	0x01e84800

0801eaf8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801eaf8:	b580      	push	{r7, lr}
 801eafa:	b082      	sub	sp, #8
 801eafc:	af00      	add	r7, sp, #0
 801eafe:	4603      	mov	r3, r0
 801eb00:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801eb02:	79fa      	ldrb	r2, [r7, #7]
 801eb04:	4b09      	ldr	r3, [pc, #36]	; (801eb2c <SUBGRF_SetPacketType+0x34>)
 801eb06:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801eb08:	79fb      	ldrb	r3, [r7, #7]
 801eb0a:	2b00      	cmp	r3, #0
 801eb0c:	d104      	bne.n	801eb18 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801eb0e:	2100      	movs	r1, #0
 801eb10:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801eb14:	f000 fafe 	bl	801f114 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801eb18:	1dfb      	adds	r3, r7, #7
 801eb1a:	2201      	movs	r2, #1
 801eb1c:	4619      	mov	r1, r3
 801eb1e:	208a      	movs	r0, #138	; 0x8a
 801eb20:	f000 fba8 	bl	801f274 <SUBGRF_WriteCommand>
}
 801eb24:	bf00      	nop
 801eb26:	3708      	adds	r7, #8
 801eb28:	46bd      	mov	sp, r7
 801eb2a:	bd80      	pop	{r7, pc}
 801eb2c:	20002539 	.word	0x20002539

0801eb30 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801eb30:	b480      	push	{r7}
 801eb32:	af00      	add	r7, sp, #0
    return PacketType;
 801eb34:	4b02      	ldr	r3, [pc, #8]	; (801eb40 <SUBGRF_GetPacketType+0x10>)
 801eb36:	781b      	ldrb	r3, [r3, #0]
}
 801eb38:	4618      	mov	r0, r3
 801eb3a:	46bd      	mov	sp, r7
 801eb3c:	bc80      	pop	{r7}
 801eb3e:	4770      	bx	lr
 801eb40:	20002539 	.word	0x20002539

0801eb44 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801eb44:	b580      	push	{r7, lr}
 801eb46:	b084      	sub	sp, #16
 801eb48:	af00      	add	r7, sp, #0
 801eb4a:	4603      	mov	r3, r0
 801eb4c:	71fb      	strb	r3, [r7, #7]
 801eb4e:	460b      	mov	r3, r1
 801eb50:	71bb      	strb	r3, [r7, #6]
 801eb52:	4613      	mov	r3, r2
 801eb54:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801eb56:	79fb      	ldrb	r3, [r7, #7]
 801eb58:	2b01      	cmp	r3, #1
 801eb5a:	d149      	bne.n	801ebf0 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801eb5c:	2000      	movs	r0, #0
 801eb5e:	f7ef fccb 	bl	800e4f8 <RBI_GetRFOMaxPowerConfig>
 801eb62:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801eb64:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801eb68:	68fa      	ldr	r2, [r7, #12]
 801eb6a:	429a      	cmp	r2, r3
 801eb6c:	da01      	bge.n	801eb72 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801eb6e:	68fb      	ldr	r3, [r7, #12]
 801eb70:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801eb72:	68fb      	ldr	r3, [r7, #12]
 801eb74:	2b0e      	cmp	r3, #14
 801eb76:	d10e      	bne.n	801eb96 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801eb78:	2301      	movs	r3, #1
 801eb7a:	2201      	movs	r2, #1
 801eb7c:	2100      	movs	r1, #0
 801eb7e:	2004      	movs	r0, #4
 801eb80:	f7ff fef6 	bl	801e970 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801eb84:	79ba      	ldrb	r2, [r7, #6]
 801eb86:	68fb      	ldr	r3, [r7, #12]
 801eb88:	b2db      	uxtb	r3, r3
 801eb8a:	1ad3      	subs	r3, r2, r3
 801eb8c:	b2db      	uxtb	r3, r3
 801eb8e:	330e      	adds	r3, #14
 801eb90:	b2db      	uxtb	r3, r3
 801eb92:	71bb      	strb	r3, [r7, #6]
 801eb94:	e01f      	b.n	801ebd6 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801eb96:	68fb      	ldr	r3, [r7, #12]
 801eb98:	2b0a      	cmp	r3, #10
 801eb9a:	d10e      	bne.n	801ebba <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801eb9c:	2301      	movs	r3, #1
 801eb9e:	2201      	movs	r2, #1
 801eba0:	2100      	movs	r1, #0
 801eba2:	2001      	movs	r0, #1
 801eba4:	f7ff fee4 	bl	801e970 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801eba8:	79ba      	ldrb	r2, [r7, #6]
 801ebaa:	68fb      	ldr	r3, [r7, #12]
 801ebac:	b2db      	uxtb	r3, r3
 801ebae:	1ad3      	subs	r3, r2, r3
 801ebb0:	b2db      	uxtb	r3, r3
 801ebb2:	330d      	adds	r3, #13
 801ebb4:	b2db      	uxtb	r3, r3
 801ebb6:	71bb      	strb	r3, [r7, #6]
 801ebb8:	e00d      	b.n	801ebd6 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801ebba:	2301      	movs	r3, #1
 801ebbc:	2201      	movs	r2, #1
 801ebbe:	2100      	movs	r1, #0
 801ebc0:	2006      	movs	r0, #6
 801ebc2:	f7ff fed5 	bl	801e970 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ebc6:	79ba      	ldrb	r2, [r7, #6]
 801ebc8:	68fb      	ldr	r3, [r7, #12]
 801ebca:	b2db      	uxtb	r3, r3
 801ebcc:	1ad3      	subs	r3, r2, r3
 801ebce:	b2db      	uxtb	r3, r3
 801ebd0:	330e      	adds	r3, #14
 801ebd2:	b2db      	uxtb	r3, r3
 801ebd4:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801ebd6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ebda:	f113 0f11 	cmn.w	r3, #17
 801ebde:	da01      	bge.n	801ebe4 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801ebe0:	23ef      	movs	r3, #239	; 0xef
 801ebe2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801ebe4:	2118      	movs	r1, #24
 801ebe6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ebea:	f000 fa93 	bl	801f114 <SUBGRF_WriteRegister>
 801ebee:	e067      	b.n	801ecc0 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801ebf0:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801ebf4:	f000 faa2 	bl	801f13c <SUBGRF_ReadRegister>
 801ebf8:	4603      	mov	r3, r0
 801ebfa:	f043 031e 	orr.w	r3, r3, #30
 801ebfe:	b2db      	uxtb	r3, r3
 801ec00:	4619      	mov	r1, r3
 801ec02:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801ec06:	f000 fa85 	bl	801f114 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801ec0a:	2001      	movs	r0, #1
 801ec0c:	f7ef fc74 	bl	800e4f8 <RBI_GetRFOMaxPowerConfig>
 801ec10:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801ec12:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ec16:	68fa      	ldr	r2, [r7, #12]
 801ec18:	429a      	cmp	r2, r3
 801ec1a:	da01      	bge.n	801ec20 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801ec1c:	68fb      	ldr	r3, [r7, #12]
 801ec1e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801ec20:	68fb      	ldr	r3, [r7, #12]
 801ec22:	2b14      	cmp	r3, #20
 801ec24:	d10e      	bne.n	801ec44 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801ec26:	2301      	movs	r3, #1
 801ec28:	2200      	movs	r2, #0
 801ec2a:	2105      	movs	r1, #5
 801ec2c:	2003      	movs	r0, #3
 801ec2e:	f7ff fe9f 	bl	801e970 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ec32:	79ba      	ldrb	r2, [r7, #6]
 801ec34:	68fb      	ldr	r3, [r7, #12]
 801ec36:	b2db      	uxtb	r3, r3
 801ec38:	1ad3      	subs	r3, r2, r3
 801ec3a:	b2db      	uxtb	r3, r3
 801ec3c:	3316      	adds	r3, #22
 801ec3e:	b2db      	uxtb	r3, r3
 801ec40:	71bb      	strb	r3, [r7, #6]
 801ec42:	e031      	b.n	801eca8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801ec44:	68fb      	ldr	r3, [r7, #12]
 801ec46:	2b11      	cmp	r3, #17
 801ec48:	d10e      	bne.n	801ec68 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801ec4a:	2301      	movs	r3, #1
 801ec4c:	2200      	movs	r2, #0
 801ec4e:	2103      	movs	r1, #3
 801ec50:	2002      	movs	r0, #2
 801ec52:	f7ff fe8d 	bl	801e970 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ec56:	79ba      	ldrb	r2, [r7, #6]
 801ec58:	68fb      	ldr	r3, [r7, #12]
 801ec5a:	b2db      	uxtb	r3, r3
 801ec5c:	1ad3      	subs	r3, r2, r3
 801ec5e:	b2db      	uxtb	r3, r3
 801ec60:	3316      	adds	r3, #22
 801ec62:	b2db      	uxtb	r3, r3
 801ec64:	71bb      	strb	r3, [r7, #6]
 801ec66:	e01f      	b.n	801eca8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801ec68:	68fb      	ldr	r3, [r7, #12]
 801ec6a:	2b0e      	cmp	r3, #14
 801ec6c:	d10e      	bne.n	801ec8c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801ec6e:	2301      	movs	r3, #1
 801ec70:	2200      	movs	r2, #0
 801ec72:	2102      	movs	r1, #2
 801ec74:	2002      	movs	r0, #2
 801ec76:	f7ff fe7b 	bl	801e970 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ec7a:	79ba      	ldrb	r2, [r7, #6]
 801ec7c:	68fb      	ldr	r3, [r7, #12]
 801ec7e:	b2db      	uxtb	r3, r3
 801ec80:	1ad3      	subs	r3, r2, r3
 801ec82:	b2db      	uxtb	r3, r3
 801ec84:	330e      	adds	r3, #14
 801ec86:	b2db      	uxtb	r3, r3
 801ec88:	71bb      	strb	r3, [r7, #6]
 801ec8a:	e00d      	b.n	801eca8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801ec8c:	2301      	movs	r3, #1
 801ec8e:	2200      	movs	r2, #0
 801ec90:	2107      	movs	r1, #7
 801ec92:	2004      	movs	r0, #4
 801ec94:	f7ff fe6c 	bl	801e970 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ec98:	79ba      	ldrb	r2, [r7, #6]
 801ec9a:	68fb      	ldr	r3, [r7, #12]
 801ec9c:	b2db      	uxtb	r3, r3
 801ec9e:	1ad3      	subs	r3, r2, r3
 801eca0:	b2db      	uxtb	r3, r3
 801eca2:	3316      	adds	r3, #22
 801eca4:	b2db      	uxtb	r3, r3
 801eca6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801eca8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ecac:	f113 0f09 	cmn.w	r3, #9
 801ecb0:	da01      	bge.n	801ecb6 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801ecb2:	23f7      	movs	r3, #247	; 0xf7
 801ecb4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801ecb6:	2138      	movs	r1, #56	; 0x38
 801ecb8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ecbc:	f000 fa2a 	bl	801f114 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801ecc0:	79bb      	ldrb	r3, [r7, #6]
 801ecc2:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801ecc4:	797b      	ldrb	r3, [r7, #5]
 801ecc6:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801ecc8:	f107 0308 	add.w	r3, r7, #8
 801eccc:	2202      	movs	r2, #2
 801ecce:	4619      	mov	r1, r3
 801ecd0:	208e      	movs	r0, #142	; 0x8e
 801ecd2:	f000 facf 	bl	801f274 <SUBGRF_WriteCommand>
}
 801ecd6:	bf00      	nop
 801ecd8:	3710      	adds	r7, #16
 801ecda:	46bd      	mov	sp, r7
 801ecdc:	bd80      	pop	{r7, pc}
	...

0801ece0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801ece0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801ece4:	b086      	sub	sp, #24
 801ece6:	af00      	add	r7, sp, #0
 801ece8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801ecea:	2300      	movs	r3, #0
 801ecec:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801ecee:	4a61      	ldr	r2, [pc, #388]	; (801ee74 <SUBGRF_SetModulationParams+0x194>)
 801ecf0:	f107 0308 	add.w	r3, r7, #8
 801ecf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ecf8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801ecfc:	687b      	ldr	r3, [r7, #4]
 801ecfe:	781a      	ldrb	r2, [r3, #0]
 801ed00:	4b5d      	ldr	r3, [pc, #372]	; (801ee78 <SUBGRF_SetModulationParams+0x198>)
 801ed02:	781b      	ldrb	r3, [r3, #0]
 801ed04:	429a      	cmp	r2, r3
 801ed06:	d004      	beq.n	801ed12 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801ed08:	687b      	ldr	r3, [r7, #4]
 801ed0a:	781b      	ldrb	r3, [r3, #0]
 801ed0c:	4618      	mov	r0, r3
 801ed0e:	f7ff fef3 	bl	801eaf8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801ed12:	687b      	ldr	r3, [r7, #4]
 801ed14:	781b      	ldrb	r3, [r3, #0]
 801ed16:	2b03      	cmp	r3, #3
 801ed18:	f200 80a5 	bhi.w	801ee66 <SUBGRF_SetModulationParams+0x186>
 801ed1c:	a201      	add	r2, pc, #4	; (adr r2, 801ed24 <SUBGRF_SetModulationParams+0x44>)
 801ed1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ed22:	bf00      	nop
 801ed24:	0801ed35 	.word	0x0801ed35
 801ed28:	0801edf5 	.word	0x0801edf5
 801ed2c:	0801edb7 	.word	0x0801edb7
 801ed30:	0801ee23 	.word	0x0801ee23
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801ed34:	2308      	movs	r3, #8
 801ed36:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801ed38:	687b      	ldr	r3, [r7, #4]
 801ed3a:	685b      	ldr	r3, [r3, #4]
 801ed3c:	4a4f      	ldr	r2, [pc, #316]	; (801ee7c <SUBGRF_SetModulationParams+0x19c>)
 801ed3e:	fbb2 f3f3 	udiv	r3, r2, r3
 801ed42:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ed44:	697b      	ldr	r3, [r7, #20]
 801ed46:	0c1b      	lsrs	r3, r3, #16
 801ed48:	b2db      	uxtb	r3, r3
 801ed4a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ed4c:	697b      	ldr	r3, [r7, #20]
 801ed4e:	0a1b      	lsrs	r3, r3, #8
 801ed50:	b2db      	uxtb	r3, r3
 801ed52:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ed54:	697b      	ldr	r3, [r7, #20]
 801ed56:	b2db      	uxtb	r3, r3
 801ed58:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ed5a:	687b      	ldr	r3, [r7, #4]
 801ed5c:	7b1b      	ldrb	r3, [r3, #12]
 801ed5e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ed60:	687b      	ldr	r3, [r7, #4]
 801ed62:	7b5b      	ldrb	r3, [r3, #13]
 801ed64:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801ed66:	687b      	ldr	r3, [r7, #4]
 801ed68:	689b      	ldr	r3, [r3, #8]
 801ed6a:	2200      	movs	r2, #0
 801ed6c:	461c      	mov	r4, r3
 801ed6e:	4615      	mov	r5, r2
 801ed70:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801ed74:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801ed78:	4a41      	ldr	r2, [pc, #260]	; (801ee80 <SUBGRF_SetModulationParams+0x1a0>)
 801ed7a:	f04f 0300 	mov.w	r3, #0
 801ed7e:	4640      	mov	r0, r8
 801ed80:	4649      	mov	r1, r9
 801ed82:	f7e2 f9e9 	bl	8001158 <__aeabi_uldivmod>
 801ed86:	4602      	mov	r2, r0
 801ed88:	460b      	mov	r3, r1
 801ed8a:	4613      	mov	r3, r2
 801ed8c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801ed8e:	697b      	ldr	r3, [r7, #20]
 801ed90:	0c1b      	lsrs	r3, r3, #16
 801ed92:	b2db      	uxtb	r3, r3
 801ed94:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801ed96:	697b      	ldr	r3, [r7, #20]
 801ed98:	0a1b      	lsrs	r3, r3, #8
 801ed9a:	b2db      	uxtb	r3, r3
 801ed9c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801ed9e:	697b      	ldr	r3, [r7, #20]
 801eda0:	b2db      	uxtb	r3, r3
 801eda2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801eda4:	7cfb      	ldrb	r3, [r7, #19]
 801eda6:	b29a      	uxth	r2, r3
 801eda8:	f107 0308 	add.w	r3, r7, #8
 801edac:	4619      	mov	r1, r3
 801edae:	208b      	movs	r0, #139	; 0x8b
 801edb0:	f000 fa60 	bl	801f274 <SUBGRF_WriteCommand>
        break;
 801edb4:	e058      	b.n	801ee68 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801edb6:	2304      	movs	r3, #4
 801edb8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801edba:	687b      	ldr	r3, [r7, #4]
 801edbc:	691b      	ldr	r3, [r3, #16]
 801edbe:	4a2f      	ldr	r2, [pc, #188]	; (801ee7c <SUBGRF_SetModulationParams+0x19c>)
 801edc0:	fbb2 f3f3 	udiv	r3, r2, r3
 801edc4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801edc6:	697b      	ldr	r3, [r7, #20]
 801edc8:	0c1b      	lsrs	r3, r3, #16
 801edca:	b2db      	uxtb	r3, r3
 801edcc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801edce:	697b      	ldr	r3, [r7, #20]
 801edd0:	0a1b      	lsrs	r3, r3, #8
 801edd2:	b2db      	uxtb	r3, r3
 801edd4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801edd6:	697b      	ldr	r3, [r7, #20]
 801edd8:	b2db      	uxtb	r3, r3
 801edda:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801eddc:	687b      	ldr	r3, [r7, #4]
 801edde:	7d1b      	ldrb	r3, [r3, #20]
 801ede0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ede2:	7cfb      	ldrb	r3, [r7, #19]
 801ede4:	b29a      	uxth	r2, r3
 801ede6:	f107 0308 	add.w	r3, r7, #8
 801edea:	4619      	mov	r1, r3
 801edec:	208b      	movs	r0, #139	; 0x8b
 801edee:	f000 fa41 	bl	801f274 <SUBGRF_WriteCommand>
        break;
 801edf2:	e039      	b.n	801ee68 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801edf4:	2304      	movs	r3, #4
 801edf6:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801edf8:	687b      	ldr	r3, [r7, #4]
 801edfa:	7e1b      	ldrb	r3, [r3, #24]
 801edfc:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	7e5b      	ldrb	r3, [r3, #25]
 801ee02:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801ee04:	687b      	ldr	r3, [r7, #4]
 801ee06:	7e9b      	ldrb	r3, [r3, #26]
 801ee08:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801ee0a:	687b      	ldr	r3, [r7, #4]
 801ee0c:	7edb      	ldrb	r3, [r3, #27]
 801ee0e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ee10:	7cfb      	ldrb	r3, [r7, #19]
 801ee12:	b29a      	uxth	r2, r3
 801ee14:	f107 0308 	add.w	r3, r7, #8
 801ee18:	4619      	mov	r1, r3
 801ee1a:	208b      	movs	r0, #139	; 0x8b
 801ee1c:	f000 fa2a 	bl	801f274 <SUBGRF_WriteCommand>

        break;
 801ee20:	e022      	b.n	801ee68 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801ee22:	2305      	movs	r3, #5
 801ee24:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801ee26:	687b      	ldr	r3, [r7, #4]
 801ee28:	685b      	ldr	r3, [r3, #4]
 801ee2a:	4a14      	ldr	r2, [pc, #80]	; (801ee7c <SUBGRF_SetModulationParams+0x19c>)
 801ee2c:	fbb2 f3f3 	udiv	r3, r2, r3
 801ee30:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ee32:	697b      	ldr	r3, [r7, #20]
 801ee34:	0c1b      	lsrs	r3, r3, #16
 801ee36:	b2db      	uxtb	r3, r3
 801ee38:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ee3a:	697b      	ldr	r3, [r7, #20]
 801ee3c:	0a1b      	lsrs	r3, r3, #8
 801ee3e:	b2db      	uxtb	r3, r3
 801ee40:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ee42:	697b      	ldr	r3, [r7, #20]
 801ee44:	b2db      	uxtb	r3, r3
 801ee46:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ee48:	687b      	ldr	r3, [r7, #4]
 801ee4a:	7b1b      	ldrb	r3, [r3, #12]
 801ee4c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ee4e:	687b      	ldr	r3, [r7, #4]
 801ee50:	7b5b      	ldrb	r3, [r3, #13]
 801ee52:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ee54:	7cfb      	ldrb	r3, [r7, #19]
 801ee56:	b29a      	uxth	r2, r3
 801ee58:	f107 0308 	add.w	r3, r7, #8
 801ee5c:	4619      	mov	r1, r3
 801ee5e:	208b      	movs	r0, #139	; 0x8b
 801ee60:	f000 fa08 	bl	801f274 <SUBGRF_WriteCommand>
        break;
 801ee64:	e000      	b.n	801ee68 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801ee66:	bf00      	nop
    }
}
 801ee68:	bf00      	nop
 801ee6a:	3718      	adds	r7, #24
 801ee6c:	46bd      	mov	sp, r7
 801ee6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801ee72:	bf00      	nop
 801ee74:	08021924 	.word	0x08021924
 801ee78:	20002539 	.word	0x20002539
 801ee7c:	3d090000 	.word	0x3d090000
 801ee80:	01e84800 	.word	0x01e84800

0801ee84 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801ee84:	b580      	push	{r7, lr}
 801ee86:	b086      	sub	sp, #24
 801ee88:	af00      	add	r7, sp, #0
 801ee8a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801ee8c:	2300      	movs	r3, #0
 801ee8e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801ee90:	4a48      	ldr	r2, [pc, #288]	; (801efb4 <SUBGRF_SetPacketParams+0x130>)
 801ee92:	f107 030c 	add.w	r3, r7, #12
 801ee96:	ca07      	ldmia	r2, {r0, r1, r2}
 801ee98:	c303      	stmia	r3!, {r0, r1}
 801ee9a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801ee9c:	687b      	ldr	r3, [r7, #4]
 801ee9e:	781a      	ldrb	r2, [r3, #0]
 801eea0:	4b45      	ldr	r3, [pc, #276]	; (801efb8 <SUBGRF_SetPacketParams+0x134>)
 801eea2:	781b      	ldrb	r3, [r3, #0]
 801eea4:	429a      	cmp	r2, r3
 801eea6:	d004      	beq.n	801eeb2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801eea8:	687b      	ldr	r3, [r7, #4]
 801eeaa:	781b      	ldrb	r3, [r3, #0]
 801eeac:	4618      	mov	r0, r3
 801eeae:	f7ff fe23 	bl	801eaf8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801eeb2:	687b      	ldr	r3, [r7, #4]
 801eeb4:	781b      	ldrb	r3, [r3, #0]
 801eeb6:	2b03      	cmp	r3, #3
 801eeb8:	d878      	bhi.n	801efac <SUBGRF_SetPacketParams+0x128>
 801eeba:	a201      	add	r2, pc, #4	; (adr r2, 801eec0 <SUBGRF_SetPacketParams+0x3c>)
 801eebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eec0:	0801eed1 	.word	0x0801eed1
 801eec4:	0801ef61 	.word	0x0801ef61
 801eec8:	0801ef55 	.word	0x0801ef55
 801eecc:	0801eed1 	.word	0x0801eed1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801eed0:	687b      	ldr	r3, [r7, #4]
 801eed2:	7a5b      	ldrb	r3, [r3, #9]
 801eed4:	2bf1      	cmp	r3, #241	; 0xf1
 801eed6:	d10a      	bne.n	801eeee <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801eed8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801eedc:	f7ff faae 	bl	801e43c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801eee0:	f248 0005 	movw	r0, #32773	; 0x8005
 801eee4:	f7ff faca 	bl	801e47c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801eee8:	2302      	movs	r3, #2
 801eeea:	75bb      	strb	r3, [r7, #22]
 801eeec:	e011      	b.n	801ef12 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	7a5b      	ldrb	r3, [r3, #9]
 801eef2:	2bf2      	cmp	r3, #242	; 0xf2
 801eef4:	d10a      	bne.n	801ef0c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801eef6:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801eefa:	f7ff fa9f 	bl	801e43c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801eefe:	f241 0021 	movw	r0, #4129	; 0x1021
 801ef02:	f7ff fabb 	bl	801e47c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801ef06:	2306      	movs	r3, #6
 801ef08:	75bb      	strb	r3, [r7, #22]
 801ef0a:	e002      	b.n	801ef12 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801ef0c:	687b      	ldr	r3, [r7, #4]
 801ef0e:	7a5b      	ldrb	r3, [r3, #9]
 801ef10:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801ef12:	2309      	movs	r3, #9
 801ef14:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801ef16:	687b      	ldr	r3, [r7, #4]
 801ef18:	885b      	ldrh	r3, [r3, #2]
 801ef1a:	0a1b      	lsrs	r3, r3, #8
 801ef1c:	b29b      	uxth	r3, r3
 801ef1e:	b2db      	uxtb	r3, r3
 801ef20:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801ef22:	687b      	ldr	r3, [r7, #4]
 801ef24:	885b      	ldrh	r3, [r3, #2]
 801ef26:	b2db      	uxtb	r3, r3
 801ef28:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801ef2a:	687b      	ldr	r3, [r7, #4]
 801ef2c:	791b      	ldrb	r3, [r3, #4]
 801ef2e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801ef30:	687b      	ldr	r3, [r7, #4]
 801ef32:	795b      	ldrb	r3, [r3, #5]
 801ef34:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801ef36:	687b      	ldr	r3, [r7, #4]
 801ef38:	799b      	ldrb	r3, [r3, #6]
 801ef3a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801ef3c:	687b      	ldr	r3, [r7, #4]
 801ef3e:	79db      	ldrb	r3, [r3, #7]
 801ef40:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801ef42:	687b      	ldr	r3, [r7, #4]
 801ef44:	7a1b      	ldrb	r3, [r3, #8]
 801ef46:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801ef48:	7dbb      	ldrb	r3, [r7, #22]
 801ef4a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801ef4c:	687b      	ldr	r3, [r7, #4]
 801ef4e:	7a9b      	ldrb	r3, [r3, #10]
 801ef50:	753b      	strb	r3, [r7, #20]
        break;
 801ef52:	e022      	b.n	801ef9a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801ef54:	2301      	movs	r3, #1
 801ef56:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801ef58:	687b      	ldr	r3, [r7, #4]
 801ef5a:	7b1b      	ldrb	r3, [r3, #12]
 801ef5c:	733b      	strb	r3, [r7, #12]
        break;
 801ef5e:	e01c      	b.n	801ef9a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801ef60:	2306      	movs	r3, #6
 801ef62:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	89db      	ldrh	r3, [r3, #14]
 801ef68:	0a1b      	lsrs	r3, r3, #8
 801ef6a:	b29b      	uxth	r3, r3
 801ef6c:	b2db      	uxtb	r3, r3
 801ef6e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801ef70:	687b      	ldr	r3, [r7, #4]
 801ef72:	89db      	ldrh	r3, [r3, #14]
 801ef74:	b2db      	uxtb	r3, r3
 801ef76:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801ef78:	687b      	ldr	r3, [r7, #4]
 801ef7a:	7c1a      	ldrb	r2, [r3, #16]
 801ef7c:	4b0f      	ldr	r3, [pc, #60]	; (801efbc <SUBGRF_SetPacketParams+0x138>)
 801ef7e:	4611      	mov	r1, r2
 801ef80:	7019      	strb	r1, [r3, #0]
 801ef82:	4613      	mov	r3, r2
 801ef84:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801ef86:	687b      	ldr	r3, [r7, #4]
 801ef88:	7c5b      	ldrb	r3, [r3, #17]
 801ef8a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801ef8c:	687b      	ldr	r3, [r7, #4]
 801ef8e:	7c9b      	ldrb	r3, [r3, #18]
 801ef90:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801ef92:	687b      	ldr	r3, [r7, #4]
 801ef94:	7cdb      	ldrb	r3, [r3, #19]
 801ef96:	747b      	strb	r3, [r7, #17]
        break;
 801ef98:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801ef9a:	7dfb      	ldrb	r3, [r7, #23]
 801ef9c:	b29a      	uxth	r2, r3
 801ef9e:	f107 030c 	add.w	r3, r7, #12
 801efa2:	4619      	mov	r1, r3
 801efa4:	208c      	movs	r0, #140	; 0x8c
 801efa6:	f000 f965 	bl	801f274 <SUBGRF_WriteCommand>
 801efaa:	e000      	b.n	801efae <SUBGRF_SetPacketParams+0x12a>
        return;
 801efac:	bf00      	nop
}
 801efae:	3718      	adds	r7, #24
 801efb0:	46bd      	mov	sp, r7
 801efb2:	bd80      	pop	{r7, pc}
 801efb4:	0802192c 	.word	0x0802192c
 801efb8:	20002539 	.word	0x20002539
 801efbc:	2000253a 	.word	0x2000253a

0801efc0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801efc0:	b580      	push	{r7, lr}
 801efc2:	b084      	sub	sp, #16
 801efc4:	af00      	add	r7, sp, #0
 801efc6:	4603      	mov	r3, r0
 801efc8:	460a      	mov	r2, r1
 801efca:	71fb      	strb	r3, [r7, #7]
 801efcc:	4613      	mov	r3, r2
 801efce:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801efd0:	79fb      	ldrb	r3, [r7, #7]
 801efd2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801efd4:	79bb      	ldrb	r3, [r7, #6]
 801efd6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801efd8:	f107 030c 	add.w	r3, r7, #12
 801efdc:	2202      	movs	r2, #2
 801efde:	4619      	mov	r1, r3
 801efe0:	208f      	movs	r0, #143	; 0x8f
 801efe2:	f000 f947 	bl	801f274 <SUBGRF_WriteCommand>
}
 801efe6:	bf00      	nop
 801efe8:	3710      	adds	r7, #16
 801efea:	46bd      	mov	sp, r7
 801efec:	bd80      	pop	{r7, pc}

0801efee <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801efee:	b580      	push	{r7, lr}
 801eff0:	b082      	sub	sp, #8
 801eff2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801eff4:	2300      	movs	r3, #0
 801eff6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801eff8:	1d3b      	adds	r3, r7, #4
 801effa:	2201      	movs	r2, #1
 801effc:	4619      	mov	r1, r3
 801effe:	2015      	movs	r0, #21
 801f000:	f000 f95a 	bl	801f2b8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801f004:	793b      	ldrb	r3, [r7, #4]
 801f006:	425b      	negs	r3, r3
 801f008:	105b      	asrs	r3, r3, #1
 801f00a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801f00c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801f010:	4618      	mov	r0, r3
 801f012:	3708      	adds	r7, #8
 801f014:	46bd      	mov	sp, r7
 801f016:	bd80      	pop	{r7, pc}

0801f018 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801f018:	b580      	push	{r7, lr}
 801f01a:	b084      	sub	sp, #16
 801f01c:	af00      	add	r7, sp, #0
 801f01e:	6078      	str	r0, [r7, #4]
 801f020:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801f022:	f107 030c 	add.w	r3, r7, #12
 801f026:	2202      	movs	r2, #2
 801f028:	4619      	mov	r1, r3
 801f02a:	2013      	movs	r0, #19
 801f02c:	f000 f944 	bl	801f2b8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801f030:	f7ff fd7e 	bl	801eb30 <SUBGRF_GetPacketType>
 801f034:	4603      	mov	r3, r0
 801f036:	2b01      	cmp	r3, #1
 801f038:	d10d      	bne.n	801f056 <SUBGRF_GetRxBufferStatus+0x3e>
 801f03a:	4b0c      	ldr	r3, [pc, #48]	; (801f06c <SUBGRF_GetRxBufferStatus+0x54>)
 801f03c:	781b      	ldrb	r3, [r3, #0]
 801f03e:	b2db      	uxtb	r3, r3
 801f040:	2b01      	cmp	r3, #1
 801f042:	d108      	bne.n	801f056 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801f044:	f240 7002 	movw	r0, #1794	; 0x702
 801f048:	f000 f878 	bl	801f13c <SUBGRF_ReadRegister>
 801f04c:	4603      	mov	r3, r0
 801f04e:	461a      	mov	r2, r3
 801f050:	687b      	ldr	r3, [r7, #4]
 801f052:	701a      	strb	r2, [r3, #0]
 801f054:	e002      	b.n	801f05c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801f056:	7b3a      	ldrb	r2, [r7, #12]
 801f058:	687b      	ldr	r3, [r7, #4]
 801f05a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801f05c:	7b7a      	ldrb	r2, [r7, #13]
 801f05e:	683b      	ldr	r3, [r7, #0]
 801f060:	701a      	strb	r2, [r3, #0]
}
 801f062:	bf00      	nop
 801f064:	3710      	adds	r7, #16
 801f066:	46bd      	mov	sp, r7
 801f068:	bd80      	pop	{r7, pc}
 801f06a:	bf00      	nop
 801f06c:	2000253a 	.word	0x2000253a

0801f070 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801f070:	b580      	push	{r7, lr}
 801f072:	b084      	sub	sp, #16
 801f074:	af00      	add	r7, sp, #0
 801f076:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801f078:	f107 030c 	add.w	r3, r7, #12
 801f07c:	2203      	movs	r2, #3
 801f07e:	4619      	mov	r1, r3
 801f080:	2014      	movs	r0, #20
 801f082:	f000 f919 	bl	801f2b8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801f086:	f7ff fd53 	bl	801eb30 <SUBGRF_GetPacketType>
 801f08a:	4603      	mov	r3, r0
 801f08c:	461a      	mov	r2, r3
 801f08e:	687b      	ldr	r3, [r7, #4]
 801f090:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801f092:	687b      	ldr	r3, [r7, #4]
 801f094:	781b      	ldrb	r3, [r3, #0]
 801f096:	2b00      	cmp	r3, #0
 801f098:	d002      	beq.n	801f0a0 <SUBGRF_GetPacketStatus+0x30>
 801f09a:	2b01      	cmp	r3, #1
 801f09c:	d013      	beq.n	801f0c6 <SUBGRF_GetPacketStatus+0x56>
 801f09e:	e02a      	b.n	801f0f6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801f0a0:	7b3a      	ldrb	r2, [r7, #12]
 801f0a2:	687b      	ldr	r3, [r7, #4]
 801f0a4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801f0a6:	7b7b      	ldrb	r3, [r7, #13]
 801f0a8:	425b      	negs	r3, r3
 801f0aa:	105b      	asrs	r3, r3, #1
 801f0ac:	b25a      	sxtb	r2, r3
 801f0ae:	687b      	ldr	r3, [r7, #4]
 801f0b0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801f0b2:	7bbb      	ldrb	r3, [r7, #14]
 801f0b4:	425b      	negs	r3, r3
 801f0b6:	105b      	asrs	r3, r3, #1
 801f0b8:	b25a      	sxtb	r2, r3
 801f0ba:	687b      	ldr	r3, [r7, #4]
 801f0bc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801f0be:	687b      	ldr	r3, [r7, #4]
 801f0c0:	2200      	movs	r2, #0
 801f0c2:	609a      	str	r2, [r3, #8]
            break;
 801f0c4:	e020      	b.n	801f108 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801f0c6:	7b3b      	ldrb	r3, [r7, #12]
 801f0c8:	425b      	negs	r3, r3
 801f0ca:	105b      	asrs	r3, r3, #1
 801f0cc:	b25a      	sxtb	r2, r3
 801f0ce:	687b      	ldr	r3, [r7, #4]
 801f0d0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801f0d2:	7b7b      	ldrb	r3, [r7, #13]
 801f0d4:	b25b      	sxtb	r3, r3
 801f0d6:	3302      	adds	r3, #2
 801f0d8:	109b      	asrs	r3, r3, #2
 801f0da:	b25a      	sxtb	r2, r3
 801f0dc:	687b      	ldr	r3, [r7, #4]
 801f0de:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801f0e0:	7bbb      	ldrb	r3, [r7, #14]
 801f0e2:	425b      	negs	r3, r3
 801f0e4:	105b      	asrs	r3, r3, #1
 801f0e6:	b25a      	sxtb	r2, r3
 801f0e8:	687b      	ldr	r3, [r7, #4]
 801f0ea:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801f0ec:	4b08      	ldr	r3, [pc, #32]	; (801f110 <SUBGRF_GetPacketStatus+0xa0>)
 801f0ee:	681a      	ldr	r2, [r3, #0]
 801f0f0:	687b      	ldr	r3, [r7, #4]
 801f0f2:	611a      	str	r2, [r3, #16]
            break;
 801f0f4:	e008      	b.n	801f108 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801f0f6:	2214      	movs	r2, #20
 801f0f8:	2100      	movs	r1, #0
 801f0fa:	6878      	ldr	r0, [r7, #4]
 801f0fc:	f000 fbf3 	bl	801f8e6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801f100:	687b      	ldr	r3, [r7, #4]
 801f102:	220f      	movs	r2, #15
 801f104:	701a      	strb	r2, [r3, #0]
            break;
 801f106:	bf00      	nop
    }
}
 801f108:	bf00      	nop
 801f10a:	3710      	adds	r7, #16
 801f10c:	46bd      	mov	sp, r7
 801f10e:	bd80      	pop	{r7, pc}
 801f110:	2000253c 	.word	0x2000253c

0801f114 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801f114:	b580      	push	{r7, lr}
 801f116:	b082      	sub	sp, #8
 801f118:	af00      	add	r7, sp, #0
 801f11a:	4603      	mov	r3, r0
 801f11c:	460a      	mov	r2, r1
 801f11e:	80fb      	strh	r3, [r7, #6]
 801f120:	4613      	mov	r3, r2
 801f122:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801f124:	1d7a      	adds	r2, r7, #5
 801f126:	88f9      	ldrh	r1, [r7, #6]
 801f128:	2301      	movs	r3, #1
 801f12a:	4803      	ldr	r0, [pc, #12]	; (801f138 <SUBGRF_WriteRegister+0x24>)
 801f12c:	f7eb f9ce 	bl	800a4cc <HAL_SUBGHZ_WriteRegisters>
}
 801f130:	bf00      	nop
 801f132:	3708      	adds	r7, #8
 801f134:	46bd      	mov	sp, r7
 801f136:	bd80      	pop	{r7, pc}
 801f138:	200007f4 	.word	0x200007f4

0801f13c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801f13c:	b580      	push	{r7, lr}
 801f13e:	b084      	sub	sp, #16
 801f140:	af00      	add	r7, sp, #0
 801f142:	4603      	mov	r3, r0
 801f144:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801f146:	f107 020f 	add.w	r2, r7, #15
 801f14a:	88f9      	ldrh	r1, [r7, #6]
 801f14c:	2301      	movs	r3, #1
 801f14e:	4804      	ldr	r0, [pc, #16]	; (801f160 <SUBGRF_ReadRegister+0x24>)
 801f150:	f7eb fa1b 	bl	800a58a <HAL_SUBGHZ_ReadRegisters>
    return data;
 801f154:	7bfb      	ldrb	r3, [r7, #15]
}
 801f156:	4618      	mov	r0, r3
 801f158:	3710      	adds	r7, #16
 801f15a:	46bd      	mov	sp, r7
 801f15c:	bd80      	pop	{r7, pc}
 801f15e:	bf00      	nop
 801f160:	200007f4 	.word	0x200007f4

0801f164 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801f164:	b580      	push	{r7, lr}
 801f166:	b086      	sub	sp, #24
 801f168:	af00      	add	r7, sp, #0
 801f16a:	4603      	mov	r3, r0
 801f16c:	6039      	str	r1, [r7, #0]
 801f16e:	80fb      	strh	r3, [r7, #6]
 801f170:	4613      	mov	r3, r2
 801f172:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f174:	f3ef 8310 	mrs	r3, PRIMASK
 801f178:	60fb      	str	r3, [r7, #12]
  return(result);
 801f17a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801f17c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f17e:	b672      	cpsid	i
}
 801f180:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801f182:	88bb      	ldrh	r3, [r7, #4]
 801f184:	88f9      	ldrh	r1, [r7, #6]
 801f186:	683a      	ldr	r2, [r7, #0]
 801f188:	4806      	ldr	r0, [pc, #24]	; (801f1a4 <SUBGRF_WriteRegisters+0x40>)
 801f18a:	f7eb f99f 	bl	800a4cc <HAL_SUBGHZ_WriteRegisters>
 801f18e:	697b      	ldr	r3, [r7, #20]
 801f190:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f192:	693b      	ldr	r3, [r7, #16]
 801f194:	f383 8810 	msr	PRIMASK, r3
}
 801f198:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801f19a:	bf00      	nop
 801f19c:	3718      	adds	r7, #24
 801f19e:	46bd      	mov	sp, r7
 801f1a0:	bd80      	pop	{r7, pc}
 801f1a2:	bf00      	nop
 801f1a4:	200007f4 	.word	0x200007f4

0801f1a8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801f1a8:	b580      	push	{r7, lr}
 801f1aa:	b086      	sub	sp, #24
 801f1ac:	af00      	add	r7, sp, #0
 801f1ae:	4603      	mov	r3, r0
 801f1b0:	6039      	str	r1, [r7, #0]
 801f1b2:	80fb      	strh	r3, [r7, #6]
 801f1b4:	4613      	mov	r3, r2
 801f1b6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f1b8:	f3ef 8310 	mrs	r3, PRIMASK
 801f1bc:	60fb      	str	r3, [r7, #12]
  return(result);
 801f1be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801f1c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f1c2:	b672      	cpsid	i
}
 801f1c4:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801f1c6:	88bb      	ldrh	r3, [r7, #4]
 801f1c8:	88f9      	ldrh	r1, [r7, #6]
 801f1ca:	683a      	ldr	r2, [r7, #0]
 801f1cc:	4806      	ldr	r0, [pc, #24]	; (801f1e8 <SUBGRF_ReadRegisters+0x40>)
 801f1ce:	f7eb f9dc 	bl	800a58a <HAL_SUBGHZ_ReadRegisters>
 801f1d2:	697b      	ldr	r3, [r7, #20]
 801f1d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1d6:	693b      	ldr	r3, [r7, #16]
 801f1d8:	f383 8810 	msr	PRIMASK, r3
}
 801f1dc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801f1de:	bf00      	nop
 801f1e0:	3718      	adds	r7, #24
 801f1e2:	46bd      	mov	sp, r7
 801f1e4:	bd80      	pop	{r7, pc}
 801f1e6:	bf00      	nop
 801f1e8:	200007f4 	.word	0x200007f4

0801f1ec <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801f1ec:	b580      	push	{r7, lr}
 801f1ee:	b086      	sub	sp, #24
 801f1f0:	af00      	add	r7, sp, #0
 801f1f2:	4603      	mov	r3, r0
 801f1f4:	6039      	str	r1, [r7, #0]
 801f1f6:	71fb      	strb	r3, [r7, #7]
 801f1f8:	4613      	mov	r3, r2
 801f1fa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f1fc:	f3ef 8310 	mrs	r3, PRIMASK
 801f200:	60fb      	str	r3, [r7, #12]
  return(result);
 801f202:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801f204:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f206:	b672      	cpsid	i
}
 801f208:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801f20a:	79bb      	ldrb	r3, [r7, #6]
 801f20c:	b29b      	uxth	r3, r3
 801f20e:	79f9      	ldrb	r1, [r7, #7]
 801f210:	683a      	ldr	r2, [r7, #0]
 801f212:	4806      	ldr	r0, [pc, #24]	; (801f22c <SUBGRF_WriteBuffer+0x40>)
 801f214:	f7eb facd 	bl	800a7b2 <HAL_SUBGHZ_WriteBuffer>
 801f218:	697b      	ldr	r3, [r7, #20]
 801f21a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f21c:	693b      	ldr	r3, [r7, #16]
 801f21e:	f383 8810 	msr	PRIMASK, r3
}
 801f222:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801f224:	bf00      	nop
 801f226:	3718      	adds	r7, #24
 801f228:	46bd      	mov	sp, r7
 801f22a:	bd80      	pop	{r7, pc}
 801f22c:	200007f4 	.word	0x200007f4

0801f230 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801f230:	b580      	push	{r7, lr}
 801f232:	b086      	sub	sp, #24
 801f234:	af00      	add	r7, sp, #0
 801f236:	4603      	mov	r3, r0
 801f238:	6039      	str	r1, [r7, #0]
 801f23a:	71fb      	strb	r3, [r7, #7]
 801f23c:	4613      	mov	r3, r2
 801f23e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f240:	f3ef 8310 	mrs	r3, PRIMASK
 801f244:	60fb      	str	r3, [r7, #12]
  return(result);
 801f246:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801f248:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f24a:	b672      	cpsid	i
}
 801f24c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801f24e:	79bb      	ldrb	r3, [r7, #6]
 801f250:	b29b      	uxth	r3, r3
 801f252:	79f9      	ldrb	r1, [r7, #7]
 801f254:	683a      	ldr	r2, [r7, #0]
 801f256:	4806      	ldr	r0, [pc, #24]	; (801f270 <SUBGRF_ReadBuffer+0x40>)
 801f258:	f7eb fafe 	bl	800a858 <HAL_SUBGHZ_ReadBuffer>
 801f25c:	697b      	ldr	r3, [r7, #20]
 801f25e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f260:	693b      	ldr	r3, [r7, #16]
 801f262:	f383 8810 	msr	PRIMASK, r3
}
 801f266:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801f268:	bf00      	nop
 801f26a:	3718      	adds	r7, #24
 801f26c:	46bd      	mov	sp, r7
 801f26e:	bd80      	pop	{r7, pc}
 801f270:	200007f4 	.word	0x200007f4

0801f274 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801f274:	b580      	push	{r7, lr}
 801f276:	b086      	sub	sp, #24
 801f278:	af00      	add	r7, sp, #0
 801f27a:	4603      	mov	r3, r0
 801f27c:	6039      	str	r1, [r7, #0]
 801f27e:	71fb      	strb	r3, [r7, #7]
 801f280:	4613      	mov	r3, r2
 801f282:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f284:	f3ef 8310 	mrs	r3, PRIMASK
 801f288:	60fb      	str	r3, [r7, #12]
  return(result);
 801f28a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801f28c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f28e:	b672      	cpsid	i
}
 801f290:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801f292:	88bb      	ldrh	r3, [r7, #4]
 801f294:	79f9      	ldrb	r1, [r7, #7]
 801f296:	683a      	ldr	r2, [r7, #0]
 801f298:	4806      	ldr	r0, [pc, #24]	; (801f2b4 <SUBGRF_WriteCommand+0x40>)
 801f29a:	f7eb f9d7 	bl	800a64c <HAL_SUBGHZ_ExecSetCmd>
 801f29e:	697b      	ldr	r3, [r7, #20]
 801f2a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f2a2:	693b      	ldr	r3, [r7, #16]
 801f2a4:	f383 8810 	msr	PRIMASK, r3
}
 801f2a8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801f2aa:	bf00      	nop
 801f2ac:	3718      	adds	r7, #24
 801f2ae:	46bd      	mov	sp, r7
 801f2b0:	bd80      	pop	{r7, pc}
 801f2b2:	bf00      	nop
 801f2b4:	200007f4 	.word	0x200007f4

0801f2b8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801f2b8:	b580      	push	{r7, lr}
 801f2ba:	b086      	sub	sp, #24
 801f2bc:	af00      	add	r7, sp, #0
 801f2be:	4603      	mov	r3, r0
 801f2c0:	6039      	str	r1, [r7, #0]
 801f2c2:	71fb      	strb	r3, [r7, #7]
 801f2c4:	4613      	mov	r3, r2
 801f2c6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f2c8:	f3ef 8310 	mrs	r3, PRIMASK
 801f2cc:	60fb      	str	r3, [r7, #12]
  return(result);
 801f2ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801f2d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f2d2:	b672      	cpsid	i
}
 801f2d4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801f2d6:	88bb      	ldrh	r3, [r7, #4]
 801f2d8:	79f9      	ldrb	r1, [r7, #7]
 801f2da:	683a      	ldr	r2, [r7, #0]
 801f2dc:	4806      	ldr	r0, [pc, #24]	; (801f2f8 <SUBGRF_ReadCommand+0x40>)
 801f2de:	f7eb fa14 	bl	800a70a <HAL_SUBGHZ_ExecGetCmd>
 801f2e2:	697b      	ldr	r3, [r7, #20]
 801f2e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f2e6:	693b      	ldr	r3, [r7, #16]
 801f2e8:	f383 8810 	msr	PRIMASK, r3
}
 801f2ec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801f2ee:	bf00      	nop
 801f2f0:	3718      	adds	r7, #24
 801f2f2:	46bd      	mov	sp, r7
 801f2f4:	bd80      	pop	{r7, pc}
 801f2f6:	bf00      	nop
 801f2f8:	200007f4 	.word	0x200007f4

0801f2fc <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801f2fc:	b580      	push	{r7, lr}
 801f2fe:	b084      	sub	sp, #16
 801f300:	af00      	add	r7, sp, #0
 801f302:	4603      	mov	r3, r0
 801f304:	460a      	mov	r2, r1
 801f306:	71fb      	strb	r3, [r7, #7]
 801f308:	4613      	mov	r3, r2
 801f30a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801f30c:	2301      	movs	r3, #1
 801f30e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801f310:	79bb      	ldrb	r3, [r7, #6]
 801f312:	2b01      	cmp	r3, #1
 801f314:	d10d      	bne.n	801f332 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801f316:	79fb      	ldrb	r3, [r7, #7]
 801f318:	2b01      	cmp	r3, #1
 801f31a:	d104      	bne.n	801f326 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801f31c:	2302      	movs	r3, #2
 801f31e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801f320:	2004      	movs	r0, #4
 801f322:	f000 f8df 	bl	801f4e4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801f326:	79fb      	ldrb	r3, [r7, #7]
 801f328:	2b02      	cmp	r3, #2
 801f32a:	d107      	bne.n	801f33c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801f32c:	2303      	movs	r3, #3
 801f32e:	73fb      	strb	r3, [r7, #15]
 801f330:	e004      	b.n	801f33c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801f332:	79bb      	ldrb	r3, [r7, #6]
 801f334:	2b00      	cmp	r3, #0
 801f336:	d101      	bne.n	801f33c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801f338:	2301      	movs	r3, #1
 801f33a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801f33c:	7bfb      	ldrb	r3, [r7, #15]
 801f33e:	4618      	mov	r0, r3
 801f340:	f7ef f8b7 	bl	800e4b2 <RBI_ConfigRFSwitch>
}
 801f344:	bf00      	nop
 801f346:	3710      	adds	r7, #16
 801f348:	46bd      	mov	sp, r7
 801f34a:	bd80      	pop	{r7, pc}

0801f34c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801f34c:	b580      	push	{r7, lr}
 801f34e:	b084      	sub	sp, #16
 801f350:	af00      	add	r7, sp, #0
 801f352:	4603      	mov	r3, r0
 801f354:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801f356:	2301      	movs	r3, #1
 801f358:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801f35a:	f7ef f8b8 	bl	800e4ce <RBI_GetTxConfig>
 801f35e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801f360:	68bb      	ldr	r3, [r7, #8]
 801f362:	2b02      	cmp	r3, #2
 801f364:	d016      	beq.n	801f394 <SUBGRF_SetRfTxPower+0x48>
 801f366:	68bb      	ldr	r3, [r7, #8]
 801f368:	2b02      	cmp	r3, #2
 801f36a:	dc16      	bgt.n	801f39a <SUBGRF_SetRfTxPower+0x4e>
 801f36c:	68bb      	ldr	r3, [r7, #8]
 801f36e:	2b00      	cmp	r3, #0
 801f370:	d003      	beq.n	801f37a <SUBGRF_SetRfTxPower+0x2e>
 801f372:	68bb      	ldr	r3, [r7, #8]
 801f374:	2b01      	cmp	r3, #1
 801f376:	d00a      	beq.n	801f38e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801f378:	e00f      	b.n	801f39a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801f37a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f37e:	2b0f      	cmp	r3, #15
 801f380:	dd02      	ble.n	801f388 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801f382:	2302      	movs	r3, #2
 801f384:	73fb      	strb	r3, [r7, #15]
            break;
 801f386:	e009      	b.n	801f39c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801f388:	2301      	movs	r3, #1
 801f38a:	73fb      	strb	r3, [r7, #15]
            break;
 801f38c:	e006      	b.n	801f39c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801f38e:	2301      	movs	r3, #1
 801f390:	73fb      	strb	r3, [r7, #15]
            break;
 801f392:	e003      	b.n	801f39c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801f394:	2302      	movs	r3, #2
 801f396:	73fb      	strb	r3, [r7, #15]
            break;
 801f398:	e000      	b.n	801f39c <SUBGRF_SetRfTxPower+0x50>
            break;
 801f39a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801f39c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801f3a0:	7bfb      	ldrb	r3, [r7, #15]
 801f3a2:	2202      	movs	r2, #2
 801f3a4:	4618      	mov	r0, r3
 801f3a6:	f7ff fbcd 	bl	801eb44 <SUBGRF_SetTxParams>

    return paSelect;
 801f3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 801f3ac:	4618      	mov	r0, r3
 801f3ae:	3710      	adds	r7, #16
 801f3b0:	46bd      	mov	sp, r7
 801f3b2:	bd80      	pop	{r7, pc}

0801f3b4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801f3b4:	b480      	push	{r7}
 801f3b6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801f3b8:	2301      	movs	r3, #1
}
 801f3ba:	4618      	mov	r0, r3
 801f3bc:	46bd      	mov	sp, r7
 801f3be:	bc80      	pop	{r7}
 801f3c0:	4770      	bx	lr
	...

0801f3c4 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801f3c4:	b580      	push	{r7, lr}
 801f3c6:	b082      	sub	sp, #8
 801f3c8:	af00      	add	r7, sp, #0
 801f3ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801f3cc:	4b03      	ldr	r3, [pc, #12]	; (801f3dc <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801f3ce:	681b      	ldr	r3, [r3, #0]
 801f3d0:	2001      	movs	r0, #1
 801f3d2:	4798      	blx	r3
}
 801f3d4:	bf00      	nop
 801f3d6:	3708      	adds	r7, #8
 801f3d8:	46bd      	mov	sp, r7
 801f3da:	bd80      	pop	{r7, pc}
 801f3dc:	20002544 	.word	0x20002544

0801f3e0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801f3e0:	b580      	push	{r7, lr}
 801f3e2:	b082      	sub	sp, #8
 801f3e4:	af00      	add	r7, sp, #0
 801f3e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801f3e8:	4b03      	ldr	r3, [pc, #12]	; (801f3f8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801f3ea:	681b      	ldr	r3, [r3, #0]
 801f3ec:	2002      	movs	r0, #2
 801f3ee:	4798      	blx	r3
}
 801f3f0:	bf00      	nop
 801f3f2:	3708      	adds	r7, #8
 801f3f4:	46bd      	mov	sp, r7
 801f3f6:	bd80      	pop	{r7, pc}
 801f3f8:	20002544 	.word	0x20002544

0801f3fc <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801f3fc:	b580      	push	{r7, lr}
 801f3fe:	b082      	sub	sp, #8
 801f400:	af00      	add	r7, sp, #0
 801f402:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801f404:	4b03      	ldr	r3, [pc, #12]	; (801f414 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801f406:	681b      	ldr	r3, [r3, #0]
 801f408:	2040      	movs	r0, #64	; 0x40
 801f40a:	4798      	blx	r3
}
 801f40c:	bf00      	nop
 801f40e:	3708      	adds	r7, #8
 801f410:	46bd      	mov	sp, r7
 801f412:	bd80      	pop	{r7, pc}
 801f414:	20002544 	.word	0x20002544

0801f418 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801f418:	b580      	push	{r7, lr}
 801f41a:	b082      	sub	sp, #8
 801f41c:	af00      	add	r7, sp, #0
 801f41e:	6078      	str	r0, [r7, #4]
 801f420:	460b      	mov	r3, r1
 801f422:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801f424:	78fb      	ldrb	r3, [r7, #3]
 801f426:	2b00      	cmp	r3, #0
 801f428:	d002      	beq.n	801f430 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801f42a:	2b01      	cmp	r3, #1
 801f42c:	d005      	beq.n	801f43a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801f42e:	e00a      	b.n	801f446 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801f430:	4b07      	ldr	r3, [pc, #28]	; (801f450 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801f432:	681b      	ldr	r3, [r3, #0]
 801f434:	2080      	movs	r0, #128	; 0x80
 801f436:	4798      	blx	r3
            break;
 801f438:	e005      	b.n	801f446 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801f43a:	4b05      	ldr	r3, [pc, #20]	; (801f450 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801f43c:	681b      	ldr	r3, [r3, #0]
 801f43e:	f44f 7080 	mov.w	r0, #256	; 0x100
 801f442:	4798      	blx	r3
            break;
 801f444:	bf00      	nop
    }
}
 801f446:	bf00      	nop
 801f448:	3708      	adds	r7, #8
 801f44a:	46bd      	mov	sp, r7
 801f44c:	bd80      	pop	{r7, pc}
 801f44e:	bf00      	nop
 801f450:	20002544 	.word	0x20002544

0801f454 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801f454:	b580      	push	{r7, lr}
 801f456:	b082      	sub	sp, #8
 801f458:	af00      	add	r7, sp, #0
 801f45a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801f45c:	4b04      	ldr	r3, [pc, #16]	; (801f470 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801f45e:	681b      	ldr	r3, [r3, #0]
 801f460:	f44f 7000 	mov.w	r0, #512	; 0x200
 801f464:	4798      	blx	r3
}
 801f466:	bf00      	nop
 801f468:	3708      	adds	r7, #8
 801f46a:	46bd      	mov	sp, r7
 801f46c:	bd80      	pop	{r7, pc}
 801f46e:	bf00      	nop
 801f470:	20002544 	.word	0x20002544

0801f474 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801f474:	b580      	push	{r7, lr}
 801f476:	b082      	sub	sp, #8
 801f478:	af00      	add	r7, sp, #0
 801f47a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801f47c:	4b03      	ldr	r3, [pc, #12]	; (801f48c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801f47e:	681b      	ldr	r3, [r3, #0]
 801f480:	2020      	movs	r0, #32
 801f482:	4798      	blx	r3
}
 801f484:	bf00      	nop
 801f486:	3708      	adds	r7, #8
 801f488:	46bd      	mov	sp, r7
 801f48a:	bd80      	pop	{r7, pc}
 801f48c:	20002544 	.word	0x20002544

0801f490 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801f490:	b580      	push	{r7, lr}
 801f492:	b082      	sub	sp, #8
 801f494:	af00      	add	r7, sp, #0
 801f496:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801f498:	4b03      	ldr	r3, [pc, #12]	; (801f4a8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801f49a:	681b      	ldr	r3, [r3, #0]
 801f49c:	2004      	movs	r0, #4
 801f49e:	4798      	blx	r3
}
 801f4a0:	bf00      	nop
 801f4a2:	3708      	adds	r7, #8
 801f4a4:	46bd      	mov	sp, r7
 801f4a6:	bd80      	pop	{r7, pc}
 801f4a8:	20002544 	.word	0x20002544

0801f4ac <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801f4ac:	b580      	push	{r7, lr}
 801f4ae:	b082      	sub	sp, #8
 801f4b0:	af00      	add	r7, sp, #0
 801f4b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801f4b4:	4b03      	ldr	r3, [pc, #12]	; (801f4c4 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801f4b6:	681b      	ldr	r3, [r3, #0]
 801f4b8:	2008      	movs	r0, #8
 801f4ba:	4798      	blx	r3
}
 801f4bc:	bf00      	nop
 801f4be:	3708      	adds	r7, #8
 801f4c0:	46bd      	mov	sp, r7
 801f4c2:	bd80      	pop	{r7, pc}
 801f4c4:	20002544 	.word	0x20002544

0801f4c8 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801f4c8:	b580      	push	{r7, lr}
 801f4ca:	b082      	sub	sp, #8
 801f4cc:	af00      	add	r7, sp, #0
 801f4ce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801f4d0:	4b03      	ldr	r3, [pc, #12]	; (801f4e0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801f4d2:	681b      	ldr	r3, [r3, #0]
 801f4d4:	2010      	movs	r0, #16
 801f4d6:	4798      	blx	r3
}
 801f4d8:	bf00      	nop
 801f4da:	3708      	adds	r7, #8
 801f4dc:	46bd      	mov	sp, r7
 801f4de:	bd80      	pop	{r7, pc}
 801f4e0:	20002544 	.word	0x20002544

0801f4e4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801f4e4:	b580      	push	{r7, lr}
 801f4e6:	b084      	sub	sp, #16
 801f4e8:	af00      	add	r7, sp, #0
 801f4ea:	4603      	mov	r3, r0
 801f4ec:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801f4ee:	f7ee fffc 	bl	800e4ea <RBI_IsDCDC>
 801f4f2:	4603      	mov	r3, r0
 801f4f4:	2b01      	cmp	r3, #1
 801f4f6:	d112      	bne.n	801f51e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801f4f8:	f640 1023 	movw	r0, #2339	; 0x923
 801f4fc:	f7ff fe1e 	bl	801f13c <SUBGRF_ReadRegister>
 801f500:	4603      	mov	r3, r0
 801f502:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801f504:	7bfb      	ldrb	r3, [r7, #15]
 801f506:	f023 0306 	bic.w	r3, r3, #6
 801f50a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801f50c:	7bfa      	ldrb	r2, [r7, #15]
 801f50e:	79fb      	ldrb	r3, [r7, #7]
 801f510:	4313      	orrs	r3, r2
 801f512:	b2db      	uxtb	r3, r3
 801f514:	4619      	mov	r1, r3
 801f516:	f640 1023 	movw	r0, #2339	; 0x923
 801f51a:	f7ff fdfb 	bl	801f114 <SUBGRF_WriteRegister>
  }
}
 801f51e:	bf00      	nop
 801f520:	3710      	adds	r7, #16
 801f522:	46bd      	mov	sp, r7
 801f524:	bd80      	pop	{r7, pc}
	...

0801f528 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801f528:	b480      	push	{r7}
 801f52a:	b085      	sub	sp, #20
 801f52c:	af00      	add	r7, sp, #0
 801f52e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801f530:	687b      	ldr	r3, [r7, #4]
 801f532:	2b00      	cmp	r3, #0
 801f534:	d101      	bne.n	801f53a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801f536:	231f      	movs	r3, #31
 801f538:	e016      	b.n	801f568 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801f53a:	2300      	movs	r3, #0
 801f53c:	73fb      	strb	r3, [r7, #15]
 801f53e:	e00f      	b.n	801f560 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801f540:	7bfb      	ldrb	r3, [r7, #15]
 801f542:	4a0c      	ldr	r2, [pc, #48]	; (801f574 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801f544:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801f548:	687a      	ldr	r2, [r7, #4]
 801f54a:	429a      	cmp	r2, r3
 801f54c:	d205      	bcs.n	801f55a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801f54e:	7bfb      	ldrb	r3, [r7, #15]
 801f550:	4a08      	ldr	r2, [pc, #32]	; (801f574 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801f552:	00db      	lsls	r3, r3, #3
 801f554:	4413      	add	r3, r2
 801f556:	791b      	ldrb	r3, [r3, #4]
 801f558:	e006      	b.n	801f568 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801f55a:	7bfb      	ldrb	r3, [r7, #15]
 801f55c:	3301      	adds	r3, #1
 801f55e:	73fb      	strb	r3, [r7, #15]
 801f560:	7bfb      	ldrb	r3, [r7, #15]
 801f562:	2b15      	cmp	r3, #21
 801f564:	d9ec      	bls.n	801f540 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801f566:	e7fe      	b.n	801f566 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801f568:	4618      	mov	r0, r3
 801f56a:	3714      	adds	r7, #20
 801f56c:	46bd      	mov	sp, r7
 801f56e:	bc80      	pop	{r7}
 801f570:	4770      	bx	lr
 801f572:	bf00      	nop
 801f574:	08021e90 	.word	0x08021e90

0801f578 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801f578:	b580      	push	{r7, lr}
 801f57a:	b08a      	sub	sp, #40	; 0x28
 801f57c:	af00      	add	r7, sp, #0
 801f57e:	6078      	str	r0, [r7, #4]
 801f580:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801f582:	4b35      	ldr	r3, [pc, #212]	; (801f658 <SUBGRF_GetCFO+0xe0>)
 801f584:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801f586:	f640 0007 	movw	r0, #2055	; 0x807
 801f58a:	f7ff fdd7 	bl	801f13c <SUBGRF_ReadRegister>
 801f58e:	4603      	mov	r3, r0
 801f590:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801f592:	7ffb      	ldrb	r3, [r7, #31]
 801f594:	08db      	lsrs	r3, r3, #3
 801f596:	b2db      	uxtb	r3, r3
 801f598:	f003 0303 	and.w	r3, r3, #3
 801f59c:	3328      	adds	r3, #40	; 0x28
 801f59e:	443b      	add	r3, r7
 801f5a0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801f5a4:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801f5a6:	7ffb      	ldrb	r3, [r7, #31]
 801f5a8:	f003 0307 	and.w	r3, r3, #7
 801f5ac:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801f5ae:	7fba      	ldrb	r2, [r7, #30]
 801f5b0:	7f7b      	ldrb	r3, [r7, #29]
 801f5b2:	3b01      	subs	r3, #1
 801f5b4:	fa02 f303 	lsl.w	r3, r2, r3
 801f5b8:	461a      	mov	r2, r3
 801f5ba:	4b28      	ldr	r3, [pc, #160]	; (801f65c <SUBGRF_GetCFO+0xe4>)
 801f5bc:	fbb3 f3f2 	udiv	r3, r3, r2
 801f5c0:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801f5c2:	69ba      	ldr	r2, [r7, #24]
 801f5c4:	687b      	ldr	r3, [r7, #4]
 801f5c6:	fbb2 f3f3 	udiv	r3, r2, r3
 801f5ca:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801f5cc:	2301      	movs	r3, #1
 801f5ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801f5d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f5d6:	697a      	ldr	r2, [r7, #20]
 801f5d8:	fb02 f303 	mul.w	r3, r2, r3
 801f5dc:	2b07      	cmp	r3, #7
 801f5de:	d802      	bhi.n	801f5e6 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801f5e0:	2302      	movs	r3, #2
 801f5e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801f5e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f5ea:	697a      	ldr	r2, [r7, #20]
 801f5ec:	fb02 f303 	mul.w	r3, r2, r3
 801f5f0:	2b03      	cmp	r3, #3
 801f5f2:	d802      	bhi.n	801f5fa <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801f5f4:	2304      	movs	r3, #4
 801f5f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801f5fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801f5fe:	69bb      	ldr	r3, [r7, #24]
 801f600:	fb02 f303 	mul.w	r3, r2, r3
 801f604:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801f606:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801f60a:	f7ff fd97 	bl	801f13c <SUBGRF_ReadRegister>
 801f60e:	4603      	mov	r3, r0
 801f610:	021b      	lsls	r3, r3, #8
 801f612:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801f616:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801f618:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801f61c:	f7ff fd8e 	bl	801f13c <SUBGRF_ReadRegister>
 801f620:	4603      	mov	r3, r0
 801f622:	461a      	mov	r2, r3
 801f624:	6a3b      	ldr	r3, [r7, #32]
 801f626:	4313      	orrs	r3, r2
 801f628:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801f62a:	6a3b      	ldr	r3, [r7, #32]
 801f62c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f630:	2b00      	cmp	r3, #0
 801f632:	d005      	beq.n	801f640 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801f634:	6a3b      	ldr	r3, [r7, #32]
 801f636:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801f63a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801f63e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801f640:	693b      	ldr	r3, [r7, #16]
 801f642:	095b      	lsrs	r3, r3, #5
 801f644:	6a3a      	ldr	r2, [r7, #32]
 801f646:	fb02 f303 	mul.w	r3, r2, r3
 801f64a:	11da      	asrs	r2, r3, #7
 801f64c:	683b      	ldr	r3, [r7, #0]
 801f64e:	601a      	str	r2, [r3, #0]
}
 801f650:	bf00      	nop
 801f652:	3728      	adds	r7, #40	; 0x28
 801f654:	46bd      	mov	sp, r7
 801f656:	bd80      	pop	{r7, pc}
 801f658:	0c0a0804 	.word	0x0c0a0804
 801f65c:	01e84800 	.word	0x01e84800

0801f660 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801f660:	b480      	push	{r7}
 801f662:	b087      	sub	sp, #28
 801f664:	af00      	add	r7, sp, #0
 801f666:	4603      	mov	r3, r0
 801f668:	60b9      	str	r1, [r7, #8]
 801f66a:	607a      	str	r2, [r7, #4]
 801f66c:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801f66e:	2300      	movs	r3, #0
 801f670:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801f672:	f04f 33ff 	mov.w	r3, #4294967295
 801f676:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801f678:	697b      	ldr	r3, [r7, #20]
}
 801f67a:	4618      	mov	r0, r3
 801f67c:	371c      	adds	r7, #28
 801f67e:	46bd      	mov	sp, r7
 801f680:	bc80      	pop	{r7}
 801f682:	4770      	bx	lr

0801f684 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801f684:	b480      	push	{r7}
 801f686:	b087      	sub	sp, #28
 801f688:	af00      	add	r7, sp, #0
 801f68a:	4603      	mov	r3, r0
 801f68c:	60b9      	str	r1, [r7, #8]
 801f68e:	607a      	str	r2, [r7, #4]
 801f690:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801f692:	2300      	movs	r3, #0
 801f694:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801f696:	f04f 33ff 	mov.w	r3, #4294967295
 801f69a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801f69c:	697b      	ldr	r3, [r7, #20]
}
 801f69e:	4618      	mov	r0, r3
 801f6a0:	371c      	adds	r7, #28
 801f6a2:	46bd      	mov	sp, r7
 801f6a4:	bc80      	pop	{r7}
 801f6a6:	4770      	bx	lr

0801f6a8 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801f6a8:	b480      	push	{r7}
 801f6aa:	b085      	sub	sp, #20
 801f6ac:	af00      	add	r7, sp, #0
 801f6ae:	60f8      	str	r0, [r7, #12]
 801f6b0:	60b9      	str	r1, [r7, #8]
 801f6b2:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801f6b4:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801f6b8:	4618      	mov	r0, r3
 801f6ba:	3714      	adds	r7, #20
 801f6bc:	46bd      	mov	sp, r7
 801f6be:	bc80      	pop	{r7}
 801f6c0:	4770      	bx	lr

0801f6c2 <RFW_DeInit>:

void RFW_DeInit( void)
{
 801f6c2:	b480      	push	{r7}
 801f6c4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801f6c6:	bf00      	nop
 801f6c8:	46bd      	mov	sp, r7
 801f6ca:	bc80      	pop	{r7}
 801f6cc:	4770      	bx	lr

0801f6ce <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801f6ce:	b480      	push	{r7}
 801f6d0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801f6d2:	2300      	movs	r3, #0
#endif
}
 801f6d4:	4618      	mov	r0, r3
 801f6d6:	46bd      	mov	sp, r7
 801f6d8:	bc80      	pop	{r7}
 801f6da:	4770      	bx	lr

0801f6dc <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801f6dc:	b480      	push	{r7}
 801f6de:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801f6e0:	2300      	movs	r3, #0
#endif
}
 801f6e2:	4618      	mov	r0, r3
 801f6e4:	46bd      	mov	sp, r7
 801f6e6:	bc80      	pop	{r7}
 801f6e8:	4770      	bx	lr

0801f6ea <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801f6ea:	b480      	push	{r7}
 801f6ec:	b083      	sub	sp, #12
 801f6ee:	af00      	add	r7, sp, #0
 801f6f0:	4603      	mov	r3, r0
 801f6f2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801f6f4:	bf00      	nop
 801f6f6:	370c      	adds	r7, #12
 801f6f8:	46bd      	mov	sp, r7
 801f6fa:	bc80      	pop	{r7}
 801f6fc:	4770      	bx	lr

0801f6fe <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801f6fe:	b480      	push	{r7}
 801f700:	b087      	sub	sp, #28
 801f702:	af00      	add	r7, sp, #0
 801f704:	60f8      	str	r0, [r7, #12]
 801f706:	460b      	mov	r3, r1
 801f708:	607a      	str	r2, [r7, #4]
 801f70a:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801f70c:	f04f 33ff 	mov.w	r3, #4294967295
 801f710:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801f712:	697b      	ldr	r3, [r7, #20]
}
 801f714:	4618      	mov	r0, r3
 801f716:	371c      	adds	r7, #28
 801f718:	46bd      	mov	sp, r7
 801f71a:	bc80      	pop	{r7}
 801f71c:	4770      	bx	lr

0801f71e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801f71e:	b480      	push	{r7}
 801f720:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801f722:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801f726:	4618      	mov	r0, r3
 801f728:	46bd      	mov	sp, r7
 801f72a:	bc80      	pop	{r7}
 801f72c:	4770      	bx	lr

0801f72e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801f72e:	b480      	push	{r7}
 801f730:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801f732:	bf00      	nop
 801f734:	46bd      	mov	sp, r7
 801f736:	bc80      	pop	{r7}
 801f738:	4770      	bx	lr

0801f73a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801f73a:	b480      	push	{r7}
 801f73c:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801f73e:	bf00      	nop
 801f740:	46bd      	mov	sp, r7
 801f742:	bc80      	pop	{r7}
 801f744:	4770      	bx	lr

0801f746 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801f746:	b480      	push	{r7}
 801f748:	b083      	sub	sp, #12
 801f74a:	af00      	add	r7, sp, #0
 801f74c:	4603      	mov	r3, r0
 801f74e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801f750:	bf00      	nop
 801f752:	370c      	adds	r7, #12
 801f754:	46bd      	mov	sp, r7
 801f756:	bc80      	pop	{r7}
 801f758:	4770      	bx	lr
	...

0801f75c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801f75c:	b480      	push	{r7}
 801f75e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801f760:	4b04      	ldr	r3, [pc, #16]	; (801f774 <UTIL_LPM_Init+0x18>)
 801f762:	2200      	movs	r2, #0
 801f764:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801f766:	4b04      	ldr	r3, [pc, #16]	; (801f778 <UTIL_LPM_Init+0x1c>)
 801f768:	2200      	movs	r2, #0
 801f76a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801f76c:	bf00      	nop
 801f76e:	46bd      	mov	sp, r7
 801f770:	bc80      	pop	{r7}
 801f772:	4770      	bx	lr
 801f774:	20002548 	.word	0x20002548
 801f778:	2000254c 	.word	0x2000254c

0801f77c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801f77c:	b480      	push	{r7}
 801f77e:	b087      	sub	sp, #28
 801f780:	af00      	add	r7, sp, #0
 801f782:	6078      	str	r0, [r7, #4]
 801f784:	460b      	mov	r3, r1
 801f786:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f788:	f3ef 8310 	mrs	r3, PRIMASK
 801f78c:	613b      	str	r3, [r7, #16]
  return(result);
 801f78e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801f790:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f792:	b672      	cpsid	i
}
 801f794:	bf00      	nop
  
  switch( state )
 801f796:	78fb      	ldrb	r3, [r7, #3]
 801f798:	2b00      	cmp	r3, #0
 801f79a:	d008      	beq.n	801f7ae <UTIL_LPM_SetStopMode+0x32>
 801f79c:	2b01      	cmp	r3, #1
 801f79e:	d10e      	bne.n	801f7be <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801f7a0:	4b0d      	ldr	r3, [pc, #52]	; (801f7d8 <UTIL_LPM_SetStopMode+0x5c>)
 801f7a2:	681a      	ldr	r2, [r3, #0]
 801f7a4:	687b      	ldr	r3, [r7, #4]
 801f7a6:	4313      	orrs	r3, r2
 801f7a8:	4a0b      	ldr	r2, [pc, #44]	; (801f7d8 <UTIL_LPM_SetStopMode+0x5c>)
 801f7aa:	6013      	str	r3, [r2, #0]
      break;
 801f7ac:	e008      	b.n	801f7c0 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801f7ae:	687b      	ldr	r3, [r7, #4]
 801f7b0:	43da      	mvns	r2, r3
 801f7b2:	4b09      	ldr	r3, [pc, #36]	; (801f7d8 <UTIL_LPM_SetStopMode+0x5c>)
 801f7b4:	681b      	ldr	r3, [r3, #0]
 801f7b6:	4013      	ands	r3, r2
 801f7b8:	4a07      	ldr	r2, [pc, #28]	; (801f7d8 <UTIL_LPM_SetStopMode+0x5c>)
 801f7ba:	6013      	str	r3, [r2, #0]
      break;
 801f7bc:	e000      	b.n	801f7c0 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801f7be:	bf00      	nop
 801f7c0:	697b      	ldr	r3, [r7, #20]
 801f7c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f7c4:	68fb      	ldr	r3, [r7, #12]
 801f7c6:	f383 8810 	msr	PRIMASK, r3
}
 801f7ca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801f7cc:	bf00      	nop
 801f7ce:	371c      	adds	r7, #28
 801f7d0:	46bd      	mov	sp, r7
 801f7d2:	bc80      	pop	{r7}
 801f7d4:	4770      	bx	lr
 801f7d6:	bf00      	nop
 801f7d8:	20002548 	.word	0x20002548

0801f7dc <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801f7dc:	b480      	push	{r7}
 801f7de:	b087      	sub	sp, #28
 801f7e0:	af00      	add	r7, sp, #0
 801f7e2:	6078      	str	r0, [r7, #4]
 801f7e4:	460b      	mov	r3, r1
 801f7e6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f7e8:	f3ef 8310 	mrs	r3, PRIMASK
 801f7ec:	613b      	str	r3, [r7, #16]
  return(result);
 801f7ee:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801f7f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f7f2:	b672      	cpsid	i
}
 801f7f4:	bf00      	nop
  
  switch(state)
 801f7f6:	78fb      	ldrb	r3, [r7, #3]
 801f7f8:	2b00      	cmp	r3, #0
 801f7fa:	d008      	beq.n	801f80e <UTIL_LPM_SetOffMode+0x32>
 801f7fc:	2b01      	cmp	r3, #1
 801f7fe:	d10e      	bne.n	801f81e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801f800:	4b0d      	ldr	r3, [pc, #52]	; (801f838 <UTIL_LPM_SetOffMode+0x5c>)
 801f802:	681a      	ldr	r2, [r3, #0]
 801f804:	687b      	ldr	r3, [r7, #4]
 801f806:	4313      	orrs	r3, r2
 801f808:	4a0b      	ldr	r2, [pc, #44]	; (801f838 <UTIL_LPM_SetOffMode+0x5c>)
 801f80a:	6013      	str	r3, [r2, #0]
      break;
 801f80c:	e008      	b.n	801f820 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801f80e:	687b      	ldr	r3, [r7, #4]
 801f810:	43da      	mvns	r2, r3
 801f812:	4b09      	ldr	r3, [pc, #36]	; (801f838 <UTIL_LPM_SetOffMode+0x5c>)
 801f814:	681b      	ldr	r3, [r3, #0]
 801f816:	4013      	ands	r3, r2
 801f818:	4a07      	ldr	r2, [pc, #28]	; (801f838 <UTIL_LPM_SetOffMode+0x5c>)
 801f81a:	6013      	str	r3, [r2, #0]
      break;
 801f81c:	e000      	b.n	801f820 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801f81e:	bf00      	nop
 801f820:	697b      	ldr	r3, [r7, #20]
 801f822:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f824:	68fb      	ldr	r3, [r7, #12]
 801f826:	f383 8810 	msr	PRIMASK, r3
}
 801f82a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801f82c:	bf00      	nop
 801f82e:	371c      	adds	r7, #28
 801f830:	46bd      	mov	sp, r7
 801f832:	bc80      	pop	{r7}
 801f834:	4770      	bx	lr
 801f836:	bf00      	nop
 801f838:	2000254c 	.word	0x2000254c

0801f83c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801f83c:	b580      	push	{r7, lr}
 801f83e:	b084      	sub	sp, #16
 801f840:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f842:	f3ef 8310 	mrs	r3, PRIMASK
 801f846:	60bb      	str	r3, [r7, #8]
  return(result);
 801f848:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801f84a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801f84c:	b672      	cpsid	i
}
 801f84e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801f850:	4b12      	ldr	r3, [pc, #72]	; (801f89c <UTIL_LPM_EnterLowPower+0x60>)
 801f852:	681b      	ldr	r3, [r3, #0]
 801f854:	2b00      	cmp	r3, #0
 801f856:	d006      	beq.n	801f866 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801f858:	4b11      	ldr	r3, [pc, #68]	; (801f8a0 <UTIL_LPM_EnterLowPower+0x64>)
 801f85a:	681b      	ldr	r3, [r3, #0]
 801f85c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801f85e:	4b10      	ldr	r3, [pc, #64]	; (801f8a0 <UTIL_LPM_EnterLowPower+0x64>)
 801f860:	685b      	ldr	r3, [r3, #4]
 801f862:	4798      	blx	r3
 801f864:	e010      	b.n	801f888 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801f866:	4b0f      	ldr	r3, [pc, #60]	; (801f8a4 <UTIL_LPM_EnterLowPower+0x68>)
 801f868:	681b      	ldr	r3, [r3, #0]
 801f86a:	2b00      	cmp	r3, #0
 801f86c:	d006      	beq.n	801f87c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801f86e:	4b0c      	ldr	r3, [pc, #48]	; (801f8a0 <UTIL_LPM_EnterLowPower+0x64>)
 801f870:	689b      	ldr	r3, [r3, #8]
 801f872:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801f874:	4b0a      	ldr	r3, [pc, #40]	; (801f8a0 <UTIL_LPM_EnterLowPower+0x64>)
 801f876:	68db      	ldr	r3, [r3, #12]
 801f878:	4798      	blx	r3
 801f87a:	e005      	b.n	801f888 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801f87c:	4b08      	ldr	r3, [pc, #32]	; (801f8a0 <UTIL_LPM_EnterLowPower+0x64>)
 801f87e:	691b      	ldr	r3, [r3, #16]
 801f880:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801f882:	4b07      	ldr	r3, [pc, #28]	; (801f8a0 <UTIL_LPM_EnterLowPower+0x64>)
 801f884:	695b      	ldr	r3, [r3, #20]
 801f886:	4798      	blx	r3
 801f888:	68fb      	ldr	r3, [r7, #12]
 801f88a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f88c:	687b      	ldr	r3, [r7, #4]
 801f88e:	f383 8810 	msr	PRIMASK, r3
}
 801f892:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801f894:	bf00      	nop
 801f896:	3710      	adds	r7, #16
 801f898:	46bd      	mov	sp, r7
 801f89a:	bd80      	pop	{r7, pc}
 801f89c:	20002548 	.word	0x20002548
 801f8a0:	08021990 	.word	0x08021990
 801f8a4:	2000254c 	.word	0x2000254c

0801f8a8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801f8a8:	b480      	push	{r7}
 801f8aa:	b087      	sub	sp, #28
 801f8ac:	af00      	add	r7, sp, #0
 801f8ae:	60f8      	str	r0, [r7, #12]
 801f8b0:	60b9      	str	r1, [r7, #8]
 801f8b2:	4613      	mov	r3, r2
 801f8b4:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801f8b6:	68fb      	ldr	r3, [r7, #12]
 801f8b8:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801f8ba:	68bb      	ldr	r3, [r7, #8]
 801f8bc:	613b      	str	r3, [r7, #16]

  while( size-- )
 801f8be:	e007      	b.n	801f8d0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801f8c0:	693a      	ldr	r2, [r7, #16]
 801f8c2:	1c53      	adds	r3, r2, #1
 801f8c4:	613b      	str	r3, [r7, #16]
 801f8c6:	697b      	ldr	r3, [r7, #20]
 801f8c8:	1c59      	adds	r1, r3, #1
 801f8ca:	6179      	str	r1, [r7, #20]
 801f8cc:	7812      	ldrb	r2, [r2, #0]
 801f8ce:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801f8d0:	88fb      	ldrh	r3, [r7, #6]
 801f8d2:	1e5a      	subs	r2, r3, #1
 801f8d4:	80fa      	strh	r2, [r7, #6]
 801f8d6:	2b00      	cmp	r3, #0
 801f8d8:	d1f2      	bne.n	801f8c0 <UTIL_MEM_cpy_8+0x18>
    }
}
 801f8da:	bf00      	nop
 801f8dc:	bf00      	nop
 801f8de:	371c      	adds	r7, #28
 801f8e0:	46bd      	mov	sp, r7
 801f8e2:	bc80      	pop	{r7}
 801f8e4:	4770      	bx	lr

0801f8e6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801f8e6:	b480      	push	{r7}
 801f8e8:	b085      	sub	sp, #20
 801f8ea:	af00      	add	r7, sp, #0
 801f8ec:	6078      	str	r0, [r7, #4]
 801f8ee:	460b      	mov	r3, r1
 801f8f0:	70fb      	strb	r3, [r7, #3]
 801f8f2:	4613      	mov	r3, r2
 801f8f4:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801f8f6:	687b      	ldr	r3, [r7, #4]
 801f8f8:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801f8fa:	e004      	b.n	801f906 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801f8fc:	68fb      	ldr	r3, [r7, #12]
 801f8fe:	1c5a      	adds	r2, r3, #1
 801f900:	60fa      	str	r2, [r7, #12]
 801f902:	78fa      	ldrb	r2, [r7, #3]
 801f904:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801f906:	883b      	ldrh	r3, [r7, #0]
 801f908:	1e5a      	subs	r2, r3, #1
 801f90a:	803a      	strh	r2, [r7, #0]
 801f90c:	2b00      	cmp	r3, #0
 801f90e:	d1f5      	bne.n	801f8fc <UTIL_MEM_set_8+0x16>
  }
}
 801f910:	bf00      	nop
 801f912:	bf00      	nop
 801f914:	3714      	adds	r7, #20
 801f916:	46bd      	mov	sp, r7
 801f918:	bc80      	pop	{r7}
 801f91a:	4770      	bx	lr

0801f91c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801f91c:	b082      	sub	sp, #8
 801f91e:	b480      	push	{r7}
 801f920:	b087      	sub	sp, #28
 801f922:	af00      	add	r7, sp, #0
 801f924:	60f8      	str	r0, [r7, #12]
 801f926:	1d38      	adds	r0, r7, #4
 801f928:	e880 0006 	stmia.w	r0, {r1, r2}
 801f92c:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801f92e:	2300      	movs	r3, #0
 801f930:	613b      	str	r3, [r7, #16]
 801f932:	2300      	movs	r3, #0
 801f934:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801f936:	687a      	ldr	r2, [r7, #4]
 801f938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f93a:	4413      	add	r3, r2
 801f93c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801f93e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801f942:	b29a      	uxth	r2, r3
 801f944:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801f948:	b29b      	uxth	r3, r3
 801f94a:	4413      	add	r3, r2
 801f94c:	b29b      	uxth	r3, r3
 801f94e:	b21b      	sxth	r3, r3
 801f950:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801f952:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801f95a:	db0a      	blt.n	801f972 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801f95c:	693b      	ldr	r3, [r7, #16]
 801f95e:	3301      	adds	r3, #1
 801f960:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801f962:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f966:	b29b      	uxth	r3, r3
 801f968:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801f96c:	b29b      	uxth	r3, r3
 801f96e:	b21b      	sxth	r3, r3
 801f970:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801f972:	68fb      	ldr	r3, [r7, #12]
 801f974:	461a      	mov	r2, r3
 801f976:	f107 0310 	add.w	r3, r7, #16
 801f97a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f97e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f982:	68f8      	ldr	r0, [r7, #12]
 801f984:	371c      	adds	r7, #28
 801f986:	46bd      	mov	sp, r7
 801f988:	bc80      	pop	{r7}
 801f98a:	b002      	add	sp, #8
 801f98c:	4770      	bx	lr

0801f98e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801f98e:	b082      	sub	sp, #8
 801f990:	b480      	push	{r7}
 801f992:	b087      	sub	sp, #28
 801f994:	af00      	add	r7, sp, #0
 801f996:	60f8      	str	r0, [r7, #12]
 801f998:	1d38      	adds	r0, r7, #4
 801f99a:	e880 0006 	stmia.w	r0, {r1, r2}
 801f99e:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801f9a0:	2300      	movs	r3, #0
 801f9a2:	613b      	str	r3, [r7, #16]
 801f9a4:	2300      	movs	r3, #0
 801f9a6:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801f9a8:	687a      	ldr	r2, [r7, #4]
 801f9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9ac:	1ad3      	subs	r3, r2, r3
 801f9ae:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801f9b0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801f9b4:	b29a      	uxth	r2, r3
 801f9b6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801f9ba:	b29b      	uxth	r3, r3
 801f9bc:	1ad3      	subs	r3, r2, r3
 801f9be:	b29b      	uxth	r3, r3
 801f9c0:	b21b      	sxth	r3, r3
 801f9c2:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801f9c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f9c8:	2b00      	cmp	r3, #0
 801f9ca:	da0a      	bge.n	801f9e2 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801f9cc:	693b      	ldr	r3, [r7, #16]
 801f9ce:	3b01      	subs	r3, #1
 801f9d0:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801f9d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f9d6:	b29b      	uxth	r3, r3
 801f9d8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801f9dc:	b29b      	uxth	r3, r3
 801f9de:	b21b      	sxth	r3, r3
 801f9e0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801f9e2:	68fb      	ldr	r3, [r7, #12]
 801f9e4:	461a      	mov	r2, r3
 801f9e6:	f107 0310 	add.w	r3, r7, #16
 801f9ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f9ee:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f9f2:	68f8      	ldr	r0, [r7, #12]
 801f9f4:	371c      	adds	r7, #28
 801f9f6:	46bd      	mov	sp, r7
 801f9f8:	bc80      	pop	{r7}
 801f9fa:	b002      	add	sp, #8
 801f9fc:	4770      	bx	lr
	...

0801fa00 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801fa00:	b580      	push	{r7, lr}
 801fa02:	b088      	sub	sp, #32
 801fa04:	af02      	add	r7, sp, #8
 801fa06:	463b      	mov	r3, r7
 801fa08:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801fa0c:	2300      	movs	r3, #0
 801fa0e:	60bb      	str	r3, [r7, #8]
 801fa10:	2300      	movs	r3, #0
 801fa12:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801fa14:	4b10      	ldr	r3, [pc, #64]	; (801fa58 <SysTimeSet+0x58>)
 801fa16:	691b      	ldr	r3, [r3, #16]
 801fa18:	f107 0208 	add.w	r2, r7, #8
 801fa1c:	3204      	adds	r2, #4
 801fa1e:	4610      	mov	r0, r2
 801fa20:	4798      	blx	r3
 801fa22:	4603      	mov	r3, r0
 801fa24:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801fa26:	f107 0010 	add.w	r0, r7, #16
 801fa2a:	68fb      	ldr	r3, [r7, #12]
 801fa2c:	9300      	str	r3, [sp, #0]
 801fa2e:	68bb      	ldr	r3, [r7, #8]
 801fa30:	463a      	mov	r2, r7
 801fa32:	ca06      	ldmia	r2, {r1, r2}
 801fa34:	f7ff ffab 	bl	801f98e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801fa38:	4b07      	ldr	r3, [pc, #28]	; (801fa58 <SysTimeSet+0x58>)
 801fa3a:	681b      	ldr	r3, [r3, #0]
 801fa3c:	693a      	ldr	r2, [r7, #16]
 801fa3e:	4610      	mov	r0, r2
 801fa40:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801fa42:	4b05      	ldr	r3, [pc, #20]	; (801fa58 <SysTimeSet+0x58>)
 801fa44:	689b      	ldr	r3, [r3, #8]
 801fa46:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801fa4a:	4610      	mov	r0, r2
 801fa4c:	4798      	blx	r3
}
 801fa4e:	bf00      	nop
 801fa50:	3718      	adds	r7, #24
 801fa52:	46bd      	mov	sp, r7
 801fa54:	bd80      	pop	{r7, pc}
 801fa56:	bf00      	nop
 801fa58:	08021a74 	.word	0x08021a74

0801fa5c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801fa5c:	b580      	push	{r7, lr}
 801fa5e:	b08a      	sub	sp, #40	; 0x28
 801fa60:	af02      	add	r7, sp, #8
 801fa62:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801fa64:	2300      	movs	r3, #0
 801fa66:	61bb      	str	r3, [r7, #24]
 801fa68:	2300      	movs	r3, #0
 801fa6a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801fa6c:	2300      	movs	r3, #0
 801fa6e:	613b      	str	r3, [r7, #16]
 801fa70:	2300      	movs	r3, #0
 801fa72:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801fa74:	4b14      	ldr	r3, [pc, #80]	; (801fac8 <SysTimeGet+0x6c>)
 801fa76:	691b      	ldr	r3, [r3, #16]
 801fa78:	f107 0218 	add.w	r2, r7, #24
 801fa7c:	3204      	adds	r2, #4
 801fa7e:	4610      	mov	r0, r2
 801fa80:	4798      	blx	r3
 801fa82:	4603      	mov	r3, r0
 801fa84:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801fa86:	4b10      	ldr	r3, [pc, #64]	; (801fac8 <SysTimeGet+0x6c>)
 801fa88:	68db      	ldr	r3, [r3, #12]
 801fa8a:	4798      	blx	r3
 801fa8c:	4603      	mov	r3, r0
 801fa8e:	b21b      	sxth	r3, r3
 801fa90:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801fa92:	4b0d      	ldr	r3, [pc, #52]	; (801fac8 <SysTimeGet+0x6c>)
 801fa94:	685b      	ldr	r3, [r3, #4]
 801fa96:	4798      	blx	r3
 801fa98:	4603      	mov	r3, r0
 801fa9a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801fa9c:	f107 0010 	add.w	r0, r7, #16
 801faa0:	69fb      	ldr	r3, [r7, #28]
 801faa2:	9300      	str	r3, [sp, #0]
 801faa4:	69bb      	ldr	r3, [r7, #24]
 801faa6:	f107 0208 	add.w	r2, r7, #8
 801faaa:	ca06      	ldmia	r2, {r1, r2}
 801faac:	f7ff ff36 	bl	801f91c <SysTimeAdd>

  return sysTime;
 801fab0:	687b      	ldr	r3, [r7, #4]
 801fab2:	461a      	mov	r2, r3
 801fab4:	f107 0310 	add.w	r3, r7, #16
 801fab8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801fabc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801fac0:	6878      	ldr	r0, [r7, #4]
 801fac2:	3720      	adds	r7, #32
 801fac4:	46bd      	mov	sp, r7
 801fac6:	bd80      	pop	{r7, pc}
 801fac8:	08021a74 	.word	0x08021a74

0801facc <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801facc:	b580      	push	{r7, lr}
 801face:	b084      	sub	sp, #16
 801fad0:	af00      	add	r7, sp, #0
 801fad2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801fad4:	2300      	movs	r3, #0
 801fad6:	60bb      	str	r3, [r7, #8]
 801fad8:	2300      	movs	r3, #0
 801fada:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801fadc:	4b0a      	ldr	r3, [pc, #40]	; (801fb08 <SysTimeGetMcuTime+0x3c>)
 801fade:	691b      	ldr	r3, [r3, #16]
 801fae0:	f107 0208 	add.w	r2, r7, #8
 801fae4:	3204      	adds	r2, #4
 801fae6:	4610      	mov	r0, r2
 801fae8:	4798      	blx	r3
 801faea:	4603      	mov	r3, r0
 801faec:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801faee:	687b      	ldr	r3, [r7, #4]
 801faf0:	461a      	mov	r2, r3
 801faf2:	f107 0308 	add.w	r3, r7, #8
 801faf6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801fafa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801fafe:	6878      	ldr	r0, [r7, #4]
 801fb00:	3710      	adds	r7, #16
 801fb02:	46bd      	mov	sp, r7
 801fb04:	bd80      	pop	{r7, pc}
 801fb06:	bf00      	nop
 801fb08:	08021a74 	.word	0x08021a74

0801fb0c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801fb0c:	b580      	push	{r7, lr}
 801fb0e:	b088      	sub	sp, #32
 801fb10:	af02      	add	r7, sp, #8
 801fb12:	463b      	mov	r3, r7
 801fb14:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801fb18:	4b0f      	ldr	r3, [pc, #60]	; (801fb58 <SysTimeToMs+0x4c>)
 801fb1a:	68db      	ldr	r3, [r3, #12]
 801fb1c:	4798      	blx	r3
 801fb1e:	4603      	mov	r3, r0
 801fb20:	b21b      	sxth	r3, r3
 801fb22:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801fb24:	4b0c      	ldr	r3, [pc, #48]	; (801fb58 <SysTimeToMs+0x4c>)
 801fb26:	685b      	ldr	r3, [r3, #4]
 801fb28:	4798      	blx	r3
 801fb2a:	4603      	mov	r3, r0
 801fb2c:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801fb2e:	f107 0008 	add.w	r0, r7, #8
 801fb32:	697b      	ldr	r3, [r7, #20]
 801fb34:	9300      	str	r3, [sp, #0]
 801fb36:	693b      	ldr	r3, [r7, #16]
 801fb38:	463a      	mov	r2, r7
 801fb3a:	ca06      	ldmia	r2, {r1, r2}
 801fb3c:	f7ff ff27 	bl	801f98e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801fb40:	68bb      	ldr	r3, [r7, #8]
 801fb42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801fb46:	fb02 f303 	mul.w	r3, r2, r3
 801fb4a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801fb4e:	4413      	add	r3, r2
}
 801fb50:	4618      	mov	r0, r3
 801fb52:	3718      	adds	r7, #24
 801fb54:	46bd      	mov	sp, r7
 801fb56:	bd80      	pop	{r7, pc}
 801fb58:	08021a74 	.word	0x08021a74

0801fb5c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801fb5c:	b580      	push	{r7, lr}
 801fb5e:	b08a      	sub	sp, #40	; 0x28
 801fb60:	af02      	add	r7, sp, #8
 801fb62:	6078      	str	r0, [r7, #4]
 801fb64:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801fb66:	683b      	ldr	r3, [r7, #0]
 801fb68:	4a19      	ldr	r2, [pc, #100]	; (801fbd0 <SysTimeFromMs+0x74>)
 801fb6a:	fba2 2303 	umull	r2, r3, r2, r3
 801fb6e:	099b      	lsrs	r3, r3, #6
 801fb70:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801fb72:	69fb      	ldr	r3, [r7, #28]
 801fb74:	617b      	str	r3, [r7, #20]
 801fb76:	683b      	ldr	r3, [r7, #0]
 801fb78:	b29a      	uxth	r2, r3
 801fb7a:	69fb      	ldr	r3, [r7, #28]
 801fb7c:	b29b      	uxth	r3, r3
 801fb7e:	4619      	mov	r1, r3
 801fb80:	0149      	lsls	r1, r1, #5
 801fb82:	1ac9      	subs	r1, r1, r3
 801fb84:	0089      	lsls	r1, r1, #2
 801fb86:	440b      	add	r3, r1
 801fb88:	00db      	lsls	r3, r3, #3
 801fb8a:	b29b      	uxth	r3, r3
 801fb8c:	1ad3      	subs	r3, r2, r3
 801fb8e:	b29b      	uxth	r3, r3
 801fb90:	b21b      	sxth	r3, r3
 801fb92:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801fb94:	f107 030c 	add.w	r3, r7, #12
 801fb98:	2200      	movs	r2, #0
 801fb9a:	601a      	str	r2, [r3, #0]
 801fb9c:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801fb9e:	4b0d      	ldr	r3, [pc, #52]	; (801fbd4 <SysTimeFromMs+0x78>)
 801fba0:	68db      	ldr	r3, [r3, #12]
 801fba2:	4798      	blx	r3
 801fba4:	4603      	mov	r3, r0
 801fba6:	b21b      	sxth	r3, r3
 801fba8:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801fbaa:	4b0a      	ldr	r3, [pc, #40]	; (801fbd4 <SysTimeFromMs+0x78>)
 801fbac:	685b      	ldr	r3, [r3, #4]
 801fbae:	4798      	blx	r3
 801fbb0:	4603      	mov	r3, r0
 801fbb2:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801fbb4:	6878      	ldr	r0, [r7, #4]
 801fbb6:	693b      	ldr	r3, [r7, #16]
 801fbb8:	9300      	str	r3, [sp, #0]
 801fbba:	68fb      	ldr	r3, [r7, #12]
 801fbbc:	f107 0214 	add.w	r2, r7, #20
 801fbc0:	ca06      	ldmia	r2, {r1, r2}
 801fbc2:	f7ff feab 	bl	801f91c <SysTimeAdd>
}
 801fbc6:	6878      	ldr	r0, [r7, #4]
 801fbc8:	3720      	adds	r7, #32
 801fbca:	46bd      	mov	sp, r7
 801fbcc:	bd80      	pop	{r7, pc}
 801fbce:	bf00      	nop
 801fbd0:	10624dd3 	.word	0x10624dd3
 801fbd4:	08021a74 	.word	0x08021a74

0801fbd8 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801fbd8:	b480      	push	{r7}
 801fbda:	b085      	sub	sp, #20
 801fbdc:	af00      	add	r7, sp, #0
 801fbde:	6078      	str	r0, [r7, #4]
  int i = 0;
 801fbe0:	2300      	movs	r3, #0
 801fbe2:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801fbe4:	e00e      	b.n	801fc04 <ee_skip_atoi+0x2c>
 801fbe6:	68fa      	ldr	r2, [r7, #12]
 801fbe8:	4613      	mov	r3, r2
 801fbea:	009b      	lsls	r3, r3, #2
 801fbec:	4413      	add	r3, r2
 801fbee:	005b      	lsls	r3, r3, #1
 801fbf0:	4618      	mov	r0, r3
 801fbf2:	687b      	ldr	r3, [r7, #4]
 801fbf4:	681b      	ldr	r3, [r3, #0]
 801fbf6:	1c59      	adds	r1, r3, #1
 801fbf8:	687a      	ldr	r2, [r7, #4]
 801fbfa:	6011      	str	r1, [r2, #0]
 801fbfc:	781b      	ldrb	r3, [r3, #0]
 801fbfe:	4403      	add	r3, r0
 801fc00:	3b30      	subs	r3, #48	; 0x30
 801fc02:	60fb      	str	r3, [r7, #12]
 801fc04:	687b      	ldr	r3, [r7, #4]
 801fc06:	681b      	ldr	r3, [r3, #0]
 801fc08:	781b      	ldrb	r3, [r3, #0]
 801fc0a:	2b2f      	cmp	r3, #47	; 0x2f
 801fc0c:	d904      	bls.n	801fc18 <ee_skip_atoi+0x40>
 801fc0e:	687b      	ldr	r3, [r7, #4]
 801fc10:	681b      	ldr	r3, [r3, #0]
 801fc12:	781b      	ldrb	r3, [r3, #0]
 801fc14:	2b39      	cmp	r3, #57	; 0x39
 801fc16:	d9e6      	bls.n	801fbe6 <ee_skip_atoi+0xe>
  return i;
 801fc18:	68fb      	ldr	r3, [r7, #12]
}
 801fc1a:	4618      	mov	r0, r3
 801fc1c:	3714      	adds	r7, #20
 801fc1e:	46bd      	mov	sp, r7
 801fc20:	bc80      	pop	{r7}
 801fc22:	4770      	bx	lr

0801fc24 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801fc24:	b480      	push	{r7}
 801fc26:	b099      	sub	sp, #100	; 0x64
 801fc28:	af00      	add	r7, sp, #0
 801fc2a:	60f8      	str	r0, [r7, #12]
 801fc2c:	60b9      	str	r1, [r7, #8]
 801fc2e:	607a      	str	r2, [r7, #4]
 801fc30:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801fc32:	4b71      	ldr	r3, [pc, #452]	; (801fdf8 <ee_number+0x1d4>)
 801fc34:	681b      	ldr	r3, [r3, #0]
 801fc36:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801fc38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801fc3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fc3e:	2b00      	cmp	r3, #0
 801fc40:	d002      	beq.n	801fc48 <ee_number+0x24>
 801fc42:	4b6e      	ldr	r3, [pc, #440]	; (801fdfc <ee_number+0x1d8>)
 801fc44:	681b      	ldr	r3, [r3, #0]
 801fc46:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801fc48:	683b      	ldr	r3, [r7, #0]
 801fc4a:	2b01      	cmp	r3, #1
 801fc4c:	dd02      	ble.n	801fc54 <ee_number+0x30>
 801fc4e:	683b      	ldr	r3, [r7, #0]
 801fc50:	2b24      	cmp	r3, #36	; 0x24
 801fc52:	dd01      	ble.n	801fc58 <ee_number+0x34>
 801fc54:	2300      	movs	r3, #0
 801fc56:	e0ca      	b.n	801fdee <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801fc58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801fc5a:	f003 0301 	and.w	r3, r3, #1
 801fc5e:	2b00      	cmp	r3, #0
 801fc60:	d001      	beq.n	801fc66 <ee_number+0x42>
 801fc62:	2330      	movs	r3, #48	; 0x30
 801fc64:	e000      	b.n	801fc68 <ee_number+0x44>
 801fc66:	2320      	movs	r3, #32
 801fc68:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801fc6c:	2300      	movs	r3, #0
 801fc6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801fc72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801fc74:	f003 0302 	and.w	r3, r3, #2
 801fc78:	2b00      	cmp	r3, #0
 801fc7a:	d00b      	beq.n	801fc94 <ee_number+0x70>
  {
    if (num < 0)
 801fc7c:	687b      	ldr	r3, [r7, #4]
 801fc7e:	2b00      	cmp	r3, #0
 801fc80:	da08      	bge.n	801fc94 <ee_number+0x70>
    {
      sign = '-';
 801fc82:	232d      	movs	r3, #45	; 0x2d
 801fc84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801fc88:	687b      	ldr	r3, [r7, #4]
 801fc8a:	425b      	negs	r3, r3
 801fc8c:	607b      	str	r3, [r7, #4]
      size--;
 801fc8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801fc90:	3b01      	subs	r3, #1
 801fc92:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801fc94:	2300      	movs	r3, #0
 801fc96:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801fc98:	687b      	ldr	r3, [r7, #4]
 801fc9a:	2b00      	cmp	r3, #0
 801fc9c:	d11e      	bne.n	801fcdc <ee_number+0xb8>
    tmp[i++] = '0';
 801fc9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fca0:	1c5a      	adds	r2, r3, #1
 801fca2:	657a      	str	r2, [r7, #84]	; 0x54
 801fca4:	3360      	adds	r3, #96	; 0x60
 801fca6:	443b      	add	r3, r7
 801fca8:	2230      	movs	r2, #48	; 0x30
 801fcaa:	f803 2c50 	strb.w	r2, [r3, #-80]
 801fcae:	e018      	b.n	801fce2 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801fcb0:	687b      	ldr	r3, [r7, #4]
 801fcb2:	683a      	ldr	r2, [r7, #0]
 801fcb4:	fbb3 f1f2 	udiv	r1, r3, r2
 801fcb8:	fb01 f202 	mul.w	r2, r1, r2
 801fcbc:	1a9b      	subs	r3, r3, r2
 801fcbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801fcc0:	441a      	add	r2, r3
 801fcc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fcc4:	1c59      	adds	r1, r3, #1
 801fcc6:	6579      	str	r1, [r7, #84]	; 0x54
 801fcc8:	7812      	ldrb	r2, [r2, #0]
 801fcca:	3360      	adds	r3, #96	; 0x60
 801fccc:	443b      	add	r3, r7
 801fcce:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801fcd2:	687a      	ldr	r2, [r7, #4]
 801fcd4:	683b      	ldr	r3, [r7, #0]
 801fcd6:	fbb2 f3f3 	udiv	r3, r2, r3
 801fcda:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801fcdc:	687b      	ldr	r3, [r7, #4]
 801fcde:	2b00      	cmp	r3, #0
 801fce0:	d1e6      	bne.n	801fcb0 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801fce2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801fce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fce6:	429a      	cmp	r2, r3
 801fce8:	dd01      	ble.n	801fcee <ee_number+0xca>
 801fcea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fcec:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801fcee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801fcf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fcf2:	1ad3      	subs	r3, r2, r3
 801fcf4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801fcf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801fcf8:	f003 0301 	and.w	r3, r3, #1
 801fcfc:	2b00      	cmp	r3, #0
 801fcfe:	d112      	bne.n	801fd26 <ee_number+0x102>
 801fd00:	e00c      	b.n	801fd1c <ee_number+0xf8>
 801fd02:	68fb      	ldr	r3, [r7, #12]
 801fd04:	1c5a      	adds	r2, r3, #1
 801fd06:	60fa      	str	r2, [r7, #12]
 801fd08:	2220      	movs	r2, #32
 801fd0a:	701a      	strb	r2, [r3, #0]
 801fd0c:	68bb      	ldr	r3, [r7, #8]
 801fd0e:	3b01      	subs	r3, #1
 801fd10:	60bb      	str	r3, [r7, #8]
 801fd12:	68bb      	ldr	r3, [r7, #8]
 801fd14:	2b00      	cmp	r3, #0
 801fd16:	d101      	bne.n	801fd1c <ee_number+0xf8>
 801fd18:	68fb      	ldr	r3, [r7, #12]
 801fd1a:	e068      	b.n	801fdee <ee_number+0x1ca>
 801fd1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801fd1e:	1e5a      	subs	r2, r3, #1
 801fd20:	66ba      	str	r2, [r7, #104]	; 0x68
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	dced      	bgt.n	801fd02 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801fd26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801fd2a:	2b00      	cmp	r3, #0
 801fd2c:	d01b      	beq.n	801fd66 <ee_number+0x142>
 801fd2e:	68fb      	ldr	r3, [r7, #12]
 801fd30:	1c5a      	adds	r2, r3, #1
 801fd32:	60fa      	str	r2, [r7, #12]
 801fd34:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801fd38:	701a      	strb	r2, [r3, #0]
 801fd3a:	68bb      	ldr	r3, [r7, #8]
 801fd3c:	3b01      	subs	r3, #1
 801fd3e:	60bb      	str	r3, [r7, #8]
 801fd40:	68bb      	ldr	r3, [r7, #8]
 801fd42:	2b00      	cmp	r3, #0
 801fd44:	d10f      	bne.n	801fd66 <ee_number+0x142>
 801fd46:	68fb      	ldr	r3, [r7, #12]
 801fd48:	e051      	b.n	801fdee <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801fd4a:	68fb      	ldr	r3, [r7, #12]
 801fd4c:	1c5a      	adds	r2, r3, #1
 801fd4e:	60fa      	str	r2, [r7, #12]
 801fd50:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801fd54:	701a      	strb	r2, [r3, #0]
 801fd56:	68bb      	ldr	r3, [r7, #8]
 801fd58:	3b01      	subs	r3, #1
 801fd5a:	60bb      	str	r3, [r7, #8]
 801fd5c:	68bb      	ldr	r3, [r7, #8]
 801fd5e:	2b00      	cmp	r3, #0
 801fd60:	d101      	bne.n	801fd66 <ee_number+0x142>
 801fd62:	68fb      	ldr	r3, [r7, #12]
 801fd64:	e043      	b.n	801fdee <ee_number+0x1ca>
 801fd66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801fd68:	1e5a      	subs	r2, r3, #1
 801fd6a:	66ba      	str	r2, [r7, #104]	; 0x68
 801fd6c:	2b00      	cmp	r3, #0
 801fd6e:	dcec      	bgt.n	801fd4a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801fd70:	e00c      	b.n	801fd8c <ee_number+0x168>
 801fd72:	68fb      	ldr	r3, [r7, #12]
 801fd74:	1c5a      	adds	r2, r3, #1
 801fd76:	60fa      	str	r2, [r7, #12]
 801fd78:	2230      	movs	r2, #48	; 0x30
 801fd7a:	701a      	strb	r2, [r3, #0]
 801fd7c:	68bb      	ldr	r3, [r7, #8]
 801fd7e:	3b01      	subs	r3, #1
 801fd80:	60bb      	str	r3, [r7, #8]
 801fd82:	68bb      	ldr	r3, [r7, #8]
 801fd84:	2b00      	cmp	r3, #0
 801fd86:	d101      	bne.n	801fd8c <ee_number+0x168>
 801fd88:	68fb      	ldr	r3, [r7, #12]
 801fd8a:	e030      	b.n	801fdee <ee_number+0x1ca>
 801fd8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fd8e:	1e5a      	subs	r2, r3, #1
 801fd90:	66fa      	str	r2, [r7, #108]	; 0x6c
 801fd92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801fd94:	429a      	cmp	r2, r3
 801fd96:	dbec      	blt.n	801fd72 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801fd98:	e010      	b.n	801fdbc <ee_number+0x198>
 801fd9a:	68fb      	ldr	r3, [r7, #12]
 801fd9c:	1c5a      	adds	r2, r3, #1
 801fd9e:	60fa      	str	r2, [r7, #12]
 801fda0:	f107 0110 	add.w	r1, r7, #16
 801fda4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801fda6:	440a      	add	r2, r1
 801fda8:	7812      	ldrb	r2, [r2, #0]
 801fdaa:	701a      	strb	r2, [r3, #0]
 801fdac:	68bb      	ldr	r3, [r7, #8]
 801fdae:	3b01      	subs	r3, #1
 801fdb0:	60bb      	str	r3, [r7, #8]
 801fdb2:	68bb      	ldr	r3, [r7, #8]
 801fdb4:	2b00      	cmp	r3, #0
 801fdb6:	d101      	bne.n	801fdbc <ee_number+0x198>
 801fdb8:	68fb      	ldr	r3, [r7, #12]
 801fdba:	e018      	b.n	801fdee <ee_number+0x1ca>
 801fdbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fdbe:	1e5a      	subs	r2, r3, #1
 801fdc0:	657a      	str	r2, [r7, #84]	; 0x54
 801fdc2:	2b00      	cmp	r3, #0
 801fdc4:	dce9      	bgt.n	801fd9a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801fdc6:	e00c      	b.n	801fde2 <ee_number+0x1be>
 801fdc8:	68fb      	ldr	r3, [r7, #12]
 801fdca:	1c5a      	adds	r2, r3, #1
 801fdcc:	60fa      	str	r2, [r7, #12]
 801fdce:	2220      	movs	r2, #32
 801fdd0:	701a      	strb	r2, [r3, #0]
 801fdd2:	68bb      	ldr	r3, [r7, #8]
 801fdd4:	3b01      	subs	r3, #1
 801fdd6:	60bb      	str	r3, [r7, #8]
 801fdd8:	68bb      	ldr	r3, [r7, #8]
 801fdda:	2b00      	cmp	r3, #0
 801fddc:	d101      	bne.n	801fde2 <ee_number+0x1be>
 801fdde:	68fb      	ldr	r3, [r7, #12]
 801fde0:	e005      	b.n	801fdee <ee_number+0x1ca>
 801fde2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801fde4:	1e5a      	subs	r2, r3, #1
 801fde6:	66ba      	str	r2, [r7, #104]	; 0x68
 801fde8:	2b00      	cmp	r3, #0
 801fdea:	dced      	bgt.n	801fdc8 <ee_number+0x1a4>

  return str;
 801fdec:	68fb      	ldr	r3, [r7, #12]
}
 801fdee:	4618      	mov	r0, r3
 801fdf0:	3764      	adds	r7, #100	; 0x64
 801fdf2:	46bd      	mov	sp, r7
 801fdf4:	bc80      	pop	{r7}
 801fdf6:	4770      	bx	lr
 801fdf8:	20000170 	.word	0x20000170
 801fdfc:	20000174 	.word	0x20000174

0801fe00 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801fe00:	b580      	push	{r7, lr}
 801fe02:	b092      	sub	sp, #72	; 0x48
 801fe04:	af04      	add	r7, sp, #16
 801fe06:	60f8      	str	r0, [r7, #12]
 801fe08:	60b9      	str	r1, [r7, #8]
 801fe0a:	607a      	str	r2, [r7, #4]
 801fe0c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801fe0e:	68bb      	ldr	r3, [r7, #8]
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	dc01      	bgt.n	801fe18 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801fe14:	2300      	movs	r3, #0
 801fe16:	e142      	b.n	802009e <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801fe18:	68fb      	ldr	r3, [r7, #12]
 801fe1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801fe1c:	e12a      	b.n	8020074 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801fe1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fe20:	68fb      	ldr	r3, [r7, #12]
 801fe22:	1ad2      	subs	r2, r2, r3
 801fe24:	68bb      	ldr	r3, [r7, #8]
 801fe26:	3b01      	subs	r3, #1
 801fe28:	429a      	cmp	r2, r3
 801fe2a:	f280 8131 	bge.w	8020090 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801fe2e:	687b      	ldr	r3, [r7, #4]
 801fe30:	781b      	ldrb	r3, [r3, #0]
 801fe32:	2b25      	cmp	r3, #37	; 0x25
 801fe34:	d006      	beq.n	801fe44 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801fe36:	687a      	ldr	r2, [r7, #4]
 801fe38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe3a:	1c59      	adds	r1, r3, #1
 801fe3c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801fe3e:	7812      	ldrb	r2, [r2, #0]
 801fe40:	701a      	strb	r2, [r3, #0]
      continue;
 801fe42:	e114      	b.n	802006e <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 801fe44:	2300      	movs	r3, #0
 801fe46:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	3301      	adds	r3, #1
 801fe4c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801fe4e:	687b      	ldr	r3, [r7, #4]
 801fe50:	781b      	ldrb	r3, [r3, #0]
 801fe52:	2b30      	cmp	r3, #48	; 0x30
 801fe54:	d103      	bne.n	801fe5e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801fe56:	6a3b      	ldr	r3, [r7, #32]
 801fe58:	f043 0301 	orr.w	r3, r3, #1
 801fe5c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801fe5e:	f04f 33ff 	mov.w	r3, #4294967295
 801fe62:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801fe64:	687b      	ldr	r3, [r7, #4]
 801fe66:	781b      	ldrb	r3, [r3, #0]
 801fe68:	2b2f      	cmp	r3, #47	; 0x2f
 801fe6a:	d908      	bls.n	801fe7e <tiny_vsnprintf_like+0x7e>
 801fe6c:	687b      	ldr	r3, [r7, #4]
 801fe6e:	781b      	ldrb	r3, [r3, #0]
 801fe70:	2b39      	cmp	r3, #57	; 0x39
 801fe72:	d804      	bhi.n	801fe7e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801fe74:	1d3b      	adds	r3, r7, #4
 801fe76:	4618      	mov	r0, r3
 801fe78:	f7ff feae 	bl	801fbd8 <ee_skip_atoi>
 801fe7c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801fe7e:	f04f 33ff 	mov.w	r3, #4294967295
 801fe82:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801fe84:	f04f 33ff 	mov.w	r3, #4294967295
 801fe88:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801fe8a:	230a      	movs	r3, #10
 801fe8c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801fe8e:	687b      	ldr	r3, [r7, #4]
 801fe90:	781b      	ldrb	r3, [r3, #0]
 801fe92:	3b58      	subs	r3, #88	; 0x58
 801fe94:	2b20      	cmp	r3, #32
 801fe96:	f200 8094 	bhi.w	801ffc2 <tiny_vsnprintf_like+0x1c2>
 801fe9a:	a201      	add	r2, pc, #4	; (adr r2, 801fea0 <tiny_vsnprintf_like+0xa0>)
 801fe9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fea0:	0801ffab 	.word	0x0801ffab
 801fea4:	0801ffc3 	.word	0x0801ffc3
 801fea8:	0801ffc3 	.word	0x0801ffc3
 801feac:	0801ffc3 	.word	0x0801ffc3
 801feb0:	0801ffc3 	.word	0x0801ffc3
 801feb4:	0801ffc3 	.word	0x0801ffc3
 801feb8:	0801ffc3 	.word	0x0801ffc3
 801febc:	0801ffc3 	.word	0x0801ffc3
 801fec0:	0801ffc3 	.word	0x0801ffc3
 801fec4:	0801ffc3 	.word	0x0801ffc3
 801fec8:	0801ffc3 	.word	0x0801ffc3
 801fecc:	0801ff2f 	.word	0x0801ff2f
 801fed0:	0801ffb9 	.word	0x0801ffb9
 801fed4:	0801ffc3 	.word	0x0801ffc3
 801fed8:	0801ffc3 	.word	0x0801ffc3
 801fedc:	0801ffc3 	.word	0x0801ffc3
 801fee0:	0801ffc3 	.word	0x0801ffc3
 801fee4:	0801ffb9 	.word	0x0801ffb9
 801fee8:	0801ffc3 	.word	0x0801ffc3
 801feec:	0801ffc3 	.word	0x0801ffc3
 801fef0:	0801ffc3 	.word	0x0801ffc3
 801fef4:	0801ffc3 	.word	0x0801ffc3
 801fef8:	0801ffc3 	.word	0x0801ffc3
 801fefc:	0801ffc3 	.word	0x0801ffc3
 801ff00:	0801ffc3 	.word	0x0801ffc3
 801ff04:	0801ffc3 	.word	0x0801ffc3
 801ff08:	0801ffc3 	.word	0x0801ffc3
 801ff0c:	0801ff4f 	.word	0x0801ff4f
 801ff10:	0801ffc3 	.word	0x0801ffc3
 801ff14:	0802000f 	.word	0x0802000f
 801ff18:	0801ffc3 	.word	0x0801ffc3
 801ff1c:	0801ffc3 	.word	0x0801ffc3
 801ff20:	0801ffb3 	.word	0x0801ffb3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801ff24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff26:	1c5a      	adds	r2, r3, #1
 801ff28:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ff2a:	2220      	movs	r2, #32
 801ff2c:	701a      	strb	r2, [r3, #0]
 801ff2e:	69fb      	ldr	r3, [r7, #28]
 801ff30:	3b01      	subs	r3, #1
 801ff32:	61fb      	str	r3, [r7, #28]
 801ff34:	69fb      	ldr	r3, [r7, #28]
 801ff36:	2b00      	cmp	r3, #0
 801ff38:	dcf4      	bgt.n	801ff24 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801ff3a:	683b      	ldr	r3, [r7, #0]
 801ff3c:	1d1a      	adds	r2, r3, #4
 801ff3e:	603a      	str	r2, [r7, #0]
 801ff40:	6819      	ldr	r1, [r3, #0]
 801ff42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff44:	1c5a      	adds	r2, r3, #1
 801ff46:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ff48:	b2ca      	uxtb	r2, r1
 801ff4a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801ff4c:	e08f      	b.n	802006e <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801ff4e:	683b      	ldr	r3, [r7, #0]
 801ff50:	1d1a      	adds	r2, r3, #4
 801ff52:	603a      	str	r2, [r7, #0]
 801ff54:	681b      	ldr	r3, [r3, #0]
 801ff56:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801ff58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ff5a:	2b00      	cmp	r3, #0
 801ff5c:	d101      	bne.n	801ff62 <tiny_vsnprintf_like+0x162>
 801ff5e:	4b52      	ldr	r3, [pc, #328]	; (80200a8 <tiny_vsnprintf_like+0x2a8>)
 801ff60:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801ff62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ff64:	f7e0 f908 	bl	8000178 <strlen>
 801ff68:	4603      	mov	r3, r0
 801ff6a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801ff6c:	e004      	b.n	801ff78 <tiny_vsnprintf_like+0x178>
 801ff6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff70:	1c5a      	adds	r2, r3, #1
 801ff72:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ff74:	2220      	movs	r2, #32
 801ff76:	701a      	strb	r2, [r3, #0]
 801ff78:	69fb      	ldr	r3, [r7, #28]
 801ff7a:	1e5a      	subs	r2, r3, #1
 801ff7c:	61fa      	str	r2, [r7, #28]
 801ff7e:	693a      	ldr	r2, [r7, #16]
 801ff80:	429a      	cmp	r2, r3
 801ff82:	dbf4      	blt.n	801ff6e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801ff84:	2300      	movs	r3, #0
 801ff86:	62bb      	str	r3, [r7, #40]	; 0x28
 801ff88:	e00a      	b.n	801ffa0 <tiny_vsnprintf_like+0x1a0>
 801ff8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ff8c:	1c53      	adds	r3, r2, #1
 801ff8e:	627b      	str	r3, [r7, #36]	; 0x24
 801ff90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff92:	1c59      	adds	r1, r3, #1
 801ff94:	62f9      	str	r1, [r7, #44]	; 0x2c
 801ff96:	7812      	ldrb	r2, [r2, #0]
 801ff98:	701a      	strb	r2, [r3, #0]
 801ff9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ff9c:	3301      	adds	r3, #1
 801ff9e:	62bb      	str	r3, [r7, #40]	; 0x28
 801ffa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ffa2:	693b      	ldr	r3, [r7, #16]
 801ffa4:	429a      	cmp	r2, r3
 801ffa6:	dbf0      	blt.n	801ff8a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801ffa8:	e061      	b.n	802006e <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801ffaa:	6a3b      	ldr	r3, [r7, #32]
 801ffac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ffb0:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801ffb2:	2310      	movs	r3, #16
 801ffb4:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801ffb6:	e02d      	b.n	8020014 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801ffb8:	6a3b      	ldr	r3, [r7, #32]
 801ffba:	f043 0302 	orr.w	r3, r3, #2
 801ffbe:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801ffc0:	e025      	b.n	802000e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801ffc2:	687b      	ldr	r3, [r7, #4]
 801ffc4:	781b      	ldrb	r3, [r3, #0]
 801ffc6:	2b25      	cmp	r3, #37	; 0x25
 801ffc8:	d004      	beq.n	801ffd4 <tiny_vsnprintf_like+0x1d4>
 801ffca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ffcc:	1c5a      	adds	r2, r3, #1
 801ffce:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ffd0:	2225      	movs	r2, #37	; 0x25
 801ffd2:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801ffd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ffd6:	68fb      	ldr	r3, [r7, #12]
 801ffd8:	1ad2      	subs	r2, r2, r3
 801ffda:	68bb      	ldr	r3, [r7, #8]
 801ffdc:	3b01      	subs	r3, #1
 801ffde:	429a      	cmp	r2, r3
 801ffe0:	da17      	bge.n	8020012 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801ffe2:	687b      	ldr	r3, [r7, #4]
 801ffe4:	781b      	ldrb	r3, [r3, #0]
 801ffe6:	2b00      	cmp	r3, #0
 801ffe8:	d006      	beq.n	801fff8 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801ffea:	687a      	ldr	r2, [r7, #4]
 801ffec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ffee:	1c59      	adds	r1, r3, #1
 801fff0:	62f9      	str	r1, [r7, #44]	; 0x2c
 801fff2:	7812      	ldrb	r2, [r2, #0]
 801fff4:	701a      	strb	r2, [r3, #0]
 801fff6:	e002      	b.n	801fffe <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801fff8:	687b      	ldr	r3, [r7, #4]
 801fffa:	3b01      	subs	r3, #1
 801fffc:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801fffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020000:	68fb      	ldr	r3, [r7, #12]
 8020002:	1ad2      	subs	r2, r2, r3
 8020004:	68bb      	ldr	r3, [r7, #8]
 8020006:	3b01      	subs	r3, #1
 8020008:	429a      	cmp	r2, r3
 802000a:	db2f      	blt.n	802006c <tiny_vsnprintf_like+0x26c>
 802000c:	e002      	b.n	8020014 <tiny_vsnprintf_like+0x214>
        break;
 802000e:	bf00      	nop
 8020010:	e000      	b.n	8020014 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 8020012:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 8020014:	697b      	ldr	r3, [r7, #20]
 8020016:	2b6c      	cmp	r3, #108	; 0x6c
 8020018:	d105      	bne.n	8020026 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 802001a:	683b      	ldr	r3, [r7, #0]
 802001c:	1d1a      	adds	r2, r3, #4
 802001e:	603a      	str	r2, [r7, #0]
 8020020:	681b      	ldr	r3, [r3, #0]
 8020022:	637b      	str	r3, [r7, #52]	; 0x34
 8020024:	e00f      	b.n	8020046 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 8020026:	6a3b      	ldr	r3, [r7, #32]
 8020028:	f003 0302 	and.w	r3, r3, #2
 802002c:	2b00      	cmp	r3, #0
 802002e:	d005      	beq.n	802003c <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 8020030:	683b      	ldr	r3, [r7, #0]
 8020032:	1d1a      	adds	r2, r3, #4
 8020034:	603a      	str	r2, [r7, #0]
 8020036:	681b      	ldr	r3, [r3, #0]
 8020038:	637b      	str	r3, [r7, #52]	; 0x34
 802003a:	e004      	b.n	8020046 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 802003c:	683b      	ldr	r3, [r7, #0]
 802003e:	1d1a      	adds	r2, r3, #4
 8020040:	603a      	str	r2, [r7, #0]
 8020042:	681b      	ldr	r3, [r3, #0]
 8020044:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8020046:	68bb      	ldr	r3, [r7, #8]
 8020048:	1e5a      	subs	r2, r3, #1
 802004a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802004c:	68fb      	ldr	r3, [r7, #12]
 802004e:	1acb      	subs	r3, r1, r3
 8020050:	1ad1      	subs	r1, r2, r3
 8020052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020054:	6a3b      	ldr	r3, [r7, #32]
 8020056:	9302      	str	r3, [sp, #8]
 8020058:	69bb      	ldr	r3, [r7, #24]
 802005a:	9301      	str	r3, [sp, #4]
 802005c:	69fb      	ldr	r3, [r7, #28]
 802005e:	9300      	str	r3, [sp, #0]
 8020060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020064:	f7ff fdde 	bl	801fc24 <ee_number>
 8020068:	62f8      	str	r0, [r7, #44]	; 0x2c
 802006a:	e000      	b.n	802006e <tiny_vsnprintf_like+0x26e>
        continue;
 802006c:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 802006e:	687b      	ldr	r3, [r7, #4]
 8020070:	3301      	adds	r3, #1
 8020072:	607b      	str	r3, [r7, #4]
 8020074:	687b      	ldr	r3, [r7, #4]
 8020076:	781b      	ldrb	r3, [r3, #0]
 8020078:	2b00      	cmp	r3, #0
 802007a:	f47f aed0 	bne.w	801fe1e <tiny_vsnprintf_like+0x1e>
 802007e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020080:	68fb      	ldr	r3, [r7, #12]
 8020082:	1ad2      	subs	r2, r2, r3
 8020084:	68bb      	ldr	r3, [r7, #8]
 8020086:	3b01      	subs	r3, #1
 8020088:	429a      	cmp	r2, r3
 802008a:	f6bf aec8 	bge.w	801fe1e <tiny_vsnprintf_like+0x1e>
 802008e:	e000      	b.n	8020092 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 8020090:	bf00      	nop
  }

  *str = '\0';
 8020092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020094:	2200      	movs	r2, #0
 8020096:	701a      	strb	r2, [r3, #0]
  return str - buf;
 8020098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802009a:	68fb      	ldr	r3, [r7, #12]
 802009c:	1ad3      	subs	r3, r2, r3
}
 802009e:	4618      	mov	r0, r3
 80200a0:	3738      	adds	r7, #56	; 0x38
 80200a2:	46bd      	mov	sp, r7
 80200a4:	bd80      	pop	{r7, pc}
 80200a6:	bf00      	nop
 80200a8:	08021988 	.word	0x08021988

080200ac <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80200ac:	b580      	push	{r7, lr}
 80200ae:	b090      	sub	sp, #64	; 0x40
 80200b0:	af00      	add	r7, sp, #0
 80200b2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80200b4:	4b73      	ldr	r3, [pc, #460]	; (8020284 <UTIL_SEQ_Run+0x1d8>)
 80200b6:	681b      	ldr	r3, [r3, #0]
 80200b8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80200ba:	4b72      	ldr	r3, [pc, #456]	; (8020284 <UTIL_SEQ_Run+0x1d8>)
 80200bc:	681a      	ldr	r2, [r3, #0]
 80200be:	687b      	ldr	r3, [r7, #4]
 80200c0:	4013      	ands	r3, r2
 80200c2:	4a70      	ldr	r2, [pc, #448]	; (8020284 <UTIL_SEQ_Run+0x1d8>)
 80200c4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80200c6:	4b70      	ldr	r3, [pc, #448]	; (8020288 <UTIL_SEQ_Run+0x1dc>)
 80200c8:	681b      	ldr	r3, [r3, #0]
 80200ca:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80200cc:	4b6f      	ldr	r3, [pc, #444]	; (802028c <UTIL_SEQ_Run+0x1e0>)
 80200ce:	681b      	ldr	r3, [r3, #0]
 80200d0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80200d2:	4b6f      	ldr	r3, [pc, #444]	; (8020290 <UTIL_SEQ_Run+0x1e4>)
 80200d4:	681b      	ldr	r3, [r3, #0]
 80200d6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 80200d8:	4b6e      	ldr	r3, [pc, #440]	; (8020294 <UTIL_SEQ_Run+0x1e8>)
 80200da:	681b      	ldr	r3, [r3, #0]
 80200dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80200de:	e08d      	b.n	80201fc <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80200e0:	2300      	movs	r3, #0
 80200e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80200e4:	e002      	b.n	80200ec <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80200e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80200e8:	3301      	adds	r3, #1
 80200ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80200ec:	4a6a      	ldr	r2, [pc, #424]	; (8020298 <UTIL_SEQ_Run+0x1ec>)
 80200ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80200f0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80200f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200f6:	401a      	ands	r2, r3
 80200f8:	4b62      	ldr	r3, [pc, #392]	; (8020284 <UTIL_SEQ_Run+0x1d8>)
 80200fa:	681b      	ldr	r3, [r3, #0]
 80200fc:	4013      	ands	r3, r2
 80200fe:	2b00      	cmp	r3, #0
 8020100:	d0f1      	beq.n	80200e6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8020102:	4a65      	ldr	r2, [pc, #404]	; (8020298 <UTIL_SEQ_Run+0x1ec>)
 8020104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020106:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 802010a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802010c:	401a      	ands	r2, r3
 802010e:	4b5d      	ldr	r3, [pc, #372]	; (8020284 <UTIL_SEQ_Run+0x1d8>)
 8020110:	681b      	ldr	r3, [r3, #0]
 8020112:	4013      	ands	r3, r2
 8020114:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8020116:	4a60      	ldr	r2, [pc, #384]	; (8020298 <UTIL_SEQ_Run+0x1ec>)
 8020118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802011a:	00db      	lsls	r3, r3, #3
 802011c:	4413      	add	r3, r2
 802011e:	685a      	ldr	r2, [r3, #4]
 8020120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020122:	4013      	ands	r3, r2
 8020124:	2b00      	cmp	r3, #0
 8020126:	d106      	bne.n	8020136 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8020128:	4a5b      	ldr	r2, [pc, #364]	; (8020298 <UTIL_SEQ_Run+0x1ec>)
 802012a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802012c:	00db      	lsls	r3, r3, #3
 802012e:	4413      	add	r3, r2
 8020130:	f04f 32ff 	mov.w	r2, #4294967295
 8020134:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8020136:	4a58      	ldr	r2, [pc, #352]	; (8020298 <UTIL_SEQ_Run+0x1ec>)
 8020138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802013a:	00db      	lsls	r3, r3, #3
 802013c:	4413      	add	r3, r2
 802013e:	685a      	ldr	r2, [r3, #4]
 8020140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020142:	4013      	ands	r3, r2
 8020144:	4618      	mov	r0, r3
 8020146:	f000 f907 	bl	8020358 <SEQ_BitPosition>
 802014a:	4603      	mov	r3, r0
 802014c:	461a      	mov	r2, r3
 802014e:	4b53      	ldr	r3, [pc, #332]	; (802029c <UTIL_SEQ_Run+0x1f0>)
 8020150:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8020152:	4a51      	ldr	r2, [pc, #324]	; (8020298 <UTIL_SEQ_Run+0x1ec>)
 8020154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020156:	00db      	lsls	r3, r3, #3
 8020158:	4413      	add	r3, r2
 802015a:	685a      	ldr	r2, [r3, #4]
 802015c:	4b4f      	ldr	r3, [pc, #316]	; (802029c <UTIL_SEQ_Run+0x1f0>)
 802015e:	681b      	ldr	r3, [r3, #0]
 8020160:	2101      	movs	r1, #1
 8020162:	fa01 f303 	lsl.w	r3, r1, r3
 8020166:	43db      	mvns	r3, r3
 8020168:	401a      	ands	r2, r3
 802016a:	494b      	ldr	r1, [pc, #300]	; (8020298 <UTIL_SEQ_Run+0x1ec>)
 802016c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802016e:	00db      	lsls	r3, r3, #3
 8020170:	440b      	add	r3, r1
 8020172:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020174:	f3ef 8310 	mrs	r3, PRIMASK
 8020178:	61bb      	str	r3, [r7, #24]
  return(result);
 802017a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 802017c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 802017e:	b672      	cpsid	i
}
 8020180:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8020182:	4b46      	ldr	r3, [pc, #280]	; (802029c <UTIL_SEQ_Run+0x1f0>)
 8020184:	681b      	ldr	r3, [r3, #0]
 8020186:	2201      	movs	r2, #1
 8020188:	fa02 f303 	lsl.w	r3, r2, r3
 802018c:	43da      	mvns	r2, r3
 802018e:	4b3e      	ldr	r3, [pc, #248]	; (8020288 <UTIL_SEQ_Run+0x1dc>)
 8020190:	681b      	ldr	r3, [r3, #0]
 8020192:	4013      	ands	r3, r2
 8020194:	4a3c      	ldr	r2, [pc, #240]	; (8020288 <UTIL_SEQ_Run+0x1dc>)
 8020196:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8020198:	2301      	movs	r3, #1
 802019a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802019c:	e013      	b.n	80201c6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 802019e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80201a0:	3b01      	subs	r3, #1
 80201a2:	4a3d      	ldr	r2, [pc, #244]	; (8020298 <UTIL_SEQ_Run+0x1ec>)
 80201a4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80201a8:	4b3c      	ldr	r3, [pc, #240]	; (802029c <UTIL_SEQ_Run+0x1f0>)
 80201aa:	681b      	ldr	r3, [r3, #0]
 80201ac:	2201      	movs	r2, #1
 80201ae:	fa02 f303 	lsl.w	r3, r2, r3
 80201b2:	43da      	mvns	r2, r3
 80201b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80201b6:	3b01      	subs	r3, #1
 80201b8:	400a      	ands	r2, r1
 80201ba:	4937      	ldr	r1, [pc, #220]	; (8020298 <UTIL_SEQ_Run+0x1ec>)
 80201bc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80201c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80201c2:	3b01      	subs	r3, #1
 80201c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80201c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80201c8:	2b00      	cmp	r3, #0
 80201ca:	d1e8      	bne.n	802019e <UTIL_SEQ_Run+0xf2>
 80201cc:	6a3b      	ldr	r3, [r7, #32]
 80201ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80201d0:	697b      	ldr	r3, [r7, #20]
 80201d2:	f383 8810 	msr	PRIMASK, r3
}
 80201d6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80201d8:	4b30      	ldr	r3, [pc, #192]	; (802029c <UTIL_SEQ_Run+0x1f0>)
 80201da:	681b      	ldr	r3, [r3, #0]
 80201dc:	4a30      	ldr	r2, [pc, #192]	; (80202a0 <UTIL_SEQ_Run+0x1f4>)
 80201de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80201e2:	4798      	blx	r3

    local_taskset = TaskSet;
 80201e4:	4b28      	ldr	r3, [pc, #160]	; (8020288 <UTIL_SEQ_Run+0x1dc>)
 80201e6:	681b      	ldr	r3, [r3, #0]
 80201e8:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 80201ea:	4b28      	ldr	r3, [pc, #160]	; (802028c <UTIL_SEQ_Run+0x1e0>)
 80201ec:	681b      	ldr	r3, [r3, #0]
 80201ee:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 80201f0:	4b27      	ldr	r3, [pc, #156]	; (8020290 <UTIL_SEQ_Run+0x1e4>)
 80201f2:	681b      	ldr	r3, [r3, #0]
 80201f4:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 80201f6:	4b27      	ldr	r3, [pc, #156]	; (8020294 <UTIL_SEQ_Run+0x1e8>)
 80201f8:	681b      	ldr	r3, [r3, #0]
 80201fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80201fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80201fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020200:	401a      	ands	r2, r3
 8020202:	4b20      	ldr	r3, [pc, #128]	; (8020284 <UTIL_SEQ_Run+0x1d8>)
 8020204:	681b      	ldr	r3, [r3, #0]
 8020206:	4013      	ands	r3, r2
 8020208:	2b00      	cmp	r3, #0
 802020a:	d005      	beq.n	8020218 <UTIL_SEQ_Run+0x16c>
 802020c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802020e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020210:	4013      	ands	r3, r2
 8020212:	2b00      	cmp	r3, #0
 8020214:	f43f af64 	beq.w	80200e0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8020218:	4b20      	ldr	r3, [pc, #128]	; (802029c <UTIL_SEQ_Run+0x1f0>)
 802021a:	f04f 32ff 	mov.w	r2, #4294967295
 802021e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8020220:	f000 f88e 	bl	8020340 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020224:	f3ef 8310 	mrs	r3, PRIMASK
 8020228:	613b      	str	r3, [r7, #16]
  return(result);
 802022a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 802022c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 802022e:	b672      	cpsid	i
}
 8020230:	bf00      	nop
  local_taskset = TaskSet;
 8020232:	4b15      	ldr	r3, [pc, #84]	; (8020288 <UTIL_SEQ_Run+0x1dc>)
 8020234:	681b      	ldr	r3, [r3, #0]
 8020236:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8020238:	4b14      	ldr	r3, [pc, #80]	; (802028c <UTIL_SEQ_Run+0x1e0>)
 802023a:	681b      	ldr	r3, [r3, #0]
 802023c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 802023e:	4b14      	ldr	r3, [pc, #80]	; (8020290 <UTIL_SEQ_Run+0x1e4>)
 8020240:	681b      	ldr	r3, [r3, #0]
 8020242:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8020244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8020246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020248:	401a      	ands	r2, r3
 802024a:	4b0e      	ldr	r3, [pc, #56]	; (8020284 <UTIL_SEQ_Run+0x1d8>)
 802024c:	681b      	ldr	r3, [r3, #0]
 802024e:	4013      	ands	r3, r2
 8020250:	2b00      	cmp	r3, #0
 8020252:	d107      	bne.n	8020264 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8020254:	4b0f      	ldr	r3, [pc, #60]	; (8020294 <UTIL_SEQ_Run+0x1e8>)
 8020256:	681a      	ldr	r2, [r3, #0]
 8020258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802025a:	4013      	ands	r3, r2
 802025c:	2b00      	cmp	r3, #0
 802025e:	d101      	bne.n	8020264 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8020260:	f7e2 fe20 	bl	8002ea4 <UTIL_SEQ_Idle>
 8020264:	69fb      	ldr	r3, [r7, #28]
 8020266:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020268:	68fb      	ldr	r3, [r7, #12]
 802026a:	f383 8810 	msr	PRIMASK, r3
}
 802026e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8020270:	f000 f86c 	bl	802034c <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8020274:	4a03      	ldr	r2, [pc, #12]	; (8020284 <UTIL_SEQ_Run+0x1d8>)
 8020276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020278:	6013      	str	r3, [r2, #0]

  return;
 802027a:	bf00      	nop
}
 802027c:	3740      	adds	r7, #64	; 0x40
 802027e:	46bd      	mov	sp, r7
 8020280:	bd80      	pop	{r7, pc}
 8020282:	bf00      	nop
 8020284:	2000017c 	.word	0x2000017c
 8020288:	20002550 	.word	0x20002550
 802028c:	20002554 	.word	0x20002554
 8020290:	20000178 	.word	0x20000178
 8020294:	20002558 	.word	0x20002558
 8020298:	20002570 	.word	0x20002570
 802029c:	2000255c 	.word	0x2000255c
 80202a0:	20002560 	.word	0x20002560

080202a4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80202a4:	b580      	push	{r7, lr}
 80202a6:	b088      	sub	sp, #32
 80202a8:	af00      	add	r7, sp, #0
 80202aa:	60f8      	str	r0, [r7, #12]
 80202ac:	60b9      	str	r1, [r7, #8]
 80202ae:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80202b0:	f3ef 8310 	mrs	r3, PRIMASK
 80202b4:	617b      	str	r3, [r7, #20]
  return(result);
 80202b6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80202b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80202ba:	b672      	cpsid	i
}
 80202bc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80202be:	68f8      	ldr	r0, [r7, #12]
 80202c0:	f000 f84a 	bl	8020358 <SEQ_BitPosition>
 80202c4:	4603      	mov	r3, r0
 80202c6:	4619      	mov	r1, r3
 80202c8:	4a06      	ldr	r2, [pc, #24]	; (80202e4 <UTIL_SEQ_RegTask+0x40>)
 80202ca:	687b      	ldr	r3, [r7, #4]
 80202cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80202d0:	69fb      	ldr	r3, [r7, #28]
 80202d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80202d4:	69bb      	ldr	r3, [r7, #24]
 80202d6:	f383 8810 	msr	PRIMASK, r3
}
 80202da:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80202dc:	bf00      	nop
}
 80202de:	3720      	adds	r7, #32
 80202e0:	46bd      	mov	sp, r7
 80202e2:	bd80      	pop	{r7, pc}
 80202e4:	20002560 	.word	0x20002560

080202e8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80202e8:	b480      	push	{r7}
 80202ea:	b087      	sub	sp, #28
 80202ec:	af00      	add	r7, sp, #0
 80202ee:	6078      	str	r0, [r7, #4]
 80202f0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80202f2:	f3ef 8310 	mrs	r3, PRIMASK
 80202f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80202f8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80202fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80202fc:	b672      	cpsid	i
}
 80202fe:	bf00      	nop

  TaskSet |= TaskId_bm;
 8020300:	4b0d      	ldr	r3, [pc, #52]	; (8020338 <UTIL_SEQ_SetTask+0x50>)
 8020302:	681a      	ldr	r2, [r3, #0]
 8020304:	687b      	ldr	r3, [r7, #4]
 8020306:	4313      	orrs	r3, r2
 8020308:	4a0b      	ldr	r2, [pc, #44]	; (8020338 <UTIL_SEQ_SetTask+0x50>)
 802030a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 802030c:	4a0b      	ldr	r2, [pc, #44]	; (802033c <UTIL_SEQ_SetTask+0x54>)
 802030e:	683b      	ldr	r3, [r7, #0]
 8020310:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8020314:	687b      	ldr	r3, [r7, #4]
 8020316:	431a      	orrs	r2, r3
 8020318:	4908      	ldr	r1, [pc, #32]	; (802033c <UTIL_SEQ_SetTask+0x54>)
 802031a:	683b      	ldr	r3, [r7, #0]
 802031c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8020320:	697b      	ldr	r3, [r7, #20]
 8020322:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020324:	693b      	ldr	r3, [r7, #16]
 8020326:	f383 8810 	msr	PRIMASK, r3
}
 802032a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 802032c:	bf00      	nop
}
 802032e:	371c      	adds	r7, #28
 8020330:	46bd      	mov	sp, r7
 8020332:	bc80      	pop	{r7}
 8020334:	4770      	bx	lr
 8020336:	bf00      	nop
 8020338:	20002550 	.word	0x20002550
 802033c:	20002570 	.word	0x20002570

08020340 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8020340:	b480      	push	{r7}
 8020342:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8020344:	bf00      	nop
}
 8020346:	46bd      	mov	sp, r7
 8020348:	bc80      	pop	{r7}
 802034a:	4770      	bx	lr

0802034c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 802034c:	b480      	push	{r7}
 802034e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8020350:	bf00      	nop
}
 8020352:	46bd      	mov	sp, r7
 8020354:	bc80      	pop	{r7}
 8020356:	4770      	bx	lr

08020358 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8020358:	b480      	push	{r7}
 802035a:	b085      	sub	sp, #20
 802035c:	af00      	add	r7, sp, #0
 802035e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8020360:	2300      	movs	r3, #0
 8020362:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8020364:	687b      	ldr	r3, [r7, #4]
 8020366:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8020368:	68bb      	ldr	r3, [r7, #8]
 802036a:	0c1b      	lsrs	r3, r3, #16
 802036c:	041b      	lsls	r3, r3, #16
 802036e:	2b00      	cmp	r3, #0
 8020370:	d104      	bne.n	802037c <SEQ_BitPosition+0x24>
 8020372:	2310      	movs	r3, #16
 8020374:	73fb      	strb	r3, [r7, #15]
 8020376:	68bb      	ldr	r3, [r7, #8]
 8020378:	041b      	lsls	r3, r3, #16
 802037a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 802037c:	68bb      	ldr	r3, [r7, #8]
 802037e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8020382:	2b00      	cmp	r3, #0
 8020384:	d105      	bne.n	8020392 <SEQ_BitPosition+0x3a>
 8020386:	7bfb      	ldrb	r3, [r7, #15]
 8020388:	3308      	adds	r3, #8
 802038a:	73fb      	strb	r3, [r7, #15]
 802038c:	68bb      	ldr	r3, [r7, #8]
 802038e:	021b      	lsls	r3, r3, #8
 8020390:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8020392:	68bb      	ldr	r3, [r7, #8]
 8020394:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8020398:	2b00      	cmp	r3, #0
 802039a:	d105      	bne.n	80203a8 <SEQ_BitPosition+0x50>
 802039c:	7bfb      	ldrb	r3, [r7, #15]
 802039e:	3304      	adds	r3, #4
 80203a0:	73fb      	strb	r3, [r7, #15]
 80203a2:	68bb      	ldr	r3, [r7, #8]
 80203a4:	011b      	lsls	r3, r3, #4
 80203a6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80203a8:	68bb      	ldr	r3, [r7, #8]
 80203aa:	0f1b      	lsrs	r3, r3, #28
 80203ac:	4a06      	ldr	r2, [pc, #24]	; (80203c8 <SEQ_BitPosition+0x70>)
 80203ae:	5cd2      	ldrb	r2, [r2, r3]
 80203b0:	7bfb      	ldrb	r3, [r7, #15]
 80203b2:	4413      	add	r3, r2
 80203b4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80203b6:	7bfb      	ldrb	r3, [r7, #15]
 80203b8:	f1c3 031f 	rsb	r3, r3, #31
 80203bc:	b2db      	uxtb	r3, r3
}
 80203be:	4618      	mov	r0, r3
 80203c0:	3714      	adds	r7, #20
 80203c2:	46bd      	mov	sp, r7
 80203c4:	bc80      	pop	{r7}
 80203c6:	4770      	bx	lr
 80203c8:	08021f40 	.word	0x08021f40

080203cc <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80203cc:	b580      	push	{r7, lr}
 80203ce:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80203d0:	4b04      	ldr	r3, [pc, #16]	; (80203e4 <UTIL_TIMER_Init+0x18>)
 80203d2:	2200      	movs	r2, #0
 80203d4:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80203d6:	4b04      	ldr	r3, [pc, #16]	; (80203e8 <UTIL_TIMER_Init+0x1c>)
 80203d8:	681b      	ldr	r3, [r3, #0]
 80203da:	4798      	blx	r3
 80203dc:	4603      	mov	r3, r0
}
 80203de:	4618      	mov	r0, r3
 80203e0:	bd80      	pop	{r7, pc}
 80203e2:	bf00      	nop
 80203e4:	20002578 	.word	0x20002578
 80203e8:	08021a48 	.word	0x08021a48

080203ec <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 80203ec:	b580      	push	{r7, lr}
 80203ee:	b084      	sub	sp, #16
 80203f0:	af00      	add	r7, sp, #0
 80203f2:	60f8      	str	r0, [r7, #12]
 80203f4:	60b9      	str	r1, [r7, #8]
 80203f6:	603b      	str	r3, [r7, #0]
 80203f8:	4613      	mov	r3, r2
 80203fa:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 80203fc:	68fb      	ldr	r3, [r7, #12]
 80203fe:	2b00      	cmp	r3, #0
 8020400:	d023      	beq.n	802044a <UTIL_TIMER_Create+0x5e>
 8020402:	683b      	ldr	r3, [r7, #0]
 8020404:	2b00      	cmp	r3, #0
 8020406:	d020      	beq.n	802044a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8020408:	68fb      	ldr	r3, [r7, #12]
 802040a:	2200      	movs	r2, #0
 802040c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 802040e:	4b11      	ldr	r3, [pc, #68]	; (8020454 <UTIL_TIMER_Create+0x68>)
 8020410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020412:	68b8      	ldr	r0, [r7, #8]
 8020414:	4798      	blx	r3
 8020416:	4602      	mov	r2, r0
 8020418:	68fb      	ldr	r3, [r7, #12]
 802041a:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 802041c:	68fb      	ldr	r3, [r7, #12]
 802041e:	2200      	movs	r2, #0
 8020420:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8020422:	68fb      	ldr	r3, [r7, #12]
 8020424:	2200      	movs	r2, #0
 8020426:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8020428:	68fb      	ldr	r3, [r7, #12]
 802042a:	2200      	movs	r2, #0
 802042c:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 802042e:	68fb      	ldr	r3, [r7, #12]
 8020430:	683a      	ldr	r2, [r7, #0]
 8020432:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8020434:	68fb      	ldr	r3, [r7, #12]
 8020436:	69ba      	ldr	r2, [r7, #24]
 8020438:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 802043a:	68fb      	ldr	r3, [r7, #12]
 802043c:	79fa      	ldrb	r2, [r7, #7]
 802043e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8020440:	68fb      	ldr	r3, [r7, #12]
 8020442:	2200      	movs	r2, #0
 8020444:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8020446:	2300      	movs	r3, #0
 8020448:	e000      	b.n	802044c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 802044a:	2301      	movs	r3, #1
  }
}
 802044c:	4618      	mov	r0, r3
 802044e:	3710      	adds	r7, #16
 8020450:	46bd      	mov	sp, r7
 8020452:	bd80      	pop	{r7, pc}
 8020454:	08021a48 	.word	0x08021a48

08020458 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8020458:	b580      	push	{r7, lr}
 802045a:	b08a      	sub	sp, #40	; 0x28
 802045c:	af00      	add	r7, sp, #0
 802045e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8020460:	2300      	movs	r3, #0
 8020462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8020466:	687b      	ldr	r3, [r7, #4]
 8020468:	2b00      	cmp	r3, #0
 802046a:	d056      	beq.n	802051a <UTIL_TIMER_Start+0xc2>
 802046c:	6878      	ldr	r0, [r7, #4]
 802046e:	f000 f9a9 	bl	80207c4 <TimerExists>
 8020472:	4603      	mov	r3, r0
 8020474:	f083 0301 	eor.w	r3, r3, #1
 8020478:	b2db      	uxtb	r3, r3
 802047a:	2b00      	cmp	r3, #0
 802047c:	d04d      	beq.n	802051a <UTIL_TIMER_Start+0xc2>
 802047e:	687b      	ldr	r3, [r7, #4]
 8020480:	7a5b      	ldrb	r3, [r3, #9]
 8020482:	2b00      	cmp	r3, #0
 8020484:	d149      	bne.n	802051a <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020486:	f3ef 8310 	mrs	r3, PRIMASK
 802048a:	613b      	str	r3, [r7, #16]
  return(result);
 802048c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 802048e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8020490:	b672      	cpsid	i
}
 8020492:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8020494:	687b      	ldr	r3, [r7, #4]
 8020496:	685b      	ldr	r3, [r3, #4]
 8020498:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 802049a:	4b24      	ldr	r3, [pc, #144]	; (802052c <UTIL_TIMER_Start+0xd4>)
 802049c:	6a1b      	ldr	r3, [r3, #32]
 802049e:	4798      	blx	r3
 80204a0:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 80204a2:	6a3a      	ldr	r2, [r7, #32]
 80204a4:	69bb      	ldr	r3, [r7, #24]
 80204a6:	429a      	cmp	r2, r3
 80204a8:	d201      	bcs.n	80204ae <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 80204aa:	69bb      	ldr	r3, [r7, #24]
 80204ac:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 80204ae:	687b      	ldr	r3, [r7, #4]
 80204b0:	6a3a      	ldr	r2, [r7, #32]
 80204b2:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 80204b4:	687b      	ldr	r3, [r7, #4]
 80204b6:	2200      	movs	r2, #0
 80204b8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 80204ba:	687b      	ldr	r3, [r7, #4]
 80204bc:	2201      	movs	r2, #1
 80204be:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 80204c0:	687b      	ldr	r3, [r7, #4]
 80204c2:	2200      	movs	r2, #0
 80204c4:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 80204c6:	4b1a      	ldr	r3, [pc, #104]	; (8020530 <UTIL_TIMER_Start+0xd8>)
 80204c8:	681b      	ldr	r3, [r3, #0]
 80204ca:	2b00      	cmp	r3, #0
 80204cc:	d106      	bne.n	80204dc <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 80204ce:	4b17      	ldr	r3, [pc, #92]	; (802052c <UTIL_TIMER_Start+0xd4>)
 80204d0:	691b      	ldr	r3, [r3, #16]
 80204d2:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80204d4:	6878      	ldr	r0, [r7, #4]
 80204d6:	f000 f9eb 	bl	80208b0 <TimerInsertNewHeadTimer>
 80204da:	e017      	b.n	802050c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80204dc:	4b13      	ldr	r3, [pc, #76]	; (802052c <UTIL_TIMER_Start+0xd4>)
 80204de:	699b      	ldr	r3, [r3, #24]
 80204e0:	4798      	blx	r3
 80204e2:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 80204e4:	687b      	ldr	r3, [r7, #4]
 80204e6:	681a      	ldr	r2, [r3, #0]
 80204e8:	697b      	ldr	r3, [r7, #20]
 80204ea:	441a      	add	r2, r3
 80204ec:	687b      	ldr	r3, [r7, #4]
 80204ee:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80204f0:	687b      	ldr	r3, [r7, #4]
 80204f2:	681a      	ldr	r2, [r3, #0]
 80204f4:	4b0e      	ldr	r3, [pc, #56]	; (8020530 <UTIL_TIMER_Start+0xd8>)
 80204f6:	681b      	ldr	r3, [r3, #0]
 80204f8:	681b      	ldr	r3, [r3, #0]
 80204fa:	429a      	cmp	r2, r3
 80204fc:	d203      	bcs.n	8020506 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 80204fe:	6878      	ldr	r0, [r7, #4]
 8020500:	f000 f9d6 	bl	80208b0 <TimerInsertNewHeadTimer>
 8020504:	e002      	b.n	802050c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 8020506:	6878      	ldr	r0, [r7, #4]
 8020508:	f000 f9a2 	bl	8020850 <TimerInsertTimer>
 802050c:	69fb      	ldr	r3, [r7, #28]
 802050e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020510:	68fb      	ldr	r3, [r7, #12]
 8020512:	f383 8810 	msr	PRIMASK, r3
}
 8020516:	bf00      	nop
  {
 8020518:	e002      	b.n	8020520 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 802051a:	2301      	movs	r3, #1
 802051c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8020520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8020524:	4618      	mov	r0, r3
 8020526:	3728      	adds	r7, #40	; 0x28
 8020528:	46bd      	mov	sp, r7
 802052a:	bd80      	pop	{r7, pc}
 802052c:	08021a48 	.word	0x08021a48
 8020530:	20002578 	.word	0x20002578

08020534 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8020534:	b580      	push	{r7, lr}
 8020536:	b088      	sub	sp, #32
 8020538:	af00      	add	r7, sp, #0
 802053a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 802053c:	2300      	movs	r3, #0
 802053e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8020540:	687b      	ldr	r3, [r7, #4]
 8020542:	2b00      	cmp	r3, #0
 8020544:	d05b      	beq.n	80205fe <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020546:	f3ef 8310 	mrs	r3, PRIMASK
 802054a:	60fb      	str	r3, [r7, #12]
  return(result);
 802054c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 802054e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8020550:	b672      	cpsid	i
}
 8020552:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8020554:	4b2d      	ldr	r3, [pc, #180]	; (802060c <UTIL_TIMER_Stop+0xd8>)
 8020556:	681b      	ldr	r3, [r3, #0]
 8020558:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 802055a:	4b2c      	ldr	r3, [pc, #176]	; (802060c <UTIL_TIMER_Stop+0xd8>)
 802055c:	681b      	ldr	r3, [r3, #0]
 802055e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8020560:	687b      	ldr	r3, [r7, #4]
 8020562:	2201      	movs	r2, #1
 8020564:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 8020566:	4b29      	ldr	r3, [pc, #164]	; (802060c <UTIL_TIMER_Stop+0xd8>)
 8020568:	681b      	ldr	r3, [r3, #0]
 802056a:	2b00      	cmp	r3, #0
 802056c:	d041      	beq.n	80205f2 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 802056e:	687b      	ldr	r3, [r7, #4]
 8020570:	2200      	movs	r2, #0
 8020572:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8020574:	4b25      	ldr	r3, [pc, #148]	; (802060c <UTIL_TIMER_Stop+0xd8>)
 8020576:	681b      	ldr	r3, [r3, #0]
 8020578:	687a      	ldr	r2, [r7, #4]
 802057a:	429a      	cmp	r2, r3
 802057c:	d134      	bne.n	80205e8 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 802057e:	4b23      	ldr	r3, [pc, #140]	; (802060c <UTIL_TIMER_Stop+0xd8>)
 8020580:	681b      	ldr	r3, [r3, #0]
 8020582:	2200      	movs	r2, #0
 8020584:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 8020586:	4b21      	ldr	r3, [pc, #132]	; (802060c <UTIL_TIMER_Stop+0xd8>)
 8020588:	681b      	ldr	r3, [r3, #0]
 802058a:	695b      	ldr	r3, [r3, #20]
 802058c:	2b00      	cmp	r3, #0
 802058e:	d00a      	beq.n	80205a6 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8020590:	4b1e      	ldr	r3, [pc, #120]	; (802060c <UTIL_TIMER_Stop+0xd8>)
 8020592:	681b      	ldr	r3, [r3, #0]
 8020594:	695b      	ldr	r3, [r3, #20]
 8020596:	4a1d      	ldr	r2, [pc, #116]	; (802060c <UTIL_TIMER_Stop+0xd8>)
 8020598:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 802059a:	4b1c      	ldr	r3, [pc, #112]	; (802060c <UTIL_TIMER_Stop+0xd8>)
 802059c:	681b      	ldr	r3, [r3, #0]
 802059e:	4618      	mov	r0, r3
 80205a0:	f000 f92c 	bl	80207fc <TimerSetTimeout>
 80205a4:	e023      	b.n	80205ee <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 80205a6:	4b1a      	ldr	r3, [pc, #104]	; (8020610 <UTIL_TIMER_Stop+0xdc>)
 80205a8:	68db      	ldr	r3, [r3, #12]
 80205aa:	4798      	blx	r3
            TimerListHead = NULL;
 80205ac:	4b17      	ldr	r3, [pc, #92]	; (802060c <UTIL_TIMER_Stop+0xd8>)
 80205ae:	2200      	movs	r2, #0
 80205b0:	601a      	str	r2, [r3, #0]
 80205b2:	e01c      	b.n	80205ee <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 80205b4:	697a      	ldr	r2, [r7, #20]
 80205b6:	687b      	ldr	r3, [r7, #4]
 80205b8:	429a      	cmp	r2, r3
 80205ba:	d110      	bne.n	80205de <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 80205bc:	697b      	ldr	r3, [r7, #20]
 80205be:	695b      	ldr	r3, [r3, #20]
 80205c0:	2b00      	cmp	r3, #0
 80205c2:	d006      	beq.n	80205d2 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 80205c4:	697b      	ldr	r3, [r7, #20]
 80205c6:	695b      	ldr	r3, [r3, #20]
 80205c8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80205ca:	69bb      	ldr	r3, [r7, #24]
 80205cc:	697a      	ldr	r2, [r7, #20]
 80205ce:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 80205d0:	e00d      	b.n	80205ee <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 80205d2:	2300      	movs	r3, #0
 80205d4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80205d6:	69bb      	ldr	r3, [r7, #24]
 80205d8:	697a      	ldr	r2, [r7, #20]
 80205da:	615a      	str	r2, [r3, #20]
            break;
 80205dc:	e007      	b.n	80205ee <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 80205de:	697b      	ldr	r3, [r7, #20]
 80205e0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 80205e2:	697b      	ldr	r3, [r7, #20]
 80205e4:	695b      	ldr	r3, [r3, #20]
 80205e6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 80205e8:	697b      	ldr	r3, [r7, #20]
 80205ea:	2b00      	cmp	r3, #0
 80205ec:	d1e2      	bne.n	80205b4 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 80205ee:	2300      	movs	r3, #0
 80205f0:	77fb      	strb	r3, [r7, #31]
 80205f2:	693b      	ldr	r3, [r7, #16]
 80205f4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80205f6:	68bb      	ldr	r3, [r7, #8]
 80205f8:	f383 8810 	msr	PRIMASK, r3
}
 80205fc:	e001      	b.n	8020602 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 80205fe:	2301      	movs	r3, #1
 8020600:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8020602:	7ffb      	ldrb	r3, [r7, #31]
}
 8020604:	4618      	mov	r0, r3
 8020606:	3720      	adds	r7, #32
 8020608:	46bd      	mov	sp, r7
 802060a:	bd80      	pop	{r7, pc}
 802060c:	20002578 	.word	0x20002578
 8020610:	08021a48 	.word	0x08021a48

08020614 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8020614:	b580      	push	{r7, lr}
 8020616:	b084      	sub	sp, #16
 8020618:	af00      	add	r7, sp, #0
 802061a:	6078      	str	r0, [r7, #4]
 802061c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 802061e:	2300      	movs	r3, #0
 8020620:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 8020622:	687b      	ldr	r3, [r7, #4]
 8020624:	2b00      	cmp	r3, #0
 8020626:	d102      	bne.n	802062e <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8020628:	2301      	movs	r3, #1
 802062a:	73fb      	strb	r3, [r7, #15]
 802062c:	e014      	b.n	8020658 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 802062e:	4b0d      	ldr	r3, [pc, #52]	; (8020664 <UTIL_TIMER_SetPeriod+0x50>)
 8020630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020632:	6838      	ldr	r0, [r7, #0]
 8020634:	4798      	blx	r3
 8020636:	4602      	mov	r2, r0
 8020638:	687b      	ldr	r3, [r7, #4]
 802063a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 802063c:	6878      	ldr	r0, [r7, #4]
 802063e:	f000 f8c1 	bl	80207c4 <TimerExists>
 8020642:	4603      	mov	r3, r0
 8020644:	2b00      	cmp	r3, #0
 8020646:	d007      	beq.n	8020658 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8020648:	6878      	ldr	r0, [r7, #4]
 802064a:	f7ff ff73 	bl	8020534 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 802064e:	6878      	ldr	r0, [r7, #4]
 8020650:	f7ff ff02 	bl	8020458 <UTIL_TIMER_Start>
 8020654:	4603      	mov	r3, r0
 8020656:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8020658:	7bfb      	ldrb	r3, [r7, #15]
}
 802065a:	4618      	mov	r0, r3
 802065c:	3710      	adds	r7, #16
 802065e:	46bd      	mov	sp, r7
 8020660:	bd80      	pop	{r7, pc}
 8020662:	bf00      	nop
 8020664:	08021a48 	.word	0x08021a48

08020668 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 8020668:	b590      	push	{r4, r7, lr}
 802066a:	b089      	sub	sp, #36	; 0x24
 802066c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802066e:	f3ef 8310 	mrs	r3, PRIMASK
 8020672:	60bb      	str	r3, [r7, #8]
  return(result);
 8020674:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8020676:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8020678:	b672      	cpsid	i
}
 802067a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 802067c:	4b38      	ldr	r3, [pc, #224]	; (8020760 <UTIL_TIMER_IRQ_Handler+0xf8>)
 802067e:	695b      	ldr	r3, [r3, #20]
 8020680:	4798      	blx	r3
 8020682:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8020684:	4b36      	ldr	r3, [pc, #216]	; (8020760 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8020686:	691b      	ldr	r3, [r3, #16]
 8020688:	4798      	blx	r3
 802068a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 802068c:	693a      	ldr	r2, [r7, #16]
 802068e:	697b      	ldr	r3, [r7, #20]
 8020690:	1ad3      	subs	r3, r2, r3
 8020692:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 8020694:	4b33      	ldr	r3, [pc, #204]	; (8020764 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8020696:	681b      	ldr	r3, [r3, #0]
 8020698:	2b00      	cmp	r3, #0
 802069a:	d037      	beq.n	802070c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 802069c:	4b31      	ldr	r3, [pc, #196]	; (8020764 <UTIL_TIMER_IRQ_Handler+0xfc>)
 802069e:	681b      	ldr	r3, [r3, #0]
 80206a0:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 80206a2:	69fb      	ldr	r3, [r7, #28]
 80206a4:	681b      	ldr	r3, [r3, #0]
 80206a6:	68fa      	ldr	r2, [r7, #12]
 80206a8:	429a      	cmp	r2, r3
 80206aa:	d206      	bcs.n	80206ba <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 80206ac:	69fb      	ldr	r3, [r7, #28]
 80206ae:	681a      	ldr	r2, [r3, #0]
 80206b0:	68fb      	ldr	r3, [r7, #12]
 80206b2:	1ad2      	subs	r2, r2, r3
 80206b4:	69fb      	ldr	r3, [r7, #28]
 80206b6:	601a      	str	r2, [r3, #0]
 80206b8:	e002      	b.n	80206c0 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 80206ba:	69fb      	ldr	r3, [r7, #28]
 80206bc:	2200      	movs	r2, #0
 80206be:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 80206c0:	69fb      	ldr	r3, [r7, #28]
 80206c2:	695b      	ldr	r3, [r3, #20]
 80206c4:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 80206c6:	69fb      	ldr	r3, [r7, #28]
 80206c8:	2b00      	cmp	r3, #0
 80206ca:	d1ea      	bne.n	80206a2 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80206cc:	e01e      	b.n	802070c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 80206ce:	4b25      	ldr	r3, [pc, #148]	; (8020764 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80206d0:	681b      	ldr	r3, [r3, #0]
 80206d2:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 80206d4:	4b23      	ldr	r3, [pc, #140]	; (8020764 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80206d6:	681b      	ldr	r3, [r3, #0]
 80206d8:	695b      	ldr	r3, [r3, #20]
 80206da:	4a22      	ldr	r2, [pc, #136]	; (8020764 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80206dc:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 80206de:	69fb      	ldr	r3, [r7, #28]
 80206e0:	2200      	movs	r2, #0
 80206e2:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 80206e4:	69fb      	ldr	r3, [r7, #28]
 80206e6:	2200      	movs	r2, #0
 80206e8:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 80206ea:	69fb      	ldr	r3, [r7, #28]
 80206ec:	68db      	ldr	r3, [r3, #12]
 80206ee:	69fa      	ldr	r2, [r7, #28]
 80206f0:	6912      	ldr	r2, [r2, #16]
 80206f2:	4610      	mov	r0, r2
 80206f4:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80206f6:	69fb      	ldr	r3, [r7, #28]
 80206f8:	7adb      	ldrb	r3, [r3, #11]
 80206fa:	2b01      	cmp	r3, #1
 80206fc:	d106      	bne.n	802070c <UTIL_TIMER_IRQ_Handler+0xa4>
 80206fe:	69fb      	ldr	r3, [r7, #28]
 8020700:	7a9b      	ldrb	r3, [r3, #10]
 8020702:	2b00      	cmp	r3, #0
 8020704:	d102      	bne.n	802070c <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 8020706:	69f8      	ldr	r0, [r7, #28]
 8020708:	f7ff fea6 	bl	8020458 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 802070c:	4b15      	ldr	r3, [pc, #84]	; (8020764 <UTIL_TIMER_IRQ_Handler+0xfc>)
 802070e:	681b      	ldr	r3, [r3, #0]
 8020710:	2b00      	cmp	r3, #0
 8020712:	d00d      	beq.n	8020730 <UTIL_TIMER_IRQ_Handler+0xc8>
 8020714:	4b13      	ldr	r3, [pc, #76]	; (8020764 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8020716:	681b      	ldr	r3, [r3, #0]
 8020718:	681b      	ldr	r3, [r3, #0]
 802071a:	2b00      	cmp	r3, #0
 802071c:	d0d7      	beq.n	80206ce <UTIL_TIMER_IRQ_Handler+0x66>
 802071e:	4b11      	ldr	r3, [pc, #68]	; (8020764 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8020720:	681b      	ldr	r3, [r3, #0]
 8020722:	681c      	ldr	r4, [r3, #0]
 8020724:	4b0e      	ldr	r3, [pc, #56]	; (8020760 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8020726:	699b      	ldr	r3, [r3, #24]
 8020728:	4798      	blx	r3
 802072a:	4603      	mov	r3, r0
 802072c:	429c      	cmp	r4, r3
 802072e:	d3ce      	bcc.n	80206ce <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8020730:	4b0c      	ldr	r3, [pc, #48]	; (8020764 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8020732:	681b      	ldr	r3, [r3, #0]
 8020734:	2b00      	cmp	r3, #0
 8020736:	d009      	beq.n	802074c <UTIL_TIMER_IRQ_Handler+0xe4>
 8020738:	4b0a      	ldr	r3, [pc, #40]	; (8020764 <UTIL_TIMER_IRQ_Handler+0xfc>)
 802073a:	681b      	ldr	r3, [r3, #0]
 802073c:	7a1b      	ldrb	r3, [r3, #8]
 802073e:	2b00      	cmp	r3, #0
 8020740:	d104      	bne.n	802074c <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 8020742:	4b08      	ldr	r3, [pc, #32]	; (8020764 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8020744:	681b      	ldr	r3, [r3, #0]
 8020746:	4618      	mov	r0, r3
 8020748:	f000 f858 	bl	80207fc <TimerSetTimeout>
 802074c:	69bb      	ldr	r3, [r7, #24]
 802074e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020750:	687b      	ldr	r3, [r7, #4]
 8020752:	f383 8810 	msr	PRIMASK, r3
}
 8020756:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 8020758:	bf00      	nop
 802075a:	3724      	adds	r7, #36	; 0x24
 802075c:	46bd      	mov	sp, r7
 802075e:	bd90      	pop	{r4, r7, pc}
 8020760:	08021a48 	.word	0x08021a48
 8020764:	20002578 	.word	0x20002578

08020768 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8020768:	b580      	push	{r7, lr}
 802076a:	b082      	sub	sp, #8
 802076c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 802076e:	4b06      	ldr	r3, [pc, #24]	; (8020788 <UTIL_TIMER_GetCurrentTime+0x20>)
 8020770:	69db      	ldr	r3, [r3, #28]
 8020772:	4798      	blx	r3
 8020774:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 8020776:	4b04      	ldr	r3, [pc, #16]	; (8020788 <UTIL_TIMER_GetCurrentTime+0x20>)
 8020778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802077a:	6878      	ldr	r0, [r7, #4]
 802077c:	4798      	blx	r3
 802077e:	4603      	mov	r3, r0
}
 8020780:	4618      	mov	r0, r3
 8020782:	3708      	adds	r7, #8
 8020784:	46bd      	mov	sp, r7
 8020786:	bd80      	pop	{r7, pc}
 8020788:	08021a48 	.word	0x08021a48

0802078c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 802078c:	b580      	push	{r7, lr}
 802078e:	b084      	sub	sp, #16
 8020790:	af00      	add	r7, sp, #0
 8020792:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8020794:	4b0a      	ldr	r3, [pc, #40]	; (80207c0 <UTIL_TIMER_GetElapsedTime+0x34>)
 8020796:	69db      	ldr	r3, [r3, #28]
 8020798:	4798      	blx	r3
 802079a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 802079c:	4b08      	ldr	r3, [pc, #32]	; (80207c0 <UTIL_TIMER_GetElapsedTime+0x34>)
 802079e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80207a0:	6878      	ldr	r0, [r7, #4]
 80207a2:	4798      	blx	r3
 80207a4:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80207a6:	4b06      	ldr	r3, [pc, #24]	; (80207c0 <UTIL_TIMER_GetElapsedTime+0x34>)
 80207a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80207aa:	68f9      	ldr	r1, [r7, #12]
 80207ac:	68ba      	ldr	r2, [r7, #8]
 80207ae:	1a8a      	subs	r2, r1, r2
 80207b0:	4610      	mov	r0, r2
 80207b2:	4798      	blx	r3
 80207b4:	4603      	mov	r3, r0
}
 80207b6:	4618      	mov	r0, r3
 80207b8:	3710      	adds	r7, #16
 80207ba:	46bd      	mov	sp, r7
 80207bc:	bd80      	pop	{r7, pc}
 80207be:	bf00      	nop
 80207c0:	08021a48 	.word	0x08021a48

080207c4 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 80207c4:	b480      	push	{r7}
 80207c6:	b085      	sub	sp, #20
 80207c8:	af00      	add	r7, sp, #0
 80207ca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80207cc:	4b0a      	ldr	r3, [pc, #40]	; (80207f8 <TimerExists+0x34>)
 80207ce:	681b      	ldr	r3, [r3, #0]
 80207d0:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 80207d2:	e008      	b.n	80207e6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 80207d4:	68fa      	ldr	r2, [r7, #12]
 80207d6:	687b      	ldr	r3, [r7, #4]
 80207d8:	429a      	cmp	r2, r3
 80207da:	d101      	bne.n	80207e0 <TimerExists+0x1c>
    {
      return true;
 80207dc:	2301      	movs	r3, #1
 80207de:	e006      	b.n	80207ee <TimerExists+0x2a>
    }
    cur = cur->Next;
 80207e0:	68fb      	ldr	r3, [r7, #12]
 80207e2:	695b      	ldr	r3, [r3, #20]
 80207e4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 80207e6:	68fb      	ldr	r3, [r7, #12]
 80207e8:	2b00      	cmp	r3, #0
 80207ea:	d1f3      	bne.n	80207d4 <TimerExists+0x10>
  }
  return false;
 80207ec:	2300      	movs	r3, #0
}
 80207ee:	4618      	mov	r0, r3
 80207f0:	3714      	adds	r7, #20
 80207f2:	46bd      	mov	sp, r7
 80207f4:	bc80      	pop	{r7}
 80207f6:	4770      	bx	lr
 80207f8:	20002578 	.word	0x20002578

080207fc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80207fc:	b590      	push	{r4, r7, lr}
 80207fe:	b085      	sub	sp, #20
 8020800:	af00      	add	r7, sp, #0
 8020802:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8020804:	4b11      	ldr	r3, [pc, #68]	; (802084c <TimerSetTimeout+0x50>)
 8020806:	6a1b      	ldr	r3, [r3, #32]
 8020808:	4798      	blx	r3
 802080a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 802080c:	687b      	ldr	r3, [r7, #4]
 802080e:	2201      	movs	r2, #1
 8020810:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8020812:	687b      	ldr	r3, [r7, #4]
 8020814:	681c      	ldr	r4, [r3, #0]
 8020816:	4b0d      	ldr	r3, [pc, #52]	; (802084c <TimerSetTimeout+0x50>)
 8020818:	699b      	ldr	r3, [r3, #24]
 802081a:	4798      	blx	r3
 802081c:	4602      	mov	r2, r0
 802081e:	68fb      	ldr	r3, [r7, #12]
 8020820:	4413      	add	r3, r2
 8020822:	429c      	cmp	r4, r3
 8020824:	d207      	bcs.n	8020836 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8020826:	4b09      	ldr	r3, [pc, #36]	; (802084c <TimerSetTimeout+0x50>)
 8020828:	699b      	ldr	r3, [r3, #24]
 802082a:	4798      	blx	r3
 802082c:	4602      	mov	r2, r0
 802082e:	68fb      	ldr	r3, [r7, #12]
 8020830:	441a      	add	r2, r3
 8020832:	687b      	ldr	r3, [r7, #4]
 8020834:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8020836:	4b05      	ldr	r3, [pc, #20]	; (802084c <TimerSetTimeout+0x50>)
 8020838:	689b      	ldr	r3, [r3, #8]
 802083a:	687a      	ldr	r2, [r7, #4]
 802083c:	6812      	ldr	r2, [r2, #0]
 802083e:	4610      	mov	r0, r2
 8020840:	4798      	blx	r3
}
 8020842:	bf00      	nop
 8020844:	3714      	adds	r7, #20
 8020846:	46bd      	mov	sp, r7
 8020848:	bd90      	pop	{r4, r7, pc}
 802084a:	bf00      	nop
 802084c:	08021a48 	.word	0x08021a48

08020850 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8020850:	b480      	push	{r7}
 8020852:	b085      	sub	sp, #20
 8020854:	af00      	add	r7, sp, #0
 8020856:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8020858:	4b14      	ldr	r3, [pc, #80]	; (80208ac <TimerInsertTimer+0x5c>)
 802085a:	681b      	ldr	r3, [r3, #0]
 802085c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 802085e:	4b13      	ldr	r3, [pc, #76]	; (80208ac <TimerInsertTimer+0x5c>)
 8020860:	681b      	ldr	r3, [r3, #0]
 8020862:	695b      	ldr	r3, [r3, #20]
 8020864:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8020866:	e012      	b.n	802088e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8020868:	687b      	ldr	r3, [r7, #4]
 802086a:	681a      	ldr	r2, [r3, #0]
 802086c:	68bb      	ldr	r3, [r7, #8]
 802086e:	681b      	ldr	r3, [r3, #0]
 8020870:	429a      	cmp	r2, r3
 8020872:	d905      	bls.n	8020880 <TimerInsertTimer+0x30>
    {
        cur = next;
 8020874:	68bb      	ldr	r3, [r7, #8]
 8020876:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8020878:	68bb      	ldr	r3, [r7, #8]
 802087a:	695b      	ldr	r3, [r3, #20]
 802087c:	60bb      	str	r3, [r7, #8]
 802087e:	e006      	b.n	802088e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8020880:	68fb      	ldr	r3, [r7, #12]
 8020882:	687a      	ldr	r2, [r7, #4]
 8020884:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 8020886:	687b      	ldr	r3, [r7, #4]
 8020888:	68ba      	ldr	r2, [r7, #8]
 802088a:	615a      	str	r2, [r3, #20]
        return;
 802088c:	e009      	b.n	80208a2 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 802088e:	68fb      	ldr	r3, [r7, #12]
 8020890:	695b      	ldr	r3, [r3, #20]
 8020892:	2b00      	cmp	r3, #0
 8020894:	d1e8      	bne.n	8020868 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 8020896:	68fb      	ldr	r3, [r7, #12]
 8020898:	687a      	ldr	r2, [r7, #4]
 802089a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 802089c:	687b      	ldr	r3, [r7, #4]
 802089e:	2200      	movs	r2, #0
 80208a0:	615a      	str	r2, [r3, #20]
}
 80208a2:	3714      	adds	r7, #20
 80208a4:	46bd      	mov	sp, r7
 80208a6:	bc80      	pop	{r7}
 80208a8:	4770      	bx	lr
 80208aa:	bf00      	nop
 80208ac:	20002578 	.word	0x20002578

080208b0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80208b0:	b580      	push	{r7, lr}
 80208b2:	b084      	sub	sp, #16
 80208b4:	af00      	add	r7, sp, #0
 80208b6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80208b8:	4b0b      	ldr	r3, [pc, #44]	; (80208e8 <TimerInsertNewHeadTimer+0x38>)
 80208ba:	681b      	ldr	r3, [r3, #0]
 80208bc:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 80208be:	68fb      	ldr	r3, [r7, #12]
 80208c0:	2b00      	cmp	r3, #0
 80208c2:	d002      	beq.n	80208ca <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 80208c4:	68fb      	ldr	r3, [r7, #12]
 80208c6:	2200      	movs	r2, #0
 80208c8:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80208ca:	687b      	ldr	r3, [r7, #4]
 80208cc:	68fa      	ldr	r2, [r7, #12]
 80208ce:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 80208d0:	4a05      	ldr	r2, [pc, #20]	; (80208e8 <TimerInsertNewHeadTimer+0x38>)
 80208d2:	687b      	ldr	r3, [r7, #4]
 80208d4:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 80208d6:	4b04      	ldr	r3, [pc, #16]	; (80208e8 <TimerInsertNewHeadTimer+0x38>)
 80208d8:	681b      	ldr	r3, [r3, #0]
 80208da:	4618      	mov	r0, r3
 80208dc:	f7ff ff8e 	bl	80207fc <TimerSetTimeout>
}
 80208e0:	bf00      	nop
 80208e2:	3710      	adds	r7, #16
 80208e4:	46bd      	mov	sp, r7
 80208e6:	bd80      	pop	{r7, pc}
 80208e8:	20002578 	.word	0x20002578

080208ec <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 80208ec:	b580      	push	{r7, lr}
 80208ee:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 80208f0:	2218      	movs	r2, #24
 80208f2:	2100      	movs	r1, #0
 80208f4:	4807      	ldr	r0, [pc, #28]	; (8020914 <UTIL_ADV_TRACE_Init+0x28>)
 80208f6:	f7fe fff6 	bl	801f8e6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 80208fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80208fe:	2100      	movs	r1, #0
 8020900:	4805      	ldr	r0, [pc, #20]	; (8020918 <UTIL_ADV_TRACE_Init+0x2c>)
 8020902:	f7fe fff0 	bl	801f8e6 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8020906:	4b05      	ldr	r3, [pc, #20]	; (802091c <UTIL_ADV_TRACE_Init+0x30>)
 8020908:	681b      	ldr	r3, [r3, #0]
 802090a:	4805      	ldr	r0, [pc, #20]	; (8020920 <UTIL_ADV_TRACE_Init+0x34>)
 802090c:	4798      	blx	r3
 802090e:	4603      	mov	r3, r0
}
 8020910:	4618      	mov	r0, r3
 8020912:	bd80      	pop	{r7, pc}
 8020914:	2000257c 	.word	0x2000257c
 8020918:	20002594 	.word	0x20002594
 802091c:	08021a88 	.word	0x08021a88
 8020920:	08020b8d 	.word	0x08020b8d

08020924 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 8020924:	b480      	push	{r7}
 8020926:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8020928:	4b06      	ldr	r3, [pc, #24]	; (8020944 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 802092a:	8a5a      	ldrh	r2, [r3, #18]
 802092c:	4b05      	ldr	r3, [pc, #20]	; (8020944 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 802092e:	8a1b      	ldrh	r3, [r3, #16]
 8020930:	429a      	cmp	r2, r3
 8020932:	d101      	bne.n	8020938 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 8020934:	2301      	movs	r3, #1
 8020936:	e000      	b.n	802093a <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 8020938:	2300      	movs	r3, #0
}
 802093a:	4618      	mov	r0, r3
 802093c:	46bd      	mov	sp, r7
 802093e:	bc80      	pop	{r7}
 8020940:	4770      	bx	lr
 8020942:	bf00      	nop
 8020944:	2000257c 	.word	0x2000257c

08020948 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 8020948:	b408      	push	{r3}
 802094a:	b580      	push	{r7, lr}
 802094c:	b08d      	sub	sp, #52	; 0x34
 802094e:	af00      	add	r7, sp, #0
 8020950:	60f8      	str	r0, [r7, #12]
 8020952:	60b9      	str	r1, [r7, #8]
 8020954:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 8020956:	2300      	movs	r3, #0
 8020958:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 802095a:	2300      	movs	r3, #0
 802095c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 802095e:	4b37      	ldr	r3, [pc, #220]	; (8020a3c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8020960:	7a1b      	ldrb	r3, [r3, #8]
 8020962:	461a      	mov	r2, r3
 8020964:	68fb      	ldr	r3, [r7, #12]
 8020966:	4293      	cmp	r3, r2
 8020968:	d902      	bls.n	8020970 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 802096a:	f06f 0304 	mvn.w	r3, #4
 802096e:	e05e      	b.n	8020a2e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8020970:	4b32      	ldr	r3, [pc, #200]	; (8020a3c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8020972:	68da      	ldr	r2, [r3, #12]
 8020974:	68bb      	ldr	r3, [r7, #8]
 8020976:	4013      	ands	r3, r2
 8020978:	68ba      	ldr	r2, [r7, #8]
 802097a:	429a      	cmp	r2, r3
 802097c:	d002      	beq.n	8020984 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 802097e:	f06f 0305 	mvn.w	r3, #5
 8020982:	e054      	b.n	8020a2e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8020984:	4b2d      	ldr	r3, [pc, #180]	; (8020a3c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8020986:	685b      	ldr	r3, [r3, #4]
 8020988:	2b00      	cmp	r3, #0
 802098a:	d00a      	beq.n	80209a2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 802098c:	687b      	ldr	r3, [r7, #4]
 802098e:	2b00      	cmp	r3, #0
 8020990:	d007      	beq.n	80209a2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8020992:	4b2a      	ldr	r3, [pc, #168]	; (8020a3c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8020994:	685b      	ldr	r3, [r3, #4]
 8020996:	f107 0116 	add.w	r1, r7, #22
 802099a:	f107 0218 	add.w	r2, r7, #24
 802099e:	4610      	mov	r0, r2
 80209a0:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 80209a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80209a6:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80209a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80209aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80209ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80209b0:	4823      	ldr	r0, [pc, #140]	; (8020a40 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 80209b2:	f7ff fa25 	bl	801fe00 <tiny_vsnprintf_like>
 80209b6:	4603      	mov	r3, r0
 80209b8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 80209ba:	f000 f9f1 	bl	8020da0 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 80209be:	8afa      	ldrh	r2, [r7, #22]
 80209c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80209c2:	4413      	add	r3, r2
 80209c4:	b29b      	uxth	r3, r3
 80209c6:	f107 0214 	add.w	r2, r7, #20
 80209ca:	4611      	mov	r1, r2
 80209cc:	4618      	mov	r0, r3
 80209ce:	f000 f969 	bl	8020ca4 <TRACE_AllocateBufer>
 80209d2:	4603      	mov	r3, r0
 80209d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80209d8:	d025      	beq.n	8020a26 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 80209da:	2300      	movs	r3, #0
 80209dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80209de:	e00e      	b.n	80209fe <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 80209e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80209e2:	8aba      	ldrh	r2, [r7, #20]
 80209e4:	3330      	adds	r3, #48	; 0x30
 80209e6:	443b      	add	r3, r7
 80209e8:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 80209ec:	4b15      	ldr	r3, [pc, #84]	; (8020a44 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 80209ee:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 80209f0:	8abb      	ldrh	r3, [r7, #20]
 80209f2:	3301      	adds	r3, #1
 80209f4:	b29b      	uxth	r3, r3
 80209f6:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 80209f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80209fa:	3301      	adds	r3, #1
 80209fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80209fe:	8afb      	ldrh	r3, [r7, #22]
 8020a00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8020a02:	429a      	cmp	r2, r3
 8020a04:	d3ec      	bcc.n	80209e0 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8020a06:	8abb      	ldrh	r3, [r7, #20]
 8020a08:	461a      	mov	r2, r3
 8020a0a:	4b0e      	ldr	r3, [pc, #56]	; (8020a44 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 8020a0c:	18d0      	adds	r0, r2, r3
 8020a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020a12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8020a16:	f7ff f9f3 	bl	801fe00 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 8020a1a:	f000 f9df 	bl	8020ddc <TRACE_UnLock>

    return TRACE_Send();
 8020a1e:	f000 f831 	bl	8020a84 <TRACE_Send>
 8020a22:	4603      	mov	r3, r0
 8020a24:	e003      	b.n	8020a2e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 8020a26:	f000 f9d9 	bl	8020ddc <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 8020a2a:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 8020a2e:	4618      	mov	r0, r3
 8020a30:	3734      	adds	r7, #52	; 0x34
 8020a32:	46bd      	mov	sp, r7
 8020a34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8020a38:	b001      	add	sp, #4
 8020a3a:	4770      	bx	lr
 8020a3c:	2000257c 	.word	0x2000257c
 8020a40:	20002994 	.word	0x20002994
 8020a44:	20002594 	.word	0x20002594

08020a48 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 8020a48:	b480      	push	{r7}
 8020a4a:	b083      	sub	sp, #12
 8020a4c:	af00      	add	r7, sp, #0
 8020a4e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8020a50:	4a03      	ldr	r2, [pc, #12]	; (8020a60 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 8020a52:	687b      	ldr	r3, [r7, #4]
 8020a54:	6053      	str	r3, [r2, #4]
}
 8020a56:	bf00      	nop
 8020a58:	370c      	adds	r7, #12
 8020a5a:	46bd      	mov	sp, r7
 8020a5c:	bc80      	pop	{r7}
 8020a5e:	4770      	bx	lr
 8020a60:	2000257c 	.word	0x2000257c

08020a64 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 8020a64:	b480      	push	{r7}
 8020a66:	b083      	sub	sp, #12
 8020a68:	af00      	add	r7, sp, #0
 8020a6a:	4603      	mov	r3, r0
 8020a6c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8020a6e:	4a04      	ldr	r2, [pc, #16]	; (8020a80 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 8020a70:	79fb      	ldrb	r3, [r7, #7]
 8020a72:	7213      	strb	r3, [r2, #8]
}
 8020a74:	bf00      	nop
 8020a76:	370c      	adds	r7, #12
 8020a78:	46bd      	mov	sp, r7
 8020a7a:	bc80      	pop	{r7}
 8020a7c:	4770      	bx	lr
 8020a7e:	bf00      	nop
 8020a80:	2000257c 	.word	0x2000257c

08020a84 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 8020a84:	b580      	push	{r7, lr}
 8020a86:	b088      	sub	sp, #32
 8020a88:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8020a8a:	2300      	movs	r3, #0
 8020a8c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 8020a8e:	2300      	movs	r3, #0
 8020a90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020a92:	f3ef 8310 	mrs	r3, PRIMASK
 8020a96:	613b      	str	r3, [r7, #16]
  return(result);
 8020a98:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8020a9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8020a9c:	b672      	cpsid	i
}
 8020a9e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 8020aa0:	f000 f9ba 	bl	8020e18 <TRACE_IsLocked>
 8020aa4:	4603      	mov	r3, r0
 8020aa6:	2b00      	cmp	r3, #0
 8020aa8:	d15d      	bne.n	8020b66 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 8020aaa:	f000 f979 	bl	8020da0 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8020aae:	4b34      	ldr	r3, [pc, #208]	; (8020b80 <TRACE_Send+0xfc>)
 8020ab0:	8a1a      	ldrh	r2, [r3, #16]
 8020ab2:	4b33      	ldr	r3, [pc, #204]	; (8020b80 <TRACE_Send+0xfc>)
 8020ab4:	8a5b      	ldrh	r3, [r3, #18]
 8020ab6:	429a      	cmp	r2, r3
 8020ab8:	d04d      	beq.n	8020b56 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8020aba:	4b31      	ldr	r3, [pc, #196]	; (8020b80 <TRACE_Send+0xfc>)
 8020abc:	789b      	ldrb	r3, [r3, #2]
 8020abe:	2b01      	cmp	r3, #1
 8020ac0:	d117      	bne.n	8020af2 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8020ac2:	4b2f      	ldr	r3, [pc, #188]	; (8020b80 <TRACE_Send+0xfc>)
 8020ac4:	881a      	ldrh	r2, [r3, #0]
 8020ac6:	4b2e      	ldr	r3, [pc, #184]	; (8020b80 <TRACE_Send+0xfc>)
 8020ac8:	8a1b      	ldrh	r3, [r3, #16]
 8020aca:	1ad3      	subs	r3, r2, r3
 8020acc:	b29a      	uxth	r2, r3
 8020ace:	4b2c      	ldr	r3, [pc, #176]	; (8020b80 <TRACE_Send+0xfc>)
 8020ad0:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8020ad2:	4b2b      	ldr	r3, [pc, #172]	; (8020b80 <TRACE_Send+0xfc>)
 8020ad4:	2202      	movs	r2, #2
 8020ad6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8020ad8:	4b29      	ldr	r3, [pc, #164]	; (8020b80 <TRACE_Send+0xfc>)
 8020ada:	2200      	movs	r2, #0
 8020adc:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8020ade:	4b28      	ldr	r3, [pc, #160]	; (8020b80 <TRACE_Send+0xfc>)
 8020ae0:	8a9b      	ldrh	r3, [r3, #20]
 8020ae2:	2b00      	cmp	r3, #0
 8020ae4:	d105      	bne.n	8020af2 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8020ae6:	4b26      	ldr	r3, [pc, #152]	; (8020b80 <TRACE_Send+0xfc>)
 8020ae8:	2200      	movs	r2, #0
 8020aea:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8020aec:	4b24      	ldr	r3, [pc, #144]	; (8020b80 <TRACE_Send+0xfc>)
 8020aee:	2200      	movs	r2, #0
 8020af0:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8020af2:	4b23      	ldr	r3, [pc, #140]	; (8020b80 <TRACE_Send+0xfc>)
 8020af4:	789b      	ldrb	r3, [r3, #2]
 8020af6:	2b00      	cmp	r3, #0
 8020af8:	d115      	bne.n	8020b26 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8020afa:	4b21      	ldr	r3, [pc, #132]	; (8020b80 <TRACE_Send+0xfc>)
 8020afc:	8a5a      	ldrh	r2, [r3, #18]
 8020afe:	4b20      	ldr	r3, [pc, #128]	; (8020b80 <TRACE_Send+0xfc>)
 8020b00:	8a1b      	ldrh	r3, [r3, #16]
 8020b02:	429a      	cmp	r2, r3
 8020b04:	d908      	bls.n	8020b18 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8020b06:	4b1e      	ldr	r3, [pc, #120]	; (8020b80 <TRACE_Send+0xfc>)
 8020b08:	8a5a      	ldrh	r2, [r3, #18]
 8020b0a:	4b1d      	ldr	r3, [pc, #116]	; (8020b80 <TRACE_Send+0xfc>)
 8020b0c:	8a1b      	ldrh	r3, [r3, #16]
 8020b0e:	1ad3      	subs	r3, r2, r3
 8020b10:	b29a      	uxth	r2, r3
 8020b12:	4b1b      	ldr	r3, [pc, #108]	; (8020b80 <TRACE_Send+0xfc>)
 8020b14:	829a      	strh	r2, [r3, #20]
 8020b16:	e006      	b.n	8020b26 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8020b18:	4b19      	ldr	r3, [pc, #100]	; (8020b80 <TRACE_Send+0xfc>)
 8020b1a:	8a1b      	ldrh	r3, [r3, #16]
 8020b1c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8020b20:	b29a      	uxth	r2, r3
 8020b22:	4b17      	ldr	r3, [pc, #92]	; (8020b80 <TRACE_Send+0xfc>)
 8020b24:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8020b26:	4b16      	ldr	r3, [pc, #88]	; (8020b80 <TRACE_Send+0xfc>)
 8020b28:	8a1b      	ldrh	r3, [r3, #16]
 8020b2a:	461a      	mov	r2, r3
 8020b2c:	4b15      	ldr	r3, [pc, #84]	; (8020b84 <TRACE_Send+0x100>)
 8020b2e:	4413      	add	r3, r2
 8020b30:	61bb      	str	r3, [r7, #24]
 8020b32:	697b      	ldr	r3, [r7, #20]
 8020b34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020b36:	68fb      	ldr	r3, [r7, #12]
 8020b38:	f383 8810 	msr	PRIMASK, r3
}
 8020b3c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 8020b3e:	f7e2 fab3 	bl	80030a8 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8020b42:	4b11      	ldr	r3, [pc, #68]	; (8020b88 <TRACE_Send+0x104>)
 8020b44:	68db      	ldr	r3, [r3, #12]
 8020b46:	4a0e      	ldr	r2, [pc, #56]	; (8020b80 <TRACE_Send+0xfc>)
 8020b48:	8a92      	ldrh	r2, [r2, #20]
 8020b4a:	4611      	mov	r1, r2
 8020b4c:	69b8      	ldr	r0, [r7, #24]
 8020b4e:	4798      	blx	r3
 8020b50:	4603      	mov	r3, r0
 8020b52:	77fb      	strb	r3, [r7, #31]
 8020b54:	e00d      	b.n	8020b72 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 8020b56:	f000 f941 	bl	8020ddc <TRACE_UnLock>
 8020b5a:	697b      	ldr	r3, [r7, #20]
 8020b5c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020b5e:	68bb      	ldr	r3, [r7, #8]
 8020b60:	f383 8810 	msr	PRIMASK, r3
}
 8020b64:	e005      	b.n	8020b72 <TRACE_Send+0xee>
 8020b66:	697b      	ldr	r3, [r7, #20]
 8020b68:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020b6a:	687b      	ldr	r3, [r7, #4]
 8020b6c:	f383 8810 	msr	PRIMASK, r3
}
 8020b70:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 8020b72:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020b76:	4618      	mov	r0, r3
 8020b78:	3720      	adds	r7, #32
 8020b7a:	46bd      	mov	sp, r7
 8020b7c:	bd80      	pop	{r7, pc}
 8020b7e:	bf00      	nop
 8020b80:	2000257c 	.word	0x2000257c
 8020b84:	20002594 	.word	0x20002594
 8020b88:	08021a88 	.word	0x08021a88

08020b8c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 8020b8c:	b580      	push	{r7, lr}
 8020b8e:	b088      	sub	sp, #32
 8020b90:	af00      	add	r7, sp, #0
 8020b92:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 8020b94:	2300      	movs	r3, #0
 8020b96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020b98:	f3ef 8310 	mrs	r3, PRIMASK
 8020b9c:	617b      	str	r3, [r7, #20]
  return(result);
 8020b9e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8020ba0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8020ba2:	b672      	cpsid	i
}
 8020ba4:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8020ba6:	4b3c      	ldr	r3, [pc, #240]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020ba8:	789b      	ldrb	r3, [r3, #2]
 8020baa:	2b02      	cmp	r3, #2
 8020bac:	d106      	bne.n	8020bbc <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8020bae:	4b3a      	ldr	r3, [pc, #232]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020bb0:	2200      	movs	r2, #0
 8020bb2:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8020bb4:	4b38      	ldr	r3, [pc, #224]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020bb6:	2200      	movs	r2, #0
 8020bb8:	821a      	strh	r2, [r3, #16]
 8020bba:	e00a      	b.n	8020bd2 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8020bbc:	4b36      	ldr	r3, [pc, #216]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020bbe:	8a1a      	ldrh	r2, [r3, #16]
 8020bc0:	4b35      	ldr	r3, [pc, #212]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020bc2:	8a9b      	ldrh	r3, [r3, #20]
 8020bc4:	4413      	add	r3, r2
 8020bc6:	b29b      	uxth	r3, r3
 8020bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8020bcc:	b29a      	uxth	r2, r3
 8020bce:	4b32      	ldr	r3, [pc, #200]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020bd0:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8020bd2:	4b31      	ldr	r3, [pc, #196]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020bd4:	8a1a      	ldrh	r2, [r3, #16]
 8020bd6:	4b30      	ldr	r3, [pc, #192]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020bd8:	8a5b      	ldrh	r3, [r3, #18]
 8020bda:	429a      	cmp	r2, r3
 8020bdc:	d04d      	beq.n	8020c7a <TRACE_TxCpltCallback+0xee>
 8020bde:	4b2e      	ldr	r3, [pc, #184]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020be0:	8adb      	ldrh	r3, [r3, #22]
 8020be2:	2b01      	cmp	r3, #1
 8020be4:	d149      	bne.n	8020c7a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8020be6:	4b2c      	ldr	r3, [pc, #176]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020be8:	789b      	ldrb	r3, [r3, #2]
 8020bea:	2b01      	cmp	r3, #1
 8020bec:	d117      	bne.n	8020c1e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8020bee:	4b2a      	ldr	r3, [pc, #168]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020bf0:	881a      	ldrh	r2, [r3, #0]
 8020bf2:	4b29      	ldr	r3, [pc, #164]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020bf4:	8a1b      	ldrh	r3, [r3, #16]
 8020bf6:	1ad3      	subs	r3, r2, r3
 8020bf8:	b29a      	uxth	r2, r3
 8020bfa:	4b27      	ldr	r3, [pc, #156]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020bfc:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8020bfe:	4b26      	ldr	r3, [pc, #152]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020c00:	2202      	movs	r2, #2
 8020c02:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8020c04:	4b24      	ldr	r3, [pc, #144]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020c06:	2200      	movs	r2, #0
 8020c08:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8020c0a:	4b23      	ldr	r3, [pc, #140]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020c0c:	8a9b      	ldrh	r3, [r3, #20]
 8020c0e:	2b00      	cmp	r3, #0
 8020c10:	d105      	bne.n	8020c1e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8020c12:	4b21      	ldr	r3, [pc, #132]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020c14:	2200      	movs	r2, #0
 8020c16:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8020c18:	4b1f      	ldr	r3, [pc, #124]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020c1a:	2200      	movs	r2, #0
 8020c1c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8020c1e:	4b1e      	ldr	r3, [pc, #120]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020c20:	789b      	ldrb	r3, [r3, #2]
 8020c22:	2b00      	cmp	r3, #0
 8020c24:	d115      	bne.n	8020c52 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8020c26:	4b1c      	ldr	r3, [pc, #112]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020c28:	8a5a      	ldrh	r2, [r3, #18]
 8020c2a:	4b1b      	ldr	r3, [pc, #108]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020c2c:	8a1b      	ldrh	r3, [r3, #16]
 8020c2e:	429a      	cmp	r2, r3
 8020c30:	d908      	bls.n	8020c44 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8020c32:	4b19      	ldr	r3, [pc, #100]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020c34:	8a5a      	ldrh	r2, [r3, #18]
 8020c36:	4b18      	ldr	r3, [pc, #96]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020c38:	8a1b      	ldrh	r3, [r3, #16]
 8020c3a:	1ad3      	subs	r3, r2, r3
 8020c3c:	b29a      	uxth	r2, r3
 8020c3e:	4b16      	ldr	r3, [pc, #88]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020c40:	829a      	strh	r2, [r3, #20]
 8020c42:	e006      	b.n	8020c52 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8020c44:	4b14      	ldr	r3, [pc, #80]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020c46:	8a1b      	ldrh	r3, [r3, #16]
 8020c48:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8020c4c:	b29a      	uxth	r2, r3
 8020c4e:	4b12      	ldr	r3, [pc, #72]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020c50:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8020c52:	4b11      	ldr	r3, [pc, #68]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020c54:	8a1b      	ldrh	r3, [r3, #16]
 8020c56:	461a      	mov	r2, r3
 8020c58:	4b10      	ldr	r3, [pc, #64]	; (8020c9c <TRACE_TxCpltCallback+0x110>)
 8020c5a:	4413      	add	r3, r2
 8020c5c:	61fb      	str	r3, [r7, #28]
 8020c5e:	69bb      	ldr	r3, [r7, #24]
 8020c60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020c62:	693b      	ldr	r3, [r7, #16]
 8020c64:	f383 8810 	msr	PRIMASK, r3
}
 8020c68:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8020c6a:	4b0d      	ldr	r3, [pc, #52]	; (8020ca0 <TRACE_TxCpltCallback+0x114>)
 8020c6c:	68db      	ldr	r3, [r3, #12]
 8020c6e:	4a0a      	ldr	r2, [pc, #40]	; (8020c98 <TRACE_TxCpltCallback+0x10c>)
 8020c70:	8a92      	ldrh	r2, [r2, #20]
 8020c72:	4611      	mov	r1, r2
 8020c74:	69f8      	ldr	r0, [r7, #28]
 8020c76:	4798      	blx	r3
 8020c78:	e00a      	b.n	8020c90 <TRACE_TxCpltCallback+0x104>
 8020c7a:	69bb      	ldr	r3, [r7, #24]
 8020c7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020c7e:	68fb      	ldr	r3, [r7, #12]
 8020c80:	f383 8810 	msr	PRIMASK, r3
}
 8020c84:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 8020c86:	f7e2 fa17 	bl	80030b8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8020c8a:	f000 f8a7 	bl	8020ddc <TRACE_UnLock>
  }
}
 8020c8e:	bf00      	nop
 8020c90:	bf00      	nop
 8020c92:	3720      	adds	r7, #32
 8020c94:	46bd      	mov	sp, r7
 8020c96:	bd80      	pop	{r7, pc}
 8020c98:	2000257c 	.word	0x2000257c
 8020c9c:	20002594 	.word	0x20002594
 8020ca0:	08021a88 	.word	0x08021a88

08020ca4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8020ca4:	b480      	push	{r7}
 8020ca6:	b087      	sub	sp, #28
 8020ca8:	af00      	add	r7, sp, #0
 8020caa:	4603      	mov	r3, r0
 8020cac:	6039      	str	r1, [r7, #0]
 8020cae:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 8020cb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020cb4:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8020cba:	60fb      	str	r3, [r7, #12]
  return(result);
 8020cbc:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8020cbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8020cc0:	b672      	cpsid	i
}
 8020cc2:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8020cc4:	4b35      	ldr	r3, [pc, #212]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020cc6:	8a5a      	ldrh	r2, [r3, #18]
 8020cc8:	4b34      	ldr	r3, [pc, #208]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020cca:	8a1b      	ldrh	r3, [r3, #16]
 8020ccc:	429a      	cmp	r2, r3
 8020cce:	d11b      	bne.n	8020d08 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8020cd0:	4b32      	ldr	r3, [pc, #200]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020cd2:	8a5b      	ldrh	r3, [r3, #18]
 8020cd4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8020cd8:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8020cda:	88fa      	ldrh	r2, [r7, #6]
 8020cdc:	8afb      	ldrh	r3, [r7, #22]
 8020cde:	429a      	cmp	r2, r3
 8020ce0:	d33a      	bcc.n	8020d58 <TRACE_AllocateBufer+0xb4>
 8020ce2:	4b2e      	ldr	r3, [pc, #184]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020ce4:	8a1b      	ldrh	r3, [r3, #16]
 8020ce6:	88fa      	ldrh	r2, [r7, #6]
 8020ce8:	429a      	cmp	r2, r3
 8020cea:	d235      	bcs.n	8020d58 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8020cec:	4b2b      	ldr	r3, [pc, #172]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020cee:	2201      	movs	r2, #1
 8020cf0:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8020cf2:	4b2a      	ldr	r3, [pc, #168]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020cf4:	8a5a      	ldrh	r2, [r3, #18]
 8020cf6:	4b29      	ldr	r3, [pc, #164]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020cf8:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8020cfa:	4b28      	ldr	r3, [pc, #160]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020cfc:	8a1b      	ldrh	r3, [r3, #16]
 8020cfe:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8020d00:	4b26      	ldr	r3, [pc, #152]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020d02:	2200      	movs	r2, #0
 8020d04:	825a      	strh	r2, [r3, #18]
 8020d06:	e027      	b.n	8020d58 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8020d08:	4b24      	ldr	r3, [pc, #144]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020d0a:	8a5a      	ldrh	r2, [r3, #18]
 8020d0c:	4b23      	ldr	r3, [pc, #140]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020d0e:	8a1b      	ldrh	r3, [r3, #16]
 8020d10:	429a      	cmp	r2, r3
 8020d12:	d91b      	bls.n	8020d4c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8020d14:	4b21      	ldr	r3, [pc, #132]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020d16:	8a5b      	ldrh	r3, [r3, #18]
 8020d18:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8020d1c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8020d1e:	88fa      	ldrh	r2, [r7, #6]
 8020d20:	8afb      	ldrh	r3, [r7, #22]
 8020d22:	429a      	cmp	r2, r3
 8020d24:	d318      	bcc.n	8020d58 <TRACE_AllocateBufer+0xb4>
 8020d26:	4b1d      	ldr	r3, [pc, #116]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020d28:	8a1b      	ldrh	r3, [r3, #16]
 8020d2a:	88fa      	ldrh	r2, [r7, #6]
 8020d2c:	429a      	cmp	r2, r3
 8020d2e:	d213      	bcs.n	8020d58 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8020d30:	4b1a      	ldr	r3, [pc, #104]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020d32:	2201      	movs	r2, #1
 8020d34:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8020d36:	4b19      	ldr	r3, [pc, #100]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020d38:	8a5a      	ldrh	r2, [r3, #18]
 8020d3a:	4b18      	ldr	r3, [pc, #96]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020d3c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8020d3e:	4b17      	ldr	r3, [pc, #92]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020d40:	8a1b      	ldrh	r3, [r3, #16]
 8020d42:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8020d44:	4b15      	ldr	r3, [pc, #84]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020d46:	2200      	movs	r2, #0
 8020d48:	825a      	strh	r2, [r3, #18]
 8020d4a:	e005      	b.n	8020d58 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8020d4c:	4b13      	ldr	r3, [pc, #76]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020d4e:	8a1a      	ldrh	r2, [r3, #16]
 8020d50:	4b12      	ldr	r3, [pc, #72]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020d52:	8a5b      	ldrh	r3, [r3, #18]
 8020d54:	1ad3      	subs	r3, r2, r3
 8020d56:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8020d58:	8afa      	ldrh	r2, [r7, #22]
 8020d5a:	88fb      	ldrh	r3, [r7, #6]
 8020d5c:	429a      	cmp	r2, r3
 8020d5e:	d90f      	bls.n	8020d80 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8020d60:	4b0e      	ldr	r3, [pc, #56]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020d62:	8a5a      	ldrh	r2, [r3, #18]
 8020d64:	683b      	ldr	r3, [r7, #0]
 8020d66:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8020d68:	4b0c      	ldr	r3, [pc, #48]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020d6a:	8a5a      	ldrh	r2, [r3, #18]
 8020d6c:	88fb      	ldrh	r3, [r7, #6]
 8020d6e:	4413      	add	r3, r2
 8020d70:	b29b      	uxth	r3, r3
 8020d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8020d76:	b29a      	uxth	r2, r3
 8020d78:	4b08      	ldr	r3, [pc, #32]	; (8020d9c <TRACE_AllocateBufer+0xf8>)
 8020d7a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 8020d7c:	2300      	movs	r3, #0
 8020d7e:	82bb      	strh	r3, [r7, #20]
 8020d80:	693b      	ldr	r3, [r7, #16]
 8020d82:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020d84:	68bb      	ldr	r3, [r7, #8]
 8020d86:	f383 8810 	msr	PRIMASK, r3
}
 8020d8a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 8020d8c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8020d90:	4618      	mov	r0, r3
 8020d92:	371c      	adds	r7, #28
 8020d94:	46bd      	mov	sp, r7
 8020d96:	bc80      	pop	{r7}
 8020d98:	4770      	bx	lr
 8020d9a:	bf00      	nop
 8020d9c:	2000257c 	.word	0x2000257c

08020da0 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 8020da0:	b480      	push	{r7}
 8020da2:	b085      	sub	sp, #20
 8020da4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020da6:	f3ef 8310 	mrs	r3, PRIMASK
 8020daa:	607b      	str	r3, [r7, #4]
  return(result);
 8020dac:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8020dae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8020db0:	b672      	cpsid	i
}
 8020db2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 8020db4:	4b08      	ldr	r3, [pc, #32]	; (8020dd8 <TRACE_Lock+0x38>)
 8020db6:	8adb      	ldrh	r3, [r3, #22]
 8020db8:	3301      	adds	r3, #1
 8020dba:	b29a      	uxth	r2, r3
 8020dbc:	4b06      	ldr	r3, [pc, #24]	; (8020dd8 <TRACE_Lock+0x38>)
 8020dbe:	82da      	strh	r2, [r3, #22]
 8020dc0:	68fb      	ldr	r3, [r7, #12]
 8020dc2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020dc4:	68bb      	ldr	r3, [r7, #8]
 8020dc6:	f383 8810 	msr	PRIMASK, r3
}
 8020dca:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8020dcc:	bf00      	nop
 8020dce:	3714      	adds	r7, #20
 8020dd0:	46bd      	mov	sp, r7
 8020dd2:	bc80      	pop	{r7}
 8020dd4:	4770      	bx	lr
 8020dd6:	bf00      	nop
 8020dd8:	2000257c 	.word	0x2000257c

08020ddc <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 8020ddc:	b480      	push	{r7}
 8020dde:	b085      	sub	sp, #20
 8020de0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020de2:	f3ef 8310 	mrs	r3, PRIMASK
 8020de6:	607b      	str	r3, [r7, #4]
  return(result);
 8020de8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8020dea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8020dec:	b672      	cpsid	i
}
 8020dee:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 8020df0:	4b08      	ldr	r3, [pc, #32]	; (8020e14 <TRACE_UnLock+0x38>)
 8020df2:	8adb      	ldrh	r3, [r3, #22]
 8020df4:	3b01      	subs	r3, #1
 8020df6:	b29a      	uxth	r2, r3
 8020df8:	4b06      	ldr	r3, [pc, #24]	; (8020e14 <TRACE_UnLock+0x38>)
 8020dfa:	82da      	strh	r2, [r3, #22]
 8020dfc:	68fb      	ldr	r3, [r7, #12]
 8020dfe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020e00:	68bb      	ldr	r3, [r7, #8]
 8020e02:	f383 8810 	msr	PRIMASK, r3
}
 8020e06:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8020e08:	bf00      	nop
 8020e0a:	3714      	adds	r7, #20
 8020e0c:	46bd      	mov	sp, r7
 8020e0e:	bc80      	pop	{r7}
 8020e10:	4770      	bx	lr
 8020e12:	bf00      	nop
 8020e14:	2000257c 	.word	0x2000257c

08020e18 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 8020e18:	b480      	push	{r7}
 8020e1a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8020e1c:	4b05      	ldr	r3, [pc, #20]	; (8020e34 <TRACE_IsLocked+0x1c>)
 8020e1e:	8adb      	ldrh	r3, [r3, #22]
 8020e20:	2b00      	cmp	r3, #0
 8020e22:	bf14      	ite	ne
 8020e24:	2301      	movne	r3, #1
 8020e26:	2300      	moveq	r3, #0
 8020e28:	b2db      	uxtb	r3, r3
}
 8020e2a:	4618      	mov	r0, r3
 8020e2c:	46bd      	mov	sp, r7
 8020e2e:	bc80      	pop	{r7}
 8020e30:	4770      	bx	lr
 8020e32:	bf00      	nop
 8020e34:	2000257c 	.word	0x2000257c

08020e38 <__libc_init_array>:
 8020e38:	b570      	push	{r4, r5, r6, lr}
 8020e3a:	4d0d      	ldr	r5, [pc, #52]	; (8020e70 <__libc_init_array+0x38>)
 8020e3c:	4c0d      	ldr	r4, [pc, #52]	; (8020e74 <__libc_init_array+0x3c>)
 8020e3e:	1b64      	subs	r4, r4, r5
 8020e40:	10a4      	asrs	r4, r4, #2
 8020e42:	2600      	movs	r6, #0
 8020e44:	42a6      	cmp	r6, r4
 8020e46:	d109      	bne.n	8020e5c <__libc_init_array+0x24>
 8020e48:	4d0b      	ldr	r5, [pc, #44]	; (8020e78 <__libc_init_array+0x40>)
 8020e4a:	4c0c      	ldr	r4, [pc, #48]	; (8020e7c <__libc_init_array+0x44>)
 8020e4c:	f000 f908 	bl	8021060 <_init>
 8020e50:	1b64      	subs	r4, r4, r5
 8020e52:	10a4      	asrs	r4, r4, #2
 8020e54:	2600      	movs	r6, #0
 8020e56:	42a6      	cmp	r6, r4
 8020e58:	d105      	bne.n	8020e66 <__libc_init_array+0x2e>
 8020e5a:	bd70      	pop	{r4, r5, r6, pc}
 8020e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8020e60:	4798      	blx	r3
 8020e62:	3601      	adds	r6, #1
 8020e64:	e7ee      	b.n	8020e44 <__libc_init_array+0xc>
 8020e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8020e6a:	4798      	blx	r3
 8020e6c:	3601      	adds	r6, #1
 8020e6e:	e7f2      	b.n	8020e56 <__libc_init_array+0x1e>
 8020e70:	0802201c 	.word	0x0802201c
 8020e74:	0802201c 	.word	0x0802201c
 8020e78:	0802201c 	.word	0x0802201c
 8020e7c:	08022024 	.word	0x08022024

08020e80 <memset>:
 8020e80:	4402      	add	r2, r0
 8020e82:	4603      	mov	r3, r0
 8020e84:	4293      	cmp	r3, r2
 8020e86:	d100      	bne.n	8020e8a <memset+0xa>
 8020e88:	4770      	bx	lr
 8020e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8020e8e:	e7f9      	b.n	8020e84 <memset+0x4>

08020e90 <register_fini>:
 8020e90:	4b02      	ldr	r3, [pc, #8]	; (8020e9c <register_fini+0xc>)
 8020e92:	b113      	cbz	r3, 8020e9a <register_fini+0xa>
 8020e94:	4802      	ldr	r0, [pc, #8]	; (8020ea0 <register_fini+0x10>)
 8020e96:	f000 b805 	b.w	8020ea4 <atexit>
 8020e9a:	4770      	bx	lr
 8020e9c:	00000000 	.word	0x00000000
 8020ea0:	08020eb1 	.word	0x08020eb1

08020ea4 <atexit>:
 8020ea4:	2300      	movs	r3, #0
 8020ea6:	4601      	mov	r1, r0
 8020ea8:	461a      	mov	r2, r3
 8020eaa:	4618      	mov	r0, r3
 8020eac:	f000 b816 	b.w	8020edc <__register_exitproc>

08020eb0 <__libc_fini_array>:
 8020eb0:	b538      	push	{r3, r4, r5, lr}
 8020eb2:	4d07      	ldr	r5, [pc, #28]	; (8020ed0 <__libc_fini_array+0x20>)
 8020eb4:	4c07      	ldr	r4, [pc, #28]	; (8020ed4 <__libc_fini_array+0x24>)
 8020eb6:	1b64      	subs	r4, r4, r5
 8020eb8:	10a4      	asrs	r4, r4, #2
 8020eba:	b91c      	cbnz	r4, 8020ec4 <__libc_fini_array+0x14>
 8020ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020ec0:	f000 b8d4 	b.w	802106c <_fini>
 8020ec4:	3c01      	subs	r4, #1
 8020ec6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8020eca:	4798      	blx	r3
 8020ecc:	e7f5      	b.n	8020eba <__libc_fini_array+0xa>
 8020ece:	bf00      	nop
 8020ed0:	08022024 	.word	0x08022024
 8020ed4:	08022028 	.word	0x08022028

08020ed8 <__retarget_lock_acquire_recursive>:
 8020ed8:	4770      	bx	lr

08020eda <__retarget_lock_release_recursive>:
 8020eda:	4770      	bx	lr

08020edc <__register_exitproc>:
 8020edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020ee0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8020f58 <__register_exitproc+0x7c>
 8020ee4:	4606      	mov	r6, r0
 8020ee6:	f8da 0000 	ldr.w	r0, [sl]
 8020eea:	4698      	mov	r8, r3
 8020eec:	460f      	mov	r7, r1
 8020eee:	4691      	mov	r9, r2
 8020ef0:	f7ff fff2 	bl	8020ed8 <__retarget_lock_acquire_recursive>
 8020ef4:	4b19      	ldr	r3, [pc, #100]	; (8020f5c <__register_exitproc+0x80>)
 8020ef6:	681b      	ldr	r3, [r3, #0]
 8020ef8:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8020efc:	b91c      	cbnz	r4, 8020f06 <__register_exitproc+0x2a>
 8020efe:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8020f02:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8020f06:	6865      	ldr	r5, [r4, #4]
 8020f08:	f8da 0000 	ldr.w	r0, [sl]
 8020f0c:	2d1f      	cmp	r5, #31
 8020f0e:	dd05      	ble.n	8020f1c <__register_exitproc+0x40>
 8020f10:	f7ff ffe3 	bl	8020eda <__retarget_lock_release_recursive>
 8020f14:	f04f 30ff 	mov.w	r0, #4294967295
 8020f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020f1c:	b19e      	cbz	r6, 8020f46 <__register_exitproc+0x6a>
 8020f1e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8020f22:	2201      	movs	r2, #1
 8020f24:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8020f28:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8020f2c:	40aa      	lsls	r2, r5
 8020f2e:	4313      	orrs	r3, r2
 8020f30:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8020f34:	2e02      	cmp	r6, #2
 8020f36:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8020f3a:	bf02      	ittt	eq
 8020f3c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8020f40:	4313      	orreq	r3, r2
 8020f42:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8020f46:	1c6b      	adds	r3, r5, #1
 8020f48:	3502      	adds	r5, #2
 8020f4a:	6063      	str	r3, [r4, #4]
 8020f4c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8020f50:	f7ff ffc3 	bl	8020eda <__retarget_lock_release_recursive>
 8020f54:	2000      	movs	r0, #0
 8020f56:	e7df      	b.n	8020f18 <__register_exitproc+0x3c>
 8020f58:	200005a8 	.word	0x200005a8
 8020f5c:	08021f50 	.word	0x08021f50

08020f60 <floor>:
 8020f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020f64:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8020f68:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8020f6c:	2e13      	cmp	r6, #19
 8020f6e:	4602      	mov	r2, r0
 8020f70:	460b      	mov	r3, r1
 8020f72:	4607      	mov	r7, r0
 8020f74:	460c      	mov	r4, r1
 8020f76:	4605      	mov	r5, r0
 8020f78:	dc33      	bgt.n	8020fe2 <floor+0x82>
 8020f7a:	2e00      	cmp	r6, #0
 8020f7c:	da14      	bge.n	8020fa8 <floor+0x48>
 8020f7e:	a334      	add	r3, pc, #208	; (adr r3, 8021050 <floor+0xf0>)
 8020f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f84:	f7df f906 	bl	8000194 <__adddf3>
 8020f88:	2200      	movs	r2, #0
 8020f8a:	2300      	movs	r3, #0
 8020f8c:	f7df fd48 	bl	8000a20 <__aeabi_dcmpgt>
 8020f90:	b138      	cbz	r0, 8020fa2 <floor+0x42>
 8020f92:	2c00      	cmp	r4, #0
 8020f94:	da58      	bge.n	8021048 <floor+0xe8>
 8020f96:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8020f9a:	431d      	orrs	r5, r3
 8020f9c:	d001      	beq.n	8020fa2 <floor+0x42>
 8020f9e:	4c2e      	ldr	r4, [pc, #184]	; (8021058 <floor+0xf8>)
 8020fa0:	2500      	movs	r5, #0
 8020fa2:	4623      	mov	r3, r4
 8020fa4:	462f      	mov	r7, r5
 8020fa6:	e025      	b.n	8020ff4 <floor+0x94>
 8020fa8:	4a2c      	ldr	r2, [pc, #176]	; (802105c <floor+0xfc>)
 8020faa:	fa42 f806 	asr.w	r8, r2, r6
 8020fae:	ea01 0208 	and.w	r2, r1, r8
 8020fb2:	4302      	orrs	r2, r0
 8020fb4:	d01e      	beq.n	8020ff4 <floor+0x94>
 8020fb6:	a326      	add	r3, pc, #152	; (adr r3, 8021050 <floor+0xf0>)
 8020fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fbc:	f7df f8ea 	bl	8000194 <__adddf3>
 8020fc0:	2200      	movs	r2, #0
 8020fc2:	2300      	movs	r3, #0
 8020fc4:	f7df fd2c 	bl	8000a20 <__aeabi_dcmpgt>
 8020fc8:	2800      	cmp	r0, #0
 8020fca:	d0ea      	beq.n	8020fa2 <floor+0x42>
 8020fcc:	2c00      	cmp	r4, #0
 8020fce:	bfbe      	ittt	lt
 8020fd0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8020fd4:	fa43 f606 	asrlt.w	r6, r3, r6
 8020fd8:	19a4      	addlt	r4, r4, r6
 8020fda:	ea24 0408 	bic.w	r4, r4, r8
 8020fde:	2500      	movs	r5, #0
 8020fe0:	e7df      	b.n	8020fa2 <floor+0x42>
 8020fe2:	2e33      	cmp	r6, #51	; 0x33
 8020fe4:	dd0a      	ble.n	8020ffc <floor+0x9c>
 8020fe6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8020fea:	d103      	bne.n	8020ff4 <floor+0x94>
 8020fec:	f7df f8d2 	bl	8000194 <__adddf3>
 8020ff0:	4607      	mov	r7, r0
 8020ff2:	460b      	mov	r3, r1
 8020ff4:	4638      	mov	r0, r7
 8020ff6:	4619      	mov	r1, r3
 8020ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020ffc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8021000:	f04f 32ff 	mov.w	r2, #4294967295
 8021004:	fa22 f808 	lsr.w	r8, r2, r8
 8021008:	ea18 0f00 	tst.w	r8, r0
 802100c:	d0f2      	beq.n	8020ff4 <floor+0x94>
 802100e:	a310      	add	r3, pc, #64	; (adr r3, 8021050 <floor+0xf0>)
 8021010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021014:	f7df f8be 	bl	8000194 <__adddf3>
 8021018:	2200      	movs	r2, #0
 802101a:	2300      	movs	r3, #0
 802101c:	f7df fd00 	bl	8000a20 <__aeabi_dcmpgt>
 8021020:	2800      	cmp	r0, #0
 8021022:	d0be      	beq.n	8020fa2 <floor+0x42>
 8021024:	2c00      	cmp	r4, #0
 8021026:	da02      	bge.n	802102e <floor+0xce>
 8021028:	2e14      	cmp	r6, #20
 802102a:	d103      	bne.n	8021034 <floor+0xd4>
 802102c:	3401      	adds	r4, #1
 802102e:	ea25 0508 	bic.w	r5, r5, r8
 8021032:	e7b6      	b.n	8020fa2 <floor+0x42>
 8021034:	2301      	movs	r3, #1
 8021036:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802103a:	fa03 f606 	lsl.w	r6, r3, r6
 802103e:	4435      	add	r5, r6
 8021040:	42bd      	cmp	r5, r7
 8021042:	bf38      	it	cc
 8021044:	18e4      	addcc	r4, r4, r3
 8021046:	e7f2      	b.n	802102e <floor+0xce>
 8021048:	2500      	movs	r5, #0
 802104a:	462c      	mov	r4, r5
 802104c:	e7a9      	b.n	8020fa2 <floor+0x42>
 802104e:	bf00      	nop
 8021050:	8800759c 	.word	0x8800759c
 8021054:	7e37e43c 	.word	0x7e37e43c
 8021058:	bff00000 	.word	0xbff00000
 802105c:	000fffff 	.word	0x000fffff

08021060 <_init>:
 8021060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021062:	bf00      	nop
 8021064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021066:	bc08      	pop	{r3}
 8021068:	469e      	mov	lr, r3
 802106a:	4770      	bx	lr

0802106c <_fini>:
 802106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802106e:	bf00      	nop
 8021070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021072:	bc08      	pop	{r3}
 8021074:	469e      	mov	lr, r3
 8021076:	4770      	bx	lr
